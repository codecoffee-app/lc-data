{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706230,
            "title": "Partition a Linked List around a given value",
            "titleSlug": "partition-a-linked-list-around-a-given-value",
            "content": "<div><span style=\"font-size: 12pt;\">Given a linked list and a value <strong>x</strong>, partition it such that all nodes less than x come first, then all nodes with a value equal to x, and finally nodes with a value greater than x. The original relative order of the nodes in each of the three partitions should be preserved. The partition must work in place.</span></div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></div>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>Linked list:<strong> </strong>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2-&gt;3, x = 3\n<strong>Output: </strong>1-&gt;2-&gt;2-&gt;3-&gt;3-&gt;4-&gt;5<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/706230/Web/Other/blobid0_1722448150.png\" height=\"100\" /><br /><strong>Explanation: </strong>Nodes with a value less than 3 come first, then equal to 3 and then greater than 3.\n</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>Linked list: 1-&gt;4-&gt;2-&gt;10, x = 3\n<strong>Output: </strong>1-&gt;2-&gt;4-&gt;10<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/706230/Web/Other/blobid1_1722448159.png\" height=\"100\" /><br /><strong>Explanation: </strong>Nodes with value less than 3 come first, then equal to 3 and then greater than 3.</span></pre>\n<div><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity :</strong> O(n)</span></div>\n<div><span style=\"font-size: 12pt;\"><strong>Expected Space C</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">omplexity</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> O(n)</span></span></div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 12pt;\"><strong>Constraints:</strong></span></div>\n<div><span style=\"font-size: 12pt;\">1 &lt;= size of linked list &lt;= 10<sup>5</sup></span></div>\n<div><span style=\"font-size: 12pt;\">1 &lt;= data of node &lt;= 10<sup>5</sup></span></div>\n<div><span style=\"font-size: 12pt;\">1 &lt;= x &lt;= 10<sup>5</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a linked list and a value `x`, rearrange the list so that all nodes with values less than `x` come first, followed by nodes with values equal to `x`, and finally nodes with values greater than `x`.  The original relative order of nodes within each of the three partitions must be maintained. The rearrangement should be performed in-place.",
                "constraints": [
                    "1 <= size of linked list <= 10^5",
                    "1 <= data of node <= 10^5",
                    "1 <= x <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "Linked list: 1->4->3->2->5->2->3, x = 3",
                        "output": "1->2->2->3->3->4->5",
                        "explanation": "Nodes with values less than 3 appear first, followed by nodes equal to 3, and then nodes greater than 3. The relative order within each group is preserved."
                    },
                    {
                        "input": "Linked list: 1->4->2->10, x = 3",
                        "output": "1->2->4->10",
                        "explanation": "Nodes with values less than 3 appear first, followed by nodes equal to 3 (none in this case), and then nodes greater than 3.  The relative order within each group is preserved."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Maintain three lists for values smaller than x, equal to x and greater than x.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    struct Node *partition(struct Node *head, int x) {\n        /* Let us initialize first and last nodes of\n          three linked lists\n            1) Linked list of values smaller than x.\n            2) Linked list of values equal to x.\n            3) Linked list of values greater than x.*/\n        struct Node *smallerHead = NULL, *smallerLast = NULL;\n        struct Node *greaterLast = NULL, *greaterHead = NULL;\n        struct Node *equalHead = NULL, *equalLast = NULL;\n\n        // Now iterate original list and connect nodes\n        // of appropriate linked lists.\n        while (head != NULL) {\n            // If current node is equal to x, append it\n            // to the list of x values\n            if (head->data == x) {\n                if (equalHead == NULL)\n                    equalHead = equalLast = head;\n                else {\n                    equalLast->next = head;\n                    equalLast = equalLast->next;\n                }\n            }\n\n            // If current node is less than X, append\n            // it to the list of smaller values\n            else if (head->data < x) {\n                if (smallerHead == NULL)\n                    smallerLast = smallerHead = head;\n                else {\n                    smallerLast->next = head;\n                    smallerLast = head;\n                }\n            } else // Append to the list of greater values\n            {\n                if (greaterHead == NULL)\n                    greaterLast = greaterHead = head;\n                else {\n                    greaterLast->next = head;\n                    greaterLast = head;\n                }\n            }\n\n            head = head->next;\n        }\n\n        // Fix end of greater linked list to NULL if this\n        // list has some nodes\n        if (greaterLast != NULL)\n            greaterLast->next = NULL;\n\n        // Connect three lists\n\n        // If smaller list is empty\n        if (smallerHead == NULL) {\n            if (equalHead == NULL)\n                return greaterHead;\n            equalLast->next = greaterHead;\n            return equalHead;\n        }\n\n        // If smaller list is not empty\n        // and equal list is empty\n        if (equalHead == NULL) {\n            smallerLast->next = greaterHead;\n            return smallerHead;\n        }\n\n        // If both smaller and equal list\n        // are non-empty\n        smallerLast->next = equalHead;\n        equalLast->next = greaterHead;\n        return smallerHead;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static Node partition(Node head, int x) {\n\n        /* Let us initialize first and last nodes of\n          three linked lists\n            1) Linked list of values smaller than x.\n            2) Linked list of values equal to x.\n            3) Linked list of values greater than x.*/\n        Node smallerHead = null, smallerLast = null;\n        Node greaterLast = null, greaterHead = null;\n        Node equalHead = null, equalLast = null;\n\n        // Now iterate original list and connect nodes\n        // of appropriate linked lists.\n        while (head != null) {\n            // If current node is equal to x, append it\n            // to the list of x values\n            if (head.data == x) {\n                if (equalHead == null)\n                    equalHead = equalLast = head;\n                else {\n                    equalLast.next = head;\n                    equalLast = equalLast.next;\n                }\n            }\n\n            // If current node is less than X, append\n            // it to the list of smaller values\n            else if (head.data < x) {\n                if (smallerHead == null)\n                    smallerLast = smallerHead = head;\n                else {\n                    smallerLast.next = head;\n                    smallerLast = head;\n                }\n            } else // Append to the list of greater values\n            {\n                if (greaterHead == null)\n                    greaterLast = greaterHead = head;\n                else {\n                    greaterLast.next = head;\n                    greaterLast = head;\n                }\n            }\n\n            head = head.next;\n        }\n\n        // Fix end of greater linked list to null if this\n        // list has some nodes\n        if (greaterLast != null) greaterLast.next = null;\n\n        // Connect three lists\n\n        // If smaller list is empty\n        if (smallerHead == null) {\n            if (equalHead == null) return greaterHead;\n            equalLast.next = greaterHead;\n            return equalHead;\n        }\n\n        // If smaller list is not empty\n        // and equal list is empty\n        if (equalHead == null) {\n            smallerLast.next = greaterHead;\n            return smallerHead;\n        }\n\n        // If both smaller and equal list\n        // are non-empty\n        smallerLast.next = equalHead;\n        equalLast.next = greaterHead;\n        return smallerHead;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def partition(self, head, x):\n        # Let us initialize first and last nodes of\n        # three linked lists\n        # 1) Linked list of values smaller than x.\n        # 2) Linked list of values equal to x.\n        # 3) Linked list of values greater than x.\n        smallerHead = None\n        smallerLast = None\n        greaterLast = None\n        greaterHead = None\n        equalHead = None\n        equalLast = None\n\n        # Now iterate original list and connect nodes\n        # of appropriate linked lists.\n        while (head != None):\n\n            # If current node is equal to x, append it\n            # to the list of x values\n            if (head.data == x):\n\n                if (equalHead == None):\n                    equalHead = equalLast = head\n                else:\n\n                    equalLast.next = head\n                    equalLast = equalLast.next\n\n            # If current node is less than X, append\n            # it to the list of smaller values\n            elif (head.data < x):\n\n                if (smallerHead == None):\n                    smallerLast = smallerHead = head\n                else:\n\n                    smallerLast.next = head\n                    smallerLast = head\n\n            else:\n                # Append to the list of greater values\n\n                if (greaterHead == None):\n                    greaterLast = greaterHead = head\n                else:\n\n                    greaterLast.next = head\n                    greaterLast = head\n\n            head = head.next\n\n        # Fix end of greater linked list to None if this\n        # list has some nodes\n        if (greaterLast != None):\n            greaterLast.next = None\n\n        # Connect three lists\n\n        # If smaller list is empty\n        if (smallerHead == None):\n\n            if (equalHead == None):\n                return greaterHead\n            equalLast.next = greaterHead\n            return equalHead\n\n        # If smaller list is not empty\n        # and equal list is empty\n        if (equalHead == None):\n\n            smallerLast.next = greaterHead\n            return smallerHead\n\n        # If both smaller and equal list\n        # are non-empty\n        smallerLast.next = equalHead\n        equalLast.next = greaterHead\n        return smallerHead\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {Node} node\n * @return {Node} node\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n\nlet head;\nThis is method only submission.\nYou only need to complete the below method.\n*/\n\nclass Solution {\n    /* Should do this in-place without altering the nodes' values.*/\n    partition(node, x) {\n        let smallerHead = null;\n        let smallerLast = null;\n        let greaterLast = null;\n        let greaterHead = null;\n        let equalHead = null;\n        let equalLast = null;\n\n        while (node != null) {\n            if (node.data == x) {\n                if (equalHead == null)\n                    equalHead = equalLast = node;\n                else {\n                    equalLast.next = node;\n                    equalLast = equalLast.next;\n                }\n            } else if (node.data < x) {\n                if (smallerHead == null)\n                    smallerLast = smallerHead = node;\n                else {\n                    smallerLast.next = node;\n                    smallerLast = node;\n                }\n            } else {\n                if (greaterHead == null)\n                    greaterLast = greaterHead = node;\n                else {\n                    greaterLast.next = node;\n                    greaterLast = node;\n                }\n            }\n\n            node = node.next;\n        }\n\n        if (greaterLast != null) greaterLast.next = null;\n\n        if (smallerHead == null) {\n            if (equalHead == null) return greaterHead;\n            equalLast.next = greaterHead;\n            return equalHead;\n        }\n\n        if (equalHead == null) {\n            smallerLast.next = greaterHead;\n            return smallerHead;\n        }\n\n        smallerLast.next = equalHead;\n        equalLast.next = greaterHead;\n        return smallerHead;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}