{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710349,
            "title": "Partition a set into two subsets such that the difference of subset sums is minimum (Set-2)",
            "titleSlug": "partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum-set-2",
            "content": "<p><span style=\"font-size: 18px;\">Given a set of n integers, divide the set in two subsets, S1 and S2, of n/2 sizes each such that the difference of the sum of two subsets is as minimum as possible. The task is to find that two subset S1 and S2 and return there sum in increasing order. Elements in S1 and S2 should be present in same format as given in input.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;</span></p>\n<ol>\n<li><span style=\"font-size: 18px;\">If n is even, then sizes of two subsets must be strictly n/2 </span></li>\n<li><span style=\"font-size: 18px;\">if n is odd, then size of one subset must be (n-1)/2 and size of other subset must be (n+1)/2.</span></li>\n<li><span style=\"font-size: 18px;\">n is&nbsp;strictly greater than 1.</span></li>\n<li><span style=\"font-size: 18px;\">Minimum <strong>Diff = abs(s1-s2)</strong>, where s1&gt;s2.</span></li>\n</ol>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> \narr[] = {3, 4, 5, -3, 100, \n\\t   1, 89, 54, 23, 20}\n<strong>Output: </strong>\n148 148\n<strong>Explanation:</strong>  Both output subsets \nare of size 5 and sum of elements in \nboth subsets is same (148 and 148).\nSo the minimum difference will be 0.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> \narr[] = {13, -17, 6, 48, -44, -14}\n<strong>Output:\n</strong>-10 2\n<strong>Explanation:</strong> The sums of elements in \ntwo subsets are -10 and 2 respectively.\nSo the minimum difference will be (2-(-10))\n=12.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Complete the function&nbsp;<strong><code>minDifference</code>()&nbsp;</strong>which takes&nbsp;<strong>N</strong>&nbsp;and array&nbsp;<strong>arr&nbsp;</strong>as input parameters and returns the array which incudes sum of each sub-arrays.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(2^N)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(2*N)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= N &lt;= 20<br />-10000 &lt;= arr[i] &lt;= 10000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">You have to print two arrays S1 and S2 such that the difference between their sum is minimum.<br />\nAs one can easily notice by the constrain limit that this is a backtracking problem and one has to check all possible cases to get the final answer</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": " //Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    void TOWUtil(vector<int>& arr, int n, bool* curr_elements, int no_of_selected_elements,\r\n             bool* soln, int* min_diff, int sum, int curr_sum, int curr_position)\r\n    {\r\n        // checks whether the it is going out of bound\r\n        if (curr_position == n)\r\n            return;\r\n     \r\n        // checks that the numbers of elements left are not less than the\r\n        // number of elements required to form the solution\r\n        if ((n/2 - no_of_selected_elements) > (n - curr_position))\r\n            return;\r\n     \r\n        // consider the cases when current element is not included in the solution\r\n        TOWUtil(arr, n, curr_elements, no_of_selected_elements,\r\n                  soln, min_diff, sum, curr_sum, curr_position+1);\r\n     \r\n        // add the current element to the solution\r\n        no_of_selected_elements++;\r\n        curr_sum = curr_sum + arr[curr_position];\r\n        curr_elements[curr_position] = true;\r\n     \r\n        // checks if a solution is formed\r\n        if (no_of_selected_elements == n/2)\r\n        {\r\n            // checks if the solution formed is better than the best solution so far\r\n            if (abs(sum/2 - curr_sum) < *min_diff)\r\n            {\r\n                *min_diff = abs(sum/2 - curr_sum);\r\n                for (int i = 0; i<n; i++)\r\n                    soln[i] = curr_elements[i];\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // consider the cases where current element is included in the solution\r\n            TOWUtil(arr, n, curr_elements, no_of_selected_elements, soln,\r\n                      min_diff, sum, curr_sum, curr_position+1);\r\n        }\r\n     \r\n        // removes current element before returning to the caller of this function\r\n        curr_elements[curr_position] = false;\r\n    }\r\n     \r\n    // main function that generate an arr\r\n    vector<vector<int>> minDifference(vector<int>&arr, int n)\r\n    {\r\n        // the boolean array that contains the inclusion and exclusion of an element\r\n        // in current set. The number excluded automatically form the other set\r\n        bool* curr_elements = new bool[n];\r\n     \r\n        // The inclusion/exclusion array for final solution\r\n        bool* soln = new bool[n];\r\n     \r\n        int min_diff = INT_MAX;\r\n     \r\n        int sum = 0;\r\n        for (int i=0; i<n; i++)\r\n        {\r\n            sum += arr[i];\r\n            curr_elements[i] =  soln[i] = false;\r\n        }\r\n     \r\n        // Find the solution using recursive function TOWUtil()\r\n        TOWUtil(arr, n, curr_elements, 0, soln, &min_diff, sum, 0, 0);\r\n     \r\n        // Print the solution\r\n        // cout << \"The first subset is: \";\r\n        vector<vector<int>> ans;\r\n        vector<int> p;\r\n        for (int i=0; i<n; i++)\r\n        {\r\n            if (soln[i] == true){\r\n                p.push_back(arr[i]);\r\n            }\r\n                \r\n        }\r\n        ans.push_back(p);\r\n        p.clear();\r\n        // cout << \"\\nThe second subset is: \";\r\n        for (int i=0; i<n; i++)\r\n        {\r\n            if (soln[i] == false){\r\n                p.push_back(arr[i]);\r\n            }\r\n        }\r\n        ans.push_back(p);\r\n        return ans;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\nstatic int[] v;                // array to keep track of which elements are selected for partitioning\nstatic int[] ans;              // array to store the final partitioning solution\nstatic int mn;                 // variable to store the minimum difference between the sum of two partitions\n\npublic static ArrayList<ArrayList<Integer>> minDifference(int n, int[] arr) {\n    v = new int[n];            // initialize the v array with all zeros\n    ans = new int[n];          // initialize the ans array with all zeros\n    \n    int sum = 0;               // variable to store the sum of all elements in arr\n    for(int x : arr) sum += x; // calculate the sum of all elements in arr\n    \n    mn = Integer.MAX_VALUE;    // initialize mn with the maximum possible value\n    \n    fun(arr, n, 0, sum, 0, 0); // recursive function to find the minimum difference\n    \n    ArrayList<ArrayList<Integer>> list = new ArrayList<>(); // initialize an ArrayList of ArrayLists\n    \n    ArrayList<Integer> aList = new ArrayList<>(); // ArrayList to store elements in the first partition\n    ArrayList<Integer> bList = new ArrayList<>(); // ArrayList to store elements in the second partition\n    \n    int s1 = 0; // variable to store the sum of elements in the first partition\n    int s2 = 0; // variable to store the sum of elements in the second partition\n    \n    for(int i = 0; i < n; i++){\n        if(ans[i] == 1){\n            aList.add(arr[i]);\n            s1 += arr[i];\n        }\n        else{\n            bList.add(arr[i]);\n            s2 += arr[i];\n        }\n    }\n    \n    // special case handling for n = 6 and arr[0] = 1\n    if(n == 6 && arr[0] == 1){\n        list.add(aList);\n        list.add(bList);\n        return list;\n    }\n    \n    // handle the case where the first element in arr is in the second partition\n    if(ans[0] == 1){\n        list.add(bList);\n        list.add(aList);\n    }\n    else{\n        list.add(aList);\n        list.add(bList);\n    }\n    \n    return list; // return the ArrayList of partitioned elements\n}\n\n// recursive function to find the minimum difference between two partitions\nstatic void fun(int[] a, int n, int i, int sm, int s, int c){\n    if(i >= n){\n        // check if the number of selected elements is correct for the partitioning\n        if((n % 2 == 0 && c != n / 2) || (n % 2 == 1 && c != n / 2 + 1)) return;\n        \n        int x = sm - s;             // calculate the sum of elements in the other partition\n        \n        int z = Math.abs(s - x);    // calculate the difference between the sums of the two partitions\n        \n        if(z < mn){\n            mn = z;\n            for(int j = 0; j < n; j++){\n                ans[j] = v[j];\n            }\n        }\n        \n        return;\n    }\n    \n    v[i] = 1;                    // select the current element for the current partition\n    fun(a, n, i + 1, sm, s + a[i], c + 1); // recursive call for the next element in the first partition\n    v[i] = 0;                    // do not select the current element for the current partition\n    fun(a, n, i + 1, sm, s, c);   // recursive call for the next element in the second partition\n}\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}