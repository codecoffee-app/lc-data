{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712540,
            "title": "Partition Array for Maximum Sum",
            "titleSlug": "partition-array-for-maximum-sum",
            "content": "<p><span style=\"font-size:18px\">Given an integer array&nbsp;<strong><code>arr</code></strong>, partition the array into (contiguous) subarrays of length&nbsp;<strong>at most</strong>&nbsp;<strong><code>k</code></strong>. After partitioning, each subarray has their values changed to become the maximum value of that subarray.&nbsp;Return&nbsp;the largest sum of the given array after partitioning.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>n = 7\r\nk = 3\r\narr = [1,15,7,9,2,5,10]\r\n<strong>Output:</strong>\r\n84\r\n<strong>Explanation:</strong>\r\narr becomes [15,15,15,9,10,10,10]</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>n = 1\r\nk = 1\r\narr = [1]\r\n<strong>Output:</strong>\r\n1</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span><br />\r\n<span style=\"font-size:18px\">You don&#39;t have to read input or print anything. Your task is to complete the function&nbsp;<strong>Solve()&nbsp;</strong>which takes the integer&nbsp;<strong>n</strong>&nbsp;and array&nbsp;<strong>arr and </strong>integer<strong> k</strong>&nbsp;and returns the Largest Sum of the Array after Partitioning.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>: O(n<sup>2</sup>)<br />\r\n<strong>Expected Space Complexity:</strong> O(n)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraint:</strong><br />\r\n1 &lt;= n &lt;= 500<br />\r\n0 &lt;= arr[i] &lt;= 10<sup>9</sup><br />\r\n1 &lt;= k &lt;= n</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr`, partition it into contiguous subarrays of length at most `k`. After partitioning, each subarray's values are replaced with the maximum value found within that subarray. Return the largest possible sum of the array after this partitioning process.",
                "constraints": [
                    "1 <= n <= 500",
                    "0 <= arr[i] <= 10^9",
                    "1 <= k <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 7\nk = 3\narr = [1,15,7,9,2,5,10]",
                        "output": "84",
                        "explanation": "The array can be partitioned into [1, 15, 7], [9, 2, 5], and [10]. Replacing each subarray with its maximum value results in [15, 15, 15, 9, 9, 9, 10,10,10]. The sum is 15*3 + 9 *3 + 10*3 which equals 45+27 + 30 = 84.  An optimal partitioning is [15,15,15,9,10,10,10] which gives 15*3+9+10*3 which equals 45+9+30 = 84"
                    },
                    {
                        "input": "n = 1\nk = 1\narr = [1]",
                        "output": "1",
                        "explanation": "The array is already of length 1, so the maximum value (which is 1) replaces the value. The sum is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n    int solve(int n, int k, vector<int>& arr){\r\n        vector<int> dp(n+1);\r\n        \r\n        for(int i=1; i<=n; ++i){\r\n            int curmax = 0, best=0;\r\n            for(int j=1; j<=k && i-j>=0 ; ++j){\r\n                curmax = max(curmax, arr[i-j]);\r\n                best = max(best, dp[i-j]+ curmax * j);\r\n            }\r\n            dp[i] = best;\r\n        }\r\n        return dp[n];\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    // function to solve the problem\r\n    public int solve(int N, int k, int arr[]){\r\n        // create an array to store the maximum score at each position\r\n        int []dp=new int[N+1];\r\n        \r\n        // iterate over each position\r\n        for(int i=1;i<=N;i++){\r\n            int curmax=0, best=0;\r\n            \r\n            // choose the maximum score from previous k positions\r\n            for(int j=1;j<=k && i-j>=0; j++){\r\n                curmax= Math.max(curmax, arr[i-j]);\r\n                best= Math.max(best, dp[i-j]+curmax*j);\r\n            }\r\n            \r\n            // store the maximum score at current position\r\n            dp[i]=best;\r\n        }\r\n        \r\n        // return the maximum score at last position\r\n        return dp[N];\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to find the maximum sum of elements by considering k elements.\n    def solve(self, n, k, arr):\n        \n        #Initializing dp array with 0.\n        dp=[0]*(n+1)\n        \n        #Iterating from 1 to n.\n        for i in range(1,n+1):\n            curmax=0\n            best=0\n            j=1\n            \n            #Calculating the maximum value in the range i-j to i.\n            while(j<=k and i-j>=0):\n                curmax=max(curmax, arr[i-j])\n                best= max(best, dp[i-j]+curmax*j)\n                j=j+1\n            \n            #Storing the maximum sum in the dp array for i elements.\n            dp[i]=best\n        \n        #Returning the maximum sum from the dp array for n elements.\n        return dp[n]",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}