{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702903,
            "title": "Partition Point in the Array",
            "titleSlug": "partition-point-in-the-array0004",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of integers. Find an element such that all the elements to its left are smaller and to its right are greater. Print -1 if no such element exists.</span></p>\n<p><span style=\"font-size: 18px;\"><strong> Note:</strong>&nbsp; There can be more than one such element. In that case, print the first such number occurring in the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 3, 2, 5, 8, 6, 7]\n<strong>Output:</strong> 5\n<strong>Explanation</strong>: To the left of element 5 every element is smaller to it and to the right of element 5 every element is greater to it.  </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 6, 2, 8, 10, 9, 8]\n<strong>Output:</strong> -1\n<strong>Explanation</strong>: No such desired element is present in the array.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6<br /></sup></span><span style=\"font-size: 18px;\">1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the first element where all elements to its left are smaller and all elements to its right are greater. If no such element exists, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[4, 3, 2, 5, 8, 6, 7]",
                        "output": "5",
                        "explanation": "The element 5 satisfies the condition: all elements to its left (4, 3, 2) are smaller, and all elements to its right (8, 6, 7) are greater."
                    },
                    {
                        "input": "[5, 6, 2, 8, 10, 9, 8]",
                        "output": "-1",
                        "explanation": "No element in the array satisfies the condition; therefore, -1 is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use arrays to keep track of the maximum elements to the left and minimum elements to the right, then check if any element satisfies the condition of being greater than the maximum on its left and smaller than the minimum on its right.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the element from the array.\n    int FindElement(vector<int>& arr) {\n        int n = arr.size(); // Get the size of the vector\n        if (n == 1)\n            return arr[0];\n\n        // Vectors to store the greater element on left and smaller element on right.\n        vector<int> SE(n + 1);\n        vector<int> GE(n + 1);\n\n        // Initializing the vectors with first and last elements of the given array.\n        GE[0] = arr[0];\n        SE[n - 1] = arr[n - 1];\n\n        // Calculating the greater element on the left for each index.\n        for (int i = 1; i < n; i++) {\n            GE[i] = max(GE[i - 1], arr[i]);\n        }\n\n        // Calculating the smaller element on the right for each index.\n        for (int i = n - 2; i >= 0; i--) {\n            SE[i] = min(SE[i + 1], arr[i]);\n        }\n\n        // Iterating through the array to find the element.\n        for (int j = 0; j < n; j++) {\n            // Checking if the current element satisfies the condition.\n            if ((j == 0 && j + 1 < n && arr[j] < SE[j + 1]) ||\n                (j == n - 1 && j - 1 >= 0 && arr[j] > GE[j - 1]) ||\n                (j > 0 && j < n - 1 && arr[j] < SE[j + 1] && arr[j] > GE[j - 1])) {\n                return arr[j];\n            }\n        }\n\n        // Returning -1 if no such element is found.\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the element from the array.\n    int FindElement(int[] arr) {\n        int n = arr.length;\n        // Create an array 'SE[]' that will\n        // store smaller element on right side.\n        if (n == 1) return arr[0];\n        int[] SE = new int[n + 1];\n\n        // Create an another array 'GE[]' that\n        // will store greatest element on left side.\n        int[] GE = new int[n + 1];\n\n        // initialize first and last index of SE[], GE[]\n        GE[0] = arr[0];\n        SE[n - 1] = arr[n - 1];\n\n        // store greatest element from left to right\n        for (int i = 1; i < n; i++) {\n            if (GE[i - 1] < arr[i])\n                GE[i] = arr[i];\n            else\n                GE[i] = GE[i - 1];\n        }\n\n        // store smallest element from right to left\n        for (int i = n - 2; i >= 0; i--) {\n            if (arr[i] < SE[i + 1])\n                SE[i] = arr[i];\n            else\n                SE[i] = SE[i + 1];\n        }\n\n        // Now find a number which is greater than all\n        // elements at it's left and smaller than all\n        // then elements to it's right\n        for (int j = 0; j < n; j++) {\n            if ((j == 0 && j + 1 < n && arr[j] < SE[j + 1]) ||\n                (j == n - 1 && j - 1 >= 0 && arr[j] > GE[j - 1]) ||\n                (j + 1 < n && j - 1 >= 0 && arr[j] < SE[j + 1] && arr[j] > GE[j - 1]))\n                return arr[j];\n        }\n\n        return -1;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def FindElement(self, arr):\n        n = len(arr)  # Get the size of the array\n\n        if n == 1:\n            return arr[0]  # Special case where there's only one element\n\n        # Arrays to store the greater element on the left and smaller element on the right.\n        SE = [float('inf')] * (n + 1)\n        GE = [-float('inf')] * (n + 1)\n\n        # Initializing the arrays with the first and last elements of the given array.\n        GE[0] = arr[0]\n        SE[n - 1] = arr[n - 1]\n\n        # Calculating the greater element on the left for each index.\n        for i in range(1, n):\n            GE[i] = max(GE[i - 1], arr[i])\n\n        # Calculating the smaller element on the right for each index.\n        for i in range(n - 2, -1, -1):\n            SE[i] = min(SE[i + 1], arr[i])\n\n        # Iterating through the array to find the element.\n        for j in range(n):\n            # Checking if the current element satisfies the condition.\n            if (j == 0 and arr[j] < SE[j + 1]) or \\\n               (j == n - 1 and arr[j] > GE[j - 1]) or \\\n               (j > 0 and j < n - 1 and arr[j] < SE[j + 1] and arr[j] > GE[j - 1]):\n                return arr[j]\n\n        # Returning -1 if no such element is found.\n        return -1\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to find the number that satisfies the conditions\n    FindElement(arr) {\n        const n = arr.length; // Get the size of the array\n        if (n == 1) return arr[0];\n        // Arrays to store the greater element on the left and the smaller element on\n        // the right\n        const SE = new Array(n + 1);\n        const GE = new Array(n + 1);\n\n        // Initialize the arrays\n        GE[0] = arr[0];\n        SE[n - 1] = arr[n - 1];\n\n        // Fill the GE array with the greatest elements on the left\n        for (let i = 1; i < n; i++) {\n            GE[i] = Math.max(GE[i - 1], arr[i]);\n        }\n\n        // Fill the SE array with the smallest elements on the right\n        for (let i = n - 2; i >= 0; i--) {\n            SE[i] = Math.min(SE[i + 1], arr[i]);\n        }\n\n        // Find the element that satisfies the conditions\n        for (let j = 0; j < n; j++) {\n            if ((j === 0 && arr[j] < SE[j + 1]) ||\n                (j === n - 1 && arr[j] > GE[j - 1]) ||\n                (j > 0 && j < n - 1 && arr[j] < SE[j + 1] && arr[j] > GE[j - 1])) {\n                return arr[j];\n            }\n        }\n\n        // Return -1 if no such element is found\n        return -1;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}