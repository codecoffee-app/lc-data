{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713999,
            "title": "Partition the Array",
            "titleSlug": "partition-the-array--170647",
            "content": "<p><span style=\"font-size:18px\">Given an array&nbsp;<strong>A[]&nbsp;</strong>of&nbsp;<strong>N&nbsp;</strong>integers. The task is to partition the array into four non-empty contiguous subarrays&nbsp;<strong>P, Q, R, and S </strong>such that each element of the array <strong>A[]</strong> should be present in any subarray.<br />\r\nLet&nbsp;<strong>W, X, Y, and Z</strong> be the sum of the elements in&nbsp;<strong>P, Q, R, and S</strong> respectively.<br />\r\nFind the smallest absolute difference between the maximum and the minimum among<strong> W, X, Y, and Z</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 5\r\nA[] = [4,2,2,5,1]\r\n<strong>Output: </strong>4\r\n<strong>Explanation: </strong>let partition the array \r\nP,Q,R,S = [4],[2,2],[5],[1]\r\nW = 4, X = 4, Y = 5, Z = 1 \r\nDiffernce = max(W,X,Y,Z)-min(W,X,Y,Z)= 5-1 = 4 </span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 4\r\nA[] = {4,4,4,4}\r\n<strong>Output: </strong>0\r\n<strong>Explanation: \r\n</strong>There is only one way to partition \r\nthe array. P,Q,R,S = [4],[4],[4],[4]</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything.&nbsp;</span><span style=\"font-size:18px\">The task is to complete the function&nbsp;<strong>minDifference</strong>() which takes the integer&nbsp;<strong>N&nbsp;</strong>and the array&nbsp;<strong>A[]&nbsp;</strong>as inputs and returns the smallest absolute difference.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(NLogN)<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n4&nbsp;<u>&lt;&nbsp;</u>N&nbsp;<u>&lt;&nbsp;</u>10<sup>5</sup><br />\r\n1&nbsp;<u>&lt;&nbsp;</u>A[i]&nbsp;<u>&lt;&nbsp;</u>10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array **A[]** of **N** integers, partition it into four non-empty contiguous subarrays **P, Q, R, and S**. Each element of **A[]** must belong to one of these subarrays.\n\nLet **W, X, Y, and Z** represent the sums of the elements in **P, Q, R, and S**, respectively. Find the minimum absolute difference between the maximum and the minimum of **W, X, Y, and Z**.",
                "constraints": [
                    "4 <= N <= 10^5",
                    "1 <= A[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 5\nA[] = [4,2,2,5,1]",
                        "output": "4",
                        "explanation": "Partition the array as P=[4], Q=[2,2], R=[5], S=[1].  Then W=4, X=4, Y=5, Z=1. The difference is max(W,X,Y,Z) - min(W,X,Y,Z) = 5-1 = 4."
                    },
                    {
                        "input": "N = 4\nA[] = {4,4,4,4}",
                        "output": "0",
                        "explanation": "There is only one way to partition the array: P=[4], Q=[4], R=[4], S=[4]. In this case, W=X=Y=Z=4, and the difference is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each i, Partition the array A[1 ..i] into 2 parts and A[i+1..N] into 2 parts, using the Prefix Sum Table.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution\n{\npublic:\n    // Function to calculate the prefix sum array and store the differences in a vector of arrays\n    vector<array<long long,2>> help(vector<int> &a){\n        int n=a.size();\n        long long p[n+1]={0};\n        for(int i=0;i<n;i++){\n            p[i]=a[i];\n            if(i>0){\n                p[i]+=p[i-1];\n            }\n        }\n        vector<array<long long,2>> tmp;\n        tmp.push_back({0,0});\n        for(int i=1;i<n;i++){\n            int l=1,h=i;\n            long long dif=2e18;\n            array<long long,2> t;\n\n            // Binary search to find the minimum difference between corresponding prefix sums\n            while(l<=h){\n                int mid=(l+h)/2;\n                long long x=p[mid-1];\n                long long y=p[i]-x;\n\n                if(abs(x-y)<dif){\n                    dif=abs(x-y);\n                    t={x,y};\n                }\n            \n                if(x>y){\n                    h=mid-1;\n                }\n                else{\n                    l=mid+1;\n                }\n            }\n            tmp.push_back(t);\n        }\n        return tmp;\n    }\n\n    // Function to find the minimum difference between pairs of prefix sums\n    long long minDifference(int N, vector<int> A) {\n        long long ans=2e18;\n        auto x=help(A);\n        reverse(A.begin(),A.end());\n        auto y=help(A);\n        reverse(y.begin(),y.end());\n\n        // Finding the minimum difference between pairs of prefix sums\n        for(int i=1;i+2<N;i++){\n            ans=min(ans,max({x[i][0],x[i][1], y[i+1][0],y[i+1][1]}) - min({x[i][0],x[i][1], y[i+1][0],y[i+1][1]}));\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution \r\n{\r\n\tArrayList<long []> help(int [] a){\r\n        int n=a.length;\r\n        long [] p = new long[n+1];\r\n        for(int i=0;i<n;i++){\r\n            p[i]=a[i];\r\n            if(i>0){\r\n              p[i]+=p[i-1];\r\n            }\r\n        }\r\n        ArrayList<long []> tmp = new ArrayList<>();\r\n        long arr[] = {0,0};\r\n        tmp.add(arr);\r\n        for(int i=1;i<n;i++){\r\n            int l=1,h=i;\r\n            long dif = (long)2e18;\r\n            long [] t = new long[2];\r\n            \r\n            while(l<=h){\r\n                int mid=(l+h)/2;\r\n                long x=p[mid-1];\r\n                long y=p[i]-x;\r\n                \r\n                if(Math.abs(x-y)<dif){\r\n                dif=Math.abs(x-y);\r\n                t[0] = x; t[1] = y;\r\n                }\r\n                \r\n                if(x>y){\r\n                  h=mid-1;\r\n                }\r\n                else{\r\n                  l=mid+1;\r\n                }\r\n            }\r\n            tmp.add(t);\r\n        }\r\n        \r\n        return tmp;\r\n        }\r\n\tvoid reverse(int a[])\r\n    {\r\n\t\tint n = a.length;\r\n        int i, k, t;\r\n        for (i = 0; i < n / 2; i++) {\r\n            t = a[i];\r\n            a[i] = a[n - i - 1];\r\n            a[n - i - 1] = t;\r\n        }\r\n  \r\n    }\r\n    \r\n\tlong minDifference(int N, int A[]) \r\n\t{ \r\n\t\tlong ans = (long)2e18;\r\n\t\tArrayList<long []> x = help(A);\r\n\t\treverse(A);\r\n        ArrayList<long []> y = help(A);\r\n        Collections.reverse(y);\r\n        for(int i=1;i+2<N;i++) {\r\n          ans=Math.min(ans, Math.max(Math.max(x.get(i)[0],x.get(i)[1]), Math.max(y.get(i+1)[0],y.get(i+1)[1])) - Math.min(Math.min(x.get(i)[0],x.get(i)[1]), Math.min(y.get(i+1)[0],y.get(i+1)[1])));\r\n        }\r\n\t\treturn ans;\r\n\t}\r\n} \r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\r\n    \r\n    def minDifference(self, N, A): \r\n        #code here\r\n        x = self.partition(A,N)\r\n        A.reverse()\r\n        y=  self.partition(A,N)\r\n        y.reverse()\r\n        ans = 10**18\r\n        for i in range(1,N-2):\r\n            ans=min(ans,max(x[i][0],x[i][1], y[i+1][0],y[i+1][1]) - min(x[i][0],x[i][1], y[i+1][0],y[i+1][1]))\r\n        return ans\r\n            \r\n    def partition(self,A,n):\r\n        tmp = [(0,0)]\r\n        p = A[:]\r\n        for i in range(1,n):\r\n            p[i] += p[i-1]\r\n        for i in range(1,n):\r\n            diff = 10**18\r\n            hi = i\r\n            lo = 1\r\n            ans = (0,0)\r\n            while lo <= hi:\r\n                mid = (lo + hi) // 2\r\n                x = p[mid-1]\r\n                y = p[i] - x\r\n                if abs(x-y) <diff:\r\n                    diff = abs(x-y)\r\n                    ans = (x,y)\r\n                if x > y:\r\n                    hi = mid-1\r\n                else:\r\n                    lo = mid + 1\r\n            tmp.append(ans)\r\n        return tmp\r\n    \r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    minDifference(N, A) {\n        let x = this.partition(A, N);\n        A.reverse();\n        let y = this.partition(A, N);\n        y.reverse();\n        let ans = 10 ** 18;\n        for (let i = 1; i < N - 2; i++) {\n            ans = Math.min(ans, Math.max(x[i][0], x[i][1], y[i + 1][0], y[i + 1][1]) - Math.min(x[i][0], x[i][1], y[i + 1][0], y[i + 1][1]));\n        }\n        return ans;\n    }\n\n    partition(A, n) {\n        let tmp = [[0, 0]];\n        let p = [...A];\n        for (let i = 1; i < n; i++) {\n            p[i] += p[i - 1];\n        }\n        for (let i = 1; i < n; i++) {\n            let diff = 10 ** 18;\n            let hi = i;\n            let lo = 1;\n            let ans = [0, 0];\n            while (lo <= hi) {\n                let mid = Math.floor((lo + hi) / 2);\n                let x = p[mid - 1];\n                let y = p[i] - x;\n                if (Math.abs(x - y) < diff) {\n                    diff = Math.abs(x - y);\n                    ans = [x, y];\n                }\n                if (x > y) {\n                    hi = mid - 1;\n                } else {\n                    lo = mid + 1;\n                }\n            }\n            tmp.push(ans);\n        }\n        return tmp;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}