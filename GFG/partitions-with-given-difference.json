{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712675,
            "title": "Partitions with Given Difference",
            "titleSlug": "partitions-with-given-difference",
            "content": "<p><span >Given an array <strong>arr[]</strong>, partition it into two subsets(possibly empty) such that each element must belong to only one subset. Let the sum of the elements of these two subsets be <strong>sum1</strong> and&nbsp;<strong>sum</strong><strong>2</strong>. Given a difference <strong>d</strong>, count the number of partitions in which&nbsp;<strong>sum</strong><strong>1</strong> is greater than or equal to&nbsp;<strong>sum</strong><strong>2</strong> and the difference between&nbsp;<strong>sum</strong><strong>1</strong> and&nbsp;<strong>sum</strong><strong>2</strong> is equal to <strong>d</strong>.&nbsp;</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] =  [5, 2, 6, 4], d = 3\n<strong>Output: </strong>1\n<strong>Explanation: </strong>There is only one possible partition of this array. Partition : {6, 4}, {5, 2}. The subset difference between subset sum is: (6 + 4) - (5 + 2) = 3.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [1, 1, 1, 1], d = 0 <br /><strong>Output:</strong> 6 <br /><strong>Explanation: </strong>We can choose two 1's from indices {0,1}, {0,2}, {0,3}, {1,2}, {1,3}, {2,3} and put them in sum1 and remaning two 1's in sum2.<br />Thus there are total 6 ways for partition the array arr. <br /></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [1, 2, 1, 0, 1, 3, 3], d = 11</span><br /><span ><strong>Output:</strong> 2</span></pre>\n<p><span ><strong>Constraint:</strong></span><br /><span >1 &lt;= arr.size() &lt;= 50<br />0 &lt;= d&nbsp; &lt;= 50<br />0 &lt;= arr[i] &lt;= 6</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, partition it into two subsets (possibly empty) such that each element belongs to only one subset. Let `sum1` and `sum2` be the sums of the elements in these two subsets, respectively.  Given a difference `d`, count the number of partitions where `sum1` is greater than or equal to `sum2` and the difference between `sum1` and `sum2` is equal to `d`.",
                "constraints": [
                    "1 <= arr.size() <= 50",
                    "0 <= d <= 50",
                    "0 <= arr[i] <= 6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [5, 2, 6, 4], d = 3",
                        "output": "1",
                        "explanation": "There is one possible partition: {6, 4} and {5, 2}. The difference between the subset sums is (6 + 4) - (5 + 2) = 3."
                    },
                    {
                        "input": "arr[] = [1, 1, 1, 1], d = 0",
                        "output": "6",
                        "explanation": "We can choose two 1's from indices {0,1}, {0,2}, {0,3}, {1,2}, {1,3}, {2,3} to form sum1, and the remaining two 1's form sum2. Thus, there are 6 ways to partition the array."
                    },
                    {
                        "input": "arr[] = [1, 2, 1, 0, 1, 3, 3], d = 11",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The DP approach can efficiently compute the number of ways to achieve a specific sum.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    int findWays(vector<int>& num, int tar) {\n        int n = num.size();\n\n        vector<int> prev(tar + 1, 0);\n\n        if (num[0] == 0)\n            prev[0] = 2; // 2 cases -pick and not pick\n        else\n            prev[0] = 1; // 1 case - not pick\n\n        if (num[0] != 0 && num[0] <= tar)\n            prev[num[0]] = 1; // 1 case -pick\n\n        for (int ind = 1; ind < n; ind++) {\n            vector<int> cur(tar + 1, 0);\n            for (int target = 0; target <= tar; target++) {\n                int notTaken = prev[target];\n\n                int taken = 0;\n                if (num[ind] <= target)\n                    taken = prev[target - num[ind]];\n\n                cur[target] = notTaken + taken;\n            }\n            prev = cur;\n        }\n        return prev[tar];\n    }\n\n    int countPartitions(vector<int>& arr, int d) {\n        int totSum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            totSum += arr[i];\n        }\n\n        // Checking for edge cases\n        if (totSum - d < 0 || (totSum - d) % 2)\n            return 0;\n\n        return findWays(arr, (totSum - d) / 2);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int findWays(int num[], int tar) {\n        int n = num.length;\n        int[] prev = new int[tar + 1];\n        Arrays.fill(prev, 0);\n\n        if (num[0] == 0)\n            prev[0] = 2; // 2 cases -pick and not pick\n        else\n            prev[0] = 1; // 1 case - not pick\n\n        if (num[0] != 0 && num[0] <= tar) prev[num[0]] = 1; // 1 case -pick\n\n        for (int ind = 1; ind < n; ind++) {\n            int[] cur = new int[tar + 1];\n            Arrays.fill(cur, 0);\n            for (int target = 0; target <= tar; target++) {\n                int notTaken = prev[target];\n\n                int taken = 0;\n                if (num[ind] <= target) taken = prev[target - num[ind]];\n\n                cur[target] = notTaken + taken;\n            }\n            prev = cur;\n        }\n        return prev[tar];\n    }\n\n    int countPartitions(int arr[], int d) {\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i];\n        }\n        if (sum - d < 0 || (sum - d) % 2 == 1) {\n            return 0;\n        }\n        return findWays(arr, (sum - d) / 2);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n    # def countPartitions(self, n : int, d : int, arr : List[int]) -> int:\n    def countPartitions(self, arr, d):\n        n = len(arr)\n        # Stores the sum of all the elements in the array.\n        totalSum = 0\n\n        #  Iterate over the array and add the element to 'totalSum'.\n        for i in range(n):\n            totalSum += arr[i]\n\n        # If totalSum is less than 'D', or their difference is odd.\n        if (totalSum < d or (totalSum - d) % 2):\n            # Then no partitions are possible.\n            return 0\n\n        # We want to find the number of subsets, with subset sum target.\n        target = (totalSum - d) // 2\n\n        # create a prev_dp where prev_dp[i] represents number of ways to get sum i by taking no element from arr.\n        pre_dp = [0] * (target + 1)\n        # If we want to find the number of subsets with sum 0,\n        # but considering 0 elements, only way is take an empty subset.\n        pre_dp[0] = 1\n\n        for i in range(1, n + 1):\n            curr_dp = [0] * (target + 1)\n            for j in range(target + 1):\n\n                # Take the entry from the previous row\n                not_pick = pre_dp[j]\n\n                # If we include this element.\n                pick = 0\n                if (j >= arr[i - 1]):\n                    pick = (pre_dp[j - arr[i - 1]])\n\n                curr_dp[j] = not_pick + pick\n\n            pre_dp = curr_dp[:]\n\n        #  Return the answer\n        return pre_dp[target]\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number} n\n * @param {number} d\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n\n    findWays(num, tar) {\n        const n = num.length;\n\n        let prev = new Array(tar + 1).fill(0);\n\n        if (num[0] === 0)\n            prev[0] = 2; // 2 cases - pick and not pick\n        else\n            prev[0] = 1; // 1 case - not pick\n\n        if (num[0] !== 0 && num[0] <= tar) prev[num[0]] = 1; // 1 case - pick\n\n        for (let ind = 1; ind < n; ind++) {\n            let cur = new Array(tar + 1).fill(0);\n            for (let target = 0; target <= tar; target++) {\n                let notTaken = prev[target];\n\n                let taken = 0;\n                if (num[ind] <= target) taken = prev[target - num[ind]];\n\n                cur[target] = notTaken + taken;\n            }\n            prev = cur;\n        }\n        return prev[tar];\n    }\n\n    countPartitions(arr, d) {\n        let totSum = 0;\n        for (let i = 0; i < arr.length; i++) {\n            totSum += arr[i];\n        }\n\n        // Checking for edge cases\n        if (totSum - d < 0 || (totSum - d) % 2) return 0;\n\n        return this.findWays(arr, (totSum - d) / 2);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}