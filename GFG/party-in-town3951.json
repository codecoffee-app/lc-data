{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705088,
            "title": "Party in Town",
            "titleSlug": "party-in-town3951",
            "content": "<p><span style=\"font-size:18px\">Geek town has <strong>N </strong>Houses numbered from <strong>1</strong> to <strong>N</strong>. They are connected with each other via <strong>N-1</strong> bidirectional roads. Given&nbsp;an adjacency list <strong>adj</strong>&nbsp;to represent the connections</span><span style=\"font-size:18px\">. To host the optimal party, you need to identify&nbsp;the house from which the distance to the farthest house is&nbsp;minimum. Find this&nbsp;distance.</span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nN = 4\r\nadj = {{2},{1,3,4},{2},{2}} </span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 1</span>\r\n<span style=\"font-size:18px\"><strong>Explaination:</strong> \r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/ScreenShot2022-05-02at4-1651489722.png\" />\r\nParty should take place at house number 2. \r\nMaximum distance from house number 2 is 1.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:\r\n</span></strong><span style=\"font-size:18px\">N = 4\r\nadj = {{2},{1,3},{2,4},{3}}</span><strong><span style=\"font-size:18px\">\r\nOutput:\r\n</span></strong><span style=\"font-size:18px\">2</span><strong><span style=\"font-size:18px\">\r\nExplanation:\r\n</span></strong><span style=\"font-size:18px\">Party should take place at house number 2 or 3.\r\nSo, the minimum distance between the farthest\r\nhouse and the party house is 2.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>partyHouse() </strong>which takes N and adj as input parameters and returns the minimum possible distance to the farthest house from the house where the party is happening.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;=&nbsp;N &lt;=&nbsp;1000<br />\r\n1 &lt;= adj[i][j] &lt;= N</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek Town has N houses numbered from 1 to N. They are connected by N-1 bidirectional roads. Given an adjacency list 'adj' representing the connections, find the minimum distance to the farthest house from the optimal party house. The optimal party house is the house from which the distance to the farthest house is minimized.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= adj[i][j] <= N"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nadj = {{2},{1,3,4},{2},{2}}",
                        "output": "1",
                        "explanation": "Holding the party at house number 2 minimizes the maximum distance to any other house, which is 1."
                    },
                    {
                        "input": "N = 4\nadj = {{2},{1,3},{2,4},{3}}",
                        "output": "2",
                        "explanation": "Either house number 2 or 3 can be chosen as the party house. In both cases, the minimum distance to the farthest house is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each house get the farthest distance of any house.</span></p>",
            "<p><span style=\"font-size:18px\">Farthest distance is basically the height of the tree considering that house as the root of the tree.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to perform depth-first search to find the maximum depth in the graph.\n    int dfs(int node, int par, vector<vector<int>> &adj)\n    {\n        int maxi = 0;\n        // Traverse through all the adjacent nodes.\n        for(auto u: adj[node]){\n            // Check if the adjacent node is not the parent node.\n            if(u != par)\n                maxi = max(maxi, dfs(u, node, adj));\n        }\n        // If the current node is not the root node, return 1 plus the maximum depth.\n        if(par != 0) \n            return 1+maxi;\n        // If the current node is the root node, return the maximum depth.\n        else \n            return maxi;\n    }\n\n    // Function to find the minimum number of rooms required for the party house.\n    int partyHouse(int N, vector<vector<int>> &adj){\n        int mini = INT_MAX;\n\n        // Iterate through all the nodes.\n        for(int i = 1;i <= N;i++){\n\t        // Call the dfs function to find the maximum depth starting from the current node.\n            int h = dfs(i, 0, adj);\n\n            // Update the minimum number of rooms required.\n            mini = min(mini, h);\n        }\n        // Return the minimum number of rooms required.\n        return mini;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n\tstatic int dfs(int node, int par, ArrayList<ArrayList<Integer>> adj)\r\n    {\r\n        int maxi = 0;\r\n        for(int u: adj.get(node)){\r\n            if(u != par)\r\n                maxi = Math.max(maxi, dfs(u, node, adj));\r\n        }\r\n        if(par != 0) // check if node is not the root node\r\n            return 1+maxi; // return 1 plus the maximum depth of its children\r\n        else \r\n            return maxi; // if root node, return maximum depth of its children\r\n    }\r\n\t\r\n\tstatic int partyHouse(int N, ArrayList<ArrayList<Integer>> adj)\r\n    {\r\n\t\tint mini = Integer.MAX_VALUE; // initialize variable to store minimum depth\r\n        for(int i = 1;i <= N;i++){\r\n\t        int h = dfs(i, 0, adj); // calculate maximum depth for each node\r\n\t        mini = Math.min(mini, h); // update minimum depth if needed\r\n\t    }\r\n\t    return mini; // return the minimum depth\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to perform depth-first search to find the maximum depth of a node.\n    def dfs(self,i,vis,d):\n        # update the maximum depth\n        self.md=max(self.md,d)\n        # mark the current node as visited\n        vis[i]=True\n        # explore all adjacent nodes\n        for k in self.adj[i]:\n            # if the adjacent node is not visited, recursively call dfs\n            if not vis[k]:\n                self.dfs(k,vis,d+1)\n           \n    # Function to find the minimum number of rooms required to accommodate all guests\n    def partyHouse(self, N, adj):\n        # initialize minimum rooms needed to a large value\n        mini=10**10\n        # store the adjacency list of the graph\n        self.adj=adj\n        # iterate over all guests\n        for i in range(1,N+1):\n            # initialize maximum depth for each guest\n            self.md=0\n            # mark all nodes as unvisited\n            vis=[False]*(N+1)\n            # find the maximum depth of the current guest using dfs\n            self.dfs(i,vis,0)\n            # update the minimum rooms needed\n            mini=min(mini,self.md)\n        # return the minimum rooms needed to accommodate all guests\n        return(mini)",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number[][]} adj\n * @returns {number}\n*/\n\nclass Solution {\n    constructor() {\n        this.adj = [];\n        this.md = 0;\n    }\n    \n    dfs(i, vis, d) {\n        this.md = Math.max(this.md, d);\n        vis[i] = true;\n        for (let k of this.adj[i]) {\n            if (!vis[k]) {\n                this.dfs(k, vis, d + 1);\n            }\n        }\n    }\n\n    partyHouse(N, adj) {\n        let mini = 10 ** 10;\n        this.adj = adj;\n        for (let i = 1; i <= N; i++) {\n            this.md = 0;\n            let vis = new Array(N + 1).fill(false);\n            this.dfs(i, vis, 0);\n            mini = Math.min(mini, this.md);\n        }\n        return mini;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    // Function to perform depth-first search to find the maximum depth in the graph.\n    public int dfs(int node, int par, List<List<int>> adj)\n    {\n        int maxi = 0;\n        // Traverse through all the adjacent nodes.\n        foreach(var u in adj[node]){\n            // Check if the adjacent node is not the parent node.\n            if(u != par)\n                maxi = Math.Max(maxi, dfs(u, node, adj));\n        }\n        // If the current node is not the root node, return 1 plus the maximum depth.\n        if(par != 0) \n            return 1+maxi;\n        // If the current node is the root node, return the maximum depth.\n        else \n            return maxi;\n    }\n\n    // Function to find the minimum number of rooms required for the party house.\n    public int partyHouse(int N, List<List<int>> adj){\n        int mini = int.MaxValue;\n\n        // Iterate through all the nodes.\n        for(int i = 1;i <= N;i++){\n            // Call the dfs function to find the maximum depth starting from the current node.\n            int h = dfs(i, 0, adj);\n\n            // Update the minimum number of rooms required.\n            mini = Math.Min(mini, h);\n        }\n        // Return the minimum number of rooms required.\n        return mini;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}