{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702695,
            "title": "Pascal Triangle",
            "titleSlug": "pascal-triangle0652",
            "content": "<p><span style=\"font-size: 18px;\">Given a positive integer <strong>n</strong>, return the <strong>n<sup>th</sup> row&nbsp;of <a href=\"https://en.wikipedia.org/wiki/Pascal%27s_triangle\" target=\"_blank\" rel=\"noopener\"><em><span style=\"text-decoration: underline;\">pascal's triangle</span></em></a></strong>.<br />Pascal's triangle is a triangular array of the binomial coefficients formed by summing up the elements of previous row.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" alt=\"File:PascalTriangleAnimated2.gif\" /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4\n<strong>Output:</strong> [1, 3, 3, 1]\n<strong>Explanation:</strong> 4<sup>th</sup> row of pascal's triangle is {1, 3, 3, 1}.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5\n<strong>Output:</strong> [1, 4, 6, 4, 1]\n<strong>Explanation:</strong> 5<sup>th</sup> row of pascal's triangle is {1, 4, 6, 4, 1}.<br /></span></pre>\n<pre><strong>Input: </strong>n = 1\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> 1<sup>st</sup> row of pascal's triangle is {1}.</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 20</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, return the `n`th row of Pascal's Triangle. Pascal's triangle is a triangular array where each number is the sum of the two numbers directly above it.",
                "constraints": [
                    "1 <= n <= 20"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "[1, 3, 3, 1]",
                        "explanation": "The 4th row of Pascal's Triangle is [1, 3, 3, 1]."
                    },
                    {
                        "input": "5",
                        "output": "[1, 4, 6, 4, 1]",
                        "explanation": "The 5th row of Pascal's Triangle is [1, 4, 6, 4, 1]."
                    },
                    {
                        "input": "1",
                        "output": "[1]",
                        "explanation": "The 1st row of Pascal's Triangle is [1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Each row can be formed using the previous row recursively.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\n\n  public:\n    // Function to generate the Nth row of Pascal's Triangle\n    vector<int> nthRowOfPascalTriangle(int n) {\n\n        // Base case: if n=1, return [1]\n        if (n == 1) {\n            vector<int> tmp;\n            tmp.push_back(1);\n            return tmp;\n        }\n\n        // Recursive call to generate the (n-1)th row of Pascal's Triangle\n        vector<int> tans = nthRowOfPascalTriangle(n - 1);\n\n        // Create a vector to store the current row of Pascal's Triangle\n        vector<int> ans;\n        ans.push_back(1);\n\n        // Generate the current row by summing consecutive elements from the (n-1)th row\n        for (int i = 1; i < tans.size(); i++)\n            ans.push_back((tans[i] + tans[i - 1]));\n\n        ans.push_back(1); // Add 1 at the end of the current row\n        return ans;       // Return the current row of Pascal's Triangle\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    // Function to find the nth row of Pascal's triangle\n    ArrayList<Integer> nthRowOfPascalTriangle(int n) {\n\n        // Base case: If n is 1, return {1}\n        if (n == 1) {\n            ArrayList<Integer> v = new ArrayList<>();\n            v.add(1);\n            return v;\n        }\n\n        // Temporary arraylist to store the previous row of Pascal's triangle\n        ArrayList<Integer> tans = nthRowOfPascalTriangle(n - 1);\n\n        // Initializing arraylist to store the current row of Pascal's triangle\n        ArrayList<Integer> v = new ArrayList<>();\n        v.add(1);\n\n        // Calculating the elements of the current row based on the previous row\n        for (int i = 1; i < n - 1; i++) {\n            v.add((tans.get(i) + tans.get(i - 1)));\n        }\n\n        // Adding the last element to the current row\n        v.add(1);\n\n        // Returning the current row\n        return v;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def nthRowOfPascalTriangle(self, n):\n        # Base case: if n is 1, the first row of Pascal's Triangle is simply [1]\n        if n == 1:\n            tmp = [1]  # Create a temporary list containing just the value 1\n            return tmp\n\n        # Recursive step: get the (n-1)th row of Pascal's Triangle\n        tans = self.nthRowOfPascalTriangle(n - 1)\n\n        # Initialize a new list to store the nth row\n        ans = []\n        # The first element of every row in Pascal's Triangle is always 1\n        ans.append(1)\n\n        # Calculate the intermediate values of the nth row\n        # Each value is the sum of two adjacent values from the (n-1)th row\n        for i in range(1, len(tans)):\n            ans.append((tans[i] + tans[i - 1]))\n\n        # The last element of every row in Pascal's Triangle is always 1\n        ans.append(1)\n\n        return ans  # Return the complete nth row\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    // Function to find the nth row of Pascal's triangle.\n    public List<int> nthRowOfPascalTriangle(int n) {\n        // Base case: if n=1, return [1]\n        if (n == 1) {\n            List<int> tmp = new List<int>();\n            tmp.Add(1);\n            return tmp;\n        }\n\n        // Recursive call to generate the (n-1)th row of Pascal's Triangle\n        List<int> tans = nthRowOfPascalTriangle(n - 1);\n\n        // Create a vector to store the current row of Pascal's Triangle\n        List<int> ans = new List<int>();\n        ans.Add(1);\n\n        // Generate the current row by summing consecutive elements from the (n-1)th row\n        for (int i = 1; i < tans.Count; i++) ans.Add((tans[i] + tans[i - 1]));\n\n        ans.Add(1); // Add 1 at the end of the current row\n        return ans; // Return the current row of Pascal's Triangle\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number} n\n * @return {number[]}\n */\n\nclass Solution {\n    nthRowOfPascalTriangle(n) {\n        if (n == 1) {\n            let tmp = [];\n            tmp.push(1);\n            return tmp;\n        }\n        // Recursive call to generate the (n-1)th row of Pascal's Triangle\n        let tans = this.nthRowOfPascalTriangle(n - 1);\n        // store elements in ans\n        let ans = [];\n        ans.push(1);\n        for (let i = 1; i < tans.length; i++) {\n            ans.push((tans[i] + tans[i - 1]) % (10 ** 9 + 7));\n        }\n        ans.push(1);\n        // return ans\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}