{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703231,
            "title": "Pass the semester",
            "titleSlug": "pass-the-semester2515",
            "content": "<p><span style=\"font-size: 18px;\">Satish is preparing for an exam and knows the marks and study time for each topic, given in a 2D array <strong>arr </strong>of size<strong> n</strong> where each element is [marks, time] for each topic. Given the remaining study time before the exam <strong>w</strong>, the number of topics <strong>n</strong>, and the passing marks <strong>p</strong>, determine the maximum marks Satish can achieve by studying topics within the given time <strong>w</strong>. If it is not possible for Satish to meet or exceed the passing marks <strong>p</strong>, return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[ ] = {{12, 10},{16, 10},{20, 10},{24, 10},{8, 3}}, n = 5, w = 40, p = 21\n<strong>Output :</strong> YES 36\n<strong>Explanation:</strong> Marks needed to pass the subject 10 + 10 + 3 = 23 Time taken to achieve the 23 marks : 12 + 16 + 8 =36 So, return 36.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong><br />Input :</strong> arr[ ] = {{1, 3}, {5, 10}, {3, 12}}, n = 3, w = 9, p = 10  <strong>\nOutput :</strong>  YES 9</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*w).<br /><strong>Expected Auxiliary Space:</strong> O(n*w).</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<p><span style=\"font-size: 18px;\">1 &le; n &le; 1000</span></p>\n<p><span style=\"font-size: 18px;\">1 &le; w &le; 1000</span></p>\n<p><span style=\"font-size: 18px;\">1 &le; p &le; 100</span></p>\n<p><span style=\"font-size: 18px;\">1 &le; u,v &le; 25</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Satish is preparing for an exam. He has a 2D array `arr` of size `n`, where each element `arr[i]` represents a topic with `arr[i][0]` being the marks for that topic and `arr[i][1]` being the study time required. Given the total remaining study time `w`, the number of topics `n`, and the passing marks `p`, determine the maximum marks Satish can achieve within the given time `w` while ensuring he meets or exceeds the passing marks `p`.  Return -1 if it's impossible to achieve the passing marks.",
                "constraints": [
                    "1 <= n <= 1000",
                    "1 <= w <= 1000",
                    "1 <= p <= 100",
                    "1 <= u,v <= 25 (where u and v represents marks and time for each topic)"
                ],
                "testcases": [
                    {
                        "input": "arr = {{12, 10},{16, 10},{20, 10},{24, 10},{8, 3}}, n = 5, w = 40, p = 21",
                        "output": "36",
                        "explanation": "Satish can achieve the passing marks (21) by studying topics that require a total time less than or equal to 40. One possible combination is studying the topics with marks 12, 16, and 8, which requires 10 + 10 + 3 = 23 time units and results in a total of 12 + 16 + 8 = 36 marks. The maximum achievable marks under given condition is 36."
                    },
                    {
                        "input": "arr = {{1, 3}, {5, 10}, {3, 12}}, n = 3, w = 9, p = 10",
                        "output": "-1",
                        "explanation": "Satish cannot achieve the passing marks of 10 within the given time of 9. He can either study the first topic for 3 time units and score 1 mark or no combination of topics lets him score above the passing marks."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Modified 0-1 Knapsack.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to check if it is possible to achieve the required value using given weights and values\r\nint Ispossible(vector<vector<int>> &arr, int n, int w, int p)\r\n{\r\n    // Creating separate arrays for weights and values\r\n    vector<int> wt(n), val(n);\r\n    int i, j;\r\n    for (i = 0; i < n; i++)\r\n    {\r\n        wt[i] = arr[i][0];\r\n        val[i] = arr[i][1];\r\n    }\r\n\r\n    // Creating a 2D DP array to store intermediate results\r\n    vector<vector<int> > dp(n+1, vector<int>(w+1,0));\r\n\r\n    // Filling in the DP array\r\n    for (i = 0; i <= n; i++)\r\n    {\r\n        for (j = 0; j <= w; j++)\r\n        {\r\n            if (i == 0 || j == 0)\r\n                dp[i][j] = 0;\r\n            else if (j >= wt[i-1])\r\n                dp[i][j] = max(dp[i-1][j], val[i-1] + dp[i-1][j-wt[i-1]]);\r\n            else\r\n                dp[i][j] = dp[i-1][j];\r\n        }\r\n    }\r\n\r\n    // Storing the final result in a variable\r\n    int res = dp[n][w];\r\n\r\n    // Checking if the final result is less than the required value p\r\n    if (res < p)\r\n        return -1;\r\n    else\r\n    {\r\n        int ans = 0;\r\n\r\n        // Backtracking to find the combination of weights that give the required value\r\n        for (i = n; i > 0 && res > 0; i--)\r\n        {\r\n            if (res == dp[i-1][w])\r\n                continue;\r\n            else\r\n            {\r\n                ans = ans + wt[i-1];\r\n                res = res - val[i-1];\r\n                w = w - wt[i-1];\r\n            }\r\n        }\r\n\r\n        // Returning the final answer\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}