{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704559,
            "title": "Maximum path sum in matrix",
            "titleSlug": "path-in-matrix3805",
            "content": "<p><span >You are given a matrix <code><strong>mat[][]</strong></code> of size <code><strong>n </strong>x&nbsp;<strong>m</strong></code> where each element is a positive integer. Starting from any cell in the first row, you are allowed to move to the next row, but with specific movement constraints. From any cell <code>(r, c)</code> in the current row, you can move to any of the three possible positions :</span></p>\n<ol>\n<li><span ><code>(r+1, c-1)</code> &mdash; move diagonally to the left.</span></li>\n<li><span ><code>(r+1, c)</code> &mdash; move directly down.</span></li>\n<li><span ><code>(r+1, c+1)</code> &mdash; move diagonally to the right.</span></li>\n</ol>\n<p><span >Find the maximum sum of any path starting from any column in the first row and ending at any column in the last row, following the above movement constraints.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input:</strong> mat[][] = [[3, 6, 1], [2, 3, 4], [5, 5, 1]]\n<strong>Output:</strong> 15\n<strong>Explaination:</strong> The best path is (0, 1) -&gt; (1, 2) -&gt; (2, 1). It gives the maximum sum as 15.</span></pre>\n<pre><span ><strong>Input:</strong> mat[][] = [[2, 1, 1], [1, 2, 2]]\n<strong>Output:</strong> 4\n<strong>Explaination:</strong> The best path is (0, 0) -&gt; (1, 1). It gives the maximum sum as 4.</span></pre>\n<pre><span ><strong>Input:</strong> mat[][] = [[25]]\n<strong>Output:</strong> 25\n<strong>Explaination:</strong> (0, 0) is the only cell in mat[][], so maximum path sum will be 25.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; mat.size() &le; 500<br />1 &le; mat[i].size() &le; 500<br />1 &le; mat[i][j] &le; 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use dynamic programming to compute the longest path for each cell.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "samsung",
            "makemytrip"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int maximumPath(vector<vector<int>> &mat) {\n        int n = mat.size(), m = mat[0].size();\n\n        // Create a DP table to store the maximum path sum\n        vector<vector<int>> dp(n, vector<int>(m, 0));\n\n        // Initialize the DP table for the last row (base case)\n        for (int j = 0; j < m; ++j) {\n            dp[n - 1][j] = mat[n - 1][j];\n        }\n\n        // Fill the DP table from bottom to top\n        for (int i = n - 2; i >= 0; --i) {\n            for (int j = 0; j < m; ++j) {\n                int case1 = mat[i][j], case2 = mat[i][j], case3 = mat[i][j];\n\n                // Check the possible moves\n                if (j - 1 >= 0)\n                    case1 += dp[i + 1][j - 1]; // Move diagonally left\n                case2 += dp[i + 1][j];         // Move down\n                if (j + 1 < m)\n                    case3 += dp[i + 1][j + 1]; // Move diagonally right\n\n                // Take the maximum of the three cases\n                dp[i][j] = max({case1, case2, case3});\n            }\n        }\n\n        // The answer will be the maximum value in the first row of the DP table\n        int ans = 0;\n        for (int j = 0; j < m; ++j) {\n            ans = max(ans, dp[0][j]);\n        }\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int maximumPath(int[][] mat) {\n        int n = mat.length, m = mat[0].length;\n\n        // Create a DP table to store the maximum path sum\n        int[][] dp = new int[n][m];\n\n        // Initialize the DP table for the last row (base case)\n        for (int j = 0; j < m; ++j) {\n            dp[n - 1][j] = mat[n - 1][j];\n        }\n\n        // Fill the DP table from bottom to top\n        for (int i = n - 2; i >= 0; --i) {\n            for (int j = 0; j < m; ++j) {\n                int case1 = mat[i][j], case2 = mat[i][j], case3 = mat[i][j];\n\n                // Check the possible moves\n                if (j - 1 >= 0) case1 += dp[i + 1][j - 1]; // Move diagonally left\n                case2 += dp[i + 1][j];                     // Move down\n                if (j + 1 < m) case3 += dp[i + 1][j + 1];  // Move diagonally right\n\n                // Take the maximum of the three cases\n                dp[i][j] = Math.max(Math.max(case1, case2), case3);\n            }\n        }\n\n        // The answer will be the maximum value in the first row of the DP table\n        int ans = 0;\n        for (int j = 0; j < m; ++j) {\n            ans = Math.max(ans, dp[0][j]);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def maximumPath(self, mat):\n        n, m = len(mat), len(mat[0])\n\n        # Create a DP table to store the maximum path sum\n        dp = [[0] * m for _ in range(n)]\n\n        # Initialize the DP table for the last row (base case)\n        for j in range(m):\n            dp[n - 1][j] = mat[n - 1][j]\n\n        # Fill the DP table from bottom to top\n        for i in range(n - 2, -1, -1):\n            for j in range(m):\n                case1 = case2 = case3 = mat[i][j]\n\n                # Check the possible moves\n                if j - 1 >= 0:\n                    case1 += dp[i + 1][j - 1]  # Move diagonally left\n                case2 += dp[i + 1][j]  # Move down\n                if j + 1 < m:\n                    case3 += dp[i + 1][j + 1]  # Move diagonally right\n\n                # Take the maximum of the three cases\n                dp[i][j] = max(case1, case2, case3)\n\n        # The answer will be the maximum value in the first row of the DP table\n        return max(dp[0])\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    maximumPath(mat) {\n        const n = mat.length, m = mat[0].length;\n\n        // Create a DP table to store the maximum path sum\n        const dp = Array.from({length : n}, () => Array(m).fill(0));\n\n        // Initialize the DP table for the last row (base case)\n        for (let j = 0; j < m; ++j) {\n            dp[n - 1][j] = mat[n - 1][j];\n        }\n\n        // Fill the DP table from bottom to top\n        for (let i = n - 2; i >= 0; --i) {\n            for (let j = 0; j < m; ++j) {\n                let case1 = mat[i][j], case2 = mat[i][j], case3 = mat[i][j];\n\n                // Check the possible moves\n                if (j - 1 >= 0) case1 += dp[i + 1][j - 1]; // Move diagonally left\n                case2 += dp[i + 1][j];                     // Move down\n                if (j + 1 < m) case3 += dp[i + 1][j + 1];  // Move diagonally right\n\n                // Take the maximum of the three cases\n                dp[i][j] = Math.max(case1, case2, case3);\n            }\n        }\n\n        // The answer will be the maximum value in the first row of the DP table\n        let ans = 0;\n        for (let j = 0; j < m; ++j) {\n            ans = Math.max(ans, dp[0][j]);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}