{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704861,
            "title": "Path of greater than equal to k length",
            "titleSlug": "path-of-greater-than-equal-to-k-length1034",
            "content": "<p><span style=\"font-size:18px\">Given a graph, a source vertex in the graph, and a number k, find if there is a simple path, of path length <strong>greater than or equal to k</strong>,(without any cycle) starting from a given source and ending at any other vertex.<br />\nSource vertex should always be&nbsp; 0.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:\nV = 4 , E = 3 and K = 8\nA[] = [0, 1, 5, 1, 2, 1, 2, 3, 1]\n<strong>Output:</strong>&nbsp;0\n<strong>Explanation</strong>:\nThere exists no path which has a distance \nof 8. \n</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nV = 9, E = 14 and K = 60\nA[] = [0, 1, 4, 0, 7, 8, 1, 2, 8, 1, 7, \n11, 2, 3, 7, 2, 5, 4, 2, 8, 2, 3, 4, 9, \n3, 5, 14, 4, 5, 10, 5, 6, 2, 6, 7, 1, 6, \n8, 6, 7, 8, 7]\n<strong>Output: </strong>0\n<strong>Explanation:\n</strong><img alt=\"\" src=\"http://www.geeksforgeeks.org//wp-content/uploads/Fig-11.jpg\" style=\"height:316px; width:677px\" />\n \n\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>pathMoreThanK()</strong>&nbsp;which takes the integer V, Edges E, an integer K and Array A which is having (Source, Destination, Weight)&nbsp;as input parameters and returns 1 if the path of at least k distance exists, else returns 0.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(N!)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p style=\"text-align:justify\">&nbsp;</p>\n\n<p style=\"text-align:justify\"><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n2 &le; V &le; 5<br />\n1 &le; E &le; 20<br />\n1 &le; K &le; 100</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">One important thing to note is, simply doing BFS or DFS and picking the longest edge at every step would not work. The reason is, a shorter edge can produce longer path due to higher weight edges connected through it.</span></p>\n\n<p><span style=\"font-size:18px\">The idea is to use Backtracking. We start from given source, explore all paths from current vertex. We keep track of current distance from source. If distance becomes more than k, we return true. If a path doesn&rsquo;t produces more than k distance, we backtrack.</span></p>\n\n<p><span style=\"font-size:18px\">How do we make sure that the path is simple and we don&rsquo;t loop in a cycle? The idea is to keep track of current path vertices in an array. Whenever we add a vertex to path, we check if it already exists or not in current path. If it exists, we ignore the edge.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "vector<vector<pair<int, int>>> adj;\n\nclass Solution {\npublic:    \n// Prints shortest paths from src to all other vertices \n    bool pathMoreThanKUtil(int src, int k, vector<bool> &path) \n    { \n        // If k is 0 or negative, return true; \n        if (k <= 0) \n            return true; \n      \n        // Get all adjacent vertices of source vertex src and \n        // recursively explore all paths from src. \n        \n        for (auto i = adj[src].begin(); i != adj[src].end(); ++i) \n        { \n            // Get adjacent vertex and weight of edge \n            int v = (*i).first; \n            int w = (*i).second; \n      \n            // If vertex v is already there in path, then \n            // there is a cycle (we ignore this edge) \n            if (path[v] == true) \n                continue; \n      \n            // If weight of is more than k, return true \n            if (w >= k) \n                return true; \n      \n            // Else add this vertex to path \n            path[v] = true; \n      \n            // If this adjacent can provide a path longer \n            // than k, return true. \n            if (pathMoreThanKUtil(v, k-w, path)) \n                return true; \n      \n            // Backtrack \n            path[v] = false; \n        } \n      \n        // If no adjacent could produce longer path, return \n        // false \n        return false; \n    } \n    \n    bool pathMoreThanK(int V, int E, int k, int *a) \n    { \n        int src = 0;\n        // Create a path array with nothing included \n        // in path \n        adj.clear();\n        adj.resize(V+1);\n        for(int i=0;i<3*E;i+=3){\n            adj[a[i]].push_back({a[i+1], a[i+2]});\n            adj[a[i+1]].push_back({a[i], a[i+2]});\n        }\n        vector<bool> path(V, false); \n      \n        // Add source vertex to path \n        path[src] = 1; \n      \n        return pathMoreThanKUtil(src, k, path); \n    } \n};\n\n\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    static List<List<KeyValuePair<int, int>>> adj;\n\n    // Function to check if there is a path of length greater than or equal to K.\n    public bool pathMoreThanK(int V, int E, int k, int[] a)\n    {\n        adj = new List<List<KeyValuePair<int, int>>>();\n        for (int i = 0; i <= V; i++)\n        {\n            adj.Add(new List<KeyValuePair<int, int>>());\n        }\n\n        for (int i = 0; i < 3 * E; i += 3)\n        {\n            adj[a[i]].Add(new KeyValuePair<int, int>(a[i + 1], a[i + 2]));\n            adj[a[i + 1]].Add(new KeyValuePair<int, int>(a[i], a[i + 2]));\n        }\n\n        bool[] path = new bool[V];\n        int src = 0;\n        path[src] = true;\n\n        return pathMoreThanKUtil(src, k, path);\n    }\n\n    private bool pathMoreThanKUtil(int src, int k, bool[] path)\n    {\n        if (k <= 0)\n            return true;\n\n        foreach (KeyValuePair<int, int> pair in adj[src])\n        {\n            int v = pair.Key;\n            int w = pair.Value;\n\n            if (path[v])\n                continue;\n\n            if (w >= k)\n                return true;\n\n            path[v] = true;\n\n            if (pathMoreThanKUtil(v, k - w, path))\n                return true;\n\n            path[v] = false;\n        }\n\n        return false;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}