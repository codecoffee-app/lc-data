{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706366,
            "title": "Paths from root with a specified sum",
            "titleSlug": "paths-from-root-with-a-specified-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary tree and a sum&nbsp;<strong>S</strong>, print all the paths, <strong>starting from root</strong>, that sums upto the given sum. Path <strong>not necessarily</strong>&nbsp;end on a leaf node.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input : </strong>\nsum = 8\nInput tree\n\\t   1\n\\t /   \\\n     20\\t3\n\\t     /    \\\n\\t   4\\t 15   \n\\t  /  \\     /  \\\n\\t 6    7   8    9\\t\n\n<strong>Output :</strong>\n1 3 4\n<strong>Explanation : </strong>\nSum of path 1, 3, 4 = 8.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input : </strong>\nsum = 38<br />Input tree\n\\t    10\n\\t /     \\\n     28\\t 13\n\\t     /     \\\n\\t   14\\t 15\n\\t  /   \\     /  \\\n\\t 21   22   23   24\n<strong>Output :</strong>\n10 28\n10 13 15  \n<strong>Explanation :</strong>\nSum of path 10, 28 = 38 and\nSum of path 10, 13, 15 = 38.</span></pre>\n<div><strong><span style=\"font-size: 18px;\">Your task :</span></strong></div>\n<div><span style=\"font-size: 18px;\">You don't have to read input or print anything. Your task is to complete the function <strong>printPaths()</strong> that takes the root of the tree and sum as input and returns a vector of vectors containing the paths that lead to the sum.</span></div>\n<div>&nbsp;</div>\n<div><strong><span style=\"font-size: 18px;\">Your Task :</span></strong></div>\n<div><span style=\"font-size: 18px;\">1 &lt;= N &lt;= 2*10<sup>3</sup></span></div>\n<div><span style=\"font-size: 18px;\">-10<sup>3</sup>&nbsp;&lt;= sum, Node.key &lt;= 10<sup>3</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Traverse over whole tree to find the paths.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\n    public:\n        void printPathsUtil(Node* curr_node, int sum,\n                     int sum_so_far, vector<int> &path , vector<vector<int>> &ans)\n            {\n            \tif (curr_node == NULL)\n            \t\treturn;\n            \n            \t// add the current node's value\n            \tsum_so_far += curr_node->key;\n            \n            \t// add the value to path\n            \tpath.push_back(curr_node->key);\n            \n            \t// print the required path\n            \tif (sum_so_far == sum )\n            \t{\n            \t\tans.push_back(path);\n            \t}\n            \n            \t// if left child exists\n            \tif (curr_node->left != NULL)\n            \t\tprintPathsUtil(curr_node->left, sum, sum_so_far, path, ans);\n            \n            \t// if right child exists\n            \tif (curr_node->right != NULL)\n            \t\tprintPathsUtil(curr_node->right, sum, sum_so_far, path, ans);\n            \n            \n            \t// Remove last element from path\n            \t// and move back to parent\n            \tpath.pop_back();\n            }\n\n    public:\n        vector<vector<int>> printPaths(Node *root, int sum)\n            {\n            \tvector<int> path;\n            \tvector<vector<int>> ans;\n            \tprintPathsUtil(root, sum, 0, path, ans);\n            \treturn ans;\n            }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n    public void printPathsUtil(Node currNode, int sum, int sumSoFar, ArrayList<Integer> path, ArrayList<ArrayList<Integer>> ans) \n    {\n        if (currNode == null)\n        {\n            return;\n        }\n    \n        sumSoFar += currNode.data;\n\n        path.add(currNode.data);\n\n        if (sumSoFar == sum) \n        {\n            ans.add(new ArrayList<>(path));\n        }\n\n        if (currNode.left != null)\n            printPathsUtil(currNode.left, sum, sumSoFar, path, ans);\n\n        if (currNode.right != null)\n            printPathsUtil(currNode.right, sum, sumSoFar, path, ans);\n\n        path.remove(path.size() - 1);\n    }\n\n    public ArrayList<ArrayList<Integer>> printPaths(Node root, int sum) \n    {\n        ArrayList<Integer> path = new ArrayList<>();\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();\n        printPathsUtil(root, sum, 0, path, ans);\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\n'''\n# Tree Node\nclass Node:\n    def __init__(self, val):\n        self.right = None\n        self.data = val\n        self.left = None\n        \n'''\n\nclass Solution:\n    def printPathsUtil(self, curr_node, target_sum, sum_so_far, path, ans):\n        if not curr_node:\n            return\n\n        sum_so_far += curr_node.data\n        path.append(curr_node.data)\n\n        if sum_so_far == target_sum:\n            ans.append(path[:])\n\n        if curr_node.left:\n            self.printPathsUtil(curr_node.left, target_sum, sum_so_far, path, ans)\n\n        if curr_node.right:\n            self.printPathsUtil(curr_node.right, target_sum, sum_so_far, path, ans)\n\n        path.pop()\n\n    def printPaths(self, root, target_sum):\n        path = []\n        ans = []\n        self.printPathsUtil(root, target_sum, 0, path, ans)\n        return ans\n        ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}