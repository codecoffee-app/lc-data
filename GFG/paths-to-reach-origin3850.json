{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702647,
            "title": "Paths to reach origin",
            "titleSlug": "paths-to-reach-origin3850",
            "content": "<p><span style=\"font-size: 18px;\">You are standing on a point&nbsp;<strong>(x, y)</strong> and you want to go to the origin<strong>&nbsp;(0, 0)</strong>&nbsp;by taking steps either&nbsp;<strong>left</strong> or <strong>down</strong> i.e. from each point you are allowed to move either in&nbsp;<strong>(x-1, y) or (x, y-1)</strong>. Find the number of <strong>paths </strong>from<strong> point </strong>to<strong> origin</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\">x = 3, y = 0 \n<strong>Output:</strong> <br />1\n<strong>Explanation</strong>: Path used was -  <strong>(3,0)  --&gt; ( 2,0) --&gt; (1,0) --&gt; (0,0)</strong>.We can see that there is no other path than this, so we return 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>x = 3, y = 6\n<strong>Output:</strong> <br />84 <br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">:<br /></span>There are total 84 possible paths.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Since this is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function <strong>ways</strong>() that takes integer<strong> x&nbsp;</strong>and <strong>y</strong>&nbsp;as parameters and returns the total&nbsp;number of <strong>paths </strong>from<strong> point(x,y) </strong>to the<strong> origin(0,0) % 1000000007.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(x*y).<br /><strong>Expected Auxiliary Space:</strong> O(x*y).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />0 &le; x, y &le; 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are currently at point (x, y) and want to reach the origin (0, 0). You can only move either left (x-1, y) or down (x, y-1). Determine the number of distinct paths from (x, y) to (0, 0). Since the answer could be very large, return the answer modulo 1000000007.",
                "constraints": [
                    "0 <= x <= 500",
                    "0 <= y <= 500"
                ],
                "testcases": [
                    {
                        "input": "x = 3, y = 0",
                        "output": "1",
                        "explanation": "There is only one path: (3,0) -> (2,0) -> (1,0) -> (0,0)."
                    },
                    {
                        "input": "x = 3, y = 6",
                        "output": "84",
                        "explanation": "There are 84 distinct paths from (3,6) to (0,0) using only left and down movements."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Try to draw a recursion tree to see overlapping problems. For example, in the case of ways(4, 4), we compute ways(3, 3) multiple times.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\npublic:\n    //Function to find the number of ways to reach from (0,0) to (x,y).\n    int ways(int x, int y)\n    {\n        int mod = 1e9+7;\n        int dp[501][501]; //2D array to store the number of ways.\n\n        //Initializing the boundaries of the array with 1.\n        for(int i=0;i<501;i++)\n        {\n            dp[0][i]=1;\n            dp[i][0]=1;\n        }\n        dp[0][0]=1;\n     \n        //Calculating the number of ways using dynamic programming.\n        for(long long i=1;i<501;i++)\n        {\n            for(long long j=1;j<501;j++)\n            {\n                dp[i][j]=(dp[i-1][j]+dp[i][j-1])%mod;\n            }\n        }\n    \n        //Returning the number of ways to reach (x,y).\n        return dp[x][y];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //initialize a 2D array to store the values of dp function\r\n    static int dp[][] =new int [501][501];\r\n    static\r\n    {\r\n        int mod=1000000007;\r\n        //initialize the base cases of dp array\r\n        for(int i=0;i<501;i++)\r\n        {\r\n            dp[i][0]=1;\r\n            dp[0][i]=1;\r\n        }\r\n        //fill up the dp array using the recurrence relation\r\n        for(int i=1;i<501;i++)\r\n        {\r\n            for(int j=1;j<501;j++)\r\n            {\r\n                dp[i][j]=(dp[i-1][j]%mod+dp[i][j-1]%mod)%mod;\r\n            }\r\n        }\r\n    }\r\n    \r\n    //function to calculate the value of dp[x][y]\r\n     public static int ways(int x, int y)\r\n    {\r\n        return dp[x][y];\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nmod=10**9+7\ndef calculate():\n    dp=[]\n    for i in range(0,501):\n        dp.append([0]*501)\n    for i in range(0,501):\n        dp[0][i]=1\n        dp[i][0]=1\n    dp[0][0]=1\n    for i in range(1,501):\n        for j in range(1,501):\n            dp[i][j]=(dp[i-1][j]+dp[i][j-1])%mod\n    return dp\n\ndp=calculate()\n\nclass Solution:\n    #Function to count the number of ways to reach (x, y) from (0, 0).\n    def ways(self, x,y):\n        #returning the count stored in dp[x][y].\n        return dp[x][y]",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\nclass Solution {\n  ways(n, m) {\n    let mod = 1e9+7;\n    let dp = [];\n    for(let i=0;i<501;i++) {\n      dp[i] = [];\n      dp[i][0] = 1;\n      dp[0][i] = 1;\n    }\n    dp[0][0] = 1;\n\n    for(let i=1;i<501;i++) {\n      for(let j=1;j<501;j++) {\n        dp[i][j]=(dp[i-1][j]+dp[i][j-1])%mod;\n      }\n    }\n\n    return dp[n][m];\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}