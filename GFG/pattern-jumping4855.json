{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704899,
            "title": "Pattern Jumping",
            "titleSlug": "pattern-jumping4855",
            "content": "<p><span style=\"font-size:18px\">A frog starts at the point 0. In his first turn, he can make a jump of 1 unit. Now for all consequent turns, if the frog is currently at a distance x (from the start), his jump will take him x units forward. Given a leaf at a distance <strong>N</strong>, you have to find if the frog can reach that leaf or not.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>3</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">False</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">The frog can&#39;t reach the position 3.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>2</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">True</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">The frog will jump to position 1 in\nthe first jump. Now, he is at a distance\nof 1 from the start, so he cam jump 1m.\nSo, he reaches the point 2.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>canJump()</strong> which takes an Integer N as input and return &quot;True&quot; if the frog can reach N else return &quot;False&quot;.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>18</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A frog starts at position 0. On the first turn, it jumps 1 unit.  Subsequent jumps are equal to the frog's current distance from the starting point. Determine if the frog can reach a leaf at distance N.",
                "constraints": [
                    "1 <= N <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "False",
                        "explanation": "The frog cannot reach position 3. After the initial jump to position 1, the next jump would also be 1 unit, landing at position 2. There is no way to reach 3."
                    },
                    {
                        "input": "2",
                        "output": "True",
                        "explanation": "The frog jumps to position 1 in the first jump. Since it's now at a distance of 1 from the start, it jumps 1 unit again, reaching position 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Be careful with overflow of Integers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n  \n    // Function to check if a number is a power of 2\n    bool isPowerOfTwo (long long x) \n    { \n        /* First x in the below expression is for the case when x is 0 */\n        return x && (!(x&(x-1))); \n    } \n    \n    // Function to check if a number can be jumped to reach the end\n    string canJump(long long N) {\n        \n        // Check if N is a power of 2\n        if(isPowerOfTwo(N))\n            return \"True\";\n        else\n            return \"False\";\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n    // Function to check if a number is a power of 2\n    isPowerOfTwo ( x) \n    { \n        /* First x in the below expression is for the case when x is 0 */\n        return x && (!(x&(x-1))); \n    } \n    \n    canJump(N) {\n        \n        if(this.isPowerOfTwo(N))\n            return \"True\";\n        else\n            return \"False\";\n    }\n}\n",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to check if a jump of size x can reach to the end of the array.\n    public string canJump(long N)\n    {\n        if ((N & (N - 1)) == 0)\n        {\n            return \"True\";\n        }\n        else\n        {\n            return \"False\";\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}