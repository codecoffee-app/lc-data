{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703488,
            "title": "Pattern of Strings",
            "titleSlug": "pattern-of-strings3829",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s.</strong> Find the pattern of the strings in the examples below.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :<br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s<strong> </strong>=<strong> \"</strong>GeeK\"\n<strong>Output:</strong> Geek\n\\t  Gee\n\\t  Ge\n\\t  G\n<strong>Explanation</strong>: Decrease one character after each line</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s<strong> </strong>=<strong> \"</strong>G*g\" \n<strong>Output:</strong> G*g\n\\t  G*\n\\t  G\n<strong>Explanation</strong>: Decrease one character after each line\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |s| &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, generate a pattern by successively removing the last character from the string in each line until only the first character remains.",
                "constraints": [
                    "1 <= |s| <= 1000"
                ],
                "testcases": [
                    {
                        "input": "GeeK",
                        "output": "GeeK\n  Gee\n  Ge\n  G",
                        "explanation": "The output consists of the original string 'GeeK', followed by the string without the last character ('Gee'), then without the last two ('Ge'), and finally only the first character ('G'). Each subsequent line has the last character removed."
                    },
                    {
                        "input": "G*g",
                        "output": "G*g\n  G*\n  G",
                        "explanation": "The output consists of the original string 'G*g', followed by the string without the last character ('G*'), and then without the last two ('G'). Each subsequent line has the last character removed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The last character of the string is removed after each iteration.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "pattern-printing",
                "slug": "pattern-printing"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to generate all possible patterns of a given string\n    vector<string> pattern(string S) {\n        vector<string> ans;\n\n        // iterating from the end of the string and generating all substrings\n        for (int i = S.size(); i >= 1; i--)\n            ans.push_back(S.substr(0, i));\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Method to generate all possible patterns of a given string\n    // e.g. if S = \"abcd\", the output will be [\"abcd\", \"abc\", \"ab\", \"a\"]\n    ArrayList<String> pattern(String S) {\n        ArrayList<String> ans = new ArrayList<String>();\n        // Iterate over the characters of the string in reverse order\n        // and add each substring to the ans list\n        for (int i = S.length() - 1; i >= 0; i--) ans.add(S.substring(0, i + 1));\n        // return the list of patterns\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}