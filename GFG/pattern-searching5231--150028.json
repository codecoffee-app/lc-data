{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881839,
            "title": "Pattern searching",
            "titleSlug": "pattern-searching5231--150028",
            "content": "<p><span >Given a string <strong>txt</strong> and a pattern <strong>pat</strong>. You need to check whether the pattern string <strong>pat</strong> is present or not in the string <strong>txt</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>txt = \"abcdefh\", pat = \"bcd\"<br /><strong>Output: </strong>true</span></pre>\n<pre><span ><strong>Input: </strong>txt = \"axzy\", pat = \"xy\"<strong><br /></strong><strong>Output: </strong>false</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &lt;= txt.size() &lt;= 100</span><br /><span >1 &lt;= pat.size()&nbsp;&lt;= 100</span></p>\n<div id=\"highlighter--hover-tools\" style=\"display: none;\">\n<div id=\"highlighter--hover-tools--container\">\n<div class=\"highlighter--icon highlighter--icon-copy\" title=\"Copy\">&nbsp;</div>\n<div class=\"highlighter--icon highlighter--icon-change-color\" title=\"Change Color\">&nbsp;</div>\n<div class=\"highlighter--icon highlighter--icon-delete\" title=\"Delete\">&nbsp;</div>\n</div>\n</div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `txt` and a pattern `pat`, determine if the pattern `pat` is present within the string `txt`. Return `true` if the pattern exists, and `false` otherwise.",
                "constraints": [
                    "1 <= txt.length <= 100",
                    "1 <= pat.length <= 100"
                ],
                "testcases": [
                    {
                        "input": {
                            "txt": "abcdefh",
                            "pat": "bcd"
                        },
                        "output": true,
                        "explanation": "The pattern 'bcd' is present in the string 'abcdefh'."
                    },
                    {
                        "input": {
                            "txt": "axzy",
                            "pat": "xy"
                        },
                        "output": false,
                        "explanation": "The pattern 'xy' is not present in the string 'axzy'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. Slide the pattern over text one by one and check for a match. If a match is found, then slides by 1 again to check for subsequent matches.<br />\n<br />\nComplete code has been provided in next hint.</p>",
            "<p>2. Iterate from 0 to M-N over string then check for each pattern length of N the corresonding characters are same or not.<br />\nbool searchPattern(string str, string text)<br />\n{<br />\n&nbsp;&nbsp;&nbsp; int M = str.length();<br />\n&nbsp;&nbsp;&nbsp; int N = text.length();<br />\n&nbsp;&nbsp;&nbsp; //bool ans = false;<br />\n&nbsp;&nbsp;&nbsp; for(int i = 0; i &lt;= M-N; i++)<br />\n&nbsp;&nbsp;&nbsp; {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int j;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(j = 0;&nbsp; j &lt; N; j++)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(str[i+j] != text[j])<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(j == N)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br />\n&nbsp;&nbsp;&nbsp; }<br />\n&nbsp;&nbsp;&nbsp; return false;<br />\n}<br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n// Function to search for a pattern in a string.\nbool searchPattern(string &str, string &pat) {\n    // Checking if the pattern exists in the given string.\n    // If the pattern exists, it returns the position of the pattern,\n    // otherwise it returns string::npos.\n    if (str.find(pat) != string::npos)\n        return true;\n    else\n        return false;\n}",
                "lang_text": "cpp"
            }
        },
        "platform": "GFG"
    }
}