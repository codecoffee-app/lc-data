{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701632,
            "title": "Pattern searching",
            "titleSlug": "pattern-searching5231",
            "content": "<p><span >Given a string <strong>txt</strong>&nbsp;and a pattern&nbsp;<strong>pat</strong>. Your task is to return <strong>true </strong>if the pattern is present in the given string otherwise return <strong>false</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>txt = \"abcdefh\", pat = \"bcd\"<br /><strong>Output:</strong> true<br /><strong>Explanation: </strong>The pattern \"bcd\" exist in \"a<strong>bcd</strong>efh\".<br /></span></pre>\n<pre><span ><strong>Input: </strong>txt = \"axzy\", pat = \"xy\"<br /><strong>Output:</strong> false<br /><strong>Explanation: </strong>xy is not present in txt</span>.</pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &lt;= |txt| &lt;= 100</span><br /><span >1 &lt;= |pat| &lt;= 100</span></p>\n<div id=\"highlighter--hover-tools\" style=\"display: none;\">\n<div id=\"highlighter--hover-tools--container\">\n<div class=\"highlighter--icon highlighter--icon-copy\" title=\"Copy\">&nbsp;</div>\n<div class=\"highlighter--icon highlighter--icon-change-color\" title=\"Change Color\">&nbsp;</div>\n<div class=\"highlighter--icon highlighter--icon-delete\" title=\"Delete\">&nbsp;</div>\n</div>\n</div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `txt` and a pattern `pat`, determine if the pattern is present within the string. Return `true` if the pattern exists in the string, otherwise return `false`.",
                "constraints": [
                    "1 <= |txt| <= 100",
                    "1 <= |pat| <= 100"
                ],
                "testcases": [
                    {
                        "input": "txt = \"abcdefh\", pat = \"bcd\"",
                        "output": "true",
                        "explanation": "The pattern \"bcd\" is a substring of \"abcdefh\"."
                    },
                    {
                        "input": "txt = \"axzy\", pat = \"xy\"",
                        "output": "false",
                        "explanation": "The pattern \"xy\" is not a substring of \"axzy\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. Slide the pattern over text one by one and check for a match. If a match is found, then slides by 1 again to check for subsequent matches.<br />\n<br />\nComplete code has been provided in next hint.</p>",
            "<p>2. Iterate from 0 to M-N over string then check for each pattern length of N the corresonding characters are same or not.<br />\nbool searchPattern(string str, string text)<br />\n{<br />\n&nbsp;&nbsp;&nbsp; int M = str.length();<br />\n&nbsp;&nbsp;&nbsp; int N = text.length();<br />\n&nbsp;&nbsp;&nbsp; //bool ans = false;<br />\n&nbsp;&nbsp;&nbsp; for(int i = 0; i &lt;= M-N; i++)<br />\n&nbsp;&nbsp;&nbsp; {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int j;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(j = 0;&nbsp; j &lt; N; j++)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(str[i+j] != text[j])<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(j == N)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br />\n&nbsp;&nbsp;&nbsp; }<br />\n&nbsp;&nbsp;&nbsp; return false;<br />\n}<br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    bool searchPattern(string str, string pat) {\n        // Checking if the pattern exists in the given string.\n        // If the pattern exists, it returns the position of the pattern,\n        // otherwise it returns string::npos.\n        if (str.find(pat) != string::npos)\n            return true;\n        else\n            return false;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static boolean searchPattern(String str, String pat) {\n        // Checking if the str contains the pat pattern\n        if (str.contains(pat)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\n#Function to search a pattern in a given string.\ndef searchPattern(st, pat):\n\n    #If pattern is found in the string, return 1.\n    if pat in st:\n        return 1\n\n    #If pattern is not found in the string, return 0.\n    else:\n        return 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    searchPattern(str, pat) {\n        return str.includes(\n            pat); // Check if the string contains the pattern and return the result.\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}