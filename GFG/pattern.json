{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711496,
            "title": "Pattern",
            "titleSlug": "pattern",
            "content": "<p><span style=\"font-size: 18px;\">Geek is very fond of patterns. Once, his teacher gave him <strong>a&nbsp;star pattern</strong> to solve. He gave Geek&nbsp;an integer <strong>n</strong> and asked him to build a pattern.</span></p>\n<p><span style=\"font-size: 18px;\">Help Geek to&nbsp;build <strong>a star pattern</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/711496/Web/Other/blobid2_1713205237.png\" alt=\"\" />\n</span></pre>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\"><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/711496/Web/Other/blobid3_1713205237.png\" alt=\"\" />\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span></p>\n<p><span style=\"font-size: 18px;\">You don't need to input anything. Complete the function <strong>printDiamond()&nbsp;</strong>which takes an integer<strong> n</strong> <strong>&nbsp;</strong>as the input parameter and prints the pattern.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">1&lt;= <strong>n</strong> &lt;= 100</span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek is fascinated by patterns. His teacher challenged him to create a star pattern based on a given integer 'n'. Your task is to help Geek generate this pattern.",
                "constraints": [
                    "1 <= n <= 100"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "*\n**\n*\n",
                        "explanation": null
                    },
                    {
                        "input": "3",
                        "output": "*\n**\n***\n**\n*\n",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about the way output is being updated in each step.</p>"
        ],
        "relatedTopics": [
            {
                "name": "pattern-printing",
                "slug": "pattern-printing"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n\r\n  public:\r\n    void printDiamond(int n) {\r\n        int space = n - 1;\r\n\r\n        // run loop (parent loop)\r\n        // till number of rows\r\n        for (int i = 0; i < n; i++) {\r\n            // loop for initially space,\r\n            // before star printing\r\n            for (int j = 0; j < space; j++) cout << \" \";\r\n\r\n            // Print i+1 stars\r\n            for (int j = 0; j <= i; j++) cout << \"* \";\r\n\r\n            cout << \"\\n\";\r\n            space--;\r\n        }\r\n\r\n        // Repeat again in\r\n        // reverse order\r\n        space = 0;\r\n\r\n        // run loop (parent loop)\r\n        // till number of rows\r\n        for (int i = n; i > 0; i--) {\r\n            // loop for initially space,\r\n            // before star printing\r\n            for (int j = 0; j < space; j++) cout << \" \";\r\n\r\n            // Print i stars\r\n            for (int j = 0; j < i; j++) cout << \"* \";\r\n\r\n            cout << \"\\n\";\r\n            space++;\r\n        }\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n\r\n    void printDiamond(int n) {\r\n\r\n        int space = n - 1;\r\n\r\n        // run loop (parent loop)\r\n        // till number of rows\r\n        for (int i = 0; i < n; i++) {\r\n            // loop for initially space,\r\n            // before star printing\r\n            for (int j = 0; j < space; j++) System.out.print(\" \");\r\n\r\n            // Print i+1 stars\r\n            for (int j = 0; j <= i; j++) System.out.print(\"* \");\r\n\r\n            System.out.print(\"\\n\");\r\n            space--;\r\n        }\r\n\r\n        // Repeat again in\r\n        // reverse order\r\n        space = 0;\r\n\r\n        // run loop (parent loop)\r\n        // till number of rows\r\n        for (int i = n; i > 0; i--) {\r\n            // loop for initially space,\r\n            // before star printing\r\n            for (int j = 0; j < space; j++) System.out.print(\" \");\r\n\r\n            // Print i stars\r\n            for (int j = 0; j < i; j++) System.out.print(\"* \");\r\n\r\n            System.out.print(\"\\n\");\r\n            space++;\r\n        }\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def printDiamond(self, N):\r\n        # run loop (parent loop) \r\n        # till number of rows\r\n        for row in range(1, N + 1):\r\n            # loop for initially space, \r\n            # before star printing\r\n            for space in range(N - row):\r\n                print(' ', end = '')\r\n            # Print stars\r\n            for asterisk in range(1, row + 1):\r\n                print('* ', end = '')\r\n            print()\r\n        \r\n        # run loop (parent loop) \r\n        # till number of rows\r\n        for row in range(N, 0, -1):\r\n            # loop for initially space, \r\n            # before star printing\r\n            for space in range(N - row):\r\n                print(' ', end = '')\r\n            # Print stars\r\n            for asterisk in range(1, row + 1):\r\n                print('* ', end = '')\r\n            print()",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    printDiamond(n) {\n        let space = n - 1;\n\n        // run loop (parent loop)\n        // till number of rows\n        for (let i = 0; i < n; i++) {\n            // loop for initially space,\n            // before star printing\n            let line = \"\";\n            for (let j = 0; j < space; j++) line += \" \";\n\n            // Print i+1 stars\n            for (let j = 0; j <= i; j++) line += \"* \";\n\n            console.log(line);\n            space--;\n        }\n\n        // Repeat again in\n        // reverse order\n        space = 0;\n\n        // run loop (parent loop)\n        // till number of rows\n        for (let i = n; i > 0; i--) {\n            // loop for initially space,\n            // before star printing\n            let line = \"\";\n            for (let j = 0; j < space; j++) line += \" \";\n\n            // Print i stars\n            for (let j = 0; j < i; j++) line += \"* \";\n\n            console.log(line);\n            space++;\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}