{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700512,
            "title": "Peak element",
            "titleSlug": "peak-element",
            "content": "<p><span >Given an array <strong>arr[]&nbsp;</strong>where no two adjacent elements are same, find the <strong>index </strong>of a <strong>peak </strong>element. An element is considered to be a <strong>peak</strong> if it is greater than its adjacent elements (if they exist). If there are multiple peak elements, return index of any one of them.&nbsp;</span><span style=\"font-size: 18.6667px;\">The output will be&nbsp;</span><strong style=\"font-size: 18.6667px;\">\"true\"</strong><span style=\"font-size: 18.6667px;\">&nbsp;if the index returned by your function is correct; otherwise, it will be \"</span><strong style=\"font-size: 18.6667px;\">false\"</strong><span style=\"font-size: 18.6667px;\">.</span></p>\n<p><span >Note: Consider the element <strong>before </strong>the <strong>first </strong>element and the element <strong>after </strong>the <strong>last </strong>element to be <strong>negative infinity</strong>.</span></p>\n<p><span ><strong>Examples :<br /></strong></span></p>\n<pre><span ><strong>Input: </strong>arr = [1, 2, 4, 5, 7, 8, 3]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>arr[5] = 8 is a peak element because arr[4] &lt; arr[5] &gt; arr[6].</span></pre>\n<pre><span ><strong>Input: </strong>arr = [10, 20, 15, 2, 23, 90, 80]\n<strong>Output: </strong>true<strong>\nExplanation: </strong>arr[1] = 20 and arr[5] = 90 are peak elements because arr[0] &lt; arr[1] &gt; arr[2] and arr[4] &lt; arr[5] &gt; arr[6]. <br /></span></pre>\n<pre><span ><strong>Input: </strong>arr = [1, 2, 3]\n<strong>Output: </strong>true<strong>\nExplanation: </strong>arr[2] is a peak element because arr[1] &lt; arr[2] and arr[2] is the last element, so it has negative infinity to its right.</span></pre>\n<p><span ><strong>Constraints:</strong><br /><span style=\"font-size: 18.6667px;\">1</span>&nbsp;&le; arr.size() &le; 10<sup>6</sup><br />-2<sup>31</sup> &le; arr[i] &le; 2<sup>31</sup> - 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` where no two adjacent elements are the same, find the index of a peak element. An element is considered a peak if it is greater than its adjacent elements (if they exist). If multiple peak elements exist, return the index of any one of them. Assume elements before the first and after the last are negative infinity.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "-2^31 <= arr[i] <= 2^31 - 1"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 4, 5, 7, 8, 3]",
                        "output": "true",
                        "explanation": "The element 8 at index 5 is a peak because it is greater than its neighbors 7 and 3."
                    },
                    {
                        "input": "[10, 20, 15, 2, 23, 90, 80]",
                        "output": "true",
                        "explanation": "The elements 20 at index 1 and 90 at index 5 are peak elements. Either index is a valid solution."
                    },
                    {
                        "input": "[1, 2, 3]",
                        "output": "true",
                        "explanation": "The element 3 at index 2 is a peak because it is greater than its neighbor 2 and considered to be greater than negative infinity (element after last element)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #374151; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">Try to utilize binary search to efficiently find a peak element.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "visa",
            "adobe",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int peakElement(vector<int> &arr) {\n        int n = arr.size();\n\n        // If there is only one element, then it's a peak\n        if (n == 1)\n            return 0;\n\n        // Check if the first element is a peak\n        if (arr[0] > arr[1])\n            return 0;\n\n        // Check if the last element is a peak\n        if (arr[n - 1] > arr[n - 2])\n            return n - 1;\n\n        // Search Space for binary Search\n        int lo = 1, hi = n - 2;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n\n            // If the element at mid is a\n            // peak element return  mid\n            if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1])\n                return mid;\n\n            // If next neighbor is greater, then peak\n            // element will exist in the right subarray\n            if (arr[mid] < arr[mid + 1])\n                lo = mid + 1;\n\n            // Otherwise, it will exist in left subarray\n            else\n                hi = mid - 1;\n        }\n\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public int peakElement(int[] arr) {\n        int n = arr.length;\n\n        // If there is only one element, then it's a peak\n        if (n == 1) return 0;\n\n        // Check if the first element is a peak\n        if (arr[0] > arr[1]) return 0;\n\n        // Check if the last element is a peak\n        if (arr[n - 1] > arr[n - 2]) return n - 1;\n\n        // Search Space for binary Search\n        int lo = 1, hi = n - 2;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n\n            // If the element at mid is a\n            // peak element return mid\n            if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) return mid;\n\n            // If next neighbor is greater, then peak\n            // element will exist in the right subarray\n            if (arr[mid] < arr[mid + 1]) lo = mid + 1;\n\n            // Otherwise, it will exist in left subarray\n            else\n                hi = mid - 1;\n        }\n\n        return 0;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findPeakUtil(self, arr, low, high, n):\n        # Calculating mid\n        mid = (low + high) // 2\n\n        # If mid is the first or last index and the element is greater than the next or previous element\n        if (mid == 0 or arr[mid - 1]\n                <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n            return mid\n\n        # If the middle element is smaller than the previous element, recurse on the left side\n        elif mid > 0 and arr[mid - 1] > arr[mid]:\n            return self.findPeakUtil(arr, low, mid - 1, n)\n\n        # Else recurse on the right side\n        else:\n            return self.findPeakUtil(arr, mid + 1, high, n)\n\n    def peakElement(self, arr):\n        n = len(arr)  # Get the size of the array\n        return self.findPeakUtil(arr, 0, n - 1, n)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    peakElement(arr) {\n        let n = arr.length;\n\n        // If there is only one element, then it's a peak\n        if (n === 1) return 0;\n\n        // Check if the first element is a peak\n        if (arr[0] > arr[1]) return 0;\n\n        // Check if the last element is a peak\n        if (arr[n - 1] > arr[n - 2]) return n - 1;\n\n        // Search Space for binary Search\n        let lo = 1, hi = n - 2;\n\n        while (lo <= hi) {\n            let mid = lo + Math.floor((hi - lo) / 2);\n\n            // If the element at mid is a\n            // peak element return mid\n            if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) return mid;\n\n            // If next neighbor is greater, then peak\n            // element will exist in the right subarray\n            if (arr[mid] < arr[mid + 1]) lo = mid + 1;\n\n            // Otherwise, it will exist in left subarray\n            else\n                hi = mid - 1;\n        }\n\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}