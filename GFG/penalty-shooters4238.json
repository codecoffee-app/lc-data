{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704747,
            "title": "Penalty Shooters",
            "titleSlug": "penalty-shooters4238",
            "content": "<p><span style=\"font-size:18px\">Geek and Nerd are strikers playing football with their friend the Goalie. Their energies are denoted by X,Y and Z respectively.&nbsp;<br />\r\nStrikers can only score a goal if the Goalie&#39;s energy is a factor of their energy. For every goal scored the energy of the respective player is decreased by 1. Each save decreses the Goalie&#39;s energy by 1. The game ends when the Goalie&#39;s energy is reduced to 1.&nbsp;The strikers can try to goal repeatedly in any order in order to optimise the total number of goals. Geek takes the lead whenever in doubt.&nbsp;<br />\r\nFind the number of goals made by Geek and Nerd.&nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nX = 4, Y = 9, Z = 5</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 3 2</span>\r\n\r\n<strong><span style=\"font-size:18px\">Explaination:</span></strong>\r\n<span style=\"font-size:18px\"><strong>1st Kick: </strong>X=4, Y=9, Z=4\r\nZ is not a factor of X or Y. So the Goalie \r\nwill save the first kick and his energy will \r\nreduce by 1. </span>\r\n\r\n<span style=\"font-size:18px\"><strong>2nd Kick:</strong> X=3, Y=9, Z=4\r\nZ is a factor of X. So Geek will take the \r\ngoal and reduce X by 1. </span>\r\n\r\n<span style=\"font-size:18px\"><strong>3rd Kick: </strong>X=3, Y=9, Z=3. Goalie saves. </span>\r\n\r\n<span style=\"font-size:18px\"><strong>4th Kick:</strong> X=2, Y=9, Z=3. \r\nZ is a factor of both X and Y. \r\nWhen in doubt, Geek takes the lead. </span>\r\n\r\n<span style=\"font-size:18px\"><strong>5th Kick: </strong>X=2, Y=8, Z=3. Nerd goals.\r\n<strong>6th Kick: </strong>X=2, Y=8, Z=2. Goalie saves.\r\n<strong>7th Kick: </strong>X=1, Y=8, Z=2. Geek goals.\r\n<strong>8th Kick: </strong>X=1, Y=7, Z=2. Nerd goals.\r\n<strong>9th Kick: </strong>X=1, Y=7, Z=1. \r\nGoalie saves and ends the game.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nX = 13, Y = 10, Z = 7</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 0 3</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Explaination: </strong>Since X is a prime number, \r\nGeek will never goal. </span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complee the function <strong>goals()</strong> which takes X, Y and Z as input parameters and returns a list of integers containing two elements denoting the number of goals scored by Geek and Nerd respectively.&nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(Z)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; X, Y, Z &le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek and Nerd are football strikers, and their friend is the Goalie. Their respective energies are represented by X, Y, and Z. A striker can score a goal only if the Goalie's energy is a factor of the striker's energy. Each goal decreases the striker's energy by 1, and each save decreases the Goalie's energy by 1. The game continues until the Goalie's energy reaches 1. The strikers attempt to maximize the total goals scored, taking turns in an order that optimizes the goal count. When both can score Geek always takes the lead.\n\nDetermine the number of goals scored by Geek and Nerd.",
                "constraints": [
                    "1 \u2264 X, Y, Z \u2264 10^5"
                ],
                "testcases": [
                    {
                        "input": "X = 4, Y = 9, Z = 5",
                        "output": "3 2",
                        "explanation": "The game progresses as follows:\n- Initially: X=4, Y=9, Z=5. Goalie saves (Z is not a factor of X or Y) -> Z=4.\n- Next: X=4, Y=9, Z=4. Geek scores (Z is a factor of X) -> X=3.\n- Next: X=3, Y=9, Z=4. Goalie saves (Z is not a factor of X or Y) -> Z=3.\n- Next: X=3, Y=9, Z=3. Geek scores (Z is a factor of X) -> X=2.\n- Next: X=2, Y=9, Z=3. Nerd scores(Z is a factor of Y) -> Y = 8\n- Next: X=2, Y=8, Z=3. Goalie saves (Z is not a factor of X or Y) -> Z=2.\n- Next: X=2, Y=8, Z=2. Geek scores (Z is a factor of X) -> X=1.\n- Next: X=1, Y=8, Z=2. Nerd scores (Z is a factor of Y) -> Y=7.\n- Next: X=1, Y=7, Z=2. Goalie saves (Z is not a factor of X or Y) -> Z=1. Game ends.\nGeek scores 3 goals, and Nerd scores 2 goals."
                    },
                    {
                        "input": "X = 13, Y = 10, Z = 7",
                        "output": "0 3",
                        "explanation": "Since X is a prime number, Geek will never goal. Nerd scores 3 goals"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><font size=\"4\">Check if Z is a factor of X or Y in each step.&nbsp;</font></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "logical-thinking",
                "slug": "logical-thinking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to find number of goals for player X and player Y.\n    vector<int> goals(int X, int Y, int Z){\n        int c1 = 0, c2 = 0;   //initialize counters for X and Y goals\n\n        //loop until only one goal is left for Z\n        while(Z > 1){\n            //check if goal can be scored by player X\n            if(X%Z == 0){\n                c1++;   //increment X goal counter\n                X--;    //decrement X's remaining goals\n            }\n            //check if goal can be scored by player Y\n            if(Y%Z == 0){\n                c2++;   //increment Y goal counter\n                Y--;    //decrement Y's remaining goals\n            }\n            else\n                Z--;    //increment Z to check for lower goal value\n        }\n        vector<int> val;    //create a vector to store X and Y goal counters\n        val.push_back(c1);\n        val.push_back(c2);\n        return val;         //return the vector with X and Y goal counts\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    static List<Integer> goals(int X, int Y, int Z)\r\n    {\r\n        int c1 = 0, c2 = 0;\r\n        \r\n        // Loop until Z becomes 1\r\n        while(Z > 1){\r\n            // Check if X is divisible by Z\r\n\t        if(X%Z == 0){\r\n\t            c1++;\r\n\t            X--;\r\n\t        }\r\n\r\n            // Check if Y is divisible by Z\r\n\t        if(Y % Z == 0){\r\n\t            c2++;\r\n\t            Y--;\r\n\t        }\r\n\t        else\r\n\t            Z--;\r\n\t    }\r\n\r\n\t    // Create a list to store the values of c1 and c2\r\n\t    List<Integer> val = new ArrayList<Integer>();\r\n\t    val.add(c1);\r\n\t    val.add(c2);\r\n\t    return val;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def goals(self, X, Y, Z):\r\n        c1 = 0           # initialize counter for goal attempts of X\r\n        c2 = 0           # initialize counter for goal attempts of Y\r\n        \r\n        # continue iteration until Z is greater than 1\r\n        while(Z > 1):\r\n            if X%Z == 0:             # check if X is divisible by Z\r\n                c1+=1               # increment counter for X goal attempts\r\n                X-=1                # decrement X by 1\r\n            if Y%Z == 0:             # check if Y is divisible by Z\r\n                c2+=1               # increment counter for Y goal attempts\r\n                Y-=1                # decrement Y by 1\r\n            else:\r\n                Z-=1                # decrement Z by 1 if X and Y are not divisible by Z\r\n        val = [c1,c2]               # create a list of the goal attempts for X and Y\r\n        return val                  # return the list of goal attempts",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    goals(X, Y, Z) {\n        let c1 = 0;\n        let c2 = 0;\n\n        while(Z > 1) {\n            if (X%Z === 0) {\n                c1++;\n                X--;\n            }\n            if (Y%Z === 0) {\n                c2++;\n                Y--;\n            }\n            else {\n                Z--;\n            }\n        }\n        let val = [c1, c2];\n        return val;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public List<int> goals(int X, int Y, int Z)\n    {\n        int c1 = 0, c2 = 0;   \n\n        while (Z > 1)\n        {\n            if (X % Z == 0)\n            {\n                c1++;\n                X--;\n            }\n            if (Y % Z == 0)\n            {\n                c2++;\n                Y--;\n            }\n            Z--; // Move the decrement statement inside the loop\n            \n        }\n        \n        List<int> val = new List<int>();\n        val.Add(c1);\n        val.Add(c2);\n        return val;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}