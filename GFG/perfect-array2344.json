{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702693,
            "title": "Perfect Array",
            "titleSlug": "perfect-array2344",
            "content": "<p><span >Given an array <strong>arr[]</strong> of non-negative integers, determine whether the array is perfect. An array is considered perfect if it first strictly increases, then remains constant, and finally strictly decreases. Any of these three parts can be empty.</span></p>\n<h3><span >Examples:</span></h3>\n<pre><span ><strong>Input:</strong> arr[] = [1, 8, 8, 8, 3, 2]</span><br /><span ><strong>Output:</strong> true</span><br /><span ><strong>Explanation:</strong> The array [1, 8, 8, 8, 3, 2] first increases in the range [0, 1], stays constant in the range [1, 3], and then decreases in the range [3, 4]. Thus, the array is perfect.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [1, 1, 2, 2, 1]</span><br /><span ><strong>Output:</strong> false</span><br /><span ><strong>Explanation:</strong> The array does not follow the required pattern of strictly increasing, constant, and then strictly decreasing.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)</span><br /><span ><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints</strong><br /></span><span >1 &le; arr.size() &le; 10<sup>6</sup><br /></span><span >1 &le; arr[i] &le; 10<sup>8</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >The approach is to cover the increasing part, constant part, and then decreasing part, if the array is still left then it is not perfect.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool isPerfect(vector<int>& arr) {\n        int n = arr.size();\n        if (n < 3)\n            return false;\n\n        int i = 1;\n        // Check for strictly increasing part\n        while (i < n && arr[i] > arr[i - 1])\n            i++;\n\n        // Check for constant part\n        while (i < n && arr[i] == arr[i - 1])\n            i++;\n\n        // Check for strictly decreasing part\n        while (i < n && arr[i] < arr[i - 1])\n            i++;\n\n        // If we reached the end, the array is perfect\n        return i == n;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean isPerfect(int[] arr) {\n        int n = arr.length;\n        if (n < 3) return false;\n\n        int i = 1;\n        // Check for strictly increasing part\n        while (i < n && arr[i] > arr[i - 1]) i++;\n\n        // Check for constant part\n        while (i < n && arr[i] == arr[i - 1]) i++;\n\n        // Check for strictly decreasing part\n        while (i < n && arr[i] < arr[i - 1]) i++;\n\n        // If we reached the end, the array is perfect\n        return i == n;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def isPerfect(self, arr):\n        n = len(arr)\n        if n < 3:\n            return False\n\n        i = 1\n        # Check for strictly increasing part\n        while i < n and arr[i] > arr[i - 1]:\n            i += 1\n\n        # Check for constant part\n        while i < n and arr[i] == arr[i - 1]:\n            i += 1\n\n        # Check for strictly decreasing part\n        while i < n and arr[i] < arr[i - 1]:\n            i += 1\n\n        # If we reached the end, the array is perfect\n        return i == n\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    isPerfect(arr) {\n        const n = arr.length;\n        if (n === 0) return true;\n\n        let i = 0;\n        // Check for strictly increasing part\n        while (i + 1 < n && arr[i] < arr[i + 1]) i++;\n\n        // Check for constant part\n        while (i + 1 < n && arr[i] === arr[i + 1]) i++;\n\n        // Check for strictly decreasing part\n        while (i + 1 < n && arr[i] > arr[i + 1]) i++;\n\n        // If we reached the end, the array is perfect\n        return i === n - 1;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}