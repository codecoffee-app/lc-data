{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700561,
            "title": "Perfect Binary Tree",
            "titleSlug": "perfect-binary-tree",
            "content": "<p><span style=\"font-size:18px\">Given a Binary Tree, write a function to check whether the given Binary Tree is a prefect Binary Tree or not. A Binary tree is Perfect Binary Tree&nbsp;in which all internal nodes have two children and all leaves are at same level.</span></p>\n\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> </span>\n\\t   <span style=\"font-size:18px\"> 7\n&nbsp;     /  \\\n&nbsp;    4    9</span>\n<strong><span style=\"font-size:18px\">Output: </span></strong><span style=\"font-size:18px\">YES</span>\n<span style=\"font-size:18px\"><strong>Explanation: </strong></span>\n<span style=\"font-size:18px\">As the root node 7 has two children and \ntwo leaf nodes </span><span style=\"font-size:18px\">4 and 9 are at same level \nso it is a perfect binary tree.</span>\n</pre>\n\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong></span>\n\\t\\t<span style=\"font-size:18px\">\\t 7\n&nbsp;\\t\\t /   \\\n&nbsp;\\t\\t3     8\n\\t     /   \\     \\\n&nbsp;\\t   2     5     10\n&nbsp;\\t /\n\\t 1</span>\n<span style=\"font-size:18px\"><strong>Output: </strong>NO</span>\n</pre>\n\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Your task:</strong></span></p>\n\n<p dir=\"ltr\"><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>isPerfect()&nbsp;</strong>which takes root node of the tree as input parameter and returns a boolean value.If the tree is a perfect binary tree return true other wise return false.</span></p>\n\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=T&lt;=10^5<br />\n1&lt;=N&lt;=10^5<br />\n1&lt;=data of node&lt;=10^5</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, determine if it is a perfect binary tree. A perfect binary tree is defined as a tree where all internal nodes have exactly two children, and all leaves are at the same level.",
                "constraints": [
                    "1 <= Number of Test Cases (T) <= 10^5",
                    "1 <= Number of Nodes (N) <= 10^5",
                    "1 <= Node data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "     7\n    /  \\\n   4    9",
                        "output": "YES",
                        "explanation": "The root node 7 has two children (4 and 9). The leaf nodes 4 and 9 are at the same level. Therefore, it is a perfect binary tree."
                    },
                    {
                        "input": "         7\n        /   \\\n       3     8\n      /   \\     \\\n     2     5     10\n    /",
                        "output": "NO",
                        "explanation": "The tree is not a perfect binary tree. Not all leaf nodes are at the same level, and not all internal nodes have two children."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use the depth of a leaf node?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "factset"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\npublic:\n    bool isPerfect(Node *root)\n    {\n        if (root == NULL)\n            return true;\n        int d = findADepth(root);\n        return isPerfectRec(root, d, 0);\n    }\n\n    bool isPerfectRec(Node *root, int d, int level)\n    {\n        // An empty tree is perfect\n        if (root == NULL)\n            return true;\n\n        // If leaf node, then its depth must be same as\n        // depth of all other leaves.\n        if (root->left == NULL && root->right == NULL)\n            return (d == level + 1);\n\n        // If internal node and one child is empty\n        if (root->left == NULL || root->right == NULL)\n            return false;\n\n        // Left and right subtrees must be perfect.\n        return isPerfectRec(root->left, d, level + 1) &&\n               isPerfectRec(root->right, d, level + 1);\n    }\n    int findADepth(Node *node)\n    {\n        int d = 0;\n        while (node != NULL)\n        {\n            d++;\n            node = node->left;\n        }\n        return d;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    public static boolean isPerfect(Node root){\n        int d = findDepth(root);\n        return isPerfectRec(root,d,0);\n    }\n    public static boolean isPerfectRec(Node root,int d,int level){\n        // An empty tree is perfect\n        if (root == null)\n            return true;\n    \n        // If leaf node, then its depth must be same as\n        // depth of all other leaves.\n        if (root.left == null && root.right == null)\n            return (d == level+1);\n    \n        // If internal node and one child is empty\n        if (root.left == null || root.right == null)\n            return false;\n    \n        // Left and right subtrees must be perfect.\n        return isPerfectRec(root.left, d, level+1) &&\n               isPerfectRec(root.right, d, level+1);\n    }\n    \n    public static int findDepth(Node node){\n       int d = 0;\n       while (node != null)\n       {\n          d++;\n          node = node.left;\n       }\n       return d;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def isPerfect(self,root):\n        d = self.findDepth(root);\n        return self.isPerfectRec(root,d,0);\n\n    def isPerfectRec(self,root,d,level):\n        # An empty tree is perfect\n        if (root == None):\n            return true;\n    \n        # // If leaf node, then its depth must be same as\n        # // depth of all other leaves.\n        if (root.left == None and root.right == None):\n            return (d == level+1);\n    \n        # // If internal node and one child is empty\n        if (root.left == None or root.right == None):\n            return False\n    \n        #  Left and right subtrees must be perfect.\n        return self.isPerfectRec(root.left, d, level+1) and self.isPerfectRec(root.right, d, level+1);\n        \n    def findDepth(self,node):\n        d=0\n        while(node!=None):\n            d=d+1\n            node=node.left\n        return d",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\n/**\n * @param {Node} root\n * @return {boolean}\n */\n\nclass Solution {\n  isPerfect(root) {\n    if (root === null) {\n        return true;\n    }\n    let d = this.findADepth(root);\n    return this.isPerfectRec(root, d, 0);\n  }\n\n  isPerfectRec(root, d, level) {\n    if (root === null) {\n        return true;\n    }\n\n    if (root.left === null && root.right === null) {\n        return (d === level + 1);\n    }\n\n    if (root.left === null || root.right === null) {\n        return false;\n    }\n\n    return this.isPerfectRec(root.left, d, level + 1) &&\n           this.isPerfectRec(root.right, d, level + 1);\n  }\n\n  findADepth(node) {\n    let d = 0;\n    while (node !== null) {\n        d++;\n        node = node.left;\n    }\n    return d;\n  }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}