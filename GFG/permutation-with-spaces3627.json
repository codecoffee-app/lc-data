{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704858,
            "title": "Permutation with Spaces",
            "titleSlug": "permutation-with-spaces3627",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong>, you need to print <strong>all possible strings</strong> that can be made by placing spaces (zero or one) in between them. The output should be printed in <strong>sorted</strong> <strong>increasing</strong> order of strings.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\ns = \"ABC\"\n<strong>Output: </strong>(A B C)(A BC)(AB C)(ABC)\n<strong>Explanation</strong>:\nABC\nAB C\nA BC\nA B C\nThese are the possible combination of \"ABC\".</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\ns = \"BBR\"\n<strong>Output: </strong>(B B R)(B BR)(BB R)(BBR)\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>permutation()</strong> which takes the string <strong>s</strong> as input parameters and returns the <strong>sorted array&nbsp;</strong>of the string denoting the different permutations <strong>(DON'T ADD '(' and ')' it will be handled by the driver code only)</strong>.<br /><br /><strong>Expected Time Complexity:</strong> O(2<sup>s</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>CONSTRAINTS:</strong><br />1 &lt;= |s| &lt; 10<br />s only contains <strong>lowercase and Uppercase English</strong> letters.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, generate all possible strings that can be formed by inserting zero or one space between the characters. Return the strings in lexicographically sorted order.",
                "constraints": [
                    "1 <= |s| < 10",
                    "s contains only lowercase and uppercase English letters."
                ],
                "testcases": [
                    {
                        "input": "ABC",
                        "output": "A B C,A BC,AB C,ABC",
                        "explanation": "The possible combinations of 'ABC' are 'A B C', 'A BC', 'AB C', and 'ABC'. When sorted lexicographically these are in the specified output order."
                    },
                    {
                        "input": "BBR",
                        "output": "B B R,B BR,BB R,BBR",
                        "explanation": "The possible combinations of 'BBR' are 'B B R', 'B BR', 'BB R', and 'BBR'. When sorted lexicographically these are in the specified output order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">If we take a closer look, we can notice that this problem boils down to <a href=\"https://www.geeksforgeeks.org/power-set/\">the Power Set problem</a>.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to recursively generate all permutations of a string.\n    void permute(string S, int start, int end, string current, vector<string>& result) {\n        // base case: when we have reached the end of the string,\n        // add the current permutation to the result.\n        if (start > end) {\n            result.push_back(current);\n            return;\n        }\n\n        // include the current character in the permutation and\n        // recurse for the next character.\n        current.push_back(S[start]);\n        permute(S, start + 1, end, current, result);\n\n        // insert a space character after the current character,\n        // creating a new permutation, and recurse for the next character.\n        current.insert(current.length() - 1, 1, ' ');\n        permute(S, start + 1, end, current, result);\n    }\n\n    // Function to generate all permutations of the given string.\n    vector<string> permutation(string S) {\n        vector<string> result;\n        string current;\n\n        // start with the first character of the string as the current character.\n        current.push_back(S[0]);\n\n        // call the permutation function to generate all permutations.\n        permute(S, 1, S.length() - 1, current, result);\n\n        // sort the permutations in lexicographical order.\n        sort(result.begin(), result.end());\n\n        // return the list of permutations.\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Recursive utility function to generate permutations\n    void util(int index, String S, String op, ArrayList<String> result) {\n        int n = S.length();\n        // If index reaches the last character, add the current result to the final list\n        if (index == n - 1) {\n            op += Character.toString(S.charAt(index));\n            result.add(op);\n            return;\n        }\n        // Recursive calls to generate permutations by either including or excluding the\n        // current character\n        util(index + 1, S, op + Character.toString(S.charAt(index)), result);\n        util(index + 1, S, op + Character.toString(S.charAt(index)) + \" \", result);\n    }\n\n    // Function to generate all permutations of a given string\n    ArrayList<String> permutation(String S) {\n        int n = S.length();\n        ArrayList<String> result = new ArrayList<>();\n        // If the string contains only one character, return it directly\n        if (n == 1) {\n            result.add(S);\n            return result;\n        }\n        // Call the utility function to generate permutations\n        util(0, S, \"\", result);\n        // Sort the final list in ascending order\n        Collections.sort(result);\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to generate all permutations of the given string.\n    def permutation(self, S):\n        n = len(S)\n        ans = []\n        # If the string has only one character, return it as the only permutation.\n        if n == 1:\n            return [S]\n\n        # Recursive function to generate permutations.\n        def util(index, op):\n            # If we have reached the last character of the string,\n            # append it to the output and add it to the solutions list.\n            if index == n - 1:\n                op = op + S[index]\n                ans.append(op)\n                return\n\n            # Generate permutations by either including the current character\n            # or adding a space before the current character.\n            util(index + 1, op + S[index])\n            util(index + 1, op + S[index] + \" \")\n\n        # Start generating permutations by calling the util function.\n        util(0, \"\")\n\n        # Sort the permutations in lexicographical order and return the final list.\n        ans.sort()\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    permutation(s) {\n        let result = [];\n        let current = '';\n        current = current.concat(s[0]);\n        this.permute(s, 1, s.length - 1, current, result);\n        result.sort();\n        return result;\n    }\n    \n    permute(s, start, end, current, result) {\n        if(start>end){\n            result.push(current);\n            return;\n        }\n        current = current.concat(s[start]);\n        this.permute(s, start+1, end, current, result);\n        current = current.substring(0, current.length - 1).concat(' ').concat(s[start]);\n        this.permute(s, start+1, end, current, result);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}