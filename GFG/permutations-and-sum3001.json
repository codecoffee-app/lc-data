{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705043,
            "title": "Permutations and Sum",
            "titleSlug": "permutations-and-sum3001",
            "content": "<p><span style=\"font-size:18px\">Given a number <strong>N </strong>, calculate total number of permutations of it and also the sum of all permutations including that number itself.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 5\n<strong>Output: </strong>1 5\n<strong>Explanation: </strong>There is only one permutation\nof 5 and sum of this permutaion is 5.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 12\n<strong>Output: </strong>2 33\n<strong>Explanation: </strong>Permutations of 12 are 12 and 21.\nSum of these permutations are = 12 + 21 = 33.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anyhting. Your task is to complete the function&nbsp;<strong>permutation()</strong>&nbsp;which takes N as input parameter ans returns a list that contains total number of permutations and sum of all these permutations including the number iteself.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(K!) where K = log<sub>10</sub>N<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, determine the total number of distinct permutations possible using its digits and calculate the sum of all these permutations, including N itself.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "1 5",
                        "explanation": "Since N is a single digit, there is only one permutation, which is 5.  The sum of the permutations is also 5."
                    },
                    {
                        "input": "12",
                        "output": "2 33",
                        "explanation": "The permutations of 12 are 12 and 21. The sum of these permutations is 12 + 21 = 33."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all permutation of the number.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n\tpublic:\n\t\n\t//Function to convert string to integer.\n\tint string_to_int(string s){\n\t\tint res = 0;\n\t\tfor(auto i: s)\n\t\t\tres = res * 10 + (i-'0');\n\t\treturn res;\n\t}\n\t\n\t//Function to generate all permutations of digits in a given number.\n\tvector<int> permutaion(int N) {\n\t\tstring s = \"\";\n\t\twhile(N){\n\t\t\ts += char(N%10 + '0');\n\t\t\tN /= 10;\n\t\t}\n\t\tsort(s.begin(), s.end());\n\t\t\n\t\tint cnt = 0; //counter variable to count number of permutations\n\t\tint tot = 0; //variable to store sum of all permutations\n\t\t\n\t\t//generating permutations using next_permutation function\n\t\tdo{\n\t\t\ttot += string_to_int(s); //converting string to integer and adding to total\n\t\t\tcnt++; //incrementing counter\n\t\t}while(next_permutation(s.begin(), s.end()));\n\t\t\n\t\tvector<int>res; //vector to store the result\n\t\tres.push_back(cnt); //pushing the count of permutations\n\t\tres.push_back(tot); //pushing the sum of permutations\n\t\treturn res; //returning the result vector\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}