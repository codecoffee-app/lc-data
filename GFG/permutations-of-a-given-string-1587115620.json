{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701197,
            "title": "String Permutations",
            "titleSlug": "permutations-of-a-given-string-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a string S. The task is to find all permutations (<strong>need not be different</strong>) of a given string.</span></p>\n<p><span style=\"font-size: 18px;\">Note: return the permutations in </span><span style=\"font-size: 18px;\"><strong>lexicographically increasing</strong> order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>S = AAA\n<strong>Output: </strong>AAA AAA AAA AAA AAA AAA<br /><strong>Explanation:</strong> There are total 6 permutations, as given in the output.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>S = ABSG\n<strong>Output: </strong>ABGS ABSG AGBS AGSB ASBG ASGB\nBAGS BASG BGAS BGSA BSAG BSGA GABS\nGASB GBAS GBSA GSAB GSBA SABG SAGB\nSBAG SBGA SGAB SGBA<br /><strong>Explanation:</strong> There are total 24 permutations, as given in the output.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Your Task:</span></strong><br /><span style=\"font-size: 18px;\">This is a function problem. You only need to complete the <strong>function permutation </strong>that takes <strong>S as parameter</strong> and returns&nbsp;the list of&nbsp;<strong>permutations </strong>in lexicographically increasing&nbsp;order. The <strong>newline is automatically </strong>added by driver code.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; size of string &le; 5</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Write a recursive function that employs swap to swap every character with every other character so as to generate all permutations.</p>\n\n<p><img alt=\"NewPermutation\" class=\"aligncenter size-full wp-image-118925\" src=\"https://www.geeksforgeeks.org/wp-content/uploads/NewPermutation.gif\" style=\"height:231px; width:565px\" /></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "oyo-rooms",
            "samsung",
            "citrix",
            "maq-software",
            "cisco"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n    public:\n        void permutations(string str, int i, int n,vector<string>&v)\n    {\n        // base condition\n        if (i == n - 1)\n        {\n            v.push_back(str);\n            return;\n        }\n    \n        // process each character of the remaining string\n        for (int j = i; j < n; j++)\n        {\n            // swap character at index i with current character\n            swap(str[i], str[j]);       // STL swap() used\n    \n            // recurse for string [i+1, n-1]\n            permutations(str, i + 1, n,v);\n    \n            // backtrack (restore the string to its original state)\n            swap(str[i], str[j]);\n        }\n    }\n    \n    \n    vector<string> permutation(string S)\n    {\n        vector<string> v;\n        permutations(S,0,S.length(),v);\n        sort(v.begin(),v.end());\n        return v;\n    }\n       \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass Solution\n{\n    ArrayList<String> arr=new ArrayList<>();\n    private void permute(String str, int l, int r) \n    { \n        //base condition\n        if (l == r) \n            arr.add(str); \n        else\n        { //process each character of the remaining string\n            for (int i = l; i <= r; i++) \n            { // swap character at index i with current character\n                str = swap(str,l,i); \n                permute(str, l+1, r); // recurse for string [i+1, n-1]\n                str = swap(str,l,i); // backtrack (restore the string to its original state)\n            } \n        } \n    } \n  \n    \n    public String swap(String a, int i, int j) \n    { \n        char temp; \n        char[] charArray = a.toCharArray(); \n        temp = charArray[i] ; \n        charArray[i] = charArray[j]; \n        charArray[j] = temp; \n        return String.valueOf(charArray); \n    } \n    \n    \n    public ArrayList<String> permutation(String S)\n    {\n    \tpermute(S,0,S.length()-1);\n    \tCollections.sort(arr); \n    \treturn arr;\n    }\n\t   \n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def toString(self,List): \n        return ''.join(List) \n \n    # Function to print permutations of string \n    # This function takes three parameters: \n    # 1. String \n    # 2. Starting index of the string \n    # 3. Ending index of the string. \n    def permute(self,a, l, r,S): \n        if l==r: \n            S.append(self.toString(a))\n            return;\n        else: \n            for i in range(l,r+1): \n                a[l], a[i] = a[i], a[l] \n                self.permute(a, l+1, r, S) \n                a[l], a[i] = a[i], a[l] # backtrack \n                \n        \n    def permutation(self, s):\n        n = len(s) \n        a = list(s) \n        S=[]\n        self.permute(a, 0, n-1,S)\n        S.sort()\n        return S\n        ",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    public List<string> permutation(string S)\n    {\n        List<string> result = new List<string>();\n        Permutations(S, 0, S.Length, result);\n        result.Sort();\n        return result;\n    }\n\n    private void Permutations(string str, int i, int n, List<string> result)\n    {\n        if (i == n - 1)\n        {\n            result.Add(str);\n            return;\n        }\n\n        for (int j = i; j < n; j++)\n        {\n            str = Swap(str, i, j);\n            Permutations(str, i + 1, n, result);\n            str = Swap(str, i, j);\n        }\n    }\n\n    private string Swap(string str, int i, int j)\n    {\n        StringBuilder sb = new StringBuilder(str);\n        char temp = sb[i];\n        sb[i] = sb[j];\n        sb[j] = temp;\n        return sb.ToString();\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() {\n        this.result = [];\n    }\n\n    /**\n     * @param {string} str\n     * @returns {string[]} \n     */\n    permutation(str){\n        this.permutations(str, 0, str.length);\n        this.result.sort();\n        return this.result;\n    }\n\n    permutations(str, i, n){\n        // base condition\n        if (i == n - 1)\n        {\n            this.result.push(str);\n            return;\n        }\n\n        // process each character of the remaining string\n        for (let j = i; j < n; j++)\n        {\n            // swap character at index i with current character\n            str = this.swap(str, i, j);\n\n            // recurse for string [i+1, n-1]\n            this.permutations(str, i + 1, n);\n\n            // backtrack (restore the string to its original state)\n            str = this.swap(str, i, j);\n        }\n    }\n\n    swap(str, i, j){\n        let strArray = str.split(\"\");\n        let temp = strArray[i];\n        strArray[i] = strArray[j];\n        strArray[j] = temp;\n        return strArray.join(\"\");\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}