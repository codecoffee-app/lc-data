{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881785,
            "title": "Permutations of string",
            "titleSlug": "permutations-of-string--123809",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">Given a string </span><strong style=\"font-size: 18px;\">s</strong>, <span >containing lowercase English letters.</span></span><span style=\"font-size: 18px;\">&nbsp;You need to print all the permutations of the string using <strong>next_permutation()</strong>&nbsp;in</span><strong style=\"font-size: 18px;\"> lexicographical order</strong><span style=\"font-size: 18px;\">.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Input:&nbsp;</strong>s = \"xyz\"<br /><strong>Output:&nbsp;</strong>xyz xzy yxz yzx zxy zyx</span><span style=\"font-size: 18px;\"><br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= s.size() &lt;= 10</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of lowercase English letters, generate all permutations of the string in lexicographical order using the `next_permutation()` algorithm.",
                "constraints": [
                    "1 <= s.size() <= 10"
                ],
                "testcases": [
                    {
                        "input": "xyz",
                        "output": "xyz xzy yxz yzx zxy zyx",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>use next_permutation().</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nvoid printPermutation(string str) {\n    sort(str.begin(), str.end());\n\n    do {\n        cout << str << \" \";\n\n    } while (next_permutation(str.begin(), str.end()));\n}",
                "lang_text": "cpp"
            }
        },
        "platform": "GFG"
    }
}