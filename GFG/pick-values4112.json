{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703330,
            "title": "Pick Values",
            "titleSlug": "pick-values4112",
            "content": "<p><span >Given an array <strong>arr[]</strong> of positive integers. Select values from the array such that their sum is minimum. You must pick at least 1 value from each group of 4 consecutive elements. Returns an integer denoting the minimum sum.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 1, 2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There are 2 groups of 4 in the given array. The 1st group is [1 2 3 1] and 2nd is [2 3 1 2]. Selecting the 4th element in the array will give the least sum as it belongs to both groups.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [8, 6, 9, 10, 6, 7]\n<strong>Output:</strong> 9<br /><strong>Explanation:</strong> There are 3 groups of 4 consecutive elements. 9 at index 2 is the smallest element that is present in all 3 groups.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size()<strong>&nbsp;</strong>&le; 10<sup>6</sup><br />1 &le; arr[i]<strong> </strong>&le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of positive integers, find the minimum sum achievable by selecting at least one value from each group of 4 consecutive elements in the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 1, 2]",
                        "output": "1",
                        "explanation": "The array has two overlapping groups of 4: [1, 2, 3, 1] and [2, 3, 1, 2]. Selecting '1' (at index 3) satisfies the condition for both groups, resulting in the minimum sum."
                    },
                    {
                        "input": "[8, 6, 9, 10, 6, 7]",
                        "output": "9",
                        "explanation": "The array has three overlapping groups of 4: [8, 6, 9, 10], [6, 9, 10, 6], and [9, 10, 6, 7]. Selecting '9' (at index 2) satisfies the condition for all groups, resulting in the minimum sum."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Think of using dynamic programming (DP) to keep track of the minimum sum for each element by considering the previous 4 elements. Use a sliding window approach to select values while ensuring at least one value is picked from every group of 4 consecutive elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to pick the minimum sum of values.\n    int pickValues(vector<int> arr) {\n        int n = arr.size(); // Get the size of the array\n\n        // If there's only one element, return that value.\n        if (n == 1)\n            return arr[0];\n\n        // If there are two elements, return the minimum value.\n        if (n == 2)\n            return min(arr[0], arr[1]);\n\n        // If there are three elements, return the minimum value.\n        if (n == 3)\n            return min({arr[0], arr[1], arr[2]});\n\n        // Create a dp vector to store the minimum sum of values.\n        vector<int> dp(n, 0);\n\n        // Initialize the dp array for the first four elements.\n        dp[0] = arr[0];\n        dp[1] = arr[1];\n        dp[2] = arr[2];\n        dp[3] = arr[3];\n\n        // Iterate over the remaining elements and compute the minimum sum.\n        for (int i = 4; i < n; i++) {\n            dp[i] = min({dp[i - 4], dp[i - 3], dp[i - 2], dp[i - 1]}) + arr[i];\n        }\n\n        // Return the minimum sum of values from the last four elements.\n        return min({dp[n - 4], dp[n - 3], dp[n - 2], dp[n - 1]});\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to pick the minimum sum of values\n    public int pickValues(int[] arr) {\n        int n = arr.length;\n\n        // If there's only one element, return that value\n        if (n == 1) {\n            return arr[0];\n        }\n\n        // If there are two elements, return the minimum value\n        if (n == 2) {\n            return Math.min(arr[0], arr[1]);\n        }\n\n        // If there are three elements, return the minimum value\n        if (n == 3) {\n            return Math.min(Math.min(arr[0], arr[1]), arr[2]);\n        }\n\n        // Create a dp array to store the minimum sum of values\n        int[] dp = new int[n];\n        dp[0] = arr[0];\n        dp[1] = arr[1];\n        dp[2] = arr[2];\n        dp[3] = arr[3];\n\n        // Iterate over the remaining elements and compute the minimum sum\n        for (int i = 4; i < n; i++) {\n            dp[i] = Math.min(Math.min(dp[i - 4], dp[i - 3]),\n                             Math.min(dp[i - 2], dp[i - 1])) +\n                    arr[i];\n        }\n\n        // Return the minimum sum of values from the last four elements\n        return Math.min(Math.min(dp[n - 4], dp[n - 3]), Math.min(dp[n - 2], dp[n - 1]));\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def pickValues(self, arr):\n        n = len(arr)  # Get the size of the array\n\n        # If the array has fewer than 4 elements, return the minimum value from the array\n        if n < 4:\n            return min(arr)\n\n        # Create a dp array to store the minimum sum at each index\n        dp = [0] * n\n\n        # Initialize the first 4 values in the dp array with corresponding values from the array\n        dp[0] = arr[0]\n        dp[1] = arr[1]\n        dp[2] = arr[2]\n        dp[3] = arr[3]\n\n        # Iterate from index 4 to n\n        for i in range(4, n):\n            # Calculate the minimum sum at index i by adding the value at index i with the minimum value from the previous 4 indices\n            dp[i] = arr[i] + min(dp[i - 4:i])\n\n        # Return the minimum value from the last 4 elements in the dp array\n        return min(dp[-4:])\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    // Function to pick values from the given list such that no adjacent elements are\n    // picked.\n    pickValues(arr) {\n        let n = arr.length; // Calculate the length of the array\n\n        // If the array has fewer than 4 elements, return the minimum value\n        if (n < 4) {\n            return Math.min(...arr);\n        }\n\n        // Create a dp array to store the minimum sum at each index\n        let dp = new Array(n).fill(0);\n\n        // Initialize the first 4 values in the dp array with corresponding values from\n        // the array\n        dp[0] = arr[0];\n        dp[1] = arr[1];\n        dp[2] = arr[2];\n        dp[3] = arr[3];\n\n        // Iterate from index 4 to n\n        for (let i = 4; i < n; i++) {\n            // Calculate the minimum sum at index i by adding the value at index i with\n            // the minimum value from the previous 4 indices\n            dp[i] = arr[i] + Math.min(...dp.slice(i - 4, i));\n        }\n\n        // Return the minimum value from the last 4 elements in the dp array\n        return Math.min(...dp.slice(n - 4));\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}