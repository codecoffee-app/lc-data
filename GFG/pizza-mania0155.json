{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705425,
            "title": "Pizza Mania",
            "titleSlug": "pizza-mania0155",
            "content": "<p><span style=\"font-size:18px\">Small Pizza has an area of &#39;<strong>S</strong>&#39; units</span><span style=\"font-size:18px\">. Medium Pizza has an area&nbsp;</span><span style=\"font-size:18px\">of &#39;<strong>M</strong></span><span style=\"font-size:18px\">&#39; units</span><span style=\"font-size:18px\">. Large Pizza has an area of &#39;<strong>L</strong>&#39; units</span><span style=\"font-size:18px\">.<br />\nCost of </span><span style=\"font-size:18px\">Small,</span><span style=\"font-size:18px\"> medium and Large Pizza is &#39;</span><span style=\"font-size:18px\"><strong>CS</strong>&#39; ,</span><span style=\"font-size:18px\"> &#39;<strong>CM</strong>&#39;, and &#39;<strong>CL</strong>&#39; respectively.</span><span style=\"font-size:18px\"> What is the minimum amount of money</span><span style=\"font-size:18px\"> needed so that one can buy </span><span style=\"font-size:18px\">atleast</span><span style=\"font-size:18px\"> <strong>X</strong> units square of Pizza?</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>X = </strong>16, <strong>S = </strong>3, <strong>M = </strong>6, <strong>L = </strong>9, <strong>CS = </strong>50, <strong>CM = </strong>150, <strong>CL = </strong>300</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">300</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">We want </span><span style=\"font-size:18px\">atleast</span><span style=\"font-size:18px\"> 16 sq. units of Pizza.\n1S 1M 1L area= 3+6+9 = 18 sq units, Cost=500\n6S  area=18 sq units, Cost=300\n2L area=18 sq units, Cost=600</span><span style=\"font-size:18px\"> etc.\nOf all the Arrangements, Minimum Cost is Rs. 300.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>X = </strong>10, <strong>S = </strong>1, <strong>M = </strong>3, <strong>L = </strong>10, <strong>CS = </strong>10, <strong>CM = </strong>20, <strong>CL = </strong>50</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">50</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">Of all the Arrangements possible,\nMinimum Cost is Rs. 50.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>getPizza()</strong> which takes 7 Integers X, S, M, L, CS, CM, and CL as input and returns the minimum amount needed to buy atleast X sq. units of Pizza .</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(X)<br />\n<strong>Expected Auxiliary Space:</strong> O(X)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= X &lt;= 500<br />\n1 &lt;= S &lt;= M &lt;= L &lt;= 100<br />\n1 &lt;= CS &lt;= CM &lt;= CL &lt;= 100</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given three sizes of pizza: Small, Medium, and Large, with areas 'S', 'M', and 'L' square units, respectively. The cost of each size is 'CS', 'CM', and 'CL', respectively. Your goal is to determine the minimum cost to purchase at least 'X' square units of pizza.",
                "constraints": [
                    "1 <= X <= 500",
                    "1 <= S <= M <= L <= 100",
                    "1 <= CS <= CM <= CL <= 100"
                ],
                "testcases": [
                    {
                        "input": "X = 16, S = 3, M = 6, L = 9, CS = 50, CM = 150, CL = 300",
                        "output": "300",
                        "explanation": "To obtain at least 16 square units, the most cost-effective strategy is to purchase six small pizzas (6 * 3 = 18 square units) for a total cost of 6 * 50 = 300. Other combinations may provide enough area, but will cost more."
                    },
                    {
                        "input": "X = 10, S = 1, M = 3, L = 10, CS = 10, CM = 20, CL = 50",
                        "output": "50",
                        "explanation": "The most cost effective solution is to directly purchase one large pizza which provides 10 square units for a total cost of 50."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">This problem can be easily solved using Dynammic Programming.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nint cache[50001][501];\n\nclass Solution {\n  public:\n\n    int dp(int currcost, int X, int S, int M, int L, int CS, int CM, int CL) {\n        \n        if(X <= 0)\n            return currcost;\n        \n        if(cache[currcost][X] != -1)\n            return cache[currcost][X];\n            \n        int ans1 = 10000000;\n        int ans2 = ans1, ans3 = ans1;\n        \n        ans1 = dp(currcost+CS, X-S, S, M, L, CS, CM, CL);    // if a Small Pizza is taken next\n        ans2 = dp(currcost+CM, X-M, S, M, L, CS, CM, CL);    // if a Medium Pizza is taken next\n        ans3 = dp(currcost+CL, X-L, S, M, L, CS, CM, CL);    // if a Large Pizza is taken next\n        \n        cache[currcost][X] = min(ans1, min(ans2, ans3));\n            \n        return min(ans1, min(ans2, ans3));\n    }\n    \n    int getPizza(int X, int S, int M, int L, int CS, int CM, int CL) {\n        \n        memset(cache,-1,sizeof(cache));\n        \n        return (dp(0,X,S,M,L,CS,CM,CL));\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}