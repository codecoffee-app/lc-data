{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703307,
            "title": "Play With OR",
            "titleSlug": "play-with-or5515",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr[] </strong>of length <strong>n</strong>, you have to <strong>re-construct the same</strong> array <strong>arr[] in-place</strong>. The <strong>arr[i]</strong> after reconstruction will become <strong>arr[i] OR arr[i+1], </strong>where <strong>OR </strong>is <a href=\"https://www.geeksforgeeks.org/bitwise-operators-in-c-cpp/\" target=\"_blank\" rel=\"noopener\"><strong>bitwise or</strong></a>. If for some <strong>i</strong>, <strong>i+1</strong> does not exists, then do not change <strong>arr[i]</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :<br /></strong>n = 5<br />arr[] = {10, 11, 1, 2, 3}\n<strong>Output :</strong><br />11 11 3 3 3\n<strong>Explanation:</strong>\nAt index 0, arr[0] or arr[1] = 11\nAt index 1, arr[1] or arr[2] = 11\nAt index 2, arr[2] or arr[3] = 3\n...\nAt index 4, No element is left So, it will remain as it is.\nNew Array will be {11, 11, 3, 3, 3}.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :<br /></strong>n= 4<br />arr[] = {5, 9, 2, 6} <strong>\nOutput :</strong><br />13 11 6 6<br /><strong>Explanation:<br /></strong></span><span style=\"font-size: 18px;\">At index 0, arr[0] or arr[1] = 13.<br />At index 1, arr[1] or arr[2] = 11.<br />At index 2, arr[2] or arr[3] = 6.<br />At index 3, No element is left So, it will remain as it is.<br />New Array will be {13, 11, 6, 6}.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Your Task:</strong><br /><span style=\"font-size: 18px;\">You are required to implement the function <strong>game_with_number()</strong>, which takes an array <strong>arr</strong>, representing values at each index, and the size of the array <strong>n</strong>. The function should modify the elements of the <strong>same array arr[] in-place </strong>by replacing them with the values obtained by performing the <strong>bitwise OR</strong> operation on consecutive elements.</span><br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1 &le; n &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>7</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of length `n`, reconstruct the array in-place such that `arr[i]` becomes the bitwise OR of `arr[i]` and `arr[i+1]`. If `arr[i+1]` does not exist (i.e., `i` is the last element), leave `arr[i]` unchanged.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= arr[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "n = 5\narr = [10, 11, 1, 2, 3]",
                        "output": "[11, 11, 3, 3, 3]",
                        "explanation": "arr[0] = 10 | 11 = 11\narr[1] = 11 | 1 = 11\narr[2] = 1 | 2 = 3\narr[3] = 2 | 3 = 3\narr[4] = 3 (remains unchanged)"
                    },
                    {
                        "input": "n = 4\narr = [5, 9, 2, 6]",
                        "output": "[13, 11, 6, 6]",
                        "explanation": "arr[0] = 5 | 9 = 13\narr[1] = 9 | 2 = 11\narr[2] = 2 | 6 = 6\narr[3] = 6 (remains unchanged)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We just need to traverse the array from index 0 to n-1<br />\nand change<br />\narr[i] = arr[i] or arr[i+1]</span><br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Function to perform bitwise OR operation on adjacent elements of an array.\n\nint* game_with_number(int arr[], int n)\n{\n    //Iterating through the array till second last element.\n    for(int d=0;d < n-1;d++)\n    {\n        //Performing bitwise OR operation on adjacent elements.\n        arr[d] = arr[d] | arr[d+1];\n    }\n    \n    //Returning the updated array.\n    return arr;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\r\nclass Solution{\r\n    \r\n   \r\n    // Function for finding maximum and value pair\r\n    public static int[] game_with_number (int arr[], int n) {\r\n       for(int d=0;d < n-1;d++)\r\n        {\r\n            //Performing bitwise OR operation on adjacent elements.\r\n            arr[d] = arr[d] | arr[d+1];\r\n        }\r\n        \r\n        //Returning the updated array.\r\n        return arr;\r\n    }\r\n    \r\n    \r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\r\nclass Solution:    \r\n    def game_with_number(self, arr, n):\r\n        # Iterating through the array till the second last element.\r\n        for d in range(n - 1):\r\n            # Performing bitwise OR operation on adjacent elements.\r\n            arr[d] = arr[d] | arr[d + 1]\r\n        \r\n        # Returning the updated array.\r\n        return arr\r\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int[] game_with_number(int[] arr, int n)\n    {\n        //Iterating through the array till second last element.\n        for(int d=0; d < n-1; d++)\n        {\n            //Performing bitwise OR operation on adjacent elements.\n            arr[d] = arr[d] | arr[d+1];\n        }\n    \n        //Returning the updated array.\n        return arr;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    game_with_number(arr, n) { // Function to perform game with numbers\n        for (let d = 0; d < n - 1; d++) { // Loop through the array elements\n            arr[d] = arr[d] | arr[d + 1]; // Perform a bitwise OR operation and update the array element\n        }\n        return arr; // Return the modified array\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}