{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706219,
            "title": "Player with max score",
            "titleSlug": "player-with-max-score",
            "content": "<p><span style=\"font-size: 18px;\">Given an array arr of non-negative integers of size N, 2 players are playing a game. In each move, a player chooses an element from either end of the array, and the size of the array shrinks by one. Both players take alternate chances and the game continues until the size of the array becomes 0. Every time a player chooses an array element the array value is added to the player's score. At the end player with maximum score wins.<br />If player 1 starts the game, you have to predict whether player 1 will win the game or not. Both players will play optimally.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong></span>:\n<span style=\"font-size: 18px;\">N = 3\narr[] = {2,6,3}\n<strong>Output:</strong>\n0&nbsp;\n<strong>Explanation</strong>:\nInitially, player 1 can choose between 2 and 3. \nIf he chooses 3 (or 2), then player 2 can choose \nfrom 2 (or 3) and 6. If player 2 chooses 6,\nthen player 1 will be left with 2 (or 3). \nSo, final score of player 1 is 2 + 3 = 5,\nand player 2 is 6. \nHence, player 1 will never be the winner and \noutput is 0.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>is1winner()</strong>&nbsp;which takes the array arr[], its size N<strong> </strong>and returns true if player 1 is the winner and false otherwise.<br />The driver code itself prints 1 if returned value is true and 0 otherwise.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N*N)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 1000</span><br /><span style=\"font-size: 18px;\">0&lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of non-negative integers, two players take turns selecting elements from either end of the array, adding the selected value to their score. The array shrinks by one element each turn. Player 1 starts. Determine if Player 1 can achieve a higher score than Player 2, assuming both players play optimally.",
                "constraints": [
                    "1 <= N <= 1000",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 3\narr[] = {2,6,3}",
                        "output": "0",
                        "explanation": "Player 1 can choose either 2 or 3. If Player 1 chooses 3, Player 2 can choose from 2 and 6. If Player 2 chooses 6, Player 1 is left with 2. Scores: Player 1 = 3 + 2 = 5, Player 2 = 6. Player 1 loses. Similarly, if Player 1 initially chooses 2, Player 2 will choose 6, leaving 3 for player 1. Scores: Player 1 = 2 + 3 = 5, Player 2 = 6. Player 1 loses.  Therefore, Player 1 cannot win."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Dp.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{   \npublic:\n    //Function to calculate the maximum score the first player can achieve.\n    int win(int arr[], vector<vector<int>>& dp, int s, int e){\n        //Base case: if start index is greater than end index, return 0.\n        if(s>e)\n            return 0;\n        //If the current state has already been computed, return the stored value.\n        if(dp[s][e]!=INT_MIN)\n            return dp[s][e];\n        //Calculate the maximum score the first player can achieve by selecting the start index.\n        int a=arr[s]-win(arr, dp, s+1, e);\n        //Calculate the maximum score the first player can achieve by selecting the end index.\n        int b=arr[e]-win(arr, dp, s, e-1);\n        //Store the maximum score among the two choices.\n        dp[s][e]=max(a, b);\n        return dp[s][e];\n    }\n    //Function to determine if the first player is the winner.\n    bool is1winner(int N,int arr[]) {\n        //Create a 2D vector to store computed values for subproblems.\n        vector<vector<int>> dp(N, vector<int>(N, INT_MIN));\n        //If the maximum score the first player can achieve is greater than or equal to 0, return true.\n        return win(arr, dp, 0, N-1)>=0;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n\n    // Function to calculate the winning score of a player\n    int win(int arr[], int[][] dp, int s, int e){\n        \n        // Base case: if the start index is greater than end index,\n        // return 0 (no more elements to choose from)\n        if(s>e)\n            return 0;\n        \n        // If the solution for the current subproblem has already been calculated,\n        // return it from the DP table\n        if(dp[s][e]!=Integer.MIN_VALUE)\n            return dp[s][e];\n            \n        // Calculate the score if the player chooses the element at the start index\n        int a=arr[s]-win(arr, dp, s+1, e);\n        // Calculate the score if the player chooses the element at the end index\n        int b=arr[e]-win(arr, dp, s, e-1);\n        \n        // Store the maximum score in the DP table\n        dp[s][e]=Math.max(a, b);\n        \n        // Return the maximum score for the current subproblem\n        return dp[s][e];\n    }\n    \n    // Function to determine if player 1 is the winner\n    boolean is1winner(int N,int arr[]) {\n        \n        // Create a DP table to store the solutions for subproblems\n        int dp[][] = new int[N][N];\n        \n        // Initialize the DP table with a minimum value\n        for(int i=0;i<N;i++){\n            for(int j=0;j<N;j++){\n                dp[i][j]=Integer.MIN_VALUE;\n            }\n        }\n        \n        // Check if player 1's score is greater than or equal to 0\n        return win(arr, dp, 0, N-1)>=0;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "import sys\n\nsys.setrecursionlimit(1000000)\n\n\nclass Solution:\n    #Function to calculate the maximum score that the first player can get.\n    def win(self, arr, dp, s, e):\n        if s > e:\n            return 0\n\n        #memoization to store already calculated results.\n        if dp[s][e] != -1e9:\n            return dp[s][e]\n\n        #calculating the score for the first player.\n        a = arr[s] - self.win(arr, dp, s + 1, e)\n        b = arr[e] - self.win(arr, dp, s, e - 1)\n\n        #storing the maximum score in dp matrix.\n        dp[s][e] = max(a, b)\n\n        return dp[s][e]\n\n    #Function to check if the first player is the winner or not.\n    def is1winner(self, N, arr):\n        #creating a dp matrix initialized with -1e9.\n        dp = [[-1e9 for i in range(N)] for i in range(N)]\n\n        #calling the win function to calculate the maximum score.\n        return self.win(arr, dp, 0, N - 1) >= 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//javascript\n\nclass Solution {\n  is1winner(N, arr) {\n    let dp = new Array(N);\n    for (let i = 0; i < N; i++) {\n      dp[i] = new Array(N).fill(Number.MIN_SAFE_INTEGER);\n    }\n    return this.win(arr, dp, 0, N - 1) >= 0;\n  }\n\n  win(arr, dp, s, e) {\n    if (s > e) {\n      return 0;\n    }\n    if (dp[s][e] != Number.MIN_SAFE_INTEGER) {\n      return dp[s][e];\n    }\n    let a = arr[s] - this.win(arr, dp, s + 1, e);\n    let b = arr[e] - this.win(arr, dp, s, e - 1);\n    dp[s][e] = Math.max(a, b);\n    return dp[s][e];\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}