{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705257,
            "title": "Playing with mobile numbers",
            "titleSlug": "playing-with-mobile-numbers0732",
            "content": "<p><span style=\"font-size:18px\">Given a&nbsp;number in form of a string s. The task is to find&nbsp;whether the number is valid indian mobile number or not.<br />\r\n<strong>Rules for valid&nbsp;</strong>:-<strong>indian&nbsp;mobile&nbsp;number</strong></span></p>\r\n\r\n<ol>\r\n\t<li><span style=\"font-size:18px\">The number should contain 10 or 11 or 12 digits.</span></li>\r\n\t<li><span style=\"font-size:18px\">If it contains 10 digits, then&nbsp;first&nbsp;&nbsp;digit&nbsp;should be 7 or 8 or 9.</span></li>\r\n\t<li><span style=\"font-size:18px\">If it contains 11 digits, then&nbsp;first&nbsp;&nbsp;digit&nbsp;should be 0 and second rule&nbsp;follwed.</span></li>\r\n\t<li><span style=\"font-size:18px\">If it contains 12 digits, then first two digits should be 91 and second rule&nbsp;followed&nbsp;</span></li>\r\n</ol>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>s = &quot;912345678999&quot;\r\n<strong>Output: </strong>0</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>s = &quot;123456789&quot;\r\n<strong>Output: </strong>0</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function <strong>is_valid() </strong>which takes s as input parameter and returns 1 if it is valid&nbsp;indian mobile number otherwise returns 0.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(1)<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)<br />\r\n<br />\r\n<strong>Constraints:</strong><br />\r\n1 &lt;= |s| &lt;= 13</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number represented as a string `s`, determine if it is a valid Indian mobile number according to the following rules:\n\n1.  The number must contain 10, 11, or 12 digits.\n2.  If it contains 10 digits, the first digit should be 7, 8, or 9.\n3.  If it contains 11 digits, the first digit should be 0, and the remaining 10 digits must follow rule 2.\n4.  If it contains 12 digits, the first two digits should be 91, and the remaining 10 digits must follow rule 2.",
                "constraints": [
                    "1 <= |s| <= 13"
                ],
                "testcases": [
                    {
                        "input": "912345678999",
                        "output": "0",
                        "explanation": null
                    },
                    {
                        "input": "123456789",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use simple if else.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Quantifiers",
                "slug": "quantifiers"
            },
            {
                "name": "Regular Expression",
                "slug": "regular-expression"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n\tpublic:\n\t\t//Function to check if the given string is a valid mobile number.\n\t\tint is_valid(string s){\n\t\t\tif(s.size() < 10)\n\t\t\t\treturn 0;\n\t\t\tif(s.size() == 10)\n\t\t\t\treturn (s[0] == '7' or s[0] =='8' or s[0] =='9');\n\t\t\telse if(s.size() == 11)\n\t\t\t\treturn (s[0] == '0') and ((s[1] == '7' or s[1] =='8' or s[1] =='9'));\n\t\t\telse \n\t\t\t\treturn s[0] =='9' and s[1] =='1' and ((s[2] == '7' or s[2] =='8' or s[2] =='9'));\n\t\t}\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int is_valid(string s)\n    {\n        if(s.Length < 10)\n            return 0;\n        if(s.Length == 10)\n            return (s[0] == '7' || s[0] =='8' || s[0] =='9') ? 1 : 0;\n        else if(s.Length == 11)\n            return (s[0] == '0') && ((s[1] == '7' || s[1] =='8' || s[1] =='9')) ? 1 : 0;\n        else \n            return s[0] =='9' && s[1] =='1' && ((s[2] == '7' || s[2] =='8' || s[2] =='9')) ? 1 : 0;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}