{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706102,
            "title": "Plus One",
            "titleSlug": "plus-one",
            "content": "<p><span style=\"font-size:18px\">Given a non-negative number represented as a list of digits, add 1 to the number (increment the number represented by the digits). The digits are stored such that the most significant digit is first element of array. </span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \nN = 3\narr[] = {1, 2, 4}\n<strong>Output</strong>: \n1 2 5\n<strong>Explanation</strong>:\n124+1 = 125, and so the Output</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \nN = 3\narr[] = {9,9,9}\n<strong>Output</strong>: \n1 0 0 0\n<strong>Explanation</strong>:\n999+1 = 1000, and so the output</span></pre>\n\n<p><br />\n<strong><span style=\"font-size:18px\">Your Task:</span></strong><br />\n<span style=\"font-size:18px\">You don&#39;t need to read input or print anything.&nbsp;You only need to complete the function<strong> increment()&nbsp;</strong>that takes an integer N, and an array arr of size N as input and returns a list of integers denoting the new number which we get after adding one to the number denoted by the array arr.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> &nbsp;O(N)<br />\n<strong>Expected Auxilliary Space:</strong> O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup><br />\n0 &lt;= arr<sub>i</sub> &lt;= 9</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative number represented as a list of digits, increment the number by one. The digits are stored such that the most significant digit is the first element of the array.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= arr[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "N = 3\narr[] = {1, 2, 4}",
                        "output": "1 2 5",
                        "explanation": "The array represents the number 124. Adding 1 results in 125."
                    },
                    {
                        "input": "N = 3\narr[] = {9, 9, 9}",
                        "output": "1 0 0 0",
                        "explanation": "The array represents the number 999. Adding 1 results in 1000."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If the last element is 9, make it 0 and carry = 1. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end function Template for C++\n\nclass Solution {\n  public:\n    vector<int> increment(vector<int> arr ,int N) {\n  \n        // Add 1 to last digit and find carry \n        arr[N-1] += 1; \n        int carry = arr[N-1]/10; \n        arr[N-1] %= 10; \n      \n        // Traverse from second last digit \n        for (int i=N-2; i>=0; i--) \n        { \n            if (carry == 1) \n            { \n               arr[i] += 1; \n               carry = arr[i]/10; \n               arr[i] %= 10; \n            } \n        } \n      \n        // If carry is 1, we need to add \n        // a 1 at the beginning of vector \n        if (carry == 1) \n            arr.insert(arr.begin(), 1); \n        \n        return arr;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end function Template for Java\n\nclass Solution {\n    static ArrayList<Integer> increment(ArrayList<Integer> arr , int N) {\n        \n        // Add 1 to last digit and find carry \n        int x = arr.get(N-1);\n        arr.set(N-1,x+1);\n        int carry = arr.get(N-1)/10; \n        x = arr.get(N-1);\n        arr.set(N-1,x%10);\n      \n        // Traverse from second last digit \n        for (int i=N-2; i>=0; i--) \n        { \n            if (carry == 1) \n            { \n                x = arr.get(i);\n                arr.set(i,x+1); \n                carry = arr.get(i)/10; \n                x = arr.get(i);\n                arr.set(i,x%10);\n            } \n        } \n      \n        // If carry is 1, we need to add \n        // a 1 at the beginning of vector \n        if (carry == 1) \n            arr.add(arr.get(0), 1); \n        \n        return arr;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def increment(self, arr, N):\n        # Add 1 to last digit and find carry \n        arr[N-1] += 1\n        carry = arr[N-1]/10\n        arr[N-1] %= 10\n       \n        # Traverse from second last digit \n        for i in range(N-2,-1,-1): \n            if (carry == 1): \n                arr[i] += 1\n                carry = arr[i]//10\n                arr[i] %= 10\n              \n        # If carry is 1, we need to add \n        # a 1 at the beginning of vector \n        if (carry == 1):\n            arr.insert(0, 1) \n         \n        return arr",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n    increment(arr ,N) {\n  \n        // Add 1 to last digit and find carry \n        arr[N-1] += 1; \n        let carry = arr[N-1]/10; \n        arr[N-1] %= 10; \n      \n        // Traverse from second last digit \n        for (let i=N-2; i>=0; i--) \n        { \n            if (carry == 1) \n            { \n               arr[i] += 1; \n               carry = arr[i]/10; \n               arr[i] %= 10; \n            } \n        } \n      \n        // If carry is 1, we need to add \n        // a 1 at the beginning of vector \n        if (carry == 1) \n            arr.unshift(1); \n        \n        return arr;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}