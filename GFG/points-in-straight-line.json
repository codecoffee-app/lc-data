{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700379,
            "title": "Points in Straight Line",
            "titleSlug": "points-in-straight-line",
            "content": "<p><span style=\"font-size:18px\">Given two&nbsp;arrays <strong>X[]&nbsp;</strong>and <strong>Y[]</strong>&nbsp;of&nbsp;points where (<strong>X<sub>i</sub>, Y<sub>i</sub></strong>)<strong>&nbsp;</strong>represents a point on the&nbsp;<strong>X-Y</strong>&nbsp;plane. Your task is to complete the function <strong>maxPoints</strong>&nbsp;which returns an integer denoting&nbsp;the maximum number of points that lie on the same straight line.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nX[] = {1, 2, 3}\nY[] = {1, 2, 3}\n<strong>Output: </strong>3\n<strong>Explanation:\n</strong>The points are<strong> </strong>(1,1),<strong> </strong>(2,2)<strong> </strong>and<strong> </strong>(3,3).<strong>\n</strong><img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/plane1-1623822398.jpg\" style=\"height:294px; width:300px\" />\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>X[] = {1, 3, 5, 4, 2, 1}\nY[] = {1, 2, 3, 1, 3, 4}\n<strong>Output: </strong>4\n<strong>Explanation:\n</strong>The points are- \n(1,1),(3,2),(5,3),(4,1),(2,3),(1,4)\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/plane2-1623822619.jpg\" style=\"height:294px; width:300px\" />\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>maxPoints</strong><strong>()</strong> which takes two&nbsp;lists of coordinates&nbsp;as input and returns the maximum number of points that lies on the same line.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\n\n<p><span style=\"font-size:18px\">1 &lt;=<strong> N </strong>&lt;= 300<br />\n-10<sup>4</sup> &lt;= <strong>x<sub>i</sub>, y<sub>i</sub></strong>&nbsp;&lt;= 10<sup>4</sup></span><sup><span style=\"font-size:18px\">&nbsp;</span></sup></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each point p, calculate its slope with other points and use a map to record how many points have same slope, by which we can find out how many points are on same line with p as their one point. For each point keep doing the same thing and update the maximum number of point count found so far.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\npublic:\n    int gcd(int a, int b) {\n            if (a == 0) return b;\n            if (b == 0) return a;\n            if (a < 0) return gcd(-1 * a, b);\n            if (b < 0) return gcd(a, -1 * b);\n            if (a > b) return gcd(b, a);\n            return gcd(b%a, a);\n    }\n    int maxPoints(int X[], int Y[], int n) {\n        map<pair<int, int>, int> M;\n        int ans = 0;\n    \n        for (int i = 0; i <n; i++) {\n     \n            M.clear();\n            int same = 1, curMax = 0;\n        \n            for (int j = i + 1; j < n; j++) {\n        \n                int xdiff = X[i] - X[j];\n                int ydiff = Y[i] - Y[j];\n                if (xdiff == 0 && ydiff == 0) {\n                    // Same points \n                    same ++;\n                    continue;\n                }\n        \n                if (xdiff < 0) {\n                    xdiff *= -1; \n                    ydiff *= -1;\n                }\n         \n                int g = gcd(xdiff, ydiff);\n                M[make_pair(xdiff / g, ydiff / g)]++; \n                curMax = max(curMax, M[make_pair(xdiff / g, ydiff / g)]);\n            }\n         \n            curMax+=same;\n            ans = max(ans, curMax);\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class GfG {\n    // Function to find the maximum number of points on a line passing through any two points\n    int maxPoints(int X[], int Y[],int N) {\n        // Create two arrays A and B and copy elements of X and Y respectively\n        int A[] = new int[N];\n        int B[] = new int[N];\n        int n = N;\n        System.arraycopy(X, 0, A, 0, X.length);\n        System.arraycopy(Y, 0, B, 0, B.length);\n        \n        // Create a HashMap to store the slopes of the lines passing through two points\n        // as keys and the number of points on that line as values\n        HashMap<Double, Integer> hashMap = new HashMap<>();\n        \n        // Check if A and B are null, if so, return -1\n        if (A == null || B == null)\n            return -1;\n        \n        // Check if n is 0, if so, return 0\n        if (n == 0)\n            return 0;\n\n        int x1, y1, x2, y2;\n        int val;\n        int max = 0;\n        \n        // Iterate through each point (x1, y1)\n        for (int i = 0; i < n; i++) {\n            x1 = A[i];\n            y1 = B[i];\n            \n            // Clear the HashMap before processing the next point\n            hashMap.clear();\n            \n            // Iterate through each other point (x2, y2)\n            for (int j = 0; j < n; j++) {\n                \n                // Skip the point (x1, y1)\n                if (i == j)\n                    continue;\n                \n                x2 = A[j];\n                y2 = B[j];\n                \n                // Calculate the slope of the line passing through (x1, y1) and (x2, y2)\n                double slope = y2 - y1;\n                int den = x2 - x1;\n                \n                // If den (denominator) is 0, the slope is infinite, set it accordingly\n                if (den == 0)\n                    slope = Double.POSITIVE_INFINITY;\n                else\n                    slope = slope / den;\n                \n                val = 1;\n                \n                // If the slope already exists in the HashMap, increment the count\n                if (hashMap.containsKey(slope)) {\n                    val = hashMap.get(slope) + 1;\n                }\n                \n                // Add the slope and count to the HashMap\n                hashMap.put(slope, val);\n                \n            }\n            \n            // Update the max count with the maximum value in the HashMap\n            for (Map.Entry<Double, Integer> entry : hashMap.entrySet()) {\n                val = entry.getValue();\n                max = Math.max(max, val);\n            }\n        }\n        \n        // Return the maximum count + 1 as the result\n        return max + 1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to find the maximum number of points on a line.\n    def maxPoints(self, xi, yi, n):\n        points=[]\n        #storing the points coordinates as tuples in a list.\n        for i in range(n):\n            points.append((xi[i],yi[i]))\n\n        n = len(points)\n\n        #if number of points is less than 3, return number of points.\n        if n < 3:\n            return n\n\n        max_val = 0\n\n        #iterating over each point.\n        for i in points:\n\n            d = {}\n            dups = 0\n            cur_max = 0\n\n            #iterating over the other points.\n            for j in points:\n                if i != j:\n                    #calculating slope between two points.\n                    if j[0] == i[0]:  \n                        slope = 'inf'\n                    else:\n                        slope = float(j[1] - i[1]) / float(j[0] - i[0])\n\n                    #using a dictionary to store the count of points with the same slope.\n                    d[slope] = d.get(slope, 0) + 1\n\n                    #updating the current maximum count of points on a line.\n                    cur_max = max(cur_max, d[slope])\n\n                #counting points with the same coordinates as the current point.\n                else:\n                    dups += 1\n\n            #updating the maximum number of points on a line.\n            max_val = max(max_val, cur_max + dups)\n\n        return max_val",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    gcd(a, b) {\n        if (a === 0) return b;\n        if (b === 0) return a;\n        if (a < 0) return this.gcd(-1 * a, b);\n        if (b < 0) return this.gcd(a, -1 * b);\n        if (a > b) return this.gcd(b, a);\n        return this.gcd(b % a, a);\n    }\n    \n    maxPoints(X, Y, N) {\n        let M = new Map();\n        let ans = 0;\n    \n        for (let i = 0; i < N; i++) {\n            M.clear();\n            let same = 1;\n            let curMax = 0;\n        \n            for (let j = i + 1; j < N; j++) {\n                let xdiff = X[i] - X[j];\n                let ydiff = Y[i] - Y[j];\n                if (xdiff === 0 && ydiff === 0) {\n                    same++;\n                    continue;\n                }\n        \n                if (xdiff < 0) {\n                    xdiff *= -1;\n                    ydiff *= -1;\n                }\n         \n                let g = this.gcd(xdiff, ydiff);\n                let key = xdiff / g + \",\" + ydiff / g;\n                if (!M.has(key)) {\n                    M.set(key, 1);\n                } else {\n                    M.set(key, M.get(key) + 1);\n                }\n                curMax = Math.max(curMax, M.get(key));\n            }\n         \n            curMax += same;\n            ans = Math.max(ans, curMax);\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    // Function to find the maximum number of points on the same line.\n    public int maxPoints(int[] X, int[] Y, int N)\n    {\n        Dictionary<KeyValuePair<int, int>, int> M = new Dictionary<KeyValuePair<int, int>, int>();\n        int ans = 0;\n\n        for (int i = 0; i < N; i++)\n        {\n            M.Clear();\n            int same = 1, curMax = 0;\n\n            for (int j = i + 1; j < N; j++)\n            {\n                int xdiff = X[i] - X[j];\n                int ydiff = Y[i] - Y[j];\n                if (xdiff == 0 && ydiff == 0)\n                {\n                    // Same points\n                    same++;\n                    continue;\n                }\n\n                if (xdiff < 0)\n                {\n                    xdiff *= -1;\n                    ydiff *= -1;\n                }\n\n                int g = gcd(xdiff, ydiff);\n                KeyValuePair<int, int> pair = new KeyValuePair<int, int>(xdiff / g, ydiff / g);\n                if (!M.ContainsKey(pair))\n                {\n                    M[pair] = 0;\n                }\n                M[pair]++;\n                curMax = Math.Max(curMax, M[pair]);\n            }\n\n            curMax += same;\n            ans = Math.Max(ans, curMax);\n        }\n        return ans;\n    }\n\n    // Function to calculate the gcd of two numbers.\n    public int gcd(int a, int b)\n    {\n        if (a == 0) return b;\n        if (b == 0) return a;\n        if (a < 0) return gcd(-1 * a, b);\n        if (b < 0) return gcd(a, -1 * b);\n        if (a > b) return gcd(b, a);\n        return gcd(b % a, a);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}