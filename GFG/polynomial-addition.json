{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700513,
            "title": "Polynomial Addition",
            "titleSlug": "polynomial-addition",
            "content": "<p><span style=\"font-size: 18px;\">Given two polynomial numbers represented by a linked list. The task is to add these lists meaning the coefficients with the same variable powers.<br /><strong>Note:</strong>&nbsp;</span>&nbsp;<span style=\"font-size: 18px;\">G</span><span style=\"font-size: 18px;\">iven polynomials are sorted in decreasing order of power.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList1: x<sup>2</sup>,<sup> </sup>LinkedList2: x<sup>3</sup>\n<strong>Output: </strong>x<sup>3</sup> + x<sup>2</sup>\n<strong>Explanation: </strong>Since, x<sup>2</sup> and x<sup>3</sup> both have different powers as 2 and 3. So, their coefficient can't be added up.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList1:  x<sup>3</sup> -&gt; 2x<sup>2, </sup>LinkedList2:  3x<sup>3</sup> -&gt; 4x<sup>2</sup>\n<strong>Output: </strong>4x<sup>3</sup> -&gt; 6x<sup>2</sup>\n<strong>Explanation: </strong>Since, x<sup>3</sup> has two different coefficients as 3 and 1. Adding them up will lead to 4x<sup>3</sup>. Also, x<sup>2</sup> has two coefficients as 4 and 2. So, adding them up will give 6x<sup>2</sup>.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: Try to solve the question without using any extra space.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n+m)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= no. of nodes LinkedList1, LinkedList2 &lt;= 10<sup>5</sup><br />1 &lt;= node-&gt;data &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Iterate over both lists simultaneously.</span></p>\n<p><span >If the power is the same add coefficients, otherwise pick the higher power coefficient</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node* addPolynomial(Node* head1, Node* head2) {\n        Node *sum = nullptr, *ptr = nullptr;\n\n        while (head1 != nullptr || head2 != nullptr) {\n            int p, c;\n\n            if (head1 == nullptr) {\n                p = head2->pow;\n                c = head2->coeff;\n                head2 = head2->next;\n            } else if (head2 == nullptr) {\n                p = head1->pow;\n                c = head1->coeff;\n                head1 = head1->next;\n            } else {\n                if (head1->pow == head2->pow) {\n                    p = head1->pow;\n                    c = head1->coeff + head2->coeff;\n                    head1 = head1->next;\n                    head2 = head2->next;\n                } else if (head1->pow > head2->pow) {\n                    p = head1->pow;\n                    c = head1->coeff;\n                    head1 = head1->next;\n                } else {\n                    p = head2->pow;\n                    c = head2->coeff;\n                    head2 = head2->next;\n                }\n            }\n\n            if (sum == nullptr) {\n                sum = ptr = new Node(c, p);\n            } else {\n                ptr->next = new Node(c, p);\n                ptr = ptr->next;\n            }\n        }\n\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Method to add two polynomials\n    public Node addPolynomial(Node head1, Node head2) {\n        Node sum = null, ptr = null;\n\n        while (head1 != null || head2 != null) {\n            int p, c;\n\n            if (head1 == null) {\n                p = head2.pow;\n                c = head2.coeff;\n                head2 = head2.next;\n            } else if (head2 == null) {\n                p = head1.pow;\n                c = head1.coeff;\n                head1 = head1.next;\n            } else {\n                if (head1.pow == head2.pow) {\n                    p = head1.pow;\n                    c = head1.coeff + head2.coeff;\n                    head1 = head1.next;\n                    head2 = head2.next;\n                } else if (head1.pow > head2.pow) {\n                    p = head1.pow;\n                    c = head1.coeff;\n                    head1 = head1.next;\n                } else {\n                    p = head2.pow;\n                    c = head2.coeff;\n                    head2 = head2.next;\n                }\n            }\n\n            if (sum == null) {\n                sum = ptr = new Node(c, p);\n            } else {\n                ptr.next = new Node(c, p);\n                ptr = ptr.next;\n            }\n        }\n\n        return sum;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def add_polynomial(self, head1, head2):\n        sum_head = None\n        sum_tail = None\n\n        while head1 is not None or head2 is not None:\n            if head1 is None:\n                p = head2.power\n                c = head2.coef\n                head2 = head2.next\n            elif head2 is None:\n                p = head1.power\n                c = head1.coef\n                head1 = head1.next\n            else:\n                if head1.power == head2.power:\n                    p = head1.power\n                    c = head1.coef + head2.coef\n                    head1 = head1.next\n                    head2 = head2.next\n                elif head1.power > head2.power:\n                    p = head1.power\n                    c = head1.coef\n                    head1 = head1.next\n                else:\n                    p = head2.power\n                    c = head2.coef\n                    head2 = head2.next\n\n            if sum_head is None:\n                sum_head = sum_tail = Node(c, p)\n            else:\n                sum_tail.next = Node(c, p)\n                sum_tail = sum_tail.next\n\n        return sum_head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    addPolynomial(head1, head2) {\n        let sumHead = null;\n        let sumTail = null;\n\n        while (head1 !== null || head2 !== null) {\n            let p, c;\n\n            if (head1 === null) {\n                p = head2.pow;\n                c = head2.coeff;\n                head2 = head2.next;\n            } else if (head2 === null) {\n                p = head1.pow;\n                c = head1.coeff;\n                head1 = head1.next;\n            } else {\n                if (head1.pow === head2.pow) {\n                    p = head1.pow;\n                    c = head1.coeff + head2.coeff;\n                    head1 = head1.next;\n                    head2 = head2.next;\n                } else if (head1.pow > head2.pow) {\n                    p = head1.pow;\n                    c = head1.coeff;\n                    head1 = head1.next;\n                } else {\n                    p = head2.pow;\n                    c = head2.coeff;\n                    head2 = head2.next;\n                }\n            }\n\n            if (sumHead === null) {\n                sumHead = sumTail = new Node(c, p);\n            } else {\n                sumTail.next = new Node(c, p);\n                sumTail = sumTail.next;\n            }\n        }\n\n        return sumHead;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}