{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700560,
            "title": "Populate Inorder Successor for all nodes",
            "titleSlug": "populate-inorder-successor-for-all-nodes",
            "content": "<p><span >Given a Binary Tree, complete the function to populate the next pointer for all nodes. The next pointer for every node should point to the Inorder successor of the node.<br />You do not have to return or print anything. Just make changes in the root node given to you.</span></p>\n<p><span ><strong>Note:&nbsp;</strong>The node having no in-order successor will be pointed to -1. You don't have to add -1 explicitly, the driver code will take care of this.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input:</strong>\n\\t 10\n&nbsp;\\t/  \\\n&nbsp;     8   12\n&nbsp;    /\n&nbsp;   3\n<strong>Output: </strong>3-&gt;8 8-&gt;10 10-&gt;12 12-&gt;-1\n<strong>Explanation: </strong>The inorder of the above tree is : 3 8 10 12. So the next pointer of node 3 is pointing to 8 , next pointer of 8 is pointing to 10 and so on.And next pointer of 12 is pointing to -1 as there is no inorder successor of 12.</span></pre>\n<pre><span ><strong>Input:</strong>\n\\t 1\n&nbsp;     /  \n&nbsp;    2 <br />   /<br /> 3  \n<strong>Output: </strong>3-&gt;2 2-&gt;1 1-&gt;-1<br /><strong>Explanation: </strong>The inorder of the above tree is: 3 2 1. So the next pointer of node 3 is pointing to 2 , next pointer of 2 is pointing to 1. And next pointer of 1 is pointing to -1 as there is no inorder successor of 1.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(logn)</span></p>\n<p><span ><strong>Constraints:</strong><br />1&lt;= no. of nodes &lt;=10<sup>5</sup><br />1&lt;= data of the node &lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree, modify the tree so that each node's `next` pointer points to its inorder successor. The `next` pointer of the last node in the inorder traversal should be null. You do not need to return or print anything; modify the given root node in place.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= data of the node <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "     10\n    /  \\\n   8   12\n  /\n 3",
                        "output": "3->8 8->10 10->12 12->-1",
                        "explanation": "The inorder traversal of the tree is [3, 8, 10, 12]. Therefore, the `next` pointer of 3 points to 8, 8 points to 10, 10 points to 12, and 12 points to null because it is the last node in the inorder traversal."
                    },
                    {
                        "input": "     1\n    /\n   2\n  /\n 3",
                        "output": "3->2 2->1 1->-1",
                        "explanation": "The inorder traversal of the tree is [3, 2, 1]. Therefore, the `next` pointer of 3 points to 2, 2 points to 1, and 1 points to null because it is the last node in the inorder traversal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of reverse inorder traversal and populate while backtracking&nbsp;</p>",
            "<p>Populate in reverse order, i.e, first call the right subtree, save the pointer to right subtree and then set this pointer to next of previous pointer.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Recursive function to populate the next pointer in the inorder traversal\n    void populateNextRecur(Node *p, Node **next_ref) {\n        // If p is not NULL\n        if (p) {\n            // Traverse to the right subtree first\n            populateNextRecur(p->right, next_ref);\n\n            // Set the next pointer of p to the current value of next_ref\n            p->next = *next_ref;\n\n            // Update the value of next_ref to p\n            *next_ref = p;\n\n            // Traverse to the left subtree\n            populateNextRecur(p->left, next_ref);\n        }\n    }\n\n    // Function to populate the next pointer in each node\n    void populateNext(Node *root) {\n        // Initialize next pointer as NULL\n        Node *next = NULL;\n\n        // Call the recursive function\n        populateNextRecur(root, &next);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    class Nodee {\n        Node node = null; // create an object of Node class and initialize it to null\n    }\n\n    public void populateNextRecur(Node p, Nodee next_ref) {\n        if (p != null) {\n            populateNextRecur(\n                p.right, next_ref); // recursively call the method for the right subtree\n\n            p.next = next_ref.node; // assign the next pointer of the current node to\n                                    // the node stored in next_ref\n\n            next_ref.node = p; // update the next_ref to the current node\n\n            populateNextRecur(\n                p.left, next_ref); // recursively call the method for the left subtree\n        }\n        return;\n    }\n\n    public void populateNext(Node root) {\n        Nodee next = new Nodee(); // create an object of Nodee class\n\n        populateNextRecur(\n            root, next); // call the recursive method to populate the next pointers\n        return;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from collections import deque\n\n\nclass Node:\n\n    def __init__(self, val):\n        self.right = None\n        self.data = val\n        self.left = None\n        self.next = None\n\n\nclass Solution:\n    #Recursive function to populate the next pointer for each node\n    def populateNextRecur(self, p):\n        if p:\n            #First recursively populate the next pointer for right subtree\n            self.populateNextRecur(p.right)\n\n            #Set the next pointer of the current node as the previous node\n            p.next = self.next\n            #Update the previous node as the current node\n            self.next = p\n\n            #Recursively populate the next pointer for left subtree\n            self.populateNextRecur(p.left)\n\n    #Function to populate the next pointer\n    def populateNext(self, root):\n        #Initialize the next pointer as None\n        self.next = None\n\n        #Call the recursive function to populate the next pointer\n        self.populateNextRecur(root)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {Node} root\n     * @returns {void}\n     */\n    populateNext(root) {\n        let next = null;\n\n        function populateNextRecur(node) {\n            if (node) {\n                // Traverse to the right subtree first\n                populateNextRecur(node.right);\n\n                // Set the next pointer of node to the current value of next\n                node.next = next;\n\n                // Update the value of next to node\n                next = node;\n\n                // Traverse to the left subtree\n                populateNextRecur(node.left);\n            }\n        }\n\n        populateNextRecur(root);\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}