{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703484,
            "title": "Positive and negative elements",
            "titleSlug": "positive-and-negative-elements4613",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong>&nbsp;containing <strong>equal number</strong> of <strong>positive</strong> and <strong>negative</strong> elements, arrange the array such that every positive element is followed by a negative element.<br /><strong>Note:</strong><strong>&nbsp;</strong>The relative order of positive and negative numbers should be maintained.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-1, 2, -3, 4, -5, 6]\n<strong>Output:</strong> [2, -1, 4, -3, 6, -5]\n<strong>Explanation</strong>: Positive numbers in order are 2, 4 and 6. Negative numbers in order are -1, -3 and -5. So the arrangement we get is 2, -1, 4, -3, 6 and -5.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-3, 2, -4, 1]\n<strong>Output:</strong> [2, -3, 1, -4] <br /><strong>Explanation: </strong>The positive numbers are 2,1 and negetive numbers are -3, -4  </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; arr.size() &le; 10<sup>6</sup><br />-10<sup>6</sup> &le; arr[i] &le; 10<sup>6</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` containing an equal number of positive and negative elements, rearrange the array such that every positive element is followed by a negative element. The relative order of positive and negative numbers must be maintained.",
                "constraints": [
                    "2 <= arr.size() <= 10^6",
                    "-10^6 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[-1, 2, -3, 4, -5, 6]",
                        "output": "[2, -1, 4, -3, 6, -5]",
                        "explanation": "Positive numbers in order are 2, 4, and 6. Negative numbers in order are -1, -3, and -5. The resulting arrangement is 2, -1, 4, -3, 6, and -5."
                    },
                    {
                        "input": "[-3, 2, -4, 1]",
                        "output": "[2, -3, 1, -4]",
                        "explanation": "The positive numbers are 2 and 1. The negative numbers are -3 and -4. The resulting arrangement is 2, -3, 1, and -4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Segregate positive and negative elements, And print them alternatively.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to arrange positive and negative numbers alternatively.\n    vector<int> arranged(vector<int> &arr) {\n        int n = arr.size();\n        int i = 0, j = 0;\n        int flag = 0;\n        vector<int> ans;\n\n        // iterating till all elements are considered.\n        while (i < n || j < n) {\n            // if flag is 0, find next positive number and add it to ans.\n            if (flag == 0) {\n                while (i < n && arr[i] < 0)\n                    i++;\n                if (i < n) {\n                    ans.push_back(arr[i]);\n                    i++;\n                }\n                flag = 1;\n            }\n            // if flag is 1, find next negative number and add it to ans.\n            else if (flag == 1) {\n                while (j < n && arr[j] >= 0)\n                    j++;\n                if (j < n) {\n                    ans.push_back(arr[j]);\n                    j++;\n                }\n                flag = 0;\n            }\n        }\n        // returning the arranged list of numbers.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static ArrayList<Integer> arranged(ArrayList<Integer> arr) {\n        int n = arr.size();\n        int i = 0, j = 0;\n        int flag = 0;\n        ArrayList<Integer> ans = new ArrayList<>();\n\n        // iterating till all elements are considered.\n        while (i < n || j < n) {\n            // if flag is 0, find next positive number and add it to ans.\n            if (flag == 0) {\n                while (i < n && arr.get(i) < 0) i++;\n                if (i < n) {\n                    ans.add(arr.get(i));\n                    i++;\n                }\n                flag = 1;\n            }\n            // if flag is 1, find next negative number and add it to ans.\n            else if (flag == 1) {\n                while (j < n && arr.get(j) >= 0) j++;\n                if (j < n) {\n                    ans.add(arr.get(j));\n                    j++;\n                }\n                flag = 0;\n            }\n        }\n        // returning the arranged list of numbers.\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def arranged(self, arr):\n        n = len(arr)\n        i, j = 0, 0  # initializing variables\n        flag = 0  # initializing flag variable\n        ans = []  # initializing empty list\n        while (i < n or j < n):  # while loop to iterate through the list\n            if (flag == 0):  # if flag is 0\n                while (i < n and arr[i] < 0 and i < n):\n                    # iterate through the list until positive number is encountered\n                    i = i + 1  # increment i\n                if (i < n):  # if i is within the range of the list\n                    ans.append(\n                        arr[i])  # append the current element to ans list\n                    i = i + 1  # increment i\n                flag = 1  # change flag to 1\n\n            elif (flag == 1):  # if flag is 1\n                while (j < n and arr[j] >= 0 and j < n):\n                    # iterate through the list until negative number is encountered\n                    j = j + 1  # increment j\n                if (j < n):  # if j is within the range of the list\n                    ans.append(\n                        arr[j])  # append the current element to ans list\n                    j = j + 1  # increment j\n                flag = 0  # change flag to 0\n\n        return ans  # return the ans list\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    // Function to arrange all elements of a given array.\n    arranged(arr) {\n        let n = arr.length;\n        let i = 0, j = 0;\n        let flag = 0;\n        let ans = [];\n        while (i < n || j < n) {\n            if (flag == 0) {\n                while (i < n && arr[i] < 0 && i < n) {\n                    i = i + 1;\n                }\n                if (i < n) {\n                    ans.push(arr[i]);\n                    i = i + 1;\n                }\n                flag = 1;\n            } else if (flag == 1) {\n                while (j < n && arr[j] >= 0 && j < n) {\n                    j = j + 1;\n                }\n                if (j < n) {\n                    ans.push(arr[j]);\n                    j = j + 1;\n                }\n                flag = 0;\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}