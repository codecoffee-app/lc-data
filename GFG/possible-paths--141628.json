{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705289,
            "title": "Possible Paths in a Tree",
            "titleSlug": "possible-paths--141628",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>weighted</strong> tree with <strong>n</strong> nodes and (<strong>n-1</strong>) edges. You are given <strong>q</strong> <strong>queries</strong>. Each query contains a number <strong>x</strong>. For each query, find the number of paths in which the maximum edge weight is less than or equal to <strong>x</strong>. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> Path from A to B and B to A are considered to be the same.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> <br />n = 3\nedges {start, end, weight} = {{1, 2, 1}, {2, 3, 4}}</span>\n<span style=\"font-size: 18px;\">q = 1\nqueries[] = {3}\n<strong>Output:</strong> <br />1\n<strong>Explanation:</strong>\nQuery 1: Path from 1 to 2</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> <br />n = 7\n</span><span style=\"font-size: 18px;\">edges {start, end, weight} = {{1, 2, 3}, {2, 3, 1}, {2, 4, 9}, {3, 6, 7}, {3, 5, 8}, {5, 7, 4}}\n</span><span style=\"font-size: 18px;\">q = 3\nqueries[] = {1, 3, 5}\n<strong>Output:</strong> <br />1 3 4\n<strong>Explanation:</strong> </span>\n<span style=\"font-size: 18px;\">Query 1: Path from 2 to 3</span>\n<span style=\"font-size: 18px;\">Query 2: Path from 1 to 2, 1 to 3, and 2 to 3</span>\n<span style=\"font-size: 18px;\">Query 3: Path from 1 to 2, 1 to 3, 2 to 3, and 5 to 7</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task: &nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong>maximumWeight()</strong>which takes integers <strong>n,</strong>&nbsp;list of&nbsp;<strong>edges</strong> where each edge is given by {start,end,weight}, an integer <strong>q </strong>and a list of q <strong>queries</strong> as input parameters and returns a list of integers denoting the number of possible paths for each query.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(nlogn + qlogn)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; n &le; 10<sup>4<br /></sup>1 &le; q &le; 10<sup>4</sup><sup><br /></sup></span><span style=\"font-size: 18px;\">1 </span><span style=\"font-size: 18px;\">&le; edges[i][0], edges[i][1]&nbsp;</span><span style=\"font-size: 18px;\">&le; n<br /></span><span style=\"font-size: 18px;\">edges[i][0] != edges[i][1]<br /></span><span style=\"font-size: 18px;\">0 </span><span style=\"font-size: 18px;\">&le; </span><span style=\"font-size: 18px;\">edges[i][2] </span><span style=\"font-size: 18px;\">&le; 10<sup>5</sup><br />0&nbsp;&le;&nbsp;queries[i] &le; 10<sup>5</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use the union-find algorithm</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "union-find",
                "slug": "union-find"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\n\t\n\tint ans;\n\n\tprivate:\n\t//Function to find the root of the given element in the disjoint set.\n\tint root(int i, vector<int> &parent)\n\t{\n\t    while(parent[i]!=i)\n\t    {\n\t        parent[i] = parent[parent[i]];\n\t        i = parent[i];\n\t    }\n\t    return i;\n\t}\n\n\t//Function to perform union operation of two sets and return the resulting size of the set.\n    int Union(int a, int b, vector<int> &parent, vector<int> &sz)\n    {\n    \tint ra = root(a, parent);\n\t    int rb = root(b, parent);\n\t    \n\t    //If the roots are the same, it means they are already in the same set,\n\t    //so return the current size of the set.\n\t    if(ra == rb)\n\t        return sz[ra]*sz[ra];\n\t    \n\t    //If the size of the set containing a is smaller than the size of the set containing b,\n\t    //then swap a and b.\n\t    if(sz[ra] < sz[rb])\n\t    {\n\t        swap(ra,rb);\n\t        swap(a,b);\n\t    }\n\t    \n\t    //Merge the two sets by updating the parent and size.\n\t    ans += sz[ra]*sz[rb];\n\t    parent[rb] = ra;\n\t    sz[ra] += sz[rb];\n\t \n\t    return ans;\n    }\n \n\tpublic:\n\tvector<int> maximumWeight(int n, vector<vector<int>> edges, int q, vector<int> &queries)\n\t{\n\t\tans = 0;\n\n\t\tvector<int> parent(n+1, 0), sz(n+1, 0);\n\t\tfor(int i = 0;i <= n; i++)\n\t\t{\n            //Initializing each element as its own parent and size as 1.\n            parent[i] = i;\n            sz[i] = 1;\n        }\n\n        //Creating a vector of pairs to store the weights and the endpoints of the edges.\n        vector<pair<int, pair<int, int>>> wt;\n       \tfor(int i = 0; i < n-1; i++)\n           \twt.push_back({edges[i][2] , {edges[i][0], edges[i][1]}}); \n        \n        //Sorting the edges based on their weights in ascending order.\n        sort(wt.begin() , wt.end());\n\n        //Creating a map to store the maximum weight of the connected component with weights less than or equal to each query.\n        map<int, int> mp;\n\n        //Iterating through the sorted edges and performing union operation.\n        for(int i = 0;i < n-1; i++){\n            int a = wt[i].first;\n            int b = wt[i].second.first;\n            int c = wt[i].second.second;\n \n            //Updating the map with the maximum weight of the connected component after each union operation.\n            mp[a] = Union(b, c, parent, sz);  \n        }\n\n        //Creating a vector to store the results for each query.\n        vector<int> res;\n\n        //Iterating through each query and finding the maximum weight with weights less than or equal to the query.\n        for(int i = 0; i < q; i++)\n        {\n           \t//Finding the element in the map which is just greater than the query.\n           \tauto val = mp.upper_bound(queries[i]);\n            if(val == mp.begin())\n                res.push_back(0); //If there is no such element, then the maximum weight is 0.\n            else\n            {\n                val--;\n                res.push_back(val->second); //Storing the maximum weight for the query.\n            }\n       \t}\n       \treturn res;\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    int ans;\n\n    // Function to find the root of the given element in the disjoint set.\n    private int root(int i, int[] parent) {\n        while (parent[i] != i) {\n            parent[i] = parent[parent[i]];\n            i = parent[i];\n        }\n        return i;\n    }\n\n    // Function to perform union operation of two sets and return the resulting size of the set.\n    private int Union(int a, int b, int[] parent, int[] sz) {\n        int ra = root(a, parent);\n        int rb = root(b, parent);\n\n        // If the roots are the same, it means they are already in the same set,\n        // so return the current size of the set.\n        if (ra == rb)\n            return sz[ra] * sz[ra];\n\n        // If the size of the set containing a is smaller than the size of the set containing b,\n        // then swap a and b.\n        if (sz[ra] < sz[rb]) {\n            int temp = ra;\n            ra = rb;\n            rb = temp;\n\n            temp = a;\n            a = b;\n            b = temp;\n        }\n\n        // Merge the two sets by updating the parent and size.\n        ans += sz[ra] * sz[rb];\n        parent[rb] = ra;\n        sz[ra] += sz[rb];\n\n        return ans;\n    }\n\n    ArrayList<Integer> maximumWeight(int n, int[][] edges, int q, int[] queries) {\n        ans = 0;\n\n        int[] parent = new int[n + 1];\n        int[] sz = new int[n + 1];\n        Arrays.fill(sz, 1);\n\n        // Initializing each element as its own parent.\n        for (int i = 0; i <= n; i++) {\n            parent[i] = i;\n        }\n\n        // Creating a map to store the maximum weight of the connected component with weights less than or equal to each query.\n        NavigableMap<Integer, Integer> mp = new TreeMap<>();\n\n        // Sorting the edges based on their weights in ascending order.\n        Arrays.sort(edges, (a, b) -> Integer.compare(a[2], b[2]));\n\n        // Iterating through the sorted edges and performing union operation.\n        for (int i = 0; i < n - 1; i++) {\n            int a = edges[i][0];\n            int b = edges[i][1];\n            int c = edges[i][2];\n\n            // Updating the map with the maximum weight of the connected component after each union operation.\n            mp.put(c, Union(a, b, parent, sz));\n        }\n\n        // Creating a list to store the results for each query.\n        ArrayList<Integer> res = new ArrayList<>();\n\n        // Iterating through each query and finding the maximum weight with weights less than or equal to the query.\n        for (int query : queries) {\n            // Finding the element in the map which is just less than or equal to the query.\n            Map.Entry<Integer, Integer> entry = mp.floorEntry(query);\n            if (entry == null)\n                res.add(0); // If there is no such element, then the maximum weight is 0.\n            else\n                res.add(entry.getValue()); // Storing the maximum weight for the query.\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def __init__(self):\r\n        self.ans = 0\r\n\r\n    # Function to find the root of the given element in the disjoint set.\r\n    def root(self, i, parent):\r\n        while parent[i] != i:\r\n            parent[i] = parent[parent[i]]\r\n            i = parent[i]\r\n        return i\r\n\r\n    # Function to perform union operation of two sets and return the resulting size of the set.\r\n    def Union(self, a, b, parent, sz):\r\n        ra = self.root(a, parent)\r\n        rb = self.root(b, parent)\r\n\r\n        # If the roots are the same, it means they are already in the same set,\r\n        # so return the current size of the set.\r\n        if ra == rb:\r\n            return sz[ra] * sz[ra]\r\n\r\n        # If the size of the set containing a is smaller than the size of the set containing b,\r\n        # then swap a and b.\r\n        if sz[ra] < sz[rb]:\r\n            ra, rb = rb, ra\r\n            a, b = b, a\r\n\r\n        # Merge the two sets by updating the parent and size.\r\n        self.ans += sz[ra] * sz[rb]\r\n        parent[rb] = ra\r\n        sz[ra] += sz[rb]\r\n\r\n        return self.ans\r\n\r\n    def maximumWeight(self, n, edges, q, queries):\r\n        self.ans = 0\r\n\r\n        parent = [0] * (n + 1)\r\n        sz = [0] * (n + 1)\r\n        for i in range(n + 1):\r\n            # Initializing each element as its own parent and size as 1.\r\n            parent[i] = i\r\n            sz[i] = 1\r\n\r\n        # Creating a list of tuples to store the weights and the endpoints of the edges.\r\n        wt = []\r\n        for i in range(n - 1):\r\n            wt.append((edges[i][2], (edges[i][0], edges[i][1])))\r\n\r\n        # Sorting the edges based on their weights in ascending order.\r\n        wt.sort()\r\n\r\n        # Creating a dictionary to store the maximum weight of the connected component with weights less than or equal to each query.\r\n        mp = {}\r\n\r\n        # Iterating through the sorted edges and performing union operation.\r\n        for i in range(n - 1):\r\n            a = wt[i][0]\r\n            b = wt[i][1][0]\r\n            c = wt[i][1][1]\r\n\r\n            # Updating the dictionary with the maximum weight of the connected component after each union operation.\r\n            mp[a] = self.Union(b, c, parent, sz)\r\n\r\n        # Creating a list to store the results for each query.\r\n        res = []\r\n\r\n        # Iterating through each query and finding the maximum weight with weights less than or equal to the query.\r\n        for i in range(q):\r\n            # Finding the element in the dictionary which is just greater than the query.\r\n            val = next((val for val in reversed(sorted(mp.keys())) if val <= queries[i]), None)\r\n            if val is None:\r\n                res.append(0)  # If there is no such element, then the maximum weight is 0.\r\n            else:\r\n                res.append(mp[val])  # Storing the maximum weight for the query.\r\n        return res\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}