{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704418,
            "title": "Possible Timings",
            "titleSlug": "possible-timings2437",
            "content": "<p><span style=\"font-size:18px\">Given a one/two-digit timing, calculate the possibilities of occurrence of other timings(including the glowing one) with relevant to glowing segments, assuming some segments may not be glowing.<br />\n<strong>Displaying the numbers is done using a seven-segment display. It is guaranteed that the sticks currently displaying are working fine.</strong></span></p>\n\n<p><span style=\"font-size:18px\"><img alt=\"\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/possible-timings.jpg\" /></span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS = &quot;78&quot;\n<strong>Output:</strong>\n5\n<strong>Explanation:</strong>\n<strong>7</strong> can be replaced by \n<strong>5</strong> different numbers \n9, 3, 8, 0, and 7\n(if none of the segment \nis broken) and <strong>8</strong> can be \nreplaced by only <strong>1</strong> \nnumber i.e 8 itself\n(if none of the the \nsegment is broken), \ntherefore the answer \nis <strong>5*1=5</strong>.</span></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\">S = &quot;05&quot;</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">8</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\"><strong>0</strong> can be replaced by </span>\n<span style=\"font-size:18px\"><strong>2</strong> numbers, 8 and 0,</span>\n<span style=\"font-size:18px\">while <strong>5</strong> can be replaced</span>\n<span style=\"font-size:18px\">by <strong>4</strong> different numbers.</span>\n<span style=\"font-size:18px\">So, the answer is <strong>4*2=8</strong>.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\n\n<p><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function numberOfPossibleTimings() which takes a string S and return number of possible timings.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n0&lt;=x&lt;=99<br />\n<strong>Note:&nbsp;</strong> The number <strong>x</strong> should contain 2 digits like 1 should be written as 01.</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a one or two-digit timing, calculate the number of possible timings (including the original) that can be displayed on a seven-segment display, considering that some segments might be malfunctioning. The currently displayed segments are guaranteed to be working correctly.",
                "constraints": [
                    "0 <= x <= 99",
                    "Note: The number x should contain 2 digits like 1 should be written as 01."
                ],
                "testcases": [
                    {
                        "input": "78",
                        "output": "5",
                        "explanation": "The digit '7' can be replaced by 5 different digits (9, 3, 8, 0, and 7), while the digit '8' can only be replaced by 1 digit (8 itself). Therefore, the total number of possible timings is 5 * 1 = 5."
                    },
                    {
                        "input": "05",
                        "output": "8",
                        "explanation": "The digit '0' can be replaced by 2 digits (8 and 0), while the digit '5' can be replaced by 4 digits. Thus, the total number of possible timings is 2 * 4 = 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Calculate for every number from&nbsp;<strong>0</strong>&ndash;<strong>9</strong>&nbsp;what all digits are possible by adding or<br />\nremoving exactly one rod from the display</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Date-Time",
                "slug": "date-time"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{   \npublic:\n\n    \n    // Function performing calculations\n    int possibleTimings(string n)\n    {\n        \n        // Array storing different numbers\n        // of digits a particular digit\n        // can be replaced with\n        int num[10] = { 2, 7, 2, 3, 3, 4, 2, 5, 1, 2 };\n    \treturn num[n[0] - '0'] * num[n[1] - '0'];\n    }\n    \n\n\n    int numberOfPossibleTimings(string S){\n        return possibleTimings(S);\n        \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int numberOfPossibleTimings(string S)\n    {\n        // Array storing different numbers\n        // of digits a particular digit\n        // can be replaced with\n        int[] num = { 2, 7, 2, 3, 3, 4, 2, 5, 1, 2 };\n        return num[(int)Char.GetNumericValue(S[0])] * num[(int)Char.GetNumericValue(S[1])];\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}