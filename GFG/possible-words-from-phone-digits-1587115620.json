{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701199,
            "title": "Possible Words From Phone Digits",
            "titleSlug": "possible-words-from-phone-digits-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a keypad as shown in the diagram, and an&nbsp;array <strong>arr[ ]</strong>, your task is to <strong>list all possible words</strong>&nbsp;</span><span style=\"font-size: 18px;\">in&nbsp;</span><strong style=\"font-size: 18px;\">any order </strong><span style=\"font-size: 18px;\">which can be generated by pressing numbers from array.</span></p>\n<p><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/701199/Web/Other/a1d54f48-0118-45d8-a8ab-7551ed72df27_1685086793.png\" alt=\"\" /></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">arr[] = [2, 3]\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">ad ae af bd be bf cd ce cf\n</span><strong style=\"font-size: 18px;\">Explanation: </strong><span style=\"font-size: 18px;\">When we press 2, 3 total possible words are 3 x 3 = 9.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] =[3, 4, 5]\n<strong>Output: </strong>dgj dgk dgl dhj dhk dhl dij dik dil egj egk egl ehj ehk ehl eij eik eil fgj fgk fgl fhj fhk fhl fij fik fil<strong>\nExplanation: </strong>When we press 3, 4, 5 total possible words are 3 x 3 x 3 = 27.<br /></span></pre>\n<pre><span ><strong >Input: </strong><span >arr[] =[2]\n</span><strong >Output: </strong><span >a b c<br /></span><span style=\"font-size: 18.6667px;\"><strong>Explanation</strong>: When we press 2 total possible words are 3.</span><span ><br /></span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<br />2 &le; arr[i] &le; 9</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a keypad as shown below (mappings of digits to letters), and an array of digits `arr[]`, generate all possible words that can be formed by pressing the corresponding numbers in the array. The order of the words in the output does not matter.\n\nKeypad mapping:\n2: a, b, c\n3: d, e, f\n4: g, h, i\n5: j, k, l\n6: m, n, o\n7: p, q, r, s\n8: t, u, v\n9: w, x, y, z",
                "constraints": [
                    "1 <= arr.length <= 10",
                    "2 <= arr[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "[2, 3]",
                        "output": "ad ae af bd be bf cd ce cf",
                        "explanation": "Pressing '2' allows for the characters 'a', 'b', 'c'. Pressing '3' allows for 'd', 'e', 'f'.  Combining these generates 3 x 3 = 9 possible words."
                    },
                    {
                        "input": "[3, 4, 5]",
                        "output": "dgj dgk dgl dhj dhk dhl dij dik dil egj egk egl ehj ehk ehl eij eik eil fgj fgk fgl fhj fhk fhl fij fik fil",
                        "explanation": "Pressing '3', '4', and '5' allows for 'd,e,f', 'g,h,i', and 'j,k,l' respectively. Combining these generates 3 x 3 x 3 = 27 possible words."
                    },
                    {
                        "input": "[2]",
                        "output": "a b c",
                        "explanation": "Pressing '2' allows for the characters 'a', 'b', 'c'. Therefore, the possible words are 'a', 'b', and 'c'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use recursion to explore all letter combinations for each digit while backtracking to build possible words.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void possibleWordsRec(vector<int> &arr, int index, string &prefix,\n                          vector<string> &padMap, vector<string> &res) {\n\n        // Base case: if the prefix length matches arr size\n        if (index == arr.size()) {\n            res.push_back(prefix);\n            return;\n        }\n\n        // Get the corresponding digit\n        int digit = arr[index];\n\n        // Skip invalid digits\n        if (digit < 2 || digit > 9) {\n            possibleWordsRec(arr, index + 1, prefix, padMap, res);\n            return;\n        }\n\n        // Place all possible letters for this digit\n        for (char ch : padMap[digit]) {\n            prefix.push_back(ch);\n            possibleWordsRec(arr, index + 1, prefix, padMap, res);\n            prefix.pop_back();\n        }\n    }\n\n    // Function to find all possible letter combinations\n    vector<string> possibleWords(vector<int> &arr) {\n        vector<string> res;\n        vector<string> padMap = {\"\",    \"\",    \"abc\",  \"def\", \"ghi\",\n                                 \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n        string prefix = \"\";\n\n        possibleWordsRec(arr, 0, prefix, padMap, res);\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static void possibleWordsRec(int[] arr, int index, StringBuilder prefix,\n                                 String[] padMap, ArrayList<String> res) {\n        // Base case: if the prefix length matches arr size\n        if (index == arr.length) {\n            res.add(prefix.toString());\n            return;\n        }\n\n        // Get the corresponding digit\n        int digit = arr[index];\n\n        // Skip invalid digits\n        if (digit < 2 || digit > 9) {\n            possibleWordsRec(arr, index + 1, prefix, padMap, res);\n            return;\n        }\n\n        // Place all possible letters for this digit\n        for (char ch : padMap[digit].toCharArray()) {\n            prefix.append(ch);\n            possibleWordsRec(arr, index + 1, prefix, padMap, res);\n            prefix.deleteCharAt(prefix.length() - 1);\n        }\n    }\n\n    // Function to find all possible letter combinations\n    static ArrayList<String> possibleWords(int[] arr) {\n        ArrayList<String> res = new ArrayList<>();\n        String[] padMap = {\"\",    \"\",    \"abc\",  \"def\", \"ghi\",\n                           \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n\n        StringBuilder prefix = new StringBuilder();\n\n        possibleWordsRec(arr, 0, prefix, padMap, res);\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def possibleWordsRec(self, arr, index, prefix, padMap, res):\n        # Base case: if the prefix length matches arr size\n        if index == len(arr):\n            res.append(prefix)\n            return\n\n        # Get the corresponding digit\n        digit = arr[index]\n\n        # Skip invalid digits\n        if digit < 2 or digit > 9:\n            self.possibleWordsRec(arr, index + 1, prefix, padMap, res)\n            return\n\n        # Place all possible letters for this digit\n        for ch in padMap[digit]:\n            self.possibleWordsRec(arr, index + 1, prefix + ch, padMap, res)\n\n    # Function to find all possible letter combinations\n    def possibleWords(self, arr):\n        res = []\n        padMap = [\n            \"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"\n        ]\n        self.possibleWordsRec(arr, 0, \"\", padMap, res)\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find a list of possible words from a phone number.\n    possibleWordsRec(arr, index, prefix, padMap, res) {\n\n        // Base case: if the prefix length matches arr size\n        if (index === arr.length) {\n            res.push(prefix);\n            return;\n        }\n\n        // Get the corresponding digit\n        const digit = arr[index];\n\n        // Skip invalid digits\n        if (digit < 2 || digit > 9) {\n            this.possibleWordsRec(arr, index + 1, prefix, padMap, res);\n            return;\n        }\n\n        // Place all possible letters for this digit\n        for (let ch of padMap[digit]) {\n            this.possibleWordsRec(arr, index + 1, prefix + ch, padMap, res);\n        }\n    }\n\n    // Function to find all possible letter combinations\n    possibleWords(arr) {\n        const res = [];\n        const padMap =\n            [ \"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\" ];\n        this.possibleWordsRec(arr, 0, \"\", padMap, res);\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}