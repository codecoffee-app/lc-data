{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712306,
            "title": "Postfix to Infix Conversion",
            "titleSlug": "postfix-to-infix-conversion",
            "content": "<p dir=\"ltr\"><span style=\"font-size:18px\">You are given a string that represents the postfix form of a valid mathematical expression. Convert it to its infix form.</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Example:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>ab*c+ \r\n<strong>Output: </strong>\r\n((a*b)+c)\r\n<strong>Explanation: </strong>\r\nThe above output is its valid infix form.\r\n</span></pre>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">Complete the function string postToInfix(string post_exp), which takes a postfix string as input and returns its infix form.</span></p>\r\n\r\n<p dir=\"ltr\">&nbsp;</p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N).</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong> O(N).</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">3&lt;=post_exp.length()&lt;=10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string representing a valid mathematical expression in postfix notation, convert it to its equivalent infix notation.",
                "constraints": [
                    "3 <= post_exp.length() <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "ab*c+",
                        "output": "((a*b)+c)",
                        "explanation": "The postfix expression 'ab*c+' is converted to its infix equivalent '((a*b)+c)'. The multiplication of 'a' and 'b' is performed first, then the result is added to 'c'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to check if a character is an operand.\n    bool isOperand(char x) {\n        return (x >= 'a' && x <= 'z') || (x >= 'A' && x <= 'Z');\n    }\n\n    // Function to convert postfix expression to infix expression.\n    string postToInfix(string exp) {\n        stack<string> s;\n        int n = exp.size();\n\n        // Iterating through each character in the expression.\n        for (int i = 0; i < n; i++) {\n            // If the character is an operand, push it to the stack.\n            if (isOperand(exp[i])) {\n                string op(1, exp[i]);\n                s.push(op);\n            } else {\n                // If the character is an operator, pop two operands from the stack,\n                // create a new string in the format (op2 operator op1), and push it back to the stack.\n                string op1 = s.top();\n                s.pop();\n                string op2 = s.top();\n                s.pop();\n                s.push(\"(\" + op2 + exp[i] + op1 + \")\");\n            }\n        }\n        // Return the final infix expression stored in the stack.\n        return s.top();\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static boolean isOperand(char x) {\r\n        return (x >= 'a' && x <= 'z') || (x >= 'A' && x <= 'Z');\r\n    }\r\n    static String postToInfix(String exp) {\r\n        // code here\r\n        Stack<String> s = new Stack<String>();\r\n\r\n        for (int i = 0; i < exp.length(); i++) {\r\n            // Push operands\r\n            if (isOperand(exp.charAt(i))) {\r\n                s.push(exp.charAt(i) + \"\");\r\n            }\r\n\r\n            // We assume that input is\r\n            // a valid postfix and expect\r\n            // an operator.\r\n            else {\r\n                String op1 = s.peek();\r\n                s.pop();\r\n                String op2 = s.peek();\r\n                s.pop();\r\n                s.push(\"(\" + op2 + exp.charAt(i) + op1 + \")\");\r\n            }\r\n        }\r\n\r\n        // There must be a single element\r\n        // in stack now which is the required\r\n        // infix.\r\n        return s.peek();\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom collections import deque\nclass Solution:\n    # Function to convert postfix expression to infix expression.\n    def postToInfix(self, postfix):\n        # Function to check if a character is an operand.\n        def isOperand(x):\n            return ('a'<=x<='z') or ('A'<=x<='Z')\n        \n        stack = deque()\n        n = len(postfix)\n        for i in range(n):\n            if isOperand(postfix[i]):\n                stack.append(postfix[i])\n            else:\n                op1 = stack.pop()\n                op2 = stack.pop()\n                stack.append(\"(\"+op2+postfix[i]+op1+\")\")\n        \n        return stack[-1]",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {string} postfix\r\n * @returns {string}\r\n*/\r\n\r\nclass Solution\r\n{\r\n    //Function to convert postfix expression to infix expression.\r\n    postToInfix(postfix)\r\n    {\r\n        // Function to check if a character is an operand.\r\n        const isOperand = (x) => ('a'<=x && x<='z') || ('A'<=x && x<='Z');\r\n        \r\n        let stack = [];\r\n        let n = postfix.length;\r\n        for (let i = 0; i < n; i++) {\r\n            if (isOperand(postfix[i])) {\r\n                stack.push(postfix[i]);\r\n            } else {\r\n                let op1 = stack.pop();\r\n                let op2 = stack.pop();\r\n                stack.push(\"(\"+op2+postfix[i]+op1+\")\");\r\n            }\r\n        }\r\n        \r\n        return stack[stack.length - 1];\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}