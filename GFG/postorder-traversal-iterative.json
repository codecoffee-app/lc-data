{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706122,
            "title": "Iterative Postorder",
            "titleSlug": "postorder-traversal-iterative",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree. Find the postorder traversal of the tree <strong>without using recursion</strong>. R</span><span style=\"font-size: 18px;\">eturn a list containing the postorder traversal of the tree, calculated</span><strong style=\"font-size: 18px;\">&nbsp;without using recursion.</strong></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n<strong>\\t     </strong>1\n<strong>\\t   /   \\</strong>\n\\t  2     3\n\\t/  \\\n     4    5\n\n<strong>Output: </strong>4 5 2 3 1\n<strong>Explanation: </strong>Postorder traversal (Left-&gt;Right-&gt;Root) of the tree is 4 5 2 3 1.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n\\t\\t 8\n\\t    /\\t\\\n\\t  1\\t    5\n\\t   \\\\t /   \\\n\\t    7     10    6\n\\t     \\   /\n&nbsp;\\t     10 6\n\n<strong>Output: </strong>10 7 1 6 10 6 5 8&nbsp;\n<strong>Explanation: </strong>Postorder traversal (Left-&gt;Right-&gt;Root) of the tree is 10 7 1 6 10 6 5 8 .</span></pre>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 18px;\"><strong>Expected time complexity: </strong>O(n)</span></div>\n<div><span style=\"font-size: 18px;\"><strong>Expected auxiliary space: </strong>O(n)</span></div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></div>\n<div><span style=\"font-size: 18px;\">1 &lt;= Number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= Data of a node &lt;= 10<sup>5</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, return a list containing its postorder traversal without using recursion.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5",
                    "1 <= Data of a node <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "     1\n   /   \\\n  2     3\n /  \\\n4    5",
                        "output": "4 5 2 3 1",
                        "explanation": "The postorder traversal (Left->Right->Root) of the tree is 4 5 2 3 1."
                    },
                    {
                        "input": "        8\n       /  \\\n     1      5\n    / \\   /   \\\n   7     10    6\n    \\   /\n     10 6",
                        "output": "10 7 1 6 10 6 5 8",
                        "explanation": "The postorder traversal (Left->Right->Root) of the tree is 10 7 1 6 10 6 5 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\nvector<int> postOrder(Node* node) {\r\n    Node* root;\r\n    vector<int> list;\r\n    stack<Node*> S;\r\n\r\n    // Check for empty tree\r\n    if (!node) return list;\r\n\r\n    S.push(node);\r\n    Node* prev = NULL;\r\n\r\n    while (!S.empty()) {\r\n        Node* current = S.top();\r\n\r\n        /* go down the tree in search of a leaf an if so process it\r\n        and pop stack otherwise move down */\r\n        if (!prev || prev->left == current || prev->right == current) {\r\n            if (current->left)\r\n                S.push(current->left);\r\n            else if (current->right)\r\n                S.push(current->right);\r\n            else {\r\n                S.pop();\r\n                list.push_back(current->data);\r\n            }\r\n\r\n            /* go up the tree from left node, if the child is right\r\n            push it onto stack otherwise process parent and pop\r\n            stack */\r\n        } else if (current->left == prev) {\r\n            if (current->right)\r\n                S.push(current->right);\r\n            else {\r\n                S.pop();\r\n                list.push_back(current->data);\r\n            }\r\n\r\n            /* go up the tree from right node and after coming back\r\n            from right node process parent and pop stack */\r\n        } else if (current->right == prev) {\r\n            S.pop();\r\n            list.push_back(current->data);\r\n        }\r\n\r\n        prev = current;\r\n    }\r\n\r\n    return list;\r\n}\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Tree {\n    // function to perform post order traversal and return a list of nodes\n    ArrayList<Integer> postOrder(Node node) {\n        Node root;\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        Stack<Node> S = new Stack<Node>();\n\n        // Check for empty tree\n        if (node == null) return list;\n        S.push(node);\n        Node prev = null;\n        while (!S.isEmpty()) {\n            Node current = S.peek();\n\n            /* go down the tree in search of a leaf and if found, process it\n            and pop stack otherwise move down */\n            if (prev == null || prev.left == current || prev.right == current) {\n                if (current.left != null)\n                    S.push(current.left);\n                else if (current.right != null)\n                    S.push(current.right);\n                else {\n                    S.pop();\n                    list.add(current.data);\n                }\n\n                /* go up the tree from left node, if the child is right\n                push it onto stack otherwise process parent and pop\n                stack */\n            } else if (current.left == prev) {\n                if (current.right != null)\n                    S.push(current.right);\n                else {\n                    S.pop();\n                    list.add(current.data);\n                }\n\n                /* go up the tree from right node and after coming back\n                from right node, process parent and pop stack */\n            } else if (current.right == prev) {\n                S.pop();\n                list.add(current.data);\n            }\n\n            prev = current;\n        }\n\n        return list;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def postOrder(self, node):\n        # initializing an empty list to store the postorder traversal\n        ans = []\n        # initializing an empty stack\n        s = []\n\n        # checking if the given node is None, if yes then returning the empty list\n        if node == None:\n            return ans\n\n        # pushing the root node into the stack\n        s.append(node)\n        # initializing a variable for keeping track of the previous visited node\n        prev = None\n\n        # loop until the stack becomes empty\n        while len(s) > 0:\n            # getting the top node from the stack\n            current = s[-1]\n\n            # if the current node is the first node or the previous node is the left child of the current node or the previous node is the right child of the current node\n            if ((not prev) or (prev.left == current)\n                    or (prev.right == current)):\n                # if the current node has a left child, then push it into the stack\n                if current.left:\n                    s.append(current.left)\n                # if the current node does not have a left child but has a right child, then push it into the stack\n                elif current.right:\n                    s.append(current.right)\n                # if the current node does not have any child, then remove it from the stack and add its data to the answer list\n                else:\n                    s.pop()\n                    ans.append(current.data)\n            # if the previous node is the left child of the current node\n            elif current.left == prev:\n                # if the current node has a right child, then push it into the stack\n                if current.right:\n                    s.append(current.right)\n                # if the current node does not have a right child, then remove it from the stack and add its data to the answer list\n                else:\n                    s.pop()\n                    ans.append(current.data)\n            # if the current node has a right child\n            elif current.right:\n                # remove the current node from the stack and add its data to the answer list\n                s.pop()\n                ans.append(current.data)\n\n            # updating the previous node\n            prev = current\n\n        # returning the postorder traversal\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\r\n  \t//Return a list containing the postorder traversal of the given tree\r\n    postOrder(node){\r\n        //code here\r\n        let list = [];\r\n        let S = [];\r\n\r\n        // Check for empty tree\r\n        if (node === null) return list;\r\n            S.push(node);\r\n        let prev = null;\r\n        while (S.length) {\r\n            let current = S[S.length-1];\r\n\r\n            /* go down the tree in search of a leaf an if so process it\r\n            and pop stack otherwise move down */\r\n            if (prev === null || prev.left === current || prev.right === current) {\r\n                if (current.left !== null)\r\n                    S.push(current.left);\r\n                else if (current.right !== null)\r\n                    S.push(current.right);\r\n                else {\r\n                    S.pop();\r\n                    list.push(current.key);\r\n                }\r\n\r\n                /* go up the tree from left node, if the child is right\r\n                push it onto stack otherwise process parent and pop\r\n                stack */\r\n            } else if (current.left === prev) {\r\n                if (current.right !== null)\r\n                    S.push(current.right);\r\n                else {\r\n                    S.pop();\r\n                    list.push(current.key);\r\n                }\r\n\r\n                /* go up the tree from right node and after coming back\r\n                from right node process parent and pop stack */\r\n            } else if (current.right === prev) {\r\n                S.pop();\r\n                list.push(current.key);\r\n            }\r\n\r\n            prev = current;\r\n        }\r\n\r\n        return list;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}