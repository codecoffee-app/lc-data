{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700199,
            "title": "Postorder Traversal",
            "titleSlug": "postorder-traversal",
            "content": "<p><span >Given a binary tree, find the Postorder Traversal of it and return a list containing the postorder traversal of the given tree.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>root = [19, 10, 8, 11, 13]\n\\t  19\n &nbsp; &nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp; \\\n &nbsp; &nbsp;10&nbsp;&nbsp; &nbsp; &nbsp;8\n  /&nbsp; &nbsp; \\\n 11&nbsp;  &nbsp;13\n<strong>Output: </strong>[11, 13, 10, 8, 19]</span></pre>\n<pre><span ><strong>Input: </strong>root = [11, 15, N, 7]\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 11\n &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/\n &nbsp; &nbsp; &nbsp; 15\n &nbsp; &nbsp; &nbsp;/\n &nbsp; &nbsp; 7\n<strong>Output:</strong> [7, 15, 11]\n</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5</sup><br />0 &lt;= node-&gt;data &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, traverse it in postorder fashion and return a list containing the postorder traversal of the tree.",
                "constraints": [
                    "The number of nodes in the tree is between 1 and 10^5 (inclusive).",
                    "The value of each node's data is between 0 and 10^6 (inclusive)."
                ],
                "testcases": [
                    {
                        "input": "[19, 10, 8, 11, 13]",
                        "output": "[11, 13, 10, 8, 19]",
                        "explanation": "The postorder traversal of the given tree is: Left subtree -> Right subtree -> Root.  Therefore, the traversal order is [11, 13, 10, 8, 19]."
                    },
                    {
                        "input": "[11, 15, null, 7]",
                        "output": "[7, 15, 11]",
                        "explanation": "The postorder traversal of the given tree is: Left subtree -> Right subtree -> Root. Therefore, the traversal order is [7, 15, 11]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Follow the postorder traversal pattern: Left &rarr; Right &rarr; Root.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley",
            "snapdeal",
            "walmart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n\n    // Function to find the postorder traversal of the tree.\n    void postOrderUtil(struct Node *root, vector<int> &res) {\n        // postorder traversal works on Left Right Root.\n\n        // if root is null then we simply return.\n        if (root == NULL)\n            return;\n\n        // first, we call the recursive function for left subtree.\n        postOrderUtil(root->left, res);\n        // then we call the recursive function for right subtree.\n        postOrderUtil(root->right, res);\n        // then we store the data at root in a list.\n        res.push_back(root->data);\n    }\n\n  public:\n    // Function to return a list containing the postorder traversal of the tree.\n    vector<int> postOrder(Node *root) {\n        vector<int> res;\n        postOrderUtil(root, res);\n        // returning the list.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find the postorder traversal of the tree.\n    void postOrderUtil(Node root, ArrayList<Integer> res) {\n        // postorder traversal works on Left Right Root.\n\n        // if root is null then we simply return.\n        if (root == null) return;\n\n        // first, we call the recursive function for left subtree.\n        postOrderUtil(root.left, res);\n        // then we call the recursive function for right subtree.\n        postOrderUtil(root.right, res);\n        // then we store the data at root in a list.\n        res.add(root.data);\n    }\n\n    // Function to return a list containing the postorder traversal of the tree.\n    ArrayList<Integer> postOrder(Node root) {\n        ArrayList<Integer> res = new ArrayList<Integer>(0);\n        postOrderUtil(root, res);\n        // returning the list.\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    #Function to find the postorder traversal of the tree.\n    def postOrderUtil(self, root, res):\n        # Postorder traversal works on Left Right Root.\n        # If root is null, return\n        if root is None:\n            return\n\n        # First, we call the recursive function for the left subtree.\n        self.postOrderUtil(root.left, res)\n\n        # Then we call the recursive function for the right subtree.\n        self.postOrderUtil(root.right, res)\n\n        # Then we store the data at root in a list.\n        res.append(root.data)\n\n    #Function to return a list containing the postorder traversal of the tree.\n    def postOrder(self, root):\n        res = []\n        self.postOrderUtil(root, res)  # Correct the call here\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} root\n * @returns {number[]}\n*/\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n    //Function to find the postorder traversal of the tree.\n    postorderUtil(root, res)\n    {\n      //postorder traversal works on Left Right Root.\n          \n      //if root is null then we simply return.\n      if (root === null) \n        return;\n        \n      //first, we call the recursive function for left subtree.\n      this.postorderUtil(root.left, res);\n      //then we call the recursive function for right subtree.\n      this.postorderUtil(root.right, res); \n      //then we store the data at root in a list.\n      res.push(root.data);\n    }\n    \n    //Function to return a list containing the postorder traversal of the tree.\n    postOrder(root)\n    {\n        let res = [];\n        this.postorderUtil(root, res);\n        //returning the list.\n        return res;\n    }\n}\n\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}