{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700428,
            "title": "Pots of Gold Game",
            "titleSlug": "pots-of-gold-game",
            "content": "<p><span style=\"font-size:18px\">Two players <strong>X</strong> and <strong>Y</strong> are playing a game in which there are pots of gold arranged in a line, each containing some gold coins. They get alternating turns in which the player can pick a pot from one of the ends of the line. The winner is the player who has a higher number of coins at the end. The objective is to <strong>maximize</strong> the number of coins collected by <strong>X</strong>, assuming <strong>Y</strong> also plays optimally.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Return the <strong>maximum</strong> coins <strong>X</strong> could get while playing the game. Initially,&nbsp;<strong>X</strong> starts the game.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>N = </strong>4\r\n<strong>Q[] = </strong>{8, 15, 3, 7}\r\n<strong>Output: </strong>22\r\n<strong>Explanation: </strong>Player <strong>X</strong>&nbsp;starts and picks 7. Player <strong>Y</strong>&nbsp;\r\npicks the pot containing <strong>8</strong>. Player <strong>X</strong>&nbsp;picks the pot\r\ncontaining <strong>15</strong>. Player <strong>Y</strong>&nbsp;picks 3.\r\nTotal coins collected by <strong>X</strong>&nbsp;= 7 + 15 = 22.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>N </strong>=<strong> </strong>4\r\n<strong>A[] </strong>=<strong> </strong>{2, 2, 2, 2}\r\n<strong>Output: </strong>4 \r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>maxCoins()</strong> which takes an integer N and an array of size N&nbsp; as input and returns the maximum coins collected by player&nbsp;<strong>X</strong>.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N<sup>2</sup>)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N&nbsp;&lt;= 500<br />\r\n1 &lt;= A[i] &lt;= 10<sup>3</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Two players, X and Y, are playing a game with a line of gold pots, each containing some coins. Players take alternating turns selecting a pot from either end of the line. The player with the most coins at the end wins.  The goal is to determine the maximum number of coins player X can collect, assuming player Y also plays optimally to maximize their own coin collection. X always starts the game.",
                "constraints": [
                    "1 <= N <= 500",
                    "1 <= A[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nQ[] = {8, 15, 3, 7}",
                        "output": "22",
                        "explanation": "Player X starts and picks 7. Player Y picks the pot containing 8. Player X picks the pot containing 15. Player Y picks 3. Total coins collected by X = 7 + 15 = 22. This represents the maximum coins X can collect assuming Y plays optimally."
                    },
                    {
                        "input": "N = 4\nA[] = {2, 2, 2, 2}",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Each player has two choices for <strong>coins [i....j]</strong>, where <strong>i</strong>&nbsp;and <strong>j</strong> denote the front and rear of the line respectively.</span></p>\n\n<p><span style=\"font-size:18px\">Try to build the recurrence solution using the above observation.</span></p>\n\n<p>&nbsp;</p>",
            "<ul>\n\t<li><span style=\"font-size:18px\">If the player chooses the front pot&nbsp;<strong>i</strong>, the opponent is left to choose from <strong>[i + 1, j]</strong></span>\n\t<ul>\n\t\t<li><span style=\"font-size:18px\"><strong>\u00e2\u20ac\u2039</strong>If the&nbsp; opponents chooses from pot <strong>i + 1</strong>, recur for&nbsp; <strong>[i + 2, j]</strong>.</span></li>\n\t\t<li><span style=\"font-size:18px\"><strong>\u00e2\u20ac\u2039</strong>If the&nbsp; opponents chooses from pot <strong>j</strong>, recur for&nbsp; <strong>[i + 1, j - 1]</strong>.</span></li>\n\t</ul>\n\t</li>\n\t<li><span style=\"font-size:18px\">If the player chooses the rear pot&nbsp;<strong>j</strong>, the opponent is left to choose from <strong>[i , j - 1]</strong></span>\n\t<ul>\n\t\t<li><span style=\"font-size:18px\"><strong>\u00e2\u20ac\u2039</strong>If the&nbsp; opponents chooses from pot <strong>i + 1</strong>, recur for&nbsp; <strong>[i + 1, j - 1]</strong>.</span></li>\n\t\t<li><span style=\"font-size:18px\"><strong>\u00e2\u20ac\u2039</strong>If the&nbsp; opponents chooses from pot <strong>j - 1</strong>, recur for&nbsp; <strong>[i , j - 2]</strong>.</span></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p><span style=\"font-size:18px\">&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "adobe",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "int dp[1002][1002]; // declare a 2D array to store calculated values for dynamic programming\n\nclass Solution {\npublic:\n    // function to find the maximum number of coins\n    int fun(vector<int>&a,int start,int end)\n    {\n        // base case: if start index is greater than end index, return 0\n        if(start>end){\n             return 0;\n        }\n        \n        // if value is already calculated, return it\n        if(dp[start][end]!=-1){\n            return dp[start][end];\n        }\n        \n        // calculation for two possible choices, taking minimum value\n        // and returning the maximum value\n        int aa= a[end] + min(fun(a,start+1,end-1),fun(a,start,end-2));\n        int bb= a[start]+min(fun(a,start+2,end),fun(a,start+1,end-1));\n        \n        // storing the maximum value in dp array\n        dp[start][end]=max(aa,bb);\n        return dp[start][end];\n    }\n    \n    // function to find the maximum coins\n    int maxCoins(vector<int>&A,int n)\n    {\n        // initializing the dp array with -1\n        for(int i=0;i<1001;i++)\n        {\n            for(int j=0;j<1001;j++)\n            dp[i][j]=-1;\n        }\n        \n        // calling the recursive function to find maximum coins\n        return fun(A,0,n-1);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class GfG{\n\tpublic static int dp[][] =new int[1002][1002]; // Creating a 2D array to store the computed values of the function\n\tpublic static int fun(int a[],int start,int end) // Function to compute the maximum number of coins that can be collected\n\t{\n\t\tif(start>end)\n\t\treturn 0; // If the start index is greater than the end index, no coins can be collected\n\t\t\n\t\tif(dp[start][end]!=-1) \n\t\treturn dp[start][end]; // If the computed value already exists in the dp array, return it\n\t\t\n\t\tint aa= a[end] + Math.min(fun(a,start+1,end-1),fun(a,start,end-2)); // Choose the last coin and recursively call the function for the remaining coins\n\t\tint bb= a[start]+Math.min(fun(a,start+2,end),fun(a,start+1,end-1)); // Choose the first coin and recursively call the function for the remaining coins\n\t\t\n\t\tdp[start][end]=Math.max(aa,bb); // Store the maximum value in the dp array\n\t\tint m=dp[start][end]; // Assign the maximum value to a variable\n\t\treturn m; // Return the maximum value\n\t}\n\tpublic static int maxCoins(int A[],int n) // Function to calculate the maximum number of coins that can be collected\n\t{\n\t\ttry{Arrays.fill(dp,0);}catch(ArrayStoreException ex){} // Set all the elements of dp array to 0\n\t\tfor(int i=0;i<1001;i++)\n\t\t{\n\t\t\tfor(int j=0;j<1001;j++)\n\t\t\tdp[i][j]=-1; // Initialize all the elements of dp array to -1\n\t\t}\n\t\treturn fun(A,0,n-1); // Call the fun function to calculate the maximum number of coins\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\r\n    def maxCoins(self, arr, n):\r\n        # initializing a 2D list for memoization\r\n        t = [[ 0 for i in range(n)] for j in range(n)]\r\n        for g in range(n):\r\n            i=0\r\n            j=g\r\n            # using a sliding window approach\r\n            while(j<n):\r\n                if(i+2 <= j):\r\n                    x = t[i+2][j]\r\n                else:\r\n                    x = 0\r\n                if(i+1 <= j-1):\r\n                    y = t[i+1][j-1]\r\n                else:\r\n                    y = 0\r\n                if(i <= j-2):\r\n                    z = t[i][j-2]\r\n                else:\r\n                    z = 0\r\n                # computing the maximum coins by considering all possible combinations\r\n                t[i][j] = max(arr[i] + min(x, y), arr[j] + min(y, z))\r\n                i+=1\r\n                j+=1\r\n        # returning the maximum coins using the bottom-up approach\r\n        return t[0][n-1]",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {number[]} A\r\n * @param {number} N\r\n * @return {number}\r\n*/\r\n\r\nclass Solution {\r\n\r\n    maxCoins(A,N){\r\n        \r\n        let dp = new Array(N);\r\n        for(let i=0;i<N;i++){\r\n            dp[i] = new Array(N).fill(0);\r\n        }\r\n        \r\n        for(let i=0;i<N;i++){\r\n            dp[i][i] = A[i];\r\n        }\r\n        \r\n        for(let len=2;len<=N;len++){\r\n            for(let i=0;i<N-len+1;i++){\r\n                let j = i+len-1;\r\n                let x = ((i+2)<=j) ? dp[i+2][j]:0;\r\n                let y = ((i+1)<=(j-1)) ? dp[i+1][j-1]:0;\r\n                let z = (i<=(j-2)) ? dp[i][j-2]:0;\r\n                \r\n                dp[i][j] = Math.max(A[i]+Math.min(x,y), A[j]+Math.min(y,z));\r\n            }\r\n        }\r\n        \r\n        return dp[0][N-1];\r\n        \r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}