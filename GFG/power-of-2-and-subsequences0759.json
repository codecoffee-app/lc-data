{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704357,
            "title": "Power Of 2 and Subsequences",
            "titleSlug": "power-of-2-and-subsequences0759",
            "content": "<p><span style=\"font-size:18px\">Given is an array<strong> A[]</strong> of size <strong>N</strong>. Return the number of non-empty subsequences such that the product of all numbers in the subsequence is <strong>Power of 2</strong>. Since the answer may be too large, return it modulo 10<sup>9</sup> + 7.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:</span></strong>\r\n<span style=\"font-size:18px\">N = 3\r\nA[] = {1, 6, 2}</span>\r\n<strong><span style=\"font-size:18px\">Output:</span></strong>\r\n<span style=\"font-size:18px\">3</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The subsequence that </span>\r\n<span style=\"font-size:18px\">can be chosen is {1},</span>\r\n<span style=\"font-size:18px\">{2} and {1,2}.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:</span></strong>\r\n<span style=\"font-size:18px\">N = 3\r\nA[] = {3, 5, 7}</span>\r\n<strong><span style=\"font-size:18px\">Output:</span></strong>\r\n<span style=\"font-size:18px\">0</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">No subsequences exist.</span>\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\r\n\r\n<p><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function numberOfSubsequences() which takes an integer N and an array A and returns the number of subsequences that exist. As this number can be very large return the result under modulo 10<sup>9</sup>+7.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>5</sup><br />\r\n1 &lt;= A[i] &lt;= 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `A[]` of size `N`, determine the number of non-empty subsequences such that the product of all numbers in the subsequence is a power of 2. Return the result modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= N <= 10<sup>5</sup>",
                    "1 <= A[i] <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nA[] = {1, 6, 2}",
                        "output": "3",
                        "explanation": "The subsequences whose product is a power of 2 are: {1}, {2}, and {1, 2}."
                    },
                    {
                        "input": "N = 3\nA[] = {3, 5, 7}",
                        "output": "0",
                        "explanation": "There are no subsequences whose product is a power of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">From the properties of power of two, we can see that it can be expressed only as a product of numbers which itself is the power of 2. Now Think!</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution{   \r\npublic:\r\n\r\n    long long powm(long long a, long long b, long long mod) {\r\n    \tlong long res=1;\r\n    \twhile(b) {\r\n    \t\tif(b&1)\r\n    \t\t\tres=(res*a)%mod;\r\n    \t\ta=(a*a)%mod;\r\n    \t\tb>>=1;\r\n    \t}\r\n    \treturn res;\r\n    }\r\n\r\n    // Function to check if num is power of  \r\n    // two or not. \r\n    bool isPowerOf2(long long num) \r\n    { \r\n        if (num == 0) \r\n            return false; \r\n      \r\n        if (num == 1) \r\n            return true; \r\n      \r\n        if (num & (num - 1)) \r\n            return false; \r\n      \r\n        return true; \r\n    } \r\n      \r\n    // counting all subsequences whose product \r\n    // is power of 2. \r\n    long long numberOfSubsequences(int N, long long A[]){\r\n        \r\n        int count = 0; \r\n        for (int i = 0; i < N; i++)  \r\n            if (isPowerOf2(A[i])) \r\n                count++; \r\n        return ((long long)powm(2,count,1000000007)-1+1000000007)%(1000000007);\r\n        \r\n        \r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    static long mod=1000000007;\r\n    static Long numberOfSubsequences(int N, ArrayList<Long> A){\r\n        // code here\r\n        int cnt=0;\r\n        for(int i=0;i<N;i++){\r\n            //checking power of 2.\r\n            if((A.get(i)&A.get(i)-1)==0){\r\n                cnt++;\r\n            }\r\n        }\r\n        //answer goes like this:\r\n        //nC1 + nC2 + nC3 + ... + nCn = 2^n - 1;\r\n        long ans=modpwr(2,cnt)-1;\r\n        Long a=ans;\r\n        return a;\r\n    }\r\n    static long modpwr(long m,long n)\r\n\t{\r\n\t\tlong res=1;\r\n\t\tm=m%mod;\r\n\t\tif(m==0)\r\n\t\treturn 0;\r\n\t\twhile(n>0)\r\n\t\t{\r\n\t\t\tif((n&1)!=0)\r\n\t\t\t{\r\n\t\t\t\tres=(res*m)%mod;\r\n\t\t\t}\r\n\t\t\tn=n>>1;\r\n\t\t\tm=(m*m)%mod;\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def numberOfSubsequences (ob,N,A):\n        \n        #Function to check if a number is a power of 2.\n        def isPowerOf2(num):\n            if num == 0:\n                return False\n            if num == 1:\n                return True\n            if (num & (num-1)):\n                return False\n            return True\n        \n        #Function to calculate power of a number modulo a given mod.\n        def powm(a, b, mod):\n            res = 1\n            while b:\n                if (b&1):\n                    res = (res*a)%mod\n                a = (a*a)%mod\n                b >>= 1\n            return res\n        \n        #Initializing count to 0.\n        count = 0\n        \n        #Checking if each element in the array is a power of 2.\n        for i in range(N):\n            if (isPowerOf2(A[i])):\n                count += 1\n        \n        #Calculating the number of subsequences using the count of power of 2 elements.\n        return (powm(2, count, 1000000007) - 1 + 1000000007) % 1000000007",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public long powm(long a, long b, long mod)\n    {\n        long res = 1;\n        while (b > 0)\n        {\n            if (b % 2 == 1)\n                res = (res * a) % mod;\n            a = (a * a) % mod;\n            b /= 2;\n        }\n        return res;\n    }\n\n    public bool isPowerOf2(long num)\n    {\n        if (num == 0)\n            return false;\n\n        if (num == 1)\n            return true;\n\n        if ((num & (num - 1)) != 0)\n            return false;\n\n        return true;\n    }\n\n    public long numberOfSubsequences(int N, long[] A)\n    {\n        int count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            if (isPowerOf2(A[i]))\n                count++;\n        }\n        return ((powm(2, count, 1000000007) - 1 + 1000000007) % (1000000007));\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}