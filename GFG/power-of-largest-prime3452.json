{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705045,
            "title": "Power of Largest Prime",
            "titleSlug": "power-of-largest-prime3452",
            "content": "<p><span style=\"font-size:18px\">You are given a number &#39;<strong>n</strong>&#39;. Your task is to check whether the power of its largest prime factor is greater than one or not.<br />\nPrint &quot;YES&quot; if the power is greater than one otherwise print &quot;NO&quot;.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 36\n<strong>Output:</strong> YES\n<strong>Explaination:</strong> The largest prime which divides \n36 is 3. And it has power = 2 (2*2*3*3)</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 13\n<strong>Output:</strong> NO\n<strong>Explaintion:</strong> The largest prime which divides \n13 is 13 itself.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>largePrime()</strong> which takes n as input parameter and returns 1 if the largest prime which divides n has power greater than 1, else, returns 0.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log(n))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; n &le; 10<sup>18</sup>&nbsp;&nbsp;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer 'n', determine if the exponent of its largest prime factor is greater than one. In other words, check if the largest prime factor appears at least twice in the prime factorization of 'n'.",
                "constraints": [
                    "1 <= n <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "36",
                        "output": "1",
                        "explanation": "The largest prime factor of 36 is 3, and its power is 2 (36 = 2 * 2 * 3 * 3). Since the power is greater than 1, the output is 1."
                    },
                    {
                        "input": "13",
                        "output": "0",
                        "explanation": "The largest prime factor of 13 is 13 itself. Its power is 1. Since the power is not greater than 1, the output is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Factorize the number and see if prime factors have power greater than one or not.</span></p>",
            "<p><span style=\"font-size:18px\">Any number n can be expressed as n&nbsp;= P1<sup>e1&nbsp;</sup>x P2<sup>e2&nbsp;</sup>x ...&nbsp; where P1, P2 are prime factors of the number.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to check if a number is a large prime\n    int largePrime(long long n){\n        int c = 0; // counter to keep track of how many times the current divisor divides n\n        \n        // Iterate through numbers from 2 to the square root of n\n        for(long long i = 2;i <= sqrt(n);i++){\n            c = 0; // reset the counter for every new divisor\n            \n            // Divide n by the current divisor i until it is no longer divisible by i\n            while(n > 1 && n%i == 0){\n                n /= i;\n                c++;\n            }\n        }\n        \n        // If n is still greater than 2 after the loop, it means that n is prime\n        if(n > 2)\n            return 0; // return 0 if n is prime, since it is not a large prime\n        \n        // If c is less than or equal to 1, it means that there is only one or zero divisors of n\n        // Thus, n is not a large prime\n        if(c <= 1)\n            return 0; // return 0 if n is not a large prime\n        \n        return 1; // return 1 if n is a large prime\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Function to check if a number is a large prime\n    public int largePrime(long n)\n    {\n        int c = 0; // counter to keep track of how many times the current divisor divides n\n        \n        // Iterate through numbers from 2 to the square root of n\n        for(long i = 2;i <= Math.Sqrt(n);i++){\n            c = 0; // reset the counter for every new divisor\n            \n            // Divide n by the current divisor i until it is no longer divisible by i\n            while(n > 1 && n%i == 0){\n                n /= i;\n                c++;\n            }\n        }\n        \n        // If n is still greater than 2 after the loop, it means that n is prime\n        if(n > 2)\n            return 0; // return 0 if n is prime, since it is not a large prime\n        \n        // If c is less than or equal to 1, it means that there is only one or zero divisors of n\n        // Thus, n is not a large prime\n        if(c <= 1)\n            return 0; // return 0 if n is not a large prime\n        \n        return 1; // return 1 if n is a large prime\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}