{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701195,
            "title": "Power Of Numbers",
            "titleSlug": "power-of-numbers-1587115620",
            "content": "<p><span >Given a number<strong> n</strong>, find the value of <code>n</code> raised to the power of its own reverse.</span></p>\n<p><span ><strong>Note: </strong>The result will always fit into a 32-bit signed integer.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 2<br /><strong>Output: </strong>4<strong>\nExplanation: </strong>The reverse of <code>2</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> is </span><code>2</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, and </span><span class=\"katex\"><span class=\"katex-mathml\">2<sup>2 </sup>= 4</span></span>.</span></pre>\n<pre><span ><strong>Input: </strong>n = 10\n<strong>Output: </strong>10<strong>\nExplanation: </strong>The reverse of <code>10</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> is </span><code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> (leading zero is discarded), and </span><span class=\"katex\"><span class=\"katex-mathml\">10<sup>1 </sup>= 10</span></span>.</span></pre>\n<pre><span ><strong>Input: </strong>n = 3\n<strong>Output: </strong>27<strong>\nExplanation: </strong>The reverse of <code>3</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> is </span><code>3</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, and </span><span class=\"katex\"><span class=\"katex-mathml\">3<sup>3 </sup>= 27</span></span>.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, calculate `n` raised to the power of its own reverse. The result is guaranteed to fit within a 32-bit signed integer.",
                "constraints": [
                    "1 <= n <= 10"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "4",
                        "explanation": "The reverse of 2 is 2.  2 raised to the power of 2 (2^2) is 4."
                    },
                    {
                        "input": "10",
                        "output": "10",
                        "explanation": "The reverse of 10 is 1 (leading zeros are discarded). 10 raised to the power of 1 (10^1) is 10."
                    },
                    {
                        "input": "3",
                        "output": "27",
                        "explanation": "The reverse of 3 is 3. 3 raised to the power of 3 (3^3) is 27."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Reverse the digits of n, then compute n raised to that reverse using efficient exponentiation methods.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "makemytrip",
            "walmart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Solution class should be declared before the main function\nclass Solution {\n  public:\n    // Function to reverse the digits of the number\n    int reverseNumber(int n) {\n        int reversed = 0;\n        while (n > 0) {\n            reversed = reversed * 10 + n % 10;\n            n = n / 10;\n        }\n        return reversed;\n    }\n\n    // Recursive function to compute base raised to the power of exponent\n    int reverseExponentiationHelper(int base, int exponent) {\n        // Base cases\n        if (base == 0)\n            return 0;\n        if (exponent == 0)\n            return 1;\n\n        // Recursive calculation using exponentiation by squaring\n        int result;\n        if (exponent % 2 == 0) {\n            result = reverseExponentiationHelper(base, exponent / 2);\n            return result * result;\n        } else {\n            result = reverseExponentiationHelper(base, exponent - 1);\n            return base * result;\n        }\n    }\n\n    // Main function to compute n raised to the power of its reverse\n    int reverseExponentiation(int n) {\n        int reversed = reverseNumber(n);\n        return reverseExponentiationHelper(n, reversed);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to reverse the digits of the number\n    public int reverseNumber(int n) {\n        int reversed = 0;\n        while (n > 0) {\n            reversed = reversed * 10 + n % 10;\n            n = n / 10;\n        }\n        return reversed;\n    }\n\n    // Recursive function to compute base raised to the power of exponent\n    public int reverseExponentiationHelper(int base, int exponent) {\n        if (base == 0) return 0;\n        if (exponent == 0) return 1;\n\n        int result;\n        if (exponent % 2 == 0) {\n            result = reverseExponentiationHelper(base, exponent / 2);\n            return result * result;\n        } else {\n            result = reverseExponentiationHelper(base, exponent - 1);\n            return base * result;\n        }\n    }\n\n    // Main function to compute n raised to the power of its reverse\n    public int reverseExponentiation(int n) {\n        int reversed = reverseNumber(n);\n        return reverseExponentiationHelper(n, reversed);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to reverse the digits of the number\n    def reverse_number(self, n):\n        reversed_num = 0\n        while n > 0:\n            reversed_num = reversed_num * 10 + n % 10\n            n //= 10\n        return reversed_num\n\n    # Recursive function to compute base raised to the power of exponent\n    def reverse_exponentiation_helper(self, base, exponent):\n        if base == 0:\n            return 0\n        if exponent == 0:\n            return 1\n\n        if exponent % 2 == 0:\n            result = self.reverse_exponentiation_helper(base, exponent // 2)\n            return result * result\n        else:\n            result = self.reverse_exponentiation_helper(base, exponent - 1)\n            return base * result\n\n    # Main function to compute n raised to the power of its reverse\n    def reverse_exponentiation(self, n):\n        reversed_num = self.reverse_number(n)\n        return self.reverse_exponentiation_helper(n, reversed_num)\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Function to reverse the digits of the number\n    public int ReverseNumber(int n) {\n        int reversed = 0;\n        while (n > 0) {\n            reversed = reversed * 10 + n % 10;\n            n /= 10;\n        }\n        return reversed;\n    }\n\n    // Recursive function to compute base raised to the power of exponent\n    public int ReverseExponentiationHelper(int baseNum, int exponent) {\n        if (baseNum == 0) return 0;\n        if (exponent == 0) return 1;\n\n        int result;\n        if (exponent % 2 == 0) {\n            result = ReverseExponentiationHelper(baseNum, exponent / 2);\n            return result * result;\n        } else {\n            result = ReverseExponentiationHelper(baseNum, exponent - 1);\n            return baseNum * result;\n        }\n    }\n\n    // Main function to compute n raised to the power of its reverse\n    public int ReverseExponentiation(int n) {\n        int reversed = ReverseNumber(n);\n        return ReverseExponentiationHelper(n, reversed);\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to reverse the digits of the number\n    reverseNumber(n) {\n        let reversed = 0;\n        while (n > 0) {\n            reversed = reversed * 10 + n % 10;\n            n = Math.floor(n / 10);\n        }\n        return reversed;\n    }\n\n    // Recursive function to compute base raised to the power of exponent\n    reverseExponentiationHelper(base, exponent) {\n        if (base === 0) return 0;\n        if (exponent === 0) return 1;\n\n        let result;\n        if (exponent % 2 === 0) {\n            result = this.reverseExponentiationHelper(base, Math.floor(exponent / 2));\n            return result * result;\n        } else {\n            result = this.reverseExponentiationHelper(base, exponent - 1);\n            return base * result;\n        }\n    }\n\n    // Main function to compute n raised to the power of its reverse\n    ReverseExponentiation(n) {\n        let reversed = this.reverseNumber(n);\n        return this.reverseExponentiationHelper(n, reversed);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}