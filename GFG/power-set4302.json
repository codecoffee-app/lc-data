{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704428,
            "title": "Power Set",
            "titleSlug": "power-set4302",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s </strong>of length<strong> n</strong>, find all the <strong>possible non-empty <a href=\"https://www.geeksforgeeks.org/data-structures/string-subsequence-substring/\">subsequences</a> </strong>of the string <strong>s</strong> in <strong>lexicographically-sorted </strong>order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input : <br /></strong>s = \"abc\"\n<strong>Output: <br /></strong>a ab abc ac b bc c\n<strong>Explanation : <br /></strong>There are a total 7 number of subsequences possible for the given string, and they are mentioned above in lexicographically sorted order.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>s = \"aa\"\n<strong>Output: <br /></strong>a a aa\n<strong>Explanation : <br /></strong></span><span style=\"font-size: 18px;\">There are a total 3 number of subsequences possible for the given string, and they are mentioned above in lexicographically sorted order.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything.&nbsp;</span><span style=\"font-size: 18px;\">Your t</span><span style=\"font-size: 18px;\">ask is to complete the function&nbsp;<strong>AllPossibleStrings()&nbsp;</strong>which takes a string <strong>s</strong> as the input parameter and <strong>returns a list </strong>of all possible <strong>subsequences (non-empty)</strong> that can be formed from <strong>s</strong> in <strong>lexicographically sorted </strong>order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O( n*2<sup>n&nbsp; </sup>)<br /><strong>Expected Space Complexity:&nbsp;</strong>O( n * 2<sup>n </sup>)</span></p>\n<p><strong><span style=\"font-size: 18px;\">Constraints:&nbsp;</span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 16<br /><strong>s</strong> constitutes of lower case english alphabets</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` of length `n`, find all possible non-empty subsequences of the string `s` in lexicographically sorted order. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
                "constraints": [
                    "1 <= n <= 16",
                    "`s` consists of lowercase English alphabets"
                ],
                "testcases": [
                    {
                        "input": "abc",
                        "output": "a ab abc ac b bc c",
                        "explanation": "The subsequences of \"abc\" are \"a\", \"ab\", \"abc\", \"ac\", \"b\", \"bc\", and \"c\".  These are all the possible non-empty subsequences, lexicographically sorted."
                    },
                    {
                        "input": "aa",
                        "output": "a a aa",
                        "explanation": "The subsequences of \"aa\" are \"a\", \"a\", and \"aa\". These are all the possible non-empty subsequences, lexicographically sorted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You have two choices for each character, either take it in the set or to not take it (0-1 property).&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "snapdeal"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n\t//Function to generate all possible strings from a given string.\n        vector<string> AllPossibleStrings(string s){\n\t    //creating a vector to store the result.\n            vector<string>res;\n            //calculating the size of the string.\n\t    int n = s.size();\n\t    //iterating over all possible subsets of characters in the string.\n\t    //using a bitmasking approach.\n\t    for(int i = 0; i < (1 << n); i++){\n\t        //creating a temporary string to store each subset.\n\t\tstring temp =\"\";\n\t\t//iterating over each character in the string.\n\t\tfor(int j = 0; j < n; j++){\n\t\t    //checking if the jth character should be included in the subset or not\n\t\t    //by checking if the jth bit is set in the bitmask i.\n\t\t    if(i & (1 << j))\n\t\t        //if yes, adding the character to the temporary string.\n\t\t\ttemp += s[j];\n\t\t}\n\t\t//checking if the temporary string is not empty\n\t\t//to avoid adding empty strings to the result.\n\t\tif(temp.size())\n\t\t//adding the temporary string to the result vector.\n\t\tres.push_back(temp);\n\t    }\n\t    //sorting the result vector in lexicographical order.\n\t    sort(res.begin(), res.end());\n\t    //returning the result vector.\n\t    return res;\n        }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to generate all possible strings from a given string.\n    public List<String> AllPossibleStrings(String s) {\n        // Creating a list to store the result.\n        List<String> ans = new ArrayList<>();\n        // Calculating the size of the string.\n        int n = s.length();\n        // Using StringBuilder for efficient string concatenation.\n        StringBuilder sb = new StringBuilder();\n\n        // Iterating over all possible subsets of characters in the string.\n        // Using a bitmasking approach.\n        for (int mask = 1; mask < (1 << n); mask++) {\n            // Resetting the StringBuilder for each subset.\n            sb.setLength(0);\n\n            // Iterating over each character in the string.\n            for (int i = 0; i < n; i++) {\n                // Checking if the ith character should be included in the subset or not\n                // by checking if the ith bit is set in the bitmask.\n                if (((mask >> i) & 1) == 1) {\n                    // If yes, appending the character to the StringBuilder.\n                    sb.append(s.charAt(i));\n                }\n            }\n\n            // Adding the subset (as a string) to the result list.\n            ans.add(sb.toString());\n        }\n\n        // Sorting the result list in lexicographical order.\n        Collections.sort(ans);\n\n        // Returning the result list.\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to generate all possible strings from a given string.\n    def AllPossibleStrings(self, s):\n        # Creating a list to store the result.\n        res = []\n        # Calculating the size of the string.\n        n = len(s)\n        # Iterating over all possible subsets of characters in the string.\n        # Using a bitmasking approach.\n        for i in range(1 << n):\n            # Creating a temporary string to store each subset.\n            temp = \"\"\n            # Iterating over each character in the string.\n            for j in range(n):\n                # Checking if the jth character should be included in the subset or not\n                # by checking if the jth bit is set in the bitmask i.\n                if i & (1 << j):\n                    # If yes, adding the character to the temporary string.\n                    temp += s[j]\n            # Checking if the temporary string is not empty\n            # to avoid adding empty strings to the result.\n            if temp:\n                # Adding the temporary string to the result list.\n                res.append(temp)\n\n        # Sorting the result list in lexicographical order.\n        res.sort()\n        # Returning the result list.\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    AllPossibleStrings(s){\n        let res = [];\n        let n = s.length;\n        for(let i = 0; i < (1 << n); i++){\n            let temp = \"\";\n            for(let j = 0; j < n; j++){\n                if(i & (1 << j))\n                    temp += s.charAt(j);\n            }\n            if(temp.length)\n            res.push(temp);\n        }\n        res.sort();\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}