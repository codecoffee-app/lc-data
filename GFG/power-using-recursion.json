{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701391,
            "title": "Power Using Recursion",
            "titleSlug": "power-using-recursion",
            "content": "<p><span style=\"font-size:18px\">You are given <strong>two numbers n and p</strong>. You need to find <strong>n<sup>p</sup></strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>n = 9 p = 9 \n<strong>Output: </strong>387420489\n<strong>Explanation: </strong>387420489 is the value \nobtained when 9 is raised to the \npower of 9.</span>\n\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>n = 2 p = 9\n<strong>Output: </strong>512<strong>\nExplanation: </strong>512 is the value \nobtained when 2 is raised to \nthe power of 9.&nbsp;&nbsp;</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything</span>.<span style=\"font-size:18px\">&nbsp;You only need to complete the function <strong>RecursivePower()</strong> that takes<strong> n</strong> and<strong> p</strong> as <strong>parameters </strong>and <strong>returns n<sup>p</sup></strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(p).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(p).</span></p>\n\n<p><strong><span style=\"font-size:18px\">Constraints: </span></strong><br />\n<span style=\"font-size:18px\">1 &lt;= n&nbsp;&lt;= 9<br />\n0 &lt;= &nbsp;p &lt;= 9</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, `n` and `p`, calculate `n` raised to the power of `p` (n<sup>p</sup>).",
                "constraints": [
                    "1 <= n <= 9",
                    "0 <= p <= 9"
                ],
                "testcases": [
                    {
                        "input": "n = 9, p = 9",
                        "output": "387420489",
                        "explanation": "9 raised to the power of 9 equals 387420489."
                    },
                    {
                        "input": "n = 2, p = 9",
                        "output": "512",
                        "explanation": "2 raised to the power of 9 equals 512."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n  public:\n    int RecursivePower(int n,int p)\n    {\n        // if p is 0 then returning 1\n        if(p==0)\n            return 1;\n        // returning multiplied n p times\n        return n*RecursivePower(n,p-1);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    static int RecursivePower(int n,int p)\n    {\n        // if p is 0 then returning 1\n        if(p==0)\n            return 1;\n        // returning multiplied n p times\n        return n*RecursivePower(n,p-1);\n    }\n \n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def RecursivePower(self,n,p):\n        '''\n        return value of n^p recursively;\n        '''\n        # if p is 0 then returning 1\n        if p==0: \n            return 1\n        # returning multiplied n p times\n        return (n * self.RecursivePower(n,p-1))\n    \n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} n\n * @param {number} p\n * @returns {number}\n*/\nclass Solution {\n  \n    RecursivePower(n, p)\n    {\n        // if p is 0 then returning 1\n        if(p===0)\n            return 1;\n        // returning multiplied n p times\n        return n*this.RecursivePower(n,p-1);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}