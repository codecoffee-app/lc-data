{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714272,
            "title": "Powerfull Integer",
            "titleSlug": "powerfull-integer--170647",
            "content": "<p><span style=\"font-size:18px\">You are given a <strong>2D integer</strong> array of&nbsp;intervals whose length is <strong>n</strong> where <strong>intervals[i]=[start, end]</strong>&nbsp;I.e. all integers from start to end<strong> inclusive</strong>&nbsp;of start and end<strong> </strong>are also present&nbsp;and also we are given an integer <strong>k</strong>. We have to return the <strong>Powerfull Integer</strong>. A powerful Integer is an integer that occurs at <strong>least k</strong> times. If multiple integers have at least <strong>k occurrences,</strong>&nbsp;we have to return the <strong>maximum integer</strong> out of all those elements.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note</strong>: If no integer occurs at least k times return <strong>-1</strong>.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong>\r\nn=3\r\nintervals={{1,3},{4,6},{3,4}}\r\nk=2\r\n<strong>Output: </strong>4\r\n<strong>Explanation:\r\n</strong>As we can see that 3 and 4 are the 2 integers \r\nthat have 2 occurences(2&gt;=k) so we have 4 \r\nin this case as the Powerfull integer as it \r\nis the maximum element which satisfies the condition.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong>\r\nn=4\r\nintervals={{1,4},{12,45},{3,8},{10,12}}\r\nk=3\r\n<strong>Output: </strong>-1\r\n<strong>Explanation:</strong>\r\nAs we can see that no integer occurs \r\n3 times so in that case we have to \r\nreturn -1 (see Note).</span>\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 3:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong>\r\nn=5\r\nintervals={{16,21},{5,8},{12,17}\r\n&nbsp;\\t    {17,29},{9,24}}\r\nk=3\r\n<strong>Output: \r\n21</strong>\r\n<strong>Explanation:\r\n</strong>As we can see in the given <strong>range</strong> 17 \r\noccured 4 times while 16,18,19,20 &amp; 21 occured \r\n3 times. So here we need 3 I.e K occurences \r\nso we can choose any but we will pick <strong>21</strong>, \r\nbecause it is maximum.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>powerfullInteger</strong>() which takes an integer<strong> n, </strong>a <strong>2d array intervals&nbsp;</strong>and an integer&nbsp;<strong>k</strong> respectively and you have to&nbsp;return powerful Integer&nbsp;if it exists else return <strong>-1</strong></span>.</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(NlogN)<br />\r\n<strong>Expected Space Complexity:</strong> O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=<strong>n</strong>&lt;=10<sup>5</sup><br />\r\n1&lt;=<strong>intervals</strong>[i][0]&lt;=<strong>intervals</strong>[i][1]&lt;=10<sup>9</sup><br />\r\n1&lt;=<strong>k</strong>&lt;=10<sup>5</sup><br />\r\nThe sum of n over all test cases won&#39;t exceed <strong>10<sup>6</sup></strong></span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D integer array `intervals` of length `n`, where `intervals[i] = [start, end]` (inclusive range). Also given an integer `k`. Find the 'Powerful Integer'. A 'Powerful Integer' is an integer that occurs at least `k` times within the given intervals. If multiple integers satisfy this condition, return the maximum among them.\n\nNote: If no integer occurs at least `k` times, return -1.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= intervals[i][0] <= intervals[i][1] <= 10^9",
                    "1 <= k <= 10^5",
                    "The sum of n over all test cases won't exceed 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 3\nintervals = {{1, 3}, {4, 6}, {3, 4}}\nk = 2",
                        "output": "4",
                        "explanation": "The integers 3 and 4 both appear at least 2 times.  Since 4 is the larger of the two, it is the powerful integer."
                    },
                    {
                        "input": "n = 4\nintervals = {{1, 4}, {12, 45}, {3, 8}, {10, 12}}\nk = 3",
                        "output": "-1",
                        "explanation": "No integer occurs at least 3 times across all intervals. Therefore, the output is -1."
                    },
                    {
                        "input": "n = 5\nintervals = {{16, 21}, {5, 8}, {12, 17}, {17, 29}, {9, 24}}\nk = 3",
                        "output": "21",
                        "explanation": "The integer 17 occurs 4 times, and the integers 16, 18, 19, 20, and 21 occur 3 times each. Since we want the maximum integer that occurs at least k=3 times, we return 21."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We can try to maintain count of occurence of first and last elements of an interval</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\npublic:\n    // Function to find the kth power of an integer within given intervals\n    int powerfullInteger(int n, vector<vector<int>> &intervals, int k) {\n        // Using a map to keep track of the count of intervals\n        map<int, int> mpp;\n        \n        // Iterating over all the intervals and updating the count in the map\n        for(auto x : intervals) {\n            mpp[x[0]] += 1;\n            mpp[x[1] + 1] -= 1;\n        }\n        \n        int ans = -1;\n        int temp = 0;\n        \n        // Iterating over the map to find the kth power of an integer\n        for(auto x : mpp) {\n            // If the count in the map is positive\n            if(mpp[x.first] >= 0) {\n                temp += mpp[x.first];\n                // Checking if the count is greater than or equal to k\n                if(temp >= k) ans = x.first;\n            }\n            // If the count in the map is negative\n            else {\n                // Checking if the previous count was greater than or equal to k\n                if(temp >= k) ans = x.first - 1;\n                temp += mpp[x.first];\n            }\n        }\n        \n        // Returning the kth power of an integer\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\nclass Solution{\r\n    public static int powerfullInteger(int n,int interval[][],int k)\r\n    {\r\n        TreeMap<Integer,Integer> tm=new TreeMap<>();\r\n        for(int i=0;i<n;i++){\r\n            tm.put(interval[i][0],tm.getOrDefault(interval[i][0],0)+1);\r\n            tm.put(interval[i][1]+1,tm.getOrDefault(interval[i][1]+1,0)-1);\r\n        }\r\n        int temp=0;\r\n        int ans=0;\r\n        for(Map.Entry<Integer,Integer> e:tm.entrySet()){\r\n            int key=e.getKey();\r\n            int value=e.getValue();\r\n            if(value>=0){\r\n                temp+=value;\r\n                if(temp>=k){\r\n                    ans=key;\r\n                }\r\n            }else if(value<0){\r\n                if(temp>=k){\r\n                    ans=key-1;\r\n                }\r\n                temp+=value;\r\n            }\r\n        }\r\n        return (ans==0?-1:ans);\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to find the kth powerful integer within given intervals.\r\n    def powerfullInteger(self,n,intervals,k):\r\n        d={} #dictionary to store the intervals and their occurrences\r\n        \r\n        #iterating over the intervals\r\n        for start,end in intervals:\r\n            \r\n            #if the start value is not in the dictionary, initialize it to 0\r\n            if start not in d:\r\n                d[start]=0\r\n                \r\n            #if the end+1 value is not in the dictionary, initialize it to 0\r\n            if end+1 not in d:\r\n                d[end+1]=0\r\n                \r\n            #increment the count of the start value\r\n            d[start]+=1\r\n            \r\n            #decrement the count of the end+1 value\r\n            d[end+1]-=1\r\n        \r\n        v=-1 #variable to store the kth powerful integer\r\n        temp=0 #variable to store the cumulative count of intervals\r\n        \r\n        #iterating over the sorted keys of the dictionary\r\n        for el in sorted(d.keys()):\r\n            if d[el]>=0:\r\n                    \r\n                temp+=d[el] #updating the cumulative count\r\n            \r\n                #checking if the cumulative count >= k\r\n                if temp>=k:\r\n                    v=el\r\n            \r\n            else :\r\n                \r\n                #checking if the cumulative count >= k, and updating v accordingly\r\n                if temp>=k:\r\n                    v=el-1\r\n                \r\n                temp+=d[el] #updating the cumulative count\r\n        \r\n        return v #returning the kth powerful integer within given intervals.",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number[][]} intervals\n * @param {number} k\n * @returns {number}\n*/\n\nclass Solution {\n    /**\n     * Function to find the number of powerfull integers in given range.\n     * @param {number} n\n     * @param {number[][]} intervals\n     * @param {number} k\n     * @returns {number}\n    */\n    powerfullInteger(n, intervals, k) {\n        let d = {}; //dictionary to store the intervals and their occurrences\n        \n        //iterating over the intervals\n        for (let i = 0; i < intervals.length; i++) {\n            let start = intervals[i][0];\n            let end = intervals[i][1];\n            \n            //if the start value is not in the dictionary, initialize it to 0\n            if (!d[start]) {\n                d[start] = 0;\n            }\n            \n            //if the end+1 value is not in the dictionary, initialize it to 0\n            if (!d[end+1]) {\n                d[end+1] = 0;\n            }\n            \n            //increment the count of the start value\n            d[start]++;\n            \n            //decrement the count of the end+1 value\n            d[end+1]--;\n        }\n        \n        let v = -1; //variable to store the kth powerful integer\n        let temp = 0; //variable to store the cumulative count of intervals\n        \n        //iterating over the sorted keys of the dictionary\n        let sortedKeys = Object.keys(d).sort((a, b) => a - b);\n        for (let i = 0; i < sortedKeys.length; i++) {\n            let el = sortedKeys[i];\n            if (d[el] >= 0) {\n                temp += d[el]; //updating the cumulative count\n                \n                //checking if the cumulative count >= k\n                if (temp >= k) {\n                    v = el;\n                }\n            } else {\n                //checking if the cumulative count >= k, and updating v accordingly\n                if (temp >= k) {\n                    v = el - 1;\n                }\n                \n                temp += d[el]; //updating the cumulative count\n            }\n        }\n        \n        return v; //returning the kth powerful integer within given intervals.\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}