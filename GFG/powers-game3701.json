{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703973,
            "title": "Powers game",
            "titleSlug": "powers-game3701",
            "content": "<p><span style=\"font-size: 18px;\">Given two integers <strong>x</strong> and <strong>n</strong>,&nbsp;you have to find an array such that it contains the frequency of index numbers occurring in (X<sup>1</sup>, X<sup>2</sup>,.... X<sup>N-1</sup>, X<sup>N</sup>).&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>x = 15, n = 3\n<strong>Output:</strong> [0, 1, 2, 2, 0, 3, 0, 1, 0, 0]\n<strong>Explanation:</strong> 15^1, 15^2, 15^3 ==&gt; 15, 225, 3375\nAn array which displays the frequency of \nits index numbers occuring in 15, 225 and 3375\nFrequency of '0' = 0\nFrequency of '1' = 1 (only once in 15)\nFrequency of '2' = 2 (twice in 225)\nFrequency of '3' = 2 (twice in 3375)\nFrequency of '4' = 0\nFrequency of '5' = 3 (thrice in '15', '225' and '3375')\nFrequency of '6' = 0\nFrequency of '7' = 1 (only once in '3375')\nFrequency of '8' = 0\nFrequency of '9' = 0\nResultant array:\n0 1 2 2 0 3 0 1 0 0</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>x = 2, n = 4\n<strong>Output:</strong> [0, 1, 1, 0, 1, 0, 1, 0, 1, 0]\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= x &lt;= 15<br />1 &lt;= n &lt;= 15</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers x and n, find an array representing the frequency of digits (0-9) occurring in the decimal representations of x^1, x^2, ..., x^n.",
                "constraints": [
                    "1 <= x <= 15",
                    "1 <= n <= 15"
                ],
                "testcases": [
                    {
                        "input": "x = 15, n = 3",
                        "output": "[0, 1, 2, 2, 0, 3, 0, 1, 0, 0]",
                        "explanation": "The powers of 15 are: 15^1 = 15, 15^2 = 225, 15^3 = 3375. The array represents the frequency of each digit from 0 to 9 across these numbers.  For example, the digit '5' appears three times (once in 15, once in 225, and once in 3375)."
                    },
                    {
                        "input": "x = 2, n = 4",
                        "output": "[0, 1, 1, 0, 1, 0, 1, 0, 1, 0]",
                        "explanation": "The powers of 2 are: 2^1 = 2, 2^2 = 4, 2^3 = 8, 2^4 = 16. The array represents the frequency of each digit from 0 to 9 across these numbers."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Calculate the numbers X<sup>1</sup>, X<sup>2</sup>&nbsp;... X<sup>N</sup>. Then find the occurrence of each digit in the numbers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "logical-thinking",
                "slug": "logical-thinking"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> getFreq(int x, int n) {\n        vector<int> digitFrequency(10, 0);\n\n        // Iterate from 1 to n.\n        for (int i = 1; i <= n; i++) {\n            long long currentPower = 1;\n\n            // Manually calculate x^i\n            for (int j = 0; j < i; j++) {\n                currentPower *= x;\n            }\n\n            // Count the frequency of each digit in the current power.\n            while (currentPower > 0) {\n                digitFrequency[currentPower % 10]++;\n                currentPower /= 10;\n            }\n        }\n\n        // Return the frequency array.\n        return digitFrequency;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int[] getFreq(int x, int n) {\n        int[] digitFrequency = new int[10]; // To store the frequency of digits\n\n        // Iterate from 1 to n\n        for (int i = 1; i <= n; i++) {\n            long currentPower = 1;\n\n            // Manually calculate x^i\n            for (int j = 0; j < i; j++) {\n                currentPower *= x;\n            }\n\n            // Count the frequency of each digit in the current power\n            while (currentPower > 0) {\n                int digit = (int)(currentPower % 10);\n                digitFrequency[digit]++;\n                currentPower /= 10;\n            }\n        }\n\n        return digitFrequency;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    #Function to calculate frequency of digits in powers of x from 1 to n.\n    def getFreq(self, x, n):\n        freq = [0] * 10  # To store the frequency of digits\n\n        # Calculate the power of x from 1 to n and count the frequency of digits\n        for i in range(1, n + 1):\n            power = x**i\n            while power > 0:\n                digit = power % 10\n                freq[digit] += 1\n                power //= 10\n\n        return freq",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    getFreq(x, n) {\n        // Initialize digit frequency array with 10 zeros.\n        const digitFrequency = new Array(10).fill(0);\n\n        // Convert x to BigInt\n        const bigX = BigInt(x);\n\n        // Iterate from 1 to n.\n        for (let i = 1; i <= n; i++) {\n            let currentPower = BigInt(1);\n\n            // Manually calculate x^i using BigInt\n            for (let j = 0; j < i; j++) {\n                currentPower *= bigX;\n            }\n\n            // Count the frequency of each digit in the current power.\n            while (currentPower > 0) {\n                digitFrequency[Number(currentPower % BigInt(10))]++;\n                currentPower = currentPower / BigInt(10);\n            }\n        }\n\n        // Return the frequency array.\n        return digitFrequency;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}