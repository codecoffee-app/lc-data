{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700614,
            "title": "Predecessor and Successor",
            "titleSlug": "predecessor-and-successor",
            "content": "<p><span style=\"font-size: 18px;\">You are given root node of the <strong>BST</strong> and an integer <strong>key</strong>. You need to find the in-order <strong>successor</strong> and <strong>predecessor</strong> of the given key. If either predecessor or successor is not found, then set it to <strong>NULL</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>:- In an inorder traversal the number just <strong>smaller</strong> than the target is the predecessor and the number just <strong>greater</strong> than the target is the successor.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root[] = [8, 1, 9, N, 4, N, 10, 3, N, N, N]<strong><br /></strong>\\t8\n&nbsp;   /   \\\n&nbsp;  1     9<br />   \\\\t\\<br />    4\\t10<br />   /<br />  3\nkey = 8\n<strong>Output: </strong>4 9<strong>\nExplanation: </strong>In the given BST the inorder predecessor of 8 is 4 and inorder successor of 8 is 9.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root[] = [10, 2, 11, 1, 5, N, N, N, N, 3, 6, N, 4, N, N]<strong><br /></strong>\\t10\n&nbsp;   /   \\\n&nbsp;  2     11<br />  / \\<br /> 1   5<br />    / \\<br />   3   6<br />    \\<br />     4\nkey = 11\n<strong>Output: </strong>10 -1<strong>\nExplanation: </strong>In given BST, the inorder predecessor of 11 is 10 whereas it does not have any inorder successor.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root[] = [2, 1, 3]<strong><br /></strong>\\t2\n&nbsp;   /   \\\n&nbsp;  1     3\nkey = 3\n<strong>Output: </strong>2 -1</span></pre>\n<p><strong style=\"font-size: 18px;\">Constraints:&nbsp;</strong><span style=\"font-size: 18px;\"><br />1 &lt;= Number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= key &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root node of a Binary Search Tree (BST) and an integer key, find the inorder predecessor and inorder successor of the given key. If either the predecessor or successor is not found, set its value to -1.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5",
                    "1 <= key <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "root[] = [8, 1, 9, N, 4, N, 10, 3, N, N, N], key = 8",
                        "output": "4 9",
                        "explanation": "In the given BST, the inorder predecessor of 8 is 4 (the largest node in the left subtree of 8) and the inorder successor of 8 is 9 (the smallest node in the right subtree of 8)."
                    },
                    {
                        "input": "root[] = [10, 2, 11, 1, 5, N, N, N, N, 3, 6, N, 4, N, N], key = 11",
                        "output": "10 -1",
                        "explanation": "In the given BST, the inorder predecessor of 11 is 10.  There is no inorder successor for 11, so the successor is -1."
                    },
                    {
                        "input": "root[] = [2, 1, 3], key = 3",
                        "output": "2 -1",
                        "explanation": "In the given BST, the inorder predecessor of 3 is 2. There is no inorder successor for 3, so the successor is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >For finding the inorder predecessor and successor in a BST, perform an inorder traversal and keep track of the current node being visited.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "ola-cabs"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// This function finds predecessor and successor of key in BST.\r\n// It sets pre and suc as predecessor and successor respectively\r\nclass Solution\r\n{\r\n    public:\r\n    void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)\r\n    {\r\n    \t// Base case\r\n    \tif (root == NULL) return ;\r\n    \r\n    \t// If key is present at root\r\n    \tif (root->key == key)\r\n    \t{\r\n    \t\t// the maximum value in left subtree is predecessor\r\n    \t\tif (root->left != NULL)\r\n    \t\t{\r\n    \t\t\tNode* tmp = root->left;\r\n    \t\t\twhile (tmp->right)\r\n    \t\t\t\ttmp = tmp->right;\r\n    \t\t\tpre = tmp ;\r\n    \t\t}\r\n    \r\n    \t\t// the minimum value in right subtree is successor\r\n    \t\tif (root->right != NULL)\r\n    \t\t{\r\n    \t\t\tNode* tmp = root->right ;\r\n    \t\t\twhile (tmp->left)\r\n    \t\t\t\ttmp = tmp->left ;\r\n    \t\t\tsuc = tmp ;\r\n    \t\t}\r\n    \t\treturn ;\r\n    \t}\r\n    \r\n    \t// If key is smaller than root's key, go to left subtree\r\n    \tif (root->key > key)\r\n    \t{\r\n    \t\tsuc = root ;\r\n    \t\tfindPreSuc(root->left, pre, suc, key) ;\r\n    \t}\r\n    \telse // go to right subtree\r\n    \t{\r\n    \t\tpre = root ;\r\n    \t\tfindPreSuc(root->right, pre, suc, key) ;\r\n    \t}\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static void findPreSuc(Node root, Node[] pre, Node[] suc, int key) {\n        if (root == null) return;\n\n        // If key is present at root\n        if (root.data == key) {\n            // the maximum value in left subtree is predecessor\n            if (root.left != null) {\n                Node tmp = root.left;\n                while (tmp.right != null) tmp = tmp.right;\n                pre[0] = tmp;\n            }\n\n            // the minimum value in right subtree is successor\n            if (root.right != null) {\n                Node tmp = root.right;\n                while (tmp.left != null) tmp = tmp.left;\n                suc[0] = tmp;\n            }\n            return;\n        }\n\n        // If key is smaller than root's key, go to left subtree\n        if (root.data > key) {\n            suc[0] = root;\n            findPreSuc(root.left, pre, suc, key);\n        } else // go to right subtree\n        {\n            pre[0] = root;\n            findPreSuc(root.right, pre, suc, key);\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# This function finds predecessor and successor of key in BST.\n# It sets pre and suc as predecessor and successor respectively\n\n\n# Function to copy value of Node a to Node b\ndef copy_node(a, b):\n    a.key = b.key\n    a.left = b.left\n    a.right = b.right\n\n\nclass Solution:\n\n    def findPreSuc(self, root, pre, suc, key):\n\n        while root:\n            if root.key == key:\n                if root.left:\n                    tmp = root.left\n                    while tmp.right:\n                        tmp = tmp.right\n                    copy_node(pre, tmp)\n\n                if root.right:\n                    tmp = root.right\n                    while tmp.left:\n                        tmp = tmp.left\n                    copy_node(suc, tmp)\n\n                return pre, suc\n\n            if root.key > key:\n                copy_node(suc, root)\n                root = root.left\n            else:\n                copy_node(pre, root)\n                root = root.right\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    // Function to find predecessor and successor in BST\n    findPreSuc(root, pre, suc, key) {\n        if (root === null) return {pre, suc};\n\n        if (root.key === key) {\n            // Find the predecessor (maximum in left subtree)\n            if (root.left !== null) {\n                let tmp = root.left;\n                while (tmp.right) {\n                    tmp = tmp.right;\n                }\n                pre = tmp;\n            }\n\n            // Find the successor (minimum in right subtree)\n            if (root.right !== null) {\n                let tmp = root.right;\n                while (tmp.left) {\n                    tmp = tmp.left;\n                }\n                suc = tmp;\n            }\n            return {pre, suc};\n        }\n\n        if (root.key > key) {\n            suc = root;\n            return this.findPreSuc(root.left, pre, suc, key);\n        } else {\n            pre = root;\n            return this.findPreSuc(root.right, pre, suc, key);\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}