{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700818,
            "title": "Predict the Column",
            "titleSlug": "predict-the-column",
            "content": "<p><span style=\"font-size: 18px;\">Given a matrix(2D array) <strong>M </strong>of size <strong>N</strong>*<strong>N</strong> consisting of <strong>0s</strong> and <strong>1s</strong> only. The task is to find the <strong>column </strong>with maximum number of <strong>0s</strong>.&nbsp;</span><span style=\"font-size: 18px;\">If more than one column exists, print the one which comes first. If the maximum number of <strong>0s is 0 then return -1.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 3\nM[][] = {{0, 0, 0},\n\\t    {1, 0, 1},\n\\t    {0, 1, 1}}\n<strong>Output:<br /></strong>0\n<strong>Explanation:\n</strong>0th column (<strong>0-based indexing</strong>) is having 2 zeros which is maximum among all columns and comes first.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Your task is to complete the function <strong>columnWithMaxZero()</strong> which should return the <strong>column numbe</strong>r with the maximum number of zeros.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N * N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>3</sup><br />0 &lt;= A[i][j] &lt;= 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square matrix (2D array) **M** of size **N x N** containing only 0s and 1s, find the index of the column with the maximum number of 0s.  If multiple columns have the same maximum number of 0s, return the index of the column that appears first (leftmost). If the maximum number of 0s found in any column is 0, return -1.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "0 <= A[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nM = {{0, 0, 0},\n    {1, 0, 1},\n    {0, 1, 1}}",
                        "output": "0",
                        "explanation": "The 0th column contains two 0s, which is the maximum number of 0s among all columns. Therefore, the output is 0."
                    },
                    {
                        "input": "N = 2\nM = {{1, 1},\n    {1, 1}}",
                        "output": "-1",
                        "explanation": "All columns contain only 1s.  Since the maximum number of 0s is 0, the output is -1."
                    },
                    {
                        "input": "N = 4\nM = {{1, 0, 1, 0},\n    {1, 0, 1, 1},\n    {1, 1, 0, 0},\n    {1, 1, 1, 1}}",
                        "output": "1",
                        "explanation": "Columns 1 and 3 both have two 0s, which is the maximum. Column 1 appears first, so the output is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">1. Traverse each column to count number of 0s and update the count to keep track of column</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    /*Function to count zeros in each column\r\n    * N : Number of rows and columns in array\r\n    */\r\n    int columnWithMaxZeros(vector<vector<int>>arr, int N){\r\n        \r\n        int max_count = 0, ans = -1;\r\n        \r\n        for(int i = 0;i<N;i++){\r\n            int count = 0;\r\n            for(int j = 0;j<N;j++){\r\n                //counting zeroes\r\n                if(arr[j][i] == 0){\r\n                    count++;\r\n                }\r\n            }\r\n            \r\n            //updating max_count and ans as required\r\n            if(count > max_count){\r\n                max_count = count;\r\n                ans = i;\r\n            }\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n    int columnWithMaxZeros(int arr[][], int N)\n    {\n        int idx=-1,val=0;\n        for(int j=0;j<N;j++)\n        {\n            int sum=0;\n            for(int i=0;i<N;i++)\n            {\n                sum+=1-arr[i][j];\n            }\n            if(val<sum)\n            {\n                val=sum;\n                idx=j;\n            }\n        }\n        return idx;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\n\nclass Solution:\n    def columnWithMaxZeros(self, arr, N):\n        max_count = 0\n        ans = -1\n        \n        for i in range(N):\n            count = 0\n            for j in range(N):\n                # Counting zeroes\n                if arr[j][i] == 0:\n                    count += 1\n            \n            # Updating max_count and ans as required\n            if count > max_count:\n                max_count = count\n                ans = i\n        \n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    \n    columnWithMaxZeros(M,n){\n        let max_count = 0, ans = -1; // Initialize variables to store the maximum count of zeros and the answer (column number) with maximum zeros\n        \n        for(let i = 0; i<n; i++){ // Iterate through each column\n            let count = 0; // Initialize a variable to count the number of zeros in a column\n            for(let j = 0; j<n; j++){ // Iterate through each row in the column\n                // Counting zeros\n                if(M[j][i] === 0){ // If the element is zero\n                    count++; // Increment the count of zeros in the column\n                }\n            }\n            \n            // Comparing and updating max_count and ans if necessary\n            if(count > max_count){ // If the count of zeros in the current column is greater than the maximum count so far\n                max_count = count; // Update the maximum count to the count of zeros in the current column\n                ans = i; // Update the answer to the current column number\n            }\n        }\n        \n        return ans; // Return the column number with maximum zeros\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution{\n   public int columnWithMaxZeros(int[][] arr,int N){\n        \n      int max_count = 0;\n      int ans = -1;\n        \n      for(int i = 0; i < N; i++){\n         int count = 0;\n         for(int j = 0; j < N; j++){\n            //counting zeroes\n            if(arr[j][i] == 0){\n               count++;\n            }\n         }\n            \n         //updating max_count and ans as required\n         if(count > max_count){\n            max_count = count;\n            ans = i;\n         }\n      }\n        \n      return ans;\n   }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}