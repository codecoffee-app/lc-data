{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706301,
            "title": "Prefix match with other strings",
            "titleSlug": "prefix-match-with-other-strings",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of strings <strong>arr[]</strong> of size <strong>n, </strong>a string <strong>str</strong> and an integer <strong>k</strong>. The task is to find the count of strings in <strong>arr[]</strong> whose <strong>prefix of length</strong> <strong>k</strong> matches with the <strong>k-length prefix</strong> of <strong>str</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples<br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong></span>: <span style=\"font-size: 18px;\">n = 6 </span><span style=\"font-size: 18px;\">arr[] = {&ldquo;abba&rdquo;, &ldquo;abbb&rdquo;, &ldquo;abbc&rdquo;, &ldquo;abbd&rdquo;, &ldquo;abaa&rdquo;, &ldquo;abca&rdquo;} str = &ldquo;abbg&rdquo; k = 3\n<strong>Output:</strong> 4&nbsp;\n<strong>Explanation</strong>: &ldquo;abba&rdquo;, &ldquo;abbb&rdquo;, &ldquo;abbc&rdquo; and &ldquo;abbd&rdquo; have their prefix of length 3 equal to 3-length prefix of <strong>str</strong> i.e., <strong>\"abb\".</strong></span></pre>\n<pre><span ><strong>Input: </strong>n = 3 arr[] = {&ldquo;geeks&rdquo;, &ldquo;geeksforgeeks&rdquo;, &ldquo;forgeeks&rdquo;} str = &ldquo;ge&rdquo; k = 5\n<strong>Output:&nbsp;</strong>0</span><br /><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: </span>There do not exists any prefix of <strong>str</strong> with length <strong>5.</strong> So, there are no matches possible.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>klengthpref()</strong>&nbsp;which takes the array of strings arr[], its size <strong>n </strong>and an integer <strong>k, </strong>a string<strong> str </strong>as input parameters&nbsp;and returns the </span><span style=\"font-size: 18px;\">count of strings in <strong>arr[]</strong> whose prefix of length <strong>k</strong> matches with the <strong>k</strong> length prefix of <strong>str</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(n*l) where l is the length of the longest word in arr[].<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(n*l) where l is the length of the longest word in arr[].<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 1000</span><br /><span style=\"font-size: 18px;\">1<sup> </sup>&lt;= |arr[i]| , |str| &lt;= 1000</span><br /><span style=\"font-size: 18px;\">1 &lt;= k &lt;= 1000<br />arr[i], str must contain only lowercase English alphabets</span><br />&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Trie Data Structure.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution{   \r\npublic:\r\n    public:\r\n        struct Node { \r\n        Node* arr[26]; \r\n        int freq; \r\n    }; \r\n      \r\n    // Function to insert a node in the trie \r\n    Node* insert(string s, Node* root) \r\n    { \r\n        int in; \r\n    Node* cur = root; \r\n    for (int i = 0; i < s.length(); i++) { \r\n        in = s[i] - 'a'; \r\n  \r\n        // If there is no node created then create one \r\n        if (cur->arr[in] == NULL) \r\n            cur->arr[in] = new Node(); \r\n  \r\n        // Increase the frequency of the node \r\n        cur->arr[in]->freq++; \r\n  \r\n        // Move to the next node \r\n        cur = cur->arr[in]; \r\n    } \r\n  \r\n    // Return the updated root \r\n    return root;  \r\n    } \r\n      \r\n    // Function to return the count of strings \r\n    // whose prefix of length k matches with the \r\n    // k length prefix of the given string \r\n    int find(string s, int k, Node* root) \r\n    { \r\n        int in, count = 0; \r\n        Node* cur = root; \r\n      \r\n        // Traverse the string \r\n        for (int i = 0; i < s.length(); i++) { \r\n            in = s[i] - 'a'; \r\n      \r\n            // If there is no node then return 0 \r\n            if (cur->arr[in] == NULL) \r\n                return 0; \r\n      \r\n            // Else traverse to the required node \r\n            cur = cur->arr[in]; \r\n      \r\n            count++; \r\n      \r\n            // Return the required count \r\n            if (count == k) \r\n                return cur->freq; \r\n        } \r\n        return 0; \r\n    } \r\n    \r\n    int klengthpref(string arr[], int n, int k, string str){    \r\n        Node* root = new Node(); \r\n  \r\n    for (int i = 0; i < n; i++) \r\n    {\r\n        root = insert(arr[i], root); \r\n    \r\n    }\r\n    \r\n    return find(str,k,root);\r\n}\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n    public int klengthpref(String[] arr, int n, int k, String str)\n    {\n        // code here\n        Node root = new Node(0); \n  \n        for (int i = 0; i < n; i++) \n        {\n            root = insert(arr[i], root); \n        \n        }\n        \n        return find(str,k,root);\n    }\n    public Node insert(String s, Node root) \n    { \n        int in=0; \n        Node cur = root; \n        for (int i = 0; i < s.length(); i++) { \n            in = s.charAt(i) - 'a'; \n      \n            // If there is no node created then create one \n            if (cur.arr[in] == null) \n                cur.arr[in] = new Node(0); \n      \n            // Increase the frequency of the node \n            cur.arr[in].freq++; \n      \n            // Move to the next node \n            cur = cur.arr[in]; \n        } \n      \n        // Return the updated root \n        return root;  \n    } \n    public int find(String s, int k, Node root) \n    { \n        int in=0, count = 0; \n        Node cur = root; \n      \n        // Traverse the string \n        for (int i = 0; i < s.length(); i++) { \n            in = s.charAt(i) - 'a'; \n      \n            // If there is no node then return 0 \n            if (cur.arr[in] == null) \n                return 0; \n      \n            // Else traverse to the required node \n            cur = cur.arr[in]; \n      \n            count++; \n      \n            // Return the required count \n            if (count == k) \n                return cur.freq; \n        } \n        return 0; \n    } \n      \n}\nclass Node\n{\n    Node arr[];\n    int freq;\n    public Node(int f)\n    {\n        arr=new Node[26];\n        freq=f;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    class Node:\r\n        def __init__(self):\r\n            self.arr = [None] * 26\r\n            self.freq = 0\r\n    \r\n    def insert(self, s, root):\r\n        cur = root\r\n        for i in range(len(s)):\r\n            in_index = ord(s[i]) - ord('a')\r\n            \r\n            # If there is no node created then create one\r\n            if cur.arr[in_index] is None:\r\n                cur.arr[in_index] = self.Node()\r\n            \r\n            # Increase the frequency of the node\r\n            cur.arr[in_index].freq += 1\r\n            cur = cur.arr[in_index]\r\n        \r\n        return root\r\n    \r\n    def find(self, s, k, root):\r\n        cur = root\r\n        count = 0\r\n        \r\n        # Traverse the string\r\n        for i in range(len(s)):\r\n            in_index = ord(s[i]) - ord('a')\r\n            \r\n            # If there is no node then return 0\r\n            if cur.arr[in_index] is None:\r\n                return 0\r\n            \r\n            # Else traverse to the required node\r\n            cur = cur.arr[in_index]\r\n            count += 1\r\n            \r\n            # Return the required count\r\n            if count == k:\r\n                return cur.freq\r\n        \r\n        return 0\r\n    \r\n    def klengthpref(self, arr, n, k, s):\r\n        root = self.Node()\r\n        \r\n        for i in range(n):\r\n            root = self.insert(arr[i], root)\r\n        \r\n        return self.find(s, k, root)\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public class Node \n    { \n        public Node[] arr = new Node[26]; \n        public int freq; \n    } \n    \n    public Node Insert(string s, Node root) \n    { \n        int in1; \n        Node cur = root; \n        for (int i = 0; i < s.Length; i++) \n        { \n            in1 = s[i] - 'a'; \n  \n            if (cur.arr[in1] == null) \n                cur.arr[in1] = new Node(); \n  \n            cur.arr[in1].freq++; \n  \n            cur = cur.arr[in1]; \n        } \n  \n        return root;  \n    } \n    \n    public int Find(string s, int k, Node root) \n    { \n        int in1, count = 0; \n        Node cur = root; \n  \n        for (int i = 0; i < s.Length; i++) \n        { \n            in1 = s[i] - 'a'; \n  \n            if (cur.arr[in1] == null) \n                return 0; \n  \n            cur = cur.arr[in1]; \n  \n            count++; \n  \n            if (count == k) \n                return cur.freq; \n        } \n        return 0; \n    } \n    \n    public int klengthpref(string[] arr, int n, int k, string str)\n    {\n        Node root = new Node(); \n  \n        for (int i = 0; i < n; i++) \n        {\n            root = Insert(arr[i], root); \n        }\n    \n        return Find(str, k, root);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\r\n  klengthpref(arr,n,k,str){\r\n    class Node {\r\n      constructor() {\r\n        this.arr = new Array(26).fill(null);\r\n        this.freq = 0;\r\n      }\r\n    }\r\n    \r\n    const insert = (s, root) => {\r\n      let cur = root;\r\n      for (let i = 0; i < s.length; i++) {\r\n        let inx = s.charCodeAt(i) - 97;\r\n  \r\n        if (!cur.arr[inx]) {\r\n          cur.arr[inx] = new Node();\r\n        }\r\n  \r\n        cur.arr[inx].freq++;\r\n        cur = cur.arr[inx];\r\n      }\r\n      return root;\r\n    }\r\n    \r\n    const find = (s, k, root) => {\r\n      let cur = root;\r\n      let count = 0;\r\n      \r\n      for (let i = 0; i < s.length; i++) {\r\n        let inx = s.charCodeAt(i) - 97;\r\n  \r\n        if (!cur.arr[inx]) {\r\n          return 0;\r\n        }\r\n  \r\n        cur = cur.arr[inx];\r\n        count++;\r\n  \r\n        if (count === k) {\r\n          return cur.freq;\r\n        }\r\n      }\r\n      return 0;\r\n    }\r\n    \r\n    let root = new Node();\r\n    for (let i = 0; i < n; i++) {\r\n      root = insert(arr[i], root);\r\n    }\r\n    \r\n    return find(str, k, root);\r\n  }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}