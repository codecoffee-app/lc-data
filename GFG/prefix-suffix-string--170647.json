{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714218,
            "title": "Prefix Suffix String",
            "titleSlug": "prefix-suffix-string--170647",
            "content": "<p><span style=\"font-size:18px\">Given two Lists of <strong>strings s1 </strong>and <strong>s2</strong>, you have to count the number&nbsp;of strings in <strong>s2 </strong>which is either a <strong>suffix </strong>or <strong>prefix </strong>of at least one string of <strong>s1</strong>.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">s1 = [&quot;cat&quot;, &quot;catanddog&quot;, &quot;lion&quot;]\r\ns2 = [&quot;cat&quot;, &quot;dog&quot;, &quot;rat&quot;]</span>\r\n<span style=\"font-size:18px\"><strong>Output: \r\n2</strong></span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong> \r\nString &quot;cat&quot; of s2 is prefix of &quot;catand<strong>dog</strong>&quot;\r\n&amp; string &quot;dog&quot; of s2 is suffix of &quot;catand<strong>dog</strong>&quot; </span>\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span> \r\n<span style=\"font-size:18px\">s1 = [&quot;jrjiml&quot;, &quot;tchetn&quot;, &quot;ucrhye&quot;, &quot;ynayhy&quot;, \r\n&nbsp;\\t&quot;cuhffd&quot;, &quot;cvgpoiu&quot;, &quot;znyadv&quot;]\r\ns2 = [&quot;jr&quot;, &quot;ml&quot;, &quot;cvgpoi&quot;, &quot;gpoiu&quot;, &quot;wnmkmluc&quot;, \r\n&nbsp;     &quot;geheqe&quot;, &quot;uglxagyl&quot;, &quot;uyxdroj&quot;]</span> \r\n<span style=\"font-size:18px\"><strong>Output: \r\n4\r\nExplanation:</strong> \r\nString &quot;jr&quot; of s2 is prefix of &quot;<strong>jr</strong>jiml&quot;, \r\n&quot;ml&quot; of s2 is suffix of &quot;jrji<strong>ml</strong>&quot;, \r\n&quot;cvgpoi&quot; of s2 is prefix of &quot;<strong>cvgpoi</strong>u&quot; &amp;\r\n&quot;gpoiu&quot; of s2 is suffix of &quot;cv<strong>gpoiu</strong>&quot;</span><strong>\r\n</strong></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span><br />\r\n<span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function prefixSuffixString(), which takes 2 strings s1 and s2&nbsp;as input and returns an integer value as the number of strings in s2 which is a prefix or suffix in s1.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>: O(max(len(s1) , len(s2) ))<br />\r\n<strong>Expected Space Complexity</strong>: O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n&nbsp;&nbsp;&nbsp;1 &lt;= s1,s2&nbsp;&lt; 5&nbsp;* 10^3<br />\r\n&nbsp; &nbsp;5 &lt;= len(s1[i]), len(s2[i]) &lt; 25</span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two lists of strings, `s1` and `s2`, determine the number of strings in `s2` that are either a prefix or a suffix of at least one string in `s1`.",
                "constraints": [
                    "1 <= s1, s2 < 5 * 10^3",
                    "5 <= len(s1[i]), len(s2[i]) <= 25"
                ],
                "testcases": [
                    {
                        "input": "s1 = [\"cat\", \"catanddog\", \"lion\"]\ns2 = [\"cat\", \"dog\", \"rat\"]",
                        "output": "2",
                        "explanation": "The string \"cat\" from s2 is a prefix of \"catanddog\", and the string \"dog\" from s2 is a suffix of \"catanddog\"."
                    },
                    {
                        "input": "s1 = [\"jrjiml\", \"tchetn\", \"ucrhye\", \"ynayhy\", \"cuhffd\", \"cvgpoiu\", \"znyadv\"]\ns2 = [\"jr\", \"ml\", \"cvgpoi\", \"gpoiu\", \"wnmkmluc\", \"geheqe\", \"uglxagyl\", \"uyxdroj\"]",
                        "output": "4",
                        "explanation": "The string \"jr\" from s2 is a prefix of \"jrjiml\", \"ml\" from s2 is a suffix of \"jrjiml\", \"cvgpoi\" from s2 is a prefix of \"cvgpoiu\", and \"gpoiu\" from s2 is a suffix of \"cvgpoiu\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use concept of Trie</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass TrieNode{\npublic:\n    TrieNode *children[26];\n};\n\n// Function to create a new node for the Trie\nTrieNode *getNode(){\n    TrieNode *pNode =  new TrieNode();\n    \n    // Initializing all children pointers to NULL\n    for (int i = 0; i < 26; i++)\n        pNode->children[i] = NULL;\n    \n    return pNode;\n}\n\n// Function to insert a string into the Trie\nvoid insert(TrieNode *root, string key){\n    TrieNode *pCrawl = root;\n    \n    // Iterating through each character of the key\n    for (int i = 0; i < key.length(); i++){\n        int index = key[i] - 'a';\n        \n        // Create a new node if the current character is not already present\n        if (!pCrawl->children[index])\n            pCrawl->children[index] = getNode();\n        \n        pCrawl = pCrawl->children[index]; // Move to the next character\n    }\n}\n\n// Function to search for a string in the Trie\nbool search(TrieNode *root, string key){\n    TrieNode *pCrawl = root;\n    \n    // Iterating through each character of the key\n    for (int i = 0; i < key.length(); i++){\n        int index = key[i] - 'a';\n        \n        // Return false if the current character is not present in the Trie\n        if (!pCrawl->children[index])\n            return false;\n        \n        pCrawl = pCrawl->children[index]; // Move to the next character\n    }\n    \n    return true; // Return true if the key is found in the Trie\n}\n\nclass Solution{\npublic:\n    int prefixSuffixString(vector<string> &s1,vector<string> s2){\n        TrieNode *root = getNode();\n        \n        // Insert all strings from s1 into the Trie\n        for(auto str:s1){\n            insert(root,str);\n            \n            // Reverse the string and insert it into the Trie\n            reverse(str.begin(),str.end());\n            insert(root,str);\n        }\n        \n        int ans=0;\n        \n        // Check if each string in s2 or its reversed version is present in the Trie\n        for(auto str:s2){\n            string rev=str;\n            reverse(rev.begin(),rev.end());\n            \n            if(search(root,str) or search(root,rev)){\n                ans++;\n            }\n        }\n        \n        return ans; // Return the total count of strings that satisfy the conditions\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    public int prefixSuffixString(String s1[],String s2[])\r\n    {\r\n        trie root=new trie();\r\n        build(s1,root);\r\n        for(int i=0;i<s1.length;i++){\r\n            StringBuilder sb=new StringBuilder();\r\n            for(int j=0;j<s1[i].length();j++){\r\n                sb.append(s1[i].charAt(j));\r\n            }\r\n            sb.reverse();\r\n            s1[i]=sb.toString();\r\n        }\r\n        build(s1,root);\r\n        int ans=0;\r\n        for(int i=0;i<s2.length;i++){\r\n            StringBuilder sb=new StringBuilder();\r\n            for(int j=0;j<s2[i].length();j++){\r\n                sb.append(s2[i].charAt(j));\r\n            }\r\n            sb.reverse();\r\n            if(find(s2[i],root)==1 || find(sb.toString(),root)==1){\r\n                ans++;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n    public void build(String a[], trie root){\r\n        trie temp=null;\r\n        for(int i = 0;i < a.length;i++){\r\n            temp = root;\r\n            for(int j = 0;j < a[i].length();j++){\r\n                if(temp.ch[a[i].charAt(j)-'a'] == null)\r\n                    temp.ch[a[i].charAt(j)-'a'] = new trie();\r\n                temp = temp.ch[a[i].charAt(j)-'a'];\r\n            }\r\n        }\r\n    }\r\n    public int find(String s, trie root){\r\n        for(int i = 0;i < s.length();i++){\r\n            if(root.ch[s.charAt(i)-'a'] == null)\r\n            return 0;\r\n            root = root.ch[s.charAt(i)-'a'];\r\n        }\r\n        return 1;\r\n    }\r\n    public class trie\r\n    {\r\n        trie ch[];\r\n        public trie()\r\n        {\r\n            ch=new trie[26];\r\n            for(int i=0;i<26;i++){\r\n                ch[i]=null;\r\n            }\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n#Class for the nodes of the trie\nclass trieNode:\n    def __init__(self):\n        self.char=[None]*(26)\n\n#Class for the Trie data structure\nclass Trie:\n    def __init__(self):\n        self.root=trieNode()\n\n    #Function to insert a string into the trie\n    def insert(self,a):\n        curr=self.root\n        for el in a:\n            #If the character is not present in current node, create a new node\n            if curr.char[ord(el)-ord(\"a\")]==None:\n                curr.char[ord(el)-ord(\"a\")]=trieNode()\n            curr=curr.char[ord(el)-ord(\"a\")]\n\n    #Function to check if a string is present in the trie\n    def find(self,a):\n        curr=self.root\n        for el in a:\n            #If the character is not present in current node, return 0\n            if curr.char[ord(el)-ord(\"a\")] is None:\n                return 0\n            curr=curr.char[ord(el)-ord(\"a\")]\n        return 1\n\n\nclass Solution:\n    #Function to find the number of strings in s2 that are either prefix or suffix of any string in s1\n    def prefixSuffixString(self, s1, s2) -> int:\n        p=Trie()\n\n        #Insert all the strings and their reverse in s1 into the trie\n        for el in s1:\n            p.insert(el)\n            p.insert(el[::-1])\n\n        ans=0\n        #For each string in s2, check if it is present in the trie or if its reverse is present.\n        #If yes, increment the answer count.\n        for el in s2:\n            if p.find(el) or p.find(el[::-1]):\n                ans+=1\n\n        return ans",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}