{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712234,
            "title": "Prefix to Infix Conversion",
            "titleSlug": "prefix-to-infix-conversion",
            "content": "<p dir=\"ltr\"><span style=\"font-size: 18px;\">You are given a string <strong>S</strong>&nbsp;of size <strong>N</strong> that represents the prefix form of a valid mathematical expression. The string <strong>S</strong> contains only lowercase and uppercase alphabets as operands and the operators are +, -, *, /, %, and ^.Convert it to its infix form.</span></p>\n<p dir=\"ltr\"><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong>\n<span style=\"font-size: 18px;\">*-A/BC-/AKL</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong>\n<span style=\"font-size: 18px;\">((A-(B/C))*((A/K)-L))</span>\n<strong><span style=\"font-size: 18px;\">Explanation: </span></strong>\n<span style=\"font-size: 18px;\">The above output is its valid infix form.\n</span></pre>\n<p dir=\"ltr\"><strong><span style=\"font-size: 18px;\">Your Task:</span></strong></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\">Your task is to complete the function string preToInfix(string pre_exp), which takes a prefix string as input and return its infix form.</span></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N).</span></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space:</strong> O(N).</span></p>\n<p dir=\"ltr\"><strong><span style=\"font-size: 18px;\">Constraints:</span></strong></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\">3&lt;=|S|&lt;=10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` of size `N` representing a valid mathematical expression in prefix notation, convert it to its infix form. The operands in `S` consist of lowercase and uppercase alphabets, and the operators are +, -, *, /, %, and ^.",
                "constraints": [
                    "3 <= |S| <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "*-A/BC-/AKL",
                        "output": "((A-(B/C))*((A/K)-L))",
                        "explanation": "The provided output represents a valid infix conversion of the given prefix expression."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    bool isOperator(char x) {\r\n        switch (x) {\r\n            case '+':\r\n            case '-':\r\n            case '/':\r\n            case '*':\r\n            case '^':\r\n            case '%':\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    string preToInfix(string pre_exp) {\r\n        stack<string> s;\r\n\r\n        // length of expression\r\n        int length = pre_exp.size();\r\n\r\n        // reading from right to left\r\n        for (int i = length - 1; i >= 0; i--) {\r\n\r\n            // check if symbol is operator\r\n            if (isOperator(pre_exp[i])) {\r\n\r\n                // pop two operands from stack\r\n                string op1 = s.top();\r\n                s.pop();\r\n                string op2 = s.top();\r\n                s.pop();\r\n\r\n                // concat the operands and operator\r\n                string temp = \"(\" + op1 + pre_exp[i] + op2 + \")\";\r\n\r\n                // Push string temp back to stack\r\n                s.push(temp);\r\n            }\r\n\r\n            // if symbol is an operand\r\n            else {\r\n\r\n                // push the operand to the stack\r\n                s.push(string(1, pre_exp[i]));\r\n            }\r\n        }\r\n\r\n        // Stack now contains the Infix expression\r\n        return s.top();\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static boolean isOperator(char x) {\r\n        switch (x) {\r\n            case '+':\r\n            case '-':\r\n            case '*':\r\n            case '/':\r\n            case '^':\r\n            case '%':\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    static String preToInfix(String str) {\r\n        Stack<String> stack = new Stack<>();\r\n\r\n        // Length of expression\r\n        int l = str.length();\r\n\r\n        // Reading from right to left\r\n        for (int i = l - 1; i >= 0; i--) {\r\n            char c = str.charAt(i);\r\n            if (isOperator(c)) {\r\n                String op1 = stack.pop();\r\n                String op2 = stack.pop();\r\n\r\n                // Concat the operands and operator\r\n                String temp = \"(\" + op1 + c + op2 + \")\";\r\n                stack.push(temp);\r\n            } else {\r\n\r\n                // To make character to string\r\n                stack.push(c + \"\");\r\n            }\r\n        }\r\n        return stack.pop();\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom collections import deque\nclass Solution:\n    #Function to convert prefix expression to infix expression.\n    def preToInfix(self, s):\n        def isOperator(x):\n            return (ch in '+-*/^%')\n    \n        stack = deque()\n        n = len(s)\n        \n        #iterating over the prefix expression from right to left.\n        for i in range(n - 1, -1, -1):\n            ch = s[i]\n            \n            #if current character is an operator, pop the last two elements \n            #from stack and create the infix expression for the current \n            #operator and operands and push it back to the stack.\n            if isOperator(ch):\n                op1 = stack.pop()\n                op2 = stack.pop()\n                temp = '(' + op1 + ch + op2 + ')'\n                stack.append(temp)\n            else:\n                #if current character is not an operator, push it to the stack.\n                stack.append(ch)\n        \n        #return the infix expression obtained after converting the prefix expression.\n        return stack.pop()",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Function to check if a given character is an operator.\n    public bool isOperator(char x) \n    {\n        switch (x) \n        {\n            case '+':\n            case '-':\n            case '/':\n            case '*':\n            case '^':\n            case '%':\n                return true;\n        }\n        return false;\n    }\n\n    //Function to convert prefix expression to infix expression.\n    public string preToInfix(string pre_exp)\n    {\n        Stack<string> s = new Stack<string>();\n\n        // length of expression\n        int length = pre_exp.Length;\n\n        // reading from right to left\n        for (int i = length - 1; i >= 0; i--) {\n\n            // check if symbol is operator\n            if (isOperator(pre_exp[i])) {\n\n                // pop two operands from stack\n                string op1 = s.Pop();\n                string op2 = s.Pop();\n\n                // concat the operands and operator\n                string temp = \"(\" + op1 + pre_exp[i] + op2 + \")\";\n\n                // Push string temp back to stack\n                s.Push(temp);\n            }\n\n            // if symbol is an operand\n            else {\n\n                // push the operand to the stack\n                s.Push(pre_exp[i].ToString());\n            }\n\n        }\n\n        // Stack now contains the Infix expression\n        return s.Pop();\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} pre_exp\n * @returns {string}\n*/\n\nclass Solution {\n    //Function to covert prefix expression to infix expression.\n    preToInfix(pre_exp)\n    {\n        function isOperator(x){\n            return (x === '+' || x === '-' || x === '*' || x === '/' || x === '^' || x === '%');\n        }\n\n        let stack = [];\n        let n = pre_exp.length;\n\n        //iterating over the prefix expression from right to left.\n        for (let i = n - 1; i >= 0; i--) {\n            let ch = pre_exp.charAt(i);\n\n            //if current character is an operator, pop the last two elements \n            //from stack and create the infix expression for the current \n            //operator and operands and push it back to the stack.\n            if (isOperator(ch)) {\n                let op1 = stack.pop();\n                let op2 = stack.pop();\n                let temp = '(' + op1 + ch + op2 + ')';\n                stack.push(temp);\n            } else {\n                //if current character is not an operator, push it to the stack.\n                stack.push(ch);\n            }\n        }\n\n        //return the infix expression obtained after converting the prefix expression.\n        return stack.pop();\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}