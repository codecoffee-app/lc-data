{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712246,
            "title": "Prefix to Postfix Conversion",
            "titleSlug": "prefix-to-postfix-conversion",
            "content": "<p dir=\"ltr\"><span style=\"font-size:18px\">You are given a string that represents the prefix form of a valid mathematical expression. Convert it to its postfix form.</span></p>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Example:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> </span>\r\n<span style=\"font-size:18px\">*-A/BC-/AKL</span>\r\n<strong><span style=\"font-size:18px\">Output: </span></strong>\r\n<span style=\"font-size:18px\">ABC/-AK/L-*</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong> </span>\r\n<span style=\"font-size:18px\">The above output is its valid postfix form.\r\n</span></pre>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">Complete the function <strong>preToPost(string pre_exp)</strong>, which takes a prefix string as input and returns its postfix form.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N).</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong> O(N).</span></p>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Constraints:</span></strong></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">3&lt;=pre_exp.length()&lt;=100</span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    bool isOperator(char x) {\r\n        switch (x) {\r\n            case '+':\r\n            case '-':\r\n            case '/':\r\n            case '*':\r\n            case '^':\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Convert prefix to Postfix expression\r\n    string preToPost(string pre_exp) {\r\n\r\n        stack<string> s;\r\n        // length of expression\r\n        int length = pre_exp.size();\r\n\r\n        // reading from right to left\r\n        for (int i = length - 1; i >= 0; i--) {\r\n            // check if symbol is operator\r\n            if (isOperator(pre_exp[i])) {\r\n                // pop two operands from stack\r\n                string op1 = s.top();\r\n                s.pop();\r\n                string op2 = s.top();\r\n                s.pop();\r\n\r\n                // concat the operands and operator\r\n                string temp = op1 + op2 + pre_exp[i];\r\n\r\n                // Push string temp back to stack\r\n                s.push(temp);\r\n            }\r\n\r\n            // if symbol is an operand\r\n            else {\r\n\r\n                // push the operand to the stack\r\n                s.push(string(1, pre_exp[i]));\r\n            }\r\n        }\r\n\r\n        // stack contains only the Postfix expression\r\n        return s.top();\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static boolean isOperator(char x) {\r\n        switch (x) {\r\n            case '+':\r\n            case '-':\r\n            case '/':\r\n            case '*':\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    static String preToPost(String pre_exp) {\r\n        // code here\r\n        Stack<String> s = new Stack<String>();\r\n\r\n        // length of expression\r\n        int length = pre_exp.length();\r\n\r\n        // reading from right to left\r\n        for (int i = length - 1; i >= 0; i--) {\r\n            // check if symbol is operator\r\n            if (isOperator(pre_exp.charAt(i))) {\r\n                // pop two operands from stack\r\n                String op1 = s.peek();\r\n                s.pop();\r\n                String op2 = s.peek();\r\n                s.pop();\r\n\r\n                // concat the operands and operator\r\n                String temp = op1 + op2 + pre_exp.charAt(i);\r\n\r\n                // Push String temp back to stack\r\n                s.push(temp);\r\n            }\r\n\r\n            // if symbol is an operand\r\n            else {\r\n                // push the operand to the stack\r\n                s.push(pre_exp.charAt(i) + \"\");\r\n            }\r\n        }\r\n\r\n        // stack contains only the Postfix expression\r\n        return s.peek();\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nfrom collections import deque\r\nclass Solution:\r\n    # Convert prefix to Postfix expression\r\n    def preToPost(self, prefix):\r\n        def isOperator(x):\r\n            return x in '+-/*'\r\n            \r\n        stack = deque()\r\n        # length of expression\r\n        length = len(prefix)\r\n        # reading from right to left\r\n        for i in range(length - 1, -1, -1):\r\n            # check if symbol is operator\r\n            if isOperator(prefix[i]):\r\n                # pop two operands from stack\r\n                op1 = stack.pop()\r\n                op2 = stack.pop()\r\n                # concat the operands and operator\r\n                temp = op1 + op2 + prefix[i]\r\n                # Push string temp back to stack\r\n                stack.append(temp)\r\n            # if symbol is an operand\r\n            else:\r\n                # push the operand to the stack\r\n                stack.append(prefix[i])\r\n        # stack contains only the Postfix expression\r\n        return stack.pop()",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to convert prefix expression to postfix expression.\n    preToPost(pre_exp) {\n        const isOperator = (x) => {\n            return ['+', '-', '*', '/'].indexOf(x) !== -1;\n        };\n        \n        let stack = [];\n        // length of expression\n        let length = pre_exp.length;\n        // reading from right to left\n        for (let i = length - 1; i >= 0; i--) {\n            // check if symbol is operator\n            if (isOperator(pre_exp[i])) {\n                // pop two operands from stack\n                let op1 = stack.pop();\n                let op2 = stack.pop();\n                // concat the operands and operator\n                let temp = op1 + op2 + pre_exp[i];\n                // Push string temp back to stack\n                stack.push(temp);\n            }\n            // if symbol is an operand\n            else {\n                // push the operand to the stack\n                stack.push(pre_exp[i]);\n            }\n        }\n        // stack contains only the Postfix expression\n        return stack.pop();\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to convert prefix expression to postfix expression.\n    public string preToPost(string pre_exp)\n    {\n        Stack<string> s = new Stack<string>();\n        int length = pre_exp.Length;\n\n        // reading from right to left\n        for (int i = length - 1; i >= 0; i--)\n        {\n            // check if symbol is operator\n            if (isOperator(pre_exp[i]))\n            {\n                // pop two operands from stack\n                string op1 = s.Pop();\n                string op2 = s.Pop();\n\n                // concat the operands and operator\n                string temp = op1 + op2 + pre_exp[i];\n\n                // Push string temp back to stack\n                s.Push(temp);\n            }\n\n            // if symbol is an operand\n            else\n            {\n                // push the operand to the stack\n                s.Push(pre_exp[i].ToString());\n            }\n        }\n\n        // stack contains only the Postfix expression\n        return s.Pop();\n    }\n    \n    public bool isOperator(char x)\n    {\n        switch (x)\n        {\n            case '+':\n            case '-':\n            case '/':\n            case '*':\n            case '^':\n                return true;\n        }\n        return false;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}