{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701734,
            "title": "Preorder to BST",
            "titleSlug": "preorder-to-postorder4423",
            "content": "<p><span style=\"font-size: 18px;\">Given an array arr[] of N nodes representing preorder traversal of some BST. You have to build the </span><strong style=\"font-size: 18px;\">BST</strong><span style=\"font-size: 18px;\">&nbsp;</span><span style=\"font-size: 18px;\"> from the given preorder traversal.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\">In Pre-Order traversal,&nbsp;<strong>the root node is visited before the left child and right child nodes</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">N = 5\narr[]  = {40,30,35,80,100}\n<strong>Output: </strong>35 30 100 80 40<strong>\nExplanation:</strong>&nbsp;PreOrder: 40 30 35 80 100\nTherefore, the BST will be:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 40\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/&nbsp; &nbsp;&nbsp; &nbsp;\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;30&nbsp; &nbsp; &nbsp; &nbsp;80\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\\&nbsp; &nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;35&nbsp; &nbsp; &nbsp; 100\nHence, the postOrder traversal will\nbe: 35 30 100 80 40</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">N = 8\narr[]  = {40,30,32,35,80,90,100,120}\n<strong>Output: </strong>35 32 30 120 100 90 80 40</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You need to complete the given function and<strong> return the root </strong>of the tree. The driver code will then use this root to print the post order traversal.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>3</sup><br />1 &lt;= arr[i] &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of `N` nodes representing the preorder traversal of a Binary Search Tree (BST), construct the BST and return its root.  The function will then print the post-order traversal of the constructed BST.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "N = 5\narr[] = {40, 30, 35, 80, 100}",
                        "output": "35 30 100 80 40",
                        "explanation": "The preorder traversal is 40, 30, 35, 80, 100. The BST formed from this traversal has the following structure (though not directly represented here). The postorder traversal of this BST is 35, 30, 100, 80, 40."
                    },
                    {
                        "input": "N = 8\narr[] = {40, 30, 32, 35, 80, 90, 100, 120}",
                        "output": "35 32 30 120 100 90 80 40",
                        "explanation": "The preorder traversal is 40, 30, 32, 35, 80, 90, 100, 120. The postorder traversal of the BST formed by this preorder traversal is 35, 32, 30, 120, 100, 90, 80, 40."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "linkedin"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function that constructs BST from its preorder traversal.\n    Node* Bst(int pre[], int size) {\n        if (canRepresentBST(pre, size) == false) {\n            cout << \"NO\";\n            return NULL;\n        }\n\n        // creating a stack of capacity equal to size of array.\n        Stack* stack = createStack(size);\n\n        // first element of preorder traversal is always root of BST.\n        Node* root = newNode(pre[0]);\n\n        // pushing root into the stack.\n        push(stack, root);\n\n        int i;\n        Node* temp;\n\n        // iterating over rest of the array elements.\n        for (i = 1; i < size; ++i) {\n            temp = NULL;\n\n            // we keep on popping from stack while data at top of stack is less\n            // than the current array element.\n            while (!isEmpty(stack) && pre[i] > peek(stack)->data)\n                temp = pop(stack);\n\n            // we make this greater value as the right child and push it into stack.\n            if (temp != NULL) {\n                temp->right = newNode(pre[i]);\n                push(stack, temp->right);\n            }\n\n            // if current array element is less than data at top of stack, we make\n            // it as the left child of the stack's top node and push it into stack.\n            else {\n                peek(stack)->left = newNode(pre[i]);\n                push(stack, peek(stack)->left);\n            }\n        }\n        return root;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "static class Solution {\n    public Node Bst(int pre[], int size) {\n        Stack<Node> s = new Stack<>();\n        Node root = new Node(pre[0]);\n        s.add(root);\n        for (int i = 1; i < size; i++) {\n            Node temp = null;\n            while (!s.isEmpty() && pre[i] > s.peek().data) {\n                temp = s.pop();\n            }\n            if (temp == null) {\n                s.peek().left = new Node(pre[i]);\n                s.add(s.peek().left);\n            } else {\n                temp.right = new Node(pre[i]);\n                s.add(temp.right);\n            }\n        }\n        return root;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Node:\n\n    def __init__(self, data=0):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\n#Function that constructs BST from its preorder traversal.\ndef Bst(pre, size):\n\n    #first element of preorder traversal is always root of BST.\n    root = Node(pre[0])\n\n    #creating a stack of capacity equal to size of array.\n    s = []\n    #pushing root into the stack.\n    s.append(root)\n\n    i = 1\n    #iterating over rest of the array elements.\n    while (i < size):\n\n        temp = None\n\n        #we keep on popping from stack while data at top of stack is less\n        #than the current array element.\n        while (len(s) > 0 and pre[i] > s[-1].data):\n            temp = s.pop()\n\n        #we make this greater value as the right child and push it into stack.\n        if (temp != None):\n            temp.right = Node(pre[i])\n            s.append(temp.right)\n\n        #if current array element is less than data at top of stack, we make\n        #it as the left child of the stack's top node and push it into stack.\n        else:\n            temp = s[-1]\n            temp.left = Node(pre[i])\n            s.append(temp.left)\n        i = i + 1\n\n    return root\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\nclass Solution {\n\n    // Function that constructs BST from its preorder traversal.\n    public Node Bst(int[] pre, int size) {\n        // first element of preorder traversal is always root of BST.\n        Node root = new Node(pre[0]);\n\n        // creating a stack of capacity equal to size of array.\n        Stack<Node> s = new Stack<Node>();\n        // pushing root into the stack.\n        s.Push(root);\n\n        // iterating over rest of the array elements.\n        for (int i = 1; i < size; ++i) {\n            Node temp = null;\n\n            // we keep on popping from stack while data at top of stack is less\n            // than the current array element.\n            while (s.Count > 0 && pre[i] > s.Peek().data) {\n                temp = s.Pop();\n            }\n\n            // we make this greater value as the right child and push it into stack.\n            if (temp != null) {\n                temp.right = new Node(pre[i]);\n                s.Push(temp.right);\n            }\n            // if current array element is less than data at top of stack, we make\n            // it as the left child of the stack's top node and push it into stack.\n            else {\n                s.Peek().left = new Node(pre[i]);\n                s.Push(s.Peek().left);\n            }\n        }\n        return root;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} pre\n * @param {number} size\n * @returns {Node}\n */\n\nclass Solution {\n    // Function that constructs BST from its preorder traversal.\n    Bst(pre, size) {\n        // first element of preorder traversal is always root of BST.\n        let root = new Node(pre[0]);\n\n        // creating a stack of capacity equal to size of array.\n        let s = [];\n        // pushing root into the stack.\n        s.push(root);\n        let start = 0;\n\n        let i = 1;\n        // iterating over rest of the array elements.\n        while (i < size) {\n            let temp = null;\n\n            // we keep on popping from stack while data at top of stack is less\n            // than the current array element.\n            while (s.length > 0 && pre[i] > s[start].data) {\n                temp = s[start];\n                s.pop();\n                start--;\n            }\n\n            // we make this greater value as right child and push it into stack.\n            if (temp !== null) {\n                temp.right = new Node(pre[i]);\n                s.push(temp.right);\n                start++;\n            }\n            // if current array element is less than data at top of stack, we\n            // make it as left child of stack's top node and push it into stack.\n            else {\n                temp = s[start];\n                temp.left = new Node(pre[i]);\n                s.push(temp.left);\n                start++;\n            }\n            i = i + 1;\n        }\n        return root;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}