{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705298,
            "title": "Preorder Traversal and BST",
            "titleSlug": "preorder-traversal-and-bst4006",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr[ ]&nbsp;</strong>of size <strong>N&nbsp;</strong>consisting of <strong>distinct</strong> integers, write a program that&nbsp;returns&nbsp;<strong>1</strong> if given array can represent preorder traversal of a possible BST, else returns<strong>&nbsp;0</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 3\narr = {2, 4, 3</span><span style=\"font-size:18px\">}\n<strong>Output:</strong> 1\n<strong>Explaination:</strong> Given arr[] can represent\npreorder traversal of following BST:\n&nbsp;\\t\\t  2\n&nbsp;\\t\\t   \\\n&nbsp;\\t\\t    4\n&nbsp;\\t\\t   /\n&nbsp;\\t\\t  3</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 3\nArr = {2, 4, 1}\n<strong>Output:</strong> 0\n<strong>Explaination:</strong> Given arr[] cannot represent\npreorder traversal of a BST.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>canRepresentBST()</strong>&nbsp;which takes the array a<strong>rr[]</strong> and its size <strong>N&nbsp;</strong>as input parameters&nbsp;and returns&nbsp;<strong>1</strong> if given array can represent preorder traversal of a BST, else returns<strong>&nbsp;0</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup><br />\n0 &le; arr[i]&nbsp;&le; 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use stack/recursion.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley",
            "microsoft",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution {\n  public:\n    int canRepresentBST(int arr[], int N) {\n        // Create an empty stack\n        stack<int> s;\n\n        // Initialize current root as minimum possible\n        // value\n        int root = INT_MIN;\n\n        // Traverse given array\n        for (int i = 0; i < N; i++) {\n            // If we find a node who is on right side\n            // and smaller than root, return false\n            if (arr[i] < root) return 0;\n\n            // If pre[i] is in right subtree of stack top,\n            // Keep removing items smaller than pre[i]\n            // and make the last removed item as new\n            // root.\n            while (!s.empty() && s.top() < arr[i]) {\n                root = s.top();\n                s.pop();\n            }\n\n            // At this point either stack is empty or\n            // pre[i] is smaller than root, push pre[i]\n            s.push(arr[i]);\n        }\n        return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    int canRepresentBST(int[] arr, int N) {\n        // Create an empty stack\n        Stack<Integer> s = new Stack<Integer>();\n\n        // Initialize current root as minimum possible\n        // value\n        int root = -1;\n\n        // Traverse given array\n        for (int i = 0; i < N; i++) {\n            // If we find a node who is on right side\n            // and smaller than root, return false\n            if (arr[i] < root) return 0;\n\n            // If pre[i] is in right subtree of stack top,\n            // Keep removing items smaller than pre[i]\n            // and make the last removed item as new\n            // root.\n            while (!s.isEmpty() && s.peek() < arr[i]) {\n                root = s.peek();\n                s.pop();\n            }\n\n            // At this point either stack is empty or\n            // pre[i] is smaller than root, push pre[i]\n            s.push(arr[i]);\n        }\n        return 1;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def canRepresentBST(self, arr, N):\n        # initializing an empty stack for tracking nodes\n        s = []\n        \n        # initializing root to -1 as a starting point\n        root = -1\n        \n        # iterating over each element in the array\n        for i in range(N):\n            \n            # if the current element is smaller than the root, return False\n            if arr[i] < root : \n                return 0\n                \n            # checking if there are any elements in the stack\n            while len(s) and s[-1] < arr[i] :\n                \n                # updating the root with the current element from the stack\n                root = s[-1]\n                \n                # removing the current element from the stack\n                s.pop()\n            \n            # adding the current element to the stack\n            s.append(arr[i])\n        \n        # if all the elements have been iterated and the condition is met, return True\n        return 1",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} N\n * @return {number} \n*/\nclass Solution {\n  canRepresentBST(arr, N) {\n    // Create an empty stack\n    let s = [];\n\n    // Initialize current root as minimum possible\n    // value\n    let root = Number.MIN_SAFE_INTEGER;\n\n    // Traverse given array\n    for (let i = 0; i < N; i++) {\n      // If we find a node who is on right side\n      // and smaller than root, return false\n      if (arr[i] < root) return 0;\n\n      // If arr[i] is in right subtree of stack top,\n      // Keep removing items smaller than arr[i]\n      // and make the last removed item as new\n      // root.\n      while (s.length > 0 && s[s.length - 1] < arr[i]) {\n        root = s[s.length - 1];\n        s.pop();\n      }\n\n      // At this point either stack is empty or\n      // arr[i] is smaller than root, push arr[i]\n      s.push(arr[i]);\n    }\n    return 1;\n  }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int canRepresentBST(int[] arr, int N)\n    {\n        // Create an empty stack\n        Stack<int> s = new Stack<int>();\n\n        // Initialize current root as minimum possible\n        // value\n        int root = int.MinValue;\n\n        // Traverse given array\n        for (int i = 0; i < N; i++) {\n            // If we find a node who is on right side\n            // and smaller than root, return false\n            if (arr[i] < root) return 0;\n\n            // If arr[i] is in right subtree of stack top,\n            // Keep removing items smaller than arr[i]\n            // and make the last removed item as new\n            // root.\n            while (s.Count > 0 && s.Peek() < arr[i]) {\n                root = s.Peek();\n                s.Pop();\n            }\n\n            // At this point either stack is empty or\n            // arr[i] is smaller than root, push arr[i]\n            s.Push(arr[i]);\n        }\n        \n        return 1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}