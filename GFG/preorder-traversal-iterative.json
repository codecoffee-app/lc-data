{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706121,
            "title": "Preorder traversal (Iterative)",
            "titleSlug": "preorder-traversal-iterative",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary tree. Find the preorder traversal of the tree <strong>without using recursion</strong>.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n<strong>\\t     </strong>1\n<strong>\\t   /   \\</strong>\n\\t  2     3\n\\t/  \\\n     4    5\n<strong>Output: </strong>1 2 4 5 3\n<strong>Explanation:</strong>\nPreorder traversal (Root-&gt;Left-&gt;Right) of \nthe tree is 1 2 4 5 3.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n\\t\\t8\n\\t    /   \\\n\\t   1\\t5\n\\t    \\    /  \\\n\\t     7  10   6\n\\t\\t\\  /\n&nbsp;\\t     10 6\n<strong>Output: </strong>8 1 7 10 5 10 6 6&nbsp;\n<strong>Explanation:</strong>\nPreorder traversal (Root-&gt;Left-&gt;Right) \nof the tree is 8 1 7 10 5 10 6 6.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your task:</strong></span></p>\n<p><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function <strong>preOrder() </strong>which takes the root of the tree as input and returns a list containing the preorder traversal of the tree, calculated<strong> without using recursion.</strong></span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected time complexity: </strong>O(N)</span><br /><span style=\"font-size: 18px;\"><strong>Expected auxiliary space: </strong>O(N)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; Number of nodes &le; 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">1 &le; Data of a node &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">utilize a stack for iterative traversal. Push root node onto the stack, then while the stack isn't empty, pop nodes, append data, and push right child before left for correct preorder sequence.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\nvector<int> preOrder(Node* root)\r\n{\r\n\r\n\r\n\r\n    // Create an empty stack and push root to it\r\n    stack<Node*> nodeStack;\r\n    nodeStack.push(root);\r\n    vector<int> v;\r\n\r\n    /* Pop all items one by one. Do following for every popped item\r\n       a) print it\r\n       b) push its right child\r\n       c) push its left child\r\n    Note that right child is pushed first so that left is processed first */\r\n    while (nodeStack.empty() == false) {\r\n        // Pop the top item from stack and print it\r\n        struct Node* node = nodeStack.top();\r\n        v.push_back(node->data);\r\n        nodeStack.pop();\r\n\r\n        // Push right and left children of the popped node to stack\r\n        if (node->right)\r\n            nodeStack.push(node->right);\r\n        if (node->left)\r\n            nodeStack.push(node->left);\r\n    }\r\n\r\n    return v;\r\n\r\n}\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Tree\r\n{\r\n    // Return a list containing the preorder traversal of the given tree\r\n    ArrayList<Integer> preOrder(Node root)\r\n    {\r\n        // Create an empty stack and push root to it\r\n        Stack<Node> stack = new Stack<Node>();\r\n        stack.push(root);\r\n        ArrayList<Integer> v = new ArrayList<Integer>();\r\n    \r\n        /* Pop all items one by one. Do following for every popped item\r\n           a) print it\r\n           b) push its right child\r\n           c) push its left child\r\n        Note that right child is pushed first so that left is processed first */\r\n        while (stack.size() >0) {\r\n            // Pop the top item from stack and print it\r\n            Node node = stack.peek();\r\n            v.add(node.data);\r\n            stack.pop();\r\n    \r\n            // Push right and left children of the popped node to stack\r\n            if (node.right!=null)\r\n                stack.push(node.right);\r\n            if (node.left!=null)\r\n                stack.push(node.left);\r\n        }\r\n        return v;\r\n\r\n    }\r\n    \r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def preOrder(self, root):\r\n        # code here\r\n        stack = []          # create an empty stack\r\n        ans = []            # create an empty list for the preorder traversal\r\n        \r\n        stack.append(root)  # push the root node onto the stack\r\n        \r\n        while len(stack) :  # while the stack is not empty\r\n            \r\n            node = stack[-1]    # get the topmost node in stack\r\n            ans.append(node.data)   # add the value of the node to the result list\r\n            stack.pop()         # remove the node from the stack\r\n            \r\n            if node.right :     # if the node has a right child\r\n                stack.append(node.right)    # push the right child onto the stack\r\n                \r\n            if node.left :      # if the node has a left child\r\n                stack.append(node.left)     # push the left child onto the stack\r\n\r\n        return ans;         # return the preorder traversal list",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Return a list containing the preorder traversal of the given tree\n    preOrder(root) {\n        // If the root is null, return an empty list\n        if (root === null) return;\n        \n        let st = []; // Stack to store nodes\n        let ans = []; // List to store preorder traversal\n        \n        st.push(root); // Push the root node to the stack\n        \n        while (st.length > 0) {\n            let temp = st[st.length - 1]; // Get the top element of the stack\n            st.pop(); // Pop the top element from the stack\n            \n            ans.push(temp.key); // Add the key of the current node to the answer list\n            \n            // Push the right child to the stack if it exists\n            if (temp.right !== null) st.push(temp.right);\n            \n            // Push the left child to the stack if it exists\n            if (temp.left !== null) st.push(temp.left);\n        }\n        \n        return ans; // Return the preorder traversal list\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}