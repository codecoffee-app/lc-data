{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700319,
            "title": "Preorder Traversal",
            "titleSlug": "preorder-traversal",
            "content": "<p><span style=\"font-size: 18px;\">Given a&nbsp;binary tree, find&nbsp;its&nbsp;preorder traversal.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n&nbsp; &nbsp; &nbsp; &nbsp; 1 &nbsp; &nbsp; &nbsp;\n\\t/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n    4 &nbsp; &nbsp;\n  /&nbsp; &nbsp; \\ &nbsp; \n4&nbsp; &nbsp; &nbsp; &nbsp;2\n<strong>Output: </strong>[1, 4, 4, 2</span><span style=\"font-size: 22px;\">]</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n\\t 6\n&nbsp;    /   \\\n&nbsp;   3     2\n&nbsp;    \\   / \n&nbsp;     1 2\n<strong>Output: </strong>[6, 3, 1, 2, 2] </span></pre>\n<pre><span ><strong >Input:<br /></strong><span > </span><span style=\"font-size: 18.6667px;\">\\t  8\n\\t / \\\n\\t3   10\n     / \\    \\\n    1   6   14\n\\t / \\   /\n\\t4   7 13\n</span><strong >Output:</strong><span > [</span><span style=\"font-size: 18.6667px;\">8, 3, 1, 6, 4, 7, 10, 14, 13]</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5</sup><br />0 &lt;= node-&gt;data &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find its preorder traversal. Preorder traversal visits the root node first, then recursively traverses the left subtree, and finally recursively traverses the right subtree.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "0 <= node->data <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "     1 \n\t/     \n    4    \n  /   \\  \n4     2",
                        "output": "[1, 4, 4, 2]",
                        "explanation": null
                    },
                    {
                        "input": "\t 6\n /   \\\n 3     2\n  \\   /\n   1 2",
                        "output": "[6, 3, 1, 2, 2]",
                        "explanation": null
                    },
                    {
                        "input": "\t  8\n\t / \\\n\t3   10\n     / \\    \\\n    1   6   14\n\t / \\   /\n\t4   7 13",
                        "output": "[8, 3, 1, 6, 4, 7, 10, 14, 13]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a recursive function to visit the root first, then traverse the left subtree, followed by the right subtree, storing each node's value in an array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "walmart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the preorder traversal of the tree.\n    void preorderUtil(Node* root, vector<int>& res) {\n        if (root == NULL)\n            return;\n\n        res.push_back(root->data);      // Store the data at root\n        preorderUtil(root->left, res);  // Recur for left subtree\n        preorderUtil(root->right, res); // Recur for right subtree\n    }\n\n    // Function to return a list containing the preorder traversal of the tree.\n    vector<int> preorder(Node* root) {\n        vector<int> res;\n        preorderUtil(root, res);\n        return res; // Returning the list\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to find the preorder traversal of the tree.\n    static void preorderUtil(Node root, ArrayList<Integer> res) {\n        if (root == null) return;\n\n        res.add(root.data);            // Store the data at root\n        preorderUtil(root.left, res);  // Recur for left subtree\n        preorderUtil(root.right, res); // Recur for right subtree\n    }\n\n    // Function to return a list containing the preorder traversal of the tree.\n    static ArrayList<Integer> preorder(Node root) {\n        ArrayList<Integer> res = new ArrayList<>(0);\n        preorderUtil(root, res);\n        return res; // Returning the list\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find the preorder traversal of the tree\n    def preorderUtil(self, root, res):\n        if root is None:\n            return\n        res.append(root.data)  # Store the data at root\n        self.preorderUtil(root.left, res)  # Recur for left subtree\n        self.preorderUtil(root.right, res)  # Recur for right subtree\n\n    # Function to return a list containing the preorder traversal of the tree\n    def preorder(self, root):\n        res = []\n        self.preorderUtil(root, res)\n        return res  # Returning the list\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\n    class Solution\n    {\n        //Function to find the preorder traversal of the tree.\n        public void preorderRecur(Node root, List<int> po)\n        {\n            if (root == null)\n            {\n                return;\n            }\n\n            po.Add(root.data);\n            preorderRecur(root.left, po);\n            preorderRecur(root.right, po);\n\n        }\n        //Function to return a list containing the preorder traversal of the tree.\n        public List<int> preorder(Node root)\n        {\n            List<int> po = new List<int>();\n            preorderRecur(root, po);\n            return po;\n        }\n\n\n    }\n\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} root\n * @returns {number[]}\n*/\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n    //Function to find the preorder traversal of the tree.\n    preorderUtil(root, res)\n    {\n      //preorder traversal works on Root Left Right. \n        \n      //if root is null then we simply return. \n      if (root === null)\n        return;\n        \n      //first, we store the data at root in a list.\n      res.push(root.data);\n      //then we call the recursive function for left subtree.\n      this.preorderUtil(root.left, res); \n      //then we call the recursive function for right subtree.\n      this.preorderUtil(root.right, res); \n    }\n    \n    //Function to return a list containing the preorder traversal of the tree.\n    preorder(root)\n    {\n        let res = [];\n        this.preorderUtil(root, res);\n        //returning the list.\n        return res;\n    }\n}\n\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}