{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703637,
            "title": "Previous number in one swap",
            "titleSlug": "previous-number-in-one-swap5707",
            "content": "<p><span style=\"font-size:18px\">Given a non-negative number N in the form of string. The task is to apply at most one swap operation on the number N so that the result is just a previous possible number.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note:&nbsp; </strong>Leading zeros are not allowed.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\">Example 1:</span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input :\n</strong>S = &quot;12435&quot;\n<strong>Output: \n</strong>12345\n<strong>Explanation:\n</strong>Although the number 12354 \nwill be the largest smaller \nnumber from 12435. But it is \nnot possible to make it using \nonly one swap. So swap \n4 and 3 and get 12345.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\">Example 2:</span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: \n</strong>S = &quot; 12345&quot;\n<strong>Output: \n</strong>-1\n<strong>Explanation:\n</strong>Digits are in increasing order. \nSo it is not possible to \nmake a smaller number from it.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\n\n<p><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function previousNumber() which takes the string S and returns the previous number of S. If no such number exists return -1;</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\">Expected Time Complexity: O(N)<br />\nExpected Auxiliary Space: O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n2&lt;=|Number length |&lt;=10<sup>5</sup></span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative number N represented as a string, find the largest possible number smaller than N that can be obtained by performing at most one swap operation on the digits of N. Leading zeros are not allowed after the swap.",
                "constraints": [
                    "2 <= |Number length | <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "12435",
                        "output": "12345",
                        "explanation": "Although 12354 is a smaller number formed from digits of 12435. It is not possible to generate 12354 with only a single swap. Swapping 4 and 3 yields 12345, which is a valid previous number."
                    },
                    {
                        "input": "12345",
                        "output": "-1",
                        "explanation": "The digits are in ascending order. Therefore, it's impossible to obtain a smaller number using a single swap."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try thinking like traversing&nbsp;the string from last and find S[m] in the string such that S[m]&gt;S[i] and think.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{   \npublic:\n    string previousNumber(string S){\n        \n        int len = S.length(); \n        int index = -1; \n      \n        // Traverse from right until we find  \n        // a digit which is greater than its  \n        // next digit. For example, in 34125, \n        // our index is 4. \n        for (int i = len - 2; i >= 0; i--) { \n            if (S[i] > S[i+1]) \n            { \n                index = i; \n                break; \n            } \n        } \n          \n        // We can also use binary search here as \n        // digits after index are sorted in increasing \n        // order. \n        // Find the biggest digit in the right of \n        // arr[index] which is smaller than arr[index] \n        int smallGreatDgt = -1; \n        for (int i = len - 1; i > index; i--) { \n            if (S[i] < S[index]) { \n                if (smallGreatDgt == -1) \n                    smallGreatDgt = i; \n                else if (S[i] >= S[smallGreatDgt]) \n                    smallGreatDgt = i; \n            } \n        } \n          \n        // If index is -1 i.e. digits are  \n        // in increasing order. \n        if (index == -1) \n            return \"-1\"; \n              \n        // Swap both values \n        if (smallGreatDgt != -1)  \n        { \n            swap(S[index], S[smallGreatDgt]); \n            if(S[0]=='0')\n                return \"-1\";\n            return S; \n        } \n          \n        return \"-1\"; \n        \n        \n        \n        \n        \n        \n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def previousNumber(ob,S):\n        index = -1\n        S=list(S)\n        n=len(S)\n        # Traverse from right until we find  \n        # a digit which is greater than its  \n        # next digit. For example, in 34125,  \n        # our index is 4.  \n        for i in range(n - 2, -1, -1): \n            if int(S[i]) > int(S[i + 1]): \n                index = i \n                break\n      \n        # We can also use binary search here as  \n        # digits after index are sorted in  \n        # increasing order.  \n        # Find the biggest digit in the right of  \n        # arr[index] which is smaller than arr[index]      \n        smallGreatDgt = -1\n        for i in range(n - 1, index, -1): \n            if (smallGreatDgt == -1 and int(S[i]) <  \n                                        int(S[index])): \n                smallGreatDgt = i \n            elif (index > -1 and int(S[i]) >= \n                                 int(S[smallGreatDgt]) and \n                                 int(S[i]) < int(S[index])): \n                smallGreatDgt = i \n          \n        # If index is -1 i.e. digits are  \n        # in increasing order. \n        if index == -1: \n            return \"\" . join(\"-1\") \n        else:  \n              \n            # Swap both values \n            (S[index],  S[smallGreatDgt]) = (S[smallGreatDgt],  S[index]) \n        if S[0]=='0':\n            return '-1'\n        return \"\" . join(S) \n        ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S\n * @returns {string}\n*/\n\nclass Solution {\n    //Function to find the previous number to the given number.\n    previousNumber (S) {\n        let index = -1;\n        S = S.split('');\n        let n = S.length;\n\n        // Traverse from right until we find  \n        // a digit which is greater than its  \n        // next digit. For example, in 34125,  \n        // our index is 4.  \n        for (let i = n - 2; i >= 0; i--) { \n            if (parseInt(S[i]) > parseInt(S[i + 1])) {\n                index = i;\n                break;\n            }\n        }\n\n        // We can also use binary search here as  \n        // digits after index are sorted in  \n        // increasing order.  \n        // Find the biggest digit in the right of  \n        // arr[index] which is smaller than arr[index]      \n        let smallGreatDgt = -1;\n        for (let i = n - 1; i > index; i--) {\n            if (smallGreatDgt == -1 && parseInt(S[i]) < parseInt(S[index])) {\n                smallGreatDgt = i;\n            } else if (index > -1 && parseInt(S[i]) >= parseInt(S[smallGreatDgt]) && parseInt(S[i]) < parseInt(S[index])) {\n                smallGreatDgt = i;\n            }\n        }\n\n        // If index is -1 i.e. digits are  \n        // in increasing order. \n        if (index === -1) {\n            return \"-1\";\n        } else {\n            // Swap both values \n            [S[index], S[smallGreatDgt]] = [S[smallGreatDgt], S[index]];\n        }\n        \n        if (S[0] === '0') {\n            return '-1';\n        }\n        \n        return S.join(\"\");\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}