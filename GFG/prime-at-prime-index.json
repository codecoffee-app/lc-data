{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701694,
            "title": "Prime At Prime Index",
            "titleSlug": "prime-at-prime-index",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of positive numbers. Return the array containing index of <strong>prime </strong>numbers&nbsp;that are at prime index<strong>(1-indexing)</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:&nbsp;</strong></span><span style=\"font-size: 18px;\">3 5 2 4 8<br /><strong>Output: </strong>2 3  <br /><strong>Explanation:&nbsp;</strong>5 is a prime number present on prime index(2). Similiarly 2 is a prime number present on a prime index(3).<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:&nbsp;</strong>1 2 3 4 5 2</span><span style=\"font-size: 18px;\"><br /><strong>Output:&nbsp;</strong>2 3 5&nbsp;<br /><strong>Explanation: </strong>2, 3, 5 is a prime number present on prime indices 2, 3, 5.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of positive numbers, return an array containing the elements that are prime numbers located at prime indices (1-based indexing).",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "3 5 2 4 8",
                        "output": "5 2",
                        "explanation": "The element at index 2 (5) and the element at index 3 (2) are prime numbers, and both 2 and 3 are prime indices."
                    },
                    {
                        "input": "1 2 3 4 5 2",
                        "output": "2 3 5",
                        "explanation": "The elements at indices 2 (2), 3 (3), and 5 (5) are prime numbers, and 2, 3, and 5 are prime indices."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the method of Eratosthenes to find primes.<br />\nhttps://www.geeksforgeeks.org/sieve-of-eratosthenes/</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Global variables for sieve\nvector<int> prime(100001, 0);\nbool flag = false;\n\n// Sieve of Eratosthenes to mark non-prime numbers\nvoid seive() {\n    if (flag)\n        return; // Prevent recalculating the sieve\n    flag = true;\n    prime[1] = 1; // 1 is not prime\n    for (int i = 2; i <= 100000; i++) {\n        if (prime[i] == 0) { // If `i` is prime\n            for (int j = i + i; j <= 100000; j += i) {\n                prime[j] = 1; // Mark multiples of `i` as non-prime\n            }\n        }\n    }\n}\n\n// Solution class\nclass Solution {\n  public:\n    vector<int> primeAtPrime(vector<int>& arr) {\n        vector<int> result;\n        seive(); // Ensure sieve is computed\n\n        // 1-indexed loop for prime index and prime value\n        for (int i = 2; i <= arr.size(); i++) {\n            if (prime[i] == 0 && prime[arr[i - 1]] == 0) {\n                result.push_back(i);\n            }\n        }\n\n        return result;\n    }\n};",
                "lang_text": "cpp"
            }
        },
        "platform": "GFG"
    }
}