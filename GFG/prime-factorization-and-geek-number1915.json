{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705168,
            "title": "Prime factorization and geek number",
            "titleSlug": "prime-factorization-and-geek-number1915",
            "content": "<p><span style=\"font-size:18px\">As we know that every number &gt;=2 can be represented as natural powers of primes(prime factorization). Also <a href=\"https://en.wikipedia.org/wiki/Fundamental_theorem_of_arithmetic\" target=\"_blank\">prime factorization is unique for a number</a>.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\">Eg. 360 = 2<sup>3</sup>3<sup>2</sup>5<sup>1</sup></span></p>\n\n<p><span style=\"font-size:18px\">Today we are interested in <strong>geek</strong> numbers.&nbsp;A <strong>geek</strong> number is a number whose prime factorization only contains powers of unity.Below are some geek numbers.</span></p>\n\n<p><span style=\"font-size:18px\">Eg. 2 = 2<sup>1</sup><br />\n&nbsp; &nbsp; 22 = 2<sup>1</sup>11<sup>1</sup></span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 22\n<strong>Output:</strong> Yes\n<strong>Explaination:</strong> 22 = 2<sup>1</sup>11<sup>1</sup>. Where all the \npowers of prime numbers are one.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 4\n<strong>Output:</strong> No\n<strong>Explaination:</strong> 4 = 2<sup>2</sup>. Where all the \npowers of all the prime are not one.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>geekNumber()</strong> which takes N as input parameter and returns 1 if it a geek number. Otherwise, returns 0.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(sqrt(N))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>6</sup>&nbsp;&nbsp;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A geek number is defined as a number whose prime factorization contains only prime factors raised to the power of one. Given a number N, determine if it is a geek number.",
                "constraints": [
                    "1 <= N <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "22",
                        "output": "1",
                        "explanation": "22 = 2^1 * 11^1. All prime factors have a power of 1."
                    },
                    {
                        "input": "4",
                        "output": "0",
                        "explanation": "4 = 2^2. The prime factor 2 has a power of 2, not 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find the prime factors and their powers in the number N.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to check if a number is a geek number or not.\n    int geekNumber(int N){\n        //iterating from 2 to the square root of N to check for factors.\n        for(int i = 2;i <= sqrt(N);i++){\n            //if N is divisible by i, divide N by i.\n            if(N%i == 0)\n                N /= i;\n            //if N is still divisible by i, it means there are multiple factors,\n            //so N is not a geek number, return 0.\n            if(N%i == 0)\n                return 0;\n        }\n        //if N is not divisible by any number, then it is a geek number, return 1.\n        return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution{\n    // Function to check if a number is geek number or not\n    static int geekNumber(int N){\n        // Finding the square root of N\n        int x = (int)(Math.sqrt(N));\n        \n        // Checking for prime factors of N\n        for(int i = 2;i <= x;i++){\n            // Checking if i is a prime factor of N\n            if(N%i == 0)\n                // Dividing N by i\n                N = N/i;\n            \n            // Checking if i is still a prime factor of N\n            if(N%i == 0)\n                // If i is still a prime factor of N, return 0\n                return 0;\n        }\n        \n        // If N has no prime factors, return 1\n        return 1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public bool geekNumber(int N)\n    {\n        //iterating from 2 to the square root of N to check for factors.\n        for(int i = 2;i <= Math.Sqrt(N);i++){\n            //if N is divisible by i, divide N by i.\n            if(N%i == 0)\n                N /= i;\n            //if N is still divisible by i, it means there are multiple factors,\n            //so N is not a geek number, return false.\n            if(N%i == 0)\n                return false;\n        }\n        //if N is not divisible by any number, then it is a geek number, return true.\n        return true;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}