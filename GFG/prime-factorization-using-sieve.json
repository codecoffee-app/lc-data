{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712230,
            "title": "Prime Factorization using Sieve",
            "titleSlug": "prime-factorization-using-sieve",
            "content": "<p dir=\"ltr\"><span style=\"font-size: 18px;\">You are given a positive number N. Using the concept of Sieve, compute its prime factorisation.</span></p>\n<p dir=\"ltr\"><strong><span style=\"font-size: 18px;\">Example:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong>\n<span style=\"font-size: 18px;\">N = 12246</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong>\n<span style=\"font-size: 18px;\">2 3 13 157</span>\n<strong><span style=\"font-size: 18px;\">Explanation: </span></strong>\n<span style=\"font-size: 18px;\">2*3*13*157 = 12246 = N.\n</span></pre>\n<p dir=\"ltr\"><strong><span style=\"font-size: 18px;\">Your Task:</span></strong></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\">Comple the function <strong>findPrimeFactors</strong>(), which takes a positive number N as input and returns a vector consisting of prime factors. You should implement Sieve algorithm to solve this problem.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(Nlog(log(N)).</span></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space:</strong> O(N).</span></p>\n<p dir=\"ltr\"><strong><span style=\"font-size: 18px;\">Constraints:</span></strong></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\">2&lt;=N&lt;=2*10<sup>5</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer N, find its prime factorization using the Sieve of Eratosthenes algorithm.",
                "constraints": [
                    "2 <= N <= 2 * 10^5"
                ],
                "testcases": [
                    {
                        "input": "12246",
                        "output": "2 3 13 157",
                        "explanation": "The prime factorization of 12246 is 2 * 3 * 13 * 157."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int MAXN = 100100;\r\n\r\n    int spf[100100];\r\n\r\n    void sieve() {\r\n        spf[1] = 1;\r\n        for (int i = 2; i < MAXN; i++) spf[i] = i;\r\n\r\n        for (int i = 4; i < MAXN; i += 2) spf[i] = 2;\r\n\r\n        for (int i = 3; i * i < MAXN; i++) {\r\n            if (spf[i] == i) {\r\n                for (int j = i * i; j < MAXN; j += i)\r\n                    if (spf[j] == j) spf[j] = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    vector<int> findPrimeFactors(int N) {\r\n        vector<int> ret;\r\n        while (N != 1) {\r\n            ret.push_back(spf[N]);\r\n            N = N / spf[N];\r\n        }\r\n        return ret;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static int MAXN = 100100;\r\n\r\n    static int spf[] = new int[MAXN];\r\n\r\n    // You must implement this function\r\n    static void sieve() {\r\n        spf[1] = 1;\r\n        for (int i = 2; i < MAXN; i++) spf[i] = i;\r\n\r\n        for (int i = 4; i < MAXN; i += 2) spf[i] = 2;\r\n\r\n        for (int i = 3; i * i < MAXN; i++) {\r\n            if (spf[i] == i) {\r\n                for (int j = i * i; j < MAXN; j += i)\r\n                    if (spf[j] == j) spf[j] = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    static List<Integer> findPrimeFactors(int N) {\r\n        // code here\r\n        List<Integer> ret = new ArrayList<>();\r\n        while (N != 1) {\r\n            ret.add(spf[N]);\r\n            N = N / spf[N];\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def __init__(self):\n        self.MAXN = 100100\n        self.spf = [0] * self.MAXN\n        \n    # Function to initialize the smallest prime factor for each number\n    def sieve(self):\n        self.spf[1] = 1;\n        \n        # Initializing smallest prime factor as the numbers themselves\n        for i in range(2, self.MAXN):\n            self.spf[i] = i\n        \n        # Updating smallest prime factor for multiples of 2\n        for i in range(4, self.MAXN, 2):\n            self.spf[i] = 2\n        \n        i = 3\n        while i*i < self.MAXN:\n            # If i is a prime number, update its multiples\n            if self.spf[i] == i:\n                j = i * i\n                while j < self.MAXN:\n                    # Updating smallest prime factor for j\n                    if self.spf[j] == j:\n                        self.spf[j] = i\n                    j += i\n            i += 1\n    \n    # Function to find the prime factors of a number\n    def findPrimeFactors(self, N):\n        ret = []\n        while N != 1:\n            # Appending the smallest prime factor of N to the result list\n            ret.append(self.spf[N])\n            N //= self.spf[N]\n        return ret",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @class Solution\n*/\nclass Solution {\n    \n    /**\n     * @returns {void} \n    */\n    sieve() {\n        this.MAXN = 100100;\n        this.spf = new Array(this.MAXN).fill(0);\n        \n        this.spf[1] = 1;\n        \n        // Initializing smallest prime factor as the numbers themselves\n        for (let i = 2; i < this.MAXN; i++) {\n            this.spf[i] = i;\n        }\n        \n        // Updating smallest prime factor for multiples of 2\n        for (let i = 4; i < this.MAXN; i += 2) {\n            this.spf[i] = 2;\n        }\n        \n        let i = 3;\n        while (i * i < this.MAXN) {\n            // If i is a prime number, update its multiples\n            if (this.spf[i] == i) {\n                let j = i * i;\n                while (j < this.MAXN) {\n                    // Updating smallest prime factor for j\n                    if (this.spf[j] == j) {\n                        this.spf[j] = i;\n                    }\n                    j += i;\n                }\n            }\n            i += 1;\n        }\n    }\n    \n    /**\n     * @param {number} N\n     * @returns {number[]}\n    */\n    findPrimeFactors(N) {\n        let ret = [];\n        while (N != 1) {\n            // Appending the smallest prime factor of N to the result list\n            ret.push(this.spf[N]);\n            N = Math.floor(N / this.spf[N]);\n        }\n        return ret;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}