{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705712,
            "title": "Prime factors of LCM of array elements",
            "titleSlug": "prime-factors-of-lcm-of-array-elements3940",
            "content": "<p><span style=\"font-size:18px\">Given an array of elements find all the prime factors of the LCM of the given numbers.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 8\r\nArr = {1 , 2, 3, 4, 5, 6, 7, 8}\r\n<strong>Output:</strong> 2 3 5 7\r\n<strong>Explaination:</strong> LCM of N elements is 840 \r\nand 840 = 2*2*2*3*5*7.so prime factors \r\nwould be 2, 3, 5, 7.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4\r\nArr = {20, 10, 15, 60}</span><span style=\"font-size:18px\">\r\n<strong>Output:</strong> 2 3 5\r\n<strong>Explaination:</strong> LCM of N elements is 60\r\nand 60 = 2*2*3*5.so prime factors\r\nwould be 2, 3, 5.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>primeFactorLcm()</strong>&nbsp;which takes the array <strong>Arr[]</strong> and its size <strong>N&nbsp;</strong>as input parameters&nbsp;and returns all the prime factors of the LCM of the given numbers.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(Nsqrt(max(Arr<sub>i</sub>))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>4</sup><br />\r\n1 &le; Arr<sub>i</sub>&nbsp;&le; 10<sup>4 </sup>where 0&le;i&lt;N</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the prime factors of the Least Common Multiple (LCM) of all the numbers in the array.",
                "constraints": [
                    "1 <= N <= 10^4",
                    "1 <= Arr[i] <= 10^4, where 0 <= i < N"
                ],
                "testcases": [
                    {
                        "input": "N = 8\nArr = {1, 2, 3, 4, 5, 6, 7, 8}",
                        "output": "2 3 5 7",
                        "explanation": "The LCM of the numbers 1, 2, 3, 4, 5, 6, 7, and 8 is 840. The prime factorization of 840 is 2 * 2 * 2 * 3 * 5 * 7. Therefore, the prime factors are 2, 3, 5, and 7."
                    },
                    {
                        "input": "N = 4\nArr = {20, 10, 15, 60}",
                        "output": "2 3 5",
                        "explanation": "The LCM of the numbers 20, 10, 15, and 60 is 60. The prime factorization of 60 is 2 * 2 * 3 * 5. Therefore, the prime factors are 2, 3, and 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Seive.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\nconst int MAX  = 100000;\r\n  \r\n// array to store along long int prime less than and equal to 10^6 \r\nvector <int> primes; \r\n  \r\n// utility function for sieve of sundaram \r\nvoid sieve() \r\n{ \r\n    int n = MAX; \r\n  \r\n    // In general Sieve of Sundaram, produces primes smalong long inter \r\n    // than (2*x + 2) for a number given number x. Since \r\n    // we want primes smalong long inter than n, we reduce n to half \r\n    int nNew = (n)/2; \r\n  \r\n    // This array is used to separate numbers of the form \r\n    // i+j+2ij from others where 1 <= i <= j \r\n    bool marked[nNew + 100]; \r\n  \r\n    // Initalize along long int elements as not marked \r\n    memset(marked, false, sizeof(marked)); \r\n  \r\n    // Main logic of Sundaram. Mark along long int numbers which do not \r\n    // generate prime number by doing 2*i+1 \r\n    int tmp=sqrt(n); \r\n    for (int i=1; i<=(tmp-1)/2; i++) \r\n        for (int j=(i*(i+1))<<1; j<=nNew; j=j+2*i+1) \r\n            marked[j] = true; \r\n  \r\n    // Since 2 is a prime number \r\n    primes.push_back(2); \r\n  \r\n    // Print other primes. Remaining primes are of the form \r\n    // 2*i + 1 such that marked[i] is false. \r\n    for (int i=1; i<=nNew; i++) \r\n        if (marked[i] == false) \r\n            primes.push_back(2*i + 1); \r\n} \r\n// Function to find prime factors of n elements of \r\n// given array \r\nvector<int>ans;\r\nvoid primeLcm( int arr[], int n ) \r\n{ \r\n    // factors[] --> array to mark along long int prime factors of \r\n    // lcm of array elements \r\n    int factors[MAX] = {0}; \r\n  \r\n    // One by one calculate prime factors of number \r\n    // and mark them in factors[] array \r\n    for (int i=0; i<n; i++) \r\n    { \r\n        // copy --> duplicate of original element to \r\n        //          perform operation \r\n          int copy = arr[i]; \r\n  \r\n        // sqr --> square root of current number 'copy' \r\n        // because along long int prime factors are always less \r\n        // than and equal to square root of given number \r\n        int sqr = sqrt(copy); \r\n  \r\n        // check divisibility with prime factor \r\n        for (int j=0; primes[j]<=sqr; j++) \r\n        { \r\n            // if current prime number is factor of 'copy' \r\n            if (copy%primes[j] == 0) \r\n            { \r\n                // divide with current prime factor until \r\n                // it can divide the number \r\n                while (copy%primes[j] == 0) \r\n                    copy = copy/primes[j]; \r\n  \r\n                // mark current prime factor as 1 in \r\n                // factors[] array \r\n                factors[primes[j]] = 1; \r\n            } \r\n        } \r\n  \r\n        // After calculating exponents of along long int prime factors \r\n        // either value of 'copy' wilong long int be 1 because of \r\n        // complete divisibility or remaining value of \r\n        // 'copy' wilong long int be surely a prime , so we wilong long int \r\n        // also mark this prime as a factor \r\n        if (copy > 1) \r\n            factors[copy] = 1; \r\n    } \r\n  \r\n    // if 2 is prime factor of lcm of along long int elements \r\n    // in given array \r\n    if (factors[2] == 1) \r\n        ans.push_back(2); \r\n  \r\n    // traverse to print along long int prime factors of lcm of \r\n    // along long int elements in given array \r\n    for (int i=3; i<=MAX; i=i+2) \r\n        if (factors[i] == 1) \r\n            ans.push_back(i); \r\n}\r\nvector<int> primeFactorLcm(  int Arr[], int N ){\r\n    sieve();\r\n    // cout<<primes[0];\r\n    primeLcm(Arr,N);\r\n    return ans;\r\n}\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}