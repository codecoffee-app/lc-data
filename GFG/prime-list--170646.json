{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713591,
            "title": "Prime List",
            "titleSlug": "prime-list--170646",
            "content": "<p><span style=\"font-size: 12pt;\">You are given the head of a linked list. You have to replace all the values of the nodes with the nearest <strong>prime</strong> number. If more than one prime number exists at an equal distance, choose the <strong>smallest</strong> one. Return the <strong>head</strong> of the modified linked list.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>Linked List:<strong> </strong>2 &rarr; 6 &rarr; 10\n<strong>Output: </strong>2 &rarr; 5 &rarr; 11<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/713591/Web/Other/blobid0_1723009310.png\" width=\"267\" height=\"167\" /><br /><strong>Explanation: </strong>The nearest prime of 2 is 2 itself. The nearest primes of 6 are 5 and 7, since 5 is smaller so, 5 will be chosen. The nearest prime of 10 is 11.</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>Linked List:<strong> </strong>1 &rarr; 15 &rarr; 20\n<strong>Output: </strong>2 &rarr; 13 &rarr; 19<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/713591/Web/Other/blobid1_1723009344.png\" width=\"266\" height=\"166\" /><br /><strong>Explanation: </strong>The nearest prime of 1 is 2. The nearest primes of 15 are 13 and 17, since 13 is smaller so, 13 will be chosen. The nearest prime of 20 is 19.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:</strong>&nbsp;O(number of nodes * sqrt(value of node)).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &le; Number of Nodes &le; 10<sup>4</sup><br />1 &le; Value&nbsp;on Node &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a linked list, replace the value of each node with the nearest prime number. If two prime numbers are equidistant, choose the smaller one. Return the head of the modified linked list.",
                "constraints": [
                    "1 <= Number of Nodes <= 10^4",
                    "1 <= Value on Node <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "Linked List: 2 -> 6 -> 10",
                        "output": "2 -> 5 -> 11",
                        "explanation": "The nearest prime to 2 is 2 itself. The nearest primes to 6 are 5 and 7. Since 5 is smaller, it's chosen. The nearest prime to 10 is 11."
                    },
                    {
                        "input": "Linked List: 1 -> 15 -> 20",
                        "output": "2 -> 13 -> 19",
                        "explanation": "The nearest prime to 1 is 2. The nearest primes to 15 are 13 and 17. Since 13 is smaller, it's chosen. The nearest prime to 20 is 19."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Think about going to both sides of the number and checking.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if a number is prime or not.\n    bool isPrime(int n) {\n        // Checking if n=1, as 1 is not prime.\n        if (n == 1)\n            return false;\n        // Checking if n=2 or n=3, as they are both prime.\n        if (n == 2 || n == 3)\n            return true;\n        // Checking all numbers from 2 to sqrt(n) to see if any divides n.\n        for (int i = 2; i <= sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Function to replace each node\u2019s value with nearest prime.\n    Node *primeList(Node *head) {\n        Node *temp = head;\n        // Iterating through all the nodes in the linked list.\n        while (temp != NULL) {\n            int num = temp->val, num1, num2;\n            num1 = num2 = num;\n            // Checking if the current value is 1, as the nearest prime\n            // to 1 is 2.\n            if (num == 1) {\n                temp->val = 2;\n                temp = temp->next;\n                continue;\n            }\n            // Finding the nearest smaller prime number to the current value.\n            while (!isPrime(num1)) {\n                num1--;\n            }\n            // Finding the nearest larger prime number to the current value.\n            while (!isPrime(num2)) {\n                num2++;\n            }\n            // Comparing the difference between the current value and the nearest\n            // smaller prime with the difference between the current value and the\n            // nearest larger prime, and updating the current value accordingly.\n            if (num - num1 > num2 - num) {\n                temp->val = num2;\n            } else {\n                temp->val = num1;\n            }\n            temp = temp->next;\n        }\n        // Returning the modified linked list.\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to check if a number is prime\n    boolean isPrime(int n) {\n        // If the number is 1, it is not prime\n        if (n == 1) return false;\n\n        // If the number is 2 or 3, it is prime\n        if (n == 2 || n == 3) return true;\n\n        // Check if the number is divisible by any number from 2 to sqrt(n)\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                // If the number is divisible, it is not prime\n                return false;\n            }\n        }\n        // If the number is not divisible by any number from 2 to sqrt(n), it is prime\n        return true;\n    }\n\n    // Function to update the nodes in linked list with the nearest prime number\n    Node primeList(Node head) {\n        // Start with the first node in the linked list\n        Node temp = head;\n\n        // Traverse through the linked list\n        while (temp != null) {\n            int num = temp.val, num1, num2;\n            num1 = num2 = num;\n\n            // If the node value is 1, update it to 2 as it is the nearest prime number\n            if (num == 1) {\n                temp.val = 2;\n                temp = temp.next;\n                continue;\n            }\n\n            // Find the nearest prime number less than the node value\n            while (!isPrime(num1)) {\n                num1--;\n            }\n\n            // Find the nearest prime number greater than the node value\n            while (!isPrime(num2)) {\n                num2++;\n            }\n\n            // Update the node value with the nearest prime number\n            if (num - num1 > num2 - num) {\n                temp.val = num2;\n            } else {\n                temp.val = num1;\n            }\n\n            // Move to the next node\n            temp = temp.next;\n        }\n\n        // Return the updated linked list\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import Optional\n\n\nclass Solution:\n    # Function to check if a number is prime or not\n    def isPrime(self, n):\n        # Finding the square root of n\n        nn = int(n**0.5) + 1\n\n        # Checking for divisibility from 2 to square root of n\n        for i in range(2, nn):\n            if n % i == 0:\n                return False\n        return True\n\n    # Function to find the closest prime numbers for each node in a linked list\n    def primeList(self, head: Optional['Node']) -> Optional['Node']:\n        temp = head\n\n        # Traversing the linked list\n        while temp:\n\n            # If the node's data is 1, change it to 2 (smallest prime number)\n            if temp.val == 1:\n                temp.val = 2\n            else:\n                num = temp.val\n                num1 = temp.val\n                num2 = temp.val\n\n                # Finding the closest prime number less than the node's data\n                while not self.isPrime(num1):\n                    num1 -= 1\n\n                # Finding the closest prime number greater than the node's data\n                while not self.isPrime(num2):\n                    num2 += 1\n\n                # Checking which closest prime is closer to the node's data and updating it\n                if num - num1 <= num2 - num:\n                    temp.val = num1\n                else:\n                    temp.val = num2\n\n            temp = temp.next\n\n        # Returning the updated linked list\n        return head\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {Node} head\n * @returns {Node}\n */\n\nclass Solution {\n    // Function to check if a number is prime or not\n    isPrime(n) {\n        // Finding the square root of n\n        let nn = Math.floor(Math.sqrt(n)) + 1;\n\n        // Checking for divisibility from 2 to square root of n\n        for (let i = 2; i < nn; i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Function to return all prime numbers in the given link list.\n    primeList(head) {\n        let temp = head;\n\n        // Traversing the linked list\n        while (temp) {\n\n            // If the node's data is 1, change it to 2 (smallest prime number)\n            if (temp.data === 1) {\n                temp.data = 2;\n            } else {\n                let num = temp.data;\n                let num1 = temp.data;\n                let num2 = temp.data;\n\n                // Finding the closest prime number less than the node's data\n                while (!this.isPrime(num1)) {\n                    num1 -= 1;\n                }\n\n                // Finding the closest prime number greater than the node's data\n                while (!this.isPrime(num2)) {\n                    num2 += 1;\n                }\n\n                // Checking which closest prime is closer to the node's data and\n                // updating it\n                if (num - num1 <= num2 - num) {\n                    temp.data = num1;\n                } else {\n                    temp.data = num2;\n                }\n            }\n\n            temp = temp.next;\n        }\n\n        // Returning the updated linked list\n        return head;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}