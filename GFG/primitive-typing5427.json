{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705236,
            "title": "Primitive Typing",
            "titleSlug": "primitive-typing5427",
            "content": "<p><span style=\"font-size:18px\">Given a screen containing alphabets from a-z, we can go from one character to </span><span style=\"font-size:18px\">another character</span><span style=\"font-size:18px\">&nbsp;using a remote. The remote contains left, right, top and bottom keys.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Remote :</strong></span><br />\n<img alt=\"\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/Primitive-Typing.jpg\" /></p>\n\n<p><span style=\"font-size:18px\">Find the&nbsp;shortest possible path to type all characters of given string using the remote. The initial position is top left and all characters of input string should be printed in order. Find&nbsp;the total number of moves in such a path(Move UP, DOWN, LEFT, RIGHT).&nbsp;Pressing OK also accounts for one move.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Screen:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\">a b c d e\nf g h i j\nk l m n o\np q r s t\nu v w x y\nz</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>str = &quot;abc&quot;\n<strong>Output: </strong>5\n<strong>Explanation: </strong>Remote&#39;s position is at &#39;a&#39;\ninitially. So &#39;a&#39; -&gt; &#39;b&#39; = 1 step, \n&#39;b&#39;-&gt; &#39;c&#39;= 1 step. Three OK moves will also\nbe needed to print the three characters.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>str = &quot;a&quot;\n<strong>Output: </strong>1\n<strong>Explanation: </strong>Remote is initially at &#39;a&#39;.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>FindPath()</strong>&nbsp;which takes the string str as input parameter and returns the minimum number of moves to cover all characters of the given string.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Compelxity:&nbsp;</strong>O(n)<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= |str| &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Imagine a remote control interface laid out as a 5x5 grid representing the letters 'a' to 'z', with 'z' occupying the last position. You can navigate this grid using up, down, left, and right keys. The goal is to find the shortest path to type a given string, starting from 'a' at the top-left corner.  Each character in the string must be typed in order. Each movement between letters using the directional keys, as well as pressing 'OK' after selecting a letter, counts as a single move. Determine the minimum number of moves required to type the entire string.",
                "constraints": [
                    "1 <= |str| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "abc",
                        "output": "5",
                        "explanation": "Starting at 'a', move to 'b' (1 move), then to 'c' (1 move).  Finally, press OK for 'a', 'b', and 'c' (3 moves). Total moves: 1 + 1 + 3 = 5."
                    },
                    {
                        "input": "a",
                        "output": "1",
                        "explanation": "Starting at 'a', press OK (1 move). Total moves: 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find Pattern.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\npublic:\n    int FindPath(string str){\n\t    int i = 0,ans=0;\n\t    int curX = 0, curY = 0;\n\t    while (i < str.length())\n\t    {\n\t        int nextX = (str[i] - 'a') / 5;\n\t        int nextY = (str[i] - 'b' + 1) % 5;\n\t        while (curX > nextX)\n\t        {\n\t            //cout << \"Move Up\" << endl;\n\t            ans++;\n\t            curX--;\n\t        }\n\t        while (curY > nextY)\n\t        {\n\t            //cout << \"Move Left\" << endl;\n\t            ans++;\n\t            curY--;\n\t        }\n\t        while (curX < nextX)\n\t        {\n\t            //cout << \"Move Down\" << endl;\n\t            ans++;\n\t            curX++;\n\t        }\n\t        while (curY < nextY)\n\t        {\n\t            //cout << \"Move Right\" << endl;\n\t            ans++;\n\t            curY++;\n\t        }\n\t        ans++;\n\t       // c//out << \"Press OK\" << endl;\n\t        i++;\n\t    }\n\t    return ans;\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int FindPath(string str)\n    {\n        int i = 0, ans = 0;\n        int curX = 0, curY = 0;\n        while (i < str.Length)\n        {\n            int nextX = (str[i] - 'a') / 5;\n            int nextY = (str[i] - 'b' + 1) % 5;\n            while (curX > nextX)\n            {\n                ans++;\n                curX--;\n            }\n            while (curY > nextY)\n            {\n                ans++;\n                curY--;\n            }\n            while (curX < nextX)\n            {\n                ans++;\n                curX++;\n            }\n            while (curY < nextY)\n            {\n                ans++;\n                curY++;\n            }\n            ans++;\n            i++;\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}