{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704786,
            "title": "Primorial of a number",
            "titleSlug": "primorial-of-a-number3830",
            "content": "<p><span style=\"font-size:18px\">Given a number n, the task is to calculate its primorial.&nbsp;<a href=\"https://en.wikipedia.org/wiki/Primorial\">Primorial</a>&nbsp;of a number is similar to factorial of a number. In primorial, not all the natural numbers get multiplied; only prime numbers are multiplied to calculate the primorial of a number. It is denoted with P#.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 5\r\n<strong>Output:</strong>&nbsp;30\r\n<strong>Explanation</strong>:\r\nPriomorial = 2 * 3 * 5 = 30\r\nAs a side note, factorial is 2 * 3 * 4 * 5</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 12\r\n<strong>Output: </strong>2310\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>primorial()</strong>&nbsp;which takes the integer N as input parameters and returns the primorial of number n. Since the answer can be quite large print it modulo 10<sup>9</sup>+7.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong> O(N*sqrt(N))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&nbsp;&le; N &le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number `n`, calculate its primorial. The primorial of a number is the product of all prime numbers less than or equal to `n`. For example, the primorial of 5 is 2 * 3 * 5 = 30. Calculate the primorial modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= N <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "30",
                        "explanation": "The prime numbers less than or equal to 5 are 2, 3, and 5.  Their product is 2 * 3 * 5 = 30."
                    },
                    {
                        "input": "12",
                        "output": "2310",
                        "explanation": "The prime numbers less than or equal to 12 are 2, 3, 5, 7, and 11. Their product is 2 * 3 * 5 * 7 * 11 = 2310."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">An&nbsp;<strong>efficient&nbsp;</strong>method is to find all the prime up-to n using&nbsp;<a href=\"https://www.geeksforgeeks.org/sieve-sundaram-print-primes-smaller-n/\">Sieve of Sundaram&nbsp;</a>and then just calculate the primorial by multiplying them all.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "factorial",
                "slug": "factorial"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//initializing a variable to store the modulo value\nlong long mod = 1e9+7;\n\n//declaring a vector to store prime numbers\nvector<int> primes;\n\nclass Solution {\npublic:\n    //precomputing prime numbers using sieve of Eratosthenes\n    void precompute()\n    {\n        //initializing an array to mark multiples of prime numbers\n        bool sieve[100000] = {0};\n        \n        //iterating over numbers starting from 2\n        //if a number is found to be prime, mark its multiples\n        for (int i = 2; i < 316; i++) {\n            if (sieve[i]) continue;\n            for (int j = 2*i; j < 100000; j += i) {\n                sieve[j] = true;\n            }\n        }\n        \n        //adding prime numbers to the vector\n        primes.push_back(2);\n        for (int i = 3; i < 100000; i += 2) {\n            if (!sieve[i]) primes.push_back(i);\n        }\n    }\n    \n    //function to calculate primorial of a given number\n    long long primorial(long long n){\n        //initializing a variable to store the result\n        long long res = 1;\n\t    \n        //iterating over prime numbers\n        for (const int x : primes) {\n            //if the prime number is greater than n, exit the loop\n            if (x > n) {\n                break;\n            }\n            \n            //calculating the product of prime numbers modulo modulo value\n            res = res*x % 1000000007;\n        }\n        \n        //returning the result\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}