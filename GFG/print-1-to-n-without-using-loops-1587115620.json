{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701189,
            "title": "Print 1 To N Without Loop",
            "titleSlug": "print-1-to-n-without-using-loops-1587115620",
            "content": "<p><span >Print numbers from <strong>1 to n</strong> without the help of loops. You only need to complete the function printNos() that takes n as a parameter and prints the number from 1 to n recursively.<br /></span></p>\n<p><span ><strong>Note</strong>: Don't print any newline, it will be added by the driver code.<br /></span></p>\n<p><span ><strong>Examples:<br /></strong></span></p>\n<pre><span ><strong>Input: </strong>n = 10\n<strong>Output: </strong>1 2 3 4 5 6 7 8 9 10\n</span></pre>\n<pre><span ><strong>Input: </strong>n = 5\n<strong>Output: </strong>1 2 3 4 5</span></pre>\n<pre><span ><strong>Input: </strong>n = 1\n<strong>Output: </strong>1</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= n &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Figure out the base case and step up one by one.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nvoid printNos(int N) {\n    if (N > 0) // The loop runs till N>1\n    {\n        printNos(\n            N - 1); // We keep on recursing till the end as we want to pritn from 1 to N\n        printf(\"%d \", N); // When recursion is done then print N\n    }\n    return;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    /* Prints numbers from 1 to n */\n\n    void printNos(int N) {\n        if (N > 0) // The loop runs till N>1\n        {\n            printNos(\n                N -\n                1); // We keep on recursing till the end as we want to pritn from 1 to N\n            cout << N << \" \"; // When recursion is done then print N\n        }\n        return;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    public void printNos(int N) {\n        if (N > 0) // The loop runs till N>1\n        {\n            printNos(\n                N -\n                1); // We keep on recursing till the end as we want to pritn from 1 to N\n            System.out.print(N + \" \"); // When recursion is done then print N\n        }\n        return;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def printNos(self, N):\n        if (N > 0):  #The loop runs till N>1\n            self.printNos(\n                N - 1\n            )  #We keep on recursing till the end as we want to print from 1 to N\n            print(N, end=\" \")  #When recursion is done then print N\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Complete this function\n    // Function to print numbers from 1 to N.\n    public void printNos(int N) {\n        if (N > 0) {\n            printNos(N - 1);\n            Console.Write(N + \" \");\n        }\n        return;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() {\n        this.s = \"\"; // Initialize an empty string to store the numbers.\n    }\n\n    printNosRecur(N) {\n        if (N === 0) {\n            return; // Base case: return when N reaches 0.\n        }\n        this.printNosRecur(N - 1); // Recursive call to printNosRecur() with N-1.\n        this.s += N + \" \";         // Append N to the string s.\n    }\n\n    printNos(N) {\n        this.printNosRecur(N); // Call the printNosRecur() function.\n        console.log(this.s);   // Print the final string s.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}