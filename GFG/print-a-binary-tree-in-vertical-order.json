{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700256,
            "title": "Vertical Tree Traversal",
            "titleSlug": "print-a-binary-tree-in-vertical-order",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>root</strong> of a Binary Tree, find the <strong>vertical traversal</strong> of it starting from the leftmost level to the rightmost level.<br />If there are multiple nodes passing through a vertical line, then they should be printed as they appear in <strong>level order</strong> traversal of the tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">root[]</span><strong style=\"font-size: 18px;\"> </strong><span style=\"font-size: 18px;\">= [1, 2, 3, 4, 5, 6, 7, N, N, N, N, N, 8, N, 9]\n     <img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20241009173605620782/Vertical-Taversal-.webp\" alt=\"Vertical-Taversal-\" width=\"268\" height=\"238\" />\\t    \n</span></span><span style=\"font-size: 18px;\"><strong>Output: </strong>[[4], [2], [1, 5, 6], [3, 8], [7], [9]]\n<strong>Explanation: </strong>The below image shows the horizontal distances used to print vertical traversal starting from the leftmost level to the rightmost level.<br />     <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/887914/Web/Other/blobid1_1739369757.png\" alt=\"\" width=\"264\" height=\"241\" /></span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">root[] = </span><span style=\"font-size: 18px;\">[1, 2, 3, 4, 5, N, 6]</span>\n     <img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/887914/Web/Other/blobid1_1739361586.png\" alt=\"\" width=\"270\" height=\"221\" />\n<strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">[[4], [2], [1, 5], [3], [6]]</span><strong style=\"font-size: 18px;\"><br /></strong></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">From left to right the vertical order will be </span><span >[[4], [2], [1, 5], [3], [6]]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= node-&gt;data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a Binary Tree, perform a vertical traversal. The traversal should start from the leftmost level and proceed to the rightmost level. If multiple nodes fall on the same vertical line, they should be ordered according to their level order traversal.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5, 6, 7, N, N, N, N, N, 8, N, 9]",
                        "output": "[[4], [2], [1, 5, 6], [3, 8], [7], [9]]",
                        "explanation": "The vertical traversal organizes nodes based on their horizontal distance from the root. Nodes on the same vertical line are listed in the order they appear in a level-order traversal."
                    },
                    {
                        "input": "[1, 2, 3, 4, 5, N, 6]",
                        "output": "[[4], [2], [1, 5], [3], [6]]",
                        "explanation": "The vertical traversal lists nodes from left to right based on their horizontal distance. Nodes at the same horizontal distance are ordered by their level in the tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>To solve the vertical order traversal of a binary tree, perform a level-order traversal with a queue, track horizontal distances in a map, and then read nodes from the map in order.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "accolite",
            "amazon",
            "microsoft",
            "makemytrip",
            "walmart",
            "browserstack",
            "dell",
            "grofers",
            "netskope"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Helper function to perform DFS and\n    // store nodes at different horizontal distances\n    void DFS(Node *root, int hd, int &mn, unordered_map<int, vector<int>> &mp) {\n        if (root == nullptr)\n            return;\n\n        // Store the current node in the map at horizontal distance hd\n        mp[hd].push_back(root->data);\n\n        // Update the minimum horizontal distance\n        mn = min(mn, hd);\n\n        // Recursively traverse the left and right subtrees\n        DFS(root->left, hd - 1, mn, mp);\n        DFS(root->right, hd + 1, mn, mp);\n    }\n\n    // Function to perform vertical order traversal of a binary tree\n    vector<vector<int>> verticalOrder(Node *root) {\n\n        // HashMap to store nodes at each horizontal distance\n        unordered_map<int, vector<int>> mp;\n\n        // Variable to track the minimum horizontal distance\n        int mn = 0;\n\n        // Perform DFS to fill the hashmap with vertical levels\n        DFS(root, 0, mn, mp);\n\n        vector<vector<int>> res;\n        int hd = mn;\n\n        // Traverse the map from minimum to maximum horizontal distance\n        while (mp.find(hd) != mp.end()) {\n            res.push_back(mp[hd]);\n            hd++;\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Helper function to perform DFS and\n    // store nodes at different horizontal distances\n    static void DFS(Node root, int hd, int[] mn,\n                    HashMap<Integer, ArrayList<Integer>> mp) {\n        if (root == null) return;\n\n        // Store the current node in the map at horizontal distance hd\n        if (!mp.containsKey(hd)) mp.put(hd, new ArrayList<>());\n\n        mp.get(hd).add(root.data);\n\n        // Update the minimum horizontal distance\n        mn[0] = Math.min(mn[0], hd);\n\n        // Recursively traverse the left and right subtrees\n        DFS(root.left, hd - 1, mn, mp);\n        DFS(root.right, hd + 1, mn, mp);\n    }\n\n    // Function to perform vertical order traversal of a binary tree\n    static ArrayList<ArrayList<Integer>> verticalOrder(Node root) {\n\n        // HashMap to store nodes at each horizontal distance\n        HashMap<Integer, ArrayList<Integer>> mp = new HashMap<>();\n\n        // Array to track the minimum horizontal distance (mutable)\n        int[] mn = {0};\n\n        // Perform DFS to fill the hashmap with vertical levels\n        DFS(root, 0, mn, mp);\n\n        ArrayList<ArrayList<Integer>> res = new ArrayList<>();\n        int hd = mn[0];\n\n        // Traverse the map from minimum to maximum horizontal distance\n        while (mp.containsKey(hd)) {\n            res.add(mp.get(hd));\n            hd++;\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    # Helper function to perform DFS and\n    # store nodes at different horizontal distances\n    def DFS(self, root, hd, mn, mp):\n        if root is None:\n            return\n\n        # Store the current node in the map at horizontal distance hd\n        if hd not in mp:\n            mp[hd] = []\n        mp[hd].append(root.data)\n\n        # Update the minimum horizontal distance\n        mn[0] = min(mn[0], hd)\n\n        # Recursively traverse the left and right subtrees\n        self.DFS(root.left, hd - 1, mn, mp)\n        self.DFS(root.right, hd + 1, mn, mp)\n\n    # Function to perform vertical order traversal of a binary tree\n    def verticalOrder(self, root):\n        # Dictionary to store nodes at each horizontal distance\n        mp = {}\n\n        # List to track the minimum horizontal distance (mutable)\n        mn = [0]\n\n        # Perform DFS to fill the dictionary with vertical levels\n        self.DFS(root, 0, mn, mp)\n\n        res = []\n        hd = mn[0]\n\n        # Traverse the dictionary from minimum to maximum horizontal distance\n        while hd in mp:\n            res.append(mp[hd])\n            hd += 1\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    // Helper function to perform DFS and\n    // store nodes at different horizontal distances\n    DFS(root, hd, mn, mp) {\n        if (root === null) return;\n\n        // Store the current node in the map at horizontal distance hd\n        if (!mp.has(hd)) mp.set(hd, []);\n\n        mp.get(hd).push(root.data);\n\n        // Update the minimum horizontal distance\n        mn.val = Math.min(mn.val, hd);\n\n        // Recursively traverse the left and right subtrees\n        this.DFS(root.left, hd - 1, mn, mp);\n        this.DFS(root.right, hd + 1, mn, mp);\n    }\n\n    // Function to perform vertical order traversal of a binary tree\n    verticalOrder(root) {\n\n        // Map to store nodes at each horizontal distance\n        let mp = new Map();\n\n        // Variable to track the minimum horizontal distance\n        let mn = {val : 0};\n\n        // Perform DFS to fill the map with vertical levels\n        this.DFS(root, 0, mn, mp);\n\n        let res = [];\n        let hd = mn.val;\n\n        // Traverse the map from minimum to maximum horizontal distance\n        while (mp.has(hd)) {\n            res.push(mp.get(hd));\n            hd++;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}