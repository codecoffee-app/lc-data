{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701247,
            "title": "Print adjacency list",
            "titleSlug": "print-adjacency-list-1587115620",
            "content": "<p><span style=\"font-family: arial, helvetica, sans-serif;\"><span style=\"font-size: 18px;\">Given an&nbsp;</span></span><span style=\"font-family: arial, helvetica, sans-serif; font-size: 18px;\">undirected graph with&nbsp;</span><strong style=\"font-family: arial, helvetica, sans-serif; font-size: 18px;\">V&nbsp;</strong><span style=\"font-family: arial, helvetica, sans-serif; font-size: 18px;\">nodes and </span><span style=\"font-family: arial, helvetica, sans-serif;\"><span style=\"font-size: 18px;\"><strong>E</strong> <strong>edges</strong>, create and return an <a href=\"https://www.geeksforgeeks.org/adjacency-list-meaning-definition-in-dsa/\" target=\"_blank\" rel=\"noopener\">adjacency list</a> of the graph</span></span><span style=\"font-size: 18px; font-family: arial, helvetica, sans-serif;\">. <strong>0-based indexing</strong> is followed everywhere.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:<br /></strong>V = 5, E = 7<br />edges = [[0,1], [0,4], [4,1], [4,3], [1,3], [1,2], [3,2]]\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/701247/Web/Other/5c5cf82d-6510-48e7-834e-311f933ce758_1685086928.png\" alt=\"\" />\n<strong>Output:</strong> \n[[1,4], [0,2,3,4], [1,3], [1,2,4], [0,1,3]]\n<strong>Explanation</strong>:\nNode 0 is connected to 1 and 4.<br /></span><span style=\"font-size: 18px;\">Node 1 is connected to 0,2,3 and 4.<br /></span><span style=\"font-size: 18px;\">Node 2 is connected to 1 and 3.<br />Node 3 is connected to 1,2 and 4.<br />Node 4 is connected to 0,1 and 3.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:<br /></strong>V = 4, E = 3<br />edges = [[0,3], [0,2], [2,1]]\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/701247/Web/Other/e8e7865d-f04d-4d93-bf1f-c6b6baee639a_1685086929.png\" alt=\"\" />\n\n<strong>Output:</strong> \n[[2,3], [2], [0,1], [0]]\n<strong>Explanation</strong>:<br /></span><span style=\"font-size: 18px;\">Node 0 is connected to 2 and 3.<br />Node 1 is only connected to 2.<br />Node 2 is connected to 0 and 1.<br />Node 3 is only connected to 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; V, E &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with V nodes and E edges, create and return an adjacency list of the graph. 0-based indexing is followed.",
                "constraints": [
                    "1 <= V, E <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "V = 5, E = 7\nedges = [[0,1], [0,4], [4,1], [4,3], [1,3], [1,2], [3,2]]",
                        "output": "[[1,4], [0,2,3,4], [1,3], [1,2,4], [0,1,3]]",
                        "explanation": "Node 0 is connected to nodes 1 and 4.\nNode 1 is connected to nodes 0, 2, 3, and 4.\nNode 2 is connected to nodes 1 and 3.\nNode 3 is connected to nodes 1, 2, and 4.\nNode 4 is connected to nodes 0, 1, and 3."
                    },
                    {
                        "input": "V = 4, E = 3\nedges = [[0,3], [0,2], [2,1]]",
                        "output": "[[2,3], [2], [0,1], [0]]",
                        "explanation": "Node 0 is connected to nodes 2 and 3.\nNode 1 is connected to node 2.\nNode 2 is connected to nodes 0 and 1.\nNode 3 is connected to node 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to return the adjacency list for each vertex.\n    vector<vector<int>> printGraph(int V, vector<pair<int, int>>& edges) {\n        vector<vector<int>> adj(V);\n        for (int i = 0; i < edges.size(); i++) {\n            int node1 = edges[i].first;\n            int node2 = edges[i].second;\n            adj[node1].push_back(node2);\n            adj[node2].push_back(node1);\n        }\n        return adj;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public List<List<Integer>> printGraph(int V, int edges[][]) {\n        List<List<Integer>> graph = new ArrayList<>();\n        for (int i = 0; i < V; i++) {\n            graph.add(new ArrayList<>());\n        }\n        for (int i[] : edges) {\n            graph.get(i[0]).add(i[1]);\n            graph.get(i[1]).add(i[0]);\n        }\n        return graph;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def printGraph(self, V: int, edges: List[List[int]]) -> List[List[int]]:\n        # Initialize an empty adjacency list\n        adj = [[] for _ in range(V)]\n\n        # Iterate through the edges and populate the adjacency list\n        for edge in edges:\n            node1, node2 = edge\n            adj[node1].append(node2)\n            adj[node2].append(node1)\n\n        return adj\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    printGraph(V, edges) {\n        const graph = new Array(V).fill().map(() => []);\n        for (const edge of edges) {\n            const [src, dest] = edge;\n            graph[src].push(dest);\n            graph[dest].push(src);\n        }\n        return graph;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}