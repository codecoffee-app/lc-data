{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 875869,
            "title": "Find all triplets with given sum",
            "titleSlug": "print-all-triplets-with-given-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong>. The task is to find triplets in an array whose sum equals a given number <strong>k</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, -1, 2, -3, 1], k = -2<br /><strong>Output:</strong> [[0, -3, 1], [-1, 2, -3]] <strong>\nExplanation: </strong>If we calculate the sum of the output, 0 + (-3) + 1 = -2, (-1) + 2 + (-3) = -2</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>arr[] = [1, -2, 1, 0, 5], k = 0\n<strong>Output: </strong>[[1, -2, 1]] <strong>\nExplanation: </strong>If we calculate the sum of the output, 1 + (-2) + 1 = 0</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>3</sup><br />-1000 &lt;= k &lt;= 1000<br />-100 &lt;= arr[] &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find all unique triplets whose sum equals a given target value, k.",
                "constraints": [
                    "1 <= arr.length <= 1000",
                    "-1000 <= k <= 1000",
                    "-100 <= arr[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[0, -1, 2, -3, 1], k = -2",
                        "output": "[[0, -3, 1], [-1, 2, -3]]",
                        "explanation": "The triplets [0, -3, 1] and [-1, 2, -3] both sum to -2 (0 + (-3) + 1 = -2, (-1) + 2 + (-3) = -2)."
                    },
                    {
                        "input": "[1, -2, 1, 0, 5], k = 0",
                        "output": "[[1, -2, 1]]",
                        "explanation": "The triplet [1, -2, 1] sums to 0 (1 + (-2) + 1 = 0)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; background-color: #ffffff;\">The&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">two pointer technique</strong><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;can be brought into action using the sorting technique.</span></p>",
            "<p><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; background-color: #ffffff;\">The idea here is to fix one pointer&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">(say a)</strong><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;and use the remaining pointers to find the pair having the required sum&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">Target-value at(a)</strong><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;efficiently.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<vector<int>> findTriplets(vector<int> &arr, int k) {\n        int n = arr.size();\n        vector<vector<int>> res;\n        if (n <= 2)\n            return res;\n\n        sort(arr.begin(), arr.end());\n\n        for (int i = 0; i < n; i++) {\n\n            if (i > 0 && arr[i] == arr[i - 1]) // avoid duplicate triplets count\n                continue;\n\n            int num = arr[i];\n            int target = k - num;\n\n            for (int l = i + 1, r = n - 1; l < r;) {\n\n                if (arr[l] + arr[r] > target)\n                    r--;\n\n                else if (arr[l] + arr[r] < target)\n                    l++;\n\n                else {\n                    // arr[l] + arr[r] == target\n                    res.push_back({arr[i], arr[l], arr[r]});\n\n                    // skip duplicates\n                    while (l < n - 1 && arr[l] == arr[l + 1])\n                        l++;\n                    while (r > 0 && arr[r] == arr[r - 1])\n                        r--;\n\n                    l++;\n                    r--;\n                }\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public ArrayList<ArrayList<Integer>> findTriplets(int[] arr, int k) {\n        // Sort the array\n        Arrays.sort(arr);\n        int n = arr.length;\n        // Initialize result list to store all triplets\n        ArrayList<ArrayList<Integer>> result = new ArrayList<>();\n\n        // Iterate through the array\n        for (int i = 0; i < n - 2; i++) {\n            // Initialize left and right pointers\n            int l = i + 1;\n            int r = n - 1;\n            int x = arr[i];\n\n            // Check for triplets with the current element\n            while (l < r) {\n                int currentSum = x + arr[l] + arr[r];\n\n                // If the sum matches the target\n                if (currentSum == k) {\n                    // Create a triplet and add to result\n                    ArrayList<Integer> triplet = new ArrayList<>();\n                    triplet.add(x);\n                    triplet.add(arr[l]);\n                    triplet.add(arr[r]);\n                    result.add(triplet);\n\n                    // Move left and right pointers\n                    l++;\n                    r--;\n\n                    // Avoid duplicates (optional, can add if needed)\n                    while (l < r && arr[l] == arr[l - 1]) l++;\n                    while (l < r && arr[r] == arr[r + 1]) r--;\n                }\n                // If current sum is less than target, move left pointer to increase the\n                // sum\n                else if (currentSum < k) {\n                    l++;\n                }\n                // If current sum is more than target, move right pointer to decrease\n                // the sum\n                else {\n                    r--;\n                }\n            }\n            // Optional: avoid duplicate starting points\n            while (i < n - 2 && arr[i] == arr[i + 1]) i++;\n        }\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def findTriplets(self, arr, k):\n        # Sort the array elements\n        arr.sort()\n        n = len(arr)\n        result = []\n\n        # Iterate through the array\n        for i in range(0, n - 2):  # We need at least three elements\n\n            # Skip duplicate elements to avoid repeated triplets\n            if i > 0 and arr[i] == arr[i - 1]:\n                continue\n\n            # Initialize left and right pointers\n            l = i + 1\n            r = n - 1\n            x = arr[i]\n\n            # Check for pairs with arr[i] that sum to k\n            while l < r:\n                current_sum = x + arr[l] + arr[r]\n                if current_sum == k:\n                    # Add triplet to the result list\n                    result.append([x, arr[l], arr[r]])\n                    l += 1\n                    r -= 1\n\n                    # Skip duplicates for l and r\n                    while l < r and arr[l] == arr[l - 1]:\n                        l += 1\n                    while l < r and arr[r] == arr[r + 1]:\n                        r -= 1\n\n                # If sum is less than k, move the left pointer to increase sum\n                elif current_sum < k:\n                    l += 1\n\n                # If sum is greater than k, move the right pointer to decrease sum\n                else:\n                    r -= 1\n\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findTriplets(arr, k) {\n        arr.sort((a, b) => a - b); // Sort the array\n        let n = arr.length;\n        let result = [];\n\n        for (let i = 0; i < n - 2; i++) { // Iterate through the array\n            // Skip duplicate elements\n            if (i > 0 && arr[i] == arr[i - 1]) continue;\n\n            let l = i + 1;\n            let r = n - 1;\n            let x = arr[i];\n\n            while (l < r) {\n                let current_sum = x + arr[l] + arr[r];\n                if (current_sum === k) {\n                    result.push([ x, arr[l], arr[r] ]);\n                    l++;\n                    r--;\n\n                    // Skip duplicates for the left and right pointers\n                    while (l < r && arr[l] == arr[l - 1]) l++;\n                    while (l < r && arr[r] == arr[r + 1]) r--;\n                } else if (current_sum < k) {\n                    l++;\n                } else {\n                    r--;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}