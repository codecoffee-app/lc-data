{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703300,
            "title": "Print an array in Pendulum Arrangement",
            "titleSlug": "print-an-array-in-pendulum-arrangement4004",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>.<strong> </strong>Arrange the elements of the array&nbsp;in a way similar to the to-and-fro movement of a Pendulum.</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">The minimum element out of the list of integers must come in the center position of the array. If there are even elements, then the minimum element should be moved to (n-1)/2 index (considering that indexes start from 0)</span></li>\n<li><span style=\"font-size: 18px;\">The next number (next to a minimum) in ascending order, goes to the right, and the next to the next number goes to the left of the minimum number and continues like a Pendulum.</span></li>\n<li><span style=\"font-size: 18px;\">As higher numbers are reached, one goes to one side in a to-and-fro manner similar to that of a Pendulum.</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 3, 2, 5, 4]<br /><strong>Output: </strong>[5, 3, 1, 2, 4]<br /><strong>Explanation: </strong> The minimum element is 1, so it is moved to the middle. The next higher element 2 is moved to the right of the middle element while the next higher element 3 is moved to the left of the middle element and this process is continued.</span></pre>\n<pre><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Input</strong><strong>: </strong>arr[] = [11, 12, 31, 14, 5]\n<strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">Output</strong><strong>: </strong>[31, 12, 5, 11, 14]</span><br /><span ><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> The minimum element is 5, so it is moved to the middle. The next higher element 11 is moved to the right of the middle element while the next higher element 12 is moved to the left of the middle element and this process is continued.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlog(n))<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1 &lt;= arr.size() &lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">0 &lt;= arr[i] &lt;= 10</span><sup><span style=\"font-size: 15px;\">5</span></sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, rearrange the elements to mimic a pendulum's to-and-fro motion. The smallest element should be placed at the center of the array (at index (n-1)/2 for even-sized arrays). The next smallest element goes to the right, the one after that to the left, and so on, alternating sides of the center element as the numbers increase.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 3, 2, 5, 4]",
                        "output": "[5, 3, 1, 2, 4]",
                        "explanation": "The smallest element (1) is placed in the middle. The next smallest (2) is placed to the right of 1, and the next smallest (3) is placed to the left of 1. This pattern continues with 4 and 5."
                    },
                    {
                        "input": "[11, 12, 31, 14, 5]",
                        "output": "[31, 12, 5, 11, 14]",
                        "explanation": "The smallest element (5) is placed in the middle. The next smallest (11) is placed to the right of 5, and the next smallest (12) is placed to the left of 5. This pattern continues with 14 and 31."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14px;\">The idea is to sort the array first. Once the array is sorted, use an auxiliary array to store elements one by one.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "factset"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n\n  public:\n    // Returns pendulam arrangement of arr[]\n    vector<int> pendulumArrangement(vector<int>& arr) {\n        // Sorting the array in ascending order\n        int n = arr.size();\n        sort(arr.begin(), arr.end());\n        // Initializing a new array for the pendulum arrangement\n        int op[n];\n        // Finding the middle index of the array\n        int mid = (n - 1) / 2;\n\n        // Assigning the first element of the sorted array to the middle index of the\n        // new array\n        int j = 1, i = 1;\n        op[mid] = arr[0];\n\n        // Looping through the elements of the sorted array and distributing them in the\n        // pendulum arrangement\n        for (i = 1; i <= mid; i++) {\n            // Assigning the current element to the next higher index in the new array\n            op[mid + i] = arr[j++];\n            // Assigning the next element to the next lower index in the new array\n            op[mid - i] = arr[j++];\n        }\n        // If the length of the array is even, assigning the last remaining element to\n        // the next higher index in the new array\n        if (n % 2 == 0)\n            op[mid + i] = arr[j];\n\n        // Creating a vector from the new array\n        vector<int> v;\n        for (i = 0; i < n; i++)\n            v.push_back(op[i]);\n\n        // Returning the pendulum arrangement as a vector\n        return v;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int[] pendulumArrangement(int arr[]) {\n        // Sorting the array in ascending order\n        Arrays.sort(arr);\n        int n = arr.length;\n\n        // Creating a new array to store the rearranged elements\n        int[] op = new int[n];\n\n        // Finding the index of the middle element in the array\n        int mid = (n - 1) / 2;\n\n        // Placing the smallest element in the middle index of the new array\n        int j = 1, i = 1;\n        op[mid] = arr[0];\n\n        // Rearranging the remaining elements in the new array in a pendulum arrangement\n        for (i = 1; i <= mid; i++) {\n            op[mid + i] = arr[j++];\n            op[mid - i] = arr[j++];\n        }\n\n        // If the length of the array is even, placing the last remaining element in the\n        // new array\n        if (n % 2 == 0) op[mid + i] = arr[j];\n\n        // Returning the rearranged array\n        return op;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def pendulumArrangement(self, arr):\n        n = len(arr)\n        array = [0] * n\n\n        arr.sort()\n\n        mid = n // 2\n\n        if n % 2 == 0:\n            mid = (n - 1) // 2\n\n        array[mid] = min(arr)\n\n        left = []\n        right = []\n\n        for i in range(1, n):\n            if i % 2 != 0:\n                right.append(arr[i])\n            else:\n                left.append(arr[i])\n\n        leftt = left[::-1]\n\n        array[:mid] = leftt[:]\n        array[mid + 1:] = right[:]\n\n        return array\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Returns pendulum arrangement of arr[]\n    pendulumArrangement(arr) {\n        // Sorting the array in ascending order\n        arr.sort((a, b) => a - b);\n        let n = arr.length;\n\n        // Initializing a new array for the pendulum arrangement\n        let op = new Array(n);\n\n        // Finding the middle index of the array\n        let mid = Math.floor((n - 1) / 2);\n\n        // Assigning the first element of the sorted array to the middle index of the\n        // new array\n        let j = 1;\n        op[mid] = arr[0];\n\n        // Looping through the elements of the sorted array and distributing them in the\n        // pendulum arrangement\n        for (let i = 1; i <= mid; i++) {\n            // Assigning the current element to the next higher index in the new array\n            op[mid + i] = arr[j++];\n            // Assigning the next element to the next lower index in the new array\n            op[mid - i] = arr[j++];\n        }\n\n        // If the length of the array is even, assigning the last remaining element to\n        // the next higher index in the new array\n        if (n % 2 === 0) op[mid + Math.floor((n + 1) / 2)] = arr[j];\n\n        // Returning the pendulum arrangement as an array\n        return op;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}