{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701966,
            "title": "Print Anagrams Together",
            "titleSlug": "print-anagrams-together",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of strings, return all groups of strings that are anagrams. The strings in each group must be arranged in the order of their appearance in the original array. Refer to the sample case for clarification.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [\"act\", \"god\", \"cat\", \"dog\", \"tac\"]\n<strong>Output: </strong>[[\"act\", \"cat\", \"tac\"], [\"god\", \"dog\"]]<strong>\nExplanation: </strong>There are 2 groups of anagrams \"god\", \"dog\" make group 1. \"act\", \"cat\", \"tac\" make group 2.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [\"no\", \"on\", \"is\"]\n<strong>Output: </strong>[[\"is\"], [\"no\", \"on\"]]<strong>\nExplanation: </strong>There are 2 groups of anagrams \"is\" makes group 1. \"no\", \"on\" make group 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [\"listen\", \"silent\", \"enlist\", \"abc\", \"cab\", \"bac\", \"rat\", \"tar\", \"art\"]<br /><strong>Output</strong>: [[\"abc\", \"cab\", \"bac\"], [\"listen\", \"silent\", \"enlist\"], [\"rat\", \"tar\", \"art\"]]<br /><strong>Explanation</strong>: <br />Group 1: \"abc\", \"bac\", and \"cab\" are anagrams.\nGroup 2: \"listen\", \"silent\", and \"enlist\" are anagrams.\nGroup 3: \"rat\", \"tar\", and \"art\" are anagrams.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= arr.size() &lt;=100<br /></span><span style=\"font-size: 18px;\">1&lt;= arr[i].size() &lt;=10</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >1. Sort each word separately and then compare it to others to find&nbsp;anagrams.</span></p>",
            "<p><span style=\"font-size:18px\">2. Use hash map to compare words and store their relative order.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "microsoft",
            "snapdeal",
            "d-e-shaw",
            "goldman-sachs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    vector<vector<string> > anagrams(vector<string>& arr) {\n        vector<vector<string> > result;\n\n        // hash map to maintain groups of anagrams\n        unordered_map<string, vector<string> > umap;\n\n        for (int i = 0; i < arr.size(); i++) {\n            string s = arr[i];\n\n            // sort each string\n            sort(s.begin(), s.end());\n\n            // add original string to corresponding sorted string in hash map\n            umap[s].push_back(arr[i]);\n        }\n        for (auto itr = umap.begin(); itr != umap.end(); itr++)\n            result.push_back(itr->second);\n\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public ArrayList<ArrayList<String>> anagrams(String[] arr) {\n        ArrayList<ArrayList<String>> result = new ArrayList<>();\n\n        // HashMap to maintain groups of anagrams\n        Map<String, ArrayList<String>> umap = new HashMap<>();\n\n        for (String s : arr) {\n            char[] charArray = s.toCharArray();\n\n            // Sort each string\n            Arrays.sort(charArray);\n            String sortedStr = new String(charArray);\n\n            // Add original string to corresponding sorted string in hash map\n            umap.computeIfAbsent(sortedStr, k -> new ArrayList<>()).add(s);\n        }\n        for (ArrayList<String> x : umap.values()) {\n            result.add(x);\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    # Function to find all anagrams in a given list of strings.\n    def anagrams(self, s):\n        # Creating a defaultdict to store anagrams.\n        d = defaultdict(list)\n\n        # Iterating over the given list of strings.\n        for i, e in enumerate(s):\n            # Sorting each string to form a key for grouping anagrams.\n            e = str(sorted(e))\n            # Appending the current string to its corresponding group.\n            d[e].append(s[i])\n\n        # Creating a list to store the groups of anagrams.\n        res = []\n        # Iterating over the values of the defaultdict.\n        # Each value represents a group of anagrams.\n        for l in d.values():\n            # Appending the group of anagrams to the result list.\n            res.append(l)\n\n        # Returning the final list of groups of anagrams.\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\nclass Solution {\n    // function to find all anagram words in a list of strings\n    public List<List<string>> anagrams(string[] arr) {\n        Dictionary<string, List<string>> umap = new Dictionary<string, List<string>>();\n\n        foreach (string s in arr) {\n            char[] c = s.ToCharArray();\n            Array.Sort(c);\n            string sortedString = new string(c);\n\n            if (umap.ContainsKey(sortedString)) {\n                umap[sortedString].Add(s);\n            } else {\n                List<string> tempList = new List<string>();\n                tempList.Add(s);\n                umap.Add(sortedString, tempList);\n            }\n        }\n\n        List<List<string>> result = new List<List<string>>();\n\n        foreach (var pair in umap) {\n            result.Add(pair.Value);\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    anagrams(arr) {\n        const map = new Map(); // Hash map to store groups of anagrams\n\n        // Step 1: Group strings by their sorted version\n        for (let i = 0; i < arr.length; i++) {\n            let s = arr[i];\n\n            // Sort the string to get its canonical form\n            const sorted = s.split('').sort().join('');\n\n            // Add the original string to the corresponding group\n            if (!map.has(sorted)) {\n                map.set(sorted, []);\n            }\n            map.get(sorted).push(s);\n        }\n\n        // Step 2: Collect groups and sort them lexicographically\n        const result = Array.from(map.values())\n                           .sort((a, b) => a[0].localeCompare(\n                                     b[0])); // Sort groups based on their first element\n\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}