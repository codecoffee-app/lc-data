{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703513,
            "title": "Print Bracket Number",
            "titleSlug": "print-bracket-number4058",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>str</strong>, the task is to find the bracket numbers, i.e., for each bracket in str, return <strong>i</strong> if the bracket is the <strong>i<sup>th</sup></strong> opening or closing bracket&nbsp;to appear in the string.&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">&nbsp;Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>  str = \"(aa(bdc))p(dee)</span><span style=\"font-size: 18px;\">\"\n<strong>Output:</strong> 1 2 2 1 3 3\n<strong>Explanation:</strong> The highlighted brackets in\nthe given string <strong>(</strong>aa<strong>(</strong>bdc<strong>))</strong>p<strong>(</strong>dee<strong>)</strong> are\nassigned the numbers as: 1 2 2 1 3 3.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>  str = \"(((()(\"\n<strong>Output:</strong> 1 2 3 4 4 5\n<strong>Explanation:</strong> The highlighted brackets in\nthe given string <strong>(((()(</strong> are assigned\nthe numbers as: 1 2 3 4 4 5</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|str|)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(|str|)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |str| &lt;= 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">str contains lowercase English alphabets, and '(', ')' characters<br />At any index, the number of opening brackets is greater than or equal to closing brackets</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` containing lowercase English alphabets and parentheses ('(' and ')'), identify each bracket's number based on its order of appearance.  Assign the `i`th number to a bracket if it is the `i`th opening or closing bracket encountered in the string.",
                "constraints": [
                    "1 <= |str| <= 10^5",
                    "str contains lowercase English alphabets, '(' and ')' characters",
                    "At any index, the number of opening brackets is greater than or equal to closing brackets"
                ],
                "testcases": [
                    {
                        "input": "(aa(bdc))p(dee)",
                        "output": "1 2 2 1 3 3",
                        "explanation": "The opening parenthesis '(' is the 1st opening bracket. The second '(' is the 2nd. The first ')' is the 2nd closing bracket corresponding to the 2nd opening. The next ')' is the 1st closing bracket corresponding to the 1st opening. The last '(' is the 3rd opening bracket, and the final ')' is its corresponding 3rd closing bracket."
                    },
                    {
                        "input": "(((()(",
                        "output": "1 2 3 4 4 5",
                        "explanation": "The given string has 6 opening brackets. They are numbered in the order of their appearance from 1 to 5. The 5th and the 6th opening brackets both are assigned the number 4 and 5 respectively."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">You can use a stack to keep track of the IDs of the opening parentheses.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Regular Expression",
                "slug": "regular-expression"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to assign bracket numbers to each parenthesis in a string.\n    vector<int> bracketNumbers(string str) {\n        string temp = str;\n        vector<int> ans; // vector to store the bracket numbers\n        stack<int> st;   // stack to store the opening bracket numbers\n\n        int bal = 0; // variable to keep track of current bracket number\n\n        // iterating over the string\n        for (int i = 0; i < temp.size(); i++) {\n            // if opening bracket is encountered\n            if (temp[i] == '(') {\n                // incrementing the bracket number\n                bal++;\n\n                // adding the bracket number to the result vector and stack\n                ans.push_back(bal);\n                st.push(bal);\n            }\n            // if closing bracket is encountered\n            else if (temp[i] == ')') {\n                // adding the top bracket number from the stack to the result vector\n                ans.push_back(st.top());\n                st.pop();\n            }\n        }\n\n        return ans; // returning the result vector with assigned bracket numbers\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    ArrayList<Integer> bracketNumbers(String str) {\n        // code here\n        String S = str;\n        ArrayList<Integer> ans = new ArrayList<>();\n        Stack<Integer> st = new Stack<>();\n\n        int bal = 0; // variable to keep track of current bracket number\n\n        char c[] = S.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            // if opening bracket is encountered\n            if (c[i] == '(') {\n                // incrementing the bracket number\n                bal++;\n\n                // adding the bracket number to the result vector and stack\n                ans.add(bal);\n                st.push(bal);\n            }\n            // if closing bracket is encountered\n            else if (c[i] == ')') {\n                // adding the top bracket number from the stack to the result vector\n                ans.add(st.peek());\n                st.pop();\n            }\n        }\n\n        return ans; // returning the result vector with assigned bracket numbers\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# from typing import List\n\n\nclass Solution:\n\n    def bracketNumbers(self, str):\n        ans = []  # List to store the bracket numbers\n        st = []  # Stack to store the opening bracket numbers\n\n        bal = 0  # Variable to keep track of current bracket number\n\n        # Iterating over the string\n        for i in range(len(str)):\n            # If opening bracket is encountered\n            if str[i] == '(':\n                # Incrementing the bracket number\n                bal += 1\n\n                # Adding the bracket number to the result list and stack\n                ans.append(bal)\n                st.append(bal)\n            # If closing bracket is encountered\n            elif str[i] == ')':\n                # Adding the top bracket number from the stack to the result list\n                ans.append(st.pop())\n\n        return ans  # Returning the result list with assigned bracket numbers\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    bracketNumbers(str) {\n        let ans = [];\n        let st = [];\n        let bal = 0;\n\n        for (let i = 0; i < str.length; i++) {\n            if (str[i] === '(') {\n                bal++;\n                ans.push(bal);\n                st.push(bal);\n            } else if (str[i] === ')') {\n                ans.push(st[st.length - 1]);\n                st.pop();\n            }\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}