{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700249,
            "title": "BST Keys in a Range",
            "titleSlug": "print-bst-elements-in-given-range",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Search Tree<strong>&nbsp;</strong>and a range <strong>[low, high]</strong>. Find all&nbsp;the numbers&nbsp;in the BST that lie in the given range.<br /><strong>Note:</strong> Element greater than or equal to root go to the right side.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>&nbsp; &nbsp; &nbsp; &nbsp;17\n &nbsp; &nbsp; /&nbsp; &nbsp; \\\n &nbsp; &nbsp;4&nbsp; &nbsp; &nbsp;18\n &nbsp;/&nbsp; &nbsp;\\\n 2&nbsp; &nbsp; &nbsp;9&nbsp;\nl = 4, h = 24\n<strong>Output: <br /></strong>4 9 17 18&nbsp;</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>&nbsp; &nbsp; &nbsp; &nbsp;16\n &nbsp; &nbsp; /&nbsp; &nbsp; \\\n &nbsp; &nbsp;7&nbsp; &nbsp; &nbsp;20\n &nbsp;/&nbsp; &nbsp;\\\n 1&nbsp; &nbsp;&nbsp;10\nl = 13, h = 23\n<strong>Output: <br /></strong>16 20<strong>&nbsp;\n</strong></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>printNearNodes()</strong>&nbsp;which takes the root Node of the BST and the range elements low and high as inputs and returns an array that contains the BST elements in the given range low to high (inclusive) in <strong>non-decreasing&nbsp;</strong>order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; Number of nodes &le; 10<sup>5</sup><br />1 &le; l &le; h &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and a range [low, high], find all the numbers in the BST that lie within the given range (inclusive). Return the numbers in non-decreasing order.\n\nNote: Element greater than or equal to root go to the right side.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5",
                    "1 <= l <= h <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "BST:\n      17\n     /  \\\n    4    18\n   /  \\\n  2    9\nl = 4, h = 24",
                        "output": "4 9 17 18",
                        "explanation": "The numbers 4, 9, 17 and 18 all fall within the range [4, 24]."
                    },
                    {
                        "input": "BST:\n      16\n     /  \\\n    7    20\n   /  \\\n  1    10\nl = 13, h = 23",
                        "output": "16 20",
                        "explanation": "The numbers 16 and 20 fall within the range [13, 23]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Backend complete function template for C++\n\nclass Solution {\n  public:\n    void printNearNodesUtil(Node *root,int k1,int k2, vector <int> &res) \n    {\n        //base case \n        if ( root == NULL )  \n            return;  \n          \n        //if starting range is less than data at current node, we call \n        //the function recursively for the left subtree. \n        if ( k1 < root->data )  \n            printNearNodesUtil(root->left, k1, k2, res);  \n          \n        //if data at current node is within the range given, we store \n        //the data at current node in the output list.\n        if ( k1 <= root->data && k2 >= root->data )  \n            res.push_back (root->data);\n          \n        //if ending range is more than data at current node, we call \n        //the function recursively for the right subtree.\n        if ( k2 > root->data )  \n            printNearNodesUtil(root->right, k1, k2, res);   \n    }\n    \n    //Function to return a list of BST elements in a given range.\n    vector <int> printNearNodes(Node *root,int k1,int k2) \n    {\n        vector <int> res;\n        printNearNodesUtil (root, k1, k2, res);\n        //returning the output list.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{   \n\tpublic static void printNearNodesUtil(Node node, int k1, int k2 , ArrayList<Integer> res)\n\t{\n         \n        // base case \n        if (node == null) {\n            return;\n        }\n \n        //if starting range is less than data at current node, we call \n    \t//the function recursively for the left subtree.\n        if (k1 < node.data)\n        {\n            printNearNodesUtil(node.left, k1, k2, res);\n        }\n \n        //if data at current node is within the range given, we store \n    \t//the data at current node in the output list.\n        if (k1 <= node.data && k2 >= node.data) \n        {\n            res.add(node.data);\n        }\n \n        //if ending range is more than data at current node, we call \n    \t//the function recursively for the right subtree.\n        if (k2 > node.data) \n        {\n            printNearNodesUtil(node.right, k1, k2,res);\n        }\n    }\n    \n    //Function to return a list of BST elements in a given range.\n    public static ArrayList<Integer> printNearNodes(Node root,int low,int high)\n\t{\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        printNearNodesUtil(root, low, high, res);\n        //returning the output list.\n        return res;\n    }    \n    \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    res = []\n    def printNearNodesUtil(self,root,l,h,res):\n        \n        # base case\n        if root is None:\n            return \n        \n        #if starting range is less than data at current node, we call \n        #the function recursively for the left subtree.\n        self.printNearNodesUtil(root.left,l,h,res)\n        \n        #if data at current node is within the range given, we store \n        #the data at current node in the output list.\n        if(root.data>=l and root.data<=h):\n            res.append (root.data)\n        \n        #if ending range is more than data at current node, we call \n        #the function recursively for the right subtree.\n        self.printNearNodesUtil(root.right,l,h,res)\n     \n    #Function to return a list of BST elements in a given range.  \n    def printNearNodes(self, root, l, h):\n        \n        global res\n        res = []\n        self.printNearNodesUtil (root, l, h, res)\n        #returning the output list.\n        return res\n    \n    ",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\nclass Solution\n{\n    void printNearNodesUtil(Node root,int k1,int k2, ref List<int> res) \n    {\n        //base case \n        if ( root == null)  \n            return;  \n          \n        //if starting range is less than data at current node, we call \n        //the function recursively for the left subtree. \n        if ( k1 < root.data )  \n            printNearNodesUtil(root.left, k1, k2,ref res);  \n          \n        //if data at current node is within the range given, we store \n        //the data at current node in the output list.\n        if ( k1 <= root.data && k2 >= root.data )  \n            res.Add(root.data);\n          \n        //if ending range is more than data at current node, we call \n        //the function recursively for the right subtree.\n        if ( k2 > root.data )  \n            printNearNodesUtil(root.right, k1, k2, ref res);   \n    }\n\n    //Function to return a list of BST elements in a given range.\n    public List<int> printNearNodes(Node root,int low,int high)\n    {\n        List<int> res = new List<int> ();\n        printNearNodesUtil (root, low, high,ref res);\n        //returning the output list.\n        return res;\n    }\n}\n\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} root\n * @param {number} k1\n * @param {number} k2\n * @returns {number[]}\n*/\n\n\n\nclass Solution \n{\n    printNearNodesUtil(root, k1, k2, res) \n    {\n        //base case\n        if ( root === null )  \n            return;  \n          \n        //if starting range is less than data at current node, we call \n    \t//the function recursively for the left subtree.\n        if ( k1 < root.data )  \n            this.printNearNodesUtil(root.left, k1, k2, res);  \n          \n        //if data at current node is within the range given, we store \n    \t//the data at current node in the output list.\n        if ( k1 <= root.data && k2 >= root.data )  \n            res.push(root.data);\n          \n        //if ending range is more than data at current node, we call \n    \t//the function recursively for the right subtree.\n        if ( k2 > root.data )  \n            this.printNearNodesUtil(root.right, k1, k2, res);   \n    }\n    \n    //Function to return a list of BST elements in a given range.\n    printNearNodes(root, k1, k2)\n    {\n        let res = [];\n        this.printNearNodesUtil(root, k1, k2, res);\n        //returning the output list.\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}