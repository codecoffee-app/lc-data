{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700500,
            "title": "Find Common Nodes in two BSTs",
            "titleSlug": "print-common-nodes-in-bst",
            "content": "<p><span style=\"font-size: 18px;\">Given two Binary Search Trees. Find&nbsp;the&nbsp;nodes that are common in both of them, ie-&nbsp;find the intersection of the two BSTs.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: Return&nbsp;</span><span style=\"font-size: 18px;\">the common nodes in <strong>sorted </strong>order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong></span><strong><span style=\"font-size: 18px;\">BST1:\n</span></strong> <span style=\"font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;5\n &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/ &nbsp; &nbsp; \\\n &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 &nbsp; &nbsp; &nbsp;  10\n &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/ &nbsp; \\ &nbsp; &nbsp;  /\n &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; 0 &nbsp; &nbsp; 4&nbsp;&nbsp;&nbsp; 7\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  \\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;9\n</span><strong><span style=\"font-size: 18px;\">BST2:\n</span></strong> <span style=\"font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 10 \n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  / &nbsp; &nbsp;\\\n &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;7&nbsp; &nbsp; &nbsp;20\n &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/ &nbsp; \\ \n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;  4&nbsp; &nbsp; &nbsp;9\n<strong><br />Output: </strong>4 7 9 10\n\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\nBST1:\n</strong>&nbsp;    10\n&nbsp;   /  \\\n&nbsp;  2   11\n&nbsp; /  \\\n&nbsp;1   3\n<strong>BST2:\n</strong>&nbsp;\\t2\n&nbsp;    /  \\\n&nbsp;   1    3\n<strong>Output: </strong>1 2 3\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= Number of Nodes &lt;= 10<sup>5</sup><br />1 &lt;= Node data &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two Binary Search Trees (BST1 and BST2), find the nodes that are common to both trees. Return these common nodes in sorted order.",
                "constraints": [
                    "1 <= Number of Nodes <= 10^5",
                    "1 <= Node data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "BST1:\n         5\n        /   \\\n       1     10\n      / \\   /\n     0   4 7\n            \\\n             9\nBST2:\n         10\n        /  \\\n       7   20\n      / \\\n     4   9",
                        "output": "4 7 9 10",
                        "explanation": "The nodes 4, 7, 9, and 10 are present in both BST1 and BST2. Returning them in sorted order."
                    },
                    {
                        "input": "BST1:\n    10\n   /  \\\n  2   11\n /  \\\n1   3\nBST2:\n    2\n   /  \\\n  1    3",
                        "output": "1 2 3",
                        "explanation": "The nodes 1, 2, and 3 are present in both BST1 and BST2. Returning them in sorted order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the nodes that are common in both BST.\n    vector<int> findCommon(Node *r1, Node *r2) {\n        // creating two stacks for inorder traversals of both BST.\n        stack<Node *> s1, s2;\n        vector<int> res;\n\n        while (1) {\n            // pushing the nodes of first BST in stack s1.\n            if (r1) {\n                s1.push(r1);\n                r1 = r1->left;\n            }\n            // pushing the nodes of second BST in stack s2.\n            else if (r2) {\n                s2.push(r2);\n                r2 = r2->left;\n            }\n            // when both r1 and r2 become NULL\n            else if (!s1.empty() && !s2.empty()) {\n                r1 = s1.top();\n                r2 = s2.top();\n\n                // if data at current node in two BST's are same, we\n                // store it in output list.\n                if (r1->data == r2->data) {\n                    res.push_back(r1->data);\n                    // popping element from both stacks.\n                    s1.pop();\n                    s2.pop();\n                    // moving to the inorder successor\n                    r1 = r1->right;\n                    r2 = r2->right;\n                }\n                // if data at current node of first BST is smaller than that of\n                // second BST then it's obvious that inorder successors of\n                // current node can have same value as that of second BST node.\n                else if (r1->data < r2->data) {\n                    // popping element from stack s1.\n                    s1.pop();\n                    r1 = r1->right;\n\n                    // r2 is set to NULL since we need new nodes of first BST.\n                    r2 = NULL;\n                } else if (r1->data > r2->data) {\n                    // popping element from stack s1.\n                    s2.pop();\n                    r2 = r2->right;\n                    // r1 is set to NULL since we need new nodes of second BST.\n                    r1 = NULL;\n                }\n            } else\n                break;\n        }\n        // returning the output list.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find the nodes that are common in both BST.\n    public static ArrayList<Integer> findCommon(Node r1, Node r2) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\n        // creating two stacks for inorder traversals of both BST.\n        Stack<Node> s1 = new Stack<Node>();\n        Stack<Node> s2 = new Stack<Node>();\n\n        while (true) {\n            // pushing the nodes of first BST in stack s1.\n            if (r1 != null) {\n                s1.push(r1);\n                r1 = r1.left;\n            }\n            // pushing the nodes of second BST in stack s2.\n            else if (r2 != null) {\n                s2.push(r2);\n                r2 = r2.left;\n            }\n            // when both r1 and r2 become NULL\n            else if (!s1.isEmpty() && !s2.isEmpty()) {\n                r1 = s1.peek();\n                r2 = s2.peek();\n\n                // if data at current node in two BST's are same, we\n                // store it in output list.\n                if (r1.data == r2.data) {\n                    res.add(r1.data);\n                    // popping element from both stacks.\n                    s1.pop();\n                    s2.pop();\n\n                    // moving to the inorder successor\n                    r1 = r1.right;\n                    r2 = r2.right;\n                }\n                // if data at current node of first BST is smaller than that of\n                // second BST then it's obvious that inorder successors of\n                // current node can have same value as that of second BST node.\n                else if (r1.data < r2.data) {\n                    // popping element from stack s1.\n                    s1.pop();\n                    r1 = r1.right;\n                    // r2 is set to NULL since we need new nodes of first BST.\n                    r2 = null;\n                } else if (r1.data > r2.data) {\n                    // popping element from stack s2.\n                    s2.pop();\n                    r2 = r2.right;\n                    // r1 is set to NULL since we need new nodes of second BST.\n                    r1 = null;\n                }\n            } else\n                break;\n        }\n        // returning the output list.\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to find the nodes that are common in both BST.\n    def findCommon(self, r1, r2):\n\n        #creating two stacks for inorder traversals of both BST.\n        list1 = []\n        list2 = []\n        res = []\n        while (1):\n\n            #pushing the nodes of first BST in list1.\n            if (r1):\n                list1.append(r1)\n                r1 = r1.left\n\n            #pushing the nodes of second BST in list2.\n            elif (r2):\n                list2.append(r2)\n                r2 = r2.left\n\n            #when both r1 and r2 become NULL\n            elif (len(list1) != 0 and len(list2) != 0):\n                r1 = list1[len(list1) - 1]\n                r2 = list2[len(list2) - 1]\n\n                #if data at current node in two BST's are same, we\n                #store it in output list.\n                if (r1.data == r2.data):\n                    res.append(r1.data)\n\n                    #popping element from both lists.\n                    list1.pop()\n                    list2.pop()\n\n                    #moving to the inorder successor\n                    r1 = r1.right\n                    r2 = r2.right\n\n                #if data at current node of first BST is smaller than that of\n                #second BST then it's obvious that inorder successors of\n                #current node can have same value as that of second BST node.\n                elif (r1.data < r2.data):\n\n                    #popping element from list1.\n                    list1.pop()\n                    r1 = r1.right\n                    #r2 is set to NULL since we need new nodes of first BST.\n                    r2 = None\n\n                elif (r1.data > r2.data):\n\n                    #popping element from list2.\n                    list2.pop()\n                    r2 = r2.right\n                    #r1 is set to NULL since we need new nodes of second BST.\n                    r1 = None\n            else:\n                break\n\n        #returning the output list.\n        return res\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    // Function to find the nodes that are common in both BST.\n    public List<int> findCommon(Node r1, Node r2) {\n        List<int> res = new List<int>();\n        Stack<Node> s1 = new Stack<Node>();\n        Stack<Node> s2 = new Stack<Node>();\n\n        while (true) {\n            // pushing the nodes of first BST in stack s1.\n            if (r1 != null) {\n                s1.Push(r1);\n                r1 = r1.left;\n            }\n            // pushing the nodes of second BST in stack s2.\n            else if (r2 != null) {\n                s2.Push(r2);\n                r2 = r2.left;\n            }\n            // when both r1 and r2 become NULL\n            else if (s1.Count > 0 && s2.Count > 0) {\n                r1 = s1.Peek();\n                r2 = s2.Peek();\n\n                // if data at current node in two BST's are same, we\n                // store it in output list.\n                if (r1.data == r2.data) {\n                    res.Add(r1.data);\n                    // popping element from both stacks.\n                    s1.Pop();\n                    s2.Pop();\n                    // moving to the inorder successor\n                    r1 = r1.right;\n                    r2 = r2.right;\n                }\n                // if data at current node of first BST is smaller than that of\n                // second BST then it's obvious that inorder successors of\n                // current node can have same value as that of second BST node.\n                else if (r1.data < r2.data) {\n                    // popping element from stack s1.\n                    s1.Pop();\n                    r1 = r1.right;\n\n                    // r2 is set to NULL since we need new nodes of first BST.\n                    r2 = null;\n                } else if (r1.data > r2.data) {\n                    // popping element from stack s1.\n                    s2.Pop();\n                    r2 = r2.right;\n                    // r1 is set to NULL since we need new nodes of second BST.\n                    r1 = null;\n                }\n            } else\n                break;\n        }\n        // returning the output list.\n        return res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} r1\n * @param {Node} r2\n * @returns {number[]}\n */\n\nclass Solution {\n    // Function to find the nodes that are common in both BST.\n    findCommon(r1, r2) {\n        // creating two stacks for inorder traversals of both BST.\n        let s1 = [], s2 = [];\n        let end_stack1 = -1, end_s1 = -1, end_s2 = -1;\n        let res = [];\n        while (1) {\n            // pushing the nodes of first BST in stack s1.\n            if (r1) {\n                s1.push(r1);\n                end_s1++;\n                r1 = r1.left;\n            }\n            // pushing the nodes of second BST in stack s2.\n            else if (r2) {\n                s2.push(r2);\n                end_s2++;\n                r2 = r2.left;\n            }\n            // when both r1 and r2 become NULL\n            else if (end_s1 >= 0 && end_s2 >= 0) {\n                r1 = s1[end_s1];\n                r2 = s2[end_s2];\n\n                // if data at current node in two BST's are same, we\n                // store it in output list.\n                if (r1.data === r2.data) {\n                    // popping element from both stacks.\n                    res.push(r1.data);\n                    s1.pop();\n                    end_s1--;\n                    s2.pop();\n                    end_s2--;\n\n                    // moving to the inorder successor\n                    r1 = r1.right;\n                    r2 = r2.right;\n                }\n                // if data at current node of first BST is smaller than that of\n                // second BST then it's obvious that inorder successors of\n                // current node can have same value as that of second BST node.\n                else if (r1.data < r2.data) {\n                    // popping element from stack s1.\n                    s1.pop();\n                    end_s1--;\n                    r1 = r1.right;\n\n                    // r2 is set to NULL since we need new nodes of first BST.\n                    r2 = null;\n                } else if (r1.data > r2.data) {\n                    // popping element from stack s2.\n                    s2.pop();\n                    end_s2--;\n                    r2 = r2.right;\n\n                    // r1 is set to NULL since we need new nodes of second BST.\n                    r1 = null;\n                }\n            } else\n                break;\n        }\n        // returning the output list.\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}