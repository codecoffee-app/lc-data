{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706460,
            "title": "Anti Diagonal Traversal of Matrix",
            "titleSlug": "print-diagonally1623",
            "content": "<p><span style=\"font-size: 18px;\">Give a N*N square <strong>matrix</strong>, return an array of its <strong>anti-diagonals </strong>in top-leftmost to bottom-rightmost order. In an element of a <strong>anti-diagonal (i, j)</strong>, surrounding elements will be <strong>(i+1, j-1)</strong> and <strong>(i-1, j+1)</strong>. Look at the examples for more clarity.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 2\nmatrix[][] = 1 2<br />\\t\\t3 4\n<strong>Output:</strong>\n1 2 3 4\n<strong>Explanation:</strong>\nList of anti-diagnoals in order is<br />{1}, {2, 3}, {4}</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 3\nmatrix[][] = 3 2 3<br />\\t\\t4 5 1<br />\\t\\t7 8 9<br /><strong>Output:</strong>\n3 2 4 3 5 7 1 8 9</span></pre>\n<pre><strong>Explanation:</strong>\nList of anti-diagnoals in order is<br />{3}, {2, 4}, {3, 5, 7}, {1, 8}, {9}</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You dont need to read input or print anything. Complete the function <strong>antiDiagonal</strong><strong>Pattern()</strong> that takes <strong>matrix </strong>as input parameter and returns a <strong>list of integers </strong>in order of the values visited in the anti-Diagonal&nbsp;pattern.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N * N)<br /><strong>Expected Auxiliary Space:</strong> O(N * N)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 100<br />0 &lt;= mat[i][j] &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N*N square matrix, return an array of its anti-diagonals in top-leftmost to bottom-rightmost order. An anti-diagonal element (i, j) has surrounding elements (i+1, j-1) and (i-1, j+1).",
                "constraints": [
                    "1 <= N <= 100",
                    "0 <= mat[i][j] <= 100"
                ],
                "testcases": [
                    {
                        "input": "N = 2\nmatrix[][] = 1 2\n\t\t3 4",
                        "output": "1 2 3 4",
                        "explanation": "The anti-diagonals are {1}, {2, 3}, and {4}."
                    },
                    {
                        "input": "N = 3\nmatrix[][] = 3 2 3\n\t\t4 5 1\n\t\t7 8 9",
                        "output": "3 2 4 3 5 7 1 8 9",
                        "explanation": "The anti-diagonals are {3}, {2, 4}, {3, 5, 7}, {1, 8}, and {9}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to develop a pattern of the manner in which the elements are added to the output array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Misc",
                "slug": "misc"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    vector<int> antiDiagonalPattern(vector<vector<int>> matrix) \r\n    {\r\n        vector<pair<int, int>> b;\r\n\r\n        int n = matrix.size();\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            b.push_back(make_pair(0, i));\r\n        }\r\n        for (int j = 1; j < n; j++) {\r\n            b.push_back(make_pair(j, n - 1));\r\n        }\r\n        vector<int> ans;\r\n        int x, y;\r\n        for (int i = 0; i < 2 * n - 1; i++) {\r\n            x = b[i].first;\r\n            y = b[i].second;\r\n            while (x < n && y >= 0) {\r\n                ans.push_back(matrix[x][y]);\r\n                x += 1;\r\n                y -= 1;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public int[] antiDiagonalPattern(int[][] matrix) {\r\n        int n = matrix.length;\r\n        int[][] b = new int[2 * n - 1][2];\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            b[i][0] = 0;\r\n            b[i][1] = i;\r\n        }\r\n        for (int j = 1; j < n; j++) {\r\n            b[j + n - 1][0] = j;\r\n            b[j + n - 1][1] = n - 1;\r\n        }\r\n\r\n        ArrayList<Integer> ans = new ArrayList<>();\r\n        int x, y;\r\n        for (int i = 0; i < 2 * n - 1; i++) {\r\n            x = b[i][0];\r\n            y = b[i][1];\r\n            while (x < n && y >= 0) {\r\n                ans.add(matrix[x][y]);\r\n                x += 1;\r\n                y -= 1;\r\n            }\r\n        }\r\n\r\n        // Convert ArrayList to array\r\n        int[] result = new int[ans.size()];\r\n        for (int i = 0; i < ans.size(); i++) {\r\n            result[i] = ans.get(i);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def antiDiagonalPattern(self, matrix):\r\n        b = []\r\n\r\n        n = len(matrix)\r\n\r\n        for i in range(n):\r\n            b.append((0, i))\r\n        for j in range(1, n):\r\n            b.append((j, n - 1))\r\n        ans = []\r\n        x, y = 0, 0\r\n        for i in range(2 * n - 1):\r\n            x = b[i][0]\r\n            y = b[i][1]\r\n            while x < n and y >= 0:\r\n                ans.append(matrix[x][y])\r\n                x += 1\r\n                y -= 1\r\n        return ans\r\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    antiDiagonalPattern(matrix, n){\n        let b = [];\n\n        for (let i = 0; i < n; i++) {\n            b.push([0, i]);\n        }\n        for (let j = 1; j < n; j++) {\n            b.push([j, n - 1]);\n        }\n        let ans = [];\n        let x, y;\n        for (let i = 0; i < 2 * n - 1; i++) {\n            x = b[i][0];\n            y = b[i][1];\n            while (x < n && y >= 0) {\n                ans.push(matrix[x][y]);\n                x += 1;\n                y -= 1;\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}