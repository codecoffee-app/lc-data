{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705888,
            "title": "Print Diagonally",
            "titleSlug": "print-diagonally4331",
            "content": "<p><span style=\"font-size:18px\">Give a <strong>N * N</strong> square matrix <strong>A</strong>, return all the elements of its anti-diagonals from <strong>top to bottom</strong>. </span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\nN = 2\r\nA = [[1, 2],\r\n     [3, 4]]\r\n<strong>Output:</strong>\r\n1 2 3 4\r\n<strong>Explanation:</strong> \r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/ScreenShot2022-10-17at9-1665980852.png\" />\r\n</span><span style=\"font-size:18px\">Hence, elements will be returned in the \r\norder {1, 2, 3, 4}.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: \r\n</strong>N = 3 \r\nA = [[1, 2, 3],\r\n     [4, 5, 6],\r\n     [7, 8, 9]]\r\n<strong>Output:</strong> \r\n1 2 4 3 5 7 6 8 9\r\n<strong>Explanation:</strong> \r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/ScreenShot2022-10-17at9-1665980941.png\" />\r\nHence, elements will be returned in \r\nthe order {1, 2, 4, 3, 5, 7, 6, 8, 9}.\r\n</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>downwardDiagonal()</strong> which takes an integer <strong>N</strong> and a 2D matrix <strong>A[ ][ ]</strong> as input parameters and returns the list of all elements of its anti-diagonals from <strong>top to bottom</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N*N)<br />\r\n<strong>Expected Auxillary Space:&nbsp;</strong>O(N*N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N, M &le; 10<sup>3</sup><br />\r\n0 &le; A[i][j] &le; 10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N x N square matrix A, return all the elements of its anti-diagonals from top to bottom.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "0 <= A[i][j] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 2\nA = [[1, 2],[3, 4]]",
                        "output": "1 2 3 4",
                        "explanation": "The anti-diagonals, read from top to bottom, are {1}, {2, 3}, {4}.  Concatenating these gives {1, 2, 3, 4}."
                    },
                    {
                        "input": "N = 3\nA = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]",
                        "output": "1 2 4 3 5 7 6 8 9",
                        "explanation": "The anti-diagonals, read from top to bottom, are {1}, {2, 4}, {3, 5, 7}, {6, 8}, {9}. Concatenating these gives {1, 2, 4, 3, 5, 7, 6, 8, 9}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">First find&nbsp;elements in the&nbsp;upper triangle of the matrix&nbsp;and then lower triangle of the matrix.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Misc",
                "slug": "misc"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n\t\r\n\tpublic:\r\n\tvector<int> downwardDiagonal(int N, vector<vector<int>> A)\r\n\t{\r\n\t\tvector<int> ans;\r\n\r\n\t\t// printing elements above and on \r\n\t    // second diagonal\r\n\t    for (int k = 0; k < N; k++) {\r\n\t \r\n\t        // traversing downwards starting\r\n\t        // from first row\r\n\t        int row = 0, col = k;\r\n\t        while (col >= 0) {\r\n\t            ans.push_back(A[row][col]);\r\n\t            row++, col--;\r\n\t        }\r\n\t    }\r\n\t \r\n\t    // printing elements below second\r\n\t    // diagonal\r\n\t    for (int j = 1; j < N; j++) {\r\n\t \r\n\t        // traversing downwards starting \r\n\t        // from last column\r\n\t        int col = N - 1, row = j;\r\n\t        while (row < N) {\r\n\t            ans.push_back(A[row][col]);\r\n\t            row++, col--;\r\n\t        }\r\n\t    }\r\n\r\n\t    return ans;\r\n\t}\r\n\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\r\n\r\n\r\n    static ArrayList<Integer> downwardDiagonal(int N, int A[][])\r\n    {\r\n        // code here \r\n        ArrayList<Integer> ans=new ArrayList<>();\r\n\r\n\t\t// printing elements above and on \r\n\t    // second diagonal\r\n\t    for (int k = 0; k < N; k++) {\r\n\t \r\n\t        // traversing downwards starting\r\n\t        // from first row\r\n\t        int row = 0, col = k;\r\n\t        while (col >= 0) {\r\n\t            ans.add(A[row][col]);\r\n\t            row++;\r\n\t            col--;\r\n\t        }\r\n\t    }\r\n\t \r\n\t    // printing elements below second\r\n\t    // diagonal\r\n\t    for (int j = 1; j < N; j++) {\r\n\t \r\n\t        // traversing downwards starting \r\n\t        // from last column\r\n\t        int col = N - 1, row = j;\r\n\t        while (row < N) {\r\n\t            ans.add(A[row][col]);\r\n\t            row++;\r\n\t            col--;\r\n\t        }\r\n\t    }\r\n\r\n\t    return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# def downwardDigonal(N, A): \r\n\r\ndef downwardDiagonal(N, A):\r\n    ans=[]\r\n    #printing element above and on second diagonal\r\n    for k in range(N):\r\n       #traversing downwards starting\r\n\t   # from first row\r\n        row=0\r\n        col=k\r\n        while col>=0:\r\n            ans.append(A[row][col])\r\n            row+=1\r\n            col-=1\r\n    #printing elements below second diagonal\r\n    for j in range(1,N):\r\n        # traversing downwards starting \r\n\t   # from last column\r\n        col=N-1\r\n        row=j\r\n        while row<N:\r\n            ans.append(A[row][col])\r\n            row+=1\r\n            col-=1\r\n    return ans\r\n    \r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} N\r\n * @param {number[][]} A\r\n * @returns {number[]}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to get elements of downward Diagonal.\r\n    downwardDiagonal(N, A)\r\n    {\r\n        let ans=[];\r\n        \r\n        //printing element above and on second diagonal\r\n        for (let k = 0; k < N; k++) {\r\n           //traversing downwards starting\r\n           // from first row\r\n            let row = 0;\r\n            let col = k;\r\n            while (col >= 0) {\r\n                ans.push(A[row][col]);\r\n                row++;\r\n                col--;\r\n            }\r\n        }\r\n        \r\n        //printing elements below second diagonal\r\n        for (let j = 1; j < N; j++) {\r\n            // traversing downwards starting \r\n           // from last column\r\n            let col = N - 1;\r\n            let row = j;\r\n            while (row < N) {\r\n                ans.push(A[row][col]);\r\n                row++;\r\n                col--;\r\n            }\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}