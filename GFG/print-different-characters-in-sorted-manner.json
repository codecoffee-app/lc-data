{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701683,
            "title": "Print Different Characters In Sorted Manner",
            "titleSlug": "print-different-characters-in-sorted-manner",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong>,<strong> </strong>return a string with all <strong>distinct </strong>characters from the given string in sorted order (non-decreasing), without using any sorting algorithm.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"abdbc\"</span>\n<span style=\"font-size: 18px;\"><strong>Output: \"</strong>abcd\"</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"fdfdfd\"</span>\n<span style=\"font-size: 18px;\"><strong>Output: \"</strong>df\"</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= |s| &lt;= 50</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, return a new string containing only the distinct characters from `s`. The characters in the output string must be sorted in non-decreasing order. Implement this without using any standard sorting algorithm.",
                "constraints": [
                    "1 <= |s| <= 50"
                ],
                "testcases": [
                    {
                        "input": "abdbc",
                        "output": "abcd",
                        "explanation": null
                    },
                    {
                        "input": "fdfdfd",
                        "output": "df",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:20px\">For CPP&nbsp;use set, for Java use TreeSet.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nstring Sorted_Characters(string str) {\n    set<char> s;\n    for (int i = 0; i < str.length(); i++) {\n        s.insert(str[i]);\n    }\n\n    string ans = \"\";\n\n    for (auto x : s)\n        ans += x;\n\n    return ans;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\npublic static String Sorted_Characters(String str) {\n    // Declaring and Initializing a new TreeSet\n    TreeSet<Character> s = new TreeSet<>();\n\n    // adding charcaters to the TreeSet\n    for (int i = 0; i < str.length(); i++) s.add(str.charAt(i));\n\n    // Initializing a new Empty String\n    String ans = \"\";\n\n    // concatenating characters from the\n    // TreeSet to the string variable\n    // ans in non-decreasing order\n    for (char c : s) ans += c;\n\n    return ans;\n}\n",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}