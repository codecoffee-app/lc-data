{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701756,
            "title": "First n Fibonacci",
            "titleSlug": "print-first-n-fibonacci-numbers1002",
            "content": "<p><span >Given a number <strong>n, </strong>return an array containing the first <strong>n</strong> Fibonacci numbers.<br /><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><strong><br /></strong>Note: The first two numbers of the series are 0 and 1.</span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 5\n<strong>Output: </strong>[0, 1, 1, 2, 3]\n</span></pre>\n<pre><span ><strong>Input: </strong>n = 7\n<strong>Output: </strong>[0, 1, 1, 2, 3, 5, 8]</span></pre>\n<pre><span ><strong>Input</strong>: n = 2<br /><strong>Output</strong>: [0, 1]</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &lt;= n &lt;= 30</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Write a function that, given an integer `n`, returns an array containing the first `n` Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.",
                "constraints": [
                    "1 <= n <= 30"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "[0, 1, 1, 2, 3]",
                        "explanation": null
                    },
                    {
                        "input": "7",
                        "output": "[0, 1, 1, 2, 3, 5, 8]",
                        "explanation": null
                    },
                    {
                        "input": "2",
                        "output": "[0, 1]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to build the current number using the last two numbers</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "infosys",
            "wipro",
            "tcs",
            "accenture"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to return list containing first n fibonacci numbers.\n    vector<int> fibonacciNumbers(int n) {\n        // creating a list to store the numbers.\n        vector<int> ans;\n\n        // storing base values for a and b.\n        int a = 0, b = 1;\n\n        // pushing 1 once in the list if n>=1 and again if n>=2.\n        if (n > 0)\n            ans.push_back(0);\n        if (n > 1)\n            ans.push_back(1);\n\n        for (int i = 2; i < n; ++i) {\n            // pushing sum of a and b in the list.\n            ans.push_back(a + b);\n            int c = a + b;\n\n            // updating a as b and b as c(sum of a and b).\n            a = b;\n            b = c;\n        }\n\n        // returning the list.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to return list containing first n fibonacci numbers.\n    public static int[] fibonacciNumbers(int n) {\n        // creating a list to store the numbers.\n        int[] res = new int[n];\n        int ind = 0;\n\n        // storing base values for a and b.\n        int a = 0, b = 1;\n\n        // pushing 1 once in the list if n>=1 and again if n>=2.\n        if (n > 0) res[ind++] = 0;\n        if (n > 1) res[ind++] = 1;\n\n        for (int i = 2; i < n; ++i) {\n            // pushing sum of a and b in the list.\n            res[ind++] = a + b;\n            int c = a + b;\n\n            // updating a as b and b as c (sum of a and b).\n            a = b;\n            b = c;\n        }\n\n        // returning the list.\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to return list containing first n fibonacci numbers.\n    def fibonacciNumbers(self, n):\n\n        #creating a list to store the numbers.\n        res = []\n\n        #storing base values for a and b.\n        a = 0\n        b = 1\n\n        #pushing 1 once in the list if n>=1 and again if n>=2.\n        if n > 0:\n            res.append(0)\n        if n > 1:\n            res.append(1)\n\n        for i in range(2, n):\n            #pushing sum of a and b in the list.\n            res.append(a + b)\n            c = a + b\n            #updating a as b and b as c (sum of a and b).\n            a = b\n            b = c\n\n        #returning the list.\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {BigInt} N\n * @returns {BigInt[]}\n */\nclass Solution {\n    // Function to return list containing first n fibonacci numbers.\n    fibonacciNumbers(N) {\n        // creating a list to store the numbers.\n        let ans = new Array();\n\n        // storing base values for a and b.\n        let a = BigInt(0), b = BigInt(1);\n\n        // pushing 1 once in the list if n>=1 and again if n>=2.\n        if (N > 0) ans.push(BigInt(0));\n        if (N > 1) ans.push(BigInt(1));\n\n        for (let i = 2; i < N; ++i) {\n            // pushing sum of a and b in the list.\n            ans.push(a + b);\n            let c = a + b;\n\n            // updating a as b and b as c (sum of a and b).\n            a = b;\n            b = c;\n        }\n\n        // returning the list.\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}