{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712055,
            "title": "Print GFG n times",
            "titleSlug": "print-gfg-n-times",
            "content": "<p><span style=\"font-size:18px\">Print GFG n times without the loop.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>5\r\n<strong>Output:</strong></span><span style=\"font-size:18px\"><strong>\r\n</strong>GFG GFG GFG GFG GFG</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. You only need to complete the&nbsp;<strong>function printGfg()&nbsp;</strong>that takes&nbsp;<strong>N as parameter</strong>&nbsp;and prints N&nbsp;times&nbsp;<strong>GFG&nbsp;</strong>recursively. Don&#39;t print newline, it will be added by the driver code.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N) (Recursive).</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Constraint:</span></strong><br />\r\n<span style=\"font-size:18px\">1&lt;=N&lt;=1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Write a function `printGfg(n)` that prints \"GFG\" n times, separated by spaces, without using a loop. Implement this recursively.  Do not print any newline characters; the driver code will handle that.",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "GFG GFG GFG GFG GFG",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    // Function to print \"GFG\" N times\r\n    void printGfg(int N) {\r\n        // Base case: if N is less than or equal to 0, return\r\n        if (N <= 0) {\r\n            return;\r\n        } else {\r\n            // Print \"GFG\" followed by a space\r\n            cout << \"GFG\"\r\n                 << \" \";\r\n\r\n            // Recursive call of the function with N-1\r\n            printGfg(N - 1);\r\n        }\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n\r\n    // Function that prints \"GFG\" N times recursively\r\n    void printGfg(int N) {\r\n        // Base case: if N is less than or equal to 0, exit the function\r\n        if (N <= 0) {\r\n            return;\r\n        } else {\r\n            // Print \"GFG\" on the console\r\n            System.out.print(\"GFG \");\r\n\r\n            // Recursive call to print \"GFG\" N-1 times\r\n            printGfg(N - 1);\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Recursive function to print 'GFG' n times\r\n    def printGfg(self, n):\r\n        if n == 0:\r\n            return\r\n        print('GFG', end = ' ')\r\n        self.printGfg(n - 1)",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}