{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703800,
            "title": "K Smallests in the Original Order",
            "titleSlug": "print-k-smallest-elements-in-their-original-order5407",
            "content": "<p><span >Given an array, the task is to print K smallest elements from the array but they must be in the same order as they are in a given array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [1, 2, 2, 3, 1], k = 3\n<strong>Output:</strong> 1 2 1\n<strong>Explanation: </strong>In an array arr[] = [1, 2, 2, 3, 1] the smallest element is 1, the second smallest element is also 1 and the third smallest element is also 2. So, we will return [1, 2, 1] as an answer.</span></pre>\n<pre><span ><strong>Input :</strong> arr[] = [9, 4, 3, 3, 5, 5], k = 1<strong>\nOutput :</strong> 3</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n*log(n)).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; k &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array, find and return the K smallest elements from the array while maintaining their original order in the input array.",
                "constraints": [
                    "1 <= k <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 2, 3, 1], k = 3",
                        "output": "[1, 2, 1]",
                        "explanation": "The 3 smallest elements in the array [1, 2, 2, 3, 1] are 1, 1, and 2.  Selecting the first two occurrences of 1 and the first occurence of 2, while maintaining original order results in [1, 2, 1]."
                    },
                    {
                        "input": "[9, 4, 3, 3, 5, 5], k = 1",
                        "output": "[3]",
                        "explanation": "The smallest element in the array [9, 4, 3, 3, 5, 5] is 3. Therefore, the output is [3]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort an array. Check for K smallest element and then find the first K smallest element in an array. Return that array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to find the k smallest elements in the array\n    std::vector<int> kSmallestElements(std::vector<int>& arr, int k) {\n        std::vector<int> ans;\n        int n = arr.size(); // Get the size of the array\n\n        if (k <= 0 || k > n) {\n            return ans; // Return empty vector if k is out of bounds\n        }\n\n        // Create a copy of the array\n        std::vector<int> brr(arr);\n\n        // Sort the original array\n        std::sort(arr.begin(), arr.end());\n\n        // Create a map to store the frequency of elements\n        std::map<int, int> mp;\n\n        // Count the frequency of the first k elements\n        for (int i = 0; i < k; ++i) {\n            mp[arr[i]]++;\n        }\n\n        // Iterate through the copied array and add elements to the answer vector\n        // based on their frequency\n        for (int i = 0; i < n; ++i) {\n            if (mp[brr[i]] > 0) {\n                ans.push_back(brr[i]);\n                mp[brr[i]]--;\n            }\n        }\n\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to find the k smallest elements in the array\n    public List<Integer> kSmallestElements(int[] arr, int k) {\n        List<Integer> ans = new ArrayList<>();\n        int n = arr.length;\n\n        if (k <= 0 || k > n) {\n            return ans; // Return empty list if k is out of bounds\n        }\n\n        // Create a copy of the array\n        int[] brr = Arrays.copyOf(arr, n);\n\n        // Sort the original array\n        Arrays.sort(arr);\n\n        // Create a map to store the frequency of elements\n        Map<Integer, Integer> mp = new HashMap<>();\n\n        // Count the frequency of the first k elements\n        for (int i = 0; i < k; ++i) {\n            mp.put(arr[i], mp.getOrDefault(arr[i], 0) + 1);\n        }\n\n        // Iterate through the copied array and add elements to the answer list\n        // based on their frequency\n        for (int i = 0; i < n; ++i) {\n            if (mp.getOrDefault(brr[i], 0) > 0) {\n                ans.add(brr[i]);\n                mp.put(brr[i], mp.get(brr[i]) - 1);\n            }\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def kSmallestElements(self, arr, k):\n        n = len(arr)\n        ans = []\n\n        if k <= 0 or k > n:\n            return ans  # Return empty list if k is out of bounds\n\n        # Create a copy of the array\n        brr = arr.copy()\n\n        # Sort the original array\n        arr.sort()\n\n        # Create a dictionary to store the frequency of elements\n        freq = {}\n\n        # Count the frequency of the first k elements\n        for i in range(k):\n            freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n        # Iterate through the copied array and add elements to the answer list\n        # based on their frequency\n        for num in brr:\n            if freq.get(num, 0) > 0:\n                ans.append(num)\n                freq[num] -= 1\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the k smallest elements in the array\n    kSmallestElements(arr, k) {\n        const n = arr.length;\n        const ans = [];\n\n        if (k <= 0 || k > n) {\n            return ans; // Return empty array if k is out of bounds\n        }\n\n        // Create a copy of the array\n        const brr = [...arr ];\n\n        // Sort the original array\n        arr.sort((a, b) => a - b);\n\n        // Create a map to store the frequency of elements\n        const freq = new Map();\n\n        // Count the frequency of the first k elements\n        for (let i = 0; i < k; i++) {\n            freq.set(arr[i], (freq.get(arr[i]) || 0) + 1);\n        }\n\n        // Iterate through the copied array and add elements to the answer array\n        // based on their frequency\n        for (const num of brr) {\n            if (freq.get(num) > 0) {\n                ans.push(num);\n                freq.set(num, freq.get(num) - 1);\n            }\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}