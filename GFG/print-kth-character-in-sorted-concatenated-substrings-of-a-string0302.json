{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703581,
            "title": "Print kth character",
            "titleSlug": "print-kth-character-in-sorted-concatenated-substrings-of-a-string0302",
            "content": "<p><span style=\"font-size: 18px;\">Given a string S consisting of lower alphabetic characters. Find K-th character in the&nbsp;string formed by concatenating all the unique substring of the given string in a sorted form. </span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>S = banana\nK = 10\n<strong>Output:\n</strong>n\n<strong>Explanation:\n</strong>All substring in sorted form are, \n\"a\",\"an\",\"ana\",\"anan\",\"anana\",\"b\",\"ba\", \n\"ban\",\"bana\",\"banan\",\"banana\",\"n\",\"na\", \n\"nan\", \"nana\".\nConcatenated string = \n\"aananaananananabbabanba-\nnabananbananannanannana\" \nWe can see a 10th character in the above \nconcatenated string is &lsquo;n&rsquo; which is our \nfinal answer.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS=\"abcdefg\"\nK=10\n<strong>Output:</strong>\nd\n<strong>Explanation:</strong>\nConcatenated string is \n\"aababcabcdabcdeabcdefabcdefgbbcbcdbcdebc-\ndefbcdefgccdcdecdefcdefgddedefdefgeefe-\nfgffgg\".\nWe see that the 10th character is d.\nso answer is d.</span>\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>PrintKthCharacter()</strong> which takes the string S and the integer K&nbsp;as input parameters and returns the Kth character of the concatenated string formed of all sorted unique substrings.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time complexity:</strong>O(N<sup>2</sup>)<br /><strong>Expected Auxillary Space:</strong>O(2*N)</span></p>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1&lt;=|S|&lt;=1000<br />1&lt;=K&lt;=Length of concatenated string</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S consisting of lowercase alphabetic characters, find the K-th character in the string formed by concatenating all unique substrings of S in lexicographical (sorted) order.",
                "constraints": [
                    "1 <= |S| <= 1000",
                    "1 <= K <= Length of concatenated string"
                ],
                "testcases": [
                    {
                        "input": "S = banana\nK = 10",
                        "output": "n",
                        "explanation": "The unique substrings of \"banana\" in sorted order are: \"a\", \"an\", \"ana\", \"anan\", \"anana\", \"b\", \"ba\", \"ban\", \"bana\", \"banan\", \"banana\", \"n\", \"na\", \"nan\", \"nana\".  The concatenated string is \"aananaananananabbabanbanababananannanannana\". The 10th character in this string is 'n'."
                    },
                    {
                        "input": "S = abcdefg\nK = 10",
                        "output": "d",
                        "explanation": "The concatenated string of all sorted unique substrings of \"abcdefg\" is \"aababcabcdabcdeabcdefabcdefgbbcbcdbcdebcdefbcdefgccdcdecdefcdefgddedefdefgeefefgffgg\". The 10th character is 'd'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Think about suffix arrays.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": null,
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public char PrintKthCharacter(String S, int K) {\n        int n = S.length();\n        int[] sa = suffixArray(S);\n        int[] lcp = lcpArray(S, sa);\n\n        int i = 0;\n        while (i < n && K - sum(lcp[i] + 1, n - sa[i]) > 0) {\n            K -= sum(lcp[i] + 1, n - sa[i]);\n            i++;\n        }\n        if (i == n) {\n            return (char)-1;\n        }\n        int r = lcp[i] + 1;\n        while (K > r) {\n            K -= r++;\n        }\n        return S.charAt(sa[i] + K - 1);\n    }\n\n    private int sum(int l, int r) { return (r - l + 1) * (l + r) / 2; }\n\n    private int[] suffixArray(String str) {\n        int n = str.length() + 1;\n        int[] arr = new int[n];\n        int[] rank = new int[n];\n        int[] newRank = new int[n];\n        int[] newArr = new int[n];\n        for (int i = 0; i < n - 1; i++) {\n            rank[arr[i] = i] = str.charAt(i);\n        }\n        rank[arr[n - 1] = n - 1] = 0;\n\n        sort(rank, arr, newArr, n, 123);\n        for (int shift = 1; shift <= n; shift <<= 1) {\n            newRank[arr[0]] = 0;\n            for (int i = 1; i < n; i++) {\n                newRank[arr[i]] = newRank[arr[i - 1]];\n                if (rank[arr[i]] != rank[arr[i - 1]] ||\n                    rank[(arr[i] + shift / 2) % n] !=\n                        rank[(arr[i - 1] + shift / 2) % n]) {\n                    ++newRank[arr[i]];\n                }\n            }\n            rank = newRank.clone();\n            for (int i = 0; i < n; i++) {\n                arr[i] = (arr[i] - shift + n) % n;\n            }\n            sort(rank, arr, newArr, n, n);\n        }\n        return Arrays.copyOfRange(arr, 1, n);\n    }\n\n    private void sort(int[] rank, int[] arr, int[] newArr, int n, int charBound) {\n        int[] count = new int[charBound];\n        int[] pos = new int[charBound];\n        for (int r : rank) {\n            count[r]++;\n        }\n        for (int i = 1; i < charBound; i++) {\n            pos[i] = pos[i - 1] + count[i - 1];\n        }\n        for (int x : arr) {\n            newArr[pos[rank[x]]++] = x;\n        }\n        System.arraycopy(newArr, 0, arr, 0, n);\n    }\n\n    private int[] lcpArray(String str, int[] sa) {\n        int n = sa.length;\n        int[] lcp = new int[n];\n        int[] rank = new int[n];\n        for (int i = 0; i < n; i++) {\n            rank[sa[i]] = i;\n        }\n        for (int i = 0, k = 0; i<n; i++, k -= k> 0 ? 1 : 0) {\n            if (rank[i] > 0) {\n                int j = sa[rank[i] - 1];\n                while (i + k < str.length() && j + k < str.length() &&\n                       str.charAt(i + k) == str.charAt(j + k)) {\n                    ++k;\n                }\n                lcp[rank[i]] = k;\n            }\n        }\n        return lcp;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}