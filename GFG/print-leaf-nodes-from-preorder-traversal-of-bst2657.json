{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705418,
            "title": "Print leaf nodes from preorder traversal of BST",
            "titleSlug": "print-leaf-nodes-from-preorder-traversal-of-bst2657",
            "content": "<p><span style=\"font-size:18px\">Given a preorder traversal of a BST, find&nbsp;the leaf nodes of the tree without building the tree.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 2\r\narr = {2,1}\r\n<strong>Output:</strong> {1}\r\n<strong>Explaination:</strong> 1 is the only leaf node.\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3\r\nArr = {3, 2, 4}\r\n<strong>Output:</strong> {2, 4}\r\n<strong>Explaination:</strong> 2, 4 are the leaf nodes.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>leafNodes()</strong>&nbsp;which takes the array a<strong>rr[]</strong> and its size <strong>N&nbsp;</strong>as input parameters&nbsp;and returns&nbsp;the leaf nodes of the tree.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>3</sup><br />\r\n1 &le; arr[i]&nbsp;&le; 10<sup>3</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:12px\">Use the property of the Binary Search Tree and stack.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    //Function to find the leaf nodes of a binary search tree.\n    vector<int> leafNodes(int arr[], int N)\n    {\n        vector<int> ans;\n\n        //we will use stack to hold the elements and pop them out \n        //when the condition of a binary search tree doesn't hold.\n        stack<int> s;\n        \n        for (int i = 1, j = 0; i < N; i++, j++)\n        {\n            //if the current element is smaller than the next element, \n            //push it onto the stack.\n            if (arr[j] > arr[i])\n                s.push(arr[j]);\n            else\n            {\n                bool valid = false;\n\n                //while the stack is not empty, check if the current \n                //element is greater than the top element of the stack.\n                //If it is, pop the element from the stack and mark valid as true.\n                while (!s.empty())\n                {\n                    if (arr[i] > s.top())\n                    {\n                        s.pop();\n                        valid = true;\n                    }\n                    else\n                        break;\n                }\n\n                //if valid is true, it means the current element is a leaf node.\n                //Push it onto the answer vector.\n                if (valid)\n                    ans.push_back(arr[j]);\n            }\n        }\n\n        //Push the last element onto the answer vector as it is always a leaf node.\n        ans.push_back(arr[N - 1]);\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public int[] leafNodes(int arr[], int n) {\r\n        // initializing an ArrayList to store leaf nodes\r\n        ArrayList<Integer> A = new ArrayList<>();\r\n\r\n        // getting the root node and pushing it onto the stack\r\n        int root = arr[0];\r\n        Stack<Integer> st = new Stack<>();\r\n        st.push(root);\r\n\r\n        // iterating through the array from index 1\r\n        for (int i = 1; i < n; i++) {\r\n            // if the current element is less than the top of the stack, push it onto the stack\r\n            if (arr[i] < st.peek()) {\r\n                st.push(arr[i]);\r\n            } else {\r\n                // if the current element is greater than or equal to the top of the stack\r\n\r\n                // store the value of the top of the stack\r\n                int val = st.peek();\r\n\r\n                // variable to keep track of the count of elements popped from the stack\r\n                int cnt = 0;\r\n\r\n                // popping elements from the stack until an element greater than the current element is found\r\n                while (!st.isEmpty() && st.peek() < arr[i]) {\r\n                    cnt++;\r\n                    st.pop();\r\n                }\r\n\r\n                // pushing the current element onto the stack\r\n                st.push(arr[i]);\r\n\r\n                // if more than 1 element was popped from the stack, add the value of the top of the stack to the ArrayList\r\n                if (cnt > 1) {\r\n                    A.add(val);\r\n                }\r\n            }\r\n        }\r\n\r\n        // adding the top element of the stack to the ArrayList as it is a leaf node\r\n        A.add(st.pop());\r\n\r\n        // creating an array to store the leaf nodes\r\n        int ans[] = new int[A.size()];\r\n        for (int i = 0; i < A.size(); i++) {\r\n            ans[i] = A.get(i);\r\n        }\r\n\r\n        // returning the array of leaf nodes\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\tdef leafNodes(self, arr, n):\n\t   ans=[] # create an empty list to store the leaf nodes\n\t   s=[] # create an empty stack\n\t   j=0 # initialize j as 0\n\t   \n\t   # iterate through the array elements\n\t   for i in range(1,n):\n\t       if arr[j]>arr[i]: # if arr[j] is greater than arr[i], push arr[j] into stack\n\t           s.append(arr[j])\n\t       else :\n\t           valid=False\n\t           while s:\n\t               if arr[i]>s[-1]: # if arr[i] is greater than the top element of stack, pop the stack and set valid as True\n\t                   s.pop()\n\t                   valid=True\n\t               else :\n\t                   break\n\t           if valid: # if valid is True, append arr[j] into ans\n\t               ans.append(arr[j])\n\t       i+=1\n\t       j+=1\n\t       \n\t   ans.append(arr[-1]) # append the last element of the array into ans\n\t   return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} N\n * @returns {number[]}\n */\n\nclass Solution {\n    //Function to find leaf nodes in the BST.\n    leafNodes(arr, N) {\n        let ans = []; // create an empty array to store the leaf nodes\n        let s = []; // create an empty stack\n        let j = 0; // initialize j as 0\n\n        // iterate through the array elements\n        for (let i = 1; i < N; ++i) {\n            if (arr[j] > arr[i]) { // if arr[j] is greater than arr[i], push arr[j] into stack\n                s.push(arr[j]);\n            } else {\n                let valid = false;\n                while (s.length > 0) {\n                    if (arr[i] > s[s.length - 1]) { // if arr[i] is greater than the top element of stack, pop the stack and set valid as True\n                        s.pop();\n                        valid = true;\n                    } else {\n                        break;\n                    }\n                }\n                if (valid) { // if valid is True, append arr[j] to ans\n                    ans.push(arr[j]);\n                }\n            }\n            // increment i and j not required since the loop control variable takes care of it\n            j++;\n        }\n\n        ans.push(arr[N - 1]); // append the last element of the array to ans\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to return a list of leaf nodes in the given binary tree.\n    public List<int> leafNodes(int[] arr, int N)\n    {\n        List<int> ans = new List<int>();\n\n        //we will use stack to hold the elements and pop them out \n        //when the condition of a binary search tree doesn't hold.\n        Stack<int> s = new Stack<int>();\n\n        for (int i = 1, j = 0; i < N; i++, j++)\n        {\n            //if the current element is smaller than the next element, \n            //push it onto the stack.\n            if (arr[j] > arr[i])\n                s.Push(arr[j]);\n            else\n            {\n                bool valid = false;\n\n                //while the stack is not empty, check if the current \n                //element is greater than the top element of the stack.\n                //If it is, pop the element from the stack and mark valid as true.\n                while (s.Count != 0)\n                {\n                    if (arr[i] > s.Peek())\n                    {\n                        s.Pop();\n                        valid = true;\n                    }\n                    else\n                        break;\n                }\n\n                //if valid is true, it means the current element is a leaf node.\n                //Push it onto the answer list.\n                if (valid)\n                    ans.Add(arr[j]);\n            }\n        }\n\n        //Push the last element onto the answer list as it is always a leaf node.\n        ans.Add(arr[N - 1]);\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}