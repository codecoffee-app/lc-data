{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701263,
            "title": "Print Matrix in snake Pattern",
            "titleSlug": "print-matrix-in-snake-pattern-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">Given a<strong>&nbsp;matrix&nbsp;</strong>of size<strong> N x N</strong>. Print the elements of the matrix in the snake like pattern depicted below.<br /><img style=\"height: 375px; width: 500px;\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/snake-pattern.jpg\" alt=\"\" /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: N = 3, matrix[][] = [[45, 48, 54], [21, 89, 87], [70, 78, 15]]\n<strong>Output</strong>: 45 48 54 87 89 21 70 78 15&nbsp;\n<strong>Explanation</strong>: Printing it in snake pattern will lead to the output as 45 48 54 87 89 21 70 78 15.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: N = 2, matrix[][] = [[1, 2], [3, 4]]<br /></span><span style=\"font-size: 18px;\"><strong>Output</strong>: 1 2 4 3 <br /></span><span style=\"font-size: 18px;\"><strong>Explanation</strong>: Printing it in snake pattern will give output as 1 2 4 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>3</sup><br />1 &lt;= mat[i][j] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square matrix of size N x N, print its elements in a snake-like pattern. This pattern alternates the direction of traversal for each row, moving left-to-right for even-indexed rows (0, 2, 4...) and right-to-left for odd-indexed rows (1, 3, 5...).",
                "constraints": [
                    "1 <= N <= 10^3",
                    "1 <= mat[i][j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 3, matrix[][] = [[45, 48, 54], [21, 89, 87], [70, 78, 15]]",
                        "output": "45 48 54 87 89 21 70 78 15",
                        "explanation": "The matrix is traversed as follows: Row 1 (left to right): 45, 48, 54. Row 2 (right to left): 87, 89, 21. Row 3 (left to right): 70, 78, 15.  The concatenation of these traversals results in the output."
                    },
                    {
                        "input": "N = 2, matrix[][] = [[1, 2], [3, 4]]",
                        "output": "1 2 4 3",
                        "explanation": "The matrix is traversed as follows: Row 1 (left to right): 1, 2. Row 2 (right to left): 4, 3. The concatenation of these traversals results in the output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\n\n//Function to return list of integers visited in snake pattern in matrix.\nint* snakePattern(int n, int matrix[][n])\n{   \n    int *output = malloc(sizeof(int) * (n * n));\n    int pos = 0;\n    \n    //traversing over the rows.\n    for (int i = 0; i < n; i++) \n    {\n        //if current row is even, we add the elements \n        //in the list from left to right.\n        if (i % 2 == 0)\n        {\n            for (int j = 0; j < n; j++)\n                output[pos++] = matrix[i][j];\n        }\n        //else current row is odd and we add the elements \n        //in the list from right to left.\n        else \n        {\n            for (int j = n - 1; j >= 0; j--)\n                output[pos++] = matrix[i][j];\n        }\n    }\n    //returning the list.\n    return output;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution\n{   \n    public:\n    //Function to return list of integers visited in snake pattern in matrix. \n    vector<int> snakePattern(vector<vector<int> > matrix)\n    {   \n        int n = matrix.size();\n        vector<int> output;\n        \n        //traversing over the rows.\n        for (int i = 0; i < n; i++) \n        {\n            //if current row is even, we add the elements \n            //in the list from left to right.\n            if (i % 2 == 0) \n            {\n                for (int j = 0; j < n; j++)\n                    output.push_back(matrix[i][j]);\n            }\n            //else current row is odd and we add the elements \n            //in the list from right to left.\n            else\n            {\n                for (int j = n - 1; j >= 0; j--)\n                    output.push_back(matrix[i][j]);\n            }\n        }\n        //returning the list.\n        return output;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    //Function to return list of integers visited in snake pattern in matrix.\n    static ArrayList<Integer> snakePattern(int matrix[][])\n    {\n        int n = matrix.length;\n        ArrayList<Integer> output = new ArrayList<Integer>();\n        \n        //traversing over the rows.\n        for(int i = 0; i < n; i++)\n        {\n            //if current row is even, we add the elements \n            //in the list from left to right.\n            if(i % 2 == 0)\n            {\n                for(int j = 0; j < n; j++)\n                    output.add(matrix[i][j]);\n            }\n            //else current row is odd and we add the elements \n            //in the list from right to left.\n            else\n            {\n                for(int j = n-1; j >= 0; j--)\n                    output.add(matrix[i][j]);\n            }\n        }\n        //returning the list.\n        return output;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\n#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to return list of integers visited in snake pattern in matrix.\n    def snakePattern(self,matrix): \n        n = len(matrix)\n        output = []\n    \n        #traversing over the rows.\n        for i in range(n): \n              \n            #if current row is even, we add the elements \n            #in the list from left to right.\n            if i % 2 == 0: \n                for j in range(n): \n                    output.append(matrix[i][j])\n      \n            #else current row is odd and we add the elements \n            #in the list from right to left.\n            else: \n                for j in range(n-1, -1, -1): \n                    output.append(matrix[i][j])\n    \n        #returning the list.\n        return output",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\n    class Solution\n    {\n       //Function to return list of integers visited in snake pattern in matrix.\n        public List<int> snakePattern(List<List<int>> matrix)\n        {\n            int n = matrix.Count;\n            List<int> output = new List<int>();\n            \n            //traversing over the rows.\n            for (int i = 0; i < n; i++) \n            {\n                //if current row is even, we add the elements \n                //in the list from left to right.\n                if (i % 2 == 0) \n                {\n                    for (int j = 0; j < n; j++)\n                        output.Add(matrix[i][j]);\n                }\n                //else current row is odd and we add the elements \n                //in the list from right to left.\n                else\n                {\n                    for (int j = n - 1; j >= 0; j--)\n                        output.Add(matrix[i][j]);\n                }\n            }\n            //returning the list.\n            return output;\n        }\n\n    }\n\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[][]} matrix\n * @returns {number[]} \n*/\nclass Solution \n{\n    //Function to return list of integers visited in snake pattern in matrix.\n    snakePattern(matrix)\n    {\n        let n = matrix.length;\n        let output = new Array();\n        \n        //traversing over the rows.\n        for (let i = 0; i < n; i++)\n        {\n            //if current row is even, we add the elements \n            //in the list from left to right.\n            if (i % 2 == 0) \n            {\n                for (let j = 0; j < n; j++)\n                    output.push(matrix[i][j]);\n            }\n            //else current row is odd and we add the elements \n            //in the list from right to left.\n            else \n            {\n                for (let j = n - 1; j >= 0; j--)\n                    output.push(matrix[i][j]);\n            }\n        }\n        //returning the list.\n        return output;  \n    } \n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}