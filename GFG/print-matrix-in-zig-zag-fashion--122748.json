{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 880222,
            "title": "Print matrix in zig-zag fashion",
            "titleSlug": "print-matrix-in-zig-zag-fashion--122748",
            "content": "<p><span >Given a 2D matrix <strong>mat[][]</strong> of n rows and m columns. Return an array while traversing the matrix in ZIG-ZAG fashion.</span></p>\n<p><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/problem_desc/Web/Other/blobid0_1731912562.png\" width=\"372\" height=\"200\" /></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>mat[][] = </span><span style=\"font-size: 18.6667px;\">[[1, 2, 3],\n\\t\\t    [4, 5, 6],\n\\t\\t    [7, 8, 9]]<strong><br />Output: </strong>1 2 4 7 5 3 6 8 9</span></pre>\n<pre><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>mat[][] = [[1, 2, 3, 4], \n\\t\\t    [5, 6, 7, 8],\n\\t\\t    [9, 10, 11, 12],\n\\t\\t    [13, 14, 15, 16]]<strong>\nOutput: </strong>1 2 5 9 6 3 4 7 10 13 14 11 8 12 15 16</span></pre>\n<p><span style=\"font-size: 18.6667px;\"><strong>Constraints:</strong><br />0&lt;= mat.size(), mat[0].size() &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D matrix `mat[][]` of n rows and m columns, traverse the matrix in a zig-zag pattern and return an array containing the elements in the order they were visited.",
                "constraints": [
                    "0 <= mat.size(), mat[0].size() <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[[1, 2, 3],[4, 5, 6],[7, 8, 9]]",
                        "output": "1 2 4 7 5 3 6 8 9",
                        "explanation": "The matrix is traversed in a zig-zag manner, resulting in the specified output."
                    },
                    {
                        "input": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]",
                        "output": "1 2 5 9 6 3 4 7 10 13 14 11 8 12 15 16",
                        "explanation": "The matrix is traversed in a zig-zag manner, resulting in the specified output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Track the movement by toggling between diagonal directions using a boolean flag, and adjust row and column indices accordingly after each step.</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<int> zigZagMatrix(vector<vector<int>> &mat) {\n        int n = mat.size();\n        int m = mat[0].size();\n        int row = 0, col = 0;\n        vector<int> res;\n\n        // Boolean variable that is true if we need\n        // to increment 'row' value;\n        // otherwise, false if we increment 'col' value.\n        bool row_inc = 0;\n\n        // Print the first half of the zig-zag pattern\n        int mn = min(m, n);\n        for (int len = 1; len <= mn; ++len) {\n            for (int i = 0; i < len; ++i) {\n                res.push_back(mat[row][col]);\n\n                if (i + 1 == len)\n                    break;\n\n                // If row_inc is true, increment row\n                // and decrement col;\n                // otherwise, decrement row and increment col.\n                if (row_inc)\n                    ++row, --col;\n                else\n                    --row, ++col;\n            }\n\n            if (len == mn)\n                break;\n\n            // Update row or col value based on the\n            // last increment\n            if (row_inc)\n                ++row, row_inc = false;\n            else\n                ++col, row_inc = true;\n        }\n\n        // Adjust row and col for the second half of the matrix\n        if (row == 0) {\n            if (col == m - 1)\n                ++row;\n            else\n                ++col;\n            row_inc = 1;\n        } else {\n            if (row == n - 1)\n                ++col;\n            else\n                ++row;\n            row_inc = 0;\n        }\n\n        // Print the second half of the zig-zag pattern\n        int MAX = max(m, n) - 1;\n        for (int len, diag = MAX; diag > 0; --diag) {\n            len = (diag > mn) ? mn : diag;\n            for (int i = 0; i < len; ++i) {\n                res.push_back(mat[row][col]);\n\n                if (i + 1 == len)\n                    break;\n\n                // Update row or col value based on the last increment\n                if (row_inc)\n                    ++row, --col;\n                else\n                    ++col, --row;\n            }\n\n            // Update row and col based on position in the matrix\n            if (row == 0 || col == m - 1) {\n                if (col == m - 1)\n                    ++row;\n                else\n                    ++col;\n                row_inc = true;\n            } else if (col == 0 || row == n - 1) {\n                if (row == n - 1)\n                    ++col;\n                else\n                    ++row;\n                row_inc = false;\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public List<Integer> zigZagMatrix(int[][] mat) {\n        int n = mat.length;\n        int m = mat[0].length;\n        int row = 0, col = 0;\n        List<Integer> res = new ArrayList<>();\n\n        boolean row_inc = false;\n\n        int mn = Math.min(m, n);\n        for (int len = 1; len <= mn; ++len) {\n            for (int i = 0; i < len; ++i) {\n                res.add(mat[row][col]);\n\n                if (i + 1 == len) break;\n\n                if (row_inc) {\n                    ++row;\n                    --col;\n                } else {\n                    --row;\n                    ++col;\n                }\n            }\n\n            if (len == mn) break;\n\n            if (row_inc) {\n                ++row;\n                row_inc = false;\n            } else {\n                ++col;\n                row_inc = true;\n            }\n        }\n\n        if (row == 0) {\n            if (col == m - 1)\n                ++row;\n            else\n                ++col;\n            row_inc = true;\n        } else {\n            if (row == n - 1)\n                ++col;\n            else\n                ++row;\n            row_inc = false;\n        }\n\n        int MAX = Math.max(m, n) - 1;\n        for (int len, diag = MAX; diag > 0; --diag) {\n            len = (diag > mn) ? mn : diag;\n            for (int i = 0; i < len; ++i) {\n                res.add(mat[row][col]);\n\n                if (i + 1 == len) break;\n\n                if (row_inc) {\n                    ++row;\n                    --col;\n                } else {\n                    ++col;\n                    --row;\n                }\n            }\n\n            if (row == 0 || col == m - 1) {\n                if (col == m - 1)\n                    ++row;\n                else\n                    ++col;\n                row_inc = true;\n            } else if (col == 0 || row == n - 1) {\n                if (row == n - 1)\n                    ++col;\n                else\n                    ++row;\n                row_inc = false;\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def zigZagMatrix(self, mat):\n        n = len(mat)\n        m = len(mat[0])\n        row, col = 0, 0\n        res = []\n\n        row_inc = False\n\n        mn = min(m, n)\n        for length in range(1, mn + 1):\n            for i in range(length):\n                res.append(mat[row][col])\n\n                if i + 1 == length:\n                    break\n\n                if row_inc:\n                    row += 1\n                    col -= 1\n                else:\n                    row -= 1\n                    col += 1\n\n            if length == mn:\n                break\n\n            if row_inc:\n                row += 1\n                row_inc = False\n            else:\n                col += 1\n                row_inc = True\n\n        if row == 0:\n            if col == m - 1:\n                row += 1\n            else:\n                col += 1\n            row_inc = True\n        else:\n            if row == n - 1:\n                col += 1\n            else:\n                row += 1\n            row_inc = False\n\n        MAX = max(m, n) - 1\n        for diag in range(MAX, 0, -1):\n            length = mn if diag > mn else diag\n            for i in range(length):\n                res.append(mat[row][col])\n\n                if i + 1 == length:\n                    break\n\n                if row_inc:\n                    row += 1\n                    col -= 1\n                else:\n                    col += 1\n                    row -= 1\n\n            if row == 0 or col == m - 1:\n                if col == m - 1:\n                    row += 1\n                else:\n                    col += 1\n                row_inc = True\n            elif col == 0 or row == n - 1:\n                if row == n - 1:\n                    col += 1\n                else:\n                    row += 1\n                row_inc = False\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    /**\n     * @param {number[][]} mat\n     * @return {number[]}\n     */\n    zigZagMatrix(mat) {\n        const n = mat.length;\n        const m = mat[0].length;\n        let row = 0, col = 0;\n        const res = [];\n\n        let row_inc = false;\n\n        const mn = Math.min(m, n);\n        for (let len = 1; len <= mn; ++len) {\n            for (let i = 0; i < len; ++i) {\n                res.push(mat[row][col]);\n\n                if (i + 1 === len) break;\n\n                if (row_inc) {\n                    ++row;\n                    --col;\n                } else {\n                    --row;\n                    ++col;\n                }\n            }\n\n            if (len === mn) break;\n\n            if (row_inc) {\n                ++row;\n                row_inc = false;\n            } else {\n                ++col;\n                row_inc = true;\n            }\n        }\n\n        if (row === 0) {\n            if (col === m - 1)\n                ++row;\n            else\n                ++col;\n            row_inc = true;\n        } else {\n            if (row === n - 1)\n                ++col;\n            else\n                ++row;\n            row_inc = false;\n        }\n\n        const MAX = Math.max(m, n) - 1;\n        for (let len, diag = MAX; diag > 0; --diag) {\n            len = (diag > mn) ? mn : diag;\n            for (let i = 0; i < len; ++i) {\n                res.push(mat[row][col]);\n\n                if (i + 1 === len) break;\n\n                if (row_inc) {\n                    ++row;\n                    --col;\n                } else {\n                    ++col;\n                    --row;\n                }\n            }\n\n            if (row === 0 || col === m - 1) {\n                if (col === m - 1)\n                    ++row;\n                else\n                    ++col;\n                row_inc = true;\n            } else if (col === 0 || row === n - 1) {\n                if (row === n - 1)\n                    ++col;\n                else\n                    ++row;\n                row_inc = false;\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}