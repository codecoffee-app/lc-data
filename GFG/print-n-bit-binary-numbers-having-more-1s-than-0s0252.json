{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703514,
            "title": "Print N-bit binary numbers having more 1s than 0s",
            "titleSlug": "print-n-bit-binary-numbers-having-more-1s-than-0s0252",
            "content": "<p><span style=\"font-size: 18px;\">Given a positive integer <strong>n</strong>. Your task is to generate a string list<strong> </strong>of all<strong> n-bit binary numbers</strong> where, for any prefix of the number, there are <strong>more or an equal</strong> number of 1's than 0's. The numbers should be sorted in <strong>decreasing order of magnitude</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>  <br />n = 2</span><span style=\"font-size: 18px;\">\n<strong style=\"font-size: 18px;\">Output:</strong><span style=\"font-size: 18px;\"> <br />{\"11\", \"10\"}\n</span><strong style=\"font-size: 18px;\">Explanation:</strong><span style=\"font-size: 18px;\"> Valid numbers are those where each prefix has more 1s than 0s:<br />11: all its prefixes (1 and 11) have more 1s than 0s.\n10: all its prefixes (1 and 10) have more 1s than 0s.<br />So, the output is \"11, 10\".</span></span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>  <br />n = 3\n<strong>Output:</strong> <br />{\"111\", \"110\", \"101\"}\n<strong>Explanation:</strong> Valid numbers are those where each prefix has more 1s than 0s.<br />111: all its prefixes (1, 11, and 111) have more 1s than 0s.\n110: all its prefixes (1, 11, and 110) have more 1s than 0s.<br />101: all its prefixes (1, 10, and 101) have more 1s than 0s.<br />So, the output is \"111, 110, 101\".</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>User Task:</strong><br />Your task is to complete the function&nbsp;<strong>NBitBinary()&nbsp;</strong>which takes a single integer&nbsp;<strong>n</strong> as input and returns the <strong>list of strings in decreasing order</strong>. You need not take any input or print anything.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|2<sup>n</sup>|)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(2<sup>n</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 15</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, generate a list of all `n`-bit binary numbers where, for any prefix of the number, the number of 1's is greater than or equal to the number of 0's.  The numbers should be sorted in decreasing order of magnitude.",
                "constraints": [
                    "1 <= n <= 15"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "{\"11\", \"10\"}",
                        "explanation": "For n=2, the valid binary numbers are '11' and '10'.  '11' has prefixes '1' and '11', both with more 1s than 0s. '10' has prefixes '1' and '10', both with more 1s than 0s."
                    },
                    {
                        "input": "3",
                        "output": "{\"111\", \"110\", \"101\"}",
                        "explanation": "For n=3, the valid binary numbers are '111', '110', and '101'. '111' has prefixes '1', '11', and '111', all with more 1s than 0s. '110' has prefixes '1', '11', and '110', all with more 1s than 0s. '101' has prefixes '1', '10', and '101', all with more 1s than 0s."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #1e2229; font-family: Nunito; font-size: 14pt; background-color: #ffffff;\">Try to build binary strings that satisfy the constraint of more or equal 1's than 0's in prefixes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\t//Recursive utility function to generate N-bit binary numbers with specified number of ones\n\tvoid NBitBinaryUtil(string number, int extraOnes, int remainingPlaces, vector<string> &ans)\n\t{\n\t\t//Base case: If all places have been filled, add the number to the answer vector and return\n\t\tif (remainingPlaces == 0) {\n\t\t\tans.push_back(number);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//Recursive call to add a '1' to the current number and update the count of extra ones and remaining places\n\t\tNBitBinaryUtil(number + \"1\", extraOnes + 1, remainingPlaces - 1, ans);\n\t\t\n\t\t//Check if there are any extra ones that can be used to add a '0'\n\t\tif (0 < extraOnes) \n\t\t\tNBitBinaryUtil(number + \"0\", extraOnes - 1, remainingPlaces - 1, ans); \n\t}\n\n\t//Function to generate all N-bit binary numbers with specified number of ones\n\tvector<string> NBitBinary(int n)\n\t{\n\t\tvector<string> ans;\n\n\t\tstring s = \"\";\n\n\t\t//Call the utility function to recursively generate the N-bit binary numbers\n\t\tNBitBinaryUtil(s, 0, n, ans);\n\n\t\treturn ans;\n\t}\n   \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    void NBitBinaryUtil(String number, int extraOnes, int remainingPlaces, ArrayList<String> ans) {\n        // Base case: If all places have been filled, add the number to the answer list and return\n        if (remainingPlaces == 0) {\n            ans.add(number);\n            return;\n        }\n\n        // Recursive call to add a '1' to the current number and update the count of extra ones and remaining places\n        NBitBinaryUtil(number + \"1\", extraOnes + 1, remainingPlaces - 1, ans);\n\n        // Check if there are any extra ones that can be used to add a '0'\n        if (extraOnes > 0) {\n            NBitBinaryUtil(number + \"0\", extraOnes - 1, remainingPlaces - 1, ans);\n        }\n    }\n\n    ArrayList<String> NBitBinary(int n) {\n        ArrayList<String> ans = new ArrayList<>();\n        String s = \"\";\n\n        // Call the utility function to recursively generate the N-bit binary numbers\n        NBitBinaryUtil(s, 0, n, ans);\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def NBitBinaryUtil(self, number, extraOnes, remainingPlaces, ans):\n        # Base case: If all places have been filled, add the number to the answer list and return\n        if remainingPlaces == 0:\n            ans.append(number)\n            return\n\n        # Recursive call to add a '1' to the current number and update the count of extra ones and remaining places\n        self.NBitBinaryUtil(number + \"1\", extraOnes + 1, remainingPlaces - 1,\n                            ans)\n\n        # Check if there are any extra ones that can be used to add a '0'\n        if extraOnes > 0:\n            self.NBitBinaryUtil(number + \"0\", extraOnes - 1,\n                                remainingPlaces - 1, ans)\n\n    def NBitBinary(self, n):\n        ans = []\n        s = \"\"\n\n        # Call the utility function to recursively generate the N-bit binary numbers\n        self.NBitBinaryUtil(s, 0, n, ans)\n        # return ans\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n  NBitBinary(n) {\n    let ans = [];\n    let s = \"\";\n\n    function NBitBinaryUtil(number, extraOnes, remainingPlaces) {\n      if (remainingPlaces === 0) {\n        ans.push(number);\n        return;\n      }\n      NBitBinaryUtil(number + \"1\", extraOnes + 1, remainingPlaces - 1);\n      if (0 < extraOnes)\n        NBitBinaryUtil(number + \"0\", extraOnes - 1, remainingPlaces - 1);\n    }\n\n    NBitBinaryUtil(s, 0, n);\n\n    return ans;\n  }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}