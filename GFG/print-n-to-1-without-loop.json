{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712048,
            "title": "Print N to 1 without loop",
            "titleSlug": "print-n-to-1-without-loop",
            "content": "<p><span style=\"font-size:18px\">Print numbers from <strong>N to 1</strong>&nbsp;(space separated) without the help of loops.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 10\r\n<strong>Output: </strong>10 9 8 7 6 5 4 3 2 1</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. You only need to complete the <strong>function printNos()&nbsp;</strong>that takes <strong>N as parameter</strong> and prints number from <strong>N to 1</strong> recursively. Don&#39;t print newline, it will be added by the driver code.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N) (Recursive).</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Constraint<br />\r\n1&lt;=n&lt;=1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Print numbers from N to 1 (space separated) without using loops. Implement the `printNos(N)` function to achieve this recursively. The driver code handles newline additions.",
                "constraints": [
                    "1 <= N <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 10",
                        "output": "10 9 8 7 6 5 4 3 2 1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution {\n    public:\n    // Function to print numbers from N to 1 recursively\n    void printNos(int N) {\n        // Base case: if N is less than or equal to 0, do nothing\n        if (N <= 0) {\n            return;\n        } else {\n            // Print N and a space\n            cout << N << \" \";\n\n            // Recursive call to print numbers from N-1 to 1\n            printNos(N - 1);\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    void printNos(int N) {\n        if (N <= 0) {\n            return; // if N is less than or equal to zero, return and end the function\n        } else {\n            System.out.print(N + \" \"); // print N\n\n            // recursive call of the function with N-1 as the argument\n            printNos(N - 1);\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to print numbers from n to 1.\n    def printNos(self, n):\n        #Base case: if n reaches 0, return.\n        if n == 0:\n            return\n        #Printing the current number and recursively calling the function for n-1.\n        print(n, end = ' ')\n        self.printNos(n - 1)",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}