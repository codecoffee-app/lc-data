{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700465,
            "title": "Print Nodes having K leaves",
            "titleSlug": "print-nodes-having-k-leaves",
            "content": "<p><span style=\"font-size:18px\">Given a binary tree and an integer value <strong>K</strong>, the task is to <strong>find all nodes</strong> data in the given binary tree<strong> having exactly K leaves </strong>in <strong>sub-tree rooted with them</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>NOTE:&nbsp;</strong>Nodes should be printed in the order in which they appear in postorder traversal.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>K = 1\r\n&nbsp;     0\r\n&nbsp;   /   \\\r\n&nbsp;  1     2<strong>\r\nOutput: </strong>-1<strong>\r\nExplanation: </strong>There&nbsp;is no node in this\r\ntree which has one leaf in the sub tree\r\nbelow it.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>K = 2\r\n&nbsp;\\t   0\r\n&nbsp;\\t /   \\\r\n&nbsp;\\t1     2\r\n&nbsp;\\t    /  \r\n&nbsp;\\t   4\r\n&nbsp;\\t /   \\\r\n&nbsp;\\t5     9<strong>\r\nOutput: </strong>4 2<strong>\r\nExplanation: </strong>Nodes with data 2 and 4, have\r\n2 leaves in the subtree below it.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong><br />\r\n<span style=\"font-size:18px\">Just complete the function <strong>btWithKleaves()&nbsp;</strong>and returns the answer (as a vector in&nbsp;<strong>CPP,&nbsp;</strong>as an ArrayList in&nbsp;<strong>java,&nbsp;</strong>and as list in&nbsp;<strong>python)</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:&nbsp;</strong>If no node is found the list returned should contain only one value -1.<br />\r\n<strong>Expected Time Complexity:&nbsp;</strong>O(N).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(Height of the Tree).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 1000<br />\r\n1 &lt;= K &lt;= 1000<br />\r\n1 &lt;= value of nodes &lt;= 10000</span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree and an integer K, find all nodes in the tree that have exactly K leaves in their subtree. Return the node values in the order they appear in a postorder traversal. If no such node exists, return a list containing only -1.",
                "constraints": [
                    "1 <= N <= 1000 (where N is the number of nodes in the tree)",
                    "1 <= K <= 1000",
                    "1 <= value of nodes <= 10000"
                ],
                "testcases": [
                    {
                        "input": "K = 1\n     0\n   /   \\\n  1     2",
                        "output": "-1",
                        "explanation": "There is no node in the tree with exactly one leaf in its subtree."
                    },
                    {
                        "input": "K = 2\n\t   0\n\t /   \\\n\t1     2\n\t    /  \n\t   4\n\t /   \\\n\t5     9",
                        "output": "4 2",
                        "explanation": "Nodes with data 4 and 2 have exactly 2 leaves in their subtrees."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>use Postorder traversal of tree</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution{\n  public:\n    // Function to recursively find the number of leaf nodes in a binary tree\n    int kleaves(struct Node *ptr, int k, int* flag,vector<int> &nodes)\n    {\n        // Base case: if node is null, return 0\n        if (ptr == NULL)\n            return 0;\n        \n        // Base case: if node is a leaf node, return 1\n        if (ptr->left == NULL && ptr->right == NULL)\n            return 1;\n        \n        // Recursively count the number of leaf nodes in the left and right subtrees\n        int total = kleaves(ptr->left, k, flag,nodes) + kleaves(ptr->right, k, flag,nodes);\n        \n        // If the number of leaf nodes is equal to k, add the node's value to the nodes vector and set flag to 1\n        if (k == total)\n        {\n            nodes.push_back(ptr->data);\n            *flag = 1;\n        }\n        return total;\n    }\n    \n    // Function to find all the nodes with k leaf nodes in a binary tree\n    vector<int> btWithKleaves(struct Node *ptr,int k)\n    {\n        // Initialize the flag variable to 0 and create a vector to store the nodes with k leaf nodes\n        int flag=0 ;\n        vector<int> nodes;\n        \n        // Call the recursive function to find the nodes with k leaf nodes\n        kleaves(ptr, k, &flag,nodes);\n        \n        // If no nodes with k leaf nodes are found, add -1 to the nodes vector\n        if(flag==0)\n        nodes = {-1};\n        \n        // Return the nodes vector\n        return nodes;\n    }\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static int flag=0;\r\n\tpublic ArrayList<Integer> btWithKleaves(Node root, int k)\r\n\t{\r\n\t\tflag=0;\r\n\t\tArrayList<Integer> nodes = new ArrayList<Integer>();\r\n\t\tkleaves(root,k,nodes);\r\n\t\tif(flag==0){\r\n\t\t    nodes.clear();\r\n\t\t    nodes.add(-1);\r\n\t\t}\r\n\t\t\r\n\t\treturn nodes;\r\n\t}\r\n\tpublic static int kleaves(Node root,int k,ArrayList<Integer> nodes)\r\n\t{\r\n\t\tif(root==null)\r\n\t\t\treturn 0;\r\n\t\tif(root.left==null&&root.right==null)\r\n\t\t\treturn 1;\r\n\t\tint total=kleaves(root.left,k,nodes)+kleaves(root.right,k,nodes);\r\n\t\tif(k==total)\r\n\t\t{\r\n\t\t\tnodes.add(root.data);\r\n\t\t    flag=1;\r\n\t\t}\r\n\t\treturn total;\r\n\t}\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nflag = True\r\nclass Solution:\r\n    def btWithKleavesUtil(self, root, k,nodes):\r\n        # Code here\r\n        if root is None:\r\n            return 0\r\n        if root.left is None and root.right is None:\r\n            return 1\r\n        total = self.btWithKleavesUtil(root.left, k,nodes) + self.btWithKleavesUtil(root.right, k,nodes)\r\n        if total == k:\r\n            nodes.append(root.data)\r\n            global flag\r\n            flag = False\r\n        return total\r\n    \r\n    def btWithKleaves(self, root, k):\r\n        # Code here\r\n        global flag\r\n        flag = True\r\n        nodes = []\r\n        self.btWithKleavesUtil(root, k,nodes)\r\n        if flag:\r\n            nodes = []\r\n            nodes.append(-1)\r\n        return nodes",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor(){\n        let flag=0; // Initialize a flag variable to keep track of whether a subtree with k leaves is found or not.\n    }\n    \n    btWithKleaves(root, k) // Function to find all subtrees with k leaves in a binary tree.\n    {\n        this.flag=0; // Reset the flag variable to 0 each time the function is called.\n        let nodes = []; // Initialize an array to store the roots of the subtrees with k leaves.\n        this.kleaves(root,k,nodes); // Call the kleaves function to find the subtrees with k leaves.\n        if(this.flag === 0){ // If no subtree with k leaves is found,\n            nodes= []; // Reset the nodes array to an empty array.\n            nodes.push(-1); // Push -1 into the nodes array to indicate that no subtree with k leaves is found.\n        }\n        return nodes; // Return the array of nodes containing roots of subtrees with k leaves.\n    }\n    \n    kleaves(root, k, nodes) // Function to find subtrees with k leaves starting from a given root node.\n    {\n        if(root === null) // If the root is null, return 0.\n            return 0;\n        if(root.left === null && root.right === null) // If the root has no left and right child, it is a leaf node.\n            return 1; // Return 1 to indicate that a leaf node is found.\n        let total=this.kleaves(root.left,k,nodes)+this.kleaves(root.right,k,nodes); // Recursively calculate the total number of leaves in the left and right subtrees.\n        if(k==total) // If the total number of leaves in the subtree is equal to k,\n        {\n            nodes.push(root.data); // Push the root data into the nodes array to store the root of the subtree with k leaves.\n            this.flag=1; // Set the flag variable to 1 to indicate that a subtree with k leaves is found.\n        }\n        return total; // Return the total number of leaves in the subtree.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}