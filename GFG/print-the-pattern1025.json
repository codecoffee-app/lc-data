{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705585,
            "title": "Print the pattern",
            "titleSlug": "print-the-pattern1025",
            "content": "<p><span style=\"font-size:18px\">Write a program that receives a number <strong>n</strong> as input and prints it in the following format as shown below.<br />\r\nLike for n = 2 the pattern will be:<br />\r\n1*2*5*6<br />\r\n--3*4</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 3\r\n<strong>Output: </strong>\r\n1*2*3*10*11*12\r\n--4*5*8*9\r\n----6*7\r\n<strong>Explaination:</strong> If the pattern shown in question \r\nis followed, this will be the output.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>pattern()</strong> which takes n as input parameter and returns a list of string where each string denotes a new line of the pattern.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(n<sup>2</sup>)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n &le; 70&nbsp;&nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Just follow the pattern.Two triangles are there. Both having the 1 digit head at bottom. Where one is increasing from the bottom and the other decreases from bottom.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "pattern-printing",
                "slug": "pattern-printing"
            }
        ],
        "companies": [
            "cgi"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to generate a pattern of strings based on a given number\n    vector<string> pattern(int n){\n        int row, column, dashes = 0;\n        int i, j, dash_counter = 0;\n        int value = 1;\n        int k, l, decrementor = 0; \n        int column_decrementor = 0;\n        int support = n - 1;\n        int temp = ((n * n) + 1);\n        int temp1 = (n * 2) - 1;\n        int z = temp;\n        int tracker;\n        vector<string> res;\n        string s;\n        for (i = 1; i <= n; i++) {\n            s = \"\";\n            // Adding dashes at the beginning of each row\n            for(int it = 0;it < dash_counter;it++)\n                s += \"-\";\n            // Filling the row with asterisks and values\n            for (j = 1; j <= (2 * n) - dash_counter; j++) {\n                 if (j % 2 == 0)\n                    s += \"*\";\n                else {\n                    s += to_string(value);\n                    value++;\n                }\n            }\n            // Adding asterisks and values after the initial row \n            for (k = 1; k <= (temp1 - decrementor); k++) {\n                if (k % 2 == 0)\n                    s += \"*\";\n                else {\n                    if (k == 1)\n                        tracker = temp;\n                    s += to_string(temp);\n                    temp++;\n                }\n            }\n            // Updating variables for next row\n            decrementor += 2;\n            temp = tracker - support;\n            support--;\n            dash_counter += 2;\n            // Adding the row to the result vector\n            res.push_back(s);\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    static List<String> pattern(int n){\r\n        int row, column, dashes = 0; //initialize variables for row, column, and dashes\r\n        int i, j, dash_counter = 0; //initialize variables for i, j, and dash_counter\r\n        int value = 1; //initialize value variable\r\n        int k, l, decrementor = 0; //initialize variables for k, l, and decrementor\r\n        int column_decrementor = 0; //initialize column_decrementor variable\r\n        int support = n - 1; //initialize support variable\r\n        int temp = ((n * n) + 1); //initialize temp variable\r\n        int temp1 = (n * 2) - 1; //initialize temp1 variable\r\n        int z = temp; //initialize z variable\r\n        int tracker=0; //initialize tracker variable\r\n        List<String> res=new ArrayList<>(); //create a new ArrayList to store the result\r\n        String s; //initialize s variable\r\n        for (i = 1; i <= n; i++) { //iterate through rows\r\n            s = \"\"; //initialize the string\r\n            for(int it = 0;it < dash_counter;it++) //add dash_counter number of dashes\r\n                s += \"-\";\r\n            for (j = 1; j <= (2 * n) - dash_counter; j++) { //add values and asterisks to the string\r\n                if (j % 2 == 0)\r\n                    s += \"*\";\r\n                else {\r\n                    s += String.valueOf(value);\r\n                    value++;\r\n                }\r\n            }\r\n            for (k = 1; k <= (temp1 - decrementor); k++) { //add values, asterisks, and update temp variable\r\n                if (k % 2 == 0)\r\n                    s += \"*\";\r\n                else {\r\n                    if (k == 1)\r\n                        tracker = temp;\r\n                    s += String.valueOf(temp);\r\n                    temp++;\r\n                }\r\n            }\r\n            decrementor += 2; //update decrementor variable\r\n            temp = tracker - support; //update temp variable\r\n            support--; //decrement support\r\n            dash_counter += 2; //update dash_counter variable\r\n            res.add(s); //add the string to the result list\r\n        }\r\n        return res; //return the result list\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def pattern(self, n):\n        # Initialize variables\n        row, column, dashes = 0, 0, 0\n        i, j, dash_counter = 0, 0, 0\n        value = 1\n        k, l, decrementor = 0, 0, 0\n        column_decrementor = 0\n        support = n - 1\n        temp = (n * n) + 1\n        temp1 = (n * 2) - 1\n        z = temp\n        tracker = 0\n        res = []\n        \n        # Loop to create the pattern\n        for i in range(1, n+1):\n            s = \"\"\n            \n            # Loop to add dashes\n            for it in range(dash_counter):\n                s += \"-\"\n            \n            # Loop to add numbers and asterisks\n            for j in range(1, (2 * n) - dash_counter + 1):\n                if (j % 2 == 0):\n                    s += \"*\"\n                else:\n                    s += str(value)\n                    value += 1\n            \n            # Loop to add numbers and asterisks in reverse order\n            for k in range(1, (temp1 - decrementor) + 1):\n                if ( k% 2) == 0:\n                    s += \"*\"\n                else:\n                    if (k == 1):\n                        tracker = temp\n                    s += str(temp)\n                    temp += 1\n            \n            # Update variables for the next row\n            decrementor += 2\n            temp = tracker - support\n            support -= 1\n            dash_counter += 2\n            res.append(s)\n        \n        return res",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}