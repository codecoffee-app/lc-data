{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704174,
            "title": "Print Without Space",
            "titleSlug": "print-without-space",
            "content": "<p><span style=\"font-size: 18px;\">Given two inputs that are stored in variables <strong>a </strong>and <strong>b</strong>, you need to print <strong>a </strong>and <strong>b</strong> in a single line without space betweenthem.<br />Note: Print a new line at the end after printing. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:a = \"Hello\", b = \"World\"<br /></span><span style=\"font-size: 18px;\"><strong>Output:</strong> HelloWorld<br /><strong>Explanation</strong>: a and b are printed in a single line without space between them.</span></pre>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two variables, `a` and `b`, concatenate them into a single string and print the result to the console.  Ensure the output contains no spaces between the values of `a` and `b`, and is followed by a newline character.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "a = \"Hello\", b = \"World\"",
                        "output": "HelloWorld\n",
                        "explanation": "The values of `a` and `b` are concatenated directly without any spaces."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\"><strong>For Java:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\">Simply concatenate the string and print</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>For Python:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\">space is added by default separator\nuse sep\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>For CPP:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\">use cout&lt;&lt;1st parameter&lt;&lt;2nd parameter&lt;&lt;endl;</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>For C:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\">use printf(&quot;%s%s\\n&quot;, 1st parameter, 2nd parameter);</span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "python-io",
                "slug": "python-io"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Java",
                "slug": "java"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nvoid utility() {\n    string a, b;\n    cin >> a >> b;\n    // Write your code below that prints ab\n    cout << a << b << endl;\n\n    // Write your code above that prints ab\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\npublic static void utility() {\n    String a = scn.nextLine();\n    String b = scn.nextLine();\n    // Your code here\n    System.out.println(a + b);\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\ndef utility():\n    a = input()\n    b = input()\n    print(a, b, sep='')\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}