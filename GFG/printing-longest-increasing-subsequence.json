{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712574,
            "title": "Print Longest Increasing Subsequence",
            "titleSlug": "printing-longest-increasing-subsequence",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer <strong>n</strong> and an array of integers <strong>arr</strong>, return the <strong>Longest Increasing Subsequence</strong> which is <em>Index-wise</em> lexicographically smallest.<br /><strong>Note -&nbsp;</strong>A subsequence&nbsp;<span style=\"font-family: monospace;\">S1</span>&nbsp;is&nbsp;<strong>Index-wise</strong>&nbsp;<strong>lexicographically smaller</strong>&nbsp;than a subsequence&nbsp;<span style=\"font-family: monospace;\">S2</span>&nbsp;if in the first position where S1 and S2 differ, sub<span style=\"font-family: 'andale mono', monospace;\">seque</span>nce&nbsp;<code>S1</code>&nbsp;has an element that appears&nbsp;<strong>earlier </strong>in the array&nbsp; arr than the corresponding element in&nbsp;<code>S2</code>.<br />LIS&nbsp; of a given sequence is defined as that longest possible subsequence all of whose elements are in increasing order. For example, the length of LIS for {10, 22, 9, 33, 21, 50, 41, 60, 80} is 6 and the LIS is {10, 22, 33, 50, 60, 80}.&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 16\narr = [0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15]\n<strong>Output:</strong>\n0 4 6 9 13 15 \n<strong>Explanation:</strong>\nlongest Increasing subsequence is 0 4 6 9 13 15  and the length of the longest increasing subsequence is 6.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">n = 1\narr = [1]\n<strong>Output:</strong>\n1</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>longestIncreasingSubsequence()&nbsp;</strong>which takes integer n and array arr&nbsp;and returns the longest increasing subsequence.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br /><strong>Expected Space Complexity:</strong> O(n)</span></p>\n<p><strong><span style=\"font-size: 18px;\">Constraint:</span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= n &lt; = 10<sup>3</sup><br />0 &lt;= arr[i] &lt;= 10<sup>9</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use a dynamic programming approach of take/not take and maintain a hash table</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the longest increasing subsequence.\n    vector<int> longestIncreasingSubsequence(int n, vector<int>& arr) {\n        // Initializing dp array with 1.\n        vector<int> dp(n, 1);\n        // Initializing hash array with index values.\n        vector<int> hash(n, 1);\n\n        // Iterating over the array elements.\n        for (int i = 0; i <= n - 1; i++) {\n            hash[i] = i; // initializing with current index\n            // Checking previous elements for increasing subsequence.\n            for (int prev_index = 0; prev_index <= i - 1; prev_index++) {\n                // Updating dp and hash values if condition satisfies.\n                if (arr[prev_index] < arr[i] && 1 + dp[prev_index] > dp[i]) {\n                    dp[i] = 1 + dp[prev_index];\n                    hash[i] = prev_index;\n                }\n            }\n        }\n\n        int ans = -1;\n        int lastIndex = -1;\n\n        // Finding the maximum length of increasing subsequence.\n        for (int i = 0; i <= n - 1; i++) {\n            if (dp[i] > ans) {\n                ans = dp[i];\n                lastIndex = i;\n            }\n        }\n\n        vector<int> temp;\n        temp.push_back(arr[lastIndex]);\n\n        // Reconstructing the subsequence using hash array.\n        while (hash[lastIndex] !=\n               lastIndex) { // till not reach the initialization value\n            lastIndex = hash[lastIndex];\n            temp.push_back(arr[lastIndex]);\n        }\n\n        // Reversing the array to get the correct order.\n        reverse(temp.begin(), temp.end());\n        return temp;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public ArrayList<Integer> longestIncreasingSubsequence(int N, int arr[]) {\n        // initialize dp array and hash array with size N\n        int[] dp = new int[N];\n        int[] hash = new int[N];\n        // fill dp array with 1 for each index\n        Arrays.fill(dp, 1);\n        // fill hash array with 1 for each index\n        Arrays.fill(hash, 1);\n\n        // find the longest increasing subsequence\n        for (int i = 0; i <= N - 1; i++) {\n            // set the hash value of current index as the index itself\n            hash[i] = i;\n            // iterate through previous indices to find the maximum dp value\n            for (int j = 0; j <= i - 1; j++) {\n                // if current element is greater than previous element\n                // and current dp value plus 1 is greater than previous dp value\n                if (arr[j] < arr[i] && dp[j] + 1 > dp[i]) {\n                    // update dp value and hash value\n                    dp[i] = dp[j] + 1;\n                    hash[i] = j;\n                }\n            }\n        }\n\n        // find the maximum dp value and its corresponding index\n        int ans = -1;\n        int lastIndex = -1;\n        for (int i = 0; i <= N - 1; i++) {\n            if (dp[i] > ans) {\n                ans = dp[i];\n                lastIndex = i;\n            }\n        }\n\n        // create an ArrayList to store the longest increasing subsequence\n        ArrayList<Integer> temp = new ArrayList<>();\n        // add the last element to the ArrayList\n        temp.add(arr[lastIndex]);\n\n        // use the hash array to backtrack and add the rest of the elements to the\n        // ArrayList\n        while (hash[lastIndex] != lastIndex) {\n            lastIndex = hash[lastIndex];\n            temp.add(arr[lastIndex]);\n        }\n        // reverse the ArrayList to get the correct order\n        Collections.reverse(temp);\n        // return the longest increasing subsequence\n        return temp;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def longestIncreasingSubsequence(self, n, arr):\r\n        #Initializing dp and pos arrays with all ones.\r\n        dp = [1] * n\r\n        pos = [1] * n\r\n        \r\n        #iterating over the array.\r\n        for i in range(n):\r\n            #setting the current position to i\r\n            pos[i] = i\r\n            \r\n            #iterating over previous indices.\r\n            for prev_index in range(i):\r\n                #checking if the element at previous index is smaller\r\n                #than the current element and the length is greater than\r\n                #the current length.\r\n                if arr[prev_index] < arr[i] and (1 + dp[prev_index] > dp[i]):\r\n                    #updating the length and the position.\r\n                    dp[i] = 1 + dp[prev_index]\r\n                    pos[i] = prev_index\r\n        \r\n        ans = lastIndex = -1\r\n        #finding the maximum length and its index.\r\n        for i in range(n):\r\n            if (dp[i] > ans):\r\n                ans = dp[i]\r\n                lastIndex = i\r\n        \r\n        temp = []\r\n        temp.append(arr[lastIndex])\r\n        \r\n        #creating the longest increasing subsequence by traversing\r\n        #through the positions array.\r\n        while(pos[lastIndex] != lastIndex):\r\n            lastIndex = pos[lastIndex]\r\n            temp.append(arr[lastIndex])\r\n    \r\n        return temp[::-1]",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public List<int> longestIncreasingSubsequence(int n, List<int> arr)\n    {\n        List<int> dp = new List<int>(n);\n        List<int> hash = new List<int>(n);\n\n        for (int i = 0; i <= n - 1; i++) {\n            hash.Add(i); // initializing with current index\n            dp.Add(1);\n            for (int prev_index = 0; prev_index <= i - 1; prev_index++) {\n\n                if (arr[prev_index] < arr[i] && 1 + dp[prev_index] > dp[i]) {\n                    dp[i] = 1 + dp[prev_index];\n                    hash[i] = prev_index;\n                }\n            }\n        }\n\n        int ans = -1;\n        int lastIndex = -1;\n\n        for (int i = 0; i <= n - 1; i++) {\n            if (dp[i] > ans) {\n                ans = dp[i];\n                lastIndex = i;\n            }\n        }\n\n        List<int> temp = new List<int>();\n        temp.Add(arr[lastIndex]);\n\n        while (hash[lastIndex] != lastIndex) { \n            lastIndex = hash[lastIndex];\n            temp.Add(arr[lastIndex]);\n        }\n\n        temp.Reverse();\n        return temp;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    longestIncreasingSubsequence(n, arr) {\n        let dp = new Array(n).fill(1);\n        let hash = new Array(n).fill(1);\n\n        for (let i = 0; i <= n - 1; i++) {\n            hash[i] = i; // initializing with current index\n            for (let prev_index = 0; prev_index <= i - 1; prev_index++) {\n                if (arr[prev_index] < arr[i] && 1 + dp[prev_index] > dp[i]) {\n                    dp[i] = 1 + dp[prev_index];\n                    hash[i] = prev_index;\n                }\n            }\n        }\n\n        let ans = -1;\n        let lastIndex = -1;\n\n        for (let i = 0; i <= n - 1; i++) {\n            if (dp[i] > ans) {\n                ans = dp[i];\n                lastIndex = i;\n            }\n        }\n\n        let temp = [ arr[lastIndex] ];\n\n        while (hash[lastIndex] !==\n               lastIndex) { // till not reach the initialization value\n            lastIndex = hash[lastIndex];\n            temp.push(arr[lastIndex]);\n        }\n\n        // reverse the array\n        temp.reverse();\n        return temp;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}