{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704529,
            "title": "Printing Maximum Sum Increasing Subsequence",
            "titleSlug": "printing-maximum-sum-increasing-subsequence4903",
            "content": "<p><span style=\"font-size:18px\">You are given an array <strong>A</strong>&nbsp;of length <strong>N</strong> .You have&nbsp;to find the maximum sum subsequence of a given sequence such that all elements of the subsequence are sorted in strictly increasing order. If there are more than one such subsequences,then print the sequence which ends closest to the starting index of the string.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 7\nA = {1, 101, 2, 3, 100, 4, 5}\n<strong>Output:</strong> {1, 2, 3, 100}\n<strong>Explaination:</strong> This subsequence has the\nhighest sum of 106.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 5\nA = {4, 2, 5, 3, 4}\n<strong>Output:</strong> {4, 5}\n<strong>Explaination:</strong> Here the subsequence {2, 3,\n4} also  provides the sum 9. But that\nends at index 4. So, answer here is the\nsequence {4, 5} which ends at 2nd index.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>maxSumSequence()</strong> which takes the array and <strong>N</strong> and returns the sequence.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 1000<br />\n1 &le; A[ i ] &le; 10000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use the concept of longest increasing subsequence.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complate function Template for C++\n\nclass Solution{\npublic:\n    vector<int> maxSumSequence(int N, int A[])\n    {\n        vector<int> dp(N, -1);\n        vector<int> par(N, -1);\n        dp[0] = A[0];\n        // For calculating the highest possible maximum sum of any subsequence\n        for(int i = 1;i < N;i++){\n            dp[i] = A[i];\n            par[i] = -1;\n            for(int j = 0;j < i;j++){\n                if(A[i] > A[j] && dp[i] < dp[j]+A[i]){\n                    dp[i] = dp[j]+A[i];\n                    par[i] = j;\n                }\n            }\n        }\n        \n        // Finding and storing the maximum sum\n        int maxi = INT_MIN, ind = 0;\n        for(int i = 0;i < N;i++){\n            if(dp[i] > maxi){\n                maxi = dp[i];\n                ind = i;\n            }\n        }\n        \n        // Storing the sequence and returning\n        vector<int> res;\n        while(ind >= 0){\n            res.push_back(A[ind]);\n            ind = par[ind];\n        }\n        reverse(res.begin(),res.end());\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution\n{\n    public List<int> maxSumSequence(int N, int[] A)\n    {\n        List<int> dp = new List<int>(N);\n        List<int> par = new List<int>(N);\n        for (int i = 0; i < N; i++)\n        {\n            // Initialize the elements to avoid out of range issues\n            dp.Add(A[i]);\n            par.Add(-1);\n        }\n\n        // The logic for calculating the maximum sum sequence\n        for (int i = 1; i < N; i++)\n        {\n            for (int j = 0; j < i; j++)\n            {\n                if (A[i] > A[j] && dp[i] < dp[j] + A[i])\n                {\n                    dp[i] = dp[j] + A[i];\n                    par[i] = j;\n                }\n            }\n        }\n\n        // Finding the index of the maximum sum\n        int maxSum = int.MinValue;\n        int index = -1;\n        for (int i = 0; i < N; i++)\n        {\n            if (dp[i] > maxSum)\n            {\n                maxSum = dp[i];\n                index = i;\n            }\n        }\n\n        List<int> result = new List<int>();\n        // Reconstructing the sequence\n        while (index >= 0)\n        {\n            result.Add(A[index]);\n            index = par[index];\n        }\n        result.Reverse();\n        return result;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}