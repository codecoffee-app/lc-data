{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702020,
            "title": "Product array puzzle",
            "titleSlug": "product-array-puzzle4525",
            "content": "<p><span ><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Given an array, <strong>arr[] </strong>c</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">onstruct a product array, </span><strong><code>res[]</code></strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> where each element in <strong>res[i] </strong></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">is the product of all elements in </span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><code>arr[]</code></strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> except </span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><code>arr[i]</code></strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">. Return this resultant array, </span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><code>res[].<br />Note: Each element is res[] lies inside the 32-bit integer range.</code></span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [10, 3, 5, 6, 2]\n<strong>Output: </strong>[180, 600, 360, 300, 900]<strong>\nExplanation: </strong>For i=0, res[i] = 3 * 5 * 6 * 2 is 180.\nFor i = 1, res[i] = 10 * 5 * 6 * 2 is 600.\nFor i = 2, res[i] = 10 * 3 * 6 * 2 is 360.\nFor i = 3, res[i] = 10 * 3 * 5 * 2 is 300.\nFor i = 4, res[i] = 10 * 3 * 5 * 6 is 900.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [12, 0]\n<strong>Output: </strong>[0, 12]<br /><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">For i = 0, res[i] is 0.<br /></span>For i = 1, res[i] is 12.</span></pre>\n<p><span ><strong>Constraints:</strong><br />2 &lt;= arr.size() &lt;= 10<sup>5</sup><br />-100 &lt;= arr[i] &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, construct a product array `res[]` where each element `res[i]` is the product of all elements in `arr[]` except `arr[i]`. Return the resultant array `res[]`.  Each element in `res[]` must lie within the 32-bit integer range.",
                "constraints": [
                    "2 <= arr.length <= 10^5",
                    "-100 <= arr[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[10, 3, 5, 6, 2]",
                        "output": "[180, 600, 360, 300, 900]",
                        "explanation": "For each index i, the output res[i] is the product of all other elements in the input array. For example, res[0] is the product of 3 * 5 * 6 * 2, which equals 180."
                    },
                    {
                        "input": "[12, 0]",
                        "output": "[0, 12]",
                        "explanation": "When the input array contains a zero, the product of all elements excluding the zero will be the only non-zero element in the output.  In this case, res[0] is 0 (product excludes 12) and res[1] is 12 (product excludes 0)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Compute left and right product arrays, then for each element, set result as the product of its left and right values, handling edge cases.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            }
        ],
        "companies": [
            "flipkart",
            "morgan-stanley",
            "accolite",
            "amazon",
            "microsoft",
            "d-e-shaw",
            "intuit",
            "opera"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> productExceptSelf(vector<int>& arr) {\n        int n = arr.size();\n        vector<int> res(n);\n\n        int product = 1;\n        int zeroCount = 0;\n\n        // Calculate product over all array elements and count zeros\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 0) {\n                zeroCount++;\n            } else {\n                product *= arr[i];\n            }\n        }\n\n        // Case 1: If there are more than one zero, return an array of zeros\n        if (zeroCount > 1) {\n            return vector<int>(n, 0); // All zeros\n        }\n\n        // Case 2: If there is exactly one zero, set the product at that index\n        if (zeroCount == 1) {\n            for (int i = 0; i < n; i++) {\n                if (arr[i] == 0) {\n                    res[i] = product;\n                } else {\n                    res[i] = 0;\n                }\n            }\n            return res;\n        }\n\n        // Case 3: If there are no zeros, calculate product except self\n        for (int i = 0; i < n; i++) {\n            res[i] = product / arr[i];\n        }\n\n        return res; // Return the resultant product array\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int[] productExceptSelf(int arr[]) {\n        int n = arr.length;\n        int[] res = new int[n];\n\n        int product = 1;\n        int zeroCount = 0;\n\n        // Calculate product over all array elements and count zeros\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 0) {\n                zeroCount++;\n            } else {\n                product *= arr[i];\n            }\n        }\n\n        // Case 1: If there are more than one zero, return an array of zeros\n        if (zeroCount > 1) {\n            return new int[n]; // All zeros\n        }\n\n        // Case 2: If there is exactly one zero, set the product at that index\n        if (zeroCount == 1) {\n            for (int i = 0; i < n; i++) {\n                if (arr[i] == 0) {\n                    res[i] = product;\n                } else {\n                    res[i] = 0;\n                }\n            }\n            return res;\n        }\n\n        // Case 3: If there are no zeros, calculate product except self\n        for (int i = 0; i < n; i++) {\n            res[i] = product / arr[i];\n        }\n\n        return res; // Return the resultant product array\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def productExceptSelf(self, arr):\n        n = len(arr)\n\n        product = 1\n        zeroCount = 0\n\n        # Calculate the total product of all elements and count zeros\n        for num in arr:\n            if num == 0:\n                zeroCount += 1\n            else:\n                product *= num\n\n        # Case 1: If there are more than one zero, return an array of zeros\n        if zeroCount > 1:\n            return [0] * n  # All zeros\n\n        # Case 2: If there is exactly one zero, set the product at that index\n        if zeroCount == 1:\n            return [product if num == 0 else 0 for num in arr]\n\n        # Case 3: If there are no zeros, calculate product except self\n        return [product // num for num in arr]  # List comprehension\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    productExceptSelf(arr) {\n        let n = arr.length;\n        let res = new Array(n).fill(1);\n\n        let product = 1;\n        let zeroCount = 0;\n\n        // Calculate the total product of all elements and count zeros\n        for (let i = 0; i < n; i++) {\n            if (arr[i] === 0) {\n                zeroCount++;\n            } else {\n                product *= arr[i];\n            }\n        }\n\n        // Case 1: If there are more than one zero, return an array of zeros\n        if (zeroCount > 1) {\n            return new Array(n).fill(0); // All zeros\n        }\n\n        // Case 2: If there is exactly one zero, set the product at that index\n        if (zeroCount === 1) {\n            for (let i = 0; i < n; i++) {\n                if (arr[i] === 0) {\n                    res[i] = product;\n                } else {\n                    res[i] = 0;\n                }\n            }\n            return res;\n        }\n\n        // Case 3: If there are no zeros, calculate product except self\n        for (let i = 0; i < n; i++) {\n            res[i] = product / arr[i];\n        }\n\n        return res; // Return the resultant product array\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}