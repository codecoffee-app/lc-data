{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702061,
            "title": "K closest point to origin",
            "titleSlug": "product-array-puzzle4634",
            "content": "<p><span style=\"font-size: 18px;\">Given a list of points on the 2-D plane and an integer K. The task is to find K closest points to the origin and print them.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: The distance between two points on a plane is the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Euclidean_distance\" target=\"_blank\" rel=\"nofollow noopener\">Euclidean distance</a>.You are require to prints the points in increasing order of their distance from the origin. If two points are at same distance from origin&nbsp;then print points in sorted order(First sort the coordinates according to the X-coordinate and in case X-coordinate is same, then sort&nbsp; according to Y-coordinate).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 3, K = 2\nPoints[] = {(3,3),(5,-1),(-2,4)}\n<strong>Output: </strong>3 3 -2 4<strong>\nExplanation: </strong>Distance between (-2, 4) and\norigin is sqrt(20).\nDistance between (3, 3) and origin is\nsqrt(18).\nDistance between (5, -1) and origin is\nsqrt(26).\nSince two(<strong>K</strong>) shortest distance from origin\nare from points <strong>(-2, 4)&nbsp;</strong>and <strong>(3, 3).</strong></span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 3, K = 2\nPoints[] = {(1,3),(-1,3),(5,8)}\n<strong>Output: </strong>-1 3 1 3<strong>\nExplanation: </strong>Distance between (-1, 3) and\norigin is sqrt(10).\nDistance between (1, 3) and origin is\nsqrt(10).\nDistance between (5, 8) and origin is\nsqrt(89).\nSince two(<strong>K</strong>) shortest distance from origin\nare from points <strong>(-1, 3)&nbsp;</strong>and <strong>(1, 3)&nbsp;</strong></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything.&nbsp;Your task is to complete&nbsp;<strong>kClosest()</strong>&nbsp;function and return the 2D array&nbsp;points[][] of size N x 2 denoting the (X,Y) cooridinates of each point and an integer K. Your task is to return a 2D array(vector/arraylist depending upon the language you choose)&nbsp;of size K x 2 denoting the (X,Y) coordinates of the K-closest points to the origin.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(nLogn)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n)&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:&nbsp;</strong><br />1 &lt;= N&nbsp;&lt;= 10<sup>5</sup><br />1 &lt;= K&nbsp;&lt;= N<br />-10<sup>3</sup></span><span style=\"font-size: 18px;\">&nbsp;&lt;= (X,Y) &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of points on a 2D plane and an integer K, find the K closest points to the origin (0, 0).  The distance between two points is the Euclidean distance. Return the points in increasing order of their distance from the origin. If two points are equidistant from the origin, sort them primarily by their X-coordinate and secondarily by their Y-coordinate.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= K <= N",
                    "-10^3 <= X, Y <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "N = 3, K = 2\nPoints[] = {(3,3),(5,-1),(-2,4)}",
                        "output": "3 3 -2 4",
                        "explanation": "The distances from the origin are approximately: (3,3) -> sqrt(18), (5,-1) -> sqrt(26), (-2,4) -> sqrt(20). The two closest points are (3, 3) and (-2, 4) with distances sqrt(18) and sqrt(20) respectively. Since sqrt(18) < sqrt(20), (3,3) appears before (-2,4) in the output. Hence the output is 3 3 -2 4"
                    },
                    {
                        "input": "N = 3, K = 2\nPoints[] = {(1,3),(-1,3),(5,8)}",
                        "output": "-1 3 1 3",
                        "explanation": "The distances from the origin are approximately: (1,3) -> sqrt(10), (-1,3) -> sqrt(10), (5,8) -> sqrt(89). The two closest points are (-1, 3) and (1, 3), both at distance sqrt(10) from the origin. Since the points are at the same distance we sort them based on the x coordinate. Therefore, -1 3 will come before 1 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. You are require to find the distance between each given points from origin and arrange them in increasing distance of their distance.<br />\n2. Then one can sort the points at same distance from origin to print the answer in correct require order.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n  public:\r\n// Complete back-end function template for C++\r\n\r\n\r\n static bool compare(const pair<int,int> &a, \r\n              const pair<int,int> &b) \r\n{   \r\n  if(a.first==b.first)\r\n    return (a.second < b.second); \r\n  return a.first<b.first;\r\n} \r\nvector<vector<int>> kClosest(vector<vector<int>>& points, int K) {\r\n        map<int,vector<pair<int,int>>> mp;\r\n        \r\n        for(int i = 0 ; i < points.size() ; ++ i) {\r\n            \r\n            int value = pow(points[i][0],2) ;\r\n            value += pow(points[i][1],2) ;\r\n            \r\n            pair<int,int> p;\r\n            \r\n            p.first = points[i][0];\r\n            p.second = points[i][1];\r\n            \r\n            mp[value].push_back(p) ;\r\n        }\r\n        \r\n        vector<vector<int>> vec;\r\n        \r\n        int count = 0;\r\n        \r\n        for(auto it = mp.begin(); it!=mp.end() ; ++ it ){\r\n            \r\n            vector<pair<int,int>> v = it->second;\r\n            \r\n            sort(v.begin(),v.end(),compare);\r\n            for(int j = 0 ; j < v.size() ; ++ j ) {\r\n                if(count>=K)break;\r\n                count++;\r\n                \r\n                vector<int> vi;\r\n                vi.push_back(v[j].first);\r\n                vi.push_back(v[j].second);\r\n                \r\n                vec.push_back(vi);\r\n            }\r\n        }\r\n        return vec;\r\n    }\r\n\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static ArrayList<ArrayList<Integer>> kClosest(ArrayList<ArrayList<Integer>> points, int K)\r\n    {\r\n        TreeMap<Integer,ArrayList<pair>> mp = new TreeMap<Integer,ArrayList<pair>>();\r\n      \r\n        \r\n        for(int i = 0 ; i < points.size() ; ++ i)\r\n        {\r\n            \r\n            int value = (int)Math.pow(points.get(i).get(0),2) ;\r\n            value += (int)Math.pow(points.get(i).get(1),2) ;\r\n            \r\n            pair p = new pair(points.get(i).get(0) , points.get(i).get(1));\r\n           \r\n            if(mp.containsKey(value))\r\n                mp.get(value).add(p);\r\n            else\r\n                {\r\n                    ArrayList<pair> temp = new ArrayList<pair>();\r\n                    temp.add(p);\r\n                    mp.put(value,temp);\r\n                }\r\n           \r\n        }\r\n        \r\n        ArrayList<ArrayList<Integer>> vec = new ArrayList<ArrayList<Integer>>();\r\n        \r\n        int count = 0;\r\n        \r\n        \r\n        for(Map.Entry<Integer,ArrayList<pair>> entry : mp.entrySet())     \r\n        {\r\n            \r\n            ArrayList<pair> v = new ArrayList<pair>();\r\n            v = mp.get(entry.getKey());\r\n            \r\n            Collections.sort(v, new comp());\r\n            for(int j = 0 ; j < v.size() ; ++ j )\r\n            {\r\n                if(count>=K)break;\r\n                count++;\r\n                \r\n                ArrayList<Integer> vi = new ArrayList<Integer>();\r\n                vi.add(v.get(j).first);\r\n                vi.add(v.get(j).second);\r\n                \r\n                vec.add(vi);\r\n            }\r\n        }\r\n        return vec;\r\n    }\r\n    \r\n    public static class comp implements Comparator<pair>\r\n    {\r\n\t\tpublic int compare(pair o1, pair o2)\r\n\t\t{\r\n\t\t    \r\n\t\t    if(o1.first != o2.first)\r\n\t\t        return o1.first - o2.first;\r\n\t\t    else\r\n\t\t        return o1.second - o2.second;\r\n\r\n\t\t  \r\n    \t}\r\n\r\n\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def kClosest(self,arr,k):\r\n        d=defaultdict(list)\r\n        \r\n        for e in arr:\r\n            dst=sqrt(e[0]**2+e[1]**2)\r\n            d[dst].append([e[0],e[1]])\r\n            d[dst].sort()\r\n        \r\n        srtdd=sorted(d)\r\n        ans=[]\r\n        for v in srtdd:\r\n            for e in d[v]:\r\n                ans.append(e)\r\n        return ans[:k]",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}