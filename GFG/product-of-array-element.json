{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700714,
            "title": "Product of an Array",
            "titleSlug": "product-of-array-element",
            "content": "<p><span >Given an array, <strong>arr[]</strong> of positive integers. <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Your task is to return the product of array elements under the given modulo, </span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">mod </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">with the value of </span></span><span style=\"font-size: 18.6667px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1000000007.</span></p>\n<p><span >Note: The <strong>modulo operation</strong> finds the remainder after the division of one number by another. For example, k(mod(m))=k%m= remainder obtained when k is divided by m</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[]<strong> </strong>= [1, 2, 3, 4]\n<strong>Output: </strong>24<br /><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><strong>Explanation</strong>:&nbsp;</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">The product of the elements in the array is </span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1&times;2&times;3&times;4=24. Since 24 is less than 1000000007, the output is simply 24.</span></span></pre>\n<pre><span ><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><strong>Input: </strong>arr[]<strong> </strong>= [</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">100000, 100000, 100000]<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><strong>Output: </strong></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">993000007<br /></span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">:  The product of the array elements is 100000 &times; 100000 &times; 100000 = 1000000000000000. Taking modulo 1000000007, the result is 1000000000000000 % 1000000007 = 993000007</span></span></pre>\n<p><span ><strong>Expected Time Complexity: </strong>O(n)<strong><br /></strong><strong>Expected Space Complexity: </strong>O(1)</span></p>\n<p><span ><strong>Constraints:</strong></span><br /><span >1&lt;=arr.size&lt;=10<sup>5</sup><br />1&lt;=arr[i]&lt;=10<sup>5</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Loop through the array and don't forget to mod after each iteration.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to calculate the product of array elements modulo mod\nclass Solution {\n  public:\n    long long int product(vector<int> &arr) {\n        long long int ans = 1;\n        long long mod = 1000000007;\n        int n = arr.size();\n        for (ll i = 0; i < n; i++) {\n            // Taking modulo of each array element\n            arr[i] = arr[i] % mod;\n\n            // Calculating the product while taking modulo at each step\n            ans = (ans * arr[i]) % mod;\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public long product(long arr[]) {\n        long ans = 1l;\n        Long mod = 1000000007l;\n\n        // Calculating the product of the array elements modulo mod\n        for (long value : arr) {\n            value = value % mod;\n\n            // Multiplying the current element with the previous product and taking\n            // modulo mod\n            ans = (ans * value) % mod;\n        }\n\n        // Returning the final product modulo mod\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def product(self, arr):\n        s = 1\n        mod = 1000000007\n        n = len(arr)\n        for i in arr:  #iterating over the elements in the array\n            a = i % mod  #taking modulus of each element with the given mod value\n            s = (\n                s * a\n            ) % mod  #taking product of all the elements using modulus operation\n        return s  #returning the final product of all the elements after performing modulus operation\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @return {number}\n */\nclass Solution {\n    product(arr) {\n        // code here\n        let ans = 1;\n        let mod = 1000000007;\n        let n = arr.length;\n        for (let i = 0; i < n; i++) {\n            arr[i] = arr[i] % mod;\n            ans = (ans * arr[i]) % mod;\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}