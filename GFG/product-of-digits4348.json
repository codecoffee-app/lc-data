{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703814,
            "title": "Numbers having alternate bits",
            "titleSlug": "product-of-digits4348",
            "content": "<p><span style=\"font-size:18px\">Given a positive integer <strong>n</strong>. The task is to check whether this integer has an alternate pattern of 0 and 1 in its binary representation or not.<br />\n<strong>NOTE: </strong>Return&nbsp;<strong>1</strong>&nbsp;if the integer has alternate 0 and 1 in its binary representation else return&nbsp;<strong>0</strong>.</span>&nbsp;<br />\n<br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: n = 12\n<strong>Output:</strong>&nbsp;0&nbsp;\n<strong>Explanation</strong>: n = 12 = &quot;1100&quot; \nHence there is no alternate pattern.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 10\n<strong>Output:&nbsp;</strong>1\n<strong>Explanation</strong>: n = 10 = &quot;1010&quot;.\nHence n has an alternate pattern.</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>bitsAreInAltOrder()&nbsp;</strong>which takes n&nbsp;as input parameter and returns&nbsp;<strong>1</strong>&nbsp;if the integer has alternate 0 and 1 in its binary representation else return&nbsp;<strong>0</strong>.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(1)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;= n&nbsp;&lt;=10<sup>15</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer 'n', determine if its binary representation has an alternating pattern of 0s and 1s. Return 1 if the binary representation of 'n' alternates between 0 and 1, and 0 otherwise.",
                "constraints": [
                    "1 <= n <= 10^15"
                ],
                "testcases": [
                    {
                        "input": "12",
                        "output": "0",
                        "explanation": "The binary representation of 12 is 1100, which does not have an alternating pattern of 0s and 1s."
                    },
                    {
                        "input": "10",
                        "output": "1",
                        "explanation": "The binary representation of 10 is 1010, which has an alternating pattern of 0s and 1s."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try Bitwise Xor operation.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    //Function to check if all bits are set.\n    long long int allBitsAreSet(long long int n){\n        //Checking if (n+1) & n is zero.\n        if (((n + 1) & n) == 0)\n            return 1;\n        return 0;\n    }\n    \n    //Function to check if bits are in alternating order.\n    long long int bitsAreInAltOrder(long long int n){\n        //XORing n with n right shifted by 1.\n        long long int num = n ^ (n >> 1);\n        //Checking if all bits of num are set.\n        return allBitsAreSet(num);   \n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}