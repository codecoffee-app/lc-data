{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703955,
            "title": "Product of Prime Factors",
            "titleSlug": "product-of-prime-factors5121",
            "content": "<p><span style=\"font-size:18px\">Given a number <strong>N</strong>&nbsp;find the product of all unique prime factors of that number.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\n<strong>Output:</strong>\n5\n<strong>Explanation:</strong>\n5 has 1 prime factor \ni.e 5 only.</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 24\n<strong>Output:</strong>\n6\n<strong>Explanation:</strong>\n24 has 2 prime factors \n3 and 2 where 3*2 = 6</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>primeProduct()</strong>&nbsp;which takes&nbsp;an integer <strong>N</strong>&nbsp;as input parameters&nbsp;and returns an integer, product of all the prime factors of N.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(sqrt(N))<br />\n<strong>Expected Space Complexity:</strong> O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, determine the product of all its unique prime factors.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "5",
                        "explanation": "The only prime factor of 5 is 5. Therefore, the product is 5."
                    },
                    {
                        "input": "24",
                        "output": "6",
                        "explanation": "The unique prime factors of 24 are 2 and 3. Therefore, the product is 2 * 3 = 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The factors from 2 to sqrt(n) have multiples from sqrt(n)+1 to n.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "    \n\nclass Solution{\npublic: \n    long long int primeProduct(int N)\n    {\n        long long int product = 1;\n     \n        // Handle prime factor 2 explicitly so that\n        // can optimally handle other prime factors.\n        if (N % 2 == 0) {\n            product *= 2;\n            while (N%2 == 0)\n               N =N/2;\n        }\n     \n        // n must be odd at this point. So we can \n        // skip one element (Note i = i +2)\n        for (int i = 3; i <= sqrt(N); i = i+2)\n        {\n            // While i divides n, print i and \n            // divide n\n            if (N% i == 0)\n            {\n                product = product * i;\n                while (N%i == 0)\n                   N = N/i;\n            }\n        }\n     \n        // This condition is to handle the case when n \n        // is a prime number greater than 2\n        if (N > 2)\n            product = product * N;\n     \n        return product;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    static long primeProduct(int N) \n    { \n        long product = 1;\n     \n        // Handle prime factor 2 explicitly so that\n        // can optimally handle other prime factors.\n        if (N % 2 == 0) {\n            product *= 2;\n            while (N%2 == 0)\n                N = N/2;\n        }\n     \n        // n must be odd at this point. So we can \n        // skip one element (Note i = i +2)\n        for (int i = 3; i <= Math.sqrt(N); i = i+2)\n        {\n            // While i divides n, print i and \n            // divide n\n            if (N % i == 0)\n            {\n                product = product * i;\n                while (N%i == 0)\n                    N = N/i;\n            }\n        }\n     \n        // This condition is to handle the case when n \n        // is a prime number greater than 2\n        if (N > 2)\n            product = product * N;\n     \n        return product;\n    } \n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nimport math\nclass Solution:\n    def primeProduct (self, N):\n        product = 1\n     \n        # Handle prime factor 2 explicitly so that\n        # can optimally handle other prime factors.\n        if (N % 2 == 0):\n            product *= 2\n            while(N%2 == 0):\n                N = N/2\n     \n        # n must be odd at this point. So we can \n        # skip one element (Note i = i +2)\n        i=3\n        while( i <= math.sqrt(N)):\n            # While i divides n, print i and \n            # divide n\n            if (N % i == 0):\n                product = product * i\n                while (N%i == 0):\n                    N = N//i\n            i = i+2\n     \n        # This condition is to handle the case when n \n        # is a prime number greater than 2\n        if (N > 2):\n            product = product * N;\n     \n        return int(product)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to calculate the product of all the prime factors of N.\n    primeProduct(N)\n    {\n        let product = 1;\n\n        // Handle prime factor 2 explicitly so that\n        // can optimally handle other prime factors.\n        if (N % 2 === 0) {\n            product *= 2;\n            while (N % 2 === 0) {\n                N /= 2;\n            }\n        }\n\n        // N must be odd at this point. So we can\n        // skip one element (Note i = i + 2)\n        let i = 3;\n        while (i <= Math.sqrt(N)) {\n            // While i divides N, multiply by i and\n            // divide N\n            if (N % i === 0) {\n                product = product * i;\n                while (N % i === 0) {\n                    N = Math.floor(N / i);\n                }\n            }\n            i = i + 2;\n        }\n\n        // This condition is to handle the case when N\n        // is a prime number greater than 2\n        if (N > 2) {\n            product = product * N;\n        }\n\n        return product;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}