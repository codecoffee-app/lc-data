{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705564,
            "title": "Product of Primes",
            "titleSlug": "product-of-primes5328",
            "content": "<p><span style=\"font-size:18px\">Given two numbers <strong>L</strong> and <strong>R</strong> (inclusive) find the<strong> product of primes </strong>within this range. Print the product modulo <strong>10<sup>9</sup>+7</strong>.&nbsp;If there are no primes in that range you must print 1.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> L = 1, R = 10\r\n<strong>Output:</strong> 210\r\n<strong>Explaination:</strong> The prime numbers are \r\n2, 3, 5 and 7.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> L = 1, R = 20\r\n<strong>Output:</strong> 9699690\r\n<strong>Explaination:</strong> The primes are 2, 3, \r\n5, 7, 11, 13, 17 and 19.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>primeProduct()</strong> which takes L and R and returns the product of the primes within the range. If there are no primes&nbsp;in that range then return 1.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O((R-L)*(logR))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(sqrt(R))</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; L &le; R &le; 10<sup>9</sup><br />\r\n0 &le; L - R &le; 10<sup>6</sup>&nbsp;&nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, L and R (inclusive), determine the product of all prime numbers within the range [L, R]. Calculate the product modulo 10<sup>9</sup> + 7. If no prime numbers exist within the specified range, return 1.",
                "constraints": [
                    "1 <= L <= R <= 10<sup>9</sup>",
                    "0 <= R - L <= 10<sup>6</sup>"
                ],
                "testcases": [
                    {
                        "input": "L = 1, R = 10",
                        "output": "210",
                        "explanation": "The prime numbers within the range [1, 10] are 2, 3, 5, and 7. Their product is 2 * 3 * 5 * 7 = 210."
                    },
                    {
                        "input": "L = 1, R = 20",
                        "output": "9699690",
                        "explanation": "The prime numbers within the range [1, 20] are 2, 3, 5, 7, 11, 13, 17, and 19. Their product is 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 = 9699690."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">How can you generate primes efficiently.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution{\r\npublic:\r\n    long long mod = 1000000007LL;\r\n    vector<long long> primes;\r\n    vector<bool> myprime;\r\n    \r\n    long long prime_generator(long long m,long long n){\r\n    \tlong long i, j, k, count, begin;\r\n    \t// Generate the primes till sqrt(n)\r\n    \tlong long range = floor(sqrt((long double)n));\r\n    \tmyprime.assign(max(range, n-m)+1, false);\r\n    \tprimes.assign(max(range, n-m)+1, 0);\r\n    \tfor(i = 0;i <= range;++i)\r\n    \t\tmyprime[i] = true;\r\n    \tmyprime[0] = false;\r\n    \tmyprime[1] = false;\r\n    \tfor(i = 2; i*i <= range;++i){\r\n    \t\tif(myprime[i]){\r\n    \t\t\tfor(j = i*i; j <= range;j += i)\r\n    \t\t\t\tmyprime[j] = false;\r\n    \t\t}\r\n    \t}\r\n    \tcount = 0;\r\n    \tfor(i = 2;i <= range;++i){\r\n    \t\tif(myprime[i]){\r\n    \t\t\tprimes[count] = i;\r\n    \t\t\t++count;\r\n    \t\t}\r\n    \t}\r\n    \t// Sieve of Eratosthenes in the range m to n\r\n    \tfor(i = 0;i < myprime.size();i++)\r\n    \t    myprime[i] = true;\r\n    \tfor(i = 0;i < count;++i){\r\n    \t\tk = primes[i];\r\n    \t\tbegin = m/k;\r\n    \t\tbegin *= k;\r\n    \t\tfor(j = begin;j <= n;j += k){\r\n    \t\t        if(j >= m)\r\n    \t\t\t\tmyprime[j-m]=false;\r\n    \t\t}\r\n    \t}\r\n        long long int pro = 1LL;\r\n    \tfor(i = 0;i < count;++i){\r\n    \t\tif(primes[i] >= m && primes[i] <= n)\r\n                pro=(pro*primes[i])%mod;\r\n    \t}\r\n    \tfor(i = 0;i <= (n-m);++i){\r\n    \t\tif(myprime[i] == true && (i+m) != 1){\r\n                pro = (pro*(i+m))%mod;\r\n    \t\t}\r\n    \t}\r\n    \treturn (pro%mod);\r\n    }\r\n    \r\n    long long primeProduct(long long L, long long R){\r\n        long long ans = prime_generator(L, R);\r\n        return (ans%mod);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from math import sqrt\n\nclass Solution:\n\n    # Function to check if a number is prime.\n    def prime(self,n):\n        if n==1 or n==0:\n            return False\n        if n==2 or n==3:\n            return True\n        if n%2==0 or n%3==0:\n            return False\n        for i in range(5,int(sqrt(n))+1,6):\n            if n%i==0 or n%(i+2)==0:\n                return False\n        return True\n\n    # Function to calculate the product of prime numbers within the given range.\n    def primeProduct(self, L, R):\n        d=1\n        for i in range(L,R+1):\n            if self.prime(i):\n                d=d*i\n                d=d%(10**9+7)\n        return d%(10**9+7)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\n//User function Template for \nclass Solution{\n    primeProduct(L, R){\n        var mod = BigInt(1000000007);\n        var primes = [];\n        var myprime = [];\n\n        var prime_generator = function (m, n) {\n            var i, j, k, count, begin;\n            var range = Math.floor(Math.sqrt(n));\n            myprime = new Array(Math.max(range, n - m) + 1).fill(false);\n            primes = new Array(Math.max(range, n - m) + 1).fill(0);\n            for (i = 0; i <= range; ++i)\n                myprime[i] = true;\n            myprime[0] = false;\n            myprime[1] = false;\n            for (i = 2; i * i <= range; ++i) {\n                if (myprime[i]) {\n                    for (j = i * i; j <= range; j += i)\n                        myprime[j] = false;\n                }\n            }\n            count = 0;\n            for (i = 2; i <= range; ++i) {\n                if (myprime[i]) {\n                    primes[count] = i;\n                    ++count;\n                }\n            }\n            for (i = 0; i < myprime.length; i++)\n                myprime[i] = true;\n            for (i = 0; i < count; ++i) {\n                k = primes[i];\n                begin = Math.floor(m / k);\n                begin *= k;\n                for (j = begin; j <= n; j += k) {\n                    if (j >= m)\n                        myprime[j - m] = false;\n                }\n            }\n            var pro = BigInt(1);\n            for (i = 0; i < count; ++i) {\n                if (primes[i] >= m && primes[i] <= n)\n                    pro = (pro * BigInt(primes[i])) % mod;\n            }\n            for (i = 0; i <= (n - m); ++i) {\n                if (myprime[i] === true && (i + m) !== 1) {\n                    pro = (pro* BigInt(i + m)) % mod;\n                }\n            }\n            return pro % mod;\n        }\n\n        const ans = prime_generator(L, R);\n        return (ans % mod) + \"\";\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution\n{\n    public long primeProduct(long L, long R)\n    {\n        long mod = 1000000007;\n        List<long> primes = new List<long>();\n        List<bool> isPrime = new List<bool>(new bool[R - L + 1]);\n\n        for (long i = 0; i < R - L + 1; i++)\n            isPrime[(int)i] = true;\n\n        for (long i = 2; i * i <= R; i++)\n        {\n            for (long j = Math.Max(i * i, ((L + i - 1) / i) * i); j <= R; j += i)\n            {\n                isPrime[(int)(j - L)] = false;\n            }\n        }\n\n        long product = 1;\n        for (long i = L; i <= R; i++)\n        {\n            if (isPrime[(int)(i - L)])\n            {\n                if (i != 1) // Skip 1 as it is not a prime number\n                {\n                    product = (product * i) % mod;\n                    primes.Add(i);\n                }\n            }\n        }\n\n        return product;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}