{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702721,
            "title": "Professor and Parties",
            "titleSlug": "professor-and-parties2000",
            "content": "<p><span style=\"font-size: 18px;\">A professor attended a party and classified it into two categories based on the colors of the robes. If all party members are wearing different colored robes, represented by positive integers in the array <strong>arr[]</strong>, then it is a girl's only party. If there is at least one duplicate color, it is a boy's party. Determine the type of party by returning &ldquo;true&rdquo; if it&rsquo;s a boy&rsquo;s party, otherwise, return &ldquo;false&rdquo;.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [1, 2, 3, 4, 7]\n<strong>Output: </strong>false\n<strong>Explanation: </strong>All the colors are unique so it's a GIRLS party.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 3, 2, 4, 5, 1]\n<strong>Output: </strong>true\n<strong>Explanation: </strong>There are two colors 1. So it's a BOYS party.</span></pre>\n<p><span style=\"font-size: 18px;\"><br /><br /></span><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space: </strong>O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr<sub>i </sub>&le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Store the frequency of the element and check for frequency greater than 1.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\nclass Solution {\n  public: // Function to determine the type of party.\n    string PartyType(vector<int>& arr) {\n        // Creating an unordered map to keep track of the frequency of each element.\n        unordered_map<int, int> mp;\n        int n = arr.size();\n\n        // Initializing a flag variable to 0.\n        int flag = 0;\n\n        // Iterating over the array.\n        for (int i = 0; i < n; i++) {\n\n            // If the element is encountered for the first time,\n            // increment its frequency in the map.\n            if (mp[arr[i]] == 0) {\n                mp[arr[i]]++;\n            }\n            // If the frequency of the element is greater than 0,\n            // set the flag variable to 1.\n            else {\n                flag = 1;\n            }\n        }\n\n        // If the flag variable is 1, return \"true\".\n        if (flag == 1)\n            return \"true\";\n\n        // If the flag variable is 0, return \"false\".\n        return \"false\";\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to determine the party type based on the given input array.\n    public static String PartyType(int arr[]) {\n        // Creating a HashMap to store the frequency of elements.\n        HashMap<Integer, Integer> mp = new HashMap<>();\n        // Initializing a flag variable to track if there are any duplicate elements.\n        int flag = 0;\n        // Iterating through the input array.\n        for (int i = 0; i < arr.length; i++) {\n            // Checking if the element already exists in the HashMap.\n            if (mp.getOrDefault(arr[i], 0) == 0) {\n                // If not, adding it to the HashMap with a frequency of 1.\n                mp.put(arr[i], 1);\n            } else {\n                // If it already exists, setting the flag to 1.\n                flag = 1;\n            }\n        }\n\n        // Checking the flag value to determine the party type.\n        if (flag == 1) return \"true\";\n        return \"false\";\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to determine whether it is a boys' party or girls' party.\n    def PartyType(self, arr):\n        mp = {}\n        flag = 0\n        n = len(arr)\n\n        #iterating over the given list.\n        for i in range(0, n):\n\n            #Checking if the element already exists in the map.\n            #If not, add it to the map as key with value 1.\n            if (mp.get(arr[i]) == None):\n                mp[arr[i]] = 1\n\n            #If the element already exists in the map, set flag to 1.\n            else:\n                flag = 1\n\n        #If flag is 1, it means there are at least 2 students with the same gender,\n        #so return \"BOYS\" as the party type.\n        if (flag == 1):\n            return \"true\"\n\n        #If flag is 0, it means all students have unique genders,\n        #so return \"GIRLS\" as the party type.\n        return \"false\"\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @returns {string}\n */\n\nclass Solution {\n    // Function to determine whether it is a boys' party or girls' party.\n    PartyType(arr) {\n        let mp = {};\n        let n = arr.length;\n        let flag = 0;\n\n        // iterating over the given list.\n        for (let i = 0; i < n; i++) {\n\n            // Checking if the element already exists in the map.\n            // If not, add it to the map as key with value 1.\n            if (mp[arr[i]] == undefined) {\n                mp[arr[i]] = 1;\n            }\n\n            // If the element already exists in the map, set flag to 1.\n            else {\n                flag = 1;\n            }\n        }\n\n        // If flag is 1, it means there are at least 2 students with the same gender,\n        // so return \"BOYS\" as the party type.\n        if (flag === 1) {\n            return \"true\";\n        }\n\n        // If flag is 0, it means all students have unique genders,\n        // so return \"GIRLS\" as the party type.\n        return \"false\";\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}