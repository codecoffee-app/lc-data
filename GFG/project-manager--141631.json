{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706082,
            "title": "Project Manager",
            "titleSlug": "project-manager--141631",
            "content": "<p><span style=\"font-size:18px\">An IT company is working on a large project. The project is broken into <strong>N</strong> modules and distributed to different teams. Each team can work parallelly. The amount of time (in months) required to complete each module is given in an array <strong>duration[ ]</strong>&nbsp;<em>i.e.</em> time needed to complete<strong> i<sup>th</sup>&nbsp;</strong>module is <strong>duration[i]</strong> months.&nbsp;<br />\r\nYou are also given&nbsp;<strong>M</strong> <strong>dependencies</strong>&nbsp;such that for each i (1 &le; i &le; M)&nbsp;&nbsp;<strong>dependencies[i][1]<sup>th</sup> </strong>module can be started after&nbsp;<strong>dependencies[i][0]<sup>th</sup> </strong>module is completed.<br />\r\nAs the project manager, compute the minimum time required to complete the project.<br />\r\n<strong>Note</strong>: It is guaranteed that a module is not dependent on itself.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 6, M = 6\r\nduration[] = {1, 2, 3, 1, 3, 2}\r\ndependencies[][]:\r\n[[5, 2]\r\n [5, 0]\r\n [4, 0]&nbsp;\r\n [4, 1]\r\n [2, 3]\r\n [3, 1]]\r\n<strong>Output:</strong> \r\n8\r\n<strong>Explanation: </strong>\r\n</span><img alt=\"graph\" src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/graph.png\" style=\"height:200px; width:250px\" />\r\n<span style=\"font-size:18px\">The Graph of dependency forms this and \r\nthe project will be completed when Module \r\n1 is completed which takes 8 months.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3, M = 3\r\nduration[] = {5, 5, 5}\r\ndependencies[][]:\r\n[[0, 1]\r\n [1, 2]\r\n [2, 0]]\r\n<strong>Output:</strong> \r\n-1\r\n<strong>Explanation: </strong>\r\nThere is a cycle in the dependency graph \r\nhence the project cannot be completed.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nComplete the function <strong>minTime()</strong> which takes <strong>N</strong>, <strong>M</strong>, <strong>duration</strong> <strong>array</strong>, and <strong>dependencies</strong> <strong>array</strong> as input parameter and return the minimum time required. return -1 if the project can not be completed.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N+M)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le;&nbsp;N &le;&nbsp;10<sup>5</sup><br />\r\n0 &le;&nbsp;M &le;&nbsp;2*10<sup>5</sup><br />\r\n0 &le;&nbsp;duration[i] &le;&nbsp;10<sup>5</sup><br />\r\n0 &le;&nbsp;dependencies[i][j]&nbsp;&lt;&nbsp;N</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "An IT company is managing a large project broken into N modules assigned to different teams working in parallel. Each module's completion time (in months) is given in the `duration[]` array, where `duration[i]` represents the time for the i-th module. There are M dependencies between modules. For each dependency `dependencies[i]`, module `dependencies[i][1]` can only start after module `dependencies[i][0]` is completed. As the project manager, determine the minimum time required to complete the entire project.  It is guaranteed that a module is not dependent on itself.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= M <= 2 * 10^5",
                    "0 <= duration[i] <= 10^5",
                    "0 <= dependencies[i][j] < N"
                ],
                "testcases": [
                    {
                        "input": "N = 6, M = 6\nduration[] = {1, 2, 3, 1, 3, 2}\ndependencies[][]:\n[[5, 2]\n [5, 0]\n [4, 0]\n [4, 1]\n [2, 3]\n [3, 1]]",
                        "output": "8",
                        "explanation": "The project's dependency graph dictates that module 1 takes the longest to complete, requiring 8 months in total, considering all dependencies."
                    },
                    {
                        "input": "N = 3, M = 3\nduration[] = {5, 5, 5}\ndependencies[][]:\n[[0, 1]\n [1, 2]\n [2, 0]]",
                        "output": "-1",
                        "explanation": "The dependency graph contains a cycle, making it impossible to complete the project."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use topological sorting. Check for cycle, and use back tracking dfs to calculate the answer.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n    //Function to find the minimum time required to complete all tasks.\n    int minTime(vector<pair<int, int>> &dependency, int duration[], int n, int m) {\n        //Creating an adjacency list to represent the dependency graph.\n        vector<int> v[n+1];\n\n        //Initializing the arrays for visited nodes, degrees, and time requirement.\n        int vis[n+1]={0},deg[n+1]={0},req[n+1]={0},ans=0;\n\n        //Iterating over the dependency pairs to fill in the adjacency list and degrees array.\n        for(auto i:dependency)\n        {\n            v[i.first].push_back(i.second);\n            deg[i.second]++;\n        }\n\n        //Creating a queue to perform topological sorting.\n        vector<int> q;\n\n        //Iterating over the tasks to find the starting tasks (degree = 0) and initialize the time requirements.\n        for(int i=0;i<n;i++)\n        {\n            if(deg[i]==0)\n            {\n                //Marking the task as visited and adding it to the queue.\n                vis[i]=1;\n                q.push_back(i);\n            }\n            req[i]=duration[i];\n            ans=max(ans,req[i]);\n        }\n\n        //Performing topological sorting using the queue.\n        while(q.size())\n        {\n            int node=q.back();\n            q.pop_back();\n            for(auto i:v[node])\n            {\n                //Reducing the degree of the dependent tasks.\n                deg[i]--;\n\n                //Updating the time requirement of the dependent task.\n                req[i]=max(req[node]+duration[i],req[i]);\n\n                //If the degree becomes 0, marking the task as visited and adding it to the queue.\n                if(deg[i]==0){\n                q.push_back(i);\n                vis[i]=1;\n                ans=max(ans,req[i]);\n                }\n            }\n        }\n\n        //Checking if there are any tasks that were not visited (means there was a cycle in the graph).\n        for(int i=0;i<n;i++)\n        if(vis[i]==0)\n        return -1;\n        \n        //Returning the minimum time required to complete all tasks.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    public int minTime(ArrayList<pair> dependency, int duration[], int n, int m) {\r\n        ArrayList<Integer> v[] = new ArrayList[n+1];\r\n        \r\n        for(int i = 0; i <= n; i++)\r\n            v[i] = new ArrayList<>();\r\n        \r\n        int[] vis = new int[n+1],deg = new int[n+1],req = new int[n+1];\r\n        int ans = 0;\r\n        \r\n        for(pair i:dependency)\r\n        {\r\n            v[i.x].add(i.y);\r\n            deg[i.y]++;\r\n        }\r\n        Stack<Integer> q = new Stack<>();\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            if(deg[i]==0)\r\n            {\r\n                vis[i]=1;\r\n                q.push(i);\r\n            }\r\n            req[i]=duration[i];\r\n            ans = Math.max(ans,req[i]);\r\n        }\r\n        while(!q.isEmpty())\r\n        {\r\n            int node=q.pop();\r\n            for(int i:v[node])\r\n            {\r\n                deg[i]--;\r\n                req[i]=Math.max(req[node]+duration[i],req[i]);\r\n                if(deg[i]==0){\r\n                q.push(i);\r\n                vis[i]=1;\r\n                ans=Math.max(ans,req[i]);\r\n                }\r\n            }\r\n        }\r\n        for(int i=0;i<n;i++)\r\n        if(vis[i]==0)\r\n        return -1;\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}