{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704115,
            "title": "Pronic Number",
            "titleSlug": "pronic-number0729",
            "content": "<p><span style=\"font-size: 18px;\">A pronic number is a number which is the product of two consecutive integers. Find all Pronic Numbers less than &nbsp;or equal to the given integer <strong>N</strong>.<br />The first few Pronic numbers are:&nbsp;0, 2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132&nbsp;and so on.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 6\n<strong>Output:\n</strong>0 2 6\n<strong>Explanation:\n</strong>0 is the product of 0 and 1.\n2 is the product of 1 and 2.\n6 is the product of 2 and 3.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 56\n<strong>Output:</strong>\n0 2 6 12 20 30 42 56\n<strong>Explanation:</strong>\n0 is the product of 0 and 1.\n2 is the product of 1 and 2.\n6 is the product of 2 and 3.\n12 is the product of 3 and 4.\nand so on.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:&nbsp;</strong><br />1 &lt;= N&nbsp;&lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A pronic number is defined as a number that can be expressed as the product of two consecutive integers. Given an integer N, find all pronic numbers less than or equal to N.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "6",
                        "output": "0 2 6",
                        "explanation": "The pronic numbers less than or equal to 6 are: 0 (0 * 1), 2 (1 * 2), and 6 (2 * 3)."
                    },
                    {
                        "input": "56",
                        "output": "0 2 6 12 20 30 42 56",
                        "explanation": "The pronic numbers less than or equal to 56 are: 0 (0 * 1), 2 (1 * 2), 6 (2 * 3), 12 (3 * 4), 20 (4 * 5), 30 (5 * 6), 42 (6 * 7), and 56 (7 * 8)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Run a loop to&nbsp;mark the pronic numbers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\npublic:\r\n    // Function to find pronic numbers up to N\r\n    vector<int> pronicNumbers(int N)\r\n    {\r\n        vector<int> result;\r\n        bool a[N+1000];\r\n        \r\n        // Initializing the array with false values\r\n        for(int i=0;i<=N;i++){\r\n            a[i]=false;\r\n        }\r\n        \r\n        // Marking the pronic numbers as true in the array\r\n        for(int i=0;i*i<=N;i++)\r\n            a[i*(i+1)]=true;\r\n            \r\n        // Adding the pronic numbers to the result vector\r\n        for(int i=0;i<=N;i++)\r\n        {\r\n            if(a[i])\r\n                result.push_back(i);\r\n        }\r\n        return result;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}