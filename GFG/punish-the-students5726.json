{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702847,
            "title": "Punish the Students",
            "titleSlug": "punish-the-students5726",
            "content": "<p><span style=\"font-size:18px\">A Professor conducts a Computer Science paper for <strong>N</strong>&nbsp;students. He had strictly instructed all students to sit according to their roll numbers. However when he started checking the papers, he found out that all the papers were randomly ordered because&nbsp;the students had sat randomly during the exam instead of sitting according to their roll numbers. The order is given in list of integers <strong>roll[ ].</strong>&nbsp;The professor became&nbsp;very angry and he wanted to teach the students a lesson.<br />\r\nHe decided&nbsp;to sort the papers according to roll numbers&nbsp;by Bubble Sort and count the number of swaps required for each and every student and deduct as many marks of a student as were the number of swaps required for that student.&nbsp;The marks of every student is given in list of integers <strong>marks[ ]&nbsp;</strong>in the order in which they were sitting.&nbsp;However he also has to maintain the class average&nbsp;greater than or equal to a set minimum <strong>avg</strong>, else he may lose his job. The Professor wants to know whether he should punish the students or save his job.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 5 \r\navg = 68\r\nroll[] = {3, 2, 4, 1, 5}\r\nmarks[] = {50, 67, 89, 79, 58}\r\n<strong>Output: </strong>0\r\n<strong>Explanation: </strong>Overall number of swaps required \r\nis 8. Hence the class average would become\r\n(50 + 67 + 89 + 79 + 58 - 8) / 5 = 67\r\nSince 67 is less than the required minimum (68),\r\nhe will not punish the class to save his Job.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 6 \r\navg = 67.5\r\nroll[] = {5, 4, 1, 3, 2, 6}\r\nmarks[] = {78, 98, 86, 67, 78, 79}\r\n<strong>Output: </strong>1\r\n<strong>Explanation: </strong>Overall number of swaps required \r\nis 16. Hence the class average would become\r\n(78 + 98 + 86 + 67 + 78 + 79 - 16) / 6 = 78.33.\r\nSince 78.33 is greater than the required \r\nminimum (67.5), he will punish the class and \r\ndeduct the marks.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>shouldPunish()&nbsp;</strong>which takes the array&nbsp;<strong>roll[]</strong>&nbsp;describing the order of students while sitting for&nbsp;the exam, the array&nbsp;<strong>marks[]&nbsp;</strong>describing the marks of the students, an integer <strong>N</strong> denoting the number of students and an&nbsp;<strong>avg&nbsp;</strong>denoting the required minimum average that is to be maintained as input parameters and&nbsp;returns 1 if the professor will punish the students or&nbsp;0 otherwise.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N<sup>2</sup>).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints</strong>:<br />\r\n1 &le; N &le; 1000</span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A professor administered a Computer Science exam to N students, instructing them to sit in order of their roll numbers. However, the papers were found to be randomly ordered, indicating the students didn't follow the seating arrangement. The professor, wanting to penalize the students, decides to sort the papers according to roll numbers using Bubble Sort. He'll then deduct marks from each student equal to the number of swaps required to place their paper in the correct order. The initial marks are provided in the `marks[]` array, corresponding to the students' actual seating order. The professor must also maintain a class average greater than or equal to a given minimum average `avg`, or risk losing his job. Determine whether the professor should punish the students (deduct marks) or prioritize maintaining the minimum average.",
                "constraints": [
                    "1 <= N <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 5\navg = 68\nroll[] = {3, 2, 4, 1, 5}\nmarks[] = {50, 67, 89, 79, 58}",
                        "output": "0",
                        "explanation": "The total number of swaps required to sort the roll numbers is 8.  The resulting average mark after deducting swaps is (50 + 67 + 89 + 79 + 58 - 8) / 5 = 67. Since 67 is less than the required minimum average of 68, the professor should not punish the students."
                    },
                    {
                        "input": "N = 6\navg = 67.5\nroll[] = {5, 4, 1, 3, 2, 6}\nmarks[] = {78, 98, 86, 67, 78, 79}",
                        "output": "1",
                        "explanation": "The total number of swaps needed to sort the roll numbers is 16. The updated average after deducting swaps is (78 + 98 + 86 + 67 + 78 + 79 - 16) / 6 = 78.33. Because 78.33 exceeds the minimum average of 67.5, the professor will punish the students."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Just run a normal bubble sort algorithm and calculate the number of swaps done.<br />\nThe sum total of swaps done for all the students would be double of the number of swaps you did for the bubble sort.<br />\nHence, if the total number of swaps in bubble sort = S, then the new average would be (marks_sum - 2*S) / N.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n    int shouldPunish (int roll[], int marks[], int n, double avg)\r\n    {\r\n    \tint swaps = 0; // to calculate the total number of swaps\r\n    \tfor (int i = 0; i < n; ++i)\r\n    \t{\r\n    \t\tfor (int j = 0; j < n - i - 1; ++j)\r\n    \t\t{\r\n    \t\t\tif (roll[j] > roll[j + 1])\r\n    \t\t\t{\r\n    \t\t\t\tswap (roll[j], roll[j + 1]);\r\n    \t\t\t\t// with a single swap, total swaps increases by 2\r\n    \t\t\t\t// (1 for each element being swapped)\r\n    \t\t\t\tswaps += 2;\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    \r\n    \tint sum = 0;\r\n    \tfor (int i = 0; i < n; ++i)\r\n    \t\tsum += marks[i];\r\n    \r\n    \t// sum of marks after deduction\r\n    \tsum -= swaps;\r\n    \r\n    \t// returning 1 if the new average is greater than or equal to the\r\n    \t// required minimum\r\n    \treturn (sum / double (n) >= avg);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static int shouldPunish (int roll[], int marks[], int n, double avg)\r\n    {\r\n        int swaps = 0; // to calculate the total number of swaps\r\n    \tfor (int i = 0; i < n; ++i)\r\n    \t{\r\n    \t\tfor (int j = 0; j < n - i - 1; ++j)\r\n    \t\t{\r\n    \t\t\tif (roll[j] > roll[j + 1])\r\n    \t\t\t{\r\n    \t\t\t\tint temp = roll[j];\r\n    \t\t\t\troll[j] = roll[j+1];\r\n    \t\t\t\troll[j+1] = temp;\r\n    \t\t\t\t// with a single swap, total swaps increases by 2\r\n    \t\t\t\t// (1 for each element being swapped)\r\n    \t\t\t\tswaps += 2;\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    \r\n    \tint sum = 0;\r\n    \tfor (int i = 0; i < n; ++i)\r\n    \t\tsum += marks[i];\r\n    \r\n        // sum of marks after deduction\r\n    \tsum -= swaps;\r\n        \r\n        // returning 1 if the new average is greater than or equal to the\r\n        // required minimum\r\n    \tif ((sum / (double)n) >= avg)\r\n    \t    return 1;\r\n    \telse \r\n    \t    return 0;\r\n    }\r\n}\r\n\r\n// Contributed By: Pranay Bansal",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to determine if a student should be punished or not.\r\n    def shouldPunish (self, roll, marks, n, avg):\r\n        swaps = 0\r\n\r\n        #Iterating over the roll list to perform bubble sort\r\n        for i in range (n):\r\n            for j in range (n - i - 1):\r\n\r\n                #Checking if the current roll number is greater than the next roll number\r\n                #If yes, then swapping the roll numbers and incrementing the swaps count by 2\r\n                if roll[j] > roll[j+1]:\r\n                    roll[j], roll[j+1] = roll[j+1], roll[j];\r\n                    swaps += 2\r\n        \r\n        Sum = sum (marks)\r\n        #Subtracting the number of swaps from the total sum of marks\r\n        Sum -= swaps\r\n\r\n        #Checking if the average marks are greater than or equal to the given average\r\n        if Sum / n >= avg:\r\n            return 1\r\n        else:\r\n            return 0",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}