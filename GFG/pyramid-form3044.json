{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705449,
            "title": "Pyramid form",
            "titleSlug": "pyramid-form3044",
            "content": "<p><span style=\"font-size:18px\">We have an array <strong>a[] </strong>of <strong>N</strong> stones of various heights laid out in a row. By taking some consecutive section of the stones, we wish to form a pyramid, where the height of the stones start from 1, increase by 1, until it reaches some value x, then decreases by 1 until it reaches 1 again i.e. the stones should be 1, 2, 3, 4&hellip;x &ndash; 1, x, x &ndash; 1, x &ndash; 2 &hellip; 1. All other stones not part of the pyramid should have a height 0. We cannot move any of the stones from their current position, however, by paying a fee of 1, we can reduce the heights of the stones. We wish to minimize the cost of building a pyramid. Output the minimum cost to build this pyramid. Assume that always a pyramid would be made of the input elements.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span><span style=\"font-size:18px\"> </span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>6</span>\r\n<span style=\"font-size:18px\"><strong>a[] = </strong>{1, 2, 3, 4, 2, 1}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">4</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">We </span><span style=\"font-size:18px\">can obtain the array {1, 2, 3, 2, 1, 0}\r\nby substracting 2 out of 4, 1 out of 2,\r\nand 1 out of 1. In total, we will substract 4.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span><span style=\"font-size:18px\"> </span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>3</span>\r\n<span style=\"font-size:18px\"><strong>a[] = </strong>{1, 2, 1}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">0</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The array is already in Pyramid form.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>pyramidForm()</strong> which takes an Integer N and an array a[] as input and returns the minimum cost.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= a[i] &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `a[]` of `N` stones with varying heights arranged in a row, the goal is to form a pyramid by selecting a consecutive section of stones. A pyramid is defined as a sequence of heights that increase from 1 to `x` and then decrease back to 1 (e.g., 1, 2, 3, ..., x-1, x, x-1, ..., 1).  Stones not part of the pyramid should have a height of 0.  Stones cannot be moved. The height of any stone can be reduced by paying a cost of 1 for each unit reduced. Determine the minimum cost to transform the array into the described form. It is guaranteed that at least one valid pyramid can be formed from the input.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= a[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 6\na[] = {1, 2, 3, 4, 2, 1}",
                        "output": "4",
                        "explanation": "The array can be transformed into {1, 2, 3, 2, 1, 0} by reducing the '4' to '3' (cost 1), reducing the second '2' to '1' (cost 1), reducing the last '1' to '0' (cost 1), and subtracting '1' from '2' for last second last element (cost 1). Total cost is 4."
                    },
                    {
                        "input": "N = 3\na[] = {1, 2, 1}",
                        "output": "0",
                        "explanation": "The array is already in the desired pyramid form, so no cost is incurred."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Dynammic Programming to solve the problem in Linear Time Complexity.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\r\n\r\nclass Solution {\r\n  public:\r\n    int pyramidForm(int a[], int N) {\r\n        \r\n        int sum = 0;\r\n        \r\n        // Calculating sum of the whole array\r\n\t    for(int i=0; i<N; i++)\r\n\t        sum += a[i];\r\n\t        \r\n\t    // If array is of size less than 3, the answer will always be sum-1\r\n\t    // because the pyramid form will have only a 1.\r\n        if(N<=2)\r\n            return sum-1;\r\n            \r\n        vector<int> left(N) , right(N);\r\n\t    \r\n\t    left[0] = 1;\r\n\t    for(int i=1; i<N-1; i++)\r\n\t        left[i] = min(left[i-1]+1, a[i]);\r\n\t    \r\n\t    right[N-1] = 1;\r\n\t    for(int i=N-2; i>0; i--)\r\n\t        right[i] = min(right[i+1]+1, a[i]);\r\n\t    \r\n\t    int ans = INT_MAX;\r\n\t    \r\n\t    for(int i=1; i<N-1; i++)\r\n\t        ans = min(ans, (int)(sum - pow(min(left[i],right[i]), 2)));\r\n\t    \r\n\t    return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}