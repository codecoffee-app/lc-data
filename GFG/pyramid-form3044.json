{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705449,
            "title": "Pyramid form",
            "titleSlug": "pyramid-form3044",
            "content": "<p><span style=\"font-size:18px\">We have an array <strong>a[] </strong>of <strong>N</strong> stones of various heights laid out in a row. By taking some consecutive section of the stones, we wish to form a pyramid, where the height of the stones start from 1, increase by 1, until it reaches some value x, then decreases by 1 until it reaches 1 again i.e. the stones should be 1, 2, 3, 4&hellip;x &ndash; 1, x, x &ndash; 1, x &ndash; 2 &hellip; 1. All other stones not part of the pyramid should have a height 0. We cannot move any of the stones from their current position, however, by paying a fee of 1, we can reduce the heights of the stones. We wish to minimize the cost of building a pyramid. Output the minimum cost to build this pyramid. Assume that always a pyramid would be made of the input elements.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span><span style=\"font-size:18px\"> </span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>6</span>\r\n<span style=\"font-size:18px\"><strong>a[] = </strong>{1, 2, 3, 4, 2, 1}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">4</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">We </span><span style=\"font-size:18px\">can obtain the array {1, 2, 3, 2, 1, 0}\r\nby substracting 2 out of 4, 1 out of 2,\r\nand 1 out of 1. In total, we will substract 4.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span><span style=\"font-size:18px\"> </span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>3</span>\r\n<span style=\"font-size:18px\"><strong>a[] = </strong>{1, 2, 1}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">0</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The array is already in Pyramid form.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>pyramidForm()</strong> which takes an Integer N and an array a[] as input and returns the minimum cost.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= a[i] &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Dynammic Programming to solve the problem in Linear Time Complexity.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\n\r\nclass Solution {\r\n  public:\r\n    int pyramidForm(int a[], int N) {\r\n        \r\n        int sum = 0;\r\n        \r\n        // Calculating sum of the whole array\r\n\t    for(int i=0; i<N; i++)\r\n\t        sum += a[i];\r\n\t        \r\n\t    // If array is of size less than 3, the answer will always be sum-1\r\n\t    // because the pyramid form will have only a 1.\r\n        if(N<=2)\r\n            return sum-1;\r\n            \r\n        vector<int> left(N) , right(N);\r\n\t    \r\n\t    left[0] = 1;\r\n\t    for(int i=1; i<N-1; i++)\r\n\t        left[i] = min(left[i-1]+1, a[i]);\r\n\t    \r\n\t    right[N-1] = 1;\r\n\t    for(int i=N-2; i>0; i--)\r\n\t        right[i] = min(right[i+1]+1, a[i]);\r\n\t    \r\n\t    int ans = INT_MAX;\r\n\t    \r\n\t    for(int i=1; i<N-1; i++)\r\n\t        ans = min(ans, (int)(sum - pow(min(left[i],right[i]), 2)));\r\n\t    \r\n\t    return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int pyramidForm(int[] a, int N)\n    {\n        int sum = 0;\n\n        // Calculating sum of the whole array\n        for(int i=0; i<N; i++)\n            sum += a[i];\n\n        // If array is of size less than 3, the answer will always be sum-1\n        // because the pyramid form will have only a 1.\n        if(N<=2)\n            return sum-1;\n\n        int[] left = new int[N];\n        int[] right = new int[N];\n\n        left[0] = 1;\n        for(int i=1; i<N-1; i++)\n            left[i] = Math.Min(left[i-1]+1, a[i]);\n\n        right[N-1] = 1;\n        for(int i=N-2; i>0; i--)\n            right[i] = Math.Min(right[i+1]+1, a[i]);\n\n        int ans = int.MaxValue;\n\n        for(int i=1; i<N-1; i++)\n            ans = Math.Min(ans, (sum - (int)Math.Pow(Math.Min(left[i],right[i]), 2)));\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}