{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702805,
            "title": "Pythagorean Triplet",
            "titleSlug": "pythagorean-triplet3018",
            "content": "<p><span >Given an array <strong>arr</strong>, return true if there is a <strong>triplet (a, b, c)</strong> from the array (where a, b, and c are on different indexes) that satisfies <strong>a<sup>2</sup>&nbsp;+ b<sup>2</sup>&nbsp;= c<sup>2</sup></strong>, otherwise return false.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [3, 2, 4, 6, 5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> a=3, b=4, and c=5 forms apythagorean triplet.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [3, 8, 5]\n<strong>Output:</strong> false\n<strong>Explanation:</strong>&nbsp;No such triplet possible.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 1, 1]\n<strong>Output:</strong> false</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Try computing square of each element and store in array.</span></p>",
            "<p><span >2. Now the problem reduces to find a triplet (a, b, c) in a sorted array such that a<sup>2</sup> = b<sup>2</sup> + c<sup>2</sup></span></p>",
            "<p><span >&nbsp;find a triplet (a, b, c) such that a<sup>2</sup> = b<sup>2</sup> + c<sup>2</sup>, do the following.</span></p>\n<ol>\n<li>\n<p><span >Fix &lsquo;a&rsquo; as the last element of the sorted array.</span></p>\n</li>\n<li>\n<p><span >Now search for pair (b, c) in the subarray between the first element and &lsquo;a&rsquo;. A pair (b, c) with given sum can be found in O(n) time using meet in middle algorithm discussed in method 1 of post.</span></p>\n</li>\n<li>\n<p><span >If no pair found for current &lsquo;a&rsquo;, then move &lsquo;a&rsquo; one position back and repeat step 3.2.</span></p>\n</li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if the\n    // Pythagorean triplet exists or not\n    bool pythagoreanTriplet(vector<int>& arr) {\n        int n = arr.size();\n        int maximum = 0;\n\n        // Find the maximum element\n        for (int i = 0; i < n; i++) {\n            maximum = max(maximum, arr[i]);\n        }\n\n        // Hashing array\n        vector<int> hash(maximum + 1, 0);\n\n        // Increase the count of array elements\n        // in hash table\n        for (int i = 0; i < n; i++)\n            hash[arr[i]]++;\n\n        // Iterate for all possible a\n        for (int i = 1; i < maximum + 1; i++) {\n\n            // If a is not there\n            if (hash[i] == 0)\n                continue;\n\n            // Iterate for all possible b\n            for (int j = 1; j < maximum + 1; j++) {\n\n                // If a and b are same and there is only one a\n                // or if there is no b in original array\n                if ((i == j && hash[i] == 1) || hash[j] == 0)\n                    continue;\n\n                // Find c\n                int val = sqrt(i * i + j * j);\n\n                // If c^2 is not a perfect square\n                if ((val * val) != (i * i + j * j))\n                    continue;\n\n                // If c exceeds the maximum value\n                if (val > maximum)\n                    continue;\n\n                // If there exists c in the original array,\n                // we have the triplet\n                if (hash[val]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    boolean pythagoreanTriplet(int[] arr) {\n        int n = arr.length;\n\n        // Using TreeSet to store unique elements in sorted order\n        TreeSet<Integer> a = new TreeSet<Integer>();\n        for (int i = 0; i < arr.length; i++) {\n            a.add(arr[i]);\n        }\n\n        // Converting the sorted unique elements to a list for easy indexing\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int x : a) {\n            res.add(x);\n        }\n\n        // TreeSet to store squares of possible Pythagorean triplet sums\n        TreeSet<Integer> hash = new TreeSet<Integer>();\n\n        // Iterate through each unique number to check for a Pythagorean triplet\n        for (int i = 0; i < res.size(); i++) {\n            // Check if the square of the current element is in the hash set\n            // If true, a triplet exists\n            if (hash.contains(res.get(i) * res.get(i))) {\n                return true;\n            }\n\n            // Add the sum of squares of pairs to the hash set\n            for (int j = i - 1; j >= 0; j--) {\n                int value = res.get(j) * res.get(j) + res.get(i) * res.get(i);\n                hash.add(value); // Store potential Pythagorean sum\n            }\n        }\n\n        // Return false if no triplet is found\n        return false;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def checkTriplet(self, arr):\n        maximum = 0\n\n        # Find the maximum element\n        for num in arr:\n            maximum = max(maximum, num)\n\n        # Hashing array\n        hash_table = [0] * (maximum + 1)\n\n        # Increase the count of array elements in the hash table\n        for num in arr:\n            hash_table[num] += 1\n\n        # Iterate for all possible 'a'\n        for i in range(1, maximum + 1):\n\n            # If 'a' is not present in the array, continue\n            if hash_table[i] == 0:\n                continue\n\n            # Iterate for all possible 'b'\n            for j in range(1, maximum + 1):\n\n                # If 'a' and 'b' are the same and there is only one 'a'\n                # or if there is no 'b' in the original array, continue\n                if (i == j and hash_table[i] == 1) or hash_table[j] == 0:\n                    continue\n\n                # Find 'c'\n                val = (i * i + j * j)**0.5\n\n                # If 'c^2' is not a perfect square, continue\n                if int(val) != val:\n                    continue\n\n                # If 'c' exceeds the maximum value, continue\n                if val > maximum:\n                    continue\n\n                # If there exists 'c' in the original array, we have the triplet\n                if hash_table[int(val)]:\n                    return True\n\n        return False\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Function to check if the\n    // Pythagorean triplet exists or not\n    public bool PythagoreanTriplet(int[] arr) {\n        int n = arr.Length;\n        int maximum = 0;\n\n        // Find the maximum element\n        for (int i = 0; i < n; i++) {\n            maximum = Math.Max(maximum, arr[i]);\n        }\n\n        // Hashing array\n        int[] hash = new int[maximum + 1];\n\n        // Increase the count of array elements\n        // in hash table\n        for (int i = 0; i < n; i++) hash[arr[i]]++;\n\n        // Iterate for all possible a\n        for (int i = 1; i < maximum + 1; i++) {\n\n            // If a is not there\n            if (hash[i] == 0) continue;\n\n            // Iterate for all possible b\n            for (int j = 1; j < maximum + 1; j++) {\n\n                // If a and b are same and there is only one a\n                // or if there is no b in original array\n                if ((i == j && hash[i] == 1) || hash[j] == 0) continue;\n\n                // Find c\n                int val = (int)Math.Sqrt(i * i + j * j);\n\n                // If c^2 is not a perfect square\n                if ((val * val) != (i * i + j * j)) continue;\n\n                // If c exceeds the maximum value\n                if (val > maximum) continue;\n\n                // If there exists c in the original array,\n                // we have the triplet\n                if (hash[val] > 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n\n    pythagoreanTriplet(arr) {\n        // code here\n        let n = arr.length;\n        let maximum = 0;\n\n        // Find the maximum element\n        for (let i = 0; i < n; i++) {\n            maximum = Math.max(maximum, arr[i]);\n        }\n\n        // Hashing array\n        let hash = new Array(maximum + 1);\n        for (let i = 0; i <= maximum; i++) hash[i] = 0;\n\n        // Increase the count of array elements\n        // in hash table\n        for (let i = 0; i < n; i++) hash[arr[i]] = 1;\n\n        // Iterate for all possible a\n        for (let i = 1; i < maximum + 1; i++) {\n\n            // If a is not there\n            if (hash[i] === 0) continue;\n\n            // Iterate for all possible b\n            for (let j = 1; j < maximum + 1; j++) {\n\n                // If a and b are same and there is only one a\n                // or if there is no b in original array\n                if ((i === j && hash[i] === 1) || hash[j] === 0) continue;\n\n                // Find c\n                let val = Math.sqrt(i * i + j * j);\n\n                // If c^2 is not a perfect square\n                if ((val * val) != (i * i + j * j)) continue;\n\n                // If c exceeds the maximum value\n                if (val > maximum) continue;\n\n                // If there exists c in the original array,\n                // we have the triplet\n                if (hash[val]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}