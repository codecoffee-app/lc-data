{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701281,
            "title": "Quadratic Probing in Hashing",
            "titleSlug": "quadratic-probing-in-hashing-1587115621",
            "content": "<p><em><span style=\"font-size: 18px;\">Quadratic probing is a collision handling technique in hashing. Quadratic probing says that whenever a collision occurs, search for i<sup>2</sup> position. </span></em></p>\n<p><span style=\"font-size: 18px;\">Given an array of integers and a Hash table. Fill the elements of the array into the hash table by using Quadratic Probing in case of collisions.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples : <br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>hashSize = 11, n = 4, arr[] = {21,10,32,43}\n<strong>Output: </strong>10 -1 -1 32 -1 -1 -1 -1 43 -1 21<strong>\nExplanation: </strong>21%11=10 so 21 goes into hashTable[10] position, 10%11=10. HashTable[10] is already filled so we try for (10+1<sup>2</sup>)%11=0 position. HashTable[0] is empty so we put 10 there, 32%11=10. HashTable[10] is filled. We try (32+1<sup>2</sup>)%11=0, but HashTable[0] is also already filled, We try (32+2<sup>2</sup>)%11=3. HashTable[3] is empty so we put 32 in hashTable[3] position, 43 uses (43+3<sup>2</sup></span><span style=\"font-size: 18px;\">)%11=8. We put it in hashTable[8].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>hashSize = 11, n = 4, arr[] = {880,995,647,172 }\n<strong>Output: </strong>880 -1 -1 -1 -1 995 -1 172 -1 647 -1&nbsp;<strong>\nExplanation: </strong>Using the similar approach as used in above explanation we will get the output like 880 -1 -1 -1 -1 995 -1 172 -1 647 -1.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">hashSize = 11, </span><span style=\"font-size: 18px;\">n = 4, </span><span style=\"font-size: 18px;\">arr[] = {4,4,4,4} </span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>-1 -1 -1 -1 4 -1 -1 -1 -1 -1 -1 </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>QuadraticProbing()&nbsp;</strong>which takes the hash table&nbsp;<strong>hash[]</strong>, the hash table size&nbsp;<strong>hashSize</strong>, an array&nbsp;<strong>arr[]&nbsp;</strong>and the size of the array <strong>n </strong>as inputs and inserts all the elements of the array arr[] into the hash table using Quadratic Probing as a collision handling technique.<br /><br /><strong>Note:&nbsp;</strong>You need to map duplicate elements incase, they have the same hash value even after quadratic probing.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= hashSize <strong>(prime)</strong> &lt;= 97<br />1 &lt;= n &lt; hashSize*0.5<br />0 &lt;= arr[] &lt;= 10<sup>5</sup></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong><br />All the positions that are unoccupied are denoted by -1 in the hash table.<br />An empty slot can only be found if <strong>load factor &lt; 0.5 </strong>and hash table size is a <strong>prime number</strong>.<br />The<strong> given testcases satisfy the above condition</strong> so you can <strong>assume </strong>that an empty slot is always reachable.</span></p>\n<div id=\"professor_prebid-root\"></div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement quadratic probing to insert elements from an array into a hash table. Given an array of integers `arr` and a hash table `hash` of size `hashSize`, insert each element of `arr` into `hash`. Use quadratic probing to resolve collisions. If a collision occurs at index `i`, probe at `(i + k^2) % hashSize` for `k = 1, 2, 3, ...` until an empty slot is found.",
                "constraints": [
                    "2 <= hashSize (prime) <= 97",
                    "1 <= n < hashSize * 0.5",
                    "0 <= arr[i] <= 10^5",
                    "All unoccupied positions in the hash table are denoted by -1.",
                    "Load factor < 0.5 and hash table size is a prime number ensure an empty slot is reachable."
                ],
                "testcases": [
                    {
                        "input": "hashSize = 11, n = 4, arr[] = {21, 10, 32, 43}",
                        "output": "10 -1 -1 32 -1 -1 -1 -1 43 -1 21",
                        "explanation": "21 is inserted at index 21 % 11 = 10. 10 is inserted at (10 + 1^2) % 11 = 0 because index 10 is occupied. 32 is inserted at (32 + 2^2) % 11 = 3 because indices (32%11 + 1)%11 = (10+1)%11 =0 and (32%11 + 1)%11=1 are already filled. Finally, 43 is inserted at (43)%11=10 and (43+1)%11=1 ,(43+4)%11=4, (43+9)%11=12%11=1 and finally to (43 + 2^2)%11=7, (43 + 3^2)%11=52%11=8."
                    },
                    {
                        "input": "hashSize = 11, n = 4, arr[] = {880, 995, 647, 172}",
                        "output": "880 -1 -1 -1 -1 995 -1 172 -1 647 -1",
                        "explanation": "880 is placed at 880 % 11 = 0. 995 is placed at 995 % 11 = 5. 647 is placed at 647 % 11 = 9. 172 is placed at 172 % 11 = 7."
                    },
                    {
                        "input": "hashSize = 11, n = 4, arr[] = {4, 4, 4, 4}",
                        "output": "-1 -1 -1 -1 4 -1 -1 -1 -1 -1 -1",
                        "explanation": "The first 4 is placed at 4 % 11 = 4. Subsequent 4's will cause collisions and be placed using quadratic probing.  In this example, the result shows only one '4' due to constraints"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n    \tvoid QuadraticProbing(vector <int>&hash_table, int hash_size, int arr[], int N)\r\n        {\r\n            //storing -1 at all indexes in the hash table.\r\n            for(int i=0;i<hash_size;i++)\r\n                hash_table[i] = -1;\r\n            \r\n            //iterating over the array. \r\n            for(int i=0;i<N;i++)\r\n            {\r\n                //if the value of hash table at index (arr[i]%hashSize) is -1 \r\n                //which means empty then, we insert arr[i] at that place.\r\n                if(hash_table[arr[i]%hash_size]==-1)\r\n                {\r\n                    hash_table[arr[i]%hash_size]=arr[i];\r\n                }\r\n                //else we quadratically traverse the array from the filled position \r\n                //to find an index with -1 in hash table.\r\n                else\r\n                {\r\n                    int k=arr[i]%hash_size;\r\n                    int power = 0;\r\n                    bool flag = true;\r\n                    //using a loop which runs until we find an index with -1\r\n                    //in hash table which means empty.\r\n                    while( hash_table[(k+power*power)%hash_size] != -1)\r\n                    {\r\n                    \tif(hash_table[(k+power*power)%hash_size] == arr[i]) {\r\n                    \t\tflag = false;\r\n                    \t\tbreak;\r\n                    \t}\r\n                         power++;\r\n                    }\r\n                    //inserting arr[i] after finding the empty position.\r\n                    if(flag)\r\n                    \thash_table[(k+power*power)%hash_size]=arr[i];\r\n                }\r\n            }\r\n        }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n\tvoid quadraticProbing(int[] hash_table, int hash_size, int arr[], int N)\r\n    {\r\n        //storing -1 at all indexes in the hash table.\r\n        for(int i=0;i<hash_size;i++)\r\n            hash_table[i] = -1;\r\n        \r\n        //iterating over the array. \r\n        for(int i=0;i<N;i++)\r\n        {\r\n            //if the value of hash table at index (arr[i]%hashSize) is -1 \r\n            //which means empty then, we insert arr[i] at that place.\r\n            if(hash_table[arr[i]%hash_size]==-1)\r\n            {\r\n                hash_table[arr[i]%hash_size]=arr[i];\r\n            }\r\n            //else we quadratically traverse the array from the filled position \r\n            //to find an index with -1 in hash table.\r\n            else\r\n            {\r\n                int k=arr[i]%hash_size;\r\n                int power = 0;\r\n                boolean flag = true;\r\n                //using a loop which runs until we find an index with -1\r\n                //in hash table which means empty.\r\n                while( hash_table[(k+power*power)%hash_size] != -1)\r\n                {\r\n                \tif(hash_table[(k+power*power)%hash_size] == arr[i]) {\r\n                \t\tflag = false;\r\n                \t\tbreak;\r\n                \t}\r\n                     power++;\r\n                }\r\n                //inserting arr[i] after finding the empty position.\r\n                if(flag)\r\n                \thash_table[(k+power*power)%hash_size]=arr[i];\r\n            }\r\n        }\r\n    }   \r\n\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public void QuadraticProbing(List<int> hash_table, int hash_size, int[] arr, int N)\n    {\n        //storing -1 at all indexes in the hash table.\n        for(int i=0;i<hash_size;i++)\n            hash_table[i] = -1;\n        \n        //iterating over the array. \n        for(int i=0;i<N;i++)\n        {\n            //if the value of hash table at index (arr[i]%hashSize) is -1 \n            //which means empty then, we insert arr[i] at that place.\n            if(hash_table[arr[i]%hash_size]==-1)\n            {\n                hash_table[arr[i]%hash_size]=arr[i];\n            }\n            //else we quadratically traverse the array from the filled position \n            //to find an index with -1 in hash table.\n            else\n            {\n                int k=arr[i]%hash_size;\n                int power = 0;\n                bool flag = true;\n                //using a loop which runs until we find an index with -1\n                //in hash table which means empty.\n                while( hash_table[(k+power*power)%hash_size] != -1)\n                {\n                    if(hash_table[(k+power*power)%hash_size] == arr[i]) {\n                        flag = false;\n                        break;\n                    }\n                     power++;\n                }\n                //inserting arr[i] after finding the empty position.\n                if(flag)\n                    hash_table[(k+power*power)%hash_size]=arr[i];\n            }\n        }\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\r\n  //Function to fill the array elements into a hash table\r\n  //using Quadratic Probing to handle collisions.\r\n  QuadraticProbing(hash, hashSize, arr, N) {\r\n    // storing -1 at all indexes in the hash table.\r\n    for (let i = 0; i < hashSize; i++) hash[i] = -1;\r\n\r\n    // iterating over the array.\r\n    for (let i = 0; i < N; i++) {\r\n      // if the value of hash table at index (arr[i]%hashSize) is -1\r\n      // which means empty then, we insert arr[i] at that place.\r\n      if (hash[arr[i] % hashSize] === -1) {\r\n        hash[arr[i] % hashSize] = arr[i];\r\n      }\r\n      // else we quadratically traverse the array from the filled position\r\n      // to find an index with -1 in hash table.\r\n      else {\r\n        let k = arr[i] % hashSize;\r\n        let power = 0;\r\n        let flag = true;\r\n        // using a loop which runs until we find an index with -1\r\n        // in hash table which means empty.\r\n        while (hash[(k + power * power) % hashSize] !== -1) {\r\n          if (hash[(k + power * power) % hashSize] === arr[i]) {\r\n            flag = false;\r\n            break;\r\n          }\r\n          power++;\r\n        }\r\n        // inserting arr[i] after finding the empty position.\r\n        if (flag) hash[(k + power * power) % hashSize] = arr[i];\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}