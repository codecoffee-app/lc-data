{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703821,
            "title": "Queries for counts of multiples in an array",
            "titleSlug": "queries-for-counts-of-multiples-in-an-array4028",
            "content": "<p><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\">Given an array <strong>arr </strong>of positive integers and many queries for divisibility. In every query q[i], we are given an integer k, we need to count all elements in the array that are perfectly divisible by k.</span></p>\n<p><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><strong>Input: </strong>arr[] = [2, 4, 9, 15, 21, 20] and q[] = [2, 3, 5] <br /></span><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><strong>Output: </strong>[3, 3, 2] <br /><strong>Explanation: </strong>Multiples of '2' in array are:- [2, 4, 20] Multiples of '3' in array are:- [9, 15, 21] Multiples of '5' in array are:- [15, 20] </span></pre>\n<pre><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><strong>Input: </strong>arr[] = [3, 4, 6] and q[] = [2, 3]\n<strong>Output: </strong>[2, 2]<br /><strong>Explanation: </strong>The multiple of 2 are 4 and 6. The multiple of 3 are 3 and 6.</span></pre>\n<p><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><strong>Expected Time Complexity:</strong> O(Mx*log(Mx))<br /><strong>Expected Auxiliary Space:</strong> O(Mx)<br />where Mx is the maximum value in array elements.</span></p>\n<p><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><strong>Constraints:</strong><br />1&lt;=arr.size(), q.size()&lt;=10<sup>5</sup><br />1&lt;=arr[i], q[i]&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of positive integers and a list of queries `q`, where each query `q[i]` represents an integer `k`. For each query, count the number of elements in `arr` that are perfectly divisible by `k`.",
                "constraints": [
                    "1 <= arr.size(), q.size() <= 10^5",
                    "1 <= arr[i], q[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr = [2, 4, 9, 15, 21, 20], q = [2, 3, 5]",
                        "output": "[3, 3, 2]",
                        "explanation": "For k = 2, the multiples in arr are [2, 4, 20]. For k = 3, the multiples in arr are [9, 15, 21]. For k = 5, the multiples in arr are [15, 20]."
                    },
                    {
                        "input": "arr = [3, 4, 6], q = [2, 3]",
                        "output": "[2, 2]",
                        "explanation": "For k = 2, the multiples in arr are [4, 6]. For k = 3, the multiples in arr are [3, 6]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use the concept of <a href=\"https://www.geeksforgeeks.org/sieve-of-eratosthenes/\" target=\"_blank\" rel=\"noopener\">Sieve of Eratosthenes.</a></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to count the frequency of each element using Sieve's algorithm\n\n// Function to count the multiples in the given array based on the queries\nclass Solution {\n  public:\n    vector<int> countSieve(vector<int>& arr, int n) {\n        int MAX = *max_element(arr.begin(), arr.end());\n        // Find the maximum element in the array\n\n        int cnt[MAX + 1] = {0};\n        // Initialize an array to store the count of each element\n        vector<int> ans(MAX + 1, 0);\n        // Initialize a vector to store the final count of multiples\n\n        // Count the frequency of each element in the array\n        for (int i = 0; i < n; ++i)\n            ++cnt[arr[i]];\n\n        // Calculate the count of multiples of each number\n        for (int i = 1; i <= MAX; ++i)\n            for (int j = i; j <= MAX; j += i)\n                ans[i] += cnt[j];\n\n        // Return the final count of multiples\n        return ans;\n    }\n\n    vector<int> countMultiples(vector<int>& arr, vector<int>& q) {\n        int n = arr.size();\n        vector<int> answering; // Initialize a vector to store the answers\n        vector<int> ans = countSieve(arr, n); // Count the frequency of each element\n        int m = q.size();\n        int max2 = 0;\n\n        // Find the maximum element in the array\n        for (int i = 0; i < n; i++) {\n            max2 = max(max2, arr[i]);\n        }\n\n        // Loop through each query and find the count of multiples\n        for (int i = 0; i < m; i++) {\n            if (q[i] > max2)\n                answering.push_back(0); // If the query is greater than the maximum\n                                        // element, there are no multiples\n            else\n                answering.push_back(ans[q[i]]);\n            // Push the count of multiples to the answer vector\n        }\n\n        // Return the answer vector\n        return answering;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public ArrayList<Integer> countSieve(int[] arr, int n) {\n        int MAX = Arrays.stream(arr).max().getAsInt();\n\n        // Find the maximum element in the array\n        int[] cnt = new int[MAX + 1];\n\n        // Initialize an array to store the count of each element\n\n        ArrayList<Integer> ans = new ArrayList<>(Collections.nCopies(MAX + 1, 0));\n\n        // Initialize an ArrayList to store the final count of multiples\n\n        // Count the frequency of each element in the array\n        for (int i = 0; i < n; ++i) {\n            cnt[arr[i]]++;\n        }\n\n        // Calculate the count of multiples of each number\n        for (int i = 1; i <= MAX; ++i) {\n            for (int j = i; j <= MAX; j += i) {\n                ans.set(i, ans.get(i) + cnt[j]);\n            }\n        }\n\n        return ans; // Return the final count of multiples\n    }\n\n    public ArrayList<Integer> countMultiples(int[] arr, int[] q) {\n        int n = arr.length;\n        ArrayList<Integer> answering =\n            new ArrayList<>(); // Initialize an ArrayList to store the answers\n        ArrayList<Integer> ans = countSieve(arr, n);\n\n        // Count the frequency of each element\n        int max2 = Arrays.stream(arr).max().getAsInt();\n\n        // Find the maximum element in the array\n\n        // Loop through each query and find the count of multiples\n        for (int i = 0; i < q.length; i++) {\n            if (q[i] > max2) {\n                answering.add(0); // If the query is greater than the maximum element,\n                                  // there are no multiples\n            } else {\n                answering.add(ans.get(q[i]));\n\n                // Add the count of multiples to the answer list\n            }\n        }\n\n        return answering; // Return the answer list\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countSieve(self, arr, n):\n        MAX = max(arr)  # Find the maximum element in the array\n\n        # Initialize an array to store the count of each element\n        cnt = [0] * (MAX + 1)\n        # Initialize a list to store the final count of multiples\n        ans = [0] * (MAX + 1)\n\n        # Count the frequency of each element in the array\n        for num in arr:\n            cnt[num] += 1\n\n        # Calculate the count of multiples of each number\n        for i in range(1, MAX + 1):\n            for j in range(i, MAX + 1, i):\n                ans[i] += cnt[j]\n\n        # Return the final count of multiples\n        return ans\n\n    def countMultiples(self, arr, q):\n        n = len(arr)\n        # Count the frequency of each element\n        ans = self.countSieve(arr, n)\n        max2 = max(arr)  # Find the maximum element in the array\n        answering = []  # Initialize a list to store the answers\n\n        # Loop through each query and find the count of multiples\n        for query in q:\n            if query > max2:\n                answering.append(\n                    0\n                )  # If the query is greater than the maximum element, there are no multiples\n            else:\n                answering.append(\n                    ans[query]\n                )  # Append the count of multiples to the answer list\n\n        # Return the answer list\n        return answering\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    countSieve(arr, n) {\n        const MAX = Math.max(...arr); // Find the maximum element in the array\n\n        const cnt = new Array(MAX + 1).fill(0);\n        // Initialize an array to store the count of each element\n        const ans = new Array(MAX + 1).fill(0);\n        // Initialize an array to store the final count of multiples\n\n        // Count the frequency of each element in the array\n        for (let i = 0; i < n; ++i) {\n            cnt[arr[i]]++;\n        }\n\n        // Calculate the count of multiples of each number\n        for (let i = 1; i <= MAX; ++i) {\n            for (let j = i; j <= MAX; j += i) {\n                ans[i] += cnt[j];\n            }\n        }\n\n        // Return the final count of multiples\n        return ans;\n    }\n\n    countMultiples(arr, q) {\n        const n = arr.length;\n        const ans = this.countSieve(arr, n);\n        // Count the frequency of each element\n        const max2 = Math.max(...arr);\n        // Find the maximum element in the array\n        const answering = [];\n        // Initialize an array to store the answers\n\n        // Loop through each query and find the count of multiples\n        for (let i = 0; i < q.length; i++) {\n            if (q[i] > max2) {\n                answering.push(0);\n                // If the query is greater than the maximum element,\n                // there are no multiples\n            } else {\n                answering.push(ans[q[i]]);\n                // Push the count of multiples to the answer array\n            }\n        }\n\n        // Return the answer array\n        return answering;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}