{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705631,
            "title": "Queries on a Matrix",
            "titleSlug": "queries-on-a-matrix0443",
            "content": "<p><span style=\"font-size:18px\">You are given a matrix of dimension n*n. All the cells are initially, zero.&nbsp;You are given Q queries, which contains 4 integers&nbsp;a b c d where (a,b) is the&nbsp;TOP LEFT cell and (c,d) is the Bottom Right cell of a submatrix. Now, all the cells of this submatrix have&nbsp;to be incremented by one. After all the Q queries have been performed. Your task is to find&nbsp;the final resulting Matrix.<br />\r\n<strong>Note</strong> : Zero-Based Indexing is used for cells of the matrix.&nbsp;</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 6, q = 6,\r\nQueries = {\r\n{4,0,5,3},\r\n{0,0,3,4},\r\n{1,2,1,2},\r\n{1,1,2,3},\r\n{0,0,3,1},\r\n{1,0,2,4}}.\r\n<strong>Output: </strong>\r\n2 2 1 1 1 0\r\n3 4 4 3 2 0 \r\n3 4 3 3 2 0\r\n2 2 1 1 1 0\r\n1 1 1 1 0 0\r\n1 1 1 1 0 0\r\n<strong>Explanation:</strong>After incrementing all the\r\nsub-matrices of given queries we will \r\nget the final output.</span>\r\n\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 4, q = 2,\r\nQueries = {\r\n{0,0,3,3},\r\n{0,0,2,2}}.\r\n<strong>Output: </strong>\r\n2 2 2 1 \r\n2 2 2 1  \r\n2 2 2 1 \r\n1 1 1 1 \r\n<strong>Explanation:</strong>After incrementing all the\r\nsub-matrices of given queries we will\r\nget the final output.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>solveQueries()&nbsp;</strong>which takes n and Queries and input parameter and returns a matrix after performing all the queries.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>2</sup>)<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(n<sup>2</sup>)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= n &lt;= 1000<br />\r\n0 &lt;= a &lt;= c &lt;&nbsp;n<br />\r\n0 &lt;= b &lt;= d &lt;&nbsp;n<br />\r\n1 &lt;= No. of Queries &lt;= 1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use pre calculation.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    //Function to solve the queries.\n    vector<vector<int>> solveQueries(int n, vector<vector<int>> Queries) {\n        \n        //creating a matrix of size n+2 x n+2 and initializing it with 0s.\n        vector<vector<int>> matrix(n + 2, vector<int>(n + 2, 0));\n        \n        //creating two additional matrices (row and col), each of size n+2 x n+2\n        //and initializing them with 0s.\n        vector<vector<int>> row(n + 2, vector<int>(n + 2, 0));\n        vector<vector<int>> col(n + 2, vector<int>(n + 2, 0));\n        \n        //iterating over all the queries.\n        for (auto i : Queries) {\n            int a = i[0];    //extracting the values from the query.\n            int b = i[1];\n            int c = i[2];\n            int d = i[3];\n            \n            //updating the row and col matrices as per the queries.\n            row[a][b]++;\n            row[c + 1][b]--;\n            col[a][d + 1]--;\n            col[c + 1][d + 1]++;\n        }\n        \n        //updating the values of row and col matrices by summing up\n        //the values of previous rows.\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                row[j][i] += row[j - 1][i];\n                col[j][i] += col[j - 1][i];\n            }\n        }\n        \n        //computing the values of the matrix by adding the values of\n        //the row and col matrices at each cell.\n        for (int i = 0; i < n; i++) {\n            matrix[i][0] = row[i][0] + col[i][0];\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[j][i] += matrix[j][i - 1] + row[j][i] + col[j][i];\n            }\n        }\n        \n        //creating a result matrix of size n x n and copying the values\n        //of the matrix into it.\n        vector<vector<int>> res(n, vector<int>(n, 0));\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < n; j++) res[i][j] = matrix[i][j];\n        \n        //returning the result matrix.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int[][] solveQueries(int n, int[][] Queries) {\n        \n        // Create a 2D array of size n x n to store the result\n        int a[][]=new int[n][n];\n        \n        // Loop through each query\n        for(int i=0;i<Queries.length;i++){\n            \n            // Get the coordinates of the top-left and bottom-right points of the query rectangle\n            int x1=Queries[i][0];\n            int y1=Queries[i][1];\n            int x2=Queries[i][2];\n            int y2=Queries[i][3];\n            \n            // Increase the count of the top-left point by 1\n            a[x1][y1]++;\n            \n            // Decrease the count of the point just below the bottom-right point by 1\n            if(x2<n-1){\n                a[x2+1][y1]--;\n            }\n            \n            // Decrease the count of the point just to the right of the bottom-right point by 1\n            if(y2<n-1){\n                a[x1][y2+1]--;\n            }\n            \n            // Increase the count of the point just below and to the right of the bottom-right point by 1\n            if(x2<n-1 && y2<n-1){\n                a[x2+1][y2+1]++;\n            }\n        }\n        \n        // Calculate the prefix sum of each row\n        for(int i=0;i<n;i++){\n            for(int j=1;j<n;j++){\n                a[i][j]+=a[i][j-1];\n            }\n        }\n        \n        // Calculate the prefix sum of each column\n        for(int i=0;i<n;i++){\n            for(int j=1;j<n;j++){\n                a[j][i]+=a[j-1][i];\n            }\n        }\n        \n        // Return the resulting 2D array\n        return a;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\tdef solveQueries(self, n, Queries):\n\t    # Create matrix and arrays for row and column updates\n\t    matrix=[[0]*(n+2) for _ in range(n+2)]\n\t    row=[[0]*(n+2) for _ in range(n+2)]\n\t    col=[[0]*(n+2) for _ in range(n+2)]\n\t    \n\t    # Iterate through the Queries\n\t    for i in Queries:\n\t        a=i[0]\n\t        b=i[1]\n\t        c=i[2]\n\t        d=i[3]\n\t        \n\t        # Update row and column arrays based on Query values\n\t        row[a][b]+=1\n\t        row[c+1][b]-=1\n\t        col[a][d+1]-=1\n\t        col[c+1][d+1]+=1\n\t        \n\t    # Perform cumulative sum on row and column arrays\n\t    for i in range(n):\n\t        for j in range(1,n):\n\t            row[j][i]+=row[j-1][i]\n\t            col[j][i]+=col[j-1][i]\n\t            \n\t    # Calculate matrix values based on cumulative sums of rows and columns\n\t    for i in range(n):\n\t        matrix[i][0]=row[i][0]+col[i][0]\n\t    for i in range(1,n):\n\t        for j in range(n):\n\t            matrix[j][i]+=matrix[j][i-1]+row[j][i]+col[j][i]\n\t            \n\t    # Create a result matrix with the calculated matrix values\n\t    res=[[0]*(n) for _ in range(n)]\n\t    for i in range(n):\n\t        for j in range(n):\n\t            res[i][j]=matrix[i][j]\n\t            \n\t    return res",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public List<List<int>> solveQueries(int n, List<List<int>> Queries)\n    {\n        List<List<int>> matrix = new List<List<int>>();\n        for (int i = 0; i < n + 2; i++)\n        {\n            matrix.Add(new List<int>());\n            for (int j = 0; j < n + 2; j++)\n            {\n                matrix[i].Add(0);\n            }\n        }\n\n        List<List<int>> row = new List<List<int>>();\n        List<List<int>> col = new List<List<int>>();\n        for (int i = 0; i < n + 2; i++)\n        {\n            row.Add(new List<int>());\n            col.Add(new List<int>());\n            for (int j = 0; j < n + 2; j++)\n            {\n                row[i].Add(0);\n                col[i].Add(0);\n            }\n        }\n\n        foreach (List<int> i in Queries)\n        {\n            int a = i[0];\n            int b = i[1];\n            int c = i[2];\n            int d = i[3];\n\n            row[a][b]++;\n            row[c + 1][b]--;\n            col[a][d + 1]--;\n            col[c + 1][d + 1]++;\n        }\n\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 1; j < n; j++)\n            {\n                row[j][i] += row[j - 1][i];\n                col[j][i] += col[j - 1][i];\n            }\n        }\n\n        for (int i = 0; i < n; i++)\n        {\n            matrix[i][0] = row[i][0] + col[i][0];\n        }\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                matrix[j][i] += matrix[j][i - 1] + row[j][i] + col[j][i];\n            }\n        }\n\n        List<List<int>> res = new List<List<int>>();\n        for (int i = 0; i < n; i++)\n        {\n            res.Add(new List<int>());\n            for (int j = 0; j < n; j++)\n            {\n                res[i].Add(matrix[i][j]);\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}