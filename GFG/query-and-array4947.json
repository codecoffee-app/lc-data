{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703795,
            "title": "Query and Array",
            "titleSlug": "query-and-array4947",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of integers <strong>arr</strong> and a query integer <strong>k</strong>. Find the number <strong>X</strong>&nbsp;from&nbsp;the array&nbsp;<span style=\"box-sizing: border-box; margin: 0px; padding: 0px;\">so that it can be converted from <strong>k</strong> to&nbsp;<strong>X</strong> and</span>&nbsp;<strong>F(k, X)</strong> is minimum. </span><span style=\"font-size: 18px;\"><strong>F(A, B)</strong> = Number of bits flipped to change the number <strong>A</strong> to <strong>B</strong>. </span><span style=\"font-size: 18px;\">If there is more than one value in <strong>arr</strong>&nbsp;such that <strong>F(k, X)</strong> is minimum print the smallest value of <strong>X</strong> for which <strong>F(k, X)</strong> is minimum.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 32, 1, 7, 10, 50, 19, 21, 2] and k = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> F(1, 1) = 0, so this is the minimum X.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 32, 10, 7, 10, 50, 19, 21, 2] and k = 8\n<strong>Output:</strong> 10\n<strong>Explanation: </strong></span><span >F(8, 10) = 1, so this is the minimum X.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(n*logn)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= k &lt;= 10<sup>6</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Find every bitflips required to change X&nbsp; to Q. Then return the minimum one with minimum bit flips.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to calculate the number of different bits between two numbers.\n    int bitFlip(int x, int y) { return __builtin_popcount(x ^ y); }\n\n    // Function to find the number from the given array which has the minimum\n    // number of different bits with the given number.\n    int findX(vector<int>& arr, int k) {\n        // code here\n        int n = arr.size();\n        int mini = INT_MAX;\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            // calculating the number of different bits between arr[i] and q.\n            int flip = bitFlip(arr[i], k);\n\n            // updating minimum flip count and ans if flip count is lower.\n            if (flip < mini) {\n                mini = flip;\n                ans = arr[i];\n            }\n            // if flip count is same as minimum, updating ans with the smaller number.\n            else if (flip == mini) {\n                ans = min(ans, arr[i]);\n            }\n        }\n        // returning the number with minimum flip count.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    int findX(int[] arr, int k) {\n        // initializing the minimum flip count and the corresponding answer\n        int n = arr.length;\n        int mini = Integer.MAX_VALUE;\n        int ans = 0;\n\n        // iterating over the elements in the array\n        for (int i = 0; i < n; i++) {\n            // calculating the flip count for the current element\n            int flip = bitFlip(arr[i], k);\n\n            // updating the minimum flip count and the answer if necessary\n            if (flip < mini) {\n                mini = flip;\n                ans = arr[i];\n            } else if (flip == mini) {\n                ans = Integer.min(ans, arr[i]);\n            }\n        }\n\n        // returning the answer with minimum flip count\n        return ans;\n    }\n\n    // method to calculate the flip count between two numbers\n    int bitFlip(int x, int y) { return Integer.bitCount(x ^ y); }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to calculate the number of different bits between two numbers.\n    def bitFlip(self, x, y):\n        return bin(x ^ y).count('1')\n\n    # Function to find the number from the given array which has the minimum\n    # number of different bits with the given number.\n    def findX(self, arr, k):\n        n = len(arr)\n        mini = float('inf')  # Set to a large value\n        ans = 0\n\n        # Traverse through the array\n        for num in arr:\n            # Calculate the number of different bits between arr[i] and k\n            flip = self.bitFlip(num, k)\n\n            # Update minimum flip count and ans if flip count is lower\n            if flip < mini:\n                mini = flip\n                ans = num\n            # If flip count is same as minimum, update ans with the smaller number\n            elif flip == mini:\n                ans = min(ans, num)\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to calculate the number of different bits between two numbers\n    bitFlip(x, y) { return (x ^ y).toString(2).split('1').length - 1; }\n\n    // Function to find the number from the given array which has the minimum\n    // number of different bits with the given number\n    findX(arr, k) {\n        let n = arr.length;\n        let mini = Infinity;\n        let ans = 0;\n\n        // Traverse through the array\n        for (let num of arr) {\n            // Calculate the number of different bits between arr[i] and k\n            let flip = this.bitFlip(num, k);\n\n            // Update minimum flip count and ans if flip count is lower\n            if (flip < mini) {\n                mini = flip;\n                ans = num;\n            }\n            // If flip count is same as minimum, update ans with the smaller number\n            else if (flip === mini) {\n                ans = Math.min(ans, num);\n            }\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}