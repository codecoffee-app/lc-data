{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700907,
            "title": "Queue Push & Pop",
            "titleSlug": "queue-designer",
            "content": "<div class=\"problemQuestion\">\n<p><span style=\"font-size:18px\">Given an array <strong>arr[]&nbsp;</strong>of size <strong>N</strong>,&nbsp;enqueue the elements of the array into a queue and then dequeue them.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\">N = 5 \narr[] = 1 2 3 4 5 </span>\n<span style=\"font-size:18px\"><strong>Output:</strong> \n1 2 3 4 5</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 7\narr[] = 1 6 43 1 2 0 5\n<strong>Output:</strong>\n1 6 43 1 2 0 5</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read any&nbsp;input. Your task is to complete the functions <strong>push()</strong> and <strong>_pop()</strong>. The function <strong>push()</strong> takes the array and its size as the input parameters and returns the queue formed, and the function <strong>_pop()</strong>, takes the queue as the input parameter&nbsp;and prints the elements of the queue.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected time complexity:</strong> O(n)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected space complexity:</strong> O(n)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= A<sub>i</sub> &lt;= 10<sup>7</sup></span></p>\n</div>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `N`, enqueue all elements of the array into a queue and then dequeue them, printing the dequeued elements in order.",
                "constraints": [
                    "1 <= A[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "N = 5\narr[] = 1 2 3 4 5",
                        "output": "1 2 3 4 5",
                        "explanation": "The array elements are enqueued in the order 1, 2, 3, 4, 5. When dequeued, they are printed in the same order."
                    },
                    {
                        "input": "N = 7\narr[] = 1 6 43 1 2 0 5",
                        "output": "1 6 43 1 2 0 5",
                        "explanation": "The array elements are enqueued in the order 1, 6, 43, 1, 2, 0, 5. When dequeued, they are printed in the same order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. Basically enque operation in queue is insertion in queue and deque is deletion from queue. Moreover, enque and deque operation can be performed from front and rear end of the queue respectively. This is&nbsp;called as FIFO(First In First Out).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n//Back-end complete function Template for C++\n\nqueue<int>_push(int arr[],int n)\n{\n    queue <int>s;\n    \n    //adding elements in queue\n    for(int i=0;i<n;i++)\n    {\n        s.push(arr[i]);\n    }\n    return s;\n}\n\nvoid _pop(queue<int>s)\n{\n    while(!s.empty())\n    {\n        cout<<s.front()<<\" \";\n        s.pop();\n    }\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    \n    // Function to push elements of array into a queue\n    public Queue<Integer> push(int arr[], int n) {\n        // Creating a new queue object\n        Queue<Integer> q = new LinkedList<>();\n        \n        // Adding elements from array into the queue\n        for(int i=0; i<n; i++)\n            q.add(arr[i]);\n        \n        // Returning the queue object\n        return q;\n    }\n    \n    // Function to pop and print elements from the queue\n    public void _pop(Queue<Integer> q) {\n        // Looping until the queue is empty\n        while(!q.isEmpty()){                       \n            // Removing and printing the top element of the queue\n            System.out.print(q.remove()+\" \");\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n#Function to push all elements of the array into a queue.\ndef push(arr,n):\n    q=deque()\n    for x in arr:\n        q.append(x)\n        \n    return q\n    \n#Function to pop all elements from the queue.\ndef _pop(q):\n    while(len(q)):\n        print(q.popleft(), end=\" \")",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n  /**\n   * @param {number[]} arr //takes an array as input\n   * @param {number} n //takes a number as input\n   * @return {number[]} //returns an array of numbers\n   */\n\n\n  _push(arr, n) { //defines a function _push that takes an array and a number as input\n    let queue = []; //creates an empty array called queue\n    for (let it of arr) { //iterates over each element in the array\n      queue.push(it); //adds each element to the queue array\n    }\n    return queue; //returns the queue array\n  }\n  /**\n   * @param {number[]} queue //takes an array as input\n   */\n  _pop(queue) { //defines a function _pop that takes an array as input\n    let s = \"\"; //creates an empty string called s\n    while (queue.length > 0) { //while the length of the queue array is greater than 0\n      s += queue.shift(); //remove the first element from the queue array and add it to the end of the string s\n      s += \" \"; //add a space to the end of the string s\n    }\n    console.log(s); //print the string s to the console\n  }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution\n{\n    //Function to insert elements of array into a queue\n    public Queue<int> _push(int[] arr, int n)\n    {\n        Queue<int> s = new Queue<int>();\n\n        //adding elements in queue\n        for (int i = 0; i < n; i++)\n        {\n            s.Enqueue(arr[i]);\n        }\n        return s;\n    }\n\n    //Function to print front element of a queue and remove it from queue\n    public void _pop(Queue<int> s)\n    {\n        while (s.Count > 0)\n        {\n            Console.Write(s.Peek() + \" \");\n            s.Dequeue();\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}