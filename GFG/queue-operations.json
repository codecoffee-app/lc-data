{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700892,
            "title": "Frequency in Queue",
            "titleSlug": "queue-operations",
            "content": "<p><span style=\"font-size: 18px;\">The task is to write two functions for a queue, <strong>enqueue(k)</strong> and <strong>findFrequency(k)</strong>. The first function inserts a given item <strong>k</strong> and the second function finds frequency of a given item <strong>k</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>How are your functions tested?</strong> </span><span style=\"font-size: 18px;\">Every test case has <strong>two arrays. </strong>The first arrays is, insert[] which contains elements to be inserted in the queue. The second array is findFreq[] which contains items whose frequencies need to be found out.<br /><strong>Note:</strong></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">enqueue(k) will be called for every element k in insert[].</span></li>\n<li><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">findFrequency(k) will be called for every element k in findFreq[];</span></span></li>\n</ul>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>insert[] = [1 2 3 4 5 2 3 1], findFreq[] = [1 3 2 9 10]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n2\n2\n2\n-1\n-1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:\n</strong>After inserting 1, 2, 3, 4, 5, 2, 3 and 1 into the queue, frequency of 1 is 2, 3 is 2 and 2 is 2. Since 9 and 10 are not there in the queue we output -1 for them.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>insert[] = [1 2 1 1 1 4], findFreq[] = [1 5 4 3]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n4\n-1\n1\n-1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:\n</strong>After inserting 1, 2, 1, 1, 1 and 4 into the queue, frequency of 1 is 4 and that of 4 is 1. Since 5 and 3 are not there in the queue we output -1 for them.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>3</sup><br />1 &lt;= m &lt;= 10<sup>3</sup><br />1 &lt;= Elements of Queue &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement two functions for a queue data structure: `enqueue(k)` and `findFrequency(k)`. The `enqueue(k)` function should add the item `k` to the rear of the queue. The `findFrequency(k)` function should return the number of times the item `k` appears in the queue.",
                "constraints": [
                    "1 <= n <= 10^3 (where n is the number of elements to insert)",
                    "1 <= m <= 10^3 (where m is the number of elements to find frequency of)",
                    "1 <= Elements of Queue <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "insert[] = [1, 2, 3, 4, 5, 2, 3, 1], findFreq[] = [1, 3, 2, 9, 10]",
                        "output": "2\n2\n2\n-1\n-1",
                        "explanation": "After enqueuing all elements from `insert[]`, the queue contains [1, 2, 3, 4, 5, 2, 3, 1]. The frequency of 1 is 2, the frequency of 3 is 2, and the frequency of 2 is 2. The elements 9 and 10 are not present in the queue, so their frequency is -1."
                    },
                    {
                        "input": "insert[] = [1, 2, 1, 1, 1, 4], findFreq[] = [1, 5, 4, 3]",
                        "output": "4\n-1\n1\n-1",
                        "explanation": "After enqueuing all elements from `insert[]`, the queue contains [1, 2, 1, 1, 1, 4]. The frequency of 1 is 4, and the frequency of 4 is 1. The elements 5 and 3 are not present in the queue, so their frequency is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use In-built method to find the frequency of a number.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n//      Helper class Solution to implement\n//      insert() and findFrequency()\nclass Solution {\n  public:\n    // Function to insert element into the queue\n    void enqueue(queue<int> &q, int k) { q.push(k); }\n\n    // Function to find frequency of an element\n    // return the frequency of k\n    int findFrequency(queue<int> &q, int k) {\n\n        int frequency = 0;\n        queue<int> nq;\n        while (q.size()) {\n            if (q.front() == k)\n                frequency += 1;\n            nq.push(q.front());\n            q.pop();\n        }\n        q = nq;\n        return frequency;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Geeks {\n    static void enqueue(Queue<Integer> q, int k) { q.add(k); }\n\n    static int findFrequency(Queue<Integer> q, int k) {\n        return Collections.frequency(q, k);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def enqueue(self, q, k):\n        q.append(k)\n\n    # Function to find frequency of an element\n    # return the frequency of k\n    def findFrequency(self, q, k):\n        frequency = 0\n        for i in q:\n            if i == k:\n                frequency += 1\n        return frequency\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}