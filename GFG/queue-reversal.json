{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700646,
            "title": "Queue Reversal",
            "titleSlug": "queue-reversal",
            "content": "<p><span >Given a queue <span style=\"font-family: Arial;\"><span style=\"white-space-collapse: preserve; background-color: #ffffff;\"><strong>q </strong></span></span>containing integer elements, your task is to reverse the queue.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong><span style=\"font-family: Arial; text-wrap-mode: wrap; background-color: #ffffff;\">q</span>[] = [4 3 1 10 2 6]\n<strong>Output: </strong>[6, 2, 10, 1, 3, 4]\n<strong>Explanation: </strong>After reversing the given elements of the queue, the resultant queue will be 6 2 10 1 3 4.\n</span></pre>\n<pre><span ><strong>Input: </strong><span style=\"font-family: Arial; text-wrap-mode: wrap; background-color: #ffffff;\">q</span>[] = [4 3 2 1]\n<strong>Output: </strong>[1, 2, 3, 4]\n<strong>Explanation: </strong>After reversing the given elements of the queue, the resultant queue will be 1 2 3 4.</span></pre>\n<pre><span ><strong>Input: </strong><span style=\"font-family: Arial; text-wrap-mode: wrap; background-color: #ffffff;\">q</span>[] = [7, 9, 5, 12, 8]\n<strong>Output: </strong>[8, 12, 5, 9, 7]\n<strong>Explanation: </strong>After reversing the given elements of the queue, the resultant queue will be 8, 12, 5, 9, 7.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; q.size() &le; 10<sup>6</sup><br />1 &le; q[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a queue `q` containing integer elements, reverse the order of the elements in the queue.",
                "constraints": [
                    "1 <= q.size() <= 10^6",
                    "1 <= q[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[4, 3, 1, 10, 2, 6]",
                        "output": "[6, 2, 10, 1, 3, 4]",
                        "explanation": "Reversing the queue [4, 3, 1, 10, 2, 6] results in [6, 2, 10, 1, 3, 4]."
                    },
                    {
                        "input": "[4, 3, 2, 1]",
                        "output": "[1, 2, 3, 4]",
                        "explanation": "Reversing the queue [4, 3, 2, 1] results in [1, 2, 3, 4]."
                    },
                    {
                        "input": "[7, 9, 5, 12, 8]",
                        "output": "[8, 12, 5, 9, 7]",
                        "explanation": "Reversing the queue [7, 9, 5, 12, 8] results in [8, 12, 5, 9, 7]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a stack to reverse the order of elements in the queue by transferring elements between the queue and stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to reverse the queue.\nclass Solution {\n  public:\n    queue<int> reverseQueue(queue<int> &q) {\n        // Stack to hold the elements of the queue temporarily\n        stack<int> tempStack;\n\n        // Push all elements from the queue into the stack\n        while (!q.empty()) {\n            tempStack.push(\n                q.front()); // Push the front element of the queue into the stack\n            q.pop();        // Remove the front element from the queue\n        }\n\n        // Create a new queue to store the reversed elements\n        queue<int> reversedQueue;\n\n        // Push elements back from the stack into the queue\n        // This reverses the queue since the stack follows Last-In-First-Out (LIFO)\n        while (!tempStack.empty()) {\n            reversedQueue.push(\n                tempStack.top()); // Push the top element of the stack into the queue\n            tempStack.pop();      // Remove the top element from the stack\n        }\n\n        // Return the reversed queue\n        return reversedQueue;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to reverse the queue.\n    public Queue<Integer> reverseQueue(Queue<Integer> queue) {\n        // Using a stack to temporarily hold elements from the queue\n        Stack<Integer> stack = new Stack<>();\n\n        // Pushing elements from the queue into the stack, removing them from the queue\n        while (!queue.isEmpty()) {\n            int element = queue.peek(); // Get the front element of the queue\n            queue.poll();               // Remove the front element from the queue\n            stack.push(element);        // Push the element into the stack\n        }\n\n        // Now push elements back from the stack into the queue\n        // The queue gets reversed because the stack follows Last-In-First-Out (LIFO)\n        while (!stack.isEmpty()) {\n            int element = stack.peek(); // Get the top element from the stack\n            stack.pop();                // Remove the top element from the stack\n            queue.add(element);         // Add the element to the queue\n        }\n\n        // Returning the reversed queue\n        return queue;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to reverse the queue.\n    def reverseQueue(self, q):\n        stack = []\n\n        # Push elements from queue into stack\n        while q.qsize() != 0:\n            x = q.get()\n            stack.append(x)\n\n        # Push elements back into queue from stack (reversing order)\n        while len(stack) != 0:\n            x = stack.pop()\n            q.put(x)\n\n        return q\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Queue} q\n * @returns {Queue}\n */\n\n/*\nclass Queue{\n    constructor(){\n        this.arr = [];\n        this.front = 0;\n    }\n\n    push(a){\n        this.arr.push(a);\n    }\n\n    pop(){\n        if(this.arr.length != this.front){\n            let x = this.arr[this.front];\n            this.front++;\n            return x;\n        }\n        else\n            return -1;\n    }\n\n    front_ele(){\n        return this.arr[this.front];\n    }\n\n    empty(){\n        if(this.arr.length != this.front)\n            return false;\n        else\n            return true;\n    }\n}\n*/\n\nclass Solution {\n    // Function to reverse the queue.\n    reversedQueue(q) {\n        // Create a stack to temporarily store elements from the queue\n        let stack = [];\n\n        // Push elements from the queue into the stack and remove them from the queue\n        while (!q.empty()) {\n            stack.push(q.front_ele());\n            q.pop();\n        }\n\n        // Create a new queue to store the reversed elements\n        let reversed = new Queue();\n\n        // Push elements back into the queue from the stack\n        while (stack.length > 0) {\n            reversed.push(stack.pop());\n        }\n\n        // Return the reversed queue\n        return reversed;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}