{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706240,
            "title": "Queue using stack",
            "titleSlug": "queue-using-stack",
            "content": "<p><span style=\"font-size: 18px;\">Implement a Queue&nbsp;using two stack</span><span style=\"font-size: 18px;\"><strong>&nbsp;s1</strong>&nbsp;and<strong>&nbsp;s2</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>enqueue(2)\nenqueue(3)\ndequeue()\nenqueue(4)\ndequeue()<strong>\nOutput: </strong>2 3\n<strong>Explanation:\n</strong>enqueue(2) the queue will be {2}\nenqueue(3) the queue will be {2, 3}\ndequeue() the poped element will be <strong>2</strong>&nbsp;\nthe queue will be {3}\nenqueue(4) the queue will be {3, 4}\ndequeue() the poped element will be <strong>3</strong>. &nbsp;\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>enqueue(2)\ndequeue()\ndequeue()<strong>\nOutput: </strong>2 -1</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span></p>\n<p><span style=\"font-size: 18px;\">Since this is a function problem, you don't need to take inputs. You are required to complete the two methods&nbsp;<strong>enqueue</strong><strong>()</strong>&nbsp;which takes&nbsp;an integer <strong>'x'</strong>&nbsp;as input&nbsp;denoting the element to be pushed into the queue&nbsp;and <strong>dequeue</strong><strong>()</strong>&nbsp;which returns the&nbsp;integer&nbsp;poped out from the queue.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(1) for&nbsp;<strong>enqueue</strong><strong>()&nbsp;</strong>and O(n) for <strong>dequeue</strong><strong>()</strong><br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1) for both&nbsp;<strong>enqueue</strong><strong>()&nbsp;</strong>and <strong>dequeue</strong><strong>()</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;=<strong>&nbsp;</strong>Number of queries&nbsp;&lt;= 100<br />1 &lt;= values of the stack&nbsp;&lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Don&#39;t forget to check underflow conditions.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Design-Pattern",
                "slug": "design-pattern"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete implementation of Queue using two stacks.\n\nclass Queue {\n    stack<int> input, output; //creating two stacks, one for input and one for output.\n\npublic:\n    //Function to enqueue an element into the queue.\n    void enqueue(int x) {\n        input.push(x); //simply push the element into the input stack.\n    }\n\n    //Function to dequeue an element from the queue.\n    int dequeue() {\n        peek(); //call the peek function to ensure that the output stack is updated.\n        int t = output.top(); //get the top element from the output stack.\n        output.pop(); //pop the top element from the output stack.\n        return t; //return the dequeued element.\n    }\n\n    //Function to return the front element of the queue without removing it.\n    int peek() {\n        if (output.empty()) //if the output stack is empty,\n            while (input.size()) //transfer all the elements from the input stack to the output stack.\n                output.push(input.top()), input.pop();\n        return output.top(); //return the top element of the output stack.\n    }\n\n    //Function to check if the queue is empty or not.\n    bool empty() {\n        return input.empty() && output.empty(); //return true if both stacks are empty, else false.\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Queue\n{\n    Stack<Integer> input = new Stack<Integer>(); //Stack to hold elements to be enqueued\n    Stack<Integer> output = new Stack<Integer>(); //Stack to hold elements to be dequeued\n    \n    //Method to enqueue an element into the queue\n    void enqueue(int x){    \n        input.add(x);\n    }\n\t\n    //Method to dequeue an element from the queue and return it\n    int dequeue(){  \n        peek(); //Call peek() method to ensure output stack has elements\n        int t = output.peek(); //Get the first element in the output stack\n        output.pop(); //Remove the first element from the output stack\n        return t; //Return the dequeued element\n    }\n   \n    //Method to return the first element in the queue without removing it\n    int peek() {\n        if (output.isEmpty()){\n            while (input.size()!=0){\n                output.push(input.peek()); //Move elements from input stack to output stack\n                input.pop();\n            }\n        }\n        return output.peek(); //Return the first element in the output stack\n    }\n\n    //Method to check if the queue is empty\n    boolean empty() {\n        return input.isEmpty() && output.isEmpty();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Queue:\n    def __init__(self):\n        self.input = [] # initialize input list for enqueuing elements\n        self.output = [] # initialize output list for dequeuing elements\n        \n    def enqueue(self,X):\n        self.input.append(X) # add the element to the input list\n\n    def dequeue(self):\n        self.peek() # call the peek method to ensure the output list is populated\n        t = self.output[-1] # get the element from the end of the output list\n        self.output.pop() # remove the element from the output list\n        return t # return the element\n    \n    def peek(self):\n        if len(self.output) == 0 : # check if the output list is empty\n            while len(self.input) : # loop through the input list\n                self.output.append(self.input[-1]) # add the element from input to output\n                self.input.pop() # remove the element from input\n        return self.output[-1] # return the last element in the output list",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass Queue {\n  constructor(){\n    this.input = [];\n    this.output = [];\n  }\n\n/**\n * @param {number} x\n */\n  enqueue(x){\n      this.input.push(x);\n  }\n\n/**\n * @return {number}\n */\n  dequeue(){\n      if(this.output.length === 0){\n        while(this.input.length > 0){\n          this.output.push(this.input.pop());\n        }\n      }\n      if(this.output.length === 0){\n        return -1;\n      }\n      return this.output.pop();\n  }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}