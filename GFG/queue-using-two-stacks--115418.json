{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 879169,
            "title": "Queue using two Stacks",
            "titleSlug": "queue-using-two-stacks--115418",
            "content": "<p><span style=\"font-size: 18px;\">Implement a Queue using 2 stacks<strong> s1</strong> and<strong> s2</strong>.<br />A Query <strong>q</strong> is of 2 Types<br /><strong>(i)</strong> 1 <strong>x</strong> (a query of this type means&nbsp;&nbsp;pushing <strong>'x'</strong> into the queue)<br /><strong>(ii)</strong> 2 &nbsp; (a query of this type means to pop an element from the queue and print the popped element)</span></p>\n<p><span style=\"font-size: 18px;\">Note:&nbsp;If there is no element return -1 as the answer while popping.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">queries =</span><strong><span style=\"font-size: 18px;\"> </span></strong><span style=\"font-size: 18px;\">[[1, 2],[1, 3],[2],[1, 4],[2]]\n<strong>Output: </strong>2 3<strong>\nExplanation: </strong>\n1 2 the queue will be {2}\n1 3 the queue will be {2 3}\n2 &nbsp; poped element will be 2 the queue will be {3}\n1 4 the queue will be {3 4}\n2 &nbsp; poped element will be 3.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">queries = [[1, 2],[2],[2],[1, 4]]\n<strong>Output: </strong>2 -1<strong>\nExplanation: </strong>\n1 2&nbsp;the queue will be {2}\n2&nbsp; &nbsp;poped element will be 2 and \n&nbsp;   then the queue will be empty\n2&nbsp; &nbsp;the queue is empty and hence -1\n1 4&nbsp;the queue will be {4}.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;=queries.size()&nbsp;&lt;= 100<br />1 &lt;= x &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a queue data structure using two stacks, `s1` and `s2`. The queue must support two types of operations, represented as queries:\n\n*   **Push (Type 1):** `1 x` - Enqueue the integer `x` into the queue.\n*   **Pop (Type 2):** `2` - Dequeue an element from the queue and return the dequeued element. If the queue is empty, return -1.",
                "constraints": [
                    "1 <= queries.size() <= 100",
                    "1 <= x <= 100"
                ],
                "testcases": [
                    {
                        "input": "[[1, 2],[1, 3],[2],[1, 4],[2]]",
                        "output": "2 3",
                        "explanation": "1 2: Enqueue 2. Queue: {2}\n1 3: Enqueue 3. Queue: {2, 3}\n2: Dequeue. Returns 2. Queue: {3}\n1 4: Enqueue 4. Queue: {3, 4}\n2: Dequeue. Returns 3. Queue: {4}"
                    },
                    {
                        "input": "[[1, 2],[2],[2],[1, 4]]",
                        "output": "2 -1",
                        "explanation": "1 2: Enqueue 2. Queue: {2}\n2: Dequeue. Returns 2. Queue: {}\n2: Dequeue. Queue is empty. Returns -1.\n1 4: Enqueue 4. Queue: {4}"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "morgan-stanley",
            "accolite",
            "amazon",
            "microsoft",
            "d-e-shaw",
            "hike",
            "makemytrip",
            "oracle",
            "walmart",
            "goldman-sachs",
            "maq-software",
            "adobe",
            "infoedge",
            "inmobi"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass StackQueue {\n  private:\n    stack<int> s1;\n    stack<int> s2;\n\n  public:\n    void push(int B) { s1.push(B); }\n\n    int pop() {\n        if (s2.empty()) {\n            // if both stacks are empty, we return -1.\n            if (s1.empty())\n                return -1;\n            // we keep removing the top element from first stack and keep\n            // pushing them in second stack. Thus, the order gets reversed.\n            while (!s1.empty()) {\n                int r = s1.top();\n                s1.pop();\n                s2.push(r);\n            }\n        }\n        // second stack holds the elements in reversed order so we just store\n        // and then pop the element at top of the stack.\n        int k = s2.top();\n        s2.pop();\n        return k;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class StackQueue\r\n{\r\n\tStack<Integer> s1 = new Stack<Integer>();\r\n\tStack<Integer> s2 = new Stack<Integer>();\r\n\t\r\n\t//Function to push an element in queue by using 2 stacks.\r\n\tvoid Push(int B)\r\n\t{\r\n\t    //inserting the element in first stack.\r\n\t\ts1.push(B);\r\n\t}\r\n\t\r\n\t//Function to pop an element from queue by using 2 stacks.\r\n\tint Pop()\r\n\t{\r\n\t\tif(s2.isEmpty())\r\n\t\t{\r\n\t\t    //if both stacks are empty, we return -1.\r\n\t\t\tif(s1.isEmpty())\r\n\t\t\t\treturn -1;\r\n\t\t\t\r\n\t\t\t//we keep removing the top element from first stack and keep\r\n            //pushing them in second stack. Thus, the order gets reversed.\r\n\t\t\twhile(!s1.isEmpty())\r\n\t\t\t{\r\n\t\t\t\tint r = s1.peek();\r\n\t\t\t\ts1.pop();\r\n\t\t\t\ts2.push(r);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//second stack holds the elements in reversed order so we just store \r\n            //and then pop the element at top of the stack.\r\n\t\t\tint k = s2.peek();\r\n\t\t\ts2.pop();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\twhile(!s2.isEmpty())\r\n\t\t\t{\r\n\t\t\t\tint l = s2.peek();\r\n\t\t\t\ts2.pop();\r\n\t\t\t\ts1.push(l);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn k;\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}\r\n\r\n\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}