{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700195,
            "title": "Queue using two Stacks",
            "titleSlug": "queue-using-two-stacks",
            "content": "<p><span style=\"font-size: 18px;\">Implement a Queue using 2 stacks<strong> s1</strong> and<strong> s2</strong> .<br />A Query <strong>Q</strong> is of 2 Types<br /><strong>(i)</strong> 1 x (a query of this type means&nbsp;&nbsp;pushing <strong>'x'</strong> into the queue)<br /><strong>(ii)</strong> 2 &nbsp; (a query of this type means to pop&nbsp;element from queue and print the poped element)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note :-</strong> If there is no element return -1 as answer while popping.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">5\n1 2 1 3 2 1 4 2\n<strong>Output: \n</strong>2&nbsp;3\n<strong>Explanation: \n</strong>In the first testcase\n1 2 the queue will be {2}\n1 3 the queue will be {2 3}\n2 &nbsp; poped element will be 2 the queue \n&nbsp;   will be {3}\n1 4 the queue will be {3 4}\n2 &nbsp; poped element will be 3.</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">4\n1 2 2 2 1 4\n<strong>Output: \n</strong>2&nbsp;-1\n<strong>Explanation: \n</strong>In the second testcase&nbsp;\n1 2&nbsp;the queue will be {2}\n2&nbsp; &nbsp;poped element will be 2 and \n&nbsp;   then the queue will be empty\n2&nbsp; &nbsp;the queue is empty and hence -1\n1 4&nbsp;the queue will be {4}.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong> : O(1) for&nbsp;<strong>push()&nbsp;</strong>and&nbsp;O(N) for&nbsp;<strong>pop() </strong>or&nbsp;O(N) for&nbsp;<strong>push()&nbsp;</strong>and&nbsp;O(1) for&nbsp;<strong>pop() </strong>&nbsp;<br /><strong>Expected Auxilliary Space </strong>:&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;=<strong> </strong>Q &lt;= 100<br />1 &lt;= x &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a Queue data structure using two stacks, `s1` and `s2`.  You will be given a series of queries. Each query will be one of two types:\n\n*   **Type 1 (Push):** `1 x` - Push the integer `x` onto the rear of the queue.\n*   **Type 2 (Pop):** `2` - Pop the element from the front of the queue and print the popped element. If the queue is empty, print -1.",
                "constraints": [
                    "1 <= Q <= 100 (where Q is the number of queries)",
                    "1 <= x <= 100 (where x is the value to be pushed)"
                ],
                "testcases": [
                    {
                        "input": "5\n1 2 1 3 2 1 4 2",
                        "output": "2 3",
                        "explanation": "The sequence of operations results in the following:\n1 2: Queue becomes {2}\n1 3: Queue becomes {2, 3}\n2: Pop 2, Queue becomes {3}\n1 4: Queue becomes {3, 4}\n2: Pop 3"
                    },
                    {
                        "input": "4\n1 2 2 2 1 4",
                        "output": "2 -1",
                        "explanation": "The sequence of operations results in the following:\n1 2: Queue becomes {2}\n2: Pop 2, Queue becomes {}\n2: Queue is empty, so print -1\n1 4: Queue becomes {4}"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "morgan-stanley",
            "accolite",
            "amazon",
            "microsoft",
            "de-shaw",
            "hike",
            "makemytrip",
            "oracle",
            "walmart",
            "goldman-sachs",
            "maq-software",
            "adobe",
            "infoedge",
            "inmobi"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Function to push an element in queue by using 2 stacks.\r\nvoid StackQueue :: push(int B)\r\n{\r\n    //inserting the element in first stack.\r\n    s1.push(B);\r\n}\r\n\r\n//Function to pop an element from queue by using 2 stacks.\r\nint StackQueue :: pop(){\r\n        if(s2.empty())\r\n        {\r\n            //if both stacks are empty, we return -1.\r\n            if(s1.empty())\r\n                return -1;\r\n            //we keep removing the top element from first stack and keep\r\n            //pushing them in second stack. Thus, the order gets reversed.\r\n            while(!s1.empty())\r\n            {\r\n                int r=s1.top();\r\n                s1.pop(); \r\n                s2.push(r);\r\n            }\r\n        }\r\n        //second stack holds the elements in reversed order so we just store \r\n        //and then pop the element at top of the stack.\r\n        int k=s2.top();\r\n        s2.pop();\r\n        return k;\r\n    }",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class StackQueue\r\n{\r\n\tStack<Integer> s1 = new Stack<Integer>();\r\n\tStack<Integer> s2 = new Stack<Integer>();\r\n\t\r\n\t//Function to push an element in queue by using 2 stacks.\r\n\tvoid Push(int B)\r\n\t{\r\n\t    //inserting the element in first stack.\r\n\t\ts1.push(B);\r\n\t}\r\n\t\r\n\t//Function to pop an element from queue by using 2 stacks.\r\n\tint Pop()\r\n\t{\r\n\t\tif(s2.isEmpty())\r\n\t\t{\r\n\t\t    //if both stacks are empty, we return -1.\r\n\t\t\tif(s1.isEmpty())\r\n\t\t\t\treturn -1;\r\n\t\t\t\r\n\t\t\t//we keep removing the top element from first stack and keep\r\n            //pushing them in second stack. Thus, the order gets reversed.\r\n\t\t\twhile(!s1.isEmpty())\r\n\t\t\t{\r\n\t\t\t\tint r = s1.peek();\r\n\t\t\t\ts1.pop();\r\n\t\t\t\ts2.push(r);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//second stack holds the elements in reversed order so we just store \r\n            //and then pop the element at top of the stack.\r\n\t\t\tint k = s2.peek();\r\n\t\t\ts2.pop();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\twhile(!s2.isEmpty())\r\n\t\t\t{\r\n\t\t\t\tint l = s2.peek();\r\n\t\t\t\ts2.pop();\r\n\t\t\t\ts1.push(l);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn k;\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}\r\n\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n#Function to push an element in queue by using 2 stacks.\r\ndef Push(x,s1,s2):\r\n    \r\n    #inserting the element in first stack.\r\n    s1.append(x)\r\n\r\n\r\n#Function to pop an element from queue by using 2 stacks.\r\ndef Pop(s1,s2):\r\n\r\n    if not s2:\r\n        #if both stacks are empty, we return -1.\r\n        if not s1:\r\n            return -1\r\n\r\n        #we keep removing the top element from first stack and keep\r\n        #pushing them in second stack. Thus, the order gets reversed.\r\n        while s1:\r\n            r=s1.pop()\r\n            s2.append(r)\r\n            \r\n            \r\n        #second stack holds the elements in reversed order so we just store \r\n        #and then pop the element at top of the stack.\r\n        k=s2.pop()\r\n\r\n        while s2:\r\n            l=s2.pop()\r\n            s1.append(l)\r\n\r\n        return k\r\n\r\n    return -1\r\n\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\nclass StackQueue{\r\n    constructor(){\r\n        this.s1 = new Stack();\r\n        this.s2 = new Stack();\r\n    }\r\n    \r\n    /**\r\n     * @param {number} B\r\n    */\r\n    \r\n    //Function to push an element in queue by using 2 stacks.\r\n    push(B)\r\n    {\r\n        //inserting the element in first stack.\r\n        this.s1.push(B)\r\n    }\r\n    \r\n    /**\r\n     * @returns {number}\r\n    */\r\n    \r\n    //Function to pop an element from queue by using 2 stacks.\r\n    pop(){\r\n        if(this.s2.empty())\r\n        {\r\n            //if both stacks are empty, we return -1.\r\n            if(this.s1.empty())\r\n                return -1; \r\n                \r\n            //we keep removing the top element from first stack and keep\r\n            //pushing them in second stack. Thus, the order gets reversed.\r\n            while(!this.s1.empty())\r\n            {\r\n                let r=this.s1.front();\r\n                this.s1.pop();   \r\n                this.s2.push(r); \r\n            }\r\n        }\r\n        //second stack holds the elements in reversed order so we just store \r\n        //and then pop the element at top of the stack.\r\n        let k=this.s2.front();  \r\n        this.s2.pop();\r\n        return k;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}