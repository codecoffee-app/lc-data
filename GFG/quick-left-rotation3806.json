{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703084,
            "title": "Quick Left Rotation",
            "titleSlug": "quick-left-rotation3806",
            "content": "<p><span >Given an array, <strong>arr[]</strong> of positive elements, and an integer <strong>k</strong>, the task is to left-rotate the array <strong>k</strong>&nbsp;indexes.<br /><strong>Note</strong>: R<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">otate the array even if the k is greater than the size of the array. In these cases after every full array rotation, the array comes the same as the original array.</span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5, 6, 7], k = 2 \n<strong>Output:</strong> [3, 4, 5, 6, 7, 1, 2]\n<strong>Explanation</strong>: Rotating the above array by 2 will make the output array.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5, 6],  k = 12\n<strong>Output:</strong> [1, 2, 3, 4, 5, 6]<br /><strong>Explanation:</strong> left Rotation of above array 12 times gives same array as output. <br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5, 6],  k = 11\n<strong>Output:</strong> [6, 1, 2, 3, 4, 5]<br /><strong>Explanation:</strong> left Rotation of above array 11 times &amp; in resultant output 6 comes to the statring position.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints:<br /></strong>1 &le; arr.size,&nbsp;</span><span style=\"font-size: 18.6667px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">arr[i]</span><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> &le; 10<sup>5</sup><br /></span><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">0 &le; k &le; 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">9</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of positive elements and an integer `k`, left-rotate the array `k` indices.  Rotate the array even if `k` is greater than the size of the array.  After every full array rotation, the array returns to its original state.",
                "constraints": [
                    "1 <= arr.size <= 10^5",
                    "1 <= arr[i] <= 10^5",
                    "0 <= k <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "arr = [1, 2, 3, 4, 5, 6, 7], k = 2",
                        "output": "[3, 4, 5, 6, 7, 1, 2]",
                        "explanation": "After rotating the array by 2 positions to the left, the elements [1, 2] are moved to the end of the array."
                    },
                    {
                        "input": "arr = [1, 2, 3, 4, 5, 6], k = 12",
                        "output": "[1, 2, 3, 4, 5, 6]",
                        "explanation": "Rotating the array 12 times (a multiple of the array's size) results in the original array."
                    },
                    {
                        "input": "arr = [1, 2, 3, 4, 5, 6], k = 11",
                        "output": "[6, 1, 2, 3, 4, 5]",
                        "explanation": "Rotating the array 11 times is equivalent to rotating it 5 times to the left (11 % 6 = 5). This moves the last element, 6, to the beginning of the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>To left rotate an array by k positions, slice the array into two parts at k and swap their order.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n\n  private:\n    /*Function to reverse arr[] from index start to end*/\n    void rvereseArray(vector<int>& arr, int start, int end) {\n        while (start < end) {\n            int temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n\n  public:\n\n    /* Function to left rotate arr[] by d */\n    void leftRotate(vector<int>& arr, int k) {\n        int n = arr.size();\n        // calculate the actual rotations needed inside the array\n        k = k % n;\n        if (k == 0)\n            return;\n\n        // reverse the first k elements of the array\n        rvereseArray(arr, 0, k - 1);\n\n        // reverse the remaining elements of the array\n        rvereseArray(arr, k, n - 1);\n\n        // reverse the entire array to get the final result\n        rvereseArray(arr, 0, n - 1);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    void leftRotate(int arr[], int k) {\n        int n = arr.length;\n        k %= n;\n        if (k == 0) return;\n        rev(arr, 0, k - 1);\n        rev(arr, k, n - 1);\n        rev(arr, 0, n - 1);\n    }\n\n    private void rev(int a[], int low, int high) {\n        while (low < high) {\n            swap(a, low++, high--);\n        }\n    }\n\n    private void swap(int a[], int i, int j) {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def reverseArray(self, arr, start, end):\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    def leftRotate(self, arr, k):\n        n = len(arr)\n        # calculate the actual rotations needed inside the array\n        k = k % n\n        if k == 0:\n            return\n\n        # reverse the first k elements of the array\n        self.reverseArray(arr, 0, k - 1)\n\n        # reverse the remaining elements of the array\n        self.reverseArray(arr, k, n - 1)\n\n        # reverse the entire array to get the final result\n        self.reverseArray(arr, 0, n - 1)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    leftRotate(arr, k) {\n        let n = arr.length;\n        k = k % n;\n        if (k == 0) return;\n        this.rvereseArray(arr, 0, k - 1);\n        this.rvereseArray(arr, k, n - 1);\n        this.rvereseArray(arr, 0, n - 1);\n    }\n\n    /*Function to reverse arr[] from index start to end*/\n    rvereseArray(arr, start, end) {\n        while (start < end) {\n            let temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}