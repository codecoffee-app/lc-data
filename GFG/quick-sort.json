{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700151,
      "title": "Quick Sort",
      "titleSlug": "quick-sort",
      "content": "<p><span style=\"font-size: 18.6667px;\">Implement Quick Sort, a Divide and Conquer algorithm, to sort an array, <strong>arr</strong>[] in ascending order. Given an array, <strong>arr</strong>[], with starting index <strong>low</strong> and ending index <strong>high</strong>, complete the functions <strong>partition()</strong> and <strong>quickSort()</strong>. Use the last element as the pivot so that all elements less than or equal to the pivot come before it, and elements greater than the pivot follow it.</span></p>\n<p><span ><strong>Note</strong>: The <strong>low</strong> and <strong>high</strong> are inclusive.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [4, 1, 3, 9, 7]\n<strong>Output: </strong>[1, 3, 4, 7, 9]<br /><strong>Explanation:</strong> After sorting, all elements are arranged in ascending order.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 1, 6, 10, 4, 1, 3, 9, 7]\n<strong>Output: [</strong>1, 1, 2, 3, 4, 6, 7, 9, 10]<br /><strong>Explanation:</strong> Duplicate elements (1) are retained in sorted order.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [5, 5, 5, 5]\n<strong>Output: </strong>[5, 5, 5, 5]<br /><strong>Explanation:</strong> All elements are identical, so the array remains unchanged.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA"
    },
    "similar": [],
    "hints": [
      "<p>Use the last element as a pivot, and recursively sort around it.</p>"
    ],
    "relatedTopics": [
      {
        "name": "Divide and Conquer",
        "slug": "divide-and-conquer"
      },
      {
        "name": "Sorting",
        "slug": "sorting"
      },
      {
        "name": "Algorithms",
        "slug": "algorithms"
      }
    ],
    "companies": [
      "vmware",
      "amazon",
      "microsoft",
      "samsung",
      "hike",
      "ola-cabs",
      "goldman-sachs",
      "adobe",
      "sap",
      "qualcomm",
      "hsbc",
      "grofers",
      "target-corporation"
    ],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "class Solution {\n  public:\n    // Function to sort an array using the Quick Sort algorithm.\n    void quickSort(vector<int>& arr, int low, int high) {\n        // Base condition: If low index is less than high, there's more to sort.\n        if (low < high) {\n            // Partition the array and get the pivot index.\n            int pi = partition(arr, low, high);\n\n            // Recursively apply Quick Sort to the left part.\n            quickSort(arr, low, pi - 1);\n\n            // Recursively apply Quick Sort to the right part.\n            quickSort(arr, pi + 1, high);\n        }\n    }\n\n  public:\n    // Function to partition the array. It takes the last element as pivot,\n    // places the pivot element at its correct sorted position, and places all\n    // elements smaller than the pivot to its left and greater elements to its right.\n    int partition(vector<int>& arr, int low, int high) {\n        int pivot = arr[high]; // Choose the last element as the pivot\n        int i = (low - 1);     // Index of the smaller element\n\n        // Traverse the array from low to high - 1\n        for (int j = low; j <= high - 1; j++) {\n            // If the current element is less than or equal to the pivot\n            if (arr[j] <= pivot) {\n                i++;                  // Increment index of smaller element\n                swap(arr[i], arr[j]); // Swap the smaller element with arr[j]\n            }\n        }\n\n        // Swap the pivot element with the element at index i + 1\n        swap(arr[i + 1], arr[high]);\n\n        // Return the partition index\n        return (i + 1);\n    }\n};\n",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "//Back-end Complete function Template for JAVA\n\nclass Solution {\n    // Function to sort an array using quick sort algorithm.\n    static void quickSort(int arr[], int low, int high) {\n        if (low < high) {\n\n            // pi is partitioning index, arr[pi] is now at right place.\n            int pi = partition(arr, low, high);\n            // Separately sorting elements before and after partitioning index.\n            quickSort(arr, low, pi - 1);\n            quickSort(arr, pi + 1, high);\n        }\n    }\n\n    // Function that takes last element as pivot, places the pivot element at\n    // its correct position in sorted array, and places all smaller elements\n    // to left of pivot and all greater elements to right of pivot.\n    static int partition(int arr[], int low, int high) {\n        // Picking the pivot.\n        int pivot = arr[high];\n        // Index of smaller element and indicates the right position of\n        // pivot found so far.\n        int i = (low - 1);\n        for (int j = low; j <= high - 1; j++) {\n            // If current element is smaller than or equal to pivot we increment\n            // the value of i and swap the values at ith and jth index.\n            if (arr[j] <= pivot) {\n                i++;\n                // Swapping of values at ith and jth index.\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        // At last, swapping of value at ith and the last index which was\n        // selected as pivot.\n        int temp = arr[i + 1];\n        arr[i + 1] = arr[high];\n        arr[high] = temp;\n\n        // returning the partitioning index.\n        return i + 1;\n    }\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to sort a list using quick sort algorithm.\n    def quickSort(self, arr, low, high):\n\n        if low < high:\n            #pi is partitioning index, arr[pi] is now at right place.\n            pi = self.partition(arr, low, high)\n\n            #Separately sorting elements before and after partitioning index.\n            self.quickSort(arr, low, pi - 1)\n            self.quickSort(arr, pi + 1, high)\n\n    #Function that takes last element as pivot, places the pivot element at\n    #its correct position in sorted list, and places all smaller elements\n    #to left of pivot and all greater elements to right of pivot.\n    def partition(self, arr, low, high):\n\n        #Index of smaller element and indicates the right position of\n        #pivot found so far.\n        i = (low - 1)\n        #Picking the pivot.\n        pivot = arr[high]\n\n        for j in range(low, high):\n            #If current element is smaller than or equal to pivot we increment\n            #the value of i and swap the values at ith and jth index.\n            if arr[j] <= pivot:\n                i = i + 1\n                #Swapping of values at ith and jth index.\n                arr[i], arr[j] = arr[j], arr[i]\n\n        #At last, swapping of value at ith and the last index which was\n        #selected as pivot.\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n\n        #returning the partitioning index.\n        return (i + 1)\n",
        "lang_text": "python3"
      },
      {
        "lang": "Javascript",
        "full_func": "class Solution {\n\n    // Function to swap two elements in the array\n    swap(arr, i, j) {\n        let temp = arr[i]; // Store the value of arr[i] in a temporary variable\n        arr[i] = arr[j];   // Assign the value of arr[j] to arr[i]\n        arr[j] = temp;     // Assign the temporary variable to arr[j]\n    }\n\n    // Function to perform quick sort on the array\n    quickSort(arr, low, high) {\n\n        if (low < high) {\n            let pi = this.partition(arr, low, high); // Find the pivot element\n            this.quickSort(\n                arr, low,\n                pi - 1); // Recursively perform quick sort on the left subarray\n            this.quickSort(\n                arr, pi + 1,\n                high); // Recursively perform quick sort on the right subarray\n        }\n    }\n\n    // Function to partition the array and return the index of the pivot element\n    partition(arr, low, high) {\n        let pivot = arr[high]; // Choose the last element as the pivot\n        let i = low - 1;       // Initialize the index of the smaller element\n\n        // Move all elements smaller than the pivot to the left of it\n        for (let j = low; j <= high - 1; j++) {\n            if (arr[j] <= pivot) {\n                i++;\n                this.swap(arr, i, j); // Swap arr[i] and arr[j]\n            }\n        }\n\n        this.swap(arr, i + 1, high); // Swap the pivot element into its correct position\n        return i + 1;                // Return the index of the pivot element\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
