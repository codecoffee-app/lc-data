{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700132,
            "title": "QuickSort on Doubly Linked List",
            "titleSlug": "quicksort-on-doubly-linked-list",
            "content": "<p><span >Sort the given doubly linked list using quicksort. Just complete the partition function using the quicksort technique.</span></p>\n<p><span ><strong>Example:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList: 4-&gt;2-&gt;9\n<strong>Output: </strong>2-&gt;4-&gt;9\n<strong>Explaination</strong>: After sorting output will look like this.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700132/Web/Other/blobid0_1723059297.png\" width=\"395\" height=\"148\" /><br /></span></pre>\n<pre><span ><strong>Input:\n</strong>LinkedList: 1-&gt;4-&gt;9-&gt;2\n<strong>Output: </strong>1-&gt;2-&gt;4-&gt;9\n<strong>Explaination</strong>: After sorting output will look like this.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700132/Web/Other/blobid1_1723059313.png\" width=\"390\" height=\"146\" /> </span></pre>\n<p><span ><strong>Expected Time Complexity</strong>: O(nlogn)<br /><strong>Expected Auxilliary Space</strong>: O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= no. of nodes &lt;= 10<sup>6</sup><br />1 &lt;= node-&gt;data &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Sort the given doubly linked list using the Quicksort algorithm. Implement the partition function, a core component of the Quicksort technique, to efficiently sort the list.",
                "constraints": [
                    "1 <= Number of nodes <= 10^6",
                    "1 <= Node data <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 4->2->9",
                        "output": "2->4->9",
                        "explanation": "The doubly linked list is sorted in ascending order. The node with data value 2 comes first, followed by 4 and then 9."
                    },
                    {
                        "input": "LinkedList: 1->4->9->2",
                        "output": "1->2->4->9",
                        "explanation": "The doubly linked list is sorted in ascending order. The node with data value 1 comes first, followed by 2, then 4 and finally 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >First, find the pointer to the last node. Once we have a pointer to the last node, we can recursively sort the linked list using pointers to first and last nodes of a linked list.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "hsbc"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    DLLNode* getTail(DLLNode* cur) {\n        while (cur != nullptr && cur->next != nullptr) {\n            cur = cur->next;\n        }\n        return cur;\n    }\n\n    DLLNode* partition(DLLNode* head, DLLNode* end, DLLNode** newHead,\n                       DLLNode** newEnd) {\n        DLLNode* pivot = end;\n        DLLNode *prev = nullptr, *cur = head, *tail = pivot;\n\n        while (cur != pivot) {\n            if (cur->data < pivot->data) {\n                if ((*newHead) == nullptr) {\n                    (*newHead) = cur;\n                }\n                prev = cur;\n                cur = cur->next;\n            } else {\n                if (prev) {\n                    prev->next = cur->next;\n                }\n                if (cur->next) {\n                    cur->next->prev = prev;\n                }\n                DLLNode* tmp = cur->next;\n                cur->next = nullptr;\n                tail->next = cur;\n                cur->prev = tail;\n                tail = cur;\n                cur = tmp;\n            }\n        }\n\n        if ((*newHead) == nullptr) {\n            (*newHead) = pivot;\n        }\n\n        (*newEnd) = tail;\n\n        return pivot;\n    }\n\n    DLLNode* quickSortRecur(DLLNode* head, DLLNode* end) {\n        if (!head || head == end) {\n            return head;\n        }\n\n        DLLNode *newHead = nullptr, *newEnd = nullptr;\n\n        DLLNode* pivot = partition(head, end, &newHead, &newEnd);\n\n        if (newHead != pivot) {\n            DLLNode* tmp = newHead;\n            while (tmp->next != pivot) {\n                tmp = tmp->next;\n            }\n            tmp->next = nullptr;\n            pivot->prev = nullptr;\n\n            newHead = quickSortRecur(newHead, tmp);\n\n            tmp = getTail(newHead);\n            tmp->next = pivot;\n            pivot->prev = tmp;\n        }\n\n        pivot->next = quickSortRecur(pivot->next, newEnd);\n        if (pivot->next) {\n            pivot->next->prev = pivot;\n        }\n\n        return newHead;\n    }\n\n    DLLNode* quickSort(DLLNode* head) {\n        DLLNode* tail = getTail(head);\n        return quickSortRecur(head, tail);\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public DLLNode getTail(DLLNode cur) {\n        while (cur != null && cur.next != null) {\n            cur = cur.next;\n        }\n        return cur;\n    }\n\n    public DLLNode partition(DLLNode head, DLLNode end, DLLNode[] newHead,\n                             DLLNode[] newEnd) {\n        DLLNode pivot = end;\n        DLLNode prev = null, cur = head, tail = pivot;\n\n        while (cur != pivot) {\n            if (cur.data < pivot.data) {\n                if (newHead[0] == null) {\n                    newHead[0] = cur;\n                }\n                prev = cur;\n                cur = cur.next;\n            } else {\n                if (prev != null) {\n                    prev.next = cur.next;\n                }\n                if (cur.next != null) {\n                    cur.next.prev = prev;\n                }\n                DLLNode tmp = cur.next;\n                cur.next = null;\n                tail.next = cur;\n                cur.prev = tail;\n                tail = cur;\n                cur = tmp;\n            }\n        }\n\n        if (newHead[0] == null) {\n            newHead[0] = pivot;\n        }\n\n        newEnd[0] = tail;\n\n        return pivot;\n    }\n\n    public DLLNode quickSortRecur(DLLNode head, DLLNode end) {\n        if (head == null || head == end) {\n            return head;\n        }\n\n        DLLNode[] newHead = {null};\n        DLLNode[] newEnd = {null};\n\n        DLLNode pivot = partition(head, end, newHead, newEnd);\n\n        if (newHead[0] != pivot) {\n            DLLNode tmp = newHead[0];\n            while (tmp.next != pivot) {\n                tmp = tmp.next;\n            }\n            tmp.next = null;\n            pivot.prev = null;\n\n            newHead[0] = quickSortRecur(newHead[0], tmp);\n\n            tmp = getTail(newHead[0]);\n            tmp.next = pivot;\n            pivot.prev = tmp;\n        }\n\n        pivot.next = quickSortRecur(pivot.next, newEnd[0]);\n        if (pivot.next != null) {\n            pivot.next.prev = pivot;\n        }\n\n        return newHead[0];\n    }\n\n    public DLLNode quickSort(DLLNode head) {\n        DLLNode tail = getTail(head);\n        return quickSortRecur(head, tail);\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def get_tail(self, cur):\n        while cur is not None and cur.next is not None:\n            cur = cur.next\n        return cur\n\n    def partition(self, head, end):\n        pivot = end\n        prev = None\n        cur = head\n        tail = pivot\n        new_head = None\n        new_end = None\n\n        while cur != pivot:\n            if cur.data < pivot.data:\n                if new_head is None:\n                    new_head = cur\n                prev = cur\n                cur = cur.next\n            else:\n                if prev:\n                    prev.next = cur.next\n                if cur.next:\n                    cur.next.prev = prev\n                tmp = cur.next\n                cur.next = None\n                tail.next = cur\n                cur.prev = tail\n                tail = cur\n                cur = tmp\n\n        if new_head is None:\n            new_head = pivot\n\n        new_end = tail\n\n        return pivot, new_head, new_end\n\n    def quick_sort_recur(self, head, end):\n        if not head or head == end:\n            return head\n\n        pivot, new_head, new_end = self.partition(head, end)\n\n        if new_head != pivot:\n            tmp = new_head\n            while tmp.next != pivot:\n                tmp = tmp.next\n            tmp.next = None\n            pivot.prev = None\n\n            new_head = self.quick_sort_recur(new_head, tmp)\n\n            tmp = self.get_tail(new_head)\n            tmp.next = pivot\n            pivot.prev = tmp\n\n        pivot.next = self.quick_sort_recur(pivot.next, new_end)\n        if pivot.next:\n            pivot.next.prev = pivot\n\n        return new_head\n\n    def quick_sort(self, head):\n        tail = self.get_tail(head)\n        return self.quick_sort_recur(head, tail)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    getTail(cur) {\n        while (cur !== null && cur.next !== null) {\n            cur = cur.next;\n        }\n        return cur;\n    }\n\n    partition(head, end) {\n        let pivot = end;\n        let prev = null;\n        let cur = head;\n        let tail = pivot;\n        let new_head = null;\n        let new_end = null;\n\n        while (cur !== pivot) {\n            if (cur.data < pivot.data) {\n                if (new_head === null) {\n                    new_head = cur;\n                }\n                prev = cur;\n                cur = cur.next;\n            } else {\n                if (prev) {\n                    prev.next = cur.next;\n                }\n                if (cur.next) {\n                    cur.next.prev = prev;\n                }\n                let tmp = cur.next;\n                cur.next = null;\n                tail.next = cur;\n                cur.prev = tail;\n                tail = cur;\n                cur = tmp;\n            }\n        }\n\n        if (new_head === null) {\n            new_head = pivot;\n        }\n\n        new_end = tail;\n\n        return {pivot, new_head, new_end};\n    }\n\n    quickSortRecur(head, end) {\n        if (!head || head === end) {\n            return head;\n        }\n\n        let {pivot, new_head, new_end} = this.partition(head, end);\n\n        if (new_head !== pivot) {\n            let tmp = new_head;\n            while (tmp.next !== pivot) {\n                tmp = tmp.next;\n            }\n            tmp.next = null;\n            pivot.prev = null;\n\n            new_head = this.quickSortRecur(new_head, tmp);\n\n            tmp = this.getTail(new_head);\n            tmp.next = pivot;\n            pivot.prev = tmp;\n        }\n\n        pivot.next = this.quickSortRecur(pivot.next, new_end);\n        if (pivot.next) {\n            pivot.next.prev = pivot;\n        }\n\n        return new_head;\n    }\n\n    quickSort(head) {\n        let tail = this.getTail(head);\n        return this.quickSortRecur(head, tail);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}