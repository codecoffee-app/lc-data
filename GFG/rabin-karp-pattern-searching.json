{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701126,
            "title": "Rabin Karp - Pattern Searching",
            "titleSlug": "rabin-karp-pattern-searching",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>S</strong> and a pattern <strong>P</strong> of lowercase characters. The task is to check if the pattern is present in string or not.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>S = aabaacaadaabaaba\nP = aaba\n<strong>Output: </strong>Yes<strong>\nExplanation: </strong>You can find the patter at\nstarting at index 12.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>S = aabaacaadaabaaba\nP = asdfa\n<strong>Output: </strong>No<strong>\nExplanation: </strong>Pattern doesn&#39;t exist in\nthe given string S.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou need to complete the function<strong> search </strong>which takes 3 arguments(S, P and prime q) and <strong>returns true </strong>if the pattern is found else returns <strong>false</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N + M).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).<br />\nNote: N = |S|, M = |P|.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= |S|, |P| &lt;= 10<sup>4</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S and a pattern P of lowercase characters, determine if the pattern P is present within the string S.",
                "constraints": [
                    "1 <= |S|, |P| <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "S = aabaacaadaabaaba\nP = aaba",
                        "output": "Yes",
                        "explanation": "The pattern 'aaba' is found within the string 'aabaacaadaabaaba'. For example, it appears starting at index 12."
                    },
                    {
                        "input": "S = aabaacaadaabaaba\nP = asdfa",
                        "output": "No",
                        "explanation": "The pattern 'asdfa' is not found within the string 'aabaacaadaabaaba'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n// d is the number of characters in the input alphabet. \n#define d 256 \n\n//Function to check if the pattern is present in string or not.\nbool search(string pat, string txt, int q) \n{ \n\tint M = pat.length(); \n\tint N = txt.length(); \n\tint i, j; \n\tint p = 0; \n\tint t = 0; \n\tint h = 1; \n\n\t//the value of h would be \"pow(d, M-1)%q\".\n\tfor (i = 0; i < M-1; i++) \n\t\th = (h*d)%q; \n\n\t//calculating the hash value of pattern and first window of text. \n\tfor (i = 0; i < M; i++) \n\t{ \n\t\tp = (d*p + pat[i])%q; \n\t\tt = (d*t + txt[i])%q; \n\t} \n\n\t//sliding the pattern over text one by one. \n\tfor (i = 0; i <= N - M; i++) \n\t{ \n\t\t//checking the hash values of current window of text and pattern. \n\t\t//If the hash values match then only we check for characters on by one.\n\t\tif ( p == t ) \n\t\t{ \n\t\t\t//checking for characters one by one.\n\t\t\tfor (j = 0; j < M; j++) \n\t\t\t{ \n\t\t\t\tif (txt[i+j] != pat[j]) \n\t\t\t\t\tbreak; \n\t\t\t} \n\t\t\t//if pattern is found, we return true.\n\t\t\tif (j == M) \n\t\t\t\treturn true;\n\t\t} \n\n\t\t//calculating hash value for next window of text.\n\t\t//removing leading digit and adding trailing digit.\n\t\tif ( i < N-M ) \n\t\t{ \n\t\t\tt = (d*(t - txt[i]*h) + txt[i+M])%q;\n\t\t\t//we might get negative value of t so converting it to positive. \n\t\t\tif (t < 0) \n\t\t\tt = (t + q); \n\t\t} \n\t}\n\t//returning false if pattern is not found.\n\treturn false;\n} ",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass match\n{\n    static int d= 256;\n    //Function to check if the pattern is present in string or not.\n    static boolean search(String pat, String txt, int q)\n    {\n        int M = pat.length(); \n        int N = txt.length(); \n        int i, j; \n        int p = 0; \n        int t = 0; \n        int h = 1; \n\n\t    //the value of h would be \"pow(d, M-1)%q\". \n\t    for (i = 0; i < M-1; i++) \n\t\t        h = (h*d)%q;\n\n\t    //calculating the hash value of pattern and first window of text.\n\t    for (i = 0; i < M; i++) \n\t    { \n\t\t    p = (d*p + pat.charAt(i))%q; \n\t\t    t = (d*t + txt.charAt(i))%q; \n\t    } \n\t    \n        //sliding the pattern over text one by one.\n\t    for (i = 0; i <= N - M; i++) \n\t    { \n            //checking the hash values of current window of text and pattern. \n\t\t    //If hash values match then only we check for characters on by one.\n\t\t    if ( p == t ) \n\t\t    { \n\t\t\t    //checking for characters one by one.\n\t\t\t    for (j = 0; j < M; j++) \n\t\t\t    { \n\t\t\t\t    if (txt.charAt(i+j) != pat.charAt(j)) \n\t\t\t\t\t    break; \n\t\t\t    } \n    \t\t\t//if pattern is found, we return true.\n    \t\t\tif (j == M) \n    \t\t\t\treturn true;\n\t\t    } \n\t\t    \n\t\t    //calculating hash value for next window of text.\n\t\t    //removing leading digit and adding trailing digit.\n\t\t    if ( i < N-M ) \n\t\t    { \n\t\t\t    t = (d*(t - txt.charAt(i)*h) + txt.charAt(i+M))%q; \n                //we might get negative value of t so converting it to positive.\n\t\t\t    if (t < 0) \n\t\t\t    t = (t + q); \n\t\t    } \n\t    }\n    //returning false if pattern is not found.\n\treturn false;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\n# d is the number of characters in the input alphabet \nd = 256\n  \n#Function to check if the pattern is present in string or not.\ndef Rabin_Karp(pat, txt, q): \n    M = len(pat) \n    N = len(txt) \n    i = 0\n    j = 0\n    p = 0  \n    t = 0   \n    h = 1\n  \n    #the value of h would be \"pow(d, M-1)%q\".\n    for i in range(M-1): \n        h = (h * d)% q \n  \n    #calculating the hash value of pattern and first window of text. \n    for i in range(M): \n        p = (d * p + ord(pat[i]))% q \n        t = (d * t + ord(txt[i]))% q \n  \n    #sliding the pattern over text one by one.\n    for i in range(N-M + 1):\n        \n        #checking the hash values of current window of text and pattern. \n\t\t#If the hash values match then only we check for characters on by one.\n        if p == t: \n            \n            #checking for characters one by one.\n            for j in range(M): \n                if txt[i + j] != pat[j]: \n                    break\n  \n            j+= 1\n            #if pattern is found, we return true.\n            if j == M: \n                return True\n  \n        #calculating hash value for next window of text.\n\t\t#removing leading digit and adding trailing digit.\n        if i < N-M: \n            t = (d*(t-ord(txt[i])*h) + ord(txt[i + M]))% q \n            #we might get negative value of t so converting it to positive.\n            if t < 0: \n                t = t + q\n                \n    #returning false if pattern is not found.\n    return False\n    \n    ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// d is the number of characters in the input alphabet \nlet d = 256;\n\n/**\n * @param {string} pat\n * @param {string} txt\n * @paramm {number} q (prime number)\n * @returns {boolean}\n*/\nclass Solution \n{\n    //Function to check if the pattern is present in string or not.\n    search(pat, txt, q) \n    {\n        let M = pat.length; \n        let N = txt.length; \n        let p = 0; \n        let t = 0; \n        let h = 1; \n\n        //the value of h would be \"pow(d, M-1)%q\".\n        for (let i = 0; i < M-1; i++) \n        { \n            h = (h*d)%q; \n        }\n\n        //calculating the hash value of pattern and first window of text. \n        for (let i = 0; i < M; i++) \n        { \n            p = (d*p + pat.charCodeAt(i))%q; \n            t = (d*t + txt.charCodeAt(i))%q; \n        } \n\n        //sliding the pattern over text one by one. \n        for (let i = 0; i <= N - M; i++) \n        { \n            //checking the hash values of current window of text and pattern. \n            //If the hash values match then only we check for characters on by one.\n            if ( p === t ) \n            { \n                //checking for characters one by one.\n                let j;\n                for (j = 0; j < M; j++) \n                { \n                    if (txt.charAt(i+j) !== pat.charAt(j)) \n                        break; \n                } \n                //if pattern is found, we return true.\n                if (j === M) \n                    return true;\n            } \n\n            //calculating hash value for next window of text.\n            //removing leading digit and adding trailing digit.\n            if ( i < N-M ) \n            { \n                t = (d*(t - txt.charCodeAt(i)*h) + txt.charCodeAt(i+M))%q;\n                //we might get negative value of t so converting it to positive. \n                if (t < 0) \n                t = (t + q); \n            } \n        }\n        //returning false if pattern is not found.\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}