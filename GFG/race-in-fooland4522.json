{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703166,
            "title": "Race in Fooland",
            "titleSlug": "race-in-fooland4522",
            "content": "<p><span >There is a multi-lane running track with lanes numbered from 1 to <strong>tracks</strong>&nbsp;(Tracks). There are some horizontal barriers placed across the lanes. Each barrier spans from lane <code>start_i</code> to lane <code>end_i</code> (both inclusive). The <strong>barriers</strong> may overlap, and athletes cannot run on lanes covered by a barrier.</span></p>\n<p><span >Determine how many lanes are free from barriers and can be used by athletes.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>tracks = 20, barriers = [(1, 3), (5, 8), (8, 13), (14, 15), (9, 12)]<br /></span><span ><strong>Output: </strong>6\n<strong>Explanation:<br /></strong>The barriers cover the following lanes:\n1 to 3, 5 to 8, 8 to 13, 14 to 15, 9 to 12\nSo, the lanes blocked by barriers are: {1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}.\nThe lanes that are free and not covered by barriers are: {4, 16, 17, 18, 19, 20}.\nTherefore, 6 lanes are available for athletes to run.<strong><br /></strong></span></pre>\n<pre><span ><strong>Input:</strong> tracks = 10, barriers = [(1, 10), (3, 6)]<br /></span><span ><strong>Output:</strong> 0</span><br /><span ><strong>Explanation:</strong></span><br /><span >The barriers cover the following lanes:</span><br /><span >1 to 10 (first barrier), 3 to 6 (second barrier, but already covered by the first one)</span><br /><span >All lanes from 1 to 10 are blocked, so no lanes are available for athletes to run.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(max(</span><span >tracks, </span><span >barriers.size())</span><span >)<br /></span><span ><strong>Expected Auxiliary Space:</strong> O(tracks)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>6</sup><br />1 &le;&nbsp;barriers.size()&nbsp;&le; 10<sup>6<br /></sup>1 &le;&nbsp;<span style=\"font-family: monospace; background-color: #b4d7ff;\">start_i</span>&nbsp;&le;&nbsp;<span style=\"font-family: monospace; background-color: #b4d7ff;\">end_i</span> &le; n<br />The barriers may overlap.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "There is a multi-lane running track with lanes numbered from 1 to `tracks`. There are some horizontal barriers placed across the lanes. Each barrier spans from lane `start_i` to lane `end_i` (both inclusive). The barriers may overlap, and athletes cannot run on lanes covered by a barrier. Determine how many lanes are free from barriers and can be used by athletes.",
                "constraints": [
                    "1 <= n <= 10^6",
                    "1 <= barriers.size() <= 10^6",
                    "1 <= start_i <= end_i <= n"
                ],
                "testcases": [
                    {
                        "input": "tracks = 20, barriers = [(1, 3), (5, 8), (8, 13), (14, 15), (9, 12)]",
                        "output": "6",
                        "explanation": "The barriers block lanes: 1 to 3, 5 to 8, 8 to 13, 14 to 15, and 9 to 12. This results in blocked lanes: {1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}.  Therefore, the available lanes are: {4, 16, 17, 18, 19, 20}, totaling 6 free lanes."
                    },
                    {
                        "input": "tracks = 10, barriers = [(1, 10), (3, 6)]",
                        "output": "0",
                        "explanation": "The barriers block lanes 1 to 10 and 3 to 6. Since 3 to 6 is already covered by 1 to 10, all lanes from 1 to 10 are blocked. Consequently, there are no available lanes for athletes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >To solve this, sort barriers by starting lanes, merge overlapping intervals, and subtract the covered lane count from total lanes to find the number of free lanes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int emptyLanes(int tracks, vector<pair<int, int>> barriers) {\n        int ans = 0, prevS, prevF;\n        int m = barriers.size();\n\n        // Sort the barriers based on the starting lane (first element of the pair)\n        sort(barriers.begin(), barriers.end());\n\n        prevF = barriers[0].first;\n        prevS = barriers[0].second;\n        ans = barriers[0].second - barriers[0].first + 1;\n\n        for (int i = 1; i < m; i++) {\n            if (barriers[i].first > prevS) {\n                // Non-overlapping intervals\n                ans += barriers[i].second - barriers[i].first + 1;\n                prevF = barriers[i].first;\n                prevS = barriers[i].second;\n            } else if (barriers[i].first <= prevS && barriers[i].second > prevS) {\n                // Overlapping intervals, extend the covered range\n                ans += barriers[i].second - prevS;\n                prevS = barriers[i].second;\n            }\n            // If one interval is a subset of another, do nothing\n        }\n\n        return tracks - ans; // Total empty lanes\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int emptyLanes(int tracks, List<int[]> barriers) {\n        int ans = 0, prevStart, prevEnd;\n        int m = barriers.size();\n\n        // Sort the barriers based on the starting lane (first element of the pair)\n        barriers.sort(Comparator.comparingInt(a -> a[0]));\n\n        prevStart = barriers.get(0)[0];\n        prevEnd = barriers.get(0)[1];\n        ans = prevEnd - prevStart + 1;\n\n        for (int i = 1; i < m; i++) {\n            if (barriers.get(i)[0] > prevEnd) {\n                // Non-overlapping intervals\n                ans += barriers.get(i)[1] - barriers.get(i)[0] + 1;\n                prevStart = barriers.get(i)[0];\n                prevEnd = barriers.get(i)[1];\n            } else if (barriers.get(i)[0] <= prevEnd && barriers.get(i)[1] > prevEnd) {\n                // Overlapping intervals, extend the covered range\n                ans += barriers.get(i)[1] - prevEnd;\n                prevEnd = barriers.get(i)[1];\n            }\n            // If one interval is a subset of another, do nothing\n        }\n\n        return tracks - ans; // Total empty lanes\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def empty_lanes(self, tracks, barriers):\n        barriers.sort(key=lambda x: x[0])\n        prevF, prevS = barriers[0]\n        ans = prevS - prevF + 1\n\n        for i in range(1, len(barriers)):\n            if barriers[i][0] > prevS:\n                # Non-overlapping intervals\n                ans += barriers[i][1] - barriers[i][0] + 1\n                prevF, prevS = barriers[i]\n            elif barriers[i][0] <= prevS and barriers[i][1] > prevS:\n                # Overlapping intervals\n                ans += barriers[i][1] - prevS\n                prevS = barriers[i][1]\n\n        return tracks - ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    emptyLanes(tracks, barriers) {\n        barriers.sort((a, b) => a[0] - b[0]);\n        let [prevF, prevS] = barriers[0];\n        let ans = prevS - prevF + 1;\n\n        for (let i = 1; i < barriers.length; i++) {\n            if (barriers[i][0] > prevS) {\n                // Non-overlapping intervals\n                ans += barriers[i][1] - barriers[i][0] + 1;\n                [prevF, prevS] = barriers[i];\n            } else if (barriers[i][0] <= prevS && barriers[i][1] > prevS) {\n                // Overlapping intervals\n                ans += barriers[i][1] - prevS;\n                prevS = barriers[i][1];\n            }\n        }\n\n        return tracks - ans; // Total empty lanes\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}