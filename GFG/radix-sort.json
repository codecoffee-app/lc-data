{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702058,
            "title": "Radix Sort",
            "titleSlug": "radix-sort",
            "content": "<p><span style=\"font-size: 18px;\">Given an array arr[] of positive integer size N, use Radix Sort Algorithm to sort arr[] in ascending order.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong>\nN = 4\narr[] = {1, 9, 345, 2}</span>\n\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 1 2 9 345</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong>\nN = 10\narr[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}</span>\n\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 1 2 3 4 5 6 7 8 9 10</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task: &nbsp;</strong><br />You dont need to read input or print anything. Complete the function <strong>radixSort() </strong>which takes arr[] and N as input parameters and sorts arr[] in-place.&nbsp;</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N * K) where K is the number of bits required to store each key.<br /><strong>Expected Auxiliary Space:</strong> O(N + K)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10^3</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Do following for each digit i where i varies from least significant digit to the most significant digit.<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sort input array using counting sort (or any stable sort) according to the i&rsquo;th digit.</p>\n\n<p><strong>Example:</strong><br />\nOriginal, unsorted list:</p>\n\n<p>170, 45, 75, 90, 802, 24, 2, 66</p>\n\n<p>Sorting by least significant digit (1s place) gives: [*Notice that we keep 802 before 2, because 802 occurred before 2 in the original list, and similarly for pairs 170 &amp; 90 and 45 &amp; 75.]</p>\n\n<p>17<u>0</u>, 9<u>0</u>, 80<u>2</u>,&nbsp;<u>2</u>, 2<u>4</u>, 4<u>5</u>, 7<u>5</u>, 6<u>6</u></p>\n\n<p>Sorting by next digit (10s place) gives: [*Notice that 802 again comes before 2 as 802 comes before 2 in the previous list.]</p>\n\n<p>8<u>0</u>2, 2,&nbsp;<u>2</u>4,&nbsp;<u>4</u>5,&nbsp;<u>6</u>6, 1<u>7</u>0,&nbsp;<u>7</u>5,&nbsp;<u>9</u>0</p>\n\n<p>Sorting by most significant digit (100s place) gives:</p>\n\n<p>2, 24, 45, 66, 75, 90,&nbsp;<u>1</u>70,&nbsp;<u>8</u>02</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\n// A utility function to get maximum value in arr[] \r\nint getMax(int arr[], int n) \r\n{ \r\n    int mx = arr[0]; \r\n    for (int i = 1; i < n; i++) \r\n        if (arr[i] > mx) \r\n            mx = arr[i]; \r\n    return mx; \r\n} \r\n  \r\n// A function to do counting sort of arr[] according to \r\n// the digit represented by exp. \r\nvoid countSort(int arr[], int n, int exp) \r\n{ \r\n    int output[n]; // output array \r\n    int i, count[10] = {0}; \r\n  \r\n    // Store count of occurrences in count[] \r\n    for (i = 0; i < n; i++) \r\n        count[ (arr[i]/exp)%10 ]++; \r\n  \r\n    // Change count[i] so that count[i] now contains actual \r\n    //  position of this digit in output[] \r\n    for (i = 1; i < 10; i++) \r\n        count[i] += count[i - 1]; \r\n  \r\n    // Build the output array \r\n    for (i = n - 1; i >= 0; i--) \r\n    { \r\n        output[count[ (arr[i]/exp)%10 ] - 1] = arr[i]; \r\n        count[ (arr[i]/exp)%10 ]--; \r\n    } \r\n  \r\n    // Copy the output array to arr[], so that arr[] now \r\n    // contains sorted numbers according to current digit \r\n    for (i = 0; i < n; i++) \r\n        arr[i] = output[i]; \r\n} \r\n  \r\n// The main function to that sorts arr[] of size n using  \r\n// Radix Sort \r\nvoid radixSort(int arr[], int n) \r\n{ \r\n    // Find the maximum number to know number of digits \r\n    int m = getMax(arr, n); \r\n  \r\n    // Do counting sort for every digit. Note that instead \r\n    // of passing digit number, exp is passed. exp is 10^i \r\n    // where i is current digit number \r\n    for (int exp = 1; m/exp > 0; exp *= 10) \r\n        countSort(arr, n, exp); \r\n} \r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\nclass Solution\r\n{\r\n    // A utility function to get maximum value in arr[] \r\n    static int getMax(int arr[], int n) \r\n    { \r\n        int mx = arr[0]; \r\n        for (int i = 1; i < n; i++) \r\n            if (arr[i] > mx) \r\n                mx = arr[i]; \r\n        return mx; \r\n    } \r\n  \r\n    // A function to do counting sort of arr[] according to \r\n    // the digit represented by exp. \r\n    static void countSort(int arr[], int n, int exp) \r\n    { \r\n        int output[] = new int[n]; // output array \r\n        int i = 0, count[] = new int[10];\r\n        Arrays.fill(count, 0);\r\n      \r\n        // Store count of occurrences in count[] \r\n        for (i = 0; i < n; i++) \r\n            count[ (arr[i]/exp)%10 ]++; \r\n      \r\n        // Change count[i] so that count[i] now contains actual \r\n        //  position of this digit in output[] \r\n        for (i = 1; i < 10; i++) \r\n            count[i] += count[i - 1]; \r\n      \r\n        // Build the output array \r\n        for (i = n - 1; i >= 0; i--) \r\n        { \r\n            output[count[ (arr[i]/exp)%10 ] - 1] = arr[i]; \r\n            count[ (arr[i]/exp)%10 ]--; \r\n        } \r\n      \r\n        // Copy the output array to arr[], so that arr[] now \r\n        // contains sorted numbers according to current digit \r\n        for (i = 0; i < n; i++) \r\n            arr[i] = output[i]; \r\n    } \r\n  \r\n    // The main function to that sorts arr[] of size n using  \r\n    // Radix Sort \r\n    static void radixSort(int arr[], int n) \r\n    { \r\n        // Find the maximum number to know number of digits \r\n        int m = getMax(arr, n); \r\n      \r\n        // Do counting sort for every digit. Note that instead \r\n        // of passing digit number, exp is passed. exp is 10^i \r\n        // where i is current digit number \r\n        for (int exp = 1; m/exp > 0; exp *= 10) \r\n            countSort(arr, n, exp); \r\n    } \r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\ndef getMax(arr, n):\n    mx=arr[0]                           #initialize mx with first element of arr\n    for i in range(1, n):\n        if(arr[i]>mx):                  #if current element greater than mx, update mx\n            mx=arr[i]\n    return mx                           #return the maximum value in arr\n\ndef countSort(arr, n, exp):\n    output = [0]*n                      #create an output array of same size as arr\n    count = [0]*10                      #create a count array of size 10, to count the occurrence of each digit\n    for i in range(n):\n        count[(arr[i]//exp)%10]+=1      #increment the count of digit at specific place value\n\n    for i in range(1, 10):\n        count[i]+=count[i-1]            #update the count array to keep track of the position of each element in the output array\n\n    i=n-1\n    while(i>=0):\n        output[count[ (arr[i]//exp)%10 ]-1] = arr[i];     #place the elements in their correct position in the output array\n        count[ (arr[i]//exp)%10 ]-=1;                     #decrement the count of the digit\n        i=i-1\n\n    for i in range(n):\n        arr[i] = output[i]              #copy the elements from output array to the original array\n\n\ndef radixSort(arr, n):\n    m = getMax(arr, n)                  #find the maximum element in the array\n    exp=1\n    while(m//exp>0):\n        countSort(arr, n, exp)          #sort the array based on the digit at specific place value\n        exp=exp*10                      #increment the place value (from right to left)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number[]} arr\r\n * @param {number} n\r\n * @returns {number[]}\r\n*/\r\n\r\nclass Solution {\r\n    getMax(arr, n) {\r\n        let mx = arr[0];\r\n        for (let i = 1; i < n; i++) {\r\n            if (arr[i] > mx) {\r\n                mx = arr[i];\r\n            }\r\n        }\r\n        return mx;\r\n    }\r\n    \r\n    countSort(arr, n, exp) {\r\n        let output = Array(n).fill(0);\r\n        let count = Array(10).fill(0);\r\n        for (let i = 0; i < n; i++) {\r\n            count[Math.floor(arr[i] / exp) % 10] += 1;\r\n        }\r\n        for (let i = 1; i < 10; i++) {\r\n            count[i] += count[i - 1];\r\n        }\r\n        let i = n - 1;\r\n        while (i >= 0) {\r\n            output[count[Math.floor(arr[i] / exp) % 10] - 1] = arr[i];\r\n            count[Math.floor(arr[i] / exp) % 10] -= 1;\r\n            i -= 1;\r\n        }\r\n        for (let i = 0; i < n; i++) {\r\n            arr[i] = output[i];\r\n        }\r\n    }\r\n    \r\n    radixSort(arr, n) {\r\n        let m = this.getMax(arr, n);\r\n        let exp = 1;\r\n        while (Math.floor(m / exp) > 0) {\r\n            this.countSort(arr, n, exp);\r\n            exp *= 10;\r\n        }\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}