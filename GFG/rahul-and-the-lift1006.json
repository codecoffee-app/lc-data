{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705744,
            "title": "Rahul and The Lift",
            "titleSlug": "rahul-and-the-lift1006",
            "content": "<p><span style=\"font-size: 18px;\">Rahul entered lift on the ground floor of his building which consists of Z floors including the ground floor.<br />The lift already had N people in it. It is known that they will leave the lift in groups. Let us say that<br />there are M groups. Rahul is curious to find the number of ways in which these M groups can leave the lift.<br />It is assumed that each group is unique and no one leaves the lift on the ground floor.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>z = 3, n = 10, m = 2\n<strong>Output: </strong>6\n<strong>Explanation: </strong>Let the groups are A and B.\n1. Both A and B gets down on first floor A \ngoing first followed by B\n2. Both A and B gets down on first floor B \ngoing first followed by A\n3. Both A and B gets down on second floor A \ngoing first followed by B\n4. Both A and B gets down on second floor B \ngoing first followed by A\n5. A gets down of first floor and B gets \ndown on second.\n6. B gets down of first floor and A gets \ndown on second.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anyhting. Your task it to complete the function&nbsp;<strong>noOfWays()&nbsp;</strong>which takes z, n and m as input parameter and returns total number of ways <strong>modulo 10<sup>9</sup>+7.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(z*log(z))<br /><strong>Expected Space Compelxity:&nbsp;</strong>O(z)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= z &lt;= 10<sup>5</sup><br />1 &lt;= m &lt;= n &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use maths and combinatorics.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Header file defining the alias ll for long long int and setting the value of N as 100100\nusing ll = long long int;\n#define N 100100\n//Array to store factorial values and inverse factorial values\nll fact[N], ifact[N];\n//Variable to store the value of mod\nll mod = 1e9 + 7;\n\n//Class Solution\nclass Solution {\npublic:\n\t//Function to calculate power of a number\n\tll power(ll b,ll e)\n\t{\n\t\tll ret=1;\n\t\t//Loop to calculate power\n\t\twhile(e)\n\t\t{\n\t\t  if(e%2)\n\t\t    ret=(ret*b)%mod;\n\t\t  b=(b*b)%mod;\n\t\t  e/=2;\n\t\t}\n\t\treturn ret;\n\t}\n\n\t//Function to precompute factorial and inverse factorial values\n\tvoid pre()\n\t{\n\t\t//Initializing arrays to 0\n\t\tmemset(fact, 0, sizeof(fact));\n\t\tmemset(ifact, 0, sizeof(ifact));\n\t\t//Setting the first factorial value as 1\n\t\tfact[0]=1;\n\t\t//Loop to calculate factorial values\n\t\tfor (int i = 1; i < 100001; ++i)\n\t\t  fact[i]=(i*fact[i-1])%mod;\n\t\t//Calculating inverse factorial value for the maximum index (100000)\n\t\tifact[100000]=power(fact[100000],mod-2);\n\t\t//Loop to calculate inverse factorial values in reverse order\n\t\tfor (int i = 99999; i >= 0; i--)\n\t\t  ifact[i]=((i+1)*ifact[i+1])%mod;\n\t}\n\n\t//Function to calculate the number of ways to place 'z' zeros in 'n' slots with 'm' available slots\n\tint noOfWays(int z, int n, int m){\n\t\t//Calling the pre() function to precompute the factorial and inverse factorial values\n\t\tpre();\n\t\t//Calculating the answer using the precomputed values\n\t\tll ans=(fact[z+m-2]*ifact[z-2])%mod;\n\t\t//Casting the answer to int type and returning it\n\t\treturn (int)ans;\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}