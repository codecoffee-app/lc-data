{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703030,
            "title": "Rahul lucky-unlucky",
            "titleSlug": "rahul-lucky-unlucky5101",
            "content": "<p><span >You are given a string <code>s</code> consisting of characters 'H' (heads) and 'T' (tails). The goal is to perform the minimum number of operations to flip all the coins to heads.</span></p>\n<p><span >An operation consists of flipping both the coin at the index <code>i</code> and the coin at the index <code>i+1</code> if the coin at the index <code>i</code> is a tail ('T'). Additionally, you can flip the coin at the last index <code>N</code> (using 1-based indexing) if it's a tail. This operation can be performed for any index <code>i</code> such that <code>1 &lt;= i &lt;= N</code>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \"HTHTH\"\n<strong>Output: </strong>[2, 3]\n<strong>Explanation:</strong> Coins at index 2 and 3 need to be flipped to make all coins heads-up.</span></pre>\n<pre><span ><strong>Input: </strong>s = \"HHH\"\n<strong>Output:</strong> []\n<strong>Explanation: </strong>No index to be flipped.</span></pre>\n<pre><span ><strong>Input: </strong>s = \"HHT\"\n<strong>Output:</strong> [3]\n<strong>Explanation: </strong>Flip the coin at index 3.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span ><strong>Constraints:<br /></strong>1 &le; s.size() &le; 10<sup>6</sup><br />s[i] &isin; {'H', 'T'}</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of characters 'H' (heads) and 'T' (tails), determine the minimum number of operations required to transform all coins to heads. An operation involves flipping the coin at index `i` and the coin at index `i+1` if the coin at index `i` is a tail ('T'). Additionally, you can flip the coin at the last index `N` if it's a tail. This operation can be performed for any index `i` such that `1 <= i <= N`.",
                "constraints": [
                    "1 <= s.size() <= 10^6",
                    "s[i] \u2208 {'H', 'T'}"
                ],
                "testcases": [
                    {
                        "input": "HTHTH",
                        "output": "[2, 3]",
                        "explanation": "Flipping the coins at indices 2 and 3 will result in all coins being heads up. For example, flipping index 2 will change 'HTHTH' to 'HHTTH', and flipping index 3 will change 'HHTTH' to 'HHHHH'."
                    },
                    {
                        "input": "HHH",
                        "output": "[]",
                        "explanation": "All coins are already heads, so no flips are required."
                    },
                    {
                        "input": "HHT",
                        "output": "[3]",
                        "explanation": "Flipping the coin at index 3 (the last index) changes 'HHT' to 'HHH'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >To solve this problem, scan through the string and flip consecutive pairs of 'T's to 'H's. Track the number of flips needed. If the last coin is 'T', it requires an additional flip.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the index positions where 'T' is encountered and characters are\n    // flipped\n    vector<int> flippedIndexes(string &s) {\n        int n = s.size();   // Get the size of the input string\n        string temp = s;    // Create a temporary copy of the string for modification\n        vector<int> result; // Vector to store the result of flipped indexes\n\n        // Loop through the string\n        for (int i = 0; i < n; i++) {\n            if (temp[i] == 'T') {        // If the character is 'T'\n                result.push_back(i + 1); // Store the 1-based index\n                if (i + 1 < n) {         // Ensure the next character is within bounds\n                    if (temp[i + 1] == 'T') {\n                        temp[i + 1] = 'H'; // Flip 'T' to 'H'\n                    } else {\n                        temp[i + 1] = 'T'; // Flip 'H' to 'T'\n                    }\n                }\n            }\n        }\n        return result; // Return the vector of flipped indexes\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to find the index positions where 'T' is encountered and characters are\n    // flipped\n    public List<Integer> flippedIndexes(String s) {\n        int n = s.length(); // Get the size of the input string\n        StringBuilder temp =\n            new StringBuilder(s); // Create a modifiable copy of the string\n        List<Integer> result =\n            new ArrayList<>(); // List to store the result of flipped indexes\n\n        // Loop through the string\n        for (int i = 0; i < n; i++) {\n            if (temp.charAt(i) == 'T') { // If the character is 'T'\n                result.add(i + 1);       // Store the 1-based index\n                if (i + 1 < n) {         // Ensure the next character is within bounds\n                    if (temp.charAt(i + 1) == 'T') {\n                        temp.setCharAt(i + 1, 'H'); // Flip 'T' to 'H'\n                    } else {\n                        temp.setCharAt(i + 1, 'T'); // Flip 'H' to 'T'\n                    }\n                }\n            }\n        }\n        return result; // Return the list of flipped indexes\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to find the index positions where 'T' is encountered and characters are flipped\n    def flipped_indexes(self, s: str) -> list:\n        n = len(s)  # Get the size of the input string\n        temp = list(s)  # Create a list from the string for easy modification\n        result = []  # List to store the result of flipped indexes\n\n        # Loop through the string\n        for i in range(n):\n            if temp[i] == 'T':  # If the character is 'T'\n                result.append(i + 1)  # Store the 1-based index\n                if i + 1 < n:  # Ensure the next character is within bounds\n                    if temp[i + 1] == 'T':\n                        temp[i + 1] = 'H'  # Flip 'T' to 'H'\n                    else:\n                        temp[i + 1] = 'T'  # Flip 'H' to 'T'\n\n        return result  # Return the list of flipped indexes\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    flipped_indexes(s) {\n        const n = s.length;\n        const temp = s.split('');\n        const result = [];\n\n        for (let i = 0; i < n; i++) {\n            if (temp[i] === 'T') {\n                result.push(i + 1);\n                if (i + 1 < n) {\n                    temp[i + 1] = temp[i + 1] === 'T' ? 'H' : 'T';\n                }\n            }\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}