{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704681,
            "title": "Raju and coins",
            "titleSlug": "raju-and-coins1932",
            "content": "<p><span style=\"font-size:18px\">Given an array of integers <strong>a</strong> of length <strong>n</strong> and a value <strong>k</strong>. You have to find out the maximum possible numbers within <strong>10<sup>9</sup></strong>whose sum does not exceed k </span> <span style=\"font-size:18px\">but are not present in the array.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 4, \r\n&nbsp;\\tk = 14,\r\n&nbsp;\\ta = {4, 6, 12, 8}\r\n<strong>Output:</strong> 4\r\n<strong>Explaination: </strong>The integers 1, 2, 3 and 5.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 4,\r\n&nbsp;\\tk = 25, \r\n\\t a = {5, 6, 7, 8}\r\n<strong>Output:</strong> 5\r\n<strong>Explaination: </strong>The integers are 1, 2, 3, 4 and 9.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>maxNumbers()</strong> which takes n, k, and array as input parameters and returns the maximum number of integers that can be selected.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(nlogn)<br />\r\n<strong>Expected Auxiliary Space: </strong>O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n &le; 10<sup>5</sup><br />\r\n1 &le; a[i], k &le; 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `a` of length `n` and a value `k`, find the maximum number of positive integers (within the range of 1 to 10<sup>9</sup>) whose sum does not exceed `k` and are not present in the array `a`.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= a[i], k <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 4, k = 14, a = {4, 6, 12, 8}",
                        "output": "4",
                        "explanation": "The integers 1, 2, 3, and 5 are not present in the array and their sum (1 + 2 + 3 + 5 = 11) is less than or equal to k = 14. Adding the next smallest available integer (7) would exceed k."
                    },
                    {
                        "input": "n = 4, k = 25, a = {5, 6, 7, 8}",
                        "output": "5",
                        "explanation": "The integers 1, 2, 3, 4, and 9 are not present in the array and their sum (1 + 2 + 3 + 4 + 9 = 19) is less than or equal to k = 25. Adding the next smallest available integer (10) would still be within the bound. 1 + 2 + 3 + 4 + 9 + 10 = 29 > 25. But since we are looking for the maximum number of integers, the anwer is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Approach greedily to check if a value is present in the array or not. Check from the lowest possible value.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to find maximum number of elements we can take\n    // such that no element is consecutive and the sum of these\n    // elements is less than or equal to k\n    \n    int maxNumbers(int n, int k, int a[]){\n        // sorting the array in ascending order\n        sort(a, a+n);\n        \n        int i = 0, j = 1, count = 0;\n        \n        // looping until k becomes 0\n        while(k > 0){\n            // updating j until it becomes the next number in the array\n            while(i < n && j == a[i]){\n                j++;\n                i++;\n            }\n            \n            // if j is less than or equal to k, increment count and reduce k\n            if(j <= k){\n                k -= j;\n                j++;\n                count++;\n            }\n            // if j is greater than k, break the loop\n            else\n                break;\n        }\n        \n        // return the maximum number of elements\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public int maxNumbers(int n, int k, int[] a)\n    {\n        Array.Sort(a);\n        \n        int i = 0, j = 1, count = 0;\n        \n        while(k > 0){\n            while(i < n && j == a[i]){\n                j++;\n                i++;\n            }\n            \n            if(j <= k){\n                k -= j;\n                j++;\n                count++;\n            }\n            else\n                break;\n        }\n        \n        return count;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}