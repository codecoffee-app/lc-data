{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701713,
            "title": "Range LCM Queries",
            "titleSlug": "range-lcm-queries3348",
            "content": "<p><span style=\"font-size:18px\">You are given an array&nbsp;of size <strong>N&nbsp;</strong>and<strong>&nbsp;Q</strong>&nbsp;queries. Solve the queries to find LCM for the given range alongside the queries to update the array values.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong> 0-based indexing is used.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:\r\n</span></strong><span style=\"font-size:18px\">N = 6, Q = 3\r\narr[] = {2,3,4,6,8,16}\r\nQueries: getLCM(0,2)\r\n&nbsp;\\t  updateValue(3,8)\r\n&nbsp;\\t  getLCM(2,5)\r\n<strong>Output:\r\n</strong>12\r\n16<strong>\r\nExplanation: </strong>There are 3 queries:&nbsp;\r\nQuery 1 :&nbsp; lcm(2, 3, 4) = 12\r\nQuery 2&nbsp;:&nbsp; 6&nbsp;changes to 8\r\nQuery 3&nbsp;:&nbsp; lcm(4, 8, 8, 16) = 16</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nComplete <strong>updateValue()</strong> and <strong>getLCM()</strong> function. The <strong>segment tree array has been prebuilt for you</strong>. You only need to use it to complete the queries.<br />\r\n<strong>getLCM()&nbsp;</strong>returns the LCM of elements in range [L,R].<br />\r\n<strong>updateValue()&nbsp;</strong>processes the point update query.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(Q*Log(N)*Log(N) ).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= <strong>N</strong> &lt;= 10<sup>4</sup><br />\r\n1 &lt;= <strong>Q</strong> &lt;= 10<sup>5</sup><br />\r\n0 &lt;= <strong>L, R, index</strong> &lt;= N-1<br />\r\n1 &lt;= <strong>arr[i], value&nbsp;</strong>&lt;= 10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array of size **N** and **Q** queries. Implement the `updateValue()` and `getLCM()` functions to process these queries. The `getLCM()` function should return the Least Common Multiple (LCM) of elements within a specified range [L, R] (inclusive). The `updateValue()` function should update the value of an element at a given index in the array. A segment tree array has been pre-built for you, and you should utilize it to efficiently answer the queries.\n\n**Note:** 0-based indexing is used.",
                "constraints": [
                    "1 <= N <= 10^4",
                    "1 <= Q <= 10^5",
                    "0 <= L, R, index <= N-1",
                    "1 <= arr[i], value <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "N = 6, Q = 3\narr[] = {2,3,4,6,8,16}\nQueries: getLCM(0,2)\n\t  updateValue(3,8)\n\t  getLCM(2,5)",
                        "output": "12\n16",
                        "explanation": "Query 1: Calculate the LCM of the subarray from index 0 to 2 (inclusive), which is LCM(2, 3, 4) = 12.\nQuery 2: Update the element at index 3 to the value 8 (arr[3] becomes 8).\nQuery 3: Calculate the LCM of the subarray from index 2 to 5 (inclusive), which is LCM(4, 8, 8, 16) = 16."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Segment-Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\r\n\r\n\r\n//recursive function to update nodes which have given index in their range.\r\nvoid updateValueUtil(ll *st, int ss, int se, int index, int new_val, int si)\r\n{\r\n    //base cases\r\n    if (index < ss || index > se) return;\r\n    if (se == ss) {\r\n        st[si] = new_val;\r\n        return;\r\n    }\r\n    \r\n    //if the input index is in range of this node then we update\r\n    //the value of the node and its children.\r\n    int mid = getMid(ss, se);\r\n    if (index <= mid)\r\n        updateValueUtil(st, ss, mid, index, new_val, 2 * si + 1);\r\n    else\r\n        updateValueUtil(st, mid + 1, se, index, new_val, 2 * si + 2);\r\n\r\n    st[si] = LCM(st[si * 2 + 1], st[si * 2 + 2]);\r\n    return;\r\n}\r\n\r\n//Function to update a value in input array and segment tree.\r\n//It uses updateValueUtil() to update the value in segment tree.\r\nvoid updateValue(int *arr, ll *st, int n, int index, int new_val) \r\n{\r\n    //base case for invalid input.\r\n    if (index < 0 || index > n - 1) {\r\n        \r\n        return;\r\n    }\r\n    arr[index] = new_val;\r\n    \r\n    //updating the value of nodes in segment tree.\r\n    updateValueUtil(st, 0, n - 1, index, new_val, 0);\r\n}\r\n\r\n//recursive function to get LCM of given range of array indexes.\r\nll getLCMUtil(ll *st, int ss, int se, int qs, int qe, int si)\r\n{\r\n    //if segment of this node is a part of given range, we return st[si].\r\n    if (qs <= ss && qe >= se) \r\n    return st[si];\r\n    \r\n    //if segment of this node is outside the given range, we return 1.\r\n    if (se < qs || ss > qe)\r\n    return 1;\r\n    \r\n    //if a part of this segment overlaps with the given range, we call\r\n    //the function recursively for the children nodes.\r\n    int mid = getMid(ss, se);\r\n    return LCM(getLCMUtil(st, ss, mid, qs, qe, 2 * si + 1),\r\n               getLCMUtil(st, mid + 1, se, qs, qe, 2 * si + 2));\r\n}\r\n\r\n//Function to find LCM of given range.\r\nll getLCM(ll *st, int *arr, int n, int qs, int qe) \r\n{\r\n    //base case for invalid input.\r\n    // if (qs < 0 || qe > n - 1 || qs > qe) {\r\n    //     return -1;\r\n    // }\r\n\r\n    return getLCMUtil(st, 0, n - 1, qs, qe, 0);\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//recursive function to update nodes which have given index in their range.\r\npublic static void updateValueUtil(long st[],int ss,int se,int index,long new_val,int si)\r\n{\r\n    //base cases\r\n    if (index < ss || index > se)\r\n    return;\r\n    if (se == ss) {\r\n         st[si] = new_val;\r\n         return;\r\n    }\r\n    \r\n    //if the input index is in range of this node then we update\r\n    //the value of the node and its children.\r\n    int mid = getMid(ss, se);\r\n    if (index <= mid)\r\n        updateValueUtil(st, ss, mid, index, new_val, 2 * si + 1);\r\n    else\r\n        updateValueUtil(st, mid + 1, se, index, new_val, 2 * si + 2);\r\n    \r\n    st[si] = LCM(st[si * 2 + 1], st[si * 2 + 2]);\r\n    return;\r\n}\r\n\r\n//Function to update a value in input array and segment tree.\r\n//It uses updateValueUtil() to update the value in segment tree.\r\npublic static void updateValue(long arr[], long st[], int n, int index, long new_val)\r\n{\r\n    //base case for invalid input.\r\n    if (index < 0 || index > n - 1) {\r\n    \r\n        return;\r\n    }\r\n    arr[index] = new_val;\r\n    \r\n    //updating the value of nodes in segment tree.\r\n    updateValueUtil(st, 0, n - 1, index, new_val, 0);\r\n}\r\n\r\n//recursive function to get LCM of given range of array indexes.\r\npublic static long getLCMUtil(long st[], int ss, int se, int qs, int qe, int si)\r\n{\r\n    //if segment of this node is part of given range then we return st[si].\r\n    if (qs <= ss && qe >= se) \r\n    return st[si];\r\n    \r\n    //if segment of this node is outside the given range, we return 1.\r\n    if (se < qs || ss > qe) \r\n    return 1;\r\n    \r\n    //if a part of this segment overlaps with the given range, we call\r\n    //the function recursively for the children nodes.\r\n    int mid = getMid(ss, se);\r\n    return LCM(getLCMUtil(st, ss, mid, qs, qe, 2 * si + 1),\r\n               getLCMUtil(st, mid + 1, se, qs, qe, 2 * si + 2));\r\n    \r\n}\r\n\r\n//Function to find LCM of given range.\r\npublic static long getLCM(long st[], long arr[], int n, int qs, int qe)\r\n{\r\n    //base case for invalid input.\r\n    // if (qs < 0 || qe > n - 1 || qs > qe) {\r\n    // return -1;\r\n    // }\r\n    \r\n    return getLCMUtil(st, 0, n - 1, qs, qe, 0);\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n\r\n#Function to find LCM of given range.\r\ndef getLCM(arr,n,st,li,rv):\r\n    \r\n    return frg(st,0,n-1,li,rv,0)\r\n \r\n#recursive function to get LCM of given range of array indexes.      \r\ndef frg(st,ss,se,qs,qe,si):\r\n    \r\n    #if segment of this node is outside the given range, we return 1.\r\n    if ss>qe or se<qs:\r\n        return 1\r\n    \r\n    #if segment of this node is part of given range then we return st[si].\r\n    if ss>=qs and se<=qe:\r\n        return st[si]\r\n    \r\n    #if a part of this segment overlaps with the given range, we call\r\n    #the function recursively for the children nodes.    \r\n    mid=ss+(se-ss)//2\r\n    a=frg(st,ss,mid,qs,qe,si*2+1)\r\n    b=frg(st,mid+1,se,qs,qe,si*2+2)\r\n    \r\n    n=lcm(a,b)\r\n    return n\r\n \r\n#Function to update a value in input array and segment tree.   \r\ndef updateValue(arr,n,st,li,rv):\r\n    \r\n    #updating the value of nodes in segment tree.\r\n    uv(st,li,rv,0,n-1,0)\r\n\r\n#recursive function to update nodes which have given index in their range.    \r\ndef uv(st,li,rv,ss,se,si):\r\n    \r\n    #base cases\r\n    if ss>li or se<li:\r\n        return\r\n    if ss==se:\r\n        st[si]=rv\r\n        return\r\n    \r\n    \r\n    #if the input index is in range of this node then we update\r\n    #the value of the node and its children.\r\n    mid=ss+(se-ss)//2\r\n    uv(st,li,rv,ss,mid,si*2+1)\r\n    uv(st,li,rv,mid+1,se,si*2+2)\r\n    \r\n    st[si]=lcm(st[si*2+1],st[si*2+2])\r\n    \r\n    \r\n    ",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * updateValue\r\n * Function use to update the value present in given array arr at index to new_val\r\n * @param {number[]} arr (given array)\r\n * @param {number} n (size of arr)\r\n * @param {number} index (need to update)\r\n * @param {number} new_val (given value to which we need to update index)\r\n * @param {number[]} st (constructed segment-tree)\r\n * \r\n * \r\n * getLCM\r\n * Finding The lcm of given Range\r\n * @param {number[]} st (constructed segment-tree)\r\n * @param {number} n\r\n * @param {number} qs\r\n * @param {number} qe\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution \r\n{\r\n    gcd(a,b)\r\n    {\r\n        if(b==0)\r\n        return a;\r\n        return this.gcd(b,a%b);\r\n    }\r\n    lcm(a,b)\r\n    {\r\n        let g=this.gcd(a,b);\r\n        return (a/g)*b;\r\n    }\r\n    \r\n    //recursive function to update nodes which have given index in their range.\r\n    updateValueUtil(ss, se, index, new_val, si, st)\r\n    {\r\n        //base cases\r\n        if (index < ss || index > se)\r\n        return;\r\n        if (se == ss) {\r\n            st[si] = new_val;\r\n            return;\r\n        }\r\n        \r\n        //if the input index is in range of this node then we update\r\n        //the value of the node and its children. \r\n        let mid = getMid(ss, se);\r\n        if (index <= mid)\r\n            this.updateValueUtil(ss, mid, index, new_val, 2 * si + 1, st);\r\n        else\r\n            this.updateValueUtil(mid + 1, se, index, new_val, 2 * si + 2, st);\r\n    \r\n        st[si] =this.lcm(st[si * 2 + 1], st[si * 2 + 2]);\r\n    }\r\n\r\n    //Function to update a value in input array and segment tree.\r\n    //It uses updateValueUtil() to update the value in segment tree.\r\n\tupdateValue(index, new_val, arr, st, n) \r\n\t{\r\n        //base case for invalid input.\r\n        if (index < 0 || index > n - 1) {\r\n            return;\r\n        }\r\n        arr[index] = new_val;\r\n        \r\n        //updating the value of nodes in segment tree.\r\n        this.updateValueUtil(0, n - 1, index, new_val, 0, st);\r\n    }\r\n    \r\n    //recursive function to get LCM of given range of array indexes.\r\n    getLCMUtil(ss, se, qs, qe, si, st) \r\n    {\r\n        //if segment of this node is outside the given range, we return 1.\r\n        if (ss > qe || se < qs) return 1;\r\n        \r\n        //if segment of this node is part of given range then we return st[si].\r\n        if (qs <= ss && qe >= se) \r\n        return st[si];\r\n        \r\n        //if a part of this segment overlaps with the given range, we call\r\n        //the function recursively for the children nodes.\r\n        let mid = Math.floor(ss + (se - ss) / 2);\r\n        return this.lcm(this.getLCMUtil(ss, mid, qs, qe, si * 2 + 1, st),\r\n                   this.getLCMUtil(mid + 1, se, qs, qe, si * 2 + 2, st));\r\n    }\r\n\r\n    //Function to find LCM of given range.\r\n    getLCM(st, arr, n, qs, qe)\r\n    {\r\n        //base case for invalid input.\r\n        if (qs < 0 || qe > n - 1 || qs > qe) {\r\n            return -1;\r\n        }\r\n        return this.getLCMUtil(0, n - 1, qs, qe, 0, st);\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}