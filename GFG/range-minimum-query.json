{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700229,
            "title": "Range Minimum Query",
            "titleSlug": "range-minimum-query",
            "content": "<p><span style=\"font-size:18px\">Given an array<strong> A[ ] </strong>and its size <strong>N</strong> your task is to complete two functions&nbsp; a <strong>constructST</strong>&nbsp; function which builds the segment tree&nbsp; and a function <strong>RMQ</strong> which finds range minimum query in a range [a,b] of the given array.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Input</strong>:<br />\r\nThe task is to complete two functions <strong>constructST</strong> and <strong>RMQ</strong>.<br />\r\nThe constructST function builds the segment tree and takes two arguments the array <strong>A[ ]</strong> and the size of the array <strong>N</strong>.<br />\r\nIt returns a pointer to the first element of the segment tree array.<br />\r\nThe <strong>RMQ </strong>function takes 4 arguments the first being the segment tree <strong>st </strong>constructed, second being the size <strong>N</strong> and then third and forth arguments are the range of query <strong>a</strong> and<strong> b</strong>. The function RMQ returns the <strong>min</strong> of the elements in the array from index range a and b. There are multiple test cases. For each test case, this method will be called individually.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Output:</strong><br />\r\nThe function <strong>RMQ</strong> should return the min element in the array from range <strong>a</strong> to <strong>b</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input (To be used only for expected output) </strong>\r\n1\r\n4\r\n1 2 3 4\r\n2\r\n0 2 2 3\r\n<strong>Output</strong>\r\n1 3\r\n<strong>Explanation\r\n1.</strong> For query 1 ie 0 2 the element in this range are 1 2 3 \r\n&nbsp;  and the min element is 1. \r\n<strong>2.</strong> For query 2 ie 2 3 the element in this range are 3 4 \r\n&nbsp;  and the min element is 3.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=T&lt;=100<br />\r\n1&lt;=N&lt;=10^3+1</span></p>\r\n\r\n<p><span style=\"font-size:18px\">1&lt;=A[i]&lt;=10^9</span><br />\r\n<span style=\"font-size:18px\">1&lt;=Q(no of queries)&lt;=10000<br />\r\n0&lt;=a&lt;=b</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `A` of size `N`, implement two functions:\n\n1.  `constructST(A, N)`:  This function constructs a Segment Tree from the input array `A`.  It should return a pointer to the root of the Segment Tree.\n2.  `RMQ(st, N, a, b)`: This function performs a Range Minimum Query (RMQ) on the Segment Tree `st` for the range `[a, b]` (inclusive). It should return the minimum value within that range in the original array `A`.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 1001",
                    "1 <= A[i] <= 10^9",
                    "1 <= Q <= 10000",
                    "0 <= a <= b < N"
                ],
                "testcases": [
                    {
                        "input": "4\n1 2 3 4\n2\n0 2 2 3",
                        "output": "1\n3",
                        "explanation": "Query 1 (0, 2): The elements in the range [0, 2] are [1, 2, 3]. The minimum is 1.\nQuery 2 (2, 3): The elements in the range [2, 3] are [3, 4]. The minimum is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Segment-Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to return the minimum value between two integers\nint minVal(int x, int y) { return (x < y)? x: y; }\n\n// Function to get the middle index of a range\nint getMid(int s, int e) {  return s + (e -s)/2;  }\n\n// Recursive function to construct the segment tree\nint constructSTUtil(int arr[], int ss, int se, int *st, int si)\n{\n    // Base case: Only one element in the range\n    if (ss == se)\n    {\n        st[si] = arr[ss];\n        return arr[ss];\n    }\n\n    // Find middle index and recursively construct the left and right subtrees\n    int mid = getMid(ss, se);\n    st[si] =  minVal(constructSTUtil(arr, ss, mid, st, si*2+1),\n                     constructSTUtil(arr, mid+1, se, st, si*2+2));\n    return st[si];\n}\n\n// Function to construct the segment tree\nint *constructST(int arr[],int n)\n{\n    // Calculate the size of the segment tree\n    int x = (int)(ceil(log2(n)));\n    int max_size = 2*(int)pow(2,x)-1;\n    int *st = new int[max_size];\n    \n    // Construct the segment tree recursively\n    constructSTUtil(arr,0,n-1,st,0);\n    \n    // Return the constructed segment tree\n    return st;\n}\n\n// Recursive function to find the minimum value in a given range of the segment tree\nint RMQUtil(int st[], int ss, int se, int qs, int qe, int index)\n{\n    // If the range of the current node is completely inside the queried range, return its value\n    if (qs <= ss && qe >= se)\n        return st[index];\n\n    // If the range of the current node is outside the queried range, return maximum integer value\n    if (se < qs || ss > qe)\n        return INT_MAX;\n\n    // Otherwise, recursively find the minimum value in the left and right subtrees and return the minimum of the two\n    int mid = getMid(ss, se);\n    return minVal(RMQUtil(st, ss, mid, qs, qe, 2*index+1),\n                  RMQUtil(st, mid+1, se, qs, qe, 2*index+2));\n}\n\n// Function to find the minimum value in a given range of the array using the segment tree\nint RMQ(int st[] , int n, int qs, int qe)\n{\n    // If the given range is invalid, print -1 and return -1\n    if (qs < 0 || qe > n-1 || qs > qe)\n    {\n        cout<<-1<<endl;\n        return -1;\n    }\n\n    // Otherwise, call the recursive function to find the minimum value in the range\n    return RMQUtil(st, 0, n-1, qs, qe, 0);\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class GfG\n{\n    static int st[]; // segment tree array\n    \n    // Function to construct the segment tree\n    public static int[] constructST(int arr[], int n)\n    {\n        int x = (int)(Math.ceil(Math.log(n)/Math.log(2))); // calculate the height of the tree\n        int max_size = 2 * (int)(Math.pow(2, x)) - 1; // calculate the maximum size of the segment tree array\n        st = new int[max_size]; // initialize the segment tree array\n        constructSTUtil(arr,0,n-1,st,0); // call the utility function to construct the segment tree\n        return st; // return the constructed segment tree\n    }\n    \n    // Utility function to construct the segment tree\n    public static int constructSTUtil(int arr[], int ss, int se, int st[], int si)\n    {\n        if (ss == se) // if there's only one element in the segment\n        {\n            st[si] = arr[ss]; // store the element in the segment tree array\n            return arr[ss]; // return the element\n        }\n\n        int mid = getMid(ss, se); // calculate the middle index of the segment\n        st[si] =  minVal(constructSTUtil(arr, ss, mid, st, si*2+1), // recursively construct the left child segment tree\n                     constructSTUtil(arr, mid+1, se, st, si*2+2)); // recursively construct the right child segment tree\n        return st[si]; // return the minimum value of the segment (root of the segment tree)\n    }\n    \n    // Function to find the minimum value in the given range\n    public static int RMQ(int st[], int n, int l, int r)\n    {\n        if(l < 0 || r > n-1 || l > r) // if the given range is invalid\n        {\n            System.out.println(-1); // print -1\n            return -1; // return -1\n        }\n        \n        return RMQUtil(st, 0, n-1, l, r, 0); // call the utility function to find the minimum value in the given range\n    }\n    \n    // Utility function to find the minimum value in the given range\n    public static int RMQUtil(int st[], int ss, int se, int qs, int qe, int index)\n    {\n         if (qs <= ss && qe >= se) // if the current segment is completely inside the given range\n               return st[index]; // return the minimum value in the current segment\n\n        if (se < qs || ss > qe) // if the current segment is outside the given range\n            return Integer.MAX_VALUE; // return the maximum value possible\n\n        int mid = getMid(ss, se); // calculate the middle index of the segment\n        return minVal(RMQUtil(st, ss, mid, qs, qe, 2*index+1), // recursively find the minimum value in the left child segment\n                  RMQUtil(st, mid+1, se, qs, qe, 2*index+2)); // recursively find the minimum value in the right child segment\n    }\n    \n    // Function to calculate the middle index given the start and end indices\n    public static int getMid(int st, int end)\n    {\n        return (st + (end-st)/2); // return the middle index\n    }\n    \n    // Function to find the minimum value between two given values\n    public static int minVal(int a, int b)\n    {\n       return (a > b) ? b : a; // return the minimum value between two given values\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n\r\n#Back-end complete function Template for Python 3\r\n\r\nfrom math import ceil, log2\r\nINF = 2147483647\r\ndef getMid(s, e) :\r\n    return s + (e -s)//2\r\n\r\ndef constructSTUtil(arr,  ss,  se, st,  si):\r\n\r\n    if (ss == se):\r\n        st[si] = arr[ss]\r\n        return arr[ss]\r\n    \r\n\r\n    mid = getMid(ss, se)\r\n    st[si] =  min(constructSTUtil(arr, ss, mid, st, si*2+1),\r\n                     constructSTUtil(arr, mid+1, se, st, si*2+2))\r\n    return st[si]\r\n\r\ndef constructST(arr,n):\r\n\r\n    x = ceil(log2(n))//1\r\n    max_size = 2**(x + 1)-1\r\n    st = [0 for i in range(max_size)]\r\n    constructSTUtil(arr,0,n-1,st,0)\r\n    return st\r\n\r\n\r\ndef RMQUtil(st,  ss,  se,  qs,  qe,  index):\r\n\r\n    if (qs <= ss and qe >= se):\r\n        return st[index]\r\n\r\n    if (se < qs or ss > qe):\r\n        return INF\r\n\r\n    mid = getMid(ss, se)\r\n    return min(RMQUtil(st, ss, mid, qs, qe, 2*index+1),RMQUtil(st, mid+1, se, qs, qe, 2*index+2))\r\n\r\ndef RMQ(st ,  n,  qs,  qe):\r\n    return RMQUtil(st, 0, n-1, qs, qe, 0)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number[]}\n*/\n\nclass Solution\n{\n    //Function to construct the segment tree.\n    constructST(arr,n)\n    {\n        let INF = 2147483647;\n        let getMid = function(s, e) {\n            return s + Math.floor((e-s)/2);\n        };\n\n        let constructSTUtil = function(arr, ss, se, st, si) {\n            if (ss === se) {\n                st[si] = arr[ss];\n                return arr[ss];\n            }\n\n            let mid = getMid(ss, se);\n            st[si] =  Math.min(constructSTUtil(arr, ss, mid, st, si*2+1),\n                     constructSTUtil(arr, mid+1, se, st, si*2+2));\n            return st[si];\n        };\n\n        let ceilLog2 = Math.ceil(Math.log2(n));\n        let maxX = Math.pow(2, ceilLog2 + 1) - 1;\n        let st = Array.from({length: maxX}, (v, i) => 0);\n        constructSTUtil(arr, 0, n-1, st, 0);\n        return st;\n    }\n\n    //Function to compute the minimum of the given range of array elements.\n    RMQ(st, n, qs, qe)\n    {\n        let INF = 2147483647;\n        let getMid = function(s, e) {\n            return s + Math.floor((e-s)/2);\n        };\n\n        let RMQUtil = function(st, ss, se, qs, qe, index) {\n            if (qs <= ss && qe >= se) {\n                return st[index];\n            }\n\n            if (se < qs || ss > qe) {\n                return INF;\n            }\n\n            let mid = getMid(ss, se);\n            return Math.min(RMQUtil(st, ss, mid, qs, qe, 2*index+1),RMQUtil(st, mid+1, se, qs, qe, 2*index+2));\n        };\n\n        return RMQUtil(st, 0, n-1, qs, qe, 0);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}