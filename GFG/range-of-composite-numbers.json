{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700589,
            "title": "Range of Composite numbers",
            "titleSlug": "range-of-composite-numbers",
            "content": "<p><span style=\"font-size:18px\">Given an integer n, we need to find a range of positive integers such that all the number in that range are composite and length of that range is n. You may return anyone range in the case of more than one answer.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Input:</strong><br />\nFirst line consists of T test cases. Only line, consists of an Integer N.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Output:</strong><br />\nSingle line output, &quot;1&quot; if range found&nbsp;else &quot;0&quot;.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=T&lt;=100<br />\n1&lt;=N&lt;=100</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example:</strong><br />\n<strong>Input:</strong><br />\n2<br />\n3<br />\n5<br />\n<strong>Output:</strong><br />\n1<br />\n1</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer *n*, find a range of *n* consecutive positive integers where every number in the range is composite (not prime). If such a range exists, return 1; otherwise, return 0. You can return any valid range if multiple exist.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 100"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "1",
                        "explanation": "A range of 3 consecutive composite numbers exists (e.g., 8, 9, 10)."
                    },
                    {
                        "input": "5",
                        "output": "1",
                        "explanation": "A range of 5 consecutive composite numbers exists (e.g., 24, 25, 26, 27, 28)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to generate a vector of prime numbers within a given range\nvector<long> range(int n){\n    vector<long> aa;\n\n    // Loop to find prime numbers using a sieve algorithm\n    for(int i=0;i<1500000;i++){\n        if(prime[i]){\n            aa.push_back(i);\n        }\n    }\n\n    vector<long> bb;\n    // Loop to calculate the differences between consecutive prime numbers\n    for(int i=0;i<aa.size()-1;i++){\n        bb.push_back(aa[i+1]-aa[i]-1);\n    }\n\n    int i;\n    // Loop to find the index where the difference between consecutive prime numbers is greater\n    // or equal to the given range n\n    for(i=0;i<bb.size();i++){\n        if(bb[i]>=n){\n            break;\n        }\n    }\n\n    vector<long> a;\n    // Loop to generate a vector of numbers starting from the prime number corresponding to the index i+1\n    for(int j=1;j<=n;j++){\n        a.push_back(aa[i]+j);\n    }\n\n    // Return the generated vector of numbers\n    return a;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class GfG{\n    // Function to find a range of prime numbers and return a list of numbers within the range.\n\tArrayList<Integer> range(int n){\n\t\t// Creating an empty array list to store the prime numbers.\n\t\tArrayList<Integer> aa=new ArrayList<>();\n\t\t// Creating an instance of the Composite class to access the prime array.\n\t\tComposite c=new Composite();\n\t\t// Looping through the prime array.\n\t\tfor(int i=0;i<1500000;i++){\n\t\t    // If the current number is a prime number, add it to the array list.\n\t\t\tif(c.prime[i]){\n\t\t\t\taa.add(i);\n\t\t\t}\n\t\t}\n\t\t// Creating an empty array list to store the differences between the consecutive prime numbers.\n\t\tArrayList<Integer> bb=new ArrayList<>();\n\t\t// Looping through the array list of prime numbers.\n\t\tfor(int i=0;i<aa.size()-1;i++){\n\t\t    // Calculating the difference between the current prime number and the next prime number.\n\t\t\tbb.add(aa.get(i+1)-aa.get(i)-1);\n\t\t}\n\t\tint i=0;\n\t\t// Looping through the array list of differences.\n\t\tfor(i=0;i<bb.size();i++){\n\t\t    // Finding the first difference that is greater than or equal to n.\n\t\t\tif(bb.get(i)>=n){\n\t\t\t    // Exiting the loop if such a difference is found.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Creating an empty array list to store the numbers within the range.\n\t\tArrayList<Integer> a=new ArrayList<>();\n\t\t// Looping through the range of numbers.\n\t\tfor(int j=1;j<=n;j++){\n\t\t    // Adding the numbers to the array list by adding a constant value to the starting prime number.\n\t\t\ta.add(aa.get(i)+j);\n\t\t}\n\t\t// Returning the array list of numbers within the range.\n\t\treturn a;\n\t}\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\ndef factorial(n):\n    a = 1\n    for i in range(2, n + 1):\n        a *= i\n    return a\n\n\n# to print range of length n\n# having all composite integers\ndef Range(n):\n    a = factorial(n + 2) + 2\n    b = a + n - 1\n\n    if n==(b-a+1):\n        return 1\n    else:\n        return 0\n\n\n",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}