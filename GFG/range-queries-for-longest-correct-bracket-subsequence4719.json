{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701700,
            "title": "Range Longest Correct Bracket Subsequence Queries",
            "titleSlug": "range-queries-for-longest-correct-bracket-subsequence4719",
            "content": "<p><span style=\"font-size: 18px;\">Given a bracket sequence or in other words a string S of length&nbsp;N&nbsp;and queries&nbsp;Q, consisting of characters&nbsp;&lsquo;(&lsquo;&nbsp;and&nbsp;&lsquo;)&rsquo;. Find the length of the maximum correct bracket subsequence of sequence for a given query range from L to R(L and R inclusive).</span></p>\n<p><span style=\"font-size: 18px;\"><em><strong>Note: </strong>A correct bracket sequence is the one that has matched bracket pairs or which contains another nested correct bracket sequence.</em></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>S = ())(())(())( , Q = 2\nQueries = {(3,6), (0,11)}\n<strong>Output:\n</strong>4\n10<strong>\nExplanation: </strong>For query 1, Longest Correct\nBracket Subsequence is (()).Hence length=4\nFor query 2, Longest Correct Bracket\nSubsequence is ()(())(()). Hence length=10</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Complete&nbsp;<strong>getLongestSequence()</strong> function and return&nbsp;the maximum length of the correct bracket subsequence of the sequence. The segment tree array has been prebuilt and provided to you.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(Q*Log(N)).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;=&nbsp;N, Q&nbsp;&lt;= 10<sup>4</sup><br />0 &lt;=&nbsp;L&nbsp;&lt;=&nbsp;R&nbsp;&lt;= N-1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Segment-Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Range Minimum Query",
                "slug": "range-minimum-query"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // recursive function to get the desired Longest Sequence.\n    Node getLongestSequenceUtil(Node* st, int ss, int se, int qs, int qe, int si) {\n        // if segment of this node is outside given range, we return null node.\n        if (ss > qe || se < qs) {\n            Node nullNode;\n            return nullNode;\n        }\n\n        // if segment of this node is part of given range then we return st[si].\n        if (ss >= qs && se <= qe) {\n            return st[si];\n        }\n\n        // if a part of this segment overlaps with the given range, we call\n        // the function recursively for the children nodes.\n        int mid = getMid(ss, se);\n        Node left = getLongestSequenceUtil(st, ss, mid, qs, qe, si * 2 + 1);\n        Node right = getLongestSequenceUtil(st, mid + 1, se, qs, qe, si * 2 + 2);\n\n        // merging left and right subtree query results.\n        Node res = merge(left, right);\n        return res;\n    }\n\n    // Function to returns the maximum length of correct bracket subsequence\n    // between starting and ending indexes.\n    int getLongestSequence(Node* st, string str, int qs, int qe, int n) {\n        Node res = getLongestSequenceUtil(st, 0, n - 1, qs, qe, 0);\n\n        // since we are storing numbers pairs and have to return maximum\n        // length hence we multiply no of pairs with 2.\n        return 2 * res.pairs;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass Solution\n{\n\tpublic static Node merge(Node leftChild, Node rightChild) \n\t{\n        Node parentNode=new Node();\n        int minMatched = Math.min(leftChild.open, rightChild.closed);\n        parentNode.pairs = leftChild.pairs + rightChild.pairs + minMatched;\n        parentNode.open = leftChild.open + rightChild.open - minMatched;\n        parentNode.closed = leftChild.closed + rightChild.closed - minMatched;\n        return parentNode;\n    }\n    public static int getMid(int s,int e)\n\t{\n\t    return s + (e - s) / 2;\n\t}\n\t\n\t//recursive function to get the desired Longest Sequence.\n    public static Node getLongestSequenceUtil(Node[] st, int ss, int se, int qs, int qe, int si)\n    {\n        //if segment of this node is outside given range, we return null node.\n        if (ss > qe || se < qs) {\n            return new Node();\n        }\n    \n        //if segment of this node is part of given range then we return st[si].\n        if (ss >= qs && se <= qe) {\n            return st[si];\n        }\n        \n        //if a part of this segment overlaps with the given range, we call\n        //the function recursively for the children nodes.\n        int mid = getMid(ss, se);\n        Node left = getLongestSequenceUtil(st, ss, mid, qs, qe, si * 2 + 1);\n        Node right=getLongestSequenceUtil(st, mid + 1, se, qs, qe, si * 2 + 2);\n    \n        //merging left and right subtree query results.\n        Node res = merge(left, right);\n        return res;\n    }\n    \n    //Function to returns the maximum length of correct bracket subsequence\n    //between starting and ending indexes.\n    public static int getLongestSequence(Node[] st, String str, int qs, int qe, int n)\n    {\n        Node res = getLongestSequenceUtil(st, 0, n - 1, qs, qe, 0);\n        \n        //since we are storing numbers pairs and have to return maximum \n        //length hence we multiply no of pairs with 2.\n        return 2 * res.pairs;\n    }  \n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to merge left and right subtrees.\n    def merge(self,lchild,rchild):\n        \n        pnode=node()\n        \n        minmatch=min(lchild.op,rchild.cl)\n        \n        pnode.pair = lchild.pair + rchild.pair + minmatch\n        pnode.op = lchild.op + rchild.op - minmatch\n        pnode.cl = lchild.cl + rchild.cl - minmatch\n        \n        return pnode\n    \n    #recursive function to get the desired Longest Sequence.    \n    def gls(self,st,n,qs,qe,ss,se,si):\n        \n        #if segment of this node is outside given range, we return null node.\n        if ss>qe or se<qs:\n            return node()\n        \n        #if segment of this node is part of given range then we return st[si].\n        if ss>=qs and se<=qe:\n            return st[si]\n        \n        #if a part of this segment overlaps with the given range, we call\n        #the function recursively for the children nodes.    \n        mid=ss+(se-ss)//2\n        left=self.gls(st,n,qs,qe,ss,mid,si*2+1)\n        right=self.gls(st,n,qs,qe,mid+1,se,si*2+2)\n        \n        #merging left and right subtree query results.\n        n=self.merge(left,right)\n        \n        return n\n        \n    #Function to returns the maximum length of correct bracket subsequence\n    #between starting and ending indexes.\n    def getLongestSequence(self,st,n,qs,qe):\n        \n        n=self.gls(st,n,qs,qe,0,n-1,0)\n        \n        #since we are storing numbers pairs and have to return maximum \n        #length hence we multiply no of pairs with 2.\n        return (2*n.pair)\n        \n        \n        ",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * getLongestSequence\n * @param {string} str (given string)\n * @param {number} n(length of the string)\n * @param {number} qs\n * @param {number} qe (qs and qe are L and R respectively)\n * @param {number[]} st (segment tree of the given string of Node type)\n * @returns {number} (the maximum length of correct bracket subsequence of the sequence.)\n*/\nclass Solution \n{\n    //recursive function to get the desired Longest Sequence.\n    getLongestSequenceUtil(st, ss, se, qs, qe, si)\n    {\n        //if segment of this node is outside given range, we return null node.\n        if (ss > qe || se < qs) {\n            let nullNode = new Node();\n            return nullNode;\n        }\n    \n        //if segment of this node is part of given range then we return st[si].\n        if (ss >= qs && se <= qe) {\n            return st[si];\n        }\n        \n        //if a part of this segment overlaps with the given range, we call\n        //the function recursively for the children nodes.\n        let mid = getMid(ss, se);\n        let left=this.getLongestSequenceUtil(st, ss, mid, qs, qe, si * 2 + 1);\n        let right=this.getLongestSequenceUtil(st, mid + 1, se, qs, qe, si*2 +2);\n    \n        //merging left and right subtree query results.\n        let res = merge(left, right);\n        return res;\n    }\n    \n    //Function to returns the maximum length of correct bracket subsequence\n    //between starting and ending indexes.\n    getLongestSequence(st, str, qs, qe, n)\n    {\n        let res = this.getLongestSequenceUtil(st, 0, n - 1, qs, qe, 0);\n        \n        //since we are storing numbers pairs and have to return maximum \n        //length hence we multiply no of pairs with 2.\n        return 2 * res.pairs;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}