{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701689,
            "title": "Range Sum Queries",
            "titleSlug": "range-sum-queries2353",
            "content": "<p><span style=\"font-size:18px\">You are given an array <strong>arr</strong>[] of size <strong>N&nbsp;</strong>and<strong>&nbsp;Q</strong>&nbsp;queries.&nbsp;</span><br />\r\n<span style=\"font-size:18px\"><strong>getSum(L,R):&nbsp;</strong>&nbsp;return the sum of range [L,R]<br />\r\n<strong>updateValue(index,value):</strong>&nbsp;update arr[index] to value.<br />\r\n<br />\r\nYou need to calculate the answer for Type-1 queries and do the update in the segment tree for Type-2 queries.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong> 0-based indexing is used.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 6, Q = 3\r\narr[] = {1,3,5,7,9,11}\r\nQueries = getSum(0,2)\r\n\\t    updateValue(3,17)\r\n\\t    getSum(0,5)\r\n<strong>Output:\r\n</strong>9\r\n46</span><span style=\"font-size:18px\"><strong>\r\nExplanation: </strong>There are 3 queries:&nbsp;\r\nQuery 1:&nbsp;1 + 3 + 5 = 9\r\nQuery 2:&nbsp;7 changes to 17\r\nQuery 3:&nbsp;1 + 3 + 5 + 17 + 9 + 11= 46</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nComplete the <strong>updateValue()</strong> and <strong>getSum()</strong> function. The formed segment tree is already provided&nbsp;in both the function as a function argument.<br />\r\n<strong>updateValue()&nbsp;</strong>processes Type-2 query and does the required update in the segment tree.<br />\r\n<strong>getSum()&nbsp;</strong>returns the answer for Type-1 query.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(Q*Log(N)).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= <strong>N</strong> &lt;= 10<sup>5</sup><br />\r\n1 &lt;= <strong>Q</strong> &lt;= 10<sup>5</sup><br />\r\n0 &lt;= <strong>L, R, index</strong> &lt;= N-1<br />\r\n1 &lt;= <strong>arr[i], value&nbsp;</strong>&lt;= 10<sup>5</sup></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example:<br />\r\nInput:</strong><br />\r\n1<br />\r\n6 3<br />\r\n1 3 5 7 9 11<br />\r\nG 0 2<br />\r\nU 3 17<br />\r\nG 0 5</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Output:</strong><br />\r\n9<br />\r\n46</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Explanation:<br />\r\nTestcase 1:</strong> There are 3 queries:&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Query 1 :&nbsp; 1 + 3 + 5 = 9<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Query 2&nbsp;:&nbsp; 7 changes to 17<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Query 3&nbsp;:&nbsp; 1 + 3 + 5 + 17 + 9 + 11= 46</span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array `arr` of size `N` and `Q` queries. There are two types of queries:\n\n*   **getSum(L, R):** Return the sum of elements in the range `[L, R]` (inclusive).\n*   **updateValue(index, value):** Update the value of `arr[index]` to `value`.\n\nImplement the `getSum` and `updateValue` functions using a segment tree. The segment tree is already constructed and passed as an argument to both functions. The indexing is 0-based.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= Q <= 10^5",
                    "0 <= L, R, index <= N-1",
                    "1 <= arr[i], value <= 10^5",
                    "Expected Time Complexity: O(Q*Log(N))",
                    "Expected Auxiliary Space: O(1)"
                ],
                "testcases": [
                    {
                        "input": "N = 6, Q = 3\narr[] = {1,3,5,7,9,11}\nQueries = getSum(0,2)\n\t    updateValue(3,17)\n\t    getSum(0,5)",
                        "output": "9\n46",
                        "explanation": "Query 1: The sum of elements from index 0 to 2 (inclusive) is 1 + 3 + 5 = 9.\nQuery 2: The value at index 3 is updated from 7 to 17.\nQuery 3: The sum of elements from index 0 to 5 (inclusive) is 1 + 3 + 5 + 17 + 9 + 11 = 46."
                    },
                    {
                        "input": "6 3\n1 3 5 7 9 11\nG 0 2\nU 3 17\nG 0 5",
                        "output": "9\n46",
                        "explanation": "Query 1: The sum of elements from index 0 to 2 (inclusive) is 1 + 3 + 5 = 9.\nQuery 2: The value at index 3 is updated from 7 to 17.\nQuery 3: The sum of elements from index 0 to 5 (inclusive) is 1 + 3 + 5 + 17 + 9 + 11 = 46."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Segment-Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\r\n\r\n\r\n//recursive function to update the nodes which have given index in their range. \r\nvoid updateValueUtil(ll *st, int ss, int se, int i, int diff, int si) \r\n{\r\n    //base case\r\n    if (i < ss || i > se) \r\n    return;\r\n\r\n    //if the input index is in range of this node then we update\r\n    //the value of the node and its children. \r\n    st[si] = st[si] + diff;\r\n    if (se != ss) {\r\n        int mid = getMid(ss, se);\r\n        updateValueUtil(st, ss, mid, i, diff, 2 * si + 1);\r\n        updateValueUtil(st, mid + 1, se, i, diff, 2 * si + 2);\r\n    }\r\n}\r\n\r\n//Function to update a value in input array and segment tree.\r\n//It uses updateValueUtil() to update the value in segment tree.\r\nvoid updateValue(int *arr, ll *st, int n, int index, int new_val)\r\n{\r\n    //base case for invalid input.\r\n    if (index < 0 || index > n - 1) \r\n    {\r\n        return;\r\n    }\r\n    \r\n    //finding the difference between new value and old value\r\n    //and updating the value in array.\r\n    int diff = new_val - arr[index];\r\n    arr[index] = new_val;\r\n    \r\n\r\n    //updating the value of nodes in segment tree.\r\n    updateValueUtil(st, 0, n - 1, index, diff, 0);\r\n}\r\n\r\n//recursive function to get the sum of values in the given range of the array.\r\nll getSumUtil(ll *st, int ss, int se, int l, int r, int si) \r\n{\r\n    //if segment of this node is a part of given range then we\r\n    // return the sum of the segment.\r\n    if (l <= ss && r >= se) \r\n    return st[si];\r\n    \r\n    //if segment of this node is outside the given range, we return 0.\r\n    if (se < l || ss > r) \r\n    return 0;\r\n    \r\n    //if a part of this segment overlaps with the given range, we call\r\n    //the function recursively for the children nodes.\r\n    int mid = getMid(ss, se);\r\n    return getSumUtil(st, ss, mid, l, r, 2 * si + 1) +\r\n           getSumUtil(st, mid + 1, se, l, r, 2 * si + 2);\r\n}\r\n\r\n\r\n//Function to return sum of elements in range from index qs (query start)\r\n//to qe (query end). It mainly uses getSumUtil().\r\nll getsum(ll *st, int n, int l, int r) \r\n{\r\n    //base case for invalid input\r\n    if (l < 0 || r > n - 1 || l > r) \r\n    {\r\n        return -1;\r\n    }\r\n\r\n    return getSumUtil(st, 0, n - 1, l, r, 0);\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Sol\r\n{\r\n    \r\npublic static int getMid(int st, int end)\r\n{\r\n    return (st + (end - st) / 2); \r\n}    \r\n\r\n//recursive function to update the nodes which have given index in their range.\r\nstatic void updateValueUtil(long st[], int ss, int se, int i, int diff,int si) \r\n{\r\n    //base case\r\n    if (i < ss || i > se)\r\n    return;\r\n    \r\n    //if the input index is in range of this node then we update\r\n    //the value of the node and its children.\r\n    st[(int)si] = st[(int)si] + diff;\r\n    if (se != ss) {\r\n        int mid = getMid(ss, se);\r\n        updateValueUtil(st, ss, mid, i, diff, 2 * si + 1);\r\n        updateValueUtil(st, mid + 1, se, i, diff, 2 * si + 2);\r\n    }\r\n}\r\n\r\n//Function to update a value in input array and segment tree.\r\n//It uses updateValueUtil() to update the value in segment tree.\r\nstatic void updateValue(int arr[], long st[], int n, int index, int val)\r\n{\r\n    //base case for invalid input.\r\n    if (index < 0 || index > n - 1) \r\n    {\r\n        return;\r\n    }\r\n    \r\n    //finding the difference between new value and old value\r\n    //and updating the value in array.\r\n    int diff = val - arr[index];\r\n    arr[index] = val;\r\n    \r\n\r\n    //updating the value of nodes in segment tree.\r\n    updateValueUtil(st, 0, n - 1, index, diff, 0);\r\n}\r\n\r\n//recursive function to get the sum of values in the given range of the array.\r\nstatic long getSumUtil(long st[], int ss, int se, int qs, int qe, int si) \r\n{\r\n    //if segment of this node is a part of given range then we\r\n    // return the sum of the segment.\r\n    if (qs <= ss && qe >= se) \r\n    return st[(int)si];\r\n    \r\n    //if segment of this node is outside the given range, we return 0.\r\n    if (se < qs || ss > qe) \r\n    return 0;\r\n    \r\n    //if a part of this segment overlaps with the given range, we call\r\n    //the function recursively for the children nodes.\r\n    int mid = getMid(ss, se);\r\n    return getSumUtil(st, ss, mid, qs, qe, 2 * si + 1) +\r\n           getSumUtil(st, mid + 1, se, qs, qe, 2 * si + 2);\r\n}\r\n\r\n\r\n//Function to return sum of elements in range from index qs (query start)\r\n//to qe (query end). It mainly uses getSumUtil().\r\npublic static long getSum(long st[], int n, int l, int r) \r\n{\r\n    //base case for invalid input.\r\n    if (l < 0 || r > n - 1 || l > r) {\r\n        return -1;\r\n    }\r\n\r\n    return getSumUtil(st, 0, n - 1, l, r, 0);\r\n}\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "  \r\n  \r\n\r\n#recursive function to update the nodes which have given index in their range.\r\ndef updateValueUtil(st, ss, se, i, val, si) :\r\n    \r\n    if ss==i and se==i:\r\n        st[si]=val\r\n        return\r\n    \r\n    #base case\r\n    if ss>i or se< i:\r\n        return\r\n    \r\n    #if the input index is in range of this node then we update\r\n    #the value of the node and its children.\r\n    mid=ss + (se -ss) // 2\r\n    \r\n    updateValueUtil(st,ss,mid,i,val,si*2+1)\r\n    updateValueUtil(st,mid+1,se,i,val,si*2+2)\r\n    \r\n    st[si]=st[2*si+1]+st[2*si+2]\r\n    \r\n#Function to update a value in input array and segment tree.\r\n#It uses updateValueUtil() to update the value in segment tree.\r\ndef updateValue(arr, st, n, i, new_val) :  \r\n  \r\n    #base case for invalid input.\r\n    if (i < 0 or i > n - 1) : \r\n        return\r\n  \r\n    #updating the value of nodes in segment tree.\r\n    updateValueUtil(st, 0, n - 1, i,new_val, 0)   \r\n\r\n#recursive function to get the sum of values in the given range of the array.\r\ndef getSumUtil(st, ss, se, qs, qe, si) :  \r\n  \r\n    #if segment of this node is a part of given range then we\r\n    #return the sum of the segment.\r\n    if ss>=qs and se<=qe:\r\n        return st[si]\r\n    \r\n    #if segment of this node is outside the given range, we return 0.\r\n    if qe<ss or se<qs:\r\n        return 0\r\n    \r\n    #if a part of this segment overlaps with the given range, we call\r\n    #the function recursively for the children nodes.\r\n    mid=ss+(se-ss)//2\r\n    \r\n    return getSumUtil(st,ss,mid,qs,qe,si*2+1)+getSumUtil(st,mid+1,se,qs,qe,si*2+2)\r\n    \r\n    \r\n#Function to return sum of elements in range from index qs (query start)\r\n#to qe (query end). It mainly uses getSumUtil().  \r\ndef getSum(st, n, qs, qe) :  \r\n    \r\n    #base case for invalid input.\r\n    if (qs < 0 or qe > n - 1 or qs > qe) :\r\n        return -1;  \r\n      \r\n    return getSumUtil(st, 0, n - 1, qs, qe, 0)  \r\n  ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * updateValueUtil\r\n * Functioon use to update the value present in given array arr at index to new_val\r\n * @param {number[]} arr (given array)\r\n * @param {number} n (size of arr)\r\n * @param {number} index (need to update)\r\n * @param {number} new_val (given value to which we need to update index)\r\n * @param {number[]} st (constructed segment-tree)\r\n * \r\n * \r\n * getsum\r\n * function will return the sum in arr from qs to qe index\r\n * @param {number[]} st (constructed segment-tree)\r\n * @param {number} n\r\n * @param {number} l\r\n * @param {number} r\r\n * @returns {number}\r\n*/\r\n\r\n\r\nclass Solution \r\n{\r\n    //recursive function to update nodes which have given index in their range.\r\n    updateValueUtil(st, ss, se, i, diff, si) \r\n    {\r\n        //base case\r\n        if (i < ss || i > se) \r\n        return;\r\n        \r\n        //if the input index is in range of this node then we update\r\n        //the value of the node and its children.\r\n        st[si] = st[si] + diff;\r\n        if (se != ss) {\r\n            let mid = getMid(ss, se);\r\n            this.updateValueUtil(st, ss, mid, i, diff, 2 * si + 1);\r\n            this.updateValueUtil(st, mid + 1, se, i, diff, 2 * si + 2);\r\n        }\r\n    }\r\n    \r\n    //Function to update a value in input array and segment tree.\r\n    //It uses updateValueUtil() to update the value in segment tree.\r\n\tupdateValue(arr, st, n, index, val) \r\n\t{\r\n\t    //base case for invalid input.\r\n        if (index < 0 || index > n - 1) {\r\n            return;\r\n        }\r\n        \r\n        //finding the difference between new value and old value\r\n        //and updating the value in array.\r\n        let diff = val - arr[index];\r\n        arr[index] = val;\r\n        \r\n    \r\n        //updating the value of nodes in segment tree.\r\n        this.updateValueUtil(st, 0, n - 1, index, diff, 0);\r\n    }\r\n    \r\n    //recursive function to get the sum of values in the given range of array.\r\n    getSumUtil(st, ss, se, l, r, si) \r\n    {\r\n        //if segment of this node is a part of given range then we\r\n        // return the sum of the segment.\r\n        if (l <= ss && r >= se) \r\n        return st[si];\r\n        \r\n        //if segment of this node is outside the given range, we return 0.\r\n        if (se < l || ss > r) \r\n        return 0;\r\n        \r\n        //if a part of this segment overlaps with the given range, we call\r\n        //the function recursively for the children nodes.\r\n        let mid = Math.floor((ss + (se - ss) / 2));\r\n        return this.getSumUtil(st, ss, mid, l, r, 2 * si + 1) +\r\n               this.getSumUtil(st, mid + 1, se, l, r, 2 * si + 2);\r\n    }\r\n\r\n    //Function to return sum of elements in range from index qs (query start)\r\n    //to qe (query end). It mainly uses getSumUtil().\r\n    getSum(st, n, l, r) \r\n    {\r\n        //base case for invalid input.\r\n        if (l < 0 || r > n - 1 || l > r) {\r\n            return -1;\r\n        }\r\n    \r\n        return this.getSumUtil(st, 0, n - 1, l, r, 0);\r\n    }\r\n}\r\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}