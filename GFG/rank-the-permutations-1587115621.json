{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701323,
            "title": "Lexicographic Rank Of A String",
            "titleSlug": "rank-the-permutations-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">You are given a string <strong>S </strong>of lowercase characters, find the <strong>rank </strong>of the string amongst its permutations when sorted lexicographically. <strong>Return 0 if the characters are repeated in the string</strong>.<br /><strong>Note: </strong>Return the rank%1000000007<strong> </strong>as the answer as rank might overflow. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>S = abc\n<strong>Output: </strong>1<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">In 'abc' when we sort all the\npermutations in lexicographic order 'abc'\nwill be at the first position.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>S = acb\n<strong>Output: </strong>2<strong>\nExplanation: </strong>In 'acb' .</span><span style=\"font-size: 18px;\">The\nlexicographically sorted permutations\nwith letters 'a', 'c', and 'b' will be\nat second position.&nbsp;</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You only need to complete the function <strong>findRank </strong>that takes string <strong>S</strong> as a parameter and returns<strong> </strong>the rank.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; |S| &le; 26</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> fact;\n    const int MOD = 1e9 + 7;\n\n    // Function to generate the list of factorials.\n    void initializeFactorials(int totalLen) {\n        long long int factorial = 1;\n        fact.push_back(1);\n        for (int curIndex = 1; curIndex < totalLen; curIndex++) {\n            factorial = (factorial * curIndex) % MOD;\n            fact.push_back(factorial);\n        }\n        return;\n    }\n\n    // Function to find lexicographic rank of a string.\n    int findRank(string str) {\n        initializeFactorials(str.length() + 1);\n        // Calculate the length of the input string\n        int n = str.length();\n        // Initialize the rank as 1\n        int rank = 1;\n\n        // Loop through each character of the string\n        for (int i = 0; i < n; i++) {\n            // Initialize a variable to count the number of characters less than str[i]\n            int count = 0;\n\n            // Loop through the characters after str[i]\n            for (int j = i + 1; j < n; j++) {\n                // If str[i] is greater than str[j], increment the count variable\n                if (str[i] > str[j]) {\n                    count++;\n                }\n            }\n\n            // Update the rank based on the count of characters less than str[i]\n            // multiplied by the factorial of the number of remaining characters\n            rank += count * fact[n - i - 1];\n        }\n        // Return the final rank of the input string\n        return rank;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}