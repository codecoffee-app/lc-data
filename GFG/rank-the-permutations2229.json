{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706459,
            "title": "Rank The Permutations",
            "titleSlug": "rank-the-permutations2229",
            "content": "<p><span style=\"font-size: 18px;\">Given a string, find the rank of the string amongst its permutations sorted lexicographically.&nbsp;</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS = \"abc\"</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n1</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span></strong>\n<span style=\"font-size: 18px;\">The order permutations with letters \n'a', 'c', and 'b' : \nabc\nacb\nbac\nbca\ncab\ncba</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS = \"acb\"</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n2</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your&nbsp;task is to complete the function&nbsp;<strong>findRank()</strong>&nbsp;which takes the string&nbsp;<strong>S</strong>&nbsp;as input parameter&nbsp;and returns the rank of the string amongst its permutations.</span><br /><span style=\"font-size: 18px;\">It is guaranteed no characters are repeated in the string.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|*26)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(|S|)</span><br /><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;|S| represents the length of string S.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; |S| &le; 18</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S, determine its rank among all its lexicographically sorted permutations. The rank is the position of the string in the sorted list, starting from 1.",
                "constraints": [
                    "1 <= |S| <= 18",
                    "No characters are repeated in the string S."
                ],
                "testcases": [
                    {
                        "input": "abc",
                        "output": "1",
                        "explanation": "The lexicographically sorted permutations of 'abc' are: abc, acb, bac, bca, cab, cba. 'abc' is the first permutation."
                    },
                    {
                        "input": "acb",
                        "output": "2",
                        "explanation": "The lexicographically sorted permutations of 'acb' are: abc, acb, bac, bca, cab, cba. 'acb' is the second permutation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each character fix its position and find the rank, for example, if abc is given then for first position a is the smaller and there are no smaller character in the given string than a.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "factset"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Backend complete function template for C++\n\nclass Solution{\n  public:\n    long long findRank(string str) {\n\n        //Calculating factorial values\n        vector<long long> fact;\n        fact.push_back(1);\n        long long p = 1;\n        for(int i=2; i<=18; i++) {\n            p *= i;\n            fact.push_back(p);\n        }\n\n        long long len = str.length();\n        long long mul = fact[len-1];\n        long long rank = 1;\n     \n        // all elements of count[] are initialized with 0\n        long long count[26] = {0};\n     \n        // Populate the count array such that count[i]\n        // contains count of characters which are present\n        // in str and are smaller than i\n        for (int i = 0; i<len; ++i)\n            ++count[str[i]-'a'];\n     \n        for (int i = 1; i<26; ++i)\n            count[i] += count[i-1];\n     \n        for (int i = 0; i < len; ++i) {\n            mul /= (len - i);\n     \n            // count number of chars smaller than str[i]\n            // fron str[i+1] to str[len-1]\n\n            int x = (str[i] - 'a') - 1;\n            if(x>=0)\n                rank += count[x] * mul;\n     \n            // Reduce count of characters greater than str[i]\n            for (int j = str[i]-'a'; j<26; ++j)\n                --count[j];\n        }\n     \n        return rank;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Backend complete function Template for Java\n\nclass Solution\n{\n    public long findRank(String str)\n    {\n        //Calculating factorial values\n        long[] fact = new long[20];\n        fact[0] = 1l;\n        long p = 1l;\n        for(int i=2; i<=18; i++) {\n            p *= i;\n            fact[i-1] = p;\n        }\n\n        int len = str.length();\n        long mul = fact[len-1];\n        long rank = 1l;\n     \n        // all elements of count[] are initialized with 0\n        long[] count = new long[26];\n        \n        Arrays.fill(count,0l);\n     \n        // Populate the count array such that count[i]\n        // contains count of characters which are present\n        // in str and are smaller than i\n        for (int i = 0; i<len; ++i)\n            ++count[str.charAt(i)-'a'];\n     \n        for (int i = 1; i<26; ++i)\n            count[i] += count[i-1];\n     \n        for (int i = 0; i < len; ++i) {\n            mul /= (len - i);\n     \n            // count number of chars smaller than str[i]\n            // fron str[i+1] to str[len-1]\n\n            int x = (str.charAt(i) - 'a') - 1;\n            if(x>=0)\n                rank += count[x] * mul;\n     \n            // Reduce count of characters greater than str[i]\n            for (int j = str.charAt(i)-'a'; j<26; ++j)\n                --count[j];\n        }\n     \n        return rank;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\n\nclass Solution:\n\n    def findRank(self, str):\n        #Calculating factorial values\n        fact = []\n        fact.append(1)\n        p = 1\n        for i in range(2, 19):\n            p *= i\n            fact.append(p)\n\n        l = len(str)\n        mul = fact[l - 1]\n        rank = 1\n\n        # all elements of count[] are initialized with 0\n        count = [0] * 26\n\n        # Populate the count array such that count[i]\n        # contains count of characters which are present\n        # in str and are smaller than i\n        for i in range(l):\n            count[ord(str[i]) - 97] += 1\n\n        for i in range(1, 26):\n            count[i] += count[i - 1]\n\n        for i in range(l):\n            mul //= (l - i)\n\n            # count number of chars smaller than str[i]\n            # fron str[i+1] to str[len-1]\n\n            x = ord(str[i]) - 98\n            if x >= 0:\n                rank += count[x] * mul\n\n            # Reduce count of characters greater than str[i]\n            for j in range(ord(str[i]) - 97, 26):\n                count[j] -= 1\n\n        return rank\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findRank(S){ \n      //Calculating factorial values\n        let fact = [1];\n        let p = 1;\n        for(let i=2; i<=18; i++) {\n            p *= i;\n            fact.push(p);\n        }\n\n        let len = S.length;\n        let mul = fact[len-1];\n        let rank = 1;\n     \n        // all elements of count[] are initialized with 0\n        let count = new Array(26).fill(0);\n     \n        // Populate the count array such that count[i]\n        // contains count of characters which are present\n        // in str and are smaller than i\n        for (let i = 0; i<len; ++i)\n            ++count[S[i].charCodeAt(0)-'a'.charCodeAt(0)];\n     \n        for (let i = 1; i<26; ++i)\n            count[i] += count[i-1];\n     \n        for (let i = 0; i < len; ++i) {\n            mul /= (len - i);\n     \n            // count number of chars smaller than str[i]\n            // fron str[i+1] to str[len-1]\n\n            let x = (S[i].charCodeAt(0) - 'a'.charCodeAt(0)) - 1;\n            if(x>=0)\n                rank += count[x] * mul;\n     \n            // Reduce count of characters greater than str[i]\n            for (let j = S[i].charCodeAt(0)-'a'.charCodeAt(0); j<26; ++j)\n                --count[j];\n        }\n     \n        return rank;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}