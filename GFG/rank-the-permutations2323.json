{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705164,
            "title": "Rank The Permutations",
            "titleSlug": "rank-the-permutations2323",
            "content": "<p><span style=\"font-size: 18px;\">Given a string, <strong>s</strong> find the rank of the string amongst all its permutations sorted lexicographically. The rank can be big, so print it modulo <strong>1000003</strong>.&nbsp;<br /><strong>Note:</strong> Return 0 if the characters are repeated in the string.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"abc\"\n<strong>Output:</strong> 1\n<strong>Explaination:</strong> It is lexicographically the smallest \nstring of the permutation.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"acb\"\n<strong>Output:</strong> 2\n<strong>Explaination:</strong> This is lexicographically the second smallest string of the permutation.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>rank()</strong> which takes string s as input parameter and returns the rank modulo 1000003 of the string.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(|s|<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(|s|)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |s| &le; 26&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, determine its rank among all its permutations when sorted lexicographically. Return the rank modulo 1000003. If the string contains repeated characters, return 0.",
                "constraints": [
                    "1 <= |s| <= 26"
                ],
                "testcases": [
                    {
                        "input": "abc",
                        "output": "1",
                        "explanation": "The string \"abc\" is the lexicographically smallest permutation."
                    },
                    {
                        "input": "acb",
                        "output": "2",
                        "explanation": "The string \"acb\" is the second lexicographically smallest permutation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Find each character in each position increases the rank by how much.</span></p>",
            "<p><span style=\"font-size: 18px;\">Effect of each character on rank also depends on the remainig characters and its rank among the remaining characters upon reaching that position.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "factorial",
                "slug": "factorial"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "factset"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int mod = 1000003;\n\n    // Function to calculate rank of a given string\n    int rank(string S) {\n        int f = 1;\n        vector<int> fact;\n        fact.emplace_back(1);\n\n        // calculating factorial values and storing in fact vector\n        for (int i = 1; i < S.size(); i++) {\n            f = (f * i) % mod;\n            fact.emplace_back(f);\n        }\n\n        set<char> st;\n\n        // checking if the string has duplicate characters\n        for (int i = 0; i < S.size(); i++) {\n            if (st.find(S[i]) != st.end())\n                return 0;\n            st.insert(S[i]);\n        }\n\n        int rk = 0, i = 0;\n\n        // calculating the rank of the string\n        while (i < S.size()) {\n            auto it = st.begin();\n            int c = 0;\n\n            // finding the current character's position in the set\n            while (*it != S[i]) {\n                it++;\n                c++;\n            }\n\n            // removing the current character from the set\n            st.erase(S[i]);\n\n            // calculating the current character's contribution to the rank\n            rk = (rk + (c * fact[S.size() - 1 - i]) % mod) % mod;\n            i++;\n        }\n\n        // adding 1 to the rank and returning the final rank\n        return (rk + 1);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static final int mod = 1000003;\n\n    static int rank(String S) {\n        int n = S.length();\n        int[] fact = new int[n];\n        fact[0] = 1;\n\n        // calculating factorial values and storing in fact array\n        for (int i = 1; i < n; i++) {\n            fact[i] = (fact[i - 1] * i) % mod;\n        }\n\n        Set<Character> st = new HashSet<>();\n\n        // checking if the string has duplicate characters\n        for (int i = 0; i < n; i++) {\n            if (st.contains(S.charAt(i))) {\n                return 0;\n            }\n            st.add(S.charAt(i));\n        }\n\n        int rk = 0;\n\n        // calculating the rank of the string\n        for (int i = 0; i < n; i++) {\n            int c = 0;\n            for (char ch : st) {\n                if (ch < S.charAt(i)) {\n                    c++;\n                }\n            }\n\n            // removing the current character from the set\n            st.remove(S.charAt(i));\n\n            // calculating the current character's contribution to the rank\n            rk = (rk + (c * fact[n - 1 - i]) % mod) % mod;\n        }\n\n        // adding 1 to the rank and returning the final rank\n        return (rk + 1) % mod;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() { this.mod = 1000003; }\n\n    // Function to calculate the rank of a given string\n    rank(S) {\n        let f = 1;\n        let fact = [ 1 ];\n\n        // Calculating factorial values and storing in fact array\n        for (let i = 1; i < S.length; i++) {\n            f = (f * i) % this.mod;\n            fact.push(f);\n        }\n\n        let st = new Set();\n\n        // Checking if the string has duplicate characters\n        for (let i = 0; i < S.length; i++) {\n            if (st.has(S[i])) return 0;\n            st.add(S[i]);\n        }\n\n        let rk = 0, i = 0;\n\n        // Calculating the rank of the string\n        while (i < S.length) {\n            let it = Array.from(st).sort();\n            let c = 0;\n\n            // Finding the current character's position in the set\n            while (it[c] !== S[i]) {\n                c++;\n            }\n\n            // Removing the current character from the set\n            st.delete(S[i]);\n\n            // Calculating the current character's contribution to the rank\n            rk = (rk + (c * fact[S.length - 1 - i]) % this.mod) % this.mod;\n            i++;\n        }\n\n        // Adding 1 to the rank and returning the final rank\n        return (rk + 1);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}