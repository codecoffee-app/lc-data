{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700408,
            "title": "Rat in a Maze Problem - I",
            "titleSlug": "rat-in-a-maze-problem",
            "content": "<p><span >Consider a rat placed at position (0, 0) in an <strong>n x n</strong> square matrix <code>mat</code>. The rat's goal is to reach the destination at position (n-1, n-1). The rat can move in four possible directions:&nbsp;<strong>'U'(up)</strong>,&nbsp;<strong>'D'(down)</strong>,&nbsp;<strong>'L' (left)</strong>,&nbsp;<strong>'R' (right)</strong>.</span></p>\n<p><span >The matrix contains only two possible values:</span></p>\n<ul>\n<li><span ><code>0</code>: A blocked cell through which the rat <strong>cannot</strong> travel.</span></li>\n<li><span ><code>1</code>: A free cell that the rat <strong>can</strong> pass through.</span></li>\n</ul>\n<p><span ><strong>Note</strong>: In a path, no cell can be visited more than one time.&nbsp;If the source cell is 0, the rat cannot move to any other cell. In case of no path, return an empty list.+<br /></span></p>\n<p><span >The task is to find all possible paths the rat can take to reach the destination, starting from (0, 0) and ending at (n-1, n-1), under the condition that the rat cannot revisit any cell along the same path. Furthermore, the rat can only move to adjacent cells that are within the bounds of the matrix and not blocked.</span></p>\n<p><span >Return the final result vector in lexicographically smallest order.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: mat[][] = [[1, 0, 0, 0], [1, 1, 0, 1], [1, 1, 0, 0], [0, 1, 1, 1]]\n<strong>Output: </strong>[<span class=\"hljs-string\">\"DDRDRR\"</span>, <span class=\"hljs-string\">\"DRDDRR\"</span>]\n<strong>Explanation</strong>: The rat can reach the destination at (3, 3) from (0, 0) by two paths - DRDDRR and DDRDRR, when printed in sorted order we get DDRDRR DRDDRR.</span></pre>\n<pre><span ><strong>Input</strong>: mat[][] = [[1, 0], [1, 0]]\n<strong>Output: </strong>[]\n<strong>Explanation</strong>: No path exists and the destination cell is blocked.\n</span></pre>\n<pre><span ><strong>Input</strong>: mat = <span class=\"hljs-string\">[[1, 1, 1], [1, 0, 1], [1, 1, 1]]</span>\n<strong>Output: </strong>[<span class=\"hljs-string\">\"DDRR\"</span>, <span class=\"hljs-string\">\"RRDD\"</span>]\n<strong>Explanation</strong>: The rat has two possible paths to reach the destination: <span class=\"hljs-number\" style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1.</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> </span><span class=\"hljs-string\" style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">\"DDRR\" </span><span class=\"hljs-number\" style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">2.</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> </span><span class=\"hljs-string\" style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">\"RRDD\", </span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">These are returned </span><span class=\"hljs-keyword\" style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">in</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> lexicographically sorted order.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />2 &le; mat.size() &le; 5<br />0 &le; mat[i][j] &le; 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A rat is positioned at the top-left corner (0, 0) of an n x n grid represented by the matrix `mat`. The rat aims to reach the bottom-right corner (n-1, n-1). The rat can move in four directions: Up ('U'), Down ('D'), Left ('L'), and Right ('R').  Each cell in the matrix `mat` is either a 0 (blocked) or a 1 (free). The rat can only move through free cells. The rat cannot revisit any cell during its journey. Determine all possible paths for the rat to reach the destination, and return the paths in lexicographically sorted order. If no such path exists, return an empty list. If the starting cell (0,0) has value 0, no path is possible.",
                "constraints": [
                    "2 <= mat.size() <= 5",
                    "0 <= mat[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[[1, 0, 0, 0], [1, 1, 0, 1], [1, 1, 0, 0], [0, 1, 1, 1]]",
                        "output": "[\"DDRDRR\", \"DRDDRR\"]",
                        "explanation": "The rat can reach the destination at (3, 3) from (0, 0) via two paths: DDRDRR and DRDDRR. The paths are returned in lexicographical order."
                    },
                    {
                        "input": "[[1, 0], [1, 0]]",
                        "output": "[]",
                        "explanation": "No path exists as the destination is unreachable."
                    },
                    {
                        "input": "[[1, 1, 1], [1, 0, 1], [1, 1, 1]]",
                        "output": "[\"DDRR\", \"RRDD\"]",
                        "explanation": "The rat has two valid paths: DDRR and RRDD, which are returned in lexicographical order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use DFS with backtracking. For each cell, explore all four directions, marking cells as visited to avoid revisits.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  private:\n    vector<vector<int>> visitedCells;\n    vector<string> possiblePaths;\n\n  public:\n    // Function to find the path using DFS\n    void explorePaths(vector<vector<int>> &mat, int row, int col, string currentPath,\n                      int n) {\n        // If we reach the bottom-right corner, add the current path to the result\n        if (row == n - 1 && col == n - 1) {\n            possiblePaths.push_back(currentPath);\n            return;\n        }\n\n        // If the current cell is blocked or already visited, return\n        if (mat[row][col] == 0 || visitedCells[row][col] == 1)\n            return;\n\n        // Mark the current cell as visited\n        visitedCells[row][col] = 1;\n\n        // Explore all four possible directions\n        if (row > 0) // Move up\n            explorePaths(mat, row - 1, col, currentPath + 'U', n);\n        if (col > 0) // Move left\n            explorePaths(mat, row, col - 1, currentPath + 'L', n);\n        if (row < n - 1) // Move down\n            explorePaths(mat, row + 1, col, currentPath + 'D', n);\n        if (col < n - 1) // Move right\n            explorePaths(mat, row, col + 1, currentPath + 'R', n);\n\n        // Unmark the current cell (backtracking)\n        visitedCells[row][col] = 0;\n    }\n\n    // Function to find all possible paths from (0, 0) to (n-1, n-1)\n    vector<string> findPath(vector<vector<int>> &mat) {\n        int n = mat.size();\n        possiblePaths.clear();\n        visitedCells.assign(\n            n, vector<int>(n, 0)); // Resize the visitedCells array dynamically\n\n        // If the source or destination is blocked, return an empty result\n        if (mat[0][0] == 0 || mat[n - 1][n - 1] == 0)\n            return possiblePaths;\n\n        // Start exploring paths from the top-left corner (0, 0)\n        explorePaths(mat, 0, 0, \"\", n);\n\n        // Sort the paths lexicographically\n        sort(possiblePaths.begin(), possiblePaths.end());\n\n        return possiblePaths;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    private ArrayList<ArrayList<Integer>> visitedCells;\n    private ArrayList<String> possiblePaths;\n\n    // Function to find the path using DFS\n    public void explorePaths(ArrayList<ArrayList<Integer>> mat, int row, int col,\n                             String currentPath, int n) {\n        if (row == n - 1 && col == n - 1) {\n            possiblePaths.add(currentPath);\n            return;\n        }\n\n        if (mat.get(row).get(col) == 0 || visitedCells.get(row).get(col) == 1) {\n            return;\n        }\n\n        visitedCells.get(row).set(col, 1);\n\n        if (row > 0) // Move up\n            explorePaths(mat, row - 1, col, currentPath + \"U\", n);\n        if (col > 0) // Move left\n            explorePaths(mat, row, col - 1, currentPath + \"L\", n);\n        if (row < n - 1) // Move down\n            explorePaths(mat, row + 1, col, currentPath + \"D\", n);\n        if (col < n - 1) // Move right\n            explorePaths(mat, row, col + 1, currentPath + \"R\", n);\n\n        visitedCells.get(row).set(col, 0); // Backtrack\n    }\n\n    // Function to find all possible paths\n    public ArrayList<String> findPath(ArrayList<ArrayList<Integer>> mat) {\n        int n = mat.size();\n        possiblePaths = new ArrayList<>();\n        visitedCells = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            visitedCells.add(new ArrayList<>(Collections.nCopies(n, 0)));\n        }\n\n        if (mat.get(0).get(0) == 0 || mat.get(n - 1).get(n - 1) == 0) {\n            return possiblePaths;\n        }\n\n        explorePaths(mat, 0, 0, \"\", n);\n        Collections.sort(possiblePaths);\n        return possiblePaths;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def __init__(self):\n        self.possible_paths = []\n        self.visited = []\n\n    # Function to explore paths using DFS\n    def explore_paths(self, mat, row, col, current_path, n):\n        if row == n - 1 and col == n - 1:\n            self.possible_paths.append(current_path)\n            return\n\n        if mat[row][col] == 0 or self.visited[row][col] == 1:\n            return\n\n        self.visited[row][col] = 1\n\n        if row > 0:  # Move up\n            self.explore_paths(mat, row - 1, col, current_path + 'U', n)\n        if col > 0:  # Move left\n            self.explore_paths(mat, row, col - 1, current_path + 'L', n)\n        if row < n - 1:  # Move down\n            self.explore_paths(mat, row + 1, col, current_path + 'D', n)\n        if col < n - 1:  # Move right\n            self.explore_paths(mat, row, col + 1, current_path + 'R', n)\n\n        self.visited[row][col] = 0  # Backtrack\n\n    # Function to find all possible paths\n    def findPath(self, mat):\n        n = len(mat)\n        self.possible_paths = []\n        self.visited = [[0] * n for _ in range(n)]\n\n        if mat[0][0] == 0 or mat[n - 1][n - 1] == 0:\n            return []\n\n        self.explore_paths(mat, 0, 0, \"\", n)\n        self.possible_paths.sort()\n        return self.possible_paths\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    constructor() {\n        this.possiblePaths = [];\n        this.visitedCells = [];\n    }\n\n    // Function to explore paths using DFS\n    explorePaths(mat, row, col, currentPath, n) {\n        if (row === n - 1 && col === n - 1) {\n            this.possiblePaths.push(currentPath);\n            return;\n        }\n\n        if (mat[row][col] === 0 || this.visitedCells[row][col] === 1) {\n            return;\n        }\n\n        this.visitedCells[row][col] = 1;\n\n        if (row > 0)\n            this.explorePaths(mat, row - 1, col, currentPath + 'U', n); // Move up\n        if (col > 0)\n            this.explorePaths(mat, row, col - 1, currentPath + 'L', n); // Move left\n        if (row < n - 1)\n            this.explorePaths(mat, row + 1, col, currentPath + 'D', n); // Move down\n        if (col < n - 1)\n            this.explorePaths(mat, row, col + 1, currentPath + 'R', n); // Move right\n\n        this.visitedCells[row][col] = 0; // Backtrack\n    }\n\n    // Function to find all possible paths\n    findPath(mat) {\n        let n = mat.length;\n        this.possiblePaths = [];\n        this.visitedCells = Array.from({length : n}, () => Array(n).fill(0));\n\n        if (mat[0][0] === 0 || mat[n - 1][n - 1] === 0) {\n            return [];\n        }\n\n        this.explorePaths(mat, 0, 0, \"\", n);\n        this.possiblePaths.sort();\n        return this.possiblePaths;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}