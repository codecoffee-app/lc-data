{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705467,
            "title": "Rat Maze With Multiple Jumps",
            "titleSlug": "rat-maze-with-multiple-jumps3852",
            "content": "<p><span style=\"font-size: 18px;\">A maze is given as <strong>n*n</strong>&nbsp;matrix of blocks where source block is the upper left most block i.e., <strong>matrix[0][0]</strong> and destination block is lower rightmost block i.e., <strong>matrix[n-1][n-1]</strong>. A rat starts from source and has to reach the destination. </span></p>\n<p><span style=\"font-size: 18px;\">The rat can move in only two directions: first forward (if possible) or down. </span></p>\n<p><span style=\"font-size: 18px;\">In the maze matrix, <strong>0</strong> means the block is the <strong>dead </strong>end and <strong>non-zero number </strong>means the block can be used in the path from source to destination. The <strong>non-zero value</strong> of mat[i][j] indicates number of <strong>maximum </strong>jumps rat can make from cell <strong>mat[i][j]</strong>.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\">Return a maxtrix of size <strong>n*n </strong>in<strong> </strong>which&nbsp;</span><span style=\"font-size: 18px;\"><strong>1</strong> at (i, j) represents the cell is taken into the path otherwise <strong>0</strong> .</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note :</strong> If multiple solutions exist, the shortest earliest hop will be accepted. For the same hop distance at any point, <strong>forward </strong>will be <strong>preferred </strong>over <strong>downward</strong>.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>{{2,1,0,0},{3,0,0,1},{0,1,0,1},\n{0,0,0,1}}\n<strong>Output: </strong>{{1,0,0,0},{1,0,0,1},{0,0,0,1},\n{0,0,0,1}}\n<strong>Explanation: </strong>Rat started with matrix[0][0] and \ncan jump up to 2 steps right/down. First check \nmatrix[0][1] as it is 1, next check \nmatrix[0][2] ,this won't lead to the solution. \nThen check matrix[1][0], as this is 3(non-zero)\n,so we can make 3 jumps to reach matrix[1][3]. \nFrom matrix[1][3] we can move downwards taking \n1 jump each time to reach destination at \nmatrix[3][3].</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>{{2,1,0,0},{2,0,0,1},{0,1,0,1},\n{0,0,0,1}}\n<strong>Output:</strong> {{-1}}\n<strong>Explanation: </strong>As no path exists so, -1.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anyhting, Your task is to complete the function&nbsp;<strong>ShortestDistance()&nbsp;</strong>which takes the matrix as input parameter and returns a matrix of size n if path exists otherwise returns a matrix of 1x1 which contains -1. In output matrix, 1&nbsp;at (i, j) represents the cell is taken into the path otherwise 0 if any path exists.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n*n*k) where k is max(matrix[i][j])<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 50<br />1 &lt;= matrix[i][j] &lt;= 20</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A rat is placed in the top-left corner (0, 0) of an n x n maze and must reach the bottom-right corner (n-1, n-1). The maze is represented by a matrix where a value of 0 indicates a blocked path, and a non-zero value represents the maximum number of steps the rat can move either forward (right) or down from that cell. The goal is to find a path for the rat and return a matrix representing the path.  In the output matrix, 1 indicates the cell is part of the path, and 0 indicates it is not.  Prioritize moving forward over moving downward if both options lead to a valid path of the same length. If no path exists, return a 1x1 matrix containing -1.",
                "constraints": [
                    "1 <= n <= 50",
                    "1 <= matrix[i][j] <= 20"
                ],
                "testcases": [
                    {
                        "input": "{{2,1,0,0},{3,0,0,1},{0,1,0,1},{0,0,0,1}}",
                        "output": "{{1,0,0,0},{1,0,0,1},{0,0,0,1},{0,0,0,1}}",
                        "explanation": "The rat starts at (0,0) and can jump a maximum of 2 steps.  It moves down to (1,0), which has a value of 3.  From (1,0) it jumps right three times to (1,3). From (1,3), the rat proceeds downwards one step at a time until it reaches the destination (3,3)."
                    },
                    {
                        "input": "{{2,1,0,0},{2,0,0,1},{0,1,0,1},{0,0,0,1}}",
                        "output": "{{-1}}",
                        "explanation": "No path exists for the rat to reach the destination from the starting point."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">This problem is a simple backtracking problem. Check for the next cell from the current cell, if it is safe then go ahead. From any point, if you found the cell as blocked backtrack till you get the open cell (cell to be included in path to the destination).</span></p>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\npublic:\n\t//Function to check if the current position is safe to move or not.\n\tbool isSafe(int x, int y, vector<vector<int>>&matrix){\n\t\tint n = matrix.size();\n\t\t//Checking if the position is within the matrix boundaries and not a wall (0).\n\t\treturn (x >= 0 and x < n and y >=0 and y < n and matrix[x][y] != 0);\n\t}\n\t\n\t//Helper function to find the shortest distance.\n\tbool helper(int x, int y, vector<vector<int>>&matrix, vector<vector<int>>&sol){\n\t\tint n = matrix.size();\n\t\t//If reached to the destination, mark it as 1 in the solution matrix and return true.\n\t\tif(x == n-1 and y == n-1){\n\t\t\tsol[x][y] = 1;\n\t\t\treturn true;\n\t\t}\n\t\t//If the current position is safe to move.\n\t\tif(isSafe(x, y, matrix)){\n\t\t\t//Mark the current position as 1 in the solution matrix.\n\t\t\tsol[x][y] = 1;\n\t\t\t//Try moving right or down for each step within the range of value in the current position.\n\t\t\tfor(int step = 1; step <= matrix[x][y] and step < n; step++){\n\t\t\t\t//Try moving right.\n\t\t\t\tif(helper(x, y+step, matrix, sol))\n\t\t\t\t\treturn true;\n\t\t\t\t//Try moving down.\n\t\t\t\tif(helper(x+step, y, matrix, sol))\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\t//If no path found, mark the current position as 0 in the solution matrix and return false.\n\t\t\tsol[x][y] = 0;\n\t\t\treturn false;\n\t\t}\n\t\t//If the current position is not safe, return false.\n\t\treturn false;\n\t}\n\t\n\t//Function to find the shortest distance in the matrix.\n\tvector<vector<int>> ShortestDistance(vector<vector<int>>&matrix){\n\t\tint  n = matrix.size();\n\t\t//Create a solution matrix of size n*n and fill it with 0s.\n\t\tvector<vector<int>>sol(n, vector<int>(n, 0));\n\t\t//Call the helper function to find the shortest distance. If no path is found, return {-1}.\n\t\thelper(0, 0, matrix, sol);\n\t\tvector<vector<int>>ans;\n\t\tans.push_back({-1});\n\t\treturn sol[n-1][n-1] == 0 ? ans : sol;\n\t}\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    // Check if a given coordinates (x, y) are safe within the matrix boundaries and the value at that position is non-zero.\n\tboolean isSafe(int x, int y, int [][] matrix){\n\t\tint n = matrix.length;\n\t\treturn (x >= 0 && x < n && y >=0 && y < n && matrix[x][y] != 0);\n\t}\n\t\n\t// Recursive helper function to find the shortest distance from (0, 0) to (n-1, n-1) in the matrix.\n\tboolean helper(int x, int y, int [][] matrix, int [][] sol){\n\t\tint n = matrix.length;\n\t\t\n\t\t// If we have reached the destination (n-1, n-1), mark it as a valid path.\n\t\tif(x == n-1 && y == n-1){\n\t\t\tsol[x][y] = 1;\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t// If we are at a safe position, mark it as a valid path and explore all possible steps.\n\t\tif(isSafe(x, y, matrix)){\n\t\t\tsol[x][y] = 1;\n\t\t\t\n\t\t\t// Explore all possible steps from the current position.\n\t\t\tfor(int step = 1; step <= matrix[x][y] && step < n; step++){\n\t\t\t\t// Try moving right and check if it leads to a valid path.\n\t\t\t\tif(helper(x, y+step, matrix, sol))\n\t\t\t\t\treturn true;\n\t\t\t\t\n\t\t\t\t// Try moving down and check if it leads to a valid path.\n\t\t\t\tif(helper(x+step, y, matrix, sol))\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\t// If no valid path is found, mark the current position as invalid and backtrack.\n\t\t\tsol[x][y] = 0;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// If we are at an unsafe position, return false.\n\t\treturn false;\n\t}\n    \n    public int[][] ShortestDistance(int[][] matrix)\n    {\n        int  n = matrix.length;\n\t\tint [][] sol = new int[n][n];\n\t\t// Call the helper function to find the shortest distance path from (0, 0) to (n-1, n-1).\n\t\thelper(0, 0, matrix, sol);\n\t\t\n\t\t// If no valid path is found, return a matrix with a single element indicating failure.\n\t\tif(sol[n-1][n-1] == 0){\n\t\t    int [][] ans = new int[1][1];\n\t\t    ans[0][0] = -1;\n\t\t    return ans;\n\t\t}\n\t\t\n\t\t// Otherwise, return the solution matrix representing the shortest distance path.\n\t\treturn sol;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "def isSafe(x, y, n, mat):\n    #Check if the current cell is out of bounds or is blocked (contains a 0)\n    if (x < 0 or y < 0 or x > n - 1 or y > n - 1 or mat[x][y] == 0):\n        return False\n    return True\n\n\nclass Solution:\n\n    def ShortestDistance(self, mat):\n        #Create a 2D array to store the shortest distance matrix\n        self.res = [[0 for i in range(len(mat))] for i in range(len(mat))]\n        n = len(mat)\n\n        #If the starting cell is blocked, return -1\n        if mat[0][0] == 0 and n != 1:\n            return [[-1]]\n\n        def path(m, i, j, pathh):\n            #If we have reached the destination, mark it in the shortest distance matrix and return True\n            if (i == n - 1 and j == n - 1):\n                self.res[i][j] = 1\n                return True\n\n            #Check if the current cell is safe to move to\n            if isSafe(i, j, n, mat):\n                #Mark the current cell as visited in the shortest distance matrix\n                self.res[i][j] = 1\n\n                #Try all possible moves from the current cell\n                for x in range(1, m[i][j] + 1):\n                    #Move right\n                    if path(m, i, j + x, pathh):\n                        return True\n\n                    #Move down\n                    if path(m, i + x, j, pathh):\n                        return True\n\n                #If none of the moves leads to the destination, mark the current cell as unvisited and return False\n                self.res[i][j] = 0\n                return False\n            return False\n\n        #Call the path() function to find the shortest distance matrix\n        path(mat, 0, 0, \"\")\n        return self.res\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}