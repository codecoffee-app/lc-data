{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703464,
            "title": "Reaching the heights",
            "titleSlug": "reaching-the-heights1921",
            "content": "<p><span style=\"font-size:18px\">The teacher gives a mental ability question to Raju. The question is as follows:-</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Raju is in an elevator. Given by his teacher is an array of size N which denotes the number of floors and has a 1 based indexing. The elevator starts from the ground and moves up and down, X and Y floors respectively. There is a code used in the elevator according to which it moves up X floors given at odd indexes of the array and moves down Y floors given at even indexes of the array. He is asked to go to the highest floor possible. Help him to sort the array such that he reaches the highest floor after traversing the whole array from starting till the end, without skipping any index.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">He always prefers to move more number of floors up and less number of floors down. Once he gets into the elevator, the elevator should not reach the ground again, if it does return -1.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[ ] = {2, 3, 4, 5}\r\n<strong>Output :</strong> 5 2 4 3\r\n<strong>Explanation:</strong>\r\nArray can be arranged as {5,3,4,2} or \r\n{4,3,5,2} or {4,2,5,3} but it will get \r\narranged as {5,2,4,3} because he always \r\nprefer to move more number of floors up \r\nand less number of floors down.\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[ ] = {1, 1} <strong>\r\nOutput :</strong>  Not Possible </span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>game_with_number()</strong> that takes sizeOfArray <strong>(n)</strong>, an array <strong>(arr)</strong>, and return the sorted array or if it is Not Possible return <strong>-1</strong>. The driver code takes care of the printing.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*LOG(N)).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N).</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">1&nbsp;&le;&nbsp;N &le;&nbsp;10<sup>5</sup><br />\r\n1&nbsp;&le; arr[i]&nbsp;&le;&nbsp;10<sup>3</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We need to find the array such that Raju can reach the highest floor. For this we need to put the larger elements on the odd indexes and smaller elements on the even indexes of the array.</span></p>\n\n<p><span style=\"font-size:18px\">Therefore we first sort the array and put the larger elements in descending&nbsp;order on the odd indexes of the array and smaller elements in ascending&nbsp;order on the even indexes of the array because he always prefers to move more number of floors up and less numbers of floors down first.</span></p>\n\n<p><span style=\"font-size:18px\">&ldquo;Not Possible&rdquo; condition will only come when all the values of the array are equal.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Misc",
                "slug": "misc"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nvector<int> reaching_height(int n, int a[]) {\n    vector<int> v;\n    //If only one element is present, return the element as the result.\n    if (n == 1) {\n        v.push_back(a[0]);\n        return v;\n    }\n    \n    //Sort the array in ascending order.\n    std::sort(a, a+n);\n\n    //If all elements in the array are equal, return -1 as the result.\n    if (a[0] == a[n-1]) {\n        v.push_back(-1);\n        return v;\n    }\n    \n    int hi = n-1;\n    int lo = 0;\n    bool is_hi = true;\n    \n    //Alternate between choosing the highest and lowest elements of the array\n    //and add them to the result vector.\n    while (lo <= hi) {\n        if (is_hi) {\n            v.push_back(a[hi]);\n            hi--;\n        } else {\n            v.push_back(a[lo]);\n            lo++;\n        }\n        \n        //Toggle the flag to switch between choosing the highest and lowest elements.\n        is_hi ^= 1;\n    }\n    \n    return v;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Complete{\n    public static ArrayList<Integer> reaching_height (int n, int a[]) {\n        // Creating an ArrayList to store the result\n        ArrayList<Integer> v = new ArrayList<>();\n        \n        // If there is only one element, add it to the ArrayList and return\n        if (n == 1) {\n            v.add(a[0]);\n            return v;\n        }\n        \n        // Sorting the array in ascending order\n        Arrays.sort(a);\n        \n        // If all elements in the array are equal, add -1 to the ArrayList and return\n        if (a[0] == a[n-1]) {\n            v.add(-1);\n            return v;\n        }\n        \n        // Initializing variables for iterating through the array\n        int hi = n-1;\n        int lo = 0;\n        boolean is_hi = true;\n        \n        // Iterating through the array and adding elements alternately from high and low indices\n        while (lo <= hi) {\n            if (is_hi) {\n                v.add(a[hi]);\n                hi--;\n            } else {\n                v.add(a[lo]);\n                lo++;\n            }\n            is_hi ^= true; // Toggling the is_hi variable to switch between high and low indices\n        }\n        \n        // Returning the resulting ArrayList\n        return v;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "def reaching_height(n, arr): \r\n    # Function to find the heights reached by the person at different steps\r\n\r\n    v = []  # Initialize an empty list to store the heights\r\n    if (n == 1):\r\n        v.append(arr[0])  # If only one step, return the height reached at that step and exit\r\n        return v\r\n    arr.sort()  # Sort the array in ascending order\r\n    if (arr[0] == arr[n-1]):\r\n        v.append(-1)  # If all steps have the same height, return -1 to indicate it is not possible to reach different heights\r\n        return v\r\n    hi = n-1  # Initialize the index of highest step\r\n    lo = 0  # Initialize the index of lowest step\r\n    is_hi = 1  # Flag indicating whether to consider highest step or lowest step\r\n\r\n    # Loop to iterate through the steps and add the corresponding height to the list\r\n    while (lo <= hi):\r\n        if (is_hi):\r\n            v.append(arr[hi])  # Add the height at the highest step to the list\r\n            hi -= 1  # Decrement the index of highest step\r\n        else:\r\n            v.append(arr[lo])  # Add the height at the lowest step to the list\r\n            lo += 1  # Increment the index of lowest step\r\n        is_hi ^= 1  # Toggle the flag to alternate between highest step and lowest step\r\n\r\n    return v  # Return the list of heights reached at different steps",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number[]} arr\n * @returns {number[]}\n*/\n\nclass Solution\n{\n    //Function to find the maximum element in the array.\n    reachingHeight(n, arr)\n    {\n        //your code here\n        let v = [];\n        if (n == 1) {\n            v.push(arr[0]);\n            return v;\n        }\n        arr.sort((a, b) => a - b);\n        if (arr[0] == arr[n - 1]) {\n            return [-1];\n        }\n        let hi = n - 1;\n        let lo = 0;\n        let is_hi = true;\n\n        while (lo <= hi) {\n            if (is_hi) {\n                v.push(arr[hi]);\n                hi -= 1;\n            } else {\n                v.push(arr[lo]);\n                lo += 1;\n            }\n            is_hi = !is_hi;\n        }\n\n        return v;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}