{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704980,
            "title": "Reading books",
            "titleSlug": "reading-books3803",
            "content": "<p><span style=\"font-size: 18px;\">There are some kinds of books. Geek has to choose a book of a particular kind and read it loudly as many times as he can in the given time and earn points. Geek knows that reading a book of kind <strong>i</strong> once needs <strong>arr1</strong><sub>i</sub> minutes and it will give him <strong>arr2</strong><sub>i</sub> points. Geek has <strong>k</strong> minutes for reading books. During this time, he can only read a book of a particular kind as many times as he can so as to maximize his points. But he can not pick books of different kinds. Find the maximum points Geek can get.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> k = 10, arr1 = [3, 4, 5], arr2 = [4, 4, 5]\n<strong>Output:</strong> 12\n<strong>Explanation: </strong>If Geek picks book of first kind he can read it 3 times, he will get 3*4 = 12 points. If Geek picks book of second kind he can read it 2 times, he will 2*4 = 8 points. If Geek picks book of third kind he can read it 2 times, he will get 2*5 = 10 points. So the maximum possible points which he can earn in those 10 minutes is 12.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> k = 12, arr1 = [8, 5], arr2 = [100, 5]\n<strong>Output:</strong> 100\n<strong>Explanation: </strong>If Geek picks book of first kind he can read it 1 times, he will get 100*1 = 100 points. If Geek picks book of second kind he can read it 2 times, he will 5*2 = 10 points. So the maximum possible points which he can earn in those 12 minutes is 100.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; K, arr1<sub>i</sub>, arr2<sub>i</sub> &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek needs to maximize his points by reading books. He has 'k' minutes and can only read one type of book. Each book of type 'i' takes arr1[i] minutes to read and gives arr2[i] points. He can read the chosen book type as many times as possible within 'k' minutes. Determine the maximum points Geek can earn.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= K, arr1[i], arr2[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "k = 10, arr1 = [3, 4, 5], arr2 = [4, 4, 5]",
                        "output": "12",
                        "explanation": "Reading the first book type (3 minutes, 4 points) 3 times yields 12 points (3 * 4). Reading the second book type (4 minutes, 4 points) 2 times yields 8 points (2 * 4). Reading the third book type (5 minutes, 5 points) 2 times yields 10 points (2 * 5). The maximum is 12."
                    },
                    {
                        "input": "k = 12, arr1 = [8, 5], arr2 = [100, 5]",
                        "output": "100",
                        "explanation": "Reading the first book type (8 minutes, 100 points) 1 time yields 100 points (1 * 100). Reading the second book type (5 minutes, 5 points) 2 times yields 10 points (2 * 5). The maximum is 100."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Calculate the point for each book and take the maximum of all of them.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the maximum points achieved.\n    int maxPoint(int k, vector<int>& arr1, vector<int>& arr2) {\n        int n = arr1.size();\n\n        int maxi = 0;\n\n        // iterating over all the elements.\n        for (int i = 0; i < n; i++) {\n            // finding the maximum number of times an element can be selected.\n            int x = k / arr1[i];\n\n            // updating the maximum points if the current element gives more points.\n            maxi = max(maxi, x * arr2[i]);\n        }\n        // returning the maximum points achieved.\n        return maxi;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maxPoint(int k, int[] arr1, int[] arr2) {\n        int n = arr1.length;\n        int maxi = 0;\n\n        // Iterating over all the elements\n        for (int i = 0; i < n; i++) {\n            // Finding the maximum number of times an element can be selected\n            int x = k / arr1[i];\n\n            // Updating the maximum points if the current element gives more points\n            maxi = Math.max(maxi, x * arr2[i]);\n        }\n\n        // Returning the maximum points achieved\n        return maxi;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxPoint(self, k, arr1, arr2):\n        n = len(arr1)\n        maxi = 0\n\n        # Iterating over all the elements\n        for i in range(n):\n            # Finding the maximum number of times an element can be selected\n            x = k // arr1[i]\n\n            # Updating the maximum points if the current element gives more points\n            maxi = max(maxi, x * arr2[i])\n\n        # Returning the maximum points achieved\n        return maxi\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    maxPoint(k, arr1, arr2) {\n        let n = arr1.length;\n        let maxi = 0;\n\n        // Iterating over all the elements\n        for (let i = 0; i < n; i++) {\n            // Finding the maximum number of times an element can be selected\n            let x = Math.floor(k / arr1[i]);\n\n            // Updating the maximum points if the current element gives more points\n            maxi = Math.max(maxi, x * arr2[i]);\n        }\n\n        // Returning the maximum points achieved\n        return maxi;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}