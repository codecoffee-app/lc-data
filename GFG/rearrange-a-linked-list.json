{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700045,
            "title": "Rearrange a linked list",
            "titleSlug": "rearrange-a-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Given a singly linked list, the task is to rearrange it in a way that all odd position nodes are together and all even position nodes are together. (</span><span style=\"font-size: 18px;\">C</span><span style=\"font-size: 18px;\">onsidering 1-based indexing.</span><span style=\"font-size: 18px;\">)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong></span><span style=\"font-size: 18px;\"> You should place all odd-positioned nodes first and then the even-positioned ones. Also, the relative order of odd-positioned nodes and even-positioned nodes should be maintained.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;3-&gt;4\n<strong>Output: </strong>1-&gt;3-&gt;2-&gt;4 \n<strong>Explanation: </strong>Odd elements are 1, 3 and even elements are 2, 4. Hence, resultant linked list is 1-&gt;3-&gt;2-&gt;4<br /></span><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700045/Web/Other/blobid0_1722066423.png\" width=\"400\" height=\"120\" /> </pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5\n<strong>Output: </strong>1-&gt;3-&gt;5-&gt;2-&gt;4 \n<strong>Explanation:</strong> Odd elements are 1, 3, 5 and even elements are 2, 4. Hence, resultant linked list is 1-&gt;3-&gt;5-&gt;2-&gt;4.<br /></span><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700045/Web/Other/blobid1_1722066444.png\" width=\"393\" height=\"118\" /> </pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>4</sup><br />0 &le; node-&gt;data &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, rearrange it such that all nodes at odd positions (1-based indexing) appear before all nodes at even positions, while maintaining the relative order within each group.",
                "constraints": [
                    "1 <= number of nodes <= 10^4",
                    "0 <= node->data <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 1->2->3->4",
                        "output": "1->3->2->4",
                        "explanation": "The nodes at odd positions (1st and 3rd) are 1 and 3. The nodes at even positions (2nd and 4th) are 2 and 4. Combining them results in the linked list 1->3->2->4."
                    },
                    {
                        "input": "LinkedList: 1->2->3->4->5",
                        "output": "1->3->5->2->4",
                        "explanation": "The nodes at odd positions (1st, 3rd, and 5th) are 1, 3, and 5. The nodes at even positions (2nd and 4th) are 2 and 4. Combining them results in the linked list 1->3->5->2->4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to store nodes at odd index and even index separately.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void rearrangeEvenOdd(Node *head) {\n        // Corner case\n        if (head == NULL)\n            return;\n\n        // Initialize first Nodes of even and\n        // odd lists\n        Node *odd = head;\n        Node *even = head->next;\n\n        // Remember the first Node of even list so\n        // that we can connect the even list at the\n        // end of odd list.\n        Node *evenFirst = even;\n\n        while (1) {\n            // If there are no more Nodes, then connect\n            // first Node of even list to the last Node\n            // of odd list\n            if (!odd || !even || !(even->next)) {\n                odd->next = evenFirst;\n                break;\n            }\n\n            // Connecting odd Nodes\n            odd->next = even->next;\n            odd = even->next;\n\n            // If there are NO more even Nodes after\n            // current odd.\n            if (odd->next == NULL) {\n                even->next = NULL;\n                odd->next = evenFirst;\n                break;\n            }\n\n            // Connecting even Nodes\n            even->next = odd->next;\n            even = odd->next;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public void rearrangeEvenOdd(Node head) {\n        // Corner case\n        if (head == null) return;\n\n        // Initialize first nodes of even and\n        // odd lists\n        Node odd = head;\n        Node even = head.next;\n\n        // Remember the first node of even list so\n        // that we can connect the even list at the\n        // end of odd list.\n        Node evenFirst = even;\n\n        while (1 == 1) {\n            // If there are no more nodes,\n            // then connect first node of even\n            // list to the last node of odd list\n            if (odd == null || even == null || (even.next) == null) {\n                odd.next = evenFirst;\n                break;\n            }\n\n            // Connecting odd nodes\n            odd.next = even.next;\n            odd = even.next;\n\n            // If there are NO more even nodes\n            // after current odd.\n            if (odd.next == null) {\n                even.next = null;\n                odd.next = evenFirst;\n                break;\n            }\n\n            // Connecting even nodes\n            even.next = odd.next;\n            even = odd.next;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def rearrangeEvenOdd(self, head):\n\n        # Corner case\n        if (head == None):\n            return None\n\n        # Initialize first nodes of\n        # even and odd lists\n        odd = head\n        even = head.next\n\n        # Remember the first node of even list so\n        # that we can connect the even list at the\n        # end of odd list.\n        evenFirst = even\n\n        while (1 == 1):\n\n            # If there are no more nodes,\n            # then connect first node of even\n            # list to the last node of odd list\n            if (odd == None or even == None or (even.next) == None):\n                odd.next = evenFirst\n                break\n\n            # Connecting odd nodes\n            odd.next = even.next\n            odd = even.next\n\n            # If there are NO more even nodes\n            # after current odd.\n            if (odd.next == None):\n                even.next = None\n                odd.next = evenFirst\n                break\n\n            # Connecting even nodes\n            even.next = odd.next\n            even = odd.next\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    rearrangeEvenOdd(head) {\n        // Corner case\n        if (head === null) return;\n\n        // Initialize first Nodes of even and odd lists\n        let odd = head;\n        let even = head.next;\n\n        // Remember the first Node of even list so\n        // that we can connect the even list at the\n        // end of odd list.\n        let evenFirst = even;\n\n        while (true) {\n            // If there are no more Nodes, then connect\n            // first Node of even list to the last Node\n            // of odd list\n            if (!odd || !even || !(even.next)) {\n                odd.next = evenFirst;\n                break;\n            }\n\n            // Connecting odd Nodes\n            odd.next = even.next;\n            odd = even.next;\n\n            // If there are NO more even Nodes after\n            // current odd.\n            if (odd.next === null) {\n                even.next = null;\n                odd.next = evenFirst;\n                break;\n            }\n\n            // Connecting even Nodes\n            even.next = odd.next;\n            even = odd.next;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}