{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702998,
            "title": "Rearrange a string",
            "titleSlug": "rearrange-a-string4100",
            "content": "<p><span style=\"font-size:18px\">Given a string containing uppercase alphabets and integer digits (from 0 to 9), the task is to print the alphabets in the lexicographical order followed by the sum of digits.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;AC2BEW3&quot;\n<strong>Output:</strong> &quot;ABCEW5&quot;\n<strong>Explanation</strong>: 2 + 3 = 5 and we print all\nalphabets in the lexicographical order. \n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;ACCBA10D2EW30&quot;\n<strong>Output:</strong> &quot;AABCCDEW6&quot;\n<strong>Explanation</strong>: 0+1+2+3 = 6 and we print all\nalphabets in the lexicographical order. </span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>arrangeString()</strong>&nbsp;which takes the string <strong>S&nbsp;</strong>as inputs and returns the modified string.<br />\n<br />\n<strong>Expected Time Complexity:</strong>&nbsp;O(|S|)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(26)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &le; |S| &le; 10<sup>5</sup><br />\nS contains only upper case alphabets and digits.</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string containing uppercase alphabets and integer digits (from 0 to 9), arrange the alphabets in lexicographical order followed by the sum of the digits present in the string.",
                "constraints": [
                    "1 <= |S| <= 10^5",
                    "S contains only uppercase alphabets and digits."
                ],
                "testcases": [
                    {
                        "input": "AC2BEW3",
                        "output": "ABCEW5",
                        "explanation": "The alphabets 'A', 'C', 'B', 'E', and 'W' are arranged alphabetically, resulting in 'ABCEW'.  The digits '2' and '3' sum up to 5."
                    },
                    {
                        "input": "ACCBA10D2EW30",
                        "output": "AABCCDEW6",
                        "explanation": "The alphabets 'A', 'C', 'C', 'B', 'A', 'D', 'E', and 'W' are arranged alphabetically, resulting in 'AABCCDEW'. The digits '1', '0', '2', '3', and '0' sum up to 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Count frequency of each alphabet and sum of digits.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution\n{\n    public:\n    //Function to arrange the given string such that all the uppercase letters\n    //appear first followed by the sum of digits in the string.\n    string arrangeString(string str)\n    {\n        //creating an array to store the count of each uppercase letter.\n        int char_count[26] = {0};\n        \n        //variable to store the sum of digits.\n        int sum = 0;\n        \n        //iterating over each character in the string.\n        for (int i = 0; i < str.length(); i++){\n            \n            //if the character is an uppercase letter, increment the count in the array.\n            if (str[i]>='A' && str[i] <='Z')\n                char_count[str[i]-'A']++;\n            \n            //if the character is a digit, add it to the sum.\n            else\n                sum = sum + (str[i]-'0');\n        }\n    \n        //creating a result string to store the rearranged string.\n        string res = \"\";\n        \n        //iterating over each uppercase letter.\n        for (int i = 0; i < 26; i++){\n            \n            //getting the character corresponding to the current count in the array.\n            char ch = (char)('A'+i);\n            \n            //appending the character to the result string count number of times.\n            while (char_count[i]--)\n                res = res + ch;\n        }\n        \n        //if the sum of digits is greater than 0, converting it to string and appending to the result.\n        if (sum > 0)\n            res = res + to_string(sum);\n        \n        //returning the rearranged string.\n        return res;\n        \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    public string arrangeString(string str)\n    {\n        //creating an array to store the count of each uppercase letter.\n        int[] char_count = new int[26];\n\n        //variable to store the sum of digits.\n        int sum = 0;\n\n        //iterating over each character in the string.\n        for (int i = 0; i < str.Length; i++)\n        {\n            //if the character is an uppercase letter, increment the count in the array.\n            if (char.IsUpper(str[i]))\n                char_count[str[i] - 'A']++;\n\n            //if the character is a digit, add it to the sum.\n            else if (char.IsDigit(str[i]))\n                sum += str[i] - '0';\n        }\n\n        //creating a result string to store the rearranged string.\n        System.Text.StringBuilder res = new System.Text.StringBuilder();\n\n        //iterating over each uppercase letter.\n        for (int i = 0; i < 26; i++)\n        {\n            //getting the character corresponding to the current count in the array.\n            char ch = (char)('A' + i);\n\n            //appending the character to the result string count number of times.\n            for (int count = 0; count < char_count[i]; count++)\n            {\n                res.Append(ch);\n            }\n        }\n\n        //if the sum of digits is greater than 0, converting it to string and appending to the result.\n        if (sum > 0)\n            res.Append(sum.ToString());\n\n        //returning the rearranged string.\n        return res.ToString();\n    }\n}\n",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}