{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703115,
            "title": "Rearrange to Make arr[i] = i",
            "titleSlug": "rearrange-an-array-such-that-arri-i3618",
            "content": "<p><span style=\"font-size: 18px;\">Given a permutation of size n. The range of values for the array elements is from 0 to n-1. All elements may not be present in the array. If the element is not present then there will be -1 present in the array. Rearrange the array such that arr[i] = i and if arr[i] is not present then -1 at that place. Index i is 0-based.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [-1, -1, 6, 1, 9, 3, 2, -1, 4, -1]\n<strong>Output:</strong> [-1, 1, 2, 3, 4, -1, 6, -1, -1, 9]\n<strong>Explanation: </strong>In range 0 to 9, all except 0, 5, 7 and 8 are present. Hence, we print -1 instead of them.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [0, 1, 2, 3, 4, 5] <strong>\nOutput:</strong> [0, 1, 2, 3, 4, 5]<br /><strong>Explanation: </strong>In range 0 to 5, all number are present.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />0 &le; arr[i] &le; arr.size()-1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of size 'n' representing a permutation where elements range from 0 to n-1. Not all elements are guaranteed to be present. If an element is missing, its position in the array will be marked with -1. Rearrange the array such that `arr[i] = i`.  If the value 'i' is not present in the original array, set `arr[i]` to -1. The array is 0-indexed.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= arr.size()-1"
                ],
                "testcases": [
                    {
                        "input": "[-1, -1, 6, 1, 9, 3, 2, -1, 4, -1]",
                        "output": "[-1, 1, 2, 3, 4, -1, 6, -1, -1, 9]",
                        "explanation": "The values 0, 5, 7, and 8 are not present in the input array, therefore, their corresponding indices in the output are -1."
                    },
                    {
                        "input": "[0, 1, 2, 3, 4, 5]",
                        "output": "[0, 1, 2, 3, 4, 5]",
                        "explanation": "All values from 0 to 5 are present in the input array.  Therefore, the output array remains unchanged as each element at index i equals i."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use hashing the elements that are present.</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    void modifyArray(vector<int>& arr) {\n        int n = arr.size();\n        unordered_set<int> s;\n\n        // Add elements to the set\n        for (int i = 0; i < n; i++) {\n            if (arr[i] != -1) {\n                s.insert(arr[i]);\n            }\n        }\n\n        // Modify the array based on set contents\n        for (int i = 0; i < n; i++) {\n            if (s.find(i) != s.end()) {\n                arr[i] = i;\n            } else {\n                arr[i] = -1;\n            }\n        }\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public static void modifyArray(int[] arr) {\n        int n = arr.length;\n        HashSet<Integer> set = new HashSet<>();\n\n        // Adding elements to the HashSet\n        for (int i = 0; i < n; i++) {\n            if (arr[i] != -1) {\n                set.add(arr[i]);\n            }\n        }\n\n        // Modifying the array based on set contents\n        for (int i = 0; i < n; i++) {\n            if (set.contains(i)) {\n                arr[i] = i;\n            } else {\n                arr[i] = -1;\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def modifyArray(self, arr):\n        n = len(arr)\n        s = set()\n\n        # Add elements to the set\n        for i in range(n):\n            if arr[i] != -1:\n                s.add(arr[i])\n\n        # Modify the array based on set contents\n        for i in range(n):\n            if i in s:\n                arr[i] = i\n            else:\n                arr[i] = -1",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    modifyArray(arr) {\n        let n = arr.length;\n        let s = new Set();\n\n        // Add elements to the set\n        for (let i = 0; i < n; i++) {\n            if (arr[i] !== -1) {\n                s.add(arr[i]);\n            }\n        }\n\n        // Modify the array based on set contents\n        for (let i = 0; i < n; i++) {\n            if (s.has(i)) {\n                arr[i] = i;\n            } else {\n                arr[i] = -1;\n            }\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}