{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701207,
            "title": "Rearrange an array with O(1) extra space",
            "titleSlug": "rearrange-an-array-with-o1-extra-space3142",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr[]</strong>&nbsp;of size <strong>N</strong> where every element is in the range from&nbsp;<strong>0&nbsp;to&nbsp;n-1</strong>. Rearrange the given array so that the transformed array <strong>arr<sup>T</sup>[i]</strong> becomes&nbsp;<strong>arr[arr[i]]</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">NOTE:</span></strong><span style=\"font-size: 18px;\">&nbsp;<strong>arr </strong>and&nbsp;<strong>arr<sup>T</sup> </strong>are both same variables, representing the array before and after transformation respectively.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:<br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 2\narr[] = [1,0]\n<strong>Output: </strong>0 1<strong>\nExplanation: \n</strong>arr[arr[0]] = arr[1] = 0\narr[arr[1]] = arr[0] = 1<br /></span><span >So, arr<sup>T</sup> becomes {0, 1}</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 5\narr[] = [4,0,2,1,3]\n<strong>Output: </strong>3 4 2 0 1<strong>\nExplanation: \n</strong>arr[arr[0]] = arr[4] = 3\narr[arr[1]] = arr[0] = 4<br />arr[arr[2]] = arr[2] = 2<br />arr[arr[3]] = arr[1] = 0<br />arr[arr[4]] = arr[3] = 1<br />and so on<br /></span><span >So, arr<sup style=\"font-family: sans-serif;\">T</sup></span><span style=\"font-size: 14pt; font-family: sans-serif;\"> becomes {3, 4, 2, 0, 1}</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= N &lt;= 10<sup>5</sup><br />0 &lt;= arr[i] &lt; N</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of size `N` where every element is in the range from `0` to `N-1`, rearrange the array so that the element at index `i` becomes the element at index `arr[i]` of the original array.  In other words, transform `arr[i]` to `arr[arr[i]]` for all `i`. The transformed array replaces the original array.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= arr[i] < N"
                ],
                "testcases": [
                    {
                        "input": "N = 2\narr[] = [1,0]",
                        "output": "0 1",
                        "explanation": "After the transformation:\narr[0] becomes arr[arr[0]] = arr[1] = 0\narr[1] becomes arr[arr[1]] = arr[0] = 1\nTherefore, the transformed array is {0, 1}."
                    },
                    {
                        "input": "N = 5\narr[] = [4,0,2,1,3]",
                        "output": "3 4 2 0 1",
                        "explanation": "After the transformation:\narr[0] becomes arr[arr[0]] = arr[4] = 3\narr[1] becomes arr[arr[1]] = arr[0] = 4\narr[2] becomes arr[arr[2]] = arr[2] = 2\narr[3] becomes arr[arr[3]] = arr[1] = 0\narr[4] becomes arr[arr[4]] = arr[3] = 1\nTherefore, the transformed array is {3, 4, 2, 0, 1}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "",
            ""
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\n    public:\n    //Function to rearrange an array so that arr[i] becomes arr[arr[i]]\n    //with O(1) extra space.\n    void arrange(long long arr[], int n) {\n        int i;\n        \n        //Increasing all values by (arr[arr[i]]%n)*n to store the new element.\n        for(i=0;i<n;i++){\n            arr[i]+=(arr[arr[i]]%n)*n;\n        }\n        \n        //Since we had multiplied each element with n.\n        //We will divide by n too to get the new element at that \n        //position after rearranging.\n        for(i=0;i<n;i++){\n            arr[i]=arr[i]/n;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    //Function to rearrange an array so that arr[i] becomes arr[arr[i]]\n    //with O(1) extra space. \n    static void arrange(long arr[], int n)\n    {\n        int i = 0;\n        \n        //Increasing all values by (arr[arr[i]]%n)*n to store the new element.\n        for(i = 0; i < n; i++)\n         arr[(int)i]+=(arr[(int)arr[(int)i]]%n)*n;\n        \n        //Since we had multiplied each element with n.\n        //We will divide by n too to get the new element at that \n        //position after rearranging.\n        for(i = 0; i < n; i++)\n            arr[(int)i] = arr[(int)i]/n;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to rearrange an array so that arr[i] becomes arr[arr[i]]\n    #with O(1) extra space.\n    def arrange(self,arr, n): \n        \n        #Increasing all values by (arr[arr[i]]%n)*n to store the new element.\n        for i in range(0,n):\n            arr[i]+=(arr[arr[i]]%n)*n\n            \n        #Since we had multiplied each element with n.\n        #We will divide by n too to get the new element at that \n        #position after rearranging.\n        for i in range(0,n):\n            arr[i]=arr[i]//n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} n\n */\n \nclass Solution {\n    //Function to rearrange an array so that arr[i] becomes arr[arr[i]]\n    //with O(1) extra space.\n    arrange(arr, n){\n        let i;\n    \n        //Increasing all values by (arr[arr[i]]%n)*n to store the new element.\n        for(i=0;i<n;i++){\n            arr[i]+=(arr[arr[i]]%n)*n;\n        }\n        \n        //Since we had multiplied each element with n.\n        //We will divide by n too to get the new element at that \n        //position after rearranging.\n        for(i=0;i<n;i++){\n            arr[i]=Math.floor(arr[i]/n);\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}