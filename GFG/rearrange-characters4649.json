{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706286,
            "title": "Rearrange characters",
            "titleSlug": "rearrange-characters4649",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong> with repeated characters, the task is to rearrange characters in a string such that no two adjacent characters are the same.<br /><strong>Note:</strong> The string has only lowercase English alphabets and it can have multiple solutions. Return any one of them. If there is no possible solution, then print empty string (\"\").</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input : </span></strong><span style=\"font-size: 18px;\">s = \"aaabc\"<br /></span><span style=\"font-size: 18px;\"><strong>Output:</strong> 1\n</span><strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">\"aaabc\" can rearranged to \"abaca\" or \"acaba\" as no two adjacent characters are same in the output string.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> </span><span style=\"font-size: 18px;\">s= \"aaabb\"<br /></span><span style=\"font-size: 18px;\"><strong>Output:</strong> 1\n</span><strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">\"aaabb\" can rearranged to \"ababa\" as no two adjacent characters are same in the output string.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> </span><span style=\"font-size: 18px;\">s = \"aaaabc\"<br /></span><span style=\"font-size: 18px;\"><strong>Output:</strong> 0\n</span><strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">No combinations possible such that two adjacent characters are different.</span></pre>\n<div><strong><span style=\"font-size: 18px;\">Constraints :</span></strong></div>\n<div><span style=\"font-size: 18px;\">1 &lt;= s.size() &lt;= 10<sup>4</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of lowercase English alphabets, rearrange the characters such that no two adjacent characters are the same. Multiple solutions may exist; return any one of them.\n\nIf no such rearrangement is possible, return an empty string.",
                "constraints": [
                    "1 <= s.size() <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "aaabc",
                        "output": "1",
                        "explanation": "The string \"aaabc\" can be rearranged to \"abaca\" or \"acaba\", where no two adjacent characters are the same."
                    },
                    {
                        "input": "aaabb",
                        "output": "1",
                        "explanation": "The string \"aaabb\" can be rearranged to \"ababa\", where no two adjacent characters are the same."
                    },
                    {
                        "input": "aaaabc",
                        "output": "0",
                        "explanation": "No rearrangement is possible where two adjacent characters are different."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">1. Put highest frequency character first (a greedy approach). Use Binary Max Heap and put all characters and ordered by their frequencies (highest frequency character at root).<br />\none by one take highest frequency character from the heap and add it to result. Once added, decrease frequency of the character and temporarily move this character out of Max Heap so that it is not picked next time.</span></p>",
            "<p><span style=\"font-size:18px\">2. Steps involved:<br />\n1. Build a Priority Queue or max heap, <strong>pq</strong> that stores characters and their frequencies.<br />\n&nbsp;&nbsp;&nbsp; (Priority_queue or max_heap is built on the bases of frequency of character.)<br />\n2. Create a temporary Key that will used as the previous visited element ( previous element in resultant string. Initialize it { char = &lsquo;#&rsquo; , freq = &lsquo;-1&rsquo; }<br />\n3. While <strong>pq </strong>is not empty.<br />\n&nbsp;&nbsp;&nbsp;&nbsp; Pop an element and add it to result.<br />\n&nbsp;&nbsp;&nbsp;&nbsp; Decrease frequency of the popped element by &lsquo;1&rsquo;<br />\n&nbsp;&nbsp;&nbsp;&nbsp; Push the previous element back into the pq if it&rsquo;s frequency &gt; &lsquo;0&rsquo;<br />\n&nbsp;&nbsp;&nbsp;&nbsp; Make the current element as previous element for the next iteration.<br />\n4. If length of resultant string and original, print &ldquo;not possible&rdquo;. Else print result.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to rearrange character of a string\n    // so that no two adjacent characters are same\n    string rearrangeString(string &s) {\n        int n = s.length();\n\n        // Store frequencies of all characters in string\n        unordered_map<char, int> freq;\n        for (int i = 0; i < n; i++)\n            freq[s[i]]++;\n\n        // Insert all characters with their frequencies\n        // into a priority_queue\n        priority_queue<pair<int, char>> pq;\n        for (char c = 'a'; c <= 'z'; c++) {\n            if (freq[c] > 0) {\n                pq.push({freq[c], c});\n            }\n        }\n\n        string res = \"\";\n\n        // work as the previous visited element\n        // initial previous element be '#' and it's frequency '-1'\n        pair<int, char> prev = {-1, '#'};\n\n        while (!pq.empty()) {\n\n            // pop top element from queue and add it\n            // to string.\n            pair<int, char> p = pq.top();\n            pq.pop();\n\n            res.push_back(p.second);\n\n            // IF frequency of previous character is less\n            // than zero that means it is useless, we\n            // need not to push it\n            if (prev.first > 0)\n                pq.push(prev);\n\n            // Make current character as the previous 'char'\n            // decrease frequency by 'one'\n            p.first--;\n            prev = p;\n        }\n\n        // If length of the resultant string and original\n        // string is not same then string is not valid\n        if (res.size() != n)\n            return \"\";\n\n        // Valid String\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to rearrange character of a string\n    // so that no two adjacent characters are same\n    static String rearrangeString(String s) {\n        int n = s.length();\n\n        // Store frequencies of all characters in string\n        Map<Character, Integer> freq = new HashMap<>();\n        for (char c : s.toCharArray()) freq.put(c, freq.getOrDefault(c, 0) + 1);\n\n        // Insert all characters with their frequencies\n        // into a priority_queue\n        PriorityQueue<Map.Entry<Character, Integer>> pq =\n            new PriorityQueue<>((a, b) -> b.getValue() - a.getValue());\n        pq.addAll(freq.entrySet());\n\n        StringBuilder res = new StringBuilder();\n\n        // Work as the previous visited element\n        // Initial previous element be '#' and its frequency '-1'\n        Map.Entry<Character, Integer> prev = new AbstractMap.SimpleEntry<>('#', -1);\n\n        while (!pq.isEmpty()) {\n            // Pop top element from queue and add it\n            // to string.\n            Map.Entry<Character, Integer> p = pq.poll();\n            res.append(p.getKey());\n\n            // If frequency of previous character is less\n            // than zero that means it is useless, we\n            // need not to push it\n            if (prev.getValue() > 0) pq.offer(prev);\n\n            // Make current character as the previous 'char'\n            // decrease frequency by 'one'\n            prev = new AbstractMap.SimpleEntry<>(p.getKey(), p.getValue() - 1);\n        }\n\n        // If length of the resultant string and original\n        // string is not same then string is not valid\n        if (res.length() != n) return \"\";\n\n        // Valid String\n        return res.toString();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import Counter\nimport heapq\n\n\nclass Solution:\n\n    def rearrangeString(self, s):\n        n = len(s)\n\n        # Store frequencies of all characters in string\n        freq = Counter(s)\n\n        # Insert all characters with their frequencies\n        # into a max heap\n        pq = [(-value, key) for key, value in freq.items()]\n        heapq.heapify(pq)\n\n        res = []\n        prev = (0, '')  # previous character and its remaining count\n\n        while pq:\n            # Pop top element from queue and add it\n            # to string.\n            count, char = heapq.heappop(pq)\n            res.append(char)\n\n            # If frequency of previous character is less\n            # than zero that means it is useless, we\n            # need not to push it\n            if prev[0] < 0:\n                heapq.heappush(pq, prev)\n\n            # Make current character as the previous 'char'\n            # decrease frequency by 'one'\n            prev = (count + 1, char)\n\n        # If length of the resultant string and original\n        # string is not same then string is not valid\n        if len(res) != n:\n            return \"\"\n\n        # Valid String\n        return \"\".join(res)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class MaxHeap {\n    constructor() { this.heap = []; }\n\n    size() { return this.heap.length; }\n\n    isEmpty() { return this.size() === 0; }\n\n    insert(count, char) {\n        this.heap.push([ count, char ]);\n        this.heapifyUp();\n    }\n\n    extractMax() {\n        if (this.isEmpty()) return null;\n        const max = this.heap[0];\n        const last = this.heap.pop();\n        if (!this.isEmpty()) {\n            this.heap[0] = last;\n            this.heapifyDown();\n        }\n        return max;\n    }\n\n    heapifyUp() {\n        let index = this.size() - 1;\n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            if (this.heap[parentIndex][0] >= this.heap[index][0]) break;\n            [this.heap[parentIndex], this.heap[index]] =\n                [ this.heap[index], this.heap[parentIndex] ];\n            index = parentIndex;\n        }\n    }\n\n    heapifyDown() {\n        let index = 0;\n        while (2 * index + 1 < this.size()) {\n            let leftChild = 2 * index + 1;\n            let rightChild = 2 * index + 2;\n            let largest = leftChild;\n            if (rightChild < this.size() &&\n                this.heap[rightChild][0] > this.heap[leftChild][0]) {\n                largest = rightChild;\n            }\n            if (this.heap[index][0] >= this.heap[largest][0]) break;\n            [this.heap[index], this.heap[largest]] =\n                [ this.heap[largest], this.heap[index] ];\n            index = largest;\n        }\n    }\n}\n\nclass Solution {\n    // Function to rearrange characters in a string\n    // so that no two adjacent characters are the same\n    rearrangeString(s) {\n        let n = s.length;\n\n        // Store frequencies of all characters in string\n        let freq = {};\n        for (let char of s) {\n            freq[char] = (freq[char] || 0) + 1;\n        }\n\n        // Insert all characters with their frequencies into a max heap\n        let pq = new MaxHeap();\n        for (let [char, count] of Object.entries(freq)) {\n            pq.insert(count, char);\n        }\n\n        let res = [];\n        let prev = [ 0, '' ];\n\n        while (!pq.isEmpty()) {\n            // Extract the character with the highest frequency\n            let [count, char] = pq.extractMax();\n            res.push(char);\n\n            // If the previous character still has a remaining count, reinsert it\n            if (prev[0] > 0) {\n                pq.insert(prev[0], prev[1]);\n            }\n\n            // Update previous character with decremented frequency\n            prev = [ count - 1, char ];\n        }\n\n        // If length of the resultant string and original string is not the same, return\n        // \"\"\n        return res.length === n ? res.join('') : \"\";\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}