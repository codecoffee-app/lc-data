{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705801,
            "title": "Rearrange Geek and his Classmates",
            "titleSlug": "rearrange-geek-and-his-classmates--141630",
            "content": "<p><span style=\"font-size:18px\">Geek and his classmates are playing a prank on their Computer Science teacher. They change places every time the teacher turns to look at the blackboard.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Each of the <strong>N</strong> students in the class can be identified by a unique roll number <strong>X </strong>and each desk has a number <strong>i </strong>associated with it. Only one student can sit on one desk.&nbsp;<br />\r\nEach time the teacher turns her back, a student with roll number X sitting on desk number i gets up and takes the place of the student with roll number i.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">If the current position of <strong>N</strong> students in the class is given to you in an array, such that<strong> i</strong> is the desk number and <strong>a[i]</strong> is the roll number of the student sitting on the desk, can you modify <strong>a[ ] </strong>to represent the next position of all the students?<br />\r\n<strong>Note:&nbsp;</strong>The array a[ ] will be a permutation of the array : {0, 1, 2, 3, ...., n-1}.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 6\r\na[] = {0, 5, 1, 2, 4, 3}\r\n<strong>Output: </strong>0 3 5 1 4 2\r\n<strong>Explanation: </strong>After reshuffling, the modified \r\nposition of all the students would be \r\n{</span><span style=\"font-size:18px\">0, 3, 5, 1, 4, 2}.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 5\r\na[] = {4, 3, 2, 1, 0}\r\n<strong>Output:</strong> 0 1 2 3 4 \r\n<strong>Explanation:</strong> </span><span style=\"font-size:18px\">After reshuffling, the modified \r\nposition of all the students would be \r\n{</span><span style=\"font-size:18px\">0, 1, 2, 3, 4}.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\r\nYou dont need to read input or print anything. Complete the function <strong>prank() </strong>which takes the array <strong>a[ ]</strong> and its size <strong>N</strong> as input parameters and modifies the array in-place to reflect the new arrangement.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>5</sup><br />\r\n0 &le; a[i] &le; N-1</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek and his classmates are playing a prank on their Computer Science teacher. They swap positions each time the teacher looks at the blackboard.\n\nEach of the N students has a unique roll number X, and each desk has a number i. Only one student can occupy a desk. When the teacher isn't looking, the student with roll number X at desk i moves to the desk currently occupied by the student with roll number i.\n\nGiven an array 'a' representing the current arrangement, where 'i' is the desk number and a[i] is the roll number of the student sitting at that desk, modify the array 'a' to reflect the new positions after the swap.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= a[i] <= N-1"
                ],
                "testcases": [
                    {
                        "input": "N = 6\na[] = {0, 5, 1, 2, 4, 3}",
                        "output": "0 3 5 1 4 2",
                        "explanation": "After reshuffling, student with roll number a[i] now sits on i-th desk. So, student on 0th desk remains on 0th desk. Student on 1st desk, which has roll number 5, goes to 5th desk which has roll number 3 before the change. So, now student with roll number 3 is on the 1st desk."
                    },
                    {
                        "input": "N = 5\na[] = {4, 3, 2, 1, 0}",
                        "output": "0 1 2 3 4",
                        "explanation": "After reshuffling, student with roll number a[i] now sits on i-th desk. So, student on 0th desk, which has roll number 4, goes to desk number 4. Student on 1st desk, which has roll number 3, goes to desk number 3. Student on 2nd desk, which has roll number 2, goes to desk number 2. Student on 3rd desk, which has roll number 1, goes to desk number 1. Student on 4th desk, which has roll number 0, goes to desk number 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use simple mathematics and modular arithmetic.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to prank the array\n    void prank(long long a[], int n){\n\n        long long N = n;\n        // Loop through the array to modify each element\n        for(int i = 0;i<n;i++){\n            // Perform the prank calculation on each element\n            a[i] = a[i] + (a[a[i]]%N) * N;\n        }\n\n        // Loop through the array to revert the modified elements\n        for(int i = 0;i<n;i++)\n            // Divide each element by N to revert the modification\n            a[i] = a[i]/N;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution \n{ \n    // Function to perform the prank\n    void prank(long[] a, int n)  \n    { \n        // Calculating the size of the array\n        long N = n;\n        \n        // Performing the prank\n        for(int i = 0;i<n;i++){\n            // Adding the remainder of a[i] divided by N multiplied by N to a[i]\n            a[i] = a[i] + (a[(int )a[i]]%N) * N;\n        }\n\n        // Dividing each element of the array by N to get the original values\n        for(int i = 0;i<n;i++)\n            a[i] = a[i]/N;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\nclass Solution:\r\n    # Function to perform the prank.\r\n    def prank(self, a, n): \r\n        # Transforming the array elements using the given formula.\r\n        for i in range(n):\r\n            a[i] = a[i] + (a[a[i]]%n) * n\r\n\r\n        # Bringing back the original elements by dividing with n.\r\n        for i in range(n):\r\n            a[i] = a[i]//n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    prank(a,n){\n       \n       let N = n;\n        for(let i = 0;i<n;i++){\n            a[i] = a[i] + (a[a[i]]%N) * N;\n        }\n\n        for(let i = 0;i<n;i++)\n            a[i] = ~~(a[i]/N);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}