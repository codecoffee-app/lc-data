{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700103,
            "title": "Rearrange linked list in-place",
            "titleSlug": "rearrange-linked-list-in-place",
            "content": "<p><span style=\"font-size: 18px;\">Given a singly linked list L0 -&gt; L1 -&gt; &hellip; -&gt; Ln-1 -&gt; Ln. Rearrange the nodes in the list so that the newly formed list is: L0 -&gt; Ln -&gt; L1 -&gt; Ln-1 -&gt; L2 -&gt; Ln-2.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">LinkedList : 1-&gt;2-&gt;3-&gt;4<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700103/Web/Other/blobid0_1720781526.png\" width=\"300\" height=\"65\" /><br /><strong>Output: </strong>1-&gt;4-&gt;2-&gt;3<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700103/Web/Other/blobid1_1720781538.png\" width=\"300\" height=\"60\" /><strong>\nExplanation: </strong>After rearranging the linked list as required, we have 1, 4, 2 and 3 as the elements of the linked list.</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">LinkedList : 1-&gt;2-&gt;3-&gt;4-&gt;5<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700103/Web/Other/blobid2_1720781599.png\" width=\"400\" height=\"62\" /><br /><strong>Output: </strong>1-&gt;5-&gt;2-&gt;4-&gt;3<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700103/Web/Other/blobid3_1720781612.png\" width=\"400\" height=\"67\" /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= node-&gt;data &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Split the list into two halves, reverse the second half, and merge the two lists.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node *inPlace(Node *root) {\n        Node *slow = root;       // Initializing slow pointer to root node\n        Node *fast = slow->next; // Initializing fast pointer to next node of root\n\n        while (\n            fast &&\n            fast->next) // Iterating until fast pointer reaches end of the linked list\n        {\n            slow = slow->next;       // Incrementing slow pointer by one node\n            fast = fast->next->next; // Incrementing fast pointer by two nodes\n        }\n\n        Node *head1 = root;       // First half of the linked list\n        Node *head2 = slow->next; // Second half of the linked list\n        slow->next =\n            NULL; // Breaking the link between first and second half of the linked list\n\n        Node *prev = NULL; // Initializing previous pointer to null\n        Node *cur =\n            head2;  // Initializing current pointer to second half of the linked list\n        Node *next; // Initializing next pointer\n\n        // Reversing the second half of the linked list\n        while (cur != NULL) {\n            next = cur->next; // Storing the next node of current node\n            cur->next = prev; // Making the current node point to previous node\n            prev = cur;       // Moving the previous pointer to current node\n            cur = next;       // Moving the current pointer to next node\n        }\n\n        head2 = prev; // Updating head2 to point to the reversed second half of the\n                      // linked list\n\n        // Merging the first and second half of the linked list\n        root = new Node(0); // Creating a dummy node\n        Node *temp = root;  // Initializing a temporary pointer to dummy node\n        while (head1 != NULL ||\n               head2 != NULL) // Iterating until both halves of linked list is traversed\n        {\n            if (head1 != NULL) // If there are still nodes in first half\n            {\n                temp->next =\n                    head1; // Linking the current node of first half to temp node\n                temp = temp->next;   // Moving the temp pointer to the next node\n                head1 = head1->next; // Moving the head1 pointer to the next node\n            }\n            if (head2 != NULL) // If there are still nodes in second half\n            {\n                temp->next =\n                    head2; // Linking the current node of second half to temp node\n                temp = temp->next;   // Moving the temp pointer to the next node\n                head2 = head2->next; // Moving the head2 pointer to the next node\n            }\n        }\n\n        return root->next; // Returning the merged linked list excluding the dummy node\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public Node inPlace(Node root) {\n        Node slow = root;\n        Node fast = slow.next;\n\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        Node head1 = root;\n        Node head2 = slow.next;\n        slow.next = null;\n\n        Node prev = null;\n        Node cur = head2;\n        Node next;\n\n        while (cur != null) {\n            next = cur.next;\n            cur.next = prev;\n            prev = cur;\n            cur = next;\n        }\n\n        head2 = prev;\n\n        Node dummy = new Node(0);\n        Node temp = dummy;\n        while (head1 != null || head2 != null) {\n            if (head1 != null) {\n                temp.next = head1;\n                temp = temp.next;\n                head1 = head1.next;\n            }\n            if (head2 != null) {\n                temp.next = head2;\n                temp = temp.next;\n                head2 = head2.next;\n            }\n        }\n\n        return dummy.next;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def inPlace(self, root):\n        slow = root\n        fast = root.next\n\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n        head1 = root\n        head2 = slow.next\n        slow.next = None\n\n        prev = None\n        cur = head2\n\n        while cur:\n            next = cur.next\n            cur.next = prev\n            prev = cur\n            cur = next\n\n        head2 = prev\n\n        dummy = Node(0)\n        temp = dummy\n        while head1 or head2:\n            if head1:\n                temp.next = head1\n                temp = temp.next\n                head1 = head1.next\n            if head2:\n                temp.next = head2\n                temp = temp.next\n                head2 = head2.next\n\n        return dummy.next\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}