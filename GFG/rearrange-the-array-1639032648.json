{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709347,
            "title": "Rearrange the array",
            "titleSlug": "rearrange-the-array-1639032648",
            "content": "<p><span style=\"font-size: 18px;\">Given an sequence from 1 to N and also given an array&nbsp;<strong>arr[]</strong>&nbsp;of size&nbsp;<strong>N</strong>. Basically the array is the permutation of 1 to N which determines that the element from i<sup>th</sup>&nbsp;position should move to the j<sup>th</sup>&nbsp;position.&nbsp;Now the task is to find the minimum number of operations such that each array element is present at its original positions.</span><br /><span style=\"font-size: 18px;\">(For more understanding please go through the examples)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> the answer can be large, so return the answer <strong>modulo 10^9+7.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 3, arr[] = {1,2,3}\n<strong>Output:</strong> 1\n</span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>\nGiven special arrangement <strong>arr[]</strong>: \n1 2 3\nGiven sequence \n1 2 3\nso 1 should go 1<sup>th</sup> position, 2 should\ngo 2<sup>nd</sup> position and 3 should go 3<sup>rd</sup>\nposition. So the minimum number of operation\nneeded is 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 5, arr[] = {2,3,1,5,4}\n<strong>Output:</strong> 6</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:\n</strong>Given special arrangement arr[]:\n2 3 1 5 4\nGiven sequence is:\n1 2 3 4 5\nso, here we explained one step,\n1 should go to 2<sup>nd</sup> position, 2 should go \n3<sup>rd</sup> position, 3 should go 1<sup>st</sup> position, 4 \nshould go 5<sup>th</sup> and 5 should go 4<sup>th</sup> position. \nthese are the required. So after 1st operation\nnew sqquence will look like \n3 1 2 5 4.\nHere we explained the complete operations.\noperations for the array\n0. 1 2 3 4 5\n1. 3 1 2 5 4\n2. 2 3 1 4 5\n3. 1 2 3 5 4\n4. 3 1 2 4 5\n5. 2 3 1 5 4\n6. 1 2 3 4 5.\nSo after 6th operations the \narray rearrange itself to \nits original positions.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function <strong>rearrange_array()&nbsp;</strong>which take&nbsp;<strong>arr[] </strong>of size <strong>N</strong> as input parameter and returns an integer which denotes the minimum number of operations needed.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sequence of numbers from 1 to N, and an array `arr[]` of size N representing a permutation of these numbers. The array `arr` defines how elements should be rearranged: the element at index `i` should move to the index `arr[i] - 1`.  Determine the minimum number of operations required to return the array to its original state where each element is at its correct sorted position (i.e., `arr[i] = i + 1` for all `i`).\n\nNote: The answer can be large, so return the result modulo 10^9+7.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 3, arr[] = {1,2,3}",
                        "output": "1",
                        "explanation": "The array is already in its original state. No rearrangement is needed, so only one operation (doing nothing) is needed."
                    },
                    {
                        "input": "N = 5, arr[] = {2,3,1,5,4}",
                        "output": "6",
                        "explanation": "The array transforms as follows:\nInitial: 1 2 3 4 5\nStep 1: 3 1 2 5 4\nStep 2: 2 3 1 4 5\nStep 3: 1 2 3 5 4\nStep 4: 3 1 2 4 5\nStep 5: 2 3 1 5 4\nStep 6: 1 2 3 4 5\nIt takes 6 operations to return to the original arrangement."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find all independent cycle of rotation and then find the LCM of the length of each cycle.</p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "LCS",
                "slug": "lcs"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n\r\n    #define M 1000000007 // modulo value for calculations\r\n    #define K 1000005 // size of prime array\r\n    #define pb push_back // push_back function for vector\r\n\r\n    public:\r\n    vector<long long int> prime1; // vector to store prime numbers\r\n    Solution(){\r\n        prime1.resize(K,0); // initialize prime vector with 0    \r\n    }\r\n    \r\n    // function to generate prime numbers upto K using sieve of Eratosthenes\r\n    void sieve(){\r\n        for(long long int i=2;i<1000005;i++){\r\n            if(prime1[i]==0){\r\n                for(long long int j=i;j<1000005;j+=i){\r\n                    prime1[j]=i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // function to calculate power of a number modulo M\r\n    long long int power(long long int a,long long int n){\r\n        if (n == 0) \r\n            return 1; \r\n        long long int p = power(a, n / 2) % M; \r\n        p = (p * p) % M; \r\n        if (n & 1) \r\n            p = (p * a) % M; \r\n        return p; \r\n    }\r\n    \r\n    // function to calculate the LCM of all cycle lengths\r\n    long long int lcm_calc(vector <long long int> &cycle_len){\r\n        unordered_map<long long int,long long int> m; // map to store maximum frequency of prime factors\r\n         unordered_map <long long int,long long int>:: iterator itr;\r\n        for(long long int i=0;i<cycle_len.size();i++){\r\n            unordered_map<long long int,long long int> m1;\r\n            long long int z=cycle_len[i];\r\n            while(z>1){\r\n                int temp=prime1[z];\r\n                m1[temp]+=1;\r\n                z=z/temp;\r\n            }\r\n            for(itr=m1.begin();itr!=m1.end();itr++){\r\n                m[itr->first]=max(itr->second,m[itr->first]);\r\n            }\r\n        }\r\n        // calculate LCM using maximum frequency of prime factors\r\n        long long int lcm=1;\r\n        for(itr=m.begin();itr!=m.end();itr++){\r\n                lcm=(lcm*power(itr->first,itr->second))%M;\r\n        }\r\n        return lcm;\r\n    }\r\n    \r\n    // DFS function to find cycle lengths in the array\r\n    void DFS(vector <int> &a,vector <long long int> &visited,long long int pos,long long int p){\r\n        if(visited[pos]==0){\r\n            visited[pos]=p;\r\n        }\r\n        else{\r\n            return ;\r\n        }\r\n        DFS(a,visited,a[pos]-1,p);\r\n    }\r\n    \r\n    // main function to rearrange the array\r\n    int rearrange_array(vector<int> a){\r\n        long long int n = a.size();\r\n        vector <long long int> visited(n,0); // vector to store visited nodes\r\n        long long int p=1; // variable to store number of cycles\r\n        for(long long int i=0;i<n;i++){\r\n            if(visited[i]==0){\r\n                DFS(a,visited,i,p);\r\n                p++;\r\n            }\r\n        }\r\n        p-=1; // reduce p by 1 as it represents the number of cycles\r\n        vector <long long int> cycle_len(p,0); // vector to store lengths of each cycle\r\n        for(long long int i=0;i<n;i++){\r\n            cycle_len[visited[i]-1]+=1; // increment length of cycle visited[i]\r\n        }\r\n        sieve(); // generate prime numbers\r\n        long long int ans=lcm_calc(cycle_len); // calculate LCM of cycle lengths\r\n        ans = (ans+M)%M; // take modulo of answer\r\n        return (int)ans; // return answer as integer\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}