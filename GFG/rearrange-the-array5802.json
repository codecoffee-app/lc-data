{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703840,
            "title": "Rearrange the array",
            "titleSlug": "rearrange-the-array5802",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[] </strong>containing integers,&nbsp; your task is to print the array in the order &ndash; smallest number, largest number, 2nd smallest number, 2nd largest number, 3rd smallest number, 3rd largest number and so on.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 9, 2, 8, 3, 7, 4, 6, 5]\n<strong>Output: </strong>[1, 9, 2, 8, 3, 7, 4, 6, 5]\n<strong>Explanation: </strong>Smallest number is 1. Largest number is 9. 2nd smallest number is 2. Then 2nd largest number is 8. And so on.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4]\n<strong>Output: </strong>[1, 4, 2, 3]\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:&nbsp;</strong><br />1 &lt;= arr.size()&lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;=10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, rearrange the elements to follow the pattern: smallest, largest, second smallest, second largest, third smallest, third largest, and so on.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 9, 2, 8, 3, 7, 4, 6, 5]",
                        "output": "[1, 9, 2, 8, 3, 7, 4, 6, 5]",
                        "explanation": "The array is rearranged by taking the smallest (1), then the largest (9), then the next smallest (2), and so on."
                    },
                    {
                        "input": "[1, 2, 3, 4]",
                        "output": "[1, 4, 2, 3]",
                        "explanation": "The array is rearranged by taking the smallest (1), then the largest (4), then the next smallest (2), and then the next largest (3)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The solution rearranges the array by sorting it and then alternately placing the smallest and largest remaining elements into a new array.</span></p>",
            "<p><span >1. Sort the elements of an array.</span><br /><span >2. Take two variables say i and j and point them to the first and last index of the array respectively.</span><br /><span >3. Now run a loop and store the elements in the array one by one by incrementing i and decrementing j.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n\n    // Function which arrange the array.\n    void rearrangeArray(vector<int>& arr) {\n        // Sorting the array elements\n        sort(arr.begin(), arr.end());\n        int n = arr.size();\n        int tempArr[n]; // To store modified array\n\n        // Adding numbers from sorted array to\n        // new array accordingly\n        int tempArrIndex = 0;\n\n        // Traverse from begin and end simultaneously\n        int i = 0, j = n - 1;\n        while (i < j) {\n            tempArr[tempArrIndex++] = arr[i++];\n            tempArr[tempArrIndex++] = arr[j--];\n        }\n        if (i == j) {\n            tempArr[tempArrIndex] = arr[i];\n        }\n\n        // Modifying original array\n        for (int i = 0; i < n; i++)\n            arr[i] = tempArr[i];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "import java.util.*;\n\nclass Solution {\n\n    // Function to rearrange the array.\n    public void rearrangeArray(int[] arr) {\n        // Sorting the array elements\n        Arrays.sort(arr);\n\n        int n = arr.length;\n        int[] tempArr = new int[n]; // To store the modified array\n\n        // Adding numbers from sorted array to\n        // new array accordingly\n        int tempArrIndex = 0;\n\n        // Traverse from the beginning and end simultaneously\n        int i = 0, j = n - 1;\n        while (i < j) {\n            tempArr[tempArrIndex++] = arr[i++];\n            tempArr[tempArrIndex++] = arr[j--];\n        }\n        if (i == j) {\n            tempArr[tempArrIndex] = arr[i];\n        }\n\n        // Modifying the original array\n        for (int k = 0; k < n; k++) {\n            arr[k] = tempArr[k];\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def rearrangeArray(self, arr):\n        # Sorting the array elements\n        arr.sort()\n\n        n = len(arr)\n        temp_arr = [0] * n  # To store the modified array\n\n        # Adding numbers from the sorted array to\n        # the new array accordingly\n        temp_arr_index = 0\n\n        # Traverse from the beginning and end simultaneously\n        i = 0\n        j = n - 1\n        while i < j:\n            temp_arr[temp_arr_index] = arr[i]\n            temp_arr_index += 1\n            i += 1\n\n            temp_arr[temp_arr_index] = arr[j]\n            temp_arr_index += 1\n            j -= 1\n\n        if i == j:\n            temp_arr[temp_arr_index] = arr[i]\n\n        # Modifying the original array\n        for k in range(n):\n            arr[k] = temp_arr[k]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for Javascript\n\n/**\n * @param {number[]} arr\n * @param {number} n\n */\n\nclass Solution {\n    rearrangeArray(arr) {\n        // Sorting the array elements\n        arr.sort((a, b) => a - b);\n\n        const n = arr.length;\n        const tempArr = new Array(n); // To store the modified array\n\n        // Adding numbers from the sorted array to\n        // the new array accordingly\n        let tempArrIndex = 0;\n\n        // Traverse from the beginning and end simultaneously\n        let i = 0;\n        let j = n - 1;\n        while (i < j) {\n            tempArr[tempArrIndex++] = arr[i++];\n            tempArr[tempArrIndex++] = arr[j--];\n        }\n\n        if (i === j) {\n            tempArr[tempArrIndex] = arr[i];\n        }\n\n        // Modifying the original array\n        for (let k = 0; k < n; k++) {\n            arr[k] = tempArr[k];\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}