{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704717,
            "title": "Recamans sequence",
            "titleSlug": "recamans-sequence4856",
            "content": "<p><span >Given an integer <strong>n</strong>, return the first n elements of <a href=\"http://mathworld.wolfram.com/RecamansSequence.html\"><span style=\"text-decoration: underline;\"><em><strong><span style=\"color: #236fa1; text-decoration: underline;\">Recaman&rsquo;s sequence</span></strong></em></span></a>.<br />It is a function with domain and co-domain as whole numbers. It is recursively defined as below:<br />Specifically, let a(n) denote the (n+1)<sup>th</sup> term. (0 being the 1<sup>st</sup> term).<br />The rule says:<br /></span><span >a(0) = 0<br />a(n) = a(n-1) - n, if a(n-1) - n &gt; 0 and is not included in the sequence previously<br />&nbsp; &nbsp; &nbsp; &nbsp;=&nbsp; a(n-1) + n otherwise. </span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>Input:</strong> <br />n = 5\n<strong>Output:</strong> <br />0 1 3 6 2\n<strong>Explaination:</strong> <br />a(0) = 0,<br />a(1) = a(0)-1 = 0-1 = -1 and -1&lt;0, therefore a(1) = a(0)+1 = 1,<br />a(2) = a(1)-2 = 1-2 = -1 and -1&lt;0, therefore a(2) = a(1)+2 = 3,<br />a(3) = a(2)-3 = 3-3 = 0 but since 0 is already present in the sequence, a(3) = a(2)+3 = 3+3 = 6,<br />a(4) = a(3)-4 = 6-4 = 2.<br />Therefore the first 5 elements of Recaman's sequence will be 0 1 3 6 2.</span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input:</strong> <br />n = 3\n<strong>Output:</strong> <br />0 1 3\n<strong>Explaination:</strong> <br />As seen in example 1, the first three elements will be 0 1 3.</span></pre>\n<p><span ><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>recamanSequence()</strong> which takes <strong>n</strong> as the input parameter and returns the sequence.</span></p>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `n`, return the first `n` elements of the Recaman's sequence. The Recaman's sequence is defined as follows:\n\na(0) = 0\na(n) = a(n-1) - n, if a(n-1) - n > 0 and is not already included in the sequence.\na(n) = a(n-1) + n, otherwise.",
                "constraints": [
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "0 1 3 6 2",
                        "explanation": "a(0) = 0\na(1) = a(0) + 1 = 1 (since a(0)-1 = -1 <= 0)\na(2) = a(1) + 2 = 3 (since a(1)-2 = -1 <= 0)\na(3) = a(2) + 3 = 6 (since a(2)-3 = 0, and 0 is already in the sequence)\na(4) = a(3) - 4 = 2"
                    },
                    {
                        "input": "3",
                        "output": "0 1 3",
                        "explanation": "a(0) = 0\na(1) = a(0) + 1 = 1 (since a(0)-1 = -1 <= 0)\na(2) = a(1) + 2 = 3 (since a(1)-2 = -1 <= 0)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use hashing to keep track of used integers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to generate the Recaman sequence\n    vector<int> recamanSequence(int n){\n        vector<int> ans;\n        ans.push_back(0); // Add the first element 0 to the sequence\n        unordered_map<int, int> mp; // Create a map to keep track of already added elements\n        for(int i = 1;i < n;i++){\n            int x = ans[i-1] - i; // Calculate the next element by subtracting i from the previous element\n            // If the element is positive and not already added, add it to the sequence\n            if(x > 0 && mp.find(x) == mp.end()){\n                ans.push_back(x);\n                mp[x]++;\n            }\n            // Otherwise, add the sum of the previous element and i to the sequence\n            else{\n                ans.push_back(ans[i-1]+i);\n                mp[ans[i-1]+i]++;\n            }\n        }\n        return ans; // Return the generated Recaman sequence\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//User function Template for Java\nclass Solution{\n    static ArrayList<Integer> recamanSequence(int n){\n        //creating a HashMap to store the sequence elements and their occurrences\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n        //creating an ArrayList to store the sequence elements\n        ArrayList<Integer> list = new ArrayList<>();\n        //if n is 0, return an empty list\n        if(n == 0)\n        {\n            return list;\n        }\n        //add 0 to the list and update its occurrence in the map\n        list.add(0);\n        map.put(0,1);\n        //if n is 1, return the list with 0 only\n        if(n == 1)\n        {\n            return list;\n        }\n        //generate the remaining elements of the sequence\n        for(int i=1;i<n;i++)\n        {\n            //if the difference between the previous element and i is greater than 0\n            //and the difference is not already present in the map\n            //add the difference to the list and update its occurrence in the map\n            if(list.get(i-1)-i>0 && !map.containsKey((list.get(i-1)-i)))\n            {\n                map.put(list.get(i-1)-i,1);\n                list.add(list.get(i-1)-i);\n            }\n            //otherwise, add the sum of the previous element and i to the list\n            //and update its occurrence in the map\n            else\n            {\n                map.put(list.get(i-1)+i,1);\n                list.add(list.get(i-1)+i);\n            }\n        }\n        //return the generated list\n        return list;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "\nclass Solution:\n    def recamanSequence(self, n):\n        ans = [0]  # Add the first element 0 to the sequence\n        mp = {}  # Create a dictionary to keep track of already added elements\n\n        for i in range(1, n):\n            x = ans[i-1] - i  # Calculate the next element by subtracting i from the previous element\n            # If the element is positive and not already added, add it to the sequence\n            if x > 0 and x not in mp:\n                ans.append(x)\n                mp[x] = 1\n            # Otherwise, add the sum of the previous element and i to the sequence\n            else:\n                ans.append(ans[i-1] + i)\n                mp[ans[i-1] + i] = 1\n\n        return ans  # Return the generated Recaman sequence\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}