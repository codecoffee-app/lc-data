{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705638,
            "title": "Recurrence Matrix",
            "titleSlug": "recurrence-matrix2315",
            "content": "<p><span style=\"font-size: 18px;\">Let's define a series whose recurrence formula is as follows :<br />C(i)= 3*C(i-1) + 4*C(i-2) + 5*C(i-3) + 6*C(i-4)&nbsp;<br />C(0)= 2<br />C(1)= 0<br />C(2)= 1<br />C(3)= 7<br />Now based on this Series a matrix&nbsp;of size n*n is to be formed.The top left cell is(1,1) and the bottom right corner is (n,n).&nbsp;<br />Each cell (i,j) of the matrix contains either 1 or 0.&nbsp;<br />If C( (i * j)<sup>3</sup>)is odd, matrix(i,j) is 1, otherwise, it's 0.<br />You will be given a list of queries containing n. Your task is to count number of ones in matrix for&nbsp;each&nbsp;query.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Queries = {2}\n<strong>Output: </strong>0\n<strong>Explanation: </strong>C(1,1) = C(1<sup>3</sup>*1<sup>3</sup>) = C(1) = 0\nC(1,2) = C(1<sup>3</sup>*2<sup>3</sup>) = 11424\nC(2,1) = C(2<sup>3</sup>*1<sup>3</sup>) = 11424\nC(2,2) = C(2<sup>3</sup>*2<sup>3</sup>) = 17408414112797894176\nSo the matrix formed will be \n0 0 \n0 0 \ni,e total no. of ones = 0.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Youd don't need to read or print anyhting. Your task is to complete the function&nbsp;<strong>CountOnes()&nbsp;</strong>which takes Queries as input parameter and returns a list containing count of ones for each queries.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= No. of queries &lt;= 1000<br />1 &lt;= n &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Define a series C(i) using the recurrence relation: C(i) = 3*C(i-1) + 4*C(i-2) + 5*C(i-3) + 6*C(i-4) with initial values C(0)=2, C(1)=0, C(2)=1, and C(3)=7.\n\nGiven a query 'n', construct an n x n matrix. Each cell (i, j) in the matrix (where 1 <= i, j <= n) contains either 1 or 0. The value of matrix(i, j) is 1 if C((i * j)<sup>3</sup>) is odd, and 0 otherwise.\n\nYour task is to implement the CountOnes() function, which takes a list of queries (n values) as input and returns a list containing the number of ones in the matrix for each query.",
                "constraints": [
                    "1 <= No. of queries <= 1000",
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "{2}",
                        "output": "0",
                        "explanation": "For n = 2, the matrix is formed as follows:\n\nmatrix(1,1) = C((1*1)^3) = C(1) = 0\nmatrix(1,2) = C((1*2)^3) = C(8) = even (Calculated value will be even, details omitted for brevity, actual value is not zero)\nmatrix(2,1) = C((2*1)^3) = C(8) = even (Calculated value will be even, details omitted for brevity, actual value is not zero)\nmatrix(2,2) = C((2*2)^3) = C(64) = even (Calculated value will be even, details omitted for brevity, actual value is not zero)\n\nTherefore, the matrix is:\n0 0\n0 0\n\nThe total number of ones is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use pre calculation.</p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    vector<int> CountOnes(vector<int> Queries) {\n        vector<int> pattern = {0, 0, 1, 1, 1, 0, 1};\n        vector<vector<int>> dp(1002, vector<int>(1002, 0));\n        vector<vector<int>> matrix(1002, vector<int>(1002, 0));\n        for (int i = 1; i <= 1000; i++) {\n            dp[i][0] = 0;\n            for (int j = 1; j <= 1000; j++) {\n                long long int x = 1LL * i * i * i * j * j * j;\n                x %= 7;\n                int id = x;\n                matrix[i][j] = pattern[id];\n                dp[i][j] += dp[i][j - 1] + matrix[i][j];\n            }\n        }\n        vector<int> ans;\n        for (auto n : Queries) {\n            int cnt = 0;\n            for (int i = 1; i <= n; i++) {\n                cnt += dp[i][n];\n            }\n            ans.push_back(cnt);\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}