{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710263,
            "title": "Recursively print all sentences that can be formed from list of word lists",
            "titleSlug": "recursively-print-all-sentences-that-can-be-formed-from-list-of-word-lists",
            "content": "<p><span style=\"font-size: 18px;\">Given a list of word <strong>lists </strong>of size&nbsp;&nbsp;<strong>M * N</strong>.&nbsp;The task is&nbsp;to return all sentences possible taking one word from a list at a time via recursion.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span><br /><span style=\"font-size: 18px;\"><strong>Input: </strong></span></p>\n<pre><span style=\"font-size: 18px;\">L = {{\"you\", \"we\"},\n     {\"have\", \"are\"},\n<strong>Output: \n</strong>{{you have}\n{you are}\n{we have}\n{we are}}\n</span><span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nConsider every every word from the list and form\nsentences with every other words, taking one word from a list .\n\n<strong>Note: </strong>You need to maintain the order of the sentences.\n\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>sentences()</strong>&nbsp;which takes a matrix&nbsp;of strings as input and returns a matrix of string containing all possible sentences.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(M<sup>N</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(M<sup>N</sup>)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= M, N&nbsp;&lt;= 6<br />'a'&nbsp;&lt;= sentence[i][j] &lt;= 'z'</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of word lists (matrix) of size M * N, generate all possible sentences by selecting one word from each list. The order of words within each sentence should correspond to the order of the lists in the input.",
                "constraints": [
                    "1 <= M, N <= 6",
                    "All words consist of lowercase English letters ('a' to 'z')"
                ],
                "testcases": [
                    {
                        "input": "{{\"you\", \"we\"}, {\"have\", \"are\"}}",
                        "output": "{{\"you have\"}, {\"you are\"}, {\"we have\"}, {\"we are\"}}",
                        "explanation": "The input consists of two lists. The first list contains \"you\" and \"we\". The second list contains \"have\" and \"are\".  By combining each word from the first list with each word from the second list, we get the four possible sentences: \"you have\", \"you are\", \"we have\", and \"we are\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Depth first search</span></p>",
            "<p><span style=\"font-size:18px\">Start from every word of the first list as the first word of an output sentence, then recur for the remaining lists.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\nclass Solution{\n    public:\n    //Function to print all possible sentences.\n    void printUtil(vector<vector<string>>&arr, int m, int n, int R, int C, string output[], vector<vector<string>>&ans){\n        //storing current word in the output array.\n        output[m] = arr[m][n];\n        \n        //if we reach the last row, we have formed a sentence.\n        if (m==R-1)\n        {\n           vector<string>res;\n           for (int i=0; i<R; i++){\n            res.push_back(output[i]);\n           }\n           //adding this completed sentence to the result vector.\n           ans.push_back(res);\n           return;\n        }\n        \n        //Recur for next row.\n        for (int i=0; i<C; i++)\n           //checking if next word in the next row is not empty.\n           if (arr[m+1][i] != \"\")\n              //calling recursive function for the next word.\n              printUtil(arr, m+1, i, R, C, output,ans);\n    }\n    \n    //Function to find all possible sentences.\n    vector<vector<string>> sentences(vector<vector<string>>&arr){\n        int R = arr.size();\n        int C = arr[0].size();\n        string output[R];\n        vector<vector<string>>ans;\n        for (int i=0; i<C; i++){\n            //checking if the first word in the first row is not empty.\n            if (arr[0][i] != \"\"){\n                //calling recursive function for the first word.\n                printUtil(arr, 0, i, R, C, output, ans);\n            }\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}