{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705889,
            "title": "Recursively Remove Adjacent Duplicates",
            "titleSlug": "recursively-remove-all-adjacent-duplicates0744",
            "content": "<p><span style=\"font-size: 18px;\">Given a string s, remove all its adjacent duplicate characters recursively, until there are no adjacent duplicate characters left.</span></p>\n<p><span style=\"font-size: 18px;\">Note: If the resultant string becomes empty, return an empty string.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"geeksforgeek\"\n<strong>Output:</strong> \"gksforgk\"\n<strong>Explanation:  </strong>g(ee)ksforg(ee)k -&gt; gksforgk</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"abccbccba\"\n<strong>Output:</strong> \"\"\n<strong>Explanation: </strong>ab(cc)b(cc)ba-&gt;abbba-&gt;a(bbb)a-&gt;aa-&gt;(aa)-&gt;\"\"(empty string)<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"abcd\"\n<strong>Output:</strong> \"abcd\"\n<strong>Explanation: </strong>There are no adjacent duplicate characters</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= s.size() &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, recursively remove all adjacent duplicate characters until no adjacent duplicates remain. If the resulting string is empty, return an empty string.",
                "constraints": [
                    "1 <= s.size() <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "geeksforgeek",
                        "output": "gksforgk",
                        "explanation": "The process is: g(ee)ksforg(ee)k -> gksforgk"
                    },
                    {
                        "input": "abccbccba",
                        "output": "",
                        "explanation": "The process is: ab(cc)b(cc)ba -> abbba -> a(bbb)a -> aa -> (aa) -> \"\" (empty string)"
                    },
                    {
                        "input": "abcd",
                        "output": "abcd",
                        "explanation": "There are no adjacent duplicate characters."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">In each iteration that removes repeated characters, call the function once again.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // This function recursively removes adjacent duplicate characters from the string\n    // `s`.\n    string removeUtil(string &s) {\n        int len = s.length(); // Get the length of the input string.\n        int n = len;          // Store the original length for reference.\n        int k =\n            0; // Pointer to track the position of characters in the modified string.\n\n        // Traverse the string using a loop.\n        for (int i = 0; i < n; i++) {\n            // Check if the current character and the next character are the same.\n            if (i < n - 1 && s[i] == s[i + 1]) {\n                // Skip all consecutive duplicate characters.\n                while (i < n - 1 && s[i] == s[i + 1]) {\n                    i++; // Move to the last duplicate character.\n                }\n            } else {\n                // If no duplicates are found, add the current character to the modified\n                // string.\n                s[k++] = s[i];\n            }\n        }\n\n        // Erase all characters from position `k` to the end of the string.\n        s.erase(k);\n\n        // If the length of the modified string has changed (duplicates were removed),\n        // recursively call the function to check for more adjacent duplicates.\n        if (k != n)\n            removeUtil(s);\n\n        // Return the final string with no adjacent duplicates.\n        return s;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // This function recursively removes adjacent duplicate characters from the string\n    // `s`.\n    public String removeUtil(String s) {\n        int len = s.length(); // Get the length of the input string.\n        int n = len;          // Store the original length for reference.\n        StringBuilder sb =\n            new StringBuilder(); // StringBuilder to construct the modified string.\n\n        // Traverse the string character by character.\n        for (int i = 0; i < n; i++) {\n            // Check if the current character and the next character are the same.\n            if (i < n - 1 && s.charAt(i) == s.charAt(i + 1)) {\n                // Skip all consecutive duplicate characters.\n                while (i < n - 1 && s.charAt(i) == s.charAt(i + 1)) {\n                    i++; // Move to the last duplicate character in the sequence.\n                }\n            } else {\n                // If no duplicates are found, add the current character to the\n                // StringBuilder.\n                sb.append(s.charAt(i));\n            }\n        }\n\n        // Convert the StringBuilder back to a string.\n        String result = sb.toString();\n\n        // If the length of the resultant string has changed (duplicates were removed),\n        // recursively call the function to check for further adjacent duplicates.\n        if (result.length() != len) {\n            return removeUtil(result);\n        }\n\n        // Return the final string with no adjacent duplicates.\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    # This function recursively removes adjacent duplicate characters from the string `s`.\n    def removeUtil(self, s):\n        n = len(s)  # Get the length of the input string.\n        result = []  # List to store the characters of the modified string.\n        i = 0  # Pointer to traverse the string.\n\n        # Iterate through the string.\n        while i < n:\n            # Check if the current character and the next character are the same.\n            if i < n - 1 and s[i] == s[i + 1]:\n                # Skip all consecutive duplicate characters.\n                while i < n - 1 and s[i] == s[i + 1]:\n                    i += 1  # Move to the last duplicate character in the sequence.\n            else:\n                # If no duplicates are found, add the current character to the result.\n                result.append(s[i])\n            i += 1  # Move to the next character.\n\n        # Convert the list of characters back to a string.\n        result_str = \"\".join(result)\n\n        # If the length of the resultant string has changed (duplicates were removed),\n        # recursively call the function to check for further adjacent duplicates.\n        if len(result_str) != len(s):\n            return self.removeUtil(result_str)\n\n        # Return the final string with no adjacent duplicates.\n        return result_str\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // This function recursively removes adjacent duplicate characters from the string\n    // `s`.\n    removeUtil(s) {\n        let n = s.length; // Get the length of the input string.\n        let result = [];  // Array to store the characters of the modified string.\n        let i = 0;        // Pointer to traverse the string.\n\n        // Iterate through the string.\n        while (i < n) {\n            // Check if the current character and the next character are the same.\n            if (i < n - 1 && s[i] === s[i + 1]) {\n                // Skip all consecutive duplicate characters.\n                while (i < n - 1 && s[i] === s[i + 1]) {\n                    i++; // Move to the last duplicate character in the sequence.\n                }\n            } else {\n                // If no duplicates are found, add the current character to the result\n                // array.\n                result.push(s[i]);\n            }\n            i++; // Move to the next character.\n        }\n\n        // Convert the result array back to a string.\n        let resultStr = result.join('');\n\n        // If the length of the resultant string has changed (duplicates were removed),\n        // recursively call the function to check for further adjacent duplicates.\n        if (resultStr.length !== s.length) {\n            return this.removeUtil(resultStr);\n        }\n\n        // Return the final string with no adjacent duplicates.\n        return resultStr;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}