{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703466,
            "title": "Reducing Walls",
            "titleSlug": "reducing-walls4443",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array&nbsp;<strong>arr </strong>and an integer <strong>k</strong>. In one operation you can choose any element of array and decrease its value by k. You need find the minimum number of operation such that all the elements in the array becomes less or equal to k.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [5, 3, 2, 6, 8] and k = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Ishaan can climb a wall with height atmost 5. So he climbs the first 3 walls easily. Now he has to use his power to reduce the height of the 4th wall. After using his power, Now to climb the last wall, he again uses his power.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [2, 6, 4, 8, 1, 6] and k = 4 <strong>\nOutput:</strong> 3 <br /><strong>Explanation: </strong></span>Ishaan can climb a wall with height atmost 5. <span >He can't climb the wall with height 6, 8, 6.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints :</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; k &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of integers and an integer `k`, determine the minimum number of operations required to make all elements in the array less than or equal to `k`. In one operation, you can choose any element of the array and decrease its value by `k`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= k <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr = [5, 3, 2, 6, 8], k = 5",
                        "output": "2",
                        "explanation": "The elements 5, 3, and 2 are already less than or equal to 5. The element 6 needs one operation (6 - 5 = 1 <= 5). The element 8 also needs one operation (8 - 5 = 3 <= 5).  Therefore, a total of 2 operations are needed."
                    },
                    {
                        "input": "arr = [2, 6, 4, 8, 1, 6], k = 4",
                        "output": "3",
                        "explanation": "The elements 2, 4, and 1 are already less than or equal to 4. The element 6 needs one operation (6 - 4 = 2 <= 4). The element 8 needs two operation(8 - 4 = 4 <=4).  The last element 6 needs one operation. Therefore, a total of 1 + 1 + 1 = 3 operations are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >We iterate through the heights of all the walls and check if the height of a wall is greater than K. If the height is greater than K, we need to find out how many times do we need to use the power to reduce the height. Since we need the height to be almost K, we need to reduce at least <strong>(height - K)</strong>.<br /><br /></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to count the number of walls that need to be reduced.\nclass Solution {\n  public:\n    int reducingWalls(vector<int>& arr, int k) {\n        int ans = 0;\n        int n = arr.size();\n        // Iterating through the array of wall heights.\n        for (int i = 0; i < n; i++) {\n            int x = arr[i];\n\n            // If the wall height is greater than the target reduction height.\n            if (x > k) {\n\n                // Incrementing the answer by the number of reductions needed for this\n                // wall.\n                ans += ceil((double)(x - k) / k);\n            }\n        }\n\n        // Returning the total number of walls that need to be reduced.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int reducingWalls(int[] arr, int k) {\n        int ans = 0;\n        int n = arr.length;\n\n        // Iterating through the array of wall heights.\n        for (int i = 0; i < n; i++) {\n            int x = arr[i];\n\n            // If the wall height is greater than the target reduction height.\n            if (x > k) {\n                // Incrementing the answer by the number of reductions needed for this\n                // wall.\n                ans += (int)Math.ceil((double)(x - k) / k);\n            }\n        }\n\n        // Returning the total number of walls that need to be reduced.\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import math\n\n\nclass Solution:\n\n    def reducingWalls(self, arr, k):\n        ans = 0\n\n        # Iterating through the array of wall heights.\n        for x in arr:\n            # If the wall height is greater than the target reduction height.\n            if x > k:\n                # Incrementing the answer by the number of reductions needed for this wall.\n                ans += math.ceil((x - k) / k)\n\n        # Returning the total number of walls that need to be reduced.\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    reducingWalls(arr, k) {\n        let ans = 0;\n\n        // Iterating through the array of wall heights.\n        for (let x of arr) {\n            // If the wall height is greater than the target reduction height.\n            if (x > k) {\n                // Incrementing the answer by the number of reductions needed for this\n                // wall.\n                ans += Math.ceil((x - k) / k);\n            }\n        }\n\n        // Returning the total number of walls that need to be reduced.\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}