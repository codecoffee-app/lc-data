{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713993,
            "title": "Redundant Parenthesis",
            "titleSlug": "redundant-parenthesis--170647",
            "content": "<p><span style=\"font-size: 18px;\">Given a valid expression containing only binary operators&nbsp;<strong>'+', '-', '*', '/' </strong>and operands,&nbsp;remove all the redundant parenthesis.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\">A set of parenthesis is said to be redundant&nbsp;if,&nbsp;removing them, does not change the value of the expression.</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>The operators&nbsp;<strong>'+'</strong> and <strong>'-'</strong> have the same priority. <strong>'*'</strong> and <strong>'/'</strong> also have the same priority. <strong>'*'</strong> and <strong>'/'</strong> have more priority than <strong>'+'</strong> and <strong>'-'</strong>.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nExp = (A*(B+C))\n<strong>Output:</strong>&nbsp;A*(B+C)\n<strong>Explanation</strong>: The outermost parenthesis\nare redundant.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nExp = A+(B+(C))\n<strong>Output:&nbsp;</strong>A+B+C\n<strong>Explanation</strong>: All the parenthesis\nare redundant.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>removeBrackets()</strong>&nbsp;which takes the string <strong>Exp&nbsp;</strong>as input parameters&nbsp;and returns the updated expression.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 <u>&lt;</u> Length of Exp <u>&lt;</u>&nbsp;10<sup>5</sup><br />Exp contains uppercase english letters, '(' , ')', '+', '-', '*' and '/'.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a valid expression containing only binary operators '+', '-', '*', '/' and operands, remove all the redundant parentheses. A set of parentheses is considered redundant if removing them does not change the value of the expression.  Note that '+' and '-' have the same precedence, as do '*' and '/'.  Furthermore, '*' and '/' have higher precedence than '+' and '-'.",
                "constraints": [
                    "1 <= Length of Exp <= 10^5",
                    "Exp contains uppercase English letters, '(', ')', '+', '-', '*' and '/'."
                ],
                "testcases": [
                    {
                        "input": "(A*(B+C))",
                        "output": "A*(B+C)",
                        "explanation": "The outermost parentheses are redundant."
                    },
                    {
                        "input": "A+(B+(C))",
                        "output": "A+B+C",
                        "explanation": "All the parentheses are redundant."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use stack data structure to get rid of the redundant parenthesis.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "oracle"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution{   \npublic:\n    string removeBrackets(string s){    \n        //code here\n        string ans = \"\";\n        int f=0;\n        vector<int> v(s.size());\n        stack<int> st;\n        unordered_set<int> st1,st2,st3;\n        for(int i=0;i<s.size();i++){\n            if(s[i]=='('){\n                st.push(i);\n                v[i] = st.top();\n            }\n            else if(s[i]==')'){\n                v[i] = st.top();\n                st.pop();\n            }\n            else if((s[i]=='+' || s[i]=='-') && st.size()>0){\n                \n                v[i] = st.top();\n                st1.insert(st.top());   \n            }\n            else if((s[i]=='*' || s[i]=='/') && st.size()>0){\n                \n                v[i] = st.top();\n                st3.insert(st.top());   \n            }\n            else if(st.size()>0){\n                v[i] = st.top();\n            }\n            \n        }\n        for(int i=0;i<s.size();i++){\n            if(s[i]!='*' && s[i]!='/' && s[i]!='-') continue;\n            int j=i+1;\n            if(s[i]=='-'){\n                while(j<s.size()  && s[j]=='('){\n                    if(st1.find(v[j])!=st1.end())\n                    st2.insert(j);\n                    j++;\n                }\n                continue;\n            }\n            j = i+1;\n            while(j<s.size() && s[j]=='('){\n                if(st1.find(v[j])!=st1.end())\n                    st2.insert(j);\n                    j++;\n            }\n            if(s[i]=='/'){\n                j = i+1;\n                while(j<s.size() && s[j]=='('){\n                    if(st3.find(v[j])!=st3.end())\n                        st2.insert(j);\n                        j++;\n                }\n            }\n           \n            j = i-1;\n            while(j>=0  && s[j]==')'){\n                if(st1.find(v[j])!=st1.end())\n                    st2.insert(j);\n                    j--;\n            }\n        }\n        for(int i=0;i<s.size();i++){\n            if(s[i]!=')' && s[i]!='('){\n                ans+=s[i];\n            }\n            else{\n                if(st2.find(v[i])!=st2.end()){\n                    ans+=s[i];\n                }\n            }\n        }\n        \n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public String removeBrackets(String s) {\n        String ans = \"\";\n        int f = 0;\n        int[] v = new int[s.length()];\n        Stack<Integer> st = new Stack<>();\n        HashSet<Integer> st1 = new HashSet<>();\n        HashSet<Integer> st2 = new HashSet<>();\n        HashSet<Integer> st3 = new HashSet<>();\n\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                st.push(i);\n                v[i] = st.peek();\n            } else if (s.charAt(i) == ')') {\n                v[i] = st.peek();\n                st.pop();\n            } else if ((s.charAt(i) == '+' || s.charAt(i) == '-') && !st.isEmpty()) {\n                v[i] = st.peek();\n                st1.add(st.peek());\n            } else if ((s.charAt(i) == '*' || s.charAt(i) == '/') && !st.isEmpty()) {\n                v[i] = st.peek();\n                st3.add(st.peek());\n            } else if (!st.isEmpty()) {\n                v[i] = st.peek();\n            }\n        }\n\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) != '*' && s.charAt(i) != '/' && s.charAt(i) != '-') continue;\n            int j = i + 1;\n            if (s.charAt(i) == '-') {\n                while (j < s.length() && s.charAt(j) == '(') {\n                    if (st1.contains(v[j])) {\n                        st2.add(j);\n                    }\n                    j++;\n                }\n                continue;\n            }\n            j = i + 1;\n            while (j < s.length() && s.charAt(j) == '(') {\n                if (st1.contains(v[j])) {\n                    st2.add(j);\n                }\n                j++;\n            }\n            if (s.charAt(i) == '/') {\n                j = i + 1;\n                while (j < s.length() && s.charAt(j) == '(') {\n                    if (st3.contains(v[j])) {\n                        st2.add(j);\n                    }\n                    j++;\n                }\n            }\n            j = i - 1;\n            while (j >= 0 && s.charAt(j) == ')') {\n                if (st1.contains(v[j])) {\n                    st2.add(j);\n                }\n                j--;\n            }\n        }\n\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) != ')' && s.charAt(i) != '(') {\n                ans += s.charAt(i);\n            } else {\n                if (st2.contains(v[i])) {\n                    ans += s.charAt(i);\n                }\n            }\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def removeBrackets(self, s):\n        ans = \"\"\n        f = 0\n        v = [0] * len(s)\n        st = []\n        st1, st2, st3 = set(), set(), set()\n        \n        for i in range(len(s)):\n            if s[i] == '(':\n                st.append(i)\n                v[i] = st[-1]\n            elif s[i] == ')':\n                v[i] = st[-1]\n                st.pop()\n            elif (s[i] == '+' or s[i] == '-') and len(st) > 0:\n                v[i] = st[-1]\n                st1.add(st[-1])\n            elif (s[i] == '*' or s[i] == '/') and len(st) > 0:\n                v[i] = st[-1]\n                st3.add(st[-1])\n            elif len(st) > 0:\n                v[i] = st[-1]\n        \n        for i in range(len(s)):\n            if s[i] != '*' and s[i] != '/' and s[i] != '-':\n                continue\n            j = i + 1\n            if s[i] == '-':\n                while j < len(s) and s[j] == '(':\n                    if v[j] in st1:\n                        st2.add(j)\n                    j += 1\n                continue\n            j = i + 1\n            while j < len(s) and s[j] == '(':\n                if v[j] in st1:\n                    st2.add(j)\n                j += 1\n            if s[i] == '/':\n                j = i + 1\n                while j < len(s) and s[j] == '(':\n                    if v[j] in st3:\n                        st2.add(j)\n                    j += 1\n            \n            j = i - 1\n            while j >= 0 and s[j] == ')':\n                if v[j] in st1:\n                    st2.add(j)\n                j -= 1\n        \n        for i in range(len(s)):\n            if s[i] != ')' and s[i] != '(':\n                ans += s[i]\n            else:\n                if v[i] in st2:\n                    ans += s[i]\n        \n        return ans\n",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}