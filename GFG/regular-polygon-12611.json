{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702677,
            "title": "Regular polygon-1",
            "titleSlug": "regular-polygon-12611",
            "content": "<p><span style=\"font-size: 12pt;\">Given an array of binary integers, <strong>arr[]</strong>, suppose these values are kept on the circumference of a circle at an equal distance. The task is to tell whether is it possible to draw a regular polygon using only 1s as its vertices or not. Return true if it is possible otherwise, false.<br /></span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [1, 1, 1, 0, 1, 0]\n<strong>Output:</strong> true\n<strong>Explanation</strong>: Using 1's at 1st, 3rd and 5th index we can make a triangle.\n</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [1, 0, 1, 0, 1, 0, 1, 0, 1, 1]\n<strong>Output:</strong> true\n</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:</strong> O(n<sup>5</sup><sup>/2</sup>).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span><br /><br /><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &le; arr.size &le; 5000<br />arr<sub>i</sub> contains either 0 or 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a circular array of binary integers, `arr[]`, determine if it's possible to form a regular polygon using only the 1s in the array as vertices. Return `true` if possible; otherwise, return `false`.",
                "constraints": [
                    "1 <= arr.size <= 5000",
                    "arr[i] contains either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "[1, 1, 1, 0, 1, 0]",
                        "output": "true",
                        "explanation": "A triangle can be formed using the 1s at indices 0, 2, and 4."
                    },
                    {
                        "input": "[1, 0, 1, 0, 1, 0, 1, 0, 1, 1]",
                        "output": "true",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Find K such that K divides N and there is a '1' at each vertex position for a valid polygon.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if polygon is possible for given midpoints.\n    bool checkPolygonWithMidpoints(vector<int> arr, int N, int midpoints) {\n        // iterating over all midpoints.\n        for (int j = 0; j < midpoints; j++) {\n            int val = 1;\n            // iterating over elements with given midpoints.\n            for (int k = j; k < N; k += midpoints) {\n                // performing bitwise AND operation.\n                val &= arr[k];\n            }\n            // checking if polygon is possible with given midpoints and number of edges.\n            if (val && N / midpoints > 2) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Function to check if polygon is possible.\n    bool isPolygonPossible(vector<int> arr) {\n        int N = arr.size();\n        int limit = sqrt(N);\n        // iterating over all factors of N.\n        for (int i = 1; i <= limit; i++) {\n            // checking if there is a polygon possible with current factor.\n            if (N % i == 0) {\n                if (checkPolygonWithMidpoints(arr, N, i) ||\n                    checkPolygonWithMidpoints(arr, N, (N / i)))\n                    return true;\n            }\n        }\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // method returns true if polygon is possible with\n    // 'midpoints' number of midpoints\n    static boolean checkPolygonWithMidpoints(int arr[], int N, int midpoints) {\n        // loop for getting first vertex of polygon\n        for (int j = 0; j < midpoints; j++) {\n            int val = 1;\n\n            // loop over array values at 'midpoints' distance\n            for (int k = j; k < N; k += midpoints) {\n                // and(&) all those values, if even one of\n                // them is 0, val will be 0\n                val &= arr[k];\n            }\n\n            /*  if val is still 1 and (N/midpoints) or (number\n                of vertices) are more than two (for a polygon\n                minimum) print result and return true */\n            if (val != 0 && N / midpoints > 2) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // method prints sides in the polygon or print not\n    // possible in case of no possible polygon\n    static boolean isPolygonPossible(int arr[]) {\n        int N = arr.length;\n        //  limit for iterating over divisors\n        int limit = (int)Math.sqrt(N);\n        for (int i = 1; i <= limit; i++) {\n            // If i divides N then i and (N/i) will\n            // be divisors\n            if (N % i == 0) {\n                //  check polygon for both divisors\n                if (checkPolygonWithMidpoints(arr, N, i) ||\n                    checkPolygonWithMidpoints(arr, N, (N / i)))\n                    return true;\n            }\n        }\n\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def checkPolygonWithMidpoints(self, arr, N, midpoints):\n        # loop for getting first vertex of polygon\n        for j in range(midpoints):\n\n            val = 1\n\n            # loop over array values at\n            # 'midpoints' distance\n            for k in range(j, N, midpoints):\n\n                # and(&) all those values, if even\n                # one of them is 0, val will be 0\n                val &= arr[k]\n\n            # if val is still 1 and (N/midpoints) or (number\n            # of vertices) are more than two (for a polygon\n            # minimum) print result and return true\n            if (val and N // midpoints > 2):\n\n                return True\n\n        return False\n\n    # method prints sides in the polygon or print\n    # not possible in case of no possible polygon\n    def isPolygonPossible(self, arr):\n\n        # limit for iterating over divisors\n        N = len(arr)\n        limit = N**0.5\n        for i in range(1, int(limit) + 1):\n\n            # If i divides N then i and (N/i)\n            # will be divisors\n            if (N % i == 0):\n\n                # check polygon for both divisors\n                if (self.checkPolygonWithMidpoints(arr, N, i)\n                        or self.checkPolygonWithMidpoints(arr, N, (N // i))):\n                    return True\n\n        return False\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    isPolygonPossible(arr) {\n        const checkPolygonWithMidpoints =\n            (arr, N, midpoints) => {\n                for (let j = 0; j < midpoints; j++) {\n                    let val = 1;\n                    for (let k = j; k < N; k += midpoints) {\n                        val &= arr[k];\n                    }\n                    if (val && Math.floor(N / midpoints) > 2) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n        const N = arr.length;\n        const limit = Math.sqrt(N);\n        for (let i = 1; i <= limit; i++) {\n            if (N % i === 0) {\n                if (checkPolygonWithMidpoints(arr, N, i) ||\n                    checkPolygonWithMidpoints(arr, N, N / i)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}