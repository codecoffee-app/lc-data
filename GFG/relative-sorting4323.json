{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701722,
            "title": "Sort according to an Array",
            "titleSlug": "relative-sorting4323",
            "content": "<p><span style=\"font-size: 18px;\">Given two integer arrays <strong>A1[ ] </strong>and <strong>A2[ ] </strong>of size <strong>N</strong> and <strong>M</strong> respectively. Sort the first array <strong>A1[ ]&nbsp;</strong>such that all the relative positions of the elements in the first array are the same as the elements in the second array <strong>A2[ ]</strong>.<br />See example for better understanding.<br /><strong>Note</strong>: If elements are repeated in the second array, consider their first occurance only.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 11 \nM = 4\nA1[] = {2, 1, 2, 5, 7, 1, 9, 3, 6, 8, 8}\nA2[] = {2, 1, 8, 3}\n<strong>Output: \n</strong>2 2 1 1 8 8 3 5 6 7 9<strong>\nExplanation: </strong>Array elements of A1[] are\nsorted according to A2[]. So 2 comes first\nthen 1 comes, then comes 8, then finally 3\ncomes, now we append remaining elements in\nsorted order.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 11 \nM = 4\nA1[] = {2, 1, 2, 5, 7, 1, 9, 3, 6, 8, 8}\nA2[] = {99, 22, 444, 56}\n<strong>Output: \n</strong>1 1 2 2 3 5 6 7 8 8 9<strong>\nExplanation: </strong>No A1[] elements are in A2[]\nso we cannot sort A1[] according to A2[].\nHence we sort the elements in non-decreasing \norder.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>sortA1ByA2()</strong>&nbsp;which takes the array <strong>A1[ ]</strong>, array <strong>A2[ ]</strong> and their respective size <strong>N</strong> and <strong>M</strong> as input parameters&nbsp;and returns the&nbsp;sorted array <strong>A1[ ] </strong>such that the relative positions of the elements in <strong>A1[ ]</strong> are same as the elements in <strong>A2[ ]</strong>. For the elements not present in <strong>A2[ ]</strong> but in <strong>A1[ ]</strong>, it appends them at the last in&nbsp;<strong>increasing&nbsp;</strong>order.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; N, M&nbsp;&le; 10<sup>6</sup><br />1 &le; A1[i], A2[i] &le;&nbsp;10<sup>6</sup> </span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integer arrays A1[] of size N and A2[] of size M, sort A1[] such that the relative positions of the elements in A1[] are the same as the elements in A2[]. Note that if elements are repeated in the second array, consider their first occurrence only.\n\nFor elements present in A1 but not in A2, append them to the end of the sorted A1 in increasing order.",
                "constraints": [
                    "1 <= N, M <= 10^6",
                    "1 <= A1[i], A2[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 11\nM = 4\nA1[] = {2, 1, 2, 5, 7, 1, 9, 3, 6, 8, 8}\nA2[] = {2, 1, 8, 3}",
                        "output": "2 2 1 1 8 8 3 5 6 7 9",
                        "explanation": "The array A1 is sorted according to the order of elements in A2. First, all occurrences of 2 are placed, then all occurrences of 1, then 8, then 3. Finally, the remaining elements from A1 (5, 6, 7, 9) are appended in sorted order."
                    },
                    {
                        "input": "N = 11\nM = 4\nA1[] = {2, 1, 2, 5, 7, 1, 9, 3, 6, 8, 8}\nA2[] = {99, 22, 444, 56}",
                        "output": "1 1 2 2 3 5 6 7 8 8 9",
                        "explanation": "Since no elements of A1 are present in A2, A1 is sorted in non-decreasing order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n    //Function to sort an array according to the other array.\n    vector<int> sortA1ByA2(vector<int> A1, int N, vector<int> A2, int M) \n    {\n        map<int,int>mp;\n        \n        //storing all the elements of first array in map.\n        for(int i=0;i<N;i++)\n        {\n            mp[A1[i]]++;\n        }\n        int j=0;\n        for(int i=0;i<M;i++)\n        {\n            //if any element of second array has value more than 0 in map, we\n            //store those elements in array and decrement the count in map.\n            while(mp[A2[i]]>0)\n            {\n                A1[j++]=A2[i];\n                mp[A2[i]]--;\n            }\n        }\n        \n        //iterating over the map which helps in storing\n        //elements in increasing order.\n        for(auto it:mp)\n        {\n            //we store the elements if their frequency is more than 0.\n            if(it.second>0)\n            {\n                //storing elements as many times as their count in output array.\n                while(it.second>0)\n                {\n                    A1[j++]=it.first;\n                    it.second--;\n                }\n            }\n        }\n        //returning the output.\n        return A1;\n    } \n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    //Function to sort an array according to the other array.\n    public static int[] sortA1ByA2(int A1[],int N,int A2[], int M)\n    {\n       TreeMap<Integer,Integer> map=new TreeMap<>();\n       \n        //storing all the elements of first array in map.\n        for( int l=0;l<N;l++)\n        if(!map.containsKey(A1[l]))\n            map.put(A1[l],1);\n        else\n            map.put(A1[l],map.get(A1[l])+1);\n        \n        int i=0;\n        \n        for( int l=0;l<M;l++)\n        {\n            //if any element of second array has value more than 0 in map, we\n            //store those elements in array and decrement the count in map.\n            if(map.containsKey(A2[l]))\n            { \n               for( int k=0;k<map.get(A2[l]);k++)\n                A1[i++]=(A2[l]);\n                map.remove(A2[l]);\n            }\n        }\n        \n        //iterating over the map which helps in storing\n        //elements in increasing order.\n        for(Entry<Integer,Integer> nag : map.entrySet())\n        {\n            //storing elements whose frequency is more than 0, as many times as\n            //their count in output list.\n            for(int p=0;p<nag.getValue();p++)\n            A1[i++]=nag.getKey();\n        }\n        \n        //returning the output.\n        return A1;\n    \n    }\n    \n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to sort an array according to the other array.\n    def relativeSort (self,A1, N, A2, M):\n        \n        d={}\n        #storing all the elements of first array in map.\n        for i in A1:\n            if i in d:\n                d[i]+=1\n            else:\n                d[i]=1\n                \n        ans=[]\n        an=[]\n        arr=set(A1)-set(A2)\n        \n        #iterating over first array.\n        for i in arr:\n            #if current element is present in map, we store them.\n            if i in d:\n                #appending element i, d[i] number of times in array an[].\n                an.extend([i]*d[i])\n                \n        #iterating over second array.       \n        for i in A2:\n            #if current element is present in map, we store them.\n            if i in d:\n                #appending element i, d[i] number of times in array ans[].\n                ans.extend([i]*d[i])\n         \n        #storing an in list and sorting it.       \n        ll=list(an)\n        ll.sort()\n        \n        #appending the list ll to array ans[].\n        ans.extend(ll)\n        \n        #returning the output.\n        return ans\n        \n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} A1\n * @param {number} N\n * @param {number[]} A2\n * @param {number} M\n * @returns {number[]}\n*/\nclass Solution {\n    //Function to sort an array according to the other array.\n    sortA1ByA2(A1, N, A2, M){\n        let mp = new Map();\n        \n        //storing all the elements of first array in map.\n        for(let i=0;i<N;i++)\n        {\n            if(!mp.has(A1[i]))\n            mp.set(A1[i],1);\n            else\n            mp.set(A1[i],mp.get(A1[i])+1);\n        }\n        let j=0;\n        for(let i=0;i<M;i++)\n        {\n            //if any element of second array has value more than 0 in map, we\n            //store those elements in array and decrement the count in map.\n            while(mp.get(A2[i])>0)\n            {\n                A1[j++]=A2[i];\n                mp.set(A2[i],mp.get(A2[i])-1);\n            }\n        }\n        let B = new Array();\n        \n        //iterating over the map to store rest of the elements of first array.\n        for(let [key,value] of mp.entries())\n        {\n            //we store the elements if their frequency is more than 0.\n            if(value>0)\n            {\n                //storing elements as many times as their count in array B.\n                while(value>0)\n                {\n                    B.push(key);\n                    value--;\n                }\n            }\n        }\n        //sorting the array B.\n        B.sort(function(a,b){\n            return a-b;\n        });\n        \n        //copying the array elements of B in the output array.\n        for(let k=0;k<B.length;k++)\n        {\n            A1[j++]=B[k];\n        }\n        \n        //returning the output.\n        return A1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}