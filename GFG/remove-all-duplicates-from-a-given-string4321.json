{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702807,
            "title": "String Duplicates Removal",
            "titleSlug": "remove-all-duplicates-from-a-given-string4321",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong>&nbsp;which may contain lowercase and uppercase characters. The task is to remove all duplicate characters from the string and find the resultant string. The order of remaining characters in the output should be same as in the original string.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"geEksforGEeks\"\n<strong>Output:</strong> \"geEksforG\"\n<strong>Explanation: </strong>After removing duplicate characters such as E, e, k, s, we have string as \"geEksforG\".\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"HaPpyNewYear\"\n<strong>Output:</strong> \"HaPpyNewYr\"\n<strong>Explanation:</strong> After removing duplicate characters such as e, a, we have string as \"HaPpyNewYr\".\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>6</sup><br />String contains uppercase and lowercase english letters.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 's' containing lowercase and uppercase characters, remove all duplicate characters while preserving the original order of the remaining characters. Return the resultant string.",
                "constraints": [
                    "1 <= N <= 10^6, where N is the length of the string 's'.",
                    "The string 's' contains only uppercase and lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "geEksforGEeks",
                        "output": "geEksforG",
                        "explanation": "The duplicate characters 'E', 'e', 'k', and 's' are removed. The remaining characters are 'g', 'e', 'E', 'k', 's', 'f', 'o', 'r', 'G', maintaining their original order."
                    },
                    {
                        "input": "HaPpyNewYear",
                        "output": "HaPpyNewYr",
                        "explanation": "The duplicate characters 'e' and 'a' are removed. The remaining characters are 'H', 'a', 'P', 'p', 'y', 'N', 'e', 'w', 'Y', 'r', maintaining their original order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Iterate from left to right of the string, if a character is not seen before then we add that character to answer, and mark the character as seen.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to remove duplicates from a string.\n    string removeDuplicates(string &s) {\n        // creating a hash table to store frequency of characters.\n        vector<int> hash(256, 0);\n        // declaring a string to store the final answer.\n        string ans;\n        // iterating over every character in the string.\n        for (char c : s) {\n            // if the character is encountered for the first time,\n            // adding it to the answer string and updating its frequency.\n            if (hash[c] == 0) {\n                ans.push_back(c);\n                hash[c]++;\n            }\n        }\n        // returning the answer string without duplicates.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    String removeDuplicates(String s) {\n        int[] hash = new int[256];\n        // Declaring a string to store the final answer.\n        StringBuilder ans = new StringBuilder();\n        // Iterating over every character in the string.\n        for (char c : s.toCharArray()) {\n            // If the character is encountered for the first time,\n            // adding it to the answer string and updating its frequency.\n            if (hash[c] == 0) {\n                ans.append(c);\n                hash[c]++;\n            }\n        }\n        // Returning the answer string without duplicates.\n        return ans.toString();\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to remove duplicates from a string.\n    def removeDuplicates(self, s):\n        # Creating a dictionary to store frequency of characters.\n        hash_table = {}\n        # Declaring a string to store the final answer.\n        ans = \"\"\n        # Iterating over every character in the string.\n        for c in s:\n            # If the character is encountered for the first time,\n            # adding it to the answer string and updating its frequency.\n            if c not in hash_table:\n                ans += c\n                hash_table[c] = 1\n        # Returning the answer string without duplicates.\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function template for Csharp\npublic class Solution {\n    // Complete this function\n    // Function to remove duplicates from the given string\n    public string removeDuplicates(string s) {\n        // creating a hash table to store frequency of characters.\n        int[] hash = new int[256];\n        // declaring a string to store the final answer.\n        string ans = \"\";\n        // iterating over every character in the string.\n        foreach (char c in s) {\n            // if the character is encountered for the first time,\n            // adding it to the answer string and updating its frequency.\n            if (hash[c] == 0) {\n                ans += c;\n                hash[c]++;\n            }\n        }\n        // returning the answer string without duplicates.\n        return ans;\n    }\n};",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string} n\n * @return {string}\n */\n\nclass Solution {\n    removeDuplicates(s) {\n        // code here\n        let hash = new Array(256).fill(0);\n        let ans = '';\n        for (let i = 0; i < s.length; i++) {\n            let c = s.charAt(i);\n            if (hash[c.charCodeAt()] === 0) {\n                ans += c;\n                hash[c.charCodeAt()]++;\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}