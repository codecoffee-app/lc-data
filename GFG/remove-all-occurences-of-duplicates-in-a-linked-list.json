{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706411,
            "title": "Remove all occurences of duplicates in a linked list",
            "titleSlug": "remove-all-occurences-of-duplicates-in-a-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Given a sorted linked list, delete all nodes that have duplicate numbers (all occurrences), leaving only numbers that appear once in the original list, and </span><span style=\"font-size: 18px;\">return the head of the modified linked list.</span><span style=\"font-size: 18px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">Linked List = 23-&gt;28-&gt;28-&gt;35-&gt;49-&gt;49-&gt;53-&gt;53</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>23 35</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/706411/Web/Other/blobid0_1719990710.png\" width=\"400\" height=\"173\" /><br /></strong></span><span style=\"font-size: 18px;\">The duplicate numbers are 28, 49 and 53 which are removed from the list.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Input:</span> </strong></span><span style=\"font-size: 18px;\">Linked List =<strong> </strong>11-&gt;11-&gt;11-&gt;11-&gt;75-&gt;75</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>Empty list</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> <br /></strong></span><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/706411/Web/Other/blobid1_1719990734.png\" width=\"401\" height=\"180\" /><br />All the nodes in the linked list have duplicates. </span><span style=\"font-size: 18px;\">Hence the resultant list would be empty.</span></pre>\n<div><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)</span></div>\n<div><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space: </strong>O(1)<br /></span><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></div>\n<div><span style=\"font-size: 18px;\">list.data&gt;0</span></div>\n<div><span style=\"font-size: 18px;\">1 &le; size(list) &le; 10<sup>5</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The idea is to maintain a pointer<em>&nbsp;(prev)</em>&nbsp;to the node which just previous to the block of nodes we are checking for duplicates.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "/*Removing all duplicates from a linked list*/\n\nstruct Node* removeAllDuplicates(struct Node* head) {\n    // creating a dummy node to handle edge cases\n    struct Node* dummy = (struct Node*)malloc(sizeof(struct Node));\n    dummy->data = -1;\n\n    // assigning the head node to the next of the dummy node\n    dummy->next = head;\n\n    // initializing the previous pointer to dummy node\n    struct Node* prev = dummy;\n\n    // initializing the current pointer to head node\n    struct Node* current = head;\n\n    // iterating through the linked list\n    while (current != NULL) {\n        // if the next node's data is equal to current node's data\n        while (current->next != NULL && prev->next->data == current->next->data)\n            current = current->next;\n\n        // if there are no duplicates for current node, updating the previous pointer to\n        // current\n        if (prev->next == current)\n            prev = prev->next;\n        // if there are duplicates for current node, updating the previous node's next\n        // pointer to current's next node\n        else\n            prev->next = current->next;\n\n        // moving current pointer to next node\n        current = current->next;\n    }\n\n    // updating the head node after removing duplicates\n    head = dummy->next;\n    return head;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    Node* removeAllDuplicates(struct Node* head) {\n        // create a dummy node\n        // that acts like a fake\n        // head of list pointing\n        // to the original head\n        Node* dummy = new Node(-1);\n\n        // dummy node points\n        // to the original head\n        dummy->next = head;\n\n        // Node pointing to last\n        // node which has no duplicate.\n        Node* prev = dummy;\n\n        // Node used to traverse\n        // the linked list.\n        Node* current = head;\n\n        while (current != NULL) {\n            // Until the current and\n            // previous values are\n            // same, keep updating current\n            while (current->next != NULL && prev->next->data == current->next->data)\n                current = current->next;\n\n            // if current has unique value\n            // i.e current is not updated,\n            // Move the prev pointer to\n            // next node\n            if (prev->next == current)\n                prev = prev->next;\n\n            // when current is updated\n            // to the last duplicate\n            // value of that segment,\n            // make prev the next of current\n            else\n                prev->next = current->next;\n\n            current = current->next;\n        }\n\n        // update original head to\n        // the next of dummy node\n        head = dummy->next;\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public Node removeAllDuplicates(Node head) {\n        // Create a dummy node that acts like a fake\n        // head of list pointing to the original head\n        Node dummy = new Node(0);\n\n        // Dummy node points to the original head\n        dummy.next = head;\n        Node prev = dummy;\n        Node current = head;\n\n        while (current != null) {\n            // Until the current and previous values\n            // are same, keep updating current\n            while (current.next != null && prev.next.data == current.next.data)\n                current = current.next;\n\n            // If current has unique value i.e current\n            // is not updated, Move the prev pointer\n            // to next node\n            if (prev.next == current) prev = prev.next;\n\n            // When current is updated to the last\n            // duplicate value of that segment, make\n            // prev the next of current*/\n            else\n                prev.next = current.next;\n\n            current = current.next;\n        }\n\n        // Update original head to the next of dummy\n        // node\n        head = dummy.next;\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\n\nclass Solution:\n\n    def removeAllDuplicates(self, temp):\n\n        # temp is head node of linkedlist\n        curr = temp\n        # print(' print something')\n        head = prev = Node(None)\n        head.next = curr\n\n        # Here we use same as we do in removing\n        # duplicates and only extra thing is that\n        # we need to remove all elements\n        # having duplicates that we did in 30-31\n        while curr and curr.next:\n\n            # until the current value and next\n            # value are same keep updating the current value\n            if curr.data == curr.next.data:\n                while (curr and curr.next and curr.data == curr.next.data):\n                    curr = curr.next\n\n                    # still one of duplicate values left\n                    # so point prec to curr\n                curr = curr.next\n                prev.next = curr\n            else:\n                prev = prev.next\n                curr = curr.next\n        return head.next\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    removeAllDuplicates(node) {\n        // Create a dummy node that acts like a fake head of the list\n        let dummy = new Node(-1);\n        // Point the dummy node to the original head\n        dummy.next = node;\n\n        // Node pointing to last node which has no duplicate\n        let prev = dummy;\n        // Node used to traverse the linked list\n        let current = node;\n\n        while (current !== null) {\n            // Until the current and previous values are same, keep updating current\n            while (current.next !== null && prev.next.data === current.next.data) {\n                current = current.next;\n            }\n\n            // If current has unique value i.e current is not updated, move the prev\n            // pointer to next node\n            if (prev.next === current) {\n                prev = prev.next;\n            }\n            // When current is updated to the last duplicate value of that segment, make\n            // prev the next of current\n            else {\n                prev.next = current.next;\n            }\n\n            current = current.next;\n        }\n\n        // Update original head to the next of dummy node\n        node = dummy.next;\n\n        return node;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}