{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702978,
            "title": "Remove b and ac from a given string",
            "titleSlug": "remove-b-and-ac-from-a-given-string4336",
            "content": "<p><span style=\"font-size: 20px;\">Given a string, eliminate all &ldquo;b&rdquo; and &ldquo;ac&rdquo; in the string,&nbsp;replace them in-place&nbsp;and&nbsp;iterate over the string once.</span></p>\n<p><strong><span style=\"font-size: 20px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input:</strong> str = \"aacbacc\"\n<strong>Output:</strong> ac\n<strong>Explanation:</strong> Iterate once and remove\noccurrence of \"b\" and \"ac\"</span></pre>\n<p><strong><span style=\"font-size: 20px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input:</strong> str = \"aacb\"\n<strong>Output:</strong> a\n<strong>Explanation:</strong> Iterate once and remove\noccurrence of \"b\" and \"ac\"</span></pre>\n<p><strong><span style=\"font-size: 20px;\">Your task:</span></strong><br /><span style=\"font-size: 20px;\">Your task is to complete the function&nbsp;</span><span style=\"font-size: 18px;\"><strong><code>stringFilter</code></strong></span><span style=\"font-size: 20px;\"><strong>()&nbsp;</strong>which takes a single string as input and modify the string as mentioned above. You need not take any input or print anything.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 20px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|s|)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Constraints:</strong><br />1 &lt;= |S| &lt;= 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">String contains lower case alphabets</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string, eliminate all occurrences of 'b' and 'ac'. Perform the replacement in-place, iterating over the string only once.",
                "constraints": [
                    "1 <= |S| <= 10^5",
                    "String contains lowercase alphabets"
                ],
                "testcases": [
                    {
                        "input": "aacbacc",
                        "output": "ac",
                        "explanation": "The string 'aacbacc' is processed as follows: 'b' is removed, and 'ac' is removed where 'a' is followed by 'c'. Resulting string will be 'ac'"
                    },
                    {
                        "input": "aacb",
                        "output": "a",
                        "explanation": "The string 'aacb' is processed as follows: 'b' is removed, and 'ac' is removed where 'a' is followed by 'c'. Resulting string will be 'a'"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The approach is to use two index variables i and j. We move forward in the string using &lsquo;i&rsquo; and add characters using index j except &lsquo;b&rsquo; and &lsquo;ac&rsquo;. The trick here is how to track &lsquo;a&rsquo; before &lsquo;c&rsquo;.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution\n{\n  public:\n    string stringFilter(string str) \n    { \n    \tint ONE = 1, TWO = 2;\n    \n        // state is initially ONE (The previous character is not a) \n        int state = ONE; \n      \n        // i and j are index variables, i is used to read next \n        // character of input string, j is used for indexes of output \n        // string (modified input string) \n        int j = 0; \n      \n        // Process all characters of input string one by one \n        for (int i = 0; i < str.size(); i++) \n        { \n            /* If state is ONE, then do NOT copy the current character \n              to output if one of the following conditions is true \n               ...a) Current character is 'b' (We need to remove 'b') \n               ...b) Current character is 'a' (Next character may be 'c') */\n            if (state == ONE && str[i] != 'a' && str[i] != 'b') \n            { \n                str[j] = str[i]; \n                j++; \n            } \n      \n            // If state is TWO and current character is not 'c' (other- \n            // wise we ignore both previous and current characters) \n            if (state == TWO && str[i] != 'c') \n            { \n                // First copy the previous 'a' \n                str[j] = 'a'; \n                j++; \n      \n                // Then copy the current character if it is not 'a' \n                // and 'b' \n                if (str[i] != 'a' && str[i] != 'b') \n                { \n                    str[j] = str[i]; \n                    j++; \n                } \n            } \n      \n            // Change state according to current character \n            state = (str[i] == 'a')? TWO: ONE; \n        } \n      \n        // If last character was 'a', copy it to output \n        if (state == TWO) \n        { \n            str[j] = 'a'; \n            j++; \n        } \n      \n        // Set the string terminator \n        return str.substr(0, j);\n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution{\n    stringFilter(str){\n        let ONE = 1, TWO = 2;\n        let state = ONE; \n      \n        let j = 0; \n      \n        let arr = str.split('');\n        for (let i = 0; i < str.length; i++) \n        { \n            if (state == ONE && str[i] != 'a' && str[i] != 'b') \n            { \n                arr[j] = str[i]; \n                j++; \n            } \n\n            if (state == TWO && str[i] != 'c') \n            { \n                arr[j] = 'a'; \n                j++; \n  \n                if (str[i] != 'a' && str[i] != 'b') \n                { \n                    arr[j] = str[i]; \n                    j++; \n                } \n            } \n\n            state = (str[i] == 'a')? TWO: ONE; \n        } \n\n        if (state == TWO) \n        { \n            arr[j] = 'a'; \n            j++; \n        } \n\n        return arr.join('').substring(0, j);\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    //Function to filter out the characters from the string.\n    public string stringFilter(string str)\n    {\n        // state is initially ONE (The previous character is not a) \n        int state = 1;\n        int j = 0;\n        char[] filteredStr = str.ToCharArray();\n\n        // Process all characters of input string one by one \n        for (int i = 0; i < str.Length; i++)\n        {\n            /* If state is ONE, then do NOT copy the current character \n              to output if one of the following conditions is true \n               ...a) Current character is 'b' (We need to remove 'b') \n               ...b) Current character is 'a' (Next character may be 'c') */\n            if (state == 1 && str[i] != 'a' && str[i] != 'b')\n            {\n                filteredStr[j] = str[i];\n                j++;\n            }\n\n            // If state is TWO and current character is not 'c' (other- \n            // wise we ignore both previous and current characters) \n            if (state == 2 && str[i] != 'c')\n            {\n                // First copy the previous 'a' \n                filteredStr[j] = 'a';\n                j++;\n\n                // Then copy the current character if it is not 'a' \n                // and 'b' \n                if (str[i] != 'a' && str[i] != 'b')\n                {\n                    filteredStr[j] = str[i];\n                    j++;\n                }\n            }\n\n            // Change state according to current character \n            state = (str[i] == 'a') ? 2 : 1;\n        }\n\n        // If last character was 'a', copy it to output \n        if (state == 2)\n        {\n            filteredStr[j] = 'a';\n            j++;\n        }\n\n        // Set the string terminator \n        return new string(filteredStr, 0, j);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}