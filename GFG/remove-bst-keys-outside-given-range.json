{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706227,
            "title": "Remove BST keys outside given range",
            "titleSlug": "remove-bst-keys-outside-given-range",
            "content": "<p><span style=\"font-size:18px\">Given a Binary Search Tree (BST) and a range [min, max], remove all keys which are outside the given range. The modified tree should also be BST.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:\r\n</span></strong><span style=\"font-size:18px\">Range = [-10, 13]</span>\r\n<span style=\"font-size:18px\"><img alt=\"Lightbox\" src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/BinaryTree14.png\" style=\"height:170px; width:170px\" /></span>\r\n<strong><span style=\"font-size:18px\">Output:</span></strong>\r\n<span style=\"font-size:18px\">-8 6 7 13</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">Nodes with values -13, 14 and 15 are \r\noutside the given range </span><span style=\"font-size:18px\">and hence are \r\nremoved from the BST.</span>\r\n\r\n<span style=\"font-size:18px\"><img alt=\"BinaryTreeModified2\" src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/BinaryTreeModified2.png\" style=\"height:140px; width:170px\" /></span>\r\n<span style=\"font-size:18px\">This is the resultant BST and it&#39;s \r\ninorder traversal is -8 6 7 13.\r\n</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:</span></strong>\r\n<span style=\"font-size:18px\">Range = [2, 6]\r\n\\t  14\r\n\\t/    \\\r\n     4\\t16\r\n    / \\     /\r\n   2   8   15\r\n  / \\  / \\\r\n -8  3 7  10</span>\r\n<strong><span style=\"font-size:18px\">Output:\r\n</span></strong><span style=\"font-size:18px\">2 3 4</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">After removing nodes outside the range, \r\nthe resultant BST looks like:\r\n\\t\\t   4\r\n\\t\\t  /\r\n\\t\\t 2\r\n\\t\\t  \\\r\n\\t\\t    3 \r\nThe inorder traversal of this tree is: 2 3 4</span>\r\n</pre>\r\n\r\n<div><strong><span style=\"font-size:18px\">Your task:</span></strong></div>\r\n\r\n<div><span style=\"font-size:18px\">You don&#39;t have to read input or print anything. Your task is to complete the function <strong>removekeys()</strong> which takes the root node of the BST and the range as input and returns the root of the modified BST after removing the nodes outside the given range.</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(number of nodes)</span></div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong> O(h)</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><strong><span style=\"font-size:18px\">Constraints:</span></strong></div>\r\n\r\n<div><span style=\"font-size:18px\">1 &le; Number of Nodes &le; 10<sup>5</sup><br />\r\n1 &le; K &le; 10<sup>5</sup></span></div>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">When a node&#39;s key is outside the&nbsp;range, there can be two possible cases. Either the node&#39;s key is smaller than the min value of range or greater than the max value of range. The idea is to fix the tree in postorder fashion.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft",
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n    public:\r\n    Node* removekeys(Node* root, int l, int r) {\r\n        if (root == NULL) return NULL;\r\n    \r\n        // First fix the left and right subtrees of root\r\n        root->left = removekeys(root->left, l, r);\r\n        root->right = removekeys(root->right, l, r);\r\n    \r\n        // Now fix the root.  There are 2 possible cases for toot\r\n        // 1.a) Root's key is smaller than min value (root is not in range)\r\n        if (root->data < l) {\r\n            Node* rChild = root->right;\r\n            delete root;\r\n            return rChild;\r\n        }\r\n        // 1.b) Root's key is greater than max value (root is not in range)\r\n        if (root->data > r) {\r\n            Node* lChild = root->left;\r\n            delete root;\r\n            return lChild;\r\n        }\r\n        // 2. Root is in range\r\n        return root;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Backend complete function template for JAVA\r\n\r\nclass Solution {\r\n    Node removekeys(Node root, int l, int r) {\r\n        if (root == null) return null;\r\n\r\n        // First fix the left and right subtrees of root\r\n        root.left = removekeys(root.left, l, r);\r\n        root.right = removekeys(root.right, l, r);\r\n\r\n        // Now fix the root.  There are 2 possible cases for toot\r\n        // 1.a) Root's key is smaller than min value (root is not in range)\r\n        if (root.data < l) {\r\n            Node rChild = root.right;\r\n            root = null;\r\n            return rChild;\r\n        }\r\n        // 1.b) Root's key is greater than max value (root is not in range)\r\n        if (root.data > r) {\r\n            Node lChild = root.left;\r\n            root = null;\r\n            return lChild;\r\n        }\r\n        // 2. Root is in range\r\n        return root;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function template for Python 3\n\ndef removeKeysHelper(root, l, r):\n    #recursively remove keys outside the given range\n    if (not root) :\n        return None\n    \n    ### perform the recursion for the left subtree\n    root.left = removeKeysHelper(root.left,l,r)\n    \n    ### perform the recursion for the right subtree\n    root.right = removeKeysHelper(root.right,l,r)\n\n    ### if the current node's data is less than the given range, remove the node and return the right child\n    if root.data < l :\n        rChild = root.right\n        root = None\n        return rChild\n\n    ### if the current node's data is greater than the given range, remove the node and return the left child\n    if root.data > r :\n        lChild = root.left\n        root = None\n        return lChild\n\n    ### if the current node's data is within the given range, return the node as it is\n    return root \n        \nclass Solution:\n    ### function to remove nodes outside a given range.\n    def removekeys(self, root, l, r):\n        return removeKeysHelper(root,l,r)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}