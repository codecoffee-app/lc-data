{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703554,
            "title": "Remove character",
            "titleSlug": "remove-character3815",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings str1 and str2, remove those characters from the first string(str1) which are present in the second string(str2). Both the strings are different and contain only lowercase characters.</span><br /><strong><span style=\"font-size: 18px;\">NOTE: </span></strong><span style=\"font-size: 18px;\">Size of</span><span style=\"font-size: 18px;\"><span style=\"box-sizing: border-box; margin: 0px; padding: 0px;\"> the&nbsp;</span>first string&nbsp;is always greater than the size of</span><span style=\"font-size: 18px;\"><span style=\"box-sizing: border-box; margin: 0px; padding: 0px;\"> the&nbsp;</span>second string( |str1| &gt; |str2|).</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">str1 </span>= \"computer\", <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">str2</span>= \"cat\"\n<strong>Output:</strong> \"ompuer\"\n<strong>Explanation: </strong>After removing characters(c, a, t) from string1 we get \"ompuer\"</span><span style=\"font-size: 18px;\">.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">str1 </span>= \"occurrence</span><span style=\"font-size: 18px;\">\", <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">str2 </span>= \"car\"\n<strong>Output:</strong> \"ouene\"\n<strong>Explanation: </strong>After removing characters (c, a, r) from string1 we get \"ouene\"</span><span style=\"font-size: 18px;\">.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |Str1| , |Str2| &lt;= 50</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `str1` and `str2`, remove all characters from `str1` that are present in `str2`. Both strings contain only lowercase characters, and `str1` is always longer than `str2`.",
                "constraints": [
                    "1 <= |str1|, |str2| <= 50"
                ],
                "testcases": [
                    {
                        "input": "str1 = \"computer\", str2 = \"cat\"",
                        "output": "\"ompuer\"",
                        "explanation": "Removing 'c', 'a', and 't' from \"computer\" results in \"ompuer\"."
                    },
                    {
                        "input": "str1 = \"occurrence\", str2 = \"car\"",
                        "output": "\"ouene\"",
                        "explanation": "Removing 'c', 'a', and 'r' from \"occurrence\" results in \"ouene\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Hashing.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to remove characters from str1 that are present in str2\n    string removeChars(string str1, string str2) {\n        string result;\n        int i, j, l1, l2;\n\n        // Getting lengths of the input strings\n        l1 = str1.length();\n        l2 = str2.length();\n\n        int hash[257];\n\n        // Initializing hash array to 0\n        for (i = 0; i < 257; i++) {\n            hash[i] = 0;\n        }\n\n        // Counting occurrences of characters in str2 using hash array\n        for (i = 0; i < l2; i++) {\n            hash[str2[i]]++;\n        }\n\n        // Iterating over str1 to check if each character is present in str2\n        for (i = 0; i < l1; i++) {\n            // If character is not present in str2, adding it to the result string\n            if (hash[str1[i]] == 0) {\n                result = result + str1[i];\n            }\n        }\n\n        // Returning the final result string\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function template for C#\n\nclass Solution {\n    // Complete this function\n    // Function to remove characters from given strings.\n    public string removeChars(string str1, string str2) {\n        string result = \"\";\n        int i, l1, l2;\n\n        // Getting lengths of the input strings\n        l1 = str1.Length;\n        l2 = str2.Length;\n\n        int[] hash = new int[257];\n\n        // Initializing hash array to 0\n        for (i = 0; i < 257; i++) {\n            hash[i] = 0;\n        }\n\n        // Counting occurrences of characters in str2 using hash array\n        for (i = 0; i < l2; i++) {\n            hash[str2[i]]++;\n        }\n\n        // Iterating over str1 to check if each character is present in str2\n        for (i = 0; i < l1; i++) {\n            // If character is not present in str2, adding it to the result string\n            if (hash[str1[i]] == 0) {\n                result += str1[i];\n            }\n        }\n\n        // Returning the final result string\n        return result;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution{\n    removeChars(s1, s2){\n        let result = '';\n        let hash = {};\n\n        for(let i=0; i<s2.length; i++){\n            hash[s2.charAt(i)] = true;\n        }\n\n        for(let i=0; i<s1.length; i++){\n            if(!hash[s1.charAt(i)]){\n                result += s1.charAt(i);\n            }\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}