{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701301,
            "title": "Remove common characters and concatenate",
            "titleSlug": "remove-common-characters-and-concatenate-1587115621",
            "content": "<p><span style=\"font-size:18px\">Given two strings&nbsp;s1&nbsp;and&nbsp;s2. Modify both the strings such that all the common characters of s1 and s2 are to be removed and the uncommon characters of s1 and s2 are to be concatenated.<br />\n<strong>Note:&nbsp;</strong>If all characters are removed&nbsp;print&nbsp;-1.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>s1 = aacdb\ns2 = gafd\n<strong>Output: </strong>cbgf<strong>\nExplanation: </strong>The common characters of s1\nand s2 are: a, d. The uncommon characters\nof s1 and s2 are c, b, g and f. Thus the\nmodified string with uncommon characters\nconcatenated is cbgf.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>s1 = abcs\ns2 = cxzca\n<strong>Output: </strong>bsxz<strong>\nExplanation: </strong>The common characters of s1\nand s2 are: a,c. The uncommon characters\nof s1 and s2 are b,s,x and z. Thus the\nmodified string with uncommon characters\nconcatenated is bsxz.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nThe task is to complete the function&nbsp;<strong>concatenatedString()</strong> which removes the common characters, concatenates, and returns the&nbsp;string. If all characters are removed then return -1.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(Number of distinct characters).<br />\n<strong>Note:&nbsp;</strong>N =&nbsp;|Length of Strings|</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:&nbsp;</strong><br />\n1 &lt;= |Length of Strings| &lt;= 10<sup>4</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings s1 and s2, modify them by removing all common characters. Concatenate the remaining uncommon characters from both strings. If all characters are removed, return -1.",
                "constraints": [
                    "1 <= |Length of Strings| <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "s1 = aacdb\ns2 = gafd",
                        "output": "cbgf",
                        "explanation": "The common characters between s1 and s2 are 'a' and 'd'. Removing them leaves 'c' and 'b' in s1, and 'g' and 'f' in s2.  Concatenating these uncommon characters yields 'cbgf'."
                    },
                    {
                        "input": "s1 = abcs\ns2 = cxzca",
                        "output": "bsxz",
                        "explanation": "The common characters between s1 and s2 are 'a' and 'c'. Removing them leaves 'b' and 's' in s1, and 'x' and 'z' in s2. Concatenating these uncommon characters yields 'bsxz'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution\n{\n    public:\n    //Function to remove common characters and concatenate two strings.\n    string concatenatedString(string s1, string s2) \n    { \n        unordered_map<char, int> m; \n    \tstring res = \"\"; \n    \n    \t//using map to store all characters of s2 in map.\n    \tfor (int i = 0; i < s2.size(); i++) \n    \t\tm[s2[i]] = 1; \n    \n    \t//finding characters of s1 that are not present in s2\n    \t//and appending them to result.\n    \tfor (int i = 0; i < s1.size(); i++) \n    \t{ \n    \t\tif (m.find(s1[i]) == m.end()) \n    \t\t\tres += s1[i]; \n    \t\telse\n    \t\t\tm[s1[i]] = 2; \n    \t} \n    \n    \t//finding characters of s2 that are not present in s1\n    \t//and appending them to result.\n    \tfor (int i = 0; i < s2.size(); i++) \n    \t\tif (m[s2[i]] == 1) \n    \t\t\tres += s2[i]; \n    \t\t\t\n    \tif(res == \"\")\n    \tres = \"-1\";\n    \t\n    \t//returning the result.\n    \treturn res; \n    } \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution\n{\n    //Function to remove common characters and concatenate two strings.\n    public static String concatenatedString(String s1,String s2)\n    {\n        String res = \"\";\n        int i;\n  \n        //using map to store all characters of s2 in map.\n        HashMap<Character, Integer> m = new HashMap<Character, Integer>();\n        for (i = 0; i < s2.length(); i++)\n            m.put(s2.charAt(i), 1);\n  \n        //finding characters of s1 that are not present in s2\n    \t//and appending them to result.\n        for (i = 0; i < s1.length(); i++)\n            if (!m.containsKey(s1.charAt(i)))\n                res += s1.charAt(i);\n            else\n                m.put(s1.charAt(i), 2);\n  \n        //finding characters of s2 that are not present in s1\n    \t//and appending them to result.\n        for (i = 0; i < s2.length(); i++)\n            if (m.get(s2.charAt(i)) == 1)\n                res += s2.charAt(i);\n                \n        if(res == \"\")\n    \tres = \"-1\";\n    \t\n        //returning the result.\n        return res;\n    }\n}\n\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "    \n\n#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to remove common characters and concatenate two strings.\n    def concatenatedString(self,s1,s2):\n        \n        res = \"\"\n        m = {}\n      \n        #using map to store all characters of s2 in map.\n        for i in range(0, len(s2)):\n            m[s2[i]] = 1\n      \n        #finding characters of s1 that are not present in s2\n    \t#and appending them to result.\n        for i in range(0, len(s1)):\n            if(not s1[i] in m):\n                res = res + s1[i]\n            else:\n                m[s1[i]] = 2\n      \n        #finding characters of s2 that are not present in s1\n    \t#and appending them to result.\n        for i in range(0, len(s2)):\n            if(m[s2[i]] == 1):\n                res = res + s2[i]\n        \n        if(res==\"\"):\n            res=\"-1\"\n            \n        #returning the result.\n        return res     ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {string} s1\n * @param {string} s2\n * @returns {string}\n*/\n \n\nclass Solution \n{\n    //Function to remove common characters and concatenate two strings.\n    concatenatedString(s1, s2)\n    {\n        let m = new Array(256);\n        m.fill(0);\n        \n    \tlet res = \"\";  \n    \n    \t//using map to store all characters of s2 in map.\n    \tfor (let i = 0; i < s2.length; i++) \n    \t\tm[s2.charCodeAt(i)] = 1; \n    \n    \t//finding characters of s1 that are not present in s2\n    \t//and appending them to result.\n    \tfor (let i = 0; i < s1.length; i++) \n    \t{ \n    \t\tif (m[s1.charCodeAt(i)] == 0) \n    \t\t\tres += s1[i]; \n    \t\telse\n    \t\t\tm[s1.charCodeAt(i)] = 2; \n    \t} \n    \n    \t//finding characters of s2 that are not present in s1\n    \t//and appending them to result.\n    \tfor (let i = 0; i < s2.length; i++) \n    \t\tif (m[s2.charCodeAt(i)] == 1) \n    \t\t\tres += s2[i];\n    \t\t\t\n    \tif(res == \"\")\n    \tres = \"-1\";\n    \t\n    \t//returning the result.\n    \treturn res; \n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}