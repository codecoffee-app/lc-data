{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700196,
            "title": "Remove Duplicates from a Sorted Linked List",
            "titleSlug": "remove-duplicate-element-from-sorted-linked-list",
            "content": "<p><span style=\"font-size: 12pt;\">Given a singly linked list. The task is to remove duplicates (nodes with duplicate values) from the given list (if it exists).</span><br /><span style=\"font-size: 12pt;\"><strong>Note:</strong> Try not to use extra space. The nodes are arranged in a <strong>sorted </strong>way.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input:\n</strong>LinkedList: 2-&gt;2-&gt;4-&gt;5\n<strong>Output: </strong>2 -&gt; 4 -&gt; 5<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700196/Web/Other/blobid0_1723610760.png\" width=\"264\" height=\"161\" /><strong>\nExplanation: </strong>In the given linked list 2 -&gt; 2 -&gt; 4 -&gt; 5, only 2 occurs more than 1 time. So we need to remove it once.\n</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input:\n</strong>LinkedList: 2-&gt;2-&gt;2-&gt;2-&gt;2\n<strong>Output: </strong>2<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700196/Web/Other/blobid1_1723610768.png\" width=\"264\" height=\"161\" /><strong>\nExplanation: </strong>In the given linked list  2 -&gt; 2 -&gt; 2 -&gt; 2, 2 is the only element and is repeated 5 times. So we need to remove any four 2.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity</strong> : O(n)<br /><strong>Expected Space</strong>&nbsp;</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 16px;\">Complexity</strong><span style=\"font-size: 12pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: O(1)</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &lt;= Number of nodes, data of nodes &lt;= 10<sup>5&nbsp;<br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted singly linked list, remove any duplicate nodes so that each unique value appears only once in the list. This should be done in-place, without using extra space.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5",
                    "1 <= Data of nodes <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 2->2->4->5",
                        "output": "2 -> 4 -> 5",
                        "explanation": "The input list contains a duplicate '2'. The output list has this duplicate removed, leaving only one instance of '2'."
                    },
                    {
                        "input": "LinkedList: 2->2->2->2->2",
                        "output": "2",
                        "explanation": "The input list contains only the value '2' repeated multiple times. The output list contains only a single instance of the value '2'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a for loop with a ternary operator to skip duplicates or advance.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft",
            "oyo-rooms",
            "oracle",
            "visa",
            "adobe",
            "myntra"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Function to remove duplicates from a sorted linked list\nstruct Node* removeDuplicates(struct Node* head) {\n    if (head == NULL) // Check for an empty list\n        return NULL;\n\n    struct Node* current = head;\n\n    while (current != NULL && current->next != NULL) {\n        if (current->data == current->next->data) {\n            struct Node* temp = current->next;\n            current->next = current->next->next;\n            free(temp); // Free the memory of the removed node\n        } else {\n            current = current->next;\n        }\n    }\n    return head;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to remove duplicates from sorted linked list.\n    Node* removeDuplicates(Node* head) {\n        // using a pointer to iterate over linked list.\n        struct Node* current = head;\n\n        // traversing through the linked list.\n        while (current->next != NULL) {\n            // if data at current node and next node are same, we store the node\n            // next to the next node of current node in link of current node.\n            if (current->data == current->next->data)\n                current->next = current->next->next;\n\n            // else we just move the pointer to next node.\n            else\n                current = current->next;\n        }\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to remove duplicates from sorted linked list.\n    Node removeDuplicates(Node head) {\n        // using a pointer to iterate over linked list.\n        Node current = head;\n\n        // traversing through the linked list.\n        while (current.next != null) {\n            // if data at current node and next node are same, we store the node\n            // next to the next node of current node in link of current node.\n            if (current.data == current.next.data) current.next = current.next.next;\n\n            // else we just move the pointer to next node.\n            else\n                current = current.next;\n        }\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n'''\n\tFunction to remove duplicates from given \n\tsorted linked list.\n\t\n\tFunction Arguments: head (head of the given linked list) \n\tReturn Type: none, just remove the duplicates from the list.\n\n\t{\n\t\t# Node Class\n\t\tclass Node:\n\t\t    def __init__(self, data):   # data -> value stored in node\n\t\t        self.data = data\n\t\t        self.next = None\n\t}\n\n\tContributed By: Nagendra Jha\n'''\n\n\n#Function to remove duplicates from sorted linked list.\ndef removeDuplicates(head):\n\n    #using a pointer to iterate over linked list.\n    curr_node = head\n\n    #traversing through the linked list.\n    while curr_node.next:\n\n        #if data at current node and next node are same, we store the node\n        #next to the next node of current node in link of current node.\n        if (curr_node.data == curr_node.next.data):\n            curr_node.next = curr_node.next.next\n\n        #else we just move the pointer to next node.\n        else:\n            curr_node = curr_node.next\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} head\n * @returns {Node}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to remove duplicates from sorted linked list.\n    removeDuplicates(head) {\n        // using a pointer to iterate over linked list.\n        let current = head;\n\n        // traversing through the linked list.\n        while (current.next != null) {\n            // if data at current node and next node are same, we store the node\n            // next to the next node of current node in link of current node.\n            if (current.data == current.next.data) current.next = current.next.next;\n\n            // else we just move the pointer to next node.\n            else\n                current = current.next;\n        }\n        return head;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}