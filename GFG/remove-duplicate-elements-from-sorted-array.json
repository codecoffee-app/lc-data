{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700246,
            "title": "Remove Duplicates Sorted Array",
            "titleSlug": "remove-duplicate-elements-from-sorted-array",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>sorted</strong> array<strong> arr.</strong> Return the size of the modified array which contains only distinct elements.<br /></span><span style=\"font-size: 18px;\"><em>Note:</em><strong> </strong><br />1.<strong>&nbsp;</strong>Don't use set or HashMap to solve the problem.<br />2. You <strong>must</strong> return the modified array <strong>size only </strong>where distinct elements are present and <strong>modify</strong> the original array such that all the distinct elements come at the beginning of the original array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [2, 2, 2, 2, 2]\n<strong>Output:</strong> [2]\n<strong>Explanation:</strong> After removing all the duplicates only one instance of 2 will remain i.e. [2] so modified array will contains 2 at first position and you should <strong>return 1</strong> after modifying the array, the driver code will print the modified array elements.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [1, 2, 4]\n<strong>Output:</strong> [1, 2, 4]<br /><strong>Explation:  </strong>As the array does not contain any duplicates so you should return 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; a<sub>i</sub> &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a **sorted** array **arr**, modify the array in-place such that it contains only distinct elements at the beginning. Return the size of the modified array, representing the number of distinct elements.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= a_i <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2, 2, 2, 2, 2]",
                        "output": "1",
                        "explanation": "After removing duplicates, the array becomes [2]. The modified array has a size of 1."
                    },
                    {
                        "input": "[1, 2, 4]",
                        "output": "3",
                        "explanation": "The array already contains distinct elements [1, 2, 4]. Therefore, the modified array has a size of 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Given a sorted array where duplicate elements occur in contiguous positions, you can utilize the two-pointer technique to solve this problem efficiently.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho",
            "morgan-stanley",
            "microsoft",
            "samsung",
            "google",
            "wipro",
            "xome"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to remove duplicates from the given array.\n    int removeDuplicates(vector<int> &arr) {\n        // Initializing pointer i to first element of array.\n        int i = 0, n = arr.size();\n\n        // Iterating through the array.\n        for (int j = 1; j < n; j++) {\n            // If current element is not equal to previous element,\n            // then increment i and update a[i] with the current element.\n            if (arr[j] != arr[i]) {\n                i++;\n                arr[i] = arr[j];\n            }\n        }\n        // Returning the length of the array after removing duplicates.\n        return i + 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function template for Java\n\nclass Solution {\n    // Function to remove duplicates from the given array\n    public int removeDuplicates(int[] arr) {\n\n        // Initializing pointer i to the first element of the array\n        int i = 0, n = arr.length;\n\n        // Iterating through the array.\n        for (int j = 1; j < n; j++) {\n            // If current element is not equal to previous element,\n            // then increment i and update a[i] with the current element.\n            if (arr[j] != arr[i]) {\n                i++;\n                arr[i] = arr[j];\n            }\n        }\n        // Returning the length of the array after removing duplicates.\n        return i + 1;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function template for Python\n\n\nclass Solution:\n\n    def removeDuplicates(self, arr):\n        # Initializing pointer i to the first element of the array\n        i = 0\n        n = len(arr)\n\n        # Iterating through the array\n        for j in range(1, n):\n            # If the current element is not equal to the previous element,\n            # then increment i and update arr[i] with the current element\n            if arr[j] != arr[i]:\n                i += 1\n                arr[i] = arr[j]\n\n        # Returning the length of the array after removing duplicates\n        return i + 1\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to remove duplicates from the given array.\n    removeDuplicates(arr) {\n        // Initializing pointer i to the first element of the array.\n        let i = 0;\n        let n = arr.length;\n\n        // Iterating through the array.\n        for (let j = 1; j < n; j++) {\n            // If the current element is not equal to the previous element,\n            // then increment i and update arr[i] with the current element.\n            if (arr[j] != arr[i]) {\n                i++;\n                arr[i] = arr[j];\n            }\n        }\n        // Returning the length of the array after removing duplicates.\n        return i + 1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}