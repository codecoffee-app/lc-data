{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712264,
            "title": "Remove duplicates from a sorted doubly linked list",
            "titleSlug": "remove-duplicates-from-a-sorted-doubly-linked-list",
            "content": "<p><span style=\"font-size:18px\">Given a doubly&nbsp;linked list of <strong>n </strong>nodes sorted by values, the task is to remove duplicate nodes&nbsp;present in the linked list.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>n = 6<strong>\r\n</strong>1&lt;-&gt;1&lt;-&gt;1&lt;-&gt;2&lt;-&gt;3&lt;-&gt;4\r\n<strong>Output:\r\n</strong>1&lt;-&gt;2&lt;-&gt;3&lt;-&gt;4\r\n<strong>Explanation:</strong>\r\nOnly the first occurance of node with value 1 is \r\nretained, rest nodes with value = 1 are deleted.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>n = 7<strong>\r\n</strong>1&lt;-&gt;2&lt;-&gt;2&lt;-&gt;3&lt;-&gt;3&lt;-&gt;4&lt;-&gt;4\r\n<strong>Output:\r\n</strong>1&lt;-&gt;2&lt;-&gt;3&lt;-&gt;4\r\n<strong>Explanation:</strong>\r\nOnly the first occurance of nodes with values 2,3 and 4 are \r\nretained, rest repeating nodes are deleted.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou have to complete the method&nbsp;<strong>removeDuplicates</strong>() which takes <strong>1</strong>&nbsp;argument: the <strong>head</strong> of the linked list. &nbsp;Your function should&nbsp;return a pointer to a linked list with no duplicate</span>&nbsp;<span style=\"font-size:18px\">element.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraint:</strong><br />\r\n1 &lt;= n &lt;= 10<sup>5</sup><br />\r\n<strong>Expected Time Complexity: </strong>O(n)<br />\r\n<strong>Expected Space Complexity: </strong>O(1)</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted doubly linked list of n nodes, remove all duplicate nodes, leaving only the first occurrence of each unique value.",
                "constraints": [
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "1<->1<->1<->2<->3<->4",
                        "output": "1<->2<->3<->4",
                        "explanation": "The input list contains duplicate '1' values. The output list retains only the first '1' and removes the rest."
                    },
                    {
                        "input": "1<->2<->2<->3<->3<->4<->4",
                        "output": "1<->2<->3<->4",
                        "explanation": "The input list contains duplicate '2', '3', and '4' values. The output list retains only the first occurrence of each value."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n    public:\r\n    \r\n    void _deleteNode(struct Node *node){\r\n        Node * pre=node->prev;\r\n        Node * nxt=node->next;\r\n        free(node);\r\n        \r\n        pre->next=nxt;\r\n        if(nxt!=NULL) nxt->prev=pre;\r\n        \r\n    }\r\n    \r\n    Node * removeDuplicates(struct Node *head)\r\n    {\r\n       Node * myhead=head;\r\n       Node * curr=head;\r\n       \r\n       while(curr!=NULL){ \r\n           while(curr->next!=NULL && curr->next->data==curr->data){\r\n               _deleteNode(curr->next);\r\n           }\r\n           curr=curr->next;\r\n       }\r\n       \r\n       return myhead;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n'''\r\n\r\n\t{\r\n\t\t# Node Class\r\n\t\tclass Node:\r\n\t\t    def __init__(self, data):   # data -> value stored in node\r\n\t\t        self.data = data\r\n\t\t        self.next = None\r\n\t\t        self.prev = None\r\n\t}\r\n\r\n'''\r\nclass Solution:\r\n    # Function to _delete a node in a Doubly Linked List.\r\n    # head_ref -. pointer to head node pointer.\r\n    # _del -. pointer to node to be _deleted.\r\n    def _deleteNode(self, head_ref, _del):\r\n     \r\n        # base case\r\n        if (head_ref == None or _del == None):\r\n            return\r\n     \r\n        # If node to be _deleted is head node\r\n        if (head_ref == _del):\r\n            head_ref = _del.next\r\n     \r\n        # Change next only if node to be _deleted\r\n        # is NOT the last node\r\n        if (_del.next != None):\r\n            _del.next.prev = _del.prev\r\n     \r\n        # Change prev only if node to be _deleted\r\n        # is NOT the first node\r\n        if (_del.prev != None):\r\n            _del.prev.next = _del.next\r\n     \r\n        return head_ref\r\n        \r\n    #Function to remove duplicates from unsorted linked list.\r\n    def removeDuplicates(self, head_ref):\r\n        # if list is empty\r\n        if ((head_ref) == None):\r\n            return None\r\n     \r\n        current = head_ref\r\n        next = None\r\n     \r\n        # traverse the list till the last node\r\n        while (current.next != None) :\r\n     \r\n            # Compare current node with next node\r\n            if (current.data == current.next.data):\r\n     \r\n                # _delete the node pointed to by\r\n                # 'current.next'\r\n                self._deleteNode(head_ref, current.next)\r\n     \r\n            # else simply move to the next node\r\n            else:\r\n                current = current.next\r\n         \r\n        return head_ref\r\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for JAVASCRIPT\r\n\r\n/**\r\n * Node Class\r\n * @param {any} data - value stored in node\r\n * @class\r\n */\r\nclass Node {\r\n    constructor(data) {\r\n        this.data = data;\r\n        this.next = null;\r\n        this.prev = null;\r\n    }\r\n}\r\n\r\nclass Solution {\r\n    /**\r\n     * Function to _delete a node in a Doubly Linked List.\r\n     * @param {Node} head_ref - pointer to head node pointer.\r\n     * @param {Node} _del - pointer to node to be _deleted.\r\n     * @returns {Node} - updated head of the linked list\r\n     */\r\n    _deleteNode(head_ref, _del) {\r\n        // base case\r\n        if (head_ref === null || _del === null) {\r\n            return head_ref;\r\n        }\r\n     \r\n        // If node to be _deleted is head node\r\n        if (head_ref === _del) {\r\n            head_ref = _del.next;\r\n        }\r\n     \r\n        // Change next only if node to be _deleted\r\n        // is NOT the last node\r\n        if (_del.next !== null) {\r\n            _del.next.prev = _del.prev;\r\n        }\r\n     \r\n        // Change prev only if node to be _deleted\r\n        // is NOT the first node\r\n        if (_del.prev !== null) {\r\n            _del.prev.next = _del.next;\r\n        }\r\n     \r\n        return head_ref;\r\n    }\r\n    \r\n    /**\r\n     * Function to remove duplicates from unsorted linked list.\r\n     * @param {Node} head - head of the linked list\r\n     * @returns {Node} - modified head of the linked list with no duplicates\r\n     */\r\n     removeDuplicates(head) {\r\n         // if list is empty\r\n        if (head === null) {\r\n            return null;\r\n        }\r\n     \r\n        let current = head;\r\n        let next = null;\r\n     \r\n        // traverse the list till the last node\r\n        while (current.next !== null) {\r\n            // Compare current node with next node\r\n            if (current.data == current.next.data) {\r\n                // _delete the node pointed to by 'current.next'\r\n                head = this._deleteNode(head, current.next);\r\n            } else {\r\n                // move to the next node\r\n                current = current.next;\r\n            }\r\n        }\r\n     \r\n        return head;\r\n     }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}