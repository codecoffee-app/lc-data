{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700125,
            "title": "Remove duplicates from an unsorted linked list",
            "titleSlug": "remove-duplicates-from-an-unsorted-linked-list",
            "content": "<p><span >Given an unsorted linked list. The task is to remove duplicate elements from this unsorted Linked List. When a value appears in multiple nodes, the node which appeared first should be kept, all other duplicates are to be removed.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList: 5-&gt;2-&gt;2-&gt;4\n<strong>Output: </strong>5-&gt;2-&gt;4<strong>\nExplanation: </strong>Given linked list elements are 5-&gt;2-&gt;2-&gt;4, in which 2 is repeated only. So, we will delete the extra repeated elements 2 from the linked list and the resultant linked list will contain 5-&gt;2-&gt;4<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700125/Web/Other/blobid0_1723638502.png\" width=\"310\" height=\"124\" /> </span></pre>\n<pre><span ><strong>Input: </strong>LinkedList: 2-&gt;2-&gt;2-&gt;2-&gt;2\n<strong>Output: </strong>2<strong>\nExplanation:</strong>Given linked list elements are 2-&gt;2-&gt;2-&gt;2-&gt;2, in which 2 is repeated. So, we will delete the extra repeated elements 2 from the linked list and the resultant linked list will contain only 2.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Space&nbsp;</strong><strong>Complexity</strong><strong>:</strong> O(n)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>6</sup></span><br /><span >0 &lt;= node-&gt;data &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted linked list, remove duplicate elements. The first occurrence of a value should be kept, and all subsequent duplicates should be removed.",
                "constraints": [
                    "1 <= number of nodes <= 10^6",
                    "0 <= node->data <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 5->2->2->4",
                        "output": "5->2->4",
                        "explanation": "The linked list contains the elements 5, 2, 2, and 4.  The value '2' appears twice.  The first '2' is kept, and the second '2' is removed, resulting in the linked list 5->2->4."
                    },
                    {
                        "input": "LinkedList: 2->2->2->2->2",
                        "output": "2",
                        "explanation": "The linked list contains the elements 2, 2, 2, 2, and 2.  The value '2' appears multiple times. Only the first '2' is kept, and all subsequent '2's are removed, resulting in a linked list containing only '2'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a <code>HashSet</code> to track seen values while traversing the linked list. Remove nodes with duplicate values by adjusting pointers accordingly. Maintain the first occurrence of each value.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "intuit"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to remove duplicates from an unsorted linked list.\nclass Solution {\n  public:\n    // Function to remove duplicates from the linked list.\n    Node *removeDuplicates(Node *head) {\n        // Return if the linked list is empty.\n        if (!head)\n            return nullptr;\n\n        // Using an unordered_set to keep track of seen values.\n        unordered_set<int> seen;\n        Node *curr = head;\n        Node *prev = nullptr;\n\n        // Iterating through the linked list.\n        while (curr != nullptr) {\n            // If the current value is a duplicate, remove the node.\n            if (seen.find(curr->data) != seen.end()) {\n                prev->next = curr->next;\n                delete curr;\n            } else {\n                // If the value is not a duplicate, add it to the set and update the\n                // pointers.\n                seen.insert(curr->data);\n                prev = curr;\n            }\n            curr = prev->next;\n        }\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to remove duplicates from the linked list.\n    public Node removeDuplicates(Node head) {\n        // Return if the linked list is empty.\n        if (head == null) return null;\n\n        // Using a HashSet to keep track of seen values.\n        HashSet<Integer> seen = new HashSet<>();\n        Node curr = head;\n        Node prev = null;\n\n        // Iterating through the linked list.\n        while (curr != null) {\n            // If the current value is a duplicate, remove the node.\n            if (seen.contains(curr.data)) {\n                prev.next = curr.next;\n            } else {\n                // If the value is not a duplicate, add it to the set and update the\n                // pointers.\n                seen.add(curr.data);\n                prev = curr;\n            }\n            curr = prev.next;\n        }\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to remove duplicates from an unsorted linked list.\n    def removeDuplicates(self, head):\n        # Using a set to store already seen values in the list.\n        seen = set()\n\n        # Using two pointers: 'curr' to traverse the list, 'prev' to track the previous node.\n        curr = head\n        prev = None\n\n        # Traversing over the linked list.\n        while curr:\n            # If the current node's data is already in the set, it's a duplicate.\n            if curr.data in seen:\n                prev.next = curr.next  # Skip the duplicate node.\n            else:\n                # If it's not a duplicate, add the current node's data to the set.\n                seen.add(curr.data)\n                prev = curr  # Update 'prev' to the current node.\n\n            # Move to the next node in the list.\n            curr = curr.next\n\n        return head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {Node} head\n * @returns {Node}\n */\nclass Solution {\n    // Function to remove duplicates from unsorted linked list.\n    removeDuplicates(head) {\n        // Using a set to store already seen values in the list.\n        let seen = new Set();\n\n        // Two pointers: 'curr' for current node, 'prev' for the previous node.\n        let curr = head;\n        let prev = null;\n\n        // Traversing the linked list.\n        while (curr !== null) {\n            // If current node's data is already in the set, it's a duplicate.\n            if (seen.has(curr.data)) {\n                prev.next = curr.next;\n            } else {\n                // Add current node's data to the set and update 'prev'.\n                seen.add(curr.data);\n                prev = curr;\n            }\n            // Move to the next node.\n            curr = curr.next;\n        }\n\n        return head;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}