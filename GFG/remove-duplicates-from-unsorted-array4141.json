{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703399,
            "title": "Remove Duplicates from unsorted array",
            "titleSlug": "remove-duplicates-from-unsorted-array4141",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr </strong>of integers which may or may not contain duplicate elements. Your task is to remove duplicate elements.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 1, 4, 2]\n<strong>Output: </strong>[1, 2, 3, 4]<br /><strong>Explanation: </strong>2 and 1 have more than 1 occurence.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4]\n<strong>Output: </strong>[1, 2, 3, 4]<br /><strong>Explanation: </strong>There is no duplicate element.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=arr.size()&lt;=10<sup>6</sup><br />1&lt;=arr[i]&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, potentially containing duplicates, your task is to create a new array containing only the unique elements from the original array. The order of the unique elements in the output should match their first appearance in the input array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 1, 4, 2]",
                        "output": "[1, 2, 3, 4]",
                        "explanation": "The original array contains duplicate elements '1' and '2'. The output array contains only the unique elements, preserving the original order of appearance."
                    },
                    {
                        "input": "[1, 2, 3, 4]",
                        "output": "[1, 2, 3, 4]",
                        "explanation": "The original array contains no duplicate elements. The output array remains the same."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >We can use <strong><a href=\"http://quiz.geeksforgeeks.org/hashing-set-1-introduction/\" target=\"_blank\" rel=\"noopener\">Hashing</a></strong> to solve this in O(n) time on average. The idea is to traverse the given array from left to right and keep track of visited elements in a hash table. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // This function prints all distinct elements\n    vector<int> removeDuplicate(vector<int>& arr) {\n        // Creates an empty hashset\n        int n = arr.size();\n        unordered_set<int> s;\n        vector<int> v;\n\n        // Traverse the input array\n        for (int i = 0; i < n; i++) {\n            // If not present, then put it in\n            // hashtable and print it\n            if (s.find(arr[i]) == s.end()) {\n                s.insert(arr[i]);\n                v.push_back(arr[i]);\n            }\n        }\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n\n    static ArrayList<Integer> removeDuplicate(int arr[]) {\n        int n = arr.length;\n        Set<Integer> s = new HashSet<>();\n        ArrayList<Integer> v = new ArrayList<>();\n\n        // Traverse the input array\n        for (int i = 0; i < n; i++) {\n            // If not present, then put it in\n            // hashtable and add it to the result list\n            if (!s.contains(arr[i])) {\n                s.add(arr[i]);\n                v.add(arr[i]);\n            }\n        }\n        return v;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\n\nclass Solution:\n\n    def removeDuplicate(self, arr):\n        # code here\n        s = set()\n        v = []\n\n        # Traverse the input list\n        for item in arr:\n            # If not present, then put it in\n            # the set and add it to the result list\n            if item not in s:\n                s.add(item)\n                v.append(item)\n\n        return v\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    removeDuplicate(arr) {\n        // code here\n        let s = new Set();\n        let v = [];\n\n        // Traverse the input array\n        for (let i = 0; i < arr.length; i++) {\n            // If not present, then put it in\n            // the set and add it to the result array\n            if (!s.has(arr[i])) {\n                s.add(arr[i]);\n                v.push(arr[i]);\n            }\n        }\n        return v;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}