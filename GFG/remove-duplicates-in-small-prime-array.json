{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700258,
            "title": "Remove duplicates in array",
            "titleSlug": "remove-duplicates-in-small-prime-array",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr </strong>consisting of positive integer numbers, remove all duplicate numbers.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><span style=\"font-size: 18px;\"> arr[] = [2, 2, 3, 3, 7, 5] <br /><strong>Output: </strong>[2, 3, 7, 5]<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>After removing the duplicates 2 and 3 we get 2 3 7 5.<br /></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [2, 2, 5, 5, 7, 7] </span><br /><span ><strong>Output: </strong>[2, 5, 7]<br /></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [8, 7] </span><br /><span ><strong>Output: </strong>[8, 7]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= arr.size() &lt;=10<sup>6</sup><br />2&lt;= arr[i] &lt;=100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, remove all duplicate numbers from the array.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "2 <= arr[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[2, 2, 3, 3, 7, 5]",
                        "output": "[2, 3, 7, 5]",
                        "explanation": "The duplicate numbers 2 and 3 are removed, leaving the unique elements in their original order."
                    },
                    {
                        "input": "[2, 2, 5, 5, 7, 7]",
                        "output": "[2, 5, 7]",
                        "explanation": "The duplicate numbers 2, 5 and 7 are removed, leaving the unique elements in their original order."
                    },
                    {
                        "input": "[8, 7]",
                        "output": "[8, 7]",
                        "explanation": "Since there are no duplicates in the input array, the output is the same as the input."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use hashing or index hashing for this problem because the range of the number is fixed from 1 to 100.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to remove duplicates from the given array and return the updated array.\n\n    vector<int> removeDuplicate(vector<int> &arr) {\n        int n = arr.size();\n        int dp[100] = {0};\n        // array to store the count of each element in the given array.\n        vector<int> v; // vector to store the updated array with no duplicates.\n        for (int i = 0; i < n; i++) {\n            // checking if count of current element is 0.\n            if (dp[arr[i]] == 0) {\n                dp[arr[i]] = 1;      // updating the count of current element to 1.\n                v.push_back(arr[i]); // pushing the current element in the update array.\n            }\n        }\n        return v; // returning the updated array with no duplicates.\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    ArrayList<Integer> removeDuplicate(int arr[]) {\n        int n = arr.length;\n        int dp[] = new int[100];\n        ArrayList<Integer> v = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            if (dp[arr[i]] == 0) {\n                dp[arr[i]] = 1;\n                v.add(arr[i]);\n            }\n        }\n        return v;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def removeDuplicates(self, arr):\n        n = len(arr)\n        # create a list to keep track of whether a number has been encountered before\n        dp = [0] * 100\n\n        # create an empty list to store unique numbers\n        tmp = list()\n\n        # iterate through the input list\n        for prime in arr:\n\n            # if the number has not been encountered before, add it to the unique numbers list\n            if dp[prime] == 0:\n                tmp.append(prime)\n\n                # mark the number as encountered\n                dp[prime] = 1\n\n        # create a new list to store the unique numbers in order\n        result = []\n        for prime in tmp:\n            result.append(prime)\n\n        # return the list of unique numbers\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    removeDuplicate(arr) {\n        let n = arr.length;\n        const dp = new Array(100).fill(0);\n        const v = [];\n\n        for (let i = 0; i < n; i++) {\n            if (dp[arr[i]] === 0) {\n                dp[arr[i]] = 1;\n                v.push(arr[i]);\n            }\n        }\n\n        return v;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}