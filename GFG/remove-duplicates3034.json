{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703019,
            "title": "Remove Duplicates",
            "titleSlug": "remove-duplicates3034",
            "content": "<p><span >Given a string <strong>s</strong>&nbsp;without spaces, the task is to remove all duplicate characters from it, keeping only the first occurrence. </span></p>\n<p><span ><strong>Note:</strong> The original order of characters must be kept the same.&nbsp;</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">s</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">&nbsp;</strong>= \"zvvo\"\n<strong>Output: </strong>\"zvo\"\n<strong>Explanation: </strong>Only keep the first occurrence</span></pre>\n<pre><span ><strong>Input:</strong> <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">s</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">&nbsp;</strong>= \"gfg\"\n<strong>Output: </strong>\"gf\"\n<strong>Explanation: </strong>Only keep the first occurrence</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= s.size() &lt;= 10<sup>5</sup><br />str contains lowercase English alphabets</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Maintain a hashmap of size 26 for all the characters, iterate over the string and check if the character has occurred before.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\n\nchar* removeDups(char* s) \n{ \n    int j=0;\n  \n    int freq[26] = {0},rlen=0,count[26] = { 0 };\n    \n    for (int i = 0; i < strlen(s); i++)\n    {\n        count[s[i] - 'a']++;\n        if (count[s[i] - 'a'] == 1)\n            rlen++;\n    }\n    char* result = (char*)malloc(sizeof(char) * (rlen + 1));\n    for(int i = 0; i < strlen(s); i++)\n    {\n    \tif(freq[s[i] - 'a'] == 0)\n    \t{\n    \t\tresult[j] = s[i];\n    \t\tj++;\n    \t}\n\n    \tfreq[s[i] - 'a'] = 1;\n    }\n    result[rlen] = '\\0';\n    return result; \n} ",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to remove duplicates from a string.\n    string removeDups(string &s) {\n        int j = 0;\n\n        // Array to store the frequency of each character.\n        int fre[26] = {0};\n\n        // Iterating over the string.\n        for (int i = 0; i < s.size(); i++) {\n            // Checking if the character is already encountered or not.\n            if (fre[s[i] - 'a'] == 0)\n                s[j++] = s[i];\n\n            // Marking the character as encountered.\n            fre[s[i] - 'a'] = 1;\n        }\n\n        // Returning the string after removing duplicates.\n        return s.substr(0, j);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to remove duplicates from a string.\n    String removeDups(String s) {\n        int j = 0;\n        char[] chars = s.toCharArray();\n\n        // Array to store the frequency of each character.\n        int[] fre = new int[26];\n\n        // Iterating over the string.\n        for (int i = 0; i < chars.length; i++) {\n            // Checking if the character is already encountered or not.\n            if (fre[chars[i] - 'a'] == 0) chars[j++] = chars[i];\n\n            // Marking the character as encountered.\n            fre[chars[i] - 'a'] = 1;\n        }\n\n        // Returning the string after removing duplicates.\n        return new String(chars, 0, j);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def removeDups(self, str: str) -> str:\n        j = 0\n\n        # Array to store the frequency of each character.\n        fre = [0] * 26\n\n        # Convert string to list since strings are immutable in Python.\n        s_list = list(s)\n\n        # Iterating over the string.\n        for i in range(len(s_list)):\n            # Checking if the character is already encountered or not.\n            if fre[ord(s_list[i]) - ord('a')] == 0:\n                s_list[j] = s_list[i]\n                j += 1\n\n            # Marking the character as encountered.\n            fre[ord(s_list[i]) - ord('a')] = 1\n\n        # Returning the string after removing duplicates.\n        return ''.join(s_list[:j])\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function template for C#\nclass Solution\n{\n    //Complete this function\n    public string removeDups(string S)\n    {\n        // Array to track if a character has been encountered or not.\n        bool[] encountered = new bool[26];\n\n        // StringBuilder to store the result without modifying the input string.\n        StringBuilder result = new StringBuilder();\n\n        // Iterating over the string.\n        for (int i = 0; i < S.Length; i++)\n        {\n            // Checking if the character is already encountered or not.\n            if (!encountered[S[i] - 'a'])\n            {\n                result.Append(S[i]); // Append unique character to result\n                encountered[S[i] - 'a'] = true; // Mark character as encountered\n            }\n        }\n\n        // Returning the result string.\n        return result.ToString();\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    removeDups(s) {\n        let j = 0;\n        let fre = new Array(26).fill(0);\n        let res = \"\";\n        for (let i = 0; i < s.length; i++) {\n            if (fre[s.charCodeAt(i) - 97] === 0) res = res + s[i];\n\n            fre[s.charCodeAt(i) - 97] = 1;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}