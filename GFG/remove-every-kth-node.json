{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700297,
            "title": "Remove every k'th node",
            "titleSlug": "remove-every-kth-node",
            "content": "<p><span style=\"font-size: 12pt;\">Given a singly linked list, your task is to remove every <strong>k<sup>th</sup></strong> node from the linked list.&nbsp;</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>Linked list: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8, k = 2<br /><strong>Output:</strong> 1 -&gt; 3 -&gt; 5 -&gt; 7<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700297/Web/Other/blobid1_1725171560.png\" width=\"400\" height=\"110\" /><br /><strong>Explanation:</strong> After removing every 2nd node of the linked list, the resultant linked list will be: 1 -&gt; 3 -&gt; 5 -&gt; 7.</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>Linked list: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; 9 -&gt; 10, k = 3<br /><strong>Output:</strong> 1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 7 -&gt; 8 -&gt; 10<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700297/Web/Other/blobid2_1725171567.png\" width=\"400\" height=\"110\" /><br /><strong>Explanation:</strong> After removing every 3rd node of the linked list, the resultant linked list will be: 1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 7 -&gt; 8 -&gt; 10.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:</strong> <strong>&nbsp;</strong>O(n)<br /><strong>Expected Auxiliary Space:&nbsp; </strong>O(1)</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &lt;= size of linked list &lt;= 10<sup>6</sup><br />1 &lt;= node-&gt;data &lt;= 10<sup>6</sup><br />1 &lt;= k &lt;= size of linked list</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, remove every k<sup>th</sup> node from the list.",
                "constraints": [
                    "1 <= size of linked list <= 10<sup>6</sup>",
                    "1 <= node->data <= 10<sup>6</sup>",
                    "1 <= k <= size of linked list"
                ],
                "testcases": [
                    {
                        "input": "Linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8, k = 2",
                        "output": "1 -> 3 -> 5 -> 7",
                        "explanation": "After removing every 2nd node, the resulting linked list is: 1 -> 3 -> 5 -> 7."
                    },
                    {
                        "input": "Linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10, k = 3",
                        "output": "1 -> 2 -> 4 -> 5 -> 7 -> 8 -> 10",
                        "explanation": "After removing every 3rd node, the resulting linked list is: 1 -> 2 -> 4 -> 5 -> 7 -> 8 -> 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Iterate and maintain a count and delete nodes at <strong>k</strong> distance until the linked list's end. Think of a case when only one element is there &amp; k = 1.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node* deleteK(Node* head, int K) {\n        if (head == NULL || K == 1) // check if the list is empty or K is 1\n            return NULL;\n\n        Node* temp = head; // create a temporary node to traverse the list\n        int count = 1;     // initialize a counter for counting nodes\n\n        while (temp != NULL) {\n            if (count == K - 1 &&\n                temp->next != NULL) { // if counter equals K-1 and next node is not null\n                Node* nodeToDelete = temp->next;\n                temp->next = nodeToDelete->next; // skip the K-th node\n                delete nodeToDelete;             // free memory\n                count = 0;                       // reset the counter after deleting\n            }\n            temp = temp->next; // move to the next node\n            count++;\n        }\n        return head; // return the modified list\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // This method deletes every kth node in a linked list\n    Node deleteK(Node head, int k) {\n        if (head == null) return null;\n        int count = 1;\n        Node temp = head;\n        Node back;\n\n        // If k is 1, delete the entire list and return null\n        if (k == 1) return null;\n\n        // Traverse through the linked list\n        while (temp.next != null) {\n            count++;\n            back = temp;\n            temp = temp.next;\n\n            // If count becomes equal to k, delete current node\n            if (count == k) {\n                // If current node is the last node, remove its reference from back node\n                if (temp.next == null) {\n                    back.next = null;\n                    return head;\n                }\n                // Remove current node by changing the reference of back node to the\n                // next node\n                Node r = temp.next;\n                back.next = r;\n                temp = r;\n                count = 1;\n            }\n        }\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "'''\n\nclass node:\n    def __init__(self,x):\n        self.data = x\n        self.next = None\n'''\n\n\nclass Solution:\n\n    def deleteK(self, head, k):\n        #code here\n\n        #if the head is None, return None\n        if head is None:\n            return None\n\n        #initialize temp and back\n        temp, back = head, None\n        n = 1\n\n        #if k is 1, return None\n        if k == 1:\n            return None\n\n        while temp != None and temp.next != None:\n            #increment n and update back\n            n += 1\n            back = temp\n            temp = temp.next\n\n            #if n is equal to k\n            if n == k:\n                #delete the current node and update back and temp\n                r = temp.next\n                del temp\n                back.next = r\n                temp = r\n                n = 1\n        #return the head\n        return head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\n/* LINKED LIST NODE\nclass Node {\n  constructor(x){\n    this.data = x;\n    this.next = null;\n  }\n}\n*/\n\n/**\n * Deletes every k-th node from the linked list.\n * @param {Node} head - The head of the linked list.\n * @param {number} k - The position of the node to delete (1-based index).\n * @return {Node} - The modified linked list after deletion.\n */\n\nclass Solution {\n    deleteK(head, k) {\n        // If the list is empty, return null\n        if (head == null) return null;\n\n        // Temporary variable to traverse the list\n        let temp = head;\n\n        // Variable to keep track of the previous node\n        let back;\n\n        // Counter to track the position in the list\n        let kount = 1;\n\n        // If k is 1, it means all nodes need to be deleted, so return null\n        if (k == 1) return null;\n\n        // Traverse the linked list\n        while (temp != null && temp.next) {\n            // Increment the position counter\n            kount++;\n\n            // Keep a reference to the previous node\n            back = temp;\n\n            // Move to the next node\n            temp = temp.next;\n\n            // If the position matches k, delete the k-th node\n            if (kount == k) {\n                // Store the node after the one to be deleted\n                let r = temp.next;\n\n                // Delete the k-th node by setting it to null\n                temp = null;\n\n                // Link the previous node to the node after the deleted node\n                back.next = r;\n\n                // Continue traversing from the node after the deleted one\n                temp = r;\n\n                // Reset the counter after deleting a node\n                kount = 1;\n            }\n        }\n\n        // Return the modified linked list\n        return head;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}