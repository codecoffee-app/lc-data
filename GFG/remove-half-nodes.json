{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700652,
            "title": "Remove Half Nodes",
            "titleSlug": "remove-half-nodes",
            "content": "<p><span style=\"font-size: 18px;\">You are given a binary tree and you need to remove all the<strong> half nodes</strong> (which have only one child). R</span><span style=\"font-size: 18px;\">eturn the root node of the modified tree after removing all the half-nodes.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>The output will be judged by the <strong>inorder traversal</strong> of the resultant tree, inside the driver code.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> tree = 5\n&nbsp;\\t     /   \\\n&nbsp;\\t   7     8\n&nbsp;\\t / \n&nbsp;     2<strong>\nOutput: </strong>2 5 8<br /><strong>Explanation: </strong>In the above tree, the node 7 has only single child. After removing the node the tree becomes  2&lt;-5-&gt;8. Hence, the answer is 2 5 8 &amp; it is in inorder traversal.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> &nbsp;tree = 2 &nbsp; <br /></span><span style=\"font-size: 18px;\">\\t\\t  / \\ &nbsp; <br />\\t\\t7   5<strong> <br /></strong></span><span style=\"font-size: 18px;\"><strong>Output: </strong>7 2 5<br /><strong>Explanation: </strong>Here there are no nodes which has only one child. So the tree remains same.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(height of the binary tree)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=number of nodes&lt;=10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, remove all half nodes (nodes with only one child). Return the root of the modified tree. The output should be the inorder traversal of the resulting tree.",
                "constraints": [
                    "1 <= number of nodes <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "Tree:      5\n\t     /   \\\n\t   7     8\n\t / \n\t2",
                        "output": "2 5 8",
                        "explanation": "Node 7 has only one child. After removing node 7, the tree becomes 2 <- 5 -> 8. The inorder traversal is 2 5 8."
                    },
                    {
                        "input": "Tree:    2\n\t\t  / \\\n\t\t7   5",
                        "output": "7 2 5",
                        "explanation": "There are no nodes with only one child, so the tree remains the same. The inorder traversal is 7 2 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try building your tree bottom-up, ie moving from the leaf nodes towards the root node to solve this problem efficiently.<br />How about doing a post-order traversal of the tree for the same?&nbsp;</p>",
            "<p>The idea is to use post-order traversal to solve this problem efficiently. We first process the left children, then right children, and finally the node itself. So we form the new tree bottom up, starting from the leaves towards the root. By the time we process the current node, both its left and right subtrees were already processed.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node* RemoveHalfNodes(Node* root) {\n        if (root == NULL)\n            return NULL;\n\n        root->left = RemoveHalfNodes(root->left);\n        root->right = RemoveHalfNodes(root->right);\n\n        if (root->left == NULL && root->right == NULL)\n            return root;\n\n        /* if current nodes is a half node with left\n           child NULL left, then it's right child is\n           returned and replaces it in the given tree */\n        if (root->left == NULL) {\n            struct Node* new_root = root->right;\n            free(root); // To avoid memory leak\n            return new_root;\n        }\n\n        /* if current nodes is a half node with right\n           child NULL right, then it's right child is\n           returned and replaces it in the given tree  */\n        if (root->right == NULL) {\n            struct Node* new_root = root->left;\n            free(root); // To avoid memory leak\n            return new_root;\n        }\n\n        return root;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n/*\n\nclass Node{\n    int data;\n    Node left,right;\n    Node(int d){\n        data=d;\n        left=right=null;\n    }\n}\n\n*/\n\nclass Solution {\n\n    // Removes all nodes with only one child and returns\n    // new root (note that root may change)\n    public Node RemoveHalfNodes(Node node) {\n        if (node == null) return null;\n\n        node.left = RemoveHalfNodes(node.left);\n        node.right = RemoveHalfNodes(node.right);\n\n        if (node.left == null && node.right == null) return node;\n\n        /* if current nodes is a half node with left\n         child NULL left, then it's right child is\n         returned and replaces it in the given tree */\n        if (node.left == null) {\n            Node new_root = node.right;\n            return new_root;\n        }\n\n        /* if current nodes is a half node with right\n           child NULL right, then it's right child is\n           returned and replaces it in the given tree  */\n        if (node.right == null) {\n            Node new_root = node.left;\n            return new_root;\n        }\n\n        return node;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def RemoveHalfNodes(self, node):\n        if node is None:\n            return None\n\n        node.left = self.RemoveHalfNodes(node.left)\n        node.right = self.RemoveHalfNodes(node.right)\n\n        if node.left is None and node.right is None:\n            return node\n\n        if node.left is None:\n            new_root = node.right\n            return new_root\n\n        if node.right is None:\n            new_root = node.left\n            return new_root\n\n        return node\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    \n    // Removes all nodes with only one child and returns new root (note that root may change)\n    RemoveHalfNodes(node) { \n        if (node === null) \n            return null; \n\n        node.left = this.RemoveHalfNodes(node.left); // Remove half nodes from the left subtree\n        node.right = this.RemoveHalfNodes(node.right); // Remove half nodes from the right subtree\n\n        if (node.left === null && node.right === null) \n            return node; // If current node is a leaf node, return the node\n\n        /* if current node is a half node with left child NULL, then its right child is returned and replaces it in the given tree */\n        if (node.left === null) { \n            let new_root = node.right; \n            return new_root; \n        } \n\n        /* if current node is a half node with right child NULL, then its left child is returned and replaces it in the given tree */\n        if (node.right === null) { \n            let new_root = node.left; \n            return new_root; \n        } \n\n        return node; // Return the node after removing half nodes\n    } \n   \n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}