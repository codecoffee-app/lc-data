{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706289,
            "title": "Remove K Digits",
            "titleSlug": "remove-k-digits",
            "content": "<p><span style=\"font-size: 18px;\">Given a non-negative integer <strong>S</strong>&nbsp;represented as a string, remove&nbsp;<strong>K</strong>&nbsp;digits from the number so that the new number is the smallest possible.<br /><strong>Note :&nbsp;</strong>The given&nbsp;<em>num</em>&nbsp;does not contain any leading zero.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS = \"149811\", K = 3\n<strong>Output:</strong> <br />111\n<strong>Explanation</strong>: <br />Remove the three digits \n4, 9, and 8 to form the new number 111\nwhich is smallest.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nS = \"1002991\", K = 3\n<strong>Output:</strong> <br />21\n<strong>Explanation</strong>: <br />Remove the three digits 1(leading\none), 9, and 9 to form the new number 21(Note\nthat the output must not contain leading\nzeroes) which is the smallest.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>removeKdigits()&nbsp;</strong>which takes the string S and an integer K as input and returns the new number which is the smallest possible.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(|S|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(|S|).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=&nbsp;</span><span style=\"font-size: 18px;\">K &lt;= </span><span style=\"font-size: 18px;\">|S|&lt;=10</span><sup>6</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer S represented as a string, remove K digits from the number such that the resulting number is the smallest possible. The given number does not contain any leading zeros.",
                "constraints": [
                    "1 <= K <= |S| <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "S = \"149811\", K = 3",
                        "output": "111",
                        "explanation": "By removing the digits 4, 9, and 8, we obtain the smallest possible number, 111."
                    },
                    {
                        "input": "S = \"1002991\", K = 3",
                        "output": "21",
                        "explanation": "By removing the leading 1, and the two 9s, we get 21. The output must not contain leading zeroes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Deque.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution {\n  public:\n    string removeKdigits(string S, int K) {\n        string ans = \"\"; // treat ans as a stack in below for loop\n\n        for (char c : S) {\n            while (ans.length() && ans.back() > c && K) {\n                ans.pop_back(); // make sure digits in ans are in ascending\n                                // order\n                K--;            // remove one char\n            }\n\n            if (ans.length() || c != '0') {\n                ans.push_back(c);\n            } // can't have leading '0'\n        }\n\n        while (ans.length() && K--) {\n            ans.pop_back();\n        } // make sure remove k digits in total\n\n        return ans.empty() ? \"0\" : ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public String removeKdigits(String S, int K) {\n        // treat ans as a stack in below for loop\n        ArrayList<Character> ans = new ArrayList<Character>();\n        for (int i = 0; i < S.length(); i++) {\n            char c = S.charAt(i);\n            while (ans.size() > 0 && ans.get(ans.size() - 1) > c && K > 0) {\n                ans.remove(ans.size() -\n                           1); // make sure digits in ans are in ascending order\n                K--;           // remove one char\n            }\n\n            if (ans.size() > 0 || c != '0') {\n                ans.add(c);\n            } // can't have leading '0'\n        }\n\n        while (ans.size() > 0 && K-- > 0) {\n            ans.remove(ans.size() - 1);\n        } // make sure remove k digits in total\n\n        if (ans.size() == 0) {\n            return \"0\";\n        }\n\n        StringBuilder sb = new StringBuilder();\n        // Appends characters one by one\n        for (Character ch : ans) {\n            sb.append(ch);\n        }\n\n        return sb.toString();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def removeKdigits(self, S, K):\n        # Initializing an empty list to store the answer\n        ans = []\n        for c in S :\n            # Removing digits from the answer list until the last digit is smaller than the current digit and K is greater than 0\n            while len(ans) and ans[-1] > c and K > 0 :\n                ans.pop()\n                K-=1\n            \n            # If the answer list is not empty or the current digit is not '0', append the current digit to the answer list\n            if len(ans) > 0 or c!='0' :\n                ans.append(c)\n        \n        # After removing K digits, check if there are still remaining digits to be removed\n        while len(ans) and K > 0 :\n            K-=1\n            ans.pop()\n        \n        # If the answer list is empty, return '0'\n        if len(ans) == 0 :\n            return \"0\"\n        \n        # Convert the answer list to a string\n        S2 = \"\"\n        for c in ans :\n            S2+=c\n            \n        return S2",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}