{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703176,
            "title": "Remove leading zeros from an IP address",
            "titleSlug": "remove-leading-zeros-from-an-ip-address3530",
            "content": "<p><span style=\"font-size:18px\">Given an IP address, remove leading zeros from the IP address. Note that our IP address here can be a little different. It can have numbers greater than 255. Also, it does not necessarily have 4 numbers. The count can be lesser/more.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nS = &quot;100.020.003.400&quot;\r\n<strong>Output:</strong> 100.20.3.400</span><span style=\"font-size:18px\">\r\n<strong>Explanation</strong>: The leading zeros are removed\r\nfrom 20 and 3.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>: \r\nS = &quot;100.000.010.0999&quot;\r\n<strong>Output:</strong> 100.0.10.999\r\n<strong>Explanation</strong>: The leading zeros are removed\r\nfrom 0, 10 and 999.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>newIPAdd()&nbsp;</strong>which takes the string S representing the IP address as input and returns a&nbsp;string representing the resultant IP address.&nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(|S|).</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=|S|&lt;=1000</span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">As you encounter a dot, append it to the result and move ahead.</span></p>\n\n<p><span style=\"font-size:18px\">But as you encounter a digit, try traversing it till the end in one go itself (you can use a while loop). First, ignore all the leading zeros. Then, if the number ends (ie, you encounter another dot), it means that the number had all zeros. In this case, append a single zero to your result.<br />\nElse, append all the digits into the result till you encounter another dot.</span></p>\n\n<p><span style=\"font-size:18px\">Repeat this for all the numbers</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\nclass Solution\r\n{\r\n  public:\r\n    string newIPAdd (string s)\r\n    {\r\n        string res = \"\";\r\n        int i = 0, n = s.length (), j;\r\n    \r\n        while (i < n)\r\n        {\r\n            // if the current character is a dot, we simply include it in our result and move ahead\r\n            if (s[i] == '.')\r\n            {\r\n                res += s[i];\r\n                i++;\r\n            }\r\n            \r\n            // else, we extract out the current number\r\n            else\r\n            {\r\n                j = i;\r\n                while (j < n and s[j] == '0') j++; // ignoring the leading zeros\r\n                if (j == n || s[j] == '.') res += '0'; // if the number had all zeros, including a single '0' in our result\r\n                else // else, including the current number in our result\r\n                {\r\n                    while (j < n and s[j] != '.')\r\n                    {\r\n                        res += s[j++];\r\n                    }\r\n                }\r\n                i = j;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Function to convert a string IP address to a new format.\nclass Solution:\n    def newIPAdd(self, S):\n        \n        # Splitting the input IP address by '.' and joining the separated parts\n        # with '.'\n        return '.'.join(str(int(i)) for i in S.split('.'))",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public string newIPAdd(string s)\n    {\n        string res = \"\";\n        int i = 0, n = s.Length, j;\n\n        while (i < n)\n        {\n            // if the current character is a dot, we simply include it in our result and move ahead\n            if (s[i] == '.')\n            {\n                res += s[i];\n                i++;\n            }\n\n            // else, we extract out the current number\n            else\n            {\n                j = i;\n                while (j < n && s[j] == '0') j++; // ignoring the leading zeros\n                if (j == n || s[j] == '.') res += '0'; // if the number had all zeros, including a single '0' in our result\n                else // else, including the current number in our result\n                {\n                    while (j < n && s[j] != '.')\n                    {\n                        res += s[j++];\n                    }\n                }\n                i = j;\n            }\n        }\n        return res;\n    }\n\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}