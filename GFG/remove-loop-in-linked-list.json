{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700332,
            "title": "Remove loop in Linked List",
            "titleSlug": "remove-loop-in-linked-list",
            "content": "<p><span >Given the head of a linked list that may contain a loop.&nbsp; A loop means that the last node of the linked list is connected back to a node in the same list. The task is to remove the loop from the linked list (if it exists).</span></p>\n<p><span ><strong>Custom Input format:</strong></span></p>\n<p><span >A <strong>head </strong>of a singly linked list and a <strong>pos </strong>(1-based index) which denotes the position of the node to which the last node points to. If <strong>pos = 0</strong>, it means the last node points to null, indicating there is no loop.</span></p>\n<p><span >The generated output will be&nbsp;<strong>true </strong>if there is no loop in list and other nodes in the list remain unchanged, otherwise, <strong>false</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>head =<strong> </strong>1 -&gt; 3 -&gt; 4, pos = 2\n<strong>Output: </strong>true<strong>\nExplanation: </strong>The linked list looks like<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700332/Web/Other/blobid0_1718609709.png\" width=\"403\" height=\"161\" /><br />A loop is present in the list, and it is removed.\n</span></pre>\n<pre><span ><strong>Input: </strong>head = 1 -&gt; 8 -&gt; 3 -&gt; 4, pos = 0\n<strong>Output: </strong>true<strong>\nExplanation: <br /></strong><strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700332/Web/Other/blobid0_1718609876.png\" height=\"100\" /><br /></strong>The Linked list does not contains any loop. </span></pre>\n<pre><span ><strong>Input: </strong>head =<strong> </strong>1 -&gt; 2 -&gt; 3 -&gt; 4, pos = 1\n<strong>Output: </strong>true<strong>\nExplanation: </strong>The linked list looks like <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700332/Web/Other/blobid2_1718609744.png\" width=\"400\" height=\"160\" /><br />A loop is present in the list, and it is removed.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; size of linked list &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a singly linked list that may contain a loop, remove the loop if it exists. A loop is formed when the last node points back to a previous node in the list.",
                "constraints": [
                    "1 <= size of linked list <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "head = 1 -> 3 -> 4, pos = 2",
                        "output": "true",
                        "explanation": "The linked list initially has a loop where the last node (4) points back to the second node (3). After removing the loop, the function returns true indicating success.The modified linked list no longer contains a loop."
                    },
                    {
                        "input": "head = 1 -> 8 -> 3 -> 4, pos = 0",
                        "output": "true",
                        "explanation": "The linked list does not contain a loop (pos = 0). The function returns true as there is no loop to remove, and the list remains unchanged."
                    },
                    {
                        "input": "head = 1 -> 2 -> 3 -> 4, pos = 1",
                        "output": "true",
                        "explanation": "The linked list initially has a loop where the last node (4) points back to the first node (1). After removing the loop, the function returns true indicating success. The modified linked list no longer contains a loop."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use Floyd's algorithm to detect the loop, find its start, and break it by setting the last node next to NULL.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "vmware",
            "morgan-stanley",
            "amazon",
            "microsoft",
            "snapdeal",
            "makemytrip",
            "oracle",
            "walmart",
            "goldman-sachs",
            "adobe",
            "qualcomm",
            "kuliza",
            "netskope"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to remove a loop in the linked list.\n    void removeLoop(Node* head) {\n        // If list is empty or has only one node without loop\n        if (head == nullptr || head->next == nullptr)\n            return;\n\n        Node *slow = head, *fast = head;\n\n        // Move slow and fast 1 and 2 steps ahead respectively.\n        slow = slow->next;\n        fast = fast->next->next;\n\n        // Search for loop using slow and fast pointers\n        while (fast && fast->next) {\n            if (slow == fast)\n                break;\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        // If loop exists\n        if (slow == fast) {\n            slow = head;\n\n            // this check is needed when slow and fast both meet\n            // at the head of the LL eg: 1->2->3->4->5 and then\n            // 5->next = 1 i.e the head of the LL\n            if (slow == fast)\n                while (fast->next != slow)\n                    fast = fast->next;\n            else {\n                while (slow->next != fast->next) {\n                    slow = slow->next;\n                    fast = fast->next;\n                }\n            }\n\n            // since fast->next is the looping point\n            fast->next = nullptr;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// solution:\n\nclass Solution {\n    // Function to remove a loop in the linked list.\n    public static void removeLoop(Node head) {\n        // If list is empty or has only one node\n        // without loop\n        if (head == null || head.next == null) return;\n\n        Node slow = head, fast = head;\n\n        // Move slow and fast 1 and 2 steps\n        // ahead respectively.\n        slow = slow.next;\n        fast = fast.next.next;\n\n        // Search for loop using slow and fast pointers\n        while (fast != null && fast.next != null) {\n            if (slow == fast) break;\n\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        // If loop exists\n        if (slow == fast) {\n            slow = head;\n            if (slow != fast) {\n                while (slow.next != fast.next) {\n                    slow = slow.next;\n                    fast = fast.next;\n                }\n\n                // since fast->next is the looping point\n                // remove loop\n                fast.next = null;\n            }\n            // This case is added if fast and slow\n            // pointer meet at first position.\n            else {\n                while (fast.next != slow) {\n                    fast = fast.next;\n                }\n                fast.next = null;\n            }\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# backend solution\n\n\nclass Solution:\n    #Function to remove a loop in the linked list.\n    def removeLoop(self, head):\n        # If the list is empty or has only one node\n        # without a loop\n        if head is None or head.next is None:\n            return\n\n        slow = head\n        fast = head\n\n        # Move slow and fast pointers; slow moves 1 step,\n        # fast moves 2 steps\n        while slow and fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n            # If slow and fast meet, a loop is detected\n            if slow == fast:\n                slow = head\n\n                # Move slow and fast pointers to find the node\n                # where the loop starts\n                while slow != fast:\n                    slow = slow.next\n                    fast = fast.next\n\n                # Traverse the loop to find the node where the\n                # loop ends and remove it\n                while fast.next != slow:\n                    fast = fast.next\n                fast.next = None\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} head\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to remove a loop in the linked list.\n    removeLoop(head) {\n        // using two pointers and moving one pointer(slow) by one node and\n        // another pointer(fast) by two nodes in each iteration.\n        let fast = head.next;\n        let slow = head;\n\n        while (fast !== slow) {\n            // if the node pointed by first pointer(fast) or the node\n            // next to it is null, then loop is not present so we return 0.\n            if (fast === null || fast.next === null) return;\n\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        // both pointers now point to the same node in the loop.\n\n        let size = 1;\n        fast = fast.next;\n        // we start iterating the loop with first pointer and continue till\n        // both pointers point to same node again.\n        while (fast !== slow) {\n            fast = fast.next;\n            // incrementing the counter which stores length of loop.\n            size++;\n        }\n\n        // updating the pointers again to starting node.\n        slow = head;\n        fast = head;\n\n        // moving pointer (fast) by (size-1) nodes.\n        for (let i = 0; i < size - 1; i++) fast = fast.next;\n\n        // now we keep iterating with both pointers till fast reaches a node such\n        // that the next node is pointed by slow. At this situation slow is at\n        // the node where loop starts and first at last node so we simply\n        // update the link part of first.\n        while (fast.next != slow) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n        // storing null in link part of the last node.\n        fast.next = null;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}