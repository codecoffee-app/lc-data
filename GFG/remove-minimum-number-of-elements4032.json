{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703827,
            "title": "Remove minimum number of elements",
            "titleSlug": "remove-minimum-number-of-elements4032",
            "content": "<p><span >Given two arrays <strong>arr1[]</strong> and <strong>arr2[]</strong>, the task is to find the minimum number of elements to remove from each array such that no common elements exist between the two arrays.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr1[] = [2, 3, 4, 5, 8], arr2[] = [1, 2, 3, 4]</span><br /><span ><strong>Output: </strong>3</span><br /><span ><strong>Explanation: </strong>To remove all common elements, we need to delete 2, 3, and 4 from either array.</span></pre>\n<pre><span ><strong>Input: </strong>arr1[] = [1, 2, 3, 4], arr2[] = [5, 6, 7]</span><br /><span ><strong>Output: </strong>0</span><br /><span ><strong>Explanation: </strong>There are no common elements between the arrays.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n + m)</span><br /><span ><strong>Expected Auxiliary Space:</strong> O(n + m)</span></p>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &le; arr1.size(), arr2.size() &le; 5*10<sup>5</sup><br />1 &le; arr1[i], arr2[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `arr1` and `arr2`, determine the minimum number of elements that need to be removed from either array to ensure that they have no common elements.  This means finding the smallest number of deletions needed to make the intersection of `arr1` and `arr2` empty.",
                "constraints": [
                    "1 <= arr1.size(), arr2.size() <= 5 * 10^5",
                    "1 <= arr1[i], arr2[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [2, 3, 4, 5, 8], arr2 = [1, 2, 3, 4]",
                        "output": "3",
                        "explanation": "The common elements are 2, 3, and 4. Removing these three elements from either array (or a combination of both) will result in no shared elements.  Therefore, the minimum number of removals is 3."
                    },
                    {
                        "input": "arr1 = [1, 2, 3, 4], arr2 = [5, 6, 7]",
                        "output": "0",
                        "explanation": "There are no common elements between the arrays, so no removals are necessary. The minimum number of removals is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Count the occurrence of each number in both arrays. If there is a number in both arrays remove the number from the array in which it appears fewer times and add it to the result.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the minimum number of elements that need to be removed.\n    int minRemove(vector<int> &arr1, vector<int> &arr2) {\n        // Creating countA and countB unordered maps to store the count of elements in\n        // arrays a and b respectively.\n        unordered_map<int, int> countA, countB;\n\n        // Iterating over array a and counting the frequency of elements.\n        for (int i = 0; i < arr1.size(); i++)\n            countA[arr1[i]]++;\n\n        // Iterating over array b and counting the frequency of elements.\n        for (int i = 0; i < arr2.size(); i++)\n            countB[arr2[i]]++;\n\n        // Variable to store the minimum number of elements that need to be removed.\n        int res = 0;\n\n        // Iterating over the elements in countA.\n        for (auto x : countA)\n            // Checking if the element is present in countB.\n            if (countB.find(x.first) != countB.end())\n                // Calculating the minimum count of the element in both arrays and\n                // adding it to the result.\n                res += min(x.second, countB[x.first]);\n\n        // Returning the minimum number of elements that need to be removed.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int minRemove(int[] arr1, int[] arr2) {\n        // Creating HashMaps to store the count of elements in both arrays.\n        HashMap<Integer, Integer> countA = new HashMap<>();\n        HashMap<Integer, Integer> countB = new HashMap<>();\n\n        // Counting frequency of elements in arr1.\n        for (int num : arr1) {\n            countA.put(num, countA.getOrDefault(num, 0) + 1);\n        }\n\n        // Counting frequency of elements in arr2.\n        for (int num : arr2) {\n            countB.put(num, countB.getOrDefault(num, 0) + 1);\n        }\n\n        // Variable to store the minimum number of elements that need to be removed.\n        int res = 0;\n\n        // Iterating over the elements in countA and calculating the minimum number\n        // of elements to remove based on common elements in arr2.\n        for (Map.Entry<Integer, Integer> entry : countA.entrySet()) {\n            if (countB.containsKey(entry.getKey())) {\n                res += Math.min(entry.getValue(), countB.get(entry.getKey()));\n            }\n        }\n\n        // Returning the minimum number of elements to remove.\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minRemove(self, arr1, arr2):\n        # Creating dictionaries to count elements in both arrays.\n        countA = {}\n        countB = {}\n\n        # Counting frequency of elements in arr1.\n        for num in arr1:\n            countA[num] = countA.get(num, 0) + 1\n\n        # Counting frequency of elements in arr2.\n        for num in arr2:\n            countB[num] = countB.get(num, 0) + 1\n\n        # Variable to store the minimum number of elements that need to be removed.\n        res = 0\n\n        # Calculating the minimum number of elements to remove based on common elements.\n        for key, value in countA.items():\n            if key in countB:\n                res += min(value, countB[key])\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    minRemove(arr1, arr2) {\n        let countA = {};\n        let countB = {};\n\n        // Counting frequency of elements in arr1.\n        arr1.forEach(num => { countA[num] = (countA[num] || 0) + 1; });\n\n        // Counting frequency of elements in arr2.\n        arr2.forEach(num => { countB[num] = (countB[num] || 0) + 1; });\n\n        // Variable to store the minimum number of elements that need to be removed.\n        let res = 0;\n\n        // Calculating the minimum number of elements to remove based on common\n        // elements.\n        for (let key in countA) {\n            if (countB.hasOwnProperty(key)) {\n                res += Math.min(countA[key], countB[key]);\n            }\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}