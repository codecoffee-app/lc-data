{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703142,
            "title": "Remove repeated digits in a given number",
            "titleSlug": "remove-repeated-digits-in-a-given-number4014",
            "content": "<p><span style=\"font-size:18px\">Given an integer N represented in the form of a string, remove consecutive repeated digits from it.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 1224\n<strong>Output:</strong> 124\n<strong>Explanation</strong>: Two consecutive occurrences of \n2 have been reduced to one.</span>\n</pre>\n\n<p><span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \nN = 1242\n<strong>Output:</strong> 1242\n<strong>Explanation</strong>: No digit is repeating \nconsecutively in N.</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>modify()&nbsp;</strong>which takes the integer N as input and returns the modified integer by removing all the consecutive duplicate occurrences in N.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(LogN).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=N&lt;=10<sup>18</sup></span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N represented as a string, remove all consecutive repeated digits.",
                "constraints": [
                    "1 <= N <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "1224",
                        "output": "124",
                        "explanation": "The digit '2' appears consecutively, so one occurrence is removed, resulting in '124'."
                    },
                    {
                        "input": "1242",
                        "output": "1242",
                        "explanation": "No digits repeat consecutively in '1242', so the output remains the same."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Always keep a track of the previous digit that you inserted in your resultant number and check if the current digit is equal to the previous digit or not. If it is not, insert the current digit into your result.<br />\n<br />\nNote: Make sure that you don&#39;t loose the trailing zeros. A good approach would be to maintain a power variable so that you can simply do res = res + cur_digit*power.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nlong long int modify (long long int n)\n{\n    long long int res = n % 10; // initializing the answer\n    long long int prev = n % 10, cur, p = 10;\n    while (n)\n    {\n        cur = n % 10; // current digit\n        // if current digit is not equal to prev\n        // we include it in the result\n        if (cur != prev)\n        {\n            res += cur * p;\n            prev = cur;\n            p *= 10;\n        }\n        n /= 10;\n    }\n\n    return res;\n}\n// Contributed By: Pranay Bansal\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to modify the given number N as mentioned in the problem statement.\n    public long modify(long N)\n    {\n        long res = N % 10; // initializing the answer\n        long prev = N % 10, cur, p = 10;\n\n        while (N != 0)\n        {\n            cur = N % 10; // current digit\n            // if current digit is not equal to prev\n            // we include it in the result\n            if (cur != prev)\n            {\n                res += cur * p;\n                prev = cur;\n                p *= 10;\n            }\n            N /= 10;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}