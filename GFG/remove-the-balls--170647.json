{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714169,
            "title": "Remove the balls",
            "titleSlug": "remove-the-balls--170647",
            "content": "<p><span style=\"font-size:18px\">Imagine an imaginary array of length N containing balls. Given 2&nbsp;arrays&nbsp;<strong>color </strong>and<strong> radius</strong>&nbsp;of length<strong> N </strong>each<strong>, </strong>where color[i] represents the color of the ith ball while radius[i] represents the radius of ith ball. If two <strong>consecutive </strong>balls have the same color and size, both are&nbsp;removed from the array. Geek wants to know&nbsp;the length of the final imaginary&nbsp;array.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 3\r\ncolor[] = {2, 2, 5}\r\nradius[] = {3, 3, 4}\r\n<strong>Output:</strong>&nbsp;\r\n1\r\n<strong>Explanation</strong>: \r\nFirst ball and second ball have same color 2 and \r\nsame radius 3.So,after removing only one ball \r\nis left.It could not be removed from the array. \r\nHence, the final array has length 1.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4\r\ncolor[] = {1, 3, 3, 1}\r\nradius[] = {2, 5, 5, 2}\r\n<strong>Output:\r\n</strong>0\r\n<strong>Explanation</strong>:\r\nBall 2 and ball 3 have same color 3 and same radius\r\n5.So,they are removed. Now, we have got our\r\ncolor[]={1, 1} and radius[]={2, 2}.Both the left\r\nballs are consecutive now and they are having\r\nsame color and radius. So,these two balls are\r\nremoved as well. Now,we are left with empty\r\nfinal array. Hence, the length of final array is 0.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp; </strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>finLength(),</strong> which takes integer N and array color[ ] and array radius[ ] as input parameters and returns the size of the final imaginary array.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(n)</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le;&nbsp;N&nbsp;&le; 10<sup>5</sup><br />\r\n1 &le; color[i]&nbsp;&le; 10<sup>9</sup><br />\r\n1 &le; radius[i]&nbsp;&le; 10<sup>9</sup></span><span style=\"font-size:18px\"><sup>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:16px\">Think about stack data strucure.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    //Function to find the length of the stack after performing operations.\n    int finLength(int N, vector<int> color, vector<int> radius) {\n        stack<pair<int, int>> st;\n        \n        //iterating over the given colors and radii.\n        for (int i = 0; i < N; i++) {\n            int flag = 1;\n            pair<int, int> cur = {color[i], radius[i]};\n            \n            //checking if top element of stack is equal to the current color and radius.\n            while (!st.empty() and st.top() == cur) {\n                flag = 0;\n                st.pop();\n            }\n            \n            //if no matching color and radius found, push the current pair to stack.\n            if (flag == 1) st.push(cur);\n        }\n        \n        //returning the size of the stack.\n        return st.size();\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int finLength(int N, int[] color, int[] radius) {\r\n        // code here\r\n        Stack<pair> st=new Stack<>();\r\n        for(int i=0;i<N;i++){\r\n            if(st.isEmpty()){\r\n                st.push(new pair(color[i],radius[i]));\r\n            }else{\r\n                if(st.peek().a==color[i] && st.peek().b==radius[i]){\r\n                    st.pop();\r\n                }else{\r\n                    st.push(new pair(color[i],radius[i]));\r\n                }\r\n            }\r\n        }\r\n        return st.size();\r\n    }\r\n    static class pair\r\n    {\r\n        int a,b;\r\n        public pair(int a,int b)\r\n        {\r\n            this.a=a;\r\n            this.b=b;\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\r\n\r\n\r\nclass Solution:\r\n    def finLength(self, N : int, color : List[int], radius : List[int]) -> int:\r\n        stack=[]#creating a stack\r\n        for i in range(N):\r\n            if not stack:#if no element currently in stack than directly add this element \r\n                stack.append([color[i],radius[i]])\r\n            else :\r\n                if stack[-1][0]==color[i] and stack[-1][1]==radius[i]:#if color and radius matches last element just pop\r\n                    stack.pop()\r\n                else :\r\n                    stack.append([color[i],radius[i]])#else add this element in stack\r\n        return len(stack)#return the final length of stack\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number[]} color\n * @param {number[]} radius\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the maximum length of subsequence with given properties.\n    finLength(N, color, radius) {\n        //creating a stack\n        let stack = [];\n        for (let i = 0; i < N; i++) {\n            if (!stack.length) {\n                //if no element currently in stack than directly add this element \n                stack.push([color[i], radius[i]]);\n            } else {\n                if (stack[stack.length-1][0] === color[i] && stack[stack.length-1][1] === radius[i]) {\n                    //if color and radius matches last element just pop\n                    stack.pop();\n                } else {\n                    //else add this element in stack\n                    stack.push([color[i], radius[i]]);\n                }\n            }\n        }\n        //return the final length of stack\n        return stack.length;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int finLength(int N, List<int> color, List<int> radius)\n    {\n        Stack<KeyValuePair<int, int>> st = new Stack<KeyValuePair<int, int>>();\n        \n        //iterating over the given colors and radii.\n        for (int i = 0; i < N; i++) {\n            int flag = 1;\n            KeyValuePair<int, int> cur = new KeyValuePair<int, int>(color[i], radius[i]);\n            \n            //checking if top element of stack is equal to the current color and radius.\n            while (st.Count > 0 && st.Peek().Equals(cur)) {\n                flag = 0;\n                st.Pop();\n            }\n            \n            //if no matching color and radius found, push the current pair to stack.\n            if (flag == 1) st.Push(cur);\n        }\n        \n        //returning the size of the stack.\n        return st.Count;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}