{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701326,
            "title": "Removing consecutive duplicates",
            "titleSlug": "removing-consecutive-duplicates-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">You are given string <strong>s</strong>. You need to remove the consecutive duplicates from the given string using a Stack. </span>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = \"aaaaaabaabccccccc\"\n<strong>Output</strong>: ababc\n<strong>Explanation</strong>: The order is in the following way 6-&gt;a, 1-&gt;b, 2-&gt;a, 1-&gt;b, 7-&gt;c. So, only one element from each group will remain and rest all are removed. Therefore, final string will be:- ababc.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = \"abbccbcd\"\n<strong>Output</strong>: abcbcd\n<strong>Explanation</strong>: The order is in the following way 1-&gt;a, 2-&gt;b, 2-&gt;c, 1-&gt;b, 1-&gt;c, 1-&gt;d. So, only one element from each group will remain and rest all are removed. Therefore, final string will be:- abcbcd.</span> </pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |s| &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, remove consecutive duplicate characters from the string. Implement this using a Stack-like approach (though a stack is not strictly required). Only the first occurrence of a character within a consecutive sequence of the same character should be retained.",
                "constraints": [
                    "1 <= |s| <= 1000"
                ],
                "testcases": [
                    {
                        "input": "aaaaaabaabccccccc",
                        "output": "ababc",
                        "explanation": "The input string contains consecutive repeating characters. The 'a' repeats 6 times, 'b' repeats once, 'a' repeats twice, 'b' repeats once, and 'c' repeats 7 times. Removing the consecutive duplicates, we retain only one of each, resulting in 'ababc'."
                    },
                    {
                        "input": "abbccbcd",
                        "output": "abbcbcd",
                        "explanation": "The input string contains the following sequences of characters: 'a' appears once, 'b' repeats twice, 'c' repeats twice, 'b' appears once, 'c' appears once and 'd' appears once. Removing only consecutive duplicates will result in 'abbcbcd'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to remove consecutive duplicates from given string using Stack.\n    string removeConsecutiveDuplicates(string &s) {\n        string answer = \"\";\n        stack<char> st;\n\n        // pushing the first character of the string into the stack.\n        st.push(s[0]);\n\n        // iterating over the string.\n        for (int i = 1; i < s.length(); i++) {\n            // if current character of string is equal to the character at top\n            // of stack, we continue iterating in the loop.\n            if (s[i] == st.top())\n                continue;\n            // else we add the character at top of stack to the answer\n            // and push the current character into the stack.\n            else {\n                answer += st.top();\n                st.pop();\n                st.push(s[i]);\n            }\n        }\n\n        // adding character at the top of stack to the answer and returning it.\n        answer += st.top();\n        return answer;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to remove consecutive duplicates from given string using Stack.\n    public static String removeConsecutiveDuplicates(String s) {\n        Stack<Character> st = new Stack<Character>();\n\n        // iterating over the string.\n        for (int i = 0; i < s.length(); i++) {\n            // if current character of string is not equal to the character at\n            // top of stack, we push the current character into the stack.\n            if (st.empty() || st.peek() != s.charAt(i)) {\n                st.push(s.charAt(i));\n            }\n        }\n        String res = new String(\"\");\n\n        // adding all characters in the stack to the answer and returning it.\n        while (!st.empty()) {\n            res = st.peek() + res;\n            st.pop();\n        }\n        return (res);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to remove consecutive duplicates from given string using Stack.\r\n    def removeConsecutiveDuplicates(self,s):\r\n        stack = [] \r\n    \r\n        #pushing the first character of the string into the stack.\r\n        stack.append(s[0]) \r\n    \r\n        curr_index = 1 \r\n    \r\n        #iterating over the string.\r\n        while curr_index < len(s):\r\n            \r\n            #if current character of string is equal to the character at top \r\n            #of stack, we continue iterating in the loop.\r\n            if s[curr_index] == stack[-1]: \r\n                pass\r\n            #else we push the current character into the stack.\r\n            else:                          \r\n                stack.append(s[curr_index])\r\n            curr_index += 1\r\n    \r\n        ans = \"\" \r\n    \r\n        #adding all characters in the stack to the answer and returning it.\r\n        for char in stack:\r\n            ans+=char \r\n        return ans\r\n        \r\n        ",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n    {\n        //Complete this function\n        public string removeConsecutiveDuplicates(string s)\n        {\n            string answer = \"\";\n            Stack<char> st = new Stack<char>();\n        \n            //pushing the first character of the string into the stack.   \n            st.Push(s[0]);\n        \n            //iterating over the string.\n        for(int i=1;i<s.Length;i++)\n        {\n            //if current character of string is equal to the character at top \n            //of stack, we continue iterating in the loop.\n            if(s[i]==st.Peek())\n                continue;\n            //else we add the character at top of stack to the answer\n            //and push the current character into the stack.\n            else\n            {\n                answer+=st.Peek();\n                st.Pop();\n                st.Push(s[i]);\n            }\n        }\n        \n        //adding character at the top of stack to the answer and returning it.\n        answer+=st.Peek();\n        return answer;\n        }\n    }",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {string} s\r\n * @returns {string}\r\n*/\r\n\r\nclass Solution \r\n{\r\n    //Function to remove consecutive duplicates from given string using Stack.\r\n    removeConsecutiveDuplicates(s)\r\n    {\r\n        let answer = '';\r\n        \r\n        let temp = s.split('');\r\n        \r\n        let stack = [];\r\n        let top = -1;\r\n         \r\n        //pushing the first character of the string into the stack.   \r\n        stack.push(temp[0]);\r\n        top++;\r\n        \r\n        //iterating over the string.\r\n        for(let i=1;i<temp.length;i++)\r\n        {\r\n            //if current character of string is equal to the character at top \r\n            //of stack, we continue iterating in the loop.\r\n            if(temp[i]==stack[top])\r\n                continue;\r\n                \r\n            //else we add the character at top of stack to the answer\r\n            //and push the current character into the stack.\r\n            else\r\n            {\r\n                answer += stack[top];\r\n                stack.pop();\r\n                stack.push(temp[i]);\r\n            }\r\n        }\r\n        \r\n        //adding character at the top of stack to the answer and returning it.\r\n        answer += stack[top];\r\n        return answer;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}