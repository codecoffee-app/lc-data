{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701327,
            "title": "Removing consecutive duplicates - 2",
            "titleSlug": "removing-consecutive-duplicates-2-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">You are given string <strong>s</strong>. You need to remove the pair of duplicates.<br /><strong>Note:&nbsp;</strong>The pair should be of adjacent elements and after removing a pair the remaining string is joined together.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = \"aaabbaaccd\"\n<strong>Output</strong>: ad\n<strong>Explanation</strong>: \nRemove (aa)abbaaccd =&gt;abbaaccd\nRemove a(bb)aaccd =&gt; aaaccd\nRemove (aa)accd =&gt; accd\nRemove a(cc)d =&gt; ad</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = \"aaaa\"\n<strong>Output</strong>: Empty String\n<strong>Explanation</strong>: \nRemove (aa)aa =&gt; aa\nAgain removing pair of duplicates then (aa) \nwill be removed and we will get 'Empty String'.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |s| &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 's', repeatedly remove adjacent duplicate characters until no more duplicates can be removed. Return the resulting string after all removals. If the final string is empty, return an empty string.",
                "constraints": [
                    "1 <= |s| <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "aaabbaaccd",
                        "output": "ad",
                        "explanation": "The process is as follows:\n1. Remove 'aa': 'abbaaccd' becomes 'abbaaccd'\n2. Remove 'bb': 'abbaaccd' becomes 'aaaccd'\n3. Remove 'aa': 'aaaccd' becomes 'accd'\n4. Remove 'cc': 'accd' becomes 'ad'"
                    },
                    {
                        "input": "aaaa",
                        "output": "",
                        "explanation": "The process is as follows:\n1. Remove 'aa': 'aaaa' becomes 'aa'\n2. Remove 'aa': 'aa' becomes '' (Empty String)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\n  public:\n    // Function to remove pair of duplicates from given string using Stack.\n    string removePair(string s) {\n        stack<char> st;\n\n        // pushing the first character of the string into the stack.\n        st.push(s[0]);\n\n        // iterating over the string.\n        for (int i = 1; i < s.length(); i++) {\n            // if current character of string is equal to the character at top\n            // of stack, we pop it from stack and continue iterating.\n            if (!st.empty() && s[i] == st.top()) {\n                st.pop();\n                continue;\n            }\n            // else we push the current character into the stack.\n            else {\n                st.push(s[i]);\n            }\n        }\n        string ans = \"\";\n\n        // adding all characters in the stack to the answer and returning it.\n        while (!st.empty()) {\n            ans = st.top() + ans;\n            st.pop();\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    // Function to remove pair of duplicates from given string using Stack.\n    public static String removePair(String s) {\n        Stack<Character> st = new Stack<Character>();\n\n        // pushing the first character of the string into the stack.\n        st.push(s.charAt(0));\n\n        // iterating over the string.\n        for (int i = 1; i < s.length(); i++) {\n            // if current character of string is equal to the character at top\n            // of stack, we pop it from stack and continue iterating.\n            if (!st.empty() && s.charAt(i) == st.peek()) {\n                st.pop();\n                continue;\n            }\n            // else we push the current character into the stack.\n            else {\n                st.push(s.charAt(i));\n            }\n        }\n\n        String res = new String(\"\");\n\n        // adding all characters in the stack to the answer and returning it.\n        if (!st.empty()) {\n            while (!st.empty()) {\n                res = st.peek() + res;\n                st.pop();\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "\n#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to remove pair of duplicates from given string using Stack.\n    def removePair(self,s):\n        \n        stack = [] \n    \n        #pushing the first character of the string into the stack.\n        stack.append(s[0]) \n    \n        curr_index = 1 \n    \n        #iterating over the string.\n        while curr_index < len(s):\n            \n            if len(stack) == 0:\n                stack.append(s[curr_index])\n            \n            #if current character of string is equal to the character at top \n            #of stack, we pop it from stack and continue iterating.\n            elif s[curr_index] == stack[-1]: \n                stack.pop()\n            #else we push the current character into the stack.\n            else:\n                stack.append(s[curr_index]) \n            curr_index += 1\n    \n        ans = \"\" \n        \n        #adding all characters in the stack to the answer and returning it.\n        for char in stack:\n            ans+=char \n            \n        if len(ans) ==0 :\n            ans=\"Empty String\"\n        \n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {string} s\n * @returns {string}\n*/\n\nclass Solution\n{\n    //Function to remove pair of duplicates from given string using Stack.\n    removePair(s)\n    {\n        let st = [];\n        let top = -1;\n        \n        //pushing the first character of the string into the stack.\n        st.push(s[0]);\n        top++;\n        \n        //iterating over the string.\n        for(let i=1;i<s.length;i++)\n        {\n            //if current character of string is equal to the character at top \n            //of stack, we pop it from stack and continue iterating.\n            if(top !== -1 && s[i] == st[top])\n            {\n                st.pop();\n                top--;\n                continue;\n            }\n            //else we push the current character into the stack.\n            else\n            {\n                st.push(s[i]);\n                top++;\n            }\n        }\n        \n        let ans='';\n        \n        //adding all characters in the stack to the answer and returning it.\n        while(top !== -1)\n        {\n            ans = st[top] + ans;\n            st.pop();\n            top--;\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}