{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700138,
            "title": "Reorder List",
            "titleSlug": "reorder-list",
            "content": "<p><span >Given a singly linked list<em>: A</em>0&rarr;<em>A</em>1&rarr;...&rarr;<em>A</em><em>n</em>-2&rarr;<em>A</em>n-1, reorder it to <em>A</em>0&rarr;<em>A</em><em>n-1</em>&rarr;<em>A</em>1&rarr;<em>A</em><em>n</em>-2&rarr;<em>A</em>2&rarr;<em>A</em><em>n</em>-3&rarr;...</span><br /><span >For example: Given 1-&gt;2-&gt;3-&gt;4-&gt;5 its reorder is 1-&gt;5-&gt;2-&gt;4-&gt;3.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;3\n<strong>Output: </strong>1-&gt;3-&gt;2\n<strong>Explanation: </strong>Here n=3, so the correct order is<em> A</em>0&rarr;<em>A</em><em>2</em>&rarr;<em>A</em><em>1<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700138/Web/Other/blobid0_1722946913.png\" width=\"386\" height=\"182\" /></em></span></pre>\n<pre><span ><strong>Input: </strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">LinkedList:</span> 1-&gt;7-&gt;3-&gt;4\n<strong>Output: </strong>1-&gt;4-&gt;7-&gt;3\n<strong>Explanation: </strong>Here n=4, so the correct order is<em> A</em>0&rarr;<em>A</em><em>3</em>&rarr;<em>A</em><em>1</em>&rarr;<em>A</em><em>2</em></span></pre>\n<p><span ><strong>Note</strong>: Try to solve without using any auxiliary space.</span></p>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &lt;= no. of nodes &lt;= 10<sup>6</sup></span><br /><span >0 &lt;= node-&gt;data &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list A0 -> A1 -> ... -> An-2 -> An-1, reorder it to A0 -> An-1 -> A1 -> An-2 -> A2 -> An-3 -> ...",
                "constraints": [
                    "1 <= no. of nodes <= 10^6",
                    "0 <= node->data <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 1->2->3",
                        "output": "1->3->2",
                        "explanation": "For a linked list 1->2->3, the reordered list is 1->3->2. This is achieved by interleaving the first node with the last node, then the second node.  In this case n=3, so the correct order is A0->A2->A1"
                    },
                    {
                        "input": "LinkedList: 1->7->3->4",
                        "output": "1->4->7->3",
                        "explanation": "For a linked list 1->7->3->4, the reordered list is 1->4->7->3. This is achieved by interleaving the first node with the last node, then the second node with the second to last. In this case n=4, so the correct order is A0->A3->A1->A2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Split the list into 2 halves, then&nbsp;reverse the second half.</span></p>",
            "<p><span >Now, merge the 2 halves while picking elements alternatively from each half.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "oyo-rooms",
            "intuit"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void reorderList(struct Node *head) {\n        if (head == NULL || head->next == NULL || head->next->next == NULL)\n            return;\n\n        // Find the middle of the list\n        Node *slow = head, *fast = head;\n        while (fast->next != NULL && fast->next->next != NULL) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        // Reverse the second half of the list\n        Node *prev = NULL, *curr = slow->next, *next;\n        slow->next = NULL; // Split the list into two halves\n        while (curr != NULL) {\n            next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n\n        // Merge the two halves\n        Node *first = head, *second = prev;\n        while (second != NULL) {\n            Node *tmp1 = first->next;\n            Node *tmp2 = second->next;\n\n            first->next = second;\n            second->next = tmp1;\n\n            first = tmp1;\n            second = tmp2;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    void reorderlist(Node head) {\n        int n = 0;            // variable to store the number of nodes in the list\n        Node cur = head;      // current node pointer initialized to head\n        while (cur != null) { // loop to count the number of nodes in the list\n            n++;              // increment the count\n            cur = cur.next;   // move to the next node\n        }\n\n        Node head1 = head; // first half of the list\n        Node head2 = head; // second half of the list\n        Node prev = null;  // pointer to the node before the second half of the list\n        int w = n / 2;     // variable to hold the index at which the second half starts\n        if (n % 2 == 1) {  // if the number of nodes is odd\n            w++;           // increment the index by 1\n        }\n        for (int i = 0; i < w;\n             i++) { // loop to reach the node at index w in the second half\n            prev = head2;\n            head2 = head2.next;\n        }\n        if (prev != null) { // if the second half exists\n            prev.next =\n                null; // set the next pointer of prev node to null to break the list\n        }\n        head2 = reverse(head2); // reverse the second half of the list\n        cur = head1; // reset the current node pointer to the start of the list\n        for (int i = 0; i < n / 2; i++) { // loop to restructure the list\n            Node temp = cur.next;\n            cur.next = head2;\n            Node temp2 = head2.next;\n            head2.next = temp;\n            cur = temp;\n            head2 = temp2;\n        }\n    }\n\n    Node reverse(Node head) {\n        Node cur = head;          // current node pointer initialized to head\n        Node prev = null;         // pointer to previous node\n        while (cur != null) {     // loop to reverse the list\n            Node temp = cur.next; // temporary node to store the next node\n            cur.next =\n                prev;   // reverse the link by setting the next pointer to previous node\n            prev = cur; // move the previous pointer to current node\n            cur = temp; // move the current node pointer to the next node\n        }\n        return prev; // return the new head of the reversed list\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\nclass Solution:\n\n    def reorderList(self, head):\n        if not head or not head.next:\n            return\n\n        # Find the middle of the list\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n        # Split the list into two halves\n        second = slow.next\n        slow.next = None\n\n        # Reverse the second half\n        prev = None\n        while second:\n            next_node = second.next\n            second.next = prev\n            prev = second\n            second = next_node\n\n        # Merge the two halves\n\n        first, second = head, prev\n        while second:\n            tmp1, tmp2 = first.next, second.next\n            first.next = second\n            second.next = tmp1\n            first, second = tmp1, tmp2\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/*\n// Node Class\nclass Node {\n    constructor(data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n*/\n\nclass Solution {\n    reorderList(head) {\n        if (!head || !head.next) {\n            return;\n        }\n\n        // Find the middle of the list\n        let slow = head, fast = head;\n        while (fast && fast.next) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        // Split the list into two halves\n        let second = slow.next;\n        slow.next = null;\n\n        // Reverse the second half\n        let prev = null;\n        while (second) {\n            let next_node = second.next;\n            second.next = prev;\n            prev = second;\n            second = next_node;\n        }\n\n        // Merge the two halves\n        let first = head;\n        second = prev;\n        while (second) {\n            let tmp1 = first.next;\n            let tmp2 = second.next;\n            first.next = second;\n            second.next = tmp1;\n            first = tmp1;\n            second = tmp2;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}