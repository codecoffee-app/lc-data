{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703042,
            "title": "Reorganize The Array",
            "titleSlug": "reorganize-the-array4810",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of elements <strong>arr[]</strong> with indices ranging from <strong>0</strong> to <strong>arr.size()</strong> - 1, your task is to write a program that rearranges the elements of the array such that <strong>arr[i]</strong> = <strong>i</strong>. If an element <strong>i</strong> is not present in the array, <strong>-1</strong> should be placed at the corresponding index.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note :</strong>&nbsp;The arr[] doesn't contains any <strong>duplicate</strong> non-negative values.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [-1, -1, 6, 1, 9, 3, 2, -1, 4, -1]\n<strong>Output:</strong> [-1, 1, 2, 3, 4, -1, 6, -1, -1, 9]\n<strong>Explanation: </strong>Here We can see there are 10 elements. So, the sorted array will look like [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] but in our array we are not having 0, 5, 7 and 8. So, at there places we will be printing -1 and otherplaces will be having elements.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [2, 0, 1]\n<strong>Output:</strong> [0, 1, 2]\n<strong>Explanation: </strong>Here We can see all the elements are present so no -1 is returned in array.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />0 &le; arr.size() &le; 10<sup>5</sup><br />-1 &le; arr[i] &le; arr.size()-1<br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of elements `arr[]` with indices ranging from 0 to `arr.size()` - 1, rearrange the elements of the array such that `arr[i]` = `i`. If an element `i` is not present in the array, place -1 at the corresponding index.",
                "constraints": [
                    "0 <= arr.size() <= 10^5",
                    "-1 <= arr[i] <= arr.size()-1",
                    "The array `arr[]` contains no duplicate non-negative values."
                ],
                "testcases": [
                    {
                        "input": "[-1, -1, 6, 1, 9, 3, 2, -1, 4, -1]",
                        "output": "[-1, 1, 2, 3, 4, -1, 6, -1, -1, 9]",
                        "explanation": "The output array reflects the required arrangement. For example, arr[1] = 1, arr[2] = 2, and so on.  Positions where the corresponding number is missing (e.g., 0, 5, 7, 8) are filled with -1."
                    },
                    {
                        "input": "[2, 0, 1]",
                        "output": "[0, 1, 2]",
                        "explanation": "Since all numbers from 0 to `arr.size()` -1 are present in the input array, the output array is simply the sorted array of these numbers."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Initialize the <strong>ans[]</strong> array with -1, and iterate through <strong>arr[]</strong>, override -1 in ans[] with element find in arr[].</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to rearrange the array such that arr[i] = i\nclass Solution {\n  public:\n    vector<int> rearrange(vector<int>& arr) {\n        int n = arr.size();\n        vector<int> result(n, -1); // Initialize result vector with -1\n\n        // Iterating through the input array\n        for (int i = 0; i < n; ++i) {\n            if (arr[i] >= 0 && arr[i] < n) {\n                result[arr[i]] = arr[i];\n            }\n        }\n\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<Integer> rearrange(List<Integer> arr) {\n        int n = arr.size();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(-1); // Initialize result list with -1\n        }\n\n        // Iterating through the input list\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) >= 0 && arr.get(i) < n) {\n                result.set(arr.get(i), arr.get(i));\n            }\n        }\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def rearrange(self, arr):\n        n = len(arr)\n        result = [-1] * n  # Initialize result list with -1\n\n        # Iterating through the input list\n        for i in range(n):\n            if 0 <= arr[i] < n:\n                result[arr[i]] = arr[i]\n\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    rearrange(arr) {\n        let n = arr.length;\n        let result = new Array(n).fill(-1);\n        // Initialize result array with -1\n\n        // Iterating through the input array\n        for (let i = 0; i < n; ++i) {\n            if (arr[i] >= 0 && arr[i] < n) {\n                result[arr[i]] = arr[i];\n            }\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}