{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703146,
            "title": "Repeated Character",
            "titleSlug": "repeated-character2058",
            "content": "<p><span style=\"font-size: 18px;\">Given a string consisting of lowercase english alphabets. Find the repeated character present <strong>first</strong> in the string.</span></p>\n<p><strong><span style=\"font-size: 18px;\">NOTE - If there are no repeating characters return '#'.</span></strong></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS = \"geeksforgeeks\"\n<strong>Output:</strong> g\n<strong>Explanation</strong>: g, e, k and s are the repeating\ncharacters. Out of these, g occurs first. </span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nS = \"abcde\"\n<strong>Output:</strong> -1\n<strong>Explanation</strong>: No repeating character present. (You need to return '#')\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>firstRep()&nbsp;</strong>which takes the string S as input and returns the the first repeating character in the string. <strong>In case there's no repeating character present, return '#'.</strong></span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=|S|&lt;=10<sup>5</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` consisting of lowercase English alphabets, find the first repeated character in the string. If no character is repeated, return '#'.",
                "constraints": [
                    "1 <= |S| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "geeksforgeeks",
                        "output": "g",
                        "explanation": "The characters 'g', 'e', 'k', and 's' are repeating characters. 'g' appears first in the string."
                    },
                    {
                        "input": "abcde",
                        "output": "#",
                        "explanation": "No character is repeated in the string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Store the frequencies of all the characters in the string<br />\nThen, traverse the string again from the beginning. The first character with freq &gt; 1 will be your result.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "goldman-sachs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n  public:\r\n    char firstRep (string s)\r\n    {\r\n        // stores the frequency of all the characters\r\n        int hash[26] = {0};\r\n    \r\n        for (int i = 0; i < s.length (); ++i)\r\n            hash[s[i] - 'a']++;\r\n    \r\n        // we traverse the string from start and return the \r\n        // first character with frequency greater than 1.\r\n        for (int i = 0; i < s.length (); ++i)\r\n        {\r\n            if (hash[s[i] - 'a'] > 1) return s[i];\r\n        }\r\n    \r\n        // if we reach here, it means that no character repeats\r\n        return '#';\r\n    }\r\n    \r\n    // Contributed By: Pranay Bansal\r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\r\nclass Solution{\r\n    char firstRep(String s)\r\n    {\r\n        int hash[] = new int[26];\r\n    \r\n        for (int i = 0; i < s.length(); ++i)\r\n            hash[s.charAt(i) - 'a']++;\r\n    \r\n        // we traverse the string from start and return the \r\n        // first character with frequency greater than 1.\r\n        for (int i = 0; i < s.length (); ++i)\r\n        {\r\n            if (hash[s.charAt(i) - 'a'] > 1) return s.charAt(i);\r\n        }\r\n    \r\n        // if we reach here, it means that no character repeats\r\n        return '#';\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def firstRep(self, s):\n        # creating an empty dictionary to store the frequency of each character\n        dicti = {}\n\n        # iterating over the string\n        for i in s:\n            # checking if the character is already present in the dictionary\n            if i in dicti:\n                # if yes, increment its frequency by 1\n                dicti[i] += 1\n            else:\n                # if not, add the character to the dictionary with frequency 1\n                dicti[i] = 1\n\n        # iterating over the string again\n        for i in s:\n            # checking if the frequency of the character is greater than 1\n            if dicti[i] > 1:\n                # if yes, return the character\n                return i\n\n        # if no repeated characters found, return -1\n        return -1\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    //Function to find the first repeated character in a string.\n    public char firstRep(string s)\n    {\n        // stores the frequency of all the characters\n        int[] hash = new int[26];\n    \n        for (int i = 0; i < s.Length; ++i)\n            hash[s[i] - 'a']++;\n    \n        // we traverse the string from start and return the \n        // first character with frequency greater than 1.\n        for (int i = 0; i < s.Length; ++i)\n        {\n            if (hash[s[i] - 'a'] > 1) return s[i];\n        }\n    \n        // if we reach here, it means that no character repeats\n        return '#';\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}