{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703872,
            "title": "Repeated IDs",
            "titleSlug": "repeated-ids0116",
            "content": "<p><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\">Geek is given a task to select at most 10 employees for a company project. Each employee is represented by a single-digit ID number which is unique for all the selected employees for the project. Geek has a technical problem in his system which printed ID number multiple times. You are given array<strong> arr</strong>&nbsp;having all printed IDs. Help him to get rid of the repeated IDs.</span></p>\n<p><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Input: </strong>arr[] = [8, 8, 6, 2, 1] <br /><strong>Output: </strong>[8, 6, 2, 1] <br /><strong>Explanation: </strong>8 is repeated, so takes 8 single time.</span></pre>\n<pre><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><strong>Input: </strong>arr[] = [7, 6, 7, 4, 2, 7] <br /><strong>Output: </strong>[7, 6, 4, 2] <br /><strong>Explanation: </strong>7 and 6 are repeated, so take 7 and 6 single time.</span></pre>\n<p><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i] &le; 9</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek needs to select at most 10 employees for a project. Each employee has a unique single-digit ID. Due to a system error, the ID numbers are printed multiple times. Given an array `arr` of these printed IDs, help Geek remove the duplicate IDs to obtain the list of unique employee IDs.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "[8, 8, 6, 2, 1]",
                        "output": "[8, 6, 2, 1]",
                        "explanation": "The ID 8 is repeated in the input. The output contains only one instance of 8, along with the other unique IDs."
                    },
                    {
                        "input": "[7, 6, 7, 4, 2, 7]",
                        "output": "[7, 6, 4, 2]",
                        "explanation": "The ID 7 is repeated in the input. The output contains only one instance of 7, along with the other unique IDs."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use Hashing, store the count of occurrence and each number if first time appeared then include it.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to find unique elements in an array\nclass Solution {\n  public:\n    vector<int> uniqueId(vector<int>& arr) {\n        int n = arr.size();\n        int h[10] = {0}, k; // array to keep track of the count of each element\n        vector<int> v;      // vector to store the unique elements\n        for (int i = 0; i < n; i++) {\n            k = arr[i];         // current element\n            if (h[k] == 0) {    // check if the element has already been encountered\n                v.push_back(k); // add the element to the vector\n                h[k]++;         // update the count of the element\n            }\n        }\n        return v; // return the vector containing unique elements\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public ArrayList<Integer> uniqueId(int[] arr) {\n        int n = arr.length;\n        int[] h = new int[10]; // array to keep track of the count of each element\n        ArrayList<Integer> v =\n            new ArrayList<>(); // ArrayList to store the unique elements\n\n        for (int i = 0; i < n; i++) {\n            int k = arr[i];  // current element\n            if (h[k] == 0) { // check if the element has already been encountered\n                v.add(k);    // add the element to the ArrayList\n                h[k]++;      // update the count of the element\n            }\n        }\n        return v; // return the ArrayList containing unique elements\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def uniqueId(self, arr):\n        h = [0] * 10  # list to keep track of the count of each element\n        v = []  # list to store the unique elements\n\n        for k in arr:\n            if h[k] == 0:  # check if the element has already been encountered\n                v.append(k)  # add the element to the list\n                h[k] += 1  # update the count of the element\n\n        return v  # return the list containing unique elements\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    uniqueId(arr) {\n        let h =\n            new Array(10).fill(0); // array to keep track of the count of each element\n        let v = [];                // array to store the unique elements\n\n        for (let i = 0; i < arr.length; i++) {\n            let k = arr[i];   // current element\n            if (h[k] === 0) { // check if the element has already been encountered\n                v.push(k);    // add the element to the array\n                h[k]++;       // update the count of the element\n            }\n        }\n        return v; // return the array containing unique elements\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}