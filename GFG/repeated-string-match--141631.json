{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706066,
            "title": "Repeated String Match",
            "titleSlug": "repeated-string-match--141631",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings <strong>a</strong> and <strong>b</strong>, find the minimum number of times <strong>a</strong> has to be repeated such that <strong>b</strong> becomes a substring of the repeated <strong>a</strong>. If <strong>b</strong> cannot be a substring of <strong>a</strong> no matter how many times it is repeated, return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: a</strong> = \"abcd\", b = \"cdabcdab\"</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong> After repeating a three times, \nwe get \"abcdabcdabcd\".</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: a</strong> = \"aa\", b = \"a\"</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong> B is already a substring of a.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task: </strong>&nbsp;<br />You don't need to read input or print anything. Complete the function</span> <span style=\"font-size: 18px;\"><strong>repeatedStringMatch()</strong> which takes strings <strong>a</strong> and <strong>b</strong> as input parameters and returns the minimum number of operations to complete the task. If it is not possible then return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(|a| * |b|)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |a|, |b| &le; 4 * 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Let count = <strong>B.length()&nbsp;/ A.length().</strong><br />\nNow check whether<strong>&nbsp;B</strong>&nbsp;is a substring of&nbsp;<strong>A*count</strong>&nbsp;or&nbsp;<strong>A*(count+1)</strong></span></p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Class definition for Solution\nclass Solution {\n\n  private:\n    // Function to check if sub is a substring of s\n    bool isSubString(string s, string sub) {\n        int count = 0;\n        // iterating over each character of string s\n        for (int i = 0; i < s.length(); i++) {\n            // checking if current character matches with the character in sub\n            if (s[i] == sub[count]) {\n                count++;\n            } else {\n                i -= count;\n                count = 0;\n            }\n            // checking if sub is fully matched in s\n            if (count == sub.length()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n  public:\n    // Function to find the minimum number of times A needs to be repeated to obtain B\n    // as its substring\n    int repeatedStringMatch(string A, string B) {\n        string temp = A;\n        // Calculating the minimum number of times A needs to be repeated\n        int count = ceil(float(B.length()) / float(A.length()));\n\n        // Appending A to itself count times\n        for (int i = 1; i < count; i++)\n            A += temp;\n\n        // Checking if B is a substring of A\n        if (isSubString(A, B))\n            return count;\n        else {\n            // Appending A to itself once more\n            A += A;\n            // Checking if B is a substring of A after one more repetition\n            if (isSubString(A, B))\n                return count + 1;\n        }\n        // Returning -1 if B cannot be obtained as a substring of A\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // function to check if str2 is substring of rep1\n    static boolean issubstring(String str2, String rep1) {\n        int M = str2.length();\n        int N = rep1.length();\n\n        // loop through each character in rep1\n        for (int i = 0; i <= N - M; i++) {\n            int j;\n            // check if the substring of rep1 starting at i matches str2\n            for (j = 0; j < M; j++)\n                if (rep1.charAt(i + j) != str2.charAt(j)) break;\n            // if the substring matches str2, return true\n            if (j == M) return true;\n        }\n        // if no substring found, return false\n        return false;\n    }\n\n    // function to find the minimum number of times A needs to be repeated to form B\n    static int repeatedStringMatch(String A, String B) {\n        int ans = 1;\n        String S = A;\n\n        // repeat A until its length is at least equal to B's length\n        while (S.length() < B.length()) {\n            S += A;\n            ans++;\n        }\n\n        // check if B is a substring of S or S + A\n        if (issubstring(B, S)) return ans;\n        if (issubstring(B, S + A)) return ans + 1;\n        // if B is not a substring, return -1\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to find the minimum number of times A must be repeated to get B as a substring.\n    def repeatedStringMatch(self, A, B):\n        S = A\n        ret = 1\n\n        #Repeating A until its length becomes greater than or equal to B.\n        while len(S) < len(B):\n            S += A\n            ret += 1\n\n        #If B is a substring of S, return the count of repetitions of A.\n        if B in S:\n            return ret\n\n        #If B is a substring of S+A, return the count of repetitions of A plus 1.\n        if B in S + A:\n            return ret + 1\n\n        #If B is not a substring of both S and S+A, return -1.\n        return -1\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    isSubString(s, sub) {\n        let count = 0;\n        for (let i = 0; i < s.length; i++) {\n            if (s[i] === sub[count]) {\n                count++;\n            } else {\n                i -= count;\n                count = 0;\n            }\n            if (count === sub.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    repeatedStringMatch(A, B) {\n        let temp = A;\n        let count = Math.ceil(B.length / A.length);\n\n        for (let i = 1; i < count; i++) A += temp;\n\n        if (this.isSubString(A, B))\n            return count;\n        else {\n            A += A;\n            if (this.isSubString(A, B)) return count + 1;\n        }\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}