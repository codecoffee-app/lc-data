{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701321,
            "title": "Repeating Character - First Appearance Leftmost",
            "titleSlug": "repeating-character-first-appearance-leftmost",
            "content": "<p><span style=\"font-size: 18px;\">You are given a string <strong>S (both uppercase and lowercase characters)</strong>. You need to print the index of </span><span style=\"font-size: 18px;\">repeated character whose <strong>first </strong>appearance is <strong>leftmost</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">S = geeksforgeeks\n<strong>Output: </strong>0<strong>\nExplanation: </strong>We see that both e and g\nrepeat as we move from left to right.\nBut the leftmost is g so we print g.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">S = abcd\n<strong>Output: </strong>-1<strong>\nExplanation: </strong>No character repeats so\nwe print -1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />This is a function problem. You only need to complete the function<strong> repeatedCharacter()&nbsp;</strong>that takes a&nbsp;<strong>string </strong>as a parameter and <strong>returns </strong>the index of the character. If no character repeats then<strong> return -1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(Number of distinct characters).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |S| &lt;= 100</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "goldman-sachs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n//Back-end complete function Template for C++\n\nclass Solution\n{\n    public:\n    //Function to find repeated character whose first appearance is leftmost.\n    int repeatedCharacter (string s) \n    { \n        //using hash table to store count of each character.\n        int firstIndex[256]; \n        for (int i = 0; i <256; i++) \n            firstIndex[i] = -1; \n      \n        int res = INT_MAX; \n        \n        //iterating over the string.\n        for (int i = 0; i < s.length(); i++) \n        { \n            //if current character is not present in hash table,\n            //we store its position or first appearance in hash table.\n            if (firstIndex[s[i]] == -1) \n               firstIndex[s[i]] = i;\n               \n            //else we compare the position stored in hash table with \n            //minimum value stored earlier and store their minimum.\n            else\n               res = min(res, firstIndex[s[i]]); \n        } \n        //returning the result.\n        return (res == INT_MAX) ? -1 : res; \n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass Solution\n{\n    //Function to find repeated character whose first appearance is leftmost.\n    static int repeatedCharacter(String S)\n    {\n        //using hash table to store count of each character.\n        int firstIndex[]= new int[256]; \n        for (int i = 0; i <256; i++) \n            firstIndex[i] = -1; \n      \n        int res = Integer.MAX_VALUE; \n        \n        //iterating over the string.\n        for (int i = 0; i < S.length(); i++)\n        {\n            //if current character is not present in hash table,\n            //we store its position or first appearance in hash table.\n            if (firstIndex[S.charAt(i)] == -1) \n               firstIndex[S.charAt(i)] = i; \n               \n            //else we compare the position stored in hash table with \n            //minimum value stored earlier and store their minimum.\n            else\n               res = Math.min(res, firstIndex[S.charAt(i)]); \n        } \n        //returning the result.\n        return (res == Integer.MAX_VALUE) ? - 1 : res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\n#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to find repeated character whose first appearance is leftmost.\n    def repeatingCharacter(self,s):\n        \n        #using hash table to store count of each character.\n        occurences=[0 for i in range(256)]\n        \n        #iterating over the string and storing the count off each character.\n        for char in s:\n            occurences[ord(char)]+=1\n        \n        for i in range(len(s)):\n            #returning the first character in string with count greater than 1.\n            if(occurences[ord(s[i])]>1):\n                return i\n        return -1",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find repeated character whose first appearance is leftmost.\n    public int repeatedCharacter(string s)\n    {\n        //using hash table to store count of each character.\n        int[] firstIndex = new int[256];\n        for (int i = 0; i < 256; i++)\n            firstIndex[i] = -1;\n\n        int res = int.MaxValue;\n\n        //iterating over the string.\n        for (int i = 0; i < s.Length; i++)\n        {\n            //if current character is not present in hash table,\n            //we store its position or first appearance in hash table.\n            if (firstIndex[s[i]] == -1)\n                firstIndex[s[i]] = i;\n\n            //else we compare the position stored in hash table with \n            //minimum value stored earlier and store their minimum.\n            else\n                res = Math.Min(res, firstIndex[s[i]]);\n        }\n        //returning the result.\n        return (res == int.MaxValue) ? -1 : res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {string} s\n * @returns {number}\n*/\n\nclass Solution \n{\n    //Function to find repeated character whose first appearance is leftmost.\n    repeatedCharacter(s)\n    {\n        //using hash table to store count of each character.\n        let firstIndex = new Array(256); \n        for (let i = 0; i <256; i++) \n            firstIndex[i] = -1; \n      \n        let res = 1e9; \n        \n        //iterating over the string.\n        for (let i = 0; i < s.length; i++) \n        {\n            //if current character is not present in hash table,\n            //we store its position or first appearance in hash table.\n            if (firstIndex[s.charCodeAt(i)] == -1) \n               firstIndex[s.charCodeAt(i)] = i;\n               \n            //else we compare the position stored in hash table with \n            //minimum value stored earlier and store their minimum.\n            else\n               res = Math.min(res, firstIndex[s.charCodeAt(i)]); \n        } \n        //returning the result.\n        return (res == 1e9) ? -1 : res; \n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}