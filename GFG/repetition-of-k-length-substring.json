{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700407,
            "title": "Repetition of k length substring",
            "titleSlug": "repetition-of-k-length-substring",
            "content": "<p><span style=\"font-size:20px\">Given a string <strong>&#39;s&#39;</strong>, your task is to complete the function <strong>checkString</strong> which returns true&nbsp;if it is possible to convert<strong>&nbsp;&#39;s&#39;</strong>&nbsp;to a string that is repetition of a substring with &#39;k&#39; characters else returns false, where in order to convert we can replace one substring of length k with k characters.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:20px\">Examples:</span></p>\n\n<pre>\n<span style=\"font-size:20px\">Input: str = &quot;abcbedabcabc&quot;,  k = 3\nOutput: 1\nReplace &quot;bed&quot; with &quot;abc&quot; so that the \nwhole string becomes repetition of &quot;abc&quot;.\n\nInput: str = &quot;bcacbcac&quot;, k = 2\nOutput: 0</span></pre>\n\n<p><br />\n<span style=\"font-size:20px\"><strong>Input:</strong><br />\nThe first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains 2 lines. The first line of each test case contains a string s. The second line of each test case contains an integer n.<br />\n<br />\n<strong>Output:</strong><br />\nFor each test case in a new line output will be 1 if it is possible to convert the string else 0.<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;=T&lt;=100<br />\n1&lt; |Length of string| &lt;=100<br />\n1&lt;=N&lt;=10<br />\n<br />\n<strong>Example(To be used only for expected output):<br />\nInput:</strong><br />\n2<br />\nabcbedabcabc<br />\n3<br />\nbcacbcac<br />\n2<br />\n<strong>Output:</strong><br />\n1<br />\n0</span><br />\n&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "bool checkString(string str, int k)\n{\n    int n = str.length();\n    // Length of string must be a multiple of k\n    if (n%k != 0)\n        return false;\n \n    // Create a map to store the frequency of substrings\n    unordered_map<string, int> mp;\n    // Iterate over the string with a step size of k\n    for (int i=0; i<n; i+=k)\n        mp[str.substr(i, k)]++;\n \n    //If there is only one unique substring, return true\n    if (mp.size() == 1)\n        return true;\n\n    // If there are more than two unique substrings, return false\n    if (mp.size() != 2)\n        return false;\n \n    // If one of the unique substrings has a frequency of n/k-1 or 1, return true\n    if ((mp.begin()->second == (n/k - 1)) ||\n                    mp.begin()->second == 1)\n       return true;\n \n    // None of the conditions met, return false\n    return false;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class GfG {\n    public static boolean checkString(String str, int k) {\n        int n = str.length();\n        // Check if the length of the string is divisible by k\n        if (n % k != 0)\n            return false;\n\n        // Using a HashMap to store the frequencies of substrings\n        Map<String, Integer> hm = new HashMap<String, Integer>();\n        // Iterate through the string, incrementing the frequencies of substrings\n        for (int i = 0; i < n; i += k) {\n            // If the substring is already in the HashMap, increment its frequency\n            if (hm.containsKey(str.substring(i, i + k))) {\n                int freq = hm.get(str.substring(i, i + k));\n                freq++;\n                hm.put(str.substring(i, i + k), freq);\n            }\n            // If the substring is not in the HashMap, add it and initialize its frequency to 1\n            else\n                hm.put(str.substring(i, i + k), 1);\n        }\n\n        // Check the size of the HashMap to determine if all substrings are equal\n        if (hm.size() == 1)\n            return true;\n\n        // Check if the size of the HashMap is not equal to 2, which means not all substrings are equal\n        if (hm.size() != 2)\n            return false;\n\n        // Check the frequencies of the substrings to determine if one occurs once less or once more than the others\n        Iterator<Map.Entry<String, Integer>> itr = hm.entrySet().iterator();\n        Map.Entry<String, Integer> entry = itr.next();\n        if (entry.getValue() == (n / k - 1) || entry.getValue() == 1)\n            return true;\n\n        // If none of the conditions are met, return false\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n\n/**\n * @param {string} s\n * @param {number} k\n * @returns {bool}\n*/\n\nclass Solution{\n    checkString(s,k){\n        // Length of string must be a multiple of k\n        let n = s.length;\n        if (n%k != 0){\n            return false;\n        }\n    \n        let mp = new Map();\n        for (let i=0; i<n; i+=k){\n            let substr = s.substring(i, i+k);\n            if (mp.has(substr)){\n                mp.set(substr, mp.get(substr) + 1);\n            } else {\n                mp.set(substr, 1);\n            }\n        }\n    \n        if (mp.size === 1){\n            return true;\n        }\n\n        if (mp.size !== 2){\n            return false;\n        }\n    \n        let count1 = mp.values().next().value;\n        let count2 = mp.values().next().value;\n        if (count1 === (n/k - 1) || count1 === 1){\n            return true;\n        }\n    \n        return false;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to check if the given string contains a substring of size K with K distinct characters.\n    public bool checkString(string str, int k)\n    {\n        int n = str.Length;\n        // Length of string must be a multiple of k\n        if (n % k != 0)\n            return false;\n\n        // Create a dictionary to store the frequency of substrings\n        Dictionary<string, int> mp = new Dictionary<string, int>();\n        // Iterate over the string with a step size of k\n        for (int i = 0; i < n; i += k)\n        {\n            string substr = str.Substring(i, k);\n            if (mp.ContainsKey(substr))\n                mp[substr]++;\n            else\n                mp[substr] = 1;\n        }\n\n        //If there is only one unique substring, return true\n        if (mp.Count == 1)\n            return true;\n\n        // If there are more than two unique substrings, return false\n        if (mp.Count != 2)\n            return false;\n\n        int firstValue = mp.Values.First();\n\n        // If one of the unique substrings has a frequency of n/k-1 or 1, return true\n        if (firstValue == (n / k - 1) || firstValue == 1)\n            return true;\n\n        // None of the conditions met, return false\n        return false;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}