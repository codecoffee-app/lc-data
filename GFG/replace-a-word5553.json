{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703683,
            "title": "Replace a word",
            "titleSlug": "replace-a-word5553",
            "content": "<p><span style=\"font-size:18px\">Given three strings <strong>S</strong>, <strong>oldW&nbsp;</strong>and <strong>newW</strong>. Find all occurrences of the word <strong>oldW</strong>&nbsp;in <strong>S</strong> and replace them&nbsp;with word <strong>newW</strong>.</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \nS = &quot;xxforxx xx for xx</span><span style=\"font-size:18px\">&quot;\noldW = &quot;xx&quot;\nnewW = &quot;Geeks&quot;\n<strong>Output:</strong>&nbsp;\n&quot;geeksforgeeks geeks for geeks</span><span style=\"font-size:18px\">&quot;&nbsp;\n<strong>Explanation</strong>: \nReplacing each &quot;xx&quot; with\n&quot;Geeks&quot; in S.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: \n</strong>S = &quot;india is the xx country&quot;\noldW = &quot;xx&quot;\nnewW = &quot;best&quot;\n<strong>Output:&nbsp;\n</strong>&quot;india is the best country</span><span style=\"font-size:18px\">&quot;\n<strong>Explanation</strong>: \nReplacing each &quot;xx&quot; with\n&quot;best&quot; in S.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>ReplaceAll()&nbsp;</strong>which takes S, oldW and newW as input parameters and returns the string S after replacing all oldW with newW.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;= |S|&nbsp;&lt;=1000<br />\n1&lt;= |oldW|,&nbsp;|newW| &lt;=|S|</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S`, and two other strings `oldW` and `newW`, replace all occurrences of `oldW` in `S` with `newW`. Return the modified string.",
                "constraints": [
                    "1 <= |S| <= 1000",
                    "1 <= |oldW|, |newW| <= |S|"
                ],
                "testcases": [
                    {
                        "input": {
                            "S": "xxforxx xx for xx",
                            "oldW": "xx",
                            "newW": "Geeks"
                        },
                        "output": "GeeksforGeeks Geeks for Geeks",
                        "explanation": "Each instance of 'xx' in the input string S is replaced with 'Geeks'."
                    },
                    {
                        "input": {
                            "S": "india is the xx country",
                            "oldW": "xx",
                            "newW": "best"
                        },
                        "output": "india is the best country",
                        "explanation": "Each instance of 'xx' in the input string S is replaced with 'best'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to find oldW using find() and replace them with newW using replace().</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Backend complete function template for c++\nclass Solution {\n  public:\n    // Returns the longest string in dictionary which is a\n    // subsequence of str.\n    string replaceAll(string str, string oldW, string newW) {\n        if (oldW.empty()) return str;\n        int start_pos = 0;\n        while ((start_pos = str.find(oldW, start_pos)) != string::npos) {\n            str.replace(start_pos, oldW.size(), newW);\n            start_pos += newW.size(); // In case 'newW' contains 'oldW', like\n                                      // replacing 'x' with 'yx'\n        }\n        return str;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}