{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712519,
            "title": "Replace elements by its rank in the array",
            "titleSlug": "replace-elements-by-its-rank-in-the-array",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr </strong>of <strong>N </strong>integers, the task is to replace each element of the array by its rank in the array.&nbsp;The&nbsp;<strong>rank</strong> of an element&nbsp;is defined as the distance between the element with the first element of the array when the array is arranged in ascending order. If two or more are same in the array then their rank is also the same as the rank of the first occurrence of the element.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1</strong>:</span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 6\r\narr = [20, 15, 26, 2, 98, 6]\r\n<strong>Output</strong>:\r\n4, 3, 5, 1, 6, 2\r\n<strong>Explanation</strong>:</span>\r\n<span style=\"font-size:18px\">After sorting, array becomes {</span><span style=\"font-size:18px\">2,6,15,20,26,98}\r\nRank(2) = 1 (at index 0)&nbsp;\r\nRank(6) = 2 (at index 1)&nbsp;\r\nRank(15) = 3 (at index 2)&nbsp;\r\nRank(20) = 4 (at index 3) and so on..</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2</strong>:</span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 4\r\narr = [2, 2, 1, 6]\r\n<strong>Output</strong>:\r\n2, 2, 1, 3\r\n<strong>Explanation</strong>:</span>\r\n<span style=\"font-size:18px\">After sorting, array becomes {1, 2, 2, 6}\r\nRank(1) = 1 (at index 0)&nbsp;\r\nRank(2) = 2 (at index 1)&nbsp;\r\nRank(2) = 2 (at index 2)&nbsp;\r\nRank(6) = 3 (at index 3)</span>\r\n<span style=\"font-size:18px\">Rank(6) = 3 because rank after 2 is 3 as rank \r\nof same element remains same</span> <span style=\"font-size:18px\">and for next element \r\nincreases by 1.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nComplete the function int <strong>replaceWithRank</strong>(), which takes integer N&nbsp; and an array&nbsp;of N integers as input and returns the list in which element at each position of original array is replaced by the rank of that element.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>: O(N * logN)<br />\r\n<strong>Expected Auxiliary Space</strong>: O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup><br />\r\n1 &lt;= arr[i] &lt;= 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of `N` integers, replace each element with its rank within the array. The rank of an element is its position in the sorted array (ascending order), starting from 1. If duplicate elements exist, they share the same rank as the first occurrence of that element in the sorted array.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 6\narr = [20, 15, 26, 2, 98, 6]",
                        "output": "4, 3, 5, 1, 6, 2",
                        "explanation": "After sorting, the array becomes [2, 6, 15, 20, 26, 98]. The ranks are assigned as follows:\n- 20 is at index 3 (4th position) in the sorted array, so rank(20) = 4\n- 15 is at index 2 (3rd position) in the sorted array, so rank(15) = 3\n- 26 is at index 4 (5th position) in the sorted array, so rank(26) = 5\n- 2 is at index 0 (1st position) in the sorted array, so rank(2) = 1\n- 98 is at index 5 (6th position) in the sorted array, so rank(98) = 6\n- 6 is at index 1 (2nd position) in the sorted array, so rank(6) = 2"
                    },
                    {
                        "input": "N = 4\narr = [2, 2, 1, 6]",
                        "output": "2, 2, 1, 3",
                        "explanation": "After sorting, the array becomes [1, 2, 2, 6]. The ranks are assigned as follows:\n- 1 is at index 0 (1st position) in the sorted array, so rank(1) = 1\n- The first occurrence of 2 is at index 1 (2nd position) in the sorted array, so rank(2) = 2.\n- The second occurrence of 2 also gets the same rank, 2.\n- 6 is at index 3 (4th position) in the sorted array, so rank(6) = 4.  Since rank of 2 is 2, then rank of 6 will be the next available which is 3. As 2 is repeated once the next element after 2 will be assigned 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\npublic:\r\n\r\n    vector<int> replaceWithRank(vector<int> &arr, int N){\r\n     \r\n    // Copy input array into newArray\r\n    // int newArray[N];\r\n    // copy(arr, arr + N, newArray);\r\n    vector<int> newArray(N);\r\n    newArray = arr;\r\n \r\n    // Sort newArray[] in ascending order\r\n    sort(newArray.begin(), newArray.end());\r\n    int i;\r\n     \r\n    // Map to store the rank of\r\n    // the array element\r\n    map<int, int> ranks;\r\n \r\n    int rank = 1;\r\n \r\n    for(int index = 0; index < N; index++)\r\n    {\r\n \r\n        int element = newArray[index];\r\n \r\n        // Update rank of element\r\n        if (ranks[element] == 0)\r\n        {\r\n            ranks[element] = rank;\r\n            rank++;\r\n        }\r\n    }\r\n \r\n    // Assign ranks to elements\r\n    for(int index = 0; index < N; index++)\r\n    {\r\n        int element = arr[index];\r\n        arr[index] = ranks[arr[index]];\r\n    }\r\n\r\n    return arr;\r\n\r\n\r\n}\r\n\r\n\r\n    \r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    \n    // Function to replace elements with their ranks\n    static int[] replaceWithRank(int arr[], int N) {\n        // code here\n        \n        // Create an array A which is a copy of the given input array\n        int[] A = Arrays.copyOf(arr, arr.length);\n        \n        // Sort the array A in ascending order\n        Arrays.sort(A);\n        \n        // Create a HashMap to store the rank of each element\n        HashMap<Integer, Integer> rank = new HashMap<>();\n        \n        // Iterate through the sorted array A and assign ranks to each element\n        for (int x : A)\n            rank.putIfAbsent(x, rank.size() + 1);\n        \n        // Replace the elements in the input array with their ranks\n        for (int i = 0; i < arr.length; ++i)\n            A[i] = rank.get(arr[i]);\n        \n        // Return the array with replaced elements\n        return A;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to replace each element of the array with its rank.\n    def replaceWithRank(self, N, arr):\n        mp = {} #creating a dictionary to store the elements and their ranks\n        rank = 1 #initializing the rank\n        b = sorted(arr) #sorting the array in ascending order\n        for i in range(N):\n            if b[i] not in mp: #if the current element is not present in the dictionary\n                mp[b[i]] = rank #add the element to the dictionary and assign its rank\n                rank += 1 #increment the rank\n        return [mp[val] for val in arr] #returning the array with replaced ranks",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number[]} arr\n * @returns {number[]}\n */\n\nclass Solution {\n  //Function to replace each element of the array with its rank.\n  replaceWithRank(N, arr) {\n    let mp = {}; //creating a dictionary to store the elements and their ranks\n    let rank = 1; //initializing the rank\n    let b = arr.slice().sort((a, b) => a - b); //sorting the array in ascending order\n\n    for (let i = 0; i < N; i++) {\n      if (!(b[i] in mp)) { //if the current element is not present in the dictionary\n        mp[b[i]] = rank; //add the element to the dictionary and assign its rank\n        rank += 1; //increment the rank\n      }\n    }\n\n    return arr.map((val) => mp[val]); //returning the array with replaced ranks\n  }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public List<int> replaceWithRank(List<int> arr, int N)\n    {\n        // Copy input list into newArray\n        List<int> newArray = new List<int>(arr);\n     \n        // Sort newArray in ascending order\n        newArray.Sort();\n     \n        // Dictionary to store the rank of the array element\n        Dictionary<int, int> ranks = new Dictionary<int, int>();\n \n        int rank = 1;\n \n        for(int index = 0; index < N; index++)\n        {\n            int element = newArray[index];\n \n            // Update rank of element\n            if (!ranks.ContainsKey(element))\n            {\n                ranks[element] = rank;\n                rank++;\n            }\n        }\n \n        // Assign ranks to elements in original array\n        for(int index = 0; index < N; index++)\n        {\n            int element = arr[index];\n            arr[index] = ranks[arr[index]];\n        }\n \n        return arr;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}