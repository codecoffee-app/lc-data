{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710141,
            "title": "Replace every element with the least greater element on its right",
            "titleSlug": "replace-every-element-with-the-least-greater-element-on-its-right",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr[]</strong> of <strong>N</strong> integers and replace every element with the least greater element on its right side in the array. If there are no greater elements on the right side, replace it with <strong>-1.</strong>&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\narr[] = {8, 58, 71, 18, 31, 32, 63, 92, 43, 3, 91, 93, 25, 80, 28}\r\n<strong>Output: </strong>{18, 63, 80, 25, 32, 43, 80, 93, 80, 25, 93, -1, 28, -1, -1}\r\n<strong>Explanation:</strong> \r\nThe least next greater element of 8 is 18.\r\nThe least next greater element of 58 is 63 and so on.\r\n\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\narr[] = {2, 6, 9, 1, 3, 2}\r\n<strong>Output: </strong>{3, 9, -1, 2, -1, -1}\r\n<strong>Explanation:</strong> \r\nThe least next greater element of 2 is 3. \r\nThe least next greater element of 6 is 9.\r\nleast next greater element for 9 does not\r\nexist and so on.\r\n</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>findLeastGreater</strong>()&nbsp;which takes an array <strong>arr[]</strong> of size <strong>N</strong>&nbsp;and returns a&nbsp;list as an output.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N* log N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>5</sup><br />\r\n1&nbsp;&lt;= A[i] &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to find a data structure which:&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\">1. Insert an element into our ds in sorted order (so at any point of time the elements in our ds are sorted)</span></p>\n\n<p><span style=\"font-size:18px\">2.&nbsp;Finding the upper bound of the current element (upper bound will give just greater element from our ds if present)</span></p>",
            "<p><span style=\"font-size:18px\">How about using a set?</span></p>\n\n<p><span style=\"font-size:18px\">Insert each element in our set and find upper bound for each element using a loop</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "set",
                "slug": "set"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n        vector<int> findLeastGreater(vector<int>& arr, int n) {\r\n\t        set<int> s;\r\n\t        vector<int> ans(arr.size());\r\n        \tfor(int i=arr.size()-1;i>=0;i--) { //traversing the array backwards\r\n        \t\ts.insert(arr[i]); // inserting the element into set\r\n        \t\tauto it = s.upper_bound(arr[i]); // finding upper bound\r\n        \t\tif(it == s.end()) ans[i] = -1; // if upper_bound does not exist then -1\r\n        \t\telse ans[i] = *it; // if upper_bound exists, lets take it\r\n\t        }\r\n\t        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static ArrayList<Integer> findLeastGreater(int n, int[] arr) {\n        // Initializing a TreeSet to store unique elements in sorted order\n        TreeSet<Integer> ts = new TreeSet<>();\n\n        // Initializing an array to store the result\n        int a[] = new int[n];\n        \n        // Iterating over the input array in reverse order\n        for (int i = n-1; i >= 0; i--) {\n            // Finding the least element greater than arr[i] in the TreeSet\n            if (ts.ceiling(arr[i] + 1) == null) {\n                // If there is no such element, set a[i] to -1\n                a[i] = -1;\n            } else {\n                // If there is a greater element, set a[i] to that element\n                a[i] = ts.ceiling(arr[i] + 1);\n            }\n            \n            // Adding the current element to the TreeSet\n            ts.add(arr[i]);\n        }\n        \n        // Converting the result array to an ArrayList and returning it\n        ArrayList<Integer> A = new ArrayList<>();\n        for (int i : a) {\n            A.add(i);\n        }\n        return A;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\nfrom sortedcontainers import SortedList\n\nclass Solution:\n\n    # Function to find the least greater element for each element in the array.\n    def findLeastGreater(self, n, arr):\n        s = SortedList([])\n        ans = [0] * n\n        for i in range(n-1, -1, -1):\n            # Finding the index where the current element could be inserted in the sorted list.\n            ind = s.bisect_right(arr[i])\n            \n            # If the index is at the end of the sorted list, there is no element greater than the current element.\n            if ind == len(s):\n                ans[i] = -1\n            else:\n                # Otherwise, set the answer as the least greater element found in the sorted list.\n                ans[i] = s[ind]\n            \n            # Add the current element to the sorted list.\n            s.add(arr[i])\n        \n        return ans",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}