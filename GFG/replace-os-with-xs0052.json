{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705582,
            "title": "Replace O's with X's",
            "titleSlug": "replace-os-with-xs0052",
            "content": "<p><span style=\"font-size: 18px;\">Given a matrix <strong>mat</strong>&nbsp;where every element is either 'O' or 'X'. Replace all 'O' or a group of 'O' with 'X' that are surrounded by 'X'. </span></p>\n<p><span style=\"font-size: 18px;\">A 'O' (or a set of 'O') is considered to be surrounded by 'X' if there are 'X' at locations just below, just above, just left and just right of it.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> mat = <br />[['X', 'X', 'X', 'X'], <br />['X', 'O', 'X', 'X'], <br />['X', 'O', 'O', 'X'], <br />['X', 'O', 'X', 'X'], <br />['X', 'X', 'O', 'O']]\n<strong>Output:</strong> <br />[['X', 'X', 'X', 'X'], <br />['X', 'X', 'X', 'X'], <br />['X', 'X', 'X', 'X'], <br />['X', 'X', 'X', 'X'], <br />['X', 'X', 'O', 'O']]\n<strong>Explanation:</strong> We only changed those 'O' that are surrounded by 'X'</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> mat = <br />[['X', 'O', 'X', 'X'], <br />['X', 'O', 'X', 'X'], <br />['X', 'O', 'O', 'X'], <br />['X', 'O', 'X', 'X'], <br />['X', 'X', 'O', 'O']]\n<strong>Output:</strong> <br />[['X', 'O', 'X', 'X'], <br />['X', 'O', 'X', 'X'], <br />['X', 'O', 'O', 'X'], <br />['X', 'O', 'X', 'X'], <br />['X', 'X', 'O', 'O']]\n<strong>Explanation:</strong> There's no 'O' that's surround by 'X'.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> mat = <br />[['X', 'X', 'X'], <br />['X', 'O', 'X'], <br />['X', 'X', 'X']]\n<strong>Output:</strong> <br />[['X', 'X', 'X'], <br />['X', 'X', 'X'], <br />['X', 'X', 'X']]\n<strong>Explanation:</strong> There's only one 'O' that's surround by 'X'.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; mat.size() &le; 100<br />1 &le; mat[0].size() &le; 100<br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Notice carefully that the set of 'O' s connected to any edge&nbsp;cannot be transformed to 'X'.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int N, M; // Dimensions of the matrix\n\n    // Utility function to perform flood fill algorithm\n    void floodFillUtil(vector<vector<char>> &mat, int x, int y, char prevC, char newC) {\n        // Base case: If the current cell is out of bounds\n        if (x < 0 || x >= N || y < 0 || y >= M)\n            return;\n\n        // If the current cell does not have the target character\n        if (mat[x][y] != prevC)\n            return;\n\n        // Change the current cell to the new character\n        mat[x][y] = newC;\n\n        // Recursively apply flood fill to adjacent cells\n        floodFillUtil(mat, x + 1, y, prevC, newC); // Down\n        floodFillUtil(mat, x - 1, y, prevC, newC); // Up\n        floodFillUtil(mat, x, y + 1, prevC, newC); // Right\n        floodFillUtil(mat, x, y - 1, prevC, newC); // Left\n    }\n\n    // Main function to replace all surrounded 'O's with 'X'\n    vector<vector<char>> fill(vector<vector<char>> &mat) {\n        N = mat.size();    // Number of rows\n        M = mat[0].size(); // Number of columns\n\n        // Step 1: Replace all 'O's with '-' for processing\n        for (int i = 0; i < N; i++)\n            for (int j = 0; j < M; j++)\n                if (mat[i][j] == 'O')\n                    mat[i][j] = '-';\n\n        // Step 2: Flood fill boundary-connected '-' cells back to 'O'\n\n        // Top and bottom boundaries\n        for (int i = 0; i < N; i++) {\n            if (mat[i][0] == '-') // Left boundary\n                floodFillUtil(mat, i, 0, '-', 'O');\n            if (mat[i][M - 1] == '-') // Right boundary\n                floodFillUtil(mat, i, M - 1, '-', 'O');\n        }\n\n        // Left and right boundaries\n        for (int i = 0; i < M; i++) {\n            if (mat[0][i] == '-') // Top boundary\n                floodFillUtil(mat, 0, i, '-', 'O');\n            if (mat[N - 1][i] == '-') // Bottom boundary\n                floodFillUtil(mat, N - 1, i, '-', 'O');\n        }\n\n        // Step 3: Replace remaining '-' cells (surrounded) with 'X'\n        for (int i = 0; i < N; i++)\n            for (int j = 0; j < M; j++)\n                if (mat[i][j] == '-')\n                    mat[i][j] = 'X';\n\n        return mat; // Return the modified matrix\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static char[][] fill(char mat[][]) {\n        int N = mat.length;    // Number of rows\n        int M = mat[0].length; // Number of columns\n\n        // Utility function for flood fill algorithm\n        class FloodFill {\n            void floodFillUtil(char[][] mat, int x, int y, char prevC, char newC) {\n                // Base case: If the current cell is out of bounds\n                if (x < 0 || x >= N || y < 0 || y >= M) return;\n\n                // If the current cell does not have the target character\n                if (mat[x][y] != prevC) return;\n\n                // Change the current cell to the new character\n                mat[x][y] = newC;\n\n                // Recursively apply flood fill to adjacent cells\n                floodFillUtil(mat, x + 1, y, prevC, newC); // Down\n                floodFillUtil(mat, x - 1, y, prevC, newC); // Up\n                floodFillUtil(mat, x, y + 1, prevC, newC); // Right\n                floodFillUtil(mat, x, y - 1, prevC, newC); // Left\n            }\n        }\n\n        FloodFill floodFill = new FloodFill();\n\n        // Step 1: Replace all 'O's with '-' for processing\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (mat[i][j] == 'O') {\n                    mat[i][j] = '-';\n                }\n            }\n        }\n\n        // Step 2: Flood fill boundary-connected '-' cells back to 'O'\n\n        // Top and bottom boundaries\n        for (int i = 0; i < N; i++) {\n            if (mat[i][0] == '-') { // Left boundary\n                floodFill.floodFillUtil(mat, i, 0, '-', 'O');\n            }\n            if (mat[i][M - 1] == '-') { // Right boundary\n                floodFill.floodFillUtil(mat, i, M - 1, '-', 'O');\n            }\n        }\n\n        // Left and right boundaries\n        for (int i = 0; i < M; i++) {\n            if (mat[0][i] == '-') { // Top boundary\n                floodFill.floodFillUtil(mat, 0, i, '-', 'O');\n            }\n            if (mat[N - 1][i] == '-') { // Bottom boundary\n                floodFill.floodFillUtil(mat, N - 1, i, '-', 'O');\n            }\n        }\n\n        // Step 3: Replace remaining '-' cells (surrounded) with 'X'\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (mat[i][j] == '-') {\n                    mat[i][j] = 'X';\n                }\n            }\n        }\n\n        return mat; // Return the modified matrix\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\n\nclass Solution:\n\n    def floodFillUtil(self, screen, x, y, prevC, newC, N, M):\n        # Base cases\n        if x < 0 or x >= N or y < 0 or y >= M:\n            return\n        if screen[x][y] != prevC:\n            return\n        # Replace the color at (x, y)\n        screen[x][y] = newC\n        self.floodFillUtil(screen, x + 1, y, prevC, newC, N, M)\n        self.floodFillUtil(screen, x - 1, y, prevC, newC, N, M)\n        self.floodFillUtil(screen, x, y + 1, prevC, newC, N, M)\n        self.floodFillUtil(screen, x, y - 1, prevC, newC, N, M)\n\n    def fill(self, mat):\n        n = len(mat)\n        m = len(mat[0])\n        temp = []\n        for i in range(n):\n            row = []\n            for j in range(m):\n                if mat[i][j] == 'X':\n                    row.append('X')\n                else:\n                    row.append('-')\n            temp.append(row)\n\n        for i in range(n):\n            if temp[i][0] == '-':\n                self.floodFillUtil(temp, i, 0, '-', 'O', n, m)\n        for i in range(n):\n            if temp[i][m - 1] == '-':\n                self.floodFillUtil(temp, i, m - 1, '-', 'O', n, m)\n        for i in range(m):\n            if temp[0][i] == '-':\n                self.floodFillUtil(temp, 0, i, '-', 'O', n, m)\n        for i in range(m):\n            if temp[n - 1][i] == '-':\n                self.floodFillUtil(temp, n - 1, i, '-', 'O', n, m)\n\n        for i in range(n):\n            for j in range(m):\n                if temp[i][j] == '-':\n                    temp[i][j] = 'X'\n\n        return temp\n",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}