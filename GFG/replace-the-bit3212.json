{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703147,
            "title": "Replace the Bit",
            "titleSlug": "replace-the-bit3212",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\">Given two&nbsp;numbers N&nbsp;and K, change the Kth (1-based indexing)&nbsp;bit from the left of the binary representation of the number N&nbsp;to&nbsp;'0' if it is &nbsp;'1', else return the number N&nbsp;itself.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 13, K = 2\n<strong>Output:</strong> 9\n<strong>Explanation</strong>: Binary representation of 13 is\n1<strong>1</strong>01. The 2nd bit from left is 1, we make\nit 0 and result is 1001 = 9 (decimal).</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nN = 13, K = 6\n<strong>Output:</strong> 13\n<strong>Explanation</strong>: Binary representation of 13 is\n1101. There's no 6th bit from left,\nhence we return the number itself.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>replaceBit()&nbsp;</strong>which takes the integers N and K as inputs and returns the resultant number after the stated modifications.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(LogN).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=N&lt;=10<sup>6</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number N and an index K, modify the Kth bit (1-based indexing from the left) in the binary representation of N. If the Kth bit is '1', change it to '0'. Otherwise, return N unchanged.",
                "constraints": [
                    "1 <= N <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 13, K = 2",
                        "output": "9",
                        "explanation": "The binary representation of 13 is 1101. The 2nd bit from the left is 1, so we change it to 0, resulting in 1001, which is 9 in decimal."
                    },
                    {
                        "input": "N = 13, K = 6",
                        "output": "13",
                        "explanation": "The binary representation of 13 is 1101. There is no 6th bit from the left, so we return the original number, 13."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">One way is to convert the number into its binary equivalent string, then update the K-th bit accordingly and then converting it back to decimal.</span></p>\n\n<p><span style=\"font-size:18px\">But, using bit manipulation, you can solve it without actually converting to binary.<br />\nThe idea is to first check the number of bits that are present in the number (more formally, the position of the leftmost bit).<br />\nNow, let say we have N = 13, number_of_bits = 4 (as binary of 13 is 1101).<br />\nNow, the K-th bit from left = (number_of_bits - K)th bit from right.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n  public:\r\n    int replaceBit (int n, int k)\r\n    {\r\n        int temp = n;\r\n        int pos = 0; // position of the rightmost set bit\r\n    \r\n        while (temp)\r\n        {\r\n            pos++;\r\n            temp /= 2;\r\n        }\r\n    \r\n        // if the number bits is less than k,\r\n        // then we can't make any changes\r\n        if (pos < k) return n; \r\n    \r\n    \r\n        // checking if the k-th bit is set or not\r\n        if ((n & (1 << (pos - k))) != 0)\r\n        {\r\n            // if it's set, we make it unset and return the result\r\n            return n - (1 << (pos - k));\r\n        }\r\n        // else, we make no change\r\n        return n;\r\n    }\r\n    // Contributed By: Pranay Bansal\r\n\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}