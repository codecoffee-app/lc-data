{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706072,
            "title": "Restrictive Candy Crush",
            "titleSlug": "restrictive-candy-crush--141631",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>s</strong>&nbsp;and an integer <strong>k</strong>, the task is to reduce the string by applying the following operation:<br />\r\nChoose a group of <strong>k</strong>&nbsp;consecutive identical characters and remove them.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">The operation can be performed any number of times until it is no longer possible.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>k = 2\r\ns = &quot;geeksforgeeks&quot;\r\n<strong>Output:</strong>\r\ngksforgks\r\n<strong>Explanation:</strong>\r\nModified String after each step: \r\n<strong>&quot;</strong>g<strong>ee</strong>ksforg<strong>ee</strong>ks&quot; -&gt; &quot;gksforgks&quot;</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>k = 2\r\ns =<strong> &quot;</strong>geegsforgeeeks&quot; \r\n<strong>Output:</strong>\r\nsforgeks\r\n<strong>Explanation:</strong>\r\nModified String after each step:\r\n<strong>&quot;</strong>g<strong>ee</strong>gsforg<strong>eee</strong>ks&quot; -&gt; &quot;<strong>gg</strong>sforgeks&quot; -&gt; &quot;sforgeks&quot;</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task: </strong>&nbsp;<br />\r\nYou don&#39;t need to read input or print anything. Complete the function <strong>Reduced_String()</strong> which takes integer <strong>k</strong> and string&nbsp;<strong>s</strong>&nbsp;as input parameters and returns the reduced string.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|s|)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(|s|)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; |s|&nbsp;&le; 10<sup>5</sup><br />\r\n1&nbsp;&le; k&nbsp;&le; |s|</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` and an integer `k`, reduce the string by repeatedly removing groups of `k` consecutive identical characters until no such groups remain. The goal is to return the final reduced string.",
                "constraints": [
                    "1 <= |s| <= 10^5",
                    "1 <= k <= |s|"
                ],
                "testcases": [
                    {
                        "input": "k = 2\ns = \"geeksforgeeks\"",
                        "output": "gksforgks",
                        "explanation": "The string \"geeksforgeeks\" can be reduced as follows: \"geeksforgeeks\" -> \"gksforgks\""
                    },
                    {
                        "input": "k = 2\ns = \"geegsforgeeeks\"",
                        "output": "sforgeks",
                        "explanation": "The string \"geegsforgeeeks\" can be reduced as follows: \"geegsforgeeeks\" -> \"ggsforgeks\" -> \"sforgeks\""
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use a stack to store the characters, when there are k identical&nbsp;characters, delete them.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n    //Function to get a reduced string by removing consecutive characters.\n    string Reduced_String(int k,string s){\n        if(k == 1){\n            string ans = \"\";\n            return ans;\n        }\n        \n        //Using a stack to store the characters and their frequencies.\n        stack<pair<char,int>> st;\n        string ans=\"\";\n        \n        //Iterating over the string.\n        for(int i=0;i<s.size();i++)\n        {\n            //If the stack is empty, then we push the current character.\n            if(st.empty())\n            {\n                st.push({s[i],1});\n            }\n            //If the current character is equal to the top character\n            //of the stack, then we increment the frequency of the top\n            //character and check if it has reached k. If it has reached k,\n            //then we remove k characters from the stack.\n            else if(st.top().first==s[i]){\n                st.push({s[i],st.top().second+1});\n                if(st.top().second==k){\n                    int x=k;\n                    while(x){\n                        st.pop();\n                        x--;\n                    }\n                }\n            }\n            //If the current character is not equal to the top character\n            //of the stack, then we push the current character with frequency 1.\n            else if(st.top().first!=s[i]){\n                st.push({s[i],1});\n            }\n        }\n        \n        //Getting the reduced string by reversing the characters in the stack.\n        while(!st.empty()){\n            ans+=st.top().first;\n            st.pop();\n        }\n        reverse(ans.begin(),ans.end());\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Pair {\r\n    char c; // Represents a character in the string\r\n    int ctr; // Represents the count of consecutive occurrences of the character\r\n    Pair(char c, int ctr) { // Constructor for Pair class\r\n        this.c = c;\r\n        this.ctr = ctr;\r\n    }\r\n}\r\n\r\nclass Solution {\r\n    public static String reduced_String(int k, String s) {\r\n        if (k == 1) { // If k is 1, return an empty string\r\n            String ans = \"\";\r\n            return ans;\r\n        }\r\n\r\n        Stack<Pair> st = new Stack<Pair>(); // Create a stack to store pairs\r\n        int l = s.length(); // Get the length of the string\r\n        int ctr = 0; // Counter variable\r\n\r\n        for (int i = 0; i < l; i++) { // Iterate through the string\r\n            if (st.size() == 0) { // If stack is empty, push a new pair with character and count of 1\r\n                st.push(new Pair(s.charAt(i), 1));\r\n                continue;\r\n            }\r\n\r\n            if (st.peek().c == s.charAt(i)) { // If top element of stack is equal to current character\r\n                Pair p = st.peek(); // Get the top pair from stack\r\n                st.pop(); // Remove the top pair from stack\r\n                p.ctr += 1; // Increment the count of consecutive occurrences\r\n                \r\n                if (p.ctr == k) { // If count becomes equal to k, skip (do not push back to stack)\r\n                    continue;\r\n                } else { // If count is less than k, push back to stack\r\n                    st.push(p);\r\n                }\r\n            } else { // If top element of stack is not equal to current character, push a new pair with character and count of 1\r\n                st.push(new Pair(s.charAt(i), 1));\r\n            }\r\n        }\r\n\r\n        StringBuilder ans = new StringBuilder(); // Create a StringBuilder to store the final reduced string\r\n        while (st.size() > 0) { // While stack is not empty\r\n            char c = st.peek().c; // Get the character from the top pair of stack\r\n            int cnt = st.peek().ctr; // Get the count of consecutive occurrences from the top pair of stack\r\n            while (cnt-- > 0) { // Append the character to the StringBuilder for the count number of times\r\n                ans.append(String.valueOf(c));\r\n            }\r\n            st.pop(); // Remove the top pair from stack\r\n        }\r\n\r\n        ans.reverse(); // Reverse the StringBuilder\r\n        return ans.toString(); // Convert the StringBuilder to a String and return\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nfrom collections import deque\r\n\r\nclass Solution:\r\n    def Reduced_String(self, k, s):\r\n        if k == 1:\r\n            ret = ''\r\n            return ret\r\n        \r\n        q = deque()\r\n        \r\n        for c in s:\r\n            # entries in deque will consist of a char\r\n            # and an integer representing how many times it is repeating\r\n            if len(q) and q[-1][0]==c:\r\n                q[-1][1] += 1           # incrementing count\r\n                if q[-1][1]==k:\r\n                    q.pop()             # popping if count is k\r\n            else:\r\n                q.append( [c,1] )       # adding new character\r\n        \r\n        ret=''\r\n        while len(q):                   # generating output string\r\n            ret += q[0][0] * q[0][1]\r\n            q.popleft()\r\n        \r\n        return ret\r\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Stack{\n    constructor(){\n        this.arr = []; // Initialize an empty array for the stack.\n    }\n    \n    push(a){\n        this.arr.push(a); // Add the element to the top of the stack.\n    }\n    \n    pop(){\n        this.arr.pop(); // Remove the top element from the stack.\n    }\n    top(){\n        let index = this.arr.length-1; // Get the index of the top element.\n        return this.arr[index]; // Return the top element of the stack.\n    }\n    empty(){\n        if(this.arr.length !== 0)\n            return false; // Return false if the stack is not empty.\n        else\n            return true; // Return true if the stack is empty.\n    }\n}\n\nclass Pair{\n    \n    constructor(first, second)\n    {\n        this.first = first; // Initialize the first value of the pair.\n        this.second = second; // Initialize the second value of the pair.\n    }\n}\nclass Solution{\n    Reduced_String( k, s){\n        if(k === 1){\n            let ans = \"\"; // Initialize an empty string.\n            return ans; // Return the empty string.\n        }\n        // console.log(s);\n        let st = new Stack(); // Create a new stack object.\n        \n        let ans=\"\"; // Initialize an empty string for the final answer.\n        for(let i=0;i<s.length;i++)\n        {\n            if(st.empty())\n            {\n                let p = new Pair(s[i],1); // Create a new pair with the current character and a count of 1.\n                st.push(p); // Push the pair object onto the stack.\n            }\n            else if(st.top().first==s[i]){\n                let p = new Pair(s[i],st.top().second+1); // Create a new pair with the current character and an incremented count.\n                st.push(p); // Push the pair object onto the stack.\n                if(st.top().second==k){\n                    let x=k;\n                    while(x){\n                        st.pop(); // Pop k elements from the stack.\n                        x--;\n                    }\n                }\n            }\n            else if(st.top().first!=s[i]){\n                let p = new Pair(s[i],1); // Create a new pair with the current character and a count of 1.\n                st.push(p); // Push the pair object onto the stack.\n            }\n        }\n        \n        while(!st.empty()){\n            ans+=st.top().first; // Append the first value of the top pair to the answer string.\n            st.pop(); // Pop the top element from the stack.\n        }\n        // console.log(ans)\n        return ans.split(\"\").reverse().join(\"\"); // Reverse the answer string and return it as the final answer.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}