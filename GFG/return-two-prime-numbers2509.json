{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704981,
            "title": "Return two prime numbers",
            "titleSlug": "return-two-prime-numbers2509",
            "content": "<p><span style=\"font-size: 18px;\">Given an even number <strong>n </strong>(greater than 2), return two prime numbers whose sum will be equal to the given number. There are several combinations possible. Print only the pair whose minimum value is the smallest among all the minimum values of pairs and print the minimum element first.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>NOTE:</strong>&nbsp;A solution will always exist,&nbsp;read&nbsp;<a href=\"https://en.wikipedia.org/wiki/Goldbach%27s_conjecture\" rel=\"nofollow\">Goldbach's conjecture</a>.</span><span style=\"font-size: 18px;\">&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 74\n<strong>Output:</strong> 3 71\n<strong>Explaination:</strong> There are several possibilities \nlike 37 37. But the minimum value of this pair \nis 3 which is smallest among all possible \nminimum values of all the pairs.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 4\n<strong>Output:</strong> 2 2\n<strong>Explaination:</strong> This is the only possible \nprtitioning of 4.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>primeDivision()</strong> which takes n as input parameter and returns the partition satisfying the condition.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N*log(logN))<br /><strong>Expected Auxiliary Space: </strong>O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />4 &le; n &le; 10<sup>4</sup>&nbsp;&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The effective runtime speed of your code depends on the way you&#39;re generating the prime numbers. Do you know&nbsp;an optimized way to do so?<br />\nRemember that your code runs for multiple test cases.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            }
        ],
        "companies": [
            "zoho",
            "yahoo"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find two prime numbers that sum up to given N\n    vector<int> primeDivision(int N) {\n        // Create a vector to store whether each number is prime or not\n        vector<bool> isPrime(N + 1, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n\n        // Sieve of Eratosthenes algorithm to find prime numbers\n        for (int i = 2; i <= N; i++) {\n            if (!isPrime[i])\n                continue;\n\n            if (i > N / i)\n                break;\n\n            for (int j = i * i; j <= N; j += i)\n                isPrime[j] = false;\n        }\n\n        // Check for two prime numbers that sum up to N\n        for (int i = 2; i <= N; ++i) {\n            if (isPrime[i] && isPrime[N - i]) {\n                // Create a vector to store the prime numbers\n                vector<int> ans;\n                ans.push_back(i);\n                ans.push_back(N - i);\n                return ans;\n            }\n        }\n        // Return an empty vector if no two prime numbers are found\n        vector<int> ans;\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find two prime numbers that sum up to given N\n    public ArrayList<Integer> primeDivision(int N) {\n        // Create an array to store whether each number is prime or not\n        boolean[] isPrime = new boolean[N + 1];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n\n        // Sieve of Eratosthenes algorithm to find prime numbers\n        for (int i = 2; i <= N; i++) {\n            if (!isPrime[i]) continue;\n\n            if (i > N / i) break;\n\n            for (int j = i * i; j <= N; j += i) isPrime[j] = false;\n        }\n\n        // Check for two prime numbers that sum up to N\n        for (int i = 2; i <= N; ++i) {\n            if (isPrime[i] && isPrime[N - i]) {\n                // Create a list to store the prime numbers\n                ArrayList<Integer> ans = new ArrayList<>();\n                ans.add(i);\n                ans.add(N - i);\n                return ans;\n            }\n        }\n        // Return an empty list if no two prime numbers are found\n        return new ArrayList<>();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def primeDivision(self, N):\n        # code here\n        prime = [True for i in range(N + 1)]\n        p = 2\n        while (p * p <= N):\n\n            # If prime[p] is not\n            # changed, then it is a prime\n            if (prime[p] == True):\n\n                # Update all multiples of p\n                for i in range(p * p, N + 1, p):\n                    prime[i] = False\n            p += 1\n        for i in range(2, N):\n            if prime[i] and prime[N - i]:\n                return [i, N - i]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to perform prime division of N.\n    public List<int> primeDivision(int N)\n    {\n        // Create a list to store whether each number is prime or not\n        List<bool> isPrime = new List<bool>(N + 1);\n        for (int i = 0; i <= N; i++)\n        {\n            isPrime.Add(true);\n        }\n        isPrime[0] = false;\n        isPrime[1] = false;\n\n        // Sieve of Eratosthenes algorithm to find prime numbers\n        for (int i = 2; i <= N; i++)\n        {\n            if (!isPrime[i])\n                continue;\n\n            if (i > N / i)\n                break;\n\n            for (int j = i * i; j <= N; j += i)\n                isPrime[j] = false;\n        }\n\n        // Check for two prime numbers that sum up to N\n        for (int i = 2; i <= N; ++i)\n        {\n            if (isPrime[i] && isPrime[N - i])\n            {\n                // Create a list to store the prime numbers\n                List<int> ans = new List<int>();\n                ans.Add(i);\n                ans.Add(N - i);\n                return ans;\n            }\n        }\n        // Return an empty list if no two prime numbers are found\n        List<int> emptyList = new List<int>();\n        return emptyList;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    primeDivision(N) {  // Function to find the prime division of N\n        let isPrime = new Array(N + 1);  // Create a boolean array to store whether a number is prime or not\n        for (let i = 0; i <= N; i++) {  // Initialize the array with true values for all indices\n            isPrime[i] = true;\n        }\n        isPrime[0] = false;  // 0 is not a prime number\n        isPrime[1] = false;  // 1 is not a prime number\n        for (let i = 2; i <= N; i++) {  // Loop from 2 to N to find all prime numbers\n            if (!isPrime[i])  // If the current number is not prime, skip it\n                continue;\n            if (i > N / i)  // If the square of the current number is greater than N, break the loop\n                break;\n            for (let j = i * i; j <= N; j += i)  // Mark all multiples of the current number as not prime\n                isPrime[j] = false;\n        }\n        for (let i = 2; i <= N; ++i) {  // Loop from 2 to N to find two prime numbers whose sum is N\n            if (isPrime[i] && isPrime[N - i]) {  // If both i and (N - i) are prime numbers\n                let ans = [];  // Create an empty array to store the result\n                ans.push(i);  // Add i to the array\n                ans.push(N - i);  // Add (N - i) to the array\n                return ans;  // Return the array as the result\n            }\n        }\n        \n        return ans;  // Return an empty array if no prime division is found\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}