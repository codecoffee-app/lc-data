{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703388,
            "title": "Rotating an Array",
            "titleSlug": "reversal-algorithm5340",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>. The task is to rotate the array by <strong>d</strong> elements where d&nbsp;</span><span style=\"font-size: 18px;\">&le;</span><span style=\"font-size: 18px;\"> arr.size</span><span style=\"font-size: 18px;\">.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-1, -2, -3, 4, 5, 6, 7], d = 2\n<strong>Output:</strong> [-3, 4, 5, 6, 7, -1, -2]\n<strong>Explanation:</strong> <br />Rotate by 1: [-2, -3, 4, 5, 6, 7, -1]<br />Rotate by 2: [-3, 4, 5, 6, 7, -1, -2]</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 3, 4, 2], d = 3 <br /></span><span style=\"font-size: 18px;\"><strong>Output:</strong> [2, 1, 3, 4]<br /><strong>Explanation: </strong>After rotating the array three times, the first three elements shift one by one to the right.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size &le; 10<sup>6</sup><br />-10<sup>9</sup> &le; arr[i] &le; 10<sup>9</sup><br />0 &le; d &le; arr.size</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of size `n`, rotate the array to the left by `d` elements, where `0 <= d <= n`.",
                "constraints": [
                    "1 <= arr.size <= 10^6",
                    "-10^9 <= arr[i] <= 10^9",
                    "0 <= d <= arr.size"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [-1, -2, -3, 4, 5, 6, 7], d = 2",
                        "output": "[-3, 4, 5, 6, 7, -1, -2]",
                        "explanation": "After rotating the array by 2 positions to the left, the first two elements (-1 and -2) are moved to the end of the array."
                    },
                    {
                        "input": "arr[] = [1, 3, 4, 2], d = 3",
                        "output": "[2, 1, 3, 4]",
                        "explanation": "After rotating the array by 3 positions to the left, the first three elements (1, 3 and 4) are moved to the end of the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use array slicing to rearrange the elements efficiently.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "codenation"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Function to reverse arr[] from index start to end\nvoid reverseArray(int arr[], int start, int end) {\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\n// Function to left rotate arr[] of size n by d\nvoid leftRotate(int arr[], int d, int n) {\n    if (d == 0 || n == 0)\n        return;\n\n    // Step 1: Reverse the first d elements\n    reverseArray(arr, 0, d - 1);\n\n    // Step 2: Reverse the remaining n - d elements\n    reverseArray(arr, d, n - 1);\n\n    // Step 3: Reverse the entire array\n    reverseArray(arr, 0, n - 1);\n}\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to reverse arr[] from index start to end\n    void reverseArray(vector<int>& arr, int start, int end) {\n        while (start < end) {\n            int temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n\n    // Function to left rotate arr[] of size n by d\n    void leftRotate(vector<int>& arr, int d) {\n        int n = arr.size();\n        if (d == 0 || n == 0)\n            return;\n        reverseArray(arr, 0, d - 1);\n        reverseArray(arr, d, n - 1);\n        reverseArray(arr, 0, n - 1);\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to reverse arr[] from index start to end\n    void reverseArray(int[] arr, int start, int end) {\n        while (start < end) {\n            int temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n\n    // Function to left rotate arr[] of size n by d\n    void leftRotate(int arr[], int d) {\n        int n = arr.length;\n        if (d == 0 || n == 0) return;\n        reverseArray(arr, 0, d - 1);\n        reverseArray(arr, d, n - 1);\n        reverseArray(arr, 0, n - 1);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to reverse arr[] from index start to end\n    def reverseArray(self, arr, start, end):\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    # Function to left rotate arr[] of size n by d\n    def leftRotate(self, arr, d):\n        n = len(arr)\n        if d == 0 or n == 0:\n            return\n        d = d % n  # In case d is larger than n\n        self.reverseArray(arr, 0, d - 1)\n        self.reverseArray(arr, d, n - 1)\n        self.reverseArray(arr, 0, n - 1)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    leftRotate(arr, d) {\n        let n = arr.length;\n        if (d === 0 || n === 0) return;\n        d = d % n; // In case d is larger than n\n        this.reverseArray(arr, 0, d - 1);\n        this.reverseArray(arr, d, n - 1);\n        this.reverseArray(arr, 0, n - 1);\n    }\n\n    reverseArray(arr, start, end) {\n        while (start < end) {\n            let temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}