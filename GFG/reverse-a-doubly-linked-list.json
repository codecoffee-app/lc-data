{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700137,
            "title": "Reverse a Doubly Linked List",
            "titleSlug": "reverse-a-doubly-linked-list",
            "content": "<p><span >Given a <strong>doubly linked list</strong>. Your task is to <strong>reverse </strong>the doubly linked list and return its head.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList: 3 &lt;-&gt; 4 &lt;-&gt; 5\n<strong>Output: </strong>5 &lt;-&gt; 4 &lt;-&gt; 3<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700137/Web/Other/blobid1_1724317926.png\" width=\"331\" height=\"198\" /><br /></span></pre>\n<pre><span ><strong>Input: </strong>LinkedList: 75 &lt;-&gt; 122 &lt;-&gt; 59 &lt;-&gt; 196\n<strong>Output: </strong>196 &lt;-&gt; 59 &lt;-&gt; 122 &lt;-&gt; 75<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700137/Web/Other/blobid0_1724317913.png\" width=\"392\" height=\"235\" /><br /></span></pre>\n<p><span ><strong>Expected Time Complexity:&nbsp;</strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>6</sup><br />0 &lt;= node-&gt;data &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Reverse a given doubly linked list and return the head of the reversed list. The reversal should be done in-place.",
                "constraints": [
                    "1 <= number of nodes <= 10^6",
                    "0 <= node->data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "3 <-> 4 <-> 5",
                        "output": "5 <-> 4 <-> 3",
                        "explanation": "The doubly linked list 3 <-> 4 <-> 5, when reversed, becomes 5 <-> 4 <-> 3."
                    },
                    {
                        "input": "75 <-> 122 <-> 59 <-> 196",
                        "output": "196 <-> 59 <-> 122 <-> 75",
                        "explanation": "The doubly linked list 75 <-> 122 <-> 59 <-> 196, when reversed, becomes 196 <-> 59 <-> 122 <-> 75."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Traverse the linked list and swap the previous and the next pointer.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "de-shaw",
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to reverse a doubly linked list\n    DLLNode* reverseDLL(DLLNode* head) {\n        // If the list is empty or has only one node, return the head\n        if (head == NULL || head->next == NULL)\n            return head;\n\n        DLLNode *prev = NULL, *curr = head;\n\n        // Traverse through the list and swap the previous and next pointers\n        while (curr != NULL) {\n            // Store the previous node\n            prev = curr->prev;\n\n            // Set the previous pointer to the next node\n            curr->prev = curr->next;\n\n            // Set the next pointer to the previous node\n            curr->next = prev;\n\n            // Move to the next node (which is previous in original list)\n            curr = curr->prev;\n        }\n\n        // Return the new head of the reversed list\n        return prev->prev;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Function to reverse a doubly linked list\nclass Solution {\n    public DLLNode reverseDLL(DLLNode head) {\n        // Checking if head is null or head.next is null\n        // If true, return the head itself as there is no need to reverse a list\n        // with 0 or 1 node\n        if (head == null || head.next == null) return head;\n\n        // Declaring a current and previous node\n        DLLNode curr = head, prev = null;\n\n        // Looping through the list\n        while (curr != null) {\n            // Storing the previous node in prev\n            prev = curr.prev;\n\n            // Swapping the prev and next pointers of the current node\n            curr.prev = curr.next;\n            curr.next = prev;\n\n            // Moving the current node to its previous node\n            curr = curr.prev;\n        }\n\n        // Returning the previous node of head as the new head (the last node after\n        // reversing the list)\n        return prev.prev;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# Back-end complete function template for Python 3\nclass Solution:\n\n    def reverseDLL(self, head):\n        # Initialize a temporary pointer to store previous node\n        temp = None\n        current = head\n\n        # Traverse the list and reverse the pointers\n        while current is not None:\n            # Store the previous node in temp\n            temp = current.prev\n            # Swap the previous and next pointers of the current node\n            current.prev = current.next\n            current.next = temp\n            # Move to the next node (which is the previous node before swapping)\n            current = current.prev\n\n        # After the loop, temp points to the last node before null\n        # Set the new head to the last non-null node\n        if temp is not None:\n            head = temp.prev\n\n        return head\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for JavaScript\n\nclass Solution {\n    reverseDLL(head) {\n        // If the list is empty or has only one node, return the head\n        if (head === null || head.next === null) {\n            return head;\n        }\n\n        // Initialize pointers to track current and previous nodes\n        let curr = head;\n        let prev = null;\n\n        // Loop until the current node is null\n        while (curr !== null) {\n            // Store the previous node\n            prev = curr.prev;\n\n            // Make the previous pointer of the current node point to the next node\n            curr.prev = curr.next;\n\n            // Make the next pointer of the current node point to the previous node\n            curr.next = prev;\n\n            // Move to the next node (which is actually the previous node due to\n            // swapping)\n            curr = curr.prev;\n        }\n\n        // Return the new head of the reversed list (prev points to the last node after\n        // reversal)\n        return prev.prev;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}