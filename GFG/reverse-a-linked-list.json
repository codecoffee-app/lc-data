{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700005,
            "title": "Reverse a linked list",
            "titleSlug": "reverse-a-linked-list",
            "content": "<p><span >Given the <strong>head</strong> of a linked list, the task is to reverse this list and return the <strong>reversed</strong> <strong>head</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>head: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; NULL\n<strong>Output: </strong>head: 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; NULL<strong>\nExplanation:<br /></strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700005/Web/Other/blobid0_1736947674.png\" alt=\"\" width=\"387\" height=\"200\" /></span></pre>\n<pre><span ><strong>Input: </strong>head: 2 -&gt; 7 -&gt; 10 -&gt; 9 -&gt; 8 -&gt; NULL\n<strong>Output: </strong>head: 8 -&gt; 9 -&gt; 10 -&gt; 7 -&gt; 2 -&gt; NULL</span><br /><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:<br /></strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700005/Web/Other/blobid1_1736947674.png\" alt=\"\" width=\"449\" height=\"195\" /></span></pre>\n<pre><span ><strong>Input:</strong> head: 2 -&gt; NULL\n<strong>Output: </strong>2 -&gt; NULL<strong>\nExplanation:<br /></strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700005/Web/Other/blobid2_1736947674.png\" alt=\"\" width=\"292\" height=\"189\" />\n</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes, data of nodes &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a singly linked list, reverse the list and return the reversed head.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= data of nodes <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "1 -> 2 -> 3 -> 4 -> NULL",
                        "output": "4 -> 3 -> 2 -> 1 -> NULL",
                        "explanation": "The original list is reversed such that the last node becomes the head, and the order of all nodes is inverted."
                    },
                    {
                        "input": "2 -> 7 -> 10 -> 9 -> 8 -> NULL",
                        "output": "8 -> 9 -> 10 -> 7 -> 2 -> NULL",
                        "explanation": "The original list is reversed, resulting in the nodes being in the opposite order."
                    },
                    {
                        "input": "2 -> NULL",
                        "output": "2 -> NULL",
                        "explanation": "A list with only one node remains unchanged after reversal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use three pointers (prev, current, next) to reverse the links while traversing the list.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "vmware",
            "zoho",
            "accolite",
            "amazon",
            "microsoft",
            "samsung",
            "snapdeal",
            "de-shaw",
            "makemytrip",
            "teradata",
            "walmart",
            "goldman-sachs",
            "intuit",
            "adobe",
            "sap",
            "tejas-network",
            "cisco",
            "qualcomm",
            "cognizant",
            "mahindra-comviva",
            "igniteworld"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Full function Template for C++\n\n/* Linked List Node structure:\n\nstruct Node\n{\n    int data;\n    struct Node *next;\n}\n\n*/\n\nclass Solution {\n  public:\n    // Function to reverse a linked list.\n    Node *reverseList(Node *head) {\n        if (head == NULL)\n            return NULL;\n\n        // taking three pointers to store the current, previous and next nodes.\n        Node *prev = NULL;\n        Node *current = head;\n        Node *next = current->next;\n\n        while (current != NULL) {\n            // taking the next node as next.\n            next = current->next;\n\n            // storing the previous node in link part of current node.\n            current->next = prev;\n\n            // updating prev from previous node to current node.\n            prev = current;\n\n            // updating current node to next node.\n            current = next;\n        }\n\n        return prev;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Full function Template for Java\n\n/* linked list node class:\n\nclass Node {\n    int data;\n    Node next;\n    Node(int value) {\n        this.value = value;\n    }\n}\n\n*/\n\nclass Solution {\n    // Function to reverse a linked list.\n    Node reverseList(Node head) {\n        if (head == null) return null;\n\n        // taking three pointers to store the current, previous and next nodes.\n        Node prev = null;\n        Node current = head;\n        Node next = current.next;\n\n        while (current != null) {\n            // taking the next node as next.\n            next = current.next;\n\n            // storing the previous node in link part of current node.\n            current.next = prev;\n\n            // updating prev from previous node to current node.\n            prev = current;\n\n            // updating current node to next node.\n            current = next;\n        }\n\n        return prev;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Full function Template for Python 3\n\n\nclass Solution:\n    #Function to reverse a linked list.\n    def reverseList(self, head):\n        if head is None:\n            return None\n\n        #taking three pointers to store the current, previous and next nodes.\n        prev = None\n        current = head\n        next = current.next\n\n        while current is not None:\n            #taking the next node as next.\n            next = current.next\n\n            #storing the previous node in link part of current node.\n            current.next = prev\n\n            #updating prev from previous node to current node.\n            prev = current\n\n            #updating current node to next node.\n            current = next\n\n        return prev\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} head\n * @returns {Node}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to reverse a linked list.\n    reverseList(head) {\n        if (head === null) return null;\n\n        // taking three pointers to store the current, previous and next nodes.\n        let prev = null;\n        let current = head;\n        let next = current.next;\n\n        while (current != null) {\n            // taking the next node as next.\n            next = current.next;\n\n            // storing the previous node in link part of current node.\n            current.next = prev;\n\n            // updating prev from previous node to current node.\n            prev = current;\n\n            // updating current node to next node.\n            current = next;\n        }\n        return prev;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}