{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709919,
            "title": "Reverse a Stack",
            "titleSlug": "reverse-a-stack",
            "content": "<p><span style=\"font-size: 18px;\">You are given a stack <strong>St</strong>. You have to reverse the stack using recursion.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">St = {3,2,1,7,6}</span>\n<strong><span style=\"font-size: 18px;\">Output:</span></strong>\n<span style=\"font-size: 18px;\">{6,7,1,2,3}<br /><strong>Explanation:</strong><br />Input stack after reversing will look like the stack in the output.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">St = {4,3,9,6}</span>\n<strong><span style=\"font-size: 18px;\">Output:</span></strong>\n<span style=\"font-size: 18px;\">{6,9,3,4}<br /><strong style=\"font-family: sans-serif;\">Explanation:<br /></strong>Input stack after reversing will look like the stack in the output.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span></p>\n<p><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function <strong>Reverse()</strong>&nbsp;which takes the stack&nbsp;<strong>St</strong><strong>&nbsp;</strong>as input and reverses the given stack.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(</span><span style=\"font-size: 18px;\">N</span><sup>2</sup><span style=\"font-size: 18px;\">)<br /></span><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= size of the stack &lt;= 10<sup>4</sup></span><br /><span style=\"font-size: 18px;\">-10</span><sup>9</sup><span style=\"font-size: 18px;\"> &lt;= Each element of the stack &lt;= 10</span><sup>9</sup><br /><span style=\"font-size: 18px;\">Sum of N over all test cases doesn't exceeds 10</span><sup>6</sup><br /><span style=\"font-size: 18px;\">Array may contain duplicate elements.&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a stack, `St`. Reverse the stack using recursion.",
                "constraints": [
                    "1 <= size of the stack <= 10^4",
                    "-10^9 <= Each element of the stack <= 10^9",
                    "Sum of N over all test cases doesn't exceed 10^6",
                    "The stack may contain duplicate elements."
                ],
                "testcases": [
                    {
                        "input": "{3,2,1,7,6}",
                        "output": "{6,7,1,2,3}",
                        "explanation": "The stack after reversing the order of elements is {6,7,1,2,3}."
                    },
                    {
                        "input": "{4,3,9,6}",
                        "output": "{6,9,3,4}",
                        "explanation": "The stack after reversing the order of elements is {6,9,3,4}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Can we use tail recursion to clear the stack first and inset elements one by one?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to insert an element at the bottom of stack.\n    void insert_at_bottom(stack<int> &St,int x){\n        //if stack is empty, push the element to stack.\n        if(St.size()==0){\n            St.push(x);\n        }\n        else{\n            //else if stack is not empty, remove the top element\n            //and recursively call the function to insert the element at bottom.\n            int y=St.top();\n            St.pop();\n            insert_at_bottom(St,x);\n            //push the removed element back to the stack.\n            St.push(y);\n        }\n    }\n    \n    //Function to reverse the stack using recursion.\n    void fun(stack<int> &St){\n        //if stack is not empty,\n        if(St.size()>0){\n            //remove the top element,\n            int x=St.top();\n            St.pop();\n            //recursively call the function to reverse the remaining stack.\n            fun(St);\n            //insert the removed element at the bottom of the reversed stack.\n            insert_at_bottom(St,x);\n        }\n    }\n    \n    //Function to reverse the given stack.\n    void Reverse(stack<int> &St){\n        //calling the recursive function to reverse the stack.\n        fun(St);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    static void insert_at_bottom(Stack<Integer> s, int x){\n        // if stack is empty, add the element at the bottom\n        if(s.size()==0){\n            s.add(x);\n        }\n        else{\n            // store the top element of the stack\n            int y= s.peek();\n            // remove the top element\n            s.pop();\n            // recursively insert the element at the bottom\n            insert_at_bottom(s, x);\n            // add the stored element back to the stack\n            s.add(y);\n        }\n    }\n    static void fun(Stack<Integer> s){\n        // if stack is not empty\n        if(s.size()>0){\n            // store the top element of the stack\n            int x=s.peek();\n            // remove the top element\n            s.pop();\n            // recursively reverse the remaining elements in the stack\n            fun(s);\n            // insert the stored element at the bottom of the reversed stack\n            insert_at_bottom(s, x);\n        }\n    }\n    static void reverse(Stack<Integer> s)\n    {\n        // reverse the given stack\n        fun(s);\n    }\n\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nclass Solution:\n    \n    #Function to insert element at the bottom of the stack.\n    def insert_at_bottom(self, St: List[int], x: int) -> None:\n        if len(St) == 0:\n            St.append(x)\n        else:\n            y = St.pop()\n            self.insert_at_bottom(St, x)\n            St.append(y)\n\n    #Recursive function to reverse the stack.\n    def fun(self, St: List[int]) -> None:\n        if len(St) > 0:\n            x = St.pop()\n            self.fun(St)\n            self.insert_at_bottom(St, x)\n\n    #Main function to reverse the stack.\n    def reverse(self, St: List[int]) -> None:\n        self.fun(St)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {List} St\n * @returns {List}\n*/\n\nclass Solution {\n    //Function to insert element at the bottom of the stack.\n    insert_at_bottom(St, x) {\n        if (St.length === 0) {\n            St.push(x);\n        }\n        else {\n            let y = St.pop();\n            this.insert_at_bottom(St, x);\n            St.push(y);\n        }\n    }\n\n    //Recursive function to reverse the stack.\n    fun(St) {\n        if (St.length > 0) {\n            let x = St.pop();\n            this.fun(St);\n            this.insert_at_bottom(St, x);\n        }\n    }\n\n    //Main function to reverse the stack.\n    reverse(St) {\n        this.fun(St);\n        return St;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}