{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700206,
            "title": "Reverse alternate levels of a perfect binary tree",
            "titleSlug": "reverse-alternate-levels-of-a-perfect-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a complete binary tree, reverse the nodes present at alternate levels.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [1, 3, 2]\n\\t\\t 1\n\\t     /   \\\n\\t    3     2</span>\n<strong><span style=\"font-size: 18px;\">Output:</span></strong>\n<span style=\"font-size: 18px;\">\\t\\t 1\n\\t     /   \\\n\\t    2     3</span>\n\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Nodes at level 2 are reversed.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [1, 2, 3, 42, 51, 63, 72\n\\t\\t  1\n\\t     /     \\\n\\t   2\\t  3\n\\t /  \\\\t/     \\\n     42   51   63   72</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n\\t\\t  1\n\\t     /     \\\n\\t   3\\t  2\n\\t /  \\\\t/     \\\n     42   51   63   72</span>\n\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Nodes at level 2 are reversed. Level 1 and 3 remain as it is.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [1, 3, 4]\n\\t\\t 1\n\\t     /   \\\n\\t    3     4</span>\n<strong><span style=\"font-size: 18px;\">Output:</span></strong>\n<span style=\"font-size: 18px;\">\\t\\t 1\n\\t     /   \\\n\\t    4     3</span>\n\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Nodes at level 2 are reversed.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> If you click on Compile and Test the output will be the in-order traversal of the modified tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>5</sup><br />1 &le; nodes-&gt;data &le; 10<sup>5</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use a recursive approach to swap the values of corresponding nodes at alternate levels between the left and right subtrees.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "hike"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void preorder(struct Node *root1, struct Node *root2, int lvl) {\n        // Base cases\n        if (root1 == NULL || root2 == NULL)\n            return;\n\n        // Swap subtrees if level is even\n        if (lvl % 2 == 0)\n            swap(root1->data, root2->data);\n\n        // Recur for left and right subtrees (Note : left of root1\n        // is passed and right of root2 in first call and opposite\n        // in second call.\n        preorder(root1->left, root2->right, lvl + 1);\n        preorder(root1->right, root2->left, lvl + 1);\n    }\n\n    // This function calls preorder() for left and right children\n    // of root\n    void reverseAlternate(struct Node *root) { preorder(root->left, root->right, 0); }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static void preorder(Node root1, Node root2, int lvl) {\n        // Base cases\n        if (root1 == null || root2 == null) return;\n\n        // Swap subtrees if level is even\n        if (lvl % 2 == 0) {\n            int t = root1.data;\n            root1.data = root2.data;\n            root2.data = t;\n        }\n\n        // Recur for left and right subtrees (Note : left of root1\n        // is passed and right of root2 in first call and opposite\n        // in second call.\n        preorder(root1.left, root2.right, lvl + 1);\n        preorder(root1.right, root2.left, lvl + 1);\n    }\n\n    // This function calls preorder() for left and right children\n    // of root\n    static void reverseAlternate(Node root) { preorder(root.left, root.right, 0); }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def preorder(self, root1, root2, lvl):\n        # Base cases\n        if root1 is None or root2 is None:\n            return\n\n        # Swap subtrees if level is even\n        if lvl % 2 == 0:\n            t = root1.data\n            root1.data = root2.data\n            root2.data = t\n\n        # Recur for left and right subtrees\n        # (left of root1 is passed with right of root2 and vice versa)\n        self.preorder(root1.left, root2.right, lvl + 1)\n        self.preorder(root1.right, root2.left, lvl + 1)\n\n    # This function calls preorder for left and right children of root\n    def reverseAlternate(self, root):\n        self.preorder(root.left, root.right, 0)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\n//User function Template for \n\n/*\nclass Node\n{\n    constructor(x){\n        this.data=x;\n        this.left=null;\n        this.right=null;\n    }\n}\n*/\n\nclass Solution {\n    preorder(root1, root2, lvl){\n        // Base cases \n        if (root1 == null || root2 == null) \n            return; \n  \n        // Swap subtrees if level is even \n        if (lvl % 2 == 0) {\n            let temp = root1.data;\n            root1.data = root2.data;\n            root2.data = temp;\n        }\n  \n        // Recur for left and right subtrees\n        this.preorder(root1.left, root2.right, lvl+1); \n        this.preorder(root1.right, root2.left, lvl+1); \n    }\n\n    reverseAlternate(root){\n        if(root == null)\n            return;\n        this.preorder(root.left,root.right, 0);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}