{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701191,
            "title": "Reverse array in groups",
            "titleSlug": "reverse-array-in-groups0255",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr </strong>of positive integers. Reverse every sub-array group of size <strong>k.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><em>Note: </em>If at any instance, k is greater or equal to the array size, then reverse the entire array. You shouldn't return any array, modify the given array in place.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5], k = 3<br /><strong>Output:</strong> [3, 2, 1, 5, 4]<strong>\nExplanation: </strong>First group consists of elements 1, 2, 3. Second group consists of 4,5.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 6, 8, 9], k = 5<br /><strong>Output: </strong>[9, 8, 6, 5]<br /><strong>Explnation: </strong>Since k is greater than array size, the entire array is reversed.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size(), k &le; 10<sup>7</sup><br />1 &le; arr[i] &le; 10<sup>18</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of positive integers, reverse every sub-array group of size `k`. If at any point, `k` is greater than or equal to the array size, reverse the entire array. Modify the given array in-place; do not return a new array.",
                "constraints": [
                    "1 <= arr.size(), k <= 10^7",
                    "1 <= arr[i] <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 3, 4, 5], k = 3",
                        "output": "[3, 2, 1, 5, 4]",
                        "explanation": "The first group [1, 2, 3] is reversed to [3, 2, 1]. The second group [4, 5] is reversed to [5, 4]."
                    },
                    {
                        "input": "arr[] = [5, 6, 8, 9], k = 5",
                        "output": "[9, 8, 6, 5]",
                        "explanation": "Since k (5) is greater than the array size (4), the entire array [5, 6, 8, 9] is reversed to [9, 8, 6, 5]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Iterate in steps of k reversing each sub-array from i to min(i+k,n).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to reverse every sub-array group of size k.\n    void reverseInGroups(vector<int>& arr, int k) {\n        int n = arr.size();\n        for (int i = 0; i < n; i += k) {\n            // Determine the end point for the current sub-array.\n            int end = min(i + k, n);\n            // Reverse the sub-array from arr[i] to arr[end - 1].\n            reverse(arr.begin() + i, arr.begin() + end);\n        }\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to reverse any part of the array.\n    void reverse(ArrayList<Long> arr, int left, int right) {\n        // reversing the sub-array from left index to right index.\n        while (left < right) {\n            // swapping values at index stored at left and right index.\n            Long temp = arr.get(left);\n            arr.set(left, arr.get(right));\n            arr.set(right, temp);\n\n            // updating values of left and right index.\n            left += 1;\n            right -= 1;\n        }\n    }\n\n    // Function to reverse every sub-array group of size k.\n    void reverseInGroups(ArrayList<Long> arr, int k) {\n        int n = arr.size();\n        for (int i = 0; i < n; i += k) {\n\n            // If (ith index +k) is less than total number of elements it means\n            // k elements exist from current index so we reverse k elements\n            // starting from current index.\n            if (i + k < n) {\n                // reverse function called to reverse any part of the array.\n                reverse(arr, i, i + k - 1);\n            }\n            // Else k elements from current index doesn't exist.\n            // In that case we just reverse the remaining elements.\n            else {\n                // reverse function called to reverse any part of the array.\n                reverse(arr, i, n - 1);\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function template for Python\n\n\nclass Solution:\n    # Function to reverse every sub-array group of size k.\n    def reverseInGroups(self, arr, k):\n        n = len(arr)\n        for i in range(0, n, k):\n            if i + k < n:\n                arr[i:i + k] = reversed(arr[i:i + k])\n            else:\n                arr[i:n] = reversed(arr[i:n])\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n    * @param number[] arr\n    * @param number k\n\n    * @returns none\n    */\n    reverseInGroups(arr, k) {\n        // code here\n        let n = arr.length;\n        for (let i = 0; i < n; i += k) {\n            let left = i;\n            let right = Math.min(i + k - 1, n - 1);\n\n            while (left < right) {\n                let temp = arr[left];\n                arr[left] = arr[right];\n                arr[right] = temp;\n                left++;\n                right--;\n            }\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}