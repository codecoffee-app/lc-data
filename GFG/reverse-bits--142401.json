{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876478,
            "title": "Reverse Bits",
            "titleSlug": "reverse-bits--142401",
            "content": "<p><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; text-align: justify;\">Reverse bits of a given 32 bits integer.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">n = 00000010100101000110000010000000</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>00000001000001100010100101000000<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">The input number 00000010100101000110000010000000 after reversing the binary form, we get 00000001000001100010100101000000 in binary.</span></pre>\n<pre><span ><strong>Input: </strong>n = 01101010101010101010101010101010\n<strong>Output: </strong>01010101010101010101010101010110<strong>\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">The input number 01101010101010101010101010101010 after reversing the binary form, we get 01010101010101010101010101010110 in binary.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>0 &lt;= n &lt;= 2147483647</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 32-bit integer, reverse the order of its bits.",
                "constraints": [
                    "0 <= n <= 2147483647"
                ],
                "testcases": [
                    {
                        "input": "00000010100101000110000010000000",
                        "output": "00000001000001100010100101000000",
                        "explanation": "Reversing the bits of the input `00000010100101000110000010000000` results in `00000001000001100010100101000000`."
                    },
                    {
                        "input": "01101010101010101010101010101010",
                        "output": "01010101010101010101010101010110",
                        "explanation": "Reversing the bits of the input `01101010101010101010101010101010` results in `01010101010101010101010101010110`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use bitwise operations to shift and reverse the bits one by one, starting from the least significant bit to the most significant bit.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    int reverseBits(int n) {\n        int ans = 0, power = 31;\n        while (power >= 0) {\n            ans |= (n & 1) << power;\n            n = n >> 1;\n            power--;\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    int reverseBits(int n) {\n        int ans = 0, power = 31;\n        while (power >= 0) {\n            ans |= (n & 1) << power;\n            n = n >> 1;\n            power--;\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    #Complete the below function\n    def reverseBits(self, n):\n        res = 0\n        for i in range(32):\n            res <<= 1\n            res |= n & 1\n            n >>= 1\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {number} n\n * @return {number}\n */\nclass Solution {\n    reverseBits(n) {\n        let res = 0;\n        for (let i = 0; i < 32; i++) {\n            res <<= 1;\n            if (n & 1) res++;\n            n >>= 1;\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}