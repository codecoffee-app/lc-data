{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706210,
            "title": "Reverse Bits",
            "titleSlug": "reverse-bits-1611130171",
            "content": "<div><span style=\"font-size:18px\">Given a non-negative integer&nbsp;<strong>n</strong>. Reverse the bits of&nbsp;<strong>n</strong>&nbsp;and print the number obtained after reversing the bits. </span></div>\n\n<div><span style=\"font-size:18px\"><strong>Note:</strong>&nbsp; The actual binary representation of the number is being considered for reversing the bits, no leading 0&rsquo;s are being considered.</span></div>\n\n<div>&nbsp;</div>\n\n<div><strong><span style=\"font-size:18px\">Example 1:</span></strong></div>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input : </strong>\nN = 11\n<strong>Output:</strong>\n13\n<strong>Explanation:</strong>\n(11)<sub>10</sub> = (1011)<sub>2</sub>.\nAfter reversing the bits we get:\n(1101)<sub>2</sub> = (13)<sub>10</sub>.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input : </strong>\nN = 10\n<strong>Output:</strong>\n5\n<strong>Explanation:</strong>\n(10)<sub>10</sub> = (1010)<sub>2</sub>.\nAfter reversing the bits we get:\n(0101)<sub>2</sub> = (101)<sub>2</sub>\n\\t  = (5)<sub>10</sub>.</span></pre>\n\n<div><strong><span style=\"font-size:18px\">Your task:</span></strong></div>\n\n<div><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function reverseBits() which takes an integer N as input and returns the number obtained after reversing bits.</span></div>\n\n<div>&nbsp;</div>\n\n<div><span style=\"font-size:18px\"><strong>Expected Time Complexity :</strong> O(number of bits in the binary representation of N)</span></div>\n\n<div><span style=\"font-size:18px\"><strong>Expected Auxiliary Space :</strong>&nbsp; O(1)</span></div>\n\n<div>&nbsp;</div>\n\n<div><span style=\"font-size:18px\"><strong>Constraints :</strong></span></div>\n\n<div><span style=\"font-size:18px\">1 &le; N &le; 10<sup>9</sup></span></div>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer n, reverse its bits and return the resulting integer.  The binary representation considered for reversing excludes leading zeros. Note: N is considered as an unsigned 32-bit integer.",
                "constraints": [
                    "1 <= N <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "11",
                        "output": "13",
                        "explanation": "The binary representation of 11 is 1011. Reversing the bits gives 1101, which is 13 in decimal."
                    },
                    {
                        "input": "10",
                        "output": "5",
                        "explanation": "The binary representation of 10 is 1010. Reversing the bits gives 0101, which is 5 in decimal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use right shift and left shift operators.</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    \n    public:\n    unsigned int reverseBits(unsigned int n) \n{ \n    unsigned int rev = 0; \n      \n    // traversing bits of 'n' from the right \n    while (n > 0) \n    { \n        // bitwise left shift  \n        // 'rev' by 1 \n        rev <<= 1; \n          \n        // if current bit is '1' \n        if (n & 1 == 1) \n            rev ^= 1; \n          \n        // bitwise right shift  \n        // 'n' by 1 \n        n >>= 1; \n              \n    } \n      \n    // required number \n    return rev; \n} \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution\n{\n    public int reverseBits(int n)\n    {\n        //code here\n        int rev = 0; \n      \n        // traversing bits of 'n' from the right \n        while (n > 0) \n        { \n            // bitwise left shift  \n            // 'rev' by 1 \n            rev <<= 1; \n          \n            // if current bit is '1' \n            if ((n & 1) == 1) \n                rev ^= 1; \n          \n            // bitwise right shift  \n            // 'n' by 1 \n            n >>= 1; \n              \n        } \n      \n        // required number \n        return rev; \n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to reverse the bits of a given number.\n    def reverseBits(self,n):\n        ans = 0\n        # Iterating until n is greater than 0.\n        while n>0 :\n            # Shifting ans to the left by 1.\n            ans<<=1\n            # Checking if the rightmost bit of n is 1.\n            if ((n&1)== 1):\n                # Setting the rightmost bit of ans to 1.\n                ans |= 1\n            # Shifting n to the right by 1.\n            n >>=1\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number} N\n * @return {number}\n */\n\nclass Solution {\n    reverseBits(N){\n        //code here\n        let rev = 0;\n        while(N > 0){\n            rev = rev << 1;\n\n            if(N & 1 == 1){\n                rev = rev ^ 1;\n            }\n\n            N = N >> 1;\n        }\n\n        return rev;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}