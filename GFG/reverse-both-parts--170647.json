{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713973,
            "title": "Reverse both parts",
            "titleSlug": "reverse-both-parts--170647",
            "content": "<p><span style=\"font-size: 12pt;\">Given a linked list and a number <strong>k</strong>. You have to reverse the first part of the linked list with k nodes and the second part with n-k nodes.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: Linked list: </strong>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5,  k = 2<strong>\nOutput: </strong>2 -&gt; 1 -&gt; 5 -&gt; 4 -&gt; 3<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/713973/Web/Other/blobid0_1723141555.png\" width=\"400\" height=\"130\" /><strong>\nExplanation: </strong>As k = 2 , so the first part 2 nodes: 1 -&gt; 2 and the second part with 3 nodes: 3 -&gt; 4 -&gt; 5. Now after reversing the first part: 2 -&gt; 1 and the second part: 5 -&gt; 4 -&gt; 3. So the output is: 2 -&gt; 1 -&gt; 5 -&gt; 4 -&gt; 3</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: Linked list: </strong>1 -&gt; 2 -&gt; 4 -&gt; 3,  k = 3\n<strong>Output: </strong>4 -&gt; 2 -&gt; 1 -&gt; 3<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/713973/Web/Other/blobid1_1723141562.png\" width=\"400\" height=\"130\" /><br /><strong>Explanation: </strong>As k = 3 , so the first part 3 nodes: 4 -&gt; 2 -&gt; 1 and the second part with 1 nodes: 3. Now after reversing the first part: 1 -&gt; 2 -&gt; 4 and the second part: 3. So the output is: 1 -&gt; 2 -&gt; 4 -&gt; 3\n</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<strong><br />Expected Space Complexity:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &lt;= size of linked list &lt;= 10<sup>6</sup>&nbsp; &nbsp;<sup><br /></sup></span><span style=\"font-size: 12pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &lt;= node-&gt;data &lt;= 10<sup>6</sup></span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><br /></sup><span style=\"font-size: 12pt;\">1 &lt;= k &lt;&nbsp;</span><span style=\"font-size: 16px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">size of linked list</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list and an integer 'k', reverse the first 'k' nodes and the remaining 'n-k' nodes of the list.  The original linked list has 'n' nodes.",
                "constraints": [
                    "1 <= size of linked list <= 10^6",
                    "1 <= node->data <= 10^6",
                    "1 <= k < size of linked list"
                ],
                "testcases": [
                    {
                        "input": "Linked list: 1 -> 2 -> 3 -> 4 -> 5, k = 2",
                        "output": "2 -> 1 -> 5 -> 4 -> 3",
                        "explanation": "The first 2 nodes (1 -> 2) are reversed to become (2 -> 1). The remaining 3 nodes (3 -> 4 -> 5) are reversed to become (5 -> 4 -> 3).  The two reversed segments are then concatenated."
                    },
                    {
                        "input": "Linked list: 1 -> 2 -> 4 -> 3, k = 3",
                        "output": "4 -> 2 -> 1 -> 3",
                        "explanation": "The first 3 nodes (1 -> 2 -> 4) are reversed to become (4 -> 2 -> 1). The remaining 1 node (3) remains unchanged. The reversed segment and the single node are then concatenated."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The idea is to partition the linked list and reverse each&nbsp;part.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to reverse the linked list.\n    Node *reverseList(Node *head) {\n        Node *pre = NULL;\n        Node *next = NULL;\n        while (head) {\n            next = head->next;\n            head->next = pre;\n            pre = head;\n            head = next;\n        }\n        return pre;\n    }\n\n    // Function to reverse every group of k nodes in the linked list.\n    Node *reverse(Node *head, int k) {\n        Node *ptr = head;\n\n        // iterating to the end of current group of k nodes.\n        for (int i = 0; i < k - 1; i++) {\n            ptr = ptr->next;\n        }\n\n        // reversing the second part of the list after the current group.\n        Node *secondPart = reverseList(ptr->next);\n        ptr->next = NULL;\n\n        // reversing the first part of the list till the current group.\n        Node *firstPart = reverseList(head);\n        ptr = firstPart;\n        while (ptr->next) {\n            ptr = ptr->next;\n        }\n\n        // joining the first part and the reversed second part.\n        ptr->next = secondPart;\n\n        // returning the head of the reversed linked list.\n        return firstPart;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static Node reverse(Node head) {\n        // Reverses the linked list\n        Node curr = head;\n        Node prev = null;\n        Node temp;\n\n        while (curr != null) {\n            // Store the next node\n            temp = curr.next;\n            // Reverse the link\n            curr.next = prev;\n            // Move to the next node\n            prev = curr;\n            curr = temp;\n        }\n\n        // Return the new head of the reversed linked list\n        return prev;\n    }\n\n    public static Node reverse(Node head, int k) {\n        // Reverses the linked list in groups of size k\n        Node temp = head;\n\n        // Move temp to the k-th node in the linked list\n        for (int i = 0; i < k - 1; i++) {\n            temp = temp.next;\n        }\n\n        // Split the list into two parts\n        Node nxt = temp.next;\n        temp.next = null;\n\n        // Reverse the first part of the list\n        Node rev1 = reverse(head);\n        // Reverse the second part of the list\n        Node rev2 = reverse(nxt);\n\n        temp = rev1;\n        while (temp.next != null) {\n            temp = temp.next;\n        }\n\n        // Join the two reversed parts of the list\n        temp.next = rev2;\n\n        // Return the head of the reversed linked list\n        return rev1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import Optional\n\n\n# Definition for singly linked list node\nclass Node:\n\n    def __init__(self, x):\n        self.data = x\n        self.next = None\n\n\nclass Solution:\n\n    def reverse(self, head: Optional['Node'], k: int) -> Optional['Node']:\n        # Step 1: Find the k-th node from the head\n        cur_nxt = head\n        cnt_nxt = 0\n        while cnt_nxt != k:\n            cur_nxt = cur_nxt.next  # Move cur_nxt to the k-th node\n            cnt_nxt += 1\n\n        # Step 2: Reverse the first k nodes\n        cur = head\n        cnt = 0\n        prev = None\n        while cnt != k and cur:\n            nxt = cur.next  # Store the next node\n            cur.next = prev  # Reverse the link\n            prev = cur  # Move prev to the current node\n            cur = nxt  # Move cur to the next node\n            cnt += 1\n\n        # Step 3: Reverse the remaining nodes after the k-th node\n        prev_next = None\n        while cur_nxt:\n            nxt = cur_nxt.next  # Store the next node\n            cur_nxt.next = prev_next  # Reverse the link\n            prev_next = cur_nxt  # Move prev_next to the current node\n            cur_nxt = nxt  # Move cur_nxt to the next node\n\n        # Step 4: Connect the first part to the reversed second part\n        head.next = prev_next\n\n        # Step 5: Return the new head of the reversed list\n        return prev\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function template for JavaScript\n\n/**\n * Definition for singly linked list node\n * class Node{\n *     constructor(x){\n *         this.data = x;\n *         this.next = null;\n *     }\n * }\n * @param {Node} head\n * @param {number} k\n * @returns {Node}\n */\n\nclass Solution {\n    /**\n     * Reverses the linked list in groups of size k\n     * @param {Node} head - The head of the linked list\n     * @param {number} k - The size of the group to reverse\n     * @returns {Node} - The new head of the reversed linked list\n     */\n    reverse(head, k) {\n        // Step 1: Find the k-th node from the head\n        let cur_nxt = head;\n        let cnt_nxt = 0;\n        while (cnt_nxt !== k) {\n            cur_nxt = cur_nxt.next; // Move cur_nxt to the k-th node\n            cnt_nxt += 1;\n        }\n\n        // Step 2: Reverse the first k nodes\n        let cur = head;\n        let cnt = 0;\n        let prev = null;\n        while (cnt !== k && cur) {\n            let nxt = cur.next; // Store the next node\n            cur.next = prev;    // Reverse the link\n            prev = cur;         // Move prev to the current node\n            cur = nxt;          // Move cur to the next node\n            cnt += 1;\n        }\n\n        // Step 3: Reverse the remaining nodes after the k-th node\n        let prev_next = null;\n        while (cur_nxt) {\n            let nxt = cur_nxt.next;   // Store the next node\n            cur_nxt.next = prev_next; // Reverse the link\n            prev_next = cur_nxt;      // Move prev_next to the current node\n            cur_nxt = nxt;            // Move cur_nxt to the next node\n        }\n\n        // Step 4: Connect the first part to the reversed second part\n        head.next = prev_next;\n\n        // Step 5: Return the new head of the reversed list\n        return prev;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}