{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705698,
            "title": "Reverse Delete Algorithm for Minimum Spanning Tree",
            "titleSlug": "reverse-delete-algorithm-for-minimum-spanning-tree1158",
            "content": "<p><span style=\"font-size: 18px;\">Reverse Delete algorithm is closely related to Kruskal&rsquo;s algorithm. In Reverse Delete algorithm, we sort all edges in decreasing order of their weights. After sorting, we one by one pick edges in decreasing order. We include current picked edge if excluding current edge causes disconnection in current graph. The main idea is delete edge if its deletion does not lead to disconnection of graph. Your task is to print the value of total weight of Minimum Spanning Tree formed.</span></p>\n<p><strong><span style=\"font-size: 18px;\">NOTE: Array elements represent the triplets U , V edge and Weight of that edge. Please read test cases explanation for more details.</span></strong></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>V = </strong>4, <strong>E = </strong>5</span>\n<span style=\"font-size: 18px;\"><strong>Arr[] = </strong>{0, 1, 10, 0, 2, 6, 0, 3, 5, 1, 3, 15, 2, 3, 4}</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">19</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:<br /><br /></strong>Array elements represent the triplets are :</span></pre>\n<pre><span>U V Weight<br />0 1  10<br />0 2  6<br />0 3  5<br />1 3  15<br />2 3  4</span></pre>\n<pre><span style=\"font-size: 18px;\"></span><span style=\"font-size: 18px;\">The weight of the Minimum Spanning Tree formed is 19.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>V = </strong>4, <strong>E = </strong>3</span>\n<span style=\"font-size: 18px;\"><strong>Arr[] = </strong>{0, 1, 98, 1, 3, 69, 0, 3, 25}</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">192</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:<br /></strong></span>\n<span style=\"font-size: 18px;\">Array elements represent the triplets are :</span></pre>\n<pre><span style=\"font-size: 18px;\">U V Weight<br />0 1  98<br />1 3  69<br />0 3  25<br /><br /></span><span style=\"font-size: 18px;\">The weight of the Minimum Spanning\nTree formed is 192.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>RevDelMST()</strong> which takes 2 Integers V, and E and an array of length 3*E where each triplet consists of two nodes u and v and weight of thir edge w as input and returns the Weight of the Minimum Spanning Tree.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(V*E)<br /><strong>Expected Auxiliary Space:</strong> O(E)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= V,E &lt;= 1000</span><br /><span style=\"font-size: 18px;\">1 &lt;= u,v &lt;= V<br />1 &lt;= w &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "The Reverse Delete algorithm, a close relative of Kruskal's, constructs a Minimum Spanning Tree (MST) by iteratively removing edges from a fully connected graph. The algorithm begins by sorting all edges in descending order of their weights.  It then iterates through the sorted edges, and for each edge, it checks if removing the edge disconnects the graph. If removing the edge does *not* disconnect the graph, it is removed; otherwise, it is kept. The algorithm terminates when all edges have been considered. Your task is to implement this algorithm and return the total weight of the resulting Minimum Spanning Tree.",
                "constraints": [
                    "1 <= V, E <= 1000",
                    "0 <= u, v < V",
                    "1 <= w <= 100"
                ],
                "testcases": [
                    {
                        "input": "V = 4, E = 5\nArr[] = {0, 1, 10, 0, 2, 6, 0, 3, 5, 1, 3, 15, 2, 3, 4}",
                        "output": "19",
                        "explanation": "The edges and their weights are: (0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4). Removing (1,3,15) doesn't disconnect the graph. The remaining edges form the MST with a total weight of 10 + 6 + 5 + 4 = 25. However edge(0,1,10) can also be removed. so weight of MST is 19."
                    },
                    {
                        "input": "V = 4, E = 3\nArr[] = {0, 1, 98, 1, 3, 69, 0, 3, 25}",
                        "output": "192",
                        "explanation": "The edges and their weights are: (0, 1, 98), (1, 3, 69), (0, 3, 25).  Removing any of these edges disconnects the graph. Therefore, all edges must be included in the MST, with a total weight of 98 + 69 + 25 = 192."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">In Reverse Delete algorithm, we sort all edges in <strong>decreasing</strong> order of their weights. After sorting, we one by one pick edges in decreasing order. We <strong>include current picked edge if excluding current edge causes disconnection in current graph</strong>. The main idea is delete edge if its deletion does not lead to disconnection of graph. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\r\n\r\nclass Graph\r\n{\r\n    int V;\r\n    list<int> *adj;\r\n    vector< pair<int, pair<int, int>> > edges;\r\n    void DFS(int v, bool visited[]);\r\n \r\npublic:\r\n    Graph(int V);\r\n    void addEdge(int u, int v, int w);\r\n    bool isConnected();\r\n    int reverseDeleteMST();\r\n};\r\n\r\nGraph::Graph(int V)\r\n{\r\n    this->V = V;\r\n    adj = new list<int>[V];\r\n}\r\n\r\nvoid Graph::addEdge(int u, int v, int w)\r\n{\r\n    adj[u].push_back(v); // Add w to v\u00e2\u20ac\u2122s list.\r\n    adj[v].push_back(u); // Add w to v\u00e2\u20ac\u2122s list.\r\n    edges.push_back({w, {u, v}});\r\n}\r\n \r\nvoid Graph::DFS(int v, bool visited[])\r\n{    visited[v] = true;\r\n    list<int>::iterator i;\r\n    for (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n        if (!visited[*i])\r\n            DFS(*i, visited);\r\n}\r\n\r\nbool Graph::isConnected()\r\n{\r\n    bool visited[V];\r\n    memset(visited, false, sizeof(visited));\r\n    DFS(0, visited);\r\n    for (int i=1; i<V; i++)\r\n        if (visited[i] == false)\r\n            return false;\r\n    return true;\r\n}\r\n\r\nint Graph::reverseDeleteMST()\r\n{\r\n    sort(edges.begin(), edges.end());\r\n    int mst_wt = 0;  // Initialize weight of MST \r\n    //cout << \"Edges in MST\\n\";\r\n    for (int i=edges.size()-1; i>=0; i--)\r\n    {\r\n        int u = edges[i].second.first;\r\n        int v = edges[i].second.second;\r\n        adj[u].remove(v);\r\n        adj[v].remove(u);\r\n        if (isConnected() == false)\r\n        {\r\n            adj[u].push_back(v);\r\n            adj[v].push_back(u);\r\n            //cout << \"(\" << u << \", \" << v << \") \\n\";\r\n            mst_wt += edges[i].first;\r\n        }\r\n    }\r\n    return mst_wt;\r\n}\r\n\r\nclass Solution {\r\n  public:\r\n    int RevDelMST(int Arr[], int V, int E) {\r\n        \r\n        Graph g(V);\r\n        \r\n        for(int i=0; i<3*E; i+=3)\r\n            g.addEdge(Arr[i], Arr[i+1], Arr[i+2]);\r\n            \r\n        return g.reverseDeleteMST();\r\n            \r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}