{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703151,
            "title": "Reverse each word in a given string",
            "titleSlug": "reverse-each-word-in-a-given-string1001",
            "content": "<p><span >You are given a string <strong>s</strong>. You need to reverse each word in it where the words are separated by spaces and return the modified string.</span></p>\n<p><span ><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: #1e2229; background-color: #ffffff; font-family: var(--gfg-font-secondary) !important;\">Note:&nbsp;</span><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">The string may contain leading or trailing spaces, or multiple spaces between two words. The returned string should only have a&nbsp;</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: #1e2229; background-color: #ffffff; font-family: var(--gfg-font-secondary) !important;\">single space</span><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">&nbsp;separating the words, and&nbsp;</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: #1e2229; background-color: #ffffff; font-family: var(--gfg-font-secondary) !important;\">no extra spaces</span><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\"> should be included.</span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \" i like this program very much \"\n<strong>Output: </strong>\"i ekil siht margorp yrev hcum\"\n<strong>Explanation</strong>: The words are reversed as follows:<br />\"i\" -&gt; \"i\",\"like\"-&gt;\"ekil\",\n\"this\"-&gt;\"siht\",\"program\" -&gt; \"margorp\",\n\"very\" -&gt; \"yrev\",\"much\" -&gt; \"hcum\".</span></pre>\n<pre><span ><strong>Input</strong>: s = \" pqr mno \"\n<strong>Output: </strong>\"rqp onm\"\n<strong>Explanation</strong>: The words are reversed as follows:<br />\"pqr\" -&gt; \"rqp\" ,\n\"mno\" -&gt; \"onm\"<br /></span></pre>\n<pre><span ><strong>Input</strong>: s = \"pqr\"\n<strong>Output: </strong>\"rqp\"\n<strong>Explanation</strong>: The words are reversed as follows:</span><br /><span >\"pqr\" -&gt; \"rqp\"</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= s.size() &lt;= 10<sup>5<br /></sup><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">string&nbsp;</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: #1e2229; background-color: #ffffff; font-family: var(--gfg-font-secondary) !important;\"><code style=\"box-sizing: border-box; line-height: 1.7em; font-family: var(--gfg-font-primary) !important; color: var(--text-color) !important; background-color: var(--background) !important;\">s</code></span><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">&nbsp;contains only lowercase English alphabets and spaces</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, reverse each word in the string. Words are separated by spaces.  The input string may contain leading or trailing spaces, or multiple spaces between words. The output string should have a single space separating words and no extra spaces.",
                "constraints": [
                    "1 <= s.size() <= 10^5",
                    "String `s` contains only lowercase English alphabets and spaces"
                ],
                "testcases": [
                    {
                        "input": " i like this program very much ",
                        "output": "i ekil siht margorp yrev hcum",
                        "explanation": "The words are reversed individually. 'i' becomes 'i', 'like' becomes 'ekil', 'this' becomes 'siht', 'program' becomes 'margorp', 'very' becomes 'yrev', and 'much' becomes 'hcum'. Leading/trailing and multiple spaces are removed."
                    },
                    {
                        "input": " pqr mno ",
                        "output": "rqp onm",
                        "explanation": "The words 'pqr' and 'mno' are reversed to 'rqp' and 'onm' respectively. Leading/trailing spaces are removed."
                    },
                    {
                        "input": "pqr",
                        "output": "rqp",
                        "explanation": "The word 'pqr' is reversed to 'rqp'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a stack to reverse characters of each word.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "zoho",
            "flipkart",
            "amazon",
            "microsoft",
            "payu",
            "maq-software",
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to reverse words in a given string.\n    // Use a stack to reverse words and handle spaces.\n    string reverseWords(string &s) {\n        // Get the length of the string\n        int n = s.length();\n\n        // Create a stack to store characters of a word\n        stack<char> st;\n\n        // Initialize an empty string to store the result\n        string res = \"\";\n        int i = 0;\n\n        // Iterate through each character in the string\n        while (i < n) {\n            // If the current character is a space, process the word\n            if (s[i] == ' ') {\n\n                // Flag to check if we found a word\n                bool found = false;\n\n                // While the stack is not empty, pop characters to reverse the word\n                while (!st.empty()) {\n                    // Add character from the stack to the result\n                    res += st.top();\n                    // Pop the character from the stack\n                    st.pop();\n                    // Mark that we found a word\n                    found = true;\n                }\n                // If a word was found, add a space to separate the words\n                if (found)\n                    res += \" \";\n            } else {\n                // Push characters onto the stack\n                st.push(s[i]);\n            }\n            // Move to the next character\n            i++;\n        }\n\n        // Pop remaining characters from the stack for the last word\n        while (!st.empty()) {\n            // Add character from the stack to the result\n            res += st.top();\n            // Pop the character from the stack\n            st.pop();\n        }\n\n        // If the result ends with a space, remove the trailing space\n        if (res.back() == ' ') {\n            // Remove the trailing space\n            res.pop_back();\n        }\n        // Return the final string with reversed words\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to reverse words in a given string\n    public String reverseWords(String s) {\n        int n = s.length();\n        Stack<Character> st = new Stack<>();\n        StringBuilder res = new StringBuilder();\n\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == ' ') {\n                // Process the word when a space is encountered\n                boolean found = false;\n                while (!st.isEmpty()) {\n                    res.append(st.pop());\n                    found = true;\n                }\n                if (found) res.append(\" \");\n            } else {\n                // Push characters onto the stack\n                st.push(s.charAt(i));\n            }\n        }\n\n        // Pop remaining characters for the last word\n        while (!st.isEmpty()) {\n            res.append(st.pop());\n        }\n\n        // Remove trailing space if present\n        if (res.length() > 0 && res.charAt(res.length() - 1) == ' ') {\n            res.deleteCharAt(res.length() - 1);\n        }\n\n        return res.toString();\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to reverse words in a given string\n    def reverseWords(self, s: str) -> str:\n        n = len(s)\n        st = []\n        res = \"\"\n\n        for i in range(n):\n            if s[i] == ' ':\n                # Process the word when a space is encountered\n                found = False\n                while st:\n                    res += st.pop()\n                    found = True\n                if found:\n                    res += \" \"\n            else:\n                # Push characters onto the stack\n                st.append(s[i])\n\n        # Pop remaining characters for the last word\n        while st:\n            res += st.pop()\n\n        # Remove trailing space if present\n        if res.endswith(\" \"):\n            res = res[:-1]\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to reverse words in a given string\n    reverseWords(s) {\n        const n = s.length;\n        const st = [];\n        let res = \"\";\n\n        for (let i = 0; i < n; i++) {\n            if (s[i] === ' ') {\n                // Process the word when a space is encountered\n                let found = false;\n                while (st.length > 0) {\n                    res += st.pop();\n                    found = true;\n                }\n                if (found) res += \" \";\n            } else {\n                // Push characters onto the stack\n                st.push(s[i]);\n            }\n        }\n\n        // Pop remaining characters for the last word\n        while (st.length > 0) {\n            res += st.pop();\n        }\n\n        // Remove trailing space if present\n        if (res.endsWith(\" \")) {\n            res = res.slice(0, -1);\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}