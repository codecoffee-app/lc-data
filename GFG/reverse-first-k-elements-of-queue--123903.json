{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 879170,
            "title": "Reverse First K of Queue",
            "titleSlug": "reverse-first-k-elements-of-queue--123903",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer <strong>k </strong>and a&nbsp;<a href=\"http://www.geeksforgeeks.org/queue-data-structure/\">queue</a>&nbsp;of integers, we need to reverse the order of the first<strong> k</strong> elements of the queue, leaving the other elements in the same relative order.</span></p>\n<p><span style=\"font-size: 18px;\">Only following standard operations are allowed on queue.</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">enqueue(x) : Add an item x to rear of queue</span></li>\n<li><span style=\"font-size: 18px;\">dequeue() : Remove an item from front of queue</span></li>\n<li><span style=\"font-size: 18px;\">size() : Returns number of elements in queue.</span></li>\n<li><span style=\"font-size: 18px;\">front() : Finds front item.<br /></span></li>\n</ul>\n<p><strong style=\"font-size: 18px;\">Note:</strong><span style=\"font-size: 18px;\">&nbsp;The above operations represent the general processings. In-built functions of the respective languages can be used to solve the problem.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">k =</span><span style=\"font-size: 18px;\"> 3, queue[] = [1, 2, 3, 4, 5]\n<strong>Output: </strong>3 2 1 4 5\n<strong>Explanation: </strong>After reversing the given input from the 3rd position the resultant output will be 3 2 1 4 5.</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">k = 4, queue[] = [4, 3, 2, 1]\n<strong>Output: </strong>1 2 3 4\n<strong>Explanation: </strong>After reversing the given input from the 4th position the resultant output will be 1 2 3 4.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= k &lt;= queue.size() &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `k` and a queue of integers, reverse the order of the first `k` elements of the queue while maintaining the original order of the remaining elements. You are only allowed to use standard queue operations.",
                "constraints": [
                    "1 <= k <= queue.size() <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "k = 3, queue = [1, 2, 3, 4, 5]",
                        "output": "3 2 1 4 5",
                        "explanation": "The first 3 elements (1, 2, 3) are reversed to become (3, 2, 1). The remaining elements (4, 5) remain in their original order. The final queue is then 3 2 1 4 5."
                    },
                    {
                        "input": "k = 4, queue = [4, 3, 2, 1]",
                        "output": "1 2 3 4",
                        "explanation": "The first 4 elements (4, 3, 2, 1) are reversed to become (1, 2, 3, 4). The final queue is then 1 2 3 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to reverse first k elements of a queue.\n    queue<int> modifyQueue(queue<int> &q, int k) {\n        stack<int> s;\n        queue<int> qq;\n        // we pop first k elements from queue and push it in the stack.\n        while (k-- > 0) {\n            int a = q.front();\n            q.pop();\n            s.push(a);\n        }\n        // while stack is not empty, we push the elements into the new queue.\n        while (!s.empty()) {\n            int a = s.top();\n            s.pop();\n            qq.push(a);\n        }\n        // then we add rest of the elements of original queue to the new queue.\n        while (!q.empty()) {\n            int a = q.front();\n            q.pop();\n            qq.push(a);\n        }\n        // returning the new queue.\n        return qq;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class GfG {\n    // Function to reverse first k elements of a queue.\n    public Queue<Integer> modifyQueue(Queue<Integer> q, int k) {\n        Stack<Integer> s = new Stack<>();\n        Queue<Integer> qq = new LinkedList<>();\n        // we pop first k elements from queue and push it in the stack.\n        while (k-- > 0) {\n            int a = q.peek();\n            q.poll();\n            s.push(a);\n        }\n        // while stack is not empty, we push the elements into the new queue.\n        while (!s.isEmpty()) {\n            int a = s.peek();\n            s.pop();\n            qq.add(a);\n        }\n        // then we add rest of the elements of original queue to the new queue.\n        while (!q.isEmpty()) {\n            int a = q.peek();\n            q.poll();\n            qq.add(a);\n        }\n        return qq;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nfrom queue import Queue\n\n\nclass Solution:\n\n    def modifyQueue(self, q, k):\n        stack = []\n        new_queue = Queue()\n\n        # Pop first k elements from queue and push into stack\n        for _ in range(k):\n            stack.append(q.get())\n\n        # Push elements from stack back into the queue\n        while stack:\n            new_queue.put(stack.pop())\n\n        # Add the remaining elements from original queue to the new queue\n        while not q.empty():\n            new_queue.put(q.get())\n\n        return new_queue\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    modifyQueue(q, k) {\n        let stack = [];\n        let newQueue = [];\n\n        // Pop first k elements from queue and push into stack\n        for (let i = 0; i < k; i++) {\n            stack.push(q.shift());\n        }\n\n        // Push elements from stack back into the queue\n        while (stack.length > 0) {\n            newQueue.push(stack.pop());\n        }\n\n        // Add the remaining elements from original queue to the new queue\n        while (q.length > 0) {\n            newQueue.push(q.shift());\n        }\n\n        return newQueue;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}