{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700649,
            "title": "Reverse first K of a Queue",
            "titleSlug": "reverse-first-k-elements-of-queue",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer <strong>K </strong>and a&nbsp;<a href=\"http://www.geeksforgeeks.org/queue-data-structure/\">queue</a>&nbsp;of integers, we need to reverse the order of the first<strong> K</strong> elements of the queue, leaving the other elements in the same relative order.</span></p>\n<p><span style=\"font-size: 18px;\">Only following standard operations are allowed on queue.</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">enqueue(x) : Add an item x to rear of queue</span></li>\n<li><span style=\"font-size: 18px;\">dequeue() : Remove an item from front of queue</span></li>\n<li><span style=\"font-size: 18px;\">size() : Returns number of elements in queue.</span></li>\n<li><span style=\"font-size: 18px;\">front() : Finds front item.<br /></span></li>\n</ul>\n<p><strong style=\"font-size: 18px;\">Note:</strong><span style=\"font-size: 18px;\">&nbsp;The above operations represent the general processings. In-built functions of the respective languages can be used to solve the problem.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input</span><span style=\"font-size: 18px;\">: </span></strong><span style=\"font-size: 18px;\">Queue = 1 2 3 4 5, k = 3<br /><strong>Output: </strong>3 2 1 4 5<br /><strong>Explanation: </strong>After reversing the first 3 elements from the given queue the resultant queue will be 3 2 1 4 5</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Queue= 4 3 2 1, k = 4<br /><strong>Output: </strong>1 2 3 4&nbsp;<br /><strong>Explanation: </strong>After reversing the first 4 elements from the given queue the resultant queue will be 1 2 3 4 </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= K &lt;= N &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer K and a queue of integers, reverse the order of the first K elements of the queue, leaving the other elements in the same relative order. You are allowed to use standard queue operations like enqueue, dequeue, size, and front.",
                "constraints": [
                    "1 <= K <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "Queue = 1 2 3 4 5, k = 3",
                        "output": "3 2 1 4 5",
                        "explanation": "The first 3 elements (1, 2, 3) are reversed and placed back into the queue, resulting in 3 2 1 4 5."
                    },
                    {
                        "input": "Queue = 4 3 2 1, k = 4",
                        "output": "1 2 3 4",
                        "explanation": "All 4 elements are reversed, resulting in 1 2 3 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n\n    // Function to reverse first k elements of a queue.\n    queue<int> reverseFirstK(queue<int> q, int k) {\n        // using a stack and another queue to reverse first k elements.\n        stack<int> s;\n        queue<int> qq;\n\n        // we pop first k elements from queue and push it in the stack.\n        while (k-- > 0) {\n            int a = q.front();\n            q.pop();\n            s.push(a);\n        }\n\n        // while stack is not empty, we push the elements into the new queue.\n        while (!s.empty()) {\n            int a = s.top();\n            s.pop();\n            qq.push(a);\n        }\n\n        // then we add rest of the elements of original queue to the new queue.\n        while (!q.empty()) {\n            int a = q.front();\n            q.pop();\n            qq.push(a);\n        }\n\n        // returning the new queue.\n        return qq;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass GfG {\n    // Recursive function to move first k elements to the end\n    private void moveKToEnd(Queue<Integer> q, int k) {\n        if (k == 0) return;\n        int e = q.poll();     // Remove front element\n        moveKToEnd(q, k - 1); // Recursive call\n        q.add(e);             // Add element back to the end\n    }\n\n    // Function to reverse first k elements of the queue\n    public Queue<Integer> reverseFirstK(Queue<Integer> q, int k) {\n        moveKToEnd(q, k);\n        int s = q.size() - k;\n        while (s-- > 0) {\n            int x = q.poll();\n            q.add(x);\n        }\n        return q;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from collections import deque\n'''\nFunction Arguments :\n\t\t@param  : q ( given queue to be used), k(Integer )\n\t\t@return : list, just reverse the first k elements of queue and return new queue\n'''\n\n\n#Function to reverse first k elements of a queue.\nclass Solution:\n\n    def reverseFirstK(self, q, k):\n        s = []  # Using list as a stack\n        qq = deque()\n\n        # We pop the first k elements from the queue and push them into the stack.\n        while k > 0:\n            a = q.popleft()\n            s.append(a)\n            k -= 1\n\n        # While the stack is not empty, push the elements into the new queue.\n        while s:\n            a = s.pop()\n            qq.append(a)\n\n        # Then we add the rest of the elements of the original queue to the new queue.\n        while q:\n            a = q.popleft()\n            qq.append(a)\n\n        return qq\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Queue} q\n * @param {number} k\n * @returns {Queue}\n */\n\n/*\nclass Queue{\n    constructor(){\n        this.arr = [];\n        this.front = 0;\n    }\n\n    push(a){\n        this.arr.push(a);\n    }\n\n    pop(){\n        if(this.arr.length != this.front){\n            let x = this.arr[this.front];\n            this.front++;\n            return x;\n        }\n        else\n            return -1;\n    }\n\n    front_ele(){\n        return this.arr[this.front];\n    }\n\n    empty(){\n        if(this.arr.length != this.front)\n            return false;\n        else\n            return true;\n    }\n}\n*/\n\nclass Solution {\n    // Function to reverse first k elements of a queue.\n    modifyQueue(q, k) {\n        // using a stack and another queue to reverse first k elements.\n        let s = [];\n        let qq = new Queue();\n\n        // we pop first k elements from queue and push it in the stack.\n        while (k--) {\n            let a = q.front_ele();\n            q.pop();\n            s.push(a);\n        }\n        // while stack is not empty, we push the elements into the new queue.\n        while (s.length > 0) {\n            let a = s[s.length - 1];\n            s.pop();\n            qq.push(a);\n        }\n        // then we add rest of the elements of original queue to the new queue.\n        while (!q.empty()) {\n            let a = q.front_ele();\n            q.pop();\n            qq.push(a);\n        }\n        // returning the new queue.\n        return qq;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}