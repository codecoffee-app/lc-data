{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700202,
            "title": "Reverse Level Order Traversal",
            "titleSlug": "reverse-level-order-traversal",
            "content": "<p><span >Given a binary tree, find its reverse level order traversal. ie- the traversal must begin from the last level. </span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>root = [1, 3, 2]\n\\t  1\n\\t/   \\\n     3     2\n<strong>Output:</strong> 3 2 1\n<strong>Explanation: </strong>Traversing level 1 : 3 2, Traversing level 0 : 1</span></pre>\n<pre><span ><strong>Input: </strong>root = [10, 20, 30, 40, 60]\n\\t 10\n\\t/  \\\n     20   30\n    / \\ \n   40  60\n<strong>Output: </strong>40 60 20 30 10\n<strong>Explanation: </strong>Traversing level 2 : 40 60, Traversing level 1 : 20 30, Traversing level 0 : 10<br /></span></pre>\n<pre><span ><strong>Input: </strong>root = [1, 2, 3]\n\\t  1\n\\t/   \\\n     2     3\n<strong>Output:</strong> 2 3 1</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, traverse it level by level, but in reverse order. Start from the deepest level and work your way up to the root.",
                "constraints": [
                    "1 <= n <= 10^5, where n is the number of nodes in the binary tree."
                ],
                "testcases": [
                    {
                        "input": "[1, 3, 2]",
                        "output": "3 2 1",
                        "explanation": "The tree has three nodes. Level 1 consists of nodes 3 and 2. Level 0 contains node 1. Reversing the level order gives 3 2 1."
                    },
                    {
                        "input": "[10, 20, 30, 40, 60]",
                        "output": "40 60 20 30 10",
                        "explanation": "Level 2: 40, 60. Level 1: 20, 30. Level 0: 10. Reverse level order: 40 60 20 30 10."
                    },
                    {
                        "input": "[1, 2, 3]",
                        "output": "2 3 1",
                        "explanation": "Level 1: 2, 3. Level 0: 1. Reverse level order: 2 3 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Do the level order traversal by giving the right child preference over the left child and then reverse the result.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "factset",
            "adobe",
            "cisco"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> reverseLevelOrder(Node *root) {\n        vector<int> result;\n        stack<Node *> S;\n        queue<Node *> Q;\n        Q.push(root);\n\n        // Do something like normal level order traversal order. Following are the\n        // differences with normal level order traversal\n        // 1) Instead of printing a node, we push the node to stack\n        // 2) Right subtree is visited before left subtree\n        while (Q.empty() == false) {\n            /* Dequeue node and make it root */\n            root = Q.front();\n            Q.pop();\n            S.push(root);\n\n            /* Enqueue right child */\n            if (root->right)\n                Q.push(root->right); // NOTE: RIGHT CHILD IS ENQUEUED BEFORE LEFT\n\n            /* Enqueue left child */\n            if (root->left)\n                Q.push(root->left);\n        }\n\n        // Now pop all items from stack one by one and print them\n        while (S.empty() == false) {\n            root = S.top();\n            result.push_back(root->data);\n            S.pop();\n        }\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Tree {\n    ArrayList<Integer> reverseLevelOrder(Node node) {\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        Stack<Node> S = new Stack<>();\n        Queue<Node> Q = new LinkedList<>();\n        Q.add(node);\n\n        // Do something like normal level order traversal order.Following\n        // are the differences with normal level order traversal\n        // 1) Instead of printing a node, we push the node to stack\n        // 2) Right subtree is visited before left subtree\n        while (Q.isEmpty() == false) {\n            /* Dequeue node and make it root */\n            node = Q.peek();\n            Q.remove();\n            S.push(node);\n\n            /* Enqueue right child */\n            // NOTE: RIGHT CHILD IS ENQUEUED BEFORE LEFT\n            if (node.right != null) Q.add(node.right);\n\n            /* Enqueue left child */\n            if (node.left != null) Q.add(node.left);\n        }\n\n        // Now pop all items from stack one by one and print them\n        while (S.empty() == false) {\n            node = S.peek();\n            ans.add(node.data);\n            S.pop();\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def reverseLevelOrder(self, root):\n        ans = []\n        S = []\n        Q = []\n        Q.append(root)\n\n        # Do something like normal level order traversal order.\n        # Following are the differences with normal level order\n        # traversal:\n        # 1) Instead of printing a node, we push the node to stack\n        # 2) Right subtree is visited before left subtree\n        while (len(Q) > 0):\n\n            # Dequeue node and make it root\n            root = Q.pop(0)\n            S.append(root)\n\n            # Enqueue right child\n            if (root.right):\n                Q.append(root.right)\n\n            # Enqueue left child\n            if (root.left):\n                Q.append(root.left)\n\n        # Now pop all items from stack one by one and print them\n        while (len(S) > 0):\n            root = S.pop()\n            ans.append(root.data)\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/*\r\nclass Node\r\n{\r\n    constructor(x){\r\n        this.data=x;\r\n        this.left=null;\r\n        this.right=null;\r\n    }\r\n}\r\n*/\r\n\r\n/**\r\n * @param {Node} root\r\n * @return {number[]}\r\n*/\r\nclass Solution {\r\n  \treverseLevelOrder(root){\r\n        let result = [];\r\n        let stack = [];\r\n        let queue = [];\r\n        queue.push(root);\r\n\r\n        // Do something like normal level order traversal order. Following are the \r\n        // differences with normal level order traversal \r\n        // 1) Instead of printing a node, we push the node to stack \r\n        // 2) Right subtree is visited before left subtree \r\n        while (queue.length > 0) {\r\n            /* Dequeue node and make it root */\r\n            root = queue.shift();\r\n            stack.push(root);\r\n\r\n            /* Enqueue right child */\r\n            if (root.right) \r\n                queue.push(root.right); // NOTE: RIGHT CHILD IS ENQUEUED BEFORE LEFT \r\n\r\n            /* Enqueue left child */\r\n            if (root.left) \r\n                queue.push(root.left); \r\n        }\r\n\r\n        // Now pop all items from stack one by one and print them \r\n        while (stack.length > 0) {\r\n            root = stack.pop();\r\n            result.push(root.data);\r\n        }\r\n        return result;\r\n  \t}\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}