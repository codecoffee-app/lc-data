{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701308,
            "title": "Reverse Words",
            "titleSlug": "reverse-words-in-a-given-string5459",
            "content": "<p><span >Given a string <strong><code>s</code></strong>, reverse the string without reversing its individual words. Words are separated by spaces.</span></p>\n<p><span ><strong>Note: </strong>The string may contain leading or trailing spaces, or multiple spaces between two words. The returned string should only have a <strong>single space</strong> separating the words, and <strong>no extra spaces</strong> should be included.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \" i like this program very much \"<br /><strong>Output: </strong>\"much very program this like i\"<strong>\nExplanation: </strong>After removing extra spaces and reversing the whole string (not individual words), the input string becomes <code>\"much very program this like i\"</code>. </span></pre>\n<pre><span ><strong>Input: </strong>s = \" pqr mno \"\n<strong>Output: </strong>\"mno pqr\"<strong>\nExplanation: </strong>After removing extra spaces and reversing the whole string, the input string becomes <code>\"mno pqr\"</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span> </span></pre>\n<pre><span ><strong>Input: </strong>s = \" a \"\n<strong>Output: </strong>\"a\"<strong>\nExplanation: </strong>The input string contains only one word with extra spaces around it. After removing the extra spaces, the output is <code>\"a\"</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Constraints:</strong></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= s.size() &lt;= 10<sup>6<br /></sup>String <strong><code>s</code></strong> contains only lowercase English alphabets and spaces.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Split the string into words, reverse the word order, and join them back with spaces.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "accolite",
            "amazon",
            "microsoft",
            "samsung",
            "makemytrip",
            "goldman-sachs",
            "adobe",
            "sap-labs",
            "cisco"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to reverse words in a given string.\n    string reverseWords(string &s) {\n        string result = \"\";\n        string curr_word = \"\";\n        vector<string> words;\n\n        // Splitting the string into individual words.\n        for (int i = 0; i < s.length(); ++i) {\n            // if a space is encountered, store the word in the list.\n            if (s[i] == ' ') {\n                if (curr_word.size() > 0)\n                    words.push_back(curr_word);\n                curr_word = \"\";\n            }\n            // else, keep adding characters to the current word.\n            else\n                curr_word += s[i];\n        }\n        // Store the last remaining word in the list.\n        if (curr_word.size() > 0)\n            words.push_back(curr_word);\n\n        // Reverse the order of words and combine them into the result string.\n        for (int i = words.size() - 1; i >= 0; --i) {\n            result += words[i];\n            if (i != 0)\n                result += ' ';\n        }\n        // Return the final result.\n        return result;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to reverse words in a given string.\n    public String reverseWords(String s) {\n        String result = \"\";\n        String currWord = \"\";\n        List<String> words = new ArrayList<>();\n\n        // Splitting the string into individual words.\n        for (int i = 0; i < s.length(); ++i) {\n            // If a space is encountered, store the word in the list.\n            if (s.charAt(i) == ' ') {\n                if (!currWord.isEmpty()) words.add(currWord);\n                currWord = \"\";\n            }\n            // Else, keep adding characters to the current word.\n            else\n                currWord += s.charAt(i);\n        }\n        // Store the last remaining word in the list.\n        if (!currWord.isEmpty()) words.add(currWord);\n\n        // Reverse the order of words and combine them into the result string.\n        for (int i = words.size() - 1; i >= 0; --i) {\n            result += words.get(i);\n            if (i != 0) result += \" \";\n        }\n        // Return the final result.\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to reverse words in a given string.\n    def reverseWords(self, s):\n        result = \"\"\n        curr_word = \"\"\n        words = []\n\n        # Splitting the string into individual words.\n        for char in s:\n            # If a space is encountered, store the word in the list.\n            if char == ' ':\n                if curr_word:\n                    words.append(curr_word)\n                curr_word = \"\"\n            # Else, keep adding characters to the current word.\n            else:\n                curr_word += char\n\n        # Store the last remaining word in the list.\n        if curr_word:\n            words.append(curr_word)\n\n        # Reverse the order of words and combine them into the result string.\n        result = \" \".join(reversed(words))\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for JavaScript\n/**\n * @param {string} s\n * @returns {string}\n */\n\nclass Solution {\n    // Function to reverse words in a given string.\n    reverseWords(s) {\n        let result = \"\";\n        let currWord = \"\";\n        const words = [];\n\n        // Splitting the string into individual words.\n        for (let i = 0; i < s.length; ++i) {\n            // If a space is encountered, store the word in the list.\n            if (s[i] === ' ') {\n                if (currWord.length > 0) words.push(currWord);\n                currWord = \"\";\n            }\n            // Else, keep adding characters to the current word.\n            else {\n                currWord += s[i];\n            }\n        }\n        // Store the last remaining word in the list.\n        if (currWord.length > 0) words.push(currWord);\n\n        // Reverse the order of words and combine them into the result string.\n        for (let i = words.length - 1; i >= 0; --i) {\n            result += words[i];\n            if (i !== 0) result += \" \";\n        }\n        // Return the final result.\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}