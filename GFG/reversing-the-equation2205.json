{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703157,
            "title": "Reversing the equation",
            "titleSlug": "reversing-the-equation2205",
            "content": "<p><span style=\"font-size: 18px;\">Given a mathematical equation that contains only numbers and +, -, *, /. Print the equation in reverse, such that the equation is reversed, but the numbers remain the same.<br />It is guaranteed that the given equation is valid, and there are no leading zeros.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS = \"20-3+5*2\"\n<strong>Output:</strong> 2*5+3-20\n<strong>Explanation</strong>: The equation is reversed with\nnumbers remaining the same.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nS = \"5+2*56-2/4\"\n<strong>Output:</strong> 4/2-56*2+5\n<strong>Explanation</strong>: The equation is reversed with\nnumbers remaining the same.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>reverseEqn()&nbsp;</strong>which takes the string S representing the equation as input and returns the resultant string representing the equation in reverse.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(|S|).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=|S|&lt;=10<sup>5</sup><br />The string contains only the characters '0' - '9', '+', '-', '*', and '/'.</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Try traversing the string from last but make sure that the numbers are not reversed.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n  public:\r\n    string reverseEqn (string s)\r\n        {\r\n            string res = \"\";\r\n            int n = s.length ();\r\n            int i = n - 1;\r\n        \r\n            stack <char> st;\r\n            \r\n            // traversing the string in reverse\r\n            while (i >= 0)\r\n            {\r\n                // we traversed the string in reverse and pushed the characters in the stack\r\n                // this is basically equaivalent to 2 reversals. Hence, we get the \r\n                // numbers/variables in their correct order.\r\n                // for eg, say we have 20\r\n                // stack becomes: 0 2 <- top\r\n                // now, pushing the number in our result, we'll have 20\r\n                if (s[i] == '+' or s[i] == '-' or s[i] == '*' or s[i] == '/')\r\n                {\r\n                    while (!st.empty ())\r\n                    {\r\n                        res += st.top ();\r\n                        st.pop ();\r\n                    }\r\n                    res += s[i];\r\n                }\r\n                else\r\n                    st.push (s[i]);\r\n                i--;\r\n            }\r\n            \r\n            // appending the last number/variable if any\r\n            while (!st.empty ())\r\n            {\r\n                res += st.top ();\r\n                st.pop ();\r\n            }\r\n            \r\n            return res;\r\n        }\r\n        // Contributed By: Pranay Bansal\r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n   \n    String reverseEqn(String S)\n    {\n        // your code here\n        char s[]=S.toCharArray();\n        StringBuilder res = new StringBuilder();\n        int n = S.length();\n        int i = n - 1;\n        \n        Stack<Character> st=new Stack<>();\n            \n        // traversing the string in reverse\n        while (i >= 0)\n        {\n            if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/')\n            {\n                while (!st.isEmpty ())\n                {\n                    res.append(st.pop());\n                }\n                res.append(s[i]);\n            }\n            else\n                st.push(s[i]);\n            i--;\n        }\n        \n            // appending the last number/variable if any\n        while (!st.isEmpty ())\n        {\n            res.append(st.pop());\n        }\n        \n        return res.toString();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def reverseEqn(self, s):\r\n        res = \"\"\r\n        n = len(s)\r\n        i = n - 1\r\n        \r\n        st = []\r\n        \r\n        # # Traversing the string in reverse\r\n        while i >= 0:\r\n            # We traversed the string in reverse and pushed the characters in the stack\r\n            # This is basically equivalent to 2 reversals. Hence, we get the \r\n            # numbers/variables in their correct order.\r\n            # For example, say we have 20\r\n            # Stack becomes: 0 2 <- top\r\n            # Now, pushing the number in our result, we'll have 20\r\n            if s[i] == '+' or s[i] == '-' or s[i] == '*' or s[i] == '/':\r\n                while len(st) > 0:\r\n                    res += st.pop()\r\n                res += s[i]\r\n            else:\r\n                st.append(s[i])\r\n            i -= 1\r\n            \r\n        # Appending the last number/variable if any\r\n        while len(st) > 0:\r\n            res += st.pop()\r\n            \r\n        return res",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for Javascript\r\n\r\n/**\r\n * @param {string} s\r\n * @returns {string}\r\n */\r\n\r\nclass Solution {\r\n    reverseEqn(s) {\r\n        let res = \"\";\r\n        let n = s.length;\r\n        let i = n - 1;\r\n\r\n        let st = [];\r\n\r\n        // traversing the string in reverse\r\n        while (i >= 0) {\r\n            // we traversed the string in reverse and pushed the characters in the stack\r\n            // this is basically equivalent to 2 reversals. Hence, we get the \r\n            // numbers/variables in their correct order.\r\n            // for eg, say we have 20\r\n            // stack becomes: 0 2 <- top\r\n            // now, pushing the number in our result, we'll have 20\r\n            if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/') {\r\n                while (st.length > 0) {\r\n                    res += st.pop();\r\n                }\r\n                res += s[i];\r\n            } else {\r\n                st.push(s[i]);\r\n            }\r\n            i--;\r\n        }\r\n\r\n        // appending the last number/variable if any\r\n        while (st.length > 0) {\r\n            res += st.pop();\r\n        }\r\n\r\n        return res;\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public string reverseEqn(string s)\n    {\n        string res = \"\";\n        int n = s.Length;\n        int i = n - 1;\n        \n        Stack<char> st = new Stack<char>();\n        \n        // traversing the string in reverse\n        while (i >= 0)\n        {\n            // we traversed the string in reverse and pushed the characters in the stack\n            // this is basically equaivalent to 2 reversals. Hence, we get the \n            // numbers/variables in their correct order.\n            // for eg, say we have 20\n            // stack becomes: 0 2 <- top\n            // now, pushing the number in our result, we'll have 20\n            if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/')\n            {\n                while (st.Count > 0)\n                {\n                    res += st.Peek();\n                    st.Pop();\n                }\n                res += s[i];\n            }\n            else\n                st.Push(s[i]);\n            i--;\n        }\n        \n        // appending the last number/variable if any\n        while (st.Count > 0)\n        {\n            res += st.Peek();\n            st.Pop();\n        }\n        \n        return res;\n    }\n    // Contributed By: Pranay Bansal\n\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}