{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704985,
            "title": "Right angled  triangles",
            "titleSlug": "right-angled-triangles4729",
            "content": "<p><span style=\"font-size:18px\">Given three integers <strong>a</strong>, <strong>b</strong> and <strong>c</strong>. The task is to check if it is possible to make right angled triangle with sides of length a, b and c.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>a = </strong>3, <strong>b = </strong>4, <strong>c = </strong>5</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">Yes</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">We can form a right angled triangle\r\nwith sides of length 3, 4 and 5.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>a = </strong>2, <strong>b = </strong>5, <strong>c = </strong>8</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">No</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">We can&#39;t form a right angled triangle\r\nwith sides of length 2, 5 and 8.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>rightAngTri()</strong> which takes 3 Integers a,b and c as input and returns &quot;Yes&quot; if it is possible to form a right angled triangle with sides of length a, b, and c, else return &quot;No&quot;.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log(max(a,b,c)))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= a,b,c &lt;= 10<sup>8</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three integers a, b, and c, determine if it's possible to form a right-angled triangle with sides of lengths a, b, and c. The function should return \"Yes\" if possible, and \"No\" otherwise.",
                "constraints": [
                    "1 <= a, b, c <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "a = 3, b = 4, c = 5",
                        "output": "Yes",
                        "explanation": "A triangle with sides 3, 4, and 5 satisfies the Pythagorean theorem (3^2 + 4^2 = 5^2), hence it is a right-angled triangle."
                    },
                    {
                        "input": "a = 2, b = 5, c = 8",
                        "output": "No",
                        "explanation": "No combination of sides 2, 5, and 8 satisfies the Pythagorean theorem (a^2 + b^2 = c^2), thus it's not a right-angled triangle."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Be careful about overflow of integers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\n\r\nclass Solution {\r\n  public:\r\n  \r\n    // Function to check pythagorean triplets \r\n    bool Triplets(long long a, long long b, long long c) \r\n    { \r\n        if (a <= 0 || b <= 0 || c <= 0) \r\n            return false; \r\n      \r\n        vector<long long> vec{ a, b, c }; \r\n        sort(vec.begin(), vec.end()); \r\n      \r\n        // Re-initialize a, b, c in ascending order \r\n        a = vec[0], b = vec[1], c = vec[2]; \r\n      \r\n        // Check validation of sides of triangle \r\n        if (a + b <= c) \r\n            return false; \r\n      \r\n        long long p1 = a, p2 = c - b; \r\n      \r\n        // Reduce fraction to simplified form \r\n        long long div = __gcd(p1, p2); \r\n        p1 /= div, p2 /= div; \r\n      \r\n        long long q1 = c + b, q2 = a; \r\n      \r\n        // Reduce fraction to simplified form \r\n        div = __gcd(q1, q2); \r\n        q1 /= div, q2 /= div; \r\n      \r\n        // If fraction are equal return \r\n        // 'true' else 'false' \r\n        return (p1 == q1 && p2 == q2); \r\n    } \r\n    \r\n    string rightAngTri(long long a, long long b, long long c) {\r\n        \r\n        bool ans=(Triplets(a, b, c));\r\n        \r\n\t    if(ans)\r\n\t        return \"Yes\";\r\n\t    else\r\n\t        return \"No\";\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public string rightAngTri(long a, long b, long c)\n    {\n        if (a <= 0 || b <= 0 || c <= 0) \n            return \"No\";\n      \n        long[] vec = new long[]{ a, b, c }; \n        Array.Sort(vec); \n      \n        // Re-initialize a, b, c in ascending order \n        a = vec[0]; b = vec[1]; c = vec[2]; \n      \n        // Check validation of sides of triangle \n        if (a + b <= c) \n            return \"No\";\n      \n        long p1 = a, p2 = c - b; \n      \n        // Reduce fraction to simplified form \n        long div = GCD(p1, p2); \n        p1 /= div; p2 /= div; \n      \n        long q1 = c + b, q2 = a; \n      \n        // Reduce fraction to simplified form \n        div = GCD(q1, q2); \n        q1 /= div; q2 /= div; \n      \n        // If fraction are equal return \n        // 'Yes' else 'No' \n        if (p1 == q1 && p2 == q2)\n            return \"Yes\";\n        else\n            return \"No\";\n    }\n    \n    private long GCD(long a, long b)\n    {\n        while (b != 0)\n        {\n            long temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}