{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700153,
            "title": "Right View of Binary Tree",
            "titleSlug": "right-view-of-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Tree, Your task is to return the values visible from <strong>Right view</strong> of it.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\"> Right view of a Binary Tree is set of nodes visible when tree is viewed from <strong>right </strong>side.</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [1, 2, 3, 4, 5]\n&nbsp; &nbsp; &nbsp;<img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20240909100757/2_2.webp\" alt=\"2_2\" width=\"246\" height=\"219\" />\n<strong>Output: </strong>[1, 3, 5]\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [1, 2, 3, 4, N, N, 5]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20240909100541/Right-view-in-binary-tree-1.webp\" alt=\"Right-view-in-binary-tree-1\" width=\"244\" height=\"217\" />\n<strong>Output: </strong>[1, 3, 4, 5]</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [10, 20, 90, 40, 60]\n &nbsp;&nbsp;&nbsp;&nbsp;10\n &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;\\\n &nbsp;20&nbsp; &nbsp;&nbsp; 90\n /&nbsp;&nbsp; \\\n40&nbsp; 60 \n<strong>Output: </strong>[10, 90, 60]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; number of nodes &le; 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">0 &le; node-&gt;data &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree, your task is to return the values visible from the right view of the tree.\n\nThe right view of a Binary Tree is the set of nodes visible when the tree is viewed from the right side.  This means, for each level of the tree, you should return the rightmost node.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "0 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5]",
                        "output": "[1, 3, 5]",
                        "explanation": "The right view of the provided binary tree is [1, 3, 5]."
                    },
                    {
                        "input": "[1, 2, 3, 4, null, null, 5]",
                        "output": "[1, 3, 5]",
                        "explanation": "The right view of the provided binary tree is [1, 3, 5]."
                    },
                    {
                        "input": "[10, 20, 90, 40, 60]",
                        "output": "[10, 90, 60]",
                        "explanation": "The right view of the provided binary tree is [10, 90, 60]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You can use a level-order traversal (BFS) to capture the last node at each level for the right view.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "snapdeal",
            "makemytrip",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Recursive function to print right view of a binary tree.\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to get the right view of the binary tree.\r\n    void rightViewUtil(vector<int> &vec,struct Node *root,int level,int *max_level)\r\n    {\r\n        //if root is null, we simply return.\r\n        if (root==NULL)  return;\r\n    \r\n         //if this is the last node of its level then it is in the right view.\r\n        if (*max_level < level)\r\n        {\r\n            vec.push_back(root->data);\r\n            *max_level = level;\r\n        }\r\n    \r\n        //calling function recursively for right and left \r\n        //subtrees of current node.\r\n        rightViewUtil(vec, root->right, level+1, max_level);\r\n        rightViewUtil(vec, root->left, level+1, max_level);\r\n    }\r\n    \r\n    public:\r\n    //Function to return list containing elements of right view of binary tree.\r\n    vector<int> rightView(struct Node *root)\r\n    {\r\n        int max_level = 0;\r\n        vector<int> vec;\r\n        rightViewUtil(vec,root, 1, &max_level);\r\n        //returning the list.\r\n        return vec;\r\n    }\r\n};\r\n\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    int max_level = 0;\n\n    // Function to get the right view of the binary tree.\n    void rightViewUtil(ArrayList<Integer> arr, Node root, int level) {\n        // if root is null, we simply return.\n        if (root == null) return;\n\n        // if this is the last node of its level then it is in the right view.\n        if (max_level < level) {\n            // storing data of current node in list.\n            arr.add(root.data);\n            max_level = level;\n        }\n\n        // calling function recursively for right and left\n        // subtrees of current node.\n        rightViewUtil(arr, root.right, level + 1);\n        rightViewUtil(arr, root.left, level + 1);\n    }\n\n    // Function to return list containing elements of right view of binary tree.\n    ArrayList<Integer> rightView(Node root) {\n        ArrayList<Integer> arr = new ArrayList<Integer>();\n        rightViewUtil(arr, root, 1);\n        // returning the list.\n        return arr;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to get the right view of the binary tree.\r\n    def rightViewUtil(self,result, root, level, max_level): \r\n          \r\n        #if root is null, we simply return. \r\n        if root is None: \r\n            return\r\n          \r\n        #if this is the last node of its level then it is in the right view.\r\n        if (max_level[0] < level):\r\n            \r\n            #storing data of current node in list.\r\n            result.append(root.data) \r\n            max_level[0] = level \r\n      \r\n        #calling function recursively for right and left \r\n        #subtrees of current node.\r\n        self.rightViewUtil(result, root.right, level+1, max_level) \r\n        self.rightViewUtil(result, root.left, level+1, max_level) \r\n    \r\n    #Function to return list containing elements of right view of binary tree. \r\n    def rightView(self,root): \r\n        max_level = [0] \r\n        result = []\r\n        self.rightViewUtil(result,root, 1, max_level) \r\n        #returning the list.\r\n        return result\r\n\r\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\r\n\r\n    class Solution\r\n    {\r\n        //Function to get the right view of the binary tree.\r\n        void rightViewUtil(ref List<int> vec,Node root, int level,ref int max_level)\r\n        {\r\n            //if root is null, we simply return.\r\n            if (root==null)  return;\r\n            \r\n            //if this is the first node of its level then it is in the right view.\r\n            if (max_level < level)\r\n            {\r\n                //storing data of current node in list.\r\n                vec.Add(root.data);\r\n                max_level = level;\r\n            }\r\n            \r\n            //calling function recursively for right and left subtrees of current node\r\n            rightViewUtil(ref vec,root.right, level+1, ref max_level);\r\n            rightViewUtil(ref vec,root.left, level+1,ref max_level);\r\n        }\r\n        //Function to return a list containing elements of right view of the binary tree\r\n        public List<int> rightView(Node root)\r\n        {\r\n            int max_level = 0;\r\n            List<int> vec = new List<int> ();\r\n            rightViewUtil(ref vec,root, 1, ref max_level);\r\n            //returning the list.\r\n            return vec;\r\n        }\r\n    }\r\n\r\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\r\nclass Solution {\r\n    rightViewUtil(result, root, level, max_level) {\r\n    //if root is null, we simply return.\r\n    if (root == null) {\r\n      return;\r\n    }\r\n\r\n    //if this is the last node of its level then it is in the right view.\r\n    if (max_level[0] < level) {\r\n      //storing data of current node in list.\r\n      result.push(root.data);\r\n      max_level[0] = level;\r\n    }\r\n\r\n    //calling function recursively for right and left\r\n    //subtrees of current node.\r\n    this.rightViewUtil(result, root.right, level+1, max_level);\r\n    this.rightViewUtil(result, root.left, level+1, max_level);\r\n  }\r\n    rightView(root)\r\n    {\r\n        //your code here\r\n        let max_level = [0];\r\n    let result = [];\r\n    this.rightViewUtil(result, root, 1, max_level);\r\n    //returning the list.\r\n    return result;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}