{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701153,
            "title": "Rightmost different bit",
            "titleSlug": "rightmost-different-bit-1587115621",
            "content": "<p><span >Given two numbers <strong>m</strong> and <strong>n</strong>. The task is to find the position of the&nbsp;rightmost <strong>different</strong> bit in the binary representation of numbers.&nbsp;If both m and n are the same then return -1 in this case.</span></p>\n<p><span ><strong>Examples:&nbsp;</strong></span></p>\n<pre><span ><strong>Input: </strong>m = 11, n = 9\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Binary representation of the given numbers are: 1011 and 1001, 2nd bit from right is different.</span></pre>\n<pre><span ><strong>Input: </strong>m = 52, n = 4\n<strong>Output</strong>: 5\n<strong>Explanation</strong>: Binary representation of the given numbers are: 110100 and 0100, 5th-bit from right is different.<br /></span></pre>\n<pre><span ><strong>Input: </strong>m = 29, n = 15\n<strong>Output</strong>: 4\n<strong>Explanation</strong>: Binary representation of the given numbers are: 29 in binary is 11101, 15 in binary is 01111. The 4th bit from the right is different.</span></pre>\n<p><span ><strong>Constraints:</strong><br />0 &lt;= m, n &lt;= 10<sup>9</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, `m` and `n`, determine the position of the rightmost bit that differs between their binary representations.  If `m` and `n` are equal, return -1.",
                "constraints": [
                    "0 <= m <= 10^9",
                    "0 <= n <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "m = 11, n = 9",
                        "output": "2",
                        "explanation": "The binary representation of 11 is 1011, and the binary representation of 9 is 1001. The 2nd bit from the right is the first bit that differs."
                    },
                    {
                        "input": "m = 52, n = 4",
                        "output": "5",
                        "explanation": "The binary representation of 52 is 110100, and the binary representation of 4 is 000100. The 5th bit from the right is the first bit that differs."
                    },
                    {
                        "input": "m = 29, n = 15",
                        "output": "4",
                        "explanation": "The binary representation of 29 is 11101, and the binary representation of 15 is 01111. The 4th bit from the right is the first bit that differs."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use XOR operation.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to get rightmost set bit.\r\n    int getRightMostSetBit(int n)\r\n    {\r\n        //returning the rightmost set bit of a number.\r\n        return log2(n & -n) + 1; \r\n    }\r\n    \r\n    //Function to find the first position with different bits.\r\n    int posOfRightMostDiffBit(int m, int n)\r\n    {\r\n        //if numbers are same then -1 is returned.\r\n        if(m==n)\r\n            return -1;\r\n        \r\n        //XOR operation only sets the dissimilar bits and unsets similar bits.\r\n        //We do XOR operation on the numbers and return the rightmost set bit.\r\n        return getRightMostSetBit(m ^ n); \r\n    }\r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to get rightmost set bit.\n    public static int getRightMostSetBit(int n) {\n        if (n == 0) return 0;\n\n        // returning the rightmost set bit of a number.\n        return (int)(Math.log(n & -n) / Math.log(2.0)) + 1;\n    }\n\n    // Function to find the first position with different bits.\n    public static int posOfRightMostDiffBit(int m, int n) {\n        // if numbers are same then -1 is returned.\n        if (m == n) {\n            return -1;\n        }\n\n        // XOR operation only sets the dissimilar bits and unsets similar bits.\n        // We do XOR operation on the numbers and return the rightmost set bit.\n        return getRightMostSetBit(m ^ n);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to get rightmost set bit.\n    def getRightMostSetBit(self, n):\n        #returning the rightmost set bit of a number.\n        return math.log2(n & -n) + 1\n\n    #Function to find the first position with different bits.\n    def posOfRightMostDiffBit(self, m, n):\n\n        #if numbers are same then -1 is returned.\n        if m == n:\n            return -1\n\n        #XOR operation only sets the dissimilar bits and unsets similar bits.\n        #We do XOR operation on the numbers and return the rightmost set bit.\n        return self.getRightMostSetBit(m ^ n)\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Function to get rightmost set bit.\n    public int getRightMostSetBit(int n) {\n        // returning the rightmost set bit of a number.\n        int count = 0;\n        while ((n & 1) == 0) {\n            n >>= 1;\n            count++;\n        }\n        return count + 1;\n    }\n\n    // Function to find the first position with different bits.\n    public int posOfRightMostDiffBit(int m, int n) {\n        // if numbers are same then -1 is returned.\n        if (m == n) return -1;\n\n        // XOR operation only sets the dissimilar bits and unsets similar bits.\n        // We do XOR operation on the numbers and return the rightmost set bit.\n        return getRightMostSetBit(m ^ n);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Number} m\n * @param {Number} n\n * @returns {Number}\n */\nclass Solution {\n    // Function to get rightmost set bit.\n    getRightMostSetBit(n) {\n        // returning the rightmost set bit of a number.\n        return Math.log2(n & -n) + 1;\n    }\n\n    // Function to find the first position with different bits.\n    posOfRightMostDiffBit(m, n) {\n        // if numbers are same then -1 is returned.\n        if (m == n) return -1;\n\n        // XOR operation only sets the dissimilar bits and unsets similar bits.\n        // We do XOR operation on the numbers and return the rightmost set bit.\n        return this.getRightMostSetBit(m ^ n);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}