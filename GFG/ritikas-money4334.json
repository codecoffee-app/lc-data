{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705040,
            "title": "Ritika's Money",
            "titleSlug": "ritikas-money4334",
            "content": "<p><span style=\"font-size:18px\">Ritika has a&nbsp;coin of &nbsp;$N but she is the type of person who loves to have as much money as possible. A coin of $N can be exchanged in a bank into three coins of: $n/2, $n/3 and $n/4. But these numbers are all rounded down. Ritika decides to exchange her coin in the greed of money and makes profit. Your task is to find the maximum amout of money she can have at the end of exchange.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 5\n<strong>Output: </strong>5\n<strong>Explanation: </strong>5 =&gt; 5/2 + 5/3 + 5/4 = 2 + 1 \n+ 1 = 4 &lt; 5 which means 5 can&#39;t be \nexchanged to earn profit so it itself is \nthe maximum amount.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 12\n<strong>Output: </strong>13\n<strong>Explanation: </strong>12 =&gt; 12/2 + 12/3 + 12/4 = 6 + 4\n+ 3 = 13 (&gt;12) after exchange.Now 6,4,3 can&#39;t \nbe exchanged further to get profit.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>MaxExchangeMoney()</strong>&nbsp;which takes N as input parameter and returns maximum amount of money she can make by exchanging.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>&nbsp;O(log(N))<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(K) where K is constant.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>10</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Ritika has a coin of value N and wants to maximize her money by exchanging it at a bank. The bank offers the following exchange: a coin of value N can be exchanged for three coins of value N/2, N/3, and N/4 (where the results of the division are rounded down to the nearest integer). Ritika wants to repeatedly exchange the coins to maximize her total amount. Determine the maximum amount of money Ritika can have after exchanging her initial coin and any resulting coins.",
                "constraints": [
                    "1 <= N <= 10^10"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "5",
                        "explanation": "Exchanging 5 yields 5/2 + 5/3 + 5/4 = 2 + 1 + 1 = 4. Since 4 < 5, Ritika keeps the original coin of value 5 for maximum profit."
                    },
                    {
                        "input": "12",
                        "output": "13",
                        "explanation": "Exchanging 12 yields 12/2 + 12/3 + 12/4 = 6 + 4 + 3 = 13. Since 13 > 12, Ritika exchanges the coin. Subsequent exchanges of 6, 4, and 3 do not yield a profit, so the final amount is 13."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Optimize your solution by memoizing.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Misc",
                "slug": "misc"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    //map to store previously calculated values for optimization\n    map<long long int, long long int>mp;\n    \n    //Function to calculate the maximum exchange money.\n    long long int MaxExchangeMoney(long long int N) {\n        //checking if the value is already present in map, return the result\n        if(mp.find(N) != mp.end())\n            return mp[N];\n        \n        long long int change;\n        \n        //if N is greater than or equal to 12, perform calculations\n        if(N >= 12){\n            //recursively calling the function for different combinations\n            change = MaxExchangeMoney(N/2) + MaxExchangeMoney(N/3) + MaxExchangeMoney(N/4);\n            \n            //comparing the calculated result with N, take the maximum \n            change = (change > N) ? change : N;\n        }\n        else return N;\n        \n        //storing the calculated result in the map\n        mp[N] = change;\n        \n        //return the maximum exchange money\n        return change;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}