{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703296,
            "title": "Rod Cutting",
            "titleSlug": "rod-cutting0840",
            "content": "<p><span style=\"font-size: 18px;\">Given a rod of length <strong>n</strong>(size of price)&nbsp;inches and an array of prices, <strong>price</strong>. price[i] denotes the value of a piece of length i. Determine the <strong>maximum </strong>value obtainable by cutting up the rod and selling the pieces.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> </span><span style=\"font-size: 18px;\">price[] = [1, 5, 8, 9, 10, 17, 17, 20]</span><br /><span style=\"font-size: 18px;\"><strong>Output:</strong> </span><span style=\"font-size: 18px;\">22</span><br /><span style=\"font-size: 18px;\"><strong>Explanation:</strong> </span><span style=\"font-size: 18px;\">The maximum obtainable value is 22 by </span><span style=\"font-size: 18px;\">cutting in two pieces of lengths 2 and&nbsp;</span><span style=\"font-size: 18px;\">6, i.e., 5+17=22.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">price[] = [3, 5, 8, 9, 10, 17, 17, 20]</span><br /><span style=\"font-size: 18px;\"><strong>Output: </strong>24</span><br /><span style=\"font-size: 18px;\"><strong>Explanation:&nbsp;</strong></span><span style=\"font-size: 18px;\">The maximum obtainable value is&nbsp;</span><span style=\"font-size: 18px;\">24 by cutting the rod into 8 pieces&nbsp;</span><span style=\"font-size: 18px;\">of length 1, i.e, 8*price[1]= 8*3 = 24.<br /></span></pre>\n<pre><strong>Input: </strong>price[] = [1, 10, 3, 1, 3, 1, 5, 9]<br /><strong>Output: </strong>40</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br /></span><span style=\"font-size: 18px;\">1 &le; price.size() &le; 10<sup>3</sup><br /></span><span style=\"font-size: 18px;\">1 &le; price[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a rod of length `n` inches and an array `price`, where `price[i]` denotes the value of a piece of length `i+1`, determine the maximum value obtainable by cutting up the rod and selling the pieces.",
                "constraints": [
                    "1 <= price.size() <= 10^3",
                    "1 <= price[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "price[] = [1, 5, 8, 9, 10, 17, 17, 20]",
                        "output": "22",
                        "explanation": "The maximum obtainable value is 22 by cutting the rod into pieces of lengths 2 and 6, yielding a profit of 5 + 17 = 22."
                    },
                    {
                        "input": "price[] = [3, 5, 8, 9, 10, 17, 17, 20]",
                        "output": "24",
                        "explanation": "The maximum obtainable value is 24 by cutting the rod into 8 pieces of length 1, resulting in 8 * price[0] = 8 * 3 = 24."
                    },
                    {
                        "input": "price[] = [1, 10, 3, 1, 3, 1, 5, 9]",
                        "output": "40",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >This is a dp problem where you need to store the states so as to avoid overlapping cases.The dp state for this problem is maximum price for length 'x'.</span><br /><span >&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the maximum obtainable value for a given rod length\n    int cutRod(vector<int> &price) {\n        int n = price.size();\n        // Create an array to store the maximum value for each length\n        vector<int> dp(n + 1);\n\n        // Loop through each possible length\n        for (int i = 1; i <= n; i++) {\n            int max_val = -1;\n\n            // Loop through each possible cut length\n            for (int j = 0; j < i; j++)\n\n                // Update the maximum value if a new maximum is found\n                max_val = max(max_val, price[j] + dp[i - j - 1]);\n\n            // Store the maximum value for the current length\n            dp[i] = max_val;\n        }\n\n        // Return the maximum obtainable value for the given rod length\n        return dp[n];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int cutRod(int[] price) {\n        int n = price.length;\n        // create a new array to store the maximum value for each length of rod\n        int dp[] = new int[n + 1];\n\n        // base case: if the length of rod is 0, the maximum value is 0\n        dp[0] = 0;\n\n        // iterate through all possible lengths of rod\n        for (int i = 1; i <= n; i++) {\n            int max_val = Integer.MIN_VALUE;\n\n            // for each length of rod, try all possible cuts and find the maximum value\n            for (int j = 0; j < i; j++) {\n                max_val = Math.max(max_val, price[j] + dp[i - j - 1]);\n            }\n\n            // store the maximum value for the current length of rod\n            dp[i] = max_val;\n        }\n\n        // return the maximum value for the given length of rod\n        return dp[n];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    # Function to find the maximum obtainable value by cutting the rod\n    def cutRod(self, price):\n        n = len(price)\n        # Create a list to store the maximum obtainable value for each length of rod\n        dp = [0] * (n + 1)\n\n        # Iterate through each length of rod\n        for i in range(1, n + 1):\n\n            # Initialize the maximum value to -1 for each length of rod\n            max_val = -1\n\n            # Iterate through each possible cut in the rod\n            for j in range(i):\n\n                # Calculate the maximum obtainable value by considering different cuts\n                max_val = max(max_val, price[j] + dp[i - j - 1])\n\n            # Store the maximum obtainable value for the current length of rod\n            dp[i] = max_val\n\n        # Return the maximum obtainable value for the given length of rod\n        return dp[n]\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} price\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find the maximum possible value of the function.\n    cutRod(price) {\n        let n = price.length;\n        // Create a list to store the maximum obtainable value for each length of rod\n        let dp = new Array(n + 1).fill(0);\n\n        // Iterate through each length of rod\n        for (let i = 1; i <= n; i++) {\n\n            // Initialize the maximum value to -1 for each length of rod\n            let max_val = -1;\n\n            // Iterate through each possible cut in the rod\n            for (let j = 0; j < i; j++) {\n\n                // Calculate the maximum obtainable value by considering different cuts\n                max_val = Math.max(max_val, price[j] + dp[i - j - 1]);\n            }\n\n            // Store the maximum obtainable value for the current length of rod\n            dp[i] = max_val;\n        }\n\n        // Return the maximum obtainable value for the given length of rod\n        return dp[n];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}