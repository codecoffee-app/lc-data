{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701228,
            "title": "Roof Top",
            "titleSlug": "roof-top-1587115621",
            "content": "<p><span ><span style=\"font-family: arial,helvetica,sans-serif;\">You are given the heights of consecutive buildings. You can move from the roof of a building to the roof of the next adjacent building. You need to find the maximum number of consecutive steps you can put forward such that you gain an increase in altitude with each step.</span></span></p>\n<p><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Examples:</strong></span></span></p>\n<pre><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input: </strong>arr[] = [1, 2, 2, 3, 2]\n<strong>Output: </strong>1<strong>\nExplanation: </strong>1, 2, or 2, 3 are the only consecutive buildings with increasing heights thus maximum number of consecutive steps with an increase in gain in altitude would be 1 in both cases.</span>\n</span></pre>\n<pre><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4]\n<strong>Output: </strong>3<strong>\nExplanation: </strong>1 to 2 to 3 to 4 is the jump of length 3 to have a maximum number of buildings with increasing heights, so maximum steps with increasing altitude becomes 3.</span></span></pre>\n<p><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></span></p>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= arr[i]<sub>&nbsp;</sub>&lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Traverse the array to count consecutive increases in altitude, and track the maximum streak of such increases.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to find maximum number of consecutive steps\n    // to gain an increase in altitude with each step.\n    int maxStep(vector<int>& arr) {\n        int c = 0;\n        int m = 0;\n\n        // iterating over the array elements from index 1(2nd element).\n        for (int i = 1; i < arr.size(); i++) {\n            // if current element is greater than previous element, we gain an\n            // increase in altitude so we increment the counter.\n            if (arr[i] > arr[i - 1])\n                c++;\n\n            // else we have to compare the counter with max value stored.\n            else {\n                // updating the max value and making the counter 0 again.\n                m = max(c, m);\n                c = 0;\n            }\n        }\n        m = max(c, m);\n\n        // returning the maximum value.\n        return m;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to find maximum number of consecutive steps\n    // to gain an increase in altitude with each step.\n    public int maxStep(int arr[]) {\n\n        int c = 0;\n        int m = 0;\n\n        // iterating over the array elements from index 1(2nd element).\n        for (long i = 1; i < arr.length; i++) {\n            // if current element is greater than previous element, we gain an\n            // increase in altitude so we increment the counter.\n            if (arr[(int)i] > arr[(int)i - 1]) c++;\n\n            // else we have to compare the counter with max value stored.\n            else {\n                // updating the max value and making the counter 0 again.\n                m = Math.max(c, m);\n                c = 0;\n            }\n        }\n        m = Math.max(c, m);\n\n        // returning the maximum value.\n        return m;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to find maximum number of consecutive steps\n    #to gain an increase in altitude with each step.\n    def maxStep(self, arr):\n        c = 0\n        m = 0\n\n        #iterating over the array elements from index 1(2nd element).\n        for i in range(1, len(arr)):\n\n            #if current element is greater than previous element, we gain an\n            #increase in altitude so we increment the counter.\n            if (arr[i] > arr[i - 1]):\n                c += 1\n\n            #else we have to compare the counter with max value stored.\n            else:\n\n                #updating the max value and making the counter 0 again.\n                m = max(c, m)\n                c = 0\n        m = max(c, m)\n\n        #returning the maximum value.\n        return m\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find maximum number of consecutive steps\n    // to gain an increase in altitude with each step.\n    maxStep(arr) {\n        let c = 0;\n        let m = 0;\n\n        // iterating over the array elements from index 1(2nd element).\n        for (let i = 1; i < arr.length; i++) {\n            // if current element is greater than previous element, we gain an\n            // increase in altitude so we increment the counter.\n            if (arr[i] > arr[i - 1]) c++;\n\n            // else we have to compare the counter with max value stored.\n            else {\n                // updating the max value and making the counter 0 again.\n                m = Math.max(c, m);\n                c = 0;\n            }\n        }\n        m = Math.max(c, m);\n\n        // returning the maximum value.\n        return m;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}