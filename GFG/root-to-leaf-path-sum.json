{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700225,
            "title": "Root to leaf path sum",
            "titleSlug": "root-to-leaf-path-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary <strong>tree </strong>and an integer <strong>target</strong>, check whether there is a root-to-leaf path with its sum as <strong>target</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>target = 2<strong><br /></strong>   1 \n /   \\\n2     3</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> false</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>There is no root to leaf path with sum 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>target = 4<strong><br /></strong>   1\n /   \\\n2     3</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> true</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>The sum of path from leaf node 3 to root 1 is 4.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>4</sup><br />1 &le; target &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree and an integer target, determine if there exists a root-to-leaf path whose node values sum up to the target value.",
                "constraints": [
                    "1 <= number of nodes <= 10^4",
                    "1 <= target <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "target = 2, tree = {1, 2, 3}",
                        "output": "false",
                        "explanation": "There is no path from root to leaf that sums to 2.  Possible paths are 1->2 (sum 3) and 1->3 (sum 4)."
                    },
                    {
                        "input": "target = 4, tree = {1, 2, 3}",
                        "output": "true",
                        "explanation": "The path from root to leaf 1->3 sums to 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Algorithm:<br />\nRecursively check if left or right child has path sum equal to ( number &ndash; value at current node)</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "microsoft",
            "samsung",
            "factset",
            "housing.com",
            "oracle",
            "goldman-sachs",
            "adobe",
            "coupondunia",
            "atlassian"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if there is a path in the tree with a given sum.\n    bool hasPathSum(Node *root, int target) {\n        // If the root is NULL, check if the remaining sum is 0.\n        if (root == NULL) {\n            return (target == 0);\n        }\n\n        bool ans = false;\n        int subSum = target - root->data;\n\n        // If the remaining sum is 0 and the root has no children, return true.\n        if (subSum == 0 and root->left == NULL and root->right == NULL)\n            return true;\n\n        // Recursively check if there is a path with the remaining sum in the left and\n        // right subtrees.\n        if (root->left)\n            ans = ans || hasPathSum(root->left, subSum);\n        if (root->right)\n            ans = ans || hasPathSum(root->right, subSum);\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    boolean hasPathSum(Node root, int target) {\n        if (root == null) {\n            return (target == 0); // check if sum is 0 when root is null\n        }\n\n        boolean ans = false;\n\n        /* otherwise check both subtrees */\n        int subsum = target - root.data; // calculate the remaining sum by subtracting\n                                         // the current root's value\n        if (subsum == 0 && root.left == null &&\n            root.right ==\n                null) {  // check if the remaining sum is 0 and it is a leaf root\n            return true; // if so, return true\n        }\n        if (root.left != null) {\n            ans = ans ||\n                  hasPathSum(root.left, subsum); // recursively check the left subtree\n        }\n        if (root.right != null) {\n            ans = ans ||\n                  hasPathSum(root.right, subsum); // recursively check the right subtree\n        }\n        return ans; // return the result\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def hasPathSum(self, root, target):\n\n        # Return true if we run out of tree and s = 0\n        if root is None:\n            return (target == 0)\n\n        else:\n            ans = 0\n\n            # Otherwise check both subtrees\n            subSum = target - root.data\n\n            # If we reach a leaf root and sum becomes 0, then\n            # return True\n            if (subSum == 0 and root.left == None and root.right == None):\n                return True\n\n            if root.left is not None:\n                ans = ans or self.hasPathSum(root.left, subSum)\n            if root.right is not None:\n                ans = ans or self.hasPathSum(root.right, subSum)\n\n            return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    hasPathSum(root, target) {\n        if (root === null) {\n            return (target === 0); // Return true if S is 0 and there is no root\n        }\n\n        let ans = false;\n\n        /* otherwise check both subtrees */\n        let subsum =\n            target -\n            root.key; // Update subsum with the difference between S and root key\n        if (subsum === 0 && root.left === null && root.right === null) {\n            return true; // Return true if subsum is 0 and there are no left and right\n                         // subtrees\n        }\n        if (root.left !== null) {\n            ans = ans || this.hasPathSum(root.left,\n                                         subsum); // Recursively check the left subtree\n        }\n        if (root.right !== null) {\n            ans = ans || this.hasPathSum(root.right,\n                                         subsum); // Recursively check the right subtree\n        }\n        return ans; // Return the final answer\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}