{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700553,
            "title": "Root to Leaf Paths",
            "titleSlug": "root-to-leaf-paths",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">Given a <strong>Binary Tree</strong>, you need to <strong>find all the possible paths</strong> from the <strong>root node</strong> to all the <strong>leaf nodes</strong> of the binary tree. </span></span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><strong>Note:</strong> The paths should be returned such that paths from the left subtree of any node are listed first, followed by paths from the right subtree.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root[] = [1, 2, 3, 4, 5]\n<img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20241007105251989873/ex-3.webp\" alt=\"ex-3\" width=\"276\" height=\"245\" />\n<strong>Output: </strong>[[1, 2, 4], [1, 2, 5], [1, 3]] \n<strong>Explanation: </strong>All possible paths: 1-&gt;2-&gt;4, 1-&gt;2-&gt;5 and 1-&gt;3</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root[] = [1, 2, 3]\n\\t 1\n    /     \\\n   2\\t 3\n<strong>Output: </strong>[[1, 2], [1, 3]] \n<strong>Explanation: </strong>All possible paths: 1-&gt;2 and 1-&gt;3</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root[] = [10, 20, 30, 40, 60]\n&nbsp;\\t  10\n&nbsp;\\t/    \\\n&nbsp;     20    30\n&nbsp;    /  \\\n&nbsp;   40   60<strong>\nOutput: </strong>[[10, 20, 40], [10, 20, 60], [10, 30]]<br /></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">All possible paths: 10-&gt;20 -&gt;40, 10-&gt;20-&gt;60 and 10-&gt;30</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=number of nodes&lt;=10<sup>4<br /></sup>1&lt;=node-&gt;data&lt;=10<sup>4</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree, find all possible paths from the root node to all the leaf nodes. The paths should be returned such that paths from the left subtree of any node are listed first, followed by paths from the right subtree.",
                "constraints": [
                    "1 <= number of nodes <= 10^4",
                    "1 <= node->data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "root[] = [1, 2, 3, 4, 5]",
                        "output": "[[1, 2, 4], [1, 2, 5], [1, 3]]",
                        "explanation": "The possible paths from the root to the leaves are 1 -> 2 -> 4, 1 -> 2 -> 5, and 1 -> 3.  The paths are ordered with the left subtree paths first."
                    },
                    {
                        "input": "root[] = [1, 2, 3]",
                        "output": "[[1, 2], [1, 3]]",
                        "explanation": "The possible paths from the root to the leaves are 1 -> 2 and 1 -> 3. The paths are ordered with the left subtree paths first."
                    },
                    {
                        "input": "root[] = [10, 20, 30, 40, 60]",
                        "output": "[[10, 20, 40], [10, 20, 60], [10, 30]]",
                        "explanation": "The possible paths from the root to the leaves are 10 -> 20 -> 40, 10 -> 20 -> 60, and 10 -> 30. The paths are ordered with the left subtree paths first."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a path array path[] to store the current root to the leaf path.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            }
        ],
        "companies": [
            "paytm",
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to convert an array to vector\n/*\n\nDefinition for Binary Tree Node\nstruct Node\n{\n    int data;\n    struct Node* left;\n    struct Node* right;\n\n    Node(int x){\n        data = x;\n        left = right = NULL;\n    }\n};\n*/\n\nclass Solution {\n  public:\n    vector<vector<int>> ans; // Vector to store all the paths from root to leaf nodes.\n    vector<int> curr;        // Temporary vector to store the current path.\n\n    // Helper function to recursively find all the paths\n    void pathsUtil(Node *root) {\n        // Base case: if the current node is NULL, return.\n        if (root == NULL)\n            return;\n\n        // Add the current node's data to the current path.\n        curr.push_back(root->data);\n\n        // If the current node is a leaf node (no left or right child), add the path to\n        // 'ans'.\n        if (root->left == NULL and root->right == NULL) {\n            ans.push_back(curr); // Add the current path to the result (ans).\n        } else {\n            // Recursively visit the left and right subtrees.\n            pathsUtil(root->left);  // Visit the left subtree first.\n            pathsUtil(root->right); // Then visit the right subtree.\n        }\n\n        // After exploring both subtrees, backtrack by removing the current node from\n        // the path.\n        curr.pop_back();\n    }\n\n    // Main function that is called to find all paths\n    vector<vector<int>> Paths(Node *root) {\n        // Start the recursive traversal from the root.\n        pathsUtil(root);\n\n        // Return the result containing all paths from root to leaf nodes.\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "/*\n\nDefinition for Binary Tree Node\nclass Node\n{\n    int data;\n    Node left;\n    Node right;\n\n    Node(int data)\n    {\n        this.data = data;\n        left = null;\n        right = null;\n    }\n}\n*/\n\nclass Solution {\n\n    // Helper function to perform DFS and find all root-to-leaf paths\n    public static void pathsUtil(Node root, ArrayList<ArrayList<Integer>> ans,\n                                 ArrayList<Integer> curr) {\n        // Base case: if the current node is NULL, return\n        if (root == null) {\n            return;\n        }\n\n        // Add the current node's data to the path\n        curr.add(root.data);\n\n        // If it's a leaf node, add the current path to the result\n        if (root.left == null && root.right == null) {\n            ans.add(new ArrayList<>(curr)); // Store the path to ans\n        } else {\n            // Recursively explore the left subtree first\n            pathsUtil(root.left, ans, curr);\n            // Then explore the right subtree\n            pathsUtil(root.right, ans, curr);\n        }\n\n        // Backtrack by removing the last added node from the current path\n        curr.remove(curr.size() - 1);\n    }\n\n    // Main function to return all the root-to-leaf paths\n    public static ArrayList<ArrayList<Integer>> Paths(Node root) {\n        // Result to store all the paths\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();\n        // Temporary list to store the current path\n        ArrayList<Integer> curr = new ArrayList<>();\n\n        // Initialize the helper function with the root node\n        pathsUtil(root, ans, curr);\n\n        // Return the list of all paths\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from typing import Optional\nfrom collections import deque\n\nfrom typing import List\n\"\"\"\n\ndefinition of binary tree node.\nclass Node:\n    def _init_(self,val):\n        self.data = val\n        self.left = None\n        self.right = None\n\"\"\"\n\n\nclass Solution:\n\n    def printArray(self, ints):\n        return list(ints)\n\n    # Utility function to print all paths from root to leaf nodes\n    def printPathsUtil(self, node, path, paths):\n        # If node is None, return\n        if node is None:\n            return\n\n        # Add current node's data to the path\n        path.append(node.data)\n\n        # If node is leaf node, add path to paths vector\n        if node.left is None and node.right is None:\n            paths.append(self.printArray(path))\n        else:\n            # Recursively call printPathsUtil for left and right child\n            self.printPathsUtil(node.left, path, paths)\n            self.printPathsUtil(node.right, path, paths)\n\n        # Remove the current node from the path\n        path.pop()\n\n    # Main function to find all paths from root to leaf nodes\n    def Paths(self, root):\n        # Create an empty list to store all paths\n        paths = []\n\n        # Call the utility function to find paths from root to leaf nodes\n        self.printPathsUtil(root, [], paths)\n\n        # Return all the paths\n        return paths\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "/*\nDefinition for Binary Tree Node\nclass Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n    /**\n     * Function to return all root-to-leaf paths in the binary tree.\n     * @param {Node} root - The root node of the binary tree.\n     * @returns {number[][]} - An array of arrays where each inner array is a path from\n     *     root to leaf.\n     */\n    Paths(root) {\n        // Initialize an array to store all the paths\n        let ans = [];\n        // Temporary array to store the current path\n        let curr = [];\n\n        // Helper function to recursively find all paths\n        function pathsUtil(node) {\n            // Base case: If the current node is null, return\n            if (node === null) {\n                return;\n            }\n\n            // Add the current node's data to the current path\n            curr.push(node.data);\n\n            // If the current node is a leaf node (no left or right child), add the path\n            // to ans\n            if (node.left === null && node.right === null) {\n                ans.push([...curr ]); // Add a copy of the current path to the result\n            } else {\n                // Recursively visit the left and right subtrees\n                pathsUtil(node.left);  // Visit the left subtree first\n                pathsUtil(node.right); // Then visit the right subtree\n            }\n\n            // Backtrack by removing the last node from the current path\n            curr.pop();\n        }\n\n        // Start the recursive traversal from the root\n        pathsUtil(root);\n\n        // Return the list of all paths from root to leaf nodes\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}