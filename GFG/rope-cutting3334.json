{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703181,
            "title": "Rope Cutting",
            "titleSlug": "rope-cutting3334",
            "content": "<p><span style=\"font-size: 18px;\">You are given array <strong>arr</strong> of length of ropes. A cut operation is performed on ropes such that all of them are reduced by the length of the smallest rope. Return the number of ropes left after every cut operation until the length of each rope is zero.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [5, 1, 1, 2, 3, 5] </span>\n<span style=\"font-size: 18px;\"><strong>Output :</strong> [4, 3, 2] </span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong> In the first operation, the minimum ropes are 1 So, we reduce length 1 from all of them after reducing we left with 4 ropes and we do the same for rest. </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [5, 1, 6, 9, 8, 11, 2, 2, 6, 5]<strong>\nOutput :</strong> [9, 7, 5, 3, 2, 1]<br /><strong>Explanation: </strong>In the first operation, </span><span >the minimum ropes are 1 So, we reduce length 1 from all of them after reducing we left with 9 ropes and so on.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1 &le; arr.size() &le; 10<sup>5<br /></sup>1 &le; arr[i] &le; 10<sup>5</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` representing the lengths of ropes, perform a series of cut operations. In each operation, reduce the length of each rope by the length of the shortest rope in the array. Return an array containing the number of ropes remaining after each cut operation until all ropes are of length zero.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[5, 1, 1, 2, 3, 5]",
                        "output": "[4, 3, 2]",
                        "explanation": "Initially, there are 6 ropes. The shortest rope has length 1. After cutting, 4 ropes remain (lengths > 0). Next, the shortest remaining rope has length 2. After cutting, 3 ropes remain. Finally the shortest length is 3 after cutting the length of 2 ropes still remains and the length is 5 so the shortest length is 5 after the cutting operation we have only 2 ropes"
                    },
                    {
                        "input": "[5, 1, 6, 9, 8, 11, 2, 2, 6, 5]",
                        "output": "[9, 7, 5, 3, 2, 1]",
                        "explanation": "Initially, there are 10 ropes. The shortest rope has length 1. After cutting, 9 ropes remain (lengths > 0). Then the shortest length is 2, after cutting there are 7 ropes left. Then the shortest length is 5, after cutting there are 5 ropes left. Then the shortest length is 6, after cutting there are 3 ropes left. Then the shortest length is 8, after cutting there are 2 ropes left. Finally, the shortest rope has length 9, after cutting there is only 1 rope left of length 11."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >First, we have to sort all Ropes in increasing order of their length. after that CuttingLength = Ropes[0] Now Traverse the array .During traverse, we check that is current rope length is greater than zero or not <strong>&nbsp;Ropes[i] - CuttingLength &gt; 0 </strong>IF Yes then all ropes to its right side also greater than 0. Print number of ropes remains <strong>(n - i). </strong>update Cutting Length by current rope length. <strong>CuttingLength = Ropes[i] </strong> Do the same process for the rest.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> RopeCutting(vector<int>& arr) {\n        int n = arr.size();\n\n        // Sort the array to get rope lengths in ascending order\n        sort(arr.begin(), arr.end());\n\n        int sub_sum = arr[0]; // Initialize sub_sum with the first rope length\n        // Result vector to store the number of ropes remaining after each cut\n        vector<int> v;\n\n        if (n == 1) {\n            // If there's only one rope, no cuts can be made\n            v.push_back(0);\n        } else {\n            int count = 0;\n\n            // Iterate through the sorted rope lengths\n            for (int i = 1; i < n; i++) {\n                // Check if the current rope length is greater than the sub_sum\n                if ((arr[i] - sub_sum) > 0) {\n                    sub_sum += arr[i] - sub_sum; // Update the sub_sum\n                    v.push_back(n - i);          // Append the number of remaining ropes\n                    count++;\n                }\n            }\n\n            // If no cuts were made, add 0 to the result vector\n            if (count == 0) {\n                v.push_back(0);\n            }\n        }\n\n        return v;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    public ArrayList<Integer> RopeCutting(int[] arr) {\n        int n = arr.length;\n\n        // Sort the array to get rope lengths in ascending order\n        Arrays.sort(arr);\n\n        int sub_sum = arr[0]; // Initialize sub_sum with the first rope length\n        // Result list to store the number of ropes remaining after each cut\n        ArrayList<Integer> result = new ArrayList<>();\n\n        if (n == 1) {\n            // If there's only one rope, no cuts can be made\n            result.add(0);\n        } else {\n            int count = 0;\n\n            // Iterate through the sorted rope lengths\n            for (int i = 1; i < n; i++) {\n                // Check if the current rope length is greater than the sub_sum\n                if ((arr[i] - sub_sum) > 0) {\n                    sub_sum += arr[i] - sub_sum; // Update the sub_sum\n                    result.add(n - i);           // Append the number of remaining ropes\n                    count++;\n                }\n            }\n\n            // If no cuts were made, add 0 to the result list\n            if (count == 0) {\n                result.add(0);\n            }\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def RopeCutting(self, arr):\n        n = len(arr)\n\n        # Sort the array to get rope lengths in ascending order\n        arr.sort()\n\n        sub_sum = arr[0]  # Initialize sub_sum with the first rope length\n        # Result list to store the number of ropes remaining after each cut\n        result = []\n\n        if n == 1:\n            # If there's only one rope, no cuts can be made\n            result.append(0)\n        else:\n            count = 0\n\n            # Iterate through the sorted rope lengths\n            for i in range(1, n):\n                # Check if the current rope length is greater than the sub_sum\n                if (arr[i] - sub_sum) > 0:\n                    sub_sum += arr[i] - sub_sum  # Update the sub_sum\n                    result.append(n -\n                                  i)  # Append the number of remaining ropes\n                    count += 1\n\n            # If no cuts were made, add 0 to the result list\n            if count == 0:\n                result.append(0)\n\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    RopeCutting(arr) {\n        let n = arr.length;\n\n        // Sort the array to get rope lengths in ascending order\n        arr.sort((a, b) => a - b);\n\n        let sub_sum = arr[0]; // Initialize sub_sum with the first rope length\n        // Result array to store the number of ropes remaining after each cut\n        let result = [];\n\n        if (n === 1) {\n            // If there's only one rope, no cuts can be made\n            result.push(0);\n        } else {\n            let count = 0;\n\n            // Iterate through the sorted rope lengths\n            for (let i = 1; i < n; i++) {\n                // Check if the current rope length is greater than the sub_sum\n                if ((arr[i] - sub_sum) > 0) {\n                    sub_sum += arr[i] - sub_sum; // Update the sub_sum\n                    result.push(n - i);          // Append the number of remaining ropes\n                    count++;\n                }\n            }\n\n            // If no cuts were made, add 0 to the result array\n            if (count === 0) {\n                result.push(0);\n            }\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}