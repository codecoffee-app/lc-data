{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701213,
            "title": "Rotate Array",
            "titleSlug": "rotate-array-by-n-elements-1587115621",
            "content": "<p><span >Given an array <em>arr[]</em><em><strong>.</strong></em>&nbsp;Rotate the array to the left (counter-clockwise direction) by<strong> </strong><em>d</em> steps, where <em>d</em> is a positive integer.&nbsp;Do the mentioned change in the&nbsp;<strong>array in place</strong>.</span></p>\n<p><span >Note:<strong> </strong>Consider the array as circular.</span></p>\n<p><span ><strong>Examples :<br /></strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5], d = 2\n<strong>Output: </strong>[3, 4, 5, 1, 2]\n<strong>Explanation:</strong> when rotated by 2 elements, it becomes 3 4 5 1 2.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], d = 3\n<strong>Output: </strong>[8, 10, 12, 14, 16, 18, 20, 2, 4, 6]<strong>\nExplanation: </strong>when rotated by 3 elements, it becomes 8 10 12 14 16 18 20 2 4 6.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [7, 3, 9, 1], d = 9\n<strong>Output: </strong>[3, 9, 1, 7]<strong>\nExplanation: </strong>when we rotate 9 times, we'll get 3 9 1 7 as resultant array.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size(), d &lt;= 10<sup>5</sup></span><br /><span >0 &lt;=&nbsp;arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use three reverse operations:</p>\n<ol>\n<li>Reverse the first <code>d</code> elements.</li>\n<li>Reverse the last <code>n - d</code> elements.</li>\n<li>Reverse the entire array.</li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "maq-software"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "\n\nvoid reverse(int arr[], int start, int end) {\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\n// Function to rotate an array by d elements in a counter-clockwise direction\nvoid rotateArr(int arr[], int n, int d) {\n    d = d % n; // Handle the case when d >= n\n\n    // Reverse the first d elements\n    reverse(arr, 0, d - 1);\n\n    // Reverse the last n-d elements\n    reverse(arr, d, n - 1);\n\n    // Reverse the whole array\n    reverse(arr, 0, n - 1);\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to rotate an array by d elements in counter-clockwise direction.\n    void rotateArr(vector<int>& arr, int d) {\n        int n = arr.size();\n        d %= n;\n        // First reversing d elements from starting index.\n        reverse(arr.begin(), arr.begin() + d);\n        // Then reversing the last n-d elements.\n        reverse(arr.begin() + d, arr.begin() + n);\n        // Finally, reversing the whole array.\n        reverse(arr.begin(), arr.begin() + n);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to reverse any part of the array.\n    static void rvereseArray(int arr[], int start, int end) {\n        int temp;\n\n        while (start < end) {\n            // Swapping values at start index and end index.\n            temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            // Updating the values of start and end.\n            start++;\n            end--;\n        }\n    }\n\n    // Function to rotate an array by d elements in counter-clockwise direction.\n    static void rotateArr(int arr[], int d) {\n        int n = arr.length;\n        d %= n;\n        // First reversing d elements from starting index.\n        rvereseArray(arr, 0, d - 1);\n        // Then reversing the last n-d elements.\n        rvereseArray(arr, d, n - 1);\n        // Finally, reversing the whole array.\n        rvereseArray(arr, 0, n - 1);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to rotate an array by d elements in counter-clockwise direction.\n    def rotateArr(self, arr, d):\n        n = len(arr)\n        d %= n\n        #First reversing d elements from starting index.\n        arr[0:d] = reversed(arr[0:d])\n\n        #Then reversing the last n-d elements.\n        arr[d:n] = reversed(arr[d:n])\n\n        #Finally, reversing the whole array.\n        arr[0:n] = reversed(arr[0:n])\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\nclass Solution {\n    // Function to rotate an array by d elements in counter-clockwise direction.\n    public void RotateArr(int[] arr, int d) {\n        int n = arr.Length;\n        d %= n; // Handle cases where d > n\n\n        // Reverse first d elements\n        Reverse(arr, 0, d - 1);\n        // Reverse the last n-d elements\n        Reverse(arr, d, n - 1);\n        // Reverse the entire array\n        Reverse(arr, 0, n - 1);\n    }\n\n    // Helper function to reverse elements in the array\n    private void Reverse(int[] arr, int start, int end) {\n        while (start < end) {\n            int temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\n//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} d\n * @param {number} n\n * @param {number[]}\n */\n\nclass Solution {\n    // Function to reverse any part of the array.\n    reverseArray(arr, start, end) {\n        let temp;\n\n        while (start < end) {\n            // Swapping values at start index and end index.\n            temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            // Updating the values of start and end.\n            start++;\n            end--;\n        }\n    }\n\n    // Function to rotate an array by d elements in counter-clockwise direction.\n    rotateArr(arr, d) {\n        let n = arr.length;\n        d %= n;\n        // First reversing d elements from starting index.\n        this.reverseArray(arr, 0, d - 1);\n        // Then reversing the last n-d elements.\n        this.reverseArray(arr, d, n - 1);\n        // Finally, reversing the whole array.\n        this.reverseArray(arr, 0, n - 1);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}