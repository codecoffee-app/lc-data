{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703098,
            "title": "Rotate Bits",
            "titleSlug": "rotate-bits4524",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer <strong>N</strong> and an integer <strong>D</strong>, rotate the binary representation of the integer N by D<strong> </strong>digits to the <strong>left </strong>as well as <strong>right </strong>and return the results in their <strong>decimal&nbsp;representation </strong>after each of the rotation.<br />Note: Integer N is stored using <strong>16 bits</strong>. i.e. 12 will be stored as 0000</span><span style=\"font-size: 18px;\">0000</span><span style=\"font-size: 18px;\">0000</span><span style=\"font-size: 18px;\">1100. <strong>Output array</strong> should follow <strong>{leftrotation, rightrotation}.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 28, d = 2\n<strong>Output: </strong>[112, 7]\n<strong>Explanation</strong>: 28 in Binary is: 0000000000011100. Rotating left by 2 positions, it becomes 0000000001110000 = 112 (in decimal). Rotating right by 2 positions, it becomes 0000000000000111 = 7 (in decimal).</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 29, d = 2\n<strong>Output:</strong> [116, 16391]\n<strong>Explanation</strong>: 29 in Binary is: 0000000000011101. Rotating left by 2 positions, it becomes 0000000001110100 = 116 (in decimal). Rotating right by 2 positions, it becomes 010000000000111 = 16391 (in decimal).<br /></span></pre>\n<pre><strong>Input</strong>: n = 11, d = 10\n<strong>Output:</strong> [11264, 704]</pre>\n<p><strong style=\"font-size: 18px;\">Constraints:<br /></strong><span style=\"font-size: 18px;\">1 &lt;= n &lt;&nbsp; 2<sup>16</sup><br />1 &lt;= d &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `N` and an integer `D`, rotate the 16-bit binary representation of `N` by `D` digits to the left and right. Return the decimal representation of the resulting left and right rotations as an array `[left_rotation, right_rotation]`.",
                "constraints": [
                    "1 <= N < 2^16",
                    "1 <= D <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 28, d = 2",
                        "output": "[112, 7]",
                        "explanation": "The binary representation of 28 is 0000000000011100. Rotating left by 2 positions yields 0000000001110000, which is 112 in decimal. Rotating right by 2 positions yields 0000000000000111, which is 7 in decimal."
                    },
                    {
                        "input": "n = 29, d = 2",
                        "output": "[116, 16391]",
                        "explanation": "The binary representation of 29 is 0000000000011101. Rotating left by 2 positions yields 0000000001110100, which is 116 in decimal. Rotating right by 2 positions yields 0100000000000111, which is 16391 in decimal."
                    },
                    {
                        "input": "n = 11, d = 10",
                        "output": "[11264, 704]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use bitwise shifts and masks to rotate the 16-bit binary representation of <code>N</code> by <code>D</code> positions left and right, wrapping overflow bits appropriately.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> rotate(int n, int d) {\n        // rotation of 16 is same as rotation of 0\n        // rotation of 17 is same as rotation of 1\n        // and so on.\n        d = d % 16;\n        vector<int> res(2);\n\n        // storing n in a temporary variable\n        int temp = n;\n\n        int mask = (1 << d) - 1; // picking up the leftmost d bits\n        int shift = (temp & mask);\n        temp = (temp >> d);          // moving the remaining bits to their new location\n        temp += (shift << (16 - d)); // adding removed bits at rightmost end\n        res[1] = temp;               // storing the new number\n\n        temp = n;\n        mask = ~((1 << (16 - d)) - 1); // picking the rightmost d bits\n        shift = (temp & mask);\n        temp = (temp << d);          // moving the remaining bits to their new location\n        temp += (shift >> (16 - d)); // adding removed bits at leftmost end\n        res[0] = temp;               // storing the new number\n\n        mask = (1 << 16) - 1;\n        res[0] = (res[0] & mask);\n\n        return res;\n    }\n\n    // Contributed By: Pranay Bansal\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    ArrayList<Integer> rotate(int n, int d) {\n        // your code here\n        d = d % 16;\n        ArrayList<Integer> res = new ArrayList<>();\n        res.add(0);\n        res.add(0);\n\n        // storing n in a temporary variable\n        int temp = n;\n\n        int mask = (1 << d) - 1; // picking up the leftmost d bits\n        int shift = (temp & mask);\n        temp = (temp >> d);          // moving the remaining bits to their new location\n        temp += (shift << (16 - d)); // adding removed bits at rightmost end\n        res.set(1, temp);            // storing the new number\n\n        temp = n;\n        mask = ~((1 << (16 - d)) - 1); // picking the rightmost d bits\n        shift = (temp & mask);\n        temp = (temp << d);          // moving the remaining bits to their new location\n        temp += (shift >> (16 - d)); // adding removed bits at leftmost end\n        res.set(0, temp);            // storing the new number\n\n        mask = (1 << 16) - 1;\n        res.set(0, (res.get(0) & mask));\n\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def rotate(self, n, d):\n        # Rotation of 16 is the same as rotation of 0\n        # Rotation of 17 is the same as rotation of 1\n        # and so on.\n        d = d % 16\n        res = [0, 0]\n\n        # Storing n in a temporary variable\n        temp = n\n\n        mask = (1 << d) - 1  # Picking up the leftmost d bits\n        shift = (temp & mask)\n        temp = (temp >> d)  # Moving the remaining bits to their new location\n        temp += (shift << (16 - d))  # Adding removed bits at the rightmost end\n        res[1] = temp  # Storing the new number\n\n        temp = n\n        mask = ~((1 << (16 - d)) - 1)  # Picking the rightmost d bits\n        shift = (temp & mask)\n        temp = (temp << d)  # Moving the remaining bits to their new location\n        temp += (shift >> (16 - d))  # Adding removed bits at the leftmost end\n        res[0] = temp  # Storing the new number\n\n        mask = (1 << 16) - 1\n        res[0] = (res[0] & mask)\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    rotate(n, d) {\n        d = d % 16;\n        let res = [ 0, 0 ];\n\n        let temp = n;\n\n        let mask = (1 << d) - 1;\n        let shift = (temp & mask);\n        temp = (temp >> d);\n        temp += (shift << (16 - d));\n        res[1] = temp;\n\n        temp = n;\n        mask = ~((1 << (16 - d)) - 1);\n        shift = (temp & mask);\n        temp = (temp << d);\n        temp += (shift >> (16 - d));\n        res[0] = temp;\n\n        mask = (1 << 16) - 1;\n        res[0] = (res[0] & mask);\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}