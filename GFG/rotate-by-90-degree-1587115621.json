{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701267,
            "title": "Rotate by 90 degree",
            "titleSlug": "rotate-by-90-degree-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">Given a<strong> </strong>square<strong> </strong>matrix <strong>mat</strong>[][] of size <strong>n x n</strong>. The task is to rotate it by<strong> 90 degrees</strong> in an<strong> anti-clockwise</strong> direction without using any extra space.&nbsp;</span><br /><br /><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: mat[][] = [[1, 2, 3],\n&nbsp;\\t\\t   [4, 5, 6]\n&nbsp;\\t\\t   [7, 8, 9]]\n<strong>Output</strong>: Rotated Matrix:\n[3, 6, 9]\n[2, 5, 8]\n[1, 4, 7]\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: mat[][] = [[1, 2],\n&nbsp;\\t\\t   [3, 4]]\n<strong>Output</strong>: Rotated Matrix:\n[2, 4]\n[1, 3]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>2</sup><br />0 &lt;= mat[i][j] &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square matrix `mat` of size n x n, rotate it 90 degrees in an anti-clockwise direction without using any extra space.",
                "constraints": [
                    "1 <= n <= 10^2",
                    "0 <= mat[i][j] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
                        "output": "[[3, 6, 9], [2, 5, 8], [1, 4, 7]]",
                        "explanation": "The matrix is rotated 90 degrees counter-clockwise.  The first row becomes the last column, the second row becomes the second-to-last column, and so on."
                    },
                    {
                        "input": "[[1, 2], [3, 4]]",
                        "output": "[[2, 4], [1, 3]]",
                        "explanation": "The 2x2 matrix is rotated 90 degrees counter-clockwise."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to analyze the transpose of the matrix and find some pattern.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "microsoft",
            "samsung",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nvoid swap(int *xp, int *yp) {\n    int temp = *xp;\n    *xp = *yp;\n    *yp = temp;\n}\n\n// Function to do transpose of mat.\nvoid transpose(int n, int mat[][n]) {\n    for (int i = 0; i < n; i++)\n        for (int j = i; j < n; j++)\n            // swapping elements at (i,j) and (j,i).\n            swap(&mat[i][j], &mat[j][i]);\n}\n\n// after transposing we swap elements of each column (1st with last, 2nd with\n// second last) one by one for finding left rotation of mat by 90 degree.\nvoid reverseColumns(int n, int mat[][n]) {\n    for (int i = 0; i < n; i++)\n        for (int j = 0, k = n - 1; j < k; j++, k--)\n            // swapping elements in each column.\n            swap(&mat[j][i], &mat[k][i]);\n}\n\n// Function to rotate mat anticlockwise by 90 degrees.\nvoid rotateby90(int n, int mat[][n]) {\n    transpose(n, mat);\n    reverseColumns(n, mat);\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to do transpose of mat.\n    void transpose(vector<vector<int>>& mat, int n) {\n        for (int i = 0; i < n; i++)\n            for (int j = i; j < n; j++)\n                // swapping elements at (i,j) and (j,i).\n                swap(mat[i][j], mat[j][i]);\n    }\n\n    // after transposing we swap elements of each column (1st with last, 2nd with\n    // second last) one by one for finding left rotation of mat by 90 degree.\n    void reverseColumns(vector<vector<int>>& mat, int n) {\n        for (int i = 0; i < n; i++)\n            for (int j = 0, k = n - 1; j < k; j++, k--)\n                // swapping elements in each column.\n                swap(mat[j][i], mat[k][i]);\n    }\n\n    // Function to rotate mat anticlockwise by 90 degrees.\n    void rotateby90(vector<vector<int>>& mat) {\n        int n = mat.size();\n        transpose(mat, n);\n        reverseColumns(mat, n);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to do transpose of mat.\n    static void transpose(int mat[][]) {\n        for (int i = 0; i < mat.length; i++)\n            for (int j = i; j < mat[0].length; j++) {\n                // swapping elements at (i,j) and (j,i).\n                int temp = mat[j][i];\n                mat[j][i] = mat[i][j];\n                mat[i][j] = temp;\n            }\n    }\n\n    // after transposing we swap elements of each column (1st with last, 2nd with\n    // second last) one by one for finding left rotation of mat by 90 degree.\n    static void reverseColumns(int mat[][]) {\n        for (int i = 0; i < mat[0].length; i++)\n            for (int j = 0, k = mat[0].length - 1; j < k; j++, k--) {\n                // swapping elements in each column.\n                int temp = mat[j][i];\n                mat[j][i] = mat[k][i];\n                mat[k][i] = temp;\n            }\n    }\n\n    // Function to rotate mat anticlockwise by 90 degrees.\n    static void rotateby90(int mat[][]) {\n        transpose(mat);\n        reverseColumns(mat);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to do transpose of mat.\n    def transpose(self, mat, n):\n        R, C = n, n\n        for i in range(R):\n            for j in range(i, C):\n\n                #swapping elements at (i,j) and (j,i).\n                t = mat[i][j]\n                mat[i][j] = mat[j][i]\n                mat[j][i] = t\n\n    #after transposing we swap elements of each column (1st with last, 2nd with\n    #second last) one by one for finding left rotation of mat by 90 degree.\n    def reverseColumns(self, mat, n):\n        C = n\n        R = n\n        for i in range(C):\n            j = 0\n            k = C - 1\n            while j < k:\n\n                #swapping elements in each column.\n                t = mat[j][i]\n                mat[j][i] = mat[k][i]\n                mat[k][i] = t\n                j += 1\n                k -= 1\n\n    #Function to rotate mat anticlockwise by 90 degrees.\n    def rotateby90(self, mat):\n        n = len(mat)\n        self.transpose(mat, n)\n        self.reverseColumns(mat, n)\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[][]} mat\n */\nclass Solution {\n    // Function to do transpose of mat.\n    transpose(mat, n) {\n        for (let i = 0; i < n; i++)\n            for (let j = i; j < n; j++) {\n                // swapping elements at (i,j) and (j,i).\n                let tmp = mat[i][j];\n                mat[i][j] = mat[j][i];\n                mat[j][i] = tmp;\n            }\n    }\n\n    // after transposing we swap elements of each column (1st with last, 2nd with\n    // second last) one by one for finding left rotation of mat by 90 degree.\n    reverseColumns(mat, n) {\n        for (let i = 0; i < n; i++)\n            for (let j = 0, k = n - 1; j < k; j++, k--) {\n                // swapping elements in each column.\n                let tmp = mat[k][i];\n                mat[k][i] = mat[j][i];\n                mat[j][i] = tmp;\n            }\n    }\n\n    // Function to rotate mat anticlockwise by 90 degrees.\n    rotateby90(mat) {\n        let n = mat.length;\n        this.transpose(mat, n);\n        this.reverseColumns(mat, n);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}