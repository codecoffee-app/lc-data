{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701989,
            "title": "Rotate by 90 degree",
            "titleSlug": "rotate-by-90-degree0356",
            "content": "<p><span style=\"font-size: 18px;\">Given a<strong> </strong>square&nbsp;<strong>mat[][]</strong>. The task is to rotate it by<strong> 90 degrees in clockwise</strong> direction without using any extra space.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>mat[][] = [[1 2 3], [4 5 6], [7 8 9]]\n<strong>Output:</strong>\n7 4 1 <br />8 5 2<br />9 6 3</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>mat[][] = [1 2], [3 4]<br /><strong>Output:<br /></strong>3 1 <br />4 2<br /></span></pre>\n<pre><strong><span >Input: </span></strong><span >mat[][] = [[1]]<br /><strong>Output:<br /></strong></span><span >1</span></pre>\n<p><span style=\"font-size: 18px;\"><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1 &le; mat.size() &le; 1000<br /></span><span style=\"font-size: 18px;\">1 &lt;= mat[][] &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #1e2229; font-family: Nunito; font-size: 16px; background-color: #ffffff;\">When you think about rotating a square matrix 90 degrees clockwise, each element moves to a new position. The top row becomes the right column, the second row becomes the second-right column, and so forth. If we first transpose the matrix and then find reverse of every row, we get the desired result.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "zoho",
            "morgan-stanley",
            "amazon",
            "microsoft",
            "samsung",
            "snapdeal",
            "d-e-shaw"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nvoid rotate(int n, int a[][n]) {\n    // Step 1: Transpose the matrix\n    for (int i = 0; i < n; ++i) {\n        for (int j = i; j < n; ++j) {\n            // Swap elements at (i, j) and (j, i)\n            int temp = a[i][j];\n            a[i][j] = a[j][i];\n            a[j][i] = temp;\n        }\n    }\n\n    // Step 2: Reverse each row\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n / 2; ++j) {\n            // Swap elements in the row\n            int temp = a[i][j];\n            a[i][j] = a[i][n - 1 - j];\n            a[i][n - 1 - j] = temp;\n        }\n    }\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nvoid rotate(vector<vector<int> >& mat) {\n    int n = mat.size();\n\n    // Step 1: Transpose the matrix\n    for (int i = 0; i < n; ++i) {\n        for (int j = i; j < n; ++j) {\n            swap(mat[i][j], mat[j][i]);\n        }\n    }\n\n    // Step 2: Reverse each row\n    for (int i = 0; i < n; ++i) {\n        reverse(mat[i].begin(), mat[i].end());\n    }\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass GFG {\n    static void rotate(int matrix[][]) {\n        int n = matrix.length;\n\n        // Step 1: Transpose the matrix\n        for (int i = 0; i < n; ++i) {\n            for (int j = i; j < n; ++j) {\n                // Swap elements at (i, j) and (j, i)\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n\n        // Step 2: Reverse each row\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n / 2; ++j) {\n                // Swap elements in the row\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[i][n - 1 - j];\n                matrix[i][n - 1 - j] = temp;\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "def rotate(matrix):\n    n = len(matrix)\n\n    # Step 1: Transpose the matrix\n    for i in range(n):\n        for j in range(i + 1, n):  # Start from i + 1 to avoid self-swap\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n\n    # Step 2: Reverse each row\n    for i in range(n):\n        matrix[i].reverse()",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[][]} matrix\n */\nclass Solution {\n    rotate(matrix) {\n        let n = matrix.length;\n\n        // Step 1: Transpose the matrix\n        for (let i = 0; i < n; ++i) {\n            for (let j = i; j < n; ++j) {\n                // Swap elements at (i, j) and (j, i)\n                [matrix[i][j], matrix[j][i]] = [ matrix[j][i], matrix[i][j] ];\n            }\n        }\n\n        // Step 2: Reverse each row\n        for (let i = 0; i < n; ++i) {\n            matrix[i].reverse();\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}