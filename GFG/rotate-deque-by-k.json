{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701662,
            "title": "Rotate Deque By K",
            "titleSlug": "rotate-deque-by-k",
            "content": "<p><span style=\"font-size: 18px;\">Given a deque <strong>dq </strong>containing non-negative integers and a positive integer <strong>k</strong>, the task is to rotate elements of the deque by <strong>k</strong> places in a circular fashion. There will be two rotations which you have to implement depending on the type of rotating query. Below is the description of rotating type and value of <strong>k</strong> for which you have to rotate in circular way:<br /><strong>Type-1. right_Rotate_Deq_ByK():</strong> this function should rotate deque by K places in <strong>a clockwise</strong> fashion.<br /><strong>Type-2. left_Rotate_Deq_ByK():</strong> this function should rotate deque by K places in<strong> an anti-clockwise</strong> fashion.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>dq = [1 2 3 4 5 6], type = 1, k = 2\n<strong>Output:</strong> 5 6 1 2 3 4&nbsp;\n<strong>Explanation:</strong> The query type is 1 and k is 2. So, we need to right rotate dequeue by 2 times. In 1 right rotation we get 6 1 2 3 4 5. In another we get 5 6 1 2 3 4.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> dq = [1 2 3 4 5 6], type = 2, k = 2 \n<strong>Output:</strong> 3 4 5 6 1 2&nbsp;\n<strong>Explanation:</strong> The query type is 2 and k is 2. So, we need to left rotate dequeue by 2 times. In 1 left rotation we get 2 3 4 5 6 1. In another we get 3 4 5 6 1 2.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1 &le; dq.size() &le; 10<sup>5&nbsp;</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a deque `dq` containing non-negative integers and a positive integer `k`, rotate the deque's elements `k` places in a circular fashion. Implement two rotation functions based on the specified type:\n\n*   **Type-1: `right_Rotate_Deq_ByK()`**: Rotate the deque `k` places clockwise.\n*   **Type-2: `left_Rotate_Deq_ByK()`**: Rotate the deque `k` places counter-clockwise.",
                "constraints": [
                    "1 <= dq.size() <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "dq = [1, 2, 3, 4, 5, 6], type = 1, k = 2",
                        "output": "5 6 1 2 3 4",
                        "explanation": "Rotate the deque [1, 2, 3, 4, 5, 6] to the right by 2 positions.  First rotation: [6, 1, 2, 3, 4, 5]. Second rotation: [5, 6, 1, 2, 3, 4]."
                    },
                    {
                        "input": "dq = [1, 2, 3, 4, 5, 6], type = 2, k = 2",
                        "output": "3 4 5 6 1 2",
                        "explanation": "Rotate the deque [1, 2, 3, 4, 5, 6] to the left by 2 positions. First rotation: [2, 3, 4, 5, 6, 1]. Second rotation: [3, 4, 5, 6, 1, 2]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n// Function to rotate deque by k places in anti-clockwise direction.\nvoid left_Rotate_Deq_ByK(deque<int> &dq, int k) {\n    int n = dq.size();\n    // in left rotation k becomes n-(k%n).\n    k = n - (k % n);\n    for (int i = 1; i <= k; i++) {\n        // popping out elements from back of the deque and adding\n        // them to the front of the deque.\n        int val = dq.back();\n        dq.pop_back();\n        dq.push_front(val);\n    }\n}\n\n// Function to rotate deque by k places in clockwise direction.\nvoid right_Rotate_Deq_ByK(deque<int> &dq, int k) {\n    int n = dq.size();\n    // in right rotation k becomes k%n.\n    k = k % n;\n    for (int i = 1; i <= k; i++) {\n        // popping out elements from back of the deque and adding\n        // them to the front of the deque.\n        int val = dq.back();\n        dq.pop_back();\n        dq.push_front(val);\n    }\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n// Function to rotate deque by k places in anti-clockwise direction.\npublic static void left_Rotate_Deq_ByK(ArrayDeque<Integer> deque, int k) {\n    int n = deque.size();\n    // in left rotation k becomes n-(k%n).\n    k = n - (k % n);\n\n    for (int i = 1; i <= k; i++) {\n        // popping out elements from back of the deque and adding\n        // them to the front of the deque.\n        int val = deque.pollLast();\n        deque.addFirst(val);\n    }\n}\n\n// Function to rotate deque by k places in clockwise direction.\npublic static void right_Rotate_Deq_ByK(ArrayDeque<Integer> deque, int k) {\n    int n = deque.size();\n    // in right rotation k becomes k%n.\n    k = k % n;\n\n    for (int i = 1; i <= k; i++) {\n        // popping out elements from back of the deque and adding\n        // them to the front of the deque.\n        int val = deque.pollLast();\n        deque.addFirst(val);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\n#Function to rotate deque by k places in anti-clockwise direction.\ndef left_Rotate_Deq_ByK(deq, k):\n    deq.rotate(-k)\n\n\n#Function to rotate deque by k places in clockwise direction.\ndef right_Rotate_Deq_ByK(deq, k):\n    deq.rotate(k)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n\n    /**\n     * @param {Deque} Deq\n     * @param {number} n\n     * @param {number} k\n     */\n    // Function to rotate deque by k places in anti-clockwise direction.\n    left_Rotate_Deq_ByK(deq, n, k) {\n        // in left rotation k becomes n-(k%n).\n        k = n - (k % n);\n        for (let i = 1; i <= k; i++) {\n            // popping out elements from back of the deque and adding\n            // them to the front of the deque.\n            let val = deq.back();\n            deq.pop_back();\n            deq.push_front(val);\n        }\n    }\n\n    /**\n     * @param {Deque} Deq\n     * @param {number} n\n     * @param {number} k\n     */\n    // Function to rotate deque by k places in clockwise direction.\n    right_Rotate_Deq_ByK(deq, n, k) {\n        // in right rotation k becomes k%n.\n        k = k % n;\n        for (let i = 1; i <= k; i++) {\n            // popping out elements from back of the deque and adding\n            // them to the front of the deque.\n            let val = deq.back();\n            deq.pop_back();\n            deq.push_front(val);\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}