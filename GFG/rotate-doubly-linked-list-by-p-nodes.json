{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700705,
            "title": "Rotate doubly Linked List",
            "titleSlug": "rotate-doubly-linked-list-by-p-nodes",
            "content": "<p><span style=\"font-size: 18px;\">Given a doubly linked list, rotate the linked list counter-clockwise by P nodes. Here P is a given positive integer and is smaller than the count of nodes(N) in a linked list.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong><span style=\"font-size: 18px;\"><strong> </strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> Doubly Linkedlist: 1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 4 &lt;-&gt; 5 &lt;-&gt; 6 ,p = 2</span>\n<strong><span style=\"font-size: 18px;\">Output:</span> </strong><span style=\"font-size: 18px;\">3 &lt;-&gt; 4 &lt;-&gt; 5 &lt;-&gt; 6 &lt;-&gt; 1 &lt;-&gt; 2</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Doubly linked list after rotating</span>\n<span style=\"font-size: 18px;\">2</span> <span style=\"font-size: 18px;\">nodes is: 3 4 5 6 1 2.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">Doubly Linkedlist:</span><strong><span style=\"font-size: 18px;\"> </span></strong><span style=\"font-size: 18px;\">3 &lt;-&gt; 4 &lt;-&gt; 5 &lt;-&gt; 1 ,p = 3</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 1 &lt;-&gt; 3 &lt;-&gt; 4 &lt;-&gt; 5<br /></span></pre>\n<pre><strong>Input: </strong>Doubly Linkedlist:<strong> </strong>1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 1 ,p = 2\n<strong>Output:</strong> 3 &lt;-&gt; 1 &lt;-&gt; 2</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1 &lt;= p &lt;=&nbsp; 10<sup>5</sup><br />2 &lt;= number of nodes &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a doubly linked list, rotate it counter-clockwise by P nodes. P is a positive integer smaller than the number of nodes (N) in the list.",
                "constraints": [
                    "1 <= P <= 10^5",
                    "2 <= Number of nodes <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "Doubly Linkedlist: 1 <-> 2 <-> 3 <-> 4 <-> 5 <-> 6 , p = 2",
                        "output": "3 <-> 4 <-> 5 <-> 6 <-> 1 <-> 2",
                        "explanation": "After rotating the list counter-clockwise by 2 positions, the element at the 3rd position becomes the head of the list."
                    },
                    {
                        "input": "Doubly Linkedlist: 3 <-> 4 <-> 5 <-> 1 , p = 3",
                        "output": "1 <-> 3 <-> 4 <-> 5",
                        "explanation": "After rotating the list counter-clockwise by 3 positions, the element at the 4th position becomes the head of the list."
                    },
                    {
                        "input": "Doubly Linkedlist: 1 <-> 2 <-> 3 <-> 1 , p = 2",
                        "output": "3 <-> 1 <-> 2",
                        "explanation": "After rotating the list counter-clockwise by 2 positions, the element at the 3rd position becomes the head of the list."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>To rotate the doubly linked list by <code>p</code> positions, make the list circular temporarily by connecting the tail to the head. Then, move the head and tail pointers <code>p</code> steps forward and break the circular connection to get the rotated list.</p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node *rotateDLL(Node *head, int p) {\n\n        Node *tail = head;\n\n        // Find the last node\n        while (tail->next) {\n            tail = tail->next;\n        }\n\n        // Make the list circular\n        tail->next = head;\n        head->prev = tail;\n\n        // Move head and tail by the given position\n        for (int count = 1; count <= p; count++) {\n            head = head->next;\n            tail = tail->next;\n        }\n\n        // Break the circular connection\n        tail->next = nullptr;\n        head->prev = nullptr;\n\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public Node rotateDLL(Node head, int p) {\n        Node tail = head;\n\n        // Find the last node\n        while (tail.next != null) {\n            tail = tail.next;\n        }\n\n        // Make the list circular\n        tail.next = head;\n        head.prev = tail;\n\n        // Move head and tail by the given position\n        for (int count = 1; count <= p; count++) {\n            head = head.next;\n            tail = tail.next;\n        }\n\n        // Break the circular connection\n        tail.next = null;\n        head.prev = null;\n\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def rotateDLL(self, head, p):\n        tail = head\n\n        # Find the last node\n        while tail.next:\n            tail = tail.next\n\n        # Make the list circular\n        tail.next = head\n        head.prev = tail\n\n        # Move head and tail by the given position\n        for _ in range(p):\n            head = head.next\n            tail = tail.next\n\n        # Break the circular connection\n        tail.next = None\n        head.prev = None\n\n        return head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    rotateDLL(head, p) {\n        let tail = head;\n\n        // Find the last node\n        while (tail.next) {\n            tail = tail.next;\n        }\n\n        // Make the list circular\n        tail.next = head;\n        head.prev = tail;\n\n        // Move head and tail by the given position\n        for (let count = 1; count <= p; count++) {\n            head = head.next;\n            tail = tail.next;\n        }\n\n        // Break the circular connection\n        tail.next = null;\n        head.prev = null;\n\n        return head;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}