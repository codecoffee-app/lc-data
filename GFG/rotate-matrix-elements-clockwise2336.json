{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705185,
            "title": "Rotate matrix elements clockwise",
            "titleSlug": "rotate-matrix-elements-clockwise2336",
            "content": "<p><span style=\"font-size:18px\">Given two integers M, N, and a 2D matrix Mat of dimensions MxN, clockwise rotate the elements in it.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nM=3,N=3\nMat=[[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong>\n4 1 2\n7 5 3\n8 9 6\n<strong>Explanation:</strong>\nRotating the matrix clockwise gives this result.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nM=2,N=3\nMat=[[1,2,3],[2,3,3]]\n<strong>Output:</strong>\n2 1 2\n3 3 3\n<strong>Explanation:</strong>\nRotating the matrix clockwise gives this result.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>rotateMatrix()</strong> which takes two integers M, N, and a 2D matrix as input parameters and returns the clockwise rotated matrix.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(M*N)<br />\n<strong>Expected Auxillary Space:</strong>O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=M,N,Mat[i][j]&lt;=1000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D matrix `Mat` of dimensions M x N, rotate the elements in the matrix clockwise.",
                "constraints": [
                    "1 <= M, N, Mat[i][j] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "M=3, N=3, Mat=[[1,2,3],[4,5,6],[7,8,9]]",
                        "output": "[[4, 1, 2], [7, 5, 3], [8, 9, 6]]",
                        "explanation": "Rotating the matrix clockwise results in the given output."
                    },
                    {
                        "input": "M=2, N=3, Mat=[[1,2,3],[2,3,3]]",
                        "output": "[[2, 1, 2], [3, 3, 3]]",
                        "explanation": "Rotating the matrix clockwise results in the given output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The whole matrix needs to be clockwise rotated, not just the outer layer.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    vector<vector<int>> rotateMatrix(int M, int N, vector<vector<int>> Mat) {\n        int row = 0, col = 0;\n        int prev, curr;\n        int a = M, b = N;\n\n        /*\n        row - Staring row index\n        M - ending row index\n        col - starting column index\n        N - ending column index\n        i - iterator\n        */\n        while (row < M && col < N) {\n\n            if (row + 1 == M || col + 1 == N) break;\n\n            // Store the first element of next row, this\n            // element will replace first element of current\n            // row\n            prev = Mat[row + 1][col];\n\n            /* Move elements of first row from the remaining rows */\n            for (int i = col; i < N; i++) {\n                curr = Mat[row][i];\n                Mat[row][i] = prev;\n                prev = curr;\n            }\n            row++;\n\n            /* Move elements of last column from the remaining columns */\n            for (int i = row; i < M; i++) {\n                curr = Mat[i][N - 1];\n                Mat[i][N - 1] = prev;\n                prev = curr;\n            }\n            N--;\n\n            /* Move elements of last row from the remaining rows */\n            if (row < M) {\n                for (int i = N - 1; i >= col; i--) {\n                    curr = Mat[M - 1][i];\n                    Mat[M - 1][i] = prev;\n                    prev = curr;\n                }\n            }\n            M--;\n\n            /* Move elements of first column from the remaining rows */\n            if (col < N) {\n                for (int i = M - 1; i >= row; i--) {\n                    curr = Mat[i][col];\n                    Mat[i][col] = prev;\n                    prev = curr;\n                }\n            }\n            col++;\n        }\n        // Return rotated matrix\n        return Mat;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    int[][] rotateMatrix(int M, int N, int Mat[][]) {\n        int row = 0, col = 0;\n        int prev, curr;\n        int a = M, b = N;\n\n        /*\n        row - Staring row index\n        M - ending row index\n        col - starting column index\n        N - ending column index\n        i - iterator\n        */\n        while (row < M && col < N) {\n\n            if (row + 1 == M || col + 1 == N) break;\n\n            // Store the first element of next row, this\n            // element will replace first element of current\n            // row\n            prev = Mat[row + 1][col];\n\n            /* Move elements of first row from the remaining rows */\n            for (int i = col; i < N; i++) {\n                curr = Mat[row][i];\n                Mat[row][i] = prev;\n                prev = curr;\n            }\n            row++;\n\n            /* Move elements of last column from the remaining columns */\n            for (int i = row; i < M; i++) {\n                curr = Mat[i][N - 1];\n                Mat[i][N - 1] = prev;\n                prev = curr;\n            }\n            N--;\n\n            /* Move elements of last row from the remaining rows */\n            if (row < M) {\n                for (int i = N - 1; i >= col; i--) {\n                    curr = Mat[M - 1][i];\n                    Mat[M - 1][i] = prev;\n                    prev = curr;\n                }\n            }\n            M--;\n\n            /* Move elements of first column from the remaining rows */\n            if (col < N) {\n                for (int i = M - 1; i >= row; i--) {\n                    curr = Mat[i][col];\n                    Mat[i][col] = prev;\n                    prev = curr;\n                }\n            }\n            col++;\n        }\n        // Print rotated matrix\n        return Mat;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def rotateMatrix(self, M, N, Mat):\n        row,col=0,0\n        a,b=M,N\n        prev,curr=0,0\n        \"\"\"\n        row - Staring row index\n        M - ending row index\n        col - starting column index\n        N - ending column index\n        i - iterator\n        \"\"\"\n        while row<M and col<N:\n            if row+1==M or col+1==N:\n                break\n            # Store the first element of next row, this\n            # element will replace first element of current\n            # row\n            prev = Mat[row+1][col];\n            \n            #Move elements of first row from the remaining rows \n            for i in range(col,N):\n                curr=Mat[row][i]\n                Mat[row][i]=prev\n                prev=curr\n                \n            row+=1\n            \n            #Move elements of last column from the remaining columns \n            for i in range(row,M):\n                curr=Mat[i][N-1]\n                Mat[i][N-1]=prev\n                prev=curr\n                \n            N-=1\n            \n            #Move elements of last row from remaining rows\n            \n            if row<M:\n                for i in range(N-1,col-1,-1):\n                    curr=Mat[M-1][i]\n                    Mat[M-1][i]=prev\n                    prev=curr\n            \n            M-=1\n            \n            #Move elements of first column from the remaining rows\n            \n            if col<N:\n                for i in range(M-1,row-1,-1):\n                    curr=Mat[i][col]\n                    Mat[i][col]=prev\n                    prev=curr\n                    \n            col+=1\n             \n            #Return rotated Matrix\n        return Mat",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}