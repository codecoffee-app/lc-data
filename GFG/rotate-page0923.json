{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705742,
            "title": "Rotate Page",
            "titleSlug": "rotate-page0923",
            "content": "<p><span style=\"font-size:18px\">You are given three points <strong>a(a1, a2), b(b1, b2)&nbsp;</strong>and<strong> c(c1, c2)</strong> on a page. Find if it&rsquo;s possible to rotate the page in any direction by any angle, such that the new position of <strong>a</strong>&nbsp;is same as the old position of<strong> b</strong>, and the new position of <strong>b</strong>&nbsp;is same as the old position of <strong>c</strong>.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \na1 = 1, a2 = 1\nb1 = 1, b2 = 1\nc1 = 1, c2 = 0\n<strong>Output:</strong>&nbsp;0\n<strong>Explanation</strong>: Not possible.</span><span style=\"font-size:18px\">\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: \n</strong>a1 = 0, a2 = 1\nb1 = 1, b2 = 1\nc1 = 1, c2 = 0\n<strong>Output:&nbsp;</strong>1\n<strong>Explanation</strong>: Rotate the page by 90 degree.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>possibleOrNot()&nbsp;</strong>which takes a1, a2, b1, b2, c1&nbsp;and c2&nbsp;as input parameters and returns 1 if it is possible to rotate the page&nbsp;or 0 otherwise.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n0 &le; a1, a2, b1, b2, c1, c2&nbsp;&le;&nbsp;100</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three points a(a1, a2), b(b1, b2), and c(c1, c2) on a plane, determine if it's possible to rotate the plane by any angle such that the new position of point 'a' coincides with the original position of point 'b', and the new position of point 'b' coincides with the original position of point 'c'.",
                "constraints": [
                    "0 <= a1, a2, b1, b2, c1, c2 <= 100"
                ],
                "testcases": [
                    {
                        "input": "a1 = 1, a2 = 1\nb1 = 1, b2 = 1\nc1 = 1, c2 = 0",
                        "output": "0",
                        "explanation": "The distances between points a and b, and b and c are not equal, making the rotation impossible."
                    },
                    {
                        "input": "a1 = 0, a2 = 1\nb1 = 1, b2 = 1\nc1 = 1, c2 = 0",
                        "output": "1",
                        "explanation": "A 90-degree rotation allows point 'a' to move to the position of 'b', and 'b' to move to the position of 'c'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Rotation of page by some angle is only possible if the distance between points a&nbsp;and b&nbsp;is equal to distance between points b&nbsp;and c.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    //Function to check if three given points form an isosceles triangle.\n    int possibleOrNot(int a1, int a2, int b1, int b2, int c1, int c2){\n    //Calculating the distance squared between points a and b.\n    int dis1 = pow(b1 - a1, 2) + pow(b2 - a2, 2);\n    //Calculating the distance squared between points b and c.\n    int dis2 = pow(c1 - b1, 2) + pow(c2 - b2, 2);\n    //Checking if the distances are equal. If not, return 0.\n    if(dis1 != dis2)return 0;\n    else return 1;\n}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public int possibleOrNot(int a1, int a2, int b1, int b2, int c1, int c2)\n    {\n        //Calculating the distance squared between points a and b.\n        int dis1 = (int)Math.Pow(b1 - a1, 2) + (int)Math.Pow(b2 - a2, 2);\n        //Calculating the distance squared between points b and c.\n        int dis2 = (int)Math.Pow(c1 - b1, 2) + (int)Math.Pow(c2 - b2, 2);\n        //Checking if the distances are equal. If not, return 0.\n        if (dis1 != dis2) return 0;\n        else return 1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}