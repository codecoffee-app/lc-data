{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702712,
            "title": "Find Kth Rotation",
            "titleSlug": "rotation4723",
            "content": "<p><span style=\"font-size: 18px;\">Given an increasing sorted rotated array <strong>arr </strong>of distinct integers. The array is right-rotated&nbsp;<strong>k</strong>&nbsp;times. Find the value of&nbsp;<strong>k</strong>.<br />Let's suppose we have an array arr = [2, 4, 6, 9], so if we rotate it by 2 times so that it will look like this:<br />After 1st Rotation : [9, 2, 4, 6]<br />After 2nd Rotation : [6, 9, 2, 4]</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [5, 1, 2, 3, 4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The given array is 5 1 2 3 4. The original sorted array is 1 2 3 4 5. We can see that the array was rotated 1 times to the right.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [1, 2, 3, 4, 5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The given array is not rotated.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(log(n))<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;=10<sup>5</sup><br />1 &lt;= arr<sub>i</sub>&nbsp;&lt;= 10<sup>7</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an increasing sorted array `arr` of distinct integers that has been right-rotated `k` times, find the value of `k`. In other words, determine how many positions the array was shifted to the right.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= arr[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "[5, 1, 2, 3, 4]",
                        "output": "1",
                        "explanation": "The array [5, 1, 2, 3, 4] is a rotated version of the sorted array [1, 2, 3, 4, 5]. It has been rotated one position to the right."
                    },
                    {
                        "input": "[1, 2, 3, 4, 5]",
                        "output": "0",
                        "explanation": "The array [1, 2, 3, 4, 5] is already sorted and has not been rotated."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use binary search to find the index of the minimum element in the rotated sorted array, which indicates the number of rotations.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "abco"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Returns count of rotations for an array which\n    // is first sorted in ascending order, then rotated\n    int countRotations(vector<int> &arr, int low, int high) {\n        // This condition is needed to handle the case\n        // when the array is not rotated at all\n        if (high < low)\n            return 0;\n\n        // If there is only one element left\n        if (high == low)\n            return low;\n\n        // Find mid\n        int mid = low + (high - low) / 2; /*(low + high)/2;*/\n\n        // Check if element (mid+1) is minimum element.\n        // Consider the cases like {3, 4, 5, 1, 2}\n        if (mid < high && arr[mid + 1] < arr[mid])\n            return (mid + 1);\n\n        // Check if mid itself is minimum element\n        if (mid > low && arr[mid] < arr[mid - 1])\n            return mid;\n\n        // Decide whether we need to go to left half or\n        // right half\n        if (arr[high] > arr[mid])\n            return countRotations(arr, low, mid - 1);\n\n        return countRotations(arr, mid + 1, high);\n    }\n\n  public:\n    int findKRotation(vector<int> &arr) {\n        int n = arr.size();\n        return countRotations(arr, 0, n - 1);\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Returns count of rotations for an array which\n    // is first sorted in ascending order, then rotated\n    private int countRotations(List<Integer> arr, int low, int high) {\n        // This condition is needed to handle the case\n        // when the array is not rotated at all\n        if (high < low) return 0;\n\n        // If there is only one element left\n        if (high == low) return low;\n\n        // Find mid\n        int mid = low + (high - low) / 2;\n\n        // Check if element (mid+1) is minimum element.\n        // Consider the cases like {3, 4, 5, 1, 2}\n        if (mid < high && arr.get(mid + 1) < arr.get(mid)) return (mid + 1);\n\n        // Check if mid itself is minimum element\n        if (mid > low && arr.get(mid) < arr.get(mid - 1)) return mid;\n\n        // Decide whether we need to go to left half or\n        // right half\n        if (arr.get(high) > arr.get(mid)) return countRotations(arr, low, mid - 1);\n\n        return countRotations(arr, mid + 1, high);\n    }\n\n    public int findKRotation(List<Integer> arr) {\n        int n = arr.size();\n        return countRotations(arr, 0, n - 1);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Returns count of rotations for an array which\n    # is first sorted in ascending order, then rotated\n    def countRotations(self, arr, low, high):\n        # This condition is needed to handle the case\n        # when the array is not rotated at all\n        if high < low:\n            return 0\n\n        # If there is only one element left\n        if high == low:\n            return low\n\n        # Find mid\n        mid = low + (high - low) // 2\n\n        # Check if element (mid+1) is minimum element.\n        # Consider the cases like {3, 4, 5, 1, 2}\n        if mid < high and arr[mid + 1] < arr[mid]:\n            return mid + 1\n\n        # Check if mid itself is minimum element\n        if mid > low and arr[mid] < arr[mid - 1]:\n            return mid\n\n        # Decide whether we need to go to left half or right half\n        if arr[high] > arr[mid]:\n            return self.countRotations(arr, low, mid - 1)\n\n        return self.countRotations(arr, mid + 1, high)\n\n    def findKRotation(self, arr):\n        n = len(arr)\n        return self.countRotations(arr, 0, n - 1)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    // Returns count of rotations for an array which\n    // is first sorted in ascending order, then rotated\n    countRotations(arr, low, high) {\n        // This condition is needed to handle the case\n        // when the array is not rotated at all\n        if (high < low) return 0;\n\n        // If there is only one element left\n        if (high === low) return low;\n\n        // Find mid\n        let mid = low + Math.floor((high - low) / 2);\n\n        // Check if element (mid+1) is minimum element.\n        // Consider the cases like {3, 4, 5, 1, 2}\n        if (mid < high && arr[mid + 1] < arr[mid]) return mid + 1;\n\n        // Check if mid itself is minimum element\n        if (mid > low && arr[mid] < arr[mid - 1]) return mid;\n\n        // Decide whether we need to go to left half or\n        // right half\n        if (arr[high] > arr[mid]) return this.countRotations(arr, low, mid - 1);\n\n        return this.countRotations(arr, mid + 1, high);\n    }\n\n    findKRotation(arr) {\n        let n = arr.length;\n        return this.countRotations(arr, 0, n - 1);\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}