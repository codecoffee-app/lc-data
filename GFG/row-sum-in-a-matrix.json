{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878019,
            "title": "Row Sum in a Matrix",
            "titleSlug": "row-sum-in-a-matrix",
            "content": "<p><span >Given a 2-D integer matrix <strong>mat[][]</strong> of size <strong>n</strong>*<strong>m</strong>. Return a list of integers where <strong>list[i]&nbsp;</strong>represents the sum of elements of the&nbsp;<strong>i<sup>th</sup>&nbsp;</strong>row of the matrix.</span></p>\n<p><strong><span >Examples:</span></strong></p>\n<pre><strong><span >Input: </span></strong><span >mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]<br /></span><strong><span >Output: </span></strong><span >[6, 15, 24]<br /><strong>Explanation: </strong>Row 1 -&gt; 1+2+3=6, Row 2 -&gt; 4+5+6=15, Row 3 -&gt; 7+8+9=24 </span></pre>\n<pre><strong><span >Input: </span></strong><span >mat = [[1, 2], [10, 2], [3, 3]]<br /></span><strong><span >Output: </span></strong><span >[3, 12, 6]<br /><strong>Explanation: </strong>Row 1 -&gt; 1+2=3, Row 2 -&gt; 10+2=12, Row 3 -&gt; 3+3=6 </span></pre>\n<p><strong><span >Constraints:<br /></span></strong><span >1 &nbsp;&lt;= &nbsp;n, m &nbsp;&lt;= &nbsp;1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2-D integer matrix `mat` of size n*m, calculate the sum of elements for each row. Return a list where each element represents the sum of the corresponding row in the matrix.",
                "constraints": [
                    "1 <= n, m <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
                        "output": "[6, 15, 24]",
                        "explanation": "The sum of the first row (1+2+3) is 6, the sum of the second row (4+5+6) is 15, and the sum of the third row (7+8+9) is 24."
                    },
                    {
                        "input": "[[1, 2], [10, 2], [3, 3]]",
                        "output": "[3, 12, 6]",
                        "explanation": "The sum of the first row (1+2) is 3, the sum of the second row (10+2) is 12, and the sum of the third row (3+3) is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<int> rowSum(vector<vector<int>>& mat) {\n        vector<int> ans;\n        int n = mat.size();\n        int m = mat[0].size();\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = 0; j < m; j++) {\n                sum += mat[i][j];\n            }\n            ans.push_back(sum);\n        }\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public static int[] rowSum(int mat[][]) {\n        int ans[] = new int[mat.length];\n        int n = mat.length;\n        int m = mat[0].length;\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = 0; j < m; j++) {\n                sum += mat[i][j];\n            }\n            ans[i] = sum;\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def rowSum(self, mat):\n        ans = []\n        n = len(mat)\n        m = len(mat[0])\n        for i in range(n):\n            sum_row = sum(mat[i])\n            ans.append(sum_row)\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\nclass Solution {\n    rowSum(mat) {\n        let ans = [];\n        let n = mat.length;\n        let m = mat[0].length;\n        for (let i = 0; i < n; i++) {\n            let sum = 0;\n            for (let j = 0; j < m; j++) {\n                sum += mat[i][j];\n            }\n            ans.push(sum);\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}