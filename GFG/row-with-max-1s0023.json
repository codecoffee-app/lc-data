{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702950,
            "title": "Row with max 1s",
            "titleSlug": "row-with-max-1s0023",
            "content": "<p><span >You are given a 2D binary array <code><strong>arr[][]</strong></code> consisting of only <code>1</code>s and <code>0</code>s. Each row of the array is sorted in non-decreasing order. Your task is to find and return the index of the first row that contains the maximum number of <code>1</code>s. If no such row exists, return <code>-1</code>.</span></p>\n<p><span ><strong>Note:</strong></span></p>\n<ul>\n<li><span >The array follows 0-based indexing.</span></li>\n<li><span >The number of rows and columns in the array are denoted by <code>n</code> and <code>m</code> respectively.</span></li>\n</ul>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[][] = [[0,1,1,1], [0,0,1,1], [1,1,1,1], [0,0,0,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Row 2 contains the most number of <code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">s (4 </span><code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">s). Hence, the output is </span><code>2</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span></span></pre>\n<pre><span ><strong>Input: </strong>arr[][] = [[0,0], [1,1]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Row 1 contains the most number of <code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">s (2 </span><code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">s). Hence, the output is </span><code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span></span></pre>\n<pre><span ><strong>Input: </strong>arr[][] = [[0,0], [0,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> No row contains any <code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">s, so the output is </span><code>-1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size(), arr[i].size()&nbsp;&le; 10<sup>3<br /></sup>0 &le; arr[i][j] &le; 1&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D binary array `arr[][]` of 1s and 0s where each row is sorted in non-decreasing order, find the index of the first row that contains the maximum number of 1s. The array uses 0-based indexing. If no row contains any 1s, return -1.",
                "constraints": [
                    "1 <= arr.size(), arr[i].size() <= 10^3",
                    "0 <= arr[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[[0,1,1,1], [0,0,1,1], [1,1,1,1], [0,0,0,0]]",
                        "output": "2",
                        "explanation": "Row 2 has the most 1s (4 ones)."
                    },
                    {
                        "input": "[[0,0], [1,1]]",
                        "output": "1",
                        "explanation": "Row 1 has the most 1s (2 ones)."
                    },
                    {
                        "input": "[[0,0], [0,0]]",
                        "output": "-1",
                        "explanation": "No row contains any 1s."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse each row from right to left, keeping track of the row with the maximum 1s encountered.</p>",
            "<p><span >To solve in O(n + m) start from the top right corner of the matrix and keep track of the index of the row which has maximum 1s. Go left if you encounter 1, Go down if you encounter 0, Stop when you reach the last row or first column.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "snapdeal"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int rowWithMax1s(vector<vector<int>> &arr) {\n        int numRows = arr.size();\n        int numCols = arr[0].size();\n        int currentRow = 0;\n        int currentCol = numCols - 1;\n        int maxRowIndex = -1;\n\n        // Traverse the matrix starting from the top-right corner\n        while (currentRow < numRows && currentCol >= 0) {\n            if (arr[currentRow][currentCol] == 1) {\n                maxRowIndex = currentRow;\n                currentCol--; // Move left if a 1 is found\n            } else {\n                currentRow++; // Move down if a 0 is found\n            }\n        }\n\n        return maxRowIndex;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int rowWithMax1s(int arr[][]) {\n        int n = arr.length;\n        int m = arr[0].length;\n        int r = 0;              // Keeps track of row; starts at first row\n        int c = m - 1;          // Keeps track of column; starts at last column\n        int max_row_index = -1; // Keeps track of result row index\n\n        // Starting from top right corner\n        // Go left if you encounter 1\n        // Go down if you encounter 0\n        while (r < n && c >= 0) {\n            if (arr[r][c] == 1) {\n                max_row_index = r;\n                c--;\n            } else {\n                r++;\n            }\n        }\n        return max_row_index;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Solution class that contains the method rowWithMax1s\nclass Solution:\n\n    def rowWithMax1s(self, arr):\n        n = len(arr)  # Number of rows\n        m = len(arr[0])  # Number of columns\n        r = 0  # Start from the first row\n        c = m - 1  # Start from the last column\n        max_row_index = -1  # Track the row with the most 1s\n\n        # Traverse from top-right to bottom-left\n        while r < n and c >= 0:\n            if arr[r][c] == 1:  # Move left if 1 is found\n                max_row_index = r  # Update the row with the most 1s\n                c -= 1\n            else:\n                r += 1  # Move down if 0 is found\n\n        return max_row_index  # Return the row with the most 1s\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    rowWithMax1s(arr) {\n        const n = arr.length;    // Number of rows\n        const m = arr[0].length; // Number of columns\n        let r = 0;               // Start from the first row\n        let c = m - 1;           // Start from the last column\n        let maxRowIndex = -1;    // To store the result row index\n\n        // Traverse from top-right to bottom-left\n        while (r < n && c >= 0) {\n            if (arr[r][c] === 1) { // Move left if 1 is found\n                maxRowIndex = r;\n                c--;\n            } else {\n                r++; // Move down if 0 is found\n            }\n        }\n        return maxRowIndex; // Return the row with the most 1s\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}