{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705151,
            "title": "Row with Minimum 1s",
            "titleSlug": "row-with-minimum-number-of-1s5430",
            "content": "<p><span style=\"font-size: 18px;\">Given a 2D <strong>binary matrix</strong>(1-based indexed)<strong> mat</strong>&nbsp;of dimensions <strong>nxm </strong>, determine the <strong>row</strong> that contains the <strong>minimum number </strong>of<strong> 1's</strong>.<br /><strong>Note: </strong>The matrix contains only <strong>1's</strong> and <strong>0's</strong>. Also, if two or more rows contain the <strong>minimum number</strong> of <strong>1's</strong>, the answer is the <strong>lowest</strong> of those<strong> indices</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>mat = [[1, 1, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1], [1, 1, 1, 1]]\n<strong>Output: </strong>2\n<strong>Explanation: </strong>Rows 2 and 3 contain the minimum number of 1's (2 each). Since, row 2 is less than row 3. Thus, the answer is 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>mat = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n<strong>Output: </strong>1\n<strong>Explanation: </strong>All the rows contain the same number of 1's (0 each). Among them, index 1 is the smallest, so the answer is 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n,m &lt;= 1000</span></p>\n<p><span style=\"font-size: 18px;\">0 &lt;= mat[i][j] &lt;= 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D binary matrix `mat` of dimensions n x m (1-based indexed), find the row that contains the minimum number of 1's. The matrix contains only 1's and 0's. If multiple rows have the same minimum number of 1's, return the lowest index among them.",
                "constraints": [
                    "1 <= n, m <= 1000",
                    "0 <= mat[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[[1, 1, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1], [1, 1, 1, 1]]",
                        "output": "2",
                        "explanation": "Rows 2 and 3 both have the minimum number of 1's (2 each). Since row 2 has a lower index than row 3, the answer is 2."
                    },
                    {
                        "input": "[[0, 0, 0], [0, 0, 0], [0, 0, 0]]",
                        "output": "1",
                        "explanation": "All rows contain the same number of 1's (0 each). Among them, index 1 is the smallest, so the answer is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse each row and find the row that contains the minimum number of 1&#39;s</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the row with minimum number of 1s.\n    int minRow(vector<vector<int>> &mat) {\n        int i, j, mn = (int)(1e6), mni = -1;\n        int n = mat.size(), m = mat[0].size();\n        // iterating over rows of the matrix\n        for (i = 0; i < n; i++) {\n            int c = 0;\n            // counting the number of 1s in each row\n            for (j = 0; j < m; j++) {\n                c += (mat[i][j] == 1);\n            }\n            // updating the minimum number of 1s and row index if found\n            if (mn > c) {\n                mn = c;\n                mni = i + 1;\n            }\n        }\n        // returning the row index with minimum number of 1s\n        return mni;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find the row with minimum number of 1's\n    int minRow(int mat[][]) {\n        int i, j, mn = (int)(1e6), mni = -1;\n        int n = mat.length, m = mat[0].length;\n\n        // Loop through each row\n        for (i = 0; i < n; i++) {\n            int c = 0;\n\n            // Loop through each element in the row\n            for (j = 0; j < m; j++) {\n                // Count the number of 1's in the row\n                if (mat[i][j] == 1) c++;\n            }\n\n            // Check if the number of 1's in the row is minimum so far\n            if (mn > c) {\n                mn = c;\n                mni = i + 1; // Store the index of the row\n            }\n        }\n\n        // Return the index of the row with minimum number of 1's\n        return mni;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to find the row with minimum number of 1s.\n    def minRow(self, mat):\n        mn, mni = 1000000, -1\n        n = len(mat)\n        m = len(mat[0])\n\n        #iterating over all the rows.\n        for i in range(n):\n            c = 0\n\n            #counting number of 1s in the current row.\n            for j in range(m):\n                if mat[i][j] == 1:\n                    c += 1\n\n            #checking if the current row has minimum number of 1s.\n            if mn > c:\n                mn = c\n                mni = i + 1\n\n        #returning the row index with minimum number of 1s.\n        return mni\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    public int minRow(List<List<int>> mat) {\n        int minOnes = int.MaxValue;\n        int rowIndex = -1;\n        int N = mat.Count;\n        int M = mat[0].Count;\n\n        for (int i = 0; i < N; i++) {\n            int onesCount = 0;\n\n            for (int j = 0; j < M; j++) {\n                if (mat[i][j] == 1) {\n                    onesCount++;\n                }\n            }\n\n            if (onesCount < minOnes) {\n                minOnes = onesCount;\n                rowIndex = i + 1;\n            }\n        }\n\n        return rowIndex;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number} N\n * @param {number} M\n * @param {Array.<Array.<number>>} A\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find the row of first index containing 1.\n    minRow(mat) {\n        let mn = 1000000;\n        let mni = -1;\n        let n = mat.length;\n        let m = mat[0].length;\n\n        // iterating over all the rows.\n        for (let i = 0; i < n; i++) {\n            let c = 0;\n\n            // counting number of 1s in the current row.\n            for (let j = 0; j < m; j++) {\n                if (mat[i][j] === 1) {\n                    c += 1;\n                }\n            }\n\n            // checking if the current row has minimum number of 1s.\n            if (mn > c) {\n                mn = c;\n                mni = i + 1;\n            }\n        }\n\n        // returning the row index with minimum number of 1s.\n        return mni;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}