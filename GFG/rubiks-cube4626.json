{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703458,
            "title": "Rubik's Cube",
            "titleSlug": "rubiks-cube4626",
            "content": "<p><span style=\"font-size:18px\">Representation of a Rubik&#39;s Cube:</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Yellow face is&nbsp;<em>Up</em></span></p>\r\n\r\n<p><span style=\"font-size:18px\">Orange face is&nbsp;<em>Front</em></span></p>\r\n\r\n<p><span style=\"font-size:18px\">Green face is&nbsp;<em>Left</em></span></p>\r\n\r\n<p><span style=\"font-size:18px\">Blue face is&nbsp;<em>Right</em></span></p>\r\n\r\n<p><span style=\"font-size:18px\">Red face is&nbsp;<em>Back</em></span></p>\r\n\r\n<p><span style=\"font-size:18px\">White face is&nbsp;<em>Down</em></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><img alt=\"\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/new__.png\" style=\"height:334px; width:469px\" /></span></p>\r\n\r\n<p><span style=\"font-size:18px\">Since the center pieces are fixed, any face rotation wont changes the central pieces.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Now lets take a look at the nomenclature of Rubik&#39;s Cube moves:</span></p>\r\n\r\n<p><span style=\"font-size:18px\">R= clockwise&nbsp;90\u00e2\u02c6\u02dc rotation of right face.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Ri=anti-clockwise&nbsp;90\u00e2\u02c6\u02dc&nbsp;rotation of right face.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Similarly rest of the moves are illustrated below:</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Now you will be given the description of a scrambled Rubik&#39;s Cube, your task is to print the description of cube&nbsp;after <strong>N</strong> given moves.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">For eg, if the given cube is:</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><img alt=\"\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/rubix-top.jpg\" /></span></p>\r\n\r\n<p><span style=\"font-size:18px\">It will be represented as following:</span></p>\r\n\r\n<div><span style=\"font-size:18px\">UP<br />\r\nGWYWYYRWW<br />\r\nFRONT<br />\r\nGGRBORYYY<br />\r\nLEFT<br />\r\nYOWRGOOOB<br />\r\nRIGHT<br />\r\nBGRGBBBOO<br />\r\nBACK<br />\r\nGROWRBBRG<br />\r\nDOWN<br />\r\nRBOYWGWYW</span></div>\r\n\r\n<p><span style=\"font-size:18px\">Let&#39;s say we apply the following moves to the cube:</span></p>\r\n\r\n<p><span style=\"font-size:18px\">B B</span></p>\r\n\r\n<p><span style=\"font-size:18px\">The move will rotate back face&nbsp;180\u00e2\u02c6\u02dc&nbsp;clockwise, now the cube is:</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><img alt=\"\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/rubix-bottom.jpg\" style=\"height:321px; width:400px\" /></span></p>\r\n\r\n<p><span style=\"font-size:18px\">And its description will be:</span></p>\r\n\r\n<p><span style=\"font-size:18px\">UP<br />\r\nWYWWYYRWW<br />\r\nFRONT<br />\r\nGGRBORYYY<br />\r\nLEFT<br />\r\nOOWBGOROB<br />\r\nRIGHT<br />\r\nBGOGBRBOY<br />\r\nBACK<br />\r\nGRBBRWORG<br />\r\nDOWN<br />\r\nRBOYWGYWG</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nUP\r\nGWYWYYRWW\r\nFRONT\r\nGGRBORYYY\r\nLEFT\r\nYOWRGOOOB\r\nRIGHT\r\nBGRGBBBOO\r\nBACK\r\nGROWRBBRG\r\nDOWN\r\nRBOYWGWYW\r\n2\r\nR R\r\n\r\n<strong>Output:</strong>\r\nUP\r\nGWOWYGRWW\r\nFRONT\r\nGGBBOWYYG\r\nLEFT\r\nYOWRGOOOB\r\nRIGHT\r\nOOBBBGRGB\r\nBACK\r\nYRORRBRRG\r\nDOWN\r\nRBYYWYWYW</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>newFormation()</strong>&nbsp;which takes the string array <strong>present[]</strong>, which is of size <strong>12</strong> containing the faces and the face configurations, string array <strong>move[]</strong> and its size <strong>N</strong><strong> </strong>as inputs and returns the vector of strings containing 12 lines, showing the final configuration of the cube as shown in example.<br />\r\n<strong>Note:</strong> faces must&nbsp;always come in the order shown in example above ie {&quot;UP&quot;,&quot;FRONT&quot;,&quot;LEFT&quot;,&quot;RIGHT&quot;,&quot;BACK&quot;,&quot;DOWN&quot;}.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> Constant</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; <strong>N</strong> &le; 50</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a scrambled Rubik's Cube represented as a series of strings describing each face. The cube's faces are defined as follows:\n\n*   Yellow face: *Up*\n*   Orange face: *Front*\n*   Green face: *Left*\n*   Blue face: *Right*\n*   Red face: *Back*\n*   White face: *Down*\n\nThe initial state of the cube is provided as a 6 face descriptions, each description contaning the name of the face and its 9 color strings. You are also given a sequence of moves to apply to the cube. Your task is to simulate the moves and output the final configuration of the Rubik's Cube.\n\nEach move consists of rotating a face of the cube by 90 degrees. The following moves are defined:\n\n*   `R`: Clockwise 90\u00b0 rotation of the *Right* face.\n*   `Ri`: Anti-clockwise 90\u00b0 rotation of the *Right* face.\n*   `L`: Clockwise 90\u00b0 rotation of the *Left* face.\n*   `Li`: Anti-clockwise 90\u00b0 rotation of the *Left* face.\n*   `F`: Clockwise 90\u00b0 rotation of the *Front* face.\n*   `Fi`: Anti-clockwise 90\u00b0 rotation of the *Front* face.\n*   `B`: Clockwise 90\u00b0 rotation of the *Back* face.\n*   `Bi`: Anti-clockwise 90\u00b0 rotation of the *Back* face.\n*   `U`: Clockwise 90\u00b0 rotation of the *Up* face.\n*   `Ui`: Anti-clockwise 90\u00b0 rotation of the *Up* face.\n*   `D`: Clockwise 90\u00b0 rotation of the *Down* face.\n*   `Di`: Anti-clockwise 90\u00b0 rotation of the *Down* face.\n\nThe `newFormation()` function should take the initial cube state as a string array `present[]` (size 12), the move sequence as a string array `move[]`, and the number of moves `N` as input. It should return a vector of strings (size 12) representing the final configuration of the cube, formatted as `UP`, the 9 color strings representing that face, and so on. The order of faces in the output must be `UP`, `FRONT`, `LEFT`, `RIGHT`, `BACK`, `DOWN`.",
                "constraints": [
                    "1 \u2264 N \u2264 50"
                ],
                "testcases": [
                    {
                        "input": "UP\nGWYWYYRWW\nFRONT\nGGRBORYYY\nLEFT\nYOWRGOOOB\nRIGHT\nBGRGBBBOO\nBACK\nGROWRBBRG\nDOWN\nRBOYWGWYW\n2\nR R",
                        "output": "UP\nGWOWYGRWW\nFRONT\nGGBBOWYYG\nLEFT\nYOWRGOOOB\nRIGHT\nOOBBBGRGB\nBACK\nYRORRBRRG\nDOWN\nRBYYWYWYW",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:20px\">For solving this problem you will need the idea of what will happend after each type of cube rotation. Design all the functions for each type of move and then try to solve it. Cube is a 3D structure so how about you take a 3D array to represnt the&nbsp;cube and tackle the problem&nbsp;? Anymore details in editorial will be spoon feeding, happy coding.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "ola-cabs"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "char cube[6][3][3];\r\nchar face[6][10] = {\"UP\", \"FRONT\", \"LEFT\", \"RIGHT\", \"BACK\", \"DOWN\"};\r\n\r\nvoid rotate_face_clockwise(int s) {\r\n    char t1 = cube[s][0][0];\r\n    cube[s][0][0] = cube[s][2][0];\r\n    cube[s][2][0] = cube[s][2][2];\r\n    cube[s][2][2] = cube[s][0][2];\r\n    cube[s][0][2] = t1;\r\n\r\n    t1 = cube[s][0][1];\r\n    cube[s][0][1] = cube[s][1][0];\r\n    cube[s][1][0] = cube[s][2][1];\r\n    cube[s][2][1] = cube[s][1][2];\r\n    cube[s][1][2] = t1;\r\n}\r\nvoid rotate_face_counter_clockwise(int s) {\r\n    char t1 = cube[s][0][0];\r\n    cube[s][0][0] = cube[s][0][2];\r\n    cube[s][0][2] = cube[s][2][2];\r\n    cube[s][2][2] = cube[s][2][0];\r\n    cube[s][2][0] = t1;\r\n\r\n    t1 = cube[s][0][1];\r\n    cube[s][0][1] = cube[s][1][2];\r\n    cube[s][1][2] = cube[s][2][1];\r\n    cube[s][2][1] = cube[s][1][0];\r\n    cube[s][1][0] = t1;\r\n}\r\nvoid rotate_UP(int o) {\r\n    if (o == 0) {\r\n        char t0, t1, t2;\r\n        t0 = cube[1][0][0];\r\n        t1 = cube[1][0][1];\r\n        t2 = cube[1][0][2];\r\n\r\n        cube[1][0][0] = cube[3][0][0];\r\n        cube[1][0][1] = cube[3][0][1];\r\n        cube[1][0][2] = cube[3][0][2];\r\n\r\n        cube[3][0][0] = cube[4][0][0];\r\n        cube[3][0][1] = cube[4][0][1];\r\n        cube[3][0][2] = cube[4][0][2];\r\n\r\n        cube[4][0][0] = cube[2][0][0];\r\n        cube[4][0][1] = cube[2][0][1];\r\n        cube[4][0][2] = cube[2][0][2];\r\n\r\n        cube[2][0][0] = t0;\r\n        cube[2][0][1] = t1;\r\n        cube[2][0][2] = t2;\r\n\r\n        rotate_face_clockwise(0);\r\n    } else {\r\n        char t0, t1, t2;\r\n        t0 = cube[1][0][0];\r\n        t1 = cube[1][0][1];\r\n        t2 = cube[1][0][2];\r\n\r\n        cube[1][0][0] = cube[2][0][0];\r\n        cube[1][0][1] = cube[2][0][1];\r\n        cube[1][0][2] = cube[2][0][2];\r\n\r\n        cube[2][0][0] = cube[4][0][0];\r\n        cube[2][0][1] = cube[4][0][1];\r\n        cube[2][0][2] = cube[4][0][2];\r\n\r\n        cube[4][0][0] = cube[3][0][0];\r\n        cube[4][0][1] = cube[3][0][1];\r\n        cube[4][0][2] = cube[3][0][2];\r\n\r\n        cube[3][0][0] = t0;\r\n        cube[3][0][1] = t1;\r\n        cube[3][0][2] = t2;\r\n        rotate_face_counter_clockwise(0);\r\n    }\r\n}\r\nvoid rotate_FRONT(int o) {\r\n    if (o == 0) {\r\n        char t0, t1, t2;\r\n        t0 = cube[0][2][0];\r\n        t1 = cube[0][2][1];\r\n        t2 = cube[0][2][2];\r\n\r\n        cube[0][2][0] = cube[2][2][2];\r\n        cube[0][2][1] = cube[2][1][2];\r\n        cube[0][2][2] = cube[2][0][2];\r\n\r\n        cube[2][0][2] = cube[5][0][0];\r\n        cube[2][1][2] = cube[5][0][1];\r\n        cube[2][2][2] = cube[5][0][2];\r\n\r\n        cube[5][0][0] = cube[3][2][0];\r\n        cube[5][0][1] = cube[3][1][0];\r\n        cube[5][0][2] = cube[3][0][0];\r\n\r\n        cube[3][0][0] = t0;\r\n        cube[3][1][0] = t1;\r\n        cube[3][2][0] = t2;\r\n        rotate_face_clockwise(1);\r\n    } else {\r\n        char t0, t1, t2;\r\n        t0 = cube[0][2][0];\r\n        t1 = cube[0][2][1];\r\n        t2 = cube[0][2][2];\r\n\r\n        cube[0][2][0] = cube[3][0][0];\r\n        cube[0][2][1] = cube[3][1][0];\r\n        cube[0][2][2] = cube[3][2][0];\r\n\r\n        cube[3][0][0] = cube[5][0][2];\r\n        cube[3][1][0] = cube[5][0][1];\r\n        cube[3][2][0] = cube[5][0][0];\r\n\r\n        cube[5][0][0] = cube[2][0][2];\r\n        cube[5][0][1] = cube[2][1][2];\r\n        cube[5][0][2] = cube[2][2][2];\r\n\r\n        cube[2][0][2] = t2;\r\n        cube[2][1][2] = t1;\r\n        cube[2][2][2] = t0;\r\n        rotate_face_counter_clockwise(1);\r\n    }\r\n}\r\nvoid rotate_LEFT(int o) {\r\n    if (o == 0) {\r\n        char t0, t1, t2;\r\n        t0 = cube[0][0][0];\r\n        t1 = cube[0][1][0];\r\n        t2 = cube[0][2][0];\r\n\r\n        cube[0][0][0] = cube[4][2][2];\r\n        cube[0][1][0] = cube[4][1][2];\r\n        cube[0][2][0] = cube[4][0][2];\r\n\r\n        cube[4][0][2] = cube[5][2][0];\r\n        cube[4][1][2] = cube[5][1][0];\r\n        cube[4][2][2] = cube[5][0][0];\r\n\r\n        cube[5][0][0] = cube[1][0][0];\r\n        cube[5][1][0] = cube[1][1][0];\r\n        cube[5][2][0] = cube[1][2][0];\r\n\r\n        cube[1][0][0] = t0;\r\n        cube[1][1][0] = t1;\r\n        cube[1][2][0] = t2;\r\n        rotate_face_clockwise(2);\r\n    } else {\r\n        char t0, t1, t2;\r\n        t0 = cube[0][0][0];\r\n        t1 = cube[0][1][0];\r\n        t2 = cube[0][2][0];\r\n\r\n        cube[0][0][0] = cube[1][0][0];\r\n        cube[0][1][0] = cube[1][1][0];\r\n        cube[0][2][0] = cube[1][2][0];\r\n\r\n        cube[1][0][0] = cube[5][0][0];\r\n        cube[1][1][0] = cube[5][1][0];\r\n        cube[1][2][0] = cube[5][2][0];\r\n\r\n        cube[5][0][0] = cube[4][2][2];\r\n        cube[5][1][0] = cube[4][1][2];\r\n        cube[5][2][0] = cube[4][0][2];\r\n\r\n        cube[4][0][2] = t2;\r\n        cube[4][1][2] = t1;\r\n        cube[4][2][2] = t0;\r\n        rotate_face_counter_clockwise(2);\r\n    }\r\n}\r\nvoid rotate_RIGHT(int o) {\r\n    if (o == 0) {\r\n        char t0, t1, t2;\r\n        t0 = cube[0][0][2];\r\n        t1 = cube[0][1][2];\r\n        t2 = cube[0][2][2];\r\n\r\n        cube[0][0][2] = cube[1][0][2];\r\n        cube[0][1][2] = cube[1][1][2];\r\n        cube[0][2][2] = cube[1][2][2];\r\n\r\n        cube[1][0][2] = cube[5][0][2];\r\n        cube[1][1][2] = cube[5][1][2];\r\n        cube[1][2][2] = cube[5][2][2];\r\n\r\n        cube[5][0][2] = cube[4][2][0];\r\n        cube[5][1][2] = cube[4][1][0];\r\n        cube[5][2][2] = cube[4][0][0];\r\n\r\n        cube[4][0][0] = t2;\r\n        cube[4][1][0] = t1;\r\n        cube[4][2][0] = t0;\r\n        rotate_face_clockwise(3);\r\n    } else {\r\n        char t0, t1, t2;\r\n        t0 = cube[0][0][2];\r\n        t1 = cube[0][1][2];\r\n        t2 = cube[0][2][2];\r\n\r\n        cube[0][0][2] = cube[4][2][0];\r\n        cube[0][1][2] = cube[4][1][0];\r\n        cube[0][2][2] = cube[4][0][0];\r\n\r\n        cube[4][0][0] = cube[5][2][2];\r\n        cube[4][1][0] = cube[5][1][2];\r\n        cube[4][2][0] = cube[5][0][2];\r\n\r\n        cube[5][0][2] = cube[1][0][2];\r\n        cube[5][1][2] = cube[1][1][2];\r\n        cube[5][2][2] = cube[1][2][2];\r\n\r\n        cube[1][0][2] = t0;\r\n        cube[1][1][2] = t1;\r\n        cube[1][2][2] = t2;\r\n        rotate_face_counter_clockwise(3);\r\n    }\r\n}\r\nvoid rotate_BACK(int o) {\r\n    if (o == 0) {\r\n        char t0, t1, t2;\r\n        t0 = cube[0][0][0];\r\n        t1 = cube[0][0][1];\r\n        t2 = cube[0][0][2];\r\n\r\n        cube[0][0][0] = cube[3][0][2];\r\n        cube[0][0][1] = cube[3][1][2];\r\n        cube[0][0][2] = cube[3][2][2];\r\n\r\n        cube[3][0][2] = cube[5][2][2];\r\n        cube[3][1][2] = cube[5][2][1];\r\n        cube[3][2][2] = cube[5][2][0];\r\n\r\n        cube[5][2][0] = cube[2][0][0];\r\n        cube[5][2][1] = cube[2][1][0];\r\n        cube[5][2][2] = cube[2][2][0];\r\n\r\n        cube[2][0][0] = t2;\r\n        cube[2][1][0] = t1;\r\n        cube[2][2][0] = t0;\r\n        rotate_face_clockwise(4);\r\n    } else {\r\n        char t0, t1, t2;\r\n        t0 = cube[0][0][0];\r\n        t1 = cube[0][0][1];\r\n        t2 = cube[0][0][2];\r\n\r\n        cube[0][0][0] = cube[2][2][0];\r\n        cube[0][0][1] = cube[2][1][0];\r\n        cube[0][0][2] = cube[2][0][0];\r\n\r\n        cube[2][0][0] = cube[5][2][0];\r\n        cube[2][1][0] = cube[5][2][1];\r\n        cube[2][2][0] = cube[5][2][2];\r\n\r\n        cube[5][2][0] = cube[3][2][2];\r\n        cube[5][2][1] = cube[3][1][2];\r\n        cube[5][2][2] = cube[3][0][2];\r\n\r\n        cube[3][0][2] = t0;\r\n        cube[3][1][2] = t1;\r\n        cube[3][2][2] = t2;\r\n        rotate_face_counter_clockwise(4);\r\n    }\r\n}\r\nvoid rotate_DOWN(int o) {\r\n    if (o == 0) {\r\n        char t0, t1, t2;\r\n        t0 = cube[1][2][0];\r\n        t1 = cube[1][2][1];\r\n        t2 = cube[1][2][2];\r\n\r\n        cube[1][2][0] = cube[2][2][0];\r\n        cube[1][2][1] = cube[2][2][1];\r\n        cube[1][2][2] = cube[2][2][2];\r\n\r\n        cube[2][2][0] = cube[4][2][0];\r\n        cube[2][2][1] = cube[4][2][1];\r\n        cube[2][2][2] = cube[4][2][2];\r\n\r\n        cube[4][2][0] = cube[3][2][0];\r\n        cube[4][2][1] = cube[3][2][1];\r\n        cube[4][2][2] = cube[3][2][2];\r\n\r\n        cube[3][2][0] = t0;\r\n        cube[3][2][1] = t1;\r\n        cube[3][2][2] = t2;\r\n\r\n        rotate_face_clockwise(5);\r\n    } else {\r\n        char t0, t1, t2;\r\n        t0 = cube[1][2][0];\r\n        t1 = cube[1][2][1];\r\n        t2 = cube[1][2][2];\r\n\r\n        cube[1][2][0] = cube[3][2][0];\r\n        cube[1][2][1] = cube[3][2][1];\r\n        cube[1][2][2] = cube[3][2][2];\r\n\r\n        cube[3][2][0] = cube[4][2][0];\r\n        cube[3][2][1] = cube[4][2][1];\r\n        cube[3][2][2] = cube[4][2][2];\r\n\r\n        cube[4][2][0] = cube[2][2][0];\r\n        cube[4][2][1] = cube[2][2][1];\r\n        cube[4][2][2] = cube[2][2][2];\r\n\r\n        cube[2][2][0] = t0;\r\n        cube[2][2][1] = t1;\r\n        cube[2][2][2] = t2;\r\n\r\n        rotate_face_counter_clockwise(5);\r\n    }\r\n}\r\nvoid rotate_cube(int s, int o) {\r\n    if (s == 1) {\r\n        rotate_UP(o);\r\n    } else if (s == 2) {\r\n        rotate_FRONT(o);\r\n    } else if (s == 3) {\r\n        rotate_LEFT(o);\r\n    } else if (s == 4) {\r\n        rotate_RIGHT(o);\r\n    } else if (s == 5) {\r\n        rotate_BACK(o);\r\n    } else if (s == 6) {\r\n        rotate_DOWN(o);\r\n    }\r\n}\r\n\r\nvector<string> newFormation(string present[], string move[], int n) {\r\n    string s;\r\n    for (int i = 0; i < 12; ++i) {\r\n        s = present[i];\r\n        if (i % 2 != 0) {\r\n            for (int j = 0; j < 9; ++j) {\r\n                cube[i / 2][j / 3][j % 3] = s[j];\r\n            }\r\n        }\r\n    }\r\n\r\n    string s2;\r\n    for (int i = 0; i < n; ++i) {\r\n        s2 = move[i];\r\n        if (s2 == \"U\") {\r\n            rotate_cube(1, 0);\r\n        } else if (s2 == \"Ui\") {\r\n            rotate_cube(1, 1);\r\n        } else if (s2 == \"F\") {\r\n            rotate_cube(2, 0);\r\n        } else if (s2 == \"Fi\") {\r\n            rotate_cube(2, 1);\r\n        } else if (s2 == \"L\") {\r\n            rotate_cube(3, 0);\r\n        } else if (s2 == \"Li\") {\r\n            rotate_cube(3, 1);\r\n        } else if (s2 == \"R\") {\r\n            rotate_cube(4, 0);\r\n        } else if (s2 == \"Ri\") {\r\n            rotate_cube(4, 1);\r\n        } else if (s2 == \"B\") {\r\n            rotate_cube(5, 0);\r\n        } else if (s2 == \"Bi\") {\r\n            rotate_cube(5, 1);\r\n        } else if (s2 == \"D\") {\r\n            rotate_cube(6, 0);\r\n        } else if (s2 == \"Di\") {\r\n            rotate_cube(6, 1);\r\n        }\r\n    }\r\n\r\n    vector<string> ans;\r\n    for (int i = 0; i < 6; ++i) {\r\n        ans.push_back(face[i]);\r\n        string s = \"\";\r\n        for (int j = 0; j < 3; ++j) {\r\n            for (int k = 0; k < 3; ++k) {\r\n                s += (cube[i][j][k]);\r\n            }\r\n        }\r\n        ans.push_back(s);\r\n    }\r\n\r\n    return ans;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}