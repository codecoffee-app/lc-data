{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706070,
            "title": "Ruling Pair",
            "titleSlug": "ruling-pair--141631",
            "content": "<p><span style=\"font-size:18px\">Geek Land has a population of N people and each person&#39;s ability to rule the town is measured by a numeric value arr[i]. The two people that can together rule Geek Land must be compatible with each other i.e.,&nbsp;the sum of digits of their ability arr[i]&nbsp;must be equal. Their combined ability should be maximum amongst all the possible pairs of people.&nbsp;Find the combined ability of the Ruling Pair.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 5\narr[] = {55, 23, 32, 46, 88}\n<strong>Output:</strong>\n101\n<strong>Explanation:</strong>\nAll possible pairs that are \ncompatible with each other are-&nbsp;(23, 32) \nwith digit sum 5 and&nbsp;(55, 46) with digit \nsum 10. Out of these the maximum combined \nability pair is (55, 46) i.e. 55 + 46 = 101</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4\narr[] = {18, 19, 23, 15}\n<strong>Output:</strong>\n-1\n<strong>Explanation:</strong>\nNo two people are compatible with each other.&nbsp;\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: </strong>&nbsp;<br />\nYou don&#39;t need to read input or print anything. Complete the function <strong>RulingPair\u00e2\u20ac\u2039</strong><strong>()</strong> which takes the array arr[] and&nbsp;size of array N as input parameters and returns the answer. If No two people are compatible with<br />\neach other&nbsp;then return&nbsp;-1.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup>&nbsp;<br />\n1 &le; arr[i] &le; 10<sup>9</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse through the array and use a unordered_map to store the maximum number present for a particular digit sum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    \n    private:\n    //Function to calculate the digit sum of a number.\n    int digitSum(int n) \n    { \n    \tint sum = 0; \n    \twhile (n) { \n    \t\tsum += (n % 10); \n    \t\tn /= 10; \n    \t} \n    \treturn sum; \n    } \n    \n    public:\n    //Function to find the ruling pair.\n    int RulingPair(vector<int> arr, int n) \n    { \n    \tunordered_map<int, int> mp; \n    \tint ans = -1; \n    \n    \t//iterating over the array.\n    \tfor (int i = 0; i < n; i++) { \n    \t\t//calculating digit sum of current element.\n    \t\tint dSum = digitSum(arr[i]); \n    \n    \t\t//if digit sum is already present in the map.\n    \t\tif (mp[dSum] != 0) { \n    \t\t\t//updating answer by choosing maximum between current\n                //answer and sum of current element and value \n                //associated with current digit sum.\n    \t\t\tans = max(ans, mp[dSum] + arr[i]); \n    \t\t} \n    \t\t//updating maximum value associated with current digit sum.\n    \t\tmp[dSum] = max(mp[dSum], arr[i]); \n    \t} \n    \t//returning the answer.\n    \treturn ans; \n    }   \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution \n{ \n    // Function to calculate the sum of digits of a number\n    static int digitSum(int n) { \n        int sum = 0; \n        while (n != 0) \n        { \n            sum += (n % 10); \n            n /= 10; \n        } \n        return sum; \n    } \n    \n    // Function to find the ruling pair\n    static int RulingPair(int arr[], int n) { \n    \n        // Using HashMap to store the maximum sum for each digit sum\n        HashMap<Integer, Integer> mp = new HashMap<Integer,Integer>(); \n        \n        // Initializing the HashMap with 0 for each possible digit sum\n        for (int i = 0; i < 1000 ; i++) \n        { \n            mp.put(i, 0); \n        } \n        \n        // Initializing the answer as -1\n        int ans = -1; \n\n        // Iterating through the array\n        for (int i = 0; i < n; i++) \n        { \n            // Finding the digit sum of arr[i] \n            int dSum = digitSum(arr[i]); \n            \n            // Checking if the current digit sum has been seen before\n            if ((int)mp.get(dSum) != 0) \n            { \n                // Updating the answer with the maximum sum\n                ans = Math.max(ans, (int)mp.get(dSum) + arr[i]); \n            } \n            // Storing the maximum number for the current digit sum\n            mp.put(dSum,Math.max((int)mp.get(dSum), arr[i])) ; \n        } \n        // Returning the final answer\n        return ans; \n    }    \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    \n    #Function to find the digit sum of a number.\n    def digitSum(self, n): \n        sum = 0\n        while (n): \n            sum += (n % 10) \n            n //= 10\n        return sum\n    \n    #Function to find the maximum ruling pair sum.\n    def RulingPair(self, arr, n): \n        mp = dict() \n        ans = -1\n        \n        #Iterating over the array.\n        for i in range(n):  \n            \n            #Calculating the digit sum of the current number.\n            dSum = self.digitSum(arr[i]) \n    \n            #If the digit sum is already present in the map, update the answer.\n            if (dSum in mp): \n                ans = max(ans, mp[dSum] + arr[i]) \n            \n            #Storing the maximum number with the current digit sum in the map.\n            mp[dSum] = max(mp.get(dSum, 0) ,arr[i]) \n        \n        #Returning the maximum ruling pair sum.\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    RulingPair(arr,n){\n        let mp = new Map();\n        let ans = Number.MIN_SAFE_INTEGER;\n\n        for (let i = 0; i < n; i++) { \n            let dSum = this.digitSum(arr[i]); \n\n            if (mp.has(dSum)) {\n                ans = Math.max(ans, mp.get(dSum) + arr[i]); \n            } \n            mp.set(dSum, Math.max(mp.get(dSum) || 0, arr[i])); \n        } \n        return ans === Number.MIN_SAFE_INTEGER ? -1 : ans;  \n    }\n\n    digitSum(n) {\n        let sum = 0; \n        while (n) { \n            sum += (n % 10); \n            n = Math.floor(n / 10); \n        } \n        return sum; \n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}