{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702649,
            "title": "Longest Increasing subarray",
            "titleSlug": "sachins-love-for-runs2217",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array&nbsp;<strong>arr.</strong> Return length of the maximum non-decreasing sub-segment in sequence <strong>arr</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 2, 1, 3, 4, 1]\n<strong>Output: </strong>3\n<strong>Explanation: </strong>The maximum non-decreasing sub-segment is the segment with numbers from the third to the fifth one.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 2, 9]\n<strong>Output: </strong>3\n<strong>Explanation: </strong>The maximum non-decreasing sub-segment is the numbers from the first to the third one.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)<br /><br /><strong>Constraints:</strong><br />1 &le; arr.size() &le;10<sup>6</sup><br />1&thinsp;&le;&thinsp;arr[i]&thinsp;&le;&thinsp;10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr`, find the length of the longest non-decreasing sub-segment within the array. A non-decreasing sub-segment is a contiguous portion of the array where each element is greater than or equal to the preceding element.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2, 2, 1, 3, 4, 1]",
                        "output": "3",
                        "explanation": "The longest non-decreasing sub-segment is [1, 3, 4], which has a length of 3."
                    },
                    {
                        "input": "[2, 2, 9]",
                        "output": "3",
                        "explanation": "The longest non-decreasing sub-segment is [2, 2, 9], which has a length of 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Iterate over the array and store the maximum increasing sub-array found till every index.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to compute the maximum consecutive increasing subsequence length\n    int compute(vector<int>& arr) {\n        int n = arr.size();\n        int count = 1, ans = 1; // Initialize count and ans to 1\n\n        // Iterate through the array starting from the second element\n        for (int i = 1; i < n; i++) {\n            if (arr[i] >= arr[i - 1]) // Check if current element is greater than or\n                                      // equal to previous element\n                count++;              // Increment count if the sequence is increasing\n            else\n                count = 1;         // Reset count if the sequence is broken\n            ans = max(count, ans); // Update ans with the maximum count\n        }\n        return ans; // Return the maximum consecutive increasing subsequence length\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    // Function to compute the length of the longest increasing subarray\n    public static int compute(int arr[]) {\n        int n = arr.length;\n        int ans = 1, count = 1;\n\n        // Iterating through the array\n        for (int i = 1; i < n; i++) {\n\n            // Checking if the current element is greater than or equal to the previous\n            // element\n            if (arr[i] >= arr[i - 1])\n                count++;\n            else\n                count = 1;\n\n            // Taking the maximum of the current count and the answer\n            ans = Math.max(ans, count);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    # Function to compute the longest non-decreasing subsequence length\n    def compute(self, arr):\n        n = len(arr)\n        # Initialize answer and count of subsequence length to 1\n        ans, count = 1, 1\n\n        # Iterate through the array elements\n        for i in range(1, n):\n            # If current element is greater or equal to previous element,\n            # increment the count\n            if (arr[i] >= arr[i - 1]):\n                count += 1\n            # If current element is smaller than previous element,\n            # reset the count to 1\n            else:\n                count = 1\n            # Update the answer with the maximum count obtained so far\n            ans = max(ans, count)\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} a\n * @param {number} n\n * @returns {number[]}\n */\n\nclass Solution {\n    // Function to compute the result.\n    compute(arr) {\n        let n = arr.length;\n        let ans = 1;\n        let count = 1;\n        // traversing the array\n        for (let i = 1; i < n; i++) {\n            // increasing then increment count\n            if (arr[i] >= arr[i - 1]) {\n                count += 1;\n            } else {\n                // set count to 1\n                count = 1;\n            }\n            // take maximum\n            ans = Math.max(ans, count);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}