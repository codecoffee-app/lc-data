{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702716,
            "title": "Sandwiched_Vowels",
            "titleSlug": "sandwiched-vowels5158",
            "content": "<p><span style=\"font-size: 18px; font-family: 'andale mono', monospace;\">For a given string <strong>s comprising </strong>only lowercase English alphabets, eliminate the vowels from the string that occur between two consonants(sandwiched between two immediately adjacent consonants). Return the new string.</span></p>\n<p><span style=\"font-size: 18px; font-family: 'andale mono', monospace;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px; font-family: 'andale mono', monospace;\"><strong>Input :</strong> s = \"bab\"\n<strong>Output :</strong> bb\n<strong>Explanation: </strong>'a' is a vowel occuring between two consonants i.e. b. Hence the updated string eliminates a.</span></pre>\n<pre><span style=\"font-size: 18px; font-family: 'andale mono', monospace;\"><strong>Input :</strong> s = \"ceghij\"<br /></span><span style=\"font-size: 18px; font-family: 'andale mono', monospace;\"><strong>Output :</strong> cghj<br /><strong>Explanation: </strong>'e' and 'i' are sandwitched vowels.</span></pre>\n<p><span style=\"font-size: 18px; font-family: 'andale mono', monospace;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px; font-family: 'andale mono', monospace;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px; font-family: 'andale mono', monospace;\">1 &le; s.size() &le; 10<sup>6</sup><sup><br /></sup></span><span style=\"font-size: 18px; font-family: 'andale mono', monospace;\">'a' &le; s[i] &le; 'z'</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of only lowercase English alphabets, remove all vowels that are located between two consonants (i.e., sandwiched between two immediately adjacent consonants). Return the modified string.",
                "constraints": [
                    "1 <= s.size() <= 10^6",
                    "Each character s[i] is a lowercase English alphabet ('a' to 'z')"
                ],
                "testcases": [
                    {
                        "input": "bab",
                        "output": "bb",
                        "explanation": "The vowel 'a' is between two consonants 'b'. Therefore, 'a' is removed."
                    },
                    {
                        "input": "ceghij",
                        "output": "cghj",
                        "explanation": "The vowels 'e' and 'i' are sandwiched between consonants. Thus, they are removed."
                    },
                    {
                        "input": "leetcode",
                        "output": "ltcd",
                        "explanation": "The vowels 'e', 'e', and 'o' are between consonants. Thus, they are removed."
                    },
                    {
                        "input": "aeiou",
                        "output": "aeiou",
                        "explanation": "None of the vowels are sandwiched between two consonants, so the string remains unchanged."
                    },
                    {
                        "input": "abcdae",
                        "output": "abcd",
                        "explanation": "The vowel 'a' is sandwiched between consonants 'b' and 'c', and 'e' is between consonants 'd' so the answer is 'abcd'"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Traverse the string from [1,n-1] and check is the character at index i is a vowel or not. If it is vowel then check if its adjacent elements are consonant or not if they both are consonant then just skip that character else insert that character into a new string.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n\n  public:\n    // Function to check if a character is a vowel.\n    bool check(char c) {\n        // returning true if the character is 'a', 'e', 'i', 'o', or 'u'.\n        if (c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u')\n            return true;\n\n        // returning false if the character is not a vowel.\n        return false;\n    }\n\n    // Function to remove sandwiched vowels from a string.\n    string Sandwiched_Vowel(string &s) {\n        string temp = \"\";\n\n        // adding the first character of the string to the new string.\n        temp += s[0];\n\n        // iterating over the characters of the string starting from index 1.\n        for (int i = 1; i < s.size() - 1; i++) {\n\n            // checking if the current character is a vowel and the previous\n            // and next characters are not vowels.\n            if (check(s[i]) and !check(s[i - 1]) and !check(s[i + 1]))\n                ;\n\n            // if the above condition is true, then we skip adding the\n            // current character to the new string.\n\n            else\n                // if the above condition is false, then we add the\n                // current character to the new string.\n                temp += s[i];\n        }\n\n        // adding the last character of the string to the new string if the\n        // size of the string is not 1.\n        if (s.size() != 1) {\n            temp += s[s.size() - 1];\n        }\n\n        // returning the new string with sandwiched vowels removed.\n        return temp;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Complete{\r\n    \r\n    // Function to check if a character is a vowel\r\n    public static boolean check(char c)\r\n    {\r\n        if(c == 'a' || c =='e' || c=='i' || c=='o' || c=='u')\r\n            return true;\r\n        return false;\r\n    }\r\n    \r\n    // Function to remove sandwiched vowels from a string\r\n    public static String Sandwiched_Vowel(String str) \r\n    { \r\n        StringBuffer s = new StringBuffer(str);\r\n        \r\n        // Traverse through the string\r\n        for(int i=1;i<s.length()-1;i++){\r\n            // Check if the character is a vowel and the characters adjacent to it are not vowels\r\n            if(check(s.charAt(i)) && !check(s.charAt(i-1)) && !check(s.charAt(i+1)))\r\n                // Replace the character with an empty string\r\n                s.replace(i, i+1, \"\");\r\n        }\r\n        \r\n        // Return the modified string\r\n        return s.toString();\r\n        \r\n    } \r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n#Function to check if a character is a vowel\r\ndef check(c):\r\n    if(c == 'a' or c =='e' or c=='i' or c=='o' or c=='u'):\r\n        return True\r\n    return False\r\n\r\n#Function to remove sandwiched vowels in a string\r\ndef Sandwiched_Vowel(s):\r\n\r\n    temp = \"\"\r\n    temp += s[0]    #Appending first character of the string to the result\r\n\r\n    #Iterating through the string from index 1 to len(s)-2\r\n    for i in range(1,len(s)-1):\r\n\r\n        #Checking if the current character is a vowel and the adjacent characters are not vowels\r\n        if(check(s[i]) == True and check(s[i-1]) == False and check(s[i+1]) == False):\r\n            continue    #If true, skip this character and move to the next character\r\n\r\n        else:\r\n            temp += s[i]    #Else, append this character to the result\r\n\r\n    #Appending the last character of the string to the result (if string has more than 1 character)\r\n    if len(s) != 1:\r\n        temp += s[len(s)-1]\r\n\r\n    return temp    #Returning the resulting string without sandwiched vowels",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @returns {string}\n*/\n\nclass Solution {\n    //Complete the function\n    Sandwiched_Vowel(s) {\n        //Function to check if a character is a vowel\n        function check(c) {\n            return 'aeiou'.indexOf(c.toLowerCase()) !== -1;\n        }\n\n        //Function to remove sandwiched vowels in a string\n        let temp = \"\";\n        temp += s[0]; //Appending first character of the string to the result\n\n        //Iterating through the string from index 1 to len(s)-2\n        for (let i = 1; i < s.length - 1; i++) {\n            //Checking if the current character is a vowel and the adjacent characters are not vowels\n            if(check(s[i]) && !check(s[i - 1]) && !check(s[i + 1])) {\n                continue; //If true, skip this character and move to the next character\n            } else {\n                temp += s[i]; //Else, append this character to the result\n            }\n        }\n\n        //Appending the last character of the string to the result (if string has more than 1 character)\n        if (s.length > 1) {\n            temp += s[s.length - 1];\n        }\n        \n        return temp; //Returning the resulting string without sandwiched vowels\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}