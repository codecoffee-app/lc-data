{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704116,
            "title": "Santa Banta",
            "titleSlug": "santa-banta2814",
            "content": "<p><span style=\"font-size: 18px;\">Santa is still not married. He approaches a marriage bureau and asks them to hurry the process. The bureau checks the list of eligible girls of size <strong>N</strong> and hands it over to Santa. Santa being conscious about his marriage is determined to find a girl with <strong>maximum</strong> connections so that he can gather more information about her. Accordingly, he looks to figure out the <strong>maximum </strong>number of girls (from the list) who know each other to achieve the above purpose.</span></p>\n<p><span style=\"font-size: 18px;\">In order to finalize the girl, he needs to find the <strong>Kth</strong> prime. Where k = largest group of girls who know each other. Considering Santa's poor knowledge of Maths, he seeks Banta's help for the answer. Now you, a fan of Santa Banta Jokes, take this prestigious opportunity to solve the problem.</span></p>\n<p><span style=\"font-size: 18px;\">In case no of connections is zero, print \"-1\". Here the connection between girls is represented by a 2-D array <strong>g </strong>of dimension M*2, where <strong>M</strong> is the number of connections.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note :</strong><br />1. Suppose girl \"a\" knows girl \"b\" and girl \"b\" knows girl \"c\", then girl \"a\" also knows girl \"c\". <strong>Transitivity</strong> holds here.<br />2. Consider 1 as a <strong>composite</strong> number.<br />3. For precompute function given in the template you just have to complete it and use it wherever required, do not call it again and again, it is already being called by driver function before executing test cases.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> <br /></span><span style=\"font-size: 18px;\">N = 10<br />M = 6<br />g[] = {{1,2},{2,3},{3,4},{4,5},{6,7},{9,10}}\n<strong>Output :</strong> <br />11\n<strong>Explanation:</strong>\nHere in this graph there are 4 groups. \nIn 1<sup>st</sup> group: (1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5) are \nthere. In 2<sup>nd</sup>&nbsp;group: (6 -&gt; 7) are there.\nIn 3<sup>rd </sup>group: (8) is there.\nIn 4<sup>th</sup>&nbsp;group: (10 -&gt; 9) are there.\nIn these 4 group the maximum number of \nvalue is 5. So, K = 5 and the 5<sup>th</sup>&nbsp;prime number \nis 11. Return 11.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> <br />N = 2<br />M = 1<br />g[] = {{1, 2}} <strong>\nOutput :</strong> <br />3\n<strong>Explanation:\n</strong>In this Example there will only be a <br /></span><span style=\"font-size: 18px;\">single </span><span style=\"font-size: 18px;\">group of 2 girls, and hence the <br />value of K is 2, The 2nd prime is 3.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span></p>\n<p><span style=\"font-size: 18px;\">This is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>helpSanta()</strong> that takes a number of girls <strong>(n)</strong>, a number of connections <strong>(m),</strong> a <strong>2-D</strong> <strong>array </strong>of girls connections&nbsp;<strong>(g)</strong>, and return the Kth prime no if there are no connections then return -1. The driver code takes care of the printing.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N + M).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N + M).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1 &le; n &le; 10<sup>5</sup><br />0 &le; m &le; 10<sup>5</sup><br />1 &le; u, v &le; n<br />Sum of n+m will not exceed 10<sup>5</sup>.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Santa needs to find a bride with the most connections. Given a list of N eligible girls and M connections between them, represented by a 2D array g, determine the size of the largest group of girls who all know each other (directly or indirectly). This size is K.  Then, find the Kth prime number. Connections are transitive (if A knows B and B knows C, then A knows C). If there are no connections (M=0), return -1.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= m <= 10^5",
                    "1 <= u, v <= n",
                    "Sum of n+m will not exceed 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 10\nM = 6\ng[] = {{1,2},{2,3},{3,4},{4,5},{6,7},{9,10}}",
                        "output": "11",
                        "explanation": "The graph has 4 connected components: {1, 2, 3, 4, 5}, {6, 7}, {8}, and {9, 10}. The largest component has size 5. The 5th prime number is 11."
                    },
                    {
                        "input": "N = 2\nM = 1\ng[] = {{1, 2}}",
                        "output": "3",
                        "explanation": "There is one connected component: {1, 2}. Its size is 2. The 2nd prime number is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Concept used : sieve of eratosthenes,connected components</span></p>\n<p><span style=\"font-size: 18px;\">1. First use sieve of eratosthenes to precompute primes then put all primes in a new array.<br />2. Use dfs to find connected component , then using max size of connected component find prime corresponding to max size.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Constant defining the maximum size of the array\nconst int maxn=1000001;\n\n// Array for marking prime numbers\nint a[maxn+1];\n\n// Vector for storing prime numbers\nvector<int> pl={2};\n\nclass Solution{\npublic:\n    // Function to precompute the prime numbers\n    void precompute(){\n        // Marking all numbers as prime initially\n        for(int i=1;i<=maxn;i++)\n            a[i]=1;\n        \n        // Marking 0 and 1 as not prime\n        a[0]=a[1]=0;\n        \n        // Sieve of Eratosthenes algorithm to mark non-prime numbers\n        for(int i=2;i*i<=maxn;i++){\n            if(a[i]==1){\n                for(int j=i*i;j<=maxn;j+=i){\n                    a[j]=0;\n                }\n            }\n        }\n        \n        // Storing all the prime numbers in the vector\n        for(int i=3;i<=maxn;i++)\n            if(a[i])\n                pl.push_back(i);\n    }\n    \n    // Depth-first search function to find the number of reachable nodes in a graph\n    int dfs(int i, vector<int> g[], vector<int> &vis){\n        // Marking the current node as visited\n        vis[i]=1;\n        \n        // Counter variable to keep track of the number of reachable nodes\n        int cnt=1;\n        \n        // Recursively traversing all the adjacent nodes of the current node\n        for(auto x:g[i]){\n            if(!vis[x]){\n                cnt+=dfs(x, g, vis);\n            }\n        }\n        \n        // Returning the total number of reachable nodes\n        return cnt;\n    }\n    \n    // Function to help Santa navigate the given graph\n    int helpSanta(int n, int m, vector<vector<int>> &g)\n    {\n        // Initializing the visited array\n        vector<int> vis(n+1, 0);\n        \n        // Creating an adjacency list for the given graph\n        vector<int> adj[n + 1];\n        for(auto i : g){\n            adj[i[0]].push_back(i[1]);\n            adj[i[1]].push_back(i[0]);\n        }\n        \n        // Variable to store the largest component size\n        int lc=0;\n        \n        // Traversing all the nodes from 0 to n and finding the largest component\n        for(int i = 0; i <= n; i++){\n            if(!vis[i]){\n                lc=max(lc,dfs(i, adj, vis));\n            }\n        }\n        \n        // Checking if there is only one component in the graph\n        // If yes, returning -1\n        if(lc==1)\n            return -1;\n        \n        // Returning the prime number at the (largest component size - 1) index\n        return pl[lc-1];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Complete{\n    static ArrayList<Integer> graph[]; // Array of ArrayList to represent the graph\n    static int cnt; // Variable to keep track of the count\n    static ArrayList<Integer> primes; // ArrayList to store prime numbers\n    \n    public static void precompute () {\n        // Precomputing the prime numbers\n        primes=new ArrayList<>();\n        int N=3000000; // Maximum limit\n        boolean v[]=new boolean[N+1]; // Array to mark the numbers as prime or not\n        Arrays.fill(v,true); // Initially assuming all numbers are prime\n        \n        // Finding prime numbers using Sieve of Eratosthenes algorithm\n        for(int i=2;i*i<=N;i++){\n            if(v[i]){\n                for(int j=i*i;j<=N;j+=i){\n                    v[j]=false;\n                }\n            }\n        }\n        \n        // Storing the prime numbers in the ArrayList\n        for(int i=2;i<=N;i++){\n            if(v[i]){\n                primes.add(i);\n            }\n        }\n    }\n    \n    // Function for finding the maximum number of connections\n    public static int helpSanta (int n, int m, int g[][]) {\n    \n        graph=new ArrayList[n+1]; // Initializing the graph array\n        for(int i=0;i<=n;i++){\n            graph[i]=new ArrayList<>(); // Creating an empty ArrayList for each vertex\n        }\n        \n        // Creating the adjacency list representation of the graph\n        for(int i=0;i<m;i++){\n            graph[g[i][0]].add(g[i][1]);\n            graph[g[i][1]].add(g[i][0]);\n        }\n        \n        boolean v[]=new boolean[n+1]; // Array to mark the visited vertices\n        int max_connection=0; // Variable to keep track of the maximum connection\n        \n        // Performing DFS on each unvisited vertex\n        for(int i=1;i<=n;i++){\n            if(!v[i]){\n                cnt=0; // Resetting the count before performing DFS\n                dfs(i,v); // Performing DFS\n                max_connection=Math.max(max_connection,cnt); // Updating the maximum connection\n            }\n        }\n        \n        if(max_connection==1)return -1; // If maximum connection is 1, return -1\n        return primes.get(max_connection-1); // Return the prime number at the index of maximum connection\n    }\n    \n    public static void dfs(int s,boolean v[]) {\n        v[s]=true; // Marking the current vertex as visited\n        cnt++; // Incrementing the count\n        \n        // Performing DFS on each unvisited adjacent vertex\n        for(int i:graph[s]){\n            if(!v[i]){\n                dfs(i,v); // Recursive call for DFS\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Python has a strict limit on recursion depth to prevent infinite recursive calls and stack overflow\r\n# To bypass this, you can use the following code\r\nimport sys\r\nsys.setrecursionlimit(10**6)\r\nfrom collections import defaultdict\r\n\r\n# Despite defining recursive depth limit as 1e6, we get maximum allowed depth of 3e3.\r\n# So, for this algorithm, we will be using iterative approach of DFS over recursive approach.\r\n\r\n\r\nclass Solution:\r\n    maxn = 1000001\r\n    a = [0]*(maxn+1)\r\n    pl = [2];\r\n\r\n    def precompute(self):\r\n        for i in range(1, self.maxn+1):\r\n            self.a[i] = 1\r\n\r\n        self.a[0] = 0\r\n        self.a[1] = 0\r\n\r\n        i = 2\r\n        while i*i<=self.maxn:\r\n            if(self.a[i]==1):\r\n                j = i*i\r\n                while j<=self.maxn:\r\n                    self.a[j] = 0\r\n                    j+=i\r\n            i+=1\r\n\r\n        for i in range(3, self.maxn+1):\r\n            if(self.a[i]):\r\n                self.pl.append(i)\r\n\r\n    def helpSanta(self, n, m, g):\r\n        graph = defaultdict(list)\r\n        for x,y in g:\r\n            graph[x].append(y)\r\n            graph[y].append(x)\r\n        vis = [0] * (n + 1)\r\n        lc = 0\r\n\r\n        for i in range(1, n + 1):\r\n            if not vis[i]:\r\n                \r\n                # Push first index to be processed in DFS to the stack\r\n                stack = [i]\r\n                vis[i] = 1\r\n                cnt = 1\r\n\r\n                # While we have elements to process in stack, i.e., while DFS is being called, we will be in the while loop\r\n                while stack: \r\n                    node = stack.pop()\r\n\r\n                    # Pushing more elements in the stack, i.e., calling for more DFS calls\r\n                    for x in graph[node]:\r\n                        if not vis[x]:\r\n                            stack.append(x)\r\n                            vis[x] = 1\r\n                            cnt += 1\r\n\r\n                lc = max(lc, cnt)\r\n\r\n        if lc == 1:\r\n            return -1\r\n\r\n        return self.pl[lc-1]\r\n    ",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}