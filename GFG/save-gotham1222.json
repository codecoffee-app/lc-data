{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703305,
            "title": "Greater tower sum",
            "titleSlug": "save-gotham1222",
            "content": "<p><span style=\"font-size: 18px;\">There are some towers in stright line. You are given an array <strong>arr </strong>denoting the height of each tower. For tower <strong>p</strong>, the greater tower is the closest tower (towards the right), greater than the height of tower <strong>p</strong>. Return the sum of the heights of all tower's greater towers.<br /><strong>Note: </strong>Return the answer by taking modulo 1e9+7.&nbsp;&nbsp;If for a tower&nbsp;<strong>k</strong>, no such tower exists then take its height as 0<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [112, 133, 161, 311, 122, 512, 1212, 0, 19212]\n<strong>Output :</strong> 41265\n<strong>Explanation: </strong>nextgreater(112) : 133 nextgreater(133) : 161 nextgreater(161) : 311 nextgreater(311) : 512 nextgreater(122) : 512 nextgreater(512) : 1212 nextgreater(1212) : 19212 nextgreater(0) : 19212 nextgreater(19212) : 0\nadd = 133+161+311+512+512+1212+19212+19212+0 = 41265.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [5, 9, 7, 6] <strong>\nOutput :</strong> 9<br /><strong>Explanation: </strong>nextgreater(5) : 9 </span><span >nextgreater(9) : 0 nextgreater(7) : 0 nextgreater(6) : 0</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >This problem can be solved using a stack.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\n  public:\n    int SaveGotham(vector<int>& arr) {\n        int n = arr.size();\n        int mod = 1000000007;\n        stack<int> s;\n\n        int ans = 0;\n        // push the first element to stack\n        s.push(arr[0]);\n\n        // iterate for rest of the elements\n        for (int i = 1; i < n; i++) {\n\n            if (s.empty()) {\n                s.push(arr[i]);\n                continue;\n            }\n\n            /* if stack is not empty, then\n               pop an element from stack.\n               If the popped element is smaller\n               than next, then\n            a) print the pair\n            b) keep popping while elements are\n            smaller and stack is not empty */\n            while (s.empty() == false && s.top() < arr[i]) {\n                // cout << s.top() << \" --> \" << arr[i] << endl;\n                ans = (ans + arr[i]) % mod;\n                s.pop();\n            }\n\n            /* push next to stack so that we can find\n            next greater for it */\n            s.push(arr[i]);\n        }\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    public static int SaveGotham(int[] arr) {\n        int n = arr.length;\n        int mod = (int)1e9 + 7;\n        Stack<Integer> stack = new Stack<>();\n        int ans = 0;\n\n        // Push the first element to stack\n        stack.push(arr[0]);\n\n        // Iterate for the rest of the elements\n        for (int i = 1; i < n; i++) {\n            // If stack is empty, push the current element\n            if (stack.isEmpty()) {\n                stack.push(arr[i]);\n                continue;\n            }\n\n            // While stack is not empty and the top of the stack is smaller than the\n            // current element\n            while (!stack.isEmpty() && stack.peek() < arr[i]) {\n                // Update the answer\n                ans = (ans + arr[i]) % mod;\n                stack.pop();\n            }\n\n            // Push the current element to stack\n            stack.push(arr[i]);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\nclass Solution:\n\n    def SaveGotham(self, arr):\n        n = len(arr)\n        mod = int(1e9 + 7)\n        stack = []\n        ans = 0\n\n        # Push the first element to stack\n        stack.append(arr[0])\n\n        # Iterate for the rest of the elements\n        for i in range(1, n):\n            # If stack is empty, push the current element\n            if not stack:\n                stack.append(arr[i])\n                continue\n\n            # While stack is not empty and the top of the stack is smaller than the current element\n            while stack and stack[-1] < arr[i]:\n                # Update the answer\n                ans = (ans + arr[i]) % mod\n                stack.pop()\n\n            # Push the current element to stack\n            stack.append(arr[i])\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\nclass Solution {\n    SaveGotham(arr) {\n        // code here\n        const mod = 1e9 + 7;\n        const stack = [];\n        let ans = 0;\n\n        // Push the first element to stack\n        stack.push(arr[0]);\n\n        // Iterate for the rest of the elements\n        for (let i = 1; i < arr.length; i++) {\n            // If stack is empty, push the current element\n            if (stack.length === 0) {\n                stack.push(arr[i]);\n                continue;\n            }\n\n            // While stack is not empty and the top of the stack is smaller than the\n            // current element\n            while (stack.length > 0 && stack[stack.length - 1] < arr[i]) {\n                // Update the answer\n                ans = (ans + arr[i]) % mod;\n                stack.pop();\n            }\n\n            // Push the current element to stack\n            stack.push(arr[i]);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}