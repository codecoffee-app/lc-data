{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704987,
            "title": "Save Knights",
            "titleSlug": "save-knights2718",
            "content": "<p><span style=\"font-size:18px\">How many non-attacking knights K(n)&nbsp;can be placed on an <strong>n x n</strong>&nbsp;chessboard.&nbsp;<br />\r\nRecall that a knight can attack another knight if their vertical distance on the chessboard is 2 and their horizontal distance is 1, or if their vertical distance is 1 and their horizontal distance is 2. Only one knight may be placed on each square of the chessboard.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>n = </strong>3</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">5</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">We can place 5 non-attacking knights\r\non a 3*3 chessboard.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>n = </strong>1</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">1</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">There is only one cell available and\r\nwe can place a knight on it.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>saveKnights()</strong> which takes an Integer n as input and returns the maximum number of non-attacking Knights thatr can be placed on a n*n chessboard.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= n &lt;= 10<sup>8</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Determine the maximum number of non-attacking knights that can be placed on an n x n chessboard. A knight attacks another knight if their vertical distance is 2 and horizontal distance is 1, or vice versa. Only one knight can occupy each square.",
                "constraints": [
                    "1 <= n <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "n = 3",
                        "output": "5",
                        "explanation": "A maximum of 5 non-attacking knights can be positioned on a 3x3 chessboard."
                    },
                    {
                        "input": "n = 1",
                        "output": "1",
                        "explanation": "With a single square available, one knight can be placed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Be careful about overflow of Integers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the number of knights that can be saved\n    long long saveKnights(int n) {\n        \n        // If n=2, return 4\n        if(n==2)\n            return 4;\n        \n        // If n is even, return n^2/2\n        else if(n%2==0)\n            return pow(n,2)/2;\n        \n        // If n is odd, return (n^2+1)/2\n        else\n            return (pow(n,2)+1)/2;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}