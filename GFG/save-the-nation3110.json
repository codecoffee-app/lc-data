{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705828,
            "title": "Save The Nation",
            "titleSlug": "save-the-nation3110",
            "content": "<p><span style=\"font-size:18px\">An Encryption algorithm works in the following way<br />\r\n<strong>Message:</strong> eNEMYwILLaTTACK<br />\r\n<strong>Enrypted Form:</strong> eYLA NwaC EITK MLT<br />\r\n<br />\r\nThe way to do it is that the number of rows and the number of columns in the figure (formed from the alphabets of the Message) lie between <strong>floor</strong> (sqrt(len(message))) and <strong>ceil </strong>(sqrt(len(message))). It also states that the number of rows is less than or equal to the number of columns, and that the area of rectangle thus formed is minimum. Based on the this criteria, we have to choose a set of values for rows and columns.<br />\r\n<br />\r\nFor the string<strong> haveaniceday,</strong>&nbsp;we have floor(sqrt(len(message))) = 3 and ceil(sqrt(len(message))) = 4.<br />\r\n<br />\r\n3 * 3 = 9 &lt; len(message) = 15<br />\r\n3 * 4 = 12 = len(message)<br />\r\n4 * 3 = 12 = len(message)<br />\r\n4 * 4 = 16 &gt; len(message)<br />\r\n<br />\r\nOut of the 4 possible squares, we can see that, rows = 3 and columns = 4 is the best fit.<br />\r\nOn building the figure, we get<br />\r\n<br />\r\nhave<br />\r\nanic<br />\r\neday<br />\r\n<br />\r\nSo, the Encrypted form is &quot;hae and via ecy&quot;.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>S = </strong>&quot;</span><span style=\"font-size:18px\">eNEMYwILLaTTACK&quot;</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">eYLA NwaC EITK MLT</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The encrypted form of the given String\r\nis printed.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>S = </strong>&quot;</span><span style=\"font-size:18px\">SavetheMines&quot;</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">Sti ahn vee eMs</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The encrypted form of the given String\r\nis printed.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>encryptString()</strong> which takes an String S as input and returns the encrypted form as a String.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|S|)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= |S| &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "An encryption algorithm rearranges a message by organizing it into a rectangular grid and then reading the characters column by column. The dimensions of the grid (rows and columns) are determined by the length of the message. Specifically:\n\n1.  Calculate the floor and ceiling of the square root of the message length.\n2.  The number of rows (r) and columns (c) must fall within these bounds: floor(sqrt(length)) <= r, c <= ceil(sqrt(length)).\n3.  The product of rows and columns should be as close as possible to the message length, while also ensuring that rows <= columns. The goal is to minimize the area while covering all the characters in the string.\n4.  Arrange the message characters into the grid row-wise.\n5.  The encrypted message is constructed by reading the characters column-wise, with spaces separating the columns.",
                "constraints": [
                    "1 <= |S| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "eNEMYwILLaTTACK",
                        "output": "eYLA NwaC EITK MLT",
                        "explanation": "The input string 'eNEMYwILLaTTACK' has length 15.  floor(sqrt(15)) = 3, ceil(sqrt(15)) = 4. The optimal rectangle is 3x5, forming a grid. Reading column-wise results in 'eYLA NwaC EITK MLT'."
                    },
                    {
                        "input": "SavetheMines",
                        "output": "Sti ahn vee eMs",
                        "explanation": "The input string 'SavetheMines' has length 12. floor(sqrt(12)) = 3, ceil(sqrt(12)) = 4. The optimal rectangle is 3x4.  Arranging the string and reading column-wise yields 'Sti ahn vee eMs'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Just find the number of rows and columns using square root.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    //Function to encrypt a string.\n    string encryptString(string S) {\n        \n        string ans = \"\";\n        \n        //calculating length of input string.\n        int len = S.length();\n        \n        //calculating ceiling and floor of square root \n        //of length of input string.\n        int c = ceil(sqrt(len));\n        int f = floor(sqrt(len));\n        \n        //iterating over columns of the 2D grid.\n        for(int i=0; i<c; i++){\n            \n            //iterating over rows of the 2D grid.\n            for(int j=i; j<len; j+=c)\n                \n                //appending characters in the column to result string.\n                ans += S[j];\n                \n            //appending space after each column.\n            ans += \" \";\n        }\n        \n        //returning the encrypted string.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}