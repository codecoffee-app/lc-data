{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703225,
            "title": "Save Winterfell",
            "titleSlug": "save-winterfell1447",
            "content": "<p><span style=\"font-size: 18px;\">As White Walkers have attacked Winterfell, Cersei has to send her army to Winterfell but through tunnels.<br />Unwilling to do so, she wants to delay as much as she can so she take the longest route to Winterfell.<br />You are given no of tunnels(n) followed by tunnel 'u' connecting tunnel 'v' having distance 'w'.&nbsp;<br />Now, you being a fan of Cersei, is keen to find the longest route.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>&acirc;&euro;&lsaquo;Input :</strong> \narr[ ] = {{1, 5, 3}, {3, 5, 5}, {5, 4, 2}, \n{2, 4, 5}, {4, 7, 6}, {7, 8, 2}, {7, 6, 1}} \nand N = 8\n<strong>Output :</strong> 15\n<strong>Explanation:</strong>\nIf we consider the path between 8 and 3 then \nit add up to the sum equal to 15.\n\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[ ] = {{1, 2, 3},{2, 3, 1}} and \nN = 3 <strong>\nOutput :</strong>  4</span></pre>\n<p><br /><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />This is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>longest_route()</strong> that takes a 2-d array <strong>(arr)</strong>, number of tunnels&nbsp;<strong>(N),</strong>&nbsp;and return the length of the longest route.&nbsp;The driver code takes care of the printing.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 7000<br />1 &le; u,v &le; N<br />1 &le; w &le; 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "The White Walkers have breached Winterfell, and Cersei reluctantly agrees to send her army.  However, true to form, she desires to delay their arrival as much as possible by making them take the longest possible route through a network of tunnels.  You are given a description of these tunnels, where each tunnel connects two locations and has a specific distance. Your task is to find the length of the longest possible route through the tunnels. It's important to note that there is no defined start and end, so the longest path can start and end at any node. Also, tunnel connections are bidirectional.",
                "constraints": [
                    "1 <= N <= 7000",
                    "1 <= u, v <= N",
                    "1 <= w <= 500"
                ],
                "testcases": [
                    {
                        "input": "arr = {{1, 5, 3}, {3, 5, 5}, {5, 4, 2}, {2, 4, 5}, {4, 7, 6}, {7, 8, 2}, {7, 6, 1}}, N = 8",
                        "output": "15",
                        "explanation": "The longest path could be found between nodes 3 and 8, or any other path of equal length. The path has a total distance of 15. A possible path is 3->5->4->7->8 (5 + 2 + 6 + 2 = 15)"
                    },
                    {
                        "input": "arr = {{1, 2, 3},{2, 3, 1}}, N = 3",
                        "output": "4",
                        "explanation": "The longest path would be 1->2->3, with the total distance of 3 + 1 = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Concept used : Double DFS</span></p>\n\n<p><span style=\"font-size:18px\">First use DFS using any vertice to calculate longest distance,then again do DFS for vertex having longest distance in first iteration.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "unordered_map<int, int> vis;\r\nint src = 1;\r\nint ans = 0;\r\n\r\nvoid dfs1(int s, vector<vector<pair<int, int>>> &adj, int x){\r\n    if(x > ans){\r\n        // cout << s << \" \" << x <</ endl;\r\n        ans = x;\r\n        src = s;\r\n    }\r\n    \r\n    for(int i=0;i<adj[s].size();i++){\r\n        \r\n        if(vis[adj[s][i].first] == 0){\r\n            vis[adj[s][i].first] = 1;\r\n            dfs1(adj[s][i].first, adj, x + adj[s][i].second);\r\n        }\r\n    }\r\n    \r\n    return;\r\n}\r\n\r\n\r\nint dfs2(int s, vector<vector<pair<int, int>>> &adj){\r\n    \r\n    int ans = 0;\r\n    for(int i=0;i<adj[s].size();i++){\r\n        if(vis[adj[s][i].first] == 0){\r\n            vis[adj[s][i].first] = 1;\r\n            ans = max(ans, adj[s][i].second + dfs2(adj[s][i].first, adj));\r\n        }\r\n    }\r\n    \r\n    return ans;\r\n}\r\n\r\nint longest_route(vector<vector<int>> &arr, int n)\r\n{\r\n    \r\n    vector<vector<pair<int, int>>> adj(n+1);\r\n    \r\n    for(int i=0;i<n-1;i++){\r\n        adj[arr[i][0]].push_back({arr[i][1],arr[i][2]});\r\n        adj[arr[i][1]].push_back({arr[i][0],arr[i][2]});\r\n    }\r\n    // return 0;\r\n    vis.clear();\r\n    vis[1] = 1;\r\n    src = 1;\r\n    ans = 0;\r\n    dfs1(1, adj, 0);\r\n    vis.clear();\r\n    // cout << src << \" \" << ans << endl;\r\n    vis[src] = 1;\r\n    \r\n    return dfs2(src, adj);\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Complete {\n\n    static int src = 1;\n    static int ans = 0;\n    static HashMap<Integer, Integer> vis = new HashMap<>();\n\n    public static void dfs1(int s, List<List<int[]>> adj, int x) {\n        if (x > ans) {\n            ans = x;\n            src = s;\n        }\n\n        for (int[] neighbor : adj.get(s)) {\n            int neighborNode = neighbor[0];\n            int weight = neighbor[1];\n\n            if (!vis.containsKey(neighborNode)) {\n                vis.put(neighborNode, 1);\n                dfs1(neighborNode, adj, x + weight);\n            }\n        }\n    }\n\n    public static int dfs2(int s, List<List<int[]>> adj) {\n        int maxAns = 0;\n\n        for (int[] neighbor : adj.get(s)) {\n            int neighborNode = neighbor[0];\n            int weight = neighbor[1];\n\n            if (!vis.containsKey(neighborNode)) {\n                vis.put(neighborNode, 1);\n                maxAns = Math.max(maxAns, weight + dfs2(neighborNode, adj));\n            }\n        }\n\n        return maxAns;\n    }\n\n    public static int longest_route(int arr[][], int n) {\n        List<List<int[]>> adj = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            adj.add(new ArrayList<>());\n        }\n\n        for (int i = 0; i < n - 1; i++) {\n            adj.get(arr[i][0]).add(new int[] {arr[i][1], arr[i][2]});\n            adj.get(arr[i][1]).add(new int[] {arr[i][0], arr[i][2]});\n        }\n\n        vis.clear();\n        vis.put(1, 1);\n        src = 1;\n        ans = 0;\n        dfs1(1, adj, 0);\n\n        vis.clear();\n        vis.put(src, 1);\n\n        return dfs2(src, adj);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() {\n        this.src = 1;\n        this.ans = 0;\n        this.vis = new Map();\n    }\n\n    dfs1(s, adj) {\n        let stack = [ [ s, 0 ] ];\n        let localSrc = s;\n        let localMax = 0;\n        this.vis.clear();\n        this.vis.set(s, true);\n\n        while (stack.length > 0) {\n            let [node, length] = stack.pop();\n\n            if (length > localMax) {\n                localMax = length;\n                localSrc = node;\n            }\n\n            for (const neighbor of adj[node]) {\n                const neighborNode = neighbor[0];\n                const weight = neighbor[1];\n\n                if (!this.vis.has(neighborNode)) {\n                    this.vis.set(neighborNode, true);\n                    stack.push([ neighborNode, length + weight ]);\n                }\n            }\n        }\n\n        this.src = localSrc;\n        this.ans = localMax;\n    }\n\n    dfs2(s, adj) {\n        let stack = [ [ s, 0 ] ];\n        let maxAns = 0;\n        this.vis.clear();\n        this.vis.set(s, true);\n\n        while (stack.length > 0) {\n            let [node, length] = stack.pop();\n\n            maxAns = Math.max(maxAns, length);\n\n            for (const neighbor of adj[node]) {\n                const neighborNode = neighbor[0];\n                const weight = neighbor[1];\n\n                if (!this.vis.has(neighborNode)) {\n                    this.vis.set(neighborNode, true);\n                    stack.push([ neighborNode, length + weight ]);\n                }\n            }\n        }\n\n        return maxAns;\n    }\n\n    longest_route(n, arr) {\n        const adj = Array.from({length : n + 1}, () => []);\n\n        for (let i = 0; i < n - 1; i++) {\n            adj[arr[i][0]].push([ arr[i][1], arr[i][2] ]);\n            adj[arr[i][1]].push([ arr[i][0], arr[i][2] ]);\n        }\n\n        this.dfs1(1, adj);\n\n        this.vis.clear();\n        this.vis.set(this.src, true);\n\n        return this.dfs2(this.src, adj);\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}