{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705856,
            "title": "Save Your Life",
            "titleSlug": "save-your-life4601",
            "content": "<p><span style=\"font-size:18px\">Given a string&nbsp;<strong>w</strong>, integer array <strong>b,</strong> &nbsp;character array <strong>x&nbsp;</strong>and an integer <strong>n</strong>. <strong>n</strong>&nbsp;is the size of array <strong>b</strong> and array&nbsp;<strong>x</strong>. Find a substring which has the sum of the ASCII values of its every character, as maximum. ASCII values of some characters&nbsp;are redefined.<br />\r\n<strong>Note:</strong></span><strong>&nbsp;</strong><span style=\"font-size:18px\">Uppercase &amp; lowercase both will be present in the string&nbsp;<strong>w</strong>. Array <strong>b</strong>&nbsp;and Array <strong>x</strong>&nbsp;contain corresponding redefined ASCII values. For each i, b[i] contain redefined ASCII value of character&nbsp;<strong>x[i]</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nW = abcde\r\nN = 1\r\nX[] = { &#39;c&#39; }\r\nB[] = { -1000 }\r\n<strong>Output:</strong>\r\nde\r\n<strong>Explanation:\r\n</strong>Substring &quot;de&quot; has the\r\nmaximum sum of ascii value,\r\nincluding c decreases the sum value</span>\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nW = dbfbsdbf \r\nN = 2\r\nX[] = { &#39;b&#39;,&#39;s&#39; }\r\nB[] = { -100, 45  }\r\n<strong>Output:</strong>\r\ndbfbsdbf</span><span style=\"font-size:18px\">\r\n<strong>Explanation:\r\n</strong>Substring &quot;dbfbsdbf</span><span style=\"font-size:18px\">&quot; has the maximum\r\nsum of ascii value.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>maxSum()</strong>&nbsp;which takes&nbsp;string <strong>W</strong>, character array <strong>X</strong>, integer array <strong>B</strong>, integer <strong>N</strong> as length of array <strong>X</strong> and <strong>B</strong>&nbsp;as input parameters and returns the substring with the maximum sum of ascii value.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(|W|)<br />\r\n<strong>Expected Auxiliary Space: </strong>O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">1&lt;=|W|&lt;=100000<br />\r\n1&lt;=|X|&lt;=52<br />\r\n-1000&lt;=B<sub>i</sub>&lt;=1000</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Each character of W and A will be from a-z, A-Z.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `w`, an integer array `b`, a character array `x`, and an integer `n`. `n` represents the size of both array `b` and array `x`. The goal is to find a substring of `w` that has the maximum sum of ASCII values of its characters.  The ASCII values of some characters are redefined. Uppercase and lowercase letters are present in the string `w`. The array `b` and array `x` contain corresponding redefined ASCII values. For each index `i`, `b[i]` contains the redefined ASCII value of character `x[i]`.",
                "constraints": [
                    "1 <= |w| <= 100000",
                    "1 <= |x| <= 52",
                    "-1000 <= b<sub>i</sub> <= 1000",
                    "Each character of w and x will be from a-z, A-Z."
                ],
                "testcases": [
                    {
                        "input": "W = abcde\nN = 1\nX[] = { 'c' }\nB[] = { -1000 }",
                        "output": "de",
                        "explanation": "The substring \"de\" has the maximum sum of ASCII values. Including 'c' decreases the sum because its value is redefined to -1000."
                    },
                    {
                        "input": "W = dbfbsdbf\nN = 2\nX[] = { 'b','s' }\nB[] = { -100, 45  }",
                        "output": "dbfbsdbf",
                        "explanation": "The substring \"dbfbsdbf\" has the maximum sum of ASCII values when considering the redefined values of 'b' and 's'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Kadane&#39;s Algorithm</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Kadane",
                "slug": "kadane"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\npublic:\r\n      string maxSum(string w,char x[], int b[],int n)\r\n      {\r\n        // hash the position of characters\r\n        map<int,int> hash;\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            hash[(int)x[i]]=i+1;\r\n        }\r\n        \r\n        // intialize the maximum sum so far as zero\r\n        int max_so_far=0,max_ending_here=0;\r\n        \r\n        int start=0,end=0,s=0;\r\n        \r\n        char k=w[0];\r\n        \r\n        // update the max sum so far as first charcter ascii value\r\n        if(hash[k]==0)\r\n            max_so_far=(int)k;\r\n        else\r\n            max_so_far=b[hash[k]-1];\r\n        \r\n        // Kadane's Algorithm\r\n        for(int i=0;i<w.length();i++)\r\n        {\r\n            char d=w[i];\r\n            if(hash[d]==0)\r\n            {\r\n                max_ending_here+=(int)d;\r\n            }\r\n            else\r\n            {\r\n                max_ending_here+=b[hash[d]-1];\r\n            }\r\n            \r\n            if (max_so_far < max_ending_here)\r\n            {\r\n                max_so_far = max_ending_here;\r\n                start = s;\r\n                end = i;\r\n            }\r\n     \r\n            if (max_ending_here < 0)\r\n            {\r\n                max_ending_here = 0;\r\n                s = i+1;\r\n            }\r\n        }\r\n        \r\n        // Find the substring from start to end\r\n        string ans = \"\";\r\n        for(int i = start;i<=end;i++)\r\n        {\r\n            ans += w[i];\r\n        }\r\n\r\n        return ans;  \r\n      }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    static String maxSum(String w,char x[],int b[], int n){\r\n        // hash the position of characters\r\n        int hash[] = new int[500];\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            hash[(int)x[i]]=i+1;\r\n        }\r\n        \r\n        // intialize the maximum sum so far as zero\r\n        int max_so_far=0,max_ending_here=0;\r\n        \r\n        int start=0,end=0,s=0;\r\n        \r\n        char k=w.charAt(0);\r\n        \r\n        // update the max sum so far as first charcter ascii value\r\n        if(hash[k]==0)\r\n            max_so_far=(int)k;\r\n        else\r\n            max_so_far=b[hash[k]-1];\r\n        \r\n        // Kadane's Algorithm\r\n        for(int i=0;i<w.length();i++)\r\n        {\r\n            char d=w.charAt(i);\r\n            if(hash[d]==0)\r\n            {\r\n                max_ending_here+=(int)d;\r\n            }\r\n            else\r\n            {\r\n                max_ending_here+=b[hash[d]-1];\r\n            }\r\n            \r\n            if (max_so_far < max_ending_here)\r\n            {\r\n                max_so_far = max_ending_here;\r\n                start = s;\r\n                end = i;\r\n            }\r\n     \r\n            if (max_ending_here < 0)\r\n            {\r\n                max_ending_here = 0;\r\n                s = i+1;\r\n            }\r\n        }\r\n        \r\n        // Find the substring from start to end\r\n        String ans = \"\";\r\n        for(int i = start;i<=end;i++)\r\n        {\r\n            ans += w.charAt(i);\r\n        }\r\n\r\n        return ans;  \r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# This function calculates the maximum sum of a substring in the given string 'w'\n# 'w' is the input string\n# 'x' is a helper array used for mapping characters to indices\n# 'b' is an array of weights for each character\n# 'n' is the length of 'x' array\n# The function returns the substring with the maximum sum\n\nclass Solution:\n    def maxSum(self, w, x, b, n):\n        # Create a hash map to map characters to their indices\n        hash_={}\n        for i in range(n):\n            hash_[ord(x[i])]=i\n\n        max_so_far=0\n        max_ending_here=0\n        start=end=s=0\n\n        # Find the maximum sum, start index and end index of the substring\n        # Initialize max_so_far as the weight of the first character\n        if ord(w[0]) in hash_:\n            max_so_far=b[hash_[ord(w[0])]]\n        else :\n            max_so_far=ord(w[0])\n\n        for i in range(len(w)):\n            c=ord(w[i])\n            # If the current character is in the hash map, add its weight to the current sum\n            if c in hash_:\n                max_ending_here+=b[hash_[c]]\n            else :\n                max_ending_here+=c\n\n            # If the current sum is greater than the maximum sum so far,\n            # update the maximum sum and the start and end indices of the substring\n            if max_ending_here>max_so_far:\n                max_so_far=max_ending_here\n                start=s\n                end=i\n\n            # If the current sum becomes negative, reset it to 0 and update the start index\n            if max_ending_here<0:\n                max_ending_here=0\n                s=i+1\n\n        ans=\"\"\n        # Construct the substring with the maximum sum\n        for i in range(start,end+1):\n            ans+=w[i]\n\n        return ans",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}