{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707514,
            "title": "Scrambled String",
            "titleSlug": "scrambled-string",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings&nbsp;<strong>S1</strong>&nbsp;and&nbsp;<strong>S2</strong>&nbsp;of equal length, the task is to determine if S2 is a scrambled form of S1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Scrambled string:</strong>&nbsp;Given string&nbsp;<strong>str</strong>, we can represent it as a binary tree&nbsp;by partitioning it into two non-empty substrings recursively.<br />Below is one possible representation of str = <strong>coder:</strong><br />&nbsp;</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/707514/Web/Other/5360f3bd-09bb-4f9d-9c84-be3844091359_1685087790.png\" /><br /><span style=\"font-size: 18px;\">To scramble the string, we may choose any non-leaf node and swap its two children.&nbsp;<br />Suppose, we choose the node <strong>co</strong> and swap its two children, it produces a scrambled string <strong>ocder</strong>.<br />Similarly, if we continue to swap the children of nodes <strong>der</strong> and <strong>er</strong>, it produces a scrambled string <strong>ocred</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;Scrambled string is not the same as an Anagram.</span></p>\n<p><span style=\"font-size: 18px;\">Print \"Yes\" if S2 is a scrambled form of S1 otherwise print \"No\".</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> S1=\"coder\", S2=\"ocder\"\n<strong>Output:</strong> Yes\n<strong>Explanation:</strong> ocder is a scrambled \nform of coder.\n\n    ocder\n   /    \\\n  oc    der\n / \\    \no   c  \n\nAs \"ocder\" can represent it \nas a binary tree by partitioning \nit into two non-empty substrings.\nWe just have to swap 'o' and 'c' \nto get \"coder\".</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> S1=\"abcde\", S2=\"caebd\" \n<strong>Output:</strong> No\n<strong>Explanation:</strong> caebd is not a \nscrambled form of abcde.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything.&nbsp;You only need to complete the function<strong>&nbsp;isScramble</strong><strong>()&nbsp;</strong>which takes two strings S1 and S2&nbsp;as input and returns a boolean value.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N<sup>2</sup>)</span></p>\n<p><strong><span style=\"font-size: 18px;\">Constrains:&nbsp;</span></strong></p>\n<ul>\n<li><span style=\"font-size: 18px;\">S1.length = S2.length</span></li>\n<li><span style=\"font-size: 18px;\">S1.length&lt;=31</span></li>\n<li><span style=\"font-size: 18px;\">S1 and S2 consist of lower-case English letters.</span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings S1 and S2 of equal length, determine if S2 is a scrambled form of S1.\n\nA scrambled string can be represented as a binary tree by recursively partitioning it into two non-empty substrings. To scramble the string, you can choose any non-leaf node and swap its two children. A scrambled string is not the same as an Anagram.\n\nDetermine whether S2 can be derived from S1 through a series of such swaps.",
                "constraints": [
                    "S1.length = S2.length",
                    "S1.length <= 31",
                    "S1 and S2 consist of lower-case English letters."
                ],
                "testcases": [
                    {
                        "input": "S1=\"coder\", S2=\"ocder\"",
                        "output": "Yes",
                        "explanation": "The string \"ocder\" can be obtained from \"coder\" by swapping the children of the node 'co' in the binary tree representation. Thus, \"ocder\" is a scrambled form of \"coder\"."
                    },
                    {
                        "input": "S1=\"abcde\", S2=\"caebd\"",
                        "output": "No",
                        "explanation": "The string \"caebd\" cannot be obtained from \"abcde\" by any series of swaps of children nodes in the binary tree representation. Thus, \"caebd\" is not a scrambled form of \"abcde\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">In order to solve this problem, Try to come up with a solution&nbsp;using&nbsp;<a href=\"https://www.geeksforgeeks.org/divide-and-conquer-algorithm-introduction/\">Divide and Conquer</a>&nbsp;approach.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "nutanix"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    unordered_map<string,int> mp;\r\n    bool isScramble(string s1, string s2){\r\n        // Equal strings are scramble strings\r\n        if(s1 == s2){\r\n            return true;\r\n        }\r\n        // Strings of non-equal length\r\n        // cant' be scramble strings\r\n        if(s1.size() != s2.size()){\r\n            return false;\r\n        }\r\n        if(mp.find(s1+\" \"+s2)!=mp.end()){\r\n            return mp[s1+\" \"+s2];\r\n        }\r\n        int n = s1.size();\r\n        for(int i=1;i<s1.size();i++){\r\n            // Check if S2[0...i] is a scrambled\r\n        // string of S1[0...i] and if S2[i+1...n]\r\n        // is a scrambled string of S1[i+1...n]\r\n            if(isScramble(s1.substr(0,i),s2.substr(0,i)) and \r\n            isScramble(s1.substr(i,n-i),s2.substr(i,n-i))){\r\n                return mp[s1+\" \"+s2] = true;\r\n            }\r\n            // Check if S2[0...i] is a scrambled\r\n        // string of S1[n-i...n] and S2[i+1...n]\r\n        // is a scramble string of S1[0...n-i-1]\r\n            else if(isScramble(s1.substr(0,i), s2.substr(n-i,i)) and \r\n            isScramble(s1.substr(i,n-i),s2.substr(0,n-i))){\r\n                return mp[s1+\" \"+s2] = true;\r\n            }\r\n        }\r\n        // If none of the above\r\n     // conditions are satisfied\r\n        return mp[s1+\" \"+s2] = false;\r\n    }\r\n};\r\n\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    static HashMap<String,Boolean> hm; // HashMap to store the results of scrambled strings check\n\n    static boolean isScramble(String S1, String S2) {\n        hm = new HashMap<>(); // Initialize HashMap\n        return fun(S1, S2); // Call recursive function and return the result\n    }\n\n    static boolean fun(String S1, String S2) {\n        // Base case: if S1 and S2 are equal, return true\n        if (S1.equals(S2)) {\n            hm.put(S1 + \" \" + S2, true); // Store the result in the HashMap\n            return true;\n        }\n\n        // If the result for the current combination of S1 and S2 is already stored in the HashMap, return it\n        if (hm.containsKey(S1 + \" \" + S2)) {\n            return hm.get(S1 + \" \" + S2);\n        }\n\n        // If the lengths of S1 and S2 are equal, check for all possible splits of S1 and S2\n        if (S1.length() == S2.length()) {\n            int n = S1.length();\n            for (int i = 1; i < n; i++) {\n                // Check if both splits are scrambled strings, recursively call the function\n                // with the appropriate substrings\n                if (fun(S1.substring(0, i), S2.substring(0, i)) && fun(S1.substring(i, n), S2.substring(i, n))) {\n                    hm.put(S1 + \" \" + S2, true); // Store the result in the HashMap\n                    return true;\n                }\n\n                // Check if one of the splits is reversed, recursively call the function\n                // with the appropriate substrings\n                if (fun(S1.substring(0, i), S2.substring(n-i, n)) && fun(S1.substring(i, n), S2.substring(0, n-i))) {\n                    hm.put(S1 + \" \" + S2, true); // Store the result in the HashMap\n                    return true;\n                }\n            }\n        }\n\n        hm.put(S1 + \" \" + S2, false); // Store the result in the HashMap\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\r\n    def __init__(self):\r\n        self.mp={} # memoization dictionary\r\n    \r\n    # Function to check if two strings are scrambled or not.\r\n    def isScramble(self,s1: str, s2: str):\r\n\r\n        if s1==s2: # base case if strings are equal\r\n            return True\r\n        if len(s1)!=len(s2): # base case if strings have different lengths\r\n            return False\r\n        if s1+\" \"+s2 in self.mp: # if result for given strings is already calculated, return it\r\n            return self.mp[s1+\" \"+s2]\r\n        \r\n        n=len(s1) # length of strings\r\n        for i in range(1,n): # iterating over all possible splits of the strings\r\n            # check if the two splits of both strings are scrambled\r\n            if self.isScramble(s1[:i],s2[:i]) and self.isScramble(s1[i:],s2[i:]):\r\n                self.mp[s1+\" \"+s2]=True # update memoization dictionary\r\n                return True\r\n            # check if one split from first string and other split from second string are scrambled\r\n            elif self.isScramble(s1[:i],s2[n-i:]) and self.isScramble(s1[i:],s2[:n-i]):\r\n                self.mp[s1+\" \"+s2]=True # update memoization dictionary\r\n                return True\r\n        \r\n        self.mp[s1+\" \"+s2]=False # update result for given strings in memoization dictionary\r\n        return False # if no scramble condition is satisfied, return False",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}