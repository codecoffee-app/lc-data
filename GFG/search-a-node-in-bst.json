{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700349,
            "title": "Search a node in BST",
            "titleSlug": "search-a-node-in-bst",
            "content": "<p><span style=\"font-size:18px\">Given a <strong>Binary Search Tree </strong>and a node value X, find if the node with value X is present in the BST or not.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\\t   2\r\n\\t\\t    \\\r\n&nbsp;\\t\\t    81 \r\n&nbsp;\\t\\t  /    \\ \r\n&nbsp;\\t\\t42\\t87 \r\n&nbsp;\\t\\t \\\\t \\ \r\n&nbsp;\\t\\t  66\\t90 \r\n&nbsp;\\t\\t / \r\n&nbsp;\\t     45\r\nX = 87\r\n<strong>Output: </strong>1\r\n<strong>Explanation: </strong>As 87 is present in the\r\ngiven nodes , so the output will be\r\n1.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\\t6\r\n&nbsp;\\t\\t\\ \r\n&nbsp;\\t\\t 8 \r\n&nbsp;\\t\\t/ \\ \r\n&nbsp;\\t     7   9\r\nX = 11\r\n<strong>Output: </strong>0\r\n<strong>Explanation: </strong>As 11 is not present in \r\nthe given nodes , so the output will\r\nbe 0.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function <strong>search()</strong>which returns <strong>true </strong>if the node with <strong>value x</strong> is <strong>present </strong>in the BST<strong>else returns false</strong>.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(Height of the BST)<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= Number of nodes &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and a target value X, determine if a node with the value X exists within the BST.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "BST: {2, 81, 42, 87, 66, 90, 45}, X = 87",
                        "output": "true",
                        "explanation": "The value 87 is present in the BST."
                    },
                    {
                        "input": "BST: {6, 8, 7, 9}, X = 11",
                        "output": "false",
                        "explanation": "The value 11 is not present in the BST."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "linkedin"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Back-end complete function Template for C\r\n\r\n// Function to search a struct node in BST.\r\nbool search(struct Node* root, int x) {\r\n    // base case\r\n    if (root == NULL) return false;\r\n\r\n    // if data at current struct node is equal to x, we return true.\r\n    if (root->data == x) return true;\r\n\r\n    // if data at the current struct node is less than given value, we call the\r\n    // function recursively to search in right subtree.\r\n    if (root->data < x) return search(root->right, x);\r\n\r\n    // else we call the function recursively to search in left subtree.\r\n    return search(root->left, x);\r\n}\r\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "// Function to search a node in BST.\n\nbool search(Node* root, int x) {\n    // While the root is not null, iterate through the BST\n    while (root != NULL) {\n        // If the data in the current node is equal to x, return true\n        if (root->data == x)\n            return true;\n        \n        // If the data in the current node is less than x, move to right child\n        if (root->data < x)\n            root = root->right;\n        // If the data in the current node is greater than x, move to left child\n        else\n            root = root->left;\n    }\n    \n    // If x is not found in the BST, return false\n    return false;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class BST {\r\n    // Function to search a node in BST.\r\n    boolean search(Node root, int x) {\r\n        // base case\r\n        if (root == null) return false;\r\n\r\n        // if data at current node is equal to x, we return true.\r\n        if (root.data == x) return true;\r\n\r\n        // if data at the current node is less than given value, we call the\r\n        // function recursively to search in right subtree.\r\n        if (x > root.data) return search(root.right, x);\r\n        // else we call the function recursively to search in left subtree\r\n        else\r\n            return search(root.left, x);\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class BST:\r\n\r\n    #Function to search a node in BST.\r\n    def search(self, node, x):\r\n        \r\n        # base case\r\n        if(node is None):\r\n            return None\r\n        \r\n        #if data at current node is equal to x, we return true.\r\n        if node.data == x:\r\n            return True\r\n        \r\n        #if data at the current node is less than given value, we call the \r\n    \t#function recursively to search in right subtree.\r\n        elif (node.data < x):\r\n            return self.search(node.right, x)\r\n        #else we call the function recursively to search in left subtree\r\n        else:\r\n            return self.search(node.left, x)\r\n\r\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// Back-end complete function Template for csharp\r\n\r\nclass Solution {\r\n\r\n    // Function to search a node in BST.\r\n    public static bool search(Node root, int x) {\r\n        // base case\r\n        if (root == null) return false;\r\n    \r\n        // if data at current node is equal to x, we return true.\r\n        if (root.data == x) return true;\r\n    \r\n        // if data at the current node is less than given value, we call the\r\n        // function recursively to search in right subtree.\r\n        if (x > root.data) return search(root.right, x);\r\n        // else we call the function recursively to search in left subtree.\r\n        else\r\n            return search(root.left, x);\r\n    }\r\n}\r\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} root\r\n * @param {number} x\r\n * @returns {boolean}\r\n*/\r\n\r\nclass Solution {\r\n    // Function to search a node in BST.\r\n    search(root, x) {\r\n        // base case\r\n        if (root === null) return false;\r\n\r\n        // if data at current node is equal to x, we return true.\r\n        if (root.data === x) return true;\r\n\r\n        // if data at the current node is less than given value, we call the\r\n        // function recursively to search in right subtree.\r\n        if (root.data < x) return this.search(root.right, x);\r\n        // else we call the function recursively to search in left subtree.\r\n        return this.search(root.left, x);\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}