{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 880847,
            "title": "Search for Subarray",
            "titleSlug": "search-for-subarray",
            "content": "<p><span >You are given two integer arrays&nbsp;<strong>a[]&nbsp;</strong>and&nbsp;<strong>b[].&nbsp;</strong>You need to print the starting indexes of all the occurences of&nbsp;<strong>b[]</strong>&nbsp;as subarray in&nbsp;<strong>a[].</strong></span></p>\n<p><strong><span >Examples:<br /></span></strong></p>\n<pre><strong><span >Input: </span></strong><span >a[] = [2, 4, 1, 0, 4, 1, 1], b[] = [4, 1]<br /><strong>Output: </strong>[1, 4]<br /><strong>Explanation: </strong>b[] occurs as a subarray in a[] from index 1 to 2 and from index 4 to 5.</span></pre>\n<pre><strong><span >Input: </span></strong><span >a[] = [2, 4, 1, 0, 0, 3], b[] = [0]<br /><strong>Output: </strong>[3, 4]<br /><strong>Explanation: </strong>b[] occurs as a subarray in a[] from index 3 to 3 and from 4 to 4.</span></pre>\n<pre><strong><span >Input: </span></strong><span >a[] = [1, 3, 5, 3, 0], b[] = [1, 3, 0]<br /><strong>Output: </strong>[]<br /><strong>Explanation: </strong>There is no subarray occurs as b[] in a[]</span></pre>\n<p><strong><span >Constraints:<br /></span></strong><span style=\"color: #1e2229; font-family: Nunito; font-size: 17px; background-color: #ffffff;\">1 &le; a.size() &le; 10</span><span style=\"box-sizing: border-box; line-height: 1.7em; position: relative; vertical-align: baseline; top: -0.5em; font-family: Nunito; color: #1e2229; background-color: #ffffff; font-size: 17px !important;\">6</span><br style=\"box-sizing: border-box; line-height: 1.7em; font-family: Nunito; font-size: 17px; color: #1e2229; background-color: #ffffff;\" /><span style=\"color: #1e2229; font-family: Nunito; font-size: 17px; background-color: #ffffff;\">1 &le; b.size() &lt; a.size()<br /></span><span style=\"color: #1e2229; font-family: Nunito; font-size: 17px; background-color: #ffffff;\">0&nbsp; &le; b[i], a[i] &lt;&nbsp;</span><span style=\"color: #1e2229; font-family: Nunito; font-size: 17px; background-color: #ffffff;\">10</span><span style=\"box-sizing: border-box; line-height: 1.7em; position: relative; vertical-align: baseline; top: -0.5em; font-family: Nunito; color: #1e2229; background-color: #ffffff; font-size: 17px !important;\">4</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integer arrays `a[]` and `b[]`, find all starting indices where `b[]` occurs as a subarray within `a[]`. Return a list of these starting indices.",
                "constraints": [
                    "1 <= a.size() <= 1000000",
                    "1 <= b.size() < a.size()",
                    "0 <= b[i], a[i] < 10000"
                ],
                "testcases": [
                    {
                        "input": "a[] = [2, 4, 1, 0, 4, 1, 1], b[] = [4, 1]",
                        "output": "[1, 4]",
                        "explanation": "The subarray [4, 1] is found in a[] starting at index 1 (a[1..2]) and index 4 (a[4..5])."
                    },
                    {
                        "input": "a[] = [2, 4, 1, 0, 0, 3], b[] = [0]",
                        "output": "[3, 4]",
                        "explanation": "The subarray [0] is found in a[] starting at index 3 (a[3]) and index 4 (a[4])."
                    },
                    {
                        "input": "a[] = [1, 3, 5, 3, 0], b[] = [1, 3, 0]",
                        "output": "[]",
                        "explanation": "The subarray [1, 3, 0] is not found as a contiguous subarray within a[]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n    void constructLps(vector<int> &b, vector<int> &lps) {\n        int len = 0;\n        lps[0] = 0;\n        int i = 1;\n\n        while (i < b.size()) {\n            if (b[i] == b[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                if (len != 0) {\n                    len = lps[len - 1];\n                } else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n    }\n\n  public:\n    vector<int> search(vector<int> &a, vector<int> &b) {\n        int n = a.size();\n        int m = b.size();\n\n        vector<int> lps(m);\n        vector<int> res;\n\n        constructLps(b, lps);\n\n        int i = 0; // Index for a[]\n        int j = 0; // Index for b[]\n\n        while (i < n) {\n            if (a[i] == b[j]) {\n                i++;\n                j++;\n\n                if (j == m) {\n                    res.push_back(i - j);\n                    j = lps[j - 1];\n                }\n            } else {\n                if (j != 0) {\n                    j = lps[j - 1];\n                } else {\n                    i++;\n                }\n            }\n        }\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public ArrayList<Integer> search(int[] a, int[] b) {\n        int n = a.length;\n        int m = b.length;\n        int[] lps = constructLps(b);\n        ArrayList<Integer> res = new ArrayList<>();\n\n        int i = 0, j = 0;\n        while (i < n) {\n            if (a[i] == b[j]) {\n                i++;\n                j++;\n                if (j == m) {\n                    res.add(i - j);\n                    j = lps[j - 1];\n                }\n            } else {\n                if (j != 0) {\n                    j = lps[j - 1];\n                } else {\n                    i++;\n                }\n            }\n        }\n\n        return res;\n    }\n\n    private int[] constructLps(int[] b) {\n        int m = b.length;\n        int[] lps = new int[m];\n        int len = 0;\n        int i = 1;\n\n        while (i < m) {\n            if (b[i] == b[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                if (len != 0) {\n                    len = lps[len - 1];\n                } else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n        return lps;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def search(self, a, b):\n        n = len(a)\n        m = len(b)\n        lps = self.constructLps(b)\n        res = []\n\n        i = 0  # Index for arr\n        j = 0  # Index for pat\n\n        while i < n:\n            if a[i] == b[j]:\n                i += 1\n                j += 1\n                if j == m:\n                    res.append(i - j)\n                    j = lps[j - 1]\n            else:\n                if j != 0:\n                    j = lps[j - 1]\n                else:\n                    i += 1\n        return res\n\n    def constructLps(self, b):\n        lps = [0] * len(b)\n        length = 0\n        i = 1\n\n        while i < len(b):\n            if b[i] == b[length]:\n                length += 1\n                lps[i] = length\n                i += 1\n            else:\n                if length != 0:\n                    length = lps[length - 1]\n                else:\n                    lps[i] = 0\n                    i += 1\n        return lps\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    search(a, b) {\n        let n = a.length, m = b.length;\n        let lps = this.constructLps(b);\n        let res = [];\n        let i = 0, j = 0;\n\n        while (i < n) {\n            if (a[i] === b[j]) {\n                i++;\n                j++;\n                if (j === m) {\n                    res.push(i - j);\n                    j = lps[j - 1];\n                }\n            } else {\n                if (j !== 0) {\n                    j = lps[j - 1];\n                } else {\n                    i++;\n                }\n            }\n        }\n        return res;\n    }\n\n    constructLps(b) {\n        let lps = Array(b.length).fill(0); // Fixed typo here\n        let len = 0, i = 1;\n\n        while (i < b.length) {\n            if (b[i] === b[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                if (len !== 0) {\n                    len = lps[len - 1];\n                } else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n        return lps;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}