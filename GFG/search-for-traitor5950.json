{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704893,
            "title": "Find the safe position",
            "titleSlug": "search-for-traitor5950",
            "content": "<p><span style=\"font-size:18px\">There was a group of Jewish soldiers who were surrounded by Roman Army in a circular fence. They decided not to get captured by the brutal Roman Army. So, they made a plan.<br />\r\nThey planned to kill each other. The soldier would kill the fellow soldier next to him on left. They would do so till only one soldier is left and in the last the remained soldier would kill themselves. But there was a problem, soldier A didn&rsquo;t want to die he want to stay alive so he wanted to stand a position where he could stand till last. After all his fellow soldiers died he would simple surrender himself rather then killing himself. So,&nbsp;given N i,e number of Jewish soldiers, find the safe_position of soldier A.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 10\r\n<strong>Output: </strong>5\r\n<strong>Explanation: </strong>1 kills 2 : 3 kills 4 : \r\n5 kills 6 : 7 kills 8 : 9&nbsp;kills 10\r\nNow 1 kills 3 : 5&nbsp;kills 7 : 9 kills 1&nbsp;\r\nNow 5 kills 9&nbsp;</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 3\r\n<strong>Output: </strong>3\r\n<strong>Explanation: </strong></span><span style=\"font-size:18px\">1 kills 2 :&nbsp;3 kills 1\r\nSafe_Position &nbsp;: 3</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>find_pos()&nbsp;</strong>which takes N as input parameter and returns the safe position for soldier A.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(log(N))<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 100000</span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A group of Jewish soldiers is trapped within a circular fence by the Roman Army. To avoid capture, they devise a plan where each soldier eliminates the one to their immediate left, continuing until only one remains. This last soldier would then surrender. Soldier A wants to survive and needs to find the optimal position to stand in, ensuring they are the last one remaining. Given the number of soldiers, N, determine the safe position for Soldier A.",
                "constraints": [
                    "1 <= N <= 100000"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "5",
                        "explanation": "The elimination process proceeds as follows: 1 kills 2, 3 kills 4, 5 kills 6, 7 kills 8, 9 kills 10. Then 1 kills 3, 5 kills 7, 9 kills 1. Finally, 5 kills 9, leaving 5 as the safe position."
                    },
                    {
                        "input": "3",
                        "output": "3",
                        "explanation": "The elimination process proceeds as follows: 1 kills 2, 3 kills 1, leaving 3 as the safe position."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about power of 2.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n    public:\n    // Function to find the position of the last person surviving in a circle of N people\n    int find_pos(int N){\n        // Calculating the value of m such that 2^m is the largest power of 2 less than or equal to N\n        int m = floor(log(N*1.0)/ log(2.0));\n        \n        // Calculating the value of a which is equal to 2^m\n        int a = pow(2, m);\n        \n        // Calculating the safe position of the last person surviving\n        int safe_position = 2*(N - a) + 1;\n        \n        // Returning the safe position\n        return safe_position;\n    }    \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Function to find the position of the only set bit in the given number N.\n    public int find_pos(int N)\n    {\n        // Calculating the value of m such that 2^m is the largest power of 2 less than or equal to N\n        int m = (int)Math.Floor(Math.Log(N * 1.0) / Math.Log(2.0));\n\n        // Calculating the value of a which is equal to 2^m\n        int a = (int)Math.Pow(2, m);\n\n        // Calculating the safe position of the last person surviving\n        int safe_position = 2 * (N - a) + 1;\n\n        // Returning the safe position\n        return safe_position;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}