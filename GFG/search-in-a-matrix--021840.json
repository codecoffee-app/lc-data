{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878967,
            "title": "Search in a  Matrix",
            "titleSlug": "search-in-a-matrix--021840",
            "content": "<p><span >Given a 2D integer array <strong>mat[][] </strong>and<strong>&nbsp;</strong>a number&nbsp;<strong>x</strong>, find whether element x is present in the matrix or not.<br /></span><br /><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: mat[][] = [[6, 23, 21],[4, 45, 32],[69, 11, 87]], x = 32\n<strong>Output</strong>: true\n<strong>Explanation</strong>: 32 is present in the matrix, so the output is 1.\n</span></pre>\n<pre><span ><strong>Input</strong>: mat[][] = [[14, 34, 23, 95, 43, 28]], x = 55<br /><strong>Output</strong>: false\n<strong>Explanation</strong>: 55 is not present in the matrix, so the output is 0.<br /></span></pre>\n<pre><span ><strong>Input</strong>: mat[][] = [[87, 9, 99],[101, 3, 111]], x = 101</span><br /><span ><strong>Output</strong>: true\n<strong>Explanation</strong>: 101 is present in the matrix.</span></pre>\n<p><span ><strong>Constraints:<br /></strong>1 &lt;= mat.size(), mat[0].size() &lt;= 1000<br />1 &lt;= mat[][] &lt;= 10<sup>5</sup><br />1 &lt;= x &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D integer array `mat[][]` and a target integer `x`, determine if `x` is present within the matrix.",
                "constraints": [
                    "1 <= mat.length, mat[0].length <= 1000",
                    "1 <= mat[i][j] <= 10^5",
                    "1 <= x <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "mat = [[6, 23, 21],[4, 45, 32],[69, 11, 87]], x = 32",
                        "output": "true",
                        "explanation": "The element 32 is present in the matrix."
                    },
                    {
                        "input": "mat = [[14, 34, 23, 95, 43, 28]], x = 55",
                        "output": "false",
                        "explanation": "The element 55 is not present in the matrix."
                    },
                    {
                        "input": "mat = [[87, 9, 99],[101, 3, 111]], x = 101",
                        "output": "true",
                        "explanation": "The element 101 is present in the matrix."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Simply traverse the matrix and search over all elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    bool searchMatrix(vector<vector<int>>& matrix, int x) {\n        int n = matrix.size();    // Number of rows\n        int m = matrix[0].size(); // Number of columns\n\n        // Perform a linear search in the unsorted matrix\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (matrix[i][j] == x) {\n                    return true; // Found the target\n                }\n            }\n        }\n\n        return false; // Element not found\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int x) {\n        int n = matrix.length;    // Number of rows\n        int m = matrix[0].length; // Number of columns\n\n        // Perform a linear search in the unsorted matrix\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (matrix[i][j] == x) {\n                    return true; // Found the target\n                }\n            }\n        }\n\n        return false; // Element not found\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def searchMatrix(self, mat, x):\n        n = len(matrix)  # Number of rows\n        m = len(matrix[0])  # Number of columns\n\n        # Perform a linear search in the unsorted matrix\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == x:\n                    return True  # Found the target\n\n        return False  # Element not found\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    searchMatrix(matrix, x) {\n        const n = matrix.length;    // Number of rows\n        const m = matrix[0].length; // Number of columns\n\n        // Perform a linear search in the unsorted matrix\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n                if (matrix[i][j] === x) {\n                    return true; // Found the target\n                }\n            }\n        }\n\n        return false; // Element not found\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}