{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701266,
            "title": "Search in a sorted Matrix",
            "titleSlug": "search-in-a-matrix-1587115621",
            "content": "<p><span >Given a strictly sorted 2D matrix<strong> mat</strong>[][] of size <strong>n x m&nbsp;</strong>and<strong>&nbsp;</strong>a number&nbsp;<strong>x.</strong> Find whether the number <strong>x</strong> is present in the matrix or not.<br />Note: In a strictly sorted matrix, each row is sorted in strictly increasing order, and&nbsp;the first element of the <strong>i</strong><sup>th</sup>&nbsp;row (<strong>i</strong>!=0) is greater than the last element of the (<strong>i-1</strong>)<sup>th&nbsp;</sup>row.</span><br style=\"font-size: 18px;\" /><br /><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: mat[][] = [[1, 5, 9], [14, 20, 21], [30, 34, 43]], x = 14\n<strong>Output</strong>: true\n<strong>Explanation</strong>: 14 is present in the matrix, so output is true.\n</span></pre>\n<pre><span ><strong>Input</strong>: mat[][] = [[1, 5, 9, 11], [14, 20, 21, 26], [30, 34, 43, 50]], x = 42<br /><strong>Output</strong>: false\n<strong>Explanation</strong>: 42 is not present in the matrix.<br /></span></pre>\n<pre><span ><strong>Input</strong>: mat[][] = [[87, 96, 99], [101, 103, 111]], x = 101</span><br /><span ><strong>Output</strong>: true\n<strong>Explanation</strong>: 101 is present in the matrix.</span></pre>\n<p><span ><strong>Constraints:<br /></strong>1 &lt;= n, m &lt;= 1000<br />1 &lt;= mat[i][j] &lt;= 10<sup>9</sup><br />1 &lt;= x &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a strictly sorted 2D matrix `mat` of size n x m and a target value x, determine if x is present in the matrix. The matrix is strictly sorted such that each row is sorted in strictly increasing order, and the first element of the i-th row (i != 0) is greater than the last element of the (i-1)-th row.",
                "constraints": [
                    "1 <= n, m <= 1000",
                    "1 <= mat[i][j] <= 10^9",
                    "1 <= x <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "mat = [[1, 5, 9], [14, 20, 21], [30, 34, 43]], x = 14",
                        "output": "true",
                        "explanation": "The target value 14 is present in the matrix."
                    },
                    {
                        "input": "mat = [[1, 5, 9, 11], [14, 20, 21, 26], [30, 34, 43, 50]], x = 42",
                        "output": "false",
                        "explanation": "The target value 42 is not present in the matrix."
                    },
                    {
                        "input": "mat = [[87, 96, 99], [101, 103, 111]], x = 101",
                        "output": "true",
                        "explanation": "The target value 101 is present in the matrix."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try thinking through a binary search approach on the whole matrix.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "accolite",
            "makemytrip",
            "ola-cabs",
            "oracle",
            "visa",
            "goldman-sachs",
            "directi",
            "groupon",
            "inmobi",
            "one97",
            "polycom",
            "tinyowl"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool searchMatrix(vector<vector<int>>& mat, int x) {\n        int n = mat.size();    // Number of rows\n        int m = mat[0].size(); // Number of columns\n\n        int left = 0, right = n * m - 1;\n\n        // Perform binary search\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            int mid_value = mat[mid / m][mid % m]; // Convert 1D index to 2D\n\n            if (mid_value == x) {\n                return true; // Found the target\n            } else if (mid_value < x) {\n                left = mid + 1; // Search in the right half\n            } else {\n                right = mid - 1; // Search in the left half\n            }\n        }\n\n        return false; // Element not found\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    // Function to search a given number in a strictly sorted matrix.\n    public boolean searchMatrix(int[][] mat, int x) {\n        int n = mat.length;    // Number of rows\n        int m = mat[0].length; // Number of columns\n\n        int left = 0, right = n * m - 1;\n\n        // Perform binary search\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            int mid_value = mat[mid / m][mid % m]; // Convert 1D index to 2D\n\n            if (mid_value == x) {\n                return true; // Found the target\n            } else if (mid_value < x) {\n                left = mid + 1; // Search in the right half\n            } else {\n                right = mid - 1; // Search in the left half\n            }\n        }\n\n        return false; // Element not found\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to search a given number in a strictly sorted matrix.\n    def searchMatrix(self, mat, x):\n        n = len(mat)  # Number of rows\n        m = len(mat[0])  # Number of columns\n\n        left, right = 0, n * m - 1\n\n        # Perform binary search\n        while left <= right:\n            mid = left + (right - left) // 2\n            mid_value = mat[mid // m][mid % m]  # Convert 1D index to 2D\n\n            if mid_value == x:\n                return 1  # Found the target\n            elif mid_value < x:\n                left = mid + 1  # Search in the right half\n            else:\n                right = mid - 1  # Search in the left half\n\n        return 0  # Element not found\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[][]} mat\n * @param {number} x\n * @returns {boolean}\n */\n\nclass Solution {\n    // Function to search a given number in a strictly sorted matrix.\n    searchMatrix(mat, x) {\n        const n = mat.length;    // Number of rows\n        const m = mat[0].length; // Number of columns\n\n        let left = 0, right = n * m - 1;\n\n        // Perform binary search\n        while (left <= right) {\n            const mid = Math.floor(left + (right - left) / 2);\n            const mid_value =\n                mat[Math.floor(mid / m)][mid % m]; // Convert 1D index to 2D\n\n            if (mid_value === x) {\n                return 1; // Found the target\n            } else if (mid_value < x) {\n                left = mid + 1; // Search in the right half\n            } else {\n                right = mid - 1; // Search in the left half\n            }\n        }\n\n        return 0; // Element not found\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}