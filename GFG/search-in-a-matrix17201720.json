{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 702797,
      "title": "Search in a Row-Column sorted matrix",
      "titleSlug": "search-in-a-matrix17201720",
      "content": "<p><span >Given a 2D integer matrix <strong>mat</strong>[][] of size <strong>n x m</strong>, where every row and column is sorted in increasing order and a number <strong>x</strong>,<strong> </strong>the task is to find whether element <strong>x</strong> is present in the matrix.</span></p>\n<p><strong><span >Examples:</span></strong></p>\n<pre><span ><strong>Input</strong>: mat[][] = [[3, 30, 38],[20, 52, 54],[35, 60, 69]], x = 62\n<strong>Output</strong>: false\n<strong>Explanation</strong>: 62 is not present in the matrix, so output is false.<br /></span></pre>\n<pre><span ><strong>Input</strong>: mat[][] = [[18, 21, 27],[38, 55, 67]], x = 55\n<strong>Output</strong>: true\n<strong>Explanation</strong>: 55 is present in the matrix.</span></pre>\n<pre><span ><strong>Input</strong>: mat[][] = [[1, 2, 3],[4, 5, 6],[7, 8, 9]], x = 3\n<strong>Output</strong>: true\n<strong>Explanation</strong>: 3 is present in the matrix.<br /></span></pre>\n<p><span ><strong>Constraints</strong>:<br />1 &lt;= n, m &lt;=1000<br />1 &lt;= mat[i][j] &lt;= 10<sup>9 <br /></sup>1&lt;= x &lt;= 10<sup>9</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given a 2D integer matrix `mat` of size n x m, where every row and column is sorted in increasing order, determine if a given number `x` is present in the matrix.",
        "constraints": [
          "1 <= n, m <= 1000",
          "1 <= mat[i][j] <= 10^9",
          "1 <= x <= 10^9"
        ],
        "testcases": [
          {
            "input": "mat = [[3, 30, 38],[20, 52, 54],[35, 60, 69]], x = 62",
            "output": "false",
            "explanation": "The value 62 is not found within the provided matrix."
          },
          {
            "input": "mat = [[18, 21, 27],[38, 55, 67]], x = 55",
            "output": "true",
            "explanation": "The value 55 is present in the matrix."
          },
          {
            "input": "mat = [[1, 2, 3],[4, 5, 6],[7, 8, 9]], x = 3",
            "output": "true",
            "explanation": "The value 3 is present in the matrix."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p><span >The matrix is sorted row wise and column wise. Try to come up with a linear solution using this fact?<br />How about starting to traverse from the upper right corner?<br />As you move down, you'll keep reaching a greater element and as you move left, you'll keep reaching a smaller element.</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Searching",
        "slug": "searching"
      },
      {
        "name": "Matrix",
        "slug": "matrix"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      },
      {
        "name": "Algorithms",
        "slug": "algorithms"
      }
    ],
    "companies": [
      "paytm",
      "accolite",
      "amazon",
      "microsoft",
      "snapdeal",
      "makemytrip",
      "ola-cabs",
      "oracle",
      "visa",
      "goldman-sachs",
      "directi",
      "adobe",
      "sap",
      "groupon",
      "inmobi",
      "one97",
      "polycom",
      "tinyowl"
    ],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to search for an element in a matrix.\n    bool matSearch(vector<vector<int>> &arr, int x) {\n        int n = arr.size(), m = arr[0].size();\n        int r = 0, c = m - 1;\n\n        // iterating until we reach the end of the rows or columns.\n        while (r < n and c >= 0) {\n            // if the current element is equal to the target element, return 1.\n            if (arr[r][c] == x)\n                return 1;\n\n            // if the current element is greater than the target element,\n            // decrease the column index.\n            if (arr[r][c] > x)\n                c--;\n\n            // if the current element is less than the target element,\n            // increase the row index.\n            else\n                r++;\n        }\n        // if the target element is not found in the matrix, return 0.\n        return 0;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "class Solution {\n    public static boolean matSearch(int mat[][], int x) {\n        int n = mat.length;\n        int m = mat[0].length;\n        int i = 0, j = m - 1; // set indexes for top right element\n\n        // loop until we reach the bottom left element of the matrix\n        while (i < n && j >= 0) {\n            // if the current element is equal to x, return true\n            if (mat[i][j] == x) {\n                return true;\n            }\n\n            // if the current element is greater than x, move to the left column\n            if (mat[i][j] > x)\n                j--;\n            else\n                // if the current element is less than x, move to the next row\n                i++;\n        }\n\n        // return false if the element is not found in the matrix\n        return false;\n    }\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to check if element x is present in the matrix.\n    def matSearch(self, mat, x):\n        n = len(mat)\n        m = len(mat[0])\n        i = 0\n        j = m - 1\n\n        #iterating through the matrix\n        while i < n and j >= 0:\n\n            #if the current element is equal to x, return true\n            if mat[i][j] == x:\n                return True\n\n            #if the current element is greater than x, move left\n            if mat[i][j] > x:\n                j -= 1\n\n            #if the current element is less than x, move down\n            else:\n                i += 1\n\n        #if x is not found in the matrix, return false\n        return False\n",
        "lang_text": "py"
      },
      {
        "lang": "Javascript",
        "full_func": "// User function Template for javascript\n\n/**\n * @param {number[][]} mat\n * @param {number} x\n * @returns {number}\n */\nclass Solution {\n\n    matSearch(mat, x) {\n        let N = mat.length;    // Get the number of rows in the matrix.\n        let M = mat[0].length; // Get the number of columns in the matrix.\n        let r = 0;             // Initialize row index to 0.\n        let c = M - 1;         // Initialize column index to the last column.\n\n        while (\n            r < N &&\n            c >= 0) { // Iterate through the matrix until row index is less than number\n                      // of rows and column index is greater than or equal to 0.\n            if (mat[r][c] == x) { // Check if the current element is equal to X.\n                return true;      // Return 1 if X is found in the matrix.\n            }\n\n            if (mat[r][c] > x) { // If the current element is greater than X, move\n                                 // left in the matrix.\n                c--;\n            } else { // If the current element is less than X, move down in the matrix.\n                r++;\n            }\n        }\n\n        return false; // Return 0 if X is not found in the matrix.\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
