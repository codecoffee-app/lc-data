{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 702828,
      "title": "Search in Rotated Sorted Array",
      "titleSlug": "search-in-a-rotated-array4618",
      "content": "<p><span style=\"font-size: 18px;\">Given a <strong>sorted </strong>and <strong>rotated </strong>array <strong>arr[]</strong> of <strong>distinct </strong>elements, the task is to find the index of a target <strong>key</strong>. Return <strong>-1 </strong>if the key is not found.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 6, 7, 8, 9, 10, 1, 2, 3], key = 3\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> 3 is found at index 8.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [3, 5, 1, 2], key = 6</span><span style=\"font-size: 18px;\"><strong>\nOutput</strong>: -1</span><span style=\"font-size: 18px;\"><strong>\nExplanation</strong>: There is no element that has value 6.<br /></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [33, 42, 72, 99], key = 42\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> 42 is found at index 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong>:<br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i] &le; 10<sup>6</sup><br />1 &le; key &le; 10<sup>6</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given a sorted and rotated array of distinct elements, find the index of a target key. Return -1 if the key is not found.",
        "constraints": [
          "1 <= arr.size() <= 10^6",
          "0 <= arr[i] <= 10^6",
          "1 <= key <= 10^6"
        ],
        "testcases": [
          {
            "input": "arr = [5, 6, 7, 8, 9, 10, 1, 2, 3], key = 3",
            "output": "8",
            "explanation": "The key 3 is located at index 8 in the array."
          },
          {
            "input": "arr = [3, 5, 1, 2], key = 6",
            "output": "-1",
            "explanation": "The key 6 is not found in the array."
          },
          {
            "input": "arr = [33, 42, 72, 99], key = 42",
            "output": "1",
            "explanation": "The key 42 is located at index 1 in the array."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p><span style=\"font-size: 18px;\">The idea is to find the pivot point, divide the array in two sub-arrays and call binary search.<br /></span></p>",
      "<p><span style=\"font-size: 18px;\">The intuition behind finding a pivot is that for a sorted (in increasing order) and rotated array, the pivot element is the only element for which the next element to it is smaller than it.</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Searching",
        "slug": "searching"
      },
      {
        "name": "Divide and Conquer",
        "slug": "divide-and-conquer"
      },
      {
        "name": "Algorithms",
        "slug": "algorithms"
      }
    ],
    "companies": [
      "paytm",
      "flipkart",
      "amazon",
      "microsoft",
      "snapdeal",
      "de-shaw",
      "factset",
      "hike",
      "makemytrip",
      "intuit",
      "adobe",
      "google",
      "bankbazaar",
      "times-internet"
    ],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "class Solution {\n  public:\n    int search(vector<int>& arr, int key) {\n        // Initialize two pointers, lo and hi, at the start\n        // and end of the array\n        int lo = 0, hi = arr.size() - 1;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n\n            // If key found, return the index\n            if (arr[mid] == key)\n                return mid;\n\n            // If Left half is sorted\n            if (arr[mid] >= arr[lo]) {\n\n                // If the key lies within this sorted half,\n                // move the hi pointer to mid - 1\n                if (key >= arr[lo] && key < arr[mid])\n                    hi = mid - 1;\n\n                // Otherwise, move the lo pointer to mid + 1\n                else\n                    lo = mid + 1;\n            }\n\n            // If Right half is sorted\n            else {\n\n                // If the key lies within this sorted half,\n                // move the lo pointer to mid + 1\n                if (key > arr[mid] && key <= arr[hi])\n                    lo = mid + 1;\n\n                // Otherwise, move the hi pointer to mid - 1\n                else\n                    hi = mid - 1;\n            }\n        }\n\n        // Key not found\n        return -1;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "class Solution {\n    int search(int[] arr, int key) {\n\n        // Initialize two pointers, lo and hi, at the start\n        // and end of the array\n        int lo = 0, hi = arr.length - 1;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n\n            // If key found, return the index\n            if (arr[mid] == key) return mid;\n\n            // If Left half is sorted\n            if (arr[mid] >= arr[lo]) {\n\n                // If the key lies within this sorted half,\n                // move the hi pointer to mid - 1\n                if (key >= arr[lo] && key < arr[mid]) hi = mid - 1;\n\n                // Otherwise, move the lo pointer to mid + 1\n                else\n                    lo = mid + 1;\n            }\n\n            // If Right half is sorted\n            else {\n\n                // If the key lies within this sorted half,\n                // move the lo pointer to mid + 1\n                if (key > arr[mid] && key <= arr[hi]) lo = mid + 1;\n\n                // Otherwise, move the hi pointer to mid - 1\n                else\n                    hi = mid - 1;\n            }\n        }\n\n        // Key not found\n        return -1;\n    }\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "class Solution:\n\n    def search(self, arr, key):\n        # Initialize two pointers, lo and hi, at the start\n        # and end of the array\n        lo = 0\n        hi = len(arr) - 1\n\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n\n            # If key found, return the index\n            if arr[mid] == key:\n                return mid\n\n            # If Left half is sorted\n            if arr[mid] >= arr[lo]:\n\n                # If the key lies within this sorted half,\n                # move the hi pointer to mid - 1\n                if key >= arr[lo] and key < arr[mid]:\n                    hi = mid - 1\n\n                # Otherwise, move the lo pointer to mid + 1\n                else:\n                    lo = mid + 1\n\n            # If Right half is sorted\n            else:\n\n                # If the key lies within this sorted half,\n                # move the lo pointer to mid + 1\n                if key > arr[mid] and key <= arr[hi]:\n                    lo = mid + 1\n\n                # Otherwise, move the hi pointer to mid - 1\n                else:\n                    hi = mid - 1\n\n        # Key not found\n        return -1\n",
        "lang_text": "python3"
      },
      {
        "lang": "C#",
        "full_func": "class Solution {\n    public int Search(int[] arr, int key) {\n        int lo = 0, hi = arr.Length - 1;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n\n            if (arr[mid] == key) return mid;\n\n            if (arr[mid] >= arr[lo]) {\n                if (key >= arr[lo] && key < arr[mid])\n                    hi = mid - 1;\n                else\n                    lo = mid + 1;\n            } else {\n                if (key > arr[mid] && key <= arr[hi])\n                    lo = mid + 1;\n                else\n                    hi = mid - 1;\n            }\n        }\n\n        return -1;\n    }\n}",
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": "class Solution {\n    search(arr, key) {\n        // Initialize two pointers, lo and hi, at the start\n        // and end of the array\n        let lo = 0, hi = arr.length - 1;\n\n        while (lo <= hi) {\n            let mid = lo + Math.floor((hi - lo) / 2);\n\n            // If key found, return the index\n            if (arr[mid] === key) return mid;\n\n            // If Left half is sorted\n            if (arr[mid] >= arr[lo]) {\n\n                // If the key lies within this sorted half,\n                // move the hi pointer to mid - 1\n                if (key >= arr[lo] && key < arr[mid]) hi = mid - 1;\n\n                // Otherwise, move the lo pointer to mid + 1\n                else\n                    lo = mid + 1;\n            }\n\n            // If Right half is sorted\n            else {\n\n                // If the key lies within this sorted half,\n                // move the lo pointer to mid + 1\n                if (key > arr[mid] && key <= arr[hi]) lo = mid + 1;\n\n                // Otherwise, move the hi pointer to mid - 1\n                else\n                    hi = mid - 1;\n            }\n        }\n\n        // Key not found\n        return -1;\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
