{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878378,
            "title": "Search in a row-wise sorted matrix",
            "titleSlug": "search-in-a-row-wise-sorted-matrix",
            "content": "<p><span >Given a row-wise sorted 2D matrix <strong>mat</strong>[][] of size <strong>n x m&nbsp;</strong>and<strong>&nbsp;</strong>an integer <strong>x,</strong> find whether element <strong>x</strong> is present in the matrix.<br />Note: In a row-wise sorted matrix, each row is sorted in itself, i.e. for any i, j within bounds, mat[i][j] &lt;= mat[i][j+1].</span><br style=\"font-size: 18px;\" /><br /><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input</strong>: mat[][] = [[3, 4, 9],[2, 5, 6],[9, 25, 27]], x = 9\n<strong>Output</strong>: true\n<strong>Explanation</strong>: 9 is present in the matrix, so the output is true.\n</span></pre>\n<pre><span ><strong>Input</strong>: mat[][] = [[19, 22, 27, 38, 55, 67]], x = 56<br /><strong>Output</strong>: false\n<strong>Explanation</strong>: 56 is not present in the matrix, so the output is false.<br /></span></pre>\n<pre><span ><strong>Input</strong>: mat[][] = [[1, 2, 9],[65, 69, 75]], x = 91</span><br /><span ><strong>Output</strong>: false\n<strong>Explanation</strong>: 91 is not present in the matrix.</span></pre>\n<p><span ><strong>Constraints:<br /></strong>1 &lt;= n, m &lt;= 1000<br />1 &lt;= mat[i][j] &lt;= 10<sup>5</sup><br />1 &lt;= x &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Take advantage of the sorted rows. Which algorithm comes to mind?</span></p>",
            "<p><span >Apply Binary Search&nbsp; on each row</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\n// Function to perform binary search on a row\nbool binarySearchRow(int* row, int m, int x) {\n    int left = 0, right = m - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (row[mid] == x) {\n            return true; // Found the target\n        } else if (row[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return false; // Target not found in the row\n}\n\n// Function to search for an element in a row-wise sorted matrix\nbool searchRowMatrix(int** mat, int n, int m, int x) {\n    for (int i = 0; i < n; i++) {\n        // Check if x could be in the current row\n        if (x >= mat[i][0] && x <= mat[i][m - 1]) {\n            // Perform binary search on the row\n            if (binarySearchRow(mat[i], m, x)) {\n                return true; // Found the target\n            }\n        }\n    }\n    return false; // Element not found\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    bool searchRowMatrix(vector<vector<int>>& mat, int x) {\n        int n = mat.size();    // Number of rows\n        int m = mat[0].size(); // Number of columns\n\n        // Iterate over each row\n        for (int i = 0; i < n; i++) {\n            // Check if x could be in the current row\n            if (x >= mat[i][0] && x <= mat[i][m - 1]) {\n                // Perform binary search within this row\n                int left = 0, right = m - 1;\n                while (left <= right) {\n                    int mid = left + (right - left) / 2;\n                    if (mat[i][mid] == x) {\n                        return true; // Found the target\n                    } else if (mat[i][mid] < x) {\n                        left = mid + 1;\n                    } else {\n                        right = mid - 1;\n                    }\n                }\n            }\n        }\n\n        return false; // Element not found\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to search a given number in a row-wise sorted matrix.\n    public boolean searchRowMatrix(int[][] mat, int x) {\n        int n = mat.length; // Number of rows\n\n        for (int i = 0; i < n; i++) {\n            int left = 0, right = mat[i].length - 1;\n\n            // Perform binary search in the current row\n            while (left <= right) {\n                int mid = left + (right - left) / 2;\n\n                if (mat[i][mid] == x) {\n                    return true; // Found the target\n                } else if (mat[i][mid] < x) {\n                    left = mid + 1; // Search in the right half of the row\n                } else {\n                    right = mid - 1; // Search in the left half of the row\n                }\n            }\n        }\n        return false; // Element not found in any row\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    # Function to search a given number in a row-wise sorted matrix.\n    def searchRowMatrix(self, mat, x):\n        n = len(mat)  # Number of rows\n\n        for row in mat:\n            left, right = 0, len(row) - 1\n\n            # Perform binary search in the current row\n            while left <= right:\n                mid = left + (right - left) // 2\n                if row[mid] == x:\n                    return 1  # Found the target\n                elif row[mid] < x:\n                    left = mid + 1  # Search in the right half of the row\n                else:\n                    right = mid - 1  # Search in the left half of the row\n        return 0  # Element not found in any row\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to search a given number in a row-wise sorted matrix.\n    searchRowMatrix(mat, x) {\n        const n = mat.length; // Number of rows\n\n        for (let row of mat) {\n            let left = 0, right = row.length - 1;\n\n            // Perform binary search in the current row\n            while (left <= right) {\n                const mid = Math.floor(left + (right - left) / 2);\n                if (row[mid] === x) {\n                    return 1; // Found the target\n                } else if (row[mid] < x) {\n                    left = mid + 1; // Search in the right half of the row\n                } else {\n                    right = mid - 1; // Search in the left half of the row\n                }\n            }\n        }\n        return 0; // Element not found in any row\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}