{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712251,
            "title": "Search in Linked List",
            "titleSlug": "search-in-linked-list-1664434326",
            "content": "<p><span style=\"font-size: 18px;\">Given a linked list of <strong>n</strong> nodes and a<strong> key</strong>, the task is to check if the key&nbsp;is present in the linked list or&nbsp;not.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">n = 4, key = 3\n1-&gt;2-&gt;3-&gt;4\n<strong>Output: </strong>true\n<strong>Explanation: </strong>3 is present in Linked List, so the function returns true.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraint:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup><br />1 &lt;= key &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a linked list of 'n' nodes and a 'key', determine if the key exists within the linked list.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= key <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 4, key = 3\n1->2->3->4",
                        "output": "true",
                        "explanation": "The key 3 is present in the linked list."
                    },
                    {
                        "input": "n = 5, key = 6\n1->2->3->4->5",
                        "output": "false",
                        "explanation": "The key 6 is not present in the linked list."
                    },
                    {
                        "input": "n = 1, key = 1\n1",
                        "output": "true",
                        "explanation": "The key 1 is present in the linked list."
                    },
                    {
                        "input": "n = 1, key = 2\n1",
                        "output": "false",
                        "explanation": "The key 2 is not present in the linked list."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check key present in linked list or not.\n    bool searchKey(int n, Node* head, int key) {\n\n        Node* current = head;\n\n        // using a loop to count nodes until we get null in link part of node.\n        while (current != NULL) {\n            if (current->data == key) {\n                return true;\n            }\n            current = current->next;\n        }\n\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static boolean searchKey(int n, Node head, int key) {\n        // Code here\n        Node current = head;\n\n        // using a loop to count nodes until we get null in link part of node.\n        while (current != null) {\n            if (current.data == key) {\n                return true;\n            }\n            current = current.next;\n        }\n\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to search for a key in a linked list.\n    def searchKey(self, n, head, key):\n        current = head\n\n        #Looping through the linked list.\n        while current:\n\n            #Checking if the current node's data matches the key.\n            if current.data == key:\n                return True\n\n            #Moving to the next node.\n            current = current.next\n\n        #Returning 0 if the key is not found in the linked list.\n        return False\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number} n\n     * @param {Node} head\n     * @param {number} key\n     * @returns {number}\n     */\n    searchKey(n, head, key) {\n        let current = head;\n\n        // Looping through the linked list.\n        while (current) {\n\n            // Checking if the current node's data matches the key.\n            if (current.data === key) {\n                return true;\n            }\n\n            // Moving to the next node.\n            current = current.next;\n        }\n\n        // Returning 0 if the key is not found in the linked list.\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}