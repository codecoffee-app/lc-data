{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712111,
            "title": "Search in Rotated Array 2",
            "titleSlug": "search-in-rotated-array-2",
            "content": "<p><span >Given a sorted and rotated array <strong>arr</strong> and a target key <strong>k</strong> which is rotated at some point, and may contain duplicates and given an element key. Check whether the key is present in the array or not.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 5, 6, 0, 0, 1, 2], k = 0\n<strong>Output</strong>: true\n<strong>Explanation</strong>: 0 is found at index 3.</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [2, 5, 6, 0, 0, 1, 2], k = 3<strong>\nOutput</strong>: false<strong>\nExplanation</strong>: There is no element that has value 3.</span></pre>\n<p><span ><strong>Expected Time Complexity: </strong>O(logn)<strong><br />Expected Auxilary Space: </strong>O(1)</span></p>\n<p><span ><strong>Constraints</strong>:</span><br /><span >1 &le; arr.size() &le; 10<sup>6</sup></span><br /><span >0 &le; arr[i] &le; 10<sup>8</sup></span><br /><span >1 &le; key &le; 10<sup>8</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted and rotated array `arr` that may contain duplicate values, determine if a target key `k` is present in the array. The array is rotated at an unknown pivot point.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^8",
                    "1 <= key <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "arr = [2, 5, 6, 0, 0, 1, 2], k = 0",
                        "output": "true",
                        "explanation": "The key 0 is present in the array."
                    },
                    {
                        "input": "arr = [2, 5, 6, 0, 0, 1, 2], k = 3",
                        "output": "false",
                        "explanation": "The key 3 is not present in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">Use a binary search algorithm with adjustments for handling duplicates by shifting pointers inward when duplicate values are encountered. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to search for target in rotated sorted array\n    bool Search(vector<int>& arr, int k) {\n        int n = arr.size();\n        int l = 0;\n        int r = arr.size() - 1;\n\n        // Binary search algorithm\n        while (l <= r) {\n            int mid = l + (r - l) / 2;\n\n            // If target is found at mid index, return true\n            if (arr[mid] == k) {\n                return 1;\n            }\n\n            // Handling duplicates by moving the pointers\n            if ((arr[l] == arr[mid]) && (arr[r] == arr[mid])) {\n                l++;\n                r--;\n            }\n            // Checking if the left half is sorted\n            else if (arr[l] <= arr[mid]) {\n                // If target is between left and mid, update right pointer\n                if ((arr[l] <= k) && (arr[mid] > k))\n                    r = mid - 1;\n                // Otherwise, update left pointer\n                else\n                    l = mid + 1;\n            }\n            // If left half is not sorted, then right half must be sorted\n            else {\n                // If target is between mid and right, update left pointer\n                if ((arr[mid] < k) && (arr[r] >= k))\n                    l = mid + 1;\n                // Otherwise, update right pointer\n                else\n                    r = mid - 1;\n            }\n        }\n        // If target is not found, return false\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static boolean Search(int[] arr, int k) {\n        // initialize left and right pointers for binary search\n        int n = arr.length;\n        int l = 0;\n        int r = arr.length - 1;\n\n        while (l <= r) {\n            // calculate middle index\n            int mid = l + (r - l) / 2;\n            // if middle element is equal to k, return true\n            if (arr[mid] == k) {\n                return true;\n            }\n            // check if left and right pointers need to be adjusted\n            if ((arr[l] == arr[mid]) && (arr[r] == arr[mid])) {\n                l++;\n                r--;\n            }\n            // if left side is normally sorted\n            else if (arr[l] <= arr[mid]) {\n                // check if k is within left and middle, adjust right pointer\n                // accordingly\n                if ((arr[l] <= k) && (arr[mid] > k))\n                    r = mid - 1;\n                else\n                    l = mid + 1;\n            }\n            // if right side is normally sorted\n            else {\n                // check if k is within middle and right, adjust left pointer\n                // accordingly\n                if ((arr[mid] < k) && (arr[r] >= k))\n                    l = mid + 1;\n                else\n                    r = mid - 1;\n            }\n        }\n        // return false if k is not found\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\n\nclass Solution:\n\n    def Search(self, arr, k):\n        n = len(arr)\n        l, r = 0, len(arr) - 1\n\n        while l <= r:\n            mid = l + (r - l) // 2\n            if arr[mid] == k:\n                return 1\n            if arr[l] == arr[mid] == arr[r]:\n                l += 1\n                r -= 1\n            elif arr[l] <= arr[mid]:\n                if arr[l] <= k < arr[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if arr[mid] < k <= arr[r]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to search for k in rotated sorted array\n    Search(arr, k) {\n        let n = arr.length;\n        let l = 0;\n        let r = arr.length - 1;\n\n        // Binary search algorithm\n        while (l <= r) {\n            let mid = l + Math.floor((r - l) / 2);\n\n            // If k is found at mid index, return true\n            if (arr[mid] === k) {\n                return 1;\n            }\n\n            // Handling duplicates by moving the pointers\n            if ((arr[l] === arr[mid]) && (arr[r] === arr[mid])) {\n                l++;\n                r--;\n            }\n            // Checking if the left half is sorted\n            else if (arr[l] <= arr[mid]) {\n                // If k is between left and mid, update right pointer\n                if ((arr[l] <= k) && (arr[mid] > k)) r = mid - 1;\n                // Otherwise, update left pointer\n                else\n                    l = mid + 1;\n            }\n            // If left half is not sorted, then right half must be sorted\n            else {\n                // If k is between mid and right, update left pointer\n                if ((arr[mid] < k) && (arr[r] >= k)) l = mid + 1;\n                // Otherwise, update right pointer\n                else\n                    r = mid - 1;\n            }\n        }\n        // If k is not found, return false\n        return 0;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}