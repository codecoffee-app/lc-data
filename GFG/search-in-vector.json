{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701624,
            "title": "Search in Vector",
            "titleSlug": "search-in-vector",
            "content": "<p><span style=\"font-size: 18px;\">Given a vector<strong> arr[] </strong>with non-negative integers arranged in increasing order and an integer <strong>k</strong>. You need to check whether the element k is<strong> present or not </strong>in vector by<strong> applying binary search</strong> on it.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr[] = [2, 3, 4, 5, 6], k = 6<br /><strong>Output: </strong>true<br /><strong>Explanation: </strong>6 is present on the 4rth index.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr[] = [2, 3, 4, 6], k = 5<br /><strong>Output: </strong>false<br /><strong>Explanation: </strong>5 is not present in arr[].</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size()<strong>&nbsp;</strong>&lt;= 1000<br />1 &lt;= arr[i] &lt;= 1000<br />1 &lt;= k<strong>&nbsp;</strong>&lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>binary_search(vec.begin(), vec.end(), K)</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nbool binarySearch(vector<int>& arr, int k) {\n    return binary_search(arr.begin(), arr.end(), k);\n}\n",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}