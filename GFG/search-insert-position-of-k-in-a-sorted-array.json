{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706235,
            "title": "Search insert position of K in a sorted array",
            "titleSlug": "search-insert-position-of-k-in-a-sorted-array",
            "content": "<p><span style=\"font-size:18px\">Given a sorted array&nbsp;<strong>Arr[]</strong>(0-index based)&nbsp;consisting of&nbsp;<strong>N&nbsp;</strong>distinct integers and an integer <strong>k</strong>, the task is to find the index of k, if its present in the array <strong>Arr[]</strong>. Otherwise, find the index where <strong>k</strong>&nbsp;must be inserted to keep the array sorted.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4\r\nArr = {1, 3, 5, 6}\r\nk = 5\r\n<strong>Output:</strong> 2\r\n<strong>Explaination:</strong> Since 5 is found at index 2 \r\nas Arr[2] = 5, the output is 2.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4\r\nArr = {1, 3, 5, 6}\r\nk = 2\r\n<strong>Output:</strong> 1\r\n<strong>Explaination:</strong> Since 2 is not present in \r\nthe array but can be inserted at index 1 \r\nto make the array sorted.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>searchInsertK()</strong>&nbsp;which takes the array <strong>Arr[]</strong> and its size <strong>N </strong>and <strong>k&nbsp;</strong>as input parameters&nbsp;and returns the index.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(logN)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>4</sup><br />\r\n-10<sup>3</sup> &le; Arr[i]&nbsp;&le; 10<sup>3</sup><br />\r\n-10<sup>3</sup>&nbsp;&le; k&nbsp;&le; 10<sup>3</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `Arr[]` of `N` distinct integers and an integer `k`, find the index of `k` in `Arr[]`. If `k` is not present, return the index where `k` should be inserted to maintain the sorted order.",
                "constraints": [
                    "1 <= N <= 10^4",
                    "-10^3 <= Arr[i] <= 10^3",
                    "-10^3 <= k <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nArr = {1, 3, 5, 6}\nk = 5",
                        "output": "2",
                        "explanation": "5 is found at index 2 in the array."
                    },
                    {
                        "input": "N = 4\nArr = {1, 3, 5, 6}\nk = 2",
                        "output": "1",
                        "explanation": "2 is not present in the array and should be inserted at index 1 to maintain the sorted order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use modified Binary Search Technique.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    \r\n    //Function to search for the position where k can be inserted.\r\n    int searchInsertK(vector<int>Arr, int N, int k)\r\n    {\r\n        //using lower_bound to find the position where k can be inserted.\r\n        return lower_bound(Arr.begin(), Arr.end(), k) - Arr.begin();\r\n    } \r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    // Function to find the lower bound index of an element in a sorted array.\n    int lower_bound(int A[],int L,int R,int K){\n        int pos=R+1;\n        // Binary search to find the lower bound index.\n        while(L<=R){\n            int M = (L+R)/2;\n            if(A[M]>=K){\n                // If middle element is greater than or equal to the target element,\n                // update the lower bound index and search in the left half of the array.\n                pos=M;\n                R=M-1;\n            }else L=M+1;\n            // If middle element is less than the target element,\n            // search in the right half of the array.\n        }\n        // Return the lower bound index.\n        return pos;\n    }\n    \n    // Function to search and insert an element in a sorted array.\n    int searchInsertK(int Arr[], int N, int k)\n    {\n        // Call the lower_bound function to find the lower bound index of the target element.\n        return lower_bound(Arr,0,N-1, k);\n    } \n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Function to find the lower bound of a value in a sorted array\n# Parameters: \n# - A: The sorted array\n# - L: The left index of the array\n# - R: The right index of the array\n# - K: The value to find the lower bound for\n# Returns: The index of the lower bound of K in A\ndef lower_bound(A,L,R,K):\n    pos=R+1;    # Initialize the lower bound position as R+1\n \n    # Binary search to find the lower bound\n    while(L<=R):\n        M = (L+R)//2;   # Find the midpoint\n        if A[M]>=K :   # If the value at the midpoint is greater than or equal to K\n            pos=M;     # Update the lower bound position \n            R=M-1;     # Move the right pointer to the left\n        else : \n            L=M+1;     # Move the left pointer to the right\n\n    return pos;    # Return the lower bound position\n    \n# Class that contains the solution methods\nclass Solution:\n    # Method to find the index where a value K should be inserted into the array\n    # Parameters:\n    # - Arr: The given array\n    # - N: The size of the array\n    # - K: The value to insert\n    # Returns: The index where K should be inserted into Arr\n    def searchInsertK(self,Arr,N,K):\n        return lower_bound(Arr,0,N-1,K)   # Return the lower bound position of K in Arr",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} N\n * @param {number} k\n * @returns {number}\n*/\n\nclass Solution {\n    \n    searchInsertK(arr,N, k)\n    {\n        let left = 0;\n        let right = N-1;\n        \n        while(left <= right){\n            let mid = Math.floor((left + right) / 2);\n            \n            if(arr[mid] == k){\n                return mid;\n            }\n            \n            if(arr[mid] < k){\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        \n        return left;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}