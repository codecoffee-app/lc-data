{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706183,
            "title": "Search Pattern (Rabin-Karp Algorithm)",
            "titleSlug": "search-pattern-rabin-karp-algorithm--141631",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings, one is a <strong>text </strong>string and the other is a <strong>pattern </strong>string. The task is to print the starting indexes of all the occurrences of the pattern string in the text string. For printing, the Starting Index of a string should be taken as 1. The strings will only contain lowercase English alphabets (<strong>'a' </strong>to<strong> 'z'</strong>).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \ntext = \"birthdayboy\"<br />pattern = \"birth\"<br /><strong>Output:</strong> <br />[1]\n<strong>Explanation</strong>: <br />The string \"birth\" occurs at index 1 in text.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\ntext = \"geeksforgeeks\"<br />pattern = \"geek\"\n<strong>Output:</strong> <br />[1, 9]\n<strong>Explanation</strong>: <br />The string \"geek\" occurs twice in text, one starts are index 1 and the other at index 9.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>search()&nbsp;</strong>which takes the string <strong>text</strong> and the string <strong>pattern</strong> as input and returns an array denoting the start indices (1-based) of the substring pattern in the string text.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(|text| + |pattern|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=|text|&lt;=5*10<sup>5</sup><br />1&lt;=|pattern|&lt;=|text|</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a text string and a pattern string, find all occurrences of the pattern within the text and return their starting indices (1-based). Both strings will only contain lowercase English alphabets.",
                "constraints": [
                    "1 <= |text| <= 5 * 10^5",
                    "1 <= |pattern| <= |text|"
                ],
                "testcases": [
                    {
                        "input": "text = \"birthdayboy\"\npattern = \"birth\"",
                        "output": "[1]",
                        "explanation": "The pattern \"birth\" is found at index 1 in the text \"birthdayboy\"."
                    },
                    {
                        "input": "text = \"geeksforgeeks\"\npattern = \"geek\"",
                        "output": "[1, 9]",
                        "explanation": "The pattern \"geek\" is found at indices 1 and 9 in the text \"geeksforgeeks\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 17px; letter-spacing: 0.162px; background-color: #ffffff;\">Try to check whether every substring of the text of the pattern&rsquo;s size is equal to the pattern or not one by one.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Pattern Searching",
                "slug": "pattern-searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution\n{\n    public:\n        vector <int> search(string pat, string txt)\n        {\n            vector<int> res;\n            int q =101;\n            int d = 26;\n            int M = pat.size();  \n            int N = txt.size();  \n            int i, j;  \n            int p = 0; // hash value for pattern  \n            int t = 0; // hash value for txt  \n            int h = 1;  \n          \n            // The value of h would be \"pow(d, M-1)%q\"  \n            for (i = 0; i < M - 1; i++)  \n                h = (h * d) % q;  \n          \n            // Calculate the hash value of pattern and first  \n            // window of text  \n            for (i = 0; i < M; i++)  \n            {  \n                p = (d * p + pat[i]) % q;  \n                t = (d * t + txt[i]) % q;  \n            }  \n          \n            // Slide the pattern over text one by one  \n            for (i = 0; i <= N - M; i++)  \n            {  \n          \n                // Check the hash values of current window of text  \n                // and pattern. If the hash values match then only  \n                // check for characters on by one  \n                if ( p == t )  \n                {  \n                    /* Check for characters one by one */\n                    for (j = 0; j < M; j++)  \n                    {  \n                        if (txt[i+j] != pat[j])  \n                            break;  \n                    }  \n          \n                    // if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1]  \n                    if (j == M)  \n                        res.push_back(i+1);  \n                }  \n          \n                // Calculate hash value for next window of text: Remove  \n                // leading digit, add trailing digit  \n                if ( i < N-M )  \n                {  \n                    t = (d*(t - txt[i]*h) + txt[i+M])%q;  \n          \n                    // We might get negative value of t, converting it  \n                    // to positive  \n                    if (t < 0)  \n                    t = (t + q);  \n                }  \n            }  \n            return res;\n        }\n\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution\n{\n\n        ArrayList<Integer> search(String pat, String txt)\n        {\n            ArrayList<Integer> res = new  ArrayList<Integer>();\n            int q =101;\n            int d = 26;\n            int M = pat.length();  \n            int N = txt.length();  \n            int i, j;  \n            int p = 0; // hash value for pattern  \n            int t = 0; // hash value for txt  \n            int h = 1;  \n          \n            // The value of h would be \"pow(d, M-1)%q\"  \n            for (i = 0; i < M - 1; i++)  {\n                h = (h * d) % q;  \n            }\n          \n            // Calculate the hash value of pattern and first  \n            // window of text  \n            for (i = 0; i < M; i++)  \n            {  \n                p = (d * p + pat.charAt(i)) % q;  \n                t = (d * t + txt.charAt(i)) % q;  \n            }  \n          \n            // Slide the pattern over text one by one  \n            for (i = 0; i <= N - M; i++)  \n            {  \n          \n                // Check the hash values of current window of text  \n                // and pattern. If the hash values match then only  \n                // check for characters on by one  \n                if ( p == t )  \n                {  \n                    /* Check for characters one by one */\n                    for (j = 0; j < M; j++)  \n                    {  \n                        if (txt.charAt(i+j) != pat.charAt(j))  \n                            break;  \n                    }  \n          \n                    // if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1]  \n                    if (j == M)  \n                        res.add(i+1);  \n                }  \n          \n                // Calculate hash value for next window of text: Remove  \n                // leading digit, add trailing digit  \n                if ( i < N-M )  \n                {  \n                    t = (d*(t - txt.charAt(i)*h) + txt.charAt(i+M))%q;  \n          \n                    // We might get negative value of t, converting it  \n                    // to positive  \n                    if (t < 0)  \n                    t = (t + q);  \n                }  \n            }  \n            return res;\n        }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    def search(self,pat,txt):\n        res = []\n\n        q =101;d = 26\n\n        M = len(pat);N = len(txt);  \n\n        i=0; j=0  \n        \n        p = 0; # hash value for pattern  \n        t = 0; # hash value for txt  \n        h = 1;  \n      \n        # The value of h would be \"pow(d, M-1)%q\"  \n        for i in range(M-1) :\n            h = (h * d) % q \n      \n        # Calculate the hash value of pattern and first  \n        # window of text  \n        for i in range(M):  \n            p = (d * p + ord(pat[i])) % q  \n            t = (d * t + ord(txt[i])) % q\n      \n        # Slide the pattern over text one by one  \n        for i in range(N-M+1):\n            # Check the hash values of current window of text  \n            # and pattern. If the hash values match then only  \n            # check for characters on by one  \n            if  p == t :  \n                # Check for characters one by one \n                j = 0 \n                while j < M :\n                    if txt[i+j] != pat[j]:\n                        break\n                    j+=1\n      \n                # if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1]  \n                if j == M :  \n                    res.append(i+1)  \n            \n      \n            # Calculate hash value for next window of text: Remove  \n            # leading digit, add trailing digit  \n            if i < N-M :  \n                t = (d*(t - ord(txt[i])*h) + ord(txt[i+M]))%q\n      \n                # We might get negative value of t, converting it  \n                # to positive  \n                if t < 0 :\n                    t = (t + q)\n            \n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {string} pat\n * @param {string} txt\n * @returns {number[]}\n*/\n\nclass Solution {\n    \n    search(pat, txt)\n    {\n        let res = [];\n        let q = 101;\n        let d = 26;\n        let M = pat.length;  \n        let N = txt.length;  \n        let i, j;  \n        let p = 0; // hash value for pattern  \n        let t = 0; // hash value for txt  \n        let h = 1;  \n      \n        // The value of h would be \"pow(d, M-1)%q\"  \n        for (i = 0; i < M - 1; i++)  \n            h = (h * d) % q;  \n      \n        // Calculate the hash value of pattern and first  \n        // window of text  \n        for (i = 0; i < M; i++)  \n        {  \n            p = (d * p + pat.charCodeAt(i)) % q;  \n            t = (d * t + txt.charCodeAt(i)) % q;  \n        }  \n      \n        // Slide the pattern over text one by one  \n        for (i = 0; i <= N - M; i++)  \n        {  \n      \n            // Check the hash values of current window of text  \n            // and pattern. If the hash values match then only  \n            // check for characters on by one  \n            if ( p == t )  \n            {  \n                /* Check for characters one by one */\n                for (j = 0; j < M; j++)  \n                {  \n                    if (txt[i+j] != pat[j])  \n                        break;  \n                }  \n      \n                // if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1]  \n                if (j == M)  \n                    res.push(i+1);  \n            }  \n      \n            // Calculate hash value for next window of text: Remove  \n            // leading digit, add trailing digit  \n            if ( i < N-M )  \n            {  \n                t = (d*(t - txt.charCodeAt(i)*h) + txt.charCodeAt(i+M))%q;  \n      \n                // We might get negative value of t, converting it  \n                // to positive  \n                if (t < 0)  \n                t = (t + q);  \n            }  \n        } \n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}