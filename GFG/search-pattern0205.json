{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703119,
            "title": "Search Pattern (KMP-Algorithm)",
            "titleSlug": "search-pattern0205",
            "content": "<p><span >Given two strings, one is a text string <strong>txt</strong> and the other is a pattern string <strong>pat</strong>. The task is to print the indexes of <strong>all the occurrences</strong> of the pattern string in the text string. Use<strong> 0-based</strong> indexing while returning the indices.&nbsp;<br />Note:<strong>&nbsp;</strong>Return an empty list in case of no occurrences of pattern.<br /></span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>txt = \"abcab\", pat = \"ab\"\n<strong>Output:</strong> [0, 3]\n<strong>Explanation</strong>: The string \"ab\" occurs twice in txt, one starts at index 0 and the other at index 3. \n</span></pre>\n<pre><span ><strong>Input</strong>: txt = \"abesdu\", pat = \"edu\"\n<strong>Output:</strong> []\n<strong>Explanation</strong>: There's no substring \"edu\" present in txt.<br /></span></pre>\n<pre><span ><strong>Input</strong>: txt = \"aabaacaadaabaaba\", pat = \"aaba\"\n<strong>Output:</strong> [0, 9, 12]\n<strong>Explanation</strong>:<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/703119/Web/Other/blobid0_1731391225.png\" width=\"377\" height=\"188\" /><br /></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; txt.size() &le; 10<sup>6</sup><br />1 &le; pat.size() &lt; txt.size()<br />Both the strings consist of lowercase English alphabets.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a text string `txt` and a pattern string `pat`, find all occurrences of `pat` within `txt`. Return a list of the starting indices of each occurrence, using 0-based indexing. If `pat` does not appear in `txt`, return an empty list.",
                "constraints": [
                    "1 <= txt.size() <= 10^6",
                    "1 <= pat.size() < txt.size()",
                    "Both strings consist of lowercase English alphabets."
                ],
                "testcases": [
                    {
                        "input": "txt = \"abcab\", pat = \"ab\"",
                        "output": "[0, 3]",
                        "explanation": "The pattern \"ab\" occurs twice in the text \"abcab\".  One occurrence starts at index 0, and the other at index 3."
                    },
                    {
                        "input": "txt = \"abesdu\", pat = \"edu\"",
                        "output": "[]",
                        "explanation": "The pattern \"edu\" does not appear in the text \"abesdu\"."
                    },
                    {
                        "input": "txt = \"aabaacaadaabaaba\", pat = \"aaba\"",
                        "output": "[0, 9, 12]",
                        "explanation": "The pattern \"aaba\" appears at indices 0, 9, and 12 in the text \"aabaacaadaabaaba\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Brute force would be to check all the substrings of length pat.size() in txt. But, this will be O(txt.size()*pat.size()) in the worst case.<br />You can even solve it in O(txt.size()). Use the KMP Pattern Searching algorithm</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Pattern Searching",
                "slug": "pattern-searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": null,
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void computeLPSArray(string pat, int M, vector<int>& lps) {\n        int len = 0;\n        int i;\n\n        lps[0] = 0;\n        i = 1;\n\n        while (i < M) {\n            if (pat[i] == pat[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            }\n\n            else {\n                if (len != 0) {\n                    len = lps[len - 1];\n\n                } else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n    }\n\n    vector<int> search(string& pat, string& txt) {\n        vector<int> res;\n        int M = pat.size();\n        int N = txt.size();\n\n        vector<int> lps(M + 1, 0);\n        int j = 0;\n        computeLPSArray(pat, M, lps);\n        int f = 0;\n        int i = 0; // index for txt[]\n        while (i < N) {\n            if (pat[j] == txt[i]) {\n                j++;\n                i++;\n            }\n\n            if (j == M) {\n                f++;\n                res.push_back(i - j);\n                j = lps[j - 1];\n            }\n\n            // mismatch after j matches\n            else if (i < N && pat[j] != txt[i]) {\n                if (j != 0)\n                    j = lps[j - 1];\n                else\n                    i = i + 1;\n            }\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to compute the Longest Proper Prefix which is also Suffix (LPS) array\n    void computeLPSArray(String pat, int M, int[] lps) {\n        int len = 0; // length of the previous longest prefix suffix\n        int i;\n\n        lps[0] = 0; // lps[0] is always 0\n        i = 1;      // start from the second character\n\n        // Loop to compute the LPS array\n        while (i < M) {\n            if (pat.charAt(i) == pat.charAt(len)) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                if (len != 0) {\n                    len = lps[len - 1];\n                } else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n    }\n\n    // Function to search for the pattern in the given text\n    ArrayList<Integer> search(String pat, String txt) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        int M = pat.length();\n        int N = txt.length();\n\n        int[] lps =\n            new int[M +\n                    1]; // lps array to store Longest Proper Prefix which is also Suffix\n\n        int j = 0; // index for pattern\n\n        computeLPSArray(pat, M, lps); // compute the LPS array\n\n        int f = 0; // flag to track if the pattern was found\n        int i = 0; // index for text\n\n        // Loop to search for the pattern in the text\n        while (i < N) {\n            if (pat.charAt(j) == txt.charAt(i)) {\n                j++;\n                i++;\n            }\n\n            if (j == M) {\n                f++; // increment the flag\n                res.add(\n                    i -\n                    j); // add the index where the pattern is found to the result list\n                j = lps[j - 1]; // update j to continue searching for more occurrences\n                                // of the pattern\n            } else if (i < N && pat.charAt(j) != txt.charAt(i)) {\n                if (j != 0)\n                    j = lps[j - 1]; // update j based on lps array\n                else\n                    i = i + 1; // increment i if j is 0\n            }\n        }\n\n        return res; // return the result list\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def computeLPSArray(self, pat, M, lps):\n        length = 0\n\n        # Initializing the longest prefix suffix array\n        lps[0] = 0\n        i = 1\n\n        while (i < M):\n            # If the characters match, increment the length and store it in the lps array\n            if pat[i] == pat[length]:\n                length += 1\n                lps[i] = length\n                i += 1\n            else:\n                # If the characters don't match\n                if length != 0:\n                    # Update the length to the value at the previous index in the lps array\n                    length = lps[length - 1]\n                else:\n                    # If the length is 0, assign 0 to the lps array and move to the next index\n                    lps[i] = 0\n                    i += 1\n\n    def search(self, pat, txt):\n        res = []\n        M = len(pat)\n        N = len(txt)\n\n        # Initializing the longest prefix suffix array\n        lps = [0 for i in range(M + 1)]\n\n        j = 0\n\n        # Calculate the longest prefix suffix array\n        self.computeLPSArray(pat, M, lps)\n\n        f = 0\n        i = 0  # index for txt[]\n\n        while i < N:\n            # If the characters match, move to the next characters\n            if pat[j] == txt[i]:\n                j += 1\n                i += 1\n\n            if j == M:\n                # If the entire pattern is found, append the starting index to the result list\n                f += 1\n                res.append(i - j)\n                j = lps[j - 1]\n\n            # If there is a mismatch\n            elif i < N and pat[j] != txt[i]:\n                if j != 0:\n                    # Update the j value to the value at the previous index in the lps array\n                    j = lps[j - 1]\n                else:\n                    # If j is 0, move to the next character in the text\n                    i = i + 1\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    search(pat, txt) {\n        let res = [];\n        let M = pat.length;\n        let N = txt.length;\n\n        let lps = new Array(M).fill(0);\n        let j = 0;\n        this.computeLPSArray(pat, M, lps);\n        let f = 0;\n        let i = 0; // index for txt[]\n        while (i < N) {\n            if (pat[j] == txt[i]) {\n                j++;\n                i++;\n            }\n\n            if (j == M) {\n                f++;\n                res.push(i - j);\n                j = lps[j - 1];\n            }\n\n            // mismatch after j matches\n            else if (i < N && pat[j] != txt[i]) {\n                if (j != 0)\n                    j = lps[j - 1];\n                else\n                    i = i + 1;\n            }\n        }\n\n        return res;\n    }\n\n    computeLPSArray(pat, M, lps) {\n        let len = 0;\n        let i = 1;\n\n        lps[0] = 0;\n\n        while (i < M) {\n            if (pat[i] == pat[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            }\n\n            else {\n                if (len != 0) {\n                    len = lps[len - 1];\n                } else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}