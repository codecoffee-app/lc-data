{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701770,
            "title": "Search Query for Strings",
            "titleSlug": "search-query-for-strings5049",
            "content": "<p><span style=\"font-size:18px\">Trie is an efficient information retrieval data structure. Use this data structure to store strings and search strings. In this problem, you are given an array of strings (consisting of lowercase characters) <strong>arr</strong>[] of size <strong>N</strong>. Also, you will be given some queries <strong>Q</strong> and for each query a string is given and your task is to check if the given string is in the string array or not.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note:</strong> <strong>Each word</strong> in the array of string can be of size <strong>10<sup>3</sup></strong>.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<strong><span style=\"font-size:18px\">Input:\n</span></strong><span style=\"font-size:18px\">N = 8, Q = 3\nwords[] = {the,a,there,answer,any,by,bye\ntheir}\nQueries[] = {the,an,any}\n<strong>Output:\n</strong>1\n0\n1<strong>\nExplanation: </strong>After inserting words in the\narray,all the words will be stored. Now\nsearching for the will result in 1\n(present), an will resultin 0(not present)\nand any will result in 1 (present).</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nComplete <strong>insert </strong>and <strong>search,&nbsp;</strong>return <strong>true</strong>&nbsp;if the given string is present in the TRIE, else <strong>false</strong> in search function.&nbsp; 1 is printed by the driver&#39;s code if the value returned is true, 0 otherwise.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N).<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N).<br />\nN = length of the string</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>3</sup><br />\n1 &lt;= Q &lt;= 10<sup>3</sup></span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function template for C++\n\n\n//Function to insert string into TRIE.\nvoid insert(struct TrieNode *root, string key)\n{\n    //if not present, we insert key into trie. If the key is prefix \n    //of trie node, we just mark the leaf node.\n    struct TrieNode *pCrawl = root;\n\n    for (int i = 0; i < key.length(); i++) \n    {\n        int index = key[i] - 'a';\n        if (!pCrawl->children[index]) \n            pCrawl->children[index] = getNode();\n\n        pCrawl = pCrawl->children[index];\n    }\n\n    //marking last node as leaf.\n    pCrawl->isEndOfWord = true;\n}\n//Function to use TRIE data structure and search the given string.\nbool search(struct TrieNode *root, string key) \n{\n    struct TrieNode *pCrawl = root;\n\n    for (int i = 0; i < key.length(); i++) \n    {\n        int index =  key[i] - 'a';\n        if (!pCrawl->children[index]) \n        return false;\n\n        pCrawl = pCrawl->children[index];\n    }\n    //returning true if key is present else false.\n    return (pCrawl != NULL && pCrawl->isEndOfWord);\n}\n\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n//Function to insert string into TRIE.\nstatic void insert( String key) \n{\n    int level;\n    int length = key.length();\n    int index;\n\n    TrieNode pCrawl = root;\n\n    //if not present, we insert key into trie. If the key is prefix \n    //of trie node, we just mark the leaf node.\n    for (level = 0; level < length; level++)\n    {\n        index = key.charAt(level) - 'a';\n        if (pCrawl.children[index] == null)\n            pCrawl.children[index] = new TrieNode();\n\n        pCrawl = pCrawl.children[index];\n    }\n\n    //marking last node as leaf.\n    pCrawl.isEndOfWord = true;\n}\n\n//Function to use TRIE data structure and search the given string.\nstatic boolean search(String key)\n{\n    int level;\n    int length = key.length();\n    int index;\n    TrieNode pCrawl = root;\n\n    for (level = 0; level < length; level++) {\n        index = key.charAt(level) - 'a';\n\n        if (pCrawl.children[index] == null)\n        return false;\n\n        pCrawl = pCrawl.children[index];\n    }\n    //returning true if key is present else false.\n    return (pCrawl != null && pCrawl.isEndOfWord);\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\ndef charToIndex(ch):\n    return ord(ch)-ord('a')\n\n#Function to insert string into TRIE.    \ndef insert(root,key): \n    \n    pCrawl = root \n    length = len(key)\n    \n    #if not present, we insert key into trie. If the key is prefix \n    #of trie node, we just mark the leaf node.\n    for level in range(length): \n        index = charToIndex(key[level]) \n        if not pCrawl.children[index]: \n            pCrawl.children[index] = TrieNode() \n        pCrawl = pCrawl.children[index] \n\n    #marking last node as leaf.  \n    pCrawl.isEndOfWord = True\n    \n#Function to use TRIE data structure and search the given string.\ndef search(root, key): \n    \n    pCrawl = root \n    length = len(key) \n    for level in range(length): \n        index = charToIndex(key[level]) \n        if not pCrawl.children[index]: \n            return False\n        pCrawl = pCrawl.children[index] \n\n    #returning true if key is present else false.\n    return pCrawl != None and pCrawl.isEndOfWord  \n        \n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\nclass Solution\n{\n    //Function to insert string into TRIE.\n    public void insert(TrieNode root, string key)\n    {\n        int level;\n        int length = key.Length;\n        int index;\n\n        TrieNode pCrawl = root;\n\n        //if not present, we insert key into trie. If the key is prefix \n        //of trie node, we just mark the leaf node.\n        for (level = 0; level < length; level++)\n        {\n            index = key[level] - 'a';\n            if (pCrawl.children[index] == null)\n                pCrawl.children[index] = new TrieNode();\n\n            pCrawl = pCrawl.children[index];\n        }\n\n        //marking last node as leaf.\n        pCrawl.isLeaf = true;\n    }\n\n    //Function to use TRIE data structure and search the given string.\n    public bool search(TrieNode root, string key)\n    {\n        int level;\n        int length = key.Length;\n        int index;\n        TrieNode pCrawl = root;\n\n        for (level = 0; level < length; level++)\n        {\n            index = key[level] - 'a';\n\n            if (pCrawl.children[index] == null) return false;\n\n            pCrawl = pCrawl.children[index];\n        }\n        //returning true if key is present else false.\n        return (pCrawl != null && pCrawl.isLeaf);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n\n/**\n * \n * insert \n * @param {TrieNode} root (root of trie tree)\n * @param {string} key (key to be inserted)\n * \n * search\n * @param {TrieNode} root (root of trie tree)\n * @param {string} key (key to be searched)\n * @returns {boolean}  (true if key presents in trie, else false)\n*/\nclass Solution \n{\n    \n    CHAR_TO_INDEX(s,idx)\n    {\n        return s.charCodeAt(idx)-97;\n    }\n    \n    //Function to insert string into TRIE.\n    insert(root, key) \n    {\n       let level;\n       let length = key.length;\n       let index;\n       \n       let pCrawl = root;\n       \n       //if not present, we insert key into trie. If the key is prefix \n       //of trie node, we just mark the leaf node.\n       for (level = 0; level < length; level++)\n       {\n           index = this.CHAR_TO_INDEX(key,level);\n           if (pCrawl.children[index]==null) \n           pCrawl.children[index] = new TrieNode();\n           pCrawl = pCrawl.children[index];\n       }\n\n        //marking last node as leaf.\n        pCrawl.isLeaf = true;\n        \n    }\n   //Function to use TRIE data structure and search the given string.\n    search(root, key) \n    {\n        let level;\n        let length = key.length;\n        let index;\n        let pCrawl = root;\n    \n        for (level = 0; level < length; level++) {\n            index = this.CHAR_TO_INDEX(key,level);\n            if (pCrawl.children[index]==null) return false;\n    \n            pCrawl = pCrawl.children[index];\n        }\n        //returning true if key is present else false.\n        return (pCrawl != null && pCrawl.isLeaf);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}