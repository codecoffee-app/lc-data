{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703453,
            "title": "Search array with adjacent diff at most k",
            "titleSlug": "searching-in-an-array-where-adjacent-differ-by-at-most-k0456",
            "content": "<p><span style=\"font-size: 18px;\">Given a step<strong> </strong>array <strong>arr[]</strong>, its step value<strong> k,</strong> and a key <strong>x</strong>, we need to find the index of key <strong>x </strong>in the array arr[]. If multiple occurrences of key <strong>x </strong>exist, return the <strong>first </strong>occurrence of the key. In case of <strong>no </strong>occurrence of key <strong>x</strong> exists return <strong>-1.</strong></span></p>\n<p><span style=\"font-size: 18px;\">Note: </span><span style=\"font-size: 18px;\">A&nbsp;</span><span style=\"font-size: 18px;\">step&nbsp;</span><span style=\"font-size: 18px;\">array is an array of integers where the difference between adjacent elements is at most&nbsp;</span><strong style=\"font-size: 18px;\">k</strong><span style=\"font-size: 18px;\">. For example: arr[] = [4, 6, 7, 9] and k = 2 is a step<strong> </strong>array as the difference between the adjacent elements in the <strong>arr[]</strong> is at most <strong>2</strong>.&nbsp;&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [4, 5, 6, 7, 6] , k = 1 , x = 6\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>In an array arr 6 is present at index 2. So, return 2.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [20, 40, 50], k = 20 , x = 70<strong>\nOutput:</strong> -1 <br /><strong>Explaination:</strong> As there is no occurrence of 70. So, return -1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size &le; 10<sup>5</sup><br />1 &le; k &le; 10<sup>2</sup><br />1 &le; arr[i], x &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a step array `arr[]`, a step value `k`, and a key `x`, find the index of the first occurrence of `x` in `arr[]`. A step array is an array where the absolute difference between adjacent elements is at most `k`. If `x` is not found, return -1.",
                "constraints": [
                    "1 <= arr.size <= 10^5",
                    "1 <= k <= 10^2",
                    "1 <= arr[i], x <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [4, 5, 6, 7, 6], k = 1, x = 6",
                        "output": "2",
                        "explanation": "The first occurrence of 6 in the array is at index 2."
                    },
                    {
                        "input": "arr[] = [20, 40, 50], k = 20, x = 70",
                        "output": "-1",
                        "explanation": "70 is not present in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">A&nbsp;<strong>Simple Approach</strong> is traversing the given array one by one and comparing every element with the given element &lsquo;x&rsquo;.</span></p>",
            "<p><span style=\"font-size: 18px;\">The solution can be </span><strong style=\"font-size: 18px;\">optimized because&nbsp;</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px;\">all adjacent elements differ</span><span style=\"font-size: 18px;\">&nbsp;at most k. The idea is to start comparing from the leftmost element and find the difference between the current array element and x. Let this difference be &lsquo;diff&rsquo;. From the given property of the array, we always know that x must be at-least &lsquo;diff/k&rsquo; away, so instead of searching one by one, we jump &lsquo;diff/k&rsquo;.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    int findStepKeyIndex(vector<int>& arr, int k, int x) {\n        int n = arr.size();\n        int i = 0;\n        while (i < n) {\n            if (arr[i] == x) {\n                return i;\n            }\n            i += max(1, abs(arr[i] - x) / k);\n        }\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findStepKeyIndex(int[] arr, int k, int x) {\n        int n = arr.length;\n        int i = 0;\n        while (i < n) {\n            if (arr[i] == x) {\n                return i;\n            }\n            i += Math.max(1, Math.abs(arr[i] - x) / k);\n        }\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findStepKeyIndex(self, arr, k, x):\n        n = len(arr)\n        i = 0\n        while i < n:\n            if arr[i] == x:\n                return i\n            i += max(1, abs(arr[i] - x) // k)\n        return -1\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}