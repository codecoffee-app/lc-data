{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714259,
            "title": "Seating Arrangement",
            "titleSlug": "seating-arrangement--170647",
            "content": "<p><span style=\"font-size:18px\">You are given an integer <strong>n</strong>, denoting the number of people who needs to be seated, and a list of <strong>m</strong> integers&nbsp;<strong>seats</strong>, where <strong>0</strong> represents a vacant seat and <strong>1</strong> represents an already occupied seat.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Find whether all <strong>n</strong> people can find a seat, provided that no two people can sit next to each other.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">n = 2\r\nm = 7</span>\r\n<span style=\"font-size:18px\">seats[] = {0, 0, 1, 0, 0, 0, 1}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">Yes</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The two people can sit at index 0 and 4.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">n = 1\r\nm = 3</span>\r\n<span style=\"font-size:18px\">seats[] = {0, 1, 0}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">No</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">There is no way to get a seat for one person.</span>\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\r\n\r\n<p><span style=\"font-size:18px\">You don&#39;t have to input or print anything. Complete the function&nbsp;<strong>is_possible_to_get_seats()&nbsp;</strong>which takes the input parameters and return a boolean value, indicating whether all people can find a seat.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Expected Time Complexity: O(m)<br />\r\nExpected Space Complexity: O(1)</span></strong></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Constraints:</span></strong></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">0 &lt;= n &lt;= 10<sup>5</sup></span></li>\r\n\t<li><span style=\"font-size:18px\">1 &lt;= m&nbsp;&lt;= 10<sup>5</sup></span></li>\r\n\t<li><span style=\"font-size:18px\">seats[i] == 0 or seats[i] == 1</span></li>\r\n</ul>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">If current seat, its previous seat and its next seat is empty, that seat is available.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    // Function to check if it is possible to get n seats with given conditions\n    bool is_possible_to_get_seats(int n, int m, vector<int>& seats){\n        int available_seats = 0;\n\n        // Iterate through the seats array\n        for (int i = 0; i < m; i++) {\n            int prev = i == 0 ? 0 : seats[i - 1];\n            int next = i == m - 1 ? 0 : seats[i + 1];\n            \n            // Check if the current seat and its adjacent seats are all empty\n            if (prev + next + seats[i] == 0) {\n                available_seats++; // Increment the count of available seats\n                i++; // Skip the next seat as it is adjacent to the current seat\n            } \n        }\n        \n        return available_seats >= n; // Return true if available seats is greater than or equal to n\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    public static boolean is_possible_to_get_seats(int n, int m, int[] seats) {\r\n        int available_seats = 0;\r\n        for (int i = 0; i < m; i++) {\r\n            int prev;\r\n            if(i == 0)\r\n                prev = 0;\r\n            else\r\n                prev = seats[i - 1];\r\n            int next;\r\n            if(i == m - 1)\r\n                next = 0;\r\n            else\r\n                next = seats[i + 1];\r\n            if (prev + next + seats[i] == 0) {\r\n                available_seats++;\r\n                i++;\r\n            } \r\n        }\r\n        return available_seats >= n;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\nclass Solution:\n    def is_possible_to_get_seats(self, n : int, m : int, seats : List[int]) -> bool:\n        # initialize the count of available seats\n        available_seats = 0\n        i = 0\n        while i < m:\n            prev = 0\n            if i == 0:\n                prev = 0\n            else:\n                prev = seats[i-1]\n            nxt = 0\n            if i == m-1:\n                nxt = 0\n            else:\n                nxt = seats[i+1]\n            \n            # check if the seat and its adjacent seats are all empty\n            if prev + nxt + seats[i] == 0:\n                # increment the count of available seats\n                available_seats += 1\n                # move to the next seat\n                i += 1\n            \n            # move to the next seat\n            i += 1\n        \n        # check if the number of available seats is greater than or equal to the required seats\n        return available_seats >= n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number} m\n * @param {number[]} seats\n * @returns {boolean}\n*/\nclass Solution {\n    //Function to check whether it is possible to get all seats occupied.\n    is_possible_to_get_seats(n, m, seats) {\n        let available_seats = 0;\n        let i = 0;\n        while (i < m) {\n            let prev = 0;\n            if (i == 0) {\n                prev = 0;\n            }\n            else {\n                prev = seats[i - 1];\n            }\n            let nxt = 0;\n            if (i == m - 1) {\n                nxt = 0;\n            }\n            else {\n                nxt = seats[i + 1];\n            }\n\n            if (prev + nxt + seats[i] == 0) {\n                available_seats += 1;\n                i += 1;\n            }\n            i += 1;\n        }\n        return available_seats >= n;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public bool is_possible_to_get_seats(int n, int m, List<int> seats)\n    {\n        int available_seats = 0;\n\n        // Iterate through the seats array\n        for (int i = 0; i < m; i++) {\n            int prev = i == 0 ? 0 : seats[i - 1];\n            int next = i == m - 1 ? 0 : seats[i + 1];\n            \n            // Check if the current seat and its adjacent seats are all empty\n            if (prev + next + seats[i] == 0) {\n                available_seats++; // Increment the count of available seats\n                i++; // Skip the next seat as it is adjacent to the current seat\n            } \n        }\n        \n        return available_seats >= n; // Return true if available seats is greater than or equal to n\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}