{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 703089,
      "title": "Second Largest",
      "titleSlug": "second-largest3735",
      "content": "<p><span style=\"font-size: 18px;\">Given an array of <strong>positive</strong> integers <strong>arr[]</strong>, return the <strong>second largest</strong> element from the array. </span><span style=\"font-size: 18px;\">If the second largest element doesn't exist then return <strong>-1.</strong></span></p>\n<p><span style=\"font-size: 18px;\">Note: The second largest element should not be equal to the largest element.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [12, 35, 1, 10, 34, 1]\n<strong>Output:</strong> 34\n<strong>Explanation: </strong>The largest element of the array is 35 and the second largest element is 34.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [10, 5, 10]\n<strong>Output:</strong> 5\n<strong>Explanation: </strong>The largest element of the array is 10 and the second largest element is 5.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [10, 10, 10]\n<strong>Output:</strong> -1\n<strong>Explanation: </strong>The largest element of the array is 10 and the second largest element does not exist.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i]<sub>&nbsp;</sub>&le; 10<sup>5</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": "NA",
      "dislikes": "NA"
    },
    "similar": [],
    "hints": [
      "<p><span style=\"font-size: 14pt;\">Iterate through the array, keeping track of the largest and second-largest elements found so far.</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Arrays",
        "slug": "arrays"
      },
      {
        "name": "Searching",
        "slug": "searching"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      },
      {
        "name": "Algorithms",
        "slug": "algorithms"
      }
    ],
    "companies": ["sap", "rockstand"],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function returns the second\n    // largest elements\n    int getSecondLargest(vector<int> &arr) {\n        int n = arr.size();\n        int i, first, second;\n\n        // There should be at least two elements\n        if (n < 2) {\n            return -1;\n        }\n\n        first = second = INT_MIN;\n        for (i = 0; i < n; i++) {\n\n            // If current element is greater\n            // than first then update both\n            // first and second\n            if (arr[i] > first) {\n                second = first;\n                first = arr[i];\n            }\n\n            // If arr[i] is in between first\n            // and second then update second\n            else if (arr[i] > second && arr[i] != first) {\n                second = arr[i];\n            }\n        }\n        if (second == INT_MIN)\n            return -1;\n        else\n            return second;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "\nclass Solution {\n    public int getSecondLargest(int[] arr) {\n        int n = arr.length;\n        int first, second;\n\n        // There should be at least two elements\n        if (n < 2) {\n            return -1;\n        }\n\n        first = second = Integer.MIN_VALUE;\n        for (int i = 0; i < n; i++) {\n\n            // If current element is greater\n            // than first then update both\n            // first and second\n            if (arr[i] > first) {\n                second = first;\n                first = arr[i];\n            }\n\n            // If arr[i] is in between first\n            // and second then update second\n            else if (arr[i] > second && arr[i] != first) {\n                second = arr[i];\n            }\n        }\n        if (second == Integer.MIN_VALUE)\n            return -1;\n        else\n            return second;\n    }\n}\n",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "# User function Template for python3\nclass Solution:\n\n    def getSecondLargest(self, arr):\n        n = len(arr)\n        if n < 2:\n            return -1\n\n        first = second = float('-inf')\n        for num in arr:\n            if num > first:\n                second = first\n                first = num\n            elif num > second and num != first:\n                second = num\n\n        if second == float('-inf'):\n            return -1\n        else:\n            return second\n",
        "lang_text": "python3"
      },
      {
        "lang": "Javascript",
        "full_func": "// User function Template for javascript\n\nclass Solution {\n    // Function returns the second largest element\n    getSecondLargest(arr) {\n        let n = arr.length;\n        let first, second;\n\n        // There should be at least two elements\n        if (n < 2) {\n            return -1;\n        }\n\n        first = second = -Infinity;\n        for (let i = 0; i < n; i++) {\n            // If current element is greater than first then update both first and\n            // second\n            if (arr[i] > first) {\n                second = first;\n                first = arr[i];\n            }\n            // If arr[i] is in between first and second then update second\n            else if (arr[i] > second && arr[i] != first) {\n                second = arr[i];\n            }\n        }\n\n        return second === -Infinity ? -1 : second;\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
