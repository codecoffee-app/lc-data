{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703100,
            "title": "Second most repeated string in a sequence",
            "titleSlug": "second-most-repeated-string-in-a-sequence0534",
            "content": "<p><span style=\"font-size: 18px;\">Given a sequence of strings, the task is to find out the second most repeated (or frequent) string in the given sequence.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> No two strings are the second most repeated, there will be always a single string.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 6\narr[] = {aaa, bbb, ccc, bbb, aaa, aaa}\n<strong>Output:</strong> bbb\n<strong>Explanation</strong>: \"bbb\" is the second most \noccurring string with frequency 2.\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nN = 6\narr[] = {geek, for, geek, for, geek, aaa}\n<strong>Output:</strong> for\n<strong>Explanation</strong>: \"for\" is the second most\noccurring string with frequency 2.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>secFrequent()&nbsp;</strong>which takes the string array arr[] and its size N as inputs and returns the second most frequent string in the array. If no such string exists, then return an empty string.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N*max(|S<sub>i</sub>|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(N*max(|S<sub>i</sub>|).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=N&lt;=10<sup>3</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Store the frequency of all the strings in a hash map. Check the second highest of all the freuqencies. Then, traverse the hash map and find the string with that frequency (here, we use the fact that there&#39;s only one string with second highest frequency).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "goldman-sachs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution\n{\n  public:\n    string secFrequent (string arr[], int n)\n    {\n        unordered_map <string, int> m;\n    \n        for (int i = 0; i < n; ++i)\n            m[arr[i]]++;\n    \n    \n        // first and second most occurred strings\n        int mx1 = INT_MIN, mx2 = INT_MIN;\n    \n        for (auto i : m)\n        {\n            // we got a new mx1\n            // hence, current mx1 is stored in mx2\n            if (i.second > mx1)\n            {\n                mx2 = mx1;\n                mx1 = i.second;\n            }\n    \n            // we got a new mx2\n            else if (i.second > mx2 and i.second != mx1)\n            {\n                mx2 = i.second;\n            }\n        }\n        \n        for (auto i : m)\n            if (i.second == mx2)\n                return i.first;\n        \n        return \"\";\n    }\n    // Contributed By: Pranay Bansal\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {string[]} arr\n * @param {number} n\n * @returns {string}\n*/\n\nclass Solution{\n    secFrequent(arr,n){\n        //code here\n        let m = new Map();\n    \n        for (let i = 0; i < n; ++i)\n            m.set(arr[i], (m.get(arr[i]) || 0) + 1);\n    \n        // first and second most occurred strings\n        let mx1 = -Infinity;\n        let mx2 = -Infinity;\n    \n        for (let [key, value] of m.entries()) {\n            // we got a new mx1\n            // hence, current mx1 is stored in mx2\n            if (value > mx1) {\n                mx2 = mx1;\n                mx1 = value;\n            }\n    \n            // we got a new mx2\n            else if (value > mx2 && value !== mx1) {\n                mx2 = value;\n            }\n        }\n        \n        for (let [key, value] of m.entries())\n            if (value === mx2)\n                return key;\n        \n        return \"\";\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public string secFrequent(string[] arr, int n)\n    {\n        Dictionary<string, int> m = new Dictionary<string, int>();\n\n        for (int i = 0; i < n; i++)\n        {\n            if (m.ContainsKey(arr[i]))\n            {\n                m[arr[i]]++;\n            }\n            else\n            {\n                m.Add(arr[i], 1);\n            }\n        }\n\n        // first and second most occurred strings\n        int mx1 = int.MinValue, mx2 = int.MinValue;\n\n        foreach (var kvp in m)\n        {\n            // we got a new mx1\n            // hence, current mx1 is stored in mx2\n            if (kvp.Value > mx1)\n            {\n                mx2 = mx1;\n                mx1 = kvp.Value;\n            }\n\n            // we got a new mx2\n            else if (kvp.Value > mx2 && kvp.Value != mx1)\n            {\n                mx2 = kvp.Value;\n            }\n        }\n\n        foreach (var kvp in m)\n        {\n            if (kvp.Value == mx2)\n            {\n                return kvp.Key;\n            }\n        }\n\n        return \"\";\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}