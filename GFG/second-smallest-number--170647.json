{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714126,
            "title": "Second smallest number",
            "titleSlug": "second-smallest-number--170647",
            "content": "<p><span style=\"font-size: 18px;\">The task is to find the <strong>second</strong> smallest number with a given&nbsp;sum of digits as&nbsp;<strong>S</strong>&nbsp;and the number of digits as&nbsp;<strong>D.</strong></span></p>\n<p>Note : If it is not possible to return second smallest number than return \"-1\".<br /><span style=\"font-size: 18px;\"><strong><br />Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS = 9 \nD = 2\n<strong>Output:</strong>\n27\n<strong>Explanation:</strong>\n18 is the smallest number possible with sum = 9\nand total digits = 2, Whereas the second\nsmallest is 27.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS = 16\nD = 3\n<strong>Output:</strong>\n178\n<strong>Explanation:</strong>\n169 is the smallest number possible with sum is\n16 and total digits = 3, Whereas the second\nsmallest is 178.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>secondSmallest()</strong> which takes the two integers S and D respectively and returns a string which is the second smallest number if possible, else return \"-1\".</span><br /><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(D)<br /><strong>Expected Space Complexity:</strong>&nbsp;O(1)</span><br /><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; S&nbsp;&le; 10<sup>5</sup><br />1 &le; D&nbsp;&le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the sum of digits `S` and the number of digits `D`, find the second smallest number that satisfies these conditions. If no such number exists, return \"-1\".",
                "constraints": [
                    "1 <= S <= 10^5",
                    "1 <= D <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "S = 9\nD = 2",
                        "output": "27",
                        "explanation": "The smallest number with a digit sum of 9 and 2 digits is 18.  The second smallest is 27."
                    },
                    {
                        "input": "S = 16\nD = 3",
                        "output": "178",
                        "explanation": "The smallest number with a digit sum of 16 and 3 digits is 169. The second smallest is 178."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The idea is to one by one fill all digits from rightmost to leftmost (or from least significant digit to most significant).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "vmware"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{   \n  public:\n    string secondSmallest(int S, int D) {\n        \n        // If the sum is greater than or equal to 9 times the number of digits\n        // Return -1 as it's not possible to form a number with D digits\n        if(S >= D*9)\n            return \"-1\";\n            \n        // If S is less than or equal to 9 and D is 1\n        // Return S as it's the only possible number\n        if(S <= 9 && D == 1)\n            return to_string(S);\n        \n        // If D is 1 and S is greater than or equal to 10\n        // It's not possible to form a number with D digits\n        // Return -1\n        if(D == 1 && S >= 10)\n            return \"-1\";\n        \n        \n        int dup = D;\n        \n        // Subtract 1 from S to leave room for the first digit\n        \n        S -= 1;\n        \n        // Initialize string answer\n        \n        string ans = \"\";\n        \n        // Iterate from D-1 to 1\n        \n        for(int i = D-1; i > 0; i--)\n        {\n            // If S is greater than 9\n            // Add '9' as the digit and subtract 9 from S\n            if(S > 9)\n            {\n                ans += '0' + 9;\n                S -= 9;\n            }\n            else \n            {\n                // If S is less than or equal to 9\n                // Add S as the digit and set S to 0\n                ans += '0' + S;\n                S = 0;\n            }\n        }\n        \n        // Add S+1 as the first digit and reverse the string\n        \n        ans += '0' + (S+1);\n        reverse(ans.begin(),ans.end());\n        \n        // Find the rightmost digit that is '9'\n        // Update that digit to '8' and the digit to its left to '1'\n        \n        int ind = dup-1;\n        for(int i = dup-1; i >= 0; i--)\n        {\n            if(ans[i] == '9')\n                ind = i;\n            else\n                break;\n        }\n        \n        ans[ind] -= 1;\n        ans[ind-1] += 1;\n        \n        // Return the final answer\n        \n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function template for Java\r\n\r\nclass Solution{\r\n    static String secondSmallest(int S, int D){\r\n        if(S>=D*9)\r\n            return \"-1\";\r\n            \r\n        if(S <= 9 && D == 1)return Integer.toString(S);\r\n        \r\n        if(D == 1 && S >= 10)return \"-1\";\r\n        \r\n        int dup = D;\r\n        \r\n    \tS -= 1;\r\n    \tString res = \"\";\r\n    \tfor(int i=D-1; i>0; i--)\r\n    \t{\r\n    \t\tif(S>9)\r\n    \t\t{\r\n    \t\t\tres += (char)(57);\r\n    \t\t\tS -= 9;\r\n    \t\t}\r\n    \t\telse \r\n    \t\t{\r\n    \t\t\tres += (char)(48+S);\r\n    \t\t\tS = 0;\r\n    \t\t}\r\n    \t}\r\n    \tres += (char)(48+S+1);\r\n    \tString ans = \"\";\r\n    \tfor(int i=res.length()-1; i>=0; i--)\r\n    \t    ans += res.charAt(i);\r\n    \t\r\n    \tint ind = dup-1;\r\n    \tfor(int i=dup-1; i>=0; i--)\r\n    \t{\r\n    \t    if(ans.charAt(i)=='9')\r\n    \t        ind = i;\r\n    \t    else\r\n    \t        break;\r\n    \t}\r\n    \t\r\n    \tchar[] ansChars = ans.toCharArray();\r\n        ansChars[ind] -= 1;\r\n        ansChars[ind-1] += 1;\r\n        ans = String.valueOf(ansChars);\r\n    \t\r\n    \treturn ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to find the second smallest number.\r\n    def secondSmallest(self, S, D):\r\n\r\n        #If the sum of digits is greater than or equal to 9 times the number\r\n        #of digits, it is not possible to form a number with given constraints.\r\n        if(S>=D*9):\r\n            return \"-1\"\r\n\r\n        #If there is only one digit and the sum of digits is less than or equal to 9,\r\n        #we can directly return the sum as the second smallest number.\r\n        if(S <= 9 and D == 1):\r\n            return str(S)\r\n        \r\n        #If there is only one digit and the sum of digits is more than or equal to 10,\r\n        #it is not possible to form a number with given constraints.\r\n        if(D == 1 and S >= 10):\r\n            return \"-1\"\r\n\r\n        #Creating a variable to store the number of digits.\r\n        dup = D\r\n\r\n        #Subtracting 1 from the sum as we need to consider a number\r\n        #which has the smallest possible digit at the beginning.\r\n        S -= 1\r\n\r\n        #Initializing an empty string to store the second smallest number.\r\n        ans = \"\"\r\n        \r\n        #Starting from the second digit (since the first digit is already determined),\r\n        #we iterate in reverse order to add the digits to the number.\r\n        for i in range(D-1, 0, -1):\r\n            #If the current sum is greater than 9, we add 9 to the number\r\n            #and subtract 9 from the sum, as 9 is the largest possible digit.\r\n            if(S>9):\r\n                ans += str(9)\r\n                S -= 9\r\n            #If the current sum is less than or equal to 9, we add the remaining sum to the number.\r\n            else:\r\n                ans += str(S)\r\n                S = 0\r\n\r\n        #Adding the first digit to the number.\r\n        ans += str(S+1)\r\n\r\n        #Reversing the number to get the correct order.\r\n        ans = ans[::-1]\r\n\r\n        #Finding the index of the last digit which is 9.\r\n        #We will replace this digit with a smaller digit.\r\n        ind = dup-1\r\n        for i in range(dup-1, -1, -1):\r\n            if(ans[i]=='9'):\r\n                ind = i\r\n            else:\r\n                break\r\n        \r\n        #Converting the number to a list to modify the digits.\r\n        ans = list(ans)\r\n        \r\n        #Replacing the last digit 9 with a smaller digit.\r\n        ans[ind] = str(int(ans[ind])-1)\r\n\r\n        #Increasing the digit before the last digit by 1.\r\n        ans[ind-1] = str(int(ans[ind-1])+1)\r\n        \r\n        #Joining the list back into a string.\r\n        ans = \"\".join(ans)\r\n        \r\n        #Returning the second smallest number.\r\n        return ans",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\nclass Solution {\n    //Function to return the second smallest string\n    secondSmallest(S, D)\n    {\n        //If the sum of digits is greater than or equal to 9 times the number\n        //of digits, it is not possible to form a number with given constraints.\n        if(S>=D*9) {\n            return \"-1\";\n        }\n\n        //If there is only one digit and the sum of digits is less than or equal to 9,\n        //we can directly return the sum as the second smallest number.\n        if(S <= 9 && D == 1) {\n            return String(S);\n        }\n        \n        //If there is only one digit and the sum of digits is more than or equal to 10,\n        //it is not possible to form a number with given constraints.\n        if(D == 1 && S >= 10) {\n            return \"-1\";\n        }\n\n        //Creating a variable to store the number of digits.\n        let dup = D;\n\n        //Subtracting 1 from the sum as we need to consider a number\n        //which has the smallest possible digit at the beginning.\n        S -= 1;\n\n        //Initializing an empty string to store the second smallest number.\n        let ans = \"\";\n        \n        //Starting from the second digit (since the first digit is already determined),\n        //we iterate in reverse order to add the digits to the number.\n        for(let i = D-1; i > 0; i--) {\n            //If the current sum is greater than 9, we add 9 to the number\n            //and subtract 9 from the sum, as 9 is the largest possible digit.\n            if(S>9) {\n                ans += \"9\";\n                S -= 9;\n            }\n            //If the current sum is less than or equal to 9, we add the remaining sum to the number.\n            else {\n                ans += String(S);\n                S = 0;\n            }\n        }\n\n        //Adding the first digit to the number.\n        ans += String(S+1);\n\n        //Reversing the number to get the correct order.\n        ans = ans.split('').reverse().join('');\n\n        //Finding the index of the last digit which is 9.\n        //We will replace this digit with a smaller digit.\n        let ind = dup-1;\n        for(let i = dup-1; i >= 0; i--) {\n            if(ans[i]=='9') {\n                ind = i;\n            }\n            else {\n                break;\n            }\n        }\n        \n        //Converting the number to a list to modify the digits.\n        ans = ans.split('');\n        \n        //Replacing the last digit 9 with a smaller digit.\n        ans[ind] = String(parseInt(ans[ind])-1);\n\n        //Increasing the digit before the last digit by 1.\n        ans[ind-1] = String(parseInt(ans[ind-1])+1);\n        \n        //Joining the list back into a string.\n        ans = ans.join('');\n        \n        //Returning the second smallest number.\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}