{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706068,
            "title": "Secret Cipher",
            "titleSlug": "secret-cipher--141631",
            "content": "<p><span style=\"font-size:18px\">Geek wants to send an&nbsp;encrypted message in the form of string <strong>S</strong>&nbsp;to his friend Keeg&nbsp;along with instructions on how to decipher the message.&nbsp;To decipher the message, his friend&nbsp;needs to iterate over the message string from left to right, if he finds a <strong>&#39;*&#39;</strong>, he must remove it and add all the letters read so far to the string. He must keep on doing this till he gets rid of all the <strong>&#39;*&#39;</strong>.<br />\nCan you help Geek encrypt his message string <strong>S</strong>?&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note:</strong> If the string can be encrypted in multiple ways, find&nbsp;the smallest encrypted string.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;ababcababcd&quot;\n<strong>Output:</strong> ab*c*d\n<strong>Explanation: </strong>We can encrypt the string \nin following way : &quot;ababcababcd&quot;&nbsp;-&gt; \n&quot;ababc*d&quot; -&gt; &quot;ab*c*d&quot;</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>S = &quot;zzzzzzz&quot;\n<strong>Output:</strong> z*z*z\n<strong>Explanation: </strong>The string can be encrypted \nin 2 ways: &quot;z*z*z&quot; and &quot;z**zzz&quot;. Out of \nthe two &quot;z*z*z&quot; is smaller in length.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Complete the function <strong>secretCipher()</strong> which takes the message string <strong>S</strong> as input parameter and returns the shortest possible encrypted&nbsp;string.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:&nbsp;</strong><br />\n1 &le; |S| &le; 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek wants to encrypt a message string `S` for his friend Keeg. To decipher the message, Keeg will iterate through the encrypted string. Whenever he encounters a `'*'`, he removes it and appends all the characters read so far to the string. This process continues until all `'*'` are removed. Your task is to help Geek encrypt the message string `S` in the shortest possible way.",
                "constraints": [
                    "1 <= |S| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "ababcababcd",
                        "output": "ab*c*d",
                        "explanation": "The input string can be encrypted as \"ababcababcd\" -> \"ababc*d\" -> \"ab*c*d\"."
                    },
                    {
                        "input": "zzzzzzz",
                        "output": "z*z*z",
                        "explanation": "The input string can be encrypted in two ways: \"z*z*z\" and \"z**zzz\". \"z*z*z\" is shorter."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find the longest proper prefix which is also a proper suffix for each prefix of the string.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    \n    private:\n    void fill_array(string s, int a[])\n    {\n        a[0] = 0;\n        for(int i=1 ; i<s.size() ; i++)\n        {\n            int series = a[i-1];\n            while(series)\n            {\n                if( s[series] == s[i] )\n                {\n                    a[i] = series+1;\n                    break;\n                }\n                series = a[series-1];\n            }\n            if(!series)\n                a[i] = ( s[i] == s[0] );\n        }\n    }\n    \n    public:\n    string compress(string s)\n    {\n        int a[(int)s.size()];\n        // ith element of array a stores the length of longest\n        // proper suffix which is also a proper prefix\n        // for substr s[0] to s[i]\n        fill_array( s, a );\n        \n        stack <char> shortened;\n        \n        for(int i=s.size()-1 ; i>0 ; i--)\n        // we start checking string from last index\n        {\n            if(i%2==0) { shortened.push(s[i]); continue; }\n            // for even index, string length is odd\n            // hence it cannot be divided into two\n            // so we simply push ith character in stack\n            \n            bool star_here=0;\n            // star_here will be made TRUE if substring s[0] to s[i]\n            // can be divided into identical halves\n            int suffix = a[i];\n            int substrlen = i+1;\n            // suffix and substring length are also meant for\n            // substring s[0] to s[i]\n            \n            if(suffix*2 >= substrlen)\n                if( substrlen % (substrlen-suffix) == 0 )\n                    if( ( substrlen / (substrlen-suffix) ) % 2 == 0 )\n                    // these conditions, if true, imply that, substring\n                    // can be divided into 2 identical halves\n                        star_here = 1;\n            \n            if(star_here)\n                { shortened.push('*'); i = i/2 + 1; }\n                // adding * to stack and moving index as required\n            else\n                shortened.push(s[i]);\n                // else, simply adding character to stack\n        }\n        \n        string ret;\n        ret.push_back( s[0] );\n        \n        while( !shortened.empty() )\n        {\n            // since we analysed input string from end to start\n            // removing elements from stack and pushing back to\n            // output string will reverse them back to required order\n            ret.push_back( shortened.top() );\n            shortened.pop();\n        }\n        \n        return ret;\n    }\n      \n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\tvoid fillArray(String s, int[] a) {\n\t\ta[0] = 0;\n\t\tfor (int i = 1; i<s.length(); i++) {\n\t\t\tint series = a[i - 1];\n\t\t\twhile (series > 0) {\n\t\t\t\tif (s.charAt(series) == s.charAt(i)) {\n\t\t\t\t\ta[i] = series + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tseries = a[series - 1];\n\t\t\t}\n\t\t\tif (series == 0) {\n\t\t\t\tif (s.charAt(i) == s.charAt(0))\n\t\t\t\t\ta[i] = 1;\n\t\t\t\telse\n\t\t\t\t\ta[i] = 0;\n\t\t\t}\n\t\t}\n\t}\n\tpublic String compress(String s) {\n\t\tint[] a = new int[s.length()];\n\t\t\n\t\t// ith element of array a stores the length of longest\n        // proper suffix which is also a proper prefix\n        // for substr s[0] to s[i]\n\t\tfillArray(s, a);\n\n\t\tStack<Character> shortened = new Stack<Character>();\n\t\t\n        // for even index, string length is odd\n        // hence it cannot be divided into two\n        // so we simply push ith character in stack\n\t\tfor (int i = s.length() - 1; i > 0; i--) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tshortened.push(s.charAt(i));\n\t\t\t\tcontinue;\n\t\t\t}\n            // star_here will be made TRUE if substring s[0] to s[i]\n            // can be divided into identical halves\n\t\t\tboolean star_here = false;\n\t\t\t\n\t\t\t// suffix and substring length are also meant for\n            // substring s[0] to s[i]\n\t\t\tint suffix = a[i];\n\t\t\tint substrlen = i + 1;\n            \n            // these conditions, if true, imply that, substring\n            // can be divided into 2 identical halves\n\t\t\tif (suffix * 2 >= substrlen)\n\t\t\t\tif (substrlen % (substrlen - suffix) == 0)\n\t\t\t\t\tif ((substrlen / (substrlen - suffix)) % 2 == 0)\n\t\t\t\t\t\tstar_here = true;\n            \n            // adding * to stack and moving index as required\n\t\t\tif (star_here == true) {\n\t\t\t\tshortened.push('*');\n\t\t\t\ti = i / 2 + 1;\n\t\t\t} \n\t\t\t\n            // else, simply adding character to stack\n\t\t\telse\n\t\t\t\tshortened.push(s.charAt(i));\n\t\t}\n\n\t\tStringBuilder ret = new StringBuilder();\n\t\tret.append(s.charAt(0));\n\n        // since we analysed input string from end to start\n        // removing elements from stack and pushing back to\n        // output string will reverse them back to required order\n\t\twhile (!shortened.empty()) {\n\t\t\tret.append(shortened.peek());\n\t\t\tshortened.pop();\n\t\t}\n\n\t\treturn ret.toString();\n\t}\n}\n\n\n\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def fillarray(self, s, a):\n        a[0]=0\n        for i in range(1,len(s)):\n            series=a[i-1]\n            while(series):\n                if(s[series]==s[i]):\n                    a[i]=series+1\n                    break\n                series=a[series-1]\n            if(series==0):\n                a[i]=(int(s[i]==s[0]))\n        return a\n        \n    def compress(self, s):\n        a=[0]*len(s)\n        \n        #  ith element of array a stores the length of longest\n        #  proper suffix which is also a proper prefix\n        #  for substr s[0] to s[i]\n        a = self.fillarray(s, a)\n        #print(a)\n        shortened=[]\n        n=len(s)\n        i=n-1\n        \n        #  for even index, string length is odd\n        #  hence it cannot be divided into two\n        #  so we simply push ith character in stack\n        while(i>0):\n            if(i%2==0):\n                shortened.append(s[i])\n                i=i-1\n                continue\n            \n            # star_here will be made TRUE if substring s[0] to s[i]\n            # can be divided into identical halves\n            star_here=False\n            \n            #  suffix and substring length are also meant for\n            #  substring s[0] to s[i]\n            suffix=a[i]\n            substrlen=i+1\n            \n            #  these conditions, if true, imply that, substring\n            #  can be divided into 2 identical halves\n            if(suffix*2>=substrlen):\n                if(substrlen%(substrlen-suffix)==0):\n                    if((substrlen/(substrlen-suffix))%2==0):\n                        star_here=True\n                        \n            \n            #  adding * to stack and moving index as required\n            if(star_here==True):\n                shortened.append('*')\n                i=(i//2)+1\n                \n            #  else, simply adding character to stack\n            else:\n                shortened.append(s[i])\n            i=i-1\n        ret=\"\"\n        ret=ret+s[0]\n        n=len(shortened)\n        \n        #  since we analysed input string from end to start\n        #  removing elements from stack and pushing back to\n        #  output string will reverse them back to required order\n        while(n):\n            ret=ret+shortened[n-1]\n            shortened.pop()\n            n=n-1\n        return ret\n    \n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n  compress(s) {\n    let a = new Array(s.length);\n    this.fill_array(s, a);\n\n    let shortened = [];\n    \n    for (let i = s.length - 1; i > 0; i--) {\n      if (i % 2 === 0) {\n        shortened.push(s[i]);\n        continue;\n      }\n\n      let star_here = false;\n      let suffix = a[i];\n      let substrlen = i + 1;\n\n      if (suffix * 2 >= substrlen)\n        if (substrlen % (substrlen - suffix) === 0)\n          if ((substrlen / (substrlen - suffix)) % 2 === 0)\n            star_here = true;\n\n      if (star_here) {\n        shortened.push('*');\n        i = Math.floor(i / 2) + 1;\n      } else {\n        shortened.push(s[i]);\n      }\n    }\n\n    let ret = s[0];\n    while (shortened.length > 0) {\n      ret += shortened.pop();\n    }\n\n    return ret;\n  }\n\n  fill_array(s, a) {\n    a[0] = 0;\n    for (let i = 1; i < s.length; i++) {\n      let series = a[i - 1];\n      while (series) {\n        if (s[series] === s[i]) {\n          a[i] = series + 1;\n          break;\n        }\n        series = a[series - 1];\n      }\n      if (!series) a[i] = s[i] === s[0] ? 1 : 0;\n    }\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}