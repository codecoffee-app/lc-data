{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703289,
            "title": "Segregate 0s and 1s",
            "titleSlug": "segregate-0s-and-1s5106",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong> consisting of only <strong>0</strong>'s and <strong>1</strong>'s in random order. Modify the array <strong>in-place</strong> to segregate 0s onto the left side and 1s onto the right side of the array. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, 0, 1, 1, 0]\n<strong>Output:</strong> [0, 0, 0, 1, 1]<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">  </span>After segregation, all the 0's are on the left and 1's are on the right. Modified array will be [0, 0, 0, 1, 1].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 1, 1, 1]\n<strong>Output:</strong> [1, 1, 1, 1]\n<strong>Explanation:</strong> There are no 0s in the given array, so the modified array is [1, 1, 1, 1]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i] &le; 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` consisting of only 0s and 1s in random order, rearrange the array in-place such that all 0s are moved to the left side and all 1s are moved to the right side.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[0, 0, 1, 1, 0]",
                        "output": "[0, 0, 0, 1, 1]",
                        "explanation": "After rearranging, all the 0s are grouped on the left and all the 1s are on the right."
                    },
                    {
                        "input": "[1, 1, 1, 1]",
                        "output": "[1, 1, 1, 1]",
                        "explanation": "Since the array contains only 1s, no rearrangement is needed. The array remains unchanged."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Count the frequencies of 0 &amp; 1 in the array, and replace appropriately.</p>",
            "<p>An alternate approach is to traverse using&nbsp;two pointers.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "goldman-sachs",
            "fab.com"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    void segregate0and1(vector<int> &arr) {\n        // Initialize left and right indexes\n        int n = arr.size();\n        int left = 0, right = n - 1;\n\n        while (left < right) {\n            // Increment left index while we see 0 at left\n            while (arr[left] == 0 && left < right)\n                left++;\n\n            // Decrement right index while we see 1 at right\n            while (arr[right] == 1 && left < right)\n                right--;\n\n            // If left is smaller than right then there is a 1 at left\n            // and a 0 at right. Exchange arr[left] and arr[right]\n            if (left < right) {\n                arr[left] = 0;\n                arr[right] = 1;\n                left++;\n                right--;\n            }\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    void segregate0and1(int[] arr) {\n        int n = arr.length;\n        int left = 0, right = n - 1;\n\n        while (left < right) {\n            // Increment left index while we see 0 at left\n            while (arr[left] == 0 && left < right) left++;\n\n            // Decrement right index while we see 1 at right\n            while (arr[right] == 1 && left < right) right--;\n\n            // If left is smaller than right then there is a 1 at left\n            // and a 0 at right. Exchange arr[left] and arr[right]\n            if (left < right) {\n                arr[left] = 0;\n                arr[right] = 1;\n                left++;\n                right--;\n            }\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def segregate0and1(self, arr):\n        left = 0\n        right = len(arr) - 1\n\n        while left < right:\n            # Increment left index while we see 0 at left\n            while arr[left] == 0 and left < right:\n                left += 1\n\n            # Decrement right index while we see 1 at right\n            while arr[right] == 1 and left < right:\n                right -= 1\n\n            # If left is smaller than right then there is a 1 at left\n            # and a 0 at right. Exchange arr[left] and arr[right]\n            if left < right:\n                arr[left] = 0\n                arr[right] = 1\n                left += 1\n                right -= 1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n\n    segregate0and1(arr) {\n        let n = arr.length;\n        let i = 0;      // Initialize left pointer to start of array.\n        let j = n - 1;  // Initialize right pointer to end of array.\n        while (i < j) { // Loop until left pointer crosses right pointer.\n\n            if (arr[i] === 0)\n                i++; // If the element at left pointer is 0, move the left pointer to\n                     // the next element.\n            else if (arr[j] === 1)\n                j--; // If the element at right pointer is 1, move the right pointer to\n                     // the previous element.\n            else if (arr[j] === 0) { // If the element at right pointer is 0,\n                arr[i] = 0;          // set the element at left pointer as 0.\n                i++;                 // Move the left pointer to the next element.\n                arr[j] = 1;          // set the element at right pointer as 1.\n            }\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}