{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702985,
            "title": "Segregate Even and Odd numbers",
            "titleSlug": "segregate-even-and-odd-numbers4629",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>a</strong><strong>rr</strong>, write a program segregating <strong>even </strong>and <strong>odd </strong>numbers. The program should put all even numbers first in sorted order, and then odd numbers in sorted order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>:- You don't have to return the array, you have to modify it in-place.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [12, 34, 45, 9, 8, 90, 3]\n<strong>Output:</strong> [8, 12, 34, 90, 3, 9, 45]\n<strong>Explanation:</strong> Even numbers are 12, 34, 8 and 90. Rest are odd numbers.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [0, 1, 2, 3, 4]\n<strong>Output:</strong> [0, 2, 4, 1, 3]\n<strong>Explanation:</strong> 0 2 4 are even and 1 3 are odd numbers.<br /></span></pre>\n<pre><strong>Input:</strong> arr[] = [10, 22, 4, 6]\n<strong>Output:</strong> [10, 22, 4, 6]\n<strong>Explanation:</strong> Here all elements are even, so no need of segregataion</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i] &lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, rearrange it such that all even numbers appear first, followed by all odd numbers. Both the even and odd number sections should be sorted in ascending order. The modification should be performed in-place without creating a new array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[12, 34, 45, 9, 8, 90, 3]",
                        "output": "[8, 12, 34, 90, 3, 9, 45]",
                        "explanation": "The even numbers (8, 12, 34, and 90) are placed first in sorted order, followed by the odd numbers (3, 9, and 45) also in sorted order."
                    },
                    {
                        "input": "[0, 1, 2, 3, 4]",
                        "output": "[0, 2, 4, 1, 3]",
                        "explanation": "The even numbers (0, 2, and 4) are placed first in sorted order, followed by the odd numbers (1 and 3) also in sorted order."
                    },
                    {
                        "input": "[10, 22, 4, 6]",
                        "output": "[4, 6, 10, 22]",
                        "explanation": "All elements are even. They should still be in sorted order."
                    },
                    {
                        "input": "[1, 3, 5, 7]",
                        "output": "[1, 3, 5, 7]",
                        "explanation": "All elements are odd. They should remain in sorted order."
                    },
                    {
                        "input": "[5, 2, 8, 1, 9, 4]",
                        "output": "[2, 4, 8, 1, 5, 9]",
                        "explanation": "Even numbers (2, 4, 8) placed first in sorted order, followed by odd numbers (1, 5, 9) also in sorted order"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Take all even numbers and odd numbers in separate array. Sort both of them. Then replace back into the given array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "accolite",
            "amazon",
            "makemytrip",
            "linkedin"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    void segregateEvenOdd(vector<int>& arr) {\n        int n = arr.size();\n        int start = 0;\n        int end = n - 1;\n        while (start <= end) {\n            if (arr[start] % 2 != 0 && arr[end] % 2 == 0) {\n                swap(arr[start++], arr[end--]);\n            }\n\n            else if (arr[start] % 2 == 0) {\n                start++;\n            } else {\n                end--;\n            }\n        }\n        sort(arr.begin(), arr.begin() + start);\n        sort(arr.begin() + start, arr.end());\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    void segregateEvenOdd(int arr[]) {\n        // code here\n        int n = arr.length;\n        int start = 0;\n        int end = n - 1;\n\n        while (start <= end) {\n            if (arr[start] % 2 != 0 && arr[end] % 2 == 0) {\n                // Swap arr[start] and arr[end]\n                int temp = arr[start];\n                arr[start] = arr[end];\n                arr[end] = temp;\n                start++;\n                end--;\n            } else if (arr[start] % 2 == 0 && arr[end] % 2 != 0) {\n                start++;\n                end--;\n            } else if (arr[start] % 2 == 0) {\n                start++;\n            } else {\n                end--;\n            }\n        }\n\n        // Sort the even part\n        Arrays.sort(arr, 0, start);\n\n        // Sort the odd part\n        Arrays.sort(arr, start, n);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#User function Template for Python\nclass Solution:\n\n    def segregateEvenOdd(self, arr):\n        # code here\n        n = len(arr)\n        start = 0\n        end = n - 1\n\n        while start <= end:\n            if arr[start] % 2 != 0 and arr[end] % 2 == 0:\n                # Swap arr[start] and arr[end]\n                arr[start], arr[end] = arr[end], arr[start]\n                start += 1\n                end -= 1\n            elif arr[start] % 2 == 0 and arr[end] % 2 != 0:\n                start += 1\n                end -= 1\n            elif arr[start] % 2 == 0:\n                start += 1\n            else:\n                end -= 1\n\n        # Sort the even part in place\n        arr[:start] = sorted(arr[:start])\n\n        # Sort the odd part in place\n        arr[start:] = sorted(arr[start:])\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}