{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713538,
            "title": "Select Nodes",
            "titleSlug": "select-nodes--170645",
            "content": "<p><span style=\"font-size: 18px;\">Given <strong>N&nbsp;</strong>nodes of a tree and a list of edges. Find the <strong>minimum</strong> number of nodes to be selected to light up all the edges of the tree.<br />An edge <strong>lights up</strong> when at least one node at the end of the edge is selected.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nN = 6\nedges[] = [[1,2], [1,3], [2,4], [3,5], [3,6]]\n<strong>Output:</strong>&nbsp;2\n<strong>Explanation</strong>: Selecting nodes 2 and 3 lights\nup all the edges.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 3\narr[] = [[1,2], [1,3]]\n<strong>Output:&nbsp;</strong>1\n<strong>Explanation</strong>: Selecting Node 1 \nlights up all the edges.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>countVertex()</strong>&nbsp;which takes the number of nodes&nbsp;N, and the list of edges as input parameters&nbsp;and returns the minimum number of nodes selected.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup><br />1 &le; edges &le; N<br />Given graph is a valid tree.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Perform a DFS to collect information about the children of the node before processing the node itself.</span></p>",
            "<p><span style=\"font-size:18px\">Every node can have two states - &quot;selected&quot; or &quot;not selected&quot;.</span></p>\n\n<p><span style=\"font-size:18px\">Formulate a transition of a node with its children.</span></p>",
            "<p><span style=\"font-size:18px\">Find the minimum vertex cover for trees.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n  public:\n    //Function to perform depth-first search traversal.\n    void dfs(vector<int> adj[], int src, int par, vector<int> val[]) {\n        //iterating over adjacency list of the current source node.\n        for(int v: adj[src])\n            //if the adjacent node is not the parent node.\n            if(v!=par)\n                //recursively calling dfs on the adjacent node.\n                dfs(adj,v,src,val);\n\n        //iterating over adjacency list of the current source node.\n        for(int v: adj[src])\n        {\n            //if the adjacent node is not the parent node.\n            if(v!=par)\n            {\n                //updating the values in the val array for the current node.\n                val[src][0] += val[v][1];\n                val[src][1] += min(val[v][1],val[v][0]);\n            }\n        }\n    }\n\n    //Function to count the vertices in the minimum vertex cover.\n    int countVertex(int N, vector<vector<int>>edges){\n        //creating an adjacency list to store the graph.\n        vector<int> adj[N+1];\n        for(int i=0; i<N-1; i++)\n        {\n            adj[edges[i][0]].push_back(edges[i][1]);\n            adj[edges[i][1]].push_back(edges[i][0]);\n        }\n\n        //creating a val array to store the number of vertices in the vertex cover.\n        vector<int> val[N+1];\n        for(int i=1; i<=N; i++)\n        {\n            vector<int> x = {0, 1};\n            val[i] = x;\n        }\n\n        //calling the dfs function to perform depth-first search.\n        dfs(adj,1,1,val);\n\n        //returning the minimum number of vertices in the vertex cover.\n        return min(val[1][0],val[1][1]);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution\n{\n    // Function to count the number of vertices\n    public int countVertex(int N, int[][] edges)\n    {\n        // Create an adjacency list to store the graph\n        ArrayList<Integer>[]adj = new ArrayList[N+1];\n        for(int i=0; i<=N; i++)\n            adj[i] = new ArrayList<>();\n        \n        // Populate the adjacency list with the edges\n        for(int i=0; i<N-1; i++)\n        {\n            adj[edges[i][0]].add(edges[i][1]);\n            adj[edges[i][1]].add(edges[i][0]);\n        }\n        \n        // Create a 2D array to store the values\n        int[][] val = new int[N+1][2];\n        for(int i=1; i<=N; i++)\n            val[i][1] = 1;\n        \n        // Perform depth-first search\n        dfs(adj, 1, 1, val);\n        \n        // Return the minimum value from the root vertex\n        return Math.min(val[1][0], val[1][1]);\n    }\n    \n    // Helper function for depth-first search\n    public void dfs(ArrayList<Integer>[] adj, int src, int par, int[][] val)\n    {\n        // Traverse the adjacency list\n        for(Integer v: adj[src])\n            // If the current vertex is not the parent, recursively call dfs\n            if(v != par)\n                dfs(adj, v, src, val);\n        \n        // Compute the values for the current vertex\n        for(Integer v: adj[src])\n        {\n            if(v != par)\n            {\n                val[src][0] += val[v][1];\n                val[src][1] += Math.min(val[v][1], val[v][0]);\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #depth-first search function to traverse the tree\n    def dfs(self, adj, src, par, val):\n        #iterate through all the neighbors of the current node\n        for v in adj[src]:\n            #if the neighbor is not the parent node, perform DFS\n            if v!=par:\n                self.dfs(adj,v,src,val)\n        \n        #calculate the number of vertices in the subtree rooted at the current node\n        for v in adj[src]:\n            #if the neighbor is not the parent node\n            if v!=par:\n                val[src][0] += val[v][1]; #accumulate the count of vertices inside the subtree rooted at the neighbor node\n                val[src][1] += min(val[v][1],val[v][0]) #accumulate the count of vertices that are connected with the neighbor node\n    \n    #function to count the minimum number of vertices that must be removed to make the tree a Binary Tree\n    def countVertex(self, N, edges):\n        #create the adjacency list for the tree\n        adj=[[] for i in range(N+1)]\n        for i in range(N-1):\n            adj[edges[i][0]].append(edges[i][1]) #add the second node of the edge to the adjacency list of the first node\n            adj[edges[i][1]].append(edges[i][0]) #add the first node of the edge to the adjacency list of the second node\n        \n        #initialize the count of vertices in each subtree\n        val=[[] for i in range(N+1)]\n        for i in range(1,N+1):\n            val[i] = [0,1] #[count of vertices inside the subtree rooted at the node, count of vertices connected with the node]\n        \n        #perform DFS to calculate the counts of vertices in each subtree\n        self.dfs(adj,1,1,val)\n        \n        #return the minimum count of vertices that must be removed\n        return min(val[1][0],val[1][1])",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int countVertex(int N, List<List<int>> edges)\n    {\n        //creating an adjacency list to store the graph.\n        List<int>[] adj = new List<int>[N + 1];\n        for (int i = 0; i < N + 1; i++)\n        {\n            adj[i] = new List<int>();\n        }\n\n        for (int i = 0; i < edges.Count; i++)\n        {\n            int u = edges[i][0];\n            int v = edges[i][1];\n            adj[u].Add(v);\n            adj[v].Add(u);\n        }\n\n        //creating a val array to store the number of vertices in the vertex cover.\n        int[][] val = new int[N + 1][];\n        for (int i = 1; i < N + 1; i++)\n        {\n            val[i] = new int[2];\n            val[i][0] = 0;\n            val[i][1] = 1;\n        }\n\n        //calling the dfs function to perform depth-first search.\n        Dfs(adj, 1, 1, val);\n\n        //returning the minimum number of vertices in the vertex cover.\n        return Math.Min(val[1][0], val[1][1]);\n    }\n\n    //Function to perform depth-first search traversal.\n    public void Dfs(List<int>[] adj, int src, int par, int[][] val)\n    {\n        //iterating over adjacency list of the current source node.\n        foreach (int v in adj[src])\n        {\n            //if the adjacent node is not the parent node.\n            if (v != par)\n                //recursively calling dfs on the adjacent node.\n                Dfs(adj, v, src, val);\n        }\n\n        //iterating over adjacency list of the current source node.\n        foreach (int v in adj[src])\n        {\n            //if the adjacent node is not the parent node.\n            if (v != par)\n            {\n                //updating the values in the val array for the current node.\n                val[src][0] += val[v][1];\n                val[src][1] += Math.Min(val[v][1], val[v][0]);\n            }\n        }\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} N\r\n * @param {number[][]} edges\r\n *\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //depth-first search function to traverse the tree\r\n    dfs(adj, src, par, val) {\r\n        //iterate through all the neighbors of the current node\r\n        for (let v of adj[src]) {\r\n            //if the neighbor is not the parent node, perform DFS\r\n            if (v !== par) {\r\n                this.dfs(adj, v, src, val);\r\n            }\r\n        }\r\n\r\n        //calculate the number of vertices in the subtree rooted at the current node\r\n        for (let v of adj[src]) {\r\n            //if the neighbor is not the parent node\r\n            if (v !== par) {\r\n                val[src][0] += val[v][1]; //accumulate the count of vertices inside the subtree rooted at the neighbor node\r\n                val[src][1] += Math.min(val[v][1], val[v][0]); //accumulate the count of vertices that are connected with the neighbor node\r\n            }\r\n        }\r\n    }\r\n\r\n    //function to count the minimum number of vertices that must be removed to make the tree a Binary Tree\r\n    countVertex(N, edges) {\r\n        //create the adjacency list for the tree\r\n        let adj = [];\r\n        for (let i = 0; i <= N; i++) {\r\n            adj[i] = [];\r\n        }\r\n        for (let i = 0; i < N - 1; i++) {\r\n            adj[edges[i][0]].push(edges[i][1]); //add the second node of the edge to the adjacency list of the first node\r\n            adj[edges[i][1]].push(edges[i][0]); //add the first node of the edge to the adjacency list of the second node\r\n        }\r\n\r\n        //initialize the count of vertices in each subtree\r\n        let val = [];\r\n        for (let i = 0; i <= N; i++) {\r\n            val[i] = [0, 1]; //[count of vertices inside the subtree rooted at the node, count of vertices connected with the node]\r\n        }\r\n\r\n        //perform DFS to calculate the counts of vertices in each subtree\r\n        this.dfs(adj, 1, 1, val);\r\n\r\n        //return the minimum count of vertices that must be removed\r\n        return Math.min(val[1][0], val[1][1]);\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}