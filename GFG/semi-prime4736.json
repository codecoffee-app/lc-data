{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703833,
            "title": "Semi Prime",
            "titleSlug": "semi-prime4736",
            "content": "<p><span style=\"font-size:18px\">Given a positive integer n. Find whether a number is a <strong>semiprime</strong> or not.<br />\n&nbsp;<strong>Note:</strong>&nbsp;A semiprime is a natural number that is a product of two prime numbers .</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N=35\n<strong>Output:\n</strong>1\n<strong>Explanation:\n</strong>35=7x5.So 35 is a semi-prime.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>8\n<strong>Output:</strong></span><span style=\"font-size:18px\"><strong>\n</strong>0\n<strong>Explanation:\n</strong>8 is not a semi prime.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything.Your Task is to complete the function <strong>checkSemiprime()</strong> which takes a number N as input parameter and returns 1 if it is a semi prime number.Otherwise, it returns 0.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(Sqrt(N))<br />\n<strong>Expected Auxillary Space:</strong>O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=N&lt;=10<sup>9</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer 'n', determine if it is a semiprime number. A semiprime is a natural number that is the product of two prime numbers.",
                "constraints": [
                    "1 <= N <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "35",
                        "output": "1",
                        "explanation": "35 can be expressed as the product of two prime numbers, 7 and 5. Therefore, 35 is a semiprime."
                    },
                    {
                        "input": "8",
                        "output": "0",
                        "explanation": "8 cannot be expressed as a product of two prime numbers.  Its prime factorization is 2 x 2 x 2, so it is not a semiprime."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A semi-prime number has either 3 or 4 factors.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend Complete function template for C++\n\nclass Solution {\n  public:\n    int checkSemiprime(int N) {\n        int cnt = 0;\n\n        for (int i = 2; cnt < 2 && i * i <= N; ++i)\n            while (N % i == 0) {\n                N /= i;\n                ++cnt;\n            } // Increment count\n              // of prime numbers\n\n        // If number is greater than 1, add it to\n        // the count variable as it indicates the\n        // number remain is prime number\n        if (N > 1) ++cnt;\n\n        // Return '1' if count is equal to '2' else\n        // return '0'\n        return cnt == 2;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    int checkSemiprime(int N) {\n        int cnt = 0;\n\n        for (int i = 2; cnt < 2 && i * i <= N; ++i)\n            while (N % i == 0) {\n                N /= i;\n                ++cnt;\n            } // Increment count\n              // of prime numbers\n\n        // If number is greater than 1, add it to\n        // the count variable as it indicates the\n        // number remain is prime number\n        if (N > 1) ++cnt;\n\n        // Return '1' if count is equal to '2' else\n        // return '0'\n        return (cnt == 2 ? 1 : 0);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    # Function to check if a number is a semiprime or not.\n    def checkSemiprime(self, N):\n        cnt = 0\n        i = 2\n        # Loop to factorize the number into prime factors.\n        while (i * i <= N and cnt < 2):\n            while (N % i == 0):\n                N //= i\n                cnt += 1\n            i += 1  \n        # If there is a remaining prime factor, increment count.\n        if (N > 1):\n            cnt += 1\n        # If the count of prime factors is 2, return 1. Otherwise, return 0.\n        if cnt == 2:\n            return 1\n        return 0",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass Solution {\n    //Function to check whether a number is semiprime or not.\n    checkSemiprime(N) {\n        let cnt = 0;\n        let i = 2;\n\n        while ((i * i <= N) && (cnt < 2)) {\n            while (N % i === 0) {\n                N /= i;\n                cnt++;\n            }\n            i++;\n        }\n\n        if (N > 1) {\n            cnt++;\n        }\n\n        return (cnt === 2) ? 1 : 0;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function template for C#\n\nclass Solution {\n    //Function to check if a number is semiprime or not.\n    public int checkSemiprime(int N) {\n        int cnt = 0;\n\n        for (int i = 2; cnt < 2 && i * i <= N; ++i)\n            while (N % i == 0) {\n                N /= i;\n                ++cnt;\n            } // Increment count\n              // of prime numbers\n\n        // If number is greater than 1, add it to\n        // the count variable as it indicates the\n        // number remain is prime number\n        if (N > 1) ++cnt;\n\n        // Return '1' if count is equal to '2' else\n        // return '0'\n        return cnt == 2 ? 1 : 0;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}