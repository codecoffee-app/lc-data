{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701277,
            "title": "Separate chaining in Hashing",
            "titleSlug": "separate-chaining-in-hashing-1587115621",
            "content": "<p><em><span style=\"font-size: 18px;\">Separate chaining technique in hashing allows to us to use a linked list at each hash slot to handle the problem of collisions. That is, every slot of the hash table is a linked list, so whenever a collision occurs, the element can be appened as a node to the linked list at the slot.</span></em></p>\n<p><span style=\"font-size: 18px;\">In this question, we'll learn how to fill up the hash table using </span><strong><em><span style=\"font-size: 18px;\">Separate chaining </span></em></strong><span style=\"font-size: 18px;\"><strong>technique</strong>. Given an array (consisting of distinct integers)&nbsp; and a hashtable size, you have to fill the elements of the array into a hash table of&nbsp;given size.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :<br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>hashSize = 10 sizeOfArray = 6 arr[] = {92,4,14,24,44,91}\n<strong>Output:\n</strong>1-&gt;91\n2-&gt;92\n4-&gt;4-&gt;14-&gt;24-&gt;44<strong>\nExplanation: </strong>92%10=2 so 92 goes to slot 2. 4%10=4 so 4 goes to slot 4. 14%10=4. But 4 is already occupied so we make a linked list at this position and add 14 after 4 in slot 4 and so on.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>hashSize = 10 sizeOfArray = 5 arr[] = {12,45,36,87,11}\n<strong>Output:\n</strong>1-&gt;11\n2-&gt;12\n5-&gt;45\n6-&gt;36\n7-&gt;87<strong>\nExplanation: </strong>12%10=2 so 12 goes to slot 2. 45%10=5 goes to slot 5. 36%10=6 goes to slot 6. 87%10=7 goes to slot 7 and finally. 11%10=1 goes to slot 1.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Your Task:</span></strong><br /><span style=\"font-size: 18px;\">You need to complete the function <strong>separateChaining </strong>that takes<strong>&nbsp;hashSize, arr, and sizeOfArr</strong> as parameters, inserts elements of arr in the hashTable at positions by using <strong>arr[i]%hashSize&nbsp;</strong>and then returns the hashTable. The printing is done automatically by the driver code.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= hashSize &lt;= 10<sup>3</sup><br />1 &lt;= sizeOfArray &lt;= 10<sup>3</sup><br />0 &lt;= arr<sub>i</sub> &lt;= 10<sup>7</sup></span></p>\n<p>&nbsp;</p>\n<div id=\"professor_prebid-root\"></div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a hash table using the separate chaining technique. Given an array of distinct integers and a hash table size, insert the elements of the array into the hash table. Each slot in the hash table should be a linked list to handle collisions. The position of each element in the hash table is determined by `arr[i] % hashSize`.",
                "constraints": [
                    "2 <= hashSize <= 10^3",
                    "1 <= sizeOfArray <= 10^3",
                    "0 <= arr[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "hashSize = 10, sizeOfArray = 6, arr[] = {92, 4, 14, 24, 44, 91}",
                        "output": "1->91\n2->92\n4->4->14->24->44",
                        "explanation": "The element 92 is placed at index 2 (92 % 10 = 2). The element 4 is placed at index 4 (4 % 10 = 4).  Subsequent elements 14, 24, and 44 also map to index 4, resulting in a linked list at that index: 4 -> 14 -> 24 -> 44. The element 91 goes to index 1 (91%10=1)."
                    },
                    {
                        "input": "hashSize = 10, sizeOfArray = 5, arr[] = {12, 45, 36, 87, 11}",
                        "output": "1->11\n2->12\n5->45\n6->36\n7->87",
                        "explanation": "The elements are inserted at indices calculated using the modulo operator: 12 % 10 = 2, 45 % 10 = 5, 36 % 10 = 6, 87 % 10 = 7, and 11 % 10 = 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n    //Function to insert elements of arr in the hashTable avoiding collisions.\r\n    vector<vector<int>> separateChaining(int hashSize,int arr[],int sizeOfArray)\r\n    {\r\n        vector<vector<int>> hashTable(hashSize);\r\n        //iterating over the array\r\n        for(int i=0;i<sizeOfArray;i++)\r\n        {\r\n           //pushing element arr[i] in the vector hashTable\r\n            //at position arr[i]%hashSize.\r\n           hashTable[arr[i]%hashSize].push_back(arr[i]);\r\n        }\r\n        \r\n        //returning the hashTable.\r\n        return hashTable;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n\n    //Function to insert elements of array in the hashTable avoiding collisions.\n    public ArrayList<ArrayList<Integer>> separateChaining(int arr[], int n, int hashSize)\n    {\n        ArrayList<ArrayList<Integer>> list = new ArrayList<>();\n        for(int i = 0; i < hashSize; i++)\n            list.add(new ArrayList<>());\n        for(int x : arr){\n            list.get(x % hashSize).add(x);\n        }\n        return list;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\nclass Solution:\r\n\r\n    #Function to insert elements of array in the hashTable avoiding collisions.\r\n    def separateChaining(self, hashSize, arr, sizeOfArray):\r\n        hashTable=[0]*hashSize\r\n        \r\n            \r\n        for i in range(hashSize):\r\n            hashTable[i]=[]\r\n            \r\n        #iterating over the array.\r\n        for i in range(sizeOfArray):\r\n            \r\n            #pushing element arr[i] in the vector hashTable\r\n            #at position arr[i]%hashSize.\r\n            hashTable[arr[i]%hashSize].append(arr[i])\r\n        \r\n        #returning the hashTable.\r\n        return hashTable\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {number} hashSize\r\n * @param {number[]} arr\r\n * @param {number} sizeOfArray\r\n * @returns {number[][]}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to insert elements of array in the hashTable avoiding collisions.\r\n    separateChaining(hashSize, arr, sizeOfArray)\r\n    {\r\n        let res = new Array(hashSize);\r\n        for(let i=0; i<hashSize; i++){\r\n            res[i] = new Array(); \r\n        }\r\n        //iterating over the array.\r\n        for(let i=0;i<sizeOfArray;i++)\r\n        {\r\n            //pushing element arr[i] in the list hashTable\r\n            //at position arr[i]%hashSize.\r\n           res[arr[i]%hashSize].push(arr[i]);\r\n        }\r\n        \r\n        //returning the hashTable.\r\n        return res;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}