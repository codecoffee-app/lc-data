{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704103,
            "title": "Sequence of Sequence",
            "titleSlug": "sequence-of-sequence1155",
            "content": "<p><span style=\"font-size: 18.6667px;\">Given two integers&nbsp;<strong>n</strong>&nbsp;and&nbsp;<strong>m</strong>, the task is to determine the total number of special sequences of length&nbsp;<strong>n</strong>&nbsp;such that:&nbsp;&nbsp;</span></p>\n<ul>\n<li><span style=\"font-size: 18.6667px;\">seq[i+1] &gt;= 2 * seq[i]</span></li>\n<li><span style=\"font-size: 18.6667px;\">seq[i] &gt; 0</span></li>\n<li><span style=\"font-size: 18.6667px;\">seq[i] &lt;= m</span></li>\n</ul>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 4, m = 10\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The sequences are {1, 2, 4, 8}, {1, 2, 4, 9}, {1, 2, 4, 10}, {1, 2, 5, 10}</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 2, m = 5\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The sequences are {1, 2}, {1, 3}, {1, 4}, {1, 5}, {2, 4}, {2, 5}</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<br />1&nbsp;</span><span style=\"font-size: 18px;\">&le; m&nbsp;</span><span style=\"font-size: 18px;\">&le; 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers `n` and `m`, determine the total number of special sequences of length `n` that satisfy the following conditions:\n\n*   Each element in the sequence is a positive integer.\n*   For each `i`, `seq[i+1] >= 2 * seq[i]`. In other words, each element is at least twice the value of the previous element.\n*   Each element in the sequence is less than or equal to `m`.",
                "constraints": [
                    "1 <= n <= 10",
                    "1 <= m <= 500"
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 10",
                        "output": "4",
                        "explanation": "The special sequences are: {1, 2, 4, 8}, {1, 2, 4, 9}, {1, 2, 4, 10}, {1, 2, 5, 10}"
                    },
                    {
                        "input": "n = 2, m = 5",
                        "output": "6",
                        "explanation": "The special sequences are: {1, 2}, {1, 3}, {1, 4}, {1, 5}, {2, 4}, {2, 5}"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">The maximum value of the last element can be m. Now keep decreasing&nbsp;m and check if you can form such sequence.</span></p>",
            "<p>Use Dynamic Programming.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the total number of special\n    // sequences using tabulation\n    int numberSequence(int n, int m) {\n        vector<vector<int>> dp(n + 1, vector<int>(m + 1, -1));\n\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= m; j++) {\n\n                // Base case 1: If the sequence length (n) is 0,\n                // we have a valid sequence\n                if (i == 0)\n                    dp[i][j] = 1;\n\n                // Base case 2: If the maximum value (m) is 0,\n                // no sequences can be formed\n                else if (j == 0)\n                    dp[i][j] = 0;\n\n                // Transition:\n                // 1. Exclude the current value j\n                //      Use dp[i][j - 1]\n                // 2. Include the current value j\n                //      Use dp[i - 1][j / 2]\n                else\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j / 2];\n            }\n        }\n\n        return dp[n][m];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to calculate the total number of special\n    // sequences using tabulation\n    public int numberSequence(int n, int m) {\n        // Create a 2D array 'dp' to store results\n        int[][] dp = new int[n + 1][m + 1];\n\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= m; j++) {\n\n                // Base case 1: If the sequence length (n) is 0,\n                // we have a valid sequence\n                if (i == 0) {\n                    dp[i][j] = 1;\n                }\n                // Base case 2: If the maximum value (m) is 0,\n                // no sequences can be formed\n                else if (j == 0) {\n                    dp[i][j] = 0;\n                }\n                // Transition:\n                // 1. Exclude the current value j\n                //      Use dp[i][j - 1]\n                // 2. Include the current value j\n                //      Use dp[i - 1][j / 2]\n                else {\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j / 2];\n                }\n            }\n        }\n\n        return dp[n][m];\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to calculate the total number of special\n    # sequences using tabulation\n    def numberSequence(self, n, m):\n        # Initialize a 2D list with -1\n        dp = [[-1 for _ in range(m + 1)] for _ in range(n + 1)]\n\n        for i in range(n + 1):\n            for j in range(m + 1):\n\n                # Base case 1: If the sequence length (n) is 0,\n                # we have a valid sequence\n                if i == 0:\n                    dp[i][j] = 1\n\n                # Base case 2: If the maximum value (m) is 0,\n                # no sequences can be formed\n                elif j == 0:\n                    dp[i][j] = 0\n\n                # Transition:\n                # 1. Exclude the current value j\n                #      Use dp[i][j - 1]\n                # 2. Include the current value j\n                #      Use dp[i - 1][j // 2]\n                else:\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j // 2]\n\n        return dp[n][m]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to calculate the total number of special\n    // sequences using tabulation\n    numberSequence(n, m) {\n        // Initialize a 2D array with -1\n        let dp = Array.from({length : n + 1}, () => Array(m + 1).fill(-1));\n\n        for (let i = 0; i <= n; i++) {\n            for (let j = 0; j <= m; j++) {\n\n                // Base case 1: If the sequence length (n) is 0,\n                // we have a valid sequence\n                if (i === 0) {\n                    dp[i][j] = 1;\n                }\n\n                // Base case 2: If the maximum value (m) is 0,\n                // no sequences can be formed\n                else if (j === 0) {\n                    dp[i][j] = 0;\n                }\n\n                // Transition:\n                // 1. Exclude the current value j\n                //      Use dp[i][j - 1]\n                // 2. Include the current value j\n                //      Use dp[i - 1][Math.floor(j / 2)]\n                else {\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][Math.floor(j / 2)];\n                }\n            }\n        }\n\n        return dp[n][m];\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}