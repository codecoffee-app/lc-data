{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704940,
            "title": "Series GP",
            "titleSlug": "series-gp4646",
            "content": "<p><span style=\"font-size: 18px;\">Given two integers <strong>a </strong>and <strong>r </strong>i,e first term and common ratio of a GP series. Find the <strong>nth </strong>term of the series.<br /></span><span style=\"font-size: 18px;\"><strong>Note: </strong>As the answer can be rather large, print its modulo of 1000000007 (10<sup>9</sup>&thinsp;+&thinsp;7).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: a</strong> = 2, <strong>r</strong> = 2, <strong>n</strong> = 4\n<strong>Output: </strong>16\n<strong>Explanation: </strong>The GP series is 2, 4, 8, 16, 32,... in which 16 is the 4th term.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: a</strong> = 4, <strong>r</strong> = 3, <strong>n</strong> = 3\n<strong>Output: </strong>36\n<strong>Explanation: </strong>The GP series is 4, 12, 36, 108,.. in which 36 is the 3rd term.</span><span style=\"font-size: 18px;\"><br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong>&nbsp;<br /></span><span style=\"font-size: 18px;\">1 &lt;= a, r, n &lt;= 1000000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the first term (a) and common ratio (r) of a Geometric Progression (GP) series, find the nth term of the series.  The result should be calculated modulo 1000000007 (10^9 + 7).",
                "constraints": [
                    "1 <= a <= 1000000",
                    "1 <= r <= 1000000",
                    "1 <= n <= 1000000"
                ],
                "testcases": [
                    {
                        "input": "a = 2, r = 2, n = 4",
                        "output": "16",
                        "explanation": "The GP series starts as 2, 4, 8, 16,... The 4th term is 16."
                    },
                    {
                        "input": "a = 4, r = 3, n = 3",
                        "output": "36",
                        "explanation": "The GP series starts as 4, 12, 36,... The 3rd term is 36."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Gp series is a, ar, ar<sup>2</sup>, ar<sup>3</sup>.. and so on</p>",
            "<p>Nth term of gp is given by a<sub>n</sub>=ar<sup>n-1</sup></p>\n\n<p>ratio is given by r= (n+1)term/(n)term</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n\tpublic:\n\t//Function to calculate x raised to the power n modulo M.\n\tusing ll  = unsigned long long int ;\n\tll powm(ll x,ll n,ll M){\n\t\t//Initializing result to 1.\n\t\tll result=1;\n\t\twhile(n>0)\n\t\t{\n\t\t\t//If n is odd, multiply result with x and take modulo M.\n\t\t\tif(n % 2 ==1)\n\t\t\t\tresult=(result * x)%M;\n\t\t\t//Square x and take modulo M.\n\t\t\tx=(x*x)%M;\n\t\t\t//Divide n by 2.\n\t\t\tn=n/2;\n\t\t}\n\t\t//Returning result.\n\t\treturn result;\n\t}\n   \t//Function to find the nth term of an arithmetic series.\n   \tint Nth_term(int a, int r, int n){\n   \t\t//Modulo variable.\n   \t\tll mod = 1e9 + 7;\n   \t\t//Calculating the power of r raised to the (n-1)th power modulo mod.\n   \t\tll res = powm(r, n-1, mod);\n   \t\t//Multiplying the result with a and taking modulo mod.\n   \t\tres *= a;\n   \t\tres %= mod;\n   \t\t//Returning the result when converted to int.\n   \t\treturn int(res);\n   \t}    \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to calculate the Nth term of a series\n    public int Nth_term(int a, int r, int n) {\n        int m = 1000000007;\n        \n        // Calculating x by multiplying 'a' with the power of 'r' raised to (n - 1)\n        long x = (long) a * power(r, n - 1) % m;\n        \n        // Returning the Nth term as an integer\n        return (int) x;\n    }\n    \n    // Function to calculate the power of a number using recursion\n    public static long power(int r, int n) {\n        int m = 1000000007;\n        \n        // Base case: if n is 0, return 1\n        if (n == 0) {\n            return 1;\n        }\n        \n        // Recursive call to calculate the power of r raised to (n/2)\n        long t = power(r, n / 2) % m;\n        \n        // Calculating t squared modulo m\n        t = (t * t) % m;\n        \n        // If n is even, return t modulo m\n        if (n % 2 == 0) {\n            return t % m;\n        }\n        \n        // If n is odd, return r multiplied by t modulo m\n        return (r * t) % m;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\n\nclass Solution:\n\n    def Nth_term(self, a, r, n):\n        # initializing result\n        res = 1\n        # decreasing n by 1\n        n = n - 1\n        # loop until n becomes 0\n        while (n > 0):\n            # checking if n is odd\n            if (n % 2 != 0):\n                # updating res by multiplying it with r,\n                # the modulo is taken to prevent overflow\n                res = (res * r) % (pow(10, 9) + 7)\n            # updating r by squaring it,\n            # the modulo is taken to prevent overflow\n            r = r * r % (pow(10, 9) + 7)\n            # dividing n by 2\n            n = n // 2\n        # calculating the final result by multiplying a with res,\n        # the modulo is taken to prevent overflow\n        return (a * res) % (pow(10, 9) + 7)\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int Nth_term(int a, int r, int n)\n    {\n        // Modulo variable.\n        ulong mod = 1000000007;\n        \n        // Calculating the power of r raised to the (n-1)th power modulo mod.\n        ulong res = Powm((ulong)r, (ulong)(n-1), mod);\n        \n        // Multiplying the result with a and taking modulo mod.\n        res *= (ulong)a;\n        res %= mod;\n        \n        // Returning the result when converted to int.\n        return (int)res;\n    }\n    \n    public ulong Powm(ulong x, ulong n, ulong M)\n    {\n        // Initializing result to 1.\n        ulong result = 1;\n        \n        while (n > 0)\n        {\n            // If n is odd, multiply result with x and take modulo M.\n            if (n % 2 == 1)\n                result = (result * x) % M;\n            \n            // Square x and take modulo M.\n            x = (x * x) % M;\n            \n            // Divide n by 2.\n            n = n / 2;\n        }\n        \n        // Returning result.\n        return result;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    powm(x, n, M) {\n        var result = 1n;\n        x = BigInt(x);\n        while(n > 0) {\n            if(n % 2 === 1)\n                result = (result * x) % M;\n            x = (x * x) % M;\n            n = Math.floor(n / 2);\n        }\n        return result;\n    }\n\n    Nth_term(a, r, n) {\n        const mod = 1000000007n;\n        let res = this.powm(r, n - 1, mod);\n        res = (res * BigInt(a)) % mod;\n        return parseInt(res.toString());\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}