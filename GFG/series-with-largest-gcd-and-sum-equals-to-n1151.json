{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705229,
            "title": "Series with largest GCD and sum equals to N",
            "titleSlug": "series-with-largest-gcd-and-sum-equals-to-n1151",
            "content": "<p><span style=\"font-size:18px\">Given an integer N, the task is to find out&nbsp;M increasing numbers such that the sum of M numbers is equal to N and the GCD of these M numbers is maximum among all possible combinations (or series) of M numbers.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note: </strong>If two or more such series are possible then return&nbsp;the series which has smallest first term.<br />\n<br />\n<strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: N = 24, M = 3\n<strong>Output:</strong>&nbsp;4 8 12\n<strong>Explanation</strong>: (3, 6, 15) is also a series \nof M numbers which sums to N, but gcd = 3\n(4, 8, 12) has gcd = 4 which is the maximum\npossible.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 6, M = 4\n<strong>Output:&nbsp;</strong>-1\n<strong>Explanation</strong>: It is not possible as the \nleast GCD sequence will be 1+2+3+4 which\nis greater then n, hence print -1.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>M_sequence()&nbsp;</strong>which takes N&nbsp;and M&nbsp;as input parameter and returns th series of M&nbsp;numbers&nbsp;and if there are no series&nbsp;exist returns -1.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(sqrt(n))<br />\n<strong>Expected Auxiliary Space:</strong> O(n)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &lt;= N&nbsp;&lt;=10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, find M increasing numbers such that their sum equals N, and their greatest common divisor (GCD) is maximized among all possible combinations. If multiple series achieve the maximum GCD, return the series with the smallest first term.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 24, M = 3",
                        "output": "4 8 12",
                        "explanation": "The series (4, 8, 12) sums to 24, has a GCD of 4. While (3, 6, 15) also sums to 24, its GCD is only 3. Therefore, (4, 8, 12) is the correct output as it has the maximum GCD."
                    },
                    {
                        "input": "N = 6, M = 4",
                        "output": "-1",
                        "explanation": "It's impossible to find 4 increasing numbers that sum to 6. The smallest possible series would be 1 + 2 + 3 + 4 = 10, which is already greater than 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The gcd of the series will always be a divisor of N.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<int> M_sequence(int N, int M) \n{ \n    // stores the maximum gcd that can be \n    // possible of sequence.\n    vector<int>ans; \n    int b = N / (M * (M + 1) / 2); \n  \n    // if maximum gcd comes out to be \n    // zero then not possible \n    if (b == 0) { \n        cout << -1 << endl; \n  \n    } else { \n  \n        // the smallest gcd possible is 1 \n        int r = 1; \n  \n        // traverse the array to find out  \n        // the max gcd possible \n        for (int x = 1; x * x <= N; x++) { \n  \n            // checks if the number is  \n            // divisible or not \n            if (N % x != 0) \n                continue; \n  \n            // checks if x is smaller then  \n            // the max gcd possible and x  \n            // is greater then the resultant  \n            // gcd till now, then r=x \n            if (x <= b && x > r) \n                r = x; \n  \n            // checks if n/x is smaller than  \n            // the max gcd possible and n/x  \n            // is greater then the resultant  \n            // gcd till now, then r=x \n            if (N / x <= b && N / x > r) \n                r = N / x; \n        } \n  \n        // traverses and prints d, 2d, 3d, \n        // ..., (k-1)\u00c2\u00b7d, \n        for (int i = 1; i < M; i++) \n            ans.push_back(r * i); \n  \n        // computes the last element of \n        // the sequence n-s. \n        int res = N - (r * (M * (M - 1) / 2)); \n  \n        // prints the last element \n        ans.push_back(res); \n    }\n    return ans; \n} \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}