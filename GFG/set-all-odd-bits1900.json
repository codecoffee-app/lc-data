{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703826,
            "title": "Set all odd bits",
            "titleSlug": "set-all-odd-bits1900",
            "content": "<p><span style=\"font-size:18px\">Given a number, the task is to set all odd bits of a number.<br />\n<strong>NOTE:&nbsp;</strong>Position of Least Significant Bit is considered as 1.</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: n = 20\n<strong>Output:</strong>&nbsp;21&nbsp;\n<strong>Explanation</strong>: Binary representation of 20 \nis <strong>1</strong>0<strong>1</strong>0<strong>0</strong>. Setting all odd bits make the \nnumber <strong>1</strong>0<strong>1</strong>0<strong>1</strong> which is binary\nrepresentation of 21.</span><span style=\"font-size:18px\">\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 10\n<strong>Output:&nbsp;</strong>15\n<strong>Explanation</strong>: Binary representation of 10\nis 1<strong>0</strong>1<strong>0</strong>. Setting all odd bits make the\nnumber <strong>1</strong><strong>111</strong> which is binary representation\nof 15.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>setAllOddBits\u00e2\u20ac\u2039()&nbsp;</strong>which takes n&nbsp;as input parameter and returns the modified number.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(1)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;= n&nbsp;&lt;=10<sup>9</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Generate a number that contains odd position bits.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // return MSB set number \nlong long int getmsb(long long int n) \n{ \n    // set all bits including MSB. \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16; \n  \n    // return MSB \n    return (n + 1) >> 1; \n} \n  \n// Returns a number of same size (MSB at \n// same position) as n and all odd bits \n// set. \nlong long int getevenbits(long long int n) \n{ \n    n = getmsb(n); \n  \n    // generate odd bits like 010101.. \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16; \n  \n    // if bits is even then shift by 1 \n    if ((n&1) == 0) \n        n = n >> 1; \n      \n    // return odd set bits number \n    return n;   \n} \n  \n// set all odd bits here \nlong long int setAllOddBits(long long int n) \n{     \n    // take OR with odd set bits number \n    return n | getevenbits(n);     \n}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    private long GetMSB(long n) {\n        // set all bits including MSB\n        n |= n >> 1;\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        n |= n >> 32; // Added this line to handle 64-bit numbers\n\n        // return MSB\n        return (n + 1) >> 1;\n    }\n\n    private long GetEvenBits(long n) {\n        n = GetMSB(n);\n\n        // generate odd bits like 010101..\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        n |= n >> 32; // Added this line to handle 64-bit numbers\n\n        // if bits is even then shift by 1\n        if ((n & 1) == 0)\n            n >>= 1;\n\n        // return odd set bits number\n        return n;\n    }\n\n    public long setAllOddBits(long n) {\n        // take OR with odd set bits number\n        return n | GetEvenBits(n);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}