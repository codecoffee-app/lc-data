{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705013,
            "title": "Sixy Primes",
            "titleSlug": "sexy-primes3341",
            "content": "<p><span style=\"font-size:18px\">Sixy primes are prime numbers that differ from each other by six. For example, the numbers 5 and 11 are both sixy primes, because they differ by 6. Given a range of the form <strong>[L, R]</strong>. The task is to find&nbsp;all the sixy prime pairs in the range in increasing order.</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>: L = 11, R = 19\r\n<strong>Output:</strong>&nbsp;[11, 17, 13, 19]&nbsp;\r\n<strong>Explanation</strong>: There are total two pair possible\r\nwith difference 6 and these are 11,17,13,19.  </span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>L = 6, R = 20\r\n<strong>Output:&nbsp;</strong>[7, 13, 11, 17, 13, 19]</span><span style=\"font-size:18px\">\r\n<strong>Explanation</strong>: There are total three pair possible\r\nwith difference 6 and these are 7,13,11,17,13,19. \r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou dont need to read input or print anything. Complete the function <strong>sixyPrime()&nbsp;</strong>which takes L and R&nbsp;as input parameter and returns all the sixy prime exist and if there are no sixy prime exist returns -1.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong> O(nloglogn)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(n)<br />\r\n<br />\r\n<strong>Constraints:</strong><br />\r\n1 &lt;= L &lt;= R&nbsp;&lt;=10<sup>3</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A sixy prime pair consists of two prime numbers that differ by 6. Given a range [L, R], identify and return all sixy prime pairs within that range in ascending order. If no such pairs exist, return -1.",
                "constraints": [
                    "1 <= L <= R <= 1000"
                ],
                "testcases": [
                    {
                        "input": "L = 11, R = 19",
                        "output": "[11, 17, 13, 19]",
                        "explanation": "The sixy prime pairs within the range [11, 19] are (11, 17) and (13, 19). Therefore, the output is [11, 17, 13, 19]."
                    },
                    {
                        "input": "L = 6, R = 20",
                        "output": "[7, 13, 11, 17, 13, 19]",
                        "explanation": "The sixy prime pairs within the range [6, 20] are (7, 13), (11, 17), and (13, 19). Therefore, the output is [7, 13, 11, 17, 13, 19]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Sieve of Eratosthenes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n    vector<int> sixyPrime(int L, int R) \r\n{ \r\n    // Sieve Of Eratosthenes for generating \r\n    // prime number. \r\n    bool prime[R + 1]; \r\n    memset(prime, true, sizeof(prime)); \r\n  \r\n    for (int p = 2; p * p <= R; p++) { \r\n  \r\n        // If prime[p] is not changed,  \r\n        // then it is a prime \r\n        if (prime[p] == true) { \r\n  \r\n            // Update all multiples of p \r\n            for (int i = p * 2; i <= R; i += p) \r\n                prime[i] = false; \r\n        } \r\n    } \r\n    vector<int>ans;\r\n  \r\n    // From L to R - 6, checking if i, \r\n    // i + 6 are prime or not. \r\n    for (int i = L; i <= R - 6; i++){  \r\n        if (prime[i] && prime[i + 6]){\r\n            ans.push_back(i);\r\n            ans.push_back(i+6);\r\n        }\r\n    }\r\n    if(ans.size()==0)ans.push_back(-1);     \r\n    return ans;\r\n} \r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public List<int> sixyPrime(int L, int R)\n    {\n        bool[] prime = new bool[R + 1]; // create boolean array to store whether a number is prime or not\n        List<int> ans = new List<int>(); // create a list to store the sixy primes\n        \n        // set all numbers as prime initially\n        for (int i = 0; i <= R; i++)\n        {\n            prime[i] = true;\n        }\n        \n        // apply Sieve of Eratosthenes algorithm to find prime numbers\n        for (int p = 2; p * p <= R; p++)\n        {\n            if (prime[p] == true)\n            {\n                for (int i = p * 2; i <= R; i += p)\n                {\n                    prime[i] = false;\n                }\n            }\n        }\n        \n        // find all sixy primes between L and R\n        for (int i = L; i <= R - 6; i++)\n        {\n            if (prime[i] && prime[i + 6])\n            {\n                ans.Add(i);\n                ans.Add(i + 6);\n            }\n        }\n        \n        if (ans.Count == 0)\n        {\n            ans.Add(-1);\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}