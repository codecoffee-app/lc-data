{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704994,
            "title": "Sharing is Caring",
            "titleSlug": "sharing3134",
            "content": "<p><span style=\"font-size:18px\">Geek is very fond of chocolates. But he can&#39;t reach&nbsp;the&nbsp;kitchen shelf&nbsp;which has&nbsp;<strong>&#39;N&#39;</strong> chocolates. His family has K members and he can&nbsp;call any number of family members to help him out. After acquiring the chocolates, the family members that Geek called&nbsp;will first divide the chocolates amongst themsleves equally. They do this in such a way that they all get maximum number of chocolates. The remaining chocolates are given to Geek.&nbsp;<br />\r\nFind the maximum number of chocolates that Geek can get.</span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\nN = 15, K = 4\r\n<strong>Output:</strong> 3\r\n<strong>Explaination:</strong> \r\nCalling 1 member. Geek will get nothing. \r\nCalling 2 members. Geek will get 1 chocolate. \r\nCalling 3 members. Geek will get nothing. \r\nCalling 4 members. Geek will get 3 chocolates. </span></pre>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\nN = 19, K = 5\r\n<strong>Output:</strong> 4\r\n<strong>Explaination:</strong> 5 memebers will be called who will \r\ndivide 15 chocolates among them. And 4 chocolates \r\nwill be left for Geek. </span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>maxChocolate()</strong> which takes&nbsp;N and K as input parameters and returns the maximum number of chocolates Geek can have.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(min(N,K))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N, K &le; 10<sup>5</sup>&nbsp;&nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek loves chocolates but can't reach the kitchen shelf with 'N' chocolates. He has 'K' family members and can ask any number of them for help. The helpers divide the chocolates equally among themselves, maximizing the number each receives. The remaining chocolates are given to Geek. Find the maximum number of chocolates Geek can get.",
                "constraints": [
                    "1 <= N, K <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 15, K = 4",
                        "output": "3",
                        "explanation": "If Geek calls all 4 members, the chocolates are divided as 15 % 4 = 3. So Geek will get 3 chocolates."
                    },
                    {
                        "input": "N = 19, K = 5",
                        "output": "4",
                        "explanation": "If Geek calls all 5 members, they will divide 19 chocolates among them, where 19 % 5 = 4 chocolates will be left for Geek."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find how many chocolates will he get for calling persons from 1 upto K.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to find the maximum amount of chocolate left if the chocolates are distributed among K children\n    int maxChocolate(int N, int K){\n        int maxi = 0;\n        // iterating through all possible values of i from 1 to K\n        for(int i = 1;i <= K;i++)\n            // updating the maximum amount of chocolate left\n            maxi = max(maxi, N%i);\n        // returning the maximum amount of chocolate left\n        return maxi;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\r\n\r\nclass Solution{\r\nstatic int maxChocolate(int N, int K){\r\n        // code here\r\n        int maxi = 0;\r\n        for(int i = 1;i <= K;i++)\r\n            maxi = Math.max(maxi, N%i);\r\n        return maxi;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def maxChocolate(self, N, K):\r\n        maxi = 0; \r\n        #variable to store maximum number of chocolates that can be eaten\r\n        for i in range (1,K+1):\r\n             #iterating from 1 to K (number of days)\r\n            maxi = max(maxi, N%i);\r\n            #updating maxi to the maximum remainder obtained when dividing N by i\r\n        return maxi;\r\n        #returning the maximum number of chocolates that can be eaten on any given day",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} N\r\n * @param {number} K\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to find the maximum number of chocolates.\r\n    maxChocolate(N, K) {\r\n        let maxi = 0; \r\n        //variable to store maximum number of chocolates that can be eaten\r\n        for (let i = 1; i <= K; i++) {\r\n             //iterating from 1 to K (number of days)\r\n            maxi = Math.max(maxi, N%i);\r\n            //updating maxi to the maximum remainder obtained when dividing N by i\r\n        }\r\n        return maxi;\r\n        //returning the maximum number of chocolates that can be eaten on any given day\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}