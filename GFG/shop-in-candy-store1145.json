{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703544,
            "title": "Shop in Candy Store",
            "titleSlug": "shop-in-candy-store1145",
            "content": "<p><span style=\"font-size: 18px;\">In a candy store, there are <strong>n </strong>different types of candies available and the prices of all the N different types of candies are provided to you. You are now provided with an attractive offer.<br />For every candy you buy from the store and get <strong>K</strong> other candies ( all are different types ) for free. Now you have to answer two questions. Firstly, you have to find what is the <strong>minimum amount of money</strong> you have to spend to buy all the<strong> n </strong>different candies. Secondly, you have to find what is the <strong>maximum amount of money</strong> you have to spend to buy all the n different candies.<br />In both the cases you must utilize the offer i.e. you buy one candy and get <strong>k </strong>other candies for free.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples : <br /></span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4, k = 2, candies[] = {3 2 1 4}</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong></span><span style=\"font-size: 18px;\">3 7<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>As according to the offer if you buy one candy you can take at most two  more for free. So in the first case, you buy the candy which costs 1 and takes candies worth 3 and 4 for free, also you buy candy worth 2 as well.So <strong>min cost</strong> : 1+2 =3. In the second case, you can buy the candy which costs 4 and takes candies worth 1 and 2 for free, also you need to buy candy worth 3 as well. So <strong>max cost :</strong> 3+4 =7.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> </span><span style=\"font-size: 18px;\">n = 5, k = 4, </span><span style=\"font-size: 18px;\">candies[] = {3 2 1 4 5}</span><span style=\"font-size: 18px;\"><strong>\nOutput:</strong> </span><span style=\"font-size: 18px;\">1 5\n<strong>Explanation: </strong></span><span style=\"font-size: 18px;\">For minimimum cost buy the candy with the cost 1 and get all the other candies for free. For maximum cost buy the candy with the cost 5 and get all other candies for free.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task: </strong></span><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function <strong>candyStore()</strong>&nbsp;which takes the array candies[], its size N<strong>&nbsp;</strong>and an integer K<strong>&nbsp;</strong>as input parameters&nbsp;and returns the minimum amount and maximum amount of money to buy all candies according to the offer.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= <strong>n </strong>&lt;= 100000<br />&nbsp;0 &lt;= <strong>k</strong> &lt;= N-1<br />1 &lt;= <strong>candies[i]</strong>&nbsp;&lt;= 10000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "In a candy store, there are 'n' different types of candies, and their prices are given. You have an offer: for every candy you buy, you get 'K' other candies (of different types) for free. Determine the minimum and maximum amount of money needed to buy all 'n' candies, taking advantage of the offer.",
                "constraints": [
                    "1 <= n <= 100000",
                    "0 <= k <= N-1",
                    "1 <= candies[i] <= 10000"
                ],
                "testcases": [
                    {
                        "input": "n = 4, k = 2, candies[] = {3, 2, 1, 4}",
                        "output": "3 7",
                        "explanation": "Minimum cost: Buy candy with price 1, get candies with prices 3 and 4 for free. Buy candy with price 2. Total cost: 1 + 2 = 3. Maximum cost: Buy candy with price 4, get candies with prices 1 and 2 for free. Buy candy with price 3. Total cost: 4 + 3 = 7."
                    },
                    {
                        "input": "n = 5, k = 4, candies[] = {3, 2, 1, 4, 5}",
                        "output": "1 5",
                        "explanation": "Minimum cost: Buy candy with price 1, get all other candies for free. Total cost: 1. Maximum cost: Buy candy with price 5, get all other candies for free. Total cost: 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to sort the candies by its cost and try to think of an optimal way to buy candies such that you will get the minimum and the maximum cost of buying all the candies according to the task.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution\n{\npublic:\n    //Function to distribute candies to minimize and maximize cost.\n    vector<int> candyStore(int candies[], int N, int K)\n    {\n        //sorting the candies array in ascending order.\n        sort(candies, candies + N);\n        //calculating the number of groups that can be formed.\n        int groups = N / (K + 1);\n\n        //if there are remaining candies after forming groups,\n        //increment the number of groups by 1.\n        if (N % (K + 1) != 0)\n        {\n            groups += 1;\n        }\n\n        //calculating the minimum cost by summing up the candies\n        //in the groups formed from the starting.\n        int minCost = 0;\n        for (int i = 0; i < groups; ++i)\n        {\n            minCost += candies[i];\n        }\n\n        //calculating the maximum cost by summing up the candies\n        //in the groups formed from the end.\n        int maxCost = 0;\n        for (int i = N - 1; i >= (N - groups); --i)\n        {\n            maxCost += candies[i];\n        }\n\n        //returning the minimum and maximum cost as a vector.\n        return {minCost, maxCost};\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n\tstatic ArrayList<Integer> candyStore(int candies[],int N,int K){\n        Arrays.sort(candies); // Sort the array of candies in ascending order.\n\n        // Calculate the number of groups.\n        int groups = N / (K + 1);\n        \n        // If there are remaining candies that cannot be evenly divided into groups,\n        // add one more group.\n        if (N % (K + 1) != 0)\n        {\n            groups += 1;\n        }\n\n        int minCost = 0;\n        for (int i = 0; i < groups; ++i)\n        {\n            minCost += candies[i]; // Calculate the minimum cost by summing up the candies from the beginning.\n        }\n\n        int maxCost = 0;\n        for (int i = N - 1; i >= (N - groups); --i)\n        {\n            maxCost += candies[i]; // Calculate the maximum cost by summing up the candies from the end.\n        }\n        ArrayList<Integer> arr = new ArrayList<>();\n        arr.add(minCost); // Add the minimum cost to the array list.\n        arr.add(maxCost); // Add the maximum cost to the array list.\n        return arr;\n    \n    }\n\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\r\n    def candyStore(self, candies,N,K):\r\n        s=0  # initialize variable 's' to keep track of the sum of candies bought by the customer\r\n        t=0  # initialize variable 't' to keep track of the sum of candies bought by the retailer\r\n        candies.sort()  # sort the list of candies in ascending order\r\n        l=len(candies)  # get the length of the list of candies\r\n        i=0  # initialize variable 'i' to keep track of the index while iterating through the candies list\r\n\r\n        # loop to calculate the sum of candies bought by the customer\r\n        while(i<=l-1):\r\n            s=s+candies[i]  # add the current candy to 's'\r\n            l=l-K  # reduce the remaining number of candies after buying 'K' candies\r\n            i=i+1  # increment the index to move to the next candy\r\n\r\n        ind=0  # initialize variable 'ind' to keep track of the index while iterating through the candies list\r\n        l=len(candies)  # get the length of the list of candies\r\n        i=l-1  # set the index to the last candy in the list\r\n\r\n        # loop to calculate the sum of candies bought by the retailer\r\n        while i>=ind:\r\n            t=t+candies[i]  # add the current candy to 't'\r\n            ind=ind+K  # increase the index by 'K' to skip candies that the customer bought\r\n            i=i-1  # decrement the index to move to the previous candy\r\n\r\n        return [s,t]  # return the sums of candies bought by the customer and the retailer as a list",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}