{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712538,
            "title": "Shortest Job first",
            "titleSlug": "shortest-job-first",
            "content": "<p><span style=\"font-size: 18px;\">Geek is a software engineer. He is assigned with the task of calculating <strong>average waiting time</strong> of all the processes by following <strong>shortest job first</strong> policy.</span></p>\n<p><span style=\"font-size: 18px;\">The shortest job first (SJF) or shortest job next, is a scheduling policy that selects the waiting process with the smallest execution time to execute next.</span></p>\n<p><span style=\"font-size: 18px;\">Given an array of integers <strong>bt</strong> of size <strong>n</strong>. Array <strong>bt</strong> denotes the <strong>burst time</strong> of each process. Calculate the <strong>average waiting time</strong> of all the processes and return the&nbsp;nearest integer which is smaller or equal to the output.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> Consider all process are available at time 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 5\nbt = [4,3,7,1,2]\n<strong>Output: </strong>4\n<strong>Explanation:</strong> After sorting burst times by shortest job policy, calculated average waiting time is 4.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 4\narr = [1,2,3,4]\n<strong>Output: </strong>2\nExplanation: After sorting burst times by shortest job policy, calculated average waiting time is 2.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>solve()</strong> which takes <strong>bt</strong><strong>[]</strong>&nbsp;as input parameter&nbsp;and returns the <strong>average waiting time</strong>&nbsp;of all the processes.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlog(n))<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">1 &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array `bt` of size `n` representing the burst times of `n` processes.  Your task is to calculate the average waiting time of these processes using the Shortest Job First (SJF) scheduling algorithm. SJF selects the process with the smallest burst time to execute next.  All processes are assumed to arrive at time 0. Return the floor of the average waiting time (the largest integer less than or equal to the average waiting time).",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= bt[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 5\nbt = [4,3,7,1,2]",
                        "output": "4",
                        "explanation": "The burst times are sorted as [1, 2, 3, 4, 7]. The waiting times for each process are [0, 1, 3, 6, 10]. The average waiting time is (0 + 1 + 3 + 6 + 10) / 5 = 20 / 5 = 4."
                    },
                    {
                        "input": "n = 4\narr = [1,2,3,4]",
                        "output": "2",
                        "explanation": "The burst times are already sorted as [1, 2, 3, 4]. The waiting times for each process are [0, 1, 3, 6]. The average waiting time is (0 + 1 + 3 + 6) / 4 = 10 / 4 = 2.5. The floor of 2.5 is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    //Function to solve the problem and return the answer.\n    long long solve(vector<int>& bt) {\n        long long ans=0;\n        //sorting the vector in ascending order.\n        sort(bt.begin(),bt.end());\n        \n        int p=0;\n        int pp=0;\n        //iterating over the vector.\n        for(int i=0;i<bt.size();i++){\n            ans+=p;\n            p+=bt[i];\n        }\n        \n        //returning the average value of p.\n        return ans/bt.size();\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static int solve(int bt[] ) {\r\n        // code here\r\n        int n = bt.length; // get the length of the burst time array\r\n        int temp,total, pos; // declare variables\r\n        total=0; // initialize total to 0\r\n        int wt[]=new int[n + 1]; // create an array for waiting time\r\n        int p[]=new int[n]; // create an array for process numbers\r\n        for (int i = 0; i < n; i++) p[i] = i + 1; // initialize process numbers\r\n        \r\n        // sort the burst time array and process numbers array in non-decreasing order\r\n        for (int i = 0; i < n; i++) {\r\n            pos = i;\r\n            for (int j = i + 1; j < n; j++) {\r\n                if (bt[j] < bt[pos]) pos = j; // find the smallest burst time\r\n            }\r\n\r\n            // swap the burst time and process numbers\r\n            temp = bt[i];\r\n            bt[i] = bt[pos];\r\n            bt[pos] = temp;\r\n\r\n            temp = p[i];\r\n            p[i] = p[pos];\r\n            p[pos] = temp;\r\n        }\r\n\r\n        // calculate the waiting time\r\n        wt[0] = 0;\r\n        for (int i = 1; i < n; i++) {\r\n            wt[i] = 0;\r\n            for (int j = 0; j < i; j++) wt[i] += bt[j]; // sum up the burst time before the current process\r\n            total += wt[i]; // update the total waiting time\r\n        }\r\n\r\n        int avg_wt = total / n; // calculate the average waiting time\r\n        return avg_wt; // return the average waiting time\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def solve(self, bt):\n        ans = 0\n        # Sorting the list in ascending order.\n        bt.sort()\n        \n        p = 0\n        # Iterating over the list.\n        for i in range(len(bt)):\n            ans += p\n            p += bt[i]\n        \n        # Returning the average value of p.\n        return ans // len(bt)\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution\n{\n    //Back-end complete function Template for C#\n\n    public long solve(List<int> bt)\n    {\n        long ans = 0;\n        bt.Sort();\n        \n        int p = 0;\n        int pp = 0;\n        \n        for (int i = 0; i < bt.Count; i++)\n        {\n            ans += p;\n            p += bt[i];\n        }\n        \n        return ans / bt.Count;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to solve the given problem.\n    solve(bt) {\n        let n = bt.length;\n        let total = 0;\n\n        // Initializing waiting time list with 0s\n        let wt = new Array(n + 1).fill(0);\n\n        // Initializing process list with process numbers\n        let p = [];\n        for (let i = 0; i < n; i++) {\n            p.push(i + 1);\n        }\n\n        // Sorting burst time and process list in ascending order\n        for (let i = 0; i < n; i++) {\n            let pos = i;\n            for (let j = i + 1; j < n; j++) {\n                if (bt[j] < bt[pos]) {\n                    pos = j;\n                }\n            }\n\n            let tempBt = bt[i];\n            bt[i] = bt[pos];\n            bt[pos] = tempBt;\n\n            let tempP = p[i];\n            p[i] = p[pos];\n            p[pos] = tempP;\n        }\n\n        // Calculating waiting time and total waiting time\n        for (let i = 1; i < n; i++) {\n            for (let j = 0; j < i; j++) {\n                wt[i] += bt[j];\n            }\n            total += wt[i];\n        }\n\n        // Calculating average waiting time\n        let avg_wt = Math.floor(total / n);\n        return avg_wt;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}