{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707518,
            "title": "Shortest Path by Removing K walls",
            "titleSlug": "shortest-path-by-removing-k-walls",
            "content": "<p><span style=\"font-size:18px\">Given a 2-D binary <strong>matrix</strong> of size <strong>n*m</strong>, where 0 represents an empty space while 1 represents a wall you cannot walk through. You are also given an integer <strong>k</strong>.<br />\r\nYou can walk up, down, left, or right. Given that you can remove up to <strong>k</strong> walls, return the minimum number of steps to walk from the top left corner (0, 0) to the bottom right corner (n-1, m-1).</span><br />\r\n<span style=\"font-size:18px\"><strong>Note: </strong>If there is no way to walk from the top left corner to the bottom right corner, return -1.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 3, m = 3, k = 1\r\nmat = {{0, 0, 0},\r\n\\t {0, 0, 1},\r\n\\t {0, 1, 0}}\r\n<strong>Output:\r\n</strong>4<strong>\r\nExplanation:\r\n</strong>We can remove any one of the walls and\r\nreach the bottom in 4 moves. </span> \r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>n = 2, m = 2, k = 0\r\nmat[] = {{0, 1},\r\n\\t   {1, 0}}\r\n<strong>Output:\r\n</strong>-1<strong>\r\nExplanation:\r\n</strong>There&#39;s no way of reaching the bottom\r\ncorner without removing any walls.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThe task is to complete the function <strong>shotestPath</strong>() which takes three integers n, m, and k and also a matrix of size n*m as input and returns the minimum number of steps to walk from the top left corner to the bottom right corner.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n,m &le; 50<br />\r\n0 &le; k &le; n*m<br />\r\nTop left and bottom right corners doesn&#39;t have 1</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n*m*k).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(n*m*k).</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D binary matrix of size n*m, where 0 represents an empty space and 1 represents a wall. You are also given an integer k, representing the maximum number of walls you can remove.  You can move up, down, left, or right. Find the minimum number of steps to walk from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). If no path exists, return -1.",
                "constraints": [
                    "1 <= n,m <= 50",
                    "0 <= k <= n*m",
                    "Top left and bottom right corners don't have 1"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3, k = 1\nmat = {{0, 0, 0},\n\t {0, 0, 1},\n\t {0, 1, 0}}",
                        "output": "4",
                        "explanation": "The shortest path can be achieved by removing one wall and traversing through the matrix. For example, removing the wall at mat[1][2] or mat[2][1] allows a path of length 4 to reach the destination."
                    },
                    {
                        "input": "n = 2, m = 2, k = 0\nmat = {{0, 1},\n\t   {1, 0}}",
                        "output": "-1",
                        "explanation": "Without removing any walls (k=0), there's no path to reach the bottom-right corner from the top-left corner."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The path with least walls (if exists) might not be the shortest.</p>",
            "<p>Use BFS to find the Shortest Path.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int shotestPath(vector<vector<int>> mat, int n, int m, int k) {\r\n        queue<vector<int>> q;  //[i, j]\r\n        vector<vector<int>> obstacles(n, vector<int>(m, INT_MAX));\r\n        const vector<vector<int>> dirs = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\r\n    \r\n        obstacles[0][0] = mat[0][0];\r\n        q.push({0, 0});\r\n        int steps = 0;\r\n        while (!q.empty()) {\r\n            for (int l = q.size(); l > 0; --l)\r\n            {\r\n                vector<int> pair = q.front();\r\n                int i = pair[0], j = pair[1];\r\n                q.pop();\r\n                if (i == n - 1 and j == m - 1)\r\n                    return steps;\r\n                for (const auto& dir : dirs)\r\n                {\r\n                    const int x = i + dir[0];\r\n                    const int y = j + dir[1];\r\n                    if (x < 0 or y < 0 or x >= n or y >= m)\r\n                        continue;  // if new coordinates are invalid\r\n                    if (mat[x][y] + obstacles[i][j] > k)\r\n                        continue;  // we can only remove k walls, so skip\r\n                    if (obstacles[x][y] <= mat[x][y] + obstacles[i][j])\r\n                        continue;  // we already visited this cell(with shortest path ofc), we don't\r\n                                   // want to visit it again with more obstacles on our way\r\n                    obstacles[x][y] = mat[x][y] + obstacles[i][j];\r\n                    q.push({x, y});\r\n                }\r\n            }\r\n            steps += 1;\r\n        }\r\n    \r\n        return -1;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    class Node{\n        int r,c,k,dist;\n        Node(int r, int c, int k, int dist){this.r=r; this.c=c; this.k=k; this.dist=dist; }\n    }\n    int shotestPath(int[][] grid, int m, int n, int k) {\n        // declare an array to represent the available directions: up, right, down, left\n        int directions[] = {0,1,0,-1,0};\n        // initialize a queue data structure to perform breadth-first search\n        Queue<Node> q = new LinkedList<>();\n        // initialize a 3D boolean array to keep track of visited nodes\n        boolean vis[][][] = new boolean[m][n][k+1];\n        // mark the starting node as visited\n        vis[0][0][0] = true;\n        // add the starting node to the queue\n        q.add(new Node(0,0,0,0));\n        // perform breadth-first search\n        while(!q.isEmpty()){\n            // remove the first node from the queue\n            Node front = q.poll();\n            // check if the current node is the destination node\n            if(front.r == m-1 && front.c == n-1) return front.dist;\n            // iterate through the available directions\n            for(int dir = 0; dir < 4; ++dir){\n                // calculate the new coordinates based on the current direction\n                int newr = front.r + directions[dir], newc = front.c + directions[dir+1];\n                // check if the new coordinates are within the grid boundaries\n                if(newr >= 0 && newr < m && newc >= 0 && newc < n){\n                    // calculate the new remaining power value after moving to the new coordinates\n                    int newk = front.k + grid[newr][newc];\n                    // check if the new remaining power is within the allowed range and the node hasn't been visited before\n                    if(newk <= k && !vis[newr][newc][newk]){\n                        // mark the new node as visited\n                        vis[newr][newc][newk] = true;\n                        // add the new node to the queue with an updated distance value\n                        q.add(new Node(newr, newc, newk, front.dist+1));\n                    }\n                }\n            }\n        }\n        // return -1 if there is no valid path to the destination node\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from collections import deque \nimport math\n\nclass Solution:\n\n    # Function to check if the next position is safe to move.\n    def isSafe(self, r, c, R, C, vis, key):\n        return (r >= 0) and (r < R) and (c >=0 ) and (c < C) and (not key in vis)\n\n    # Function to find the shortest path.\n    def shotestPath(self, grid, n, m, k):\n        if len(grid) == len(grid[0]) == 1:\n            return 0\n\n        start = (0, 0, grid[0][0], 0) # R, C, obstacles, turn\n\n        visited = {}\n        q = deque((start,))\n\n        while q:\n            r, c, ct, turn = q.popleft()\n            nxt = [\n                (r,c-1),\n                (r-1,c),\n                (r+1,c),\n                (r,c+1),\n            ]\n            for r2, c2 in nxt: \n                if 0 <= r2 < n and 0 <= c2 < m:\n                    ct2 = ct + grid[r2][c2]\n                    \n                    nn = (r2, c2, ct2, turn+1)\n                    \n                    if ct2 <= k and (r2, c2) == (n-1,m-1):\n                        return turn+1\n                    \n                    kk = (r2,c2)\n                    \n                    # Don't explore a path we already reached with fewer obstacles\n                    if ct2 <= k and visited.get(kk, math.inf) > ct2:\n                        visited[kk] = ct2\n                        q.append(nn)\n        \n        return -1",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass Solution {\n    // Function to find the shortest path in the matrix with given constraints.\n    shortestPath(mat, n, m, k) {\n        if (n === 1 && m === 1) return 0;\n\n        let visited = new Map();\n        let queue = [[0, 0, mat[0][0], 0]]; // r, c, obstacles, steps\n\n        // Directions Right, Down, Left, Up\n        let directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n\n        while (queue.length > 0) {\n            let [r, c, obstacles, steps] = queue.shift();\n\n            for (let [dr, dc] of directions) {\n                let nr = r + dr;\n                let nc = c + dc;\n                \n                if (nr < 0 || nr >= n || nc < 0 || nc >= m) continue;\n\n                let nextObstacles = obstacles + mat[nr][nc];\n                \n                if (nextObstacles <= k) {\n                    if (nr === n - 1 && nc === m - 1) return steps + 1;\n\n                    let key = nr * m + nc;\n\n                    if (!visited.has(key) || visited.get(key) > nextObstacles) {\n                        visited.set(key, nextObstacles);\n                        queue.push([nr, nc, nextObstacles, steps + 1]);\n                    }\n                }\n            }\n        }\n\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}