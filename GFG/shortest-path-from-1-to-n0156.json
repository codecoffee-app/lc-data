{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704041,
            "title": "Shortest path from 1 to n",
            "titleSlug": "shortest-path-from-1-to-n0156",
            "content": "<p><span style=\"font-size: 18px;\">Consider a <strong>directed graph </strong>whose vertices are numbered from <strong>1</strong> <strong>to n</strong>. There is an edge from a vertex <strong>i</strong> to a vertex <strong>j</strong> if and only if either <strong>j = i + 1 or j = 3 * i</strong>. The task is to find the <strong>minimum </strong>number of edges in a path from vertex <strong>1</strong> to vertex <strong>n</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 9\n<strong>Output: </strong>2\n<strong>Explanation</strong>: Many paths are possible from 1 to 9. Shortest one possible is, 1 -&gt; 3 -&gt; 9, of length 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 4\n<strong>Output: </strong>2\n<strong>Explanation</strong>: Possible paths from 1 to 4 are, 1 -&gt; 2 -&gt; 3 -&gt; 4 and 1 -&gt; 3 -&gt; 4. Second path of length 2 is the shortest.<br /></span></pre>\n<pre><span><strong>Input</strong>: n = 15\n<strong>Output: </strong>4</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with vertices numbered from 1 to n, there exists a directed edge from vertex i to vertex j if and only if j = i + 1 or j = 3 * i.  Determine the minimum number of edges required to form a path from vertex 1 to vertex n.",
                "constraints": [
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "9",
                        "output": "2",
                        "explanation": "The shortest path from 1 to 9 is 1 -> 3 -> 9, which consists of 2 edges."
                    },
                    {
                        "input": "4",
                        "output": "2",
                        "explanation": "The shortest path from 1 to 4 is 1 -> 3 -> 4, which consists of 2 edges."
                    },
                    {
                        "input": "15",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Since the task is to minimize number of edges, we would prefer to follow 3*i. &nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "morgan-stanley",
            "accolite",
            "samsung",
            "synopsys",
            "cisco"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{   \npublic:\n    //Function to find the minimum steps required to reach 1 from n.\n    int minimumStep(int n){\n        int ans = 0;\n        //loop until n is greater than 1.\n        while(n > 1){\n            //if n is divisible by 3, reduce n to one-third its value and increment ans.\n            if(n % 3 == 0){\n                ans++;\n                n /= 3;\n            }\n            //if n is not divisible by 3, reduce n by 1 and increment ans.\n            else{\n                n--;\n                ans++;\n            }\n        }\n        //return the minimum steps required to reach 1 from n.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    public int minStep(int n)\r\n    {\r\n        int ans = 0;\r\n        //loop until n is greater than 1.\r\n        while(n > 1){\r\n            //if n is divisible by 3, reduce n to one-third its value and increment ans.\r\n            if(n % 3 == 0){\r\n                ans++;\r\n                n /= 3;\r\n            }\r\n            //if n is not divisible by 3, reduce n by 1 and increment ans.\r\n            else{\r\n                n--;\r\n                ans++;\r\n            }\r\n        }\r\n        //return the minimum steps required to reach 1 from n.\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "\r\nclass Solution:\r\n    def minimumStep (self, n):\r\n\r\n        #initialize answer\r\n        ans = 0\r\n\r\n        #loop until n is greater than 1\r\n        while(n > 1):\r\n\r\n            #check if n is divisible by 3\r\n            if(n%3 == 0):\r\n\r\n                #increment answer and update n\r\n                ans = ans + 1\r\n                n = n//3\r\n\r\n            #if not divisible by 3, subtract 1 from n\r\n            else:\r\n                ans = ans + 1\r\n                n = n - 1\r\n\r\n        #return the answer\r\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass Solution {\n\n    minimumStep(n){\n        let ans = 0;\n        while(n > 1){\n            if(n % 3 == 0){\n                ans++;\n                n /= 3;\n            }else{\n                n--;\n                ans++;\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}