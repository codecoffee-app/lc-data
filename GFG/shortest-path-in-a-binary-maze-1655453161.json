{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711088,
            "title": "Shortest Distance in a Binary Maze",
            "titleSlug": "shortest-path-in-a-binary-maze-1655453161",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>n * m</strong>&nbsp;matrix <strong>grid</strong> where each element can either be <strong>0</strong> or <strong>1</strong>. You&nbsp;need to find the shortest distance&nbsp;between a given source cell to a destination cell. The path can only be created out of a cell if its value is 1.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\">If the path is not possible between source cell and destination cell, then return <strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note :&nbsp;</strong>You can move into an adjacent cell if that adjacent cell is filled with element 1. Two cells are adjacent if they share a side. In other words, you can move in one of the four directions, Up, Down, Left and Right. The source and destination cell are based on the zero based indexing. The destination cell should be 1.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">grid[][] = {{1, 1, 1, 1},\n\\t\\t{1, 1, 0, 1},\n\\t\\t{1, 1, 1, 1},\n\\t\\t{1, 1, 0, 0},\n\\t\\t{1, 0, 0, 1}}</span>\n<span style=\"font-size: 18px;\">source = {0, 1}</span>\n<span style=\"font-size: 18px;\">destination = {2, 2}</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">1 <strong>1</strong> 1 1\n1 <strong>1</strong> 0 1\n1 <strong>1</strong> <strong>1</strong> 1\n1 1 0 0\n1 0 0 1\nThe highlighted part in the matrix denotes the \nshortest path from source to destination cell.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">grid[][] = {{1, 1, 1, 1, 1},\n\\t\\t{1, 1, 1, 1, 1},\n\\t\\t{1, 1, 1, 1, 0},\n\\t\\t{1, 0, 1, 0, 1}}</span>\n<span style=\"font-size: 18px;\">source = {0, 0}</span>\n<span style=\"font-size: 18px;\">destination = {3, 4}</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">-1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">The path is not possible between source and</span>&nbsp;\n<span style=\"font-size: 18px;\">destination, hence return -1.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Your Task:</span></strong></p>\n<p><span style=\"font-size: 18px;\">You don't need to read or print anything. Your task is to complete the function <strong>shortestPath()&nbsp;</strong>which takes the a 2D integer array&nbsp;<strong>grid</strong>, <strong>source</strong> cell and <strong>destination</strong> cell&nbsp;as an input parameters and returns the shortest distance between source and destination cell.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n * m)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(n * m)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">1 &le; n, m &le; 500</span></li>\n<li><span style=\"font-size: 18px;\">grid[i][j] == 0 or grid[i][j] == 1</span></li>\n<li><span style=\"font-size: 18px;\">The source and destination cells are always inside the given matrix.</span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">Use BFS</span></p>",
            "<p><span style=\"font-size:14px\"><strong>Approach:</strong></span></p>\n\n<ol>\n\t<li><span style=\"font-size:14px\">We start from the source cell and calls BFS procedure.</span></li>\n\t<li><span style=\"font-size:14px\">We maintain a queue to store the coordinates of the matrix and initialize it with the source cell.</span></li>\n\t<li><span style=\"font-size:14px\">We also maintain a Boolean array visited of same size as our input matrix and initialize all its elements to false.</span>\n\t<ol>\n\t\t<li><span style=\"font-size:14px\">We LOOP till queue is not empty</span></li>\n\t\t<li><span style=\"font-size:14px\">Dequeue front cell from the queue</span></li>\n\t\t<li><span style=\"font-size:14px\">Return if the destination coordinates have reached.</span></li>\n\t\t<li><span style=\"font-size:14px\">For each of its four adjacent cells, if the value is 1 and they are not visited yet, we enqueue it in the queue and also mark them as visited.</span></li>\n\t</ol>\n\t</li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to check if given cell is valid or not.\n    bool isValid(int x, int y, int n, int m) {\n        // Check if cell is within the grid boundaries.\n        return x >= 0 and x < n and y >= 0 and y < m;\n    }\n\n    // Function to find the shortest path from source to destination.\n    int shortestPath(vector<vector<int>> &grid, pair<int, int> source,\n                     pair<int, int> destination) {\n        int n = grid.size();\n        int m = grid[0].size();\n\n        // Initialize distance matrix with maximum integer value.\n        vector<vector<int>> dist(n, vector<int>(m, INT_MAX));\n\n        // Define possible moves in x and y direction.\n        int dx[] = {1, -1, 0, 0};\n        int dy[] = {0, 0, 1, -1};\n\n        // Create a queue to perform BFS traversal.\n        queue<pair<int, int>> q;\n\n        // Push the source cell into the queue and set its distance as 0.\n        q.push(source);\n        dist[source.first][source.second] = 0;\n\n        // Perform BFS to find the shortest path.\n        while (!q.empty()) {\n            // Take the front cell from the queue.\n            pair<int, int> currentCell = q.front();\n            q.pop();\n\n            int currentX = currentCell.first;\n            int currentY = currentCell.second;\n\n            // If the current cell is equal to the destination cell, return its distance.\n            if (currentCell == destination) {\n                return dist[currentX][currentY];\n            }\n\n            // Explore the neighboring cells.\n            for (int i = 0; i < 4; i++) {\n                int nextX = currentX + dx[i];\n                int nextY = currentY + dy[i];\n\n                // Check if the neighboring cell is valid, has non-zero value,\n                // and has not been visited before.\n                if (isValid(nextX, nextY, n, m) && grid[nextX][nextY] &&\n                    dist[nextX][nextY] == INT_MAX) {\n                    // Push the neighboring cell into the queue and update its distance.\n                    q.push({nextX, nextY});\n                    dist[nextX][nextY] = dist[currentX][currentY] + 1;\n                }\n            }\n        }\n\n        // If no path is found, return -1.\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n\r\n    // Function to check if given coordinates are within valid range\r\n    boolean isValid(int x, int y, int n, int m) {\r\n        return x >= 0 && x < n && y >= 0 && y < m;\r\n    }\r\n\r\n    // Function to find the shortest path from source to destination in a grid\r\n    int shortestPath(int[][] grid, int[] source, int[] destination) {\r\n        int n = grid.length;\r\n        int m = grid[0].length;\r\n\r\n        int[][] dist = new int[n][m];\r\n\r\n        // Initializing the dist array with maximum values\r\n        for (int i = 0; i < n; i++) {\r\n            Arrays.fill(dist[i], Integer.MAX_VALUE);\r\n        }\r\n\r\n        // Arrays to store possible moves in x and y direction\r\n        int dx[] = {1, -1, 0, 0};\r\n        int dy[] = {0, 0, 1, -1};\r\n\r\n        // Queue to store the visited cells\r\n        Queue<int[]> q = new LinkedList<>();\r\n\r\n        // Adding the source cell to the queue and setting its distance to 0\r\n        q.add(source);\r\n        dist[source[0]][source[1]] = 0;\r\n\r\n        // Performing BFS on the grid\r\n        while (!q.isEmpty()) {\r\n            int[] currentCell = q.poll();\r\n\r\n            int currentX = currentCell[0];\r\n            int currentY = currentCell[1];\r\n\r\n            // Checking if the current cell is the destination cell and returning its distance\r\n            if (currentCell[0] == destination[0] &&\r\n                currentCell[1] == destination[1]) {\r\n                return dist[currentX][currentY];\r\n            }\r\n\r\n            // Exploring all possible neighbors of the current cell\r\n            for (int i = 0; i < 4; i++) {\r\n                int nextX = currentX + dx[i];\r\n                int nextY = currentY + dy[i];\r\n\r\n                // Checking if the neighbor is a valid cell and not visited\r\n                if (isValid(nextX, nextY, n, m) && grid[nextX][nextY]==1 &&\r\n                    dist[nextX][nextY] == Integer.MAX_VALUE) {\r\n                    q.add(new int[]{nextX, nextY});\r\n                    dist[nextX][nextY] = dist[currentX][currentY] + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        // If no valid path is found, return -1\r\n        return -1;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nfrom typing import List\r\n\r\n# Function to check if given coordinates are valid in the grid\r\ndef isValid(x, y, n, m):\r\n    return x >= 0 and x < n and y >= 0 and y < m\r\n\r\nclass Solution:\r\n    \r\n    # Function to find the shortest path in the grid\r\n    def shortestPath(self, grid: List[List[int]], source: List[int], destination: List[int]) -> int:\r\n        n = len(grid)\r\n        m = len(grid[0])\r\n        dist = [[int(1e9)] * m for i in range(n)]  # Initializing distance matrix with large values\r\n        dx = [1, -1, 0, 0]  # Possible x coordinate changes\r\n        dy = [0, 0, 1, -1]  # Possible y coordinate changes\r\n        queue = []\r\n\r\n        queue.append(source)  # Adding source to the queue\r\n        dist[source[0]][source[1]] = 0  # Setting distance to source as 0\r\n      \r\n        while queue:\r\n            currentCell = queue.pop(0)  # Removing the first element from the queue (BFS)\r\n            currentX = currentCell[0]  # Current x coordinate\r\n            currentY = currentCell[1]  # Current y coordinate\r\n            if currentX == destination[0] and currentY == destination[1]:  # If the current cell is the destination\r\n                return dist[currentX][currentY]  # Return the shortest distance\r\n            for i in range(4):\r\n                nextX = currentX + dx[i]  # Calculate the next x coordinate\r\n                nextY = currentY + dy[i]  # Calculate the next y coordinate\r\n                # Checking if the next cell is valid, an obstacle (1), and unvisited\r\n                if isValid(nextX, nextY, n, m) and grid[nextX][nextY] == 1 and dist[nextX][nextY] == int(1e9):\r\n                    queue.append([nextX, nextY])  # Add the next cell to the queue\r\n                    dist[nextX][nextY] = 1 + dist[currentX][currentY]  # Update the distance to the next cell\r\n\r\n        return -1  # If no path is found, return -1",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Function to check if given cell is valid or not.\n    bool IsValid(int x, int y, int n, int m)\n    {\n        // Check if cell is within the grid boundaries.\n        return x >= 0 && x < n && y >= 0 && y < m;\n    }\n\n    // Function to find the shortest path from source to destination.\n    public int shortestPath(int[][] grid, Tuple<int, int> source, Tuple<int, int> destination)\n    {\n        int n = grid.Length;\n        int m = grid[0].Length;\n\n        // Initialize distance matrix with maximum integer value.\n        int[][] dist = new int[n][];\n        for (int i = 0; i < n; i++)\n        {\n            dist[i] = new int[m];\n            for (int j = 0; j < m; j++)\n            {\n                dist[i][j] = int.MaxValue;\n            }\n        }\n\n        // Define possible moves in x and y direction.\n        int[] dx = {1, -1, 0, 0};\n        int[] dy = {0, 0, 1, -1};\n\n        // Create a queue to perform BFS traversal.\n        Queue<Tuple<int, int>> q = new Queue<Tuple<int, int>>();\n\n        // Push the source cell into the queue and set its distance as 0.\n        q.Enqueue(source);\n        dist[source.Item1][source.Item2] = 0;\n\n        // Perform BFS to find the shortest path.\n        while (q.Count > 0)\n        {\n            // Take the front cell from the queue.\n            Tuple<int, int> currentCell = q.Dequeue();\n\n            int currentX = currentCell.Item1;\n            int currentY = currentCell.Item2;\n\n            // If the current cell is equal to the destination cell, return its distance.\n            if (currentCell.Equals(destination))\n            {\n                return dist[currentX][currentY];\n            }\n\n            // Explore the neighboring cells.\n            for (int i = 0; i < 4; i++)\n            {\n                int nextX = currentX + dx[i];\n                int nextY = currentY + dy[i];\n\n                // Check if the neighboring cell is valid, has non-zero value,\n                // and has not been visited before.\n                if (IsValid(nextX, nextY, n, m) && grid[nextX][nextY] != 0 &&\n                    dist[nextX][nextY] == int.MaxValue)\n                {\n                    // Push the neighboring cell into the queue and update its distance.\n                    q.Enqueue(Tuple.Create(nextX, nextY));\n                    dist[nextX][nextY] = dist[currentX][currentY] + 1;\n                }\n            }\n        }\n\n        // If no path is found, return -1.\n        return -1;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    shortestPath(grid, source, destination) {\n        const isValid = (x, y, n, m) => {\n            return x >= 0 && x < n && y >= 0 && y < m;\n        };\n\n        const n = grid.length;\n        const m = grid[0].length;\n        const dist = new Array(n).fill().map(() => new Array(m).fill(Infinity));\n        const dx = [1, -1, 0, 0];\n        const dy = [0, 0, 1, -1];\n        const queue = [];\n\n        queue.push(source);\n        dist[source[0]][source[1]] = 0;\n\n        while (queue.length > 0) {\n            const currentCell = queue.shift();\n            const currentX = currentCell[0];\n            const currentY = currentCell[1];\n\n            if (currentX === destination[0] && currentY === destination[1]) {\n                return dist[currentX][currentY];\n            }\n\n            for (let i = 0; i < 4; i++) {\n                const nextX = currentX + dx[i];\n                const nextY = currentY + dy[i];\n\n                if (isValid(nextX, nextY, n, m) && grid[nextX][nextY] === 1 && dist[nextX][nextY] === Infinity) {\n                    queue.push([nextX, nextY]);\n                    dist[nextX][nextY] = 1 + dist[currentX][currentY];\n                }\n            }\n        }\n\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}