{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711976,
            "title": "Shortest Path in Undirected",
            "titleSlug": "shortest-path-in-undirected-graph-having-unit-distance",
            "content": "<p><span style=\"font-size: 18px;\">You are given an adjacency list, <strong>adj&nbsp;</strong>of <strong>Undirected Graph</strong> having <strong>unit weight </strong>of the edges, find the shortest path<strong> </strong>from<strong> src </strong>to all the vertex and if it is <strong>unreachable</strong> to reach any vertex, then return<strong> -1</strong> for that vertex.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>adj[][] = [[1, 3], [0, 2], [1, 6], [0, 4], [3, 5], [4, 6], [2, 5, 7, 8], [6, 8], [7, 6]], src=0\n<strong>Output: </strong>[0, 1, 2, 1, 2, 3, 3, 4, 4]<br /></span><img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18px;\" src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/711976/Web/Other/blobid1_1712813311.png\" alt=\"\" width=\"236\" height=\"251\" />\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>adj[][]= [[3], [3], [], [0, 1]], src=3\n<strong>Output: </strong>[1, 1, -1, 0]<br /></span><img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/711976/Web/Other/blobid3_1712814761.png\" alt=\"\" /></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>adj[][]= [[], [], [], [4], [3], [], []], src=1\n<strong>Output: </strong>[-1, 0, -1, -1, -1, -1, -1] </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraint:</strong><br />1&lt;=adj.size()&lt;=10<sup>4</sup><br />0&lt;=edges&lt;=</span><span style=\"font-size: 18px;\">adj.size()</span><span style=\"font-size: 18px;\">-1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an adjacency list `adj` representing an undirected graph with unit edge weights, find the shortest path from a source vertex `src` to all other vertices in the graph. If a vertex is unreachable from `src`, return -1 for that vertex.",
                "constraints": [
                    "1 <= adj.size() <= 10^4",
                    "0 <= edges <= adj.size() - 1"
                ],
                "testcases": [
                    {
                        "input": "adj = [[1, 3], [0, 2], [1, 6], [0, 4], [3, 5], [4, 6], [2, 5, 7, 8], [6, 8], [7, 6]], src = 0",
                        "output": "[0, 1, 2, 1, 2, 3, 3, 4, 4]",
                        "explanation": null
                    },
                    {
                        "input": "adj = [[3], [3], [], [0, 1]], src = 3",
                        "output": "[1, 1, -1, 0]",
                        "explanation": null
                    },
                    {
                        "input": "adj = [[], [], [], [4], [3], [], []], src = 1",
                        "output": "[-1, 0, -1, -1, -1, -1, -1]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use <strong>Breadth-First Search (BFS)</strong> to compute the shortest paths in an unweighted graph, updating distances as you traverse each level.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the shortest path from source to all other nodes\n    vector<int> shortestPath(vector<vector<int>>& adj, int src) {\n        int V = adj.size(); // Number of vertices\n        vector<int> dist(V,\n                         INT_MAX); // Initializing distance array with maximum distance\n\n        queue<int> q; // Creating a queue for BFS\n\n        dist[src] = 0; // Distance of source node from itself is 0\n        q.push(src);   // Adding source node to queue\n\n        // Performing BFS to find shortest path\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (auto it : adj[node]) {\n                // If the distance of current node + 1 is less than the current distance\n                // of adjacent node, then updating distance and adding adjacent node to\n                // queue\n                if (dist[node] + 1 < dist[it]) {\n                    dist[it] = dist[node] + 1;\n                    q.push(it);\n                }\n            }\n        }\n\n        // Converting INT_MAX to -1 for nodes that are not reachable from the source\n        for (int i = 0; i < V; ++i) {\n            if (dist[i] == INT_MAX)\n                dist[i] = -1;\n        }\n\n        return dist;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to find the shortest path from a source node to all other nodes\n    public int[] shortestPath(ArrayList<ArrayList<Integer>> adj, int src) {\n        int V = adj.size(); // Number of vertices\n        // Array to store the shortest distance from the source to each node\n        int[] dist = new int[V];\n        Arrays.fill(\n            dist, Integer.MAX_VALUE); // Initializing distance array with maximum value\n\n        Queue<Integer> q = new LinkedList<>(); // Queue for BFS\n        dist[src] = 0; // Distance of the source node to itself is 0\n        q.add(src);    // Add the source node to the queue\n\n        // Perform BFS\n        while (!q.isEmpty()) {\n            int node = q.poll();\n\n            for (int neighbor : adj.get(node)) {\n                if (dist[node] + 1 < dist[neighbor]) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.add(neighbor);\n                }\n            }\n        }\n\n        // Convert unreachable distances (Integer.MAX_VALUE) to -1\n        for (int i = 0; i < V; i++) {\n            if (dist[i] == Integer.MAX_VALUE) {\n                dist[i] = -1;\n            }\n        }\n\n        return dist;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def shortestPath(self, adj, src):\n        V = len(adj)  # Number of vertices\n        dist = [float('inf')] * V  # Initialize distances with infinity\n\n        # BFS initialization\n        queue = deque([src])\n        dist[src] = 0  # Distance to the source is 0\n\n        while queue:\n            node = queue.popleft()\n\n            for neighbor in adj[node]:\n                if dist[node] + 1 < dist[neighbor]:\n                    dist[neighbor] = dist[node] + 1\n                    queue.append(neighbor)\n\n        # Convert unreachable nodes' distance from infinity to -1\n        for i in range(V):\n            if dist[i] == float('inf'):\n                dist[i] = -1\n\n        return dist\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    shortestPath(adj, src) {\n        const V = adj.length;                 // Number of vertices\n        const dist = Array(V).fill(Infinity); // Initialize distances with Infinity\n\n        const queue = []; // Queue for BFS\n        dist[src] = 0;    // Distance to the source is 0\n        queue.push(src);  // Add the source node to the queue\n\n        // Perform BFS\n        while (queue.length > 0) {\n            const node = queue.shift();\n\n            for (const neighbor of adj[node]) {\n                if (dist[node] + 1 < dist[neighbor]) {\n                    dist[neighbor] = dist[node] + 1;\n                    queue.push(neighbor);\n                }\n            }\n        }\n\n        // Convert Infinity to -1 for unreachable nodes\n        for (let i = 0; i < V; i++) {\n            if (dist[i] === Infinity) {\n                dist[i] = -1;\n            }\n        }\n\n        return dist;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}