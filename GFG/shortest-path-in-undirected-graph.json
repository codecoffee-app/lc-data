{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712030,
            "title": "Shortest path in Directed Acyclic Graph",
            "titleSlug": "shortest-path-in-undirected-graph",
            "content": "<p><span style=\"font-size: 18px;\">Given a Directed Acyclic Graph of V vertices from 0 to n-1 and a 2D Integer array(or vector) edges[ ][ ] of length E, where there is a directed edge from edge[i][0] to edge[i][1] with a distance of edge[i][2] for all i.</span></p>\n<p><span style=\"font-size: 18px;\">Find the <strong>shortest</strong> path from <strong>src(0) </strong>vertex&nbsp;to all the vertices&nbsp;and if it is impossible to reach any vertex, then return&nbsp;<strong>-1</strong> for that vertex.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :<br /></span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>V = 4, E = 2, edges = [[0,1,2], [0,2,1]]\n<strong>Output: </strong>[0, 2, 1, -1]<br /></span><strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">Shortest path from 0 to 1 is 0-&gt;1 with edge weight 2.</span><span style=\"font-size: 18px;\"> Shortest path from 0 to 2 is 0-&gt;2 with edge weight 1. There is no way we can reach 3, so it's -1 for 3.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>V = 6, E = 7, edges = [[0,1,2], [0,4,1], [4,5,4], [4,2,2], [1,2,3], [2,3,6], [5,3,1]]\n<strong>Output: </strong>[0, 2, 3, 6, 1, 5]<br /></span><strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">Shortest path from 0 to 1 is 0-&gt;1 with edge weight 2.</span><span style=\"font-size: 18px;\"> Shortest path from 0 to 2 is 0-&gt;4-&gt;2 with edge weight 1+2=3. Shortest path from 0 to 3 is 0-&gt;4-&gt;5-&gt;3 with edge weight 1+4+1=6. Shortest path from 0 to 4 is 0-&gt;4 with edge weight 1.Shortest path from 0 to 5 is 0-&gt;4-&gt;5 with edge weight 1+4=5.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraint:<br /></strong></span><span style=\"font-size: 18px;\">1 &lt;= V &lt;= 100<br />1 &lt;= E &lt;= min((N*(N-1))/2,4000)<br /></span><span style=\"font-size: 18px;\">0 &lt;= edges<sub>i,0</sub>, edges<sub>i,1</sub>&nbsp;&lt;&nbsp;n<br />0 &lt;=&nbsp;</span><span style=\"font-size: 18px;\">edge</span><sub>i,2</sub><span style=\"font-size: 18px;\">&nbsp;&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Directed Acyclic Graph (DAG) with V vertices (numbered 0 to V-1) and a list of directed edges, find the shortest path from the source vertex (0) to all other vertices in the graph.  Each edge has a weight representing its distance. If a vertex is unreachable from the source, return -1 for that vertex.",
                "constraints": [
                    "1 <= V <= 100",
                    "1 <= E <= min((V*(V-1))/2, 4000)",
                    "0 <= edges[i][0], edges[i][1] < V",
                    "0 <= edges[i][2] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "V = 4, E = 2, edges = [[0,1,2], [0,2,1]]",
                        "output": "[0, 2, 1, -1]",
                        "explanation": "The shortest path from vertex 0 to vertex 1 has a weight of 2 (0 -> 1). The shortest path from vertex 0 to vertex 2 has a weight of 1 (0 -> 2). Vertex 3 is unreachable from vertex 0, so the distance is -1."
                    },
                    {
                        "input": "V = 6, E = 7, edges = [[0,1,2], [0,4,1], [4,5,4], [4,2,2], [1,2,3], [2,3,6], [5,3,1]]",
                        "output": "[0, 2, 3, 6, 1, 5]",
                        "explanation": "The shortest paths from vertex 0 to vertices 1, 2, 3, 4, and 5 have weights 2, 3, 6, 1, and 5 respectively.  The paths are: 0->1 (2), 0->4->2 (3), 0->4->5->3 (6), 0->4 (1), 0->4->5 (5)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Perform a topological sorting of the DAG and use dynamic programming to compute the shortest path from the source vertex to all other vertices.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to find topological sort of the graph\n    void findTopoSort(int node, int vis[], stack<int>& st,\n                      vector<pair<int, int>> adj[]) {\n        vis[node] = 1;\n        for (auto it : adj[node]) {\n            if (!vis[it.first]) {\n                findTopoSort(it.first, vis, st, adj);\n            }\n        }\n        st.push(node);\n    }\n\n    // Function to find the shortest path from source node to all other nodes\n    vector<int> shortestPath(int V, int E, vector<vector<int>>& edges) {\n        vector<pair<int, int>> adj[V]; // adjacency list to store the graph\n        int src = 0;                   // source node\n\n        // Adding edges to the adjacency list\n        for (int i = 0; i < E; i++) {\n            adj[edges[i][0]].push_back({edges[i][1], edges[i][2]});\n        }\n\n        int vis[V] = {0}; // array to track visited nodes\n        stack<int> st;    // stack to store nodes in topological order\n\n        // Finding topological sort of the graph\n        for (int i = 0; i < V; i++) {\n            if (!vis[i])\n                findTopoSort(i, vis, st, adj);\n        }\n\n        vector<int> dist(\n            V, 1e9);   // vector to store the distance from source node to each node\n        dist[src] = 0; // distance to source node is 0\n\n        while (!st.empty()) {\n            int node = st.top();\n            st.pop();\n\n            // Updating the distance to the adjacent nodes if a shorter path is found\n            if (dist[node] != 1e9) {\n                for (auto it : adj[node]) {\n                    if (dist[node] + it.second < dist[it.first]) {\n                        dist[it.first] = dist[node] + it.second;\n                    }\n                }\n            }\n        }\n\n        // Converting unreachable nodes to -1\n        for (int i = 0; i < dist.size(); ++i) {\n            if (dist[i] == 1e9)\n                dist[i] = -1;\n        }\n\n        // Returning the shortest path array\n        return dist;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Pair class to represent vertex and weight\n    class Pair {\n        int v;\n        int w;\n\n        Pair(int v, int w) {\n            this.v = v;\n            this.w = w;\n        }\n    }\n\n    // Dijkstra's algorithm to find shortest paths from source vertex\n    int[] dijkstra(ArrayList<Pair> adj[], int n) {\n        // Priority queue to store vertices with minimum weight\n        PriorityQueue<Pair> pq = new PriorityQueue<>(new Comparator<Pair>() {\n            public int compare(Pair p1, Pair p2) {\n                if ((p1.w - p2.w) > 0)\n                    return 1;\n                else if ((p1.w - p2.w) < 0)\n                    return -1;\n                else\n                    return 0;\n            }\n        });\n\n        // Adding source vertex to the priority queue\n        pq.add(new Pair(0, 0));\n\n        // Array to store distances from source vertex\n        int d[] = new int[n];\n\n        // Initializing distances with infinity\n        Arrays.fill(d, (int)1e9);\n\n        // Distance to source vertex is 0\n        d[0] = 0;\n\n        // Array to mark visited vertices\n        boolean vis[] = new boolean[n];\n\n        // Dijkstra's algorithm\n        while (!pq.isEmpty()) {\n            Pair p1 = pq.poll();\n            int u = p1.v;\n\n            // If vertex is already visited, skip the iteration\n            if (vis[u]) continue;\n\n            // Mark vertex as visited\n            vis[u] = true;\n\n            // Traverse all adjacent vertices\n            for (Pair p : adj[u]) {\n                int v = p.v;\n                int w = p.w;\n\n                // Relaxation - update distance if shorter path found\n                if ((d[u] + w) < d[v]) {\n                    d[v] = d[u] + w;\n\n                    // Add updated vertex and distance to priority queue\n                    pq.add(new Pair(v, d[v]));\n                }\n            }\n        }\n\n        // If distance is still infinity, update it to -1\n        for (int i = 0; i < n; ++i) {\n            if (d[i] == 1e9) d[i] = -1;\n        }\n\n        // Return array of shortest distances from source vertex\n        return d;\n    }\n\n    // Function to find shortest path for each vertex\n    public int[] shortestPath(int V, int E, int[][] edges) {\n        // Array of adjacency lists to represent graph\n        ArrayList<Pair> adj[] = new ArrayList[V];\n\n        // Initialize adjacency lists\n        for (int i = 0; i < V; i++) {\n            adj[i] = new ArrayList<>();\n        }\n\n        // Add edges to adjacency lists\n        for (int i = 0; i < edges.length; i++) {\n            adj[edges[i][0]].add(new Pair(edges[i][1], edges[i][2]));\n        }\n\n        // Call Dijkstra's algorithm to find shortest paths\n        return dijkstra(adj, V);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\nfrom collections import defaultdict\n\n\nclass Solution:\n\n    def findTopoSort(self, node: int, vis: List[int], st: List[int],\n                     adj: List[List[int]]) -> None:\n        vis[node] = 1\n        for it in adj[node]:\n            if not vis[it[0]]:\n                self.findTopoSort(it[0], vis, st, adj)\n        st.append(node)\n\n    # Function to find the shortest path from source node to all other nodes\n    def shortestPath(self, V: int, E: int,\n                     edges: List[List[int]]) -> List[int]:\n        adj = defaultdict(list)\n        src = 0\n\n        # Creating adjacency list from the given edges list\n        for edge in edges:\n            adj[edge[0]].append((edge[1], edge[2]))\n\n        vis = [0] * V\n        st = []\n\n        # Finding the topological sort of the graph\n        for i in range(V):\n            if not vis[i]:\n                self.findTopoSort(i, vis, st, adj)\n\n        dist = [10**9] * V\n        dist[src] = 0\n\n        # Calculating the shortest path using Bellman Ford algorithm\n        while st:\n            node = st.pop()\n\n            if dist[node] != 10**9:\n                for it in adj[node]:\n                    if dist[node] + it[1] < dist[it[0]]:\n                        dist[it[0]] = dist[node] + it[1]\n\n        # Converting unreachable nodes to -1\n        for i in range(len(dist)):\n            if dist[i] == 10**9:\n                dist[i] = -1\n        return dist\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find topological sort of the graph\n    findTopoSort(node, vis, st, adj) {\n        vis[node] = true;\n        adj[node].forEach(it => {\n            if (!vis[it[0]]) {\n                this.findTopoSort(it[0], vis, st, adj);\n            }\n        });\n        st.push(node);\n    }\n\n    // Function to find the shortest path from source node to all other nodes\n    shortestPath(V, E, edges) {\n        // Create an adjacency list to store the graph\n        let adj = new Array(V).fill(null).map(() => []);\n\n        // Adding edges to the adjacency list\n        for (let i = 0; i < E; i++) {\n            adj[edges[i][0]].push([ edges[i][1], edges[i][2] ]);\n        }\n\n        // Array to track visited nodes\n        let vis = new Array(V).fill(false);\n        // Stack to store nodes in topological order\n        let st = [];\n\n        // Finding topological sort of the graph\n        for (let i = 0; i < V; i++) {\n            if (!vis[i]) {\n                this.findTopoSort(i, vis, st, adj);\n            }\n        }\n\n        // Array to store the distance from source node to each node\n        let dist = new Array(V).fill(Infinity);\n        // Distance to source node (node 0) is 0\n        dist[0] = 0;\n\n        // Process nodes in topological order\n        while (st.length) {\n            let node = st.pop();\n            if (dist[node] !== Infinity) {\n                adj[node].forEach(it => {\n                    if (dist[node] + it[1] < dist[it[0]]) {\n                        dist[it[0]] = dist[node] + it[1];\n                    }\n                });\n            }\n        }\n\n        // Converting unreachable nodes to -1\n        dist = dist.map(d => (d === Infinity ? -1 : d));\n\n        // Return the shortest path array\n        return dist;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}