{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703675,
            "title": "Shortest path to print",
            "titleSlug": "shortest-path-to-print4223",
            "content": "<p><span style=\"font-size:18px\">Given the following&nbsp;grid&nbsp;containing alphabets from A-Z and&nbsp; a string S.Find the shortest possible path to type all characters of given string in given order using only left,right,up and down movements(while staying inside the grid).Initially you start at A(on the top-left corner).<br />\nFind the horizontal movement first(Left/Right) and, then, the vertical movement(Up/Down) for each character of the string.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Grid:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\">A B C D E\nF G H I J\nK L M N O\nP Q R S T\nU V W X Y\nZ\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS=GFG\n<strong>Output:</strong>\nRIGHT DOWN OK LEFT OK RIGHT OK \n<strong>Explanation:\n</strong>We start at A, go towards G,\nthen towards F and finally again towards G,\nusing the shortest paths possible.When You\nreach the character, insert &quot;OK&quot; into the\nstring array.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS=GEEK\n<strong>Output:\n</strong>RIGHT DOWN OK RIGHT RIGHT\nRIGHT UP OK OK LEFT LEFT LEFT\nLEFT DOWN DOWN OK \n<strong>Explanation:\n</strong>Starting from A, we go \ntowards G,then E,we stay at E,Then \nwe go towards K using the shortest paths.</span>\n\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything.Your task is to complete the function&nbsp;<strong>ShortestPath()</strong> which takes a string S and returns an array of strings containing the order of movements required to&nbsp;cover all characters of S.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxillary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; |S|&nbsp;&le; 10<sup>6</sup><br />\nS consists of character from A-Z.</span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a grid containing letters A-Z and a string S, find the shortest path to type all characters of S in order, using only left, right, up, and down movements within the grid. Start at 'A' (top-left). For each character, move horizontally first (Left/Right), then vertically (Up/Down). After reaching each character, insert \"OK\" into the sequence of movements.",
                "constraints": [
                    "1 <= |S| <= 10^6",
                    "S consists of characters from A-Z"
                ],
                "testcases": [
                    {
                        "input": "GFG",
                        "output": "RIGHT DOWN OK LEFT OK RIGHT OK",
                        "explanation": "Start at 'A', move to 'G', then to 'F', and finally to 'G', using shortest paths. After reaching each character, insert \"OK\" into the movement sequence."
                    },
                    {
                        "input": "GEEK",
                        "output": "RIGHT DOWN OK RIGHT RIGHT RIGHT UP OK OK LEFT LEFT LEFT LEFT DOWN DOWN OK",
                        "explanation": "Starting from 'A', move to 'G', then to 'E'. Stay at 'E' temporarily, then go to 'K' using the shortest path. After reaching each character insert \"OK\" into the movement sequence."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Just iterate until you reach required position.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    //Function to return the path based on the given string str.\n    vector<string> printPath(string str) {\n        int i = 0; //initialize index i as 0.\n        int curX = 0, curY = 0; //initialize current positions as (0,0).\n        vector<string> ans; //initialize empty vector to store path.\n\n        //iterating through the given string.\n        while (i < str.length()) {\n            int nextX = (str[i] - 'A') / 5; //calculating next X position based on current character.\n            int nextY = (str[i] - 'B' + 1) % 5; //calculating next Y position based on current character.\n\n            //moving LEFT until curY is greater than nextY.\n            while (curY > nextY) {\n                ans.push_back(\"LEFT\"); //pushing \"LEFT\" to the path.\n                curY--; //decreasing curY by 1.\n            }\n\n            //moving RIGHT until curY is smaller than nextY.\n            while (curY < nextY) {\n                ans.push_back(\"RIGHT\"); //pushing \"RIGHT\" to the path.\n                curY++; //increasing curY by 1.\n            }\n\n            //moving UP until curX is greater than nextX.\n            while (curX > nextX) {\n                ans.push_back(\"UP\"); //pushing \"UP\" to the path.\n                curX--; //decreasing curX by 1.\n            }\n\n            //moving DOWN until curX is smaller than nextX.\n            while (curX < nextX) {\n                ans.push_back(\"DOWN\"); //pushing \"DOWN\" to the path.\n                curX++; //increasing curX by 1.\n            }\n\n            ans.push_back(\"OK\"); //pushing \"OK\" to the path.\n            i++; //increasing index i by 1.\n        }\n\n        //returning the path.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    static ArrayList<String> ShortestPath(String S){\n        ArrayList<String> ans=new ArrayList<String>();\n        int i = 0; //initialize index i as 0\n        int curX = 0, curY = 0; //initialize current positions on X and Y axis as 0\n        while (i < S.length()) //iterate through the input string\n        {\n            int nextX = (S.charAt(i) - 'A') / 5; //calculate next horizontal position based on the character at index i in the input string\n            int nextY = (S.charAt(i) - 'B' + 1) % 5; //calculate next vertical position based on the character at index i in the input string\n            while (curY > nextY) //while current vertical position is greater than the next vertical position\n            {\n                ans.add(\"LEFT\"); //add \"LEFT\" to the answer list\n                curY--; //decrement current vertical position\n            }\n            while (curY < nextY) //while current vertical position is less than the next vertical position\n            {\n                ans.add(\"RIGHT\"); //add \"RIGHT\" to the answer list\n                curY++; //increment current vertical position\n            }\n            while (curX > nextX) //while current horizontal position is greater than the next horizontal position\n            {\n                ans.add(\"UP\"); //add \"UP\" to the answer list\n                curX--; //decrement current horizontal position\n            }\n            while (curX < nextX) //while current horizontal position is less than the next horizontal position\n            {\n                ans.add(\"DOWN\"); //add \"DOWN\" to the answer list\n                curX++; //increment current horizontal position\n            }\n            ans.add(\"OK\"); //add \"OK\" to the answer list\n            i++; //increment index i\n        }\n        return ans; //return the answer list\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def ShortestPath(self,S):\n        ans=[]\n        i = 0;\n        curX = 0 \n        curY = 0\n\n        #iterating through the input string\n        while (i < len(S)):\n\n            #calculating the next X and Y coordinates based on the current character\n            nextX = (ord(S[i]) - ord('A')) // 5\n            nextY = (ord(S[i]) - ord('B') + 1) % 5\n\n            #moving left if current Y coordinate is greater than the next Y coordinate\n            while (curY > nextY):\n                ans.append(\"LEFT\")\n                curY-=1\n\n            #moving right if current Y coordinate is less than the next Y coordinate\n            while (curY < nextY):\n                ans.append(\"RIGHT\")\n                curY+=1\n\n            #moving up if current X coordinate is greater than the next X coordinate\n            while (curX > nextX):\n                ans.append(\"UP\")\n                curX-=1\n\n            #moving down if current X coordinate is less than the next X coordinate\n            while (curX < nextX):\n                ans.append(\"DOWN\")\n                curX+=1\n\n            ans.append(\"OK\")\n            i+=1\n        \n        #returning the list of movements\n        return ans",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Function to return the path based on the given string str.\n    public List<string> printPath(string str)\n    {\n        int i = 0; // initialize index i as 0.\n        int curX = 0, curY = 0; // initialize current positions as (0,0).\n        List<string> ans = new List<string>(); // initialize empty list to store path.\n\n        // iterating through the given string.\n        while (i < str.Length)\n        {\n            int nextX = (str[i] - 'A') / 5; // calculating next X position based on current character.\n            int nextY = (str[i] - 'B' + 1) % 5; // calculating next Y position based on current character.\n\n            // moving LEFT until curY is greater than nextY.\n            while (curY > nextY)\n            {\n                ans.Add(\"LEFT\"); // pushing \"LEFT\" to the path.\n                curY--; // decreasing curY by 1.\n            }\n\n            // moving RIGHT until curY is smaller than nextY.\n            while (curY < nextY)\n            {\n                ans.Add(\"RIGHT\"); // pushing \"RIGHT\" to the path.\n                curY++; // increasing curY by 1.\n            }\n\n            // moving UP until curX is greater than nextX.\n            while (curX > nextX)\n            {\n                ans.Add(\"UP\"); // pushing \"UP\" to the path.\n                curX--; // decreasing curX by 1.\n            }\n\n            // moving DOWN until curX is smaller than nextX.\n            while (curX < nextX)\n            {\n                ans.Add(\"DOWN\"); // pushing \"DOWN\" to the path.\n                curX++; // increasing curX by 1.\n            }\n\n            ans.Add(\"OK\"); // pushing \"OK\" to the path.\n            i++; // increasing index i by 1.\n        }\n\n        // returning the path.\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}