{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706374,
            "title": "Shortest Prime Path",
            "titleSlug": "shortest-prime-path--141631",
            "content": "<p><span style=\"font-size: 18px;\">You are given two four digit prime numbers <strong>num1 </strong>and <strong>num2.</strong>&nbsp;Find the distance of the shortest path from Num1 to Num2 that can be attained by altering only single digit at a time such that every number that we get after changing a digit is a four digit prime number with no leading zeros.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\">num1 = 1033 \nnum2 = 8179</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong></span><span style=\"font-size: 18px;\">6</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">1033 -&gt; 1<strong>7</strong>33 -&gt; <strong>3</strong>733 -&gt; 373<strong>9</strong> -&gt; 37<strong>7</strong>9 -&gt; <strong>8</strong>779 -&gt; 8<strong>1</strong>79.</span>\n<span style=\"font-size: 18px;\">There are only 6 steps reuired to reach num2 from num1. </span>\n<span style=\"font-size: 18px;\">and all the intermediate numbers are 4 digit prime numbers.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\">num1 = 1033 \nnum2 = 1033</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">0</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong>&nbsp;&nbsp;<br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>solve</strong>() which takes two integers num1 and num2 as input parameters and returns the distance of the shortest path from num1 to num2. If it is unreachable then return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1000&lt;=num1,num2&lt;=9999<br />num1 and num2 are prime numbers.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given two four-digit prime numbers, `num1` and `num2`. Find the minimum number of single-digit alterations required to transform `num1` into `num2`, adhering to the following constraints:\n\n*   Each intermediate number formed after an alteration must be a four-digit prime number.\n*   No intermediate number can have leading zeros.",
                "constraints": [
                    "1000 <= num1, num2 <= 9999",
                    "num1 and num2 are prime numbers."
                ],
                "testcases": [
                    {
                        "input": "num1 = 1033\nnum2 = 8179",
                        "output": "6",
                        "explanation": "The shortest path is: 1033 -> 1733 -> 3733 -> 3739 -> 3779 -> 8779 -> 8179.  This requires 6 single-digit alterations."
                    },
                    {
                        "input": "num1 = 1033\nnum2 = 1033",
                        "output": "0",
                        "explanation": "Since num1 and num2 are the same, no alterations are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use bfs to find the shortest path.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution{\npublic:\n    int mxp; // maximum value for prime numbers\n    vector<int> prime; // vector to store whether a number is prime or not\n\n    Solution()\n    {\n        mxp=9999; // initialize mxp to a large value\n        prime=vector<int>(10001,1); // initialize prime vector with 1 for all elements\n        \n        prime[1]=0; // 1 is not a prime number\n\n        // Seive Of Eratosthenes to find all prime numbers upto mxp\n        for(int i=2;i<=mxp;i++) \n        {\n            if(prime[i])\n            {\n                // mark all multiples of i as non-prime\n                for(int j=2;j*i<=mxp;j++)\n                {\n                    prime[j*i]=0;\n                }\n            }\n        }\n    } \n\n    // Breadth First Search function to find shortest distance between source and destination\n    int bfs(int source,int &destination)\n    {\n        vector<int> dp(10001,-1); // stores the shortest distance from source to destination\n        vector<int> vis(10001); // vector to keep track of visited nodes\n        queue<int> q;\n        q.push(source);\n        dp[source]=0;\n        vis[source]=0;\n\n        while(!q.empty())\n        {\n            int current=q.front();\n            q.pop();\n\n            if(vis[current]) // if already visited, skip\n                continue;\n\n            vis[current]=1;\n\n            string s=to_string(current); // convert current to string for manipulation\n\n            for(int i=0;i<4;i++) // for each digit in the number\n            {\n                for(char ch='0';ch<='9';ch++) // try changing the digit from 0 to 9\n                {\n                    if(ch==s[i]||(ch=='0'&&i==0)) // skip if changing the digit doesn't result in a valid number\n                        continue;\n                        \n                    string nxt=s; // create a new string for the modified number\n                    nxt[i]=ch; // modify the i-th digit with ch\n                    int nxtN=stoi(nxt); // convert the modified string back to integer\n\n                    if(prime[nxtN]&&dp[nxtN]==-1) // if the modified number is prime and not visited before\n                    {\n                        dp[nxtN]=1+dp[current]; // update shortest distance for the modified number\n                        q.push(nxtN); // push the modified number to the queue\n                    }\n                }\n            }\n        }\n        return dp[destination]; // return the shortest distance between source and destination\n    }\n\n    // Wrapper function to call bfs and solve the problem\n    int solve(int num1,int num2)\n    {   \n        return bfs(num1,num2);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    int mxp; // maximum value for prime numbers\n    int[] prime; // array to store prime numbers\n    \n    Solution(){\n        mxp=9999; // initialize maximum value for prime numbers\n        prime=new int[10001]; // initialize array for prime numbers\n        Arrays.fill(prime,1); // set all elements in prime array to 1\n        prime[1]=0; // set the value at index 1 to 0, as 1 is not a prime number\n        \n        // Seive Of Eratosthenes\n        // loop to find prime numbers using Seive Of Eratosthenes algorithm\n        for(int i=2;i<=mxp;i++){\n            if(prime[i]==1){\n                for(int j=2;j*i<=mxp;j++){\n                    prime[j*i]=0; // mark current number as non-prime in prime array\n                }\n            }\n        }\n    }\n    \n    int bfs(int source,int destination){\n        int[] dp =new int[10001]; // array to store the shortest distance from source to destination\n        Arrays.fill(dp,-1); // set all elements in dp array to -1\n        int[] vis=new int[10001]; // array to track visited nodes\n        Queue<Integer> q = new LinkedList<>(); // queue for BFS traversal \n        q.add(source); // add source to queue\n        dp[source]=0; // set the distance of source from itself to 0\n        vis[source]=0; // mark source as visited\n        while(q.size()>0){\n            int current=q.poll(); // get the current node from queue\n            if(vis[current]==1)\n                continue; // if current node is already visited, continue to next iteration\n            vis[current]=1; // mark current node as visited\n            String s=Integer.toString(current); // convert current number to string\n            for(int i=0;i<4;i++){\n                for(char ch='0';ch<='9';ch++){\n                    if(ch==s.charAt(i)||(ch=='0'&&i==0))\n                        continue; // if the digit in the string is equal to current digit or it is 0 at first position, continue to next iteration\n                    String nxt=s;\n                    nxt=s.substring(0,i)+ch+s.substring(i+1); // replace digit at index i with ch character in the string\n                    int nxtN=Integer.valueOf(nxt); // convert the new string to integer\n                    if(prime[nxtN]==1&&dp[nxtN]==-1){\n                        // if the new number is prime and it is not visited yet\n                        dp[nxtN]=1+dp[current]; // set the shortest distance to the new number\n                        q.add(nxtN); // add the new number to queue for traversal\n                    }\n                }\n            }\n        }\n        return dp[destination]; // return the shortest distance from the source to destination node\n    }\n    \n    int solve(int num1,int num2){\n        return bfs(num1,num2); // solve the problem by finding the shortest distance between Num1 and Num2\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def __init__(self):\r\n        self.mxp=9999\r\n        self.prime=[1 for i in range(10001)]\r\n        self.prime[1]=0;\r\n        \r\n        # Seive Of Eratosthenes to identify prime numbers\r\n        for i in range(2,self.mxp+1):\r\n            if self.prime[i]==1:\r\n                j=2\r\n                while j*i<=self.mxp:\r\n                    self.prime[j*i]=0\r\n                    j+=1\r\n\r\n    # Function to perform BFS from source to destination.\r\n    def bfs(self,source,destination):\r\n        dp =[-1 for i in range(10001)] # stores the shortest distance from source to destination\r\n        vis=[0 for i in range(10001)] \r\n        q = [];\r\n        \r\n        q.append(source)\r\n        dp[source]=0\r\n        vis[source]=0\r\n        \r\n        while len(q)>0:\r\n            current=q.pop(0)\r\n            \r\n            if vis[current]==1:\r\n                continue\r\n            vis[current]=1\r\n            \r\n            s=str(current)\r\n            \r\n            for i in range(4):\r\n                for j in range(10):\r\n                    ch=chr(j+48)\r\n                    \r\n                    if ch==s[i] or (ch=='0' and i==0):\r\n                        continue\r\n                    nxt=s[0:i]+ch+s[i+1:]\r\n                    nxtN=int(nxt)\r\n                    \r\n                    if self.prime[nxtN]==1 and dp[nxtN]==-1:\r\n                        dp[nxtN]=1+dp[current]\r\n                        q.append(nxtN)\r\n                        \r\n        return dp[destination];\r\n\r\n    # Function to solve the problem and return the result.\r\n    def solve(self,num1,num2):\r\n        return self.bfs(num1,num2)",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int solve(int Num1,int Num2)\n    {\n        int[] prime = new int[10001];\n        int mxp = 9999;\n        for (int i = 1; i <= mxp; i++)\n        {\n            prime[i] = 1;\n        }\n        prime[1] = 0;\n        //Seive Of Eratosthenes\n        for (int i = 2; i <= mxp; i++)\n        {\n            if (prime[i] == 1)\n            {\n                for (int j = 2; j * i <= mxp; j++)\n                    prime[j * i] = 0;\n            }\n        }\n\n        int[] dp = new int[10001];\n        int[] vis = new int[10001];\n        Queue<int> q = new Queue<int>();\n        q.Enqueue(Num1);\n        dp[Num1] = 0;\n        vis[Num1] = 0;\n        while (q.Count != 0)\n        {\n            int current = q.Dequeue();\n            if (vis[current] == 1)\n                continue;\n            vis[current] = 1;\n            string s = current.ToString();\n            for (int i = 0; i < 4; i++)\n            {\n                for (char ch = '0'; ch <= '9'; ch++)\n                {\n                    if (ch == s[i] || (ch == '0' && i == 0))\n                        continue;\n                    string nxt = s;\n                    nxt = nxt.Remove(i, 1).Insert(i, ch.ToString());\n                    int nxtN = int.Parse(nxt);\n                    if (prime[nxtN] == 1 && dp[nxtN] == 0)\n                    {\n                        dp[nxtN] = 1 + dp[current];\n                        q.Enqueue(nxtN);\n                    }\n                }\n            }\n        }\n        return dp[Num2];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} num1\r\n * @param {number} num2\r\n  * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    constructor() {\r\n        this.mxp = 9999;\r\n        this.prime = Array(10001).fill(1);\r\n        this.prime[1] = 0;\r\n\r\n        //Seive Of Eratosthenes\r\n        for (let i = 2; i <= this.mxp; i++) {\r\n            if (this.prime[i] === 1) {\r\n                let j = 2;\r\n                while (j * i <= this.mxp) {\r\n                    this.prime[j * i] = 0;\r\n                    j += 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Function to perform BFS from source to destination.\r\n    bfs(source, destination) {\r\n        let dp = Array(10001).fill(-1); //stores the shortest distance from source to destination\r\n        let vis = Array(10001).fill(0);\r\n        let q = [];\r\n        q.push(source);\r\n        dp[source] = 0;\r\n        vis[source] = 0;\r\n\r\n        while (q.length > 0) {\r\n            let current = q.shift();\r\n\r\n            if (vis[current] === 1) {\r\n                continue;\r\n            }\r\n\r\n            vis[current] = 1;\r\n            let s = current.toString();\r\n\r\n            for (let i = 0; i < 4; i++) {\r\n                for (let j = 0; j < 10; j++) {\r\n                    let ch = String.fromCharCode(j + 48);\r\n\r\n                    if (ch === s[i] || (ch === '0' && i === 0)) {\r\n                        continue;\r\n                    }\r\n\r\n                    let nxt = s.substring(0, i) + ch + s.substring(i + 1);\r\n                    let nxtN = parseInt(nxt);\r\n\r\n                    if (this.prime[nxtN] === 1 && dp[nxtN] === -1) {\r\n                        dp[nxtN] = 1 + dp[current];\r\n                        q.push(nxtN);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dp[destination];\r\n    }\r\n\r\n    //Function to solve the problem and return the result.\r\n    solve(num1, num2) {\r\n        return this.bfs(num1, num2);\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}