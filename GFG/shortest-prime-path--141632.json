{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706377,
            "title": "Shortest Prime Path",
            "titleSlug": "shortest-prime-path--141632",
            "content": "<p><span style=\"font-size:18px\">You are given two four digit prime numbers <strong>Num1 </strong>and <strong>Num2.</strong>&nbsp;Find the distance of the shortest path from Num1 to Num2 that can be attained by altering only single digit at a time such that every number that we get after changing a digit is a four digit prime number with no leading zeros.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">Num1 = 1033 \r\nNum2 = 8179</span>\r\n<span style=\"font-size:18px\"><strong>Output: </strong></span><span style=\"font-size:18px\">6</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">1033 -&gt; 1<strong>7</strong>33 -&gt; <strong>3</strong>733 -&gt; 373<strong>9</strong> -&gt; 37<strong>7</strong>9 -&gt; <strong>8</strong>779 -&gt; 8<strong>1</strong>79.</span>\r\n<span style=\"font-size:18px\">There are only 6 steps reuired to reach Num2 from Num1. </span>\r\n<span style=\"font-size:18px\">and all the intermediate numbers are 4 digit prime numbers.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">Num1 = 1033 \r\nNum2 = 1033</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">0</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong>&nbsp;&nbsp;<br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>solve</strong>()&nbsp;which takes two integers&nbsp;Num1 and Num2&nbsp;as input parameters&nbsp;and returns the distance of the shortest path from Num1 to Num2.&nbsp;If it is unreachable then return -1.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(1)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1000&lt;=Num1,Num2&lt;=9999<br />\r\nNum1 and Num2 are prime numbers.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two four-digit prime numbers, `Num1` and `Num2`, find the length of the shortest path from `Num1` to `Num2`.  You can only change one digit at a time, and each intermediate number must also be a four-digit prime number (with no leading zeros). If no such path exists, return -1.",
                "constraints": [
                    "1000 <= Num1, Num2 <= 9999",
                    "Num1 and Num2 are prime numbers."
                ],
                "testcases": [
                    {
                        "input": "Num1 = 1033\nNum2 = 8179",
                        "output": "6",
                        "explanation": "One possible shortest path is: 1033 -> 1733 -> 3733 -> 3739 -> 3779 -> 8779 -> 8179. This path requires 6 steps."
                    },
                    {
                        "input": "Num1 = 1033\nNum2 = 1033",
                        "output": "0",
                        "explanation": "Since Num1 and Num2 are the same, the distance is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use bfs to find the shortest path.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution{   \r\npublic:\r\n    int mxp;\r\n    vector<int> prime;\r\n    Solution()\r\n    {\r\n      mxp=9999;\r\n      prime=vector<int>(10001,1);\r\n      prime[1]=0;\r\n      //Seive Of Eratosthenes\r\n      for(int i=2;i<=mxp;i++)\r\n      {\r\n        if(prime[i])\r\n        {\r\n          for(int j=2;j*i<=mxp;j++)\r\n            prime[j*i]=0;\r\n        }\r\n      }\r\n    } \r\n\r\n    int bfs(int source,int &destination)\r\n    {\r\n      vector<int> dp(10001,-1); //stores the shotest distance from source to destination\r\n      vector<int> vis(10001); \r\n      queue<int> q;\r\n      q.push(source);\r\n      dp[source]=0;\r\n      vis[source]=0;\r\n      while(!q.empty())\r\n      {\r\n        int current=q.front();\r\n        q.pop();\r\n        if(vis[current])\r\n          continue;\r\n        vis[current]=1;\r\n        string s=to_string(current);\r\n        for(int i=0;i<4;i++)\r\n        {\r\n          for(char ch='0';ch<='9';ch++)\r\n          {\r\n            if(ch==s[i]||(ch=='0'&&i==0))\r\n              continue;\r\n            string nxt=s;\r\n            nxt[i]=ch;\r\n            int nxtN=stoi(nxt);\r\n            if(prime[nxtN]&&dp[nxtN]==-1)\r\n            {\r\n              dp[nxtN]=1+dp[current];\r\n              q.push(nxtN);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return dp[destination];\r\n    }\r\n    \r\n    int solve(int Num1,int Num2)\r\n    {   \r\n      return bfs(Num1,Num2);\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    int mxp; //maximum value for prime array\n    int[] prime; //array to store prime numbers\n    Solution()\n    {\n        mxp=9999; //initialize mxp to maximum value for prime array\n        prime=new int[10001]; //initialize prime array with size 10001\n        Arrays.fill(prime,1); //set all values in prime array to 1 initially\n        prime[1]=0; //set value at index 1 in prime array to 0 (not a prime number)\n        \n        //Seive Of Eratosthenes\n        for(int i=2;i<=mxp;i++) //iterate from 2 to mxp\n        {\n            if(prime[i]==1) //if the current number is prime\n            {\n                for(int j=2;j*i<=mxp;j++) //iterate through multiples of current prime number\n                    prime[j*i]=0; //set value at multiples index in prime array to 0 (not a prime number)\n            }\n        }\n    }\n    \n    int bfs(int source,int destination)\n    {\n        int[] dp =new int[10001]; //stores the shortest distance from source to destination\n        Arrays.fill(dp,-1); //set all values in dp array to -1 initially\n        int[] vis=new int[10001]; //array to store if a number has been visited or not\n        Queue<Integer> q = new LinkedList<>(); //create a queue for BFS traversal\n        q.add(source); //add source to the queue\n        dp[source]=0; //set distance of source to 0\n        vis[source]=0; //mark source as visited\n        while(q.size()>0) //while the queue is not empty\n        {\n            int current=q.poll(); //remove and get the first element from the queue\n            if(vis[current]==1) //if current number has already been visited\n            continue; //skip to the next iteration\n            \n            vis[current]=1; //mark current number as visited\n            String s=Integer.toString(current); //convert current number to string\n            \n            for(int i=0;i<4;i++) //iterate through each digit in the number\n            {\n                for(char ch='0';ch<='9';ch++) //try changing each digit to 0-9\n                {\n                    if(ch==s.charAt(i)||(ch=='0'&&i==0)) //if the digit is already the same or the number starts with 0\n                    continue; //skip to the next iteration\n                    \n                    String nxt=s; //create a new string to store the modified number\n                    nxt=s.substring(0,i)+ch+s.substring(i+1); //replace the digit at index i with ch\n                    int nxtN=Integer.valueOf(nxt); //convert the modified string back to integer\n                    \n                    if(prime[nxtN]==1&&dp[nxtN]==-1) //if the modified number is prime and has not been visited yet\n                    {\n                        dp[nxtN]=1+dp[current]; //set the distance of modified number from source\n                        q.add(nxtN); //add the modified number to the queue\n                    }\n                }\n            }\n        }\n        return dp[destination]; //return the shortest distance from source to destination\n    }\n    \n    int solve(int Num1,int Num2){\n        return bfs(Num1,Num2); //call bfs function to find shortest distance from Num1 to Num2\n    } \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def __init__(self):\n        self.mxp=9999\n        self.prime=[1 for i in range(10001)]\n        self.prime[1]=0;  # Setting prime[1] to 0 as 1 is not a prime number\n        #Seive Of Eratosthenes\n        for i in range(2,self.mxp+1):\n            if self.prime[i]==1:  # Checking if the number is marked as prime\n                j=2\n                while j*i<=self.mxp:   # Marking all multiples of i as not prime\n                    self.prime[j*i]=0\n                    j+=1\n                    \n    def bfs(self,source,destination):\n        dp =[-1 for i in range(10001)] #stores the shortest distance from source to destination\n        vis=[0 for i in range(10001)]  # keeps track of the visited nodes\n        q = []  \n        q.append(source)\n        dp[source]=0\n        vis[source]=0\n        while len(q)>0:\n            current=q.pop(0)\n            if vis[current]==1:   # Checking if the current node is already visited\n                continue\n            vis[current]=1   # Marking the current node as visited\n            s=str(current)\n            for i in range(4):\n                for j in range(10):\n                    ch=chr(j+48)   # Converting the integer to character\n                    if ch==s[i] or (ch=='0' and i==0):  # Skip if the character is same as current and if it's the first digit and it's being replaced by '0'\n                        continue\n                    nxt=s[0:i]+ch+s[i+1:]  # Replacing the character at ith position with ch\n                    nxtN=int(nxt)   # Converting the string back to integer\n                    if self.prime[nxtN]==1 and dp[nxtN]==-1:   # Checking if the new number is prime and not previously visited\n                        dp[nxtN]=1+dp[current]   # Updating the distance of the new number\n                        q.append(nxtN)   # Adding the new number to the queue\n        return dp[destination];   # Returning the shortest distance from source to destination\n                    \n    def solve (self,Num1,Num2):\n        return self.bfs(Num1,Num2)   # Calling the bfs function to get the shortest distance from Num1 to Num2",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number} num1\n * @param {number} num2\n * @returns {number}\n */\n\nclass Solution {\n  solve(num1,num2) {\n    let mxp = 9999;\n    let prime = new Array(10001).fill(1);\n    prime[1] = 0;\n    \n    // Sieve Of Eratosthenes\n    for(let i=2; i<=mxp; i++) {\n      if(prime[i]) {\n        for(let j=2; j*i<=mxp; j++) {\n          prime[j*i] = 0;\n        }\n      }\n    }\n    \n    let dp = new Array(10001).fill(-1); \n    let vis = new Array(10001).fill(0);\n    let q = [];\n    q.push(num1);\n    dp[num1] = 0;\n    vis[num1] = 0;\n    \n    while(q.length > 0) {\n      let current = q.shift();\n      if(vis[current])\n        continue;\n      vis[current] = 1;\n      let s = current.toString();\n      \n      for(let i=0; i<4; i++) {\n        for(let ch='0'; ch<='9'; ch++) {\n          if(ch === s[i] || (ch === '0' && i === 0))\n            continue;\n          let nxt = s.substring(0,i) + ch + s.substring(i+1);\n          let nxtN = parseInt(nxt);\n          if(prime[nxtN] && dp[nxtN] === -1) {\n            dp[nxtN] = 1 + dp[current];\n            q.push(nxtN);\n          }\n        }\n      }\n    }\n    \n    return dp[num2];\n  }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public int solve(int Num1, int Num2)\n    {\n        int mxp = 9999;\n        int[] prime = new int[10001];\n        for (int i = 0; i < 10001; i++)\n        {\n            prime[i] = 1;\n        }\n        prime[1] = 0;\n        //Seive Of Eratosthenes\n        for (int i = 2; i <= mxp; i++)\n        {\n            if (prime[i] == 1)\n            {\n                for (int j = 2; j * i <= mxp; j++)\n                    prime[j * i] = 0;\n            }\n        }\n\n        int[] dp = new int[10001];\n        int[] vis = new int[10001];\n        Queue<int> q = new Queue<int>();\n        q.Enqueue(Num1);\n        dp[Num1] = 0;\n        vis[Num1] = 0;\n        while (q.Count > 0)\n        {\n            int current = q.Dequeue();\n            if (vis[current] == 1)\n                continue;\n            vis[current] = 1;\n            string s = current.ToString();\n            for (int i = 0; i < 4; i++)\n            {\n                for (char ch = '0'; ch <= '9'; ch++)\n                {\n                    if (ch == s[i] || (ch == '0' && i == 0))\n                        continue;\n                    string nxt = s;\n                    char[] charArray = nxt.ToCharArray();\n                    charArray[i] = ch;\n                    nxt = new string(charArray);\n                    int nxtN = Int32.Parse(nxt);\n                    if (prime[nxtN] == 1 && dp[nxtN] == 0)\n                    {\n                        dp[nxtN] = 1 + dp[current];\n                        q.Enqueue(nxtN);\n                    }\n                }\n            }\n        }\n        return dp[Num2];\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}