{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713140,
            "title": "Shortest Prime Path",
            "titleSlug": "shortest-prime-path--170645",
            "content": "<p><span style=\"font-size:18px\">You are given two four digit prime numbers <strong>Num1 </strong>and <strong>Num2.</strong>&nbsp;Find the distance of the shortest path from Num1 to Num2 that can be attained by altering only one&nbsp;single digit at a time. Every number obtained after changing a digit should be a four digit prime number with no leading zeros.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">Num1 = 1033 \r\nNum2 = 8179</span>\r\n<span style=\"font-size:18px\"><strong>Output: </strong></span><span style=\"font-size:18px\">6</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">1033 -&gt; 1<strong>7</strong>33 -&gt; <strong>3</strong>733 -&gt; 373<strong>9</strong> -&gt; 37<strong>7</strong>9\r\n\\t\\t     -&gt; <strong>8</strong>779 -&gt; 8<strong>1</strong>79.</span>\r\n<span style=\"font-size:18px\">There are only 6 steps required to reach\r\nNum2 from Num1, a</span><span style=\"font-size:18px\">nd all the intermediate\r\nnumbers are 4 digit prime numbers.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">Num1 = 1033 \r\nNum2 = 1033</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">0</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong>&nbsp;&nbsp;<br />\r\nYou don&#39;t need to read input or print anything. Your task is to </span></p>\r\n\r\n<ol>\r\n\t<li><span style=\"font-size:18px\">Complete the <strong>constructor of the class Solution</strong> to precompute a list of prime numbers.&nbsp;&nbsp;</span></li>\r\n\t<li><span style=\"font-size:18px\">Complete&nbsp;function&nbsp;<strong>shortestPath</strong>() which takes two integers&nbsp;Num1 and Num2&nbsp;as input parameters&nbsp;and returns the distance of the shortest path from Num1 to Num2.&nbsp;If it is unreachable then return -1.</span></li>\r\n</ol>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(NlogN)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1000 </span> <span style=\"font-size:18px\">&le; Num1,Num2 </span> <span style=\"font-size:18px\">&le;</span> <span style=\"font-size:18px\">9999<br />\r\nNum1 and Num2 are prime numbers.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two four-digit prime numbers, `Num1` and `Num2`, find the length of the shortest path between them.  You can move from one number to another by changing only one digit at a time. Each intermediate number must also be a four-digit prime number (no leading zeros). If no path exists return -1.",
                "constraints": [
                    "1000 <= Num1, Num2 <= 9999",
                    "Num1 and Num2 are prime numbers."
                ],
                "testcases": [
                    {
                        "input": "Num1 = 1033\nNum2 = 8179",
                        "output": "6",
                        "explanation": "The shortest path is 1033 -> 1733 -> 3733 -> 3739 -> 3779 -> 8779 -> 8179, requiring 6 steps."
                    },
                    {
                        "input": "Num1 = 1033\nNum2 = 1033",
                        "output": "0",
                        "explanation": "Since Num1 and Num2 are the same, the distance is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use bfs to find the shortest path.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution{   \r\n  public:\r\n    \r\n    vector<int> prime;\r\n    \r\n    Solution()\r\n    {\r\n        int mxp=9999;\r\n        prime=vector<int>(10001,1);\r\n        prime[1]=0;\r\n        //Seive Of Eratosthenes\r\n        for(int i=2;i<=mxp;i++)\r\n        {\r\n            if(prime[i])\r\n            {\r\n            for(int j=2;j*i<=mxp;j++)\r\n                prime[j*i]=0;\r\n            }\r\n        }\r\n    } \r\n\r\n    int bfs(int source,int &destination)\r\n    {\r\n        vector<int> dp(10001,-1); //stores the shotest distance from source to destination\r\n        vector<int> vis(10001); \r\n        queue<int> q;\r\n        q.push(source);\r\n        dp[source]=0;\r\n        vis[source]=0;\r\n        while(!q.empty())\r\n        {\r\n            int current=q.front();\r\n            q.pop();\r\n            if(vis[current])\r\n                continue;\r\n            vis[current]=1;\r\n            string s=to_string(current);\r\n            for(int i=0;i<4;i++)\r\n            {\r\n                for(char ch='0';ch<='9';ch++)\r\n                {\r\n                    if(ch==s[i]||(ch=='0'&&i==0))\r\n                        continue;\r\n                    string nxt=s;\r\n                    nxt[i]=ch;\r\n                    int nxtN=stoi(nxt);\r\n                    if(prime[nxtN]&&dp[nxtN]==-1)\r\n                    {\r\n                        dp[nxtN]=1+dp[current];\r\n                        q.push(nxtN);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dp[destination];\r\n    }\r\n    \r\n    int shortestPath(int Num1,int Num2)\r\n    {   \r\n        return bfs(Num1,Num2);\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    \n    int[] prime;\n    Solution()\n    {\n        int mxp=9999;\n        prime=new int[10001];\n        Arrays.fill(prime,1);\n        prime[1]=0;\n        //Seive Of Eratosthenes\n        //Initializing prime array with all elements set to 1, since all numbers are initially considered prime\n        for(int i=2;i<=mxp;i++)\n        {\n            //If a number is prime\n            if(prime[i]==1)\n            {\n                //Mark all its multiples as non-prime\n                for(int j=2;j*i<=mxp;j++)\n                    prime[j*i]=0;\n            }\n        }\n    }\n    \n    //Function to find shortest path between two numbers\n    int bfs(int source,int destination)\n    {\n        int[] dp =new int[10001]; //stores the shortest distance from source to destination\n        Arrays.fill(dp,-1);\n        int[] vis=new int[10001]; \n        Queue<Integer> q = new LinkedList<>(); \n        q.add(source);\n        dp[source]=0;\n        vis[source]=0;\n        while(q.size()>0)\n        {\n            int current=q.poll();\n            //If the current number has already been visited, skip to the next iteration\n            if(vis[current]==1)\n            continue;\n            vis[current]=1;\n            String s=Integer.toString(current);\n            for(int i=0;i<4;i++)\n            {\n                for(char ch='0';ch<='9';ch++)\n                {\n                    if(ch==s.charAt(i)||(ch=='0'&&i==0))\n                    continue;\n                    String nxt=s;\n                    nxt=s.substring(0,i)+ch+s.substring(i+1);\n                    int nxtN=Integer.valueOf(nxt);\n                    if(prime[nxtN]==1&&dp[nxtN]==-1)\n                    {\n                        dp[nxtN]=1+dp[current];\n                        q.add(nxtN);\n                    }\n                }\n            }\n        }\n        return dp[destination];\n    }\n    \n    //Function to find shortest path between two given numbers\n    int shortestPath(int Num1,int Num2){\n        return bfs(Num1,Num2);\n    } \n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# Back-end complete function Template for C++\r\n\r\nclass Solution:\r\n    def __init__(self):\r\n        self.mxp=9999\r\n        self.prime=[1 for i in range(10001)]\r\n        self.prime[1]=0;\r\n        #Seive Of Eratosthenes\r\n        for i in range(2,self.mxp+1):\r\n            if self.prime[i]==1:\r\n                j=2\r\n                while j*i<=self.mxp:\r\n                    self.prime[j*i]=0\r\n                    j+=1\r\n    def bfs(self,source,destination):\r\n        dp =[-1 for i in range(10001)] #stores the shotest distance from source to destination\r\n        vis=[0 for i in range(10001)] \r\n        q = []; \r\n        q.append(source)\r\n        dp[source]=0\r\n        vis[source]=0\r\n        while len(q)>0:\r\n            current=q.pop(0)\r\n            if vis[current]==1:\r\n                continue\r\n            vis[current]=1\r\n            s=str(current)\r\n            for i in range(4):\r\n                for j in range(10):\r\n                    ch=chr(j+48)\r\n                    if ch==s[i] or (ch=='0' and i==0):\r\n                        continue\r\n                    nxt=s[0:i]+ch+s[i+1:]\r\n                    nxtN=int(nxt)\r\n                    if self.prime[nxtN]==1 and dp[nxtN]==-1:\r\n                        dp[nxtN]=1+dp[current]\r\n                        q.append(nxtN)\r\n        return dp[destination];\r\n    def shortestPath(self,Num1,Num2):\r\n        return self.bfs(Num1,Num2)\r\n\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @class Solution\n */\nclass Solution {\n    /**\n     * @constructor\n    */\n    constructor() {\n        // Every index of prime stores zero or one\n        // If prime[i] is zero means i is not a prime\n        // If prime[i] is one means i is a prime\n        this.prime = new Array(10001).fill(1);\n        this.mxp=9999;\n        this.prime[1]=0;\n        //Seive Of Eratosthenes\n        for (let i = 2; i <= this.mxp; i++) {\n            if (this.prime[i] == 1) {\n                let j = 2;\n                while (j*i <= this.mxp) {\n                    this.prime[j*i] = 0;\n                    j++;\n                }\n            }\n        }\n    }\n\n    /**\n     * @param {number} Num1\n     * @param {number} Num2\n     * @returns {number}\n     */\n    shortestPath(Num1, Num2) {\n        //stores the shotest distance from source to destination\n        let dp = new Array(10001).fill(-1);\n        let vis = new Array(10001).fill(0);\n        let q = []; \n        q.push(Num1);\n        dp[Num1]=0;\n        vis[Num1]=0\n        while (q.length>0) {\n            let current = q.shift();\n            if (vis[current] == 1) {\n                continue;\n            }\n            vis[current] = 1;\n            let s = String(current);\n            for (let i = 0; i < 4; i++) {\n                for (let j = 0; j < 10; j++) {\n                    let ch = String.fromCharCode(j+48);\n                    if (ch===s[i] || (ch==='0' && i===0)) {\n                        continue;\n                    }\n                    let nxt = s.slice(0,i) + ch + s.slice(i+1);\n                    let nxtN = parseInt(nxt);\n                    if (this.prime[nxtN] == 1 && dp[nxtN] == -1) {\n                        dp[nxtN] = 1 + dp[current];\n                        q.push(nxtN);\n                    }\n                }\n            }\n        }\n        return dp[Num2];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}