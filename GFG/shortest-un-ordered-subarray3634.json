{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703869,
            "title": "Shortest un-ordered subarray",
            "titleSlug": "shortest-un-ordered-subarray3634",
            "content": "<p><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\">Given an array <strong>arr </strong>of distinct numbers. Find the length of the shortest unordered (neither increasing nor decreasing) subarray in the given array. If there is no subarray then return 0.</span></p>\n<p><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><strong>Input: </strong>arr[] = [7, 9, 10, 8, 11]\n<strong>Output: </strong>3\n<strong>Explanation: </strong>Shortest unsorted subarray is 9, 10, 8 which is of 3 elements.</span></pre>\n<pre><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><strong>Input: </strong>arr[] = [1, 2, 3, 5]\n<strong>Output: </strong>0<br /><strong>Explanation: </strong>There is no subarray.</span></pre>\n<p><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of distinct numbers, find the length of the shortest subarray that is neither strictly increasing nor strictly decreasing. If no such subarray exists, return 0.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[7, 9, 10, 8, 11]",
                        "output": "3",
                        "explanation": "The shortest unordered subarray is [9, 10, 8], which has a length of 3."
                    },
                    {
                        "input": "[1, 2, 3, 5]",
                        "output": "0",
                        "explanation": "The array is strictly increasing, so no unordered subarray exists."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Answer will either 0 or 3 becaause either not present or if&nbsp; present then smallest size will be 3</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "oracle"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the length of the shortest unordered subarray\n    // in a given array.\n    int shortestUnorderedSubarray(vector<int>& arr) {\n        int n = arr.size();\n        // Initializing minimum length, flag, and answer variables\n        long int Min = INT_MAX, flag = -1, ans = 1;\n\n        // Iterating through the array\n        for (int i = 1; i < n; i++) {\n            // Checking if the array is increasing or decreasing\n            if (flag == -1) {\n                // If increasing, set flag to 1 and increment the answer\n                if (arr[i] > arr[i - 1]) {\n                    flag = 1;\n                    ans++;\n                }\n                // If decreasing, set flag to 0 and increment the answer\n                else {\n                    flag = 0;\n                    ans++;\n                }\n            }\n            // If the array is already in increasing or decreasing order\n            else {\n                // If still increasing, continue to next element\n                if (arr[i] > arr[i - 1] && flag == 1)\n                    continue;\n                // If increasing after decreasing, update flag to 1, increment answer\n                // and check if it is the shortest unordered subarray\n                else if (arr[i] > arr[i - 1] && flag == 0) {\n                    flag = 1;\n                    ans++;\n                    if (ans >= 3 && Min > ans)\n                        Min = ans;\n                }\n                // If still decreasing, continue to next element\n                else if (arr[i] < arr[i - 1] && flag == 0)\n                    continue;\n                // If decreasing after increasing, increment answer, update flag to 0,\n                // and check if it is the shortest unordered subarray\n                else if (arr[i] < arr[i - 1] && flag == 1) {\n                    ans++;\n                    flag = 0;\n                    if (ans >= 3 && Min > ans)\n                        Min = ans;\n                }\n            }\n        }\n        // If no unordered subarray is found, return 0\n        if (Min == INT_MAX)\n            return 0;\n        // Otherwise, return the length of the shortest unordered subarray\n        else\n            return Min;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the length of the shortest unordered subarray\n    // in a given array.\n    public int shortestUnorderedSubarray(int[] arr) {\n        int n = arr.length;\n        // Initializing minimum length, flag, and answer variables\n        long min = Integer.MAX_VALUE;\n        int flag = -1, ans = 1;\n\n        // Iterating through the array\n        for (int i = 1; i < n; i++) {\n            // Checking if the array is increasing or decreasing\n            if (flag == -1) {\n                // If increasing, set flag to 1 and increment the answer\n                if (arr[i] > arr[i - 1]) {\n                    flag = 1;\n                    ans++;\n                }\n                // If decreasing, set flag to 0 and increment the answer\n                else {\n                    flag = 0;\n                    ans++;\n                }\n            }\n            // If the array is already in increasing or decreasing order\n            else {\n                // If still increasing, continue to next element\n                if (arr[i] > arr[i - 1] && flag == 1) continue;\n                // If increasing after decreasing, update flag to 1, increment answer\n                // and check if it is the shortest unordered subarray\n                else if (arr[i] > arr[i - 1] && flag == 0) {\n                    flag = 1;\n                    ans++;\n                    if (ans >= 3 && min > ans) min = ans;\n                }\n                // If still decreasing, continue to next element\n                else if (arr[i] < arr[i - 1] && flag == 0)\n                    continue;\n                // If decreasing after increasing, increment answer, update flag to 0,\n                // and check if it is the shortest unordered subarray\n                else if (arr[i] < arr[i - 1] && flag == 1) {\n                    ans++;\n                    flag = 0;\n                    if (ans >= 3 && min > ans) min = ans;\n                }\n            }\n        }\n        // If no unordered subarray is found, return 0\n        if (min == Integer.MAX_VALUE) return 0;\n        // Otherwise, return the length of the shortest unordered subarray\n        else\n            return (int)min;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def shortestUnorderedSubarray(self, arr):\n        n = len(arr)\n        # Initializing minimum length, flag, and answer variables\n        Min = float('inf')\n        flag = -1\n        ans = 1\n\n        # Iterating through the array\n        for i in range(1, n):\n            # Checking if the array is increasing or decreasing\n            if flag == -1:\n                # If increasing, set flag to 1 and increment the answer\n                if arr[i] > arr[i - 1]:\n                    flag = 1\n                    ans += 1\n                # If decreasing, set flag to 0 and increment the answer\n                else:\n                    flag = 0\n                    ans += 1\n            # If the array is already in increasing or decreasing order\n            else:\n                # If still increasing, continue to next element\n                if arr[i] > arr[i - 1] and flag == 1:\n                    continue\n                # If increasing after decreasing, update flag to 1, increment answer\n                # and check if it is the shortest unordered subarray\n                elif arr[i] > arr[i - 1] and flag == 0:\n                    flag = 1\n                    ans += 1\n                    if ans >= 3 and Min > ans:\n                        Min = ans\n                # If still decreasing, continue to next element\n                elif arr[i] < arr[i - 1] and flag == 0:\n                    continue\n                # If decreasing after increasing, increment answer, update flag to 0,\n                # and check if it is the shortest unordered subarray\n                elif arr[i] < arr[i - 1] and flag == 1:\n                    ans += 1\n                    flag = 0\n                    if ans >= 3 and Min > ans:\n                        Min = ans\n\n        # If no unordered subarray is found, return 0\n        if Min == float('inf'):\n            return 0\n        # Otherwise, return the length of the shortest unordered subarray\n        else:\n            return Min\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to find the length of the shortest unordered subarray\n    // in a given array.\n    shortestUnorderedSubarray(arr) {\n        const n = arr.length;\n        // Initializing minimum length, flag, and answer variables\n        let Min = Number.MAX_VALUE;\n        let flag = -1;\n        let ans = 1;\n\n        // Iterating through the array\n        for (let i = 1; i < n; i++) {\n            // Checking if the array is increasing or decreasing\n            if (flag === -1) {\n                // If increasing, set flag to 1 and increment the answer\n                if (arr[i] > arr[i - 1]) {\n                    flag = 1;\n                    ans++;\n                }\n                // If decreasing, set flag to 0 and increment the answer\n                else {\n                    flag = 0;\n                    ans++;\n                }\n            }\n            // If the array is already in increasing or decreasing order\n            else {\n                // If still increasing, continue to next element\n                if (arr[i] > arr[i - 1] && flag === 1) {\n                    continue;\n                }\n                // If increasing after decreasing, update flag to 1, increment answer\n                // and check if it is the shortest unordered subarray\n                else if (arr[i] > arr[i - 1] && flag === 0) {\n                    flag = 1;\n                    ans++;\n                    if (ans >= 3 && Min > ans) Min = ans;\n                }\n                // If still decreasing, continue to next element\n                else if (arr[i] < arr[i - 1] && flag === 0) {\n                    continue;\n                }\n                // If decreasing after increasing, increment answer, update flag to 0,\n                // and check if it is the shortest unordered subarray\n                else if (arr[i] < arr[i - 1] && flag === 1) {\n                    ans++;\n                    flag = 0;\n                    if (ans >= 3 && Min > ans) Min = ans;\n                }\n            }\n        }\n        // If no unordered subarray is found, return 0\n        if (Min === Number.MAX_VALUE) {\n            return 0;\n        }\n        // Otherwise, return the length of the shortest unordered subarray\n        else {\n            return Min;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}