{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705653,
            "title": "Shortest Uncommon Subsequence",
            "titleSlug": "shortest-uncommon-subsequence5746",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings <strong>S</strong> and <strong>T</strong>, find length of the shortest subsequence in <strong>S</strong> which is not a subsequence in <strong>T</strong>. If no such subsequence is possible, return -1. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. A string of length n has 2<sup>n</sup>&nbsp;different possible subsequences.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>S = </strong>\"babab\"</span>\n<span style=\"font-size: 18px;\"><strong>T = </strong>\"babba\"</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">There are no subsequences of S with\nlength less than 3 which is not a\nsubsequence of T. \"aab\" is an example of\na subsequence of length 3 which isn't a\nsubsequence of T.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>S = </strong>\"babhi\"</span>\n<span style=\"font-size: 18px;\"><strong>T = </strong>\"babij\"</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">\"h\" is a subsequence of S that is\nnot a subsequence of T.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>shortestUnSub()</strong> which takes two Strings S, and T as input and returns the shortest Uncommon Subsequence.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(|S|<sup>2</sup>*|T|)<br /><strong>Expected Auxiliary Space:</strong> O(|S|*|T|)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= |S|, |T| &lt;= 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings S and T, find the length of the shortest subsequence in S which is not a subsequence in T. If no such subsequence is possible, return -1. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. A string of length n has 2<sup>n</sup> different possible subsequences.",
                "constraints": [
                    "1 <= |S|, |T| <= 500"
                ],
                "testcases": [
                    {
                        "input": "S = \"babab\"\nT = \"babba\"",
                        "output": "3",
                        "explanation": "The shortest subsequence of S that is not a subsequence of T is of length 3. For example, \"aab\" is a subsequence of S but not of T."
                    },
                    {
                        "input": "S = \"babhi\"\nT = \"babij\"",
                        "output": "1",
                        "explanation": "The shortest subsequence of S that is not a subsequence of T is of length 1. For example, \"h\" is a subsequence of S but not of T."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Consider two strings S and T of length m and n respectively &amp; let the function to find the shortest uncommon subsequence be shortestSeq (char *S, char *T). For each character in S, if it is not present in T then that character is the answer itself.&nbsp;<br />\nOtherwise, if it is found at index k then we have the choice of either including it in the shortest uncommon subsequence or not.&nbsp; </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    int shortestUnSub(string S, string T) {\r\n        \r\n        int MAX = 9999999;\r\n        \r\n        int m = S.length(), n = T.length();\r\n \r\n        // declaring 2D array of m + 1 rows and\r\n        // n + 1 columns dynamically\r\n        int dp[m+1][n+1];\r\n     \r\n        // T string is empty\r\n        for (int i = 0; i <= m; i++)\r\n            dp[i][0] = 1;\r\n     \r\n        // S string is empty\r\n        for (int i = 0; i <= n; i++)\r\n            dp[0][i] = MAX;\r\n     \r\n        for (int i = 1; i <= m; i++)\r\n        {\r\n            for (int j = 1; j <= n; j++)\r\n            {\r\n                char ch = S[i-1];\r\n                int k;\r\n                for (k = j-1; k >= 0; k--)\r\n                    if (T[k] == ch)\r\n                        break;\r\n     \r\n                // char not present in T\r\n                if (k == -1)\r\n                    dp[i][j] = 1;\r\n                else\r\n                   dp[i][j] = min(dp[i-1][j], dp[i-1][k] + 1);\r\n            }\r\n        }\r\n     \r\n        int ans = dp[m][n];\r\n        if (ans >= MAX)\r\n            ans = -1;\r\n     \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\r\n\r\nclass Solution{\r\n    static int shortestUnSub(String S, String T) {\r\n        int MAX = 9999999;\r\n        \r\n        int m = S.length(), n = T.length();\r\n \r\n        // declaring 2D array of m + 1 rows and\r\n        // n + 1 columns dynamically\r\n        int [][] dp = new int[m+1][n+1];\r\n     \r\n        // T string is empty\r\n        for (int i = 0; i <= m; i++)\r\n            dp[i][0] = 1;\r\n     \r\n        // S string is empty\r\n        for (int i = 0; i <= n; i++)\r\n            dp[0][i] = MAX;\r\n     \r\n        for (int i = 1; i <= m; i++)\r\n        {\r\n            for (int j = 1; j <= n; j++)\r\n            {\r\n                char ch = S.charAt(i-1);\r\n                int k;\r\n                for (k = j-1; k >= 0; k--)\r\n                    if (T.charAt(k) == ch)\r\n                        break;\r\n     \r\n                // char not present in T\r\n                if (k == -1)\r\n                    dp[i][j] = 1;\r\n                else\r\n                   dp[i][j] = Math.min(dp[i-1][j], dp[i-1][k] + 1);\r\n            }\r\n        }\r\n     \r\n        int ans = dp[m][n];\r\n        if (ans >= MAX)\r\n            ans = -1;\r\n     \r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "\r\nimport math\r\n\r\nclass Solution:\r\n    def __init__(self):\r\n        self.indices={} #stores last index of ch in substring T[j]\r\n    def shortestUnSub(self, S, T):\r\n        # code here \r\n        m= len(S)\r\n        n= len(T)\r\n        dp=[[0]*(n+1) for _ in range(m+1)]\r\n        \r\n        for i in range(n+1):\r\n            dp[0][i]=501 #string S is empty which is always a subsequence of T\r\n            \r\n        for i in range(1, m+1):\r\n            dp[i][0]= 1 #string T is empty so shortest uncommon subsequence \r\n            #is any char in S of length 1\r\n            \r\n        for i in range(1, m+1):\r\n            for j in range(1, n+1):\r\n                k=j-1\r\n                ch= S[i-1]\r\n                if(ch==T[k]):\r\n                    self.indices[ch]=k\r\n                elif(ch in self.indices):\r\n                    k= self.indices[ch]\r\n                else:\r\n                    while(k>=0):\r\n                        if(T[k]==S[i-1]): #char S[i-1] is present at index k in T\r\n                            break\r\n                        k-=1\r\n                    self.indices[ch]=k\r\n                if(k==-1): #char s[i-1] not found in substring T[:j] and hence SUS\r\n                    dp[i][j]=1\r\n                \r\n                else: # char s[i-1] found at index k in T so we can either include\r\n                #it in SUS or not\r\n                    dp[i][j]= min(dp[i-1][j], 1+dp[i-1][k])\r\n                ans= dp[i][j]\r\n                if ans>= 501:\r\n                    ans=-1\r\n        return ans\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {string} S\r\n * @param {string} T\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to find the length of smallest subsequence \r\n    //which is not part of both given strings.\r\n    shortestUnSub(S, T)\r\n    {\r\n        // code here \r\n        let m= S.length;\r\n        let n= T.length;\r\n        let dp= new Array(m+1);\r\n        for(let i=0; i<=m; i++){\r\n            dp[i]= new Array(n+1).fill(0);\r\n        }\r\n        \r\n        for(let i=0; i<=n; i++){\r\n            dp[0][i]= 501; //string S is empty which is always a subsequence of T\r\n        }\r\n        \r\n        for(let i=1; i<=m; i++){\r\n            dp[i][0]= 1; //string T is empty so shortest uncommon subsequence \r\n            //is any char in S of length 1\r\n        }\r\n        \r\n        let indices= {};\r\n        for(let i=1; i<=m; i++){\r\n            for(let j=1; j<=n; j++){\r\n                let k= j-1;\r\n                let ch= S[i-1];\r\n                if(ch===T[k]){\r\n                    indices[ch]= k;\r\n                }else if(ch in indices){\r\n                    k= indices[ch];\r\n                }else{\r\n                    while(k>=0){\r\n                        if(T[k]===S[i-1]){ //char S[i-1] is present at index k in T\r\n                            break;\r\n                        }\r\n                        k-=1;\r\n                    }\r\n                    indices[ch]= k;\r\n                }\r\n                if(k===-1){ //char s[i-1] not found in substring T[:j] and hence SUS\r\n                    dp[i][j]=1;\r\n                }else{ // char s[i-1] found at index k in T so we can either include\r\n                //it in SUS or not\r\n                    dp[i][j]= Math.min(dp[i-1][j], 1+dp[i-1][k]);\r\n                }\r\n            }\r\n        }\r\n        let ans= dp[m][n];\r\n        if(ans>= 501){\r\n            ans=-1;\r\n        }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}