{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714246,
            "title": "Shortest XY distance in Grid",
            "titleSlug": "shortest-xy-distance-in-grid--170647",
            "content": "<p><span style=\"font-size:18px\">Given a <strong>N*M </strong>grid of characters &#39;O&#39;, &#39;X&#39;, and &#39;Y&#39;. Find the minimum&nbsp;Manhattan&nbsp;distance between a&nbsp;<strong>X</strong> and a&nbsp;<strong>Y</strong>.</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><u>Manhattan&nbsp;Distance</u> :<br />\r\n<strong>| row_index_x - row_index_y | + | column_index_x - column_index_y |</strong></span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 4, M = 4\r\ngrid  = {{X, O, O, O}\r\n\\t   {O, Y, O, Y}\r\n\\t   {X, X, O, O}\r\n\\t   {O, Y, O, O}}</span>\r\n<span style=\"font-size:18px\"><strong>Output:\r\n</strong>1\r\n<strong>Explanation:</strong>\r\n{{X, O, O, O}\r\n{O, Y, O, Y}\r\n{X, <strong>X</strong>, O, O}\r\n{O, <strong>Y</strong>, O, O}}\r\nThe shortest X-Y distance in the grid is 1.\r\nOne possible such X and Y are marked in bold\r\nin the above grid.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 3, M = 3\r\ngrid = {{X, X, O}\r\n\\t  {O, O, Y}\r\n\\t  {Y, O, O}}\r\n<strong>Output :</strong>\r\n2</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\n{{X, <strong>X</strong>, O}\r\n {O, O, <strong>Y</strong>}\r\n {Y, O, O}}</span>\r\n<span style=\"font-size:18px\">The shortest X-Y distance in the grid is 2.\r\nOne possible such X and Y are marked in bold\r\nin the above grid.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>shortestXYDist()</strong>&nbsp;which takes two integers N, and M and an 2D list of size N*M as input and returns the shortest Manhattan&nbsp;Distance between a X and a Y.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*M)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N*M)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N*M &le; 10<sup>5</sup><sup>&nbsp;</sup></span></p>\r\n\r\n<p><span style=\"font-size:18px\">There exists at least one &#39;X&#39; and at least one &#39;Y&#39; in the grid.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N*M grid of characters 'O', 'X', and 'Y', find the minimum Manhattan distance between an 'X' and a 'Y'.\n\nManhattan Distance: |row_index_x - row_index_y| + |column_index_x - column_index_y|",
                "constraints": [
                    "1 <= N*M <= 10^5",
                    "There exists at least one 'X' and at least one 'Y' in the grid."
                ],
                "testcases": [
                    {
                        "input": "N = 4, M = 4\ngrid  = {{X, O, O, O}\n\t   {O, Y, O, Y}\n\t   {X, X, O, O}\n\t   {O, Y, O, O}}",
                        "output": "1",
                        "explanation": "The grid contains multiple 'X' and 'Y' characters. The minimum Manhattan distance between an 'X' at (2,1) and a 'Y' at (3,1) is |2-3| + |1-1| = 1."
                    },
                    {
                        "input": "N = 3, M = 3\ngrid = {{X, X, O}\n\t  {O, O, Y}\n\t  {Y, O, O}}",
                        "output": "2",
                        "explanation": "The minimum Manhattan distance is 2. For example, the 'X' at (0,1) and the 'Y' at (1,2) give a distance of |0-1| + |1-2| = 1 + 1 = 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to use Dyanmmic Programming to find the nearest &#39;X&#39; character from each grid cell.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int shortestXYDist(vector<vector<char>> grid, int N, int M) {\r\n        int dist[N][M];\r\n        for (int i = 0; i < N; i++) {\r\n            for (int j = 0; j < M; j++) {\r\n                dist[i][j] = 1e9;\r\n            }\r\n        }\r\n\r\n        // check top and left\r\n        for (int i = 0; i < N; i++) {\r\n            for (int j = 0; j < M; j++) {\r\n                if (grid[i][j] == 'X')\r\n                    dist[i][j] = 0;\r\n                else {\r\n                    if (i > 0) dist[i][j] = min(dist[i][j], dist[i - 1][j] + 1);\r\n                    if (j > 0) dist[i][j] = min(dist[i][j], dist[i][j - 1] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // check bottom and right\r\n        for (int i = N - 1; i >= 0; i--) {\r\n            for (int j = M - 1; j >= 0; j--) {\r\n                if (grid[i][j] == 'X')\r\n                    dist[i][j] = 0;\r\n                else {\r\n                    if (i < N - 1)\r\n                        dist[i][j] = min(dist[i][j], dist[i + 1][j] + 1);\r\n                    if (j < M - 1)\r\n                        dist[i][j] = min(dist[i][j], dist[i][j + 1] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        int ans = 1e9;\r\n\r\n        for (int i = 0; i < N; i++) {\r\n            for (int j = 0; j < M; j++) {\r\n                if (grid[i][j] == 'Y') ans = min(ans, dist[i][j]);\r\n            }\r\n        }\r\n\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static int shortestXYDist(ArrayList<ArrayList<Character>> grid, int N,\r\n                              int M) {\r\n        int[][] dist = new int[N][M];\r\n\r\n        for (int i = 0; i < N; i++) {\r\n            for (int j = 0; j < M; j++) {\r\n                dist[i][j] = 1000000000;\r\n            }\r\n        }\r\n\r\n        // check top and left\r\n        for (int i = 0; i < N; i++) {\r\n            for (int j = 0; j < M; j++) {\r\n                if (grid.get(i).get(j) == 'X')\r\n                    dist[i][j] = 0;\r\n                else {\r\n                    if (i > 0)\r\n                        dist[i][j] = Math.min(dist[i][j], dist[i - 1][j] + 1);\r\n                    if (j > 0)\r\n                        dist[i][j] = Math.min(dist[i][j], dist[i][j - 1] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // check bottom and right\r\n        for (int i = N - 1; i >= 0; i--) {\r\n            for (int j = M - 1; j >= 0; j--) {\r\n                if (grid.get(i).get(j) == 'X')\r\n                    dist[i][j] = 0;\r\n                else {\r\n                    if (i < N - 1)\r\n                        dist[i][j] = Math.min(dist[i][j], dist[i + 1][j] + 1);\r\n                    if (j < M - 1)\r\n                        dist[i][j] = Math.min(dist[i][j], dist[i][j + 1] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        int ans = 1000000000;\r\n\r\n        for (int i = 0; i < N; i++) {\r\n            for (int j = 0; j < M; j++) {\r\n                if (grid.get(i).get(j) == 'Y') ans = Math.min(ans, dist[i][j]);\r\n            }\r\n        }\r\n\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n\r\n\r\nclass Solution:\r\n    def shortestXYDist(self, grid, N, M):\r\n        dist = [[float('inf')] * M for _ in range(N)]\r\n        \r\n        # check top and left\r\n        for y in range(N):\r\n            for x in range(M):\r\n                if grid[y][x] == 'X':\r\n                    dist[y][x] = 0\r\n                else:\r\n                    if y > 0:\r\n                        dist[y][x] = min(dist[y][x], dist[y - 1][x] + 1)\r\n                    if x > 0:\r\n                        dist[y][x] = min(dist[y][x], dist[y][x - 1] + 1)\r\n        \r\n        # check bottom and right\r\n        for y in range(N - 1, -1, -1):\r\n            for x in range(M - 1, -1, -1):\r\n                if grid[y][x] == 'X':\r\n                    dist[y][x] = 0\r\n                else:\r\n                    if y < N - 1:\r\n                        dist[y][x] = min(dist[y][x], dist[y + 1][x] + 1)\r\n                    if x < M - 1:\r\n                        dist[y][x] = min(dist[y][x], dist[y][x + 1] + 1)\r\n        \r\n        # return mininum distance\r\n        ans = 1e9\r\n        \r\n        for i in range(N):\r\n            for j in range(M):\r\n                if grid[i][j] == 'Y':\r\n                    ans = min(ans, dist[i][j])\r\n        \r\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[][]} grid\n * @param {number} N\n * @param {number} M\n * @returns {number}\n*/\nclass Solution {\n    // Function to find the shortest distance between two cells of the grid.\n    shortestXYDist(grid, N, M) {\n        let dist = Array.from(Array(N), () => Array(M).fill(Infinity));\n        \n        // check top and left\n        for (let y = 0; y < N; y++) {\n            for (let x = 0; x < M; x++) {\n                if (grid[y][x] === 'X') {\n                    dist[y][x] = 0;\n                } else {\n                    if (y > 0) {\n                        dist[y][x] = Math.min(dist[y][x], dist[y - 1][x] + 1);\n                    }\n                    if (x > 0) {\n                        dist[y][x] = Math.min(dist[y][x], dist[y][x - 1] + 1);\n                    }\n                }\n            }\n        }\n        \n        // check bottom and right\n        for (let y = N - 1; y >= 0; y--) {\n            for (let x = M - 1; x >= 0; x--) {\n                if (grid[y][x] === 'X') {\n                    dist[y][x] = 0;\n                } else {\n                    if (y < N - 1) {\n                        dist[y][x] = Math.min(dist[y][x], dist[y + 1][x] + 1);\n                    }\n                    if (x < M - 1) {\n                        dist[y][x] = Math.min(dist[y][x], dist[y][x + 1] + 1);\n                    }\n                }\n            }\n        }\n        \n        // return mininum distance\n        let ans = Infinity;\n        \n        for (let i = 0; i < N; i++) {\n            for (let j = 0; j < M; j++) {\n                if (grid[i][j] === 'Y') {\n                    ans = Math.min(ans, dist[i][j]);\n                }\n            }\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}