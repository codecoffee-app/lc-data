{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704386,
            "title": "Shreyansh and his bits",
            "titleSlug": "shreyansh-and-his-bits1420",
            "content": "<p>Shreyansh has an integer N. He is really curious about the binary representation of integers. He sees that any given integer has a number of set bits. Now he wants to find out that how many positive integers, strictly less than N, have the <strong>same number of set bits as N</strong>.<br />\r\nHe is a little weak in maths. Help him find the number of integers.<br />\r\n<strong>Note</strong> : Since N takes large values, brute force won&#39;t work.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input</strong>:\r\nN = 8\r\n<strong>Output:</strong>&nbsp;3\r\n<strong>Explanation</strong>:\r\nBinary representation of 8 : 1000\r\nSo the integers less than 8 with \r\nsame number of set bits are : 4, 2, 1\r\nHence, the result is 3.  \r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nN = 4\r\n<strong>Output:&nbsp;</strong>2\r\nExplanation:\r\nBinary representation of 4 : 100\r\nSo the integers less than 4 with \r\nsame number of set bits are : 2, 1\r\nSo, The result is 2.\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>count()</strong>&nbsp;which takes the integer&nbsp;N<strong>&nbsp;</strong>as input parameters and returns the required answer.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong> O(log(n))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(log(n)*log(n))<br />\r\n&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Constraints :</strong>&nbsp;<br />\r\n1 &lt;= N &lt;= 10^12</p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, determine the number of positive integers strictly less than N that have the same number of set bits (1s in their binary representation) as N.",
                "constraints": [
                    "1 <= N <= 10^12"
                ],
                "testcases": [
                    {
                        "input": "8",
                        "output": "3",
                        "explanation": "The binary representation of 8 is 1000, which has one set bit. The positive integers less than 8 with one set bit are 4 (100), 2 (010), and 1 (001). Therefore, the answer is 3."
                    },
                    {
                        "input": "4",
                        "output": "2",
                        "explanation": "The binary representation of 4 is 100, which has one set bit. The positive integers less than 4 with one set bit are 2 (010) and 1 (001). Therefore, the answer is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We need to count the number of integers less than N with same number of bits.<br />\nFor this, we first write the binary representation of N. We need integers less than N, so for each set bit in the binary representation of N, we will calculate that in how many ways the numbers of set bits on the right of each set bit can be arranged.</p>\n\n<p>For example,&nbsp;<br />\nN = 10<br />\nBinary representation = 1010</p>\n\n<p><strong>For the 1st set bit</strong><br />\n<strong>1</strong>010</p>\n\n<p>We have 2 set bits on the right (including itself), which needs to be arranged in 3 places.<br />\nSo, answer += 3C2 or nCr(3,2)</p>\n\n<p><strong>For the 2nd set bit</strong><br />\n10<strong>1</strong>0</p>\n\n<p>We have 1 set bit on the right (including itself), which need to be arranged in 1&nbsp;places.<br />\nSo, answer += 1C1 or nCr(1,1)</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nconst int kN = 40;\nlong long cache[kN][kN];\nclass Solution{\npublic:\n    \n    // Function to calculate the binomial coefficient\n    long long ncr(int n, int r) {\n        // base cases\n        if (r > n) {\n            return 0;\n        }\n        if (r == 0 || r == n) {\n            return 1;\n        }\n        // if already calculated, return from cache\n        if (cache[n][r] != -1) {\n            return cache[n][r];\n        }\n        \n        // calculate and store in cache\n        auto res = ncr(n-1, r-1) + ncr(n-1, r);\n        return (cache[n][r] = res);\n    }\n    \n    // Function to count the number of set bits\n    long long count(long long x) {\n        // initialize the cache with -1\n        for (int i = 0; i < kN; i++) {\n            for (int j = 0; j < kN; j++) {\n                cache[i][j] = -1;\n            }\n        }\n        \n        // iterate through each bit of x\n        long long res = 0;\n        int ones = 0; // count of set bits\n        int bits = 0; // total number of bits\n        \n        while (x != 0) {\n            // if current bit is set, add the count of combinations to res\n            if (x&1) {\n                res += ncr(bits, ++ones);\n            }\n            bits++;\n            x >>= 1; // shift x to the right to check the next bit\n        }\n        \n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    long cache[][]; // Declaring a 2D array to store previously calculated values\n    long count(long n) {\n        // Code Here\n        \n        cache=new long[40][40]; // Initializing the cache array with -1\n        for(int i=0;i<40;i++){\n            Arrays.fill(cache[i],-1);\n        }\n        \n        int one=0; // Variable to count the number of ones in the binary representation of n\n        long ans=0; // Variable to store the answer\n        int bits=0; // Variable to count the number of bits in the binary representation of n\n        \n        while(n>0){\n            if((n&1L)!=0){ // Checking if the rightmost bit is 1\n                one++; // Incrementing the count of ones\n                ans+=nCr(bits,one); // Calculating and adding the combination value to the answer\n            }\n            n>>=1; // Shifting n one bit to the right\n            bits++; // Incrementing the count of bits\n        }\n        \n        return ans; // Returning the final answer\n    }\n    \n    long nCr(int n,int r) {\n        if(r>n)return 0; // If r is greater than n, return 0 as it is not possible to select r elements from n\n        \n        if(r==0 || r==n)return 1; // If r is 0 or equal to n, return 1 as there's only one way to select 0 or n elements from n\n        \n        if(cache[n][r]!=-1){ // If the value is already calculated and stored in the cache, return it\n            return cache[n][r];\n        }\n        \n        return cache[n][r]=nCr(n-1,r-1)+nCr(n-1,r); // Calculating the combination value recursively and storing it in the cache\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    def ncr(self,n,r):\n        # base cases for nCr\n        if r>n:\n            return 0\n        if r==0 or r==n:\n            return 1\n        if self.cache[n][r]!=-1:\n            return self.cache[n][r]\n        # recursively calculate nCr\n        res=self.ncr(n-1,r-1)+self.ncr(n-1,r)\n        self.cache[n][r]=res\n        return res\n    \n    def count (self, N):\n        # initialize cache for memoization\n        self.cache=[[-1]*(40) for _ in range(40)]\n        res=0\n        ones=0\n        bits=0\n        # iterate through each bit of N\n        while N!=0:\n            # if the bit is 1, calculate the number of 1's among previous bits\n            if N&1:\n                res+=self.ncr(bits,ones+1)\n                ones+=1\n            bits+=1\n            # right shift N by 1 bit\n            N>>=1\n        return res",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}