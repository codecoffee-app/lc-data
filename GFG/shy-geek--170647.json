{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714001,
            "title": "Shy Geek",
            "titleSlug": "shy-geek--170647",
            "content": "<p><span style=\"font-size: 18px;\">Geek went to buy some chocolates from a nearby shop with <strong>k</strong> coins in his pocket. He found that the shop contains <strong>n</strong> chocolates which are arranged in <strong>sorted order (increasing)</strong> of their prices.<br /><br />Now geek wants to taste costlier chocolates so he decided that <strong>he will buy the costliest chocolate</strong> (of course among the ones that he can afford) till there exists at least one type of chocolate he can afford. You may assume that there is an infinite supply of chocolates in the shop Geek visited.<br /><br />As you know, Geek is a shy person and hence<strong> he will enquire about the prices of the chocolates at most 50 times</strong> from the shopkeeper. Now, your task is to <strong>find the number of chocolates he had enjoyed</strong>.&nbsp;<br /><br /><em><strong>Note:</strong>&nbsp;If you call the Shop.get function more than 50 times it will return -1. Price of chocolates are pairwise distinct.</em></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong> </span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>3 5 \n2 4 6</span>\n\n<span style=\"font-size: 18px;\"><strong>Output:\n</strong>1</span>\n\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong> The prices of chocolates are [2, 4, 6] and Geek had 5 coins with him. So he can only buy chocolate that costs 4 coins (since he always picks the costliest one).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong> </span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n4 9 \n1 2 3 4</span>\n\n<span style=\"font-size: 18px;\"><strong>Output:\n</strong>3</span>\n\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong> The prices of chocolates are [1, 2, 3, 4] and Geek had 9 coins with him. So he can buy two chocolates that cost 4 coins. Thereafter, he had only 1 coin with him, hence he will have 1 more chocolate (that costs 1 coin).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Return the number of chocolates geeks had eaten. Use the get(int i) function to inquire about the price of the i'th chocolate.&nbsp;<br />Note that, you can only call that function 50 times after which it will return -1. <strong>Test cases are generated such that the answer can always be found.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(logN)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(logN)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />0 &lt; n &lt; 10<sup>5</sup><br />0 &lt; priceOfChocolate &lt; = 10<sup>7&nbsp;</sup><br />0 &lt; k &lt;= 10<sup>12&nbsp;</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek wants to buy chocolates from a shop with `k` coins. The shop has `n` chocolates with prices in sorted (increasing) order. Geek always buys the most expensive affordable chocolate until he can't afford any more. He can only ask the shopkeeper for prices at most 50 times. Find the total number of chocolates Geek buys.",
                "constraints": [
                    "0 < n < 10^5",
                    "0 < priceOfChocolate <= 10^7",
                    "0 < k <= 10^12"
                ],
                "testcases": [
                    {
                        "input": "3 5\n2 4 6",
                        "output": "1",
                        "explanation": "The chocolate prices are [2, 4, 6]. Geek has 5 coins. He buys the chocolate costing 4 coins."
                    },
                    {
                        "input": "4 9\n1 2 3 4",
                        "output": "3",
                        "explanation": "The chocolate prices are [1, 2, 3, 4]. Geek has 9 coins. He buys two chocolates costing 4 coins each. He then has 1 coin left and buys the chocolate costing 1 coin."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Binary Search.</span></p>",
            "<p><span style=\"font-size:18px\">Try storing the result of binary search for future use.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Macro to define a long long datatype\n#define ll long long\n\nclass Solution {\n  public:\n    Shop shop;\n    // Constructor to initialize the shop object\n    Solution(Shop s)\n    {\n        this->shop = s;\n    }\n    \n    // Helper function to get the value at position q\n    ll help(int q, map<int,ll> &m, Shop &sp)\n    {\n        // If value already calculated, return it\n        if(m.find(q)!=m.end())\n            return m[q];\n            \n        // Calculate and store the value at position q\n        return m[q] = sp.get(q-1);        \n    }\n    \n    // Main function to find the answer\n    long long find(int n, long long k) {\n        // Create a map to store previously calculated values\n        map<int,ll> m;\n        \n        // Initialize the answer to 0\n        long long ans = 0;\n        \n        // Find the quotient and remainder when k is divided by help(n,m,this->shop)\n        ans += k/help(n,m,this->shop);\n        k %= help(n,m,this->shop);\n        \n        // Initialize the left and right indices for binary search\n        int l = 0,r = n;\n\n        // Iterate until l is equal to 0\n        while(1)\n        {\n            // Reset l to 0\n            l = 0;\n\n            // Perform binary search to find the largest value of l\n            while(l+1<r)\n            {\n                // Calculate the middle index\n                int mid = (l+r)/2;\n\n                // If help(mid,m,this->shop) is less than or equal to k, update l\n                if(help(mid,m,this->shop)<=k)\n                    l = mid;\n\n                // Otherwise, update r\n                else \n                    r = mid;\n            }\n\n            // If l is equal to 0, break the loop\n            if(l==0)\n                break;\n\n            // Update the answer and k\n            ans += k/help(l,m,this->shop);\n            k %= help(l,m,this->shop);\n        }\n\n        // Return the final answer\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    static Shop shop;\r\n    Solution(Shop shop){\r\n        this.shop = shop;\r\n    }\r\n    static long find(int n, long k){\r\n        int low = 0, high = n - 1;\r\n        int count = 0;\r\n        Map<Integer, Long> hm = new HashMap<>();\r\n        while(k > 0){\r\n            low = 0;\r\n            while(low <= high){\r\n                int mid = (low+high)/2;\r\n                long temp;\r\n                if(!hm.containsKey(mid))\r\n                    temp = shop.get(mid);\r\n                else\r\n                    temp = hm.get(mid);\r\n                \r\n                hm.put(mid, temp);\r\n                if(temp <= k)\r\n                    low = mid + 1;\r\n                else \r\n                    high = mid - 1;\r\n            }\r\n            if(high == -1)\r\n                break;\r\n            count += (k/hm.get(high));\r\n            \r\n            k-=(k/hm.get(high))*hm.get(high);\r\n            \r\n        }\r\n        return count;\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    shop = Shop()\n\n    def __init__(self, shop):\n        self.shop = shop\n\n    def find(self, n, k):\n        low = 0\n        high = n - 1\n        count = 0\n        hm = dict()\n        while (k > 0):\n            low = 0\n            while (low <= high):\n                mid = (low + high) // 2\n                temp = 0\n                if (mid not in hm):\n                    temp = self.shop.get(mid)\n                else:\n                    temp = hm[mid]\n                hm[mid] = temp\n                if (temp <= k):\n                    low = mid + 1\n                else:\n                    high = mid - 1\n            if high == -1:\n                break\n            count += (k // (hm[high]))\n            k -= (k // hm[high]) * hm[high]\n        return count\n",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}