{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703086,
            "title": "Sick Pasha",
            "titleSlug": "sick-pasha0323",
            "content": "<p><span style=\"font-size:18px\">Pasha has been very sick. His platelets went way down. Being a paranoid person, he consulted N doctors about the optimal range in which Platelet Count should lie. The </span><span style=\"font-size:18px\">i-th</span><span style=\"font-size:18px\"> doctor suggested that the Platelet count should be between li and </span><span style=\"font-size:18px\">ri, inclusive, to be called normal.<br />\r\nNow, Pasha thinks that a Platelet count is Safe to have if at least K&nbsp;Doctors recommend it. Pasha now asks Q Queries. In each query- he will give an integer P (the platelet count). Pasha wants to know if the entered Platelet count is safe to have or not.</span><br />\r\n<br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Example 1:</strong></span><br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\n<span style=\"font-size:20px\"><strong>Input :</strong> \r\nV[] = {[1, 10], [5, 7], [7, 12], \r\n    [15, 25], [20, 25]}, K = 3, \r\nqueries[] = {7, 5, 10, 16}\r\n<strong>Output :</strong> \r\nYes\r\nNo\r\nYes\r\nNo\r\n<strong>Explanation:\r\nThe first query :</strong> 7 is in [1,10] , \r\n[5,10] , [7,12] So recommended by 3 \r\nDoctors-YES\r\n<strong>The second query :</strong> 5 is in [1,10] , \r\n[5,10] recommended by 2 doctors- &quot;No&quot;\r\n<strong>The third query :</strong> 10 is in [1,10] , \r\n[5,10] , [7,12] recommended by 3 \r\ndoctors- &quot;Yes&quot;\r\n<strong>The Fourth query :</strong> 16 is in [15,25]\r\nrecommended by 1 doctors- &quot;No&quot;</span><span style=\"font-size:20px\">\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:20px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>QueryComputation()</strong> that takes the size of an array <strong>(N)</strong>, a 2-d&nbsp;array <strong>(arr)</strong>, integer <strong>K</strong>,&nbsp; no. of queries <strong>q, </strong>an<strong>&nbsp;</strong>array of queries <strong>(queries)</strong>, and return the boolean array that has true if the query is true else false. The driver code takes care of the printing.</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N + Q).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N).</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N,Q &le; 2*10<sup>5</sup><br />\r\n1 &le; Z &le; N<br />\r\n1 &le; Li &le; Ri &le; 2*10<sup>5</sup><br />\r\n1 &le; P &le; 2*10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Pasha, concerned about his low platelet count, consults N doctors for the optimal platelet count range. The i-th doctor suggests the platelet count should be between li and ri (inclusive) to be considered normal. A platelet count is deemed 'Safe' if at least K doctors recommend it. Given Q queries, each containing a platelet count P, determine if each P is 'Safe'.",
                "constraints": [
                    "1 <= N, Q <= 2 * 10^5",
                    "1 <= Li <= Ri <= 2 * 10^5",
                    "1 <= P <= 2 * 10^5"
                ],
                "testcases": [
                    {
                        "input": "V[] = {[1, 10], [5, 7], [7, 12], [15, 25], [20, 25]}, K = 3, queries[] = {7, 5, 10, 16}",
                        "output": "Yes\nNo\nYes\nNo",
                        "explanation": "Query 1 (7): Doctors recommending 7: [1,10], [5, 7], [7,12] (3 doctors). Since 3 >= K (3), output is Yes.\nQuery 2 (5): Doctors recommending 5: [1,10], [5, 7] (2 doctors). Since 2 < K (3), output is No.\nQuery 3 (10): Doctors recommending 10: [1,10], [5, 7],[7,12](3 doctors). Since 3 >= K (3), output is Yes.\nQuery 4 (16): Doctors recommending 16: [15, 25] (1 doctor). Since 1 < K (3), output is No."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We need to do this -<br />\nSomehow Create an array DOC where DOC[i] is the number of Doctors that recommend &#39;i&#39; PlateletCount .<br />\nNOTE: WE need to do it Efficiently. The efficient approach is discussed below.</span></p>\n\n<p><span style=\"font-size:18px\">We can Solve this question with data structures like- Segment trees, Fenwick trees, etc.<br />\nBut, The simplicity of the problem enables us to solve it without using advanced DS too.</span></p>\n\n<p>&nbsp;</p>\n\n<p><br />\n<span style=\"font-size:18px\">A simple approach That I can think of is this- Initialize REM with all zeroes. For Doctors that recommends Platelet Count between li and ri,<br />\nwe should increment REM[li] and decrement REM[ri + 1].</span></p>\n\n<p><span style=\"font-size:18px\">Now, we can Find Cumulative Sum of this array .<br />\nNow, REM[i] is the Count of Doctors who thinks Platelet Count i is safe.</span></p>\n\n<p><span style=\"font-size:18px\">Now, What we need to do is See, If REM[i] is atleast Z - that is atleast Z Doctors consider it safe.<br />\nCount it in.<br />\nAgain You can apply the Cumulative sum technique to find which all are recommended by atleast Z doctors.<br />\nNow each query can be answered in constant time.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to compute the query results for given inputs\nvector<bool> QueryComputation(int n, vector<vector<int>> &v, int k, int q, int *queries){\n    \n    int X = 2e5 + 10; // Maximum value for array size\n    \n    int pre[X]; // Prefix array to store the count of elements\n    \n    memset(pre,0,sizeof(pre)); // Initializing prefix array with 0\n    \n    int l = 0; // Variable to store maximum value\n    \n    // Computing prefix array and maximum value\n    for(int i=0;i<n;i++){\n        pre[v[i][0]] += 1; // Incrementing count at start index\n        pre[v[i][1] + 1] -=1; // Decrementing count at end index + 1\n        l = max({l, v[i][1], v[i][0]}); // Updating maximum value\n    }\n    l ++; // Incrementing maximum value by 1\n    \n    // Computing cumulative sum of prefix array\n    for(int i=1;i<=l;i++){\n        pre[i] = pre[i] + pre[i-1];    \n    }\n    \n    vector<bool> ans; // Vector to store query results\n    \n    // Calculating query results\n    for(int i=0;i<q;i++){\n        if(pre[queries[i]] >= k)    ans.push_back(true);\n        else                        ans.push_back(false);\n    }\n    \n    return ans; // Returning the query results\n    \n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}