{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703149,
            "title": "Sid and his prime money",
            "titleSlug": "sid-and-his-prime-money5736",
            "content": "<p><span style=\"font-size: 18px;\">Given an array<strong> arr[]</strong> of selling prices in the cities, find the longest subsequence of consecutive cities where prices are strictly increasing. Also, calculate the maximum sum of prime numbers in that subsequence. If multiple subsequences have the same length, choose the one with the highest prime sum. If no primes are present, the prime sum is 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 2, 3, 5, 1, 6, 7, 8, 9]\n<strong>Output:</strong> [5, 7]\n<strong>Explanation: </strong>5 cities are maximum number of cities in which the trend followed, And  amount in those cities were 1, 6, 7, 8, 9.  Out of  these  amounts only 7 is prime money.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 3, 5, 7, 4, 1, 6, 5, 4, 8]\n<strong>Output: </strong>[4, 17]\n<strong>Explanation: </strong>4 cities are maximum number of cities in which the trend followed, And  amount in those cities were 2, 3, 5, 7. Out of  these amounts, maximum total prime money is 2+3+5+7=17.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 2, 2, 2, 2]\n<strong>Output: </strong>[1, 2]\n<strong>Explanation: </strong>He was successful in one city only, And maximum total prime money is 2.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n sqrt(n))<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>5 </sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Identify consecutive increasing subsequences, then sum the prime numbers within those subsequences to find the longest subsequence and the maximum prime sum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if a number is prime or not.\n    bool prime(int x) {\n        if (x < 2)\n            return false;\n        for (int i = 2; i <= sqrt(x); i++) {\n            if (x % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    // Function to find the maximum consecutive increasing subsequence and\n    // the sum of prime numbers in that subsequence.\n    vector<int> primeMoney(vector<int>& arr) {\n        int n = arr.size();\n        if (n == 0)\n            return {0, 0}; // Edge case if array is empty.\n\n        // Vectors to store the length of increasing subsequences and the start-end\n        // indices of them.\n        vector<int> c, d;\n\n        int max1 = 1;    // For tracking maximum length of increasing subsequences.\n        int max2;        // For tracking the length of current increasing subsequence.\n        int amount2 = 0; // To store the maximum sum of prime numbers in subsequences.\n\n        // Iterating through the array.\n        for (int i = 0; i < n - 1; i++) {\n            max2 = 1;\n            if (arr[i] < arr[i + 1]) {\n                d.push_back(i); // Starting index of the subsequence.\n\n                // Finding the length of the consecutive increasing subsequence.\n                while (i < n - 1 && arr[i] < arr[i + 1]) {\n                    max2++;\n                    i++;\n                }\n\n                c.push_back(max2); // Storing the length of the subsequence.\n                d.push_back(i);    // Ending index of the subsequence.\n\n                if (max1 < max2) {\n                    max1 = max2; // Updating the max length of subsequence.\n                }\n            }\n        }\n\n        // If no increasing subsequence was found.\n        if (c.empty()) {\n            for (int i = 0; i < n; i++) {\n                if (prime(arr[i])) {\n                    amount2 = max(amount2, arr[i]); // Finding the largest prime number.\n                }\n            }\n        }\n        // If there are increasing subsequences.\n        else {\n            for (int i = 0; i < c.size(); i++) {\n                if (c[i] == max1) { // If the subsequence has the max length.\n                    int amount1 = 0;\n                    for (int m = d[2 * i]; m <= d[2 * i + 1]; m++) {\n                        if (prime(arr[m])) {\n                            amount1 +=\n                                arr[m]; // Sum of prime numbers in the subsequence.\n                        }\n                    }\n                    amount2 = max(amount2, amount1); // Updating the max sum of primes.\n                }\n            }\n        }\n\n        return {max1, amount2};\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "import java.util.*;\n\nclass Solution {\n\n    // Function to check if a number is prime.\n    public static boolean isPrime(int x) {\n        if (x < 2) return false;\n        for (int i = 2; i <= Math.sqrt(x); i++) {\n            if (x % i == 0) return false;\n        }\n        return true;\n    }\n\n    // Function to find the maximum consecutive increasing subsequence and\n    // the sum of prime numbers in that subsequence.\n    public static List<Integer> primeMoney(int arr[]) {\n        int n = arr.length;\n        if (n == 0) return Arrays.asList(0, 0); // Edge case if array is empty.\n\n        List<Integer> c = new ArrayList<>();\n        List<Integer> d = new ArrayList<>();\n        int max1 = 1;    // For tracking maximum length of increasing subsequences.\n        int max2;        // For tracking the length of current increasing subsequence.\n        int amount2 = 0; // To store the maximum sum of prime numbers in subsequences.\n\n        // Iterating through the array.\n        for (int i = 0; i < n - 1; i++) {\n            max2 = 1;\n            if (arr[i] < arr[i + 1]) {\n                d.add(i); // Starting index of the subsequence.\n\n                // Finding the length of the consecutive increasing subsequence.\n                while (i < n - 1 && arr[i] < arr[i + 1]) {\n                    max2++;\n                    i++;\n                }\n\n                c.add(max2); // Storing the length of the subsequence.\n                d.add(i);    // Ending index of the subsequence.\n\n                if (max1 < max2) {\n                    max1 = max2; // Updating the max length of subsequence.\n                }\n            }\n        }\n\n        // If no increasing subsequence was found.\n        if (c.isEmpty()) {\n            for (int i = 0; i < n; i++) {\n                if (isPrime(arr[i])) {\n                    amount2 =\n                        Math.max(amount2, arr[i]); // Finding the largest prime number.\n                }\n            }\n        }\n        // If there are increasing subsequences.\n        else {\n            for (int i = 0; i < c.size(); i++) {\n                if (c.get(i) == max1) { // If the subsequence has the max length.\n                    int amount1 = 0;\n                    for (int m = d.get(2 * i); m <= d.get(2 * i + 1); m++) {\n                        if (isPrime(arr[m])) {\n                            amount1 +=\n                                arr[m]; // Sum of prime numbers in the subsequence.\n                        }\n                    }\n                    amount2 =\n                        Math.max(amount2, amount1); // Updating the max sum of primes.\n                }\n            }\n        }\n\n        return Arrays.asList(max1, amount2); // Returning results as a list.\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import math\n\n\nclass Solution:\n    # Function to check if a number is prime.\n    def isPrime(self, x):\n        if x < 2:\n            return False\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    # Function to find the maximum consecutive increasing subsequence and\n    # the sum of prime numbers in that subsequence.\n    def primeMoney(self, arr):\n        n = len(arr)\n        if n == 0:\n            return (0, 0)  # Edge case if array is empty.\n\n        c = []  # List to store the lengths of increasing subsequences.\n        d = []  # List to store the start and end indices of subsequences.\n        max1 = 1  # For tracking maximum length of increasing subsequences.\n        amount2 = 0  # To store the maximum sum of prime numbers in subsequences.\n\n        i = 0\n        while i < n - 1:\n            max2 = 1\n            if arr[i] < arr[i + 1]:\n                d.append(i)  # Start index of subsequence.\n\n                # Finding the length of the consecutive increasing subsequence.\n                while i < n - 1 and arr[i] < arr[i + 1]:\n                    max2 += 1\n                    i += 1\n\n                c.append(max2)  # Storing the length of subsequence.\n                d.append(i)  # End index of subsequence.\n\n                if max1 < max2:\n                    max1 = max2  # Updating the maximum length.\n            i += 1\n\n        # If no increasing subsequence was found.\n        if len(c) == 0:\n            for i in range(n):\n                if self.isPrime(arr[i]):\n                    amount2 = max(amount2,\n                                  arr[i])  # Finding the largest prime number.\n        else:\n            for i in range(len(c)):\n                if c[i] == max1:  # If the subsequence has the max length.\n                    amount1 = 0\n                    for m in range(d[2 * i], d[2 * i + 1] + 1):\n                        if self.isPrime(arr[m]):\n                            amount1 += arr[\n                                m]  # Sum of prime numbers in subsequence.\n                    amount2 = max(amount2,\n                                  amount1)  # Updating the maximum sum.\n\n        return (max1, amount2)  # Returning the results.\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// Initial Template for javascript\n\nclass Solution {\n    // Function to check if a number is prime.\n    isPrime(x) {\n        if (x < 2) return false;\n        for (let i = 2; i <= Math.sqrt(x); i++) {\n            if (x % i === 0) return false;\n        }\n        return true;\n    }\n\n    // Function to find the maximum consecutive increasing subsequence and\n    // the sum of prime numbers in that subsequence.\n    primeMoney(arr) {\n        const n = arr.length;\n        if (n === 0) return [ 0, 0 ]; // Edge case if array is empty.\n\n        let c = [];      // Array to store the lengths of increasing subsequences.\n        let d = [];      // Array to store the start and end indices of subsequences.\n        let max1 = 1;    // For tracking the maximum length of increasing subsequences.\n        let amount2 = 0; // To store the maximum sum of prime numbers in subsequences.\n\n        let i = 0;\n        while (i < n - 1) {\n            let max2 = 1;\n            if (arr[i] < arr[i + 1]) {\n                d.push(i); // Start index of the subsequence.\n\n                // Finding the length of the consecutive increasing subsequence.\n                while (i < n - 1 && arr[i] < arr[i + 1]) {\n                    max2++;\n                    i++;\n                }\n\n                c.push(max2); // Storing the length of the subsequence.\n                d.push(i);    // End index of the subsequence.\n\n                if (max1 < max2) {\n                    max1 = max2; // Updating the max length.\n                }\n            }\n            i++;\n        }\n\n        // If no increasing subsequence was found.\n        if (c.length === 0) {\n            for (i = 0; i < n; i++) {\n                if (this.isPrime(arr[i])) {\n                    amount2 =\n                        Math.max(amount2, arr[i]); // Finding the largest prime number.\n                }\n            }\n        } else {\n            for (i = 0; i < c.length; i++) {\n                if (c[i] === max1) { // If the subsequence has the max length.\n                    let amount1 = 0;\n                    for (let m = d[2 * i]; m <= d[2 * i + 1]; m++) {\n                        if (this.isPrime(arr[m])) {\n                            amount1 += arr[m]; // Sum of prime numbers in subsequence.\n                        }\n                    }\n                    amount2 = Math.max(amount2, amount1); // Updating the maximum sum.\n                }\n            }\n        }\n\n        return [ max1, amount2 ]; // Returning the results.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}