{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704146,
            "title": "Sieve of Eratosthenes",
            "titleSlug": "sieve-of-eratosthenes5242",
            "content": "<p data-start=\"24\" data-end=\"165\"><span >Given a positive integer <strong>n</strong>, calculate and return all prime numbers less than or equal to <strong>n</strong> using the <strong data-start=\"129\" data-end=\"154\">Sieve of Eratosthenes</strong> algorithm.</span></p>\n<p><span > </span></p>\n<p data-start=\"167\" data-end=\"275\"><span >A <strong data-start=\"169\" data-end=\"185\">prime number</strong> is a natural number greater than 1 that has no positive divisors other than 1 and itself.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">n = 10</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">2 3 5 7</span>\n<strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">Prime numbers less than equal to 10 are 2 3 5 and 7.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">n = 35</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>2 3 5 7 11 13 17 19 23 29 31</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Prime numbers less than equal to 35 are 2 3 5 7 11 13 17 19 23 29 and 31.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1&lt;= n &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer n, find all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. A prime number is a natural number greater than 1 that is only divisible by 1 and itself.",
                "constraints": [
                    "1 <= n <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "2 3 5 7",
                        "explanation": "The prime numbers less than or equal to 10 are 2, 3, 5, and 7."
                    },
                    {
                        "input": "35",
                        "output": "2 3 5 7 11 13 17 19 23 29 31",
                        "explanation": "The prime numbers less than or equal to 35 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, and 31."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Run a loop from 2 till sqrt of N considering every number as&nbsp;prime and mark the multiple of 2 as not prime. Then select next number which is prime then again marked its multiple as not prime.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "vmware",
            "maq-software",
            "sap"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> sieveOfEratosthenes(int n) {\n        // Create a boolean array \"prime[0..n]\" and initialize\n        // all entries it as true. A value in prime[i] will\n        // finally be false if i is Not a prime, else true.\n        bool prime[n + 1];\n        memset(prime, true, sizeof(prime));\n\n        for (int p = 2; p * p <= n; p++) {\n            // If prime[p] is not changed, then it is a prime\n            if (prime[p] == true) {\n                // Update all multiples of p\n                for (int i = p * 2; i <= n; i += p)\n                    prime[i] = false;\n            }\n        }\n\n        vector<int> ans;\n        for (int p = 2; p <= n; p++)\n            if (prime[p])\n                ans.push_back(p);\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n// User function Template for Java\nclass Solution {\n    // function to generate prime numbers using Sieve of Eratosthenes algorithm\n    static ArrayList<Integer> sieveOfEratosthenes(int n) {\n        // initialize an ArrayList to store prime numbers\n        ArrayList<Integer> arr = new ArrayList<>();\n\n        // initialize a boolean array to track prime numbers\n        boolean[] isPrime = new boolean[n + 1];\n        Arrays.fill(isPrime, true);\n\n        // loop through numbers starting from 2\n        for (int i = 2; i <= n; i++) {\n            // if the number is prime\n            if (isPrime[i]) {\n                // add it to the ArrayList\n                arr.add(i);\n                // mark multiples of the prime number as non-prime\n                for (int j = i * i; j <= n; j = i + j) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        // return the list of prime numbers\n        return arr;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\n\nclass Solution:\n    #Function to find all prime numbers up to n using Sieve of Eratosthenes.\n    def sieveOfEratosthenes(self, n):\n        #Helper function to check if a number is prime.\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        result = []\n        #Iterating from 0 to n and adding prime numbers to result list.\n        for i in range(n + 1):\n            if is_prime(i):\n                result.append(i)\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number} N\n * @return {number[]}\n */\n\nclass Solution {\n    sieveOfEratosthenes(n) {\n        // Create a boolean array \"prime[0..n]\" and initialize\n        // all entries it as true. A value in prime[i] will\n        // finally be false if i is Not a prime, else true.\n        let prime = new Array(n + 1).fill(true);\n\n        for (let p = 2; p * p <= n; p++) {\n            // If prime[p] is not changed, then it is a prime\n            if (prime[p] === true) {\n                // Update all multiples of p\n                for (let i = p * 2; i <= n; i += p) prime[i] = false;\n            }\n        }\n\n        let ans = [];\n        for (let p = 2; p <= n; p++)\n            if (prime[p]) ans.push(p);\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}