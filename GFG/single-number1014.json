{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702915,
            "title": "Single Number",
            "titleSlug": "single-number1014",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]&nbsp;</strong>of positive integers where every element appears even times except for one. Find that number occurring an odd number of times.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [1, 1, 2, 2, 2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In the given array all element appear two times except 2 which appears thrice.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [8, 8, 7, 7, 6, 6, 1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> In the given array all element appear two times except 1 which appears once.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr<sub>i</sub>&nbsp;&le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, where each element appears an even number of times except for one, find the number that appears an odd number of times.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 1, 2, 2, 2]",
                        "output": "2",
                        "explanation": "The number 2 appears three times, while all other numbers appear twice."
                    },
                    {
                        "input": "[8, 8, 7, 7, 6, 6, 1]",
                        "output": "1",
                        "explanation": "The number 1 appears once, while all other numbers appear twice."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Even times xor of some number is 0 and odd times xor of some number is the number itself.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find the element in the array which occurs only once.\n    int getSingle(vector<int>& arr) {\n        // variable to store the XOR of all elements in the array.\n        int xr = 0;\n        int n = arr.size();\n\n        // iterating over all the elements in the array.\n        for (int i = 0; i < n; i++) {\n            // calculating XOR of each element with the previous XOR.\n            xr = xr ^ arr[i];\n        }\n\n        // returning the element which occurs only once.\n        return xr;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the element in the array which occurs only once.\n    public int getSingle(int arr[]) {\n        // Variable to store the XOR of all elements in the array.\n        int xr = 0;\n        int n = arr.length;\n\n        // Iterating over all the elements in the array.\n        for (int i = 0; i < n; i++) {\n            // Calculating XOR of each element with the previous XOR.\n            xr = xr ^ arr[i];\n        }\n\n        // Returning the element which occurs only once.\n        return xr;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find the element in the array which occurs only once.\n    def getSingle(self, arr):\n        # Variable to store the XOR of all elements in the array.\n        xr = 0\n\n        # Iterating over all the elements in the array.\n        for num in arr:\n            # Calculating XOR of each element with the previous XOR.\n            xr ^= num\n\n        # Returning the element which occurs only once.\n        return xr\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    getSingle(arr) {\n        // code here\n        let n = arr.length;\n        let xr = 0;\n        for (let i = 0; i < n; i++) {\n            xr = xr ^ arr[i];\n        }\n        return xr;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}