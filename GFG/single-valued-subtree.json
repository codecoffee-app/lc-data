{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706342,
            "title": "Single valued subtree",
            "titleSlug": "single-valued-subtree",
            "content": "<p><span style=\"font-size:18px\">Given a binary tree, count the number of Single Valued Subtrees. A Single Valued Subtree is one in which all the nodes have same value.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong>\r\n\\t\\t  5\r\n\\t\\t / \\\r\n\\t\\t1   5\r\n\\t     / \\   \\\r\n\\t    5   5   5\r\n<strong>Output :</strong> 4\r\n<strong>Explanation : </strong>\r\nThere are 4 subtrees with single values. Three leaf nodes and the subtree whose root is the right child of the root. </span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n\\t\\t  5\r\n\\t\\t / \\\r\n\\t\\t4   5\r\n\\t     / \\   \\\r\n\\t    4   4   5   \r\n<strong>Output:</strong> 5\r\n<strong>Explanation: </strong>\r\nThere are five subtrees with single values.</span></pre>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Your task :</strong></span></div>\r\n\r\n<div><span style=\"font-size:18px\">You don&#39;t have to read input or print anything. Your task is to complete the function singlevalued() which takes the root of the tree as input and returns the count of single valued subtrees.</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Time Complexity :</strong> O(n)</span></div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Auxiliary Space :</strong> O(n)</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Constraints :</strong></span></div>\r\n\r\n<div><span style=\"font-size:18px\">1 &lt;= n &lt;= 10^5</span></div>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, count the number of Single Valued Subtrees. A Single Valued Subtree is one where all nodes within the subtree have the same value.",
                "constraints": [
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "     5\n    / \\\n   1   5\n  / \\   \\\n 5   5   5",
                        "output": "4",
                        "explanation": "The tree contains four single-valued subtrees: three leaf nodes with values 5, 5, and 5, and the subtree rooted at the right child of the main root (value 5)."
                    },
                    {
                        "input": "     5\n    / \\\n   4   5\n  / \\   \\\n 4   4   5",
                        "output": "5",
                        "explanation": "The tree contains five single-valued subtrees: the leaf nodes with values 4, 4, 5 and the subtrees rooted with 4 and 5 ."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse tree in botton up manner.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "media.net"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    bool countSingleRec(Node* root, int &count)\r\n{\r\n\t// Return false to indicate NULL\r\n\tif (root == NULL)\r\n\t\treturn true;\r\n\r\n\t// Recursively count in left and right subtrees also\r\n\tbool left = countSingleRec(root->left, count);\r\n\tbool right = countSingleRec(root->right, count);\r\n\r\n\t// If any of the subtrees is not singly, then this\r\n\t// cannot be singly.\r\n\tif (left == false || right == false)\r\n\t\treturn false;\r\n\r\n\t// If left subtree is singly and non-empty, but data\r\n\t// doesn't match\r\n\tif (root->left && root->data != root->left->data)\r\n\t\treturn false;\r\n\r\n\t// Same for right subtree\r\n\tif (root->right && root->data != root->right->data)\r\n\t\treturn false;\r\n\r\n\t// If none of the above conditions is true, then\r\n\t// tree rooted under root is single valued, increment\r\n\t// count and return true.\r\n\tcount++;\r\n\treturn true;\r\n}\r\n\r\n// This function mainly calls countSingleRec()\r\n// after initializing count as 0\r\npublic:\r\nint singlevalued(Node* root)\r\n{\r\n\t// Initialize result\r\n\tint count = 0;\r\n\r\n\t// Recursive function to count\r\n\tcountSingleRec(root, count);\r\n\r\n\treturn count;\r\n}\r\n    \r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Count\r\n{\r\n    int count = 0;\r\n}\r\nclass Solution\r\n{\r\n    Node root; \r\n    Count ct = new Count();\r\n    boolean countSingleRec(Node node, Count c)\r\n    {\r\n        // Return false to indicate NULL\r\n        if (node == null)\r\n            return true;\r\n          \r\n        // Recursively count in left and right subtrees also\r\n        boolean left = countSingleRec(node.left, c);\r\n        boolean right = countSingleRec(node.right, c);\r\n  \r\n        // If any of the subtrees is not singly, then this\r\n        // cannot be singly.\r\n        if (left == false || right == false)\r\n            return false;\r\n  \r\n        // If left subtree is singly and non-empty, but data\r\n        // doesn't match\r\n        if (node.left != null && node.data != node.left.data)\r\n            return false;\r\n  \r\n        // Same for right subtree\r\n        if (node.right != null && node.data != node.right.data)\r\n            return false;\r\n  \r\n        // If none of the above conditions is true, then\r\n        // tree rooted under root is single valued, increment\r\n        // count and return true.\r\n        c.count++;\r\n        return true;\r\n    }\r\n    int singlevalued()\r\n    {\r\n        return singlevalued(root);\r\n    }\r\n  \r\n    public int singlevalued(Node root)\r\n    {\r\n        //code here\r\n        countSingleRec(root, ct);\r\n        return ct.count;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\r\n\r\n'''\r\nclass Node:\r\n    def __init__(self, val):\r\n        self.right = None\r\n        self.data = val\r\n        self.left = None\r\n'''\r\n\r\nclass Solution:\r\n    def countSingleRec(self,root , count):\r\n        #code here\r\n        if root is None :\r\n            return True\r\n \r\n        # Recursively count in left and right subtress also\r\n        left = self.countSingleRec(root.left , count)\r\n        right = self.countSingleRec(root.right , count)\r\n     \r\n        # If any of the subtress is not singly, then this\r\n        # cannot be singly\r\n        if left == False or right  == False :\r\n            return False\r\n     \r\n        # If left subtree is singly and non-empty , but data\r\n        # doesn't match\r\n        if root.left and root.data != root.left.data:\r\n            return False\r\n \r\n        # same for right subtree\r\n        if root.right and root.data != root.right.data:\r\n            return False\r\n \r\n        # If none of the above conditions is True, then\r\n        # tree rooted under root is single valued,increment\r\n        # count and return true\r\n        count[0] += 1\r\n        return True\r\n    \r\n    def singlevalued(self, root):\r\n        #code here\r\n        count = [0]\r\n \r\n        # Recursive function to count\r\n        self.countSingleRec(root , count)\r\n \r\n        return count[0]\r\n        ",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\n/* Tree Node\nclass Node\n{\n    public int data;\n    public Node left;\n    public Node right;\n}*/\n\nclass Solution\n{\n    // Recursive helper function to count single valued nodes\n    bool CountSingleRec(Node root, ref int count)\n    {\n        // Return false to indicate NULL\n        if (root == null)\n            return true;\n\n        // Recursively count in left and right subtrees also\n        bool left = CountSingleRec(root.left, ref count);\n        bool right = CountSingleRec(root.right, ref count);\n\n        // If any of the subtrees is not singly, then this cannot be singly.\n        if (left == false || right == false)\n            return false;\n\n        // If left subtree is singly and non-empty, but data doesn't match\n        if (root.left != null && root.data != root.left.data)\n            return false;\n\n        // Same for right subtree\n        if (root.right != null && root.data != root.right.data)\n            return false;\n\n        // If none of the above conditions is true, then tree rooted under root is single valued, increment count and return true.\n        count++;\n        return true;\n    }\n\n    // This function mainly calls CountSingleRec() after initializing count as 0\n    public int singlevalued(Node root)\n    {\n        // Initialize result\n        int count = 0;\n\n        // Recursive function to count\n        CountSingleRec(root, ref count);\n\n        return count;\n    }\n\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}