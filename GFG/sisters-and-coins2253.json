{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704792,
            "title": "Sisters and coins",
            "titleSlug": "sisters-and-coins2253",
            "content": "<p><span style=\"font-size:18px\">Mila and Gila are sisters, Mila being the younger one. They both have some number of coins of different denominations with them. Mila being a stubborn little sister won&rsquo;t share her coins with anyone but wants that both of the sisters have equal money. Gila being an understanding elder sister accepts to give some of her coins to Mila if that can make the money equal.</span><br />\n<span style=\"font-size:18px\">You are given <strong>N</strong> - number of coins Gila has and list of integers <strong>A[ ]</strong> - denominations of <strong>N</strong> coins of Gila.<br />\nAs Mila won&rsquo;t share any of her coins with anyone, you are only provided with the total money with Mila <strong>M</strong> and no details of her denominations.<br />\nYou are required to find out whether they can distribute the money among themselves such that both of them have equal money or not.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:\nN = 5 and M = 6\nA[] = [1, 2, 3, 0, 6]\n<strong>Output:</strong> 1\n<strong>Explanation</strong>:\nGila can give her Rs. 3 coin to Mila.\nHence, both of them would have Rs. 9</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5 and M = 5\nA[] = [1, 2, 3, 2, 6]\n<strong>Output: </strong>0</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>sisterCoin()</strong>&nbsp;which takes the integer <strong>N</strong>, integer <strong>M</strong> and an array <strong>A[ ]</strong>&nbsp;as input parameters and returns the <strong>1</strong>&nbsp;if they can distribute the money among themselves such that both of them have equal amount or&nbsp;return&nbsp;<strong>0&nbsp;</strong>otherwise.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*M)<br />\n<strong>Expected Auxiliary Space:</strong> O(N*M)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le;&nbsp;50<br />\n0 &le;&nbsp;M &le;&nbsp;5000<br />\n0&nbsp;&le;&nbsp;value of a coin &le;&nbsp;100</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Mila and Gila are sisters, with Mila being younger. They both possess coins of different denominations. Mila insists on keeping her coins separate but desires that both sisters have an equal amount of money. Gila, being understanding, is willing to give some of her coins to Mila to achieve this balance.\n\nYou are given the number of coins Gila has (N) and an array A[] representing the denominations of her N coins. You are also given the total money Mila possesses (M). Determine if it's possible to distribute the money so both sisters have the same amount.",
                "constraints": [
                    "1 <= N <= 50",
                    "0 <= M <= 5000",
                    "0 <= value of a coin <= 100"
                ],
                "testcases": [
                    {
                        "input": "N = 5 and M = 6\nA[] = [1, 2, 3, 0, 6]",
                        "output": "1",
                        "explanation": "Gila can give her Rs. 3 coin to Mila. Hence, both of them would have Rs. 9."
                    },
                    {
                        "input": "N = 5 and M = 5\nA[] = [1, 2, 3, 2, 6]",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use dynamic programming approach to find out whether we can find a subset of A[ ] such that when sum of its elements is deducted from sum of all elements of A[ ] and added to M, M becomes equal to sum of elements of A[ ] without that subset.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\npublic: \n    // Function to check if a subset with given sum is possible\n    bool subsetSum(int arr[], int n, int sum){\n        bool dp[n+1][sum+1];\n        \n        // Initialize the first row of the dp array\n        for(int i = 1; i <= sum; ++i)\n            dp[0][i] = false;\n            \n        // Initialize the first column of the dp array\n        for(int i = 0; i <= n; ++i)\n            dp[i][0] = true;\n        \n        // Fill the dp array using bottom-up approach\n        for(int i = 1; i <= n; ++i){\n            for(int s = 1; s <= sum; ++s){\n                // If the current element is not included\n                if(arr[i-1] > s)\n                    dp[i][s] = dp[i-1][s];\n                \n                // If the current element is included\n                if(s >= arr[i-1])\n                    dp[i][s] = dp[i-1][s-arr[i-1]] || dp[i-1][s];\n            }\n        }\n        \n        // Return the result for the subset sum problem\n        return dp[n][sum];\n    }\n    \n    // Function to calculate the number of ways to get the target difference in coin values\n    int sisterCoin(int arr[], int n, int m){\n        int tot = 0;\n        \n        // Calculate the total sum of coin values\n        for(int i=0;i<n;i++)\n            tot += arr[i];\n        \n        // Calculate the difference between the total sum and the target sum\n        int diff = tot - m;\n        \n        // If the difference is odd or negative, it is not possible to get the target difference\n        if(diff & 1 || diff < 0)\n            return 0;\n        else\n            // Check if a subset with the target difference is possible\n            return subsetSum(arr, n, diff/2);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}