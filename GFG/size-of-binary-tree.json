{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700134,
            "title": "Size of Binary Tree",
            "titleSlug": "size-of-binary-tree",
            "content": "<p><span >Given a binary tree, you have to return the size of it. Size of binary tree is defined as number of nodes in it.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong>\\t<br />\\t 1</span><br /><span >  &nbsp; &nbsp;/  \\</span><br /><span >  &nbsp; 2&nbsp; &nbsp; 3<br /></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Output: </strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">3<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>There are three nodes in given binary tree.</span></pre>\n<pre><span ><strong>Input:<br /></strong>\\t10</span><br /><span >    &nbsp;/&nbsp; \\</span><br /><span >  &nbsp;5&nbsp;  &nbsp; 9</span><br /><span >  &nbsp;\\&nbsp; &nbsp; / \\</span><br /><span >  &nbsp; 1 3&nbsp; &nbsp;6<br /></span><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Output: </strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">6<br /></span><span ><strong>Explanation: </strong>There are six nodes in given binary tree.<br /></span></pre>\n<pre><span ><strong>Input:<br /></strong>\\t1</span><span ><br /></span><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Output: </strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1<br /></span><span ><strong>Explanation: </strong>There is one nodes in given binary tree.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5<br /></sup>1 &lt;= node-&gt;data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, determine the number of nodes it contains. This value is defined as the size of the binary tree.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "     1\n    /  \\\n   2    3",
                        "output": "3",
                        "explanation": "The binary tree has three nodes: 1, 2, and 3."
                    },
                    {
                        "input": "    10\n   /  \\\n  5    9\n  \\   / \\\n   1 3   6",
                        "output": "6",
                        "explanation": "The binary tree has six nodes: 10, 5, 9, 1, 3, and 6."
                    },
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "The binary tree has one node: 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use recursion to count all nodes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "/*\n\nDefinition for Binary Tree Node\nstruct Node\n{\n    int data;\n    struct Node* left;\n    struct Node* right;\n\n    Node(int x){\n        data = x;\n        left = right = NULL;\n    }\n};\n*/\n\nclass Solution {\n  public:\n    //Function to get the size of a tree\n    int getSize(struct Node* node)\n    {\n      //base case: if node is empty return 0\n      if (node==NULL)\n        return 0;\n      //recursively call getSize on the left and right subtrees\n      //and add 1 for the current node\n      else\n        return(getSize(node->left) + 1 + getSize(node->right));\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "/*\n\nDefinition for Binary Tree Node\nclass Node\n{\n    int data;\n    Node left;\n    Node right;\n\n    Node(int data)\n    {\n        this.data = data;\n        left = null;\n        right = null;\n    }\n}\n*/\n\nclass Solution {\n    public static int getSize(Node root){\n\t\t// Base case: if root is null, return 0\n\t\tif(root==null)\n\t\t\treturn 0;\n\t\t// Recursively calculate size of left subtree,\n\t\t// add 1 for current node, and recursively calculate\n\t\t// size of right subtree, then return the sum.\n\t\telse\n\t\t\treturn getSize(root.left)+1+getSize(root.right);\n\t\t\n\t}\n}\n        \n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import Optional\nfrom collections import deque\n\"\"\"\n\ndefinition of binary tree node.\nclass Node:\n    def _init_(self,val):\n        self.data = val\n        self.left = None\n        self.right = None\n\"\"\"\n\nclass Solution:\n    def getSize(self, node : Optional['Node']) -> int:\n        if node is None:\n            return 0\n        # Recursively call getSize on the left and right subtrees\n        # and add 1 for the current node\n        else:\n            return self.getSize(node.left) + 1 + self.getSize(node.right)\n            # code here",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "/*\n\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n    /**\n     * @param Node node\n     * @returns number (size of the tree)\n     */\n    getSize(root) {\n        if (root === null) {\n            return 0; // Base case: no node\n        }\n        // Recursively get size of left and right subtrees, add 1 for the current node\n        return this.getSize(root.left) + 1 + this.getSize(root.right);\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}