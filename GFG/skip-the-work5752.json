{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703861,
            "title": "Skip the work",
            "titleSlug": "skip-the-work5752",
            "content": "<p><span style=\"font-size:20px\">Given an array <strong>A[ ]</strong> denoting the time taken to complete <strong>N </strong>tasks, determine the minimum amount of time required to finish the tasks considering that you can skip any task, but&nbsp;<strong>skipping two consecutive tasks is forbidden</strong>.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 2\nA[] ={10,20}\n<strong>Output:</strong> 10\n<strong>Explanation</strong>: we can take time of\n10 units and skip 20 units time.\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:\nN = 4\nA[] = {10,5,7,10}\n<strong>Output:</strong> 12\n<strong>Explanation</strong>: we can skip both the\ntens and pick 5 and 7 only.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>minAmount()&nbsp;</strong>which accepts array <strong>A[]&nbsp;</strong>and its size&nbsp;<strong>N</strong>&nbsp;as input parameter and returns&nbsp;</span><span style=\"font-size:20px\">minimum amount of time required to finish the tasks.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N)<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N&nbsp;&lt;= 10<sup>6</sup></span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `A` of size `N` representing the time taken to complete each of the `N` tasks, determine the minimum amount of time required to finish all tasks. You can skip any task, but skipping two consecutive tasks is not allowed.",
                "constraints": [
                    "1 <= N <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 2\nA[] ={10,20}",
                        "output": "10",
                        "explanation": "The optimal solution is to take the first task (10) and skip the second task (20)."
                    },
                    {
                        "input": "N = 4\nA[] = {10,5,7,10}",
                        "output": "12",
                        "explanation": "The optimal solution is to skip the first task (10), take the second task (5), take the third task (7), and skip the fourth task (10).  5 + 7 = 12."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>First think it in O(N) space then try to optimize it.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution\n{\n  public:\n    //Function to find the minimum amount required.\n    int minAmount(int A[] , int N)\n    {\n        //iterating from 2nd index to N-1th index\n        for(int i=2;i<N;i++)\n        {\n            //Adding the minimum of previous two elements to the current element.\n            A[i]=A[i]+min(A[i-1],A[i-2]);\n        }\n        // returning minimum of last and second last element.\n        return min( A[N -1] , A[N  - 2]);    \n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int minAmount(int A[], int N) {\n        // iterating from 2nd index to N-1th index\n        for (int i = 2; i < N; i++) {\n            // getting the minimum amount by adding the current element with the minimum of the previous two elements\n            A[i] = A[i] + Math.min(A[i - 1], A[i - 2]);\n        }\n        \n        // returning the minimum amount between the last and second last element\n        return Math.min(A[N - 1], A[N - 2]);    \n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\nclass Solution:\n    def minAmount(self, A, n): \n        # updating the array A by adding the minimum of the two previous elements\n        for i in range(2,n):\n            A[i] = A[i] + min(A[i - 1], A[i - 2])\n        \n        # return the minimum value between the last two elements of the updated array A\n        return min(A[n - 1], A[n - 2])",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} A\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the minimum amount that you have to pay.\n    minAmount(A, n) {\n        // updating the array A by adding the minimum of the two previous elements\n        for (let i = 2; i < n; i++) {\n            A[i] = A[i] + Math.min(A[i - 1], A[i - 2]);\n        }\n        \n        // return the minimum value between the last two elements of the updated array A\n        return Math.min(A[n - 1], A[n - 2]);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}