{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714220,
            "title": "Smaller Sum",
            "titleSlug": "smaller-sum--170647",
            "content": "<p><span style=\"font-size:18px\">You are given an array <strong>arr</strong> of <strong>n</strong> integers. For each index i, you have to find the sum of all integers present in the array with a value <strong>less</strong> than arr[i].</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 3\r\narr = {1, 2, 3}\r\n<strong>Output:</strong>\r\n0 1 3\r\n<strong>Explanation:</strong>\r\nFor 1, there are no elements lesser than itself.\r\nFor 2, only 1 is lesser than 2.\r\nAnd for 3, 1 and 2 are lesser than 3, so the sum is 3.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 2\r\narr = {4, 4}\r\n<strong>Output:</strong>\r\n0 0\r\n<strong>Explanation:\r\n</strong>For 4, there are no elements lesser than itself. \r\nFor 4, there are no elements lesser than itself.\r\nThere are no smaller elements than 4.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>smallerSum()</strong> which takes an integer&nbsp;<strong>n</strong>&nbsp;and an array <strong>arr</strong>&nbsp;and returns&nbsp;an array of length <strong>n</strong> , the answer for every index.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>:O(n log n)</span><br />\r\n<span style=\"font-size:18px\"><strong>Expected Space Complexity</strong>:O(n)</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= n &lt;= 10<sup>5</sup><br />\r\n0 &lt;= arr[i] &lt;= 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:16px\">Think about precomputing the sum and search accordingly.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution{\npublic:\n    //Function to find the sum of smaller elements on the left side of each element.\n    vector<long long> smallerSum(int n,vector<int> &arr){\n        vector<long long> tmp,pre,ans(n);\n        \n        //Storing the elements of the given array in a temporary vector.\n        for(int i=0;i<n;i++){\n            tmp.push_back(arr[i]);\n        }\n        \n        //Sorting the temporary vector in ascending order.\n        sort(tmp.begin(),tmp.end());\n        \n        //Creating a prefix sum array of the sorted vector.\n        pre=tmp;\n        for(int i=1;i<n;i++) pre[i]+=pre[i-1];\n        \n        //Iterating through the given array to find the sum of smaller elements on the left side.\n        for(int i=0;i<n;i++){\n            //Finding the position of the current element in the sorted vector.\n            auto lb=lower_bound(tmp.begin(),tmp.end(),arr[i]);\n            if(lb==tmp.begin()){\n                //If the current element is the smallest, the sum of smaller elements is 0.\n                ans[i]=0;\n            }\n            else{\n                //If not the smallest, using prefix sum to find the sum of smaller elements.\n                lb--;\n                ans[i]=pre[lb-tmp.begin()];\n            }\n        }\n        //Returning the resulting vector.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    public long[] smallerSum(int n,int arr[])\r\n    {\r\n        long ans[]=new long[n];\r\n        long temp[]=new long[n];\r\n        for(int i=0;i<n;i++){\r\n            temp[i]=arr[i];\r\n        }\r\n        Arrays.sort(temp);\r\n        long pre[]=new long[n];\r\n        pre[0]=temp[0];\r\n        for(int i=1;i<n;i++){\r\n            pre[i]=temp[i]+pre[i-1];\r\n        }\r\n        for(int i=0;i<n;i++){\r\n            if(temp[0]>=arr[i]){\r\n                ans[i]=0;\r\n                continue;\r\n            }\r\n            int l=0,r=n-1;\r\n            while(l<r){\r\n                int mid=(l+r+1)/2;\r\n                if(temp[mid]>=arr[i]){\r\n                    r=mid-1;\r\n                }else{\r\n                    l=mid;\r\n                }\r\n            }\r\n            ans[i]=pre[l];\r\n        }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\nfrom bisect import bisect_left,bisect_right\n\nclass Solution:\n    #Function to find the sum of all the smaller elements to the left of each element in the array.\n    def smallerSum(self, n : int, arr : List[int]) -> List[int]:\n        tmp=[]\n        pre=[]\n        ans=[]\n\n        #copying the original array into a temporary array.\n        for i in range(n):\n            tmp.append(arr[i])\n        \n        #sorting the temporary array.\n        tmp.sort()\n\n        #creating a prefix sum array from the sorted array.\n        #each element in the prefix sum array represents the sum of all the smaller elements to the left of that element.\n        pre=tmp[:]\n        for i in range(1,n):\n            pre[i]+=pre[i-1]\n\n        #iterating over each element in the original array.\n        for i in range(n):\n            #finding the index of the current element in the sorted array using binary search.\n            lb=bisect_left(tmp,arr[i])\n\n            #if the current element is the smallest element, there are no smaller elements to the left.\n            if lb==0:\n                ans.append(0)\n            else :\n                #appending the sum of all the smaller elements to the left of the current element from the prefix sum array.\n                ans.append(pre[lb-1])\n\n        return ans",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}