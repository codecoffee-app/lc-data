{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703340,
            "title": "Smallest Absolute Difference",
            "titleSlug": "smallest-absolute-difference4320",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of size <strong>n</strong> containing positive integers n and a number <strong>k</strong>,The absolute difference between values at indices i and j is <strong>|a[i] - a[j]|</strong>. There are <strong>n*(n-1)/2</strong> such pairs and you have to&nbsp;print the <strong>k<sub>th</sub></strong> <strong>smallest</strong> <strong>absolute</strong> <strong>difference</strong> among all these pairs.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input : </strong>n = 4, a[] = {1, 2, 3, 4},  = 3<strong>\nOutput : </strong>1 <strong>\nExplanation : </strong>The possible absolute differences are : {1, 2, 3, 1, 2, 1}. The 3rd smallest value among these is 1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input : </strong>n = 2, a[] = {10, 10}, k = 1\n<strong>Output : </strong>0</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>kthDiff()</strong>&nbsp;which takes the array <strong>a[]</strong>, its size <strong>n </strong>and an integer <strong>k </strong>as inputs and returns the <strong>k<sub>th</sub></strong> smallest absolute difference among all these pairs.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O( N. (Log(n))<sup>2</sup> )<br /><strong>Expected Auxiliary Space:</strong> O(Log(n))</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=n&lt;=10<sup>5</sup><br />1&lt;=a[i]&lt;=10<sup>5</sup><br />1 &lt;= k &lt;= n*(n-1)/2</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `a` of size `n` containing positive integers and an integer `k`, find the k-th smallest absolute difference among all pairs of elements in the array. The absolute difference between values at indices `i` and `j` is defined as `|a[i] - a[j]|`. There are `n*(n-1)/2` such pairs.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= a[i] <= 10^5",
                    "1 <= k <= n*(n-1)/2"
                ],
                "testcases": [
                    {
                        "input": "n = 4, a[] = {1, 2, 3, 4}, k = 3",
                        "output": "1",
                        "explanation": "The absolute differences between all pairs are: |1-2| = 1, |1-3| = 2, |1-4| = 3, |2-3| = 1, |2-4| = 2, |3-4| = 1.  Sorting these gives: 1, 1, 1, 2, 2, 3.  The 3rd smallest difference is 1."
                    },
                    {
                        "input": "n = 2, a[] = {10, 10}, k = 1",
                        "output": "0",
                        "explanation": "The absolute difference between the only pair is |10-10| = 0. Thus the 1st smallest difference is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\"><strong>Naive Method</strong> is to find all the n*(n-1)/2 possible absolute differences in O(n^2) and store them in an array. Then sort this array and print the k-th minimum value from this array. This will take time O(n^2 + n^2 * log(n^2)) = O(n^2 + 2*n^2*log(n)).</span></p>\n\n<p><span style=\"font-size:18px\">The naive method won&#39;t be efficient for large values of n, say n = 10^5.</span></p>\n\n<p><span style=\"font-size:18px\">An <strong>Efficient Solution</strong> is based on Binary Search.</span></p>\n\n<pre>\n<span style=\"font-size:18px\">1) Sort the given array a[].\n2) We can easily find the least possible absolute\n   difference in O(n) after sorting. The largest\n   possible difference will be a[n-1] - a[0] after\n   sorting the array. Let low = minimum_difference\n   and high = maximum_difference.\n3) while low &lt; high:\n4)     mid = (low + high)/2\n5)     if ((number of pairs with absolute difference\n                                &lt;= mid) &lt; k):\n6)        low = mid + 1\n7)     else:\n8)        high = mid\n9) return low\n</span></pre>\n\n<p><span style=\"font-size:18px\">We need a function that will tell us number of pairs with difference &lt;= mid efficiently.<br />\nSince our array is sorted, this part can be done like this:</span></p>\n\n<pre>\n<span style=\"font-size:18px\">1) result = 0\n2) for i = 0 to n-1:\n3)     result = result + (<a href=\"https://www.geeksforgeeks.org/binary-search-functions-in-c-stl-binary_search-lower_bound-and-upper_bound/\">upper_bound</a>(a+i, a+n, a[i] + mid) - (a+i+1))\n4) return result\n</span></pre>\n\n<p><span style=\"font-size:18px\">Here <a href=\"https://www.geeksforgeeks.org/binary-search-functions-in-c-stl-binary_search-lower_bound-and-upper_bound/\">upper_bound </a>is a variant of binary search which returns a pointer to the first element from a[i] to a[n-1] which is greater than a[i] + mid. Let the pointer returned be j. Then a[i] + mid &lt; a[j]. Thus, subtracting (a+i+1) from this will give us the number of values whose difference with a[i] is &lt;= mid. We sum this up for all indices from 0 to n-1 and get the answer for current mid.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// returns number of pairs with absolute difference\r\n// less than or equal to mid.\r\nint countPairs(int *a, int n, int mid) {\r\n    long long res = 0;\r\n    for (int i = 0; i < n; ++i)\r\n\r\n        // Upper bound returns pointer to position\r\n        // of next higher number than a[i]+mid in\r\n        // a[i..n-1]. We subtract (a + i + 1) from\r\n        // this position to count\r\n        res += upper_bound(a + i, a + n, a[i] + mid) - (a + i + 1);\r\n    return res;\r\n}\r\n\r\n// Returns k-th absolute difference\r\nint kthDiff(int a[], int n, int k) {\r\n    // Sort array\r\n    sort(a, a + n);\r\n\r\n    // Minimum absolute difference\r\n    int low = a[1] - a[0];\r\n    for (int i = 1; i <= n - 2; ++i) low = min(low, a[i + 1] - a[i]);\r\n\r\n    // Maximum absolute difference\r\n    int high = a[n - 1] - a[0];\r\n\r\n    // Do binary search for k-th absolute difference\r\n    while (low < high) {\r\n        int mid = (low + high) >> 1;\r\n        if (countPairs(a, n, mid) < k)\r\n            low = mid + 1;\r\n        else\r\n            high = mid;\r\n    }\r\n\r\n    return low;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\r\nclass Compute{\r\n    int upper_bound(int arr[], int i, int N, int X)\r\n    {\r\n        int mid;\r\n     \r\n        // Initialise starting index and\r\n        // ending index\r\n        int low = i;\r\n        int high = N;\r\n     \r\n        // Till low is less than high\r\n        while (low < high) {\r\n            // Find the middle index\r\n            mid = low + (high - low) / 2;\r\n     \r\n            // If X is greater than or equal\r\n            // to arr[mid] then find\r\n            // in right subarray\r\n            if (X >= arr[mid]) {\r\n                low = mid + 1;\r\n            }\r\n     \r\n            // If X is less than arr[mid]\r\n            // then find in left subarray\r\n            else {\r\n                high = mid;\r\n            }\r\n        }\r\n       \r\n        // if X is greater than arr[n-1]\r\n        if(low < N && arr[low] <= X) {\r\n           low++;\r\n        }\r\n     \r\n        // Return the upper_bound index\r\n        return low;\r\n    }\r\n    int countPairs(int [] a, int n, int mid) {\r\n        int res = 0;\r\n        for (int i = 0; i < n; ++i)\r\n    \r\n            // Upper bound returns pointer to position\r\n            // of next higher number than a[i]+mid in\r\n            // a[i..n-1]. We subtract (a + i + 1) from\r\n            // this position to count\r\n            res += upper_bound(a, i, n, a[i] + mid) - (i + 1);\r\n        return res;\r\n    }\r\n    // Returns k-th absolute difference\r\n    int kthDiff(int a[], int n, int k) {\r\n        // Sort array\r\n        Arrays.sort(a);\r\n    \r\n        // Minimum absolute difference\r\n        int low = a[1] - a[0];\r\n        for (int i = 1; i <= n - 2; ++i)\r\n            low = Math.min(low, a[i + 1] - a[i]);\r\n    \r\n        // Maximum absolute difference\r\n        int high = a[n - 1] - a[0];\r\n    \r\n        // Do binary search for k-th absolute difference\r\n        while (low < high) {\r\n            int mid = (low + high) >> 1;\r\n            if (countPairs(a, n, mid) < k)\r\n                low = mid + 1;\r\n            else\r\n                high = mid;\r\n        }\r\n    \r\n        return low;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "\r\n\r\nclass Solution:\r\n    def smallestDistancePair(self, nums, k):\r\n        def possible(guess):\r\n            #Is there k or more pairs with distance <= guess?\r\n            return sum(prefix[min(x + guess, W)] - prefix[x] + multiplicity[i] for i, x in enumerate(nums)) >= k\r\n\r\n        nums.sort()\r\n        W = nums[-1]\r\n\r\n        #multiplicity[i] = number of nums[j] == nums[i] (j < i)\r\n        multiplicity = [0] * len(nums)\r\n        for i, x in enumerate(nums):\r\n            if i and x == nums[i-1]:\r\n                multiplicity[i] = 1 + multiplicity[i - 1]\r\n\r\n        #prefix[v] = number of values <= v\r\n        prefix = [0] * (W + 1)\r\n        left = 0\r\n        for i in range(len(prefix)):\r\n            while left < len(nums) and nums[left] == i:\r\n                left += 1\r\n            prefix[i] = left\r\n\r\n        lo = 0\r\n        hi = nums[-1] - nums[0]\r\n        while lo < hi:\r\n            mi = (lo + hi) // 2\r\n            if possible(mi):\r\n                hi = mi\r\n            else:\r\n                lo = mi + 1\r\n        return lo\r\ndef kthDiff(a, n, k):\r\n    obj=Solution()\r\n    return obj.smallestDistancePair(a,k)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number[]} a\r\n * @param {number} n\r\n * @param {number} k\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution\r\n{\r\n    //Function to find kth difference.\r\n    kthDiff(a, n, k)\r\n    {\r\n        //Function to check if there are k or more pairs with \r\n        //distance <= guess.\r\n        function possible(guess) {\r\n            return a.reduce((count, num, i) => {\r\n                for (let j = i + 1; j < n; j++) {\r\n                    if (Math.abs(num - a[j]) <= guess) {\r\n                        count++;\r\n                    }\r\n                }\r\n                return count;\r\n            }, 0) >= k;\r\n        }\r\n        \r\n        //Sorting the array.\r\n        a.sort((x, y) => x - y);\r\n\r\n        let lo = 0;\r\n        let hi = a[n-1] - a[0];\r\n        let result = 0;\r\n\r\n        //Binary search to find the kth difference.\r\n        while (lo <= hi) {\r\n            let mid = Math.floor((lo + hi) / 2);\r\n\r\n            if (possible(mid)) {\r\n                result = mid;\r\n                hi = mid - 1;\r\n            } else {\r\n                lo = mid + 1;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}