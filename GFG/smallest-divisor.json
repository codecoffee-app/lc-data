{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712208,
            "title": "Smallest Divisor",
            "titleSlug": "smallest-divisor",
            "content": "<p><span >You are given an array of integers&nbsp;<strong>arr</strong>&nbsp;and an integer&nbsp;<strong>k</strong>, your task is to find the smallest positive integer divisor, such that upon dividing all the elements of the given array by it, the sum of the division's result is less than or equal to the given integer k.</span></p>\n<p><span >Note: Each result of the division is rounded to the nearest integer greater than or equal to that element. For Example: 7/3 = 3.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 5, 9], k = 6\n<strong>Output: </strong>5\n<strong>Explanation: </strong>If the divisor is 5 the sum will be 5 (1+1+1+2), which is less than 6.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 3, 7, 4, 10], k = 5\n<strong>Output: </strong>10</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [7, 3, 3, 6], k = 10\n<strong>Output: </strong>3</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= nums.length() &lt;= 10<sup>5</sup><br />1 &lt;= nums[i] &lt;= 10<sup>6</sup><br />nums.length() &lt;= k &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr` and an integer `k`, find the smallest positive integer divisor such that when each element of `arr` is divided by this divisor (rounded up to the nearest integer), the sum of the resulting quotients is less than or equal to `k`.",
                "constraints": [
                    "1 <= nums.length() <= 10^5",
                    "1 <= nums[i] <= 10^6",
                    "nums.length() <= k <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 5, 9], k = 6",
                        "output": "5",
                        "explanation": "When the divisor is 5, the rounded-up quotients are [1, 1, 1, 2], and their sum (5) is less than or equal to 6.  5 is the smallest divisor that satisfies this condition."
                    },
                    {
                        "input": "arr[] = [2, 3, 7, 4, 10], k = 5",
                        "output": "10",
                        "explanation": "When the divisor is 10, the rounded-up quotients are [1, 1, 1, 1, 1], and their sum (5) is less than or equal to 5. Any divisor less than 10 would result in a sum greater than 5. Therefore, 10 is the answer."
                    },
                    {
                        "input": "arr[] = [7, 3, 3, 6], k = 10",
                        "output": "3",
                        "explanation": "When the divisor is 3, the rounded up quotients are [3, 1, 1, 2], and their sum is 7, which is less than or equal to 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use binary search to find the smallest divisor such that the sum of rounded-up divisions is &le; <span class=\"katex\">k<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to check if a given mid value is feasible or not\n    int check(int mid, vector<int> v, int K) {\n        int n = v.size();\n        int sum = 0;\n\n        // iterating over the elements of the vector\n        for (int i = 0; i < n; i++) {\n\n            // dividing each element by mid and rounding it up\n            if (v[i] % mid == 0) {\n                v[i] = v[i] / mid;\n            } else {\n                v[i] = v[i] / mid + 1;\n            }\n\n            // calculating the sum of the updated elements\n            sum += v[i];\n        }\n\n        // checking if the sum is less than or equal to K\n        if (sum <= K)\n            return true;\n\n        return false;\n    }\n\n    // Function to find the smallest divisor\n    int smallestDivisor(vector<int>& arr, int k) {\n\n        // initializing the low and high values\n        int low = 1;\n        int high = *max_element(arr.begin(), arr.end());\n\n        int res;\n\n        // binary search loop\n        while (low <= high) {\n            int mid = (low + high) >> 1;\n\n            // checking if the mid value is feasible\n            if (check(mid, arr, k)) {\n                res = mid;\n                high = mid - 1;\n            } else {\n                // if not feasible, update the low value\n                low = mid + 1;\n            }\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    int smallestDivisor(int[] arr, int k) {\n        int n = arr.length;\n        int max = 0;\n        for (int e : arr) max = Math.max(max, e); // find the maximum element in array a\n        int l = 1, r = max, ans = max; // initialize variables for binary search\n        while (l <= r) {\n            int m = l + (r - l) / 2; // find the middle element\n            if (check(arr, m, k)) {  // check if the divisor m satisfies the condition\n                ans = m;             // update the answer to be the current divisor m\n                r = m - 1;           // update the right boundary\n            } else {\n                l = m + 1; // update the left boundary\n            }\n        }\n        return ans; // return the smallest divisor that satisfies the condition\n    }\n\n    static boolean check(int a[], int m, int s) {\n        int c = 0; // counter variable to count the number of divisions\n        for (int e : a)\n            c += (e + m - 1) /\n                 m;    // increment the counter based on the divisions required\n        return c <= s; // check if the counter is less than or equal to the target\n                       // number of divisions\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to calculate the sum of quotients for a given divisor.\n    def sumOfQuotients(self, nums, divisor):\n        return sum((val + divisor - 1) // divisor for val in nums)\n\n    #Function to find the smallest divisor that results in quotient\n    #sum greater than K.\n    def smallestDivisor(self, arr, k):\n\n        n = len(arr)\n        left, right = 1, max(arr) + 1\n\n        while left <= right:\n            mid = (left + right) >> 1\n\n            #Checking if sum of quotients for current divisor is greater than K.\n            #If yes, update the left boundary to mid + 1.\n            if self.sumOfQuotients(arr, mid) > k:\n                left = mid + 1\n\n            #If sum of quotients for current divisor is less than or equal to K,\n            #update the right boundary to mid - 1.\n            else:\n                right = mid - 1\n\n        #Return the smallest divisor that results in quotient sum greater than K.\n        return left\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    sumOfQuotients(nums, divisor) {\n        return nums.reduce((acc, val) => acc + Math.ceil(val / divisor), 0);\n    }\n\n    smallestDivisor(arr, k) {\n        let left = 1;\n        let right = Math.max(...arr) + 1;\n\n        while (left <= right) {\n            let mid = Math.floor((left + right) / 2);\n\n            if (this.sumOfQuotients(arr, mid) > k) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        return left;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}