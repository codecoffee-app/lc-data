{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703474,
            "title": "Smallest greater elements in whole array",
            "titleSlug": "smallest-greater-elements-in-whole-array2751",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>A</strong> of <strong>N</strong> length. We need to calculate the next smallest greater element for each element in a given array. If the next greater element is not available in a given array then we need to fill <strong>-10000000</strong> at that index place.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[] = {13, 6, 7, 12}\r\n<strong>Output :</strong> _ 7 12 13 \r\n<strong>Explanation:</strong>\r\nHere, at index 0, 13 is the greatest value \r\nin given array and no other array element \r\nis greater from 13. So at index 0 we fill \r\n&#39;-10000000&#39;.\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[] = {6, 3, 9, 8, 10, 2, 1, 15, 7} <strong>\r\nOutput :</strong>  7 6 10 9 15 3 2 _ 8\r\n<strong>Explanation:</strong> Here, at index 7, 15 is the greatest\r\nvalue in given array and no other array element is\r\ngreater from 15. So at index 7 we fill &#39;-10000000&#39;.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>greaterElement()</strong> that takes an array <strong>(arr)</strong>, sizeOfArray <strong>(n)</strong>, and return an&nbsp;array that displays the next greater element to element at that index.&nbsp;The driver code takes care of the printing.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*LOG(N)).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N).</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>5</sup><br />\r\n-10<sup>6</sup> &le; A<sub>i</sub> &le; 10<sup>6</sup></span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">An&nbsp;<strong>efficient solution&nbsp;</strong>is to one by one insert elements in a set. After inserting into the&nbsp;set, we search elements. After we find iterator of the searched element, we move iterator to next (note that set stores elements in sorted order) to find the&nbsp;element&nbsp;which is just greater.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to find the next greater element for each element in the array\nint* greaterElement(int arr[], int n)\n{\n    // Create a set to store elements of the array\n    set<int> s;\n    for(int i=0;i<n;i++)\n    {\n        // Insert each element into the set\n        s.insert(arr[i]);\n    }\n    for(int i=0;i<n;i++)\n    {\n        // Find the next greater element in the set\n        auto it=s.find(arr[i]);\n        it++;\n        \n        // If the next greater element exists, update the element in the array\n        if(it!=s.end())\n            arr[i] = *it;\n        // If the next greater element does not exist, update the element in the array to -10000000\n        else\n            arr[i] = -10000000;\n    }\n    \n    // Return the modified array\n    return arr;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "def greaterElement (arr,  n) : \n\n    # creating a list of indexes and sorting them based on the corresponding values in arr\n    indexes = list(range(n))\n    indexes.sort(key=lambda x: arr[x])\n\n    # initializing a list to store the result\n    ans = [-10000000]*n\n\n    # iterating over the indexes\n    for i in range(n-1):\n\n        # getting the current index and value\n        cur_idx = indexes[i]\n        cur_val = arr[indexes[i]]\n        \n        # setting the increment value and initializing the next value\n        inc = 1\n        next_val = cur_val\n\n        # incrementing the increment value until the next value is different\n        # from the current value or we reach the end of the array\n        while next_val == cur_val and (i+inc) < n:\n            next_val = arr[indexes[i+inc]]\n            inc += 1\n        \n        # if the next value is different, update the answer list at the current index\n        if next_val != cur_val:\n            ans[cur_idx] = next_val \n        \n    return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number[]}\n*/\n\nclass Solution\n{\n    //Function to find the next greater element for each element of the array.\n    greaterElement(arr, n)\n    {\n        // your code here\n        // Creating a list of indexes and sorting them based on the corresponding values in arr\n        let indexes = Array.from({length: n}, (_, i) => i);\n        indexes.sort((a, b) => arr[a] - arr[b]);\n\n        // Initializing an array to store the result\n        let ans = Array(n).fill(-10000000);\n\n        // Iterating over the indexes\n        for (let i = 0; i < n - 1; i++) {\n            // Getting the current index and value\n            let cur_idx = indexes[i];\n            let cur_val = arr[cur_idx];\n\n            // Setting the increment value and initializing the next value\n            let inc = 1;\n            let next_val = cur_val;\n\n            // Incrementing the increment value until the next value is different\n            // from the current value or we reach the end of the array\n            while (next_val === cur_val && (i + inc) < n) {\n                next_val = arr[indexes[i + inc]];\n                inc++;\n            }\n\n            // If the next value is different, update the answer array at the current index\n            if (next_val !== cur_val) {\n                ans[cur_idx] = next_val;\n            }\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}