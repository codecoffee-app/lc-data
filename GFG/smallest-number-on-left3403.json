{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705177,
            "title": "Smaller on Left",
            "titleSlug": "smallest-number-on-left3403",
            "content": "<p><span style=\"font-size: 20px;\">Given an array <strong>a&nbsp;</strong>of integers of length <strong>n</strong>, find the nearest smaller number for every element such that the smaller element is on left side.If no small element present on the left print -1.</span></p>\n<p><strong><span style=\"font-size: 20px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input:</strong> n = 3\na = {1, 6, 2}\n<strong>Output:</strong> -1 1 1\n<strong>Explaination:</strong> There is no number at the \nleft of 1. Smaller number than 6 and 2 is 1.</span></pre>\n<p><strong><span style=\"font-size: 20px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input:</strong> n = 6\na = {1, 5, 0, 3, 4, 5}\n<strong>Output:</strong> -1 1 -1 0 3 4\n<strong>Explaination:</strong> Upto 3 it is easy to see \nthe smaller numbers. But for 4 the smaller \nnumbers are 1, 0 and 3. But among them 3 \nis closest. Similary for 5 it is 4.</span></pre>\n<p><span style=\"font-size: 20px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>leftSmaller()</strong> which takes n and a as input parameters and returns the list of smaller numbers.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10000<br />0 &le; a[i] &le; 10<sup>4</sup>&nbsp;&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `a` of length `n`, find the nearest smaller number for every element such that the smaller element is to its left. If no smaller element is present on the left, return -1.",
                "constraints": [
                    "1 <= n <= 10000",
                    "0 <= a[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 3\na = [1, 6, 2]",
                        "output": "-1 1 1",
                        "explanation": "The first element 1 has no elements to the left, so the result is -1. The nearest smaller element to the left of 6 is 1, and the nearest smaller element to the left of 2 is 1."
                    },
                    {
                        "input": "n = 6\na = [1, 5, 0, 3, 4, 5]",
                        "output": "-1 1 -1 0 3 4",
                        "explanation": "The first element 1 has no elements to the left, so the result is -1. The nearest smaller element to the left of 5 is 1. The nearest smaller element to the left of 0 is none, so -1. The nearest smaller element to the left of 3 is 0. The nearest smaller element to the left of 4 is 3. The nearest smaller element to the left of 5 is 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find the closest smaller in left. Start finding from that position and go towards left. The first one that you find is the answer for that position.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to find the next smaller element to the left of each element\n    vector<int> leftSmaller(int n, int a[]){\n        stack<int> st;\n        vector<int> sol;\n        \n        // Iterating through the array\n        for(int i = 0;i < n;i++){\n            // If stack is not empty and current element is greater than the top of stack\n            if(st.size() && a[i] > st.top()){\n                sol.push_back(st.top()); // Add the top of stack to the solution vector\n                st.push(a[i]); // Push the current element to the stack\n            }else{\n                // Keep popping elements from stack until stack is empty or current element is smaller than top of stack\n                while(!st.empty() && a[i] <= st.top())\n                    st.pop();\n                    \n                // If stack is empty, there is no smaller element to the left\n                if(st.empty())\n                    sol.push_back(-1); // Add -1 to the solution vector\n                else\n                    sol.push_back(st.top()); // Add the top of stack to the solution vector\n                st.push(a[i]); // Push the current element to the stack\n            }\n        }\n\n        return sol; // Return the solution vector\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    static List<Integer> leftSmaller(int n, int a[])\n    {\n        List<Integer> arr=new ArrayList<>();\n        Stack<Integer> st=new Stack<>();\n\n        // looping through the array\n        for(int i=0;i<n;i++){\n            // if the stack is empty, there is no element on the left side smaller than current element\n            if(st.isEmpty()){\n                arr.add(-1);\n                st.push(a[i]);\n            }\n            else{\n                // removing elements from the stack until finding a smaller element\n                while(!st.isEmpty() && st.peek()>=a[i]){\n                    st.pop();\n                }\n\n                // if stack becomes empty, it means there is no smaller element on the left side\n                if(st.isEmpty()){\n                    arr.add(-1);\n                }\n                else{\n                    // adding the smaller element found on the left side to the result list\n                    arr.add(st.peek());\n                }\n                // adding the current element to the stack for future comparison\n                st.push(a[i]);\n            }\n        }\n        return arr;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def leftSmaller(self, n, a):\r\n        stack=[]\r\n        sol=[]#final result list\r\n        for el in a:\r\n            while stack and stack[-1]>=el:#check  if in stack the last element >=current element \r\n                stack.pop()#pop that element as it is of no need\r\n            if not stack:\r\n                sol.append(-1)#no element in stack push -1 \r\n            else :\r\n                sol.append(stack[-1])#push the last element in stack as result\r\n            stack.append(el)#push current  element in stack \r\n        return sol#return result list\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {number[]} arr\r\n * @param {number} n\r\n * @return {number[]}\r\n */\r\n\r\nclass Solution {\r\n  leftSmaller(arr, n) {\r\n    let st = [];\r\n    let sol = [];\r\n    \r\n    for(let i = 0; i < n; i++){\r\n      if(st.length && arr[i] > st[st.length-1]){\r\n        sol.push(st[st.length-1]);\r\n        st.push(arr[i]);\r\n      }else{\r\n        while(st.length && arr[i] <= st[st.length-1])\r\n          st.pop();\r\n        \r\n        if(st.length === 0)\r\n          sol.push(-1);\r\n        else\r\n          sol.push(st[st.length-1]);\r\n        \r\n        st.push(arr[i]);\r\n      }\r\n    }\r\n\r\n    return sol;\r\n  }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}