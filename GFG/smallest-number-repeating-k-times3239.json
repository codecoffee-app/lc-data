{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703498,
            "title": "Smallest number repeating K times",
            "titleSlug": "smallest-number-repeating-k-times3239",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong>, the goal is to find out the smallest number that is repeated exactly &lsquo;<strong>k</strong>&rsquo; times.<br /></span><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;If there is no such element then return&nbsp;<strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 2, 1, 3, 1], k = 2\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: Here in array, 2 is repeated 2 times, 1 is repeated 2 times, 3 is repeated 1 time. Hence 2 and 1 both are repeated 'k' times i.e 2 and min(2, 1) is 1 .</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 5, 3, 2], k = 1\n<strong>Output:</strong>  2 \n<strong>Explanation: </strong>Both 2 and 5 are repeating 1 time but min(5, 2) is 2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr`, find the smallest number that appears exactly `k` times. If no such element exists, return -1.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [2, 2, 1, 3, 1], k = 2",
                        "output": "1",
                        "explanation": "The numbers 2 and 1 both appear 2 times. The smallest of these is 1."
                    },
                    {
                        "input": "arr[] = [3, 5, 3, 2], k = 1",
                        "output": "2",
                        "explanation": "The numbers 5 and 2 each appear 1 time. The smallest of these is 2."
                    },
                    {
                        "input": "arr[] = [1, 2, 3, 4, 5], k = 2",
                        "output": "-1",
                        "explanation": "No number appears exactly 2 times."
                    },
                    {
                        "input": "arr[] = [1, 1, 1, 2, 2, 2, 3], k = 3",
                        "output": "1",
                        "explanation": "Both 1 and 2 appear 3 times, but 1 is smaller."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a frequency map to count occurrences of each number, then iterate through the map to find the smallest number with a count of k.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int findDuplicate(vector<int>& arr, int k) {\n        unordered_map<int, int> freq; // Map to store frequencies of each element\n\n        // Computing frequencies of all elements\n        for (int num : arr) {\n            freq[num] += 1; // Increment frequency count for each element\n        }\n\n        int smallest = -1; // Initialize the smallest element with the desired frequency\n\n        // Finding the smallest element with frequency as k\n        for (const auto& pair : freq) {\n            if (pair.second == k) {\n                // Update smallest if it is -1 or if the current element is smaller\n                if (smallest == -1 || pair.first < smallest) {\n                    smallest = pair.first;\n                }\n            }\n        }\n\n        // Return the smallest element found or -1 if no such element exists\n        return smallest;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findDuplicate(int[] arr, int k) {\n        Map<Integer, Integer> freq = new HashMap<>();\n\n        // Computing frequencies of all elements\n        for (int num : arr) {\n            freq.put(num, freq.getOrDefault(num, 0) + 1);\n        }\n\n        int smallest = -1; // Initialize the smallest element with the desired frequency\n\n        // Finding the smallest element with frequency as k\n        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {\n            if (entry.getValue() == k) {\n                // Update smallest if it is -1 or if the current element is smaller\n                if (smallest == -1 || entry.getKey() < smallest) {\n                    smallest = entry.getKey();\n                }\n            }\n        }\n\n        return smallest;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findDuplicate(self, arr, k):\n        freq = {}\n\n        # Computing frequencies of all elements\n        for num in arr:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n\n        smallest = -1  # Initialize the smallest element with the desired frequency\n\n        # Finding the smallest element with frequency as k\n        for num, count in freq.items():\n            if count == k:\n                if smallest == -1 or num < smallest:\n                    smallest = num\n\n        return smallest\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} k\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find the smallest element with a frequency equal to k\n    findDuplicate(arr, k) {\n        const freq = new Map();\n\n        // Computing frequencies of all elements\n        for (const num of arr) {\n            freq.set(num, (freq.get(num) || 0) + 1);\n        }\n\n        let smallest = -1; // Initialize the smallest element with the desired frequency\n\n        // Finding the smallest element with frequency as k\n        for (const [num, count] of freq) {\n            if (count === k) {\n                if (smallest === -1 || num < smallest) {\n                    smallest = num;\n                }\n            }\n        }\n\n        return smallest;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}