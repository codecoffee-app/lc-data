{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704604,
            "title": "Smallest number with sum of digits as N and divisible by 10^N",
            "titleSlug": "smallest-number-with-sum-of-digits-as-n-and-divisible-by-10n4032",
            "content": "<p><span style=\"font-size: 18px;\">Find the smallest number such that the sum of its digits is N and it is divisible by 10<sup>N</sup>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 5\n<strong>Outptut: </strong>500000\n<strong>Explanation: </strong>Sum of digits of 500000\nis 5 and divisible by 10<sup>5</sup>.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 20\n<strong>Output: </strong>29900000000000000000000\n<strong>Explanation: </strong>Sum of digits of \n29900000000000000000000 is 20 and\ndivisible by 10<sup>20</sup>.</span>\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>digitsNum()</strong>&nbsp;which takes the input parameter N and&nbsp;returns the smallest number such that sum of its digits is N and divisible by 10<sup>N</sup>.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(N)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, find the smallest number such that the sum of its digits equals N and the number is divisible by 10 raised to the power of N (10<sup>N</sup>).",
                "constraints": [
                    "1 <= N <= 10000"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "500000",
                        "explanation": "The sum of the digits of 500000 is 5, and 500000 is divisible by 10<sup>5</sup> (100000)."
                    },
                    {
                        "input": "20",
                        "output": "29900000000000000000000",
                        "explanation": "The sum of the digits of 29900000000000000000000 is 20, and it is divisible by 10<sup>20</sup>."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Think of greedy approach.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n\tpublic:\r\n\tstring digitsNum(int N)\r\n\t{\r\n\t\t/* If N = 0 the string will be 0 */\r\n\t\tstring ans = \"\";\r\n\t\tif (N == 0){\r\n\t\t\tans += \"0\";\r\n\t\t\treturn ans;\r\n\t\t}\r\n\r\n\t\t/* If n is not perfectly divisible by 9\r\n\t\toutput the remainder */\r\n\t\tif (N % 9 != 0)\r\n\t\t\tans += char(N % 9 + '0');\r\n\r\n\t\t/* Print 9 N/9 times */\r\n\t\tfor (int i = 1; i <= (N / 9); ++i)\r\n\t\t\tans += \"9\";\r\n\r\n\t\t/* Append N zero's to the number so as to\r\n\t\tmake it divisible by 10^N */\r\n\t\tfor (int i = 1; i <= N; ++i)\r\n\t\t\tans += \"0\";\r\n\r\n\t\treturn ans;\r\n\t}\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    public String digitsNum(int N)\r\n    {\r\n        // Create a StringBuilder to store the result\r\n        StringBuilder sb=new StringBuilder();\r\n        \r\n        // Calculate the number of times '9' should be added to the result\r\n        int temp=N/9;\r\n        \r\n        // If the remainder of N divided by 9 is not zero, add the remainder to the result\r\n        if(N%9!=0)\r\n            sb.append(N%9);\r\n        \r\n        // Add '9' to the result temp number of times\r\n        for(int i=0;i<temp;i++){\r\n            sb.append(\"9\");\r\n        }\r\n        \r\n        // Add '0' to the result N number of times\r\n        for(int i=0;i<N;i++){\r\n            sb.append(\"0\");\r\n        }\r\n        \r\n        // Return the final result as a string\r\n        return sb.toString();\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def digitsNum(self, N):\n        # initializing an empty string for the answer\n        ans = \"\"\n\n        # if N is 0, then add \"0\" to the answer and return it\n        if N == 0:\n            ans += \"0\"\n            return ans\n\n        # if N is not divisible by 9, add the remainder to the answer as a character\n        if (N % 9 != 0):\n            ans += chr(N % 9 + ord(\"0\"))\n\n        # add \"9\" to the answer (N//9) times\n        for i in range(1, (N // 9) + 1):\n            ans += \"9\"\n\n        # add \"0\" to the answer N times\n        for i in range(1, N + 1):\n            ans += \"0\"\n\n        # return the answer\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution{\n    public string digitsNum(int N)\n    {\n        string ans = \"\";\n\n        if (N == 0)\n        {\n            ans += \"0\";\n            return ans;\n        }\n\n        if (N % 9 != 0)\n            ans += (N % 9).ToString();\n\n        for (int i = 1; i <= (N / 9); ++i)\n            ans += \"9\";\n\n        for (int i = 1; i <= N; ++i)\n            ans += \"0\";\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    digitsNum(N) {\n        let ans = \"\";\n        \n        if (N === 0) {\n            ans += \"0\";\n            return ans;\n        }\n        \n        if (N%9 !== 0) {\n            ans += String.fromCharCode((N%9) + 48);\n        }\n        \n        for (let i = 1; i <= Math.floor(N/9); i++) {\n            ans += \"9\";\n        }\n        \n        for (let i = 1; i <= N; i++) {\n            ans += \"0\";\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}