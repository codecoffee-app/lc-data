{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704350,
            "title": "Smallest number",
            "titleSlug": "smallest-number5829",
            "content": "<p><span style=\"font-size: 18px;\">Given two integers <strong>s</strong> and <strong>d</strong>. The task is to find the smallest number such that the sum of its digits is <strong>s</strong> and the number of digits in the number are <strong>d</strong>. Return</span><span style=\"font-size: 18px;\">&nbsp;a string that is the smallest possible number. If it is not possible then return <strong>-1</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span ><strong>Input: </strong>s = 9, d = 2<br /><strong>Output: </strong>18</span> <br /><strong><span style=\"font-size: 18px;\">Explanation:</span></strong> <span style=\"font-size: 18px;\">18 is the smallest number</span> <span style=\"font-size: 18px;\">possible with the sum of digits = 9</span> <span style=\"font-size: 18px;\">and total digits = 2.</span></pre>\n<pre><span ><strong>Input: </strong>s = 20, d = 3</span> <br /><strong><span style=\"font-size: 18px;\">Output:</span> </strong><span style=\"font-size: 18px;\">299</span> <br /><strong><span style=\"font-size: 18px;\">Explanation:</span></strong> <span style=\"font-size: 18px;\">299 is the smallest number</span> <span style=\"font-size: 18px;\">possible with the sum of digits = 20</span> <span style=\"font-size: 18px;\">and total digits = 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(d)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; s &le; 100<br />1 &le; d &le; 6</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">The idea is to one by one fill all digits from rightmost to leftmost (or from least significant digit to most significant).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "constructive algo",
                "slug": "constructive-algo"
            }
        ],
        "companies": [
            "oyo-rooms",
            "maq-software"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string smallestNumber(int s, int d) {\n        if (d * 9 < s)\n            return \"-1\";\n\n        int n = pow(10, d - 1);\n        int sum = s - 1;\n        string temp = to_string(n);\n\n        int i = d - 1;\n        while (i >= 0 && sum > 0) {\n            if (sum > 9) {\n                temp[i] = '9';\n                sum = sum - 9;\n            } else {\n                int val = temp[i] - '0';\n                val = val + sum;\n                temp[i] = '0' + val;\n                sum = 0;\n            }\n            i--;\n        }\n        return temp;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public String smallestNumber(int s, int d) {\n        if (d * 9 < s) return \"-1\";\n\n        int n = (int)Math.pow(10, d - 1);\n        int sum = s - 1;\n        char temp[] = Integer.toString(n).toCharArray();\n\n        int i = d - 1;\n        while (i >= 0 && sum > 0) {\n            if (sum > 9) {\n                temp[i] = '9';\n                sum = sum - 9;\n            } else {\n                int val = temp[i] - '0';\n                val = val + sum;\n                temp[i] = (char)((int)'0' + val);\n                sum = 0;\n            }\n            i--;\n        }\n        return new String(temp);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def smallestNumber(self, s, d):\n        # code here\n        # declare 10^D as initial number\n        # start changing last digit and subtracting from the total sum\n        if d * 9 < s:\n            return \"-1\"\n\n        n = 10**(d - 1)\n        sum = s - 1\n        temp = list(str(n))\n\n        i = d - 1\n        while i >= 0 and sum > 0:\n            if sum > 9:\n                temp[i] = '9'\n                sum -= 9\n            else:\n                val = int(temp[i])\n                val += sum\n                temp[i] = str(val)\n                sum = 0\n            i -= 1\n\n        return ''.join(temp)\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\npublic class Solution {\n    // Complete this function\n    public string SmallestNumber(int s, int d) {\n        if (d * 9 < s) {\n            return \"-1\"; // Not possible to form such a number\n        }\n\n        int n = (int)Math.Pow(10, d - 1); // Initial number as 10^(D-1)\n        int sum = s - 1;                  // Reserve 1 for the most significant digit\n        char[] temp =\n            n.ToString().ToCharArray(); // Convert initial number to character array\n\n        int i = d - 1; // Start from the last digit\n        while (i >= 0 && sum > 0) {\n            if (sum > 9) {\n                temp[i] = '9';\n                sum -= 9;\n            } else {\n                int val = temp[i] - '0';\n                val += sum;\n                temp[i] = (char)('0' + val);\n                sum = 0;\n            }\n            i--;\n        }\n\n        return new string(temp);\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}