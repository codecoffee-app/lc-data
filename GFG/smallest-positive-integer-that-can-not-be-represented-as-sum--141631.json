{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706045,
            "title": "Smallest Positive Integer that can not be represented as Sum",
            "titleSlug": "smallest-positive-integer-that-can-not-be-represented-as-sum--141631",
            "content": "<p><span style=\"font-size:18px\">Given an array of size N, find the smallest positive integer value&nbsp;<strong>that is either not presented in the array or</strong>&nbsp;cannot be represented as a sum(<strong>coz sum means you are adding two or more elements</strong>) of some elements from the array.</span><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nN = 6\r\narray[] = {1, 10, 3, 11, 6, 15}\r\n<strong>Output: </strong>\r\n2\r\n<strong>Explanation:</strong>\r\n2 is the smallest integer value that cannot \r\nbe represented as sum of elements from the array.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nN = 3\r\narray[] = {1, 1, 1}\r\n<strong>Output: </strong>\r\n4\r\n<strong>Explanation: </strong>\r\n1 is present in the array. \r\n2 can be created by combining two 1s.\r\n3 can be created by combining three 1s.\r\n4 is the smallest integer value that cannot be \r\nrepresented as sum of elements from the array.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function <strong>smallestpositive() </strong>which takes the array and N as input parameters and returns the smallest positive integer value that cannot be represented as the sum of some elements from the array.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(N * Log(N))<br />\r\n<strong>Expected Auxiliary Space: </strong>O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>6</sup><br />\r\n1 &le; array[i] &le; 10<sup>9</sup><br />\r\nThe array may contain duplicates.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of size N, find the smallest positive integer that either is not present in the array or cannot be represented as the sum of two or more elements from the array.",
                "constraints": [
                    "1 <= N <= 10^6",
                    "1 <= array[i] <= 10^9",
                    "The array may contain duplicates."
                ],
                "testcases": [
                    {
                        "input": "N = 6\narray[] = {1, 10, 3, 11, 6, 15}",
                        "output": "2",
                        "explanation": "The smallest positive integer that is either not present in the array or cannot be achieved by summing elements of the array is 2."
                    },
                    {
                        "input": "N = 3\narray[] = {1, 1, 1}",
                        "output": "4",
                        "explanation": "1 is present. 2 (1+1), and 3(1+1+1) can be formed using elements from the array, but 4 cannot. Thus, the answer is 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Sort the array. Then traverse the sorted array from left to right and observe the numbers you are able to build with each addition.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{   \npublic:\n    //Function to find the smallest positive integer that cannot be represented as sum of elements of any subsequence of a given array.\n    long long smallestpositive(vector<long long> array, int n)\n    { \n        //sorting the array in non-decreasing order.\n        sort(array.begin(),array.end());\n        \n        //initializing result as 1.\n        long long result = 1; \n        \n        //iterating over the array\n        for (int i = 0; i < n && array[i] <= result; i++) \n            \n            //updating the result as sum of current element and previous result.\n            result = result + array[i]; \n        \n        //returning the result.\n        return result; \n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution { \r\n    // Function to find the smallest positive missing number\r\n    long smallestpositive(long[] array, int n){ \r\n        // Sorting the array in ascending order\r\n        Arrays.sort(array);\r\n        \r\n        // Initializing the result variable to 1\r\n        long result = 1; \r\n        \r\n        // Iterating through the array to find the smallest positive missing number\r\n        for (int i = 0; i < n && array[i] <= result; i++) {\r\n            // Updating the result by adding the current element of the array\r\n            result = result + array[i]; \r\n        }\r\n        \r\n        // Returning the smallest positive missing number\r\n        return result; \r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    # Function to find the smallest positive integer\n    def smallestpositive(self, array, n): \n        \n        # Sorting the input array\n        array.sort()\n        \n        # Initializing the result as 1\n        result = 1\n        \n        # Iterating over the array\n        for i in range(n):\n            \n            # If the current element is less than or equal to the result\n            # then add it to the result\n            if(array[i] <= result):\n                result = result + array[i]\n        \n        # Returning the result\n        return result",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    smallestpositive(array, n) {\n        array.sort((a,b) => a-b); // Sort the array in ascending order.\n        let result = 1; // Initialize a variable to store the smallest positive number.\n        for (let i = 0; i < n && array[i] <= result; i++) // Iterate through the sorted array until a number greater than the current result is found or until the end of the array is reached.\n            result = result + array[i]; // Update the result by adding the current number from the array.\n        return result; // Return the smallest positive number found.\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public long smallestpositive(List<long> array, int n)\n    {\n        //sorting the array in non-decreasing order.\n        array.Sort();\n        \n        //initializing result as 1.\n        long result = 1; \n        \n        //iterating over the array\n        for (int i = 0; i < n && array[i] <= result; i++) \n            \n            //updating the result as sum of current element and previous result.\n            result = result + array[i]; \n        \n        //returning the result.\n        return result; \n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}