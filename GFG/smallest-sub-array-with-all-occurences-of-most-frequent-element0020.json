{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703036,
            "title": "Smallest sub-array with all occurences of most frequent element",
            "titleSlug": "smallest-sub-array-with-all-occurences-of-most-frequent-element0020",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>. Let x be an element in the array with the maximum frequency. The task is to find the smallest sub-segment of the array with x as the maximum frequency element.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> If two or more elements have the same frequency (i.e., maximum frequency) and the same sub-segment size then print the sub-segment<strong> </strong>which occurs first in the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span>&nbsp;</p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [1, 2, 2, 3, 1]\n<strong>Output :</strong> [2, 2]\n<strong>Explanation: </strong>Note that there are two elements that appear two times, 1 and 2.The smallest window for 1 is whole array and smallest window for 2 is {2, 2}. Since window for 2 is smaller, this is our output.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [1, 4, 3, 3, 5, 5]<strong>\nOutput :</strong> [3, 3] <br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong>Note that there are two elements that appear two times, </span><span >3 and 5. {3,3} appears first in the array.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, find the smallest sub-segment (contiguous subarray) containing an element `x` that has the maximum frequency in the entire array. If multiple elements share the maximum frequency, return the sub-segment corresponding to the element that appears earliest in the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 2, 3, 1]",
                        "output": "[2, 2]",
                        "explanation": "Both 1 and 2 appear twice (maximum frequency). The smallest window for 1 is the whole array. The smallest window for 2 is {2, 2}, which is smaller and thus the output."
                    },
                    {
                        "input": "[1, 4, 3, 3, 5, 5]",
                        "output": "[3, 3]",
                        "explanation": "Both 3 and 5 appear twice (maximum frequency).  {3, 3} appears earlier in the array than {5, 5}, therefore it is the output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >&nbsp;Use a Map to track the first occurrence and frequency of elements, and then find the subsegment with the maximum frequency and smallest length by comparing occurrences as you traverse the array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the smallest subsegment of array.\n    vector<int> smallestSubsegment(vector<int>& arr) {\n        unordered_map<int, int> left; // map to store the leftmost index of each element\n        unordered_map<int, int> count; // map to store the count of each element\n        int mx = 0;                    // variable to store the maximum count\n        int mn = INT_MAX, strindex = 0;\n\n        int n = arr.size(); // get the size of the array\n\n        for (int i = 0; i < n; i++) {\n\n            int x = arr[i];\n            if (count[x] == 0) {\n                left[x] = i;\n                // initialize the count of the element to 1\n                count[x] = 1;\n            } else {\n                // increment the count of the element if it is encountered\n                count[x]++;\n            }\n\n            if (count[x] > mx) {\n                // update the maximum count\n                mx = count[x];\n                // calculate the length of the subsegment\n                mn = i - left[x] + 1;\n                // store the starting index of the subsegment\n                strindex = left[x];\n            } else if (count[x] == mx && i - left[x] + 1 < mn) {\n                mn = i - left[x] + 1;\n                strindex = left[x];\n            }\n        }\n\n        vector<int> v;\n        for (int i = strindex; i < strindex + mn; i++) {\n            // push the elements of the subsegment into the vector\n            v.push_back(arr[i]);\n        }\n\n        return v; // return the smallest subsegment\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to find the smallest subsegment of array with the maximum frequency of\n    // elements\n    ArrayList<Integer> smallestSubsegment(int arr[]) {\n        // To store the leftmost index of each element\n        HashMap<Integer, Integer> left = new HashMap<>();\n        // To store the count of each element\n        HashMap<Integer, Integer> count = new HashMap<>();\n        // To store the maximum frequency\n        int mx = 0;\n        // To store the length of the smallest subsegment\n        int mn = Integer.MAX_VALUE;\n        // To store the starting index of the smallest subsegment\n        int strindex = 0;\n\n        // Loop through the array\n        for (int i = 0; i < arr.length; i++) {\n            int x = arr[i];\n\n            // If element is encountered for the first time, store its leftmost index\n            if (!count.containsKey(x)) {\n                // Store the leftmost index\n                left.put(x, i);\n                // Initialize count of the element to 1\n                count.put(x, 1);\n            } else {\n                // Increment the count of the element\n                count.put(x, count.get(x) + 1);\n            }\n\n            // Check for the maximum frequency and the smallest subsegment\n            if (count.get(x) > mx) {\n                // Update maximum frequency\n                mx = count.get(x);\n                // Calculate length of the subsegment\n                mn = i - left.get(x) + 1;\n                // Store the starting index of the subsegment\n                strindex = left.get(x);\n            } else if (count.get(x) == mx && i - left.get(x) + 1 < mn) {\n                // Update length if it's smaller than current minimum\n                mn = i - left.get(x) + 1;\n                strindex = left.get(x);\n            }\n        }\n\n        // Create the result array to store the smallest subsegment\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = strindex; i < strindex + mn; i++) {\n            // Add elements of the subsegment to the result\n            result.add(arr[i]);\n        }\n\n        return result; // Return the smallest subsegment\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find the smallest subsegment with the maximum frequency\n    def smallestSubsegment(self, arr):\n        left = {}  # Dictionary to store the leftmost index of each element\n        count = {}  # Dictionary to store the count of each element\n        max_freq = 0  # To store the maximum frequency\n        min_length = float('inf')\n        start_index = 0\n\n        # Traverse the array to populate `left` and `count` dictionaries\n        for i, val in enumerate(arr):\n            if val not in count:\n                left[val] = i  # Store the first occurrence (leftmost index)\n                count[val] = 1  # Initialize count\n            else:\n                count[val] += 1  # Increment the count of the element\n\n            # Check if we need to update the max frequency or subsegment length\n            if count[val] > max_freq:\n                max_freq = count[val]\n                min_length = i - left[val] + 1\n                start_index = left[val]\n            elif count[val] == max_freq:\n                # If the frequency is the same, check for the smaller subsegment\n                if i - left[val] + 1 < min_length:\n                    min_length = i - left[val] + 1\n                    start_index = left[val]\n\n        # Collect the result subsegment\n        return arr[start_index:start_index + min_length]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number[]} arr - array of integers\n     * @returns {number[]} - smallest subsegment with the maximum frequency\n     */\n    smallestSubsegment(arr) {\n        let left =\n            new Map(); // To store the first occurrence (leftmost index) of elements\n        let count = new Map();    // To store the frequency of elements\n        let maxFreq = 0;          // To store the maximum frequency of any element\n        let minLength = Infinity; // To store the smallest subsegment length\n        let startIndex = 0; // To store the starting index of the smallest subsegment\n\n        // Traverse the array\n        for (let i = 0; i < arr.length; i++) {\n            let val = arr[i];\n\n            // Store the first occurrence of the element\n            if (!count.has(val)) {\n                left.set(val, i);  // Set the leftmost index of the element\n                count.set(val, 1); // Initialize count of the element\n            } else {\n                count.set(val, count.get(val) + 1); // Increment the count\n            }\n\n            // Update max frequency and the smallest subsegment if necessary\n            if (count.get(val) > maxFreq) {\n                maxFreq = count.get(val);\n                minLength = i - left.get(val) + 1;\n                startIndex = left.get(val);\n            } else if (count.get(val) === maxFreq) {\n                if (i - left.get(val) + 1 < minLength) {\n                    minLength = i - left.get(val) + 1;\n                    startIndex = left.get(val);\n                }\n            }\n        }\n\n        // Return the smallest subsegment as a subarray\n        return arr.slice(startIndex, startIndex + minLength);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}