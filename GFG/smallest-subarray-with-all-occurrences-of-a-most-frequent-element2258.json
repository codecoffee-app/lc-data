{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703022,
            "title": "Smallest subarray with all occurrences of a most frequent element",
            "titleSlug": "smallest-subarray-with-all-occurrences-of-a-most-frequent-element2258",
            "content": "<p><span >Given an array<strong> arr[]</strong>. Let x be an element in the array with the maximum frequency. The task is to find the smallest sub-segment of the array which also has x as the maximum frequency element.</span></p>\n<p><span ><strong>Note:</strong> If two or more elements have the same frequency (i.e., maximum frequency) and the same sub-segment size then print the sub-segment<strong> </strong>which occurs first in the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [1, 2, 2, 3, 1]\n<strong>Output :</strong> [2, 2]\n<strong>Explanation: </strong>Note that there are two elements that appear two times, 1 and 2. The smallest window for 1 is whole array and smallest window for 2 is [2, 2]. Since window for 2 is smaller, this is our output.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [1, 4, 3, 3, 5, 5] <strong>\nOutput :</strong> [3, 3] <br /><strong>Explanation: </strong></span><span style=\"font-size: 18px;\">In this array, both 3 and 5 have the highest frequency of 2. However, the sub-segment [3, 3] occurs earlier in the array than [5, 5], so the correct output is [3, 3].</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span><br /><span style=\"font-size: 18px;\"><strong><br />Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, find the smallest sub-segment of the array that contains an element with the maximum frequency. If multiple elements have the same maximum frequency and the same sub-segment size, return the sub-segment that occurs earliest in the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 2, 3, 1]",
                        "output": "[2, 2]",
                        "explanation": "Both 1 and 2 appear twice. The smallest sub-segment containing 1 with frequency 2 is [1, 2, 2, 3, 1], while the smallest sub-segment containing 2 with frequency 2 is [2, 2].  Since [2, 2] is smaller, it is the correct output."
                    },
                    {
                        "input": "[1, 4, 3, 3, 5, 5]",
                        "output": "[3, 3]",
                        "explanation": "Both 3 and 5 have a maximum frequency of 2. The sub-segment [3, 3] occurs earlier in the array than [5, 5], therefore, [3, 3] is the desired output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use two hash maps to track the first occurrence index and the frequency of each element, then identify the smallest subsegment that has the highest frequency.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the smallest subsegment in the array.\n    vector<int> smallestSubsegment(vector<int>& arr) {\n        int n = arr.size();\n        // unordered maps to store the index and count of elements.\n        unordered_map<int, int> left;\n        unordered_map<int, int> count;\n        int mx = 0;\n        int mn, strindex;\n\n        // iterating over the array.\n        for (int i = 0; i < n; i++) {\n\n            int x = arr[i];\n\n            // if the element is encountered for the first time,\n            // initialize its left index and count as 1.\n            if (count[x] == 0) {\n                left[x] = i;\n                count[x] = 1;\n            } else\n                // else increment the count.\n                count[x]++;\n\n            // if the count is greater than the maximum count,\n            // update the maximum count, minimum subsegment size,\n            // and starting index of the subsegment.\n            if (count[x] > mx) {\n                mx = count[x];\n                mn = i - left[x] + 1;\n                strindex = left[x];\n            }\n            // if the count is equal to the maximum count and the\n            // subsegment size is smaller than the current subsegment,\n            // update the minimum subsegment size and starting index.\n            else if (count[x] == mx && i - left[x] + 1 < mn) {\n                mn = i - left[x] + 1;\n                strindex = left[x];\n            }\n        }\n\n        // creating a vector to store the smallest subsegment.\n        vector<int> v;\n\n        // adding the smallest subsegment elements to the vector.\n        for (int i = strindex; i < strindex + mn; i++)\n            v.push_back(arr[i]);\n\n        // returning the smallest subsegment vector.\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int[] smallestSubsegment(int[] arr) {\n        int n = arr.length;\n        // Maps to store the index and count of elements.\n        HashMap<Integer, Integer> left = new HashMap<>();\n        HashMap<Integer, Integer> count = new HashMap<>();\n        int mx = 0;\n        int mn = 0, strindex = 0;\n\n        // Iterating over the array.\n        for (int i = 0; i < n; i++) {\n            int x = arr[i];\n\n            // If the element is encountered for the first time,\n            // initialize its left index and count as 1.\n            if (!count.containsKey(x)) {\n                left.put(x, i);\n                count.put(x, 1);\n            } else {\n                // Else increment the count.\n                count.put(x, count.get(x) + 1);\n            }\n\n            // If the count is greater than the maximum count,\n            // update the maximum count, minimum subsegment size,\n            // and starting index of the subsegment.\n            if (count.get(x) > mx) {\n                mx = count.get(x);\n                mn = i - left.get(x) + 1;\n                strindex = left.get(x);\n            }\n            // If the count is equal to the maximum count and the\n            // subsegment size is smaller than the current subsegment,\n            // update the minimum subsegment size and starting index.\n            else if (count.get(x) == mx && i - left.get(x) + 1 < mn) {\n                mn = i - left.get(x) + 1;\n                strindex = left.get(x);\n            }\n        }\n\n        // Creating an array to store the smallest subsegment.\n        int[] result = new int[mn];\n\n        // Adding the smallest subsegment elements to the array.\n        for (int i = 0; i < mn; i++) {\n            result[i] = arr[strindex + i];\n        }\n\n        // Returning the smallest subsegment array.\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def smallestSubsegment(self, arr):\n        # Dictionaries to store the index and count of elements.\n        left = {}\n        count = {}\n        mx = 0\n        mn = 0\n        strindex = 0\n\n        # Iterating over the array.\n        for i, x in enumerate(arr):\n            # If the element is encountered for the first time,\n            # initialize its left index and count as 1.\n            if x not in count:\n                left[x] = i\n                count[x] = 1\n            else:\n                # Else increment the count.\n                count[x] += 1\n\n            # If the count is greater than the maximum count,\n            # update the maximum count, minimum subsegment size,\n            # and starting index of the subsegment.\n            if count[x] > mx:\n                mx = count[x]\n                mn = i - left[x] + 1\n                strindex = left[x]\n            # If the count is equal to the maximum count and the\n            # subsegment size is smaller than the current subsegment,\n            # update the minimum subsegment size and starting index.\n            elif count[x] == mx and i - left[x] + 1 < mn:\n                mn = i - left[x] + 1\n                strindex = left[x]\n\n        # Returning the smallest subsegment as a list.\n        return arr[strindex:strindex + mn]\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to find the smallest subsegment in the array.\n    smallestSubsegment(arr) {\n        // Objects to store the index and count of elements.\n        const left = {};\n        const count = {};\n        let mx = 0;\n        let mn = 0;\n        let strindex = 0;\n\n        // Iterating over the array.\n        for (let i = 0; i < arr.length; i++) {\n            let x = arr[i];\n\n            // If the element is encountered for the first time,\n            // initialize its left index and count as 1.\n            if (!(x in count)) {\n                left[x] = i;\n                count[x] = 1;\n            } else {\n                // Else increment the count.\n                count[x]++;\n            }\n\n            // If the count is greater than the maximum count,\n            // update the maximum count, minimum subsegment size,\n            // and starting index of the subsegment.\n            if (count[x] > mx) {\n                mx = count[x];\n                mn = i - left[x] + 1;\n                strindex = left[x];\n            }\n            // If the count is equal to the maximum count and the\n            // subsegment size is smaller than the current subsegment,\n            // update the minimum subsegment size and starting index.\n            else if (count[x] === mx && i - left[x] + 1 < mn) {\n                mn = i - left[x] + 1;\n                strindex = left[x];\n            }\n        }\n\n        // Creating an array to store the smallest subsegment.\n        const result = [];\n\n        // Adding the smallest subsegment elements to the result array.\n        for (let i = strindex; i < strindex + mn; i++) {\n            result.push(arr[i]);\n        }\n\n        // Returning the smallest subsegment array.\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}