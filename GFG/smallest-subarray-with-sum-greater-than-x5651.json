{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702894,
            "title": "Smallest subarray with sum greater than x",
            "titleSlug": "smallest-subarray-with-sum-greater-than-x5651",
            "content": "<p><span style=\"font-size: 18px;\">Given&nbsp;</span><span style=\"font-size: 18px;\">a number&nbsp;</span><strong style=\"font-size: 18px;\">x </strong><span style=\"font-size: 18px;\">and&nbsp;an array of integers </span><strong style=\"font-size: 18px;\">arr</strong><span style=\"font-size: 18px;\">, find the smallest subarray with sum greater than the given value. If such a subarray do not exist return 0 in that case.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>x = 51, arr[] = [1, 4, 45, 6, 0, 19]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>Minimum length subarray is [4, 45, 6]</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>x = 100, arr[] = [1, 10, 5, 2, 7]\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>No subarray exist</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size, x &le; 10<sup>5</sup><br />0 &le; arr[] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use Two Pointers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "goldman-sachs",
            "google",
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int smallestSubWithSum(int x, vector<int>& arr) {\n        int n = arr.size();                // Get the size of the array\n        int curr_sum = 0, min_len = n + 1; // Initialize current sum and minimum length\n        int start = 0, end = 0;            // Initialize start and end pointers\n\n        // Traverse the array\n        while (end < n) {\n            // Expand the window by adding elements to curr_sum until it exceeds x\n            while (curr_sum <= x && end < n)\n                curr_sum += arr[end++];\n\n            // Shrink the window from the left while curr_sum is greater than x\n            while (curr_sum > x && start < n) {\n                // Update the minimum length if the current window is smaller\n                if (end - start < min_len)\n                    min_len = end - start;\n\n                // Remove elements from the start of the window\n                curr_sum -= arr[start++];\n            }\n        }\n\n        // If no valid subarray is found, return 0\n        if (min_len > n)\n            return 0;\n        return min_len; // Return the minimum length\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int smallestSubWithSum(int x, int[] arr) {\n        int n = arr.length;                // Get the size of the array\n        int curr_sum = 0, min_len = n + 1; // Initialize current sum and minimum length\n        int start = 0, end = 0;            // Initialize start and end pointers\n\n        // Traverse the array\n        while (end < n) {\n            // Expand the window by adding elements to curr_sum until it exceeds x\n            while (curr_sum <= x && end < n) curr_sum += arr[end++];\n\n            // Shrink the window from the left while curr_sum is greater than x\n            while (curr_sum > x && start < n) {\n                // Update the minimum length if the current window is smaller\n                if (end - start < min_len) min_len = end - start;\n\n                // Remove elements from the start of the window\n                curr_sum -= arr[start++];\n            }\n        }\n\n        // If no valid subarray is found, return 0\n        if (min_len > n) return 0;\n        return min_len; // Return the minimum length\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def smallestSubWithSum(self, x, arr):\n        n = len(arr)  # Get the size of the array\n        curr_sum = 0  # Initialize the current sum\n        min_len = n + 1  # Initialize the minimum length to a large value\n        start = 0  # Initialize the start pointer\n        end = 0  # Initialize the end pointer\n\n        # Traverse the array\n        while end < n:\n            # Expand the window by adding elements to curr_sum until it exceeds x\n            while curr_sum <= x and end < n:\n                curr_sum += arr[end]\n                end += 1\n\n            # Shrink the window from the left while curr_sum is greater than x\n            while curr_sum > x and start < n:\n                # Update the minimum length if the current window is smaller\n                if end - start < min_len:\n                    min_len = end - start\n\n                # Remove elements from the start of the window\n                curr_sum -= arr[start]\n                start += 1\n\n        # If no valid subarray is found, return 0\n        if min_len > n:\n            return 0\n        return min_len  # Return the minimum length\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} a - Input array of numbers\n * @param {number} x - Target sum to exceed\n * @return {number} - Length of the smallest subarray with sum greater than x, or 0 if\n *     no such subarray exists\n */\n\nclass Solution {\n    smallestSubWithSum(arr, x) {\n        let n = arr.length;                // Get the size of the array\n        let curr_sum = 0, min_len = n + 1; // Initialize current sum and minimum length\n        let start = 0, end = 0;            // Initialize start and end pointers\n\n        // Traverse the array\n        while (end < n) {\n            // Expand the window by adding elements to curr_sum until it exceeds x\n            while (curr_sum <= x && end < n) curr_sum += arr[end++];\n\n            // Shrink the window from the left while curr_sum is greater than x\n            while (curr_sum > x && start < n) {\n                // Update the minimum length if the current window is smaller\n                if (end - start < min_len) min_len = end - start;\n\n                // Remove elements from the start of the window\n                curr_sum -= arr[start++];\n            }\n        }\n\n        // If no valid subarray is found, return 0\n        if (min_len > n) return 0;\n        return min_len; // Return the minimum length\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}