{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709863,
            "title": "Smallest Subset with Greater Sum",
            "titleSlug": "smallest-subset-with-greater-sum",
            "content": "<p><span >You are given an array <strong><code>arr[]</code></strong> containing non-negative integers. Your task is to select the minimum number of elements such that the sum of the selected elements is greater than the sum of the remaining elements in the array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 17, 7, 3]\n<strong>Output: </strong>1\n<strong>Explanation: </strong>By selecting only the element <code>17</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, the sum of the remaining elements is </span><code>2 + 3 + 7 = 12</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, which is less than </span><code>17</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">. Thus, the minimum number of elements required is </span><code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [20, 12, 18, 4]\n<strong>Output: </strong>2\n<strong>Explanation: </strong>By selecting <code>12</code> and <code>18</code>, their sum becomes <code>12 + 18 = 30</code>, which is greater than the sum of the remaining elements <code>20 + 4 = 24</code>. Alternatively, selecting <code>20</code> and <code>18</code> would also satisfy the condition. Thus, the minimum number of elements required is <code>2</code>.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 1, 1, 1, 10]\n<strong>Output: </strong>1\n<strong>Explanation: </strong>Selecting only the element 10 gives a sum of 10, which is greater than the sum of the remaining elements (1 + 1 + 1 + 1 = 4). Therefore, the minimum number of elements required is 1.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>4</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of non-negative integers, `arr[]`, determine the minimum number of elements that must be selected such that their sum is strictly greater than the sum of the remaining elements in the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[2, 17, 7, 3]",
                        "output": "1",
                        "explanation": "Selecting only the element 17 results in a sum (17) that exceeds the sum of the remaining elements (2 + 3 + 7 = 12)."
                    },
                    {
                        "input": "[20, 12, 18, 4]",
                        "output": "2",
                        "explanation": "Selecting 12 and 18 yields a sum of 30, which is greater than the sum of the remaining elements 20 + 4 = 24.  Therefore, two elements are sufficient."
                    },
                    {
                        "input": "[1, 1, 1, 1, 10]",
                        "output": "1",
                        "explanation": "Selecting only the element 10 results in a sum of 10, which is greater than the sum of the remaining elements (1 + 1 + 1 + 1 = 4)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Focus on selecting elements that have the highest values first. Track the sum and compare it with the remaining elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the minimum number of elements in the first subset.\n    int minSubset(vector<int> &arr) {\n        long long sum = 0;\n\n        // Calculating the sum of all elements in the arr vector.\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr[i];\n        }\n\n        // Sorting the arr vector in descending order.\n        sort(arr.rbegin(), arr.rend());\n        long long res = 0;\n\n        // Iterating through the arr vector to find the minimum number of elements in\n        // the first subset.\n        for (int i = 0; i < arr.size(); i++) {\n            res += arr[i];\n            sum -= arr[i];\n\n            // If the sum of elements in the first subset becomes greater than the sum\n            // of remaining elements, return the index i + 1 which represents the\n            // minimum number of elements in the first subset.\n            if (res > sum) {\n                return i + 1;\n            }\n        }\n        // If no such index is found, return arr.size() which represents that all\n        // elements are in the first subset.\n        return arr.size();\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n//Back-end complete function Template for Java\nclass Solution {\n    // Function to find the minimum length of a subset\n    int minSubset(int[] arr) {\n        // Initializing the sum variable to store the sum of elements in the array\n        long sum = 0;\n\n        // Sorting the array in ascending order\n        Arrays.sort(arr);\n\n        // Calculating the sum of all elements in the array\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i];\n        }\n\n        // Initializing the result variable to store the sum of the subset\n        long res = 0;\n\n        // Starting from the end of the array\n        for (int i = arr.length - 1; i >= 0; i--) {\n            // Adding the current element to the result\n            res += arr[i];\n\n            // Subtracting the current element from the sum\n            sum -= arr[i];\n\n            // If the subset sum is greater than the remaining sum, return the subset\n            // size\n            if (res > sum) {\n                return arr.length - i;\n            }\n        }\n\n        // If no subset is found, return the total length of the array\n        return arr.length;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def minSubset(self, arr):\n        # Calculating the sum of all elements in the list.\n        total_sum = sum(arr)\n        res = 0\n        N = len(arr)  # Get the length of the array\n\n        # Sorting the list in descending order.\n        arr.sort(reverse=True)\n\n        # Iterating through the list.\n        for i in range(N):\n            # Adding the current element to the result subset.\n            res += arr[i]\n\n            # Subtracting the current element from the total sum.\n            total_sum -= arr[i]\n\n            # Checking if the sum of the result subset is greater than the remaining sum.\n            if res > total_sum:\n                return i + 1  # Return the number of elements in the result subset\n\n        # Returning the total number of elements in the list if no subset is found.\n        return N\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for C#\n\nclass Solution {\n    // Function to find the minimum number of elements in the first subset\n    public int minSubset(List<int> arr) {\n        long sum = 0;\n        int N = arr.Count; // Get the length of the list\n\n        // Calculating the sum of all elements in the arr list\n        for (int i = 0; i < N; i++) {\n            sum += arr[i];\n        }\n\n        // Sorting the arr list in descending order\n        arr.Sort();\n        arr.Reverse();\n        long res = 0;\n\n        // Iterating through the arr list to find the minimum number of elements in the\n        // first subset\n        for (int i = 0; i < N; i++) {\n            res += arr[i];\n            sum -= arr[i];\n\n            // If the sum of elements in the first subset becomes greater than the sum\n            // of remaining elements, return the index i+1 which represents the minimum\n            // number of elements in the first subset\n            if (res > sum) {\n                return i + 1;\n            }\n        }\n\n        // If no such index is found, return N which represents that all elements are in\n        // the first subset\n        return N;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    // Function to find the minimum number of elements in the first subset\n    minSubset(arr) {\n        let totalSum =\n            arr.reduce((sum, el) => sum + el, 0); // calculating sum of all elements\n        arr.sort((a, b) => b - a);                // sorting in descending order\n\n        let resSum = 0;\n        for (let i = 0; i < arr.length; i++) {\n            resSum += arr[i];   // adding elements to result subset\n            totalSum -= arr[i]; // subtracting the element from the total sum\n\n            // If result subset sum is greater than the remaining sum, return the number\n            // of elements in the subset\n            if (resSum > totalSum) {\n                return i + 1;\n            }\n        }\n\n        return arr.length; // if no subset is found, return total number of elements\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}