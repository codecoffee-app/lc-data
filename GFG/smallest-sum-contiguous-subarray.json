{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710028,
            "title": "Smallest sum contiguous subarray",
            "titleSlug": "smallest-sum-contiguous-subarray",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr[]&nbsp;</strong>of&nbsp;<strong>N</strong>&nbsp;integers. Find the contiguous sub-array(containing at least one number) which has the&nbsp;minimum&nbsp;sum and return its sum.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\narr[] = {3,-4, 2,-3,-1, 7,-5}\r\n<strong>Output:</strong> -6\r\n<strong>Explanation:</strong> sub-array which has smallest \r\nsum among all the sub-array is {-4,2,-3,-1} = -6</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\narr[] = {2, 6, 8, 1, 4}\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> sub-array which has smallest\r\nsum among all the sub-array is {1} = 1</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. The task is to complete the function <strong>smallestSubarraySum</strong>() which takes <strong>arr[]</strong> and <strong>N</strong> as input parameters and returns the sum of subarray with minimum sum.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N)<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>6</sup><br />\r\n-10<sup>7</sup>&nbsp;&le; A[i] &le; 10<sup>7</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The problem is very similier to Largest Subarray Sum Probelm (<a href=\"https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/\">link</a>)</span></p>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n  public:\r\n  int smallestSumSubarray(vector<int>& arr){\r\n    // to store the minimum value that is ending\r\n    // up to the current index\r\n    int n = arr.size();\r\n    int min_ending_here = INT_MAX;\r\n     \r\n    // to store the minimum value encountered so far\r\n    int min_so_far = INT_MAX;\r\n     \r\n    // traverse the array elements\r\n    for (int i=0; i<n; i++)\r\n    {\r\n        // if min_ending_here > 0, then it could not possibly\r\n        // contribute to the minimum sum further\r\n        if (min_ending_here > 0)\r\n            min_ending_here = arr[i];\r\n         \r\n        // else add the value arr[i] to min_ending_here   \r\n        else\r\n            min_ending_here += arr[i];\r\n         \r\n        // update min_so_far\r\n        min_so_far = min(min_so_far, min_ending_here);           \r\n    }\r\n     \r\n    // required smallest sum contiguous subarray value\r\n    return min_so_far;\r\n  }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    static int smallestSumSubarray(int a[], int size)\r\n    {\r\n        // your code here\r\n        // to store the minimum value that is ending\r\n        // up to the current index\r\n        int min_ending_here = Integer.MAX_VALUE;\r\n         \r\n        // to store the minimum value encountered so far\r\n        int min_so_far = Integer.MAX_VALUE;\r\n         \r\n        // traverse the array elements\r\n        for (int i=0; i<size; i++)\r\n        {\r\n            // if min_ending_here > 0, then it could not possibly\r\n            // contribute to the minimum sum further\r\n            if (min_ending_here > 0)\r\n                min_ending_here = a[i];\r\n             \r\n            // else add the value arr[i] to min_ending_here   \r\n            else\r\n                min_ending_here += a[i];\r\n             \r\n            // update min_so_far\r\n            min_so_far = Math.min(min_so_far, min_ending_here);           \r\n        }\r\n         \r\n        // required smallest sum contiguous subarray value\r\n        return min_so_far;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def smallestSumSubarray(self, A, N):\n        # Initialize variables to store minimum subarray sum\n        min_ending_here = 1e9 \n        min_so_far = 1e9\n      \n        for i in range(N):\n            # If the current element makes the sum smaller than 0, update min_ending_here\n            if (min_ending_here > 0):\n                min_ending_here = A[i]\n            \n            # Else, update min_ending_here by adding the current element\n            else:\n                min_ending_here += A[i]\n            \n            # Update min_so_far with the minimum of min_so_far and min_ending_here\n            min_so_far = min(min_so_far, min_ending_here)\n        \n        # Return the minimum subarray sum\n        return min_so_far",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} A\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the subarray with the smallest sum.\n    smallestSumSubarray(A, N)\n    {\n        // Initialize variables to store minimum subarray sum\n        let min_ending_here = 1e9; \n        let min_so_far = 1e9;\n      \n        for (let i = 0; i < N; i++) {\n            // If the current element makes the sum smaller than 0, update min_ending_here\n            if (min_ending_here > 0) {\n                min_ending_here = A[i];\n            }\n            \n            // Else, update min_ending_here by adding the current element\n            else {\n                min_ending_here += A[i];\n            }\n            \n            // Update min_so_far with the minimum of min_so_far and min_ending_here\n            min_so_far = Math.min(min_so_far, min_ending_here);\n        }\n        \n        // Return the minimum subarray sum\n        return min_so_far;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    \n    public int smallestSumSubarray(List<int> a)\n    {\n        // to store the minimum value that is ending\n        // up to the current index\n        int n = a.Count;\n        int min_ending_here = int.MaxValue;\n     \n        // to store the minimum value encountered so far\n        int min_so_far = int.MaxValue;\n     \n        // traverse the array elements\n        for (int i=0; i<n; i++)\n        {\n            // if min_ending_here > 0, then it could not possibly\n            // contribute to the minimum sum further\n            if (min_ending_here > 0)\n                min_ending_here = a[i];\n         \n            // else add the value a[i] to min_ending_here   \n            else\n                min_ending_here += a[i];\n         \n            // update min_so_far\n            min_so_far = Math.Min(min_so_far, min_ending_here);           \n        }\n     \n        // required smallest sum contiguous subarray value\n        return min_so_far;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}