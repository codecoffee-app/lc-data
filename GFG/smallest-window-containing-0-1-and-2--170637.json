{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709986,
            "title": "Smallest window containing 0, 1 and 2",
            "titleSlug": "smallest-window-containing-0-1-and-2--170637",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>S</strong> consisting of the characters <strong>0</strong>, <strong>1</strong> and <strong>2</strong>. Your task is to find the length of the <strong>smallest substring </strong>of string <strong>S</strong> that contains all the three characters <strong>0, 1 </strong>and <strong>2</strong>. If no such substring exists, then return <strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS = 10212\n<strong>Output:</strong>\n3\n<strong>Explanation:</strong>\nThe substring 102 is the smallest substring\nthat contains the characters 0, 1 and 2.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>\nS = 12121\n<strong>Output:</strong>\n-1\n<strong>Explanation: </strong>\nAs the character 0 is not present in the\nstring S, therefor no substring containing\nall the three characters 0, 1 and 2\nexists. Hence, the answer is -1 in this case.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Complete the function <strong>smallestSubstring()</strong> which takes the string <strong>S</strong> as input, and returns the length of the <strong>smallest substring </strong>of string S that contains all the three characters <strong>0, 1 </strong>and <strong>2.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O( length( S ) )<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; length( S )&nbsp;&le; 10<sup>5</sup><br />All the characters of String S lies in the set {'0', '1', '2'}</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` consisting of the characters '0', '1', and '2', find the length of the smallest substring of `S` that contains all three characters ('0', '1', and '2'). If no such substring exists, return -1.",
                "constraints": [
                    "1 <= length(S) <= 10^5",
                    "All characters of String S are in the set {'0', '1', '2'}"
                ],
                "testcases": [
                    {
                        "input": "10212",
                        "output": "3",
                        "explanation": "The substring \"102\" is the shortest substring that contains all the characters '0', '1', and '2'."
                    },
                    {
                        "input": "12121",
                        "output": "-1",
                        "explanation": "The character '0' is not present in the string, so no substring containing all three characters exists."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">What if we know the index of occurence of the righmost 0, 1 and 2 placed to its left for each character of the string?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to find the smallest substring with all three characters\n    int smallestSubstring(string S) {\n        bool answerExist = false;\n        int lastZero = -1, lastOne = -1, lastTwo = -1;\n        int ans = S.size();\n        for (int i = 0; i < S.size(); i++) {\n            // Updating the index of the last occurrence of each character\n            if (S[i] == '0') {\n                lastZero = i;\n            } else if (S[i] == '1') {\n                lastOne = i;\n            } else {\n                lastTwo = i;\n            }\n\n            // Checking if all three characters have occurred at least once\n            if (lastZero != -1 && lastOne != -1 && lastTwo != -1) {\n                answerExist = true;\n                // Calculating the length of the smallest substring with all three characters\n                ans = min(ans, 1 + i - min(lastZero, min(lastOne, lastTwo)));\n            }\n        }\n        // Returning the length of the smallest substring or -1 if no such substring exists\n        if (answerExist) {\n            return ans;\n        }\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\nclass Solution {\r\n    public int smallestSubstring(String S) {\r\n        // Set a flag to check if an answer exists\r\n        boolean answerExist = false;\r\n        \r\n        // Initialize variables to keep track of the last positions\r\n        int lastZero = -1, lastOne = -1, lastTwo = -1;\r\n        \r\n        // Initialize the answer length to be the length of the input string\r\n        int ans = S.length();\r\n        \r\n        // Iterate through each character in the input string\r\n        for (int i = 0; i < S.length(); i++) {\r\n            // Update the last positions based on the current character\r\n            if (S.charAt(i) == '0') {\r\n                lastZero = i;\r\n            } else if (S.charAt(i) == '1') {\r\n                lastOne = i;\r\n            } else {\r\n                lastTwo = i;\r\n            }\r\n\r\n            // Check if all three positions have been updated\r\n            if (lastZero != -1 && lastOne != -1 && lastTwo != -1) {\r\n                // Set the flag to indicate that an answer exists\r\n                answerExist = true;\r\n                \r\n                // Calculate the length of the substring and update the answer length\r\n                ans = Math.min(\r\n                    ans,\r\n                    1 + i - Math.min(lastZero, Math.min(lastOne, lastTwo)));\r\n            }\r\n        }\r\n        \r\n        // Check if an answer exists and return the final answer\r\n        if (answerExist) {\r\n            return ans;\r\n        }\r\n        return -1;\r\n    }\r\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def smallestSubstring(self, S):\n\n        answerExist = False\n        lastZero, lastOne, lastTwo = -1, -1, -1\n        ans = len(S)\n        for i in range(len(S)):\n            if (S[i] == '0'\n                ):  #if current character is '0', then update lastZero position\n                lastZero = i\n            elif (\n                    S[i] == '1'\n            ):  #if current character is '1', then update lastOne position\n                lastOne = i\n            else:  #if current character is '2', then update lastTwo position\n                lastTwo = i\n\n            if (lastZero != -1 and lastOne != -1 and lastTwo\n                    != -1):  #if all three positions have been updated\n                answerExist = True  #set answerExist to True\n                ans = min(ans, 1 + i - min(lastZero, min(lastOne, lastTwo))\n                          )  #calculate new substring length and update ans\n\n        if (answerExist):  #if answerExist is True, return ans\n            return ans\n\n        return -1  #if answer does not exist, return -1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {string} S\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to check whether the list is palindrome.\r\n    smallestSubstring(S)\r\n    {\r\n        let answerExist = false;\r\n        let lastZero = -1;\r\n        let lastOne = -1;\r\n        let lastTwo = -1;\r\n        let ans = S.length;\r\n\r\n        for (let i = 0; i < S.length; i++) {\r\n            if (S[i] === '0') {\r\n                lastZero = i;\r\n            }\r\n            else if (S[i] === '1') {\r\n                lastOne = i;\r\n            }\r\n            else {\r\n                lastTwo = i;\r\n            }\r\n\r\n            if (lastZero !== -1 && lastOne !== -1 && lastTwo !== -1) {\r\n                answerExist = true;\r\n                ans = Math.min(ans, 1 + i - Math.min(lastZero, Math.min(lastOne, lastTwo)));\r\n            }\r\n        }\r\n\r\n        if (answerExist) {\r\n            return ans;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}