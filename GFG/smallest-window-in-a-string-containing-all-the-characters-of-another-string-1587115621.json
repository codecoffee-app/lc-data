{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701310,
            "title": "Smallest window containing all characters of another string",
            "titleSlug": "smallest-window-in-a-string-containing-all-the-characters-of-another-string-1587115621",
            "content": "<p><span >Given two strings <strong>s1</strong> and <strong>s2</strong>. Find the smallest window in the string <strong>s1</strong> consisting of all the characters(<strong>including duplicates</strong>) of the string <strong>s2.</strong> Return \"\" in case no such window is present. If there are multiple such windows of the same length, return the one with the <strong>least starting index</strong>.<br /><strong>Note</strong>: All characters are in lowercase letters.&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s1 = \"timetopractice\", s2 = \"toc\"\n<strong>Output: \"</strong>toprac\"<strong>\nExplanation: \"</strong>toprac\" is the smallest substring in which \"toc\" can be found.\n</span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"zoomlazapzo\",<strong> s2 </strong>= \"oza\"\n<strong>Output: \"</strong>apzo\"<strong>\nExplanation: </strong><strong>\"</strong>apzo\" is the smallest substring in which \"oza\" can be found.<br /></span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"zoom\", s2 = \"zooe\"\n<strong>Output:</strong> \"\"<strong>\nExplanation: </strong>No window is present containing all characters of s2.</span></pre>\n<p><span ><strong>Constraints:&nbsp;</strong><br />1 &le; |s1|, |s2| &le; 10<sup>5<br /></sup></span><span ><sup>s1,s2 consists of lowercase letters only</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, find the smallest window in `s1` that contains all the characters of `s2` (including duplicates). If no such window exists, return an empty string. If multiple windows of the same length exist, return the one with the smallest starting index. All characters are lowercase letters.",
                "constraints": [
                    "1 <= |s1|, |s2| <= 10^5",
                    "s1 and s2 consist of lowercase letters only"
                ],
                "testcases": [
                    {
                        "input": "s1 = \"timetopractice\", s2 = \"toc\"",
                        "output": "toprac",
                        "explanation": "`toprac` is the shortest substring of `timetopractice` containing all characters of `toc`."
                    },
                    {
                        "input": "s1 = \"zoomlazapzo\", s2 = \"oza\"",
                        "output": "apzo",
                        "explanation": "`apzo` is the shortest substring of `zoomlazapzo` containing all characters of `oza`."
                    },
                    {
                        "input": "s1 = \"zoom\", s2 = \"zooe\"",
                        "output": "",
                        "explanation": "No substring of `zoom` contains all characters of `zooe`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You can use the <strong>sliding window technique</strong> combined with <strong>character frequency counting</strong> to solve this problem efficiently.</p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "makemytrip",
            "google",
            "streamoid-technologies",
            "media.net",
            "atlassian"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the smallest window in the string s1 consisting\n    // of all the characters of string s2.\n    string smallestWindow(string &s1, string &s2) {\n        // if length of string s2 is greater than string s1 then we return -1.\n        if (s2.length() > s1.length()) {\n            return \"\";\n        } else {\n            // using hash tables to store the count of characters in strings.\n            int shash[26] = {0};\n            int phash[26] = {0};\n\n            // storing the count of characters in string s2 in hash table.\n            for (int i = 0; i < s2.length(); i++) {\n                phash[s2[i] - 'a']++;\n            }\n\n            int counter = 0;\n            int begin = 0;\n            int startindex = -1;\n            int length = 0;\n            int minlength = INT_MAX;\n            for (int i = 0; i < s1.length(); i++) {\n                // storing the count of characters in string s1 in hash table.\n                shash[s1[i] - 'a']++;\n\n                // if count of current character in string s1 is equal to or less\n                // than in string s2, we increment the counter.\n                if (phash[s1[i] - 'a'] != 0 &&\n                    shash[s1[i] - 'a'] <= phash[s1[i] - 'a']) {\n                    counter++;\n                }\n\n                // if all the characters are matched\n                if (counter == s2.length()) {\n                    // we try to minimize the window.\n                    while (shash[s1[begin] - 'a'] > phash[s1[begin] - 'a'] ||\n                           phash[s1[begin] - 'a'] == 0) {\n                        if (shash[s1[begin] - 'a'] > phash[s1[begin] - 'a'])\n                            shash[s1[begin] - 'a']--;\n                        begin++;\n                    }\n                    // updating window size.\n                    length = i - begin + 1;\n                    if (length < minlength) {\n                        // if new minimum sub-string is found, we store value\n                        // of its starting index for new found window.\n                        startindex = begin;\n                        minlength = length;\n                    }\n                }\n            }\n\n            // returning the smallest window or -1 if no such window is present.\n            if (startindex == -1)\n                return \"\";\n            else\n                return s1.substr(startindex, minlength);\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the smallest window in the string s1 consisting\n    // of all the characters of string s2.\n    public static String smallestWindow(String s1, String s2) {\n\n        int len1 = s1.length();\n        int len2 = s2.length();\n\n        // if length of string s2 is greater than string s1 then we return -1.\n        if (len1 < len2) {\n            return \"\";\n        }\n\n        // using hash tables to store the count of characters in strings.\n        int[] hash_pat = new int[256];\n        int[] hash_str = new int[256];\n\n        // storing the count of characters in string s2 in hash table.\n        for (int i = 0; i < len2; i++) {\n            hash_pat[s2.charAt(i)]++;\n        }\n\n        int start = 0;\n        int start_index = -1;\n        int min_len = Integer.MAX_VALUE;\n        int count = 0;\n        for (int j = 0; j < len1; j++) {\n            // storing the count of characters in string s1 in hash table.\n            hash_str[s1.charAt(j)]++;\n\n            // if count of current character in string s1 is equal to or less\n            // than in string s2, we increment the counter.\n            if (hash_pat[s1.charAt(j)] != 0 &&\n                hash_str[s1.charAt(j)] <= hash_pat[s1.charAt(j)]) {\n                count++;\n            }\n\n            // if all the characters are matched\n            if (count == len2) {\n                while (hash_str[s1.charAt(start)] > hash_pat[s1.charAt(start)] ||\n                       hash_pat[s1.charAt(start)] == 0) {\n                    // we try to minimize the window.\n                    if (hash_str[s1.charAt(start)] > hash_pat[s1.charAt(start)]) {\n                        hash_str[s1.charAt(start)]--;\n                    }\n                    start++;\n                }\n                // updating window size.\n                int len_window = j - start + 1;\n                if (min_len > len_window) {\n                    // if new minimum sub-string is found, we store value\n                    // of its starting index for new found window.\n                    min_len = len_window;\n                    start_index = start;\n                }\n            }\n        }\n        // returning the smallest window or -1 if no such window is present.\n        if (start_index == -1) {\n            return (\"\");\n        } else {\n            return (s1.substring(start_index, start_index + min_len));\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find the smallest window in the string s1 consisting\n    # of all the characters of string s2.\n    def smallestWindow(self, s1: str, s2: str) -> str:\n        if not s1 or not s2:\n            return \"\"\n\n        # Dictionary to keep a count of all the unique characters in s2.\n        phash = defaultdict(int)\n        for char in s2:\n            phash[char] += 1\n\n        # Number of unique characters in s2 that need to be present in the desired window.\n        required = len(phash)\n\n        # Left and Right pointers\n        left, right = 0, 0\n\n        # formed is used to keep track of how many unique characters in s2\n        # are present in the current window in its desired frequency.\n        formed = 0\n\n        # Dictionary to keep a count of all the unique characters in the current window.\n        window_counts = defaultdict(int)\n\n        # (window length, left, right)\n        ans = float(\"inf\"), None, None\n\n        while right < len(s1):\n            character = s1[right]\n            window_counts[character] += 1\n\n            # If the current character's frequency matches its frequency in s2, increment formed.\n            if character in phash and window_counts[character] == phash[\n                    character]:\n                formed += 1\n\n            # Try and contract the window till the point it ceases to be 'desirable'.\n            while left <= right and formed == required:\n                character = s1[left]\n\n                # Save the smallest window until now.\n                if right - left + 1 < ans[0]:\n                    ans = (right - left + 1, left, right)\n\n                # The character at the position pointed by the `left` pointer is no longer a part of the window.\n                window_counts[character] -= 1\n                if character in phash and window_counts[character] < phash[\n                        character]:\n                    formed -= 1\n\n                left += 1\n\n            # Keep expanding the window once we are done contracting.\n            right += 1\n\n        if ans[0] == float(\"inf\"):\n            return \"\"\n        else:\n            return s1[ans[1]:ans[2] + 1]\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public string SmallestWindow(string s1, string s2) {\n        if (s2.Length > s1.Length) return \"\";\n\n        Dictionary<char, int> phash = new Dictionary<char, int>();\n        Dictionary<char, int> shash = new Dictionary<char, int>();\n\n        // Populate character frequency for s2\n        foreach (char ch in s2) {\n            if (phash.ContainsKey(ch))\n                phash[ch]++;\n            else\n                phash[ch] = 1;\n        }\n\n        int counter = 0, begin = 0, startIndex = -1;\n        int minLength = int.MaxValue;\n\n        for (int i = 0; i < s1.Length; i++) {\n            char currentChar = s1[i];\n\n            if (shash.ContainsKey(currentChar))\n                shash[currentChar]++;\n            else\n                shash[currentChar] = 1;\n\n            // If current char count in s1 does not exceed required count in s2,\n            // increase counter\n            if (phash.ContainsKey(currentChar) &&\n                shash[currentChar] <= phash[currentChar]) {\n                counter++;\n            }\n\n            // If all characters are matched\n            while (counter == s2.Length) {\n                char beginChar = s1[begin];\n\n                // Minimize the window\n                if (phash.ContainsKey(beginChar) &&\n                    shash[beginChar] > phash[beginChar]) {\n                    shash[beginChar]--;\n                    begin++;\n                } else if (!phash.ContainsKey(beginChar)) {\n                    begin++;\n                } else {\n                    break;\n                }\n            }\n\n            // Update the result if a smaller valid window is found\n            int length = i - begin + 1;\n            if (counter == s2.Length && length < minLength) {\n                minLength = length;\n                startIndex = begin;\n            }\n        }\n\n        return startIndex == -1 ? \"\" : s1.Substring(startIndex, minLength);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * Function to find the smallest window in string s1 containing all characters of s2\n     * @param {string} s1\n     * @param {string} s2\n     * @return {string}\n     */\n    smallestWindow(s1, s2) {\n        if (!s1 || !s2 || s2.length > s1.length) {\n            return \"\";\n        }\n\n        // Frequency map for characters in s2\n        const phash = new Map();\n        for (let char of s2) {\n            phash.set(char, (phash.get(char) || 0) + 1);\n        }\n\n        const required = phash.size;\n\n        let left = 0, right = 0;\n        let formed = 0;\n        const windowCounts = new Map();\n\n        // Array to store the best window found: [window length, left index, right\n        // index]\n        let ans = [ Infinity, null, null ];\n\n        while (right < s1.length) {\n            const char = s1[right];\n            windowCounts.set(char, (windowCounts.get(char) || 0) + 1);\n\n            // If current character's frequency matches its required frequency in s2\n            if (phash.has(char) && windowCounts.get(char) === phash.get(char)) {\n                formed += 1;\n            }\n\n            // Try to contract the window till it ceases to be 'desirable'\n            while (left <= right && formed === required) {\n                const charLeft = s1[left];\n\n                // Save the smallest window until now\n                if (right - left + 1 < ans[0]) {\n                    ans = [ right - left + 1, left, right ];\n                }\n\n                windowCounts.set(charLeft, windowCounts.get(charLeft) - 1);\n                if (phash.has(charLeft) &&\n                    windowCounts.get(charLeft) < phash.get(charLeft)) {\n                    formed -= 1;\n                }\n\n                left += 1;\n            }\n\n            // Expand the window\n            right += 1;\n        }\n\n        if (ans[0] === Infinity) {\n            return \"\";\n        } else {\n            return s1.substring(ans[1], ans[2] + 1);\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}