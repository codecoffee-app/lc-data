{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705123,
            "title": "Smith Number",
            "titleSlug": "smith-number4132",
            "content": "<p><span style=\"font-size: 18px;\">Given a number <strong>n</strong>, the task is to find out whether this number is a <strong>Smith number</strong> or not. A Smith number is <strong>a composite</strong> <strong>number</strong> whose sum of digits is equal to the <strong>sum of digits of its prime factorization</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\">n = 648</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">648 = 2<sup>3</sup>*3<sup>4</sup>, 6+4+8 = 2+2+2+3+3+3+3. And since 648 is a <strong>composite number</strong>, 648 is a Smith number.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\">n = 762</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">762 = 2<sup>1</sup>*3<sup>1</sup>*127<sup>1</sup> is a Smith number since 7+6+2 = 2+3+(1+2+7) and it is a <strong>composite number</strong>.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 3:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\">n = 7</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">0</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">7 is not a Smith number since 7 is <strong>not</strong> a <strong>composite number</strong>.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>smithNum()</strong> which takes an Integer n as input and returns the answer.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(sqrt(n) * log(n))<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Determine if a given number, `n`, is a Smith number. A Smith number is a composite number where the sum of its digits is equal to the sum of the digits of its prime factorization.",
                "constraints": [
                    "1 <= n <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "648",
                        "output": "1",
                        "explanation": "648 is a composite number. Its prime factorization is 2^3 * 3^4. The sum of the digits of 648 (6+4+8 = 18) is equal to the sum of the digits of its prime factors (2+2+2+3+3+3+3 = 18). Therefore, 648 is a Smith number."
                    },
                    {
                        "input": "762",
                        "output": "1",
                        "explanation": "762 is a composite number. Its prime factorization is 2^1 * 3^1 * 127^1. The sum of the digits of 762 (7+6+2 = 15) is equal to the sum of the digits of its prime factors (2+3+(1+2+7) = 15). Therefore, 762 is a Smith number."
                    },
                    {
                        "input": "7",
                        "output": "0",
                        "explanation": "7 is not a Smith number because it is a prime number, and Smith numbers must be composite."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use Sieve of eratosthenes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "series",
                "slug": "series"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\r\nclass Solution {\r\n  public:\r\n  \r\n    int sumofdigit(int n){\r\n        int curr = n , sums=0;\r\n        while(curr > 0)\r\n        {\r\n            sums += curr % 10;\r\n            curr /= 10;\r\n        }\r\n        return sums;\r\n    }    \r\n    \r\n    int smithNum(int n) {\r\n        \r\n        int sum=0,curr=sumofdigit(n),res=n;\r\n        for(int i=2;i*i<=n;i++)\r\n        {\r\n            while(n % i == 0)\r\n            {\r\n                sum += sumofdigit(i);\r\n                n /= i;\r\n            }\r\n        }\r\n        if(n > 1)\r\n        {\r\n            sum+=sumofdigit(n);\r\n        }\r\n        if(res == n) // prime number\r\n        {\r\n            return 0;\r\n        }\r\n        if(curr == sum)\r\n        {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution \n{\n    static int sumofdigit(int n)\n    {\n        int curr = n , sums=0;\n        while(curr > 0)\n        {\n            sums += curr % 10;\n            curr /= 10;\n        }\n        return sums;\n    }    \n    \n    static int smithNum(int n) \n    {\n        int sum=0,curr=sumofdigit(n),res=n;\n        for(int i=2;i*i<=n;i++)\n        {\n            while(n % i == 0)\n            {\n                sum += sumofdigit(i);\n                n /= i;\n            }\n        }\n        if(n > 1)\n        {\n            sum+=sumofdigit(n);\n        }\n        if(res == n)\n        {\n            return 0;\n        }\n        if(curr == sum)\n        {\n            return 1;\n        }\n        return 0;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    def sumofdigit(self, n):\n        curr = n\n        sums = 0\n        while curr > 0:\n            sums += curr % 10\n            curr //= 10\n        return sums\n    \n    def smithNum(self, n):\n        sum_val = 0\n        curr = self.sumofdigit(n)\n        res = n\n        \n        i = 2\n        while i * i <= n:\n            while n % i == 0:\n                sum_val += self.sumofdigit(i)\n                n //= i\n            i += 1\n        \n        if n > 1:\n            sum_val += self.sumofdigit(n)\n        \n        if res == n:  # prime number\n            return 0\n        if curr == sum_val:\n            return 1\n        return 0\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}