{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701375,
            "title": "Solve the Sudoku",
            "titleSlug": "solve-the-sudoku-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">Given an&nbsp;incomplete&nbsp;<a href=\"https://www.geeksforgeeks.org/introduction-to-sudoku-puzzles-and-how-to-solve-them/\"><strong>Sudoku</strong></a> configuration in terms of a 9x9&nbsp; 2-D interger square matrix, <strong>mat[][]</strong>, the task is to solve the Sudoku.&nbsp;</span><span style=\"font-size: 18px;\">It is <strong>guaranteed </strong>that the input Sudoku will have exactly <strong>one </strong>solution.</span></p>\n<p><span style=\"font-size: 18px;\">A sudoku solution must satisfy&nbsp;all of the following rules:</span></p>\n<ol>\n<li><span style=\"font-size: 18px;\">Each of the digits&nbsp;<code>1-9</code>&nbsp;must occur exactly once in each row.</span></li>\n<li><span style=\"font-size: 18px;\">Each of the digits&nbsp;<code>1-9</code>&nbsp;must occur exactly once in each column.</span></li>\n<li><span style=\"font-size: 18px;\">Each of the digits&nbsp;<code>1-9</code>&nbsp;must occur exactly once in each of the 9&nbsp;<code>3x3</code>&nbsp;sub-boxes of the grid.</span></li>\n</ol>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> Zeros represent blanks to be filled with numbers 1-9, while non-zero cells are <strong>fixed </strong>and cannot be changed.</span><span style=\"font-size: 18px;\"><br /></span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">mat[][] = \n</span><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/701375/Web/Other/blobid0_1738306620.png\" alt=\"\" width=\"260\" height=\"212\" />\n</span><strong style=\"font-size: 18px;\">Output:</strong><span style=\"font-size: 18px;\">\n<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/701375/Web/Other/blobid0_1738306722.png\" alt=\"\" width=\"258\" height=\"203\" /><br /></span><strong style=\"font-size: 18px;\">Explanation:</strong><span style=\"font-size: 18px;\"> Each row, column and 3 x 3 box of the output matrix contains unique numbers.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">mat[][] = \n</span><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/886267/Web/Other/blobid1_1738136756.png\" alt=\"\" width=\"262\" height=\"209\" /><br /></span><strong style=\"font-size: 18px;\">Output:</strong><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/701375/Web/Other/blobid0_1738306722.png\" alt=\"\" width=\"258\" height=\"203\" /><br /><strong style=\"font-size: 18px;\">Explanation:</strong><span style=\"font-size: 18px;\"> Each row, column and 3 x 3 box of the output matrix contains unique numbers.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />mat.size() = 9<br />mat[i].size() = 9<br />0 &le; mat[i][j] &le; 9<br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho",
            "flipkart",
            "amazon",
            "microsoft",
            "makemytrip",
            "ola-cabs",
            "oracle",
            "maq-software",
            "directi",
            "paypal",
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool isSafe(vector<vector<int>> &mat, int i, int j, int num, vector<int> &row,\n                vector<int> &col, vector<int> &box) {\n\n        if ((row[i] & (1 << num)) || (col[j] & (1 << num)) ||\n            (box[i / 3 * 3 + j / 3] & (1 << num)))\n            return false;\n\n        return true;\n    }\n\n    bool sudokuSolverRec(vector<vector<int>> &mat, int i, int j, vector<int> &row,\n                         vector<int> &col, vector<int> &box) {\n        int n = mat.size();\n\n        // base case: Reached nth column of last row\n        if (i == n - 1 && j == n)\n            return true;\n\n        // If reached last column of the row go to next row\n        if (j == n) {\n            i++;\n            j = 0;\n        }\n\n        // If cell is already occupied then move forward\n        if (mat[i][j] != 0)\n            return sudokuSolverRec(mat, i, j + 1, row, col, box);\n\n        for (int num = 1; num <= n; num++) {\n\n            // If it is safe to place num at current position\n            if (isSafe(mat, i, j, num, row, col, box)) {\n                mat[i][j] = num;\n\n                // Update masks for the corresponding row, column and box\n                row[i] |= (1 << num);\n                col[j] |= (1 << num);\n                box[i / 3 * 3 + j / 3] |= (1 << num);\n\n                if (sudokuSolverRec(mat, i, j + 1, row, col, box))\n                    return true;\n\n                // Unmask the number num in the corresponding row, column and box masks\n                mat[i][j] = 0;\n                row[i] &= ~(1 << num);\n                col[j] &= ~(1 << num);\n                box[i / 3 * 3 + j / 3] &= ~(1 << num);\n            }\n        }\n\n        return false;\n    }\n\n    void solveSudoku(vector<vector<int>> &mat) {\n        int n = mat.size();\n        vector<int> row(n, 0), col(n, 0), box(n, 0);\n\n        // Set the bits in bitmasks for values that are initital present\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (mat[i][j] != 0) {\n                    row[i] |= (1 << mat[i][j]);\n                    col[j] |= (1 << mat[i][j]);\n                    box[(i / 3) * 3 + j / 3] |= (1 << mat[i][j]);\n                }\n            }\n        }\n\n        sudokuSolverRec(mat, 0, 0, row, col, box);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find a solved Sudoku.\n    static boolean isSafe(int[][] mat, int i, int j, int num, int[] row, int[] col,\n                          int[] box) {\n        if ((row[i] & (1 << num)) != 0 || (col[j] & (1 << num)) != 0 ||\n            (box[i / 3 * 3 + j / 3] & (1 << num)) != 0)\n            return false;\n\n        return true;\n    }\n\n    static boolean sudokuSolverRec(int[][] mat, int i, int j, int[] row, int[] col,\n                                   int[] box) {\n        int n = mat.length;\n\n        // base case: Reached nth column of last row\n        if (i == n - 1 && j == n) return true;\n\n        // If reached last column of the row go to next row\n        if (j == n) {\n            i++;\n            j = 0;\n        }\n\n        // If cell is already occupied then move forward\n        if (mat[i][j] != 0) return sudokuSolverRec(mat, i, j + 1, row, col, box);\n\n        for (int num = 1; num <= n; num++) {\n            // If it is safe to place num at current position\n            if (isSafe(mat, i, j, num, row, col, box)) {\n                mat[i][j] = num;\n\n                // Update masks for the corresponding row, column and box\n                row[i] |= (1 << num);\n                col[j] |= (1 << num);\n                box[i / 3 * 3 + j / 3] |= (1 << num);\n\n                if (sudokuSolverRec(mat, i, j + 1, row, col, box)) return true;\n\n                // Unmask the number num in the corresponding row, column and box masks\n                mat[i][j] = 0;\n                row[i] &= ~(1 << num);\n                col[j] &= ~(1 << num);\n                box[i / 3 * 3 + j / 3] &= ~(1 << num);\n            }\n        }\n\n        return false;\n    }\n\n    static void solveSudoku(int[][] mat) {\n        int n = mat.length;\n        int[] row = new int[n];\n        int[] col = new int[n];\n        int[] box = new int[n];\n\n        // Set the bits in bitmasks for values that are initially present\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (mat[i][j] != 0) {\n                    row[i] |= (1 << mat[i][j]);\n                    col[j] |= (1 << mat[i][j]);\n                    box[(i / 3) * 3 + j / 3] |= (1 << mat[i][j]);\n                }\n            }\n        }\n\n        sudokuSolverRec(mat, 0, 0, row, col, box);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def isSafe(self, mat, i, j, num, row, col, box):\n        if (row[i] & (1 << num)) or (col[j] &\n                                     (1 << num)) or (box[i // 3 * 3 + j // 3] &\n                                                     (1 << num)):\n            return False\n        return True\n\n    def sudokuSolverRec(self, mat, i, j, row, col, box):\n        n = len(mat)\n\n        # base case: Reached nth column of last row\n        if i == n - 1 and j == n:\n            return True\n\n        # If reached last column of the row go to next row\n        if j == n:\n            i += 1\n            j = 0\n\n        # If cell is already occupied then move forward\n        if mat[i][j] != 0:\n            return self.sudokuSolverRec(mat, i, j + 1, row, col, box)\n\n        for num in range(1, n + 1):\n            # If it is safe to place num at current position\n            if self.isSafe(mat, i, j, num, row, col, box):\n                mat[i][j] = num\n\n                # Update masks for the corresponding row, column and box\n                row[i] |= (1 << num)\n                col[j] |= (1 << num)\n                box[i // 3 * 3 + j // 3] |= (1 << num)\n\n                if self.sudokuSolverRec(mat, i, j + 1, row, col, box):\n                    return True\n\n                # Unmask the number num in the corresponding row, column and box masks\n                mat[i][j] = 0\n                row[i] &= ~(1 << num)\n                col[j] &= ~(1 << num)\n                box[i // 3 * 3 + j // 3] &= ~(1 << num)\n\n        return False\n\n    def solveSudoku(self, mat):\n        n = len(mat)\n        row = [0] * n\n        col = [0] * n\n        box = [0] * n\n\n        # Set the bits in bitmasks for values that are initially present\n        for i in range(n):\n            for j in range(n):\n                if mat[i][j] != 0:\n                    row[i] |= (1 << mat[i][j])\n                    col[j] |= (1 << mat[i][j])\n                    box[(i // 3) * 3 + j // 3] |= (1 << mat[i][j])\n\n        self.sudokuSolverRec(mat, 0, 0, row, col, box)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    isSafe(mat, i, j, num, row, col, box) {\n        if ((row[i] & (1 << num)) !== 0 || (col[j] & (1 << num)) !== 0 ||\n            (box[Math.floor(i / 3) * 3 + Math.floor(j / 3)] & (1 << num)) !== 0)\n            return false;\n\n        return true;\n    }\n\n    sudokuSolverRec(mat, i, j, row, col, box) {\n        const n = mat.length;\n\n        // base case: Reached nth column of last row\n        if (i === n - 1 && j === n) return true;\n\n        // If reached last column of the row, go to next row\n        if (j === n) {\n            i++;\n            j = 0;\n        }\n\n        // If cell is already occupied, then move forward\n        if (mat[i][j] !== 0) return this.sudokuSolverRec(mat, i, j + 1, row, col, box);\n\n        for (let num = 1; num <= n; num++) {\n\n            // If it is safe to place num at current position\n            if (this.isSafe(mat, i, j, num, row, col, box)) {\n                mat[i][j] = num;\n\n                // Update masks for the corresponding row, column, and box\n                row[i] |= (1 << num);\n                col[j] |= (1 << num);\n                box[Math.floor(i / 3) * 3 + Math.floor(j / 3)] |= (1 << num);\n\n                if (this.sudokuSolverRec(mat, i, j + 1, row, col, box)) return true;\n\n                // Unmask the number num in the corresponding row, column and box masks\n                mat[i][j] = 0;\n                row[i] &= ~(1 << num);\n                col[j] &= ~(1 << num);\n                box[Math.floor(i / 3) * 3 + Math.floor(j / 3)] &= ~(1 << num);\n            }\n        }\n\n        return false;\n    }\n\n    solveSudoku(mat) {\n        const n = mat.length;\n        const row = new Array(n).fill(0);\n        const col = new Array(n).fill(0);\n        const box = new Array(n).fill(0);\n\n        // Set the bits in bitmasks for values that are initially present\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < n; j++) {\n                if (mat[i][j] !== 0) {\n                    row[i] |= (1 << mat[i][j]);\n                    col[j] |= (1 << mat[i][j]);\n                    box[Math.floor(i / 3) * 3 + Math.floor(j / 3)] |= (1 << mat[i][j]);\n                }\n            }\n        }\n\n        this.sudokuSolverRec(mat, 0, 0, row, col, box);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}