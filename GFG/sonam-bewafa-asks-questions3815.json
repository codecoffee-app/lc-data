{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702846,
            "title": "Find Marks from Ranks",
            "titleSlug": "sonam-bewafa-asks-questions3815",
            "content": "<p>Students take a test and receive marks where lower marks correspond to higher ranks (rank1 has the lowest mark, rank2 the next lowest, etc.). Marks are divided into <strong>n </strong>non-overlapping sorted intervals, each defined by:</p>\n<ul>\n<li><strong>l[i]:</strong> The lowest mark in the interval.</li>\n<li><strong>r[i]:</strong> The highest mark in the interval.</li>\n</ul>\n<p>Given <strong>q </strong>queries, each with a rank <strong>rank[j]</strong>, determine the mark corresponding to that rank.</p>\n<p><strong>Examples:</strong></p>\n<pre><strong>Input:</strong> n = 3, q = 3<br />l[] = [1, 6, 14]<br />r[] = [3, 9, 15]<br />rank[] = [2, 5, 8]<br /><strong>Output:</strong> [2, 7, 14]<br /><strong>Explanation:&nbsp;<br /></strong>Marks: 1, 2, 3, 6, 7, 8, 9, 14, 15<br />Ranks: 1, 2, 3, 4, 5, 6, 7, 8, 9<br /><em>Rank 2</em> corresponds to mark 2.<br /><em>Rank 5</em> corresponds to mark 7.<br /><em>Rank 8</em> corresponds to mark 14.</pre>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>1 &lt;= n &lt;=10<sup>5</sup></li>\n<li>1 &lt;= q &lt;=10<sup>5</sup></li>\n<li>1&lt;= l[i] &lt; r[i] &lt;=10<sup>18</sup></li>\n<li>1&lt;= rank[j] &lt;=10<sup>18</sup></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:20px\">As the interval is not continuous, so first we have to make the interval in a continous manner. So to do that , we can make an new array as described below.</span></p>\n\n<p><span style=\"font-size:20px\">&nbsp;newrank[1] = r[1];<br />\n&nbsp; &nbsp; &nbsp; &nbsp; for (ll i=2;i&lt;=n;i++)<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {</span></p>\n\n<p><span style=\"font-size:20px\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newrank[i] = r[i] - (l[i] - newrank[i-1] - 1);<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }</span></p>\n\n<p><span style=\"font-size:20px\">Here r[] and l[] are the respective left and right rank interval.</span></p>\n\n<p><span style=\"font-size:20px\">and newrank[] will contain the last rank for the respective interval ie. in sample case it is 10,19,28</span></p>\n\n<p><span style=\"font-size:20px\">Then accroding to given rank given in the queries, perform the binary search algorithm and find out the index of the interval and check with the newrank[].First subtraxt it from the given rank for that case and to find out the final answer, subtract this answer from the given r[] of the index that just we found with binary search.</span></p>\n\n<p><span style=\"font-size:20px\">This is done with this part of the code:</span></p>\n\n<p><br />\n<span style=\"font-size:20px\">&nbsp; &nbsp; &nbsp; &nbsp; for(ll i=1;i&lt;=q;i++)<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; ll val1=bin_search(newrank,0,n,rank[i]);<br />\n&nbsp; &nbsp; &nbsp; &nbsp; ll ans=newrank[val1]-rank[i];<br />\n&nbsp; &nbsp; &nbsp; &nbsp; print r[val1]-ans<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\nclass Solution{\r\n    public:\r\n    // Function to calculate modular exponentiation\r\n    ll modpow(ll a, ll b, ll c)\r\n    {\r\n        ll ans=1;\r\n        while(b!=0)\r\n        {\r\n            if(b%2==1)\r\n            ans=(ans*a)%c;\r\n            a=(a*a)%c;\r\n            b=b/2;\r\n        }\r\n        return ans;\r\n    }\r\n    \r\n    // Function to perform binary search\r\n    ll bnry(ll newrank[],ll low,ll high, ll val)\r\n    {\r\n        ll mid=(low+high)/2;\r\n        \r\n        // Checking base case for binary search\r\n        if(high==low+1)\r\n        return high;\r\n        \r\n        // Recursive case for binary search\r\n        if(newrank[mid]>val)\r\n        return bnry(newrank,low,mid,val);\r\n        else if(newrank[mid]<val)\r\n        return bnry(newrank,mid,high,val);\r\n        else \r\n        return mid;\r\n    }\r\n    \r\n    // Function to get the test marks\r\n    void getTestMarks(ll n, ll q, ll r[], ll l[], ll rank[], ll StoreAnswer[])\r\n    {\r\n        ll newrank[n+5];\r\n        newrank[1]=r[1];\r\n        \r\n        // Calculating the new rank based on the given formula\r\n        for(ll i=2;i<=n;i++)\r\n            newrank[i]=r[i]-(l[i]-newrank[i-1]-1);\r\n        \r\n        newrank[0]=0;\r\n    \r\n        // Loop to calculate ans and store it in StoreAnswer[]\r\n        for(ll i=1;i<=q;i++)\r\n        {\r\n            ll val1=bnry(newrank,0,n,rank[i]);\r\n            ll ans=newrank[val1]-rank[i];\r\n            StoreAnswer[i] = r[val1]-ans;\r\n        }\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}