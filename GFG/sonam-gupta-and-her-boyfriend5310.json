{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703571,
            "title": "Maximum distance in a string",
            "titleSlug": "sonam-gupta-and-her-boyfriend5310",
            "content": "<p><span style=\"font-size:20px\">Given a String S&nbsp;(in lowerCase only). Starting from letter &#39;a&#39; which is the only source. for example:- &quot;aaabcahd...&quot; . Now you can only jump from one character to another in the form that&nbsp;a to b; b to c; c to d and so on. You have to find the maximum distance from source to destination. And if there is no place to jump on then print -1.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong></span><span style=\"font-size:18px\">aaabcb</span>\n\n<span style=\"font-size:18px\"><strong>Output:</strong> 6</span>\n\n<span style=\"font-size:18px\"><strong>Explanation: </strong>As &#39;a&#39; will only jump to &#39;b&#39; \nand the maximum distance will is 6.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>aabac</span>\n\n<span style=\"font-size:18px\"><strong>Output: </strong>5</span>\n\n<span style=\"font-size:18px\"><strong>Explanation: </strong>As &#39;a&#39; will only jump to &#39;b&#39; \nand &#39;b&#39; will jump to &#39;c&#39; and distance \nis 5.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\n\n<p><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>maximum_distance()</strong>&nbsp;which takes the string S as input parameter and returns the maximum distance. If not possible to reach at destination then return -1.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time complexity:&nbsp;</strong>O(n)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Space&nbsp;complexity:&nbsp;</strong>O(n)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\n\n<p><span style=\"font-size:18px\">1 &lt;= size of string &lt;= 1000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Subsequnce chosen for finding the maximum distance should be like a-&gt;b-&gt;c-&gt;..</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n\nclass Solution\n{\n\tpublic:\n\t\tint maximum_distance(string s)\n\t\t{\n\t\t\tvector<int>pos(26,-1);\n\t\t\tint x = 0;\n\t\t\tfor(int i = 0; i < s.size(); i++)\n\t\t\t{\n\t\t\t    // If if we have got the subsewunce abcdef then we can assign the position of g \n\t\t\t\tif(s[i] - 'a' == x)\n\t\t\t\t{\n\t\t\t\t\tpos[s[i] - 'a'] = i;\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint dist  = s.size() - 1;\n\t\t\twhile(dist >= 0)\n\t\t\t{\n\t\t\t    // from last find the first letter which is not -1 i,e upto which the subsequnces is continuous.\n\t\t\t\tif(s[dist] != 'a' and pos[s[dist]-'a'] != -1)\n\t\t\t\t\tbreak;\n\t\t\t\tdist--;\n\t\t\t}\n\t\t\tif(dist != -1)\n\t\t\t\tdist++;\n\t\t\treturn dist;\n\t\t}\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maximum_distance(String s) {\n        // Array to store the last position of each character in the alphabet\n        int[] pos = new int[26];\n        \n        // Initializing all positions to -1\n        for(int i = 0; i < 26; i++) {\n            pos[i] = -1;\n        }\n        \n        // Variable to keep track of the next expected character\n        int x = 0;\n        \n        // Loop through the string\n        for(int i = 0; i < s.length(); i++) {\n            // If the current character is the next expected character\n            if(s.charAt(i) - 'a' == x) {\n                // Update the position of the character\n                pos[s.charAt(i) - 'a'] = i;\n                // Increment the next expected character\n                x++;\n            }\n        }\n        \n        // Variable to store the maximum distance\n        int dist = s.length() - 1;\n        \n        // Loop through the string backwards\n        while(dist >= 0) {\n            // If the character at the current position has a valid position in the pos array and is not 'a'\n            if(pos[s.charAt(dist) - 'a'] != -1 && s.charAt(dist) != 'a') {\n                // Break the loop\n                break;\n            }\n            // Decrement the distance\n            dist--;\n        }\n        \n        // If a valid distance was found, increment it by 1\n        if(dist != -1) {\n            dist++;\n        }\n        \n        // Return the maximum distance\n        return dist;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find the maximum distance between two same characters in a string.\n    public int maximum_distance(string s)\n    {\n        int[] pos = new int[26];\n        for (int i = 0; i < 26; i++)\n            pos[i] = -1;\n\n        int x = 0;\n        for (int i = 0; i < s.Length; i++)\n        {\n            if (s[i] - 'a' == x)\n            {\n                pos[s[i] - 'a'] = i;\n                x++;\n            }\n        }\n\n        int dist = s.Length - 1;\n        while (dist >= 0)\n        {\n            if (s[dist] != 'a' && pos[s[dist] - 'a'] != -1)\n                break;\n            dist--;\n        }\n\n        if (dist != -1)\n            dist++;\n        return dist;\n    }\n\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}