{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704936,
            "title": "Sophie Germain Prime",
            "titleSlug": "sophie-germain-prime2014",
            "content": "<p><span style=\"font-size:18px\">Given N find all <strong>Sophie Germain Prime </strong>numbers less than N . A prime number <strong>p</strong> is called a </span><em><span style=\"font-size:18px\">sophie</span></em><span style=\"font-size:18px\"><em> prime number</em> if <strong>2p+1</strong> is also a prime number. The number <strong>2p+1</strong> is called a safe prime.&nbsp;<br />\n<br />\n<strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 5\n<strong>Output: </strong>2 3\n<strong>Explanation: </strong>2 and 3 are prime no. and \n2*2+1 = 5 and 3*2+1 = 7 are also prime\nno.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 3\n<strong>Output: </strong>2\n<strong>Explanation: </strong>2 is prime number and 2*2+1\n= 5 is also a prime number.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything your task is to complete the function <strong>s</strong><strong>ophie_primes()&nbsp;</strong>which takes N&nbsp;as input parameter and returns a list of all <strong>Sophie Germain Prime</strong>&nbsp;numbers in increasing order.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Compelxity:</strong>&nbsp;O(N* log(N))<br />\n<strong>Expected Space Compelxity:&nbsp;</strong>O(N)<br />\n<br />\n<strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10000&nbsp;&nbsp;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, find all Sophie Germain prime numbers less than N. A prime number 'p' is considered a Sophie Germain prime if '2p + 1' is also a prime number.  The number '2p + 1' is referred to as a safe prime. Return the Sophie Germain primes in increasing order.",
                "constraints": [
                    "1 <= N <= 10000"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "2 3",
                        "explanation": "The Sophie Germain primes less than 5 are 2 and 3. For 2, 2*2 + 1 = 5, which is prime. For 3, 2*3 + 1 = 7, which is prime."
                    },
                    {
                        "input": "3",
                        "output": "2",
                        "explanation": "The only Sophie Germain prime less than 3 is 2. For 2, 2*2 + 1 = 5, which is prime."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Optimize your solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\n\tpublic:\n   \t// Function to find Sophie primes up to n\n   \tvector<int> sophie_Primes(int n){\n   \t\t// Create a boolean array to mark the numbers as prime or not\n   \t\tvector<bool>vis(2*n + 2, true);\n   \t\t\n   \t\t// Sieve of Eratosthenes algorithm to mark non-prime numbers\n   \t\tfor(int i = 2; i * i <= (2 * n + 1); i++){\n   \t\t\tif(vis[i]){\n   \t\t\t\tfor(int j = i*i; j <= (2 * n + 1); j+=i){\n   \t\t\t\t\tvis[j] = false;\n   \t\t\t\t}\n   \t\t\t}\n   \t\t}\n   \t\t\n   \t\t// Storing Sophie primes in a vector\n   \t\tvector<int>ans;\n   \t\tfor(int i = 2; i < n; i++)\n   \t\t\t// Check if both i and 2*i+1 are prime\n   \t\t\tif(vis[i] and vis[2*i+1])\n   \t\t\t\t// Add i to the answer vector\n   \t\t\t\tans.push_back(i);\n   \t\t\n   \t\t// Return the vector containing Sophie primes\n   \t\treturn ans;\n   \t}    \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}