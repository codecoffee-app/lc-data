{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700523,
            "title": "Merge Sort for Linked List",
            "titleSlug": "sort-a-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Given a pointer/reference to the head of the linked list, the task is to <strong>sort the given linked list using Merge Sort</strong>.</span><br /><span style=\"font-size: 18px;\"><strong>Note:</strong> If the length of the linked list is odd, then the extra node should go into the first list while splitting.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList: 3-&gt;5-&gt;2-&gt;4-&gt;1\n<strong>Output: </strong>1-&gt;2-&gt;3-&gt;4-&gt;5<strong>\nExplanation: </strong>After sorting the given linked list, the resultant matrix will be 1-&gt;2-&gt;3-&gt;4-&gt;5.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700523/Web/Other/blobid0_1722065236.png\" width=\"400\" height=\"180\" /></span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList: 9-&gt;15-&gt;0\n<strong>Output: </strong>0-&gt;9-&gt;15<strong>\nExplanation: </strong>After sorting the given linked list , resultant will be 0-&gt;9-&gt;15.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700523/Web/Other/blobid1_1722065301.png\" width=\"393\" height=\"177\" /><br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*log(n))<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5<br /></sup>0 &lt;= node-&gt;data &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use the two-pointer technique to split the list into halves. Recursively sort each half, then merge them. Handle odd length by putting an extra node in the first list.<br />For reference: <a href=\"https://www.geeksforgeeks.org/merge-sort/\">https://www.geeksforgeeks.org/merge-sort/</a></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "accolite",
            "amazon",
            "microsoft",
            "maq-software",
            "adobe",
            "veritas"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    // Function to split the list into two halves.\n    void splitList(Node* source, Node*& frontRef, Node*& backRef) {\n\n        // using two pointers to find the midpoint of list.\n        struct Node* fast;\n        struct Node* slow;\n        if (source == NULL || source->next == NULL) {\n            frontRef = source;\n            backRef = NULL;\n        } else {\n\n            // first pointer, slow moves 1 node and second pointer, fast moves\n            // 2 nodes in one iteration.\n            slow = source;\n            fast = source->next;\n            while (fast != NULL) {\n                fast = fast->next;\n                if (fast != NULL) {\n                    slow = slow->next;\n                    fast = fast->next;\n                }\n            }\n\n            // slow is before the midpoint in the list, so we split the\n            // list in two halves from that point.\n            frontRef = source;\n            backRef = slow->next;\n            slow->next = NULL;\n        }\n    }\n\n    // Function to merge two halves of list.\n    Node* mergeList(struct Node* a, struct Node* b) {\n        struct Node* result = NULL;\n\n        // base cases when either of two halves is null.\n        if (a == NULL)\n            return b;\n        else if (b == NULL)\n            return a;\n\n        // comparing data in both halves and storing the smaller in result and\n        // recursively calling the mergeList function for next node in result.\n        if (a->data <= b->data) {\n            result = a;\n            result->next = mergeList(a->next, b);\n        } else {\n            result = b;\n            result->next = mergeList(a, b->next);\n        }\n        // returning the resultant list.\n        return result;\n    }\n\n    // Function to sort the given linked list using Merge Sort.\n    Node* mergeSort(Node* head) {\n\n        struct Node* a;\n        struct Node* b;\n\n        if (head == NULL || head->next == NULL)\n            return head;\n\n        // splitting the list into two halves.\n        splitList(head, a, b);\n\n        // calling the mergeSort function recursively for both parts separately.\n        a = mergeSort(a);\n        b = mergeSort(b);\n\n        // calling the function to merge both halves.\n        return mergeList(a, b);\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to sort the given linked list using Merge Sort.\n    public static Node mergeSort(Node head) {\n        if (head == null || head.next == null) return head;\n\n        // splitting the list into two halves.\n        Node middle = getMiddle(head);\n        Node nextofmiddle = middle.next;\n        middle.next = null;\n\n        // calling the mergeSort function recursively for both parts separately.\n        Node left = mergeSort(head);\n        Node right = mergeSort(nextofmiddle);\n\n        // calling the function to merge both halves.\n        Node sortedlist = sortedMerge(left, right);\n        return sortedlist;\n    }\n\n    // Function to merge two halves of list.\n    public static Node sortedMerge(Node a, Node b) {\n        Node result = null;\n\n        // base cases when either of two halves is null.\n        if (a == null) return b;\n        if (b == null) return a;\n\n        // comparing data in both halves and storing the smaller in result and\n        // recursively calling the mergeList function for next node in result.\n        if (a.data <= b.data) {\n            result = a;\n            result.next = sortedMerge(a.next, b);\n        } else {\n            result = b;\n            result.next = sortedMerge(a, b.next);\n        }\n\n        // returning the resultant list.\n        return result;\n    }\n\n    // Function to split the list into two halves.\n    public static Node getMiddle(Node h) {\n        if (h == null) return h;\n\n        // using two pointers to find the midpoint of list.\n        Node fastptr = h.next;\n        Node slowptr = h;\n\n        // first pointer, slow moves 1 node and second pointer, fast moves\n        // 2 nodes in one iteration.\n        while (fastptr != null) {\n            fastptr = fastptr.next;\n            if (fastptr != null) {\n                slowptr = slowptr.next;\n                fastptr = fastptr.next;\n            }\n        }\n        // slow is before the midpoint in the list, so we split the\n        // list in two halves from that point.\n        return slowptr;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "'''\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n'''\n\n\nclass Solution:\n\n    def splitList(self, source):\n        if source is None or source.next is None:\n            return source, None\n\n        slow = source\n        fast = source.next\n\n        while fast:\n            fast = fast.next\n            if fast:\n                slow = slow.next\n                fast = fast.next\n\n        frontRef = source\n        backRef = slow.next\n        slow.next = None\n\n        return frontRef, backRef\n\n    def mergeList(self, a, b):\n        if a is None:\n            return b\n        if b is None:\n            return a\n\n        if a.data <= b.data:\n            result = a\n            result.next = self.mergeList(a.next, b)\n        else:\n            result = b\n            result.next = self.mergeList(a, b.next)\n\n        return result\n\n    def mergeSort(self, head):\n        if head is None or head.next is None:\n            return head\n\n        frontRef, backRef = self.splitList(head)\n\n        frontRef = self.mergeSort(frontRef)\n        backRef = self.mergeSort(backRef)\n\n        return self.mergeList(frontRef, backRef)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}