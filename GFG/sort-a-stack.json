{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700469,
            "title": "Sort a stack",
            "titleSlug": "sort-a-stack",
            "content": "<p><span style=\"font-size: 18px;\">Given a stack, the task is to sort&nbsp;it such that the top of the stack has the greatest&nbsp;element.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>Stack: 3 2 1\n<strong>Output: </strong>3 2 1</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>Stack: 11 2 32 3 41\n<strong>Output: </strong>41 32 11 3 2</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;</strong><br />You don't have to read input or print anything. Your task is to complete the function&nbsp;<strong>sort()&nbsp;</strong>which sorts the elements present in the given stack. (The sorted stack is printed by the driver's code by popping the elements of the stack.)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong>: O(N*N)<br /><strong>Expected Auxilliary Space</strong>: O(N) recursive.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=N&lt;=100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Sort the given stack such that the largest element is at the top. You must complete the `sort()` function, which modifies the original stack in place. The driver code will handle printing the sorted stack.",
                "constraints": [
                    "1 <= N <= 100, where N is the number of elements in the stack."
                ],
                "testcases": [
                    {
                        "input": "Stack: 3 2 1",
                        "output": "3 2 1",
                        "explanation": "The stack is already sorted in descending order."
                    },
                    {
                        "input": "Stack: 11 2 32 3 41",
                        "output": "41 32 11 3 2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Recursively sort the stack.</span></p>",
            "<p><span style=\"font-size:18px\">We can use the below algorithm to sort stack elements:</span></p>\n\n<pre>\n<span style=\"font-size:18px\">sortStack(stack S)\n    if stack is not empty:\n        temp = pop(S);  \n        sortStack(S); \n        sortedInsert(S, temp);\n</span></pre>\n\n<p><span style=\"font-size:18px\">Below algorithm is to insert element is sorted order:</span></p>\n\n<pre>\n<span style=\"font-size:18px\">sortedInsert(Stack S, element)\n    if stack is empty OR element &gt; top element\n        push(S, elem)\n    else\n        temp = pop(S)\n        sortedInsert(S, element)\n        push(S, temp)</span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "goldman-sachs",
            "intuit",
            "yahoo",
            "ibm",
            "kuliza"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to insert the element x in a sorted manner into the stack s\nvoid sortedInsert(stack<int> &s, int x)\n{\n    // If stack is empty or the element is greater than the top element, push it\n    if(s.empty() or x > s.top())\n    {\n        s.push(x);\n        return;\n    }\n    \n    // Remove the top element and recursively insert the element in the remaining stack\n    int temp = s.top();\n    s.pop();\n    sortedInsert(s, x);\n    \n    // Push back the removed element to its original position in the stack\n    s.push(temp);\n}\n\n// Function to sort the stack in ascending order\nvoid SortedStack::sort()\n{\n    // Base case: if stack is not empty\n    if(!s.empty())\n    {\n        // Remove the top element and recursively sort the remaining stack\n        int x = s.top();\n        s.pop();\n        sort();\n        \n        // Insert the removed element back into the stack in a sorted manner\n        sortedInsert(s, x);\n    }\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class GfG {\n    // Sorting the stack in non-decreasing order using an auxiliary array\n\n    public Stack<Integer> sort(Stack<Integer> s) {\n        // initializing an auxiliary array to store the frequency of integers\n        int[] a = new int[100000];\n\n        // initializing all values in the array to 0\n        for (int i = 0; i < 100000; i++) {\n            a[i] = 0;\n        }\n\n        // counting the frequency of each integer in the stack\n        while (!s.empty()) {\n            a[s.peek()]++;\n            s.pop();\n        }\n\n        // pushing the integers back to the stack in sorted order\n        for (int i = 0; i < 100000; i++) {\n            if (a[i] > 0) {\n                for (int j = 0; j < a[i]; j++) {\n                    s.push(i);\n                }\n            }\n        }\n\n        // returning the sorted stack\n        return s;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\r\n    def Sorted(self, s):\r\n        # Sorts the given list of elements in ascending order\r\n        return s.sort()",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}