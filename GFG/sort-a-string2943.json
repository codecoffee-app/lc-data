{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702905,
            "title": "Sort a String",
            "titleSlug": "sort-a-string2943",
            "content": "<p><span style=\"font-size:18px\">Given a string consisting of lowercase letters, arrange all its letters in ascending order.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS = &quot;edcab&quot;\n<strong>Output:</strong> &quot;abcde&quot;\n<strong>Explanation: </strong>characters are in ascending\norder in &quot;abcde&quot;.</span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS = &quot;xzy&quot;\n<strong>Output:</strong> &quot;xyz&quot;\n<strong>Explanation: </strong>characters are in ascending\norder in &quot;xyz&quot;.</span>\n</pre>\n\n<p><br />\n<br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>sort()</strong>&nbsp;which takes the string<strong>&nbsp;</strong>as inputs and returns the modified string.</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|S| * log |S|)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; <strong>|S|</strong>&nbsp;&le; 10<sup>5</sup></span><br />\n<span style=\"font-size:18px\">S contains only lowercase alphabets.</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` consisting of lowercase letters, rearrange the letters in ascending order.",
                "constraints": [
                    "1 <= |S| <= 10^5",
                    "S contains only lowercase alphabets."
                ],
                "testcases": [
                    {
                        "input": "edcab",
                        "output": "abcde",
                        "explanation": "The letters of 'edcab' arranged in ascending order are 'abcde'."
                    },
                    {
                        "input": "xzy",
                        "output": "xyz",
                        "explanation": "The letters of 'xzy' arranged in ascending order are 'xyz'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>There will be at most 26 different characters in the string.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Function to sort a string in ascending order\nstring sort(string s){\n    sort(s.begin(), s.end()); //Using sort function to sort the characters of the string\n    return s; //Returning the sorted string\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution \n{ \n    // Function to sort a string in ascending order of characters\n    String sort(String s) \n    {\n        // Create an array of size 26 to store the frequency of each character\n        int []f = new int[26];\n        Arrays.fill(f,0); // Initialize all frequencies to 0\n        \n        // Count the frequency of each character in the input string\n        for(int i=0;i<s.length();i++){\n            f[(int)s.charAt(i)-(int)'a']+=1; // Increment the frequency of the character in the array\n        }\n        \n        // Create an empty string to store the sorted characters\n        String ans=\"\";\n        \n        // Iterate through the frequency array and append the character to the result string\n        // as many times as its frequency\n        for(int i=0;i<26;i++){\n            while(f[i]>0){\n                f[i]-=1; // Decrement the frequency of the character\n                ans+=(char)(i+(int)'a'); // Append the character to the result string\n            }\n        }\n        \n        // Return the sorted string\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    #Function to sort the string in alphabetical order.\n    def sort(self, s): \n        #Creating a list to store the frequency of each character.\n        f=[0]*26\n        \n        #Calculating the frequency of each character in the string.\n        for i in s:\n            f[ord(i)-ord('a')]+=1\n        \n        #Creating an empty string to store the sorted characters.\n        ans=''\n        \n        #Iterating over the frequency list.\n        for i in range(26):\n            #Appending the character to the answer string based on its frequency.\n            while f[i]>0:\n                f[i]-=1\n                ans+=chr(i+ord('a'))\n        \n        #Returning the sorted string.\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @returns {string}\n*/\n\nclass Solution {\n    //Function to sort the given string.\n    sort(s) {\n        //Creating a list to store the frequency of each character.\n        let f = new Array(26).fill(0);\n\n        //Calculating the frequency of each character in the string.\n        for (let i = 0; i < s.length; i++) {\n            f[s.charCodeAt(i) - 'a'.charCodeAt(0)] += 1;\n        }\n\n        //Creating an empty string to store the sorted characters.\n        let ans = '';\n\n        //Iterating over the frequency list.\n        for (let i = 0; i < 26; i++) {\n            //Appending the character to the answer string based on its frequency.\n            while (f[i] > 0) {\n                f[i] -= 1;\n                ans += String.fromCharCode(i + 'a'.charCodeAt(0));\n            }\n        }\n\n        //Returning the sorted string.\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}