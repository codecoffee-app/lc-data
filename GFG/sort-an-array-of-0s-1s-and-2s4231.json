{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702382,
            "title": "Sort 0s, 1s and 2s",
            "titleSlug": "sort-an-array-of-0s-1s-and-2s4231",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> containing only <strong>0s, 1s, and 2s.</strong> Sort the array in ascending order.</span></p>\n<p><span style=\"font-size: 18px;\">You need to solve this problem without utilizing the built-in sort function.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, 1, 2, 0, 1, 2]\n<strong>Output: </strong>[0, 0, 1, 1, 2, 2]\n<strong>Explanation: </strong>0s 1s and 2s are segregated into ascending order.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">arr[] = [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">[0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2]\n</span><strong style=\"font-size: 18px;\">Explanation: </strong><span style=\"font-size: 18px;\">0s 1s and 2s are segregated into ascending order.<br /><br /><strong>Follow up:</strong> Could you come up with a one-pass algorithm using only constant extra space?</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />0 &lt;= arr[i] &lt;= 2</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">These are the folowing steps:</span></p>\n\n<ul>\n\t<li><span style=\"font-size:18px\">Maintain 3 variables low, high and mid</span>\n\n\t<ul>\n\t\t<li><span style=\"font-size:18px\">low - all elements before low are 0</span></li>\n\t\t<li><span style=\"font-size:18px\">mid - all elements between low and mid are 1</span></li>\n\t\t<li><span style=\"font-size:18px\">high - all elements after high are 2</span></li>\n\t</ul>\n\t</li>\n\t<li><span style=\"font-size:18px\">Initially low, mid are set at 0 and high is at n-1</span></li>\n\t<li><span style=\"font-size:18px\">Now, we iterate mid from 0 to high, and for every element</span>\n\t<ul>\n\t\t<li><span style=\"font-size:18px\">if it is equal to 0, we swap it with element at low, and increement low and mid</span></li>\n\t\t<li><span style=\"font-size:18px\">else if it is equal to 2, we swap it with element at high, and decreement high</span></li>\n\t\t<li><span style=\"font-size:18px\">else we just increement mid (i.e element is equla to 1)</span></li>\n\t</ul>\n\t</li>\n\t<li><span style=\"font-size:18px\">This method ensures partition, as low and high maintain elements according to their values, and then change their positions, ensuring all elements before low are lower than low_value and all elements after high are higher than high_value</span></li>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "flipkart",
            "morgan-stanley",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "samsung",
            "snapdeal",
            "hike",
            "makemytrip",
            "ola-cabs",
            "walmart",
            "maq-software",
            "adobe",
            "yatra.com",
            "sap-labs",
            "qualcomm"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\n// Function to sort an array of 0s, 1s, and 2s\nvoid sort012(int arr[], int n) {\n    int low = 0, mid = 0, high = n - 1;\n\n    // Using the Dutch National Flag algorithm\n    while (mid <= high) {\n\n        // If the current element is 0, swap it with the element at the low index\n        if (arr[mid] == 0) {\n            swap(&arr[mid], &arr[low]);\n            mid++;\n            low++;\n        }\n\n        // If the current element is 1, move to the next element\n        else if (arr[mid] == 1) {\n            mid++;\n        }\n\n        // If the current element is 2, swap it with the element at the high index\n        else {\n            swap(&arr[mid], &arr[high]);\n            high--;\n        }\n    }\n}\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to sort an array of 0s, 1s, and 2s\n    void sort012(vector<int>& arr) {\n        int n = arr.size();\n        int low = 0, high = n - 1, mid = 0;\n\n        // using the Dutch National Flag algorithm\n        while (mid <= high) {\n\n            // if the current element is 0, swap it with the element at the low index\n            if (arr[mid] == 0)\n                swap(arr[mid++], arr[low++]);\n\n            // if the current element is 1, move to the next element\n            else if (arr[mid] == 1)\n                mid++;\n\n            // if the current element is 2, swap it with the element at the high index\n            else\n                swap(arr[mid], arr[high--]);\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to sort an array of 0s, 1s, and 2s\n    public void sort012(int[] arr) {\n        int n = arr.length;\n        int low = 0, high = n - 1, mid = 0;\n\n        // Using the Dutch National Flag algorithm\n        while (mid <= high) {\n            if (arr[mid] == 0) {\n                swap(arr, mid++, low++);\n            } else if (arr[mid] == 1) {\n                mid++;\n            } else {\n                swap(arr, mid, high--);\n            }\n        }\n    }\n\n    private void swap(int arr[], int i, int j) {\n        int t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to sort an array of 0s, 1s, and 2s\n    def sort012(self, arr):\n        low, mid, high = 0, 0, len(arr) - 1\n        # Using the Dutch National Flag algorithm\n        while mid <= high:\n            if arr[mid] == 0:\n                arr[low], arr[mid] = arr[mid], arr[low]  # Swap the elements\n                low += 1\n                mid += 1\n            elif arr[mid] == 1:\n                mid += 1\n            else:\n                arr[mid], arr[high] = arr[high], arr[mid]  # Swap the elements\n                high -= 1\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to sort an array of 0s, 1s, and 2s\n    sort012(arr) {\n        let low = 0;\n        let mid = 0;\n        let high = arr.length - 1;\n\n        // Using the Dutch National Flag algorithm\n        while (mid <= high) {\n            if (arr[mid] === 0) {\n                [arr[low], arr[mid]] = [ arr[mid], arr[low] ]; // Swap the elements\n                low++;\n                mid++;\n            } else if (arr[mid] === 1) {\n                mid++;\n            } else {\n                [arr[mid], arr[high]] = [ arr[high], arr[mid] ]; // Swap the elements\n                high--;\n            }\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}