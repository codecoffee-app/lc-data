{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876737,
            "title": "Sort an Array of 1 to n",
            "titleSlug": "sort-an-array-which-contains-1-to-n-values-using-mathematical-formula",
            "content": "<p><span >Given an array <strong>arr[]&nbsp;</strong>of size&nbsp;<strong>n</strong> consisting of distinct integers from 1 to n. Your task is to <strong>sort</strong> the array without using extra space<br />Challenge: Try to solve it using <strong>linear</strong> time complexity.<br /></span></p>\n<p><strong><span >Examples:&nbsp;</span></strong></p>\n<pre><strong><span >Input:</span></strong><span > [2, 1, 5, 4, 3]<br /><strong>Output: </strong>[1, 2, 3, 4, 5]</span></pre>\n<pre><strong><span >Input:</span></strong><span > [1, 2, 3, 4, 5, 6]<br /><strong>Output: </strong>[1, 2, 3, 4, 5, 6]<br /></span></pre>\n<pre><strong><span >Input:</span></strong><span > [1]<br /><strong>Output: </strong>[1]</span></pre>\n<p><span ><strong>Constraints:<br /></strong>1&nbsp; &lt;=&nbsp; n&nbsp; &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Try using Cyclic Sort.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<int> sortArray(vector<int>& arr) {\n        int i = 0;\n        while (i < arr.size()) {\n            int correct = arr[i] - 1;\n            if (arr[correct] != arr[i]) {\n                swap(arr[i], arr[correct]);\n            } else {\n                i++;\n            }\n        }\n        return arr;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    int[] sortArray(int arr[]) {\n        int i = 0;\n        while (i < arr.length) {\n\n            // Finding the correct index\n            int correct = arr[i] - 1;\n\n            // Element index and value not match\n            // then swapping\n            if (arr[correct] != arr[i]) {\n\n                // Calling swap function\n                swap(arr, i, correct);\n            } else {\n                i++;\n            }\n        }\n        return arr;\n    }\n\n    void swap(int[] arr, int first, int second) {\n        int temp = arr[first];\n        arr[first] = arr[second];\n        arr[second] = temp;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def sortArray(self, arr):\n        i = 0\n        while i < len(arr):\n            correct = arr[i] - 1\n            if arr[correct] != arr[i]:\n                arr[i], arr[correct] = arr[correct], arr[i]\n            else:\n                i += 1\n        return arr\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    sortArray(arr) {\n        let i = 0;\n        while (i < arr.length) {\n            let correct = arr[i] - 1;\n            if (arr[correct] !== arr[i]) {\n                [arr[i], arr[correct]] = [ arr[correct], arr[i] ]; // swap\n            } else {\n                i++;\n            }\n        }\n        return arr;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}