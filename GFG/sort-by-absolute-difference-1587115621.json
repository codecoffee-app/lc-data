{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701240,
            "title": "Sort by Absolute Difference",
            "titleSlug": "sort-by-absolute-difference-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">You are given a number<strong> k</strong> and array <strong>arr.</strong> Your task is to rearrange the elements of array <strong>arr</strong> according to the absolute difference with <strong>k</strong>, i.e., an element having minimum difference comes first, and so on.<br /><strong>Note:</strong> If two or more elements are at equal distances arrange them in the same sequence as in the given array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: k = 7, arr[] = [10, 5, 3, 9, 2]\n<strong>Output</strong>: [5, 9, 10, 3, 2]\n<strong>Explanation</strong>: Sorting the numbers according to the absolute difference with 7, we have array elements as 5, 9, 10, 3, 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: k = 6, arr[] = [1, 2, 3, 4, 5]\n<strong>Output</strong>: [5, 4, 3, 2, 1]<br /><strong>Explanation</strong>: Sorting the numbers according to the absolute difference with 6, we have array elements as 5, 4, 3, 2, 1.<br /></span></pre>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\"><span ><strong>Expected Time Complexity:</strong> O(n * log(n))</span><br /><span ><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span></p>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\"><span ><strong>Constraints:<br /></strong></span><span >1&lt;= k &lt;=10<sup>5</sup><strong><br /></strong></span><span >1&lt;= arr.size() &lt;= 10<sup>5</sup><br /></span><span >1&lt;= arr[i] &lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number `k` and an array `arr`, rearrange the elements of `arr` based on their absolute difference with `k`. Elements with smaller absolute differences should come first. Maintain the original order for elements with equal absolute differences.",
                "constraints": [
                    "1 <= k <= 10^5",
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "k = 7, arr = [10, 5, 3, 9, 2]",
                        "output": "[5, 9, 10, 3, 2]",
                        "explanation": "The absolute differences with 7 are: |10-7|=3, |5-7|=2, |3-7|=4, |9-7|=2, |2-7|=5.  Sorting based on these differences while preserving the original order for equal differences results in [5, 9, 10, 3, 2]."
                    },
                    {
                        "input": "k = 6, arr = [1, 2, 3, 4, 5]",
                        "output": "[5, 4, 3, 2, 1]",
                        "explanation": "The absolute differences with 6 are: |1-6|=5, |2-6|=4, |3-6|=3, |4-6|=2, |5-6|=1. Sorting based on these differences results in [5, 4, 3, 2, 1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try using a custom sorting function that sorts the array <strong>arr</strong> based on the absolute difference between each element and the given number <strong>k</strong>.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "int diff = 0;\n\n// Function to compare values while sorting.\nbool mycomparator(int a, int b) {\n\n    // storing the difference of first number with diff.\n    int a_diff = abs(a - diff);\n\n    // storing the difference of second number with diff.\n    int b_diff = abs(b - diff);\n\n    // if a_diff is smaller than b_diff, it means we need to put a_diff\n    // so we return true.\n    if (a_diff < b_diff)\n        return 1;\n\n    // else we return false.\n    return 0;\n}\n\nclass Solution {\n  public:\n    // Function to sort the array according to difference with given number.\n    void sortABS(int k, vector<int> &arr) {\n        diff = k;\n        // using stable sort function over the array.\n        stable_sort(arr.begin(), arr.end(), mycomparator);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to sort the list according to difference with the given number.\n    public static void sortABS(int k, List<Integer> list) {\n        // Sorting the list using a custom comparator.\n        Collections.sort(list, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                return Integer.compare(Math.abs(a - k), Math.abs(b - k));\n            }\n        });\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def sortABS(self, k, arr):\n        arr.sort(key=lambda x: abs(x - k))\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    sortABS(k, arr) { arr.sort((a, b) => Math.abs(a - k) - Math.abs(b - k)); }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}