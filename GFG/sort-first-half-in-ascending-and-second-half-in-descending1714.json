{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703904,
            "title": "Sort first half in ascending and second half in descending",
            "titleSlug": "sort-first-half-in-ascending-and-second-half-in-descending1714",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr </strong>of even size, sort the first half of the array in ascending order and the second half in descending order.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 20, 30, 40]\n<strong>Output:</strong> [10, 20, 40, 30]<br /><strong>Explanation: </strong>The 10 and 20 will be sorted in ascending order and 30 and 40 will be sorted in descending order.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 4, 6, 2, 3, 8, 9, 7]\n<strong>Output:</strong> [2, 4, 5, 6, 9, 8, 7, 3] \n<strong>Explanation: </strong></span><span >The 5, 4, 6, 2 will be sorted in ascending order and 3, 8, 9, 7 will be sorted in descending order.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:&nbsp;</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of even size, sort the first half of the array in ascending order and the second half in descending order.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[10, 20, 30, 40]",
                        "output": "[10, 20, 40, 30]",
                        "explanation": "The first half [10, 20] is sorted in ascending order, and the second half [30, 40] is sorted in descending order, resulting in [10, 20, 40, 30]."
                    },
                    {
                        "input": "[5, 4, 6, 2, 3, 8, 9, 7]",
                        "output": "[2, 4, 5, 6, 9, 8, 7, 3]",
                        "explanation": "The first half [5, 4, 6, 2] is sorted in ascending order to become [2, 4, 5, 6], and the second half [3, 8, 9, 7] is sorted in descending order to become [9, 8, 7, 3], resulting in [2, 4, 5, 6, 9, 8, 7, 3]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >We sort the first half in increasing order and the second half in decreasing.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to sort the array in a custom pattern.\n    vector<int> customSort(vector<int>& arr) {\n        int n = arr.size();\n        // Sort the first half of the array.\n        sort(arr.begin(), arr.begin() + n / 2);\n\n        // Sort the second half of the array.\n        sort(arr.begin() + n / 2, arr.end());\n\n        // Reverse the second half of the array.\n        reverse(arr.begin() + n / 2, arr.end());\n        return arr;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public ArrayList<Integer> customSort(int[] arr) {\n        int n = arr.length;\n\n        // Sort the first half of the array.\n        Arrays.sort(arr, 0, n / 2);\n\n        // Sort the second half of the array.\n        Arrays.sort(arr, n / 2, arr.length);\n\n        // Reverse the second half of the array.\n        reverse(arr, n / 2, arr.length);\n\n        // Convert the array to ArrayList\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : arr) {\n            result.add(num);\n        }\n\n        return result;\n    }\n\n    private void reverse(int[] arr, int start, int end) {\n        end--; // Adjust for the inclusive end\n        while (start < end) {\n            int temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def customSort(self, arr):\n        n = len(arr)\n\n        # Sort the first half of the array.\n        arr[:n // 2] = sorted(arr[:n // 2])\n\n        # Sort the second half of the array.\n        arr[n // 2:] = sorted(arr[n // 2:])\n\n        # Reverse the second half of the array.\n        arr[n // 2:] = arr[n // 2:][::-1]\n\n        return arr\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    customSort(arr) {\n        const n = arr.length;\n\n        // Sort the first half of the array.\n        const firstHalf = arr.slice(0, n / 2).sort((a, b) => a - b);\n\n        // Sort the second half of the array.\n        const secondHalf = arr.slice(n / 2).sort((a, b) => a - b);\n\n        // Reverse the second half of the array.\n        secondHalf.reverse();\n\n        // Combine the sorted and reversed halves\n        return firstHalf.concat(secondHalf);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}