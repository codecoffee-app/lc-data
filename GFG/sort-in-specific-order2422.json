{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702996,
            "title": "Sort in specific order",
            "titleSlug": "sort-in-specific-order2422",
            "content": "<p><span >Given an array <strong>arr[]</strong> of positive integers. Your task is to sort them so that the first part of the array contains odd numbers sorted in descending order, and the rest of the portion contains even numbers sorted in ascending order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 5, 4, 7, 10]\n<strong>Output:</strong> [7, 5, 3, 1, 2, 4, 10]\n</span><strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">7 5 3 1 are odds in descending order and 2 4 10 are evens in ascending order.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, 4, 5, 3, 7, 2, 1]</span>\n<span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">[7, 5, 3, 1, 0, 2, 4]<br /><strong>Explanation: </strong>7 5 3 1 are odds in descending order and 0 2 4 are evens in ascending order.<br /></span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp; O(nlog(n))<br /><strong>Expected Auxiliary Space:</strong>&nbsp; O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br /></span></p>\n<p><span >1 &le; arr.size() &le; 10<sup>5</sup><br />0 &lt;= arr<sub>i </sub>&lt;= 10<sup>18</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Try to bring all odd numbers in front and even numbers at the back of <strong>arr</strong> using the swapping technique. Then sort arr accordingly.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            }
        ],
        "companies": [
            "zoho",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void sortIt(vector<long long> &arr) {\n        int n = arr.size(); // Get the size of the array\n\n        int i = 0;     // Pointer for the start of the array\n        int j = n - 1; // Pointer for the end of the array\n\n        // Partition the array such that all odd numbers are on the left and all even\n        // numbers are on the right\n        while (i < j) {\n            if (arr[i] % 2 == 0) {    // If the current element is even\n                swap(arr[i], arr[j]); // Swap it with the element at the end\n                j--;                  // Move the end pointer to the left\n            } else {\n                i++; // Move the start pointer to the right\n            }\n        }\n\n        int indx = -1; // Variable to store the index of the last odd number\n        for (int i = 0; i < n; i++) {\n            if (arr[i] % 2) { // If the current element is odd\n                indx = i;     // Update the index of the last odd number\n            }\n        }\n\n        // If no odd numbers are found, sort the entire array\n        if (indx == -1) {\n            sort(arr.begin(), arr.end()); // Sort the entire array\n        } else {\n            // Sort the odd part of the array in descending order\n            sort(arr.begin(), arr.begin() + indx + 1, greater<int>());\n            // Sort the even part of the array in ascending order\n            sort(arr.begin() + indx + 1, arr.end());\n        }\n\n        return; // Return from the function\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public void sortIt(Long[] arr) {\n        int n = arr.length;\n        int i = 0, j = n - 1;\n\n        // Partition the array into odd and even numbers\n        while (i < j) {\n            while (i < j && arr[i] % 2 != 0) i++; // Skip odd numbers from the start\n            while (i < j && arr[j] % 2 == 0) j--; // Skip even numbers from the end\n            if (i < j) {\n                swap(arr, i, j); // Swap odd with even\n            }\n        }\n\n        // Now i points to the first even number after all odd numbers\n        int indx = (arr[i] % 2 == 0) ? i : n;\n\n        // Sort the odd part in descending order\n        Arrays.sort(arr, 0, indx, Collections.reverseOrder());\n\n        // Sort the even part in ascending order\n        Arrays.sort(arr, indx, n);\n    }\n\n    private void swap(Long[] arr, int i, int j) {\n        Long temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def sortIt(self, arr):\n        #code here.\n        n = len(arr)  # Get the size of the array\n\n        i = 0  # Pointer for the start of the array\n        j = n - 1  # Pointer for the end of the array\n\n        # Partition the array such that all odd numbers are on the left and all even numbers are on the right\n        while i < j:\n            if arr[i] % 2 == 0:  # If the current element is even\n                arr[i], arr[j] = arr[j], arr[\n                    i]  # Swap it with the element at the end\n                j -= 1  # Move the end pointer to the left\n            else:\n                i += 1  # Move the start pointer to the right\n\n        indx = -1  # Variable to store the index of the last odd number\n        for i in range(n):\n            if arr[i] % 2:  # If the current element is odd\n                indx = i  # Update the index of the last odd number\n\n    # If no odd numbers are found, sort the entire array\n        if indx == -1:\n            arr.sort()  # Sort the entire array\n        else:\n            # Sort the odd part of the array in descending order\n            arr[:indx + 1] = sorted(arr[:indx + 1], reverse=True)\n            # Sort the even part of the array in ascending order\n            arr[indx + 1:] = sorted(arr[indx + 1:])\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    sortIt(arr) {\n        // Helper function to perform quicksort\n        function quicksort(arr, low, high, compareFn) {\n            if (low < high) {\n                let pivotIndex = partition(arr, low, high, compareFn);\n                quicksort(arr, low, pivotIndex - 1, compareFn);\n                quicksort(arr, pivotIndex + 1, high, compareFn);\n            }\n        }\n\n        // Partition function for quicksort\n        function partition(arr, low, high, compareFn) {\n            let pivot = arr[high];\n            let i = low;\n            for (let j = low; j < high; j++) {\n                if (compareFn(arr[j], pivot)) {\n                    [arr[i], arr[j]] = [ arr[j], arr[i] ]; // Swap elements\n                    i++;\n                }\n            }\n            [arr[i], arr[high]] =\n                [ arr[high], arr[i] ]; // Swap pivot to correct position\n            return i;\n        }\n\n        // Rearrange the array so that odd numbers come first\n        let oddIndex = 0;\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] % 2 !== 0) {\n                [arr[oddIndex], arr[i]] =\n                    [ arr[i], arr[oddIndex] ]; // Swap odd numbers to the front\n                oddIndex++;\n            }\n        }\n\n        // Sort the odd numbers in descending order\n        quicksort(arr, 0, oddIndex - 1, (a, b) => a > b);\n\n        // Sort the even numbers in ascending order\n        quicksort(arr, oddIndex, arr.length - 1, (a, b) => a < b);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}