{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 852210,
            "title": "Sort last M elements",
            "titleSlug": "sort-last-m-elements--155156",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>nums </strong>of length <strong>n + m</strong> where first <strong>n</strong> elements are sorted. Your task is to sort the last <strong>m</strong><strong> </strong>elements <strong>in-place&nbsp;</strong>so that the whole array becomes sorted.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: \n</strong>nums = {1, 3, 6, 19, 11, 16</span><span style=\"font-size: 18px;\">},\nn = 3 \nm = 3\n<strong>Output: \n</strong>1, 3, 6, 11, 16, 19</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: \n</strong>nums = {7, 8, 11} \nn = 2 \nm = 1\n<strong>Output: \n</strong>7, 8, 11</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything, Your task is to complete the function <strong>sortLastMelements() </strong>which takes <strong>nums, n </strong>and <strong>m </strong>as input parameters and sort <strong>nums</strong><strong> in-place</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(m * Log(m))<br /><strong>Expected Auxilary Space:&nbsp;</strong>O(m)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n, m &le; 10<sup>5</sup><br />1 &le; nums[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `nums` of length `n + m` where the first `n` elements are sorted, sort the last `m` elements in-place so that the entire array is sorted in ascending order.",
                "constraints": [
                    "1 <= n, m <= 10^5",
                    "1 <= nums[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "nums = [1, 3, 6, 19, 11, 16]\nn = 3\nm = 3",
                        "output": "[1, 3, 6, 11, 16, 19]",
                        "explanation": "The first 3 elements [1, 3, 6] are already sorted. The last 3 elements [19, 11, 16] are sorted and merged with the first 3, resulting in a fully sorted array."
                    },
                    {
                        "input": "nums = [7, 8, 11]\nn = 2\nm = 1",
                        "output": "[7, 8, 11]",
                        "explanation": "The first 2 elements [7, 8] are already sorted. The last element [11] is already in its correct sorted position."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use in-place merge sort.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\npublic:\n\t// Merges two subarrays of arr[].\n    // First subarray is arr[l..m]\n    // Second subarray is arr[m+1..r]\n    void merge(vector<int> &arr, int l, int m, int r)\n    {\n        int n1 = m - l + 1;\n        int n2 = r - m;\n\n        // Create temp arrays\n        int L[n1], R[n2];\n\n        // Copy data to temp arrays L[] and R[]\n        for (int i = 0; i < n1; i++)\n            L[i] = arr[l + i];\n        for (int j = 0; j < n2; j++)\n            R[j] = arr[m + 1 + j];\n\n        // Merge the temp arrays back into arr[l..r]\n\n        // Initial index of first subarray\n        int i = 0;\n\n        // Initial index of second subarray\n        int j = 0;\n\n        // Initial index of merged subarray\n        int k = l;\n\n        while (i < n1 && j < n2) {\n           if (L[i] <= R[j]) {\n               arr[k] = L[i];\n               i++;\n           }\n           else {\n               arr[k] = R[j];\n               j++;\n           }\n           k++;\n        }\n\n        // Copy the remaining elements of\n        // L[], if there are any\n        while (i < n1) {\n           arr[k] = L[i];\n           i++;\n           k++;\n        }\n\n        // Copy the remaining elements of\n        // R[], if there are any\n        while (j < n2) {\n           arr[k] = R[j];\n           j++;\n           k++;\n        }\n    }\n\t \n\t/* l is for left index and r is right index of the \n\t   sub-array of arr to be sorted */\n\tvoid mergeSort(vector<int>&nums, int l, int r)\n\t{\n\t    if (l < r) {\n\t \n\t        // Same as (l + r) / 2, but avoids overflow\n\t        // for large l and r\n\t        int m = l + (r - l) / 2;\n\t \n\t        // Sort first and second halves\n\t        mergeSort(nums, l, m);\n\t        mergeSort(nums, m + 1, r);\n\t \n\t        merge(nums, l, m, r);\n\t    }\n\t}\n    void sortLastMelements(vector<int>&nums, int n, int m) {\n    \tmergeSort(nums, n, n+m-1);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}