{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703613,
            "title": "Sort the fest",
            "titleSlug": "sort-the-fest0016",
            "content": "<p><span style=\"font-size:18px\">Given the menu of the two restaurants. There may be a chance of fight between them if any one of them have any item in common and you surely don&#39;t want that to happen. Each of the menu has 5 items (strings) in them.&nbsp;So, your task is to find out if there is&nbsp;any need to change the menu or let them be happy with their respective menu.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:\r\n</span></strong><span style=\"font-size:18px\">cake pastry fish candy meat\r\nburger ham fish cake sauce</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">CHANGE\r\n</span><span style=\"font-size:18px\"><strong>Explanation:\r\n</strong></span><span style=\"font-size:18px\">&quot;fish&quot; is common in both the menu.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>pizza chicken cake chilli candy\r\nchoco coco cabbage panner cheese</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">BEHAPPY\r\n<strong>Expanation:\r\n</strong></span><span style=\"font-size:18px\">No item is common.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span><br />\r\n<span style=\"font-size:18px\">You don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>is_common()&nbsp;</strong>which takes first menu as first parameter and second menu as second parameter and returns the string &quot;CHANGE&quot; if any item is common otherwise&nbsp;returns &quot;BEHAPPY&quot;(Without quotes).</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp; &nbsp;</strong>O(n)<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(n)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= Size of each string &lt;= 1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the menus of two restaurants, determine if there's a conflict. A conflict arises if the restaurants share any menu items. Each menu consists of 5 items. Your task is to determine if a menu change is needed to avoid conflict, or if the restaurants can happily coexist with their current menus.",
                "constraints": [
                    "1 <= Size of each string <= 1000"
                ],
                "testcases": [
                    {
                        "input": "cake pastry fish candy meat\nburger ham fish cake sauce",
                        "output": "CHANGE",
                        "explanation": "The item 'fish' is present in both menus."
                    },
                    {
                        "input": "pizza chicken cake chilli candy\nchoco coco cabbage panner cheese",
                        "output": "BEHAPPY",
                        "explanation": "No items are common between the two menus."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use hashing.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\n\r\nclass Solution\r\n{\r\n\tpublic:\r\n\t\tstring is_common(vector<string>&s, vector<string>&t)\r\n\t\t{\r\n\t\t\tunordered_map<string,int> hash;\r\n\t\t\t// Calculating frequency of every string\r\n\t\t\tfor(int i = 0; i < 5; i++)\r\n\t\t\t\thash[s[i]]++;\r\n\t\t\tfor(int i = 0; i < 5; i++)\r\n\t\t\t\t// If any string has a frequency that means they are common.\r\n\t\t\t\tif(hash[t[i]])\r\n\t\t\t\t\treturn \"CHANGE\";\r\n\t\t\t// Otherwise any string is not common.\r\n\t\t\treturn \"BEHAPPY\";\r\n\t\t}\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\r\n\r\nclass Solution\r\n{\r\n    public String  is_common(String [] s, String [] t)\r\n    {\r\n        HashMap<String, Integer> hash = new HashMap<String, Integer>();\r\n        for( int i = 0; i < s.length; i++)\r\n        {\r\n            Integer c = hash.get(s[i]);\r\n            // Calculating frequency of every string\r\n            if(hash.get(s[i]) == null)\r\n                hash.put(s[i], 1);\r\n            else\r\n                hash.put(s[i], ++c);\r\n        }\r\n        for(int i = 0; i < t.length; i++)\r\n        {\r\n            if (hash.get(t[i]) == null)\r\n                continue;\r\n                // If any string has a frequency that means they are common.\r\n            else return \"CHANGE\";\r\n        }\r\n        // Otherwise any string is not common.\r\n        return \"BEHAPPY\";\r\n\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public string is_common(List<string> s, List<string> t)\n    {\n        Dictionary<string, int> hash = new Dictionary<string, int>();\n        // Calculating frequency of every string\n        for (int i = 0; i < 5; i++)\n            if (hash.ContainsKey(s[i]))\n                hash[s[i]]++;\n            else\n                hash.Add(s[i], 1);\n        for (int i = 0; i < 5; i++)\n            // If any string has a frequency that means they are common.\n            if (hash.ContainsKey(t[i]))\n                return \"CHANGE\";\n        // Otherwise any string is not common.\n        return \"BEHAPPY\";\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}