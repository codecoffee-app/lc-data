{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702939,
            "title": "Sort the given array after applying the given equation",
            "titleSlug": "sort-the-given-array-after-applying-the-given-equation0304",
            "content": "<p><span style=\"font-size:18px\">Given a sorted integer array <strong>Arr[ ]</strong> of size <strong>N</strong>, and three&nbsp;integers <strong>A</strong>,&nbsp;<strong>B,</strong> and <strong>C. </strong>The task is to find&nbsp;a new array&nbsp; where <strong>i<sup>th</sup></strong> element of the new array =&nbsp;<strong>A * Arr[i] * Arr[i] +&nbsp;B * Arr[i] +&nbsp;C </strong>where<strong> </strong><strong><ins>A&nbsp;&ne; 0</ins>.&nbsp;</strong>You have to print the new array in sorted (ascending) order.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nA = -1, B = 2, C = -1.\r\nN = 6\r\nArr[] = {-1, 0, 1, 2, 3, 4}\r\n<strong>Output:</strong> \r\n-9 -4 -4 -1 -1 0\r\n<strong>Explanation: </strong>After applying the equation \r\nA * Arr[i] * Arr[i] + B * Arr[i] + C on every \r\nelement Arr[i] we get {-4, -1, 0, -1, -4, -9}.\r\nAfter sorting, we get {-9, -4, -4, -1, -1, 0}. </span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nA = 1, B = 1, C = 1.\r\nN = 3\r\nArr[] = {1, 2, 3}\r\n<strong>Output:</strong> \r\n3 7 13\r\n<strong>Explanation: </strong>After applying the equation\r\nA * Arr[i] * Arr[i] + B * Arr[i] + C on every\r\nelement Arr[i] we get&nbsp;{3, 7, 13} which is \r\nalready sorted.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>sortArray()</strong>&nbsp;which takes&nbsp;<strong>Arr[]</strong>,&nbsp;<strong>N, A, B </strong>and<strong>&nbsp;C</strong><strong>&nbsp;</strong>as input parameters&nbsp;and returns the sorted new list.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>6</sup><br />\r\n-10<sup>5</sup> &le; arr[i] &le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Observe that the equation is like parabolic, so it can be sorted in O(N)</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "vector<long long> sortArray(vector<long long>arr, int n, long long A, long long B, long long C) { \n    //applying the given formula to each element of the array\n    for (int i = 0; i < n; i++) \n        arr[i] = A*arr[i]*arr[i] + B*arr[i] + C; \n    \n    int f = 1;\n    //checking the value of A to determine the sorting direction\n    if(A > 0) f = 2;\n    \n    int i = 0, j = n-1; \n    long long new_arr[n], k = 0; \n    \n    //sorting the array according to the determined direction\n    if(f==1){\n        while (i <=j){\n            if (arr[i] < arr[j])\n                new_arr[k++] = arr[i++];\n            else\n                new_arr[k++] = arr[j--];\n        }\n    }else{\n        while (i <=j){\n            if (arr[i] > arr[j])\n                new_arr[k++] = arr[i++];\n            else\n                new_arr[k++] = arr[j--];\n        }\n    } \n    \n    //copying the sorted array back to the original array\n    for(int i = 0; i < n; i++)\n        arr[i] = new_arr[i];\n\n    //reversing the array if the sorting direction is reversed\n    if(f == 2){\n        for(int i = 0; i < n / 2; i++)\n            swap(arr[i], arr[n - i - 1]);\n    }\n\n    //returning the sorted array\n    return arr;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    public long[] sortArray(long []arr, int n, long A, long B, long C)\n    {\n        // Multiply each element of the array with the given coefficients and add the constant term\n        for (int i = 0; i < n; i++) \n            arr[i] = A*arr[i]*arr[i] + B*arr[i] + C; \n        \n        // determine the direction of sorting based on the value of A\n        int f = 1;\n        if(A > 0) f = 2;\n        \n        int i = 0, j = n-1; \n        long new_arr[]=new long[n]; \n        int k = 0; \n        \n        // Perform merging based on the direction of sorting\n        if(f==1){\n            while (i <=j){\n                if (arr[i] < arr[j])\n                    new_arr[k++] = arr[i++];\n                else\n                    new_arr[k++] = arr[j--];\n            }\n        }else{\n            while (i <=j){\n                if (arr[i] > arr[j])\n                    new_arr[k++] = arr[i++];\n                else\n                    new_arr[k++] = arr[j--];\n            }\n        } \n        \n        // Update the original array with the sorted elements\n        for(i = 0; i < n; i++)\n            arr[i] = new_arr[i];\n    \n        // Reverse the array if the sorting direction is from high to low\n        if(f == 2){\n            for(i = 0; i < n / 2; i++){\n                long temp=arr[i];\n                arr[i]=arr[n-i-1];\n                arr[n-i-1]=temp;\n            }\n        }\n    \n        // Return the sorted array\n        return arr;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    public List<long> sortArray(List<long> arr, int n, long A, long B, long C)\n    {\n        for (int i = 0; i < n; i++)\n        {\n            arr[i] = A * arr[i] * arr[i] + B * arr[i] + C;\n        }\n\n        bool isAscending = A > 0;\n        int left = 0, right = n - 1;\n        long[] sortedArr = new long[n];\n        int index = isAscending ? n - 1 : 0;\n\n        while (left <= right)\n        {\n            if (isAscending)\n            {\n                sortedArr[index--] = arr[left] >= arr[right] ? arr[left++] : arr[right--];\n            }\n            else\n            {\n                sortedArr[index++] = arr[left] <= arr[right] ? arr[left++] : arr[right--];\n            }\n        }\n\n        return new List<long>(sortedArr);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}