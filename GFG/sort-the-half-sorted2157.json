{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702844,
            "title": "Sort the Half Sorted",
            "titleSlug": "sort-the-half-sorted2157",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer array of which both the first halve and second halve are sorted. The task is to merge these two sorted halves of the array into a single sorted array.<br /><strong>Note</strong>: The two halves can be of arbitrary sizes (i.e. if first halve of size k then the second halve is of size N-k where 0&lt;=k&lt;=N).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 6\narr[] = {2 3 8 -1 7 10}\n<strong>Output: </strong>-1 2 3 7 8 10 \n<strong>Explanation: </strong>{2 3 8} and {-1 7 10} are sorted \nin the original array. The overall sorted \nversion is {-1 2 3 7 8 10}</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 5\narr[] = {-4 6 9 -1 3}\n<strong>Output: </strong>-4 -1 3 6 9 \n<strong>Explanation: </strong>{-4 -1} and {3 6 9} are sorted \nin the original array. The overall sorted \nversion is {-4 -1 3 6 9}</span></pre>\n<p><br /><strong>Your Task:</strong><br /><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>sortHalves ()&nbsp;</strong>which takes the array arr[] and its size n as inputs and modifies the array such that it gets sorted completely.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>6</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array where both the first and second halves are sorted, merge these two sorted halves into a single, completely sorted array.\n\nNote: The two halves can have different sizes. If the first half has size k, then the second half has size N-k, where 0 <= k <= N.",
                "constraints": [
                    "1 <= N <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 6\narr[] = {2 3 8 -1 7 10}",
                        "output": "-1 2 3 7 8 10",
                        "explanation": "The array is divided into two sorted halves: {2, 3, 8} and {-1, 7, 10}.  Merging and sorting these results in {-1, 2, 3, 7, 8, 10}."
                    },
                    {
                        "input": "N = 5\narr[] = {-4 6 9 -1 3}",
                        "output": "-4 -1 3 6 9",
                        "explanation": "The array is divided into two sorted halves: {-4, 6, 9} and {-1, 3}.  Merging and sorting these results in {-4, -1, 3, 6, 9}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The first part is to find the transition point. That is, the point where the 2nd half starts.<br />\nOnce you have done that, just maintain two pointers (one for each array) and try implementing something like the merge part of the merge sort.</p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\n{\n    public:\n    // Function to sort the two halves of the array separately\n    void sortHalves (int arr[], int n)\n    {\n    \tint half_i = 0;\n    \t// Finding the index where the first half ends and the second half begins\n    \tfor (int i = 0; i < n - 1 ; i++)\n    \t{\n    \t\tif (arr[i] > arr[i + 1])\n    \t\t{\n    \t\t\thalf_i = i + 1 ;\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    \tint temp[n];\n    \tint itr = 0;\n    \tint i = 0, j = half_i;\n    \n    \t// Merging the two halves of the array into a temporary array\n    \twhile (i < half_i || j < n)\n    \t{\n    \t\tif (i >= half_i) temp[itr++] = arr[j++];\n    \t\telse if (j >= n) temp[itr++] = arr[i++];\n    \t\telse\n    \t\t{\n    \t\t\tif (arr[i] < arr[j])\n    \t\t\t\ttemp[itr++] = arr[i++];\n    \t\t\telse\n    \t\t\t\ttemp[itr++] = arr[j++];\n    \t\t}\n    \t}\n    \n    \t// Copying the elements from the temporary array back to the original array\n    \ti = 0;\n    \twhile (i < n)\n    \t{\n    \t\tarr[i] = temp[i];\n    \t\ti++;\n    \t}\n    \n    }\n    \n    // Contributed By: Pranay Bansal\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n\n    // Function to sort the two halves of the array\n    public static void sortHalves(int arr[], int n) {\n        // Find the index where the first half ends and the second half begins\n        int half_i = 0;\n        for (int i = 0; i < n - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                half_i = i + 1;\n                break;\n            }\n        }\n\n        int temp[] = new int[n];\n        int itr = 0;\n        int i = 0, j = half_i;\n\n        // Merge the two halves into a temporary array\n        while (i < half_i || j < n) {\n            if (i >= half_i)\n                temp[itr++] = arr[j++];\n            else if (j >= n)\n                temp[itr++] = arr[i++];\n            else {\n                if (arr[i] < arr[j])\n                    temp[itr++] = arr[i++];\n                else\n                    temp[itr++] = arr[j++];\n            }\n        }\n\n        // Copy the elements from the temporary array back to the original array\n        i = 0;\n        while (i < n) {\n            arr[i] = temp[i];\n            i++;\n        }\n    }\n}\n\n// Contributed By: Pranay Bansal",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to sort the array by dividing it into two halves and then merging them.\n    def sortHalves (self,arr, n):\n        #Finding the index where the second half of the array starts.\n        half_i = 0\n        for i in range (n-1):\n            if arr[i] > arr[i+1]:\n                half_i = i + 1\n                break\n            \n        #Creating a temporary array to store the sorted elements.\n        temp = [0 for i in range (n)]\n        itr = 0\n        i = 0\n        j = half_i\n        \n        #Merging the two sorted halves of the array.\n        while (i < half_i or j < n):\n            if (i >= half_i):\n                temp[itr] = arr[j]\n                itr += 1\n                j += 1\n            elif (j >= n):\n                temp[itr] = arr[i]\n                itr += 1\n                i+= 1\n            else:\n                if (arr[i] < arr[j]):\n                    temp[itr] = arr[i]\n                    itr += 1\n                    i += 1\n                else:\n                    temp[itr] = arr[j]\n                    itr += 1\n                    j += 1\n        i = 0\n        #Copying the sorted elements back to the original array.\n        while i < n:\n            arr[i] = temp[i]\n            i += 1\n            \n    # Contributed By: Pranay Bansal",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {void}\n*/\n\nclass Solution{\n    sortHalves(arr,n){\n        let half_i = 0;\n    \tfor (let i = 0; i < n - 1 ; i++)\n    \t{\n    \t\tif (arr[i] > arr[i + 1])\n    \t\t{\n    \t\t\thalf_i = i + 1 ;\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    \tlet temp = [];\n    \tlet itr = 0;\n    \tlet i = 0, j = half_i;\n    \n    \twhile (i < half_i || j < n)\n    \t{\n    \t\tif (i >= half_i) temp[itr++] = arr[j++];\n    \t\telse if (j >= n) temp[itr++] = arr[i++];\n    \t\telse\n    \t\t{\n    \t\t\tif (arr[i] < arr[j])\n    \t\t\t\ttemp[itr++] = arr[i++];\n    \t\t\telse\n    \t\t\t\ttemp[itr++] = arr[j++];\n    \t\t}\n    \t}\n    \n    \ti = 0;\n    \twhile (i < n)\n    \t{\n    \t\tarr[i] = temp[i];\n    \t\ti++;\n    \t}\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public void sortHalves(int[] arr, int n)\n    {\n        int half_i = 0;\n        // Finding the index where the first half ends and the second half begins\n        for (int i = 0; i < n - 1 ; i++)\n        {\n            if (arr[i] > arr[i + 1])\n            {\n                half_i = i + 1 ;\n                break;\n            }\n        }\n        int[] temp = new int[n];\n        int itr = 0;\n        int index1 = 0, index2 = half_i;\n\n        // Merging the two halves of the array into a temporary array\n        while (index1 < half_i || index2 < n)\n        {\n            if (index1 >= half_i) temp[itr++] = arr[index2++];\n            else if (index2 >= n) temp[itr++] = arr[index1++];\n            else\n            {\n                if (arr[index1] < arr[index2])\n                    temp[itr++] = arr[index1++];\n                else\n                    temp[itr++] = arr[index2++];\n            }\n        }\n\n        // Copying the elements from the temporary array back to the original array\n        index1 = 0;\n        while (index1 < n)\n        {\n            arr[index1] = temp[index1];\n            index1++;\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}