{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703433,
            "title": "Sort the pile of cards",
            "titleSlug": "sort-the-pile-of-cards3733",
            "content": "<p><span style=\"font-size: 18px;\">Given a shuffled array <strong>arr[]&nbsp;</strong> where each element represents a card numbered from <strong>1 to n</strong>, your task is to determine the minimum number of operations required to sort the array in increasing order. In each operation, called moveCard(x), you can move the card with value x (where 1 &le; x &le; n) to the top of the array, without altering the order of the other cards. Your goal is to sort the array with the fewest possible moveCard(x) operations.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 1, 2, 3, 4]\n<strong>Output: </strong>4\n<strong>Explanation:</strong>\n5 1 2 3 4\\t\\t  //given sequence\n4 5 1 2 3\\t\\t  //moveCard(4)\n3 4 5 1 2\\t\\t  //moveCard(3)\n2 3 4 5 1\\t\\t  //moveCard(2)\n1 2 3 4 5\\t\\t  //moveCard(1)\nHence, minimum 4 operations are required.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 4, 2, 1]\n<strong>Output: </strong>2\n<strong>Explanation:</strong>\n3 4 2 1\\t\\t //given sequence\n2 3 4 1\\t\\t //moveCard(2)\n1 2 3 4\\t\\t //moveCard(1)\nHence, minimum 2 operations are required.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;=10<sup>6</sup><br />1 &lt;= arr[i] &lt;= arr.size()</span><br /><br /></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a shuffled array `arr[]` of cards numbered from 1 to n, determine the minimum number of 'moveCard' operations to sort the array in ascending order. A 'moveCard(x)' operation moves the card with value x (1 <= x <= n) to the top of the array, preserving the order of other cards.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= arr.size()"
                ],
                "testcases": [
                    {
                        "input": "[5, 1, 2, 3, 4]",
                        "output": "4",
                        "explanation": "The sequence of operations is as follows: [5, 1, 2, 3, 4] -> moveCard(4) -> [4, 5, 1, 2, 3] -> moveCard(3) -> [3, 4, 5, 1, 2] -> moveCard(2) -> [2, 3, 4, 5, 1] -> moveCard(1) -> [1, 2, 3, 4, 5].  Therefore, 4 operations are required."
                    },
                    {
                        "input": "[3, 4, 2, 1]",
                        "output": "2",
                        "explanation": "The sequence of operations is as follows: [3, 4, 2, 1] -> moveCard(2) -> [2, 3, 4, 1] -> moveCard(1) -> [1, 2, 3, 4].  Therefore, 2 operations are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Count the number of elements already in the correct order from the end, then subtract that count from the total number of elements to get the minimum number of operations needed.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "bankbazaar"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minOps(vector<int>& arr) {\n        int n = arr.size(); // Get the size of the array\n        int check = n; // Variable to keep track of the expected value (starts from n)\n        int count = 0; // Variable to count the number of matched elements\n\n        // Loop through the array from right to left\n        for (int i = n - 1; i >= 0; i--) {\n            if (arr[i] == check) {\n                count++; // Increment the count if the current element matches the\n                         // expected value\n                check--; // Decrement the expected value\n            }\n        }\n\n        // Return the minimum number of operations needed\n        return (n - count); // Total elements minus the matched elements gives the min\n                            // operations\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public int minOps(int arr[]) {\n        int n = arr.length; // Get the size of the array\n        int check = n; // Variable to keep track of the expected value (starts from n)\n        int count = 0; // Variable to count the number of matched elements\n\n        // Loop through the array from right to left\n        for (int i = n - 1; i >= 0; i--) {\n            if (arr[i] == check) {\n                count++; // Increment the count if the current element matches the\n                         // expected value\n                check--; // Decrement the expected value\n            }\n        }\n\n        // Return the minimum number of operations needed\n        return (n - count); // Total elements minus the matched elements gives the min\n                            // operations\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minOps(self, arr):\n        n = len(arr)  # Get the size of the array\n        check = n  # Variable to keep track of the expected value (starts from n)\n        count = 0  # Variable to count the number of matched elements\n\n        # Loop through the array from right to left\n        for i in range(n - 1, -1, -1):\n            if arr[i] == check:\n                count += 1  # Increment the count if the current element matches the expected value\n                check -= 1  # Decrement the expected value\n\n        # Return the minimum number of operations needed\n        return n - count  # Total elements minus the matched elements gives the min operations\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number[]} arr\n     * @returns {number}\n     */\n    minOps(arr) {\n        let n = arr.length; // Get the size of the array\n        let check = n; // Variable to keep track of the expected value (starts from n)\n        let count = 0; // Variable to count the number of matched elements\n\n        // Loop through the array from right to left\n        for (let i = n - 1; i >= 0; i--) {\n            if (arr[i] == check) {\n                count++; // Increment the count if the current element matches the\n                         // expected value\n                check--; // Decrement the expected value\n            }\n        }\n\n        // Return the minimum number of operations needed\n        return (n - count); // Total elements minus the matched elements gives the min\n                            // operations\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}