{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703245,
            "title": "Sort the string in descending order",
            "titleSlug": "sort-the-string-in-descending-order3542",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s </strong>containing only lowercase alphabets, the task is to sort it in lexicographically-descending order. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"geeks\"\n<strong>Output:</strong> \"skgee\"\n<strong>Explanation</strong>: It's the lexicographically</span> <span style=\"font-size: 18px;\">descending order.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = \"for\"\n<strong>Output:</strong> \"rof\"\n<strong>Explanation</strong>: \"rof\" is in lexicographically-descending order.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |s| &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Sort the given string `s`, which contains only lowercase alphabets, in lexicographically descending order.",
                "constraints": [
                    "1 <= |s| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "geeks",
                        "output": "skgee",
                        "explanation": "The lexicographically descending order of 'geeks' is 'skgee'."
                    },
                    {
                        "input": "for",
                        "output": "rof",
                        "explanation": "The lexicographically descending order of 'for' is 'rof'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Just count the frequency of each character and the print from last character.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to reverse sort a string\nstring ReverseSort(string str) {\n    int charCount[26] = {0}; // Array to store count of each character in the string\n    for (int i = 0; i < str.length();\n         i++)                      // Loop to count occurrences of each character\n        charCount[str[i] - 'a']++; // Increment count for each character\n\n    str.clear(); // Clear the original string to build the sorted string\n\n    for (int i = 25; i >= 0; i--) { // Loop to iterate through the character count array\n        for (int j = 0; j < charCount[i];\n             j++) { // Loop to append each character the required number of times\n            char c = (char)('a' + i); // Determine the character from the ASCII value\n            str += c;                 // Append the character to the string\n        }\n    }\n\n    return str; // Return the reverse sorted string\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to reverse and sort the given string\n    String ReverseSort(String str) {\n        // Initialize an array to store the count of each character\n        int charCount[] = new int[26];\n\n        // Fill the array with 0 as initial count for each character\n        Arrays.fill(charCount, 0);\n\n        // Count the occurrence of each character in the string\n        for (int i = 0; i < str.length(); i++) charCount[str.charAt(i) - 'a']++;\n\n        // Reinitialize the given string as empty\n        str = \"\";\n\n        // Create a StringBuilder to store the reversed and sorted string\n        StringBuilder ans = new StringBuilder();\n\n        // Iterate backwards over the array to get the characters in descending order\n        for (int i = 25; i >= 0; i--) {\n            // Get the character based on the index\n            char ch = (char)('a' + i);\n\n            // Repeat the character count times and append it to the StringBuilder\n            for (int j = 0; j < charCount[i]; j++) {\n                ans.append(ch);\n            }\n        }\n\n        // Convert the StringBuilder to a string and return it\n        return ans.toString();\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    # Function to sort the characters of a string in reverse order.\n    def ReverseSort(self, str):\n        charCount = [0] * 26\n        # Counting the occurrence of each character in the string.\n        # The ord() function returns the unicode value of the character.\n        # Subtracting the unicode value of 'a' to get the index in charCount.\n        for i in str:\n            charCount[ord(i) - ord('a')] += 1\n        str = ''\n        # Building the sorted string in reverse order.\n        for i in range(25, -1, -1):\n            for j in range(charCount[i]):\n                str += chr(ord('a') + i)\n        return str\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {string} str\n * @returns {string}\n */\n\nclass Solution {\n    // Function to Reverse Sort the given string.\n    ReverseSort(str) {\n        let charCount = Array(26).fill(0);\n\n        // Counting the occurrence of each character in the string.\n        // The charCodeAt() function returns the unicode value of the character.\n        // Subtracting the unicode value of 'a' to get the index in charCount.\n        for (let i = 0; i < str.length; i++) {\n            charCount[str.charCodeAt(i) - 'a'.charCodeAt(0)] += 1;\n        }\n\n        let sortedStr = '';\n        // Building the sorted string in reverse order.\n        for (let i = 25; i >= 0; i--) {\n            for (let j = 0; j < charCount[i]; j++) {\n                sortedStr += String.fromCharCode('a'.charCodeAt(0) + i);\n            }\n        }\n\n        return sortedStr;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}