{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702841,
            "title": "Sort the way !",
            "titleSlug": "sort-the-way3158",
            "content": "<p><span style=\"font-size:18px\">A new deadly virus has infected large population of a planet. A brilliant scientist has discovered a new strain of virus which can cure this disease. Vaccine produced from this virus has various strength depending on midichlorians count. A person is cured only if midichlorians count in vaccine batch is more than midichlorians count of person. A doctor receives a new set of report which contains midichlorians count of each infected patient, Practo stores all vaccine doctor has and their midichlorians count. You need to determine if doctor can save all patients with the vaccines he has. The number of vaccines and patients are equal.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>n = 5\nvac[] = {123 146 454 542 456}\nper[] = {100 328 248 689 200}\n<strong>Output: </strong>0\n<strong>Explanation: </strong>Doctor cannot save all the patients.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nn = 8\nvac[] = {87 93 50 22 63 28 91 60}\nper[] = {64 27 41 27 73 37 12 69}\n<strong>Output: </strong>1\n<strong>Explanation: </strong>Doctor can save all the patients.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task</strong>:<br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>isPossible ()&nbsp;</strong>which takes an array containing&nbsp;midichlorians count of people (per[]), an array containing the&nbsp;midichlorians count of vaccines (vac[]) and their size n as inputs. It returns 1 if all the patients can be saved and 0 otherwise.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(nLogn).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=n&lt;=10<sup>5</sup></span><br />\n&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Since the number of vaccines and the number of patients is same, if even one of the vaccine remains unused, the answer will be 0.<br />\nCan you make the use of this fact to arrive at an optimal solution?</p>",
            "<p>The smallest of the vaccine array should be greater than or equal to the smallest of person array. Else, the vaccine with the least&nbsp;midichlorians count will get wasted.<br />\nSo, how about sorting both the given arrays? Can you arrive at a solution now?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution{\n    public:\n    int isPossible (int per[], int vac[], int n)\n    {\n    \tsort (per, per + n);\n    \tsort (vac, vac + n);\n    \n    \tfor (int i = 0; i < n; ++i)\n    \t{\n    \t\tif (per[i] > vac[i]) return 0;\n    \t}\n    \treturn 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    //Function to check if it is possible to distribute vaccines to people.\n    public static int isPossible (int per[], int vac[], int n)\n    {\n        //Sorting the arrays in ascending order.\n        Arrays.sort (per);\n        Arrays.sort (vac);\n    \n    \t//Iterating over the arrays.\n    \tfor (int i = 0; i < n; ++i)\n    \t{\n    \t\t//If number of people is greater than number of vaccines,\n                //returning 0 since it is not possible to distribute vaccines.\n    \t\tif (per[i] > vac[i]) return 0;\n    \t}\n    \t//Returning 1 if it is possible to distribute vaccines to people.\n    \treturn 1;\n    }\n}\n\n// Contributed By: Pranay Bansal",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to check if it is possible to distribute vaccines.\n    def isPossible (self, per, vac, n):\n        #sorting the arrays in ascending order.\n        per.sort ()\n        vac.sort ()\n        \n        #iterating over the arrays.\n        for i in range (n):\n            #comparing the number of people and number of vaccines.\n            #if number of people is greater than number of vaccines,\n            #return False.\n            if per[i] > vac[i]:\n                return 0\n        \n        #if condition never becomes True, return True.\n        return 1",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}