{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701608,
            "title": "Sort Vector of Pairs",
            "titleSlug": "sort-vector-of-pairs",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>vector </strong>of <strong>pairs</strong> arr[] where first element of pair is the <strong>age </strong>and the second element is the <strong>height</strong>, you need to sort the vector of pairs in <strong>descending </strong>order by the second item of the pair. And if the second items are <strong>equal</strong>, then sort it by first element.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:&nbsp;</strong>arr[]= [(1, 4), (2, 4)]<br /><strong>Output:&nbsp;</strong>arr[]= [(2, 4), (1, 4)]<br /><strong>Explanation:&nbsp;</strong>The first pair in the vector is (1, 4), and the second is (2, 4). Now since the second elements of the pairs are equal to 4,<br />we need to sort by the first element. Now, since 2 is greater than 1 so (2, 4) comes before (1, 4).</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:&nbsp;</strong>arr[]= [(1, 6), (3, 8), (2, 10), (4, 8)]<br /><strong>Output:&nbsp;</strong>arr[]= [(2, 10), (4, 8), (3, 8), (1, 6)]<br /><strong>Explanation: (</strong>2, 10) has the highest second value, (4, 8) and (3, 8) have same second value so they are sort on the basis of first<br />value.</span><span style=\"font-size: 18px;\"><br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a vector of pairs `arr[]` where the first element of each pair represents age and the second element represents height, sort the vector in descending order based on height. If two pairs have the same height, sort them in ascending order based on age.",
                "constraints": [
                    "1 <= arr.size() <= 100"
                ],
                "testcases": [
                    {
                        "input": "[(1, 4), (2, 4)]",
                        "output": "[(2, 4), (1, 4)]",
                        "explanation": "Both pairs have the same height (4). Since 2 > 1, the pair (2, 4) comes before (1, 4)."
                    },
                    {
                        "input": "[(1, 6), (3, 8), (2, 10), (4, 8)]",
                        "output": "[(2, 10), (4, 8), (3, 8), (1, 6)]",
                        "explanation": "(2, 10) has the largest height (10). (4, 8) and (3, 8) both have a height of 8, so they are sorted based on their age.  Since 4 > 3, (4, 8) comes before (3, 8)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. You need to use comparators. Go through this <a href=\"https://www.geeksforgeeks.org/sorting-vector-of-pairs-in-c-set-1-sort-by-first-and-second/\">article</a></p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nbool comparator(pair<int, int> a, pair<int, int> b) {\n    if (a.second > b.second) {\n        return true;\n    } else if (a.second == b.second) {\n        return a.first > b.first;\n    }\n    return false;\n}\n\nvector<pair<int, int>> sortBySecond(vector<pair<int, int>> v) {\n    sort(v.begin(), v.end(), comparator);\n\n    return v;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public List<KeyValuePair<int, int>> sortBySecond(List<KeyValuePair<int, int>> v)\n    {\n        v.Sort(delegate(KeyValuePair<int, int> a, KeyValuePair<int, int> b)\n        {\n            if (a.Value > b.Value)\n            {\n                return -1;\n            }\n            else if (a.Value == b.Value)\n            {\n                if (a.Key > b.Key)\n                {\n                    return -1;\n                }\n                else if (a.Key == b.Key)\n                {\n                    return 0;\n                }\n                else\n                {\n                    return 1;\n                }\n            }\n            else\n            {\n                return 1;\n            }\n        });\n\n        return v;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}