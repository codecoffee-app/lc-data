{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701614,
            "title": "Sorted Frequency",
            "titleSlug": "sorted-frequency",
            "content": "<p><span style=\"font-size: 18px;\">You are given an integer array <strong>arr[]</strong>. You need to print the distinct elements of array in<strong> sorted order(increasing)</strong> together with their <strong>frequency</strong>.<br />Note: Print each element in a new line.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [3, 3, 2, 2, 1, 4]\n<strong>Output:<br /></strong>1 1<br />2 2<br />3 2<br />4 1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>3 appears 2 times. 2 appears 2 times. 1 appears 1 time, and </span><span style=\"font-size: 18px;\">4 appears 1 time. So in sorted order we write elements and </span><span style=\"font-size: 18px;\">their frequencies.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; arr.size() &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr[]`, identify and print the distinct elements of the array in ascending sorted order, along with their corresponding frequencies.",
                "constraints": [
                    "1 <= arr.size() <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[3, 3, 2, 2, 1, 4]",
                        "output": "1 1\n2 2\n3 2\n4 1",
                        "explanation": "The distinct elements are 1, 2, 3, and 4. 1 appears once, 2 appears twice, 3 appears twice, and 4 appears once. These are printed in sorted order with their frequencies."
                    },
                    {
                        "input": "[1, 2, 3, 4, 5]",
                        "output": "1 1\n2 1\n3 1\n4 1\n5 1",
                        "explanation": "Each number appears once, so they are printed in increasing order with frequency 1."
                    },
                    {
                        "input": "[5, 4, 3, 2, 1]",
                        "output": "1 1\n2 1\n3 1\n4 1\n5 1",
                        "explanation": "Each number appears once, so they are printed in increasing order with frequency 1."
                    },
                    {
                        "input": "[1, 1, 1, 1]",
                        "output": "1 4",
                        "explanation": "The only distinct number is 1 and it appears 4 times"
                    },
                    {
                        "input": "[2, 2, 2, 3, 3]",
                        "output": "2 3\n3 2",
                        "explanation": "2 appears 3 times, and 3 appears 2 times. These are printed in sorted order with their frequencies."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use a map/treemap and insert all the elements in it as keys. When inserting the keys, you need to increment the values. Then print the keys and corresponding values.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    void freqSorted(vector<int>& arr) {\n        // Declaring and initializing a new map\n        map<int, int> mp;\n\n        // Incrementing the previous value if key is already present\n        // else initializing the key to value 1\n        for (int num : arr) {\n            mp[num]++;\n        }\n\n        // Traversing the map and printing the key-value pairs\n        for (const auto& entry : mp) {\n            int key = entry.first;\n            int value = entry.second;\n            std::cout << key << \" \" << value << std::endl;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public static void freqSorted(int arr[]) {\n        int n = arr.length;\n        // Decalring and Initializing a new TreeMap\n        TreeMap<Integer, Integer> mp = new TreeMap<>();\n\n        // Incrementing the previous value\n        // if key is already present\n        // else initializing the key to\n        // value 1\n        for (int i = 0; i < n; i++) {\n            if (mp.containsKey(arr[i])) {\n                mp.put(arr[i], mp.get(arr[i]) + 1);\n            } else {\n                mp.put(arr[i], 1);\n            }\n        }\n\n        // Traversing the TreeMap and Printing the Key,Value Pair\n        for (Map.Entry<Integer, Integer> entry : mp.entrySet()) {\n            int key = entry.getKey();\n            int value = entry.getValue();\n\n            System.out.println(key + \" \" + value);\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}