{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700127,
            "title": "Sorted insert for circular linked list",
            "titleSlug": "sorted-insert-for-circular-linked-list",
            "content": "<p style=\"text-align: justify;\"><span >Given a sorted circular linked list, the task is to insert a new node in this circular list so that it remains a sorted circular linked list.</span></p>\n<p style=\"text-align: justify;\"><span ><strong>Examples:</strong></span></p>\n<pre style=\"text-align: justify;\"><span ><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;4 (the first and last node is connected, i.e. 4 -&gt; 1), data = 2\n<strong>Output: </strong>1-&gt;2-&gt;2-&gt;4<strong><br /></strong><strong>Explanation: </strong>We can add 2 after the second node.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700127/Web/Other/blobid0_1724411599.png\" width=\"397\" height=\"206\" /><br /></span></pre>\n<pre style=\"text-align: justify;\"><span ><strong>Input: </strong>LinkedList = 1-&gt;4-&gt;7-&gt;9 (the first and last node is connected, i.e. 9 --&gt; 1), data = 5\n<strong>Output: </strong>1-&gt;4-&gt;5-&gt;7-&gt;9<strong><br /></strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong>We can add 5 after the second node.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700127/Web/Other/blobid1_1724411615.png\" width=\"433\" height=\"224\" /><br /></span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Space&nbsp;</strong><strong>Complexity</strong><strong>:</strong>&nbsp;O(1)</span></p>\n<p style=\"text-align: justify;\"><span ><strong >Constraints:</strong><br /><span >2 &lt;= number of nodes &lt;= 10</span><sup >6</sup><br /><span >0 &lt;= node-&gt;data &lt;= 10</span><sup >6</sup><br /><span style=\"font-size: 18.6667px;\">0 &lt;= data &lt;= 10<sup>6</sup></span><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Find the correct insertion spot by comparing node values, considering the circular nature. Adjust pointers to maintain sorted order.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "circular-linked-list",
                "slug": "circular-linked-list"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho",
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node* sortedInsert(Node* head, int data) {\n        Node* new_Node = new Node(data);\n\n        // Case 1: If the list is empty\n        if (head == NULL) {\n            new_Node->next = new_Node; // Point to itself\n            return new_Node;\n        }\n\n        Node* current = head;\n\n        // Case 2: If the node needs to be inserted before the head (smallest element)\n        if (current->data >= data) {\n            // Find the last node to adjust the circular link\n            while (current->next != head) {\n                current = current->next;\n            }\n            current->next = new_Node;\n            new_Node->next = head;\n            return new_Node; // New node becomes the new head\n        }\n\n        // Case 3: Insert somewhere other than before the head\n        while (current->next != head && current->next->data < data) {\n            current = current->next;\n        }\n\n        new_Node->next = current->next;\n        current->next = new_Node;\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public Node sortedInsert(Node head, int data) {\n        Node new_Node = new Node(data);\n\n        // Case 1: If the list is empty\n        if (head == null) {\n            new_Node.next = new_Node; // Point to itself\n            return new_Node;\n        }\n\n        Node current = head;\n\n        // Case 2: Insert before the head (new smallest element)\n        if (current.data >= data) {\n            // Find the last node to adjust the circular link\n            while (current.next != head) {\n                current = current.next;\n            }\n            current.next = new_Node;\n            new_Node.next = head;\n            return new_Node; // New node becomes the new head\n        }\n\n        // Case 3: Insert somewhere after the head\n        while (current.next != head && current.next.data < data) {\n            current = current.next;\n        }\n\n        // Insert the new node\n        new_Node.next = current.next;\n        current.next = new_Node;\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Solution class for inserting the node\nclass Solution:\n\n    def sortedInsert(self, head, data):\n        new_node = Node(data)\n\n        # Case 1: If the list is empty\n        if head is None:\n            new_node.next = new_node  # Point to itself\n            return new_node\n\n        current = head\n\n        # Case 2: Insert before the head (new smallest element)\n        if current.data >= data:\n            # Find the last node to adjust the circular link\n            while current.next != head:\n                current = current.next\n            current.next = new_node\n            new_node.next = head\n            return new_node  # New node becomes the new head\n\n        # Case 3: Insert somewhere after the head\n        while current.next != head and current.next.data < data:\n            current = current.next\n\n        # Insert the new node\n        new_node.next = current.next\n        current.next = new_node\n        return head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {Node} head\n * @param {number} data\n * @returns {Node}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n*/// Solution class for inserting the node in a sorted circular linked list\nclass Solution {\n    sortedInsert(head, data) {\n        let new_Node = new Node(data);\n\n        // Case 1: If the list is empty\n        if (head === null) {\n            new_Node.next = new_Node; // Point to itself\n            return new_Node;\n        }\n\n        let current = head;\n\n        // Case 2: Insert before the head (new smallest element)\n        if (current.data >= data) {\n            // Find the last node to adjust the circular link\n            while (current.next !== head) {\n                current = current.next;\n            }\n            current.next = new_Node;\n            new_Node.next = head;\n            return new_Node; // New node becomes the new head\n        }\n\n        // Case 3: Insert somewhere after the head\n        while (current.next !== head && current.next.data < data) {\n            current = current.next;\n        }\n\n        // Insert the new node\n        new_Node.next = current.next;\n        current.next = new_Node;\n        return head;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}