{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705688,
            "title": "Sorted matrix",
            "titleSlug": "sorted-matrix2333",
            "content": "<p><span style=\"font-size:18px\">Given an NxN&nbsp;matrix Mat. Sort&nbsp;all elements of the matrix.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=4\r\nMat=[[10,20,30,40],\r\n[15,25,35,45] \r\n[27,29,37,48] \r\n[32,33,39,50]]\r\n<strong>Output:</strong>\r\n10 15 20 25 \r\n27 29 30 32\r\n33 35 37 39\r\n40 45 48 50\r\n<strong>Explanation:</strong>\r\nSorting the matrix gives this result.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=3\r\nMat=[[1,5,3],[2,8,7],[4,6,9]]\r\n<strong>Output:</strong>\r\n1 2 3 \r\n4 5 6\r\n7 8 9\r\n<strong>Explanation:</strong>\r\nSorting the matrix gives this result.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>sortedMatrix()</strong> which takes the integer N and the matrix Mat as input parameters and returns the sorted matrix.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(N<sup>2</sup>LogN)<br />\r\n<strong>Expected Auxillary Space:</strong>O(N<sup>2</sup>)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=N&lt;=1000<br />\r\n1&lt;=Mat[i][j]&lt;=10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N x N matrix `Mat`, sort all elements of the matrix in ascending order.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= Mat[i][j] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N=4\nMat=[[10,20,30,40],[15,25,35,45],[27,29,37,48],[32,33,39,50]]",
                        "output": "[[10, 15, 20, 25],[27, 29, 30, 32],[33, 35, 37, 39],[40, 45, 48, 50]]",
                        "explanation": "The elements of the input matrix, when sorted in ascending order and arranged back into an N x N matrix, produce the output matrix."
                    },
                    {
                        "input": "N=3\nMat=[[1,5,3],[2,8,7],[4,6,9]]",
                        "output": "[[1, 2, 3],[4, 5, 6],[7, 8, 9]]",
                        "explanation": "The elements of the input matrix, when sorted in ascending order and arranged back into an N x N matrix, produce the output matrix."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">O(N<sup>2</sup>) Auxillary space is required to solve the problem, think about that.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "factset"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to sort the matrix in non-decreasing order.\n    vector<vector<int>> sortedMatrix(int N, vector<vector<int>> Mat) {\n        vector<int> v;\n        // flattening the matrix into a 1-dimensional vector.\n        for (int i = 0; i < N; i++)\n            for (int j = 0; j < N; j++) v.push_back(Mat[i][j]);\n        // sorting the vector in non-decreasing order.\n        sort(v.begin(), v.end());\n        int c = 0;\n        // reshaping the 1-dimensional vector back into the matrix.\n        for (int i = 0; i < N; i++)\n            for (int j = 0; j < N; j++) Mat[i][j] = v[c++];\n        // returning the sorted matrix.\n        return Mat;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Backend complete function Template for Java\r\n\r\nclass Solution {\r\n    int[][] sortedMatrix(int n, int mat[][]) {\r\n        // temporary matrix of size n^2\r\n        int temp[] = new int[n * n];\r\n        int k = 0;\r\n    \r\n        // copy the elements of matrix \r\n        // one by one into temp[]\r\n        for (int i = 0; i < n; i++)\r\n            for (int j = 0; j < n; j++)\r\n                temp[k++] = mat[i][j];\r\n    \r\n        // sort temp[]\r\n        Arrays.sort(temp);\r\n        \r\n        // copy the elements of temp[]\r\n        // one by one in mat[][]\r\n        k = 0;\r\n        for (int i = 0; i < n; i++)\r\n            for (int j = 0; j < n; j++)\r\n                mat[i][j] = temp[k++];\r\n        \r\n        return mat;\r\n    }\r\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}