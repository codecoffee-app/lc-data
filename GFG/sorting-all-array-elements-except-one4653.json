{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703463,
            "title": "Sorting all array elements except one",
            "titleSlug": "sorting-all-array-elements-except-one4653",
            "content": "<p><span >Given an array <strong>arr[] </strong>of positive integers and an integer <strong>k</strong>, sort the array in ascending order such that the element at index <strong>kth</strong>&nbsp;stays unmoved and all other elements are sorted.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [10, 4, 11, 7, 6, 20], k = 2\n<strong>Output :</strong> [4, 6, 11, 7, 10, 20]\n<strong>Explanation: </strong>Sorting array except an index 2 So, [4, 6, 11, 7, 10, 20]. \n</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [30, 20, 10], k = 0<strong>\nOutput: </strong>[30, 10, 20]<br /><strong>Explanation:</strong> the 0th index is unmoved so array become,[30, 10, 20].</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(nlogn).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5<br /></sup></span><span >1 &le; arr[i] &le; 10<sup>5</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of positive integers and an integer `k`, sort the array in ascending order while keeping the element at index `k` unmoved. All other elements should be sorted in ascending order.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr = [10, 4, 11, 7, 6, 20], k = 2",
                        "output": "[4, 6, 11, 7, 10, 20]",
                        "explanation": "The element at index 2 (11) remains in its original position. The remaining elements are sorted in ascending order: [4, 6, 7, 10, 20]."
                    },
                    {
                        "input": "arr = [30, 20, 10], k = 0",
                        "output": "[30, 10, 20]",
                        "explanation": "The element at index 0 (30) remains in its original position. The remaining elements are sorted in ascending order: [10, 20]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Why not put the element in the last position and sort all elements except the last then again put the element in its's position?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to sort the array except for the element at index k\n    void sortExceptK(vector<int>& arr, int k) {\n        int n = arr.size();\n        // Move the element at index k to the end to keep it unmoved\n        swap(arr[n - 1], arr[k]);\n        // Sort the array except the last element (formerly at index k)\n        sort(arr.begin(), arr.end() - 1);\n        // Shift sorted elements to restore the original position of k\n        for (int i = n - 2; i >= k; --i) {\n            swap(arr[i], arr[i + 1]);\n        }\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public void sortExceptK(int[] arr, int k) {\n        int n = arr.length;\n        // Swap the element at index k with the last element\n        swap(arr, n - 1, k);\n        // Sort all elements except the last one\n        Arrays.sort(arr, 0, n - 1);\n        // Restore the element at index k to its original position\n        for (int i = n - 2; i >= k; i--) {\n            swap(arr, i, i + 1);\n        }\n    }\n\n    private void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def sort_except_k(self, arr, k):\n        n = len(arr)\n        # Swap the element at index k with the last element\n        arr[k], arr[-1] = arr[-1], arr[k]\n        # Sort all elements except the last one\n        arr[:n - 1] = sorted(arr[:n - 1])\n        # Restore the element at index k to its original position\n        for i in range(n - 2, k - 1, -1):\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    sortExceptK(arr, k) {\n        const n = arr.length;\n        // Swap the element at index k with the last element\n        [arr[k], arr[n - 1]] = [ arr[n - 1], arr[k] ];\n        // Sort all elements except the last one\n        arr.splice(0, n - 1, ...arr.slice(0, n - 1).sort((a, b) => a - b));\n        // Restore the element at index k to its original position\n        for (let i = n - 2; i >= k; i--) {\n            [arr[i], arr[i + 1]] = [ arr[i + 1], arr[i] ];\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}