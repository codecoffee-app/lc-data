{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701294,
            "title": "Sort Elements by Decreasing Frequency",
            "titleSlug": "sorting-elements-of-an-array-by-frequency-1587115621",
            "content": "<p><span >Given an array<strong> </strong>of integers <strong>arr[]</strong>, sort<strong> </strong>the array according to the <strong>frequency </strong>of elements, i.e. elements that have higher frequency comes first. If the frequencies of two elements are the same, then the <strong>smaller number comes first</strong>.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [5, 5, 4, 6, 4]\n<strong>Output:</strong> [4, 4, 5, 5, 6]<strong>\nExplanation: </strong>The highest frequency here is 2. Both 5 and 4 have that frequency. Now since the frequencies are the same the smaller element comes first. So 4 4 comes first then comes 5 5. Finally comes 6. The output is <strong>4 4 5 5 6.</strong>\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [9, 9, 9, 2, 5]\n<strong>Output: </strong>[9, 9, 9, 2, 5]<strong>\nExplanation: </strong>The highest frequency here is 3. Element 9 has the highest frequency So 9 9 9 comes first. Now both 2 and 5 have the same frequency. So we print smaller elements first. The output is <strong>9 9 9 2 5.</strong></span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i]&le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, sort the array based on the frequency of each element. Elements with higher frequency should appear earlier in the sorted array. If two elements have the same frequency, the smaller element should come first.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[5, 5, 4, 6, 4]",
                        "output": "[4, 4, 5, 5, 6]",
                        "explanation": "Elements 4 and 5 both appear twice, which is the highest frequency. Since 4 is smaller than 5, it appears before 5 in the sorted output. Element 6 appears once and is placed last."
                    },
                    {
                        "input": "[9, 9, 9, 2, 5]",
                        "output": "[9, 9, 9, 2, 5]",
                        "explanation": "Element 9 appears three times, which is the highest frequency.  Elements 2 and 5 each appear once. Since 2 is smaller than 5, it appears before 5 in the sorted output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Make pairs of element and their frequency, put them in the vector, and sort the vector according to the descending order of freq.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [
            "oracle",
            "zycus"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    unordered_map<int, int> m;\n\n    // Function used in sorting vector elements first according to frequency\n    // and if it is same for both values, then smaller number comes first.\n    static bool sortByVal(const pair<int, int>& a, const pair<int, int>& b) {\n        if (a.second == b.second)\n            return a.first < b.first;\n\n        return a.second > b.second;\n    }\n\n    // Function to sort the array according to frequency of elements.\n    vector<int> sortByFreq(vector<int>& arr) {\n\n        int n = arr.size();\n        vector<pair<int, int>> v;\n\n        // using map to keep count of the elements.\n        for (int i = 0; i < n; i++) {\n            m[arr[i]]++;\n        }\n\n        // copying the elements and their count from map to vector.\n        copy(m.begin(), m.end(), back_inserter(v));\n\n        // sorting the vector according to frequency.\n        sort(v.begin(), v.end(), sortByVal);\n        vector<int> ans;\n\n        for (int i = 0; i < v.size(); i++) {\n            // storing elements as many times as their count in output vector.\n            for (int j = 0; j < v[i].second; j++) {\n                ans.push_back(v[i].first);\n            }\n        }\n        m.clear();\n\n        // returning the output.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class comparator implements Comparator<Map.Entry<Integer, Integer>> {\n    // Function used in sorting list elements first according to frequency\n    // and if it is same for both values, then smaller number comes first.\n    public int compare(Entry<Integer, Integer> o1, Entry<Integer, Integer> o2) {\n        if (o1.getValue() > o2.getValue())\n            return -1;\n        else if (o1.getValue() == o2.getValue()) {\n            if (o2.getKey() < o1.getKey())\n                return 1;\n            else\n                return -1;\n\n        } else if (o1.getValue() < o2.getValue())\n            return 1;\n\n        return Integer.MIN_VALUE;\n    }\n}\n\nclass Solution {\n    // Function to sort the array according to frequency of elements.\n    public ArrayList<Integer> sortByFreq(int arr[]) {\n        int n = arr.length;\n        // using map to keep count of the elements.\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\n        // storing the frequency of each element in map.\n        for (int i = 0; i < n; i++) {\n            int num = arr[i];\n\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 0);\n            }\n        }\n\n        // copying the elements and their count from map to list.\n        List<Map.Entry<Integer, Integer>> set =\n            new ArrayList<Map.Entry<Integer, Integer>>(map.entrySet());\n\n        // sorting the list according to frequency.\n        Collections.sort(set, new comparator());\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\n        for (int i = 0; i < map.size(); i++) {\n            int count = set.get(i).getValue();\n            // storing elements as many times as their count in output list.\n            while (count >= 0) {\n                ans.add(set.get(i).getKey());\n                count--;\n            }\n        }\n        // returning the output.\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to sort the array according to frequency of elements.\n    def sortByFreq(self, arr):\n        n = len(arr)\n        #list containing frequency of all elements.\n        freq = [0 for i in range(max(arr) + 1)]\n\n        #list of elements with frequency 'i' in array at index i.\n        hash_for_freq = [[] for i in range(n + 1)]\n\n        for num in arr:\n            freq[num] += 1\n\n        for i in range(max(arr) + 1):\n            if (freq[i]):\n                hash_for_freq[freq[i]].append(i)\n\n        l = []\n        for i in range(n, 0, -1):\n            for num in hash_for_freq[i]:\n                #storing elements as many times as their count in output list.\n                for j in range(i):\n                    l.append(num)\n\n        #returning the output.\n        return l\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @returns {number[]}\n */\n\nclass Solution {\n\n    // Function to sort the array according to frequency of elements.\n    sortByFreq(arr) {\n        let n = arr.length;\n        // using map to keep count of the elements.\n        let m = new Map();\n\n        // storing the frequency of each element in map.\n        for (let i = 0; i < n; i++) {\n            if (!m.has(arr[i]))\n                m.set(arr[i], 1);\n            else\n                m.set(arr[i], m.get(arr[i]) + 1);\n        }\n\n        // sorting list elements first according to frequency and if it is\n        // same for both values, then smaller number comes first.\n        arr.sort(function(a, b) {\n            if (m.get(a) == m.get(b)) return a - b;\n            return m.get(b) - m.get(a);\n        });\n\n        // returning the output.\n        return arr;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}