{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703035,
            "title": "Sorting Employees",
            "titleSlug": "sorting-employees5907",
            "content": "<p><span >You are given two arrays, <strong>employee</strong> and <strong>salary</strong>, where employee[i] denotes the name of the i<sup>th</sup> employee, and salary[i] denotes the salary of the i<sup>th</sup> employee. Your task is to sort the employee array based on their salaries in non-decreasing order. If two or more employees have the same salary, sort them alphabetically by their names. Return the sorted employee array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>employee = [\"chef\", \"geek\"], salary = [100, 50]\n<strong>Output:</strong> [\"geek\", \"chef\"]\n<strong>Explanation</strong>: \"geek\" has a lower salary (50) than \"chef\" (100), so \"geek\" comes first.</span></pre>\n<pre><span ><strong>Input: </strong>employee = [\"ram\", \"shyam\", \"rohan\"], salary = [60, 45, 60]\n<strong>Output:</strong> [\"shyam\", \"ram\", \"rohan\"]<br /><strong>Explanation:</strong> \"shyam\" has the lowest salary (45), so \"shyam\" comes first, followed by \"ram\" and \"rohan,\" who both have the same salary (60). They keep their original order.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; employee.size() = salary.size() &le; 10<sup>5<br /></sup>1 &le; salary[i] &le; 10<sup>6</sup><br />employee[i] contains only lowercase alphabetic characters</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `employee` and `salary`, where `employee[i]` is the name of the i-th employee, and `salary[i]` is the salary of the i-th employee. Sort the `employee` array based on the corresponding salaries in non-decreasing order. If multiple employees have the same salary, sort them alphabetically by their names. Return the sorted `employee` array.",
                "constraints": [
                    "1 <= employee.size() = salary.size() <= 10^5",
                    "1 <= salary[i] <= 10^6",
                    "employee[i] contains only lowercase alphabetic characters"
                ],
                "testcases": [
                    {
                        "input": "employee = [\"chef\", \"geek\"], salary = [100, 50]",
                        "output": "[\"geek\", \"chef\"]",
                        "explanation": "\"geek\" has a lower salary (50) than \"chef\" (100), so \"geek\" comes first."
                    },
                    {
                        "input": "employee = [\"ram\", \"shyam\", \"rohan\"], salary = [60, 45, 60]",
                        "output": "[\"shyam\", \"ram\", \"rohan\"]",
                        "explanation": "\"shyam\" has the lowest salary (45), so \"shyam\" comes first. \"ram\" and \"rohan\" both have the same salary (60), so they are sorted alphabetically."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Combine employee names and salaries into pairs, then sort these pairs first by salary, and by name alphabetically if salaries are the same. Extract and return the sorted names.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "oracle"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<string> sortRecords(vector<string>& employee, vector<int>& salary) {\n        // Create a vector of pairs to sort based on salary and name\n        vector<pair<int, string>> records;\n        for (size_t i = 0; i < employee.size(); ++i) {\n            records.push_back({salary[i], employee[i]});\n        }\n\n        // Sort the records first by salary (non-decreasing) and then by name\n        // (alphabetically)\n        sort(records.begin(), records.end(),\n             [](const pair<int, string>& a, const pair<int, string>& b) {\n                 if (a.first == b.first)\n                     return a.second <\n                            b.second; // Alphabetical order if salaries are the same\n                 return a.first < b.first; // Non-decreasing order of salary\n             });\n\n        // Extract the sorted employee names\n        vector<string> sortedEmployees;\n        for (const auto& record : records) {\n            sortedEmployees.push_back(record.second);\n        }\n        return sortedEmployees;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<String> sortRecords(List<String> employee, List<Integer> salary) {\n        // Create a list of pairs to sort based on salary and name\n        List<Pair> records = new ArrayList<>();\n        for (int i = 0; i < employee.size(); i++) {\n            records.add(new Pair(salary.get(i), employee.get(i)));\n        }\n\n        // Sort the records first by salary (non-decreasing) and then by name\n        // (alphabetically)\n        Collections.sort(records, (a, b) -> {\n            if (a.salary == b.salary) {\n                return a.name.compareTo(\n                    b.name); // Alphabetical order if salaries are the same\n            }\n            return Integer.compare(a.salary,\n                                   b.salary); // Non-decreasing order of salary\n        });\n\n        // Extract the sorted employee names\n        List<String> sortedEmployees = new ArrayList<>();\n        for (Pair record : records) {\n            sortedEmployees.add(record.name);\n        }\n        return sortedEmployees;\n    }\n\n    // Helper class to store salary and name\n    static class Pair {\n        int salary;\n        String name;\n\n        Pair(int salary, String name) {\n            this.salary = salary;\n            this.name = name;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def sortRecords(self, employee, salary):\n        # Combine employee names and salaries into a list of tuples\n        records = list(zip(salary, employee))\n\n        # Sort records first by salary (non-decreasing) and then by name (alphabetically)\n        records.sort(key=lambda x: (x[0], x[1]))\n\n        # Extract the sorted employee names\n        sorted_employees = [name for _, name in records]\n        return sorted_employees\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    sortRecords(employee, salary) {\n        // Combine employee names and salaries into pairs\n        let records = employee.map((name, index) => [salary[index], name]);\n\n        // Sort records by salary, and by name if salaries are the same\n        records.sort((a, b) => {\n            if (a[0] === b[0]) {\n                return a[1].localeCompare(\n                    b[1]); // Sort alphabetically by name if salaries are equal\n            }\n            return a[0] - b[0]; // Sort by salary (non-decreasing)\n        });\n\n        // Extract and return sorted employee names\n        return records.map(record => record[1]);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}