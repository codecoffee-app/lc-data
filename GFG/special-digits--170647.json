{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714253,
            "title": "Special Digits",
            "titleSlug": "special-digits--170647",
            "content": "<p><span style=\"font-size:18px\">You are given 5 integers -&nbsp;<strong>N,A,B,C,D</strong>.<br />\r\nLet us say all the integers of length&nbsp;<strong>N</strong>,&nbsp;having only <strong>A </strong>or <strong>B</strong> in their decimal representation are&nbsp;<strong>good </strong>integers. Also, among all the good integers, all those integers whose sum of digits should <strong>contains </strong>either C or D or both on it, are <strong>best </strong>integers.<br />\r\nFind the number of best integers of length <strong>N</strong>. Since the number of best integers can be huge, print it modulo <strong>10<sup>9</sup>+7</strong>.</span><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 2, A = 1, B = 2, C = 3, D = 5\r\n<strong>Output: \r\n</strong>2<strong>\r\nExplanation: \r\n</strong>The following are good integers:- \r\n{ 12 , 22 , 11 , 21 }\r\nAnd the following are best integers:- \r\n{ 12, 21&nbsp;} because sum of digits 3 &amp; 5\r\ncontains C &amp; D, which is 3 as well as 5.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 1, A = 1, B = 1, C = 2, D = 3\r\n<strong>Output: \r\n</strong>0<strong>\r\nExplanation: \r\n</strong>The following are good integers: - { 1 }\r\nSince sum of digits is 1 which does not contains\r\nC or D, therefore, answer is 0.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 3:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 4, A = 6, B = 7, C = 5, D = 3\r\n<strong>Output: \r\n</strong><strong>4\r\nExplanation: \r\n</strong>The following are good integers:- \r\n{ 6667 , 6676 , 6766 , 7666.....and many more}\r\nout of all these four { 6667 , 6676 , 6766 , 7666}\r\nis best number because sum of all these four \r\nnumbers is 25, which contains C, which is 5.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThe task is to complete the function&nbsp;<strong>solve()</strong> which takes five integers <strong>N,A,B,C</strong>&nbsp;and <strong>D</strong>&nbsp;as&nbsp;input parameters&nbsp;and returns the number of best integers modulo 10<sup>9</sup>+7.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Expected Time Complexity: O(NlogN)<br />\r\nExpected Space Complexity: O(N)</span></strong></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le;&nbsp;A, B, C, D &le; 9<br />\r\n1 &le; N&nbsp;&le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given five integers N, A, B, C, and D. A 'good' integer is defined as an integer of length N, where each digit is either A or B. A 'best' integer is a 'good' integer whose sum of digits contains either C or D or both in its decimal representation.\n\nFind the number of 'best' integers of length N, modulo 10^9 + 7.",
                "constraints": [
                    "1 <= A, B, C, D <= 9",
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 2, A = 1, B = 2, C = 3, D = 5",
                        "output": "2",
                        "explanation": "The 'good' integers are {12, 22, 11, 21}. The sums of their digits are {3, 4, 2, 3}. The 'best' integers are {12, 21} because their digit sums (3) contain C=3. 22 is not a 'best' integer because the sum of its digits is 4, which does not contain C=3 or D=5. 11 is not a 'best' integer because the sum of its digits is 2, which does not contain C=3 or D=5"
                    },
                    {
                        "input": "N = 1, A = 1, B = 1, C = 2, D = 3",
                        "output": "0",
                        "explanation": "The 'good' integer is {1}. The sum of its digits is 1. Since 1 does not contain C=2 or D=3, the answer is 0."
                    },
                    {
                        "input": "N = 4, A = 6, B = 7, C = 5, D = 3",
                        "output": "4",
                        "explanation": "Four examples of 'good' integers are {6667, 6676, 6766, 7666}. The sum of digits for each of these numbers is 25. Since 25 contains C=5, all four are 'best' integers. Only four numbers are 'best' integers, so that is the number returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We only need to consider the possible sums among all possible numbers. There are only&nbsp;<strong>N+1</strong>&nbsp;different possible sum values.</span></p>",
            "<p><span style=\"font-size:18px\">If some particular value of sum&nbsp;<strong>S</strong> fulfills the criteria then we need to add all possible combinations&nbsp;of numbers whose sum of digits is&nbsp;<strong>S</strong>&nbsp;in our answer.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\n#define ll long long\r\n const int N = 1e5+5;\r\nconst int M = 1e9+7;\r\nll binpow(ll a,ll b,ll p){\r\n    if(b==0)return 1;\r\n    ll t=binpow(a,b/2,p);\r\n    if(b%2)return (((a*t)%p)*t)%p;\r\n    else return ((t*t)%p);\r\n}\r\n \r\nll fact[N],invfact[N];\r\nvoid init(){\r\n    fact[0]=1;\r\n    for(ll i=1;i<N;i++){fact[i]=i*fact[i-1]%M;}\r\n    invfact[N-1]=binpow(fact[N-1],M-2,M);\r\n    for(ll i=N-2;i>=0;i--){\r\n        invfact[i]=(i+1)*invfact[i+1]%M;\r\n    }\r\n}\r\nll ncr(ll n,ll r,ll p){\r\n    return (((fact[n]*invfact[n-r])%p)*invfact[r])%p;\r\n}\r\nbool f = 0;\r\nclass Solution {\r\n  public:\r\n    int bestNumbers(int n, int a, int b, int c, int d) {\r\n        // code here\r\n        if(f==0)\r\n        {\r\n            f = 1;\r\n            init();\r\n        }\r\n        ll ans = 0;\r\n        if(a==b){\r\n            ll sum=n*a;\r\n            while(sum>0){\r\n                if(sum%10==c || sum%10==d){\r\n                    return 1;\r\n                }\r\n                sum/=10;\r\n            }\r\n            return 0;\r\n        }else{\r\n            for(int i=0; i<=n; i++)\r\n            {\r\n                int sum = i*a+(n-i)*b;\r\n                bool good = false;\r\n                while(sum>0)\r\n                {\r\n                    if(sum%10==c || sum%10==d)\r\n                    {\r\n                        good = true;\r\n                        break;\r\n                    }\r\n                    sum /= 10;\r\n                }\r\n                if(good)\r\n                {\r\n                    ans += ncr(n,i,M);\r\n                    ans %= M;\r\n                }\r\n            }\r\n            return ans;\r\n        }\r\n    }\r\n};\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n        // code here\r\n        static int N = (int)1e5+5;\r\n\tstatic int M = (int)1e9+7;\r\n\tlong binpow(long a,long b,long p){\r\n\t    if(b == 0)\r\n\t    \treturn 1;\r\n\t    long t = binpow(a,b/2,p);\r\n\t    if(b%2 != 0)\r\n\t    \treturn (((a*t)%p)*t)%p;\r\n\t    else \r\n\t    \treturn ((t*t)%p);\r\n\t}\r\n\t \r\n\tlong [] fact;\r\n\tlong [] invfact;\r\n\tvoid init(){\r\n\t    fact[0] = 1;\r\n\t    for(int i = 1;i < N; i++)\r\n\t    {\r\n\t    \tfact[i] = i*fact[i-1]%M;\r\n\t    }\r\n\t    invfact[N-1]=binpow(fact[N-1],M-2,M);\r\n\t    for(int i=N-2;i>=0;i--){\r\n\t        invfact[i] = (i+1)*invfact[i+1]%M;\r\n\t    }\r\n\t}\r\n\tlong ncr(int n, int r, long p){\r\n\t    return (((fact[n]*invfact[n-r])%p)*invfact[r])%p;\r\n\t}\r\n\tstatic boolean f;\r\n\tint bestNumbers(int n, int a, int b, int c, int d) {\r\n        fact = new long[N];\r\n        invfact = new long[N];\r\n        f = false;\r\n        if(!f)\r\n        {\r\n            f = true;\r\n            init();\r\n        }\r\n        long ans = 0;\r\n        if(a==b){\r\n            long sum=1L*n*a;\r\n            while(sum>0){\r\n                if(sum%10==c || sum%10==d){\r\n                    return 1;\r\n                }\r\n                sum/=10;\r\n            }\r\n            return 0;\r\n        }else{\r\n            for(int i=0; i<=n; i++)\r\n            {\r\n                int sum = i*a+(n-i)*b;\r\n                boolean good = false;\r\n                while(sum>0)\r\n                {\r\n                    if(sum%10==c || sum%10==d)\r\n                    {\r\n                        good = true;\r\n                        break;\r\n                    }\r\n                    sum /= 10;\r\n                }\r\n                if(good)\r\n                {\r\n                    ans += ncr(n,i,M);\r\n                    ans %= M;\r\n                }\r\n            }\r\n            return (int)ans;\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Initializing global variables flag, N, and M.\nflag=0\nN=10**5+5\nM=10**9+7\nfact=[0]*N\ninvfact=[0]*N\n\n# Function to initialize the factorial and inverse factorial arrays.\ndef init():\n    N=10**5+5\n    fact[0]=1\n    # Calculating factorial values.\n    for i in range(1,N):\n        fact[i]=(i*fact[i-1])%M\n    # Calculating inverse factorial values.\n    invfact[N-1]=pow(fact[N-1],M-2,M)\n    for i in range(N-2,-1,-1):\n        invfact[i]=((i+1)*invfact[i+1])%M\n\n# Function to calculate the combination (nCr).\ndef ncr(n,r,p):\n    ans=((fact[n]*invfact[n-r]%p)*invfact[r])%p\n    return ans\n\n# Class Solution with the method bestNumbers\nclass Solution:\n    \n    # Method to calculate the count of best numbers.\n    def bestNumbers(self, n : int, a : int, b : int, c : int, d : int) -> int:\n        global flag\n        # Initializing the factorial and inverse factorial arrays if it's the first call.\n        if (flag==0):\n            flag=1\n            init()\n        \n        ans=0\n        # Checking if both a and b are the same, then we only need to check if the sum is a combination of c or d.\n        if (a==b):\n            Sum=n*a\n            # Checking each digit of the sum.\n            while(Sum>0):\n                if (Sum%10==c or Sum%10==d):\n                    return 1\n                Sum=Sum//10\n            return 0\n        \n        # Iterating through all the possible combinations of a and b.\n        for i in range(0,n+1):\n            Sum=i*a+(n-i)*b\n            good=False\n            # Checking each digit of the sum.\n            while(Sum>0):\n                if (Sum%10==c or Sum%10==d):\n                    good=True\n                    break\n                Sum=Sum//10\n            if (good):\n                # Calculating the count of combinations that have good numbers.\n                ans+=ncr(n,i,M)\n                ans%=M\n        return ans",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution\n{\n    private const int N = 100005;\n    private const int M = 1000000007;\n    \n    private static long[] fact = new long[N];\n    private static long[] invfact = new long[N];\n    private static bool initialized = false;\n\n    private static long Binpow(long a, long b, long p)\n    {\n        if (b == 0) return 1;\n        long t = Binpow(a, b / 2, p);\n        if (b % 2 == 1) return (((a * t) % p) * t) % p;\n        return ((t * t) % p);\n    }\n\n    private static void Initialize()\n    {\n        fact[0] = 1;\n        for (long i = 1; i < N; i++)\n        {\n            fact[i] = i * fact[i - 1] % M;\n        }\n        invfact[N - 1] = Binpow(fact[N - 1], M - 2, M);\n        for (long i = N - 2; i >= 0; i--)\n        {\n            invfact[i] = (i + 1) * invfact[i + 1] % M;\n        }\n        initialized = true;\n    }\n\n    private static long Ncr(long n, long r, long p)\n    {\n        return (((fact[n] * invfact[n - r]) % p) * invfact[r]) % p;\n    }\n\n    public int bestNumbers(int n, int a, int b, int c, int d)\n    {\n        if (!initialized)\n        {\n            Initialize();\n        }\n        long ans = 0;\n        if (a == b)\n        {\n            long sum = n * a;\n            while (sum > 0)\n            {\n                if (sum % 10 == c || sum % 10 == d)\n                {\n                    return 1;\n                }\n                sum /= 10;\n            }\n            return 0;\n        }\n        else\n        {\n            for (int i = 0; i <= n; i++)\n            {\n                int sum = i * a + (n - i) * b;\n                bool good = false;\n                while (sum > 0)\n                {\n                    if (sum % 10 == c || sum % 10 == d)\n                    {\n                        good = true;\n                        break;\n                    }\n                    sum /= 10;\n                }\n                if (good)\n                {\n                    ans = (ans + Ncr(n, i, M)) % M;\n                }\n            }\n            return (int)ans;\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}