{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710149,
            "title": "Special Keyboard 2",
            "titleSlug": "special-keyboard-2",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">Geek wants to print <strong>n </strong>times&nbsp;<strong>'A'</strong> on the screen of a computer.&nbsp;</span></span></span><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><span style=\"font-size: 18px;\">You can perform one of two operations on this computer for each step</span><span style=\"font-size: 14.6667px;\">&nbsp;<span style=\"font-size: 18px;\">and&nbsp;</span></span></span></span><span style=\"font-size: 18px;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">return the minimum number of operations to get the character 'A' exactly n times on the screen.</span></span></span><br /><span style=\"font-size: 18px;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">Two Operations are:</span></span></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">Copy All: You can copy all the characters on the screen (a partial copy is not allowed).</span></span></span></li>\n<li><span style=\"font-size: 18px;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">Paste: You can paste the characters which are copied last time.</span></span></span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nn = 3\n<strong>Output</strong>: \n3\n<strong>Explanation</strong>:\n<span style=\"font-family: Arial;\"><span style=\"color: #000000;\">Initially, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'\nAs you can see, we only need three operations \nto get <strong>three </strong>times 'A' on the screen.</span></span></span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nn = 1\n<strong>Output</strong>: \n0\n<strong>Explanation</strong>:\n</span><span style=\"font-size: 18px;\">Here, We don't need do any operations \nbecause single A is already there.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Your Task:</span></strong><br /><span style=\"font-size: 18px;\">You don't need to read input or print anything.&nbsp;You only need to complete the function<strong> findminoperation() </strong>which<strong>&nbsp;</strong>takes one integer <strong>n </strong>as input and returns an integer denoting operation taken to print <strong>'A'</strong>, <strong>n </strong>times.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> &nbsp;O(sqrt(n))<br /><strong>Expected Auxilliary Space:</strong> O(1)</span><br />&nbsp;<br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt; n &lt; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a computer screen that initially displays a single character 'A'. You can perform the following two operations:\n\n*   **Copy All:** Copies all the characters currently on the screen.\n*   **Paste:** Pastes the characters that were most recently copied.\n\nGiven an integer `n`, representing the desired number of 'A' characters on the screen, determine the minimum number of operations required to achieve exactly `n` 'A's.",
                "constraints": [
                    "1 < n < 10^9"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "3",
                        "explanation": "Initially, we have one 'A'.\n1. Copy All: 'A' is copied.\n2. Paste: We get 'AA'.\n3. Paste: We get 'AAA'.\nTotal operations: 3"
                    },
                    {
                        "input": "1",
                        "output": "0",
                        "explanation": "Since there is already one 'A' on the screen, no operations are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Can we think about Prime Factorization?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n     int findminoperation(int n) {\r\n       int ans = 0, d = 2;\r\n        while (n > 1) {\r\n            while (n % d == 0) {\r\n                ans += d;\r\n                n /= d;\r\n            }\r\n            d++;\r\n        }\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int findminoperation(int n) {\n        int ans = 0, d = 2;\n        while (n > 1) {\n            while (n % d == 0) {\n                ans += d;\n                n /= d;\n            }\n            d++;\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def findminoperation(self, n: int) -> int:\r\n        ans, d = 0, 2\r\n        while n > 1:\r\n            while n % d == 0:\r\n                ans += d\r\n                n //= d\r\n            d += 1\r\n        return ans\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int findminoperation(int n)\n    {\n        int ans = 0, d = 2;\n        while (n > 1)\n        {\n            while (n % d == 0)\n            {\n                ans += d;\n                n /= d;\n            }\n            d++;\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}