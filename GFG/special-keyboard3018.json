{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704572,
            "title": "Special Keyboard",
            "titleSlug": "special-keyboard3018",
            "content": "<p><span style=\"font-size: 18px;\">Imagine you have a special keyboard with the following keys:&nbsp;</span></p>\n<p style=\"margin-left: 40px;\"><span style=\"font-size: 18px;\">Key 1: &nbsp;Prints 'A' on screen<br />Key 2: (Ctrl-A): Select screen<br />Key 3: (Ctrl-C): Copy selection to buffer<br />Key 4: (Ctrl-V): Print buffer on screen appending it after what has already been printed. </span></p>\n<p><span style=\"font-size: 18px;\">Find maximum numbers of A's that can be produced by pressing keys on the special keyboard N times.&nbsp;</span></p>\n<p><br /><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Press key 1 three times.</span></pre>\n<p><br /><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 7\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The best key sequence is \nkey 1, key 1, key 1, key 2, key 3,\nkey4, key 4.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>optimalKeys()</strong> which takes N as input parameter and returns the maximum number of A's that can be on the screen after performing N operations.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt; N &lt; 76</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A few important points to note are<br />\na) For N &lt; 7, the output is N itself.<br />\nb) Ctrl V can be used multiple times to print current buffer. The idea is to compute the optimal string length for N keystrokes by using a simple insight. The sequence of N keystrokes which produces an optimal string length will end with a suffix of Ctrl-A, a Ctrl-C, followed by only Ctrl-V&rsquo;s . (For N &gt; 6)</span></p>\n\n<p><span style=\"font-size:18px\">Now the task is to find out the breakpoint after which get the above suffix of keystrokes.<br />\nDefinition of a breakpoint is that instance after which one need to only press Ctrl-A, Ctrl-C once and the only Ctrl-V&rsquo;s afterwards to generate the optimal length.<br />\nIf one loop from N-3 to 1 and choose each of these values for the break-point, and compute that optimal string they would produce. Once the loop ends, you will have the maximum of the optimal lengths for various breakpoints, thereby giving the optimal length for N keystrokes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "flipkart",
            "amazon",
            "microsoft",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate the optimal number of keys\n    long long int optimalKeys(int N){\n        // If the number of keys is less than or equal to 6, return N\n        if(N <= 6)\n            return (unsigned long long int)N;\n        \n        // Create an array to store the maximum number of keys for each screen size\n        long long int screen[N+1], j, i;\n        \n        // Initialize the array with the base case values for N = 1 to 6\n        for(i = 1;i <= 6;i++)\n            screen[i-1] = i;\n        \n        // Calculate the maximum number of keys for each screen size from 7 to N\n        for(i = 7;i <= N;i++){\n            // Set the initial value of maximum keys for the current screen size to 0\n            screen[i-1] = 0;\n            \n            // Calculate the maximum number of keys for previous screen sizes and update the maximum value\n            for(j = i-3;j >= 1;j--){\n                long long int cur = (i-j-1)*screen[j-1];\n                if(cur > screen[i-1])\n                    screen[i-1] = cur;\n            }\n        }\n        // Return the maximum number of keys for the given N\n        return screen[N-1];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution{\n    // Function to find the optimal number of keystrokes\n    static int optimalKeys(int N){\n        // If N is less than or equal to 6, the optimal keystrokes will be N\n        if(N <= 6)\n            return N;\n        \n        // Creating an array to store the optimal keystrokes for each screen\n        int screen[] = new int[N];\n        int i, j;\n        \n        // Initializing the first 6 screens with number of keystrokes equal to the screen number itself\n        for(i = 1;i <= 6;i++)\n            screen[i-1] = i;\n            \n        // Computing the optimal keystrokes for the remaining screens\n        for(i = 7;i <= N;i++){\n            screen[i-1] = 0;\n            \n            // Trying different options of copying and pasting to find the maximum number of keystrokes\n            for(j = i-3; j >= 1;j--){\n                int cur = (i - j - 1)*screen[j - 1];\n                \n                // If the current number of keystrokes is greater than the previously computed maximum, update it\n                if(cur > screen[i - 1])\n                    screen[i - 1] = cur;\n            }\n        }\n        \n        // Returning the optimal number of keystrokes for N\n        return screen[N-1];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def optimalKeys(self, N):\r\n        # check if N is less than or equal to 6, as this is the base case\r\n        if N <= 6 :\r\n            return N;\r\n\r\n        # create an array to store the optimal number of keystrokes for each screen size\r\n        screen = [0]*N;\r\n        \r\n        # initialize the first 6 elements of the array with values from 1 to 6\r\n        for i in range(1,7) :\r\n            screen[i-1] = i\r\n            \r\n        # iterate from 7 to N, filling in the optimal number of keystrokes for each screen size\r\n        for i in range(7,N+1) :\r\n            screen[i-1] = 0\r\n            \r\n            # iterate from i-3 to 1 in reverse order, to calculate the optimal number of keystrokes\r\n            for j in range(i-3,0,-1): \r\n                # calculate the current number of keystrokes, taking into account the number of screens\r\n                cur = (i - j - 1)*screen[j - 1];\r\n                \r\n                # check if the current number of keystrokes is greater than the previous optimal number\r\n                if cur > screen[i - 1] :\r\n                    # update the optimal number of keystrokes\r\n                    screen[i - 1] = cur;\r\n            \r\n        # return the optimal number of keystrokes for screen size N\r\n        return screen[N-1];",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {number} N\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    \r\n    optimalKeys(N)\r\n    {\r\n        if(N <= 6)\r\n            return N;\r\n        let screen = new Array(N+1);\r\n        \r\n        for(let i = 1;i <= 6;i++)\r\n            screen[i-1] = i;\r\n        \r\n        for(let i = 7;i <= N;i++){\r\n            screen[i-1] = 0;\r\n            for(let j = i-3;j >= 1;j--){\r\n                let cur = (i-j-1)*screen[j-1];\r\n                if(cur > screen[i-1])\r\n                    screen[i-1] = cur;\r\n            }\r\n        }\r\n        return screen[N-1];\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public long optimalKeys(int N)\n    {\n        // If the number of keys is less than or equal to 6, return N\n        if(N <= 6)\n            return N;\n        \n        // Create an array to store the maximum number of keys for each screen size\n        long[] screen = new long[N+1];\n        \n        // Initialize the array with the base case values for N = 1 to 6\n        for(int i = 1; i <= 6; i++)\n            screen[i-1] = i;\n        \n        // Calculate the maximum number of keys for each screen size from 7 to N\n        for(int i = 7; i <= N; i++){\n            // Set the initial value of maximum keys for the current screen size to 0\n            screen[i-1] = 0;\n            \n            // Calculate the maximum number of keys for previous screen sizes and update the maximum value\n            for(int j = i-3; j >= 1; j--){\n                long cur = (i-j-1) * screen[j-1];\n                if(cur > screen[i-1])\n                    screen[i-1] = cur;\n            }\n        }\n        // Return the maximum number of keys for the given N\n        return screen[N-1];\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}