{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705628,
            "title": "Special Matrix",
            "titleSlug": "special-matrix4201",
            "content": "<p><span style=\"font-size: 18px;\">You are given a matrix having <strong>n</strong> rows and <strong>m</strong> columns. The special property of this matrix is that some of the cells of this matrix are given as input, which are <strong>blocked&nbsp;</strong>i.e. they cannot be reached. Now you have to start from the cell <strong>(1,1)</strong> and reach the end <strong>(n,m)</strong> provided during the journey you can move horizontally <strong>right</strong> from the current cell or vertically <strong>down</strong> from the current cell. Returns <strong>total</strong> <strong>number of ways</strong> <strong>modulo 109 + 7</strong> you can traverse the matrix obeying the above constraints starting from <strong>(1,1)</strong> and ending at <strong>(n,m)</strong>.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3, m = 3, k = 2,\nblocked_cells = {{1,2},{3,2}}.\n<strong>Output: </strong>1\n<strong>Explanation: </strong>There is only one path from\n(1,1) to(3,3) which is (1,1)-&gt;(2,1)-&gt;(2,2)-&gt;\n(2,3)-&gt;(3,3).</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5, m = 5, k = 1,\nblocked_cells = {{5,5}}\n<strong>Output: </strong>0\n<strong>Explanation: </strong>There is no path to reach at \n(5,5) beacuse (5,5) is blocked.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything, Your task is to complete the function&nbsp;<strong>FindWays()&nbsp;</strong>which takes n, m and blocked_cells as input parameter and returns total number of ways to reach at (n, m) modulo 10<sup>9</sup>&nbsp;+ 7.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n*m)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(n*m)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n, m &lt;= 500<br />1 &lt;= k &lt;= n*m&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a matrix of size *n* rows and *m* columns. Some cells in the matrix are blocked and cannot be traversed. Starting from cell (1,1), you can only move right or down. Determine the total number of distinct paths from (1,1) to (n,m), modulo 10<sup>9</sup> + 7, avoiding blocked cells.",
                "constraints": [
                    "1 <= n, m <= 500",
                    "1 <= k <= n*m, where k is the number of blocked cells"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3, k = 2, blocked_cells = {{1,2},{3,2}}",
                        "output": "1",
                        "explanation": "There is only one valid path from (1,1) to (3,3): (1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3)."
                    },
                    {
                        "input": "n = 5, m = 5, k = 1, blocked_cells = {{5,5}}",
                        "output": "0",
                        "explanation": "Since the destination cell (5,5) is blocked, there are no possible paths."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Break the problem into small parts by marking blocked cells.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\nclass Solution {\npublic:\n    // Function to add two numbers and take modulo\n    long long int add(long long int a, long long int b){\n        long long int mod = 1e9+7;\n        return ((a%mod) + (b%mod))%mod;\n    }\n    \n    // Function to find the number of ways to reach the bottom-right cell\n    int FindWays(int n, int m, vector<vector<int>>blocked_cells){\n        using ll = long long int ;\n        ll mod = 1e9 + 7;\n        \n        // Creating matrix to represent the grid\n        vector<vector<int>>matrix(n, vector<int>(m, 0));\n        \n        // Marking blocked cells in the matrix\n        for(auto i: blocked_cells){\n            int x = i[0];\n            int y = i[1];\n            matrix[x-1][y-1] = 1;\n        }\n        \n        // Creating dp array to store number of ways to reach each cell\n        vector<vector<ll>>dp(n, vector<ll>(m, 0));\n        \n        // Initializing base cases for dp array\n        for(int i = 0; i < n; i++){\n            if(!matrix[i][0]){\n                dp[i][0] = 1;\n            }\n            else break;\n        }\n        \n        for(int i = 0; i < m; i++){\n            if(!matrix[0][i])\n                dp[0][i] = 1;\n            else break;\n        }\n        \n        // Filling dp array using dynamic programming\n        for(int i = 1; i <n; i++){\n            for(int j = 1; j < m; j++){\n                if(!matrix[i][j]){\n                    dp[i][j] = add(dp[i-1][j], dp[i][j-1]);\n                }\n            }\n        }\n        \n        // Returning the number of ways to reach bottom-right cell\n        return (int)dp[n-1][m-1];    \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// import java.util.*;\n\nclass Solution {\n    // Function to add two numbers and take modulo\n    long add(long a, long b) {\n        long mod = 1000000007;\n        return ((a % mod) + (b % mod)) % mod;\n    }\n\n    // Function to find the number of ways to reach the bottom-right cell\n    int FindWays(int n, int m, int[][] blockedCells) {\n        long mod = 1000000007;\n\n        // Creating matrix to represent the grid\n        int[][] matrix = new int[n][m];\n\n        // Marking blocked cells in the matrix\n        for (int[] i : blockedCells) {\n            int x = i[0];\n            int y = i[1];\n            matrix[x - 1][y - 1] = 1;\n        }\n\n        // Creating dp array to store number of ways to reach each cell\n        long[][] dp = new long[n][m];\n\n        // Initializing base cases for dp array\n        for (int i = 0; i < n; i++) {\n            if (matrix[i][0] == 0) {\n                dp[i][0] = 1;\n            } else {\n                break;\n            }\n        }\n\n        for (int i = 0; i < m; i++) {\n            if (matrix[0][i] == 0) {\n                dp[0][i] = 1;\n            } else {\n                break;\n            }\n        }\n\n        // Filling dp array using dynamic programming\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                if (matrix[i][j] == 0) {\n                    dp[i][j] = add(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        // Returning the number of ways to reach bottom-right cell\n        return (int)(dp[n - 1][m - 1] % mod);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def FindWays(self, n, m, blocked_cells):\n        MOD = 10**9 + 7\n\n        #Initializing the dp grid\n        dp=[[0 for i in range(m+1)] for j in range(n+1)]\n        \n        #Setting the starting point count to 1\n        dp[1][1]=1\n\n        #Updating the blocked cells in the dp grid\n        for x in blocked_cells:\n            dp[x[0]][x[1]]=-1\n\n        #If the destination cell is blocked, return 0\n        if dp[n][m]==-1:\n            return 0\n\n        #Calculating the number of ways to reach each cell in dp grid\n        for i in range(1,n+1):\n            for j in range(1,m+1):\n                if dp[i][j]==-1:\n                    continue\n                if dp[i-1][j] != -1:\n                    dp[i][j]=(dp[i][j]+dp[i-1][j])%MOD\n                if dp[i][j-1] != -1:\n                    dp[i][j]=(dp[i][j]+dp[i][j-1])%MOD\n\n        #Returning the number of ways to reach the destination cell\n        return dp[n][m]",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} n\r\n * @param {number} m\r\n * @param {number[][]} blocked_cells\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n  //Function to find the number of unique paths.\r\n  FindWays(n, m, blocked_cells) {\r\n    const MOD = 10**9 + 7;\r\n\r\n    //Initializing the dp grid\r\n    let dp = new Array(n+1).fill(0).map(() => new Array(m+1).fill(0));\r\n        \r\n    //Setting the starting point count to 1\r\n    dp[1][1] = 1;\r\n\r\n    //Updating the blocked cells in the dp grid\r\n    for (let x of blocked_cells) {\r\n      dp[x[0]][x[1]] = -1;\r\n    }\r\n\r\n    //If the destination cell is blocked, return 0\r\n    if (dp[n][m] === -1) {\r\n      return 0;\r\n    }\r\n\r\n    //Calculating the number of ways to reach each cell in dp grid\r\n    for (let i = 1; i <= n; i++) {\r\n      for (let j = 1; j <= m; j++) {\r\n        if (dp[i][j] === -1) {\r\n          continue;\r\n        }\r\n        if (dp[i-1][j] !== -1) {\r\n          dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD;\r\n        }\r\n        if (dp[i][j-1] !== -1) {\r\n          dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD;\r\n        }\r\n      }\r\n    }\r\n\r\n    //Returning the number of ways to reach the destination cell\r\n    return dp[n][m];\r\n  }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}