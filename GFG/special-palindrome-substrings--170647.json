{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714129,
            "title": "Special Palindrome Substrings",
            "titleSlug": "special-palindrome-substrings--170647",
            "content": "<p><span style=\"font-size:18px\">Given two strings s1 and s2, The task is to convert s1 into a palindrome such that s1 contain s2 as a substring in a minimum number of operation.<br />\r\nIn a&nbsp;single operation, we can replace any word of s1 with any character.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:&nbsp;</strong>If it is not possible to convert s1 such that it is a palindrome as well as contains substring of s2, then return -1.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><span style=\"font-family:Arial\"><span style=\"color:#000000\"><strong>Example 1:</strong></span></span></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><span style=\"font-family:Arial\"><span style=\"color:#000000\"><strong>Input:</strong>\r\ns1=&quot;abaa&quot; s2=&quot;bb&quot;\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong>\r\nwe can replace s1[2]=&#39;a&#39; with &#39;b&#39;.\r\nSo the new s1 will be like &quot;abba&quot;,\r\nhaving s2 as a substring.</span></span></span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><span style=\"font-family:Arial\"><span style=\"color:#000000\"><strong>Example 2:</strong></span></span></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><span style=\"font-family:Arial\"><span style=\"color:#000000\"><strong>Input:</strong>\r\n</span></span></span><span style=\"font-size:13.5pt\"><span style=\"font-family:Arial\"><span style=\"color:#000000\">s1=&quot;abbd&quot; s2=&quot;mr&quot;</span></span></span><span style=\"font-size:18px\"><span style=\"font-family:Arial\"><span style=\"color:#000000\">\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong>\r\n</span></span></span><span style=\"font-size:13.5pt\"><span style=\"font-family:Arial\"><span style=\"color:#000000\">1st: s1=&quot;mrbd&quot; --&gt; 2 operations (this is the \r\nminimum operation to make s2 a substring of s1) \r\n2nd: s1=&quot;mrrm&quot; --&gt; 2 operations \r\n(this is the minimum operation to make s1 palindrome)</span></span></span><span style=\"font-size:18px\"><span style=\"font-family:Arial\"><span style=\"color:#000000\">\r\n</span></span></span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp; </strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function <strong>specialPalindrome()</strong> which takes the two strings <strong>s1</strong> and <strong>s2</strong> as input parameters. Return the minimum number of operations needs to convert s1 such that it is a palindrome and having s2 as a substring in s1.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(N*M) [N: size of s1 and M: size of s2]<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; |s2|&nbsp;&le; |s1| &le;&nbsp; 1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, determine the minimum number of operations required to transform `s1` into a palindrome such that `s1` contains `s2` as a substring. In a single operation, any character of `s1` can be replaced with any other character. If it's impossible to convert `s1` into a palindrome containing `s2`, return -1.",
                "constraints": [
                    "1 <= |s2| <= |s1| <= 1000"
                ],
                "testcases": [
                    {
                        "input": "s1=\"abaa\" s2=\"bb\"",
                        "output": "1",
                        "explanation": "Replace s1[2] = 'a' with 'b'. The resulting s1 is \"abba\", which is a palindrome and contains \"bb\"."
                    },
                    {
                        "input": "s1=\"abbd\" s2=\"mr\"",
                        "output": "4",
                        "explanation": "Minimum operations to make s2 a substring of s1: s1=\"mrbd\" requires 2 operations. Minimum operations to make s1 a palindrome: s1=\"mrrm\" requires 2 operations. Total operations: 4"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>As the constrain is 1000, you can think of O(N^2) approach. Try to put s2 in all possible positions of s1 and then try to satisfy the condition.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "makemytrip"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\n\r\nclass Solution{\r\n    public:\r\n    int specialPalindrome(string s1, string s2){\r\n        int l1=s1.length(),l2=s2.length();\r\n        int ans=INT_MAX;\r\n        for(int i=0 ; i<l1-l2+1 ; i++){\r\n    \r\n            string temp=s1.substr(0,i)+s2+s1.substr(i+l2); // place s2 in all possible positions in s1\r\n            int cost=0;\r\n            // calculate cost to place s2\r\n            for(int j=i ; j<i+l2 ; j++){\r\n    \r\n                if(s1[j]!=temp[j])\r\n                    cost++;\r\n            }\r\n            int z=0;\r\n            // find the cost to convert new string to palindrome\r\n            for(int j=0 ; j<ceil(l1/2.0) ; j++){\r\n    \r\n                if((j<i || j>=i+l2) && temp[j]!=temp[l1-j-1]) // if s2 is in the first half of new string\r\n                    cost++;\r\n                else if(temp[j]!=temp[l1-j-1] && (l1-j-1<i || l1-j-1>=i+l2)) // if s2 is in the second half of new string\r\n                    cost++;\r\n                else if(temp[j]!=temp[l1-j-1]){ // if s2 is in both halves\r\n    \r\n                    z=1;\r\n                    break;\r\n                }\r\n            }\r\n            if(z==0)\r\n                ans=min(ans,cost);\r\n        }\r\n        if(ans == INT_MAX){\r\n          return -1;\r\n        }\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    public  static int specialPalindrome(String a, String b){\r\n       //Code Here\r\n       char s1[] = a.toCharArray(), s2[] = b.toCharArray();\r\n       int l1 = s1.length, l2 = s2.length, ans = Integer.MAX_VALUE;\r\n       for(int i=0 ; i<l1-l2+1 ; i++){\r\n           char temp[]=(a.substring(0,i)+b+a.substring(i+l2)).toCharArray();\r\n           int cost=0;\r\n            // calculate cost to place s2\r\n            for(int j=i ; j<i+l2 ; j++){\r\n                if(s1[j]!=temp[j])\r\n                    cost++;\r\n            }\r\n            int z=0;\r\n            for(int j=0 ; j<Math.ceil(l1/2.0) ; j++){\r\n    \r\n                if((j<i || j>=i+l2) && temp[j]!=temp[l1-j-1]) // if s2 is in the first half of new string\r\n                    cost++;\r\n                else if(temp[j]!=temp[l1-j-1] && (l1-j-1<i || l1-j-1>=i+l2)) // if s2 is in the second half of new string\r\n                    cost++;\r\n                else if(temp[j]!=temp[l1-j-1]){ // if s2 is in both halves\r\n                    z=1;\r\n                    break;\r\n                }\r\n            }\r\n            if(z==0)\r\n                ans=Math.min(ans,cost);\r\n       }\r\n       if(ans == Integer.MAX_VALUE){\r\n          return -1;\r\n        }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nimport math\r\nINF = float(\"inf\")\r\n\r\nclass Solution():\r\n    def specialPalindrome(self, s1, s2):\r\n        #initialize the minimum cost to infinity\r\n        ans=INF\r\n        #iterate over the possible positions to insert s2 into s1\r\n        for i in range(len(s1)-len(s2)+1):\r\n    \r\n            #create a new string by inserting s2 into s1\r\n            temp=s1[:i]+s2+s1[i+len(s2):]\r\n            cost=0\r\n            #calculate the cost of changing characters in s1 to make it equal to temp\r\n            for j in range(i, i+len(s2)):\r\n    \r\n                if(s1[j]!=temp[j]):\r\n                    cost+=1\r\n            z=0\r\n            #check if the resulting string is a palindrome and calculate the additional costs\r\n            for j in range(math.ceil(len(s1)/2)):    \r\n                if((j<i or j>=i+len(s2)) and temp[j]!=temp[len(s1)-j-1]):\r\n                    cost+=1\r\n                elif(temp[j]!=temp[len(s1)-j-1] and (len(s1)-j-1<i or len(s1)-j-1>=i+len(s2))):\r\n                    cost+=1\r\n                elif(temp[j]!=temp[len(s1)-j-1]):\r\n                    z=1\r\n                    break\r\n\r\n            #update the minimum cost\r\n            if(z==0):\r\n                ans=min(ans,cost)\r\n        if(ans == INF): #if no valid insertion is possible, return -1\r\n          return -1\r\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {string} s1\r\n * @param {string} s2\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to check whether the given strings are special Palindrome\r\n    specialPalindrome(s1, s2) {\r\n        //initialize the minimum cost to infinity\r\n        let INF = Number.POSITIVE_INFINITY;\r\n        let ans = INF;\r\n        //iterate over the possible positions to insert s2 into s1\r\n        for (let i = 0; i <= s1.length - s2.length; i++) {\r\n            //create a new string by inserting s2 into s1\r\n            let temp = s1.substring(0, i) + s2 + s1.substring(i + s2.length);\r\n            let cost = 0;\r\n            //calculate the cost of changing characters in s1 to make it equal to temp\r\n            for (let j = i; j < i + s2.length; j++) {\r\n                if (s1[j] !== temp[j]) {\r\n                    cost += 1;\r\n                }\r\n            }\r\n            let z = 0;\r\n            //check if the resulting string is a palindrome and calculate the additional costs\r\n            for (let j = 0; j < Math.ceil(s1.length / 2); j++) {\r\n                if ((j < i || j >= i + s2.length) && temp[j] !== temp[s1.length - j - 1]) {\r\n                    cost += 1;\r\n                } else if (temp[j] !== temp[s1.length - j - 1] && (s1.length - j - 1 < i || s1.length - j - 1 >= i + s2.length)) {\r\n                    cost += 1;\r\n                } else if (temp[j] !== temp[s1.length - j - 1]) {\r\n                    z = 1;\r\n                    break;\r\n                }\r\n            }\r\n            //update the minimum cost\r\n            if (z === 0) {\r\n                ans = Math.min(ans, cost);\r\n            }\r\n        }\r\n        if (ans === INF) { //if no valid insertion is possible, return -1\r\n            return -1;\r\n        }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int specialPalindrome(string s1, string s2)\n    {\n        int l1 = s1.Length;\n        int l2 = s2.Length;\n        int ans = int.MaxValue;\n        for (int i = 0; i < l1 - l2 + 1; i++)\n        {\n            string temp = s1.Substring(0, i) + s2 + s1.Substring(i + l2);\n            int cost = 0;\n            for (int j = i; j < i + l2; j++)\n            {\n                if (s1[j] != temp[j])\n                    cost++;\n            }\n            int z = 0;\n            for (int j = 0; j < Math.Ceiling(l1 / 2.0); j++)\n            {\n                if ((j < i || j >= i + l2) && temp[j] != temp[l1 - j - 1])\n                    cost++;\n                else if (temp[j] != temp[l1 - j - 1] && (l1 - j - 1 < i || l1 - j - 1 >= i + l2))\n                    cost++;\n                else if (temp[j] != temp[l1 - j - 1])\n                {\n                    z = 1;\n                    break;\n                }\n            }\n            if (z == 0)\n                ans = Math.Min(ans, cost);\n        }\n        if (ans == int.MaxValue)\n            return -1;\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}