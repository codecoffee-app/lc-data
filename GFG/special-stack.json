{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700453,
      "title": "Special Stack",
      "titleSlug": "special-stack",
      "content": "<p><span style=\"font-size: 18px;\">Design a data-structure<strong> </strong>SpecialStack<strong>&nbsp;</strong>that supports all the stack operations like <strong>push()</strong>, <strong>pop()</strong>,<strong> isEmpty()</strong>, <strong>isFull()</strong> and an additional operation <strong>getMin()</strong> which should return the <strong>minimum </strong>element from the SpecialStack. Your task is to complete all the functions, using a stack data structure.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;The output of the code will be the value returned by&nbsp;<strong>getMin()&nbsp;</strong>function.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>stack: 18 19 29 15 16<strong>\nOutput: </strong>15\n<strong>Explanation: </strong>The minimum element of the stack is 15.<br /></span></pre>\n<pre><strong>I<span >nput: </span></strong><span >stack: 34 335 1814 86<strong>\nOutput: </strong>34\n<strong>Explanation: </strong>The minimum element of the stack is 34.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; stack.size() &le; 10<sup>4</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": "NA",
      "dislikes": "NA"
    },
    "similar": [],
    "hints": [
      "<p><span style=\"font-size:18px\">Use standard push, pop for all functions</span></p>\n\n<p><span style=\"font-size:18px\">To get minimum value, traverse the whole stack</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Stack",
        "slug": "stack"
      },
      {
        "name": "STL",
        "slug": "stl"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": [
      "paytm",
      "vmware",
      "flipkart",
      "amazon",
      "microsoft",
      "factset",
      "makemytrip",
      "walmart",
      "goldman-sachs",
      "intuit",
      "adobe",
      "sap",
      "linkedin"
    ],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "//Function to push an element into the stack.\nvoid push(stack<int>& s, int a){\n\ts.push(a);\n}\n\n//Function to check if the stack is full or not.\nbool isFull(stack<int>& s,int n){\n\tif(s.size()==n)\n\t\treturn true;\n\treturn false;\n}\n\n//Function to check if the stack is empty or not.\nbool isEmpty(stack<int>& s){\n\tif(s.size()==0)\n\t\treturn true;\n\treturn false;\n}\n\n//Function to pop an element from the stack.\nint pop(stack<int>& s){\n\tint a= s.top();\n\ts.pop();\n\treturn a;\n}\n\n//Function to get the minimum element from the stack.\nint getMin(stack<int>& s){\n\tint m=pop(s);\n\twhile(!isEmpty(s)){\n\t\tint n=pop(s);\n\t\tif(n<m)\n\t\t\tm=n;\n\t}\n\treturn m;\n}",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "class GfG{\n\tpublic void push(int a, Stack<Integer> s)\n    {\n        s.push(a); //pushes the element 'a' into the stack 's'\n    }\n\n\tpublic int pop(Stack<Integer> s){\n\t\tint a = s.pop(); //removes and returns the top element from stack 's'\n\t\treturn a; //returns the removed element\n\t}\n\n\tpublic int min(Stack<Integer> s){\n\t\tGfG g = new GfG(); //creates an instance of GfG class\n\t\tint m = g.pop(s); //removes and returns the top element from stack 's'\n\t\twhile(!g.isEmpty(s)){ //runs until stack 's' is not empty\n\t\t\tint n = g.pop(s); //removes and returns the top element from stack 's'\n\t\t\tif(n < m) //checks if the removed element is smaller than current minimum element\n\t\t\t\tm = n; //updates the minimum element\n\t\t}\n\t\treturn m; //returns the minimum element in the stack\n\t}\n\n\tpublic boolean isFull(Stack<Integer> s, int n){\n\t\tif(s.size() == n) //checks if the size of stack 's' is equal to 'n'\n\t\t\treturn true; //returns true if stack is full\n\t\treturn false; //returns false if stack is not full\n\t}\n\n\tpublic boolean isEmpty(Stack<Integer> s){\n\t\tif(s.size() == 0) //checks if the size of stack 's' is equal to 0\n\t\t\treturn true; //returns true if stack is empty\n\t\treturn false; //returns false if stack is not empty\n\t}\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "def push(arr, ele):\r\n    # Code here\r\n    arr.append(ele)\r\n\r\ndef pop(arr):\r\n    # Code here\r\n    return arr.pop(0)\r\n\r\ndef isFull(n, arr):\r\n    # Code here\r\n    return len(arr) == n\r\n\r\ndef isEmpty(arr):\r\n    #Code here\r\n    return arr==[]\r\n\r\ndef getMin(n, arr):\r\n    # Code here\r\n    return min(arr)\r\n",
        "lang_text": "python3"
      },
      {
        "lang": "C#",
        "full_func": "// User function Template for C#\n\nclass Solution {\n    // Function to push an integer into the stack.\n    public void push(Stack<int> s, int a) { s.Push(a); }\n\n    // Function to check if the stack is full.\n    public bool isFull(Stack<int> s, int n) {\n        if (s.Count == n) return true;\n        return false;\n    }\n\n    // Function to check if the stack is empty.\n    public bool isEmpty(Stack<int> s) {\n        if (s.Count == 0) return true;\n        return false;\n    }\n\n    // Function to remove an item from top of the stack.\n    public int pop(Stack<int> s) {\n        int a = s.Pop();\n        return a;\n    }\n\n    // Function to get the minimum element from the stack.\n    public int getMin(Stack<int> s) {\n        int m = pop(s);\n        while (!isEmpty(s)) {\n            int n = pop(s);\n            if (n < m) m = n;\n        }\n        return m;\n    }\n}",
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": null,
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
