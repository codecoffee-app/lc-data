{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705092,
            "title": "Sphenic Number",
            "titleSlug": "sphenic-number5922",
            "content": "<p><span style=\"font-size:18px\">A&nbsp;<a href=\"https://en.wikipedia.org/wiki/Sphenic_number\">Sphenic Number</a>&nbsp;is a positive integer <strong>N</strong>&nbsp;which is product of exactly three distinct primes. The first few sphenic numbers are 30, 42, 66, 70, 78, 102, 105, 110, 114, &hellip;<br />\nGiven a number <strong>N</strong>, your task is to find whether it is a Sphenic Number or not.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 30\n<strong>Output: </strong>1\n<strong>Explanation: </strong>30 = 2 * 3 * 5 so N is \nproduct of 3 distinct prime numbers.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 60\n<strong>Output: </strong>0\n<strong>Explanation: </strong>60 = 2 * 2 * 3 * 5 so N is\nproduct of 4 prime numbers.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anyhting. Your task is to complete the function&nbsp;<strong>isSphenicNo()</strong>&nbsp;which takes N as input parameter and returns 1 if N is Sphenic Number otherwise returns 0.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N* log(N))<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(N)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 1000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Optimize your solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n\tpublic:\n\t//Function to check if a number is a sphenic number or not.\n\tint isSphenicNo(int N){\n\t\tvector<bool>vis(N+2, false);  //vector to keep track of visited numbers\n\t\tvector<int>spf(N+2,2);  //vector to store smallest prime factor of each number\n\t\t\n\t\tfor(int i = 2; i <= N; i+=2)  //iterating over even numbers\n\t\t\tvis[i] = true,spf[i] = 2;  //marking the even numbers as visited and updating their smallest prime factor as 2\n\t\t\n\t\tvis[2] = false;  //marking 2 as not visited\n\t\t\n\t\tfor(int i  = 3; i <= N; i+=2){  //iterating over odd numbers\n\t\t\tif(!vis[i]){  //if current number is not visited\n\t\t\t\tspf[i] = i;  //updating smallest prime factor of current number as the number itself\n\t\t\t\t\n\t\t\t\t//loop to mark all the multiples of current number as visited and update their smallest prime factor as current number\n\t\t\t\tfor(int j = i; j*i <= N; j+=2){\n\t\t\t\t\tif(!vis[j*i]){\n\t\t\t\t\t\tvis[j*i] = true;\n\t\t\t\t\t\tspf[j*i] = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tset<int>st;  //set to store unique prime factors\n\t\tvector<int>v;  //vector to store prime factors in order\n\t\t\n\t\t//loop to find prime factors of the given number and store them in set and vector\n\t\twhile(N > 1){\n\t\t\tst.insert(spf[N]);  //inserting current smallest prime factor in set\n\t\t\tv.push_back(spf[N]);  //inserting current smallest prime factor in vector\n\t\t\tN/=spf[N];  //dividing the number by current smallest prime factor\n\t\t}\n\t\t\n\t\t//checking if the number has exactly 3 unique prime factors and the count of prime factors is also 3\n\t\treturn (int)st.size() == 3 and (int)v.size() == (int)st.size();\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int isSphenicNo(int N)\n    {\n        bool[] vis = new bool[N+2];  //array to keep track of visited numbers\n        int[] spf = new int[N+2];  //array to store smallest prime factor of each number\n        \n        for(int i = 2; i <= N; i+=2)  //iterating over even numbers\n        {\n            vis[i] = true;\n            spf[i] = 2;\n        }\n        \n        vis[2] = false;\n        \n        for(int i  = 3; i <= N; i+=2)  //iterating over odd numbers\n        {\n            if(!vis[i])\n            {\n                spf[i] = i;\n                \n                //loop to mark all the multiples of current number as visited and update their smallest prime factor as current number\n                for(int j = i; j*i <= N; j+=2)\n                {\n                    if(!vis[j*i])\n                    {\n                        vis[j*i] = true;\n                        spf[j*i] = i;\n                    }\n                }\n            }\n        }\n        \n        HashSet<int> st = new HashSet<int>();  //set to store unique prime factors\n        List<int> v = new List<int>();  //list to store prime factors in order\n        \n        //loop to find prime factors of the given number and store them in set and list\n        while(N > 1)\n        {\n            st.Add(spf[N]);  //inserting current smallest prime factor in set\n            v.Add(spf[N]);  //inserting current smallest prime factor in list\n            N/=spf[N];  //dividing the number by current smallest prime factor\n        }\n        \n        //checking if the number has exactly 3 unique prime factors and the count of prime factors is also 3\n        return st.Count == 3 && v.Count == st.Count ? 1 : 0;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}