{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706081,
            "title": "Spidey Sense",
            "titleSlug": "spidey-sense5556",
            "content": "<p><span style=\"font-size:18px\">Spiderman is stuck in a difficult situation. His arch-enemy the Green Goblin has planted several of his infamous Pumpkin Bombs in various locations in a building. Help Spiderman activate his Spidey Sense and identify the impact zones.&nbsp;<br />\r\nHe has a blueprint of the building which is a M x N matrix that is filled with the characters O, B, and W where:&nbsp;<br />\r\nO represents an open space.<br />\r\nB represents a bomb.<br />\r\nW represents a wall.<br />\r\nYou have to replace all of the Os (open spaces) in the matrix with their shortest distance from a bomb without being able to go through any walls. Also, replace the bombs with 0 and walls with -1 in the resultant matrix. If no path exists between a bomb and an open space replace the corresponding &#39;O&#39; with -1.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 3, M = 3\r\nA[] = {</span><span style=\"font-size:18px\">{O, O, O}, \r\n\\t {W, B, B},&nbsp;\r\n\\t {W, O, O</span><span style=\"font-size:18px\">}}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> {</span><span style=\"font-size:18px\">{2, 1, 1}, \r\n\\t   {-1, 0, 0},&nbsp; \r\n\\t   {-1, 1, 1</span><span style=\"font-size:18px\">}}</span>\r\n<span style=\"font-size:18px\"><strong>Explanation: </strong></span><span style=\"font-size:18px\">The walls at (1,0) and (2,0) \r\nare replaced by -1.</span><span style=\"font-size:18px\"> The bombs at (1,1) and \r\n(1,2) are replaced by 0.</span><span style=\"font-size:18px\"><strong> The impact zone \r\nfor the bomb at (1,1)</strong> includes open spaces \r\nat index (0,0), (0,1) and (2,1) with distance \r\nfrom bomb calculated as 2,1,1 respectively.</span>\r\n<span style=\"font-size:18px\"><strong>The impact zone for the bomb at (1,2)</strong> \r\nincludes open spaces at index (0,3) and (2,2) \r\nwith distance from bomb calculated as 1,1 \r\nrespectively.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>IInput: </strong>N = 2, M = 2\r\nA[] = {</span><span style=\"font-size:18px\">{O, O},\r\n\\t {O, O}</span><span style=\"font-size:18px\">}</span> \r\n<span style=\"font-size:18px\"><strong>Output:</strong> {{-1, -1}\r\n\\t   {-1, -1}\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task: </strong>&nbsp;<br />\r\nYou don&#39;t need to read input or print anything. Complete the function <strong>findDistance()</strong> which takes the matrix A[], M, and N as input parameters and the resultant matrix</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(M*N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(M*N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N*M &le; 10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Think in terms of BFS algorithm. Take help of a queue.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n    \n    //Structure to represent a node in the queue\n    struct QueueNode \n    { \n        int i, j, distance; //i and j represent the coordinates, distance represents the distance from the starting node\n    };\n\n    private:\n    \n    //Function to check if coordinates are valid\n    bool isValid(int i, int j, int M, int N) \n    { \n        if ((i < 0 || i > M - 1) || (j < 0 || j > N - 1)) \n            return false; \n\n        return true; \n    } \n\n    //Function to check if given coordinates are safe to visit\n    bool isSafe(int i, int j, vector<vector<char> >& matrix, vector<vector<int> >& result) \n    { \n        if (matrix[i][j] != 'O' || result[i][j] != -1) \n            return false; \n\n        return true; \n    } \n\n    public:\n    \n    //Function to find the distance of each node from 'B'\n    vector<vector<int> > findDistance(vector<vector<char> >& matrix, int M, int N) \n    { \n        vector<vector<int> > result(M); //2D vector to store the distances\n        queue<QueueNode> q; //Queue to perform BFS traversal\n\n        for (int i = 0; i < M; i++) \n        { \n            result[i].resize(N, -1); //Initializing result vector with -1\n            for (int j = 0; j < N; j++) \n            { \n                if (matrix[i][j] == 'B') //If the node is 'B', initializing distance as 0 and pushing it to the queue\n                { \n                    QueueNode node = {i, j, 0}; \n                    q.push(node); \n                    result[i][j] = 0; \n                } \n            } \n        } \n\n        while (!q.empty()) \n        { \n            QueueNode curr = q.front(); //Current node in the queue\n            int x = curr.i, y = curr.j, dist = curr.distance; //Getting coordinates and distance\n\n            int row[] = { -1, 0, 1, 0}; //Array to represent possible row movements\n            int col[] = { 0, 1, 0, -1 }; //Array to represent possible column movements\n\n            for (int i = 0; i < 4; i++) //Iterating through possible movements\n            { \n                if (isValid(x + row[i], y + col[i], M, N) //Checking if the new coordinates are valid\n                    &&\n                    isSafe(x + row[i], y + col[i], matrix, result) //Checking if the new coordinates are safe to visit\n                    ) \n                { \n                    result[x + row[i]][y + col[i]] = dist + 1; //Updating the distance in the result vector\n\n                    QueueNode node = {x + row[i], y + col[i], dist + 1}; //Creating a new node and pushing it to the queue\n                    q.push(node); \n                } \n            } \n\n            q.pop(); //Removing the current node from the queue\n        } \n        return result; //Returning the result vector with distances\n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int[][] findDistance(char mat[][], int m,int n) {\n        // create an output array with dimensions m x n\n        int ans[][] = new int[m][n];\n        // create a queue to store the indices of cells containing 'B' (starting points)\n        Queue <Pair> q = new LinkedList<Pair>();\n        // iterate through the matrix\n        for(int i=0;i<m;i++) {\n            for(int j=0;j<n;j++) {\n                // if cell contains 'B', set the distance to 0 and add it to the queue\n                if(mat[i][j] == 'B') {\n                    ans[i][j] = 0;\n                    q.add(new Pair(i,j));\n                }\n                else \n                    // if cell does not contain 'B', set the distance to -1\n                    ans[i][j] = -1;\n            }\n        }\n        \n        // perform a BFS on the matrix starting from each 'B' cell\n        while(q.size() > 0) {\n            int size = q.size();\n            // process each cell in the queue\n            while(size-- > 0) {\n                Pair p = q.peek();\n                int i = p.x;\n                int j = p.y;\n                q.remove();\n                \n                // check if adjacent cell to the right is a valid 'O' cell and distance is not set yet\n                if(i + 1 < m && mat[i+1][j] == 'O' && ans[i+1][j] == -1) {\n                    // calculate the distance and set it in the output matrix\n                    ans[i+1][j] = 1+ ans[i][j];\n                    // add the adjacent cell to the queue for further processing\n                    q.add(new Pair(i+1,j));\n                }\n                \n                // repeat the above process for adjacent cells in all four directions (up, down, left)\n                \n                // check if adjacent cell to the left is a valid 'O' cell and distance is not set yet\n                if(i - 1 >= 0 && ans[i-1][j] == -1 && mat[i-1][j] == 'O') {\n                    ans[i-1][j] = 1 + ans[i][j];\n                    q.add(new Pair(i-1,j));\n                }\n                \n                // check if adjacent cell below is a valid 'O' cell and distance is not set yet\n                if(j + 1 < n && ans[i][j + 1] == -1 && mat[i][j + 1] == 'O') {\n                    ans[i][j + 1] = 1+ ans[i][j];\n                    q.add(new Pair(i,j + 1));\n                }\n                \n                // check if adjacent cell above is a valid 'O' cell and distance is not set yet\n                if(j - 1 >= 0 && mat[i][j - 1] == 'O' && ans[i][j-1] == -1) {\n                    ans[i][j - 1] = 1+ ans[i][j];\n                    q.add(new Pair(i,j - 1));\n                }\n            }\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import deque\n\n# Define the directions for movement\ndr = [-1, 0, 0, 1]\ndc = [ 0,-1, 1, 0]\n\nclass Solution:\n    \n    # Function to find the distance of each cell from the nearest 'B'\n    def findDistance(self, matrix, m, n):\n        \n        # Initialize a 2D array to hold the distances\n        ret = [ [-1 for _ in range(n)] for _ in range(m) ]\n        \n        # Create a deque to store the cells that need to be visited\n        q = deque()\n    \n        # Find all the cells with 'B' and set distance to 0, and add them to the deque\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 'B':\n                    ret[i][j] = 0\n                    q.append((i,j))\n    \n        # Process each cell in the deque\n        while len(q):\n            r=q[0][0]\n            c=q[0][1]\n            q.popleft()\n    \n            # Check the neighboring cells and update the distances accordingly\n            for i in range(4):\n                nextr=r+dr[i]\n                nextc=c+dc[i]\n                \n                # Only consider cells within the bounds of the matrix\n                if nextr>=0 and nextr<m and nextc>=0 and nextc<n:\n                    \n                    # Check if the distance for the neighboring cell is not set (-1) and the cell is not blocked ('O')\n                    if ret[nextr][nextc]==-1 and matrix[nextr][nextc]=='O':\n                        \n                        # Set the distance to the current cell + 1 and add it to the deque for further processing\n                        ret[nextr][nextc] = ret[r][c]+1\n                        q.append((nextr,nextc))\n                        \n        # Return the 2D array of distances\n        return ret",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    //Structure to represent a node in the queue\n    struct QueueNode\n    {\n        public int i;\n        public int j;\n        public int distance;\n    }\n\n    //Function to check if coordinates are valid\n    static bool isValid(int i, int j, int M, int N)\n    {\n        if ((i < 0 || i > M - 1) || (j < 0 || j > N - 1))\n            return false;\n\n        return true;\n    }\n\n    //Function to check if given coordinates are safe to visit\n    static bool isSafe(int i, int j, List<List<char>> matrix, List<List<int>> result)\n    {\n        if (matrix[i][j] != 'O' || result[i][j] != -1)\n            return false;\n\n        return true;\n    }\n\n    //Complete this function\n    public List<List<int>> findDistance(List<List<char>> matrix, int M, int N)\n    {\n        List<List<int>> result = new List<List<int>>(); //2D list to store the distances\n        Queue<QueueNode> q = new Queue<QueueNode>(); //Queue to perform BFS traversal\n\n        for (int i = 0; i < M; i++)\n        {\n            result.Add(new List<int>());\n            for (int j = 0; j < N; j++)\n            {\n                result[i].Add(-1); //Initializing result list with -1\n                if (matrix[i][j] == 'B') //If the node is 'B', initializing distance as 0 and pushing it to the queue\n                {\n                    QueueNode node = new QueueNode();\n                    node.i = i;\n                    node.j = j;\n                    node.distance = 0;\n                    q.Enqueue(node);\n                    result[i][j] = 0;\n                }\n            }\n        }\n\n        while (q.Count > 0)\n        {\n            QueueNode curr = q.Peek(); //Current node in the queue\n            int x = curr.i, y = curr.j, dist = curr.distance; //Getting coordinates and distance\n\n            int[] row = { -1, 0, 1, 0 }; //Array to represent possible row movements\n            int[] col = { 0, 1, 0, -1 }; //Array to represent possible column movements\n\n            for (int i = 0; i < 4; i++) //Iterating through possible movements\n            {\n                if (isValid(x + row[i], y + col[i], M, N) //Checking if the new coordinates are valid\n                    &&\n                    isSafe(x + row[i], y + col[i], matrix, result)) //Checking if the new coordinates are safe to visit\n                {\n                    result[x + row[i]][y + col[i]] = dist + 1; //Updating the distance in the result list\n\n                    QueueNode node = new QueueNode();\n                    node.i = x + row[i];\n                    node.j = y + col[i];\n                    node.distance = dist + 1; //Creating a new node and pushing it to the queue\n                    q.Enqueue(node);\n                }\n            }\n\n            q.Dequeue(); //Removing the current node from the queue\n        }\n\n        return result; //Returning the result list with distances\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}