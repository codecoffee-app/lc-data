{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706061,
            "title": "Spiral Matrix",
            "titleSlug": "spiral-matrix--141631",
            "content": "<p><span style=\"font-size:18px\">Given a matrix of size<strong> N x M</strong>. You have&nbsp;to find the <strong>K<sup>th</sup></strong> element which will&nbsp;obtain&nbsp;while traversing the matrix <strong>spirally</strong> starting from the top-left corner of the matrix.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: \n</strong>N = 3, M = 3, K = 4\nA[] = {</span><span style=\"font-size:18px\">{1, 2, 3}, \n\\t {4, 5, 6},&nbsp;\n\\t {7, 8, 9</span><span style=\"font-size:18px\">}}</span>\n<span style=\"font-size:18px\"><strong>Output:</strong> \n6</span>\n<span style=\"font-size:18px\"><strong>Explanation: </strong>Spiral traversal of matrix: \n{1, 2, 3, 6, 9, 8, 7, 4, 5}. Fourth element\nis 6.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: \n</strong>N = 2, M = 2, K = 2 \nA[] = {</span><span style=\"font-size:18px\">{1, 2},\n\\t {3, 4}</span><span style=\"font-size:18px\">}</span> \n<span style=\"font-size:18px\"><strong>Output:</strong> \n2\n<strong>Explanation: </strong>Spiral traversal of matrix: \n{1, 2, 4, 3}. Second element is 2.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: </strong>&nbsp;<br />\nYou don&#39;t need to read input or print anything. Complete the function <strong>findK()</strong> which takes the matrix <strong>A[ ][ ]</strong>, number of rows <strong>N</strong>, number of columns <strong>M</strong>, and integer <strong>K</strong> as input parameters and returns the<strong> K<sup>th</sup> </strong>element in the spiral traversal of the matrix.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*M)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; K&nbsp;&le; N*M &le; 10<sup>6</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of size N x M, find the Kth element obtained while traversing the matrix spirally, starting from the top-left corner.",
                "constraints": [
                    "1 <= K <= N*M <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 3, M = 3, K = 4\nA = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}",
                        "output": "6",
                        "explanation": "The spiral traversal of the matrix is {1, 2, 3, 6, 9, 8, 7, 4, 5}. The 4th element is 6."
                    },
                    {
                        "input": "N = 2, M = 2, K = 2\nA = {{1, 2}, {3, 4}}",
                        "output": "2",
                        "explanation": "The spiral traversal of the matrix is {1, 2, 4, 3}. The 2nd element is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Simply traverse it spirally.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "constructive algo",
                "slug": "constructive-algo"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n\n\tpublic:\n\tint findK(vector<vector<int>> &a, int n, int m, int k)\n    {\n        int top = 0;\n        int left = 0;\n        int right = m-1;\n        int bottom = n-1;\n        int dir =0;\n        int count=0;\n       \n        while(top<=bottom and left<=right)\n        {\n            if(dir==0)\n            {\n                for(int i=left ;i<=right;i++)\n                {\n                    k--;\n                    if(!k)\n                    return (a[top][i]);\n                }\n                top++;\n                dir=1;\n                \n            }\n            if(dir==1)\n            {\n                for(int i=top;i<=bottom;i++)\n                {\n                    k--;\n                    if(!k)\n                    return (a[i][right]);\n                }\n                right--;\n                dir=2;\n                \n               \n            }\n            if(dir==2)\n            {\n                for(int i=right;i>=left;i--)\n                {\n                    k--;\n                    if(!k)\n                    return (a[bottom][i]);\n                }\n                bottom--;\n                dir=3;\n            }\n            if(dir==3)\n            {\n                for(int i=bottom;i>=top;i--)\n                {\n                    k--;\n                    if(!k)\n                    return (a[i][left]);\n                }\n                left++;\n                dir=0;\n            }\n            \n        }\n        \n    }\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findK(int a[][], int n, int m, int k) {\n        // Initialize boundaries and direction\n        int top = 0;\n        int left = 0;\n        int right = m-1;\n        int bottom = n-1;\n        int dir = 0;\n        int count = 0;\n     \n        // Traverse the matrix in a spiral pattern\n        while(top <= bottom && left <= right) {\n            if(dir == 0) {\n                // Traverse top row\n                for(int i = left; i <= right; i++) {\n                    k--;\n                    if(k == 0)\n                        return (a[top][i]);\n                }\n                top++;\n                dir = 1;\n            }\n            if(dir == 1) {\n                // Traverse right column\n                for(int i = top; i <= bottom; i++) {\n                    k--;\n                    if(k == 0)\n                        return (a[i][right]);\n                }\n                right--;\n                dir = 2;   \n            }\n            if(dir == 2) {\n                // Traverse bottom row\n                for(int i = right; i >= left; i--) {\n                    k--;\n                    if(k == 0)\n                        return (a[bottom][i]);\n                }\n                bottom--;\n                dir = 3;\n            }\n            if(dir == 3) {\n                // Traverse left column\n                for(int i = bottom; i >= top; i--) {\n                    k--;\n                    if(k == 0)\n                        return (a[i][left]);\n                }\n                left++;\n                dir = 0;\n            }  \n        }\n        // If k doesn't reach 0, return -1\n        return -1;   \n    }  \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def findK(self, a, n, m, k):\n        #initializing the boundaries\n        top = 0\n        left = 0\n        right = m - 1\n        bottom = n - 1\n        #0->right, 1->down, 2->left, 3->up\n        dir = 0 \n        count = 0\n        while(top <= bottom and left <= right):\n            #traversing the top row from left to right\n            if(dir == 0):\n                for i in range(left, right+1):\n                    k -= 1\n                    if k == 0:\n                        return (a[top][i])\n                top += 1\n                dir = 1\n            #traversing the right column from top to bottom\n            if(dir == 1):\n                for i in range(top, bottom+1):\n                    k -= 1\n                    if k == 0:\n                        return (a[i][right])\n                right -= 1\n                dir = 2\n            #traversing the bottom row from right to left\n            if(dir == 2):\n                for i in range(right, left - 1, -1):\n                    k -= 1\n                    if k == 0:\n                        return (a[bottom][i])\n                bottom -= 1\n                dir = 3\n            #traversing the left column from bottom to top\n            if(dir == 3):\n                for i in range(bottom, top - 1, -1):\n                    k -= 1\n                    if k == 0:\n                        return (a[i][left])\n                left += 1\n                dir = 0",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findK(a, n, m, k) {\n        let top = 0; // Initialize the top row index.\n        let left = 0; // Initialize the left column index.\n        let right = m - 1; // Initialize the right column index.\n        let bottom = n - 1; // Initialize the bottom row index.\n        let dir = 0; // Initialize the direction variable.\n        let count = 0; // Initialize a counter variable.\n\n        // Iterate until the top row index is less than or equal to the bottom row index,\n        // and the left column index is less than or equal to the right column index.\n        while (top <= bottom && left <= right) {\n            if (dir == 0) {\n                // Traverse the top row from left to right.\n                for (let i = left; i <= right; i++) {\n                    k--; // Decrement the value of 'k' for each element.\n                    if (k == 0) {\n                        return a[top][i]; // Return the element if 'k' becomes zero.\n                    }\n                }\n                top++; // Increment the top row index.\n                dir = 1; // Change the direction to traverse the right column.\n            }\n            if (dir == 1) {\n                // Traverse the right column from top to bottom.\n                for (let i = top; i <= bottom; i++) {\n                    k--; // Decrement the value of 'k' for each element.\n                    if (k == 0) {\n                        return a[i][right]; // Return the element if 'k' becomes zero.\n                    }\n                }\n                right--; // Decrement the right column index.\n                dir = 2; // Change the direction to traverse the bottom row.\n            }\n            if (dir == 2) {\n                // Traverse the bottom row from right to left.\n                for (let i = right; i >= left; i--) {\n                    k--; // Decrement the value of 'k' for each element.\n                    if (k == 0) {\n                        return a[bottom][i]; // Return the element if 'k' becomes zero.\n                    }\n                }\n                bottom--; // Decrement the bottom row index.\n                dir = 3; // Change the direction to traverse the left column.\n            }\n            if (dir == 3) {\n                // Traverse the left column from bottom to top.\n                for (let i = bottom; i >= top; i--) {\n                    k--; // Decrement the value of 'k' for each element.\n                    if (k == 0) {\n                        return a[i][left]; // Return the element if 'k' becomes zero.\n                    }\n                }\n                left++; // Increment the left column index.\n                dir = 0; // Change the direction to traverse the top row.\n            }\n        }\n\n        return -1; // Return -1 if 'k' is not found.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}