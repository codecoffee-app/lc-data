{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 701264,
      "title": "Spirally traversing a matrix",
      "titleSlug": "spirally-traversing-a-matrix-1587115621",
      "content": "<p><span >You are given a rectangular matrix <strong>mat[][]</strong> of size <strong>n x m</strong>, and your task is to return an array while <strong>traversing</strong>&nbsp;the matrix in <strong>spiral</strong> form.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: mat[][] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n<strong>Output</strong>: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]\n<strong>Explanation</strong>: <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/701264/Web/Other/blobid1_1734498654.png\" width=\"456\" height=\"228\" /><br /></span></pre>\n<pre><span ><strong>Input</strong>: mat[][] = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]\n<strong>Output</strong>: [1, 2, 3, 4, 5, 6, 12, 18, 17, 16, 15, 14, 13, 7, 8, 9, 10, 11]\n<strong>Explanation</strong>: Applying same technique as shown above.</span></pre>\n<pre><span ><strong>Input</strong>: mat[][] = [[32, 44, 27, 23], [54, 28, 50, 62]]\n<strong>Output</strong>: [32, 44, 27, 23, 62, 50, 28, 54]\n<strong>Explanation</strong>: Applying same technique as shown above, output will be [32, 44, 27, 23, 62, 50, 28, 54].</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= n, m &lt;= 1000<br />0 &lt;= mat[i][j]&lt;= 100</span></p>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given a rectangular matrix `mat[][]` of size `n x m`, traverse the matrix in a spiral pattern and return an array containing the elements in the order they were visited.",
        "constraints": ["1 <= n, m <= 1000", "0 <= mat[i][j] <= 100"],
        "testcases": [
          {
            "input": "mat[][] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]",
            "output": "[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]",
            "explanation": "The elements are traversed in a spiral manner, starting from the top-left corner and moving clockwise."
          },
          {
            "input": "mat[][] = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]",
            "output": "[1, 2, 3, 4, 5, 6, 12, 18, 17, 16, 15, 14, 13, 7, 8, 9, 10, 11]",
            "explanation": "The elements are traversed in a spiral manner, starting from the top-left corner and moving clockwise."
          },
          {
            "input": "mat[][] = [[32, 44, 27, 23], [54, 28, 50, 62]]",
            "output": "[32, 44, 27, 23, 62, 50, 28, 54]",
            "explanation": "The elements are traversed in a spiral manner, starting from the top-left corner and moving clockwise."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p>Start at the outer boundaries of the matrix and move inward layer by layer: traverse the first row, last column, last row, and first column.</p>"
    ],
    "relatedTopics": [
      {
        "name": "Arrays",
        "slug": "arrays"
      },
      {
        "name": "Matrix",
        "slug": "matrix"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": [
      "paytm",
      "flipkart",
      "morgan-stanley",
      "microsoft",
      "oyo-rooms",
      "snapdeal",
      "de-shaw",
      "makemytrip",
      "oracle",
      "maq-software",
      "adobe",
      "nearbuy",
      "nagarro",
      "browserstack",
      "salesforce",
      "zoho"
    ],
    "solutions": [
      {
        "lang": "C",
        "full_func": "//Back-end complete function Template for C\n//      Function to spirally traverse the matrix\nvoid spirallyTraverse(int** mat, int r, int c) {\n    int row = 0, col = 0;\n\n    // Loop while we still have rows and columns to traverse\n    while (row < r && col < c) {\n        // Print the first row from the remaining rows\n        for (int i = col; i < c; i++) {\n            printf(\"%d \", mat[row][i]);\n        }\n        row++;\n\n        // Print the last column from the remaining columns\n        for (int i = row; i < r; i++) {\n            printf(\"%d \", mat[i][c - 1]);\n        }\n        c--;\n\n        // Print the last row from the remaining rows, if applicable\n        if (row < r) {\n            for (int i = c - 1; i >= col; i--) {\n                printf(\"%d \", mat[r - 1][i]);\n            }\n            r--;\n        }\n\n        // Print the first column from the remaining columns, if applicable\n        if (col < c) {\n            for (int i = r - 1; i >= row; i--) {\n                printf(\"%d \", mat[i][col]);\n            }\n            col++;\n        }\n    }\n    printf(\"\\n\");\n}",
        "lang_text": "c"
      },
      {
        "lang": "C++",
        "full_func": "class Solution {\n  public:\n    // Function to return a list of integers denoting spiral traversal of matrix.\n    vector<int> spirallyTraverse(vector<vector<int> > &mat) {\n        int r = mat.size();\n        int c = mat[0].size();\n        int row = 0;\n        int col = 0;\n        vector<int> output;\n\n        while (row < r && col < c) {\n            // storing the elements of 1st row from the remaining rows, in a list.\n            for (int i = col; i < c; i++)\n                output.push_back(mat[row][i]);\n            row++;\n\n            // storing elements of last column from remaining columns, in list.\n            for (int i = row; i < r; i++)\n                output.push_back(mat[i][c - 1]);\n            c--;\n\n            // storing the elements of last row from remaining rows, in a list.\n            if (row < r) {\n                for (int i = c - 1; i >= col; --i)\n                    output.push_back(mat[r - 1][i]);\n                r--;\n            }\n            // storing elements of 1st column from the remaining columns, in list.\n            if (col < c) {\n                for (int i = r - 1; i >= row; --i)\n                    output.push_back(mat[i][col]);\n                col++;\n            }\n        }\n        // returning the list.\n        return output;\n    }\n};\n",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "class Solution {\n    // Function to return a list of integers denoting spiral traversal of matrix.\n    public ArrayList<Integer> spirallyTraverse(int mat[][]) {\n        int r = mat.length;\n        int c = mat[0].length;\n        ArrayList<Integer> output = new ArrayList<Integer>();\n        int row = 0;\n        int col = 0;\n\n        while (row < r && col < c) {\n            // storing the elements of 1st row from the remaining rows, in a list.\n            for (int i = col; i < c; i++) output.add(mat[row][i]);\n            row++;\n\n            // storing elements of last column from remaining columns, in list.\n            for (int i = row; i < r; i++) output.add(mat[i][c - 1]);\n            c--;\n\n            // storing the elements of last row from remaining rows, in a list.\n            if (row < r) {\n                for (int i = c - 1; i >= col; --i) output.add(mat[r - 1][i]);\n                r--;\n            }\n\n            // storing elements of 1st column from the remaining columns, in list.\n            if (col < c) {\n                for (int i = r - 1; i >= row; --i) output.add(mat[i][col]);\n                col++;\n            }\n        }\n        // returning the list.\n        return output;\n    }\n}\n",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "class Solution:\n    # Function to return a list of integers denoting spiral traversal of matrix.\n    def spirallyTraverse(self, mat):\n        r = len(mat)\n        c = len(mat[0])\n        output = []\n\n        row = 0\n        col = 0\n\n        while row < r and col < c:\n            # storing the elements of 1st row from the remaining rows, in a list.\n            for i in range(col, c):\n                output.append(mat[row][i])\n            row += 1\n\n            # storing elements of last column from remaining columns, in list.\n            for i in range(row, r):\n                output.append(mat[i][c - 1])\n            c -= 1\n\n            # storing the elements of last row from remaining rows, in a list.\n            if row < r:\n                for i in range(c - 1, col - 1, -1):\n                    output.append(mat[r - 1][i])\n                r -= 1\n\n            # storing elements of 1st column from the remaining columns, in list.\n            if col < c:\n                for i in range(r - 1, row - 1, -1):\n                    output.append(mat[i][col])\n                col += 1\n\n        # returning the list.\n        return output\n",
        "lang_text": "python3"
      },
      {
        "lang": "C#",
        "full_func": "class Solution {\n    public List<int> SpirallyTraverse(int[,] mat) {\n        int r = mat.GetLength(0); // Number of rows\n        int c = mat.GetLength(1); // Number of columns\n        int row = 0, col = 0;\n        List<int> output = new List<int>();\n\n        while (row < r && col < c) {\n            // Traverse the top row\n            for (int i = col; i < c; i++) output.Add(mat[row, i]);\n            row++;\n\n            // Traverse the right column\n            for (int i = row; i < r; i++) output.Add(mat[i, c - 1]);\n            c--;\n\n            // Traverse the bottom row (if any rows remain)\n            if (row < r) {\n                for (int i = c - 1; i >= col; i--) output.Add(mat[r - 1, i]);\n                r--;\n            }\n\n            // Traverse the left column (if any columns remain)\n            if (col < c) {\n                for (int i = r - 1; i >= row; i--) output.Add(mat[i, col]);\n                col++;\n            }\n        }\n        return output;\n    }\n}",
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": "class Solution {\n    spirallyTraverse(mat) {\n        let r = mat.length;\n        let c = mat[0].length;\n        let output = [];\n\n        let row = 0;\n        let col = 0;\n\n        while (row < r && col < c) {\n            for (let i = col; i < c; i++) {\n                output.push(mat[row][i]);\n            }\n            row++;\n\n            for (let i = row; i < r; i++) {\n                output.push(mat[i][c - 1]);\n            }\n            c--;\n\n            if (row < r) {\n                for (let i = c - 1; i >= col; i--) {\n                    output.push(mat[r - 1][i]);\n                }\n                r--;\n            }\n\n            if (col < c) {\n                for (let i = r - 1; i >= row; i--) {\n                    output.push(mat[i][col]);\n                }\n                col++;\n            }\n        }\n\n        return output;\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
