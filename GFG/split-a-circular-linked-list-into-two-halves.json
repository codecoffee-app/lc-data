{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700130,
            "title": "Split a Linked List into two halves",
            "titleSlug": "split-a-circular-linked-list-into-two-halves",
            "content": "<p><span style=\"font-size: 18px;\">Given a Circular linked list. The task is </span><span style=\"font-size: 18px;\">split into two Circular Linked lists. If there are an odd number of nodes in the given circular linked list then out of the resulting two halved lists, the first list should have one node more than the second list.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">LinkedList : 10-&gt;4-&gt;9\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">10-&gt;4</span><span style=\"font-size: 18px;\"> , 9<br /></span><strong style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700130/Web/Other/blobid1_1742208936.jpg\" height=\"100\" /><br />Explanation: </strong><span style=\"font-size: 18px;\">After dividing linked list into 2 parts , the first part contains 10, 4 and second part contain only 9.</span></span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">LinkedList : 10-&gt;4-&gt;9-&gt;10\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">10-&gt;4 , 9-&gt;10<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700130/Web/Other/blobid2_1742208950.jpg\" height=\"100\" /><br /><strong style=\"font-size: 18px;\">Explanation: </strong><span style=\"font-size: 18px;\">After dividing linked list into 2 parts , the first part contains 10, 4 and second part contain 9, 10.</span></span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong>: O(n)<br /><strong>Expected Auxilliary Space</strong>: O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= node-&gt;data &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use a slow and fast pointer approach to find the midpoint of the circular linked list. Adjust pointers carefully to split the list into two halves efficiently.</p>"
        ],
        "relatedTopics": [
            {
                "name": "circular-linked-list",
                "slug": "circular-linked-list"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "yahoo"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "/* The structure of linked list is the following\nstruct Node\n{\n  int data;\n  struct Node *next;\n\n  Node(int x){\n      data = x;\n      next = NULL;\n  }\n};\n*/\n\n//  function which splits the circular linked list.  head is pointer\n// to head Node of given lined list.  head1_ref1 and *head_ref2\n// are pointers to head pointers of resultant two halves.\n\nclass Solution {\n  public:\n    pair<Node *, Node *> splitList(struct Node *head) {\n        if (head == NULL)\n            return {NULL, NULL};\n        Node *fast = head, *slow = head;\n        while (fast->next != head && fast->next->next != head) {\n            fast = fast->next->next;\n            slow = slow->next;\n        }\n        if (fast->next->next == head)\n            fast = fast->next;\n        Node *head1 = head;\n        Node *head2 = slow->next;\n        fast->next = slow->next;\n        slow->next = head;\n        return {head1, head2};\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public Pair<Node, Node> splitList(Node head) {\n        if (head == null) return new Pair<>(null, null);\n        Node fast = head, slow = head;\n        while (fast.next != head && fast.next.next != head) {\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        if (fast.next.next == head) fast = fast.next;\n        Node head1 = head;\n        Node head2 = slow.next;\n        fast.next = slow.next;\n        slow.next = head;\n        return new Pair<>(head1, head2);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n'''\nclass Node:\n    def __init__(self):\n        self.data = None\n        self.next = None\n'''\n\n\nclass Solution:\n\n    def splitList(self, head):\n        if head is None:\n            return None, None\n        fast, slow = head, head\n        while fast.next != head and fast.next.next != head:\n            fast = fast.next.next\n            slow = slow.next\n        if fast.next.next == head:\n            fast = fast.next\n        head1 = head\n        head2 = slow.next\n        fast.next = slow.next\n        slow.next = head\n        return head1, head2\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    splitList(head) {\n        if (!head) return [ null, null ];\n        let fast = head;\n        let slow = head;\n        while (fast.next !== head && fast.next.next !== head) {\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        if (fast.next.next === head) fast = fast.next;\n        let head1 = head;\n        let head2 = slow.next;\n        fast.next = slow.next;\n        slow.next = head;\n        return [ head1, head2 ];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}