{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 869905,
            "title": "Split an array into two equal Sum subarrays",
            "titleSlug": "split-an-array-into-two-equal-sum-subarrays",
            "content": "<p><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 14pt; letter-spacing: 0.162px; background-color: #ffffff;\">Given an array of integers <strong>arr</strong>, return <strong>true </strong>if it is possible to split it in two subarrays (without reordering the elements), such that the sum of the two subarrays are equal. If it is not possible then return <strong>false</strong>.<br /></span></p>\n<p><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 14pt; letter-spacing: 0.162px; background-color: #ffffff;\"><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr = [1, 2, 3, 4, 5, 5]</span><br /><span ><strong>Output:</strong> true</span><br /><span ><strong>Explanation:</strong> In the above example, we can divide the array into two subarrays with equal sum. The two subarrays are:<strong> </strong>[1, 2, 3, 4]<strong> </strong>and<strong> </strong>[5, 5]. The sum of both the subarrays are 10. Hence, the answer is<strong> </strong>true.</span></pre>\n<pre><span ><strong>Input:&nbsp;</strong>arr = [4, 3, 2, 1]</span><br /><span ><strong>Output:</strong> false</span><br /><span ><strong>Explanation:</strong> In the above example, we cannot divide the array into two subarrays with equal sum. Hence, the answer is false.</span></pre>\n<p><span ><strong>Expected Time Complexity: </strong>O(n)</span><br /><span ><strong>Expected Space Complexity: </strong>O(1)</span></p>\n<p><span ><strong>Constraints:<br /></strong>1&lt;=arr.size()&lt;=10<sup>5&nbsp;</sup></span><br /><span >1&lt;=arr[i]&lt;=10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr`, determine if it's possible to split it into two contiguous subarrays such that the sum of elements in each subarray is equal. Return `true` if such a split exists, and `false` otherwise.  You cannot reorder the elements.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5, 5]",
                        "output": "true",
                        "explanation": "The array can be split into [1, 2, 3, 4] and [5, 5]. Both subarrays sum to 10."
                    },
                    {
                        "input": "[4, 3, 2, 1]",
                        "output": "false",
                        "explanation": "It is not possible to split the array into two contiguous subarrays with equal sums."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;Traverse array from right and keep track of right sum, left sum can be computed by subtracting current element from whole sum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool canSplit(vector<int>& arr) {\n        int leftSum = 0;\n        int n = arr.size();\n        for (int i = 0; i < n; i++)\n            leftSum += arr[i];\n\n        int rightSum = 0;\n\n        for (int i = n - 1; i >= 0; i--) {\n            rightSum += arr[i];\n            leftSum -= arr[i];\n            if (rightSum == leftSum)\n                return true;\n        }\n        return false;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean canSplit(int arr[]) {\n        int leftSum = 0;\n        int n = arr.length;\n        for (int i = 0; i < n; i++) leftSum += arr[i];\n\n        // again traverse array and compute right\n        // sum and also check left_sum equal to\n        // right sum or not\n        int rightSum = 0;\n\n        for (int i = n - 1; i >= 0; i--) {\n            // add current element to right_sum\n            rightSum += arr[i];\n\n            // exclude current element to the left_sum\n            leftSum -= arr[i];\n\n            if (rightSum == leftSum) return true;\n        }\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def canSplit(self, arr):\n        left_sum = sum(arr)\n        right_sum = 0\n\n        for i in reversed(arr):\n            right_sum += i\n            left_sum -= i\n            if right_sum == left_sum:\n                return True\n        return False\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    canSplit(arr) {\n        let leftSum = arr.reduce((acc, val) => acc + val, 0);\n        let rightSum = 0;\n\n        for (let i = arr.length - 1; i >= 0; i--) {\n            rightSum += arr[i];\n            leftSum -= arr[i];\n            if (rightSum === leftSum) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}