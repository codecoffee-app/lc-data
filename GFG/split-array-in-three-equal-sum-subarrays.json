{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878150,
            "title": "Split array in three equal sum subarrays",
            "titleSlug": "split-array-in-three-equal-sum-subarrays",
            "content": "<p><span >Given an<strong>&nbsp;</strong>array, <strong>arr[],</strong><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px;\"> d</span><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px;\">etermine if <strong>arr</strong> can be split into three consecutive parts such that the sum of each part is equal. If possible, return any <strong>index </strong>pair(i, j) in an array such that sum(arr[0..i]) = sum(arr[i+1..j]) = sum(arr[j+1..n-1]), otherwise return an array <strong>{-1,-1}</strong>. </span></span></p>\n<p><span ><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px;\">Note: Since multiple answers are possible, return any of them. The driver code will print true if it is correct otherwise, it will print</span><span style=\"color: #273239; font-family: Nunito, sans-serif;\"><span style=\"letter-spacing: 0.162px;\">&nbsp;false.</span></span></span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong> arr[] = [1, 3, 4, 0, 4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> [1, 2] is valid pair as sum of subarray arr[0..1] is equal to sum of subarray arr[2..3] and also to sum of subarray arr[4..4]. The sum is 4, so driver code prints true.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [2, 3, 4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> No three subarrays exist which have equal sum.<br /></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [0, 1, 1]\n<strong>Output:</strong> false<br /></span></pre>\n<p><span ><strong>Constraints:</strong><br />3 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i] &le; 10<sup>6</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, determine if `arr` can be split into three consecutive parts such that the sum of each part is equal. If possible, return any index pair `(i, j)` in an array such that `sum(arr[0..i]) = sum(arr[i+1..j]) = sum(arr[j+1..n-1])`, otherwise return an array `{-1,-1}`. Note: Since multiple answers are possible, return any of them. The driver code will print true if it is correct otherwise, it will print false.",
                "constraints": [
                    "3 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 3, 4, 0, 4]",
                        "output": "true",
                        "explanation": "The array can be split into three parts: [1, 3], [4, 0], and [4].  The sum of each part is 4."
                    },
                    {
                        "input": "[2, 3, 4]",
                        "output": "false",
                        "explanation": "It's impossible to divide the array into three subarrays with equal sums."
                    },
                    {
                        "input": "[0, 1, 1]",
                        "output": "false",
                        "explanation": "It's impossible to divide the array into three subarrays with equal sums."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Track prefix sums to locate points dividing the array into three equal parts.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n//    Class Solution to contain the method for solving the problem.\nclass Solution {\n  public:\n    // Function to determine if array arr can be split into three equal sum sets.\n    vector<int> findSplit(vector<int>& arr) {\n        int n = arr.size();\n        int totalSum = accumulate(arr.begin(), arr.end(), 0);\n\n        // Check if total sum can be divided into three equal parts\n        if (totalSum % 3 != 0)\n            return {-1, -1};\n\n        int target = totalSum / 3;\n        int prefixSum = 0, firstIdx = -1, secondIdx = -1;\n\n        // Loop to find indices that divide the array into three equal parts\n        for (int i = 0; i < n - 1; i++) {\n            prefixSum += arr[i];\n\n            // First index where prefix sum equals target\n            if (prefixSum == target && firstIdx == -1) {\n                firstIdx = i;\n            }\n            // Second index where prefix sum equals twice the target\n            else if (prefixSum == 2 * target && firstIdx != -1) {\n                secondIdx = i;\n                break;\n            }\n        }\n\n        // Check if both indices were found\n        if (firstIdx != -1 && secondIdx != -1)\n            return {firstIdx, secondIdx};\n        return {-1, -1};\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to determine if array arr can be split into three equal sum sets.\n    public List<Integer> findSplit(int[] arr) {\n        int n = arr.length;\n        List<Integer> ans = new ArrayList<>();\n        int totalSum = Arrays.stream(arr).sum();\n\n        // Check if total sum can be divided into three equal parts\n        if (totalSum % 3 != 0) {\n            ans.add(-1);\n            ans.add(-1);\n            return ans;\n        }\n\n        int target = totalSum / 3;\n        int prefixSum = 0;\n        int firstIdx = -1, secondIdx = -1;\n\n        // Loop to find indices that divide the array into three equal parts\n        for (int i = 0; i < n - 1; i++) {\n            prefixSum += arr[i];\n\n            // First index where prefix sum equals target\n            if (prefixSum == target && firstIdx == -1) {\n                firstIdx = i;\n            }\n            // Second index where prefix sum equals twice the target\n            else if (prefixSum == 2 * target && firstIdx != -1) {\n                secondIdx = i;\n                break;\n            }\n        }\n\n        // Check if both indices were found\n        if (firstIdx != -1 && secondIdx != -1) {\n\n            ans.add(firstIdx);\n            ans.add(secondIdx);\n\n        } else {\n            ans.add(-1);\n            ans.add(-1);\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    # Function to determine if array arr can be split into three equal sum sets.\n    def findSplit(self, arr):\n        total_sum = sum(arr)\n\n        # Check if total sum can be divided into three equal parts\n        if total_sum % 3 != 0:\n            return [-1, -1]\n\n        target = total_sum // 3\n        prefix_sum = 0\n        first_idx, second_idx = -1, -1\n\n        # Loop to find indices that divide the array into three equal parts\n        for i in range(len(arr) - 1):\n            prefix_sum += arr[i]\n\n            # First index where prefix sum equals target\n            if prefix_sum == target and first_idx == -1:\n                first_idx = i\n            # Second index where prefix sum equals twice the target\n            elif prefix_sum == 2 * target and first_idx != -1:\n                second_idx = i\n                break\n\n        # Check if both indices were found\n        if first_idx != -1 and second_idx != -1:\n            return [first_idx, second_idx]\n        return [-1, -1]",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to determine if array arr can be split into three equal sum sets.\n    findSplit(arr) {\n        const totalSum = arr.reduce((a, b) => a + b, 0);\n\n        if (totalSum % 3 !== 0)\n            return [\n                -1, -1\n            ]; // Check if total sum can be divided into three equal parts\n\n        const target = totalSum / 3;\n        let prefixSum = 0;\n        let firstIdx = -1;\n        let secondIdx = -1;\n\n        for (let i = 0; i < arr.length - 1; i++) {\n            prefixSum += arr[i];\n\n            if (prefixSum === target && firstIdx === -1) {\n                firstIdx = i;\n            } else if (prefixSum === 2 * target && firstIdx !== -1) {\n                secondIdx = i;\n                break;\n            }\n        }\n\n        return (firstIdx !== -1 && secondIdx !== -1) ? [ firstIdx, secondIdx ]\n                                                     : [ -1, -1 ];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}