{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878166,
            "title": "Split array into minimum subsets",
            "titleSlug": "split-array-into-minimum-subsets",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of distinct positive numbers. Split the array into the <strong>minimum </strong>number of subsets (or subsequences) such that each subset contains consecutive numbers.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong></span><span ><strong>:</strong></span> <span style=\"font-size: 18px;\">arr = [100, 56, 5, 6, 102, 58, 101, 57, 7, 103, 59]\n<strong>Output: </strong>3\n<strong>Explanation</strong>: [</span><span style=\"font-size: 18px;\">5, 6, 7], [56, 57, 58, 59], [100, 101, 102, 103] are 3 subsequences in which numbers are consecutive.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [10, 100, 105]\n<strong>Output: </strong>3\n<strong>Explanation</strong>: [</span><span style=\"font-size: 18px;\">10], [100] and [105] are 3 subset in which numbers are consecutive.</span></pre>\n<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>1 &lt;= arr.size() &lt;= 10<sup>5</sup></span><span style=\"font-size: 18px;\"><br /></span><span style=\"font-size: 18px;\">0 &lt;= arr[i] &lt;= 10<sup>9</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of distinct positive integers, determine the minimum number of subsets (or subsequences) required to split the array such that each subset contains consecutive numbers.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[100, 56, 5, 6, 102, 58, 101, 57, 7, 103, 59]",
                        "output": "3",
                        "explanation": "The array can be split into the following consecutive subsets: [5, 6, 7], [56, 57, 58, 59], and [100, 101, 102, 103]."
                    },
                    {
                        "input": "[10, 100, 105]",
                        "output": "3",
                        "explanation": "The array can be split into the following consecutive subsets: [10], [100], and [105]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a hash set to count sequences starting only from elements without a predecessor</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    int minSubsets(vector<int>& arr) {\n        unordered_set<int> s(arr.begin(), arr.end());\n\n        int count = 0;\n        for (int x : arr) {\n\n            // Check for the start of a new subset\n            if (s.find(x - 1) == s.end())\n                count++;\n        }\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    int minSubsets(int arr[]) {\n\n        // Create a HashSet from the array\n        Set<Integer> s = new HashSet<>();\n        for (int num : arr) {\n            s.add(num);\n        }\n\n        int count = 0;\n        for (int x : arr) {\n\n            // Check for the start of a new subset\n            if (!s.contains(x - 1)) count++;\n        }\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def minSubsets(self, arr):\n\n        # Create a set from the list\n        s = set(arr)\n\n        count = 0\n        for x in arr:\n\n            # Check for the start of a new subset\n            if (x - 1) not in s:\n                count += 1\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {number[]} arr\n * @return {number}\n */\nclass Solution {\n    minSubsets(arr) {\n\n        // Create a Set from the array\n        let s = new Set(arr);\n\n        let count = 0;\n        for (let x of arr) {\n\n            // Check for the start of a new subset\n            if (!s.has(x - 1)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}