{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700541,
            "title": "Split Linked List Alternatingly",
            "titleSlug": "split-singly-linked-list-alternatingly",
            "content": "<p><span >Given a singly linked list's <strong>head.</strong>&nbsp;Your task is to complete the function <strong>alternatingSplitList()</strong> that splits the given linked list into two smaller lists. The sublists should be made from alternating elements from the original list.<br /><strong>Note:</strong>&nbsp;</span></p>\n<ul>\n<li><span >The sublist should be in the order with respect to the original list.</span></li>\n<li><span >You<strong>&nbsp;</strong>have to <strong>return</strong>&nbsp;an array containing the both&nbsp;<strong>sub-linked lists</strong>.</span></li>\n</ul>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:&nbsp;</strong>LinkedList =&nbsp;0-&gt;1-&gt;0-&gt;1-&gt;0-&gt;1<br /><strong>Output: </strong>0-&gt;0-&gt;0 , </span><span >1-&gt;1-&gt;1<br /><strong>Explanation: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">After forming two sublists of the given list as required, we have two lists as: 0-&gt;0-&gt;0 and 1-&gt;1-&gt;1.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700541/Web/Other/blobid0_1720674305.png\" width=\"400\" height=\"180\" /><br /></span></span></pre>\n<pre><span ><strong>Input:&nbsp;</strong>LinkedList =&nbsp;<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">2-&gt;5-&gt;8-&gt;9-&gt;6</span><br /><strong>Output: </strong>2-&gt;8-&gt;6 , </span><span ><span >5-&gt;9<br /></span><strong >Explanation: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">After forming two sublists of the given list as required, we have two lists as: </span><span >2-&gt;8-&gt;6 and 5-&gt;9.</span><span ><br /></span></span></pre>\n<pre><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>LinkedList: 7 </span><br /><span style=\"font-size: 18.6667px;\"><strong>Output: </strong>7<strong> , </strong>&lt;empty linked list&gt;</span></pre>\n<p><span ><strong>Constraints:</strong><br /><span style=\"font-size: 18px;\">1 &lt;= number of nodes &lt;= 100</span><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">1 &lt;= node -&gt; data &lt;= 10<sup>4</sup></span><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a singly linked list, implement the function `alternatingSplitList()` to split the list into two sublists. These sublists should contain alternating elements from the original list, maintaining the original order of elements. Return an array containing both sub-linked lists.",
                "constraints": [
                    "1 <= Number of nodes <= 100",
                    "1 <= Node data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 0->1->0->1->0->1",
                        "output": "0->0->0 , 1->1->1",
                        "explanation": "The original linked list is split into two sublists. The first sublist (0->0->0) contains the elements at even indices (0, 2, 4) and the second sublist (1->1->1) contains the elements at odd indices (1, 3, 5)."
                    },
                    {
                        "input": "LinkedList: 2->5->8->9->6",
                        "output": "2->8->6 , 5->9",
                        "explanation": "The original linked list is split into two sublists. The first sublist (2->8->6) contains the elements at even indices (0, 2, 4) and the second sublist (5->9) contains the elements at odd indices (1, 3)."
                    },
                    {
                        "input": "LinkedList: 7",
                        "output": "7 , <empty linked list>",
                        "explanation": "When the linked list contains only one node, the first sublist contains the single node (7) and the second sublist is empty."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse the linked list while alternating between adding nodes to the two new lists.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to append a new node with newData at the end of a linked list\n    void append(struct Node** headRef, int newData) {\n        struct Node* new_node = new Node(newData);\n        struct Node* last = *headRef;\n\n        if (*headRef == NULL) {\n            *headRef = new_node;\n            return;\n        }\n        while (last->next != NULL)\n            last = last->next;\n        last->next = new_node;\n    }\n\n    // Function to split a linked list into two lists alternately\n    vector<Node*> alternatingSplitList(struct Node* head) {\n        struct Node* a = NULL;\n        struct Node* b = NULL;\n        struct Node* current = head; // Initialize current as head\n\n        // Iterate through the list\n        while (current != NULL) {\n            append(&a, current->data); // Append current node's data to list a\n            current = current->next;   // Move current to the next node\n\n            // If current is not NULL, append its data to list b and move current to the\n            // next node\n            if (current != NULL) {\n                append(&b, current->data);\n                current = current->next;\n            }\n        }\n        return {a, b};\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to append a new node with newData at the end of a linked list\n    void append(Node[] headRef, int newData) {\n        Node new_node = new Node(newData);\n        Node last = headRef[0];\n\n        if (headRef[0] == null) {\n            headRef[0] = new_node;\n            return;\n        }\n        while (last.next != null) last = last.next;\n        last.next = new_node;\n    }\n\n    // Function to split a linked list into two lists alternately\n    Node[] alternatingSplitList(Node head) {\n        Node[] a = {null};\n        Node[] b = {null};\n        Node current = head; // Initialize current as head\n\n        // Iterate through the list\n        while (current != null) {\n            append(a, current.data); // Append current node's data to list a\n            current = current.next;  // Move current to the next node\n\n            // If current is not NULL, append its data to list b and move current to the\n            // next node\n            if (current != null) {\n                append(b, current.data);\n                current = current.next;\n            }\n        }\n        return new Node[] {a[0], b[0]};\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to append a new node with newData at the end of a linked list\n    def append(self, headRef, newData):\n        new_node = Node(newData)\n        last = headRef[0]\n\n        if headRef[0] is None:\n            headRef[0] = new_node\n            return\n\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    # Function to split a linked list into two lists alternately\n    def alternatingSplitList(self, head):\n        a = [None]\n        b = [None]\n        current = head\n\n        while current:\n            self.append(a, current.data)\n            current = current.next\n\n            if current:\n                self.append(b, current.data)\n                current = current.next\n\n        return [a[0], b[0]]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to append a new node with newData at the end of a linked list\n    append(headRef, newData) {\n        const new_node = new Node(newData);\n        let last = headRef[0];\n\n        if (!headRef[0]) {\n            headRef[0] = new_node;\n            return;\n        }\n\n        while (last.next !== null) {\n            last = last.next;\n        }\n        last.next = new_node;\n    }\n\n    // Function to split a linked list into two lists alternately\n    alternatingSplitList(head) {\n        let a = [ null ];\n        let b = [ null ];\n        let current = head;\n\n        while (current !== null) {\n            this.append(a, current.data);\n            current = current.next;\n\n            if (current !== null) {\n                this.append(b, current.data);\n                current = current.next;\n            }\n        }\n\n        return [ a[0], b[0] ];\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}