{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702780,
            "title": "Split the Array",
            "titleSlug": "split-the-array0238",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[] </strong>of integers, the task is to count the number of ways to split given array elements into two non-empty subsets such that the XOR of elements of each group is equal. Each element should belong to exactly one subset.<br />Note: </span></p>\n<ol>\n<li><span style=\"font-size: 18px;\">The answer could be very large so print it by doing modulo with 10<sup>9</sup>&nbsp;+ 7.&nbsp;</span></li>\n<li><span style=\"font-size: 18px;\">Subsets with the same elements but derived from different indices are different.</span></li>\n</ol>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [1, 2, 3]\n<strong>Output :</strong> 3\n<strong>Explanation: </strong>{(1),(2, 3)}, {(2),(1, 3)}, {(3),(1, 2)} are three ways with equal XOR value of two groups.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [5, 2, 3, 2]\n<strong>Output :</strong> 0<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">No way to split into </span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> two groups whose XOR is equal.<br /></span></span></pre>\n<pre><span><strong>Input :</strong> arr[] = [2, 2, 2, 2]\n<strong>Output :</strong> 7<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong>There are 7 ways to split the array into two groups with equal XOR, such that there are multiple combinations of </span>{(2), (2,2,2)},{(2,2),(2,2)}.</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1&lt;=arr.size()&lt;=10<sup>6</sup><br />1&lt;=arr[i]&lt;=10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]`, determine the number of ways to split the array into two non-empty subsets such that the XOR of the elements in each subset is equal. Each element must belong to exactly one subset. The answer should be modulo 10^9 + 7.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3]",
                        "output": "3",
                        "explanation": "The possible splits are: {(1),(2, 3)}, {(2),(1, 3)}, {(3),(1, 2)}. In each case, the XOR of the elements in each subset is equal."
                    },
                    {
                        "input": "[5, 2, 3, 2]",
                        "output": "0",
                        "explanation": "There is no way to split the array into two groups with equal XOR values."
                    },
                    {
                        "input": "[2, 2, 2, 2]",
                        "output": "7",
                        "explanation": "There are 7 ways to split the array into two groups with equal XOR, for example {(2), (2,2,2)} and {(2,2),(2,2)}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Calculate the XOR of the entire array, and if the XOR is 0, use binary exponentiation to compute the number of ways to split the array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate (x^y) % p using binary exponentiation\n    int power(int x, int y, int p) {\n        int result = 1;\n        x = x % p; // Ensure x is within mod range\n\n        while (y > 0) {\n            if (y & 1)\n                result = (result * x) % p; // If y is odd, multiply x with result\n            y = y >> 1;                    // y = y / 2\n            x = (x * x) % p;               // x = x^2 % p\n        }\n        return result;\n    }\n\n  public:\n    // Function to count the number of ways to split array into two groups such that\n    // each group has equal XOR value.\n    int countgroup(vector<int>& arr) {\n        int mod = 1e9 + 7;  // Define the mod value\n        int n = arr.size(); // Get the size of the input array\n        int xs = 0;         // Initialize XOR sum\n\n        // Compute the XOR of the entire array\n        for (int i = 0; i < n; i++)\n            xs ^= arr[i];\n\n        // We can split only if the XOR of the entire array is 0\n        if (xs == 0) {\n            // If XOR of the whole array is 0, calculate 2^(n-1) - 1\n            int ans = power(2, n - 1, mod) - 1;\n            if (ans < 0) // Ensure the answer is non-negative by taking mod\n                ans += mod;\n            return ans;\n        }\n\n        return 0; // If XOR isn't 0, we cannot split the array\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to calculate (x^y) % p using binary exponentiation\n    public static int power(int x, int y, int p) {\n        int result = 1;\n        x = x % p; // Ensure x is within mod range\n\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result = (result * x) % p; // If y is odd, multiply x with result\n            }\n            y = y >> 1;      // y = y / 2\n            x = (x * x) % p; // x = x^2 % p\n        }\n        return result;\n    }\n\n    // Function to count the number of ways to split array into two groups such that\n    // each group has equal XOR value.\n    public static int countgroup(int[] arr) {\n        int mod = 1000000007; // Define the mod value\n        int n = arr.length;   // Get the size of the input array\n        int xs = 0;           // Initialize XOR sum\n\n        // Compute the XOR of the entire array\n        for (int i = 0; i < n; i++) {\n            xs ^= arr[i];\n        }\n\n        // We can split only if the XOR of the entire array is 0\n        if (xs == 0) {\n            // If XOR of the whole array is 0, calculate 2^(n-1) - 1\n            int ans = power(2, n - 1, mod) - 1;\n            if (ans < 0) {\n                ans += mod; // Ensure the answer is non-negative\n            }\n            return ans;\n        }\n\n        return 0; // If XOR isn't 0, we cannot split the array\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to calculate (x^y) % p using binary exponentiation\n    def power(self, x, y, p):\n        result = 1\n        x = x % p  # Ensure x is within mod range\n\n        while y > 0:\n            # If y is odd, multiply x with the result\n            if (y & 1) == 1:\n                result = (result * x) % p\n            # y = y // 2\n            y = y >> 1\n            # x = x^2 % p\n            x = (x * x) % p\n        return result\n\n    # Function to count the number of ways to split array into two groups such that each group has equal XOR value\n    def countgroup(self, arr):\n        mod = 1000000007  # Define the mod value\n        n = len(arr)  # Get the size of the input array\n        xs = 0  # Initialize XOR sum\n\n        # Compute the XOR of the entire array\n        for i in range(n):\n            xs ^= arr[i]\n\n        # We can split only if the XOR of the entire array is 0\n        if xs == 0:\n            # If XOR of the whole array is 0, calculate 2^(n-1) - 1\n            ans = self.power(2, n - 1, mod) - 1\n            if ans < 0:\n                ans += mod  # Ensure the answer is non-negative\n            return ans\n\n        return 0  # If XOR isn't 0, we cannot split the array\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    /**\n     * @param {number[]} arr - The input array of numbers\n     * @returns {number} - The number of ways to split the array into two groups with\n     *     equal XOR values\n     */\n    countgroup(arr) {\n        const mod = 1000000007; // Define the mod value\n        const n = arr.length;   // Get the size of the input array\n        let xs = 0;             // Initialize XOR sum\n\n        // Compute the XOR of the entire array\n        for (let i = 0; i < n; i++) {\n            xs ^= arr[i];\n        }\n\n        // We can split only if the XOR of the entire array is 0\n        if (xs === 0) {\n            // If XOR of the whole array is 0, calculate 2^(n-1) - 1\n            const ans = this.power(2, n - 1, mod) - 1;\n            return (ans + mod) % mod; // Ensure non-negative result using mod\n        }\n\n        return 0; // If XOR isn't 0, we cannot split the array\n    }\n\n    /**\n     * @param {number} x - The base\n     * @param {number} y - The exponent\n     * @param {number} p - The modulo value\n     * @returns {number} - (x^y) % p\n     */\n    power(x, y, p) {\n        let result = 1;\n        x = x % p; // Ensure x is within mod range\n\n        while (y > 0) {\n            // If y is odd, multiply x with the result\n            if ((y & 1) === 1) {\n                result = (result * x) % p;\n            }\n\n            // y = y // 2\n            y = Math.floor(y / 2);\n\n            // x = x^2 % p\n            x = (x * x) % p;\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}