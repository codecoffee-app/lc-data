{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709862,
            "title": "Split the binary string into substrings with equal number of 0s and 1s",
            "titleSlug": "split-the-binary-string-into-substrings-with-equal-number-of-0s-and-1s",
            "content": "<p><span style=\"font-size:18px\">Given binary string&nbsp;<strong>str </strong>of length <strong>N</strong>. The task is to find the maximum count of consecutive substrings&nbsp;<strong>str</strong>&nbsp;can be divided into such that all the substrings are balanced i.e. they have an equal number of&nbsp;<strong>0s</strong>&nbsp;and&nbsp;<strong>1s</strong>. If it is not possible to split&nbsp;<strong>str</strong>&nbsp;satisfying the conditions then return&nbsp;<strong>-1.</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nS = &quot;0100110101&quot;\r\n<strong>Output: </strong>4\r\n<strong>Explanation:</strong> \r\nThe required substrings are 01, 0011, 01 and 01.\r\n\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nS = &quot;0111100010&quot;\r\n<strong>Output: </strong>3\r\n</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>maxSubStr</strong><strong>()</strong>&nbsp;which takes a&nbsp;string S&nbsp;and returns an integer as output.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= S.length &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string `str` of length N, determine the maximum number of consecutive substrings into which `str` can be divided, such that each substring is balanced (i.e., has an equal number of 0s and 1s). If it's impossible to split `str` into balanced substrings, return -1.",
                "constraints": [
                    "1 <= S.length <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "0100110101",
                        "output": "4",
                        "explanation": "The string can be divided into the balanced substrings: \"01\", \"0011\", \"01\", and \"01\"."
                    },
                    {
                        "input": "0111100010",
                        "output": "3",
                        "explanation": "The string can be divided into the balanced substrings: \"01\", \"1100\", and \"10\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse the string character by character and keep track of the number of&nbsp;<strong>0s</strong>&nbsp;and&nbsp;<strong>1s</strong>&nbsp;so far, whenever the count of&nbsp;<strong>0s</strong>&nbsp;and&nbsp;<strong>1s</strong>&nbsp;become equal increment the count.</span></p>",
            "<p><span style=\"font-size:18px\">If it is not possible to split string then on that time count of 0s must not be equal to count of 1s<strong>&nbsp;</strong>then return&nbsp;<strong>-1</strong>&nbsp;else print the value of count after the traversal of the complete string.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\npublic:\r\n    int maxSubStr(string str)\r\n{\r\n    int n=str.length();\r\n    // To store the count of 0s and 1s\r\n    int count0 = 0, count1 = 0;\r\n \r\n    // To store the count of maximum\r\n    // substrings str can be divided into\r\n    int cnt = 0;\r\n    for (int i = 0; i < n; i++) {\r\n        if (str[i] == '0') {\r\n            count0++;\r\n        }\r\n        else {\r\n            count1++;\r\n        }\r\n        if (count0 == count1) {\r\n            cnt++;\r\n        }\r\n    }\r\n \r\n    // It is not possible to\r\n    // split the string\r\n    if (count0!=count1) {\r\n        return -1;\r\n    }\r\n \r\n    return cnt;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//User function Template for Java\r\n\r\nclass Solution {\r\n    public static int maxSubStr(String str) {\r\n       //Write your code here\r\n       int count0 = 0, count1 = 0;\r\n       int n = str.length();\r\n    // To store the count of maximum\r\n    // substrings str can be divided into\r\n    int cnt = 0;\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        if (str.charAt(i) == '0')\r\n        {\r\n            count0++;\r\n        }\r\n        else\r\n        {\r\n            count1++;\r\n        }\r\n        if (count0 == count1)\r\n        {\r\n            cnt++;\r\n        }\r\n    }\r\n \r\n    // It is not possible to\r\n    // split the string\r\n    if (count0 != count1)\r\n    {\r\n        return -1;\r\n    }\r\n    return cnt;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def maxSubStr(self,str):\r\n        count0 = 0\r\n        count1 = 0\r\n        n = len(str)\r\n        # To store the count of maximum\r\n        # substrings str can be divided into\r\n        cnt = 0\r\n     \r\n        for i in range(n):\r\n            if str[i] == '0':\r\n                count0 += 1\r\n            else:\r\n                count1 += 1\r\n             \r\n            if count0 == count1:\r\n                cnt += 1\r\n \r\n        # It is not possible to\r\n        # split the string\r\n        if count0 != count1:\r\n            return -1\r\n             \r\n        return cnt\r\n\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for Javascript\n\nclass Solution{\n    \n    //Function to find the count of substrings that can be divided into equal number of 0s and 1s.\n    maxSubStr(str){\n        let count0 = 0;\n        let count1 = 0;\n        let n = str.length;\n        let cnt = 0;\n     \n        for(let i=0; i<n; i++){\n            if (str[i] === '0'){\n                count0 += 1;\n            } else {\n                count1 += 1;\n            }\n            \n            if(count0 === count1){\n                cnt += 1;\n            }\n        }\n \n        if(count0 !== count1){\n            return -1;\n        }\n             \n        return cnt;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}