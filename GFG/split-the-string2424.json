{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703627,
            "title": "Split the string",
            "titleSlug": "split-the-string2424",
            "content": "<p><span style=\"font-size:18px\">Given a string S, you have to check if we can split it into four strings such that each string&nbsp;is non-empty and distinct from each other.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input :</strong>\nS = &quot;geeksforgeeks&quot;\n<strong>Output:\n</strong>1\n<strong>Explanation:</strong>\n&quot;geeks&quot;, &quot;for&quot;, &quot;gee&quot;, &quot;ks&quot; are four\ndistinct strings that can form from\ngiven string.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: \n</strong>S = &quot;aaabb&quot; \n<strong>Output:\n</strong>0\n</span><strong><span style=\"font-size:18px\">Explanation:\n</span></strong><span style=\"font-size:18px\">It&#39;s not possible to split string S in four\ndistinct strings</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>isPossible()</strong>&nbsp;which takes the string&nbsp;S<strong>&nbsp;</strong>as input parameter and returns 1 if it&#39;s possible to split S into four strings such that each string is non-empty and distinct&nbsp;from each other or return 0 otherwise.&nbsp;</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|S|<sup>3</sup>)<br />\n<strong>Expected Space Complexity:</strong> O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt; |S| &lt;=10000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S, determine if it can be split into four non-empty, distinct substrings.",
                "constraints": [
                    "1 < |S| <= 10000"
                ],
                "testcases": [
                    {
                        "input": "geeksforgeeks",
                        "output": "1",
                        "explanation": "The string can be split into 'geeks', 'for', 'gee', and 'ks', which are all distinct and non-empty."
                    },
                    {
                        "input": "aaabb",
                        "output": "0",
                        "explanation": "It is not possible to split the string into four distinct, non-empty substrings."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use brute force i.e iterate through the all possible ways of splitting the string and check each one. Also, string with length more than or equal to ten can always be splitted into four distinct strings.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": " \nclass Solution{   \npublic:\n    int isPossible(string S)\n    {\n        // We can always break a string of size 10 or\n        // more into four distinct strings.\n        if (S.size() >= 10)\n            return 1;\n     \n        // Brute Force\n        for (int i =1; i < S.size(); i++)\n        {\n            for (int j = i + 1; j < S.size(); j++)\n            {\n                for (int k = j + 1; k < S.size(); k++)\n                {\n                    // Making 4 string from the given string\n                    string s1 = S.substr(0, i);\n                    string s2 = S.substr(i, j - i);\n                    string s3 = S.substr(j, k - j);\n                    string s4 = S.substr(k, S.size() - k);\n     \n                    // Checking if they are distinct or not.\n                    if (s1 != s2 && s1 != s3 && s1 != s4 &&\n                            s2 != s3 && s2 != s4 && s3 != s4)\n                        return 1;\n                }\n            }\n        }\n        return 0;\n    }\n};\n ",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution{\n    static int isPossible(String S){\n        // We can always break a string of size 10 or more more\n        if (S.length() >= 10) \n            return 1; \n  \n        // Brute Force \n        for (int i = 0; i < S.length(); i++)  \n        { \n            for (int j = i + 1; j < S.length(); j++)  \n            { \n                for (int k = j + 1; k < S.length()-1; k++)  \n                { \n                      \n                    // Making 4 string from the given string \n                    String s1 = \"\", s2 = \"\", s3 = \"\", s4 = \"\"; \n                    s1 =S.substring(0, i+1); \n\t\t\t\t\ts2 = S.substring(i+1, j+1); \n\t\t\t\t\ts3 =S.substring(j+1, k+1); \n\t\t\t\t\ts4 = S.substring(k+1, S.length());  \n                   \n  \n                    // Checking if they are distinct or not. \n                    if (s1.compareTo(s2) != 0 && s1.compareTo(s3) != 0 &&  \n                        s1.compareTo(s4) != 0 && s2.compareTo(s3)!= 0 &&  \n                        s2.compareTo(s4) != 0 && s3.compareTo(s4) != 0) \n                        return 1; \n                } \n            } \n        } \n  \n        return 0; \n    }  \n \n   \n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    def isPossible (self, S):\n        # We can always break a string of size 10 or \n        # more into four distinct strings.  \n        if (len(S) >= 10): \n            return 1\n        \n        # Brute Force  \n        for i in range(0, len(S)):  \n        \n            for j in range(i + 1, len(S)):  \n          \n                for k in range(j + 1, len(S)-1): \n              \n                    # Making 4 from the given  \n                    s1 = S[0:i + 1]  \n                    s2 = S[i + 1:j + 1] \n                    s3 = S[j + 1: k + 1] \n                    s4 = S[k + 1: len(S)] \n                  \n                    # Checking if they are distinct or not.  \n                    if (s1 != s2 and s1 != s3 and s1 != s4 and\n                        s2 != s3 and s2 != s4 and s3 != s4):  \n                        return 1\n              \n        return 0",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S\n * @returns {boolean}\n*/\n\nclass Solution {\n    //Function to check whether the string is possible or not.\n    isPossible(S) {\n        // We can always break a string of size 10 or \n        // more into four distinct strings.  \n        if (S.length >= 10) { \n            return true;\n        }\n        \n        // Brute Force  \n        for (let i = 0; i < S.length; i++) {  \n            for (let j = i + 1; j < S.length; j++) {  \n                for (let k = j + 1; k < S.length - 1; k++) {\n                    // Making 4 from the given  \n                    let s1 = S.substring(0, i + 1); \n                    let s2 = S.substring(i + 1, j + 1);\n                    let s3 = S.substring(j + 1, k + 1);\n                    let s4 = S.substring(k + 1, S.length);\n                  \n                    // Checking if they are distinct or not.  \n                    if (s1 !== s2 && s1 !== s3 && s1 !== s4 &&\n                        s2 !== s3 && s2 !== s4 && s3 !== s4) {  \n                        return true;\n                    }\n                }\n            }\n        }\n              \n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}