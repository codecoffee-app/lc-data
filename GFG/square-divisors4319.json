{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704118,
            "title": "Square Divisors",
            "titleSlug": "square-divisors4319",
            "content": "<p><span style=\"font-size:18px\">Given a number <strong>N</strong>.Your task is to print&nbsp;the no of divisors of number N which are perfect squares.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>36\n<strong>Output:</strong> 4\n<strong>Explaination:</strong> The factors which are perfect \nsquare are 1, 4, 9 and 36.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> 60\n<strong>Output:</strong> 2\n<strong>Explaination:</strong> The factors which are perfect \nsquares are 1 and 4.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>squareFactor()</strong> which takes N as input parameter and returns&nbsp;the count of the factors which are perfect squares.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(sqrt(N))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>12</sup>&nbsp;&nbsp;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each factor of N find out if it is a perfect square or not.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to count the number of perfect square factors\n    int squareFactor(long long N){\n        int ans = 0;\n        long long x, y;\n        // Iterating from 1 to the square root of N\n        for(int i = 1; i <= sqrt(N); i++){\n            // Checking if i is a factor of N\n            if(N%i == 0){\n                // Checking if i is a perfect square\n                if(N/i == i){\n                    // Incrementing ans if i is a perfect square\n                    x = sqrt(i);\n                    if(x*x == i)\n                        ans++;\n                }\n                else{\n                    // Checking if both i and N/i are perfect squares\n                    x = sqrt(i);\n                    y = sqrt(N/i);\n                    if(x*x == i)\n                        ans++;\n                    if(y*y == N/i)\n                        ans++;\n                }\n            }\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\npublic class Solution\n{\n    //Complete this function\n    public int squareFactor(long N)\n    {\n        int ans = 0;\n        long x, y;\n        // Iterating from 1 to the square root of N\n        for(int i = 1; i <= Math.Sqrt(N); i++){\n            // Checking if i is a factor of N\n            if(N%i == 0){\n                // Checking if i is a perfect square\n                if(N/i == i){\n                    // Incrementing ans if i is a perfect square\n                    x = (long)Math.Sqrt(i);\n                    if(x*x == i)\n                        ans++;\n                }\n                else{\n                    // Checking if both i and N/i are perfect squares\n                    x = (long)Math.Sqrt(i);\n                    y = (long)Math.Sqrt(N/i);\n                    if(x*x == i)\n                        ans++;\n                    if(y*y == N/i)\n                        ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}