{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712067,
            "title": "Pattern 22",
            "titleSlug": "square-pattern-1662666141",
            "content": "<p><span style=\"font-size:18px\">Geek is very fond of patterns. Once, his teacher gave him a&nbsp;square pattern to solve. He gave Geek&nbsp;an integer <strong>n</strong> and asked him to build a pattern.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Help Geek&nbsp;to build the&nbsp;pattern.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: 4</strong>\r\n\r\n<strong>Output:</strong>\r\n4 4 4 4 4 4 4\r\n4 3 3 3 3 3 4\r\n4 3 2 2 2 3 4\r\n4 3 2 1 2 3 4\r\n4 3 2 2 2 3 4\r\n4 3 3 3 3 3 4\r\n4 4 4 4 4 4 4</span>\r\n\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">You don&#39;t need to input anything. Complete the function <strong>printSquare()&nbsp;</strong>which takes&nbsp; an integer n <strong>&nbsp;</strong>as the input parameter&nbsp;and print the pattern.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">1&lt;= <strong>N</strong> &lt;= 20</span></li>\r\n</ul>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek is fascinated by patterns. He's been given a square pattern problem by his teacher. Given an integer 'n', construct the pattern as described in the example.",
                "constraints": [
                    "1 <= N <= 20"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "4 4 4 4 4 4 4\n4 3 3 3 3 3 4\n4 3 2 2 2 3 4\n4 3 2 1 2 3 4\n4 3 2 2 2 3 4\n4 3 3 3 3 3 4\n4 4 4 4 4 4 4",
                        "explanation": "The pattern for n=4 is a 7x7 square with the outer layers filled with 4s, then 3s, then 2s, and finally a 1 in the center. The numbers decrease as you move towards the center from any edge."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n    // function to return sum of elements\r\n    // in an array of size n\r\n  public:\r\n    // function to print a square pattern\r\n    void printSquare(int n) {\r\n        int a[n * 2 - 1][n * 2 - 1];\r\n        \r\n        // fill the array with appropriate values\r\n        for (int i = 0; i < n; i++) {\r\n            // fill the top row and bottom row\r\n            for (int j = i; j < n * 2 - i - 1; j++) {\r\n                a[i][j] = n - i;\r\n                a[n * 2 - i - 2][j] = n - i;\r\n            }\r\n            \r\n            // fill the left column and right column\r\n            for (int j = i; j < n * 2 - i - 1; j++) {\r\n                a[j][i] = n - i;\r\n                a[j][n * 2 - i - 2] = n - i;\r\n            }\r\n        }\r\n        \r\n        // print the square pattern\r\n        for (int i = 0; i < n * 2 - 1; i++) {\r\n            for (int j = 0; j < n * 2 - 1; j++) {\r\n                cout << a[i][j] << \" \";\r\n            }\r\n            cout << endl;\r\n        }\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to print a square pattern\n    void printSquare(int n) {\n\n        // Create a 2D array of size (n*2-1) x (n*2-1)\n        int a[][] = new int[n * 2 - 1][n * 2 - 1];\n\n        // Fill the upper and lower halves of the square pattern\n        for (int i = 0; i < n; i++) {\n\n            // Fill the elements in each row of the upper and lower halves\n            for (int j = i; j < n * 2 - i - 1; j++) {\n                a[i][j] = n - i;\n                a[n * 2 - i - 2][j] = n - i;\n            }\n\n            // Fill the elements in each column of the upper and lower halves\n            for (int j = i; j < n * 2 - i - 1; j++) {\n                a[j][i] = n - i;\n                a[j][n * 2 - i - 2] = n - i;\n            }\n        }\n\n        // Print the square pattern\n        for (int i = 0; i < n * 2 - 1; i++) {\n            for (int j = 0; j < n * 2 - 1; j++) {\n                System.out.print(a[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to print a triangle pattern.\r\n    def printTriangle(self, n):\r\n        \r\n        #Iterating over rows.\r\n        for i in range(1, 2*n):\r\n            \r\n            #Iterating over columns.\r\n            for j in range(1, 2*n):\r\n                \r\n                #Finding the row and column values.\r\n                row, col = i, j\r\n                \r\n                #Mirroring the row and column for the second half of the pattern.\r\n                if row > n:\r\n                    row = 2 * n - row\r\n                if col > n:\r\n                    col = 2 * n - col\r\n                \r\n                #Printing the number based on the minimum value of row and column.\r\n                print(n - min(row, col) + 1, end = ' ')\r\n            \r\n            #Printing a new line after each row.\r\n            print()",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}