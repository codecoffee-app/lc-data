{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711624,
            "title": "Pattern 1",
            "titleSlug": "square-pattern",
            "content": "<p><span style=\"font-size: 18px;\">Geek is very fond of patterns. Once, his teacher gave him a&nbsp;square pattern to solve. He gave Geek&nbsp;an integer n and asked him to build a pattern.</span></p>\n<p><span style=\"font-size: 18px;\">Help Geek to build a square pattern with the help of *&nbsp; such that&nbsp;</span><span style=\"font-size: 18px;\">each * is space-separated in each line</span><span style=\"font-size: 18px;\">.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong><br />n = 3<strong><br />Output:</strong><br />* * *<br />* * *<br />* * *<br /></span></pre>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium; white-space: normal;\"><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><strong>Input:</strong><br />n = 5<strong><br />Output:</strong><br />* * * * *<br />* * * * *<br />* * * * *<br />* * * * *<br />* * * * *</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong> You don't need to input anything. Complete the function <strong>printSquare()&nbsp;</strong>which takes&nbsp; an integer n <strong>&nbsp;</strong>as the input parameter&nbsp;and print the pattern.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Time Complexity :</strong> O(n<sup>2</sup>)<br /><strong>Space Complexity :</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1&lt;= n &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `n`, construct a square pattern of size `n x n` using the `*` character. Each `*` should be space-separated within each row.",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "* * *\n* * *\n* * *",
                        "explanation": "A 3x3 square pattern is generated with each row containing three '*' characters separated by spaces."
                    },
                    {
                        "input": "5",
                        "output": "* * * * *\n* * * * *\n* * * * *\n* * * * *\n* * * * *",
                        "explanation": "A 5x5 square pattern is generated, similarly with each row containing five '*' characters separated by spaces."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Run two nested loop and print the pattern</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n    // function to return sum of elements\r\n    // in an array of size n\r\n  public:\r\n    void printSquare(int n) {\r\n        for (int i = 1; i <= n; i++) { // loop for rows\r\n            for (int j = 1; j <= n; j++) { // loop for columns\r\n                cout << \"* \"; // print asterisk\r\n            }\r\n            cout << endl; // move to next line\r\n        }\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Method to print a square pattern of size n\n    void printSquare(int n) {\n        // Loop to iterate through rows of the square\n        for (int i = 1; i <= n; i++) {\n            // Loop to iterate through columns of the square\n            for (int j = 1; j <= n; j++) {\n                // Print a * and a space\n                System.out.print(\"* \");\n            }\n            // Move to the next line for the next row\n            System.out.println();\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to print N x N pattern with asterisks (*).\n    def printSquare(self, N):\n        #loop for rows.\n        for i in range(N):\n            #loop for columns.\n            for j in range(N):\n                #printing asterisk.\n                print('* ', end = '')\n            #printing new line after each row.\n            print()",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\r\n{\r\n    // function to return sum of elements\r\n    // in an array of size n\r\n    public void printSquare(int n)\r\n    {\r\n        for (int i = 1; i <= n; i++) // loop for rows\r\n        {\r\n            for (int j = 1; j <= n; j++) // loop for columns\r\n            {\r\n                Console.Write(\"* \"); // print asterisk\r\n            }\r\n            Console.WriteLine(); // move to next line\r\n        }\r\n    }\r\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number} N\n * @returns {null}\n */\n\nclass Solution {\n    // Function to print square of N\n    printSquare(N) {\n        //loop for rows\n        for(let i = 0; i < N; i++) {\n            //loop for columns\n            for(let j = 0; j < N; j++) {\n                //printing asterisk\n                process.stdout.write('* ');\n            }\n            //printing new line after each row\n            console.log();\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}