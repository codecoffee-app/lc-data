{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700226,
            "title": "Square Root",
            "titleSlug": "square-root",
            "content": "<p><span >Given a positive integer <strong>n,</strong> find the square root of n. If <strong>n</strong> is not a perfect square, then return the floor value.</span></p>\n<blockquote>\n<p><span >Floor value of any number is the greatest Integer which is less than or equal to that number</span></p>\n</blockquote>\n<p><span ><strong>Examples:</strong></span><span > </span></p>\n<pre><span ><strong>Input: </strong>n = 4\n<strong>Output: </strong>2<strong>\nExplanation: </strong>Since, 4 is a perfect square, so its square root is 2.<br /></span></pre>\n<pre><span ><strong>Input: </strong>n = 11\n<strong>Output: </strong>3<strong>\nExplanation: </strong>Since, 11 is not a perfect square, floor of square root of 11 is 3.</span></pre>\n<pre><span ><strong>Input: </strong>n = 1\n<strong>Output: </strong>1</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &le; n &le;&nbsp; 3 x 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use binary search to find the floor of the square root efficiently.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "vmware",
            "flipkart",
            "accolite",
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nint floorSqrt(int n) {\n    // base case\n    if (n == 0 || n == 1)\n        return n;\n\n    int start = 1, end = n, ans;\n\n    // binary search to find square root of a number\n    while (start <= end) {\n        int mid = start + (end - start) / 2;\n\n        // check if mid*mid == n\n        if (mid * mid == n)\n            return mid;\n\n        // if mid*mid < n, then iterate on the upper half\n        if (mid * mid < n) {\n            start = mid + 1;\n            ans = mid;\n        }\n        // else, iterate for the lower half\n        else\n            end = mid - 1;\n    }\n    return ans;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int floorSqrt(int n) {\n        // base case\n        if (n == 0 || n == 1)\n            return n;\n\n        int start = 1, end = n, ans;\n\n        // binary search to find square root of a number\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n\n            // check if mid*mid == n\n            if (mid * mid == n)\n                return mid;\n\n            // if mid*mid < n, then iterate on the upper half\n            if (mid * mid < n) {\n                start = mid + 1;\n                ans = mid;\n            }\n            // else, iterate for the lower half\n            else\n                end = mid - 1;\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n\n{\n    int floorSqrt(int n) {\n        // base case\n        if (n == 0 || n == 1) return n;\n\n        int start = 1, end = n, ans = 0;\n\n        // binary search to find square root of a number\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n\n            // if mid*mid == n, then mid is the required element\n            if (mid * mid == n) return mid;\n\n            // if mid*mid < n, then iterate for upper half\n            if (mid * mid < n) {\n                start = mid + 1;\n                ans = mid;\n            }\n            // else, iterate for lower half\n            else\n                end = mid - 1;\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    #Back-end complete function Template for Python 3\n\n    def floorSqrt(self, n):\n\n        # Base cases\n        if (n == 0 or n == 1):\n            return n\n\n        start = 1\n        end = n\n        res = 0\n\n        # binary search to find square root of a number\n        while start <= end:\n            mid = (start + end) // 2\n\n            # if mid*mid == n, then mid is the required element\n            if mid * mid == n:\n                return mid\n\n            # if mid*mid < n, then iterate for upper half\n            if mid * mid < n:\n                start = mid + 1\n                res = mid\n\n            # else, iterate for lower half\n            else:\n                end = mid - 1\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} N\n * @returns {number}\n */\n\nclass Solution {\n\n    floorSqrt(n) {\n        if (n == 0 || n == 1) return n;\n\n        let start = 1, end = n, ans;\n\n        // binary search to find square root of a number\n        while (start <= end) {\n            let mid = Math.floor((start + end) / 2);\n\n            // check if mid*mid == n\n            if (mid * mid == n) return mid;\n\n            // if mid*mid < n, then iterate on the upper half\n            if (mid * mid < n) {\n                start = mid + 1;\n                ans = mid;\n            }\n            // else, iterate for the lower half\n            else\n                end = mid - 1;\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}