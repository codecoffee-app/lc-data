{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705080,
            "title": "Squares in a Matrix",
            "titleSlug": "squares-in-a-matrix5716",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>mxn</strong> matrix, count the number of squares in the matrix. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\">m<strong> = </strong>2, n<strong> = </strong>2</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">5</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><span style=\"font-size: 18px;\">There are a total of 5 squares in a 2*2 matrix. Four 1*1 squares and one 2*2 square.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Input:</span> </strong></span><span style=\"font-size: 18px;\">m<strong> = </strong>4, n<strong> = </strong>3</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong></span><span style=\"font-size: 18px;\">20</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><span style=\"font-size: 18px;\">There are a total of 20 squares in a 4*3 matrix. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= m,n &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of size m x n, determine the total number of squares that can be formed within the matrix.",
                "constraints": [
                    "1 <= m, n <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "m = 2, n = 2",
                        "output": "5",
                        "explanation": "A 2x2 matrix contains four 1x1 squares and one 2x2 square, totaling five squares."
                    },
                    {
                        "input": "m = 4, n = 3",
                        "output": "20",
                        "explanation": "A 4x3 matrix contains a total of 20 squares of varying sizes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Be careful about overflow of integers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "junglee-games"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int squaresInMatrix(int m, int n) {\n\n        if (n < m)\n            swap(m, n);\n\n        int ans = (m * (m + 1) * (2 * m + 1)) / 6 + ((n - m) * m * (m + 1)) / 2;\n\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int squaresInMatrix(int m, int n) {\n\n        if (n < m) {\n            int temp = m;\n            m = n;\n            n = temp;\n        }\n\n        int ans = (m * (m + 1) * (2 * m + 1)) / 6 + ((n - m) * m * (m + 1)) / 2;\n\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def squaresInMatrix(self, m, n):\n        if n < m:\n            m, n = n, m\n\n        ans = (m * (m + 1) * (2 * m + 1)) // 6 + ((n - m) * m * (m + 1)) // 2\n\n        return ans\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}