{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704775,
            "title": "Squares in  N*N Chessboard",
            "titleSlug": "squares-in-nn-chessboard1801",
            "content": "<p><span style=\"font-size: 18px;\">Find the total number of Squares in a <strong>N*N</strong> chessboard.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>N = </strong>1</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">A 1*1 chessboard has only 1 square.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>N = </strong>2</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">5</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">A 2*2 chessboard has 5 squares.\n4 1*1 squares and a 2*2 square.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>squaresInChessBoard()</strong> which takes an Integer N as input and returns the number of squares in a N*N chessboard.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(1)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= N &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N*N chessboard, find the total number of squares of all possible sizes that can be formed within the board.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "A 1x1 chessboard contains only one square (a 1x1 square itself)."
                    },
                    {
                        "input": "2",
                        "output": "5",
                        "explanation": "A 2x2 chessboard contains four 1x1 squares and one 2x2 square, for a total of 5 squares."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Be careful about Integer Overflow.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "goldman-sachs",
            "maq-software"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end function to calculate the number of squares in a chessboard\nclass Solution {\n  public:\n    long long squaresInChessBoard(long long N) {\n        \n        // Calculate the answer using the formula (N*(N+1)*(2*N+1))/6\n        // Divide by 6 to account for the overcounting of squares\n        long long ans = (N*(N+1)*(2*N+1))/6;\n        \n        // Return the answer\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find the number of squares in a chessboard of size N\n    static Long squaresInChessBoard(Long N) {\n        \n        // Formula to calculate the number of squares\n        Long ans = (N*(N+1)*(2*N+1))/6;\n        \n        // Return the answer\n        return ans;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution{\n    squaresInChessBoard(n){\n        let ans = (n * (n + 1) * (2 * n + 1)) / 6;\n        \n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public long squaresInChessBoard(long N)\n    {\n        // Calculate the answer using the formula (N*(N+1)*(2*N+1))/6\n        // Divide by 6 to account for the overcounting of squares\n        long ans = (N*(N+1)*(2*N+1))/6;\n\n        // Return the answer\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}