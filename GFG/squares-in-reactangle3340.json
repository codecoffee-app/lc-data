{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705005,
            "title": "Squares in Rectangle",
            "titleSlug": "squares-in-reactangle3340",
            "content": "<p><span style=\"font-size:18px\">Given a rectangle of size <strong>L x B</strong>. Find the minimum number of squares required to fill the rectangle&nbsp;such that no two square overlaps.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> L = 4, B = 5\n<strong>Output:</strong> 5\n<strong>Explaination:</strong> One 4*4 square and four 1*1 \nsquares are required.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> L = 2, B = 4\n<strong>Output:</strong> 2\n<strong>Explaintion:</strong> Two 2*2 squares are enough to \nfill the rectangle.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the&nbsp; function <strong>minSquares()</strong> which takes L and B as input parameters and returns minimum number of squares required to fill the rectangle. Return the answer modulo <strong>10<sup>9</sup>&nbsp;+ 7</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log(max(L, B)))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\">Constraints:<br />\n1 &le; L, B &le; 10<sup>10</sup>&nbsp; &nbsp;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a rectangle with dimensions L x B, determine the minimum number of squares needed to completely fill the rectangle without any overlaps.",
                "constraints": [
                    "1 <= L, B <= 10^10"
                ],
                "testcases": [
                    {
                        "input": "L = 4, B = 5",
                        "output": "5",
                        "explanation": "A single 4x4 square can be placed, leaving a 4x1 rectangle. This remaining area can be filled with four 1x1 squares, resulting in a total of 5 squares."
                    },
                    {
                        "input": "L = 2, B = 4",
                        "output": "2",
                        "explanation": "The rectangle can be perfectly filled with two 2x2 squares."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find the maximum size of square for the remaining unfilled rectangle.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to find the minimum number of squares that can be formed\n    int minSquares(long long L, long long B){\n        long long count = 0;\n        \n        // Loop until both L and B are greater than 0\n        while(L > 0 && B > 0){\n            // Swap L and B if L is smaller than B\n            if(L < B)\n                swap(L, B);\n            \n            // Count the number of squares that can be formed from L and B\n            count += L/B;\n            \n            // Update L to the remainder after division by B\n            L = L%B;\n        }\n        \n        // Return the count modulo 1000000007\n        return (int)(count%1000000007);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}