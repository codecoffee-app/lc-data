{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 890252,
            "title": "Stable Marriage Problem",
            "titleSlug": "stable-marriage-problem",
            "content": "<p><span >Given&nbsp;<strong>n</strong>&nbsp;men and&nbsp;<strong>n</strong>&nbsp;women, where each person ranks all members of the opposite gender in order of preference (men ranks women and women ranks men), the task is to marry the men and women together such that no two persons of opposite gender prefers each other over their current partners.&nbsp;</span></p>\n<p><span >In other words, the task is to pair each man with a woman such that</span></p>\n<ul>\n<li><span >Every man is paired with exactly one woman, and vice versa.</span></li>\n<li><span >The matching is&nbsp;<strong>stable</strong>, that is there is no pair&nbsp; who would both prefer to be matched with each other over their current partners.</span></li>\n</ul>\n<p><span ><strong>Note:</strong>&nbsp;It can be proven that it is always possible to form stable marriages.&nbsp;</span></p>\n<p><span >The input contains two arrays,&nbsp;<strong>men[]</strong>&nbsp;and<strong>&nbsp;women[]</strong>, such that&nbsp;<strong>men[i]&nbsp;</strong>stores the preference list of<strong>&nbsp;ith man</strong>&nbsp;and<strong>&nbsp;women[i]</strong>&nbsp;stores the preference list of&nbsp;<strong>ith woman</strong>.</span></p>\n<p><span >You should return a list of&nbsp;<strong>integers</strong>, where the<strong>&nbsp;i-th element</strong>&nbsp;represents the<strong>&nbsp;index of the woman</strong>&nbsp;that the&nbsp;<strong>i-th man</strong>&nbsp;is married to (0-based index).&nbsp;</span></p>\n<p><span ><strong>Examples:</strong>&nbsp;</span></p>\n<pre><span ><strong>Input:</strong> n = 2, men[] = [[0, 1], [0, 1], women[] = [[0, 1], [0, 1]]<br /><strong>Output:&nbsp;</strong>[0, 1]<br /><strong>Explanation:<br /></strong></span><span >Man 0 is married to Woman 0 (his first choice and her first choice).<br /></span><span >Man 1 is married to Woman 1 (his second choice and her second choice).</span></pre>\n<pre><span ><strong>Input:</strong> n = 3, men[] = [[0, 1, 2], [0, 1, 2], [0, 1, 2]], women[] = [[2, 1, 0], [2, 1, 0], [2, 1, 0]]<br /><strong>Output:&nbsp;</strong>[2, 1, 0]<br /><strong>Explanation:<br /></strong></span><span >Man 0 is married to Woman 2 (his third choice and her third choice).<br /></span><span >Man 1 is married to Woman 1 (his second choice and her second choice).<br /></span><span >Man 2 is married to Woman 0 (his first choice and her first choice).<br /></span></pre>\n<p><span ><strong>Constraints:</strong>&nbsp;</span></p>\n<ul>\n<li><span >2 &lt;= n &lt;= 10^3</span></li>\n<li><span >0 &lt;= men[i] &lt;= n - 1</span></li>\n<li><span >0 &lt;= women[i] &lt;= n - 1</span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'n' men and 'n' women, where each person ranks all members of the opposite gender in order of preference, the goal is to find a stable matching. A stable matching pairs each man with a woman such that every man is paired with exactly one woman and vice versa, and there is no pair who would both prefer to be matched with each other over their current partners.  You are provided with two arrays, `men[]` and `women[]`, where `men[i]` stores the preference list of the i-th man and `women[i]` stores the preference list of the i-th woman. Return a list of integers, where the i-th element represents the index of the woman that the i-th man is married to (0-based index).",
                "constraints": [
                    "2 <= n <= 10^3",
                    "0 <= men[i][j] <= n - 1",
                    "0 <= women[i][j] <= n - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 2, men[] = [[0, 1], [0, 1]], women[] = [[0, 1], [0, 1]]",
                        "output": "[0, 1]",
                        "explanation": "Man 0 is matched with Woman 0, who is his first choice, and she also prefers him the most from available options. Similarly, Man 1 is matched with Woman 1."
                    },
                    {
                        "input": "n = 3, men[] = [[0, 1, 2], [0, 1, 2], [0, 1, 2]], women[] = [[2, 1, 0], [2, 1, 0], [2, 1, 0]]",
                        "output": "[2, 1, 0]",
                        "explanation": "Man 0 is matched with Woman 2, Man 1 with Woman 1, and Man 2 with Woman 0.  Each man is matched with the woman who is ranked according to women array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Simulate n free men proposing to women in decreasing order of their preference. Every time a man proposes to a women, she will accept his proposal if she's free or engaged to a man which has lower preference than the current man. Continue till all free men are married.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<int> stableMarriage(vector<vector<int>> &men, vector<vector<int>> &women) {\n        int n = men.size();\n\n        vector<int> menPairs(n, -1), womenPairs(n, -1);\n        vector<int> nextProposals(n, 0);\n        queue<int> freeMen;\n\n        vector<vector<int>> womenPref(n, vector<int>(n));\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                int preferredMan = women[i][j];\n                womenPref[i][preferredMan] = j;\n            }\n        }\n\n        for (int i = 0; i < n; i++)\n            freeMen.push(i);\n\n        while (freeMen.size() > 0) {\n            int man = freeMen.front();\n            freeMen.pop();\n\n            int nextWoman = men[man][nextProposals[man]];\n            nextProposals[man] += 1;\n\n            // If next woman is not paired yet\n            if (womenPairs[nextWoman] == -1) {\n                womenPairs[nextWoman] = man;\n                menPairs[man] = nextWoman;\n            }\n\n            // If the next woman is paired\n            else {\n\n                int currMan = womenPairs[nextWoman];\n                if (womenPref[nextWoman][man] < womenPref[nextWoman][currMan]) {\n                    womenPairs[nextWoman] = man;\n                    menPairs[man] = nextWoman;\n                    freeMen.push(currMan);\n                } else {\n                    freeMen.push(man);\n                }\n            }\n        }\n        return menPairs;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public int[] stableMarriage(int[][] men, int[][] women) {\n        int n = men.length;\n\n        int[] menPairs = new int[n];\n        Arrays.fill(menPairs, -1);\n\n        int[] womenPairs = new int[n];\n        Arrays.fill(womenPairs, -1);\n\n        int[] nextProposals = new int[n];\n        Queue<Integer> freeMen = new LinkedList<>();\n\n        int[][] womenPref = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                int preferredMan = women[i][j];\n                womenPref[i][preferredMan] = j;\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            freeMen.offer(i);\n        }\n\n        while (!freeMen.isEmpty()) {\n            int man = freeMen.poll();\n\n            int nextWoman = men[man][nextProposals[man]];\n            nextProposals[man]++;\n\n            // If next woman is not paired yet\n            if (womenPairs[nextWoman] == -1) {\n                womenPairs[nextWoman] = man;\n                menPairs[man] = nextWoman;\n            }\n            // If the next woman is paired\n            else {\n                int currMan = womenPairs[nextWoman];\n                if (womenPref[nextWoman][man] < womenPref[nextWoman][currMan]) {\n                    womenPairs[nextWoman] = man;\n                    menPairs[man] = nextWoman;\n                    freeMen.offer(currMan);\n                } else {\n                    freeMen.offer(man);\n                }\n            }\n        }\n        return menPairs;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def stableMarriage(self, men, women):\n        n = len(men)\n\n        menPairs = [-1] * n\n        womenPairs = [-1] * n\n        nextProposals = [0] * n\n        freeMen = []\n\n        womenPref = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                preferredMan = women[i][j]\n                womenPref[i][preferredMan] = j\n\n        for i in range(n):\n            freeMen.append(i)\n\n        while len(freeMen) > 0:\n            man = freeMen.pop(0)\n\n            nextWoman = men[man][nextProposals[man]]\n            nextProposals[man] += 1\n\n            # If next woman is not paired yet\n            if womenPairs[nextWoman] == -1:\n                womenPairs[nextWoman] = man\n                menPairs[man] = nextWoman\n            # If the next woman is paired\n            else:\n                currMan = womenPairs[nextWoman]\n                if womenPref[nextWoman][man] < womenPref[nextWoman][currMan]:\n                    womenPairs[nextWoman] = man\n                    menPairs[man] = nextWoman\n                    freeMen.append(currMan)\n                else:\n                    freeMen.append(man)\n\n        return menPairs\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    stableMarriage(men, women) {\n        const n = men.length;\n\n        const menPairs = Array(n).fill(-1);\n        const womenPairs = Array(n).fill(-1);\n        const nextProposals = Array(n).fill(0);\n        const freeMen = [];\n\n        const womenPref = Array.from({length : n}, () => Array(n).fill(0));\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < n; j++) {\n                const preferredMan = women[i][j];\n                womenPref[i][preferredMan] = j;\n            }\n        }\n\n        for (let i = 0; i < n; i++) {\n            freeMen.push(i);\n        }\n\n        while (freeMen.length > 0) {\n            const man = freeMen.shift();\n\n            const nextWoman = men[man][nextProposals[man]];\n            nextProposals[man]++;\n\n            if (womenPairs[nextWoman] === -1) {\n                womenPairs[nextWoman] = man;\n                menPairs[man] = nextWoman;\n            } else {\n                const currMan = womenPairs[nextWoman];\n                if (womenPref[nextWoman][man] < womenPref[nextWoman][currMan]) {\n                    womenPairs[nextWoman] = man;\n                    menPairs[man] = nextWoman;\n                    freeMen.push(currMan);\n                } else {\n                    freeMen.push(man);\n                }\n            }\n        }\n\n        return menPairs;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}