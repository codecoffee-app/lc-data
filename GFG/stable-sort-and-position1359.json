{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703104,
            "title": "Stable Sort and Position",
            "titleSlug": "stable-sort-and-position1359",
            "content": "<p><span >Given an array <strong>arr</strong> integers that may contain duplicate elements, the index of an element of this array is given to us <strong>k </strong>(0-based indexing), the task is to find the final position of this element in the array after the stable sort is applied to the array.&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[]= [3, 4, 3, 5, 2, 3, 4, 3, 1, 5], k = 5\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: Element initial index &ndash; 5 (3) After sorting array by stable sorting algorithm, we get array as shown [1(8), 2(4), 3(0), 3(2), 3(5), 3(7), 4(1), 4(6), 5(3), 5(9)] with their initial indices shown in parentheses next to them.</span></pre>\n<pre><span ><strong>Input:</strong> arr[]= [3, 4, 3, 5, 2, 3, 4, 3, 1, 5], k = 2\n<strong>Output:</strong> 3\n<strong>Explanation</strong>: Element initial index &ndash; 2 (3) After sorting array by stable sorting algorithm, we get array as shown [1(8), 2(4), 3(0), 3(2), 3(5), 3(7), 4(1), 4(6), 5(3), 5(9)] with their initial indices shown in parentheses next to them.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6<br /></sup>1 &le; arr[i] &le; 10<sup>5</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of integers that may contain duplicate elements, and an index `k` (0-based indexing), find the final position of the element at index `k` after applying a stable sort to the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr = [3, 4, 3, 5, 2, 3, 4, 3, 1, 5], k = 5",
                        "output": "4",
                        "explanation": "The element at index 5 is 3. After stably sorting the array, the array becomes [1, 2, 3, 3, 3, 3, 4, 4, 5, 5].  The element that was originally at index 5 (which is the third '3') ends up at index 4 after sorting."
                    },
                    {
                        "input": "arr = [3, 4, 3, 5, 2, 3, 4, 3, 1, 5], k = 2",
                        "output": "3",
                        "explanation": "The element at index 2 is 3. After stably sorting the array, the array becomes [1, 2, 3, 3, 3, 3, 4, 4, 5, 5]. The element that was originally at index 2 (which is the second '3') ends up at index 3 after sorting."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >As the position of an element in a sorted array is decided by only those elements that are smaller than a given element. We count all array elements smaller than the given element and for those elements that are equal to the given element, elements occurring before the given elements&rsquo; index will be included in the count of smaller elements this will ensure the stability of the result&rsquo;s index.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n\n  public:\n    // Function to get the index of an element in a sorted array.\n    int getIndexInSortedArray(vector<int>& arr, int k) {\n        int result = 0;\n        int n = arr.size();\n        // iterating over the array to compare elements.\n        for (int i = 0; i < n; i++) {\n            // if element is less than the element at given index, increment result.\n            if (arr[i] < arr[k])\n                result++;\n            // if element is equal to the element at given index and occurs before it,\n            // increment result.\n            if (arr[i] == arr[k] && i < k)\n                result++;\n        }\n        // returning the result.\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to get the index of an element in a sorted array\n    public int getIndexInSortedArray(int[] arr, int k) {\n        int result = 0;\n        int n = arr.length;\n\n        // Iterating over the array to compare elements\n        for (int i = 0; i < n; i++) {\n            // If element is less than the element at given index, increment result\n            if (arr[i] < arr[k]) {\n                result++;\n            }\n\n            // If element is equal to the element at given index and occurs before it,\n            // increment result\n            if (arr[i] == arr[k] && i < k) {\n                result++;\n            }\n        }\n        // Returning the result\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to get the index of an element in a sorted array\n    def getIndexInSortedArray(self, arr, k):\n        result = 0\n        n = len(arr)\n\n        # Iterating over the array to compare elements\n        for i in range(n):\n            # If element is less than the element at given index, increment result\n            if arr[i] < arr[k]:\n                result += 1\n\n            # If element is equal to the element at given index and occurs before it, increment result\n            if arr[i] == arr[k] and i < k:\n                result += 1\n\n        # Returning the result\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to get the index of an element in a sorted array\n    getIndexInSortedArray(arr, k) {\n        let result = 0;\n        let n = arr.length;\n\n        // Iterating over the array to compare elements\n        for (let i = 0; i < n; i++) {\n            // If element is less than the element at given index, increment result\n            if (arr[i] < arr[k]) {\n                result++;\n            }\n\n            // If element is equal to the element at given index and occurs before it,\n            // increment result\n            if (arr[i] === arr[k] && i < k) {\n                result++;\n            }\n        }\n        // Returning the result\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}