{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700902,
            "title": "Stack designer",
            "titleSlug": "stack-designer",
            "content": "<p><span style=\"font-size: 18px;\">You are given an integer array <strong>arr[]</strong>. You need to push the elements of the array into a stack and then print them while popping.<br /><strong>Note:&nbsp;</strong>No need to print extra line after printing the stack elements.<br /></span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong><span style=\"font-size: 18px;\"><strong> </strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [1, 2, 3, 4, 5]\n<strong>Output: </strong>5 4 3 2 1<br /><strong>Explanation: </strong>Elements are pushed and then popped from the top of the stack in the order 5, 4, 3, 2, 1.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> </span><span style=\"font-size: 18px;\">arr = [1, 6, 43, 1, 2, 0, 5]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> </span><span style=\"font-size: 18px;\">5 0 2 1 43 6 1</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= arr[i] &lt;= 10<sup>7</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr[]`, push all elements onto a stack and then print the elements as they are popped from the stack.  The output should be a space-separated sequence of the popped elements.",
                "constraints": [
                    "1 <= arr[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5]",
                        "output": "5 4 3 2 1",
                        "explanation": "The elements are pushed onto the stack in the order 1, 2, 3, 4, 5. They are then popped and printed in reverse order: 5, 4, 3, 2, 1."
                    },
                    {
                        "input": "[1, 6, 43, 1, 2, 0, 5]",
                        "output": "5 0 2 1 43 6 1",
                        "explanation": "The elements are pushed onto the stack in the order 1, 6, 43, 1, 2, 0, 5. They are then popped and printed in reverse order: 5, 0, 2, 1, 43, 6, 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">Basically push operation in stack is insertion in stack and pop is deletion from stack. Moreover, push and pop operation can be performed only on the&nbsp;top of the stack.This is called as LIFO( Last In First Out).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n// Function to push elements of an array into a stack.\nstack<int> push(vector<int> &arr) {\n    int n = arr.size();\n    stack<int> s;\n    for (int i = 0; i < n; i++) {\n        s.push(arr[i]);\n    }\n    return s;\n}\n\n// Function to pop elements from a stack and print them.\nvoid pop(stack<int> s) {\n    while (!s.empty()) {\n        cout << s.top() << \" \";\n        s.pop();\n    }\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\npublic static Stack<Integer> _push(int arr[]) {\n    // Creating a Stack of type Integer\n    Stack<Integer> s = new Stack<>();\n    int n = arr.length;\n    // Pushing all the elements of the ArrayList\n    // to the Stack\n    for (int i = 0; i < n; i++) {\n        s.push(arr[i]);\n    }\n    // returning the Stack\n    return s;\n}\n\npublic static void _pop(Stack<Integer> s) {\n    // Poping and printing the\n    // elements of the Stack\n    while (!s.empty()) {\n        System.out.print(s.peek() + \" \");\n        s.pop();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "def _push(arr):\n    # Creating a Stack using a list\n    stack = []\n\n    # Pushing all the elements of the array to the stack\n    for element in arr:\n        stack.append(element)\n\n    # returning the stack\n    return stack\n\n\ndef _pop(stack):\n    # Popping and printing the elements of the stack\n    while stack:\n        print(stack[-1], end=\" \")\n        stack.pop()\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    _push(arr) {\n        let s = []; // Initialize an empty stack.\n        for (let it of arr) {\n            s.push(it); // Push each element from the given array into the stack.\n        }\n        return s; // Return the stack.\n    }\n\n    _pop(s) {\n        let o = \"\"; // Initialize an empty string to store the popped elements.\n        while (s.length > 0) {\n            o += s.pop() +\n                 \" \"; // Pop each element from the stack and append it to the string.\n        }\n        console.log(o); // Print the popped elements separated by spaces.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}