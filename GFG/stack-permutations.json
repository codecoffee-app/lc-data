{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710056,
            "title": "Stack Permutations",
            "titleSlug": "stack-permutations",
            "content": "<p><span >You are given two arrays <strong>a[]</strong> and<strong> b[] </strong>of unique elements of&nbsp; same size . Check if&nbsp; array <strong>b[]</strong> is a stack permutation of the array <strong>a[] </strong>or not. Stack permutation means that array&nbsp;<strong>b[]</strong>&nbsp;can be created from array&nbsp;<strong>a[]&nbsp;</strong>using a stack and stack operations.<br /><br /></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>a[]=[1, 2, 3], b[]=[2 ,1 ,3]\n<strong>Output: </strong>True\n<strong>Explanation:</strong>\n1. push 1 from A to stack\n2. push 2 from A to stack\n3. pop 2 from stack to B\n4. pop 1 from stack to B\n5. push 3 from A to stack\n6. pop 3 from stack to B</span></pre>\n<pre><span ><strong><br />Input: </strong>a[]=[1, 2, 3], b[]=[3 ,1 ,2]\n<strong>Output: </strong>False\n<strong>Explanation:</strong>Not Possible<br /></span></pre>\n<p><span ><strong>Constraints:</strong><br />1&nbsp;<span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito;\">&le;</span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito;\"> a.size()=b.size()</span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito;\">&le;</span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito;\"> </span>&nbsp;10<sup>5<br /></sup>0&nbsp;<span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito;\">&le;</span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito;\"> </span>&nbsp;a[i], b[i] <span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito;\">&le;</span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito;\"> </span>&nbsp;2*10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Can we maintain two&nbsp;queues and check one can be created by the other one using a stack.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "implementation",
                "slug": "implementation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool checkPerm(vector<int>& a, vector<int>& b) {\n        stack<int> st;\n        int j = 0;\n\n        // Traverse a[]\n        for (int i = 0; i < a.size(); i++) {\n\n            // Push top of a[] to stack\n            st.push(a[i]);\n\n            // Keep popping from stack while it\n            // matches front of the output queue\n            while (!st.empty() && st.top() == b[j]) {\n                st.pop();\n                j++;\n            }\n        }\n\n        return (j == b.size());\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean checkPerm(int[] a, int[] b) {\n        Stack<Integer> st = new Stack<>();\n        int j = 0;\n\n        // Iterate through each element in input array 'a'\n        for (int num : a) {\n            st.push(num);\n\n            // If the top of the stack matches the next element in 'b', pop it\n            while (!st.isEmpty() && st.peek() == b[j]) {\n                st.pop();\n                j++;\n            }\n        }\n\n        // If 'j' has reached the end of 'b', it's a valid stack permutation\n        return j == b.length;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nfrom collections import deque\n\n\nclass Solution:\n\n    def checkPerm(self, a, b):\n        # Stack to simulate the process\n        st = []\n        j = 0\n\n        # Iterate through each element in input list 'a'\n        for num in a:\n            st.append(num)\n\n            # If the top of the stack matches the next element in 'b', pop it\n            while st and st[-1] == b[j]:\n                st.pop()\n                j += 1\n        # If 'j' has reached the end of 'b', it's a valid stack permutation\n        return j == len(b)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    checkPerm(a, b) {\n        const stack = [];\n        let j = 0;\n\n        // Traverse a[]\n        for (let i = 0; i < a.length; i++) {\n\n            // Push top of a[] to stack\n            stack.push(a[i]);\n\n            // Keep popping from stack while it\n            // matches front of the output queue\n            while (stack.length > 0 && stack[stack.length - 1] === b[j]) {\n                stack.pop();\n                j++;\n            }\n        }\n\n        return j === b.length;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}