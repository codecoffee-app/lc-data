{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700198,
      "title": "Stack using two queues",
      "titleSlug": "stack-using-two-queues",
      "content": "<p><span >Implement a Stack&nbsp;using two queues<strong>&nbsp;q1</strong>&nbsp;and<strong>&nbsp;q2</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:\n</strong>push(2)\npush(3)\npop()\npush(4)\npop()<strong>\nOutput: </strong>3 4\n<strong>Explanation:\n</strong>push(2) stack will be [2]\npush(3) stack will be [2 3]\npop()   popped element will be 3 the stack will be [2] \npush(4) the stack will be [2 4]\npop() &nbsp; popped element will be 4  </span></pre>\n<pre><span ><strong>Input:\n</strong>push(2)\npop()\npop()\npush(3)<strong>\nOutput: </strong>2 -1<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:<br /></strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">push( 2 ) stack will be [ 2 ]</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><br />pop( ) popped element will be 2<br />pop( ) stack is empty so popped element will be -1<br />push( ) stack will be [ 3 ]</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1&lt;=Number of queries&lt;=100<br />1&lt;= size of stack&lt;=100</span></p>",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Implement a Stack data structure using two queues, q1 and q2. The stack should support push and pop operations.",
        "constraints": [
          "1 <= Number of queries <= 100",
          "1 <= size of stack <= 100"
        ],
        "testcases": [
          {
            "input": "push(2)\npush(3)\npop()\npush(4)\npop()",
            "output": "3 4",
            "explanation": "The following operations are performed:\n- push(2): Stack becomes [2]\n- push(3): Stack becomes [2, 3]\n- pop():  Removes and returns 3, Stack becomes [2]\n- push(4): Stack becomes [2, 4]\n- pop():  Removes and returns 4, Stack becomes [2]"
          },
          {
            "input": "push(2)\npop()\npop()\npush(3)",
            "output": "2 -1",
            "explanation": "The following operations are performed:\n- push(2): Stack becomes [2]\n- pop(): Removes and returns 2, Stack becomes []\n- pop(): Stack is empty, returns -1\n- push(3): Stack becomes [3]"
          }
        ]
      }
    },
    "similar": [],
    "hints": ["<p>&nbsp;</p>\n\n<ul>\n</ul>"],
    "relatedTopics": [
      {
        "name": "Stack",
        "slug": "stack"
      },
      {
        "name": "Queue",
        "slug": "queue"
      },
      {
        "name": "Design-Pattern",
        "slug": "design-pattern"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": [
      "accolite",
      "amazon",
      "microsoft",
      "oyo-rooms",
      "snapdeal",
      "de-shaw",
      "oracle",
      "adobe",
      "cisco",
      "grofers",
      "coupondunia",
      "kritikal-solutions"
    ],
    "solutions": [
      {
        "lang": "C",
        "full_func": "//Back-end complete function Template for C\n\n// Function to push an element into stack using two queues.\nvoid push(struct Queue *q1, struct Queue *q2, int num) {\n    // while first queue is not empty, we keep popping the front element\n    // from first queue and storing that element in second queue.\n    while (!isEmpty(q1)) {\n        int k = front(q1);\n\n        // popping element from first queue.\n        dequeue(q1);\n\n        // pushing it into second queue.\n        enqueue(q2, k);\n    }\n\n    // q1 is empty now and we push the given number into first queue.\n    enqueue(q1, num);\n\n    // while second queue is not empty, we keep popping the front element\n    // from second queue and storing that element in first queue.\n    while (!isEmpty(q2)) {\n        int k = front(q2);\n        // popping element from second queue.\n        dequeue(q2);\n\n        // pushing it into first queue.\n        enqueue(q1, k);\n    }\n}\n\n// Function to pop an element from stack using two queues.\nint pop(struct Queue *q1) {\n    if (!isEmpty(q1)) {\n        // we store the front element from the queue in a\n        // variable and pop that element.\n        int r = front(q1);\n        dequeue(q1);\n\n        // returning the popped element.\n        return r;\n    }\n    // else we return -1.\n    return -1;\n}\n",
        "lang_text": "c"
      },
      {
        "lang": "C++",
        "full_func": "// push operation\n\n\n//Function to push an element into stack using two queues.\nvoid QueueStack ::push(int num){\n    \n    //while first queue is not empty, we keep popping the front element\n    //from first queue and storing that element in second queue.\n    while(!q1.empty())\n    {\n        int k = q1.front();\n        \n        //popping element from first queue.\n        q1.pop();\n        \n        //pushing it into second queue.\n        q2.push(k);\n    }\n    \n    //q1 is empty now and we push the given number into first queue.\n    q1.push(num);\n    \n    //while second queue is not empty, we keep popping the front element\n    //from second queue and storing that element in first queue.\n    while(!q2.empty())\n    {\n        int k = q2.front();\n        //popping element from second queue.\n        q2.pop();\n        \n        //pushing it into first queue.\n        q1.push(k);\n    }\n}\n//Function to pop an element from stack using two queues. \nint QueueStack ::pop(){\n\n    //if first queue is not empty, then we can pop an element.\n    if(!q1.empty())\n    {\n        //we store the front element from the queue in a \n        //variable and pop that element.\n        int r = q1.front();\n        q1.pop();\n        \n        //returning the popped element.\n        return r;\n    }\n    //else we return -1.\n    return -1;\n}\n",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "\nclass Queues\n{\n\tQueue<Integer> q1 = new LinkedList<Integer>();\n\tQueue<Integer> q2 = new LinkedList<Integer>();\n\t\n\t//Function to push an element into stack using two queues.\n\tvoid push(int a)\n\t{\n\t\t//while first queue is not empty, we keep popping the front element\n        //from first queue and storing that element in second queue.\n\t\twhile(!q1.isEmpty())\n\t\t{\n\t\t\tint k = q1.peek();\n\t\t\t\n\t\t\t//popping element from first queue.\n\t\t\tq1.remove();\n\t\t\t\n\t\t\t//pushing it into second queue.\n\t\t\tq2.add(k);\n\t\t}\n\t\t\n\t\t//q1 is empty now and we push the given number into first queue.\n\t\tq1.add(a);\n\t\t\n\t\t//while second queue is not empty, we keep popping the front element\n        //from second queue and storing that element in first queue.\n\t\twhile(!q2.isEmpty())\n\t\t{\n\t\t\tint k = q2.peek();\n\t\t\t//popping element from second queue.\n\t\t\tq2.remove();\n\t\t\t\n\t\t\t//pushing it into first queue.\n\t\t\tq1.add(k);\n\t\t\t\n\t\t}\n\t}\n\t\n\t//Function to pop an element from stack using two queues. \n\tint pop()\n\t{\n\t    //if first queue is not empty, then we can pop an element.\n\t\tif(!q1.isEmpty())\n\t\t{\n\t\t    //we store the front element from the queue in a \n            //variable and pop that element.\n\t\t\tint r = q1.peek();\n\t\t\tq1.remove();\n\t\t\t\n\t\t\t//returning the popped element.\n\t\t\treturn r;\n\t\t}\n\t\t//else we return -1.\n\t\treturn -1;\n\t}\n\t\n}\n\n\n",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "#Function to push an element into stack using two queues.\ndef push(x):\n    \n    global queue_1\n    global queue_2\n\n    #second queue is empty and we push the given number into second queue.\n    queue_2.put(x)\n\n    #while first queue is not empty, we keep popping the front element\n    #from first queue and storing that element in second queue.\n    while not queue_1.empty():\n        \n        #pushing front element into second queue.\n        queue_2.put(queue_1.get())\n        \n        #popping element from first queue.\n        \n\n    #transfering all elements from queue 2 to queue 1, by swapping the names.\n    queue_1 , queue_2 =queue_2 , queue_1\n\ndef pop():\n    \n    global queue_1\n    global queue_2\n    \n    #if first queue is not empty, then we can pop an element.\n    if not queue_1.empty():\n        #returning the popped element.\n        return queue_1.get()\n        \n    #else we return -1.\n    else:\n        return -1\n",
        "lang_text": "python3"
      },
      {
        "lang": "C#",
        "full_func": "// User function Template for C#\n\nclass Solution {\n    private Queue<int> q1;\n    private Queue<int> q2;\n\n    public Solution() {\n        q1 = new Queue<int>();\n        q2 = new Queue<int>();\n    }\n\n    // Function to push an element into stack using two queues.\n    public void push(int x) {\n        // while first queue is not empty, we keep popping the front element\n        // from first queue and storing that element in second queue.\n        while (q1.Count != 0) {\n            int k = q1.Peek();\n\n            // popping element from first queue.\n            q1.Dequeue();\n\n            // pushing it into second queue.\n            q2.Enqueue(k);\n        }\n\n        // q1 is empty now and we push the given number into first queue.\n        q1.Enqueue(x);\n\n        // while second queue is not empty, we keep popping the front element\n        // from second queue and storing that element in first queue.\n        while (q2.Count != 0) {\n            int k = q2.Peek();\n            // popping element from second queue.\n            q2.Dequeue();\n\n            // pushing it into first queue.\n            q1.Enqueue(k);\n        }\n    }\n\n    // Function to pop an element from stack using two queues.\n    public int pop() {\n        // if first queue is not empty, then we can pop an element.\n        if (q1.Count != 0) {\n            // we store the front element from the queue in a\n            // variable and pop that element.\n            int r = q1.Peek();\n            q1.Dequeue();\n\n            // returning the popped element.\n            return r;\n        }\n        // else we return -1.\n        return -1;\n    }\n}",
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": "//Back-end complete function Template for javascript\n\n/*\nclass Queue{\n    constructor(){\n        this.arr = [];\n        this.front = 0;\n    }\n    \n    push(a){\n        this.arr.push(a);\n    }\n    \n    pop(){\n        if(this.arr.length != this.front){\n            let x = this.arr[this.front];\n            this.front++;\n            return x;\n        }\n        else\n            return -1;\n    }\n    \n    front_ele(){\n        return this.arr[this.front];\n    }\n    \n    empty(){\n        if(this.arr.length != this.front)\n            return false;\n        else\n            return true;\n    }\n}\n*/\n\nclass QueueStack{\n    constructor(){\n        this.q1 = new Queue();  \n        this.q2 = new Queue();  \n    }\n    \n    /**\n     * @param {number} x\n    */\n    \n    //Function to push an element into stack using two queues.\n    push(x)\n    {\n        //while first queue is not empty, we keep popping the front element\n        //from first queue and storing that element in second queue.\n        while(!this.q1.empty())\n        {\n            let k = this.q1.front_ele();\n            \n            //popping element from first queue.\n            this.q1.pop();\n            \n            //pushing it into second queue.\n            this.q2.push(k);\n        }\n        \n        //q1 is empty now and we push the given number into first queue.\n        this.q1.push(x);\n        \n        //while second queue is not empty, we keep popping the front element\n        //from second queue and storing that element in first queue.\n        while(!this.q2.empty())\n        {\n            let k = this.q2.front_ele();\n            //popping element from second queue.\n            this.q2.pop();\n            \n            //pushing it into first queue.\n            this.q1.push(k);\n        }\n    }\n    \n    /**\n     * @returns {number}\n    */\n    \n    //Function to pop an element from stack using two queues. \n    pop()\n    {\n        //if first queue is not empty, then we can pop an element.\n        if(!this.q1.empty())\n        {\n            //we store the front element from the queue in a \n            //variable and pop that element.\n            let r = this.q1.front_ele();\n            this.q1.pop();\n            \n            //returning the popped element.\n            return r;\n        }\n        //else we return -1.\n        return -1;\n    }\n}\n",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
