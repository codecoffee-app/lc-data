{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703657,
            "title": "Stacking Up Discs",
            "titleSlug": "stacking-up-discs1315",
            "content": "<p><span style=\"font-size:18px\">Given <strong>N</strong> number of circular discs. Each of the discs has a radius <strong>R</strong> and a thickness (height) <strong>H</strong>.&nbsp; A&nbsp;disc of radius R<sub>1</sub> and height H<sub>1</sub>&nbsp;can be placed above another disc of radius<strong> </strong>R<sub>2</sub><strong> </strong>and height H<sub>2</sub> if and only if <strong>R<sub>1</sub></strong> &lt; <strong>R<sub>2</sub></strong> and <strong>H<sub>1</sub></strong> &lt; <strong>H<sub>2</sub></strong>.</span></p>\n\n<p><span style=\"font-size:18px\">Find out the height of the&nbsp;highest stack of discs that can be made.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN=3\nR1=5 H1=6\nR2=7 H2=5\nR3=3 H3=4</span><span style=\"font-size:18px\">\n<strong>Output: </strong>10\n<strong>Explanation: \n</strong>(3, 4)&lt;(5, 6)and(3, 4)&lt;(7, 5).\nSo we have two options but if we put \n(3, 4) above (5, 6) we get height of \n10 and if we put(3, 4) on (7, 5) \nwe get height of 9.\nThe answer is thus 10. Note we \ncan put (5,6) over (7,5) as 6&gt;5.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN=2\nR1=3 H1=7\nR2=7 H2=4\n<strong>Output:</strong>7\n<strong>Explanation:</strong>We cannot place any of the\ndiscs on top of another,So maximum height\nis 7(of the first disc).</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>StackingUpDiscs()&nbsp;</strong>which takes the integer N and the two arrays R and H as input parameter&nbsp;and returns the height&nbsp;of the highest stack that can be made from the given discs.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(N^2)<br />\n<strong>Expected Auxillary Space:</strong>O(N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; <strong>N</strong> &le; 1000<br />\n1 &le; <strong>R<sub>i</sub>,H<sub>i</sub></strong> &le; 10<sup>5</sup> for 1&lt;=<strong>i</strong>&lt;=&nbsp;N</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given N circular discs, each with a radius R and a thickness (height) H. A disc with radius R1 and height H1 can be placed on top of another disc with radius R2 and height H2 if and only if R1 < R2 and H1 < H2. Determine the maximum possible height of a stack that can be formed from the given discs.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= Ri, Hi <= 10^5 for 1 <= i <= N"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nR1 = 5, H1 = 6\nR2 = 7, H2 = 5\nR3 = 3, H3 = 4",
                        "output": "10",
                        "explanation": "We have three discs: (5, 6), (7, 5), and (3, 4).  The disc (3, 4) can be placed on top of both (5, 6) and (7, 5). If we place (3, 4) on top of (5, 6), the stack height is 4 + 6 = 10. If we place (3, 4) on top of (7, 5), the stack height is 4 + 5 = 9. Therefore, the maximum stack height is 10."
                    },
                    {
                        "input": "N = 2\nR1 = 3, H1 = 7\nR2 = 7, H2 = 4",
                        "output": "7",
                        "explanation": "We have two discs: (3, 7) and (7, 4). Since the height of the first disc is greater than the height of the second disc, and the radius of the first disc is less than the radius of the second disc, we can't stack either disc on top of the other. The maximum height is thus the height of the tallest individual disc, which is 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to think about Memoization.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function template for C++\n\nclass Solution {\npublic:\n    // Function to calculate the maximum sum of heights of stacked discs.\n    int StackingUpDiscs(int N, int R[], int H[]) {\n        // Creating a pair array to store the radius and height of discs.\n        pair <int,int> A[N];\n        for (int i = 0; i < N; i++) {\n            A[i].first = R[i];\n            A[i].second = H[i];\n        }\n        \n        // Sorting the discs based on their radius.\n        sort(A, A + N);\n        \n        int dp[N];\n        memset(dp, -1, sizeof(dp));\n        dp[0] = A[0].second;\n        \n        // Looping through all the discs to calculate the maximum possible sum.\n        for (int i = 1; i < N; i++) {\n            int maximum = 0;\n            for (int j = i - 1; j >= 0; j--) {\n                // Checking if the current disc can be stacked on top of the previous disc.\n                if (A[i].first > A[j].first && A[i].second > A[j].second)\n                    maximum = max(maximum, dp[j]);\t\t\n            }\n            // Updating the maximum sum by adding the current disc's height to the maximum sum so far.\n            dp[i] = maximum + A[i].second;\n        }\n        \n        int maxsum = -1;\n        \n        // Finding the maximum sum of heights.\n        for (int i = 0; i < N; i++) {\n            if (dp[i] > maxsum)\n                maxsum = dp[i];\n        }\n        \n        return maxsum;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}