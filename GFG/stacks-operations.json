{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700890,
            "title": "Stack Operations",
            "titleSlug": "stacks-operations",
            "content": "<p><em><span style=\"font-size: 18px;\">This Java module deals with Stacks, Queues, and ArrayLists. We'll perform various operations on them.</span></em></p>\n<p><span style=\"font-size: 18px;\">Given a <strong>stack </strong>of <strong>integers </strong>and <strong>Q</strong> queries. The task is to perform operation on stack according to the query.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong><span style=\"background-color: transparent; font-family: arial;\">: use </span><a style=\"text-decoration: none;\" href=\"https://www.geeksforgeeks.org/stack-push-method-in-java/\"><u>push()</u></a><span style=\"background-color: transparent; font-family: arial;\"> to add element in the stack, </span><a style=\"text-decoration: none;\" href=\"https://www.geeksforgeeks.org/stack-peek-method-in-java/\"><u>peek()</u></a><span style=\"background-color: transparent; font-family: arial;\"> to get topmost element without removal, </span><a style=\"text-decoration: none;\" href=\"https://www.geeksforgeeks.org/stack-pop-method-in-java/\"><u>pop()</u></a><span style=\"background-color: transparent; font-family: arial;\"> gives topmost element with removal, </span><a style=\"text-decoration: none;\" href=\"https://www.geeksforgeeks.org/stack-search-method-in-java/\"><u>search()</u></a><span style=\"background-color: transparent; font-family: arial;\"> to return position if found else <strong>-1</strong>.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Input Format:</strong><br />First line of input contains nubmer of testcases <strong>T</strong>. For each testcase, first line of input contains Q, number of queries. Next line contains Q queries seperated by space. Queries are as:</span></p>\n<ol>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>i x :</strong> (<strong>adds </strong>element x in the stack)</span>.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>r :</strong> (<strong>returns </strong>and <strong>removes </strong>the topmost element from the stack).</span></span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>h :</strong> </span>Prints the topmost element.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>f y :</strong> (check if the <strong>element </strong>y is <strong>present or not </strong>in the stack).</span> Print \"<strong>Yes</strong>\" if present, else \"<strong>No</strong>\".</span></p>\n</li>\n</ol>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Output Format:</strong><br />For each testcase, perform Q queries and print the output wherever required.</span></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Your task is to complete functions <strong>insert()</strong>, <strong>remove()</strong>, <strong>headOf_Stack()</strong> and <strong>find()</strong>, to insert, remove returning top element and finding the elment in stack respectively.</span></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= T &lt;= 100<br />1 &lt;= Q &lt;= 10<sup>3</sup></span></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Example:<br />Input:</strong><br />2<br />6<br />i 2 i 4 i 3 i 5 h f 8<br />4<br />i 3 i 4 r f 3</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Output:</strong><br />5<br />No<br />Yes</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Explanation:<br />Testcase 1:</strong> Inserting 2, 4, 3, and 5 onto the stack. Returning top element which is 5. Finding 8 will give No, as 8 is not in the stack.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "This Java module focuses on implementing and utilizing Stacks with integer elements. You are given a series of queries (Q) to perform on a stack.  The allowed operations are:\n\n*   **i x:** Insert the integer *x* onto the top of the stack.\n*   **r:** Remove and return the integer at the top of the stack.\n*   **h:** Print the integer at the top of the stack (without removing it).\n*   **f y:** Check if the integer *y* is present in the stack. Print \"Yes\" if it is found, and \"No\" otherwise.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= Q <= 10^3 (Number of queries)"
                ],
                "testcases": [
                    {
                        "input": "6\ni 2 i 4 i 3 i 5 h f 8",
                        "output": "5\nNo",
                        "explanation": "The stack operations result in the following: Inserting 2, 4, 3, and 5. The top element is 5, which is printed. Searching for 8 returns false because 8 is not in the stack, so \"No\" is printed."
                    },
                    {
                        "input": "4\ni 3 i 4 r f 3",
                        "output": "Yes",
                        "explanation": "The stack operations are: Inserting 3 and 4.  The top element (4) is removed.  Searching for 3 returns true because 3 is still in the stack, so \"Yes\" is printed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": null,
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n// Helper class to implement functions\r\n// insert : to insert element to stack\r\n// remove : to pop element from stack\r\n// headOf_Stack : to return top of stack\r\n// find : to find the element in stack\r\nclass Geeks\r\n{\r\n    // Function to insert element to stack\r\n    public static void insert(Stack<Integer> st, int x)\r\n    {\r\n        st.push(x);\r\n    }\r\n    \r\n    // Function to pop element from stack\r\n    public static void remove(Stack<Integer> st)\r\n    {\r\n        int x = st.pop();\r\n    }\r\n    \r\n    // Function to return top of stack\r\n    public static void headOf_Stack(Stack<Integer> st)\r\n    {\r\n        int x = st.peek();\r\n        System.out.println(x + \" \");\r\n    }\r\n    \r\n    // Function to find the element in stack\r\n    public static void find(Stack<Integer> st, int val)\r\n    {\r\n        if(st.search(val) >= 0){\r\n            System.out.println(\"Yes\");\r\n        }\r\n        else{\r\n            System.out.println(\"No\");\r\n        }\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}