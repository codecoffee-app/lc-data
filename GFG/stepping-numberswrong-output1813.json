{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704854,
            "title": "Stepping Numbers",
            "titleSlug": "stepping-numberswrong-output1813",
            "content": "<p><span style=\"font-size:18px\">A number is called a stepping number if all adjacent digits have an absolute difference of 1, e.g. &#39;321&#39; is a Stepping Number while 421 is not. Given two integers<strong> n&nbsp;</strong>and <strong>m</strong>, find the count of all the stepping numbers in the range [n, m].<br />\r\n<br />\r\n<strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 0, m = 21\r\n<strong>Output:</strong> 13\r\n<strong>Explanation: </strong>Stepping no&#39;s are 0 1 2 3 4 5\r\n6 7 8 9 10 12 21</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 10, m = 15\r\n<strong>Output:</strong> 2\r\n<strong>Explanation: </strong>Stepping no&#39;s are 10, 12</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>steppingNumbers()</strong>&nbsp;which takes the integer <strong>n</strong>&nbsp;and integer <strong>m</strong>&nbsp;as input parameters and returns the number of stepping numbers in the range between <strong>n</strong> and <strong>m</strong>.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong> O(log(M))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(SN) where SN is the number of stepping numbers in the range</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n0 &le; N &lt; M &le; 10</span><sup><span style=\"font-size:15px\">7</span></sup></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A stepping number is defined as a number where the absolute difference between all adjacent digits is 1 (e.g., '321' is a stepping number, while '421' is not). Given two integers, 'n' and 'm', determine the total count of stepping numbers within the inclusive range [n, m].",
                "constraints": [
                    "0 <= N < M <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "n = 0, m = 21",
                        "output": "13",
                        "explanation": "The stepping numbers between 0 and 21 (inclusive) are: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, and 21."
                    },
                    {
                        "input": "n = 10, m = 15",
                        "output": "2",
                        "explanation": "The stepping numbers between 10 and 15 (inclusive) are: 10 and 12."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The idea is to use a&nbsp;<a href=\"https://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/\" target=\"_blank\">Breadth First Search</a>/<a href=\"https://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/\" target=\"_blank\">Depth First Search</a>&nbsp;traversal.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>How to build the graph?</strong><br />\nEvery node in the graph represents a stepping number; there will be a directed edge from a node U to V if V can be transformed from U. (U and V are Stepping Numbers) A Stepping Number V can be transformed from U in following manner.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>lastDigit&nbsp;</strong>refers to the last digit of U (i.e. U % 10)<br />\nAn adjacent number&nbsp;<strong>V</strong>&nbsp;can be:</span></p>\n\n<ul>\n\t<li><span style=\"font-size:18px\">U*10 + lastDigit + 1 (Neighbor A)</span></li>\n\t<li><span style=\"font-size:18px\">U*10 + lastDigit &ndash; 1 (Neighbor B)</span></li>\n</ul>\n\n<p><span style=\"font-size:18px\">By applying above operations a new digit is appended to U, it is either lastDigit-1 or lastDigit+1, so that the new number V formed from U is also a Stepping Number.<br />\nTherefore, every Node will have at most 2 neighboring Nodes.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Edge Cases:</strong>&nbsp;When the last digit of U is&nbsp;<strong>0</strong>&nbsp;or&nbsp;<strong>9</strong></span></p>\n\n<p><span style=\"font-size:18px\"><strong>Case 1:</strong>&nbsp;lastDigit is 0 : In this case only digit &lsquo;1&rsquo; can be appended.<br />\n<strong>Case 2:</strong>&nbsp;lastDigit is 9 : In this case only digit &lsquo;8&rsquo; can be appended.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>What will be the source/starting Node?</strong></span></p>\n\n<ul>\n\t<li><span style=\"font-size:18px\">Every single digit number is considered as a stepping Number, so bfs traversal for every digit will give all the stepping numbers starting from that digit.</span></li>\n\t<li><span style=\"font-size:18px\">Do a bfs/dfs traversal for all the numbers from [0,9].</span></li>\n</ul>\n\n<p><span style=\"font-size:18px\"><strong>Note:</strong>&nbsp;For node 0, no need to explore neighbors during BFS traversal since it will lead to 01, 012, 010 and these will be covered by the BFS traversal starting from node 1.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    // Function to perform a Breadth First Search traversal\n    // and count the number of stepping numbers between n and m\n    int bfs(int n, int m, int num)\n    {\n        int cnt = 0;\n        queue<int> q;\n        q.push(num);\n        while (!q.empty())\n        {\n            int stepNum = q.front();\n            q.pop();\n            if (stepNum <= m && stepNum >= n)\n                cnt++;\n            if (num == 0 || stepNum > m)\n                continue;\n            int lastDigit = stepNum % 10;\n            int stepNumA = stepNum * 10 + (lastDigit- 1);\n            int stepNumB = stepNum * 10 + (lastDigit + 1);\n\n            // Push the new step numbers into the queue\n            // if they are within the range and not already visited\n            if (lastDigit != 9) \n                q.push(stepNumB);\n            if (lastDigit != 0) \n                q.push(stepNumA);\n        }\n        return cnt;\n    }\n\n    // Function to find the count of stepping numbers between n and m\n    int steppingNumbers(int n, int m)\n    {\n        int ans = 0;\n        // Iterate through each digit and perform a BFS traversal\n        // to count the number of stepping numbers for each digit\n        for (int i = 0 ; i <= 9 ; i++){\n            ans += bfs(n, m, i);\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to perform breadth-first search to count stepping numbers\n    int bfs(int n, int m, int num) {\n        int cnt = 0;\n        // Create a queue for BFS\n        Queue<Integer> q = new LinkedList<>();\n        // Add the first stepping number to the queue\n        q.add(num);\n        // Perform BFS\n        while (!q.isEmpty()) {\n            int stepNum = q.poll();\n            // If the stepping number is within the range [n, m], increment the count\n            if (stepNum <= m && stepNum >= n)\n                cnt++;\n            // If the current stepping number is 0 or exceeds m, continue to the next iteration\n            if (num == 0 || stepNum > m)\n                continue;\n            // Calculate the next possible stepping numbers by adding or subtracting 1 from the last digit\n            int lastDigit = stepNum % 10;\n            int stepNumA = stepNum * 10 + (lastDigit - 1);\n            int stepNumB = stepNum * 10 + (lastDigit + 1);\n\n            // Add the next possible stepping numbers to the queue\n            if (lastDigit != 9)\n                q.add(stepNumB);\n            if (lastDigit != 0)\n                q.add(stepNumA);\n        }\n        // Return the count of stepping numbers within the range [n, m]\n        return cnt;\n    }\n\n    // Function to count the number of stepping numbers within the range [n, m]\n    int steppingNumbers(int n, int m) {\n        int ans = 0;\n        // Perform BFS for each digit from 0 to 9 to count the total number of stepping numbers\n        for (int i = 0; i <= 9; i++) {\n            ans += bfs(n, m, i);\n        }\n        // Return the total count of stepping numbers within the range [n, m]\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import deque\n\n# Function to perform BFS and count stepping numbers\ndef bfs(n,m,num):\n    cnt=0\n    q=deque()\n    q.append(num)\n\n    # Perform BFS until the queue is empty\n    while q:\n        stepNum=q.popleft()\n\n        # If the current number is within the range [n, m], increment the count\n        if stepNum>=n and stepNum<=m:\n            cnt+=1\n\n        # If the number is 0 or greater than m, continue to the next iteration\n        if num==0 or stepNum>m:\n            continue\n\n        # Calculate the next stepping numbers by adding or subtracting 1 to the last digit\n        lastDigit=stepNum%10\n        stepNumA=stepNum*10+(lastDigit-1)\n        stepNumB=stepNum*10+(lastDigit+1)\n\n        # If the last digit is not 9, append stepNumB to the queue\n        if lastDigit!=9:\n            q.append(stepNumB)\n\n        # If the last digit is not 0, append stepNumA to the queue\n        if lastDigit!=0:\n            q.append(stepNumA)\n    \n    return cnt\n\nclass Solution:\n    # Function to count the stepping numbers between n and m\n    def steppingNumbers(self, n, m):\n        ans=0\n        # Iterate through all possible starting digits\n        for i in range(10):\n            # Accumulate the count of stepping numbers for each starting digit\n            ans+=bfs(n,m,i)\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution\n{\n    // BFS function to find stepping numbers\n    bfs(n, m, num)\n    {\n        let cnt = 0;\n        let q = [];\n        q.push(num);\n        while (q.length > 0) {\n            let stepNum = q.shift();\n            \n            if (stepNum >= n && stepNum <= m) {\n                cnt++;\n            }\n            \n            if (num === 0 || stepNum > m) {\n                continue;\n            }\n            \n            let lastDigit = stepNum % 10;\n            let stepNumA = stepNum * 10 + (lastDigit - 1);\n            let stepNumB = stepNum * 10 + (lastDigit + 1);\n            \n            if (lastDigit !== 0) {\n                q.push(stepNumA);\n            }\n            \n            if (lastDigit !== 9) {\n                q.push(stepNumB);\n            }\n        }\n        return cnt;\n    }\n    \n    // Function to find all the Stepping Numbers\n    steppingNumbers(n, m)\n    {\n        let ans = 0;\n        for (let i = 0; i <= 9; i++) {\n            ans += this.bfs(n, m, i);\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Function to perform a Breadth First Search traversal\n    // and count the number of stepping numbers between n and m\n    public int bfs(int n, int m, int num)\n    {\n        int cnt = 0;\n        Queue<int> q = new Queue<int>();\n        q.Enqueue(num);\n        while (q.Count != 0)\n        {\n            int stepNum = q.Dequeue();\n            if (stepNum <= m && stepNum >= n)\n                cnt++;\n            if (num == 0 || stepNum > m)\n                continue;\n            int lastDigit = stepNum % 10;\n            int stepNumA = stepNum * 10 + (lastDigit - 1);\n            int stepNumB = stepNum * 10 + (lastDigit + 1);\n\n            // Push the new step numbers into the queue\n            // if they are within the range and not already visited\n            if (lastDigit != 9)\n                q.Enqueue(stepNumB);\n            if (lastDigit != 0)\n                q.Enqueue(stepNumA);\n        }\n        return cnt;\n    }\n\n    // Function to find the count of stepping numbers between n and m\n    public int steppingNumbers(int n, int m)\n    {\n        int ans = 0;\n        // Iterate through each digit and perform a BFS traversal\n        // to count the number of stepping numbers for each digit\n        for (int i = 0; i <= 9; i++)\n        {\n            ans += bfs(n, m, i);\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}