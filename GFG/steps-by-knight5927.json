{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701755,
            "title": "Steps by Knight",
            "titleSlug": "steps-by-knight5927",
            "content": "<p><span style=\"font-size: 18px;\">Given a square <strong>chessboard </strong>of<strong> </strong>size <strong>(n x n)</strong>, the initial position and target postion of Knight are given. Find out the <strong>minimum steps</strong> a Knight will take to reach the target position.<br /><br /></span><span style=\"font-size: 18px;\"><strong>Note: </strong>The initial and the target position coordinates of Knight have been given according to 1-base indexing.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3<strong>, </strong>knightPos[] = [3, 3], targetPos[]= [1, 2]<strong><br />Output:</strong> 1<strong><br />Explanation:<br /></strong>Knight takes 1 step to reach from&nbsp;<br />(3, 3) to (1 ,2).</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 6, knightPos[] = [4, 5],targetPos[] = [1, 1]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<img src=\"https://media.geeksforgeeks.org/wp-content/uploads/KnightChess.jpg\" />\n<span style=\"font-size: 18px;\">Knight takes 3 step to reach from \n(4, 5) to (1, 1):\n(4, 5) -&gt; (5, 3) -&gt; (3, 2) -&gt; (1, 1).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n&lt;= 1000<br />1 &lt;= knightpos </span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito; font-size: 17px;\">&le; </span><span style=\"font-size: 18px;\">[x, y], </span><span style=\"font-size: 18px;\">targertpos[x, y] </span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito; font-size: 17px;\">&le;&nbsp;</span><span style=\"font-size: 18px;\"> n&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square chessboard of size (n x n), with a Knight at an initial position and a target position, determine the minimum number of moves required for the Knight to reach the target. The coordinates are 1-indexed.",
                "constraints": [
                    "1 <= n <= 1000",
                    "1 <= knightPos[x, y] <= n",
                    "1 <= targetPos[x, y] <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 3, knightPos = [3, 3], targetPos = [1, 2]",
                        "output": "1",
                        "explanation": "The knight can move from (3, 3) to (1, 2) in a single move."
                    },
                    {
                        "input": "n = 6, knightPos = [4, 5], targetPos = [1, 1]",
                        "output": "3",
                        "explanation": "The knight can reach the target in 3 moves.  A possible path is (4, 5) -> (5, 3) -> (3, 2) -> (1, 1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Queue",
                "slug": "queue"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "makemytrip",
            "goldman-sachs",
            "intuit",
            "linkedin"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  private:\n    struct cell {\n        int x;\n        int y;\n        int steps;\n    };\n\n  public:\n\n    bool isValid(int x, int y, int N) {\n        return (x >= 0 and x < N and y >= 0 and y < N);\n    }\n\n    int minStepToReachTarget(vector<int>& knightPos, vector<int>& targetPos, int N) {\n        knightPos[0]--;\n        knightPos[1]--;\n        targetPos[0]--;\n        targetPos[1]--;\n\n        vector<vector<bool>> vis(N, vector<bool>(N, false));\n\n        vector<vector<int>> dxy = {{2, 1}, {2, -1}, {-2, 1}, {-2, -1},\n                                   {1, 2}, {1, -2}, {-1, 2}, {-1, -2}};\n\n        // queue for storing visited cells by knight in board and steps taken.\n        queue<cell> q;\n\n        // pushing starting position of knight with 0 distance.\n        q.push({knightPos[0], knightPos[1], 0});\n\n        // marking starting cell as visited.\n        vis[knightPos[0]][knightPos[1]] = true;\n\n        while (!q.empty()) {\n            // storing cell indexes and steps of front element and popping them.\n            int x = q.front().x;\n            int y = q.front().y;\n            int steps = q.front().steps;\n            q.pop();\n\n            // if we reach the required cell, we return true.\n            if (x == targetPos[0] and y == targetPos[1])\n                return steps;\n\n            // using loop to reach all the cells that can be reached by knight.\n            for (int i = 0; i < dxy.size(); i++) {\n                int n_x = x + dxy[i][0];\n                int n_y = y + dxy[i][1];\n\n                // if cell indexes are valid and cell is not visited, we push the\n                // indexes in queue with steps and mark cell as visited.\n                if (isValid(n_x, n_y, N) and !vis[n_x][n_y]) {\n                    q.push({n_x, n_y, steps + 1});\n                    vis[n_x][n_y] = true;\n                }\n            }\n        }\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end Complete function Template for JAVA\n\nclass Solution {\n    // Function to check if cell indexes are within bounds.\n    boolean isValid(int x, int y, int N) {\n        return (x >= 0 && x < N && y >= 0 && y < N);\n    }\n\n    // Function to find out minimum steps Knight needs to reach target position.\n    public int minStepToReachTarget(int knightPos[], int targetPos[], int N) {\n        knightPos[0]--;\n        knightPos[1]--;\n        targetPos[0]--;\n        targetPos[1]--;\n\n        int dx[] = {-2, -1, 1, 2, -2, -1, 1, 2};\n        int dy[] = {-1, -2, -2, -1, 1, 2, 2, 1};\n\n        // using boolean list to mark visited cells and currently\n        // marking all the cells as false.\n        boolean vis[][] = new boolean[N][N];\n\n        // queue for storing visited cells by knight in board and steps taken.\n        Queue<ArrayList<Integer>> q = new LinkedList<>();\n        ArrayList<Integer> temp = new ArrayList<>();\n        temp.add(knightPos[0]);\n        temp.add(knightPos[1]);\n        temp.add(0);\n\n        // pushing starting position of knight with 0 distance.\n        q.add(temp);\n        // marking starting cell as visited.\n        vis[knightPos[0]][knightPos[1]] = true;\n\n        while (!q.isEmpty()) {\n            // storing cell indexes and steps of front element and popping them.\n            ArrayList<Integer> temp2 = q.poll();\n            int x = temp2.get(0);\n            int y = temp2.get(1);\n            int steps = temp2.get(2);\n\n            // if we reach the required cell, we return true.\n            if (x == targetPos[0] && y == targetPos[1]) return steps;\n\n            // using loop to reach all the cells that can be reached by knight.\n            for (int i = 0; i < 8; i++) {\n                int n_x = x + dx[i];\n                int n_y = y + dy[i];\n\n                // if cell indexes are valid and cell is not visited, we push\n                // the indexes in queue with steps and mark cell as visited.\n                if (isValid(n_x, n_y, N) && !vis[n_x][n_y]) {\n                    ArrayList<Integer> temp1 = new ArrayList<>();\n                    temp1.add(n_x);\n                    temp1.add(n_y);\n                    temp1.add(steps + 1);\n                    q.add(temp1);\n                    vis[n_x][n_y] = true;\n                }\n            }\n        }\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from collections import deque\n\n\nclass Solution:\n\n    #Function to check if cell indexes are within bounds.\n    def isValid(self, x, y, n):\n        return (x >= 0 and x < n and y >= 0 and y < n)\n\n    #Function to find out minimum steps Knight needs to reach target position.\n    def minStepToReachTarget(self, knightPos, targetPos, n):\n        dxy = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2],\n               [-1, -2]]\n        knightPos[0] -= 1\n        knightPos[1] -= 1\n        targetPos[0] -= 1\n        targetPos[1] -= 1\n\n        #using boolean list to mark visited cells and currently\n        #marking all the cells as false\n        vis = [[False for i in range(n)] for j in range(n)]\n\n        #queue for storing visited cells by knight in board and steps taken.\n        q = deque()\n        #pushing starting position of knight with 0 distance.\n        q.append([knightPos[0], knightPos[1], 0])\n\n        #marking starting cell as visited.\n        vis[knightPos[0]][knightPos[1]] = True\n\n        while (len(q)):\n\n            #storing cell indexes and steps of front element and popping them.\n            cur = q.popleft()\n            x = cur[0]\n            y = cur[1]\n            steps = cur[2]\n\n            #if we reach the required cell, we return true.\n            if (x == targetPos[0] and y == targetPos[1]):\n                return steps\n\n            #using loop to reach all the cells that can be reached by knight.\n            for i in range(8):\n\n                n_x = x + dxy[i][0]\n                n_y = y + dxy[i][1]\n\n                #if cell indexes are valid and cell is not visited, we push the\n                #indexes in queue with steps and mark cell as visited.\n                if (self.isValid(n_x, n_y, n) and vis[n_x][n_y] == False):\n                    q.append([n_x, n_y, steps + 1])\n                    vis[n_x][n_y] = True\n        return -1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} KnightPos\n * @param {number[]} TargetPos\n * @param {number} N\n * @returns {number}\n */\nclass cell {\n    constructor(p, q, r) {\n        this.x = p;\n        this.y = q;\n        this.steps = r;\n    }\n}\n\nclass Solution {\n    // Function to check if cell indexes are within bounds.\n    isValid(x, y, n) { return (x >= 0 && x < n && y >= 0 && y < n); }\n\n    // Function to find out minimum steps Knight needs to reach target position.\n    minStepToReachTarget(knightPos, targetPos, n) {\n        knightPos[0]--;\n        knightPos[1]--;\n        targetPos[0]--;\n        targetPos[1]--;\n\n        // using boolean list to mark visited cells and currently\n        // marking all the cells as false.\n        let vis = new Array(n);\n        for (let i = 0; i < n; i++) {\n            vis[i] = new Array(n);\n            vis[i].fill(false);\n        }\n        let dxy = new Array(new Array(2, 1), new Array(2, -1), new Array(-2, 1),\n                            new Array(-2, -1), new Array(1, 2), new Array(1, -2),\n                            new Array(-1, 2), new Array(-1, -2));\n\n        // queue for storing visited cells by knight in board and steps taken.\n        let q = new Array();\n        // pushing starting position of knight with 0 distance.\n        q.push(new cell(knightPos[0], knightPos[1], 0));\n\n        // marking starting cell as visited.\n        vis[knightPos[0]][knightPos[1]] = true;\n\n        let l = 0;\n        while (q.length > l) {\n            // storing cell indexes and steps of front element and popping them.\n            let x = q[l].x;\n            let y = q[l].y;\n            let steps = q[l].steps;\n            l++;\n\n            // if we reach the required cell, we return true.\n            if (x == targetPos[0] && y == targetPos[1]) return steps;\n\n            // using loop to reach all the cells that can be reached by knight.\n            for (let i = 0; i < dxy.length; i++) {\n                let n_x = x + dxy[i][0];\n                let n_y = y + dxy[i][1];\n\n                // if cell indexes are valid and cell is not visited, we push the\n                // indexes in queue with steps and mark cell as visited.\n                if (this.isValid(n_x, n_y, n) && !vis[n_x][n_y]) {\n                    q.push(new cell(n_x, n_y, steps + 1));\n                    vis[n_x][n_y] = true;\n                }\n            }\n        }\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}