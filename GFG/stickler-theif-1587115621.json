{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701417,
            "title": "Stickler Thief",
            "titleSlug": "stickler-theif-1587115621",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">Stickler</span><span style=\"font-size: 18px;\"> the thief</span><span style=\"font-size: 18px;\"> wants to loot money from the houses arranged in a line. He cannot loot <strong>two consecutive </strong>houses and aims to <strong>maximize</strong> his total loot. <br /></span></span><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">Given an array, <strong>arr[]</strong> where arr[i] represents the amount of money in the i-th house.<br />Determine the <strong>maximum</strong> amount he can loot.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [6, 5, 5, 7, 4]\n<strong>Output: </strong>15\n<strong>Explanation: </strong>Maximum amount he can get by looting 1st, 3rd and 5th house. Which is 6 + 5 + 4 = 15.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 5, 3]\n<strong>Output: </strong>5\n<strong>Explanation: </strong>Loot only 2nd house and get maximum amount of 5.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [4, 4, 4, 4]\n<strong>Output: </strong>8\n<strong>Explanation: </strong>The optimal choice is to loot every alternate house. Looting the 1st and 3rd houses, or the 2nd and 4th, both give a maximum total of 4 + 4 = 8.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A thief, Stickler, plans to rob houses lined up in a row. He cannot rob two adjacent houses. Given an array `arr[]` where `arr[i]` represents the amount of money in the i-th house, determine the maximum amount of money Stickler can steal.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[6, 5, 5, 7, 4]",
                        "output": "15",
                        "explanation": "The maximum loot can be obtained by robbing the 1st, 3rd, and 5th houses, yielding 6 + 5 + 4 = 15."
                    },
                    {
                        "input": "[1, 5, 3]",
                        "output": "5",
                        "explanation": "Robbing only the 2nd house results in the maximum loot of 5."
                    },
                    {
                        "input": "[4, 4, 4, 4]",
                        "output": "8",
                        "explanation": "The best strategy is to rob every other house. Robbing houses 1 and 3, or houses 2 and 4, both give a maximum loot of 4 + 4 = 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Track max sums with or without each house, updating as you go.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "flipkart",
            "amazon",
            "oyo-rooms",
            "walmart",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int findMaxSum(vector<int>& arr) {\n        int n = arr.size();\n\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return arr[0];\n\n        // Set previous 2 values\n        int secondLast = 0, last = arr[0];\n\n        // Compute current value using previous two values\n        // The final current value would be our result\n        int res;\n        for (int i = 1; i < n; i++) {\n            res = max(arr[i] + secondLast, last);\n            secondLast = last;\n            last = res;\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findMaxSum(int arr[]) {\n        int n = arr.length;\n\n        if (n == 0) return 0;\n        if (n == 1) return arr[0];\n\n        // Set previous 2 values\n        int secondLast = 0, last = arr[0];\n\n        // Compute current value using previous\n        // two values. The final current value\n        // would be our result\n        int res = 0;\n        for (int i = 1; i < n; i++) {\n            res = Math.max(arr[i] + secondLast, last);\n            secondLast = last;\n            last = res;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def findMaxSum(self, arr):\n        n = len(arr)\n\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n\n        # Set previous 2 values\n        secondLast = 0\n        last = arr[0]\n\n        # Compute current value using previous two values\n        # The final current value would be our result\n        res = 0\n        for i in range(1, n):\n            res = max(arr[i] + secondLast, last)\n            secondLast = last\n            last = res\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findMaxSum(arr) {\n        const n = arr.length;\n\n        if (n === 0) return 0;\n        if (n === 1) return arr[0];\n\n        // Set previous 2 values\n        let secondLast = 0, last = arr[0];\n\n        // Compute current value using previous two values\n        // The final current value would be our result\n        let res;\n        for (let i = 1; i < n; i++) {\n            res = Math.max(arr[i] + secondLast, last);\n            secondLast = last;\n            last = res;\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}