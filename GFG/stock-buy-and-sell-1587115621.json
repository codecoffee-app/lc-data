{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701212,
            "title": "Stock buy and sell",
            "titleSlug": "stock-buy-and-sell-1587115621",
            "content": "<p dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Given an array&nbsp;</span><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\"><span style=\"box-sizing: border-box; margin: 0px; padding: 0px;\"><strong>arr[] </strong>denoting</span>&nbsp;the cost of stock on each day, the task is to find the maximum total profit if we can buy and sell the stocks any number of times.</span></p>\n<p dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Note:&nbsp;</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">We can only sell a stock which we have bought earlier and we cannot hold multiple stocks on any day.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [100, 180, 260, 310, 40, 535, 695]\n<strong>Output: </strong>865\n<strong>Explanation: </strong></span><span >Buy the stock on day 0 and sell it on day 3 =&gt; 310 &ndash; 100 = 210 Buy the stock on day 4 and sell it on day 6 =&gt; 695 &ndash; 40 = 655 Maximum Profit  = 210 + 655 = 865</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 2, 2, 2, 4]\n<strong>Output: </strong>2\n<strong>Explanation: </strong></span><span >Buy the stock on day 3 and sell it on day 4 =&gt; 4 &ndash; 2 = 2<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 2]\n<strong>Output: </strong>0\n<strong>Explanation: </strong>Don't<strong> </strong></span><span >Buy the stock.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` representing the cost of a stock on each day, determine the maximum total profit achievable by buying and selling the stock any number of times.  You can only sell a stock after you have bought it, and you cannot hold multiple stocks simultaneously.",
                "constraints": [
                    "2 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[100, 180, 260, 310, 40, 535, 695]",
                        "output": "865",
                        "explanation": "Buy on day 0 (price 100) and sell on day 3 (price 310) for a profit of 210. Buy on day 4 (price 40) and sell on day 6 (price 695) for a profit of 655. Total profit: 210 + 655 = 865."
                    },
                    {
                        "input": "[4, 2, 2, 2, 4]",
                        "output": "2",
                        "explanation": "Buy on day 3 (price 2) and sell on day 4 (price 4) for a profit of 2."
                    },
                    {
                        "input": "[4, 2]",
                        "output": "0",
                        "explanation": "It's more profitable not to buy any stock at all, resulting in zero profit."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "flipkart",
            "accolite",
            "amazon",
            "microsoft",
            "de-shaw",
            "makemytrip",
            "ola-cabs",
            "oracle",
            "walmart",
            "goldman-sachs",
            "directi",
            "intuit",
            "google",
            "quikr",
            "salesforce",
            "pubmatic",
            "sapient",
            "swiggy",
            "media.net"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n\n    int stockBuySell(vector<int> &arr) {\n        // Initialize profit to 0. This will hold the total profit.\n        int profit = 0;\n\n        // Loop through the arr array starting from the second element (index 1)\n        for (int i = 1; i < arr.size(); i++) {\n            // Check if the price today (arr[i]) is greater than the price yesterday\n            // (arr[i-1]). This means there's an opportunity for profit, as buying\n            // yesterday and selling today would yield profit.\n            if (arr[i - 1] < arr[i]) {\n                // Add the difference (profit) to the total profit.\n                profit += arr[i] - arr[i - 1];\n            }\n        }\n\n        // Return the accumulated profit after processing all days.\n        return profit;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the days of buying and selling stock for max profit.\n    int stockBuySell(int arr[]) {\n        // Initialize profit to 0. This will hold the total profit.\n        int profit = 0;\n\n        // Loop through the arr array starting from the second element (index 1)\n        for (int i = 1; i < arr.length; i++) {\n            // Check if the price today (arr[i]) is greater than the price yesterday\n            // (arr[i-1]). This means there's an opportunity for profit, as buying\n            // yesterday and selling today would yield profit.\n            if (arr[i - 1] < arr[i]) {\n                // Add the difference (profit) to the total profit.\n                profit += arr[i] - arr[i - 1];\n            }\n        }\n\n        // Return the accumulated profit after processing all days.\n        return profit;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def stockBuySell(self, arr):\n        # Initialize profit to 0. This will hold the total profit.\n        profit = 0\n\n        # Loop through the arr array starting from the second element (index 1)\n        for i in range(1, len(arr)):\n            # Check if the price today (arr[i]) is greater than the price yesterday (arr[i-1]).\n            # This means there's an opportunity for profit, as buying yesterday and selling today would yield profit.\n            if arr[i - 1] < arr[i]:\n                # Add the difference (profit) to the total profit.\n                profit += arr[i] - arr[i - 1]\n\n        # Return the accumulated profit after processing all days.\n        return profit\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\n/**\n * @param {number[]} A\n * @param {number} n\n * @returns {number[][]}\n */\n\nclass Solution {\n    // Function to find the days of buying and selling stock for max profit.\n    stockBuySell(arr) {\n        // Initialize profit to 0. This will hold the total profit.\n        let profit = 0;\n\n        // Loop through the arr array starting from the second element (index 1)\n        for (let i = 1; i < arr.length; i++) {\n            // Check if the price today (arr[i]) is greater than the price yesterday\n            // (arr[i-1]). This means there's an opportunity for profit, as buying\n            // yesterday and selling today would yield profit.\n            if (arr[i - 1] < arr[i]) {\n                // Add the difference (profit) to the total profit.\n                profit += arr[i] - arr[i - 1];\n            }\n        }\n\n        // Return the accumulated profit after processing all days.\n        return profit;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}