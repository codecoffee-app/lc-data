{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702074,
            "title": "Stock Buy and Sell \u2013 Multiple Transaction Allowed",
            "titleSlug": "stock-buy-and-sell2615",
            "content": "<p><span >The cost of stock on each day is given in an array <strong>price[]</strong>. Each day you may decide to either buy or sell the stock i at <strong>price[i]</strong>, you can even buy and sell the stock on the same day. Find the <strong>maximum profit</strong> that you can get.</span></p>\n<p><span >Note: A stock can only be sold if it has been bought previously and multiple stocks cannot be held on any given day.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong></span><span >prices[] = [100, 180, 260, 310, 40, 535, 695]</span><br /><span ><strong>Output: </strong></span><span >865</span><br /><span ><strong>Explanation: </strong></span><span style=\"font-size: 18.6667px;\">Buy the stock on day 0 and sell it on day 3 =&gt; 310 &ndash; 100 = 210. Buy the stock on day 4 and sell it on day 6 =&gt; 695 &ndash; 40 = 655. Maximum Profit = 210 + 655 = 865.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/878914/Web/Other/blobid2_1731054745.png\" width=\"324\" height=\"200\" /><br /><br /></span><span ><strong>Input: </strong></span><span >prices[] = [4, 2, 2, 2, 4]</span><br /><span ><strong>Output: </strong></span><span >2</span><br /><span ><strong>Explanation: </strong></span><span style=\"font-size: 18.6667px;\">Buy the stock on day 3 and sell it on day 4 =&gt; 4 &ndash; 2 = 2. Maximum Profit = 2.</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &lt;= prices.size() &lt;= 10<sup>5</sup></span><br /><span >0 &lt;= prices[i] &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `prices[]` representing the cost of a stock on each day, determine the maximum profit that can be obtained. You can buy and sell the stock on any given day, but you can only hold one stock at a time.  A stock can only be sold if it has been bought previously.",
                "constraints": [
                    "1 <= prices.size() <= 10^5",
                    "0 <= prices[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[100, 180, 260, 310, 40, 535, 695]",
                        "output": "865",
                        "explanation": "Buy the stock on day 0 and sell it on day 3 for a profit of 310 - 100 = 210. Buy the stock on day 4 and sell it on day 6 for a profit of 695 - 40 = 655.  The maximum profit is the sum of these profits, 210 + 655 = 865."
                    },
                    {
                        "input": "[4, 2, 2, 2, 4]",
                        "output": "2",
                        "explanation": "Buy the stock on day 3 and sell it on day 4 for a profit of 4 - 2 = 2. The maximum profit is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">The <strong>Local Minima </strong>are the points of the Lowest price and <strong>Local Maxima</strong> are the points of the Highest price.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "flipkart",
            "morgan-stanley",
            "accolite",
            "amazon",
            "microsoft",
            "samsung",
            "de-shaw",
            "hike",
            "makemytrip",
            "ola-cabs",
            "oracle",
            "walmart",
            "goldman-sachs",
            "directi",
            "intuit",
            "sap",
            "quikr",
            "facebook",
            "salesforce",
            "pubmatic",
            "sapient",
            "swiggy"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maximumProfit(vector<int> &prices) {\n        // Initialize profit to 0. This will hold the total profit.\n        int profit = 0;\n\n        // Loop through the prices array starting from the second element (index 1)\n        for (int i = 1; i < prices.size(); i++) {\n            // Check if the price today (prices[i]) is greater than the price yesterday\n            // (prices[i-1]). This means there's an opportunity for profit, as buying\n            // yesterday and selling today would yield profit.\n            if (prices[i - 1] < prices[i]) {\n                // Add the difference (profit) to the total profit.\n                profit += prices[i] - prices[i - 1];\n            }\n        }\n\n        // Return the accumulated profit after processing all days.\n        return profit;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maximumProfit(int[] prices) {\n        // Initialize profit to 0. This will hold the total profit.\n        int profit = 0;\n\n        // Loop through the prices array starting from the second element (index 1)\n        for (int i = 1; i < prices.length; i++) {\n            // Check if the price today (prices[i]) is greater than the price yesterday\n            // (prices[i-1]). This means there's an opportunity for profit, as buying\n            // yesterday and selling today would yield profit.\n            if (prices[i - 1] < prices[i]) {\n                // Add the difference (profit) to the total profit.\n                profit += prices[i] - prices[i - 1];\n            }\n        }\n\n        // Return the accumulated profit after processing all days.\n        return profit;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def maximumProfit(self, prices):\n        # Initialize profit to 0. This will hold the total profit.\n        profit = 0\n\n        # Loop through the prices array starting from the second element (index 1)\n        for i in range(1, len(prices)):\n            # Check if the price today (prices[i]) is greater than the price yesterday (prices[i-1]).\n            # This means there's an opportunity for profit, as buying yesterday and selling today would yield profit.\n            if prices[i - 1] < prices[i]:\n                # Add the difference (profit) to the total profit.\n                profit += prices[i] - prices[i - 1]\n\n        # Return the accumulated profit after processing all days.\n        return profit\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maximumProfit(prices) {\n        // Initialize profit to 0. This will hold the total profit.\n        let profit = 0;\n\n        // Loop through the prices array starting from the second element (index 1)\n        for (let i = 1; i < prices.length; i++) {\n            // Check if the price today (prices[i]) is greater than the price yesterday\n            // (prices[i-1]). This means there's an opportunity for profit, as buying\n            // yesterday and selling today would yield profit.\n            if (prices[i - 1] < prices[i]) {\n                // Add the difference (profit) to the total profit.\n                profit += prices[i] - prices[i - 1];\n            }\n        }\n\n        // Return the accumulated profit after processing all days.\n        return profit;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}