{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701342,
            "title": "Stock span problem",
            "titleSlug": "stock-span-problem-1587115621",
            "content": "<p><span >The stock span problem is a financial problem where we have a series of daily price quotes for a stock and we need to calculate the span of stock price for all days. The span&nbsp;<strong>arr[i]</strong>&nbsp;of the stocks price on a given day&nbsp;<strong>i</strong>&nbsp;is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the given day is less than or equal to its price on the current day.<br /></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: arr[] = [100, 80, 60, 70, 60, 75, 85]\n<strong>Output</strong>: [1, 1, 1, 2, 1, 4, 6]\n<strong>Explanation</strong>: Traversing the given input span 100 is greater than equal to 100 and there are no more elements behind it so the span is 1, 80 is greater than equal to 80 and smaller than 100 so the span is 1, 60 is greater than equal to 60 and smaller than 80 so the span is 1, 70 is greater than equal to 60,70 and smaller than 80 so the span is 2 and so on.  Hence the output will be 1 1 1 2 1 4 6.\n</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [10, 4, 5, 90, 120, 80]\n<strong>Output</strong>: [1, 1, 2, 4, 5, 1]\n<strong>Explanation</strong>: Traversing the given input span 10 is greater than equal to 10 and there are no more elements behind it so the span is 1, 4 is greater than equal to 4 and smaller than 10 so the span is 1, 5 is greater than equal to 4,5 and smaller than 10 so the span is 2,  and so on. Hence the output will be 1 1 2 4 5 1.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size()&le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Try to precompute the previous maximum array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "accolite",
            "amazon",
            "microsoft",
            "samsung",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the span of stock\u00e2\u20ac\u2122s price for all n days.\n    vector<int> calculateSpan(vector<int>& arr) {\n        int n = arr.size();\n        stack<int> s;\n        s.push(0);\n        vector<int> S(n);\n\n        // span value of first day is always 1.\n        S[0] = 1;\n\n        for (int i = 1; i < n; i++) {\n            // we pop elements from the stack till price at top of stack\n            // is less than or equal to current price.\n            while (s.empty() == false and arr[s.top()] <= arr[i])\n                s.pop();\n\n            // if stack becomes empty, then price[i] is greater than all\n            // elements on left of it in list so span is i+1.\n            // Else price[i] is greater than elements after value at top of stack.\n            int span = (s.empty()) ? (i + 1) : (i - s.top());\n            S[i] = span;\n\n            // pushing this element to stack.\n            s.push(i);\n        }\n        // returning the list.\n        return S;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to calculate the span of stock's price for all n days.\n    public ArrayList<Integer> calculateSpan(int[] arr) {\n        int n = arr.length;\n        Stack<Integer> s = new Stack<>();\n        s.push(0);\n        ArrayList<Integer> S = new ArrayList<>(n);\n\n        // Initialize the list with default values.\n        for (int i = 0; i < n; i++) {\n            S.add(0);\n        }\n\n        // Span value of first day is always 1.\n        S.set(0, 1);\n\n        for (int i = 1; i < n; i++) {\n            // We pop elements from the stack till price at top of stack\n            // is less than or equal to current price.\n            while (!s.isEmpty() && arr[s.peek()] <= arr[i]) {\n                s.pop();\n            }\n\n            // If stack becomes empty, then price[i] is greater than all\n            // elements on left of it in list so span is i+1.\n            // Else price[i] is greater than elements after value at top of stack.\n            int span = s.isEmpty() ? (i + 1) : (i - s.peek());\n            S.set(i, span);\n\n            // Pushing this element to stack.\n            s.push(i);\n        }\n        // Returning the ArrayList.\n        return S;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to calculate the span of stock's price for all n days.\n    def calculateSpan(self, arr):\n        n = len(arr)\n        s = []\n        s.append(0)\n        S = [0] * n\n\n        # Span value of first day is always 1.\n        S[0] = 1\n\n        for i in range(1, n):\n            # We pop elements from the stack till price at top of stack\n            # is less than or equal to current price.\n            while s and arr[s[-1]] <= arr[i]:\n                s.pop()\n\n            # If stack becomes empty, then price[i] is greater than all\n            # elements on left of it in list so span is i+1.\n            # Else price[i] is greater than elements after value at top of stack.\n            span = (i + 1) if not s else (i - s[-1])\n            S[i] = span\n\n            # Pushing this element to stack.\n            s.append(i)\n        # Returning the list.\n        return S\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public List<int> calculateSpan(int[] arr) {\n        int n = arr.Length;\n        Stack<int> s = new Stack<int>();\n        s.Push(0);\n        List<int> S = new List<int>(new int[n]);\n\n        // Span value of first day is always 1.\n        S[0] = 1;\n\n        for (int i = 1; i < n; i++) {\n            // Pop elements from the stack till price at top of stack\n            // is less than or equal to current price.\n            while (s.Count > 0 && arr[s.Peek()] <= arr[i]) {\n                s.Pop();\n            }\n\n            // If stack becomes empty, then price[i] is greater than all elements\n            // on left of it in list so span is i+1. Else, price[i] is greater than\n            // elements after value at top of stack.\n            S[i] = (s.Count == 0) ? (i + 1) : (i - s.Peek());\n\n            // Push this element index to stack.\n            s.Push(i);\n        }\n\n        // Returning the result list.\n        return S;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to calculate the span of stock's price for all n days.\n    calculateSpan(arr) {\n        const n = arr.length;\n        const s = [];\n        s.push(0);\n        const S = new Array(n);\n\n        // Span value of first day is always 1.\n        S[0] = 1;\n\n        for (let i = 1; i < n; i++) {\n            // We pop elements from the stack till price at top of stack\n            // is less than or equal to current price.\n            while (s.length > 0 && arr[s[s.length - 1]] <= arr[i]) {\n                s.pop();\n            }\n\n            // If stack becomes empty, then price[i] is greater than all\n            // elements on left of it in list so span is i+1.\n            // Else price[i] is greater than elements after value at top of stack.\n            const span = s.length === 0 ? (i + 1) : (i - s[s.length - 1]);\n            S[i] = span;\n\n            // Pushing this element to stack.\n            s.push(i);\n        }\n        // Returning the array.\n        return S;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}