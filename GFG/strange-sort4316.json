{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702832,
            "title": "Strange Sort",
            "titleSlug": "strange-sort4316",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of non-negative integers. Sort the array in ascending order such that the element at the Kth position in the unsorted array stays unmoved and all other elements are sorted.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 12, 30, 79, 2] , k=2\n<strong>Output:</strong> [2, 12, 3, 30, 79]\n<strong>Explanation</strong>: The element at the 2nd position (12) remains at its own place while others are sorted.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [16, 16, 18, 10, 9, 22, 11, 5, 35, 22] , k=5</span><span style=\"font-size: 18px;\">\n<strong>Output:</strong> [5, 10, 11, 16, 9, 16, 18, 22, 22, 35]\n<strong>Explanation</strong>: The element at the 5th position (9) remains at its own place while others are sorted.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(nlogn)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=arr.size()&lt;=10<sup>6</sup><br />1&lt;=k&lt;=arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of non-negative integers, sort the array in ascending order such that the element at the Kth position (0-indexed) in the unsorted array stays unmoved and all other elements are sorted.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "0 <= K < arr.length"
                ],
                "testcases": [
                    {
                        "input": "arr = [3, 12, 30, 79, 2], k=2",
                        "output": "[2, 3, 30, 79, 12]",
                        "explanation": "The element at the 2nd index (30) remains at its own place while others are sorted."
                    },
                    {
                        "input": "arr = [16, 16, 18, 10, 9, 22, 11, 5, 35, 22], k=5",
                        "output": "[5, 9, 10, 11, 16, 16, 18, 22, 22, 35]",
                        "explanation": "The element at the 5th index (22) remains at its own place while others are sorted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Temporarily replace the k-th element, sort the array, and then restore the k-th element to its original position.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void strangeSort(vector<int>& arr, int k) {\n        int n = arr.size();\n        int ele = arr[k - 1];    // Store the kth element\n        arr[k - 1] = 1000000000; // Temporarily set it to a large value to place it at\n                                 // the end after sorting\n\n        // Sort the array except the original k-th element\n        sort(arr.begin(), arr.end());\n\n        // Insert the original k-th element back into its correct position\n        int i = n - 1;\n        while (i >= k) {\n            arr[i] = arr[i - 1];\n            i--;\n        }\n        arr[i] = ele; // Place the k-th element in its original position\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    void strangeSort(int[] arr, int k) {\n        int n = arr.length;\n        int ele = arr[k - 1];           // Store the kth element\n        arr[k - 1] = Integer.MAX_VALUE; // Temporarily set it to a large value to place\n                                        // it at the end after sorting\n\n        // Sort the array except the original k-th element\n        Arrays.sort(arr);\n\n        // Insert the original k-th element back into its correct position\n        int i = n - 1;\n        while (i >= k) {\n            arr[i] = arr[i - 1];\n            i--;\n        }\n        arr[i] = ele; // Place the k-th element in its original position\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def strangeSort(self, arr, k):\n        n = len(arr)\n        ele = arr[k - 1]  # Store the k-th element\n        arr[k - 1] = float('inf')  # Temporarily set it to a large value\n\n        arr.sort()  # Sort the array\n\n        # Re-insert the original k-th element into its correct position\n        i = n - 1\n        while i >= k:\n            arr[i] = arr[i - 1]\n            i -= 1\n        arr[i] = ele  # Place the original k-th element in its original position\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to perform the strange sort operation\n    strangeSort(arr, k) {\n        const n = arr.length;\n        const ele = arr[k - 1]; // Store the k-th element\n        arr[k - 1] = Infinity;  // Temporarily set it to a large value\n\n        // Sort the array\n        arr.sort((a, b) => a - b);\n\n        // Re-insert the original k-th element into its correct position\n        let i = n - 1;\n        while (i >= k) {\n            arr[i] = arr[i - 1];\n            i--;\n        }\n        arr[i] = ele; // Place the original k-th element in its original position\n\n        return arr;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}