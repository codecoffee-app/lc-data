{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703247,
            "title": "String comparison",
            "titleSlug": "string-comparison5858",
            "content": "<p>In a native language, the increasing order of priority of characters is a, b, c, d, e, f, g, h, i, j, k, l, m, n, ng, o, p, q, r, s, t, u, v, w, x, y, z. You are given two strings s1 and s2 and your task is to&nbsp;compare them on the basis of the given priority order.</p>\n<p><strong>Note:</strong> Function must return <strong>0</strong> if both the strings are equal, <strong>1</strong> if s1 is greater than s2, and <strong>-1</strong> if s1 is lesser than s2.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s1 = \"adding\", s2 = \"addio\"\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> 'o' has greater priority \nthan 'ng'</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s1 = \"abcng\", s2 = \"abcno\"\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> 'ng' has greater priority \nthan 'n'</pre>\n<p><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>stringComparsion()</strong>&nbsp;which takes the two strings<strong> </strong>as input and returns the integer value.<br /><br /><strong>Expected Time Complexity:</strong>&nbsp;O(|s1 + s2|)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br /><br /><strong>Constraints:</strong><br />1 &le; |s1|, |s2| &le; 105<br />The string contains lower case English alphabets</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>1. Apply two pointers on string one and two</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "int stringComparsion(string s1,string s2)\r\n{\r\n    int m = s1.size();\r\n    int n = s2.size();\r\n\r\n    int i = 0, j = 0;\r\n    \r\n    while(i < m and j < n)\r\n    {\r\n\t\t//If s1 and s2 have 'ng' at a common index\r\n        if(i < m-1 and j < n-1 and s1[i] == 'n' and s1[i+1] == 'g' and s2[j] == 'n' and s2[j+1] == 'g')\r\n        {\r\n            i++;\r\n            j++;\r\n            continue;\r\n        }\r\n\r\n\t\t//If s1 has 'ng'\r\n        if(i < m-1 and s1[i] == 'n' and s1[i+1] == 'g')\r\n        {\r\n            i++;\r\n       \r\n            if(s2[j]>='o')\r\n            \treturn -1;\r\n            \r\n            return 1;\r\n        }\r\n\r\n\t\t//If s2 has 'ng'\r\n        if(j < n-1 and s2[j] == 'n' and s2[j+1] == 'g')\r\n        {\r\n            j++;\r\n            \r\n            if(s1[i]>='o')\r\n            \treturn 1;\r\n            \r\n            return -1;\r\n        }\r\n\r\n        if(s1[i] > s2[j])\r\n        \treturn 1;\r\n        \r\n        else if(s1[i]<s2[j])\r\n        \treturn -1;\r\n        \r\n        i++;\r\n        j++;\r\n    }\r\n\r\n    \r\n    if(i == m and j == n)\r\n    \treturn 0;\r\n    if(j < n)\r\n        return -1;\r\n    \r\n    return 1;\r\n}\r\n \r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int stringComparsion(String s1, String s2) {\n        // lengths of the two strings\n        int m = s1.length();\n        int n = s2.length();\n\n        // indices for iterating over the strings\n        int i = 0, j = 0;\n\n        // comparing characters of both strings\n        while (i < m && j < n) {\n            // special case for 'ng'\n            if (i < m - 1 && j < n - 1 && s1.charAt(i) == 'n' &&\n                s1.charAt(i + 1) == 'g' && s2.charAt(j) == 'n' &&\n                s2.charAt(j + 1) == 'g') {\n                i++;\n                j++;\n                continue;\n            }\n\n            // handling 'ng' in s1\n            if (i < m - 1 && s1.charAt(i) == 'n' && s1.charAt(i + 1) == 'g') {\n                i++;\n\n                // comparing next character in s2\n                if (s2.charAt(j) >= 'o') {\n                    return -1;\n                }\n\n                return 1;\n            }\n\n            // handling 'ng' in s2\n            if (j < n - 1 && s2.charAt(j) == 'n' && s2.charAt(j + 1) == 'g') {\n                j++;\n\n                // comparing next character in s1\n                if (s1.charAt(i) >= 'o') {\n                    return 1;\n                }\n\n                return -1;\n            }\n\n            // comparing characters at current indices\n            if (s1.charAt(i) > s2.charAt(j)) {\n                return 1;\n            } else if (s1.charAt(i) < s2.charAt(j)) {\n                return -1;\n            }\n\n            // moving to next characters\n            i++;\n            j++;\n        }\n\n        // checking if both strings are of equal length\n        if (i == m && j == n) {\n            return 0;\n        }\n        // handling case where one string is a prefix of the other\n        if (j < n) {\n            return -1;\n        }\n\n        return 1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to compare two strings.\n    def stringComparsion(self, s1, s2):\n        m=len(s1)\n        n=len(s2)\n        i=0\n        j=0\n        \n        #iterating over the characters of both strings.\n        while(i<m and j<n):\n            \n            #checking for the substring 'ng' in both strings.\n            if (i<m-1 and j<n-1 and s1[i] == 'n' and s1[i+1] == 'g' and s2[j] == 'n' and s2[j+1] == 'g'):\n                i+=1\n                j+=1\n                continue\n            \n            #checking for the substring 'ng' only in s1.\n            if (i<m-1 and s1[i] == 'n' and s1[i+1] == 'g'):\n                i+=1\n                \n                #checking if the next character in s2 is >= 'o'.\n                if (s2[j]>='o'):\n                    return -1\n                return 1\n            \n            #checking for the substring 'ng' only in s2.\n            if (j<n-1 and s2[j] == 'n' and s2[j+1] == 'g'):\n                j+=1\n                \n                #checking if the next character in s1 is >= 'o'.\n                if (s1[i]>='o'):\n                    return 1\n                return -1\n            \n            #if the characters at the current positions are different,\n            #then comparing them and returning the result.\n            if(s1[i] > s2[j]):\n            \treturn 1\n            \n            elif(s1[i]<s2[j]):\n            \treturn -1\n            \n            #incrementing the indices after comparing the characters.\n            i+=1\n            j+=1\n        \n        #if both strings have been iterated completely and are equal,\n        #returning 0 as result.\n        if (i==m and j==n):\n            return 0\n        \n        #if string s1 has been iterated completely but s2 still has\n        #some characters left, returning -1 as result.\n        if (j<n):\n            return -1\n        \n        #if string s2 has been iterated completely but s1 still has\n        #some characters left, returning 1 as result.\n        return 1",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}