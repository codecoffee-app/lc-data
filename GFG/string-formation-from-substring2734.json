{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703278,
            "title": "String formation from substring",
            "titleSlug": "string-formation-from-substring2734",
            "content": "<p><span style=\"font-size: 18px;\">Given a string s, the task is to check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.&nbsp; </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"ababab\"\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> It is constructed by \nappending \"ab\" 3 times</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"ababac\"\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Not possible to construct</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Your task is to complete the function <strong><code>isRepeat</code>()&nbsp;</strong>which takes a single string as input and returns 1 if possible to construct, otherwise 0. You do not need to take any input or print anything.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|s|)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(|s|)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |s| &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, determine if it can be formed by repeating a substring of itself multiple times.",
                "constraints": [
                    "1 <= |s| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "ababab",
                        "output": "1",
                        "explanation": "The string 'ababab' can be constructed by repeating the substring 'ab' three times: 'ab' + 'ab' + 'ab' = 'ababab'."
                    },
                    {
                        "input": "ababac",
                        "output": "0",
                        "explanation": "The string 'ababac' cannot be constructed by repeating any of its substrings."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. Find longest prefix suffix array of the string</p>",
            "<p>https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "makemytrip"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution{\r\npublic:\r\n\t\r\n\tvoid computeLPSArray(string str, int M, int lps[])\r\n\t{\r\n\t    int len = 0; //lenght of the previous longest prefix suffix\r\n\t    int i;\r\n\t    \r\n\t    lps[0] = 0; //lps[0] is always 0\r\n\t    i = 1;\r\n\t    \r\n\t    // the loop calculates lps[i] for i = 1 to M-1\r\n\t    while (i < M)\r\n\t    {\r\n\t        if (str[i] == str[len])\r\n\t        {\r\n\t            len++;\r\n\t            lps[i] = len;\r\n\t            i++;\r\n\t        }\r\n\t        else // (pat[i] != pat[len])\r\n\t        {\r\n\t            if (len != 0)\r\n\t            {\r\n\t                // This is tricky. Consider the example AAACAAAA\r\n\t                // and i = 7.\r\n\t                len = lps[len-1];\r\n\t                \r\n\t                // Also, note that we do not increment i here\r\n\t            }\r\n\t            else // if (len == 0)\r\n\t            {\r\n\t                lps[i] = 0;\r\n\t                i++;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t}\r\n\r\n\t\r\n\tint isRepeat(string str)\r\n\t{\r\n\t    // Find length of string and create an array to\r\n\t    // store lps values used in KMP\r\n\t    int n = str.size();\r\n\t    int lps[n];\r\n\t    \r\n\t    // Preprocess the pattern (calculate lps[] array)\r\n\t    computeLPSArray(str, n, lps);\r\n\t    \r\n\t    // Find length of longest suffix which is also\r\n\t    // prefix of str.\r\n\t    int len = lps[n-1];\r\n\t    \r\n\t    // If there exist a suffix which is also prefix AND\r\n\t    // Length of the remaining substring divides total\r\n\t    // length, then str[0..n-len-1] is the substring that\r\n\t    // repeats n/(n-len) times (Readers can print substring\r\n\t    // and value of n/(n-len) for more clarity.\r\n\t    return (len > 0 && n%(n-len) == 0)? 1: 0;\r\n\t}\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\r\n\r\nclass Solution{\r\n    void computeLPSArray(String str, int M, int lps[])\r\n\t{\r\n\t    int len = 0; //lenght of the previous longest prefix suffix\r\n\t    int i;\r\n\t    \r\n\t    lps[0] = 0; //lps[0] is always 0\r\n\t    i = 1;\r\n\t    \r\n\t    // the loop calculates lps[i] for i = 1 to M-1\r\n\t    while (i < M)\r\n\t    {\r\n\t        if (str.charAt(i) == str.charAt(len))\r\n\t        {\r\n\t            len++;\r\n\t            lps[i] = len;\r\n\t            i++;\r\n\t        }\r\n\t        else // (pat[i] != pat[len])\r\n\t        {\r\n\t            if (len != 0)\r\n\t            {\r\n\t                // This is tricky. Consider the example AAACAAAA\r\n\t                // and i = 7.\r\n\t                len = lps[len-1];\r\n\t                \r\n\t                // Also, note that we do not increment i here\r\n\t            }\r\n\t            else // if (len == 0)\r\n\t            {\r\n\t                lps[i] = 0;\r\n\t                i++;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t}\r\n\r\n    int isRepeat(String s) {\r\n        int n = s.length();\r\n\t    int [] lps = new int[n];\r\n\t    \r\n\t    // Preprocess the pattern (calculate lps[] array)\r\n\t    computeLPSArray(s, n, lps);\r\n\t    \r\n\t    // Find length of longest suffix which is also\r\n\t    // prefix of str.\r\n\t    int len = lps[n-1];\r\n\t    \r\n\t    // If there exist a suffix which is also prefix AND\r\n\t    // Length of the remaining substring divides total\r\n\t    // length, then str[0..n-len-1] is the substring that\r\n\t    // repeats n/(n-len) times (Readers can print substring\r\n\t    // and value of n/(n-len) for more clarity.\r\n\t    return (len > 0 && n%(n-len) == 0)? 1: 0;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def computeLPSArray(self, str, M, lps):\n        len = 0\n        #lenght of the previous longest prefix suffix\n        # int i;\n\n        lps[0] = 0\n        #lps[0] is always 0\n        i = 1\n\n        # the loop calculates lps[i] for i = 1 to M-1\n        while (i < M):\n            if (str[i] == str[len]):\n                len += 1\n                lps[i] = len\n                i += 1\n            else:  # (pat[i] != pat[len])\n                if (len != 0):\n                    # This is tricky. Consider the example AAACAAAA\n                    # and i = 7.\n                    len = lps[len - 1]\n\n                    # Also, note that we do not increment i here\n                else:  #  if (len == 0)\n                    lps[i] = 0\n                    i += 1\n\n    def isRepeat(self, str):\n        #  Find length of string and create an array to\n        #  store lps values used in KMP\n        n = len(str)\n        lps = [0] * n\n\n        #  Preprocess the pattern (calculate lps[] array)\n        self.computeLPSArray(str, n, lps)\n\n        #  Find length of longest suffix which is also\n        #  prefix of str.\n        length = lps[n - 1]\n\n        #  If there exist a suffix which is also prefix AND\n        #  Length of the remaining substring divides total\n        #  length, then str[0..n-len-1] is the substring that\n        #  repeats n/(n-len) times (Readers can print substring\n        #  and value of n/(n-len) for more clarity.\n        return 1 if (length > 0 and n % (n - length) == 0) else 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution{\r\n    isRepeat(s){\r\n        let n = s.length;\r\n        let lps = new Array(n);\r\n        \r\n        this.computeLPSArray(s, n, lps);\r\n        \r\n        let len = lps[n-1];\r\n        \r\n        return (len > 0 && n%(n-len) == 0)? 1: 0;\r\n    }\r\n    \r\n    computeLPSArray(str, M, lps){\r\n        let len = 0;\r\n        let i = 1;\r\n        \r\n        lps[0] = 0;\r\n        \r\n        while (i < M){\r\n            if (str[i] == str[len]){\r\n                len++;\r\n                lps[i] = len;\r\n                i++;\r\n            }\r\n            else{\r\n                if (len != 0){\r\n                    len = lps[len-1];\r\n                }\r\n                else{\r\n                    lps[i] = 0;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}