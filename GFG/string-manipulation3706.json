{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702821,
            "title": "String Manipulation",
            "titleSlug": "string-manipulation3706",
            "content": "<div class=\"starwars-lab\">\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\">Tom is a string freak. He has got sequences of words <strong>arr[]</strong> to manipulate. If in a sequence, two same words come together then Tom destroys each other. Find the number of words left in the sequence after this pairwise destruction.</span></span>&nbsp;</p>\n<div class=\"starwars-lab\">\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Examples:</strong></span></span></p>\n<pre><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input: </strong>arr[] = [\"ab\", \"aa\", \"aa\", \"bcd\", \"ab\"]\n<strong>Output: </strong>3<strong>\nExplanation: </strong>After the first iteration, we'll have: ab bcd ab. We can't further destroy more strings and hence we stop and the result is 3. </span></span></pre>\n<pre><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input: </strong>arr[] = [\"tom\", \"jerry\", \"jerry\", \"tom\"]\n<strong>Output: </strong>0\n<strong>Explanation: </strong>After the first iteration, we'll have: tom tom. After the second iteration: 'empty-array' .Hence, the result is 0.</span></span></pre>\n</div>\n<p><span ><span style=\"font-family: arial, helvetica, sans-serif;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space: </strong>O(n)<br /><br /><strong>Constraints:</strong><br />1 &le; arr.size() &le;10<sup>6</sup><br />1 &le; |arr<sub>i</sub>| &le; 50</span></span></p>\n</div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Tom, a string enthusiast, is given an array of words, `arr[]`. His goal is to manipulate this sequence by removing pairs of identical adjacent words.  Whenever two consecutive words in the sequence are the same, they are both destroyed.  Determine the number of words remaining in the sequence after performing this pairwise destruction until no further destruction is possible.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= |arr_i| <= 50"
                ],
                "testcases": [
                    {
                        "input": "[\"ab\", \"aa\", \"aa\", \"bcd\", \"ab\"]",
                        "output": "3",
                        "explanation": "Initially, we have [\"ab\", \"aa\", \"aa\", \"bcd\", \"ab\"]. The pair \"aa\", \"aa\" is destroyed, leaving [\"ab\", \"bcd\", \"ab\"]. No further destructions are possible, so the result is 3."
                    },
                    {
                        "input": "[\"tom\", \"jerry\", \"jerry\", \"tom\"]",
                        "output": "0",
                        "explanation": "Initially, we have [\"tom\", \"jerry\", \"jerry\", \"tom\"]. The pair \"jerry\", \"jerry\" is destroyed, leaving [\"tom\", \"tom\"]. The pair \"tom\", \"tom\" is destroyed, leaving an empty array. Hence, the result is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a stack to efficiently remove consecutive duplicates by pushing elements onto the stack and popping them if they match the top element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int removeConsecutiveSame(vector<string>& arr) {\n        stack<string> st;\n\n        // Start traversing the sequence\n        for (int i = 0; i < arr.size(); i++) {\n            // Push the current string if the stack\n            // is empty\n            if (st.empty())\n                st.push(arr[i]);\n            else {\n                string str = st.top();\n\n                // compare the current string with stack top\n                // if equal, pop the top\n                if (str.compare(arr[i]) == 0)\n                    st.pop();\n\n                // Otherwise push the current string\n                else\n                    st.push(arr[i]);\n            }\n        }\n\n        // Return stack size\n        return st.size();\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static int removeConsecutiveSame(String[] arr) {\n        Stack<String> st = new Stack<>();\n\n        // Start traversing the sequence\n        for (int i = 0; i < arr.length; i++) {\n            // Push the current string if the stack is empty\n            if (st.empty())\n                st.push(arr[i]);\n            else {\n                String str = st.peek();\n\n                // Compare the current string with the stack top\n                // If equal, pop the top\n                if (str.equals(arr[i])) st.pop();\n                // Otherwise, push the current string\n                else\n                    st.push(arr[i]);\n            }\n        }\n\n        // Return stack size\n        return st.size();\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def removeAdj(self, arr):\n        stk = []  # create an empty stack\n        n = len(arr)\n\n        # iterate over each element in the input list\n        for e in arr:\n            # if the stack is not empty and the current element matches the top element of the stack,\n            # pop the top element from the stack\n            if stk and stk[-1] == e:\n                stk.pop()\n            else:\n                # otherwise, push the current element onto the stack\n                stk.append(e)\n\n        # return the length of the stack\n        return len(stk)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    removeConsecutiveSame(arr) {\n        let st = [];\n\n        // Start traversing the sequence\n        for (let i = 0; i < arr.length; i++) {\n            // Push the current string if the stack is empty\n            if (st.length === 0) {\n                st.push(arr[i]);\n            } else {\n                let str = st[st.length - 1];\n\n                // Compare the current string with stack top\n                // If equal, pop the top\n                if (str === arr[i]) {\n                    st.pop();\n                } else {\n                    // Otherwise push the current string\n                    st.push(arr[i]);\n                }\n            }\n        }\n\n        // Return stack size\n        return st.length;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}