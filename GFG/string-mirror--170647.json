{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714262,
            "title": "String Mirror",
            "titleSlug": "string-mirror--170647",
            "content": "<p><span style=\"font-size: 18px;\">You are given a string <strong>str</strong>&nbsp;of length <strong>n</strong>. You want to choose a non-zero integer k (k&lt;=n), such that you can perform the following operation:<br />Take the prefix of the string of length k and append the reverse of it to itself.<br />Your task is to find the <strong>lexicographically smallest</strong> string you can get.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nstr = \"bvdfndkn\"\n<strong>Output:</strong>\nbb\n<strong>Explanation:\n</strong>If we choose k=1, prefix of length k will be \"b\", reverse of\nthis prefix will be \"b\" itself, when we append both we get \"bb\",\n\"bb\" is the lexicographically smallest string you can get.\nIf you choose k&gt;1, the resulting string will not be \nlexicographically smaller than \"bb\".</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nstr = \"casd\"\n<strong>Output:</strong>\ncaac\n<strong>Explanation:\n</strong>If we choose k=2, prefix of length k will be \"ca\", reverse of\nthis prefix will be \"ac\", when we append both we get \"caac\",\n\"caac\" is the lexicographically smallest string you can get.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>stringMirror()</strong> which takes a String <strong>str</strong>&nbsp;as input, and returns&nbsp;the lexicographically smallest string.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(|str|)<br /><strong>Expected Space Complexity:</strong> O(|str|)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |str| &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` of length `n`, you need to find the lexicographically smallest string that can be obtained by the following operation:\n\n1. Choose a non-zero integer `k` (1 <= k <= n).\n2. Take the prefix of `str` of length `k`.\n3. Reverse the prefix.\n4. Append the reversed prefix to the original prefix to form a new string.\n\nYour task is to determine the lexicographically smallest string possible by trying different values of `k`.",
                "constraints": [
                    "1 <= |str| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "bvdfndkn",
                        "output": "bb",
                        "explanation": "Choosing k=1, the prefix is \"b\". The reverse is \"b\". Appending gives \"bb\". Any k > 1 results in a lexicographically larger string."
                    },
                    {
                        "input": "casd",
                        "output": "caac",
                        "explanation": "Choosing k=2, the prefix is \"ca\". The reverse is \"ac\". Appending gives \"caac\".  This is the lexicographically smallest possible string in this case."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Greedy Approach</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to find the mirror string\n    string stringMirror(string str){\n        char last=str[0];\n        string tmp,ans1,ans2;\n        tmp+=str[0];\n        \n        // Finding the substring in non-decreasing order\n        for(int i=1;i<str.length();i++){\n            // If current character is smaller than last character, add it to the substring\n            if(str[i]<last){\n                last=str[i];\n                tmp+=last;\n            }\n            // If current character is greater or equal to last character, break the loop\n            else break;\n        }\n        ans1+=tmp;\n        \n        // Reversing the substring and adding it to the answer string\n        reverse(tmp.begin(),tmp.end());\n        ans1+=tmp;\n        \n        tmp=\"\";\n        tmp+=str[0];\n        last=str[0];\n        \n        // Finding the substring in non-increasing order\n        for(int i=1;i<str.length();i++){\n            // If current character is smaller or equal to last character, add it to the substring\n            if(str[i]<=last){\n                last=str[i];\n                tmp+=last;\n            }\n            // If current character is greater than last character, break the loop\n            else break;\n        }\n        ans2+=tmp;\n        \n        // Reversing the substring and adding it to the answer string\n        reverse(tmp.begin(),tmp.end());\n        ans2+=tmp;\n        \n        // Returning the minimum of the two answer strings\n        return min(ans1,ans2);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static String stringMirror(String str) {\r\n        // code here\r\n        char last=str.charAt(0);\r\n        StringBuilder tmp=new StringBuilder(),ans1=new StringBuilder(),ans2=new StringBuilder();\r\n        tmp.append(str.charAt(0));\r\n        for(int i=1;i<str.length();i++){\r\n            if(str.charAt(i)<last){\r\n                last=str.charAt(i);\r\n                tmp.append(last);\r\n            }\r\n            else break;\r\n        }\r\n        ans1.append(tmp);\r\n        tmp.reverse();\r\n        ans1.append(tmp);\r\n        tmp=new StringBuilder();\r\n        tmp.append(str.charAt(0));\r\n        last=str.charAt(0);\r\n        for(int i=1;i<str.length();i++){\r\n            if(str.charAt(i)<=last){\r\n                last=str.charAt(i);\r\n                tmp.append(last);\r\n            }\r\n            else break;\r\n        }\r\n        ans2.append(tmp);\r\n        tmp.reverse();\r\n        ans2.append(tmp);\r\n        if(ans1.toString().compareTo(ans2.toString())<=0){\r\n            return ans1.toString();\r\n        }else{\r\n            return ans2.toString();\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def stringMirror(self, str):\n        lst = str[\n            0]  #initialize variable lst with first character of the string\n        tmp = str[\n            0]  #initialize variable tmp with first character of the string\n        for i in range(1, len(str)):\n            if str[i] < lst:  #check if current character is smaller than lst\n                last = str[i]  #update last with current character\n                tmp += lst  #append lst to tmp\n            else:\n                break  #exit the loop if current character is not smaller than lst\n        ans1 = tmp  #initialize ans1 with tmp\n        ans1 += tmp[::-1]  #append reverse of tmp to ans1\n        tmp = str[0]  #reset tmp to first character of the string\n        lst = tmp  #reset lst to first character of the string\n        for i in range(1, len(str)):\n            if str[i] <= lst:  #check if current character is smaller or equal to lst\n                lst = str[i]  #update lst with current character\n                tmp += lst  #append lst to tmp\n            else:\n                break  #exit the loop if current character is not smaller or equal to lst\n        ans2 = tmp + tmp[::\n                         -1]  #initialize ans2 with tmp appended with reverse of tmp\n        return min(ans1, ans2)  #return the minimum value between ans1 and ans2\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find the mirror of the given string.\n    public string stringMirror(string str)\n    {\n        char last = str[0];\n        string tmp = \"\";\n        string ans1 = \"\";\n        string ans2 = \"\";\n        tmp += str[0];\n\n        // Finding the substring in non-decreasing order\n        for (int i = 1; i < str.Length; i++)\n        {\n            // If current character is smaller than last character\n            // add it to the substring\n            if (str[i] < last)\n            {\n                last = str[i];\n                tmp += last;\n            }\n            // If current character is greater or equal \n            // to last character, break the loop\n            else\n                break;\n        }\n        ans1 += tmp;\n\n        // Reversing the substring and adding it to the answer string\n        char[] tmpCharArr = tmp.ToCharArray();\n        Array.Reverse(tmpCharArr);\n        string reversedTmp = new string(tmpCharArr);\n        ans1 += reversedTmp;\n\n        tmp = \"\";\n        tmp += str[0];\n        last = str[0];\n\n        // Finding the substring in non-increasing order\n        for (int i = 1; i < str.Length; i++)\n        {\n            // If current character is smaller or equal\n            // to last character, add it to the substring\n            if (str[i] <= last)\n            {\n                last = str[i];\n                tmp += last;\n            }\n            // If current character is greater than \n            // last character, break the loop\n            else\n                break;\n        }\n        ans2 += tmp;\n\n        // Reversing the substring and adding it to the answer string\n        tmpCharArr = tmp.ToCharArray();\n        Array.Reverse(tmpCharArr);\n        reversedTmp = new string(tmpCharArr);\n        ans2 += reversedTmp;\n\n        // Returning the minimum of the two answer strings\n        return ans1.CompareTo(ans2) < 0 ? ans1 : ans2;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} str\n * @returns {string}\n*/\n\nclass Solution {\n    //Function to find a stringMirror.\n    stringMirror(str)\n    {\n        let lst=str[0]; \n        let tmp=str[0]; \n        for (let i=1; i<str.length; i++) {\n            if (str[i]<lst) {\n                let last=str[i];\n                tmp+=lst;\n            }\n            else {\n                break;\n            }\n        }\n        let ans1=tmp;\n        ans1+=tmp.split('').reverse().join('');\n        tmp=str[0];\n        lst=tmp;\n        for (let i=1; i<str.length; i++) {\n            if (str[i]<=lst) {\n                lst=str[i];\n                tmp+=lst;\n            }\n            else {\n                break;\n            }\n        }\n        let ans2=tmp+tmp.split('').reverse().join('');\n        return (ans1<ans2) ? ans1 : ans2;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}