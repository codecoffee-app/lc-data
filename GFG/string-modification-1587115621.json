{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700471,
            "title": "String Modification",
            "titleSlug": "string-modification-1587115621",
            "content": "<p><span style=\"font-size:18px\">Given a string with repeated characters, the task is to complete the function&nbsp;rearrangeString&nbsp;which rearrange characters in a string so that no two adjacent characters are same.<br />\n<strong>Note :</strong>&nbsp;It may be assumed that the string has only lowercase English alphabets and such transformation is always always possible.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>S = aaabc\n<strong>Output: </strong>1<strong>\nExplanation: </strong>We can transform the string\nto abaca.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>S = aaabb\n<strong>Output: </strong>1<strong>\nExplanation: </strong>We can transform the string\nto ababa.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nComplete the function&nbsp;<strong>rearrangeString()</strong>&nbsp;which takes a string as an input parameter and returns the rearranged string. (The output will be 1 if the returned string has no adjacent character same, otherwise 0. Printing is done by the driver&#39;s code.)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N * log N), N = length of the string.<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(constant)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1<u>&lt;</u>&nbsp;N <u>&lt;</u> 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` with repeated lowercase English alphabet characters, rearrange the characters in the string such that no two adjacent characters are the same. It is guaranteed that such a rearrangement is always possible.",
                "constraints": [
                    "1 <= N <= 10^5, where N is the length of the string S."
                ],
                "testcases": [
                    {
                        "input": "aaabc",
                        "output": "1",
                        "explanation": "The string can be rearranged to 'abaca', where no two adjacent characters are the same."
                    },
                    {
                        "input": "aaabb",
                        "output": "1",
                        "explanation": "The string can be rearranged to 'ababa', where no two adjacent characters are the same."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use priority queue. Insert the into the priority queue in the form of pair({occurence of that character, character}). Pop from the priority queue and add the character to the answer string and decrement the frequency of the character and store it into a variable(say, prev). Then pop the next element from the priority queue and then add the character to answer string and decrement the frequency of that character. Now check if the previous character&#39;s frequency is still greater than zero then add this character pair in the priority queue. Repeat the process until priority queue is empty.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "struct Key\n{\n    int freq;\n    char ch;\n    bool operator<(const Key &k) const\n    {\n        return freq < k.freq;\n    }\n};\nclass Solution{\n  public:\n    string rearrangeString(string str)\n    {\n        int n = str.length();\n        int count[MAX_CHAR] = {0};\n        for (int i = 0 ; i < n ; i++)\n            count[str[i]-'a']++;\n        priority_queue< Key > pq;\n        for (char c = 'a' ; c <= 'z' ; c++)\n            if (count[c-'a'])\n                pq.push( Key { count[c-'a'], c} ); // insert frequency and character pair\n        str = \"\" ;\n        Key prev {-1, '#'} ;\n        while (!pq.empty())\n        {\n            Key k = pq.top();\n            pq.pop();\n            str = str + k.ch;// add to ans string\n            if (prev.freq > 0)\n                pq.push(prev);// insert previous pair if frequncy is greater than 0\n            (k.freq)--;\n            prev = k;\n        }\n        if (n != str.length())\n            return \"-1\";\n        return str;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\nclass Solution\n{\n    static class MyPDPair implements Comparable<MyPDPair>{\n\tchar c;\n\tint count;\n\t@Override\n\tpublic int compareTo(MyPDPair o) {\n\t\treturn this.count<o.count?1:-1;\n\t}\n   }\n   \n   public static String rearrangeString(String str)\n   {\n       \tint[] chrArr=new int[26];\n       \tfor(char c:str.toCharArray())\n       \t{\n\t\t\tchrArr[c-'a']+=1;\n\t\t}\n\t\t\n\t\tPriorityQueue<MyPDPair> pq = new PriorityQueue<MyPDPair>();\n\t\t\tfor(int i=0;i<26;i++){\n\t\t\tif(chrArr[i]!=0){\n\t\t\t\tMyPDPair pair=new MyPDPair();\n\t\t\t\tpair.c=(char)(i+'a');\n\t\t\t\tpair.count=chrArr[i];\n\t\t\t\t// insert frequency and character pair in priority queue\n\t\t\t\tpq.add(pair);\n\t\t\t}\n\t\t}\n\t\t\n\t\tMyPDPair prev=null;\n\t\tStringBuffer sb=new StringBuffer();\n\t\twhile(!pq.isEmpty()){\n\t\t\tMyPDPair tmp=prev;\n\t\t\t// get first pair from proirity queue\n\t\t\tMyPDPair cur=pq.poll();\n\t\t\tif(cur.count==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcur.count=cur.count-1;\n\t\t\t// add current character to answer\n\t\t\tsb.append(cur.c);\n\t\t\t\n\t\t\tif(tmp!=null){\n\t\t\t    // adding previous character into the priority queue\n\t\t\t\tpq.add(tmp);\n\t\t\t}\n\t\t\tprev=cur;\n \t\t}\n \t\treturn sb.toString();\n   }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from heapq import *\n\nclass Solution:\n    def rearrangeString(self, string):\n        # Code here\n        n = len(string)\n        count = [0]*26\n        for i in range(n):\n            count[ord(string[i]) - 97]+=1\n        pq = []\n        res = ''\n        for i in range(97, 123):\n            if count[i - 97]!=0:\n                heappush(pq, [-1 * count[i-97], chr(i)])\n        # print(list(pq))\n        prev = [1, '#']\n        while pq!=[]:\n            ky = heappop(pq)\n            # print(ky, pq)\n            res = res + ky[1]\n            if prev[0]<0:\n                heappush(pq, prev)\n            ky[0]+=1\n            prev = ky\n        if len(res)!=n:\n            return '-1'\n        return res\n\n\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    rearrangeString(s){\n        const MAX_CHAR = 26;\n        let n = s.length;\n        let count = new Array(MAX_CHAR).fill(0);\n\n        for(let i = 0; i < n; i++) {\n            count[s.charCodeAt(i) - 97]++;\n        }\n\n        let pq = []; \n\n        for(let c = 97; c <= 122; c++) {\n            if(count[c-97]) {\n                pq.push({freq: count[c-97], ch: String.fromCharCode(c)});\n            }\n        }\n\n        pq.sort((a, b) => b.freq - a.freq);\n\n        let str = \"\";\n        let prev = {freq: -1, ch: '#'};\n\n        while(pq.length > 0) {\n            let k = pq[0];\n            pq = pq.slice(1);\n            str += k.ch;\n\n            if (prev.freq > 0) {\n                pq.push(prev);\n                pq.sort((a, b) => b.freq - a.freq);\n            }\n\n            k.freq--;\n            prev = k;\n        }\n\n        if(n !== str.length) {\n            return \"-1\";\n        }\n        return str;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}