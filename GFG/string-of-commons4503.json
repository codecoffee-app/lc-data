{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704956,
            "title": "String of Commons",
            "titleSlug": "string-of-commons4503",
            "content": "<p><span style=\"font-size:18px\">Given two strings, s1 and s2, composed of only English alphabets (both upper and lower cases), find the alphabets that occur in both the strings. find&nbsp;the common alphabets (if any).<br />\r\n<br />\r\n<strong>Note:</strong><br />\r\n1. Upper and lower alphabets are different.<br />\r\n2. Don&#39;t print any duplicates, even if they exit multiple times.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>s1 = &quot;tUvGH&quot;, s2 = &quot;Hhev&quot;\r\n<strong>Output: </strong>Hv\r\n<strong>Explanation: </strong>The common letter are H and v. \r\nHence output is, &quot;Hv&quot;.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>s1 = &quot;aabb&quot;, s2 = &quot;ccll&quot;\r\n<strong>Output: </strong>nil\r\n<strong>Explanation: </strong>There is nothing common, hence\r\nthe output is &quot;nil&quot;.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>commom_String()</strong>&nbsp;which takes s1 and s2 as input parameter and returns the letters which are common in both the strings in string format. If there is nothing common then returns &quot;nil&quot;. The string which is returned must contain all the capital letters followed by small letter in ascending order.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;&nbsp;</strong>O(max(|s1|, |s2|)<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(k) where k is constant.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; |s1|, |s2| &le; 1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, s1 and s2, consisting of English alphabets (both uppercase and lowercase), identify the alphabets that appear in both strings.  Note that uppercase and lowercase alphabets are considered distinct.  The solution should not include duplicate alphabets, even if they appear multiple times in the input strings.",
                "constraints": [
                    "1 <= |s1|, |s2| <= 1000"
                ],
                "testcases": [
                    {
                        "input": "s1 = \"tUvGH\", s2 = \"Hhev\"",
                        "output": "Hv",
                        "explanation": "The common letters are H and v. Hence the output is \"Hv\"."
                    },
                    {
                        "input": "s1 = \"aabb\", s2 = \"ccll\"",
                        "output": "nil",
                        "explanation": "There are no common letters, so the output is \"nil\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use hash map</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n    //Function to find common characters in two strings.\r\n    string common_String(string s1, string s2){\r\n        //Initializing hash arrays to count frequencies of characters.\r\n        vector<int>hash1(26,0), hash2(26, 0), hash3(26, 0), hash4(26, 0);\r\n\r\n        //Counting frequencies of characters in first string.\r\n        for(auto i: s1){\r\n            if(isupper(i))\r\n                hash1[i-'A']++;\r\n            else\r\n                hash2[i-'a']++;\r\n        }\r\n\r\n        //Counting frequencies of characters in second string.\r\n        for(auto i: s2){\r\n            if(isupper(i))\r\n                hash3[i-'A']++;\r\n            else\r\n                hash4[i-'a']++;\r\n        }\r\n\r\n        string ans = \"\";\r\n\r\n        //Appending characters which are common in both strings.\r\n        for(char ch = 'A'; ch <= 'Z'; ch++)\r\n            if(hash1[ch-'A'] and hash3[ch-'A'])ans+=ch;\r\n\r\n        for(char ch = 'a'; ch <= 'z'; ch++)\r\n            if(hash2[ch-'a'] and hash4[ch-'a'])ans+=ch;\r\n\r\n        //If no common characters found\r\n        if(ans.size() == 0)ans = \"nil\";\r\n\r\n        //Returning common characters.\r\n        return ans;\r\n   }    \r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}