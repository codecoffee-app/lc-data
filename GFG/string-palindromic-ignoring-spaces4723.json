{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702983,
            "title": "Palindrome Sentence",
            "titleSlug": "string-palindromic-ignoring-spaces4723",
            "content": "<p><span >Given a single string&nbsp;<strong>s</strong>, the task is to check if it is a palindrome sentence or not. A palindrome sentence is a sequence of characters, such as word, phrase, or series of symbols that reads the same backward as forward after converting all uppercase letters to lowercase and removing all non-alphanumeric characters.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \"Too hot to hoot\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> </span><span style=\"font-size: 18.6667px;\">If we remove all non-alphanumeric characters and convert all uppercase letters to lowercase, string s will become <code>&ldquo;toohottohoot&rdquo;</code> which is a palindrome.</span></pre>\n<pre><span ><strong>Input: </strong>s = \"Abc 012..## 10cbA\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> </span><span style=\"font-size: 18.6667px;\">If we remove all non-alphanumeric characters and convert all uppercase letters to lowercase, string s will become <code>&ldquo;abc01210cba&rdquo;</code> which is a palindrome.</span></pre>\n<pre><span ><strong>Input: </strong>s = \"ABC $. def01ASDF\"<br /><strong>Output:</strong> false<br /><strong>Explanation:</strong> The processed string becomes <code>\"abcdef01asdf\"</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, which is not a palindrome.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1&lt;= s.size() &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use two pointers to skip non-alphabetic characters, comparing letters from both ends until they meet in the middle.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "palindrome",
                "slug": "palindrome"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    bool sentencePalindrome(string &s) {\n        string temp = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (isalnum(s[i])) {\n                if (isalpha(s[i]))\n                    temp += tolower(s[i]);\n                else\n                    temp += s[i];\n            }\n        }\n        int i = 0, j = temp.length() - 1;\n        while (i <= j) {\n            if (temp[i] != temp[j])\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean sentencePalindrome(String s) {\n        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            // Skip non-alphanumeric characters\n            if (!Character.isLetterOrDigit(s.charAt(i))) {\n                i++;\n            } else if (!Character.isLetterOrDigit(s.charAt(j))) {\n                j--;\n            } else {\n                // Compare characters case-insensitively\n                if (Character.toLowerCase(s.charAt(i)) !=\n                    Character.toLowerCase(s.charAt(j))) {\n                    return false;\n                }\n                i++;\n                j--;\n            }\n        }\n        return true;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def sentencePalindrome(self, s):\n        i, j = 0, len(s) - 1\n        while i < j:\n            # Skip non-alphanumeric characters\n            if not s[i].isalnum():\n                i += 1\n            elif not s[j].isalnum():\n                j -= 1\n            else:\n                # Compare characters case-insensitively\n                if s[i].lower() != s[j].lower():\n                    return False\n                i += 1\n                j -= 1\n        return True\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public bool sentencePalindrome(string s) {\n        int i = 0, j = s.Length - 1;\n        while (i < j) {\n            // Skip non-alphanumeric characters\n            if (!Char.IsLetterOrDigit(s[i])) {\n                i++;\n            } else if (!Char.IsLetterOrDigit(s[j])) {\n                j--;\n            } else {\n                // Compare characters case-insensitively\n                if (Char.ToLower(s[i]) != Char.ToLower(s[j])) {\n                    return false;\n                }\n                i++;\n                j--;\n            }\n        }\n        return true;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {string} s\n * @returns {boolean}\n */\n\nclass Solution {\n    sentencePalindrome(s) {\n        let i = 0, j = s.length - 1;\n        while (i < j) {\n            // Skip non-alphanumeric characters\n            if (!/[a-zA-Z0-9]/.test(s[i])) {\n                i++;\n            } else if (!/[a-zA-Z0-9]/.test(s[j])) {\n                j--;\n            } else {\n                // Compare characters case-insensitively\n                if (s[i].toLowerCase() !== s[j].toLowerCase()) {\n                    return false;\n                }\n                i++;\n                j--;\n            }\n        }\n        return true;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}