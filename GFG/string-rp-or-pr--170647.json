{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713997,
            "title": "String rp or pr",
            "titleSlug": "string-rp-or-pr--170647",
            "content": "<p><span style=\"font-size:18px\">Given a string S. In one operation, you can remove the substring &quot;pr&quot; from the string S and get amount X or you can remove the substring &quot;rp&quot; and get the amount Y.&nbsp;<br />\r\nFind the maximum amount you can get if you perform zero or more such operations optimally.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note :&nbsp;</strong></span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">Substring of a string S is defined as a continuous sequence of characters in S.</span></li>\r\n\t<li><span style=\"font-size:18px\">After removing pr or rp, the order of remaining letters should remain the same<strong>.</strong></span></li>\r\n</ul>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">X = 5, Y = 4\r\nS = &quot;abppprrr&quot;</span>\r\n<strong><span style=\"font-size:18px\">Output:</span> </strong><span style=\"font-size:18px\">15</span>\r\n<span style=\"font-size:18px\"><strong>Explanation: </strong></span>\r\n<span style=\"font-size:18px\">Here, S <strong>= &quot;</strong>abppprrr&quot; </span>\r\n<span style=\"font-size:18px\">X= 5, Y=4.</span>\r\n<span style=\"font-size:18px\">Remove &quot;pr&quot;, new string S = &quot;abpprr&quot;.</span>\r\n<span style=\"font-size:18px\">Remove &quot;pr&quot;, new string S = &quot;abpr&quot;.</span>\r\n<span style=\"font-size:18px\">Remove &quot;pr&quot;, new string S = &quot;ab&quot;.</span>\r\n<span style=\"font-size:18px\">In total, we removed &quot;pr&quot; 3 times, \r\nso total score is 3*X + 0*Y = 3*5 =15.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">X = 7, Y = 7\r\nS = &quot;prpptppr&quot;</span>\r\n<strong><span style=\"font-size:18px\">Output:</span> </strong><span style=\"font-size:18px\">14</span>\r\n<span style=\"font-size:18px\"><strong>Explanation: </strong></span>\r\n<span style=\"font-size:18px\">Here, S <strong>= &quot;</strong>prpptppr&quot; </span>\r\n<span style=\"font-size:18px\">X= 7, Y=7.\r\nAs both have the same amount we can first \r\nremove either pr or rp. Here we start with pr</span>\r\n<span style=\"font-size:18px\">Remove &quot;pr&quot;, new string S = &quot;pptppr&quot;.</span>\r\n<span style=\"font-size:18px\">Remove &quot;pr&quot;, new string S = &quot;pptp&quot;.</span>\r\n<span style=\"font-size:18px\">In total, we removed &quot;pr&quot; 2 times, \r\nso total score is 2*X + 0*Y = 2*7 =14.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function<strong>&nbsp;solve()</strong>&nbsp;which takes the X ,Y and string S&nbsp;as input parameters&nbsp;and&nbsp;returns the maximum amount you can get after performing the above operations.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(|S|)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(|S|)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints</strong>:<br />\r\n1 &le; |S| &le; 10<sup>5</sup><br />\r\n1 &le; X,Y &le; 10<sup>5</sup><br />\r\nS contains&nbsp;lowercase English letters only.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S`, you can perform operations to maximize your score. In each operation, you can remove the substring \"pr\" and earn `X` points, or remove the substring \"rp\" and earn `Y` points.  Determine the maximum score achievable by performing zero or more of these operations optimally.",
                "constraints": [
                    "1 <= |S| <= 10^5",
                    "1 <= X, Y <= 10^5",
                    "S contains lowercase English letters only."
                ],
                "testcases": [
                    {
                        "input": "X = 5, Y = 4\nS = \"abppprrr\"",
                        "output": "15",
                        "explanation": "Initially, S = \"abppprrr\", X = 5, and Y = 4.  The optimal strategy is to remove \"pr\" three times. This gives us the sequence of strings: \"abppprrr\" -> \"abpprr\" -> \"abpr\" -> \"ab\". The total score is 3 * 5 + 0 * 4 = 15."
                    },
                    {
                        "input": "X = 7, Y = 7\nS = \"prpptppr\"",
                        "output": "14",
                        "explanation": "Initially, S = \"prpptppr\", X = 7, and Y = 7. Since X and Y are equal, we can choose to remove either \"pr\" or \"rp\" first.  Removing \"pr\" twice gives us the sequence of strings: \"prpptppr\" -> \"pptppr\" -> \"pptp\".  The total score is 2 * 7 + 0 * 7 = 14."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Stack to remove the string which gives more cost then remove the other string.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution{   \npublic:\n\n    // Function to solve the problem\n    long long solve(int X,int Y,string S){\n      long long answer=0;\n\n      // Setting up the priority of different pairs\n      string a=\"pr\";\n      string b=\"rp\";\n\n      // Checking which pair has a higher priority\n      if(X<Y)\n      {\n        swap(X,Y);\n        swap(a,b);\n      }\n\n      stack<char> st;\n      // Iterating through the input string from right to left\n      for(int i=(int)S.size()-1;i>=0;i--)\n      {\n        // Checking if the current character and the top of the stack\n        // form a valid pair and reducing the size of the stack and \n        // updating the answer accordingly\n        if(st.size()>0&&S[i]==a[0]&&st.top()==a[1])\n        {\n          st.pop();\n          answer+=X;\n        }\n        else\n        {\n          st.push(S[i]);\n        }\n      }\n\n      // Emptying out the remaining characters in the stack\n      S=\"\";\n      while(st.size()>0){\n        S.push_back(st.top());\n        st.pop();\n      }\n\n      // Repeating the same process with the other type of pairs (if necessary)\n      for(int i=(int)S.size()-1;i>=0;i--)\n      {\n        if(st.size()>0&&S[i]==b[0]&&st.top()==b[1])\n        {\n          st.pop();\n          answer+=Y;\n        }\n        else\n        {\n          st.push(S[i]);\n        }\n      }\n      return answer;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution \r\n{ \r\n    static long solve(int X,int Y, String S)\r\n\t{    \r\n\t    long answer=0;\r\n\t    String a=\"pr\";\r\n\t    String b=\"rp\";\r\n\t    if(X<Y)\r\n\t    {\r\n\t        int t1=X;\r\n\t        X=Y;\r\n\t        Y=t1;\r\n\t        \r\n\t        String t2=a;\r\n\t        a=b;\r\n\t        b=t2;\r\n\t    }\r\n\t    LinkedList<Character> st= new LinkedList<Character>();\r\n\t    for(int i=S.length()-1;i>=0;i--)\r\n\t    {\r\n\t        if(st.size()>0&&S.charAt(i)==a.charAt(0)&&st.peekLast()==a.charAt(1))\r\n\t        {\r\n\t            st.pollLast();\r\n\t            answer+=X;\r\n\t        }\r\n\t        else\r\n\t        {\r\n\t            st.addLast(S.charAt(i));\r\n\t        }\r\n\t    }\r\n\t    StringBuilder str = new StringBuilder();\r\n\t    while(st.size()>0){\r\n            str.append(st.pollLast());\r\n        }\r\n        S=str.toString();\r\n        for(int i=S.length()-1;i>=0;i--)\r\n\t    {\r\n\t        if(st.size()>0&&S.charAt(i)==b.charAt(0)&&st.peekLast()==b.charAt(1))\r\n\t        {\r\n\t            st.pollLast();\r\n\t            answer+=Y;\r\n\t        }\r\n\t        else\r\n\t        {\r\n\t            st.addLast(S.charAt(i));\r\n\t        }\r\n\t    }\r\n        return answer;\r\n\t}\r\n} ",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def solve (self, X, Y, S):\r\n        answer=0\r\n        a='pr' #initialize string a with 'pr'\r\n        b='rp' #initialize string b with 'rp'\r\n        if X<Y: #if X is less than Y, swap X and Y along with a and b\r\n            X,Y=Y,X\r\n            a,b=b,a\r\n        st=[] #initialize an empty stack\r\n        for i in range(len(S)-1,-1,-1): #iterate over the characters of S from right to left\r\n            if len(st)>0 and S[i]==a[0] and st[-1]==a[1]:\r\n                #if stack is not empty and S[i] is equal to a[0] and stack top is equal to a[1],\r\n                #pop the top element from stack and increase answer by X\r\n                st.pop(len(st)-1)\r\n                answer+=X\r\n            else:\r\n                st.append(S[i]) #otherwise, push S[i] into the stack\r\n        S='' #initialize S as an empty string\r\n        while len(st)>0: #while stack is not empty\r\n            S+=st[-1] #append the top element of the stack to S\r\n            st.pop(len(st)-1) #pop the top element from stack\r\n        for i in range(len(S)-1,-1,-1): #iterate over the characters of S from right to left\r\n            if len(st)>0 and S[i]==b[0] and st[-1]==b[1]:\r\n                #if stack is not empty and S[i] is equal to b[0] and stack top is equal to b[1],\r\n                #pop the top element from stack and increase answer by Y\r\n                st.pop(len(st)-1)\r\n                answer+=Y\r\n            else:\r\n                st.append(S[i]) #otherwise, push S[i] into the stack\r\n        return answer #return the final answer",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} X\n * @param {number} Y\n * @param {string} S\n * @returns {number}\n*/\n\nclass Solution {\n    solve(X, Y, S) {\n        let answer=0;\n        let a='pr'; //initialize string a with 'pr'\n        let b='rp'; //initialize string b with 'rp'\n        if (X<Y) { //if X is less than Y, swap X and Y along with a and b\n            let temp1 = X;\n            let temp2 = a;\n            X = Y;\n            Y = temp1;\n            a = b;\n            b = temp2;\n        }\n        let st=[]; //initialize an empty stack\n        for (let i = S.length-1; i >= 0; i--) { //iterate over the characters of S from right to left\n            if (st.length>0 && S[i]==a[0] && st[st.length-1]==a[1]) {\n                //if stack is not empty and S[i] is equal to a[0] and stack top is equal to a[1],\n                //pop the top element from stack and increase answer by X\n                st.pop();\n                answer+=X;\n            }\n            else {\n                st.push(S[i]); //otherwise, push S[i] into the stack\n            }\n        }\n        S=''; //initialize S as an empty string\n        while (st.length>0) { //while stack is not empty\n            S+=st[st.length-1]; //append the top element of the stack to S\n            st.pop(); //pop the top element from stack\n        }\n        for (let i = S.length-1; i >= 0; i--) { //iterate over the characters of S from right to left\n            if (st.length>0 && S[i]==b[0] && st[st.length-1]==b[1]) {\n                //if stack is not empty and S[i] is equal to b[0] and stack top is equal to b[1],\n                //pop the top element from stack and increase answer by Y\n                st.pop();\n                answer+=Y;\n            }\n            else {\n                st.push(S[i]); //otherwise, push S[i] into the stack\n            }\n        }\n        return answer; //return the final answer\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public long solve(int X, int Y, string S)\n    {\n        long answer = 0;\n\n        string a = \"pr\";\n        string b = \"rp\";\n\n        // Swap values if X is less than Y to prioritize larger points\n        if (X < Y)\n        {\n            int temp = X;\n            X = Y;\n            Y = temp;\n\n            string tempStr = a;\n            a = b;\n            b = tempStr;\n        }\n\n        Stack<char> st = new Stack<char>();\n        \n        // Process string with higher points pair\n        for (int i = S.Length - 1; i >= 0; i--)\n        {\n            if (st.Count > 0 && st.Peek() == a[1] && S[i] == a[0])\n            {\n                st.Pop();\n                answer += X;\n            }\n            else\n            {\n                st.Push(S[i]);\n            }\n        }\n\n        StringBuilder remaining = new StringBuilder();\n        while (st.Count > 0)\n        {\n            remaining.Append(st.Pop());\n        }\n\n        string remainingS = remaining.ToString();\n        \n        // Process the string with the second pair\n        for (int i = remainingS.Length - 1; i >= 0; i--)\n        {\n            if (st.Count > 0 && st.Peek() == b[1] && remainingS[i] == b[0])\n            {\n                st.Pop();\n                answer += Y;\n            }\n            else\n            {\n                st.Push(remainingS[i]);\n            }\n        }\n\n        return answer;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}