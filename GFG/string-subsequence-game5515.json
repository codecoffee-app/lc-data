{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703691,
            "title": "String Subsequence Game",
            "titleSlug": "string-subsequence-game5515",
            "content": "<p><span style=\"font-size:18px\">Given a string return all unique possible subsequences which start with vowel and end with consonant. A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.<br />\r\n<strong>NOTE: </strong>Return all&nbsp;the unique subsequences in lexicographically sorted order.&nbsp;</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>: S = &quot;abc</span><span style=\"font-size:18px\">&quot;\r\n<strong>Output:</strong>&nbsp;&quot;ab&quot;, &quot;ac&quot;, &quot;abc&quot;</span><span style=\"font-size:18px\">&nbsp;\r\n<strong>Explanation</strong>: &quot;ab&quot;, &quot;ac&quot;, &quot;abc&quot; are \r\nthe all possible subsequences which \r\nstart with vowel and end with consonant.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>S = &quot;aab</span><span style=\"font-size:18px\">&quot;\r\n<strong>Output:&nbsp;&quot;</strong>ab&quot;, &quot;aab&quot;</span><span style=\"font-size:18px\">\r\n<strong>Explanation</strong>: &quot;ab&quot;, &quot;aab&quot; are the all \r\npossible subsequences which start \r\nwith vowel and end with consonant.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou dont need to read input or print anything. Complete the function <strong>allPossileSubsequences()&nbsp;</strong>which takes S&nbsp;as input parameter and returns all possible subsequences which start with vowel and end with consonant.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong> O(n*logn*2<sup>n</sup>)</span><br />\r\n<span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong> O(2<sup>n</sup>)</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1&lt;= |S|&nbsp;&lt;=18</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string, find all unique subsequences that begin with a vowel and end with a consonant. A subsequence is formed by deleting zero or more characters from the original string without changing the order of the remaining characters. Return the unique subsequences in lexicographically sorted order.",
                "constraints": [
                    "1 <= |S| <= 18"
                ],
                "testcases": [
                    {
                        "input": "abc",
                        "output": "ab, ac, abc",
                        "explanation": "The subsequences \"ab\", \"ac\", and \"abc\" are the only unique subsequences that start with a vowel ('a') and end with a consonant ('b' or 'c')."
                    },
                    {
                        "input": "aab",
                        "output": "ab, aab",
                        "explanation": "The subsequences \"ab\" and \"aab\" are the only unique subsequences that start with a vowel ('a') and end with a consonant ('b')."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to find all possible unique subsequences and then select those,starting with vowel and ending with consonent.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "yatra.com"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": null,
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    static TreeSet<String> st = new TreeSet<String>();\r\n    static void findsubsequences(String s, String ans) {\r\n        if (s.length() == 0) {\r\n            st.add(ans);\r\n            return;\r\n        }\r\n\r\n        // we add adding 1st character in string\r\n        findsubsequences(s.substring(1), ans + s.charAt(0));\r\n\r\n        // Not adding first character of the string\r\n        // because the concept of subsequence either\r\n        // character will present or not\r\n        findsubsequences(s.substring(1), ans);\r\n    }\r\n    static boolean isVowel(char c) {\r\n        return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\r\n    }\r\n    static boolean isConsonant(char c) {\r\n        return !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\r\n    }\r\n    static TreeSet<String> allPossibleSubsequences(String s) {\r\n        findsubsequences(s, \"\");\r\n        TreeSet<String> ans = new TreeSet<String>();\r\n        Iterator it = st.iterator();\r\n        while (it.hasNext()) {\r\n            String i = it.next().toString();\r\n            if (i.length() > 0) {\r\n                if (isVowel(i.charAt(0)) &&\r\n                    isConsonant(i.charAt(i.length() - 1)))\r\n                    ans.add(i);\r\n            }\r\n        }\r\n        st.clear();\r\n        // Collections.sort(ans);\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}