{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703901,
            "title": "Strong Numbers",
            "titleSlug": "strong-numbers3315",
            "content": "<p><span style=\"font-size:18px\"><strong>Strong Numbers&nbsp;</strong>are the numbers whose sum of factorial of digits is equal to the original number. Given a number <strong>N, </strong>the task is to check if it is a Strong Number or not. Print 1 if the Number is Strong, else Print 0.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:<strong> </strong></strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>145</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">1</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">1! + 4! + 5! = 145 So, 145 is a Strong\nNumber and therefore the Output 1.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:<strong> </strong></strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>14</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">0</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">1! + 4! = 25 So, 14 isn&#39;t a Strong\nNumber and therefore the Output &quot;NO&quot;.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>isStrong()</strong> which takes an Integer N as input and returns the answer.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|N|)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>8</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A Strong Number is a number where the sum of the factorial of its digits equals the original number. Given an integer N, determine if it is a Strong Number. Return 1 if N is a Strong Number, otherwise return 0.",
                "constraints": [
                    "1 <= N <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "145",
                        "output": "1",
                        "explanation": "1! + 4! + 5! = 1 + 24 + 120 = 145. Therefore, 145 is a Strong Number."
                    },
                    {
                        "input": "14",
                        "output": "0",
                        "explanation": "1! + 4! = 1 + 24 = 25. Therefore, 14 is not a Strong Number."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Initialize a Int value as 0. Keep adding factorial of all the digits to it. Check if the integer is equal to N.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "factorial",
                "slug": "factorial"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n  \n    // helper method to get Factorial of a Number\n    int factorial(int n)\n    {\n        int fact = 1;\n        while (n != 0)\n        {\n            fact = fact*n;\n            n--;\n        }\n        return fact;\n    }\n    \n    int isStrong(int N) {\n        \n        int res = 0;\n        \n        int dup = N;\n        \n        while(dup)\n        {\n            res+=factorial(dup%10);     // Adding Factorial of every number to res\n            dup/=10;\n        }\n        \n        // If res equals to N, then it's a Strong Number, else not.\n        if(res==N)\n            return 1;\n        else\n            return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    \n    // helper method to get Factorial of a Number\n    static int factorial(int n)\n    {\n        int fact = 1;\n        while (n != 0)\n        {\n            fact = fact*n;\n            n--;\n        }\n        return fact;\n    }\n    \n    static int isStrong(int N) {\n        \n        int res = 0;\n        \n        int dup = N;\n        \n        while(dup!=0)\n        {\n            res+=factorial(dup%10);     // Adding Factorial of every number to res\n            dup/=10;\n        }\n        \n        // If res equals to N, then it's a Strong Number, else not.\n        if(res==N)\n            return 1;\n        else\n            return 0;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution{\n    isStrong(n){\n        //Code here\n        \n        function factorial(num) {\n            let fact = 1;\n            while (num > 0){\n                fact *= num;\n                num--;\n            }\n            return fact;\n        }\n        \n        let res = 0;\n        let dup = n;\n        \n        while(dup) {\n            res += factorial(dup % 10);\n            dup = Math.floor(dup / 10);\n        }\n        \n        if(res === n)\n            return 1;\n        else\n            return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}