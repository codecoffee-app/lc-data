{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703822,
            "title": "Strong Numbers",
            "titleSlug": "strong-numbers4336",
            "content": "<p><span style=\"font-size:18px\"><strong>Strong Numbers&nbsp;</strong>are the numbers whose sum of factorial of digits is equal to the original number. Given a number, the task is to check if it is a Strong Number or not.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>145\n<strong>Output: </strong>1\n<strong>Explanation: </strong>1! + 4! + 5! = 145</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>5314\n<strong>Output: </strong>0\n<strong>Explanation: </strong>5! + 3! + 1! + 4! \nis not equal to 5314.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything. Your task is to complete the function<strong> is_StrongNumber()&nbsp;</strong>which takes the number as input parameter and returns 1 if it is Strong Number otherwise returns 0.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity :&nbsp;</strong>O(Number of digits in N)<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= n &lt;= 10000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A Strong Number is a number that is equal to the sum of the factorial of its digits. Given a number, determine if it is a Strong Number.",
                "constraints": [
                    "1 <= n <= 10000"
                ],
                "testcases": [
                    {
                        "input": "145",
                        "output": "1",
                        "explanation": "The sum of the factorials of the digits of 145 is 1! + 4! + 5! = 1 + 24 + 120 = 145. Since the sum is equal to the original number, 145 is a Strong Number."
                    },
                    {
                        "input": "5314",
                        "output": "0",
                        "explanation": "The sum of the factorials of the digits of 5314 is 5! + 3! + 1! + 4! = 120 + 6 + 1 + 24 = 151. Since the sum is not equal to the original number, 5314 is not a Strong Number."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all digits of the number.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "factorial",
                "slug": "factorial"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\n{\npublic:\n    //Function to check if a number is a strong number or not.\n    int is_StrongNumber(int n)\n    {\n        //Creating a vector to store factorials of digits.\n        vector<int> fact(10, 1);\n\n        //Calculating factorials of digits using previous factorial.\n        for (int i = 1; i < 10; i++)\n            fact[i] *= (i * fact[i - 1]);\n\n        //Initializing ans as 0 and m as n.\n        int ans = 0;\n        int m = n;\n\n        //Finding the sum of factorials of digits of n.\n        while (n > 0)\n        {\n            //Finding the remainder and adding the factorial to ans.\n            int rem = n % 10;\n            ans += fact[rem];\n\n            //Updating n by dividing it by 10.\n            n /= 10;\n        }\n\n        //Returning true if ans is equal to m (n is a strong number), else false.\n        return ans == m;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number} n\n * @return {number}\n */\nclass Solution {\n    is_StrongNumber(n) {\n        let fact = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880];\n        let ans = 0;\n        let m = n;\n        while (n > 0) {\n            let rem = n % 10;\n            ans += fact[rem];\n            n = Math.floor(n / 10);\n        }\n        return ans === m ? 1 : 0;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int is_StrongNumber(int n)\n    {\n        //Creating an array to store factorials of digits.\n        int[] fact = new int[10];\n\n        //Initial value of factorials is 1.\n        for (int i = 0; i < 10; i++)\n            fact[i] = 1;\n\n        //Calculating factorials of digits using previous factorial.\n        for (int i = 1; i < 10; i++)\n            fact[i] *= (i * fact[i - 1]);\n\n        //Initializing ans as 0 and m as n.\n        int ans = 0;\n        int m = n;\n\n        //Finding the sum of factorials of digits of n.\n        while (n > 0)\n        {\n            //Finding the remainder and adding the factorial to ans.\n            int rem = n % 10;\n            ans += fact[rem];\n\n            //Updating n by dividing it by 10.\n            n /= 10;\n        }\n\n        //Returning 1 if ans is equal to m (n is a strong number), else 0.\n        if (ans == m)\n            return 1;\n        else\n            return 0;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}