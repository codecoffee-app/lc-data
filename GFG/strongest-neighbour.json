{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701017,
            "title": "Strongest Neighbour",
            "titleSlug": "strongest-neighbour",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr</strong>[] of <strong>n</strong> positive integers. The task is to find the maximum for every adjacent pairs in the array.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>n = 6\narr[] = {1,2,2,3,4,5}\n<strong>Output: </strong>2 2 3 4 5<strong>\nExplanation: </strong>Maximum of arr[0] and arr[1]\nis 2, that of arr[1] and arr[2] is 2, ...\nand so on. For last two elements, maximum \nis 5.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>n = 2\narr[] = {5, 5}\n<strong>Output: </strong>5<strong>\nExplanation: </strong>We only have two elements \nso max of 5 and 5 is 5 only.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your&nbsp;Task:</strong><br />\nThe task is to complete the function <strong>maximumAdjacent</strong>(), which takes <strong>sizeOfArray (n) </strong>and<strong> array(arr) </strong>as<strong> </strong>parameters and <strong>prints </strong>the <strong>maximum </strong>of all adjacent pairs (space separated).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(n).<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n2 &lt;= n &lt;= 10<sup>6</sup><br />\n1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\n\n// Function to find maximum for every adjacent pairs in the array.\nvoid maximumAdjacent(int sizeOfArray, int arr[]){\n    \n    // Iterating through all window of size two.\n    for(int i = 0, j = 1;i<sizeOfArray-1 && j < sizeOfArray;i++, j++){\n        //Printing the maximum between two adjacent elements.\n        printf(\"%d \", (arr[i] > arr[j]) ? arr[i] : arr[j]);\n    }\n}\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n\n// Function to find maximum for every adjacent pairs in the array.\nvoid maximumAdjacent(int sizeOfArray, int arr[]){\n    \n    // Iterating through all window of size two.\n    for(int i = 0, j = 1;i<sizeOfArray-1 && j < sizeOfArray;i++, j++){\n        //Printing the maximum between two adjacent elements.\n        cout << max(arr[i], arr[j]) << \" \";\n    }\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass StrongestNeighbour{\n    \n    // Function to find maximum for every adjacent pairs in the array.\n    static void maximumAdjacent(int sizeOfArray, int arr[]){\n        \n        StringBuffer sb = new StringBuffer();\n    \n        // Iterating through all window of size two.\n        for(int i = 0, j = 1;i<sizeOfArray-1 && j < sizeOfArray;i++, j++){\n            //Appending the maximum between two adjacent elements.\n            sb.append(Math.max(arr[i], arr[j]) + \" \");\n        }\n        //Printing the maximum for every adjacent pairs in the array.\n        System.out.print(sb);\n    }\n}\n\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n# Function to find maximum for every adjacent pairs in the array.\ndef maximumAdjacent(sizeOfArray, arr):\n    start = 0\n    end = 1\n    \n    # Iterating through all window of size two.\n    while(end < len(arr)):\n        # Printing the maximum between two adjacent elements.\n        print(max(arr[start], arr[end]), end = ' ')\n        start += 1\n        end += 1\n        \n        \n        ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} sizeOfArray\n * @param {number[]} arr\n */\nclass Solution {\n    // Function to find maximum for every adjacent pairs in the array.\n    maximumAdjacent(sizeOfArray, arr){\n        // Iterating through all window of size two.\n        let s='',i,j;\n        for(i = 0, j = 1;i<sizeOfArray-1 && j < sizeOfArray;i++, j++){\n            //Storing the maximum between two adjacent elements.\n            s+=String(Math.max(arr[i], arr[j]));\n            s+=\" \";\n        }\n        //Printing the maximum for every adjacent pairs in the array.\n        console.log(s);\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    //Function to find maximum for every adjacent pairs in the array.\n    public void maximumAdjacent(int sizeOfArray, int[] arr)\n    {\n        for(int i = 0, j = 1; i < sizeOfArray - 1 && j < sizeOfArray; i++, j++)\n        {\n            //Printing the maximum between two adjacent elements.\n            Console.Write(Math.Max(arr[i], arr[j]) + \" \");\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}