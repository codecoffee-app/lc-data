{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701448,
            "title": "Strongly connected component (Tarjans's Algo)",
            "titleSlug": "strongly-connected-component-tarjanss-algo-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">Given a Directed Graph with V vertices and E edges</span>, <span style=\"font-size: 18px;\"> Find the members of strongly connected components in the graph.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note - </span></strong><span style=\"font-size: 18px;\">Sort both the individual components and array of the components.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/701448/Web/Other/5acd4877-d36c-4d1f-9ecd-88648ccf076d_1685087042.png\" alt=\"\" />\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n0 1 2,3,4,\n<strong>Explanation</strong>:\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/701448/Web/Other/ab04eab6-d4f6-4625-802b-62cbf2ce5dda_1685087043.png\" alt=\"\" />\n<span style=\"font-size: 18px;\">We can clearly see that there are 3 Strongly\nConnected Components in the Graph</span> <span style=\"font-size: 18px;\">as mentioned\nin the Output.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/701448/Web/Other/8565c413-a0bd-4ff1-9cff-890cf2a0cd5d_1685087043.png\" alt=\"\" />\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n0 1 2,\n<strong>Explanation</strong>:</span>\n<span style=\"font-size: 18px;\">All of the nodes are connected to each other.\nSo, there's only one SCC as shown.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span><br /><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function <strong>tarjans()</strong>&nbsp;which takes the number of vertices V&nbsp;and adjacency list of the graph as input parameters&nbsp;and returns a list of list of integers denoting the members of strongly connected components in the given graph.<br /><strong>Note: </strong>A single strongly connected component must be represented in the form of a list if integers sorted in the ascending order.&nbsp;The resulting list should consist of a list of all SCCs&nbsp;which must be&nbsp;sorted in a way such that a lexicographically smaller list of integers appears first. </span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(V + E).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(V).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 </span> <span style=\"font-size: 18px;\">&le;</span> <span style=\"font-size: 18px;\"> V&nbsp;</span> <span style=\"font-size: 18px;\">&le;</span> <span style=\"font-size: 18px;\"> 10<sup>5</sup><br />1 </span> <span style=\"font-size: 18px;\">&le;</span> <span style=\"font-size: 18px;\"> E&nbsp;</span> <span style=\"font-size: 18px;\">&le;</span> <span style=\"font-size: 18px;\"> 10<sup>5</sup><br />0 </span> <span style=\"font-size: 18px;\">&le;</span> <span style=\"font-size: 18px;\"> u, v </span> <span style=\"font-size: 18px;\">&le;</span> <span style=\"font-size: 18px;\"> N-1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with V vertices and E edges, find all the strongly connected components (SCCs) within the graph. Sort the vertices within each SCC in ascending order.  The final result should be a list of lists, where each inner list represents an SCC, and the SCCs are sorted lexicographically.",
                "constraints": [
                    "1 <= V <= 10^5",
                    "1 <= E <= 10^5",
                    "0 <= u, v <= N-1"
                ],
                "testcases": [
                    {
                        "input": "A directed graph with 5 vertices and the following edges:\n0 -> 1\n1 -> 2\n2 -> 0\n3 -> 4",
                        "output": "[[0, 1, 2], [3], [4]]",
                        "explanation": "The graph contains three strongly connected components: {0, 1, 2}, {3}, and {4}. The component {0, 1, 2} represents a cycle. The single nodes {3} and {4} are also considered SCCs."
                    },
                    {
                        "input": "A directed graph with 3 vertices and the following edges:\n0 -> 1\n1 -> 2\n2 -> 0",
                        "output": "[[0, 1, 2]]",
                        "explanation": "All nodes are mutually reachable, forming a single strongly connected component."
                    },
                    {
                        "input": "A directed graph with 4 vertices and the following edges:\n0 -> 1\n1 -> 2\n2 -> 3",
                        "output": "[[0], [1], [2], [3]]",
                        "explanation": "There are no cycles in this graph.  Each node forms its own strongly connected component since there is no way to traverse back to the originating node from any subsequent node."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Backend complete function Template for C++\n\nbool compare1(vector<int> v1, vector<int> v2)\n{\n    return v1.front()<v2.front();\n}\n\nclass Solution\n{\n    public:\n    //vector to store the members of the strongly connected components.\n    vector<vector<int>> ans;  \n    vector<int> temp;   \n    \n    void findUtil(vector<int> adj[], stack<int> &st, int index[], int lowlink[], \n                                                        bool onstack[], int i) \n    {\n        static int curr = 0;\n    \n        index[i] = lowlink[i] = ++curr;\n    \n        //pushing the ith node into the stack.\n        st.push(i);\n        \n        //marking ith node '1' i.e. it is present in the stack.\n        onstack[i] = 1; \n    \n        for (int j = 0; j < adj[i].size(); ++j) \n        {\n            //if adj[i][j] isn't visited, we call the function recursively.\n            if (index[adj[i][j]] == -1)\n            { \n                \n                findUtil(adj, st, index, lowlink, onstack, adj[i][j]);\n                //updating lowlink at ith index.\n                lowlink[i] = min(lowlink[i], lowlink[adj[i][j]]);\n            } \n            //else if the adj[i][j] node is visited and present in the stack.\n            else if (onstack[adj[i][j]]) \n            { \n                //updating lowlink at ith index.\n                lowlink[i] = min(lowlink[i], index[adj[i][j]]);\n            }\n        }\n        \n        //if lowlink[i]==index[i], it represents a strongly connected components\n        if (lowlink[i] == index[i]) \n        { \n            int w = 0;\n            //while stack is not empty and top element is not i.\n            while (!st.empty() && st.top() != i)\n            {\n                //we keep popping top element from stack and pushing it in list\n                //and marking it absent in stack.\n                w = (int)st.top();\n                temp.push_back(w);\n                onstack[w] = 0;\n                st.pop();\n            }\n            \n            //we again pop the top element, store it in the list\n            //and mark it absent in the stack. \n            w = (int)st.top();\n            temp.push_back(w);\n            \n            //pushing the list in final answer list.\n            ans.push_back(temp);\n            temp.clear();\n            onstack[w] = 0;\n            st.pop();\n        }\n    }\n    \n    //Function to return a list of lists of integers denoting the members \n    //of strongly connected components in the given graph.\n    vector<vector<int>> tarjans(int V, vector<int> adj[])\n    {\n        int lowlink[V + 1], index[V + 1];\n\n        //boolean array onstack is true if ith node is present in the stack.\n        bool onstack[V + 1]; \n        \n        stack<int> st;\n    \n        for (int i=0; i<V; ++i) {\n            lowlink[i] = -1;\n            index[i] = -1;\n            onstack[i] = false;\n        }\n    \n        for (int i=0; i<V; ++i) \n        {\n             //if index[i] is -1, ith node is not visited.\n            if (index[i] == -1)\n            {\n                //we call the findUtil function.\n                findUtil(adj, st, index, lowlink, onstack, i); \n            }\n        }\n        \n        //sorting all the lists in final answer list.\n        for(int i=0; i<ans.size(); i++){\n            sort(ans[i].begin(),ans[i].end());\n        }\n        sort(ans.begin(),ans.end(),compare1);\n        \n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//User function Template for Java\n\nclass Solution\n{\n    //Function to return a list of lists of integers denoting the members \n    //of strongly connected components in the given graph.  \n    static int time=0;\n    int[] disc;\n    int[] low;\n    boolean[] stkMember;\n    Stack<Integer> stk=new Stack<Integer>();\n    //(discovery,low)\n    ArrayList<ArrayList<Integer>> result;\n    public ArrayList<ArrayList<Integer>> tarjans(int V, ArrayList<ArrayList<Integer>> adj) \n    {\n        // code here\n         low=new int[V];\n        Arrays.fill(low,-1);\n        disc=new int[V];\n        Arrays.fill(disc,-1);\n        stkMember =new boolean[V];\n        result=new ArrayList<>();\n        Stack<Integer> stk=new Stack<Integer>();\n        for(int i=0;i<V;i++){\n            if(disc[i]==-1)\n            dfs(adj,stk,i);\n        }\n        Collections.sort(result, new Comparator<ArrayList<Integer>>() {    \n        @Override\n            public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }               \n        });\n        return result;\n    }\n    public void dfs(ArrayList<ArrayList<Integer>> adj,Stack<Integer> stack,int u){\n        disc[u]=time;\n        low[u]=time;\n        stkMember[u]=true;\n        stk.push(stack.push(u));\n        time++;\n        ArrayList<Integer> nbr=adj.get(u);\n        for(Integer n:nbr){\n            if(disc[n]==-1){\n                dfs(adj,stack,n);\n                low[u]=Math.min(low[u],low[n]);\n            }else if(stkMember[n]){\n                low[u]=Math.min(low[u],disc[n]);\n            }\n        }\n        \n        int w=-1;\n        if(low[u]==disc[u]){\n            ArrayList<Integer> res=new ArrayList<>();\n            while(w!=u){\n                w=stack.pop();\n                stkMember[w]=false;\n                res.add(w);\n            }\n            Collections.sort(res);\n            result.add(res);\n        }\n        \n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Backend Complete Function solution for Python\n\nclass Solution:\n    \n    #vector to store the members of the strongly connected components.\n    ans = []  \n    temp = []  \n    Time = 0\n    \n    def SCCUtil(self, adj, u, low, disc, stackMember, st):\n\n        #initializing discovery time and low value.\n        disc[u] = self.Time\n        low[u] = self.Time\n        self.Time += 1\n        stackMember[u] = True\n        st.append(u)\n\n        #traversing over the adjacent vertices.\n        for v in adj[u]:\n            \n            # If v is not visited yet, then we call the function  \n            #recursively for adjacent node for it.\n            if disc[v] == -1 :\n            \n                self.SCCUtil(adj, v, low, disc, stackMember, st)\n\n                #checking if the subtree rooted with v has a connection to\n                #one of the ancestors of u\n                #Case 1: (per above discussion on Disc and Low value)\n                low[u] = min(low[u], low[v])\n                        \n            elif stackMember[v] == True: \n\n                #updating low value of 'u' only if 'v' is still in stack\n                #(i.e. it's a back edge, not cross edge).\n                #Case 2 (per above discussion on Disc and Low value)\n                low[u] = min(low[u], disc[v])\n        \n        \n        w = -1\n        #if head node is found, pop the stack and store \n        #strongly connected components.\n        if low[u] == disc[u]:\n            while w != u:\n                w = st.pop()\n                self.temp.append(w)\n                stackMember[w] = False\n                \n            self.ans.append(self.temp)\n            self.temp=[]\n            \n    \n    #Function to return a list of lists of integers denoting the members \n    #of strongly connected components in the given graph.\n    def tarjans(self, V, adj):\n        \n        self.ans = []\n        self.temp = []\n        \n        #marking all the vertices as not visited and initializing parent\n        #and visited and ap(articulation point) arrays.\n        disc = [-1] * (V)\n        low = [-1] * (V)\n        stackMember = [False] * (V)\n        st =[]\n        \n\n        #calling the recursive helper function to find articulation points\n        # in DFS tree rooted with vertex 'i'.\n        for i in range(V):\n            \n            if disc[i] == -1:\n                #we call the SCCUtil function.\n                self.SCCUtil(adj, i, low, disc, stackMember, st)\n        \n        #sorting all the lists in final answer list.\n        for j in range(len(self.ans)):\n            self.ans[j].sort()\n        self.ans.sort()\n        \n        return self.ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}