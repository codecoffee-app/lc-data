{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700394,
            "title": "Strongly Connected",
            "titleSlug": "strongly-connected-components-kosarajus-algo",
            "content": "<p><span style=\"font-size: 18px;\">Given&nbsp;</span><span style=\"font-size: 18px;\">an adjacency list, </span><strong style=\"font-size: 18px;\">adj&nbsp;</strong><span style=\"font-size: 18px;\">of <strong>D</strong></span><strong style=\"font-size: 18px;\">irected Graph</strong>, <span style=\"font-size: 18px;\">Find </span><span style=\"font-size: 18px;\">the number of strongly connected components in the graph.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>adj[][] = [[2, 3], [0], [1], [4], []]</span>\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700394/Web/Other/89b7c4e7-e03c-402f-b445-3e8815299af6_1685086635.png\" alt=\"\" />\n<span style=\"font-size: 18px;\"><strong>Output: </strong>3\n<strong>Explanation</strong>: We can clearly see that there are 3 Strongly Connected Components in the Graph.\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700394/Web/Other/9f4ccc7f-8ad8-4f81-908a-01f27090ba5e_1685086635.png\" alt=\"\" />&nbsp;</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">adj[][] = [[1], [2], [0]]</span>\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700394/Web/Other/8b9b3908-a800-4ffa-acaf-26cb760eac8e_1685086635.png\" alt=\"\" />\n<span style=\"font-size: 18px;\"><strong>Output: </strong>1\n<strong>Explanation</strong>:</span> <span style=\"font-size: 18px;\">All of the nodes are connected to each other. So, there's only one SCC.<br /></span></pre>\n<pre><strong>Input: </strong>adj[][] = [[1], []]\n<strong>Output: </strong>2</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2&lt;=adj.size()&lt;=10<sup>6</sup><br />0&lt;=edges&lt;=adj.size()-1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;Find the number of strongly connected components (SCCs) in a directed graph, leveraging a depth-first search (DFS) approach and a transposed graph representation.</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Position this line where user code will be pasted.\nclass Solution {\n  public:\n    // Function that creates transpose of the adjacency list.\n    void transpose(int V, vector<vector<int>> &adj, vector<int> transpose_adj[]) {\n        for (int u = 0; u < V; u++)\n            for (auto v : adj[u])\n                transpose_adj[v].push_back(u);\n    }\n\n    stack<int> s;\n\n    void dfs(vector<int> adj[], bool *visited, int u) {\n        // marking the current node as visited.\n        visited[u] = true;\n\n        // iterating over adjacent vertices and calling function\n        // recursively if any adjacent vertex is not visited.\n        for (auto v : adj[u]) {\n            if (visited[v] == 0)\n                dfs(adj, visited, v);\n        }\n    }\n\n    void fillorder(vector<vector<int>> &adj, bool *visited, int u) {\n        // marking the current node as visited.\n        visited[u] = true;\n\n        // iterating over adjacent vertices and calling function\n        // recursively if any adjacent vertex is not visited.\n        for (auto v : adj[u])\n            if (visited[v] == 0)\n                fillorder(adj, visited, v);\n\n        // pushing vertex into the stack.\n        s.push(u);\n    }\n\n    // Function to find number of strongly connected components in the graph.\n    int kosaraju(vector<vector<int>> &adj) {\n        // using boolean list to mark visited nodes and currently\n        // marking all the nodes as false.\n        int V = adj.size();\n        bool visited[V];\n        memset(visited, 0, sizeof(visited));\n\n        // filling vertices in stack according to their finishing times.\n        for (int i = 0; i < V; i++)\n            if (visited[i] == false)\n                fillorder(adj, visited, i);\n\n        // creating transpose of adjacency list.\n        vector<int> transpose_adj[V];\n        transpose(V, adj, transpose_adj);\n\n        // marking all the nodes as not visited again.\n        for (int i = 0; i < V; i++)\n            visited[i] = false;\n\n        int ans = 0;\n\n        // now processing all vertices in order defined by stack.\n        while (!s.empty()) {\n            // popping a vertex from stack.\n            int temp = s.top();\n            s.pop();\n\n            // if vertex is not visited, we call dfs function\n            // and increment the counter.\n            if (!visited[temp]) {\n                dfs(transpose_adj, visited, temp);\n                ans++;\n            }\n        }\n        // returning the count.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function that creates transpose of the adjacency list.\n    private void transpose(int V, ArrayList<ArrayList<Integer>> adj,\n                           ArrayList<ArrayList<Integer>> transposeAdj) {\n        for (int u = 0; u < V; u++) {\n            for (int v : adj.get(u)) {\n                transposeAdj.get(v).add(u);\n            }\n        }\n    }\n\n    private Stack<Integer> stack = new Stack<>();\n\n    private void dfs(ArrayList<ArrayList<Integer>> adj, boolean[] visited, int u) {\n        // Marking the current node as visited.\n        visited[u] = true;\n\n        // Iterating over adjacent vertices and calling function recursively\n        // if any adjacent vertex is not visited.\n        for (int v : adj.get(u)) {\n            if (!visited[v]) {\n                dfs(adj, visited, v);\n            }\n        }\n    }\n\n    private void fillOrder(ArrayList<ArrayList<Integer>> adj, boolean[] visited,\n                           int u) {\n        // Marking the current node as visited.\n        visited[u] = true;\n\n        // Iterating over adjacent vertices and calling function recursively\n        // if any adjacent vertex is not visited.\n        for (int v : adj.get(u)) {\n            if (!visited[v]) {\n                fillOrder(adj, visited, v);\n            }\n        }\n\n        // Pushing vertex into the stack.\n        stack.push(u);\n    }\n\n    // Function to find number of strongly connected components in the graph.\n    public int kosaraju(ArrayList<ArrayList<Integer>> adj) {\n        int V = adj.size();\n        boolean[] visited = new boolean[V];\n\n        // Filling vertices in stack according to their finishing times.\n        for (int i = 0; i < V; i++) {\n            if (!visited[i]) {\n                fillOrder(adj, visited, i);\n            }\n        }\n\n        // Creating transpose of adjacency list.\n        ArrayList<ArrayList<Integer>> transposeAdj = new ArrayList<>();\n        for (int i = 0; i < V; i++) {\n            transposeAdj.add(new ArrayList<>());\n        }\n        transpose(V, adj, transposeAdj);\n\n        // Marking all the nodes as not visited again.\n        Arrays.fill(visited, false);\n\n        int ans = 0;\n\n        // Now processing all vertices in order defined by stack.\n        while (!stack.isEmpty()) {\n            int temp = stack.pop();\n\n            // If vertex is not visited, we call dfs function and increment the counter.\n            if (!visited[temp]) {\n                dfs(transposeAdj, visited, temp);\n                ans++;\n            }\n        }\n\n        // Returning the count.\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def DFSUtil(self, graph, v, visited):\n\n        #marking the current node as visited.\n        visited[v] = True\n\n        #iterating over adjacent vertices and calling function\n        #recursively if any adjacent vertex is not visited.\n        for i in graph[v]:\n            if visited[i] == False:\n                self.DFSUtil(graph, i, visited)\n\n    def fillOrder(self, adj, v, visited, stack):\n\n        #marking the current node as visited.\n        visited[v] = True\n\n        #iterating over adjacent vertices and calling function\n        #recursively if any adjacent vertex is not visited.\n        for i in adj[v]:\n            if visited[i] == False:\n                self.fillOrder(adj, i, visited, stack)\n\n        #pushing vertex into the stack.\n        stack = stack.append(v)\n\n    #Function that creates transpose of the adjacency list.\n    def getTranspose(self, V, adj):\n        g = [[] for i in range(V)]\n        for i in range(V):\n            for j in adj[i]:\n                g[j].append(i)\n        return g\n\n    #Function to find number of strongly connected components in the graph.\n    def kosaraju(self, adj):\n        V = len(adj)\n        ans = 0\n        stack = []\n\n        #using boolean list to mark visited nodes and currently\n        #marking all the nodes as false.\n        visited = [False] * V\n\n        #filling vertices in stack according to their finishing times.\n        for i in range(V):\n            if visited[i] == False:\n                self.fillOrder(adj, i, visited, stack)\n\n        #creating transpose of adjacency list.\n        gr = self.getTranspose(V, adj)\n\n        #marking all the nodes as not visited again.\n        visited = [False] * V\n\n        #now processing all vertices in order defined by stack.\n        while stack:\n\n            #popping a vertex from stack.\n            i = stack.pop()\n\n            #if vertex is not visited, we call DFSUtil function\n            #and increment the counter.\n            if visited[i] == False:\n                self.DFSUtil(gr, i, visited)\n                ans += 1\n\n        #returning the count.\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    kosaraju(adj) {\n        let V = adj.length; // Number of vertices\n        return this.kosarajuSCC(V, adj);\n    }\n\n    kosarajuSCC(V, adj) {\n        let visited = new Array(V).fill(false);\n        let stack = [];\n\n        // Fill vertices in the stack according to their finishing times\n        for (let i = 0; i < V; i++) {\n            if (!visited[i]) this.fillOrder(adj, visited, i, stack);\n        }\n\n        // Create the transpose graph\n        let transpose_adj = new Array(V).fill(0).map(() => []);\n        this.transpose(V, adj, transpose_adj);\n\n        // Process vertices in the order defined by the stack\n        visited.fill(false);\n        let ans = 0;\n\n        while (stack.length > 0) {\n            let temp = stack.pop();\n            if (!visited[temp]) {\n                this.dfs(transpose_adj, visited, temp);\n                ans++;\n            }\n        }\n        return ans;\n    }\n\n    transpose(V, adj, transpose_adj) {\n        for (let u = 0; u < V; u++) {\n            for (let v of adj[u]) {\n                transpose_adj[v].push(u);\n            }\n        }\n    }\n\n    fillOrder(adj, visited, u, stack) {\n        visited[u] = true;\n        for (let v of adj[u]) {\n            if (!visited[v]) this.fillOrder(adj, visited, v, stack);\n        }\n        stack.push(u);\n    }\n\n    dfs(adj, visited, u) {\n        visited[u] = true;\n        for (let v of adj[u]) {\n            if (!visited[v]) this.dfs(adj, visited, v);\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}