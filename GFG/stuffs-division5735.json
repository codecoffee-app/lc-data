{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702995,
            "title": "Stuffs Division",
            "titleSlug": "stuffs-division5735",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr[]</strong> where each element represents the amount of goodies currently held by students. Each student at index <strong>i</strong>&nbsp;should receive exactly <strong>i</strong>&nbsp;amount of goodies (1-based indexing) for a fair distribution, with no wastage allowed. </span><span style=\"font-size: 18px;\">Your task is to determine whether it is possible to redistribute the goodies such that the student at index i gets exactly i amount of goodies. Return true if it is possible otherwise return false.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [7, 4, 1, 1, 2]\n<strong>Output: </strong>true\n<strong>Explanation: </strong>Since, all the goods can be redistributed as 1 2 3 4 5 (i<sup>th</sup> students get i number of goodies).So, output is true.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [1, 1, 1, 1, 1]\n<strong>Output: </strong>false<br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array `arr[]` representing the number of goodies each student currently holds. The student at index `i` (1-based indexing) needs to receive exactly `i` goodies for a fair distribution, with no wastage allowed. Determine if it's possible to redistribute the goodies so each student receives the correct amount. Return `true` if possible, otherwise `false`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[7, 4, 1, 1, 2]",
                        "output": "true",
                        "explanation": "The total number of goodies is 7 + 4 + 1 + 1 + 2 = 15.  The required number of goodies for the students to have 1, 2, 3, 4, and 5 goodies respectively is 1 + 2 + 3 + 4 + 5 = 15. Since the total number of goodies equals the required number, redistribution is possible."
                    },
                    {
                        "input": "[1, 1, 1, 1, 1]",
                        "output": "false",
                        "explanation": "The total number of goodies is 1 + 1 + 1 + 1 + 1 = 5. The required number of goodies is 1 + 2 + 3 + 4 + 5 = 15. Since the total number of goodies does not equal the required number, redistribution is not possible."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >To verify if the array arr contains a permutation of the first n natural numbers, check if the sum of the array equals the sum of the first n natural numbers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool possible(vector<int>& arr) {\n        int n = arr.size();\n        long long sum = 0;\n        long long sum1 = 0;\n\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n        }\n\n        // Calculate the sum of first n natural numbers\n        sum1 = (long long)n * (n + 1) / 2;\n\n        return (sum == sum1);\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public boolean possible(int[] arr) {\n        int n = arr.length;\n        long sum = 0;\n        long sum1 = 0;\n\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n        }\n\n        // Calculate the sum of first n natural numbers\n        sum1 = (long)n * (n + 1) / 2;\n\n        return (sum == sum1);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def possible(self, arr):\n        n = len(arr)\n        sum = 0\n        sum1 = 0\n\n        for i in range(n):\n            sum += arr[i]\n\n        # Calculate the sum of first n natural numbers\n        sum1 = n * (n + 1) // 2\n\n        return sum == sum1\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    possible(arr) {\n        const n = arr.length;\n        let sum = 0;\n        let sum1 = 0;\n\n        // Calculate the sum of elements in arr\n        for (let i = 0; i < n; i++) {\n            sum += arr[i];\n        }\n\n        // Calculate the sum of first n natural numbers\n        sum1 = (n * (n + 1)) / 2;\n\n        return sum === sum1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}