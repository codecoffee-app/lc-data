{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702918,
            "title": "Subarray Sum Divisible By K",
            "titleSlug": "sub-array-sum-divisible-by-k2617",
            "content": "<p><span >You are given an integer array <strong>arr[] </strong>and a value <strong>k</strong>. The task is to find the count of all sub-arrays whose <strong>sum</strong> is <strong>divisible by k.</strong></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [4, 5, 0, -2, -3, 1], k = 5\n<strong>Output:</strong> 7\n<strong>Explanation</strong>: There are 7 sub-arrays whose sum is divisible by k: [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3] and [-2, -3]\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 2, 2, 2, 2, 2], k = 2\n<strong>Output:</strong> 21\n<strong>Explanation</strong>: All subarray sums are divisible by 2\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [-1, -3, 2], k = 5\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: There is no such sub-array whose sum is divisible by k.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>4<br /></sup></span><span ><span style=\"font-size: 18.6667px;\">-10<sup>6</sup> &le; arr[i]&le; 10<sup>6<br /></sup></span></span><span ><span style=\"font-size: 18.6667px;\"><span style=\"font-size: 18.6667px;\">1 &le; k &le; 10<sup>4</sup></span></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr[]` and an integer `k`, determine the number of subarrays whose sum is divisible by `k`.",
                "constraints": [
                    "1 <= arr.size() <= 10^4",
                    "-10^6 <= arr[i] <= 10^6",
                    "1 <= k <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [4, 5, 0, -2, -3, 1], k = 5",
                        "output": "7",
                        "explanation": "The subarrays with sums divisible by 5 are: [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], and [-2, -3]."
                    },
                    {
                        "input": "arr[] = [2, 2, 2, 2, 2, 2], k = 2",
                        "output": "21",
                        "explanation": "All possible subarrays have sums divisible by 2."
                    },
                    {
                        "input": "arr[] = [-1, -3, 2], k = 5",
                        "output": "0",
                        "explanation": "There are no subarrays whose sum is divisible by 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a cumulative sum approach. Track remainders of cumulative sums modulo <code>k</code> using a frequency array. Count subarrays with the same remainder to find the result.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            }
        ],
        "companies": [
            "paytm",
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to count the number of subarrays with a sum that is divisible by K\n    int subCount(vector<int>& arr, int k) {\n        int n = arr.size(), res = 0;\n        unordered_map<int, int> prefCnt;\n        int sum = 0;\n\n        // Iterate over all ending points\n        for (int i = 0; i < n; i++) {\n\n            // prefix sum mod k (handling negative prefix sum)\n            sum = ((sum + arr[i]) % k + k) % k;\n\n            // If sum == 0, then increment the result by 1\n            // to count subarray arr[0...i]\n            if (sum == 0)\n                res += 1;\n\n            // Add count of all starting points for index i\n            res += prefCnt[sum];\n\n            prefCnt[sum] += 1;\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to count the number of subarrays with a sum that is divisible by K\n    public int subCount(int[] arr, int k) {\n        int n = arr.length, res = 0;\n        Map<Integer, Integer> prefCnt = new HashMap<>();\n        int sum = 0;\n\n        // Iterate over all ending points\n        for (int i = 0; i < n; i++) {\n\n            // prefix sum mod k (handling negative prefix sum)\n            sum = ((sum + arr[i]) % k + k) % k;\n\n            // If sum == 0, then increment the result by 1\n            // to count subarray arr[0...i]\n            if (sum == 0) res += 1;\n\n            // Add count of all starting points for index i\n            res += prefCnt.getOrDefault(sum, 0);\n\n            prefCnt.put(sum, prefCnt.getOrDefault(sum, 0) + 1);\n        }\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Initial Template for Python 3\n\n\nclass Solution:\n    # Function to count the number of subarrays with a sum that is divisible by K\n    def subCount(self, arr, k):\n        n = len(arr)\n        res = 0\n        prefCnt = defaultdict(int)\n        sum = 0\n\n        # Iterate over all ending points\n        for i in range(n):\n            sum = (sum + arr[i]) % k\n\n            # If sum == 0, then increment the result by 1\n            # to count subarray arr[0...i]\n            if sum == 0:\n                res += 1\n\n            # Add count of all starting points for index i\n            res += prefCnt[sum]\n\n            prefCnt[sum] += 1\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    // Function to count the number of subarrays with a sum divisible by k\n    subCount(arr, k) {\n        let n = arr.length;\n        let res = 0;\n        let prefCnt = new Map();\n        let sum = 0;\n\n        // Iterate over all ending points\n        for (let i = 0; i < n; i++) {\n\n            // prefix sum mod k (handling negative prefix sum)\n            sum = ((sum + arr[i]) % k + k) % k;\n\n            // If sum == 0, then increment the result by 1\n            // to count subarray arr[0...i]\n            if (sum === 0) res += 1;\n\n            // Add count of all starting points for index i\n            res += (prefCnt.get(sum) || 0);\n\n            prefCnt.set(sum, (prefCnt.get(sum) || 0) + 1);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}