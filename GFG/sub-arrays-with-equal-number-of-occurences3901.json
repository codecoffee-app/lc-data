{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703845,
            "title": "Sub-arrays with equal number of occurences",
            "titleSlug": "sub-arrays-with-equal-number-of-occurences3901",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[] </strong>and two integers say, <strong>x&nbsp;</strong>and <strong>y</strong>, find the number of sub-arrays in which the number of occurrences of <strong>x</strong> is equal to the number of occurrences of <strong>y</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 1] , x= 1 , y = 2\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>The possible sub-arrays have same equal number of occurrences of x and y are:\n1) [1, 2], x and y have same occurrence(1).\n2) [2, 1], x and y have same occurrence(1).<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 1] , x = 4 , y = 6\n<strong>Output:</strong> 6\n<strong>Explanation: </strong>The possible sub-arrays have same equal number of occurrences of x and y are:\n1) [1], x and y have same occurrence(0).\n2) [2], x and y have same occurrence(0).\n3) [1], x and y have same occurrence(0).\n4) [1, 2], x and y have same occurrence(0).\n5) [2, 1], x and y have same occurrence(0).\n6) [1, 2, 1], x and y have same occurrence(0).<br /></span></pre>\n<pre><strong>Input: </strong>arr[] = [1, 2, 1] , x= 1 , y = 4\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>The possible sub-array have same equal number of occurrences of x and y is: [2], x and y have same occurrence(0)</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:&nbsp;</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= arr[i], x, y&lt;=10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` and two integers `x` and `y`, find the number of subarrays in which the count of `x` is equal to the count of `y`.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "1 <= arr[i], x, y <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 1] , x= 1 , y = 2",
                        "output": "2",
                        "explanation": "The subarrays with an equal number of occurrences of x and y are:\n1) [1, 2]: x appears once, y appears once.\n2) [2, 1]: x appears once, y appears once."
                    },
                    {
                        "input": "arr[] = [1, 2, 1] , x = 4 , y = 6",
                        "output": "6",
                        "explanation": "The subarrays with an equal number of occurrences of x and y are:\n1) [1]: x appears zero times, y appears zero times.\n2) [2]: x appears zero times, y appears zero times.\n3) [1]: x appears zero times, y appears zero times.\n4) [1, 2]: x appears zero times, y appears zero times.\n5) [2, 1]: x appears zero times, y appears zero times.\n6) [1, 2, 1]: x appears zero times, y appears zero times."
                    },
                    {
                        "input": "arr[] = [1, 2, 1] , x= 1 , y = 4",
                        "output": "1",
                        "explanation": "The subarray with an equal number of occurrences of x and y is:\n[2]: x appears zero times, y appears zero times."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >We can simply generate all the possible sub-arrays and check for each subarray whether the number of occurrence of x is equal to that of y in that particular subarray.</span></p>",
            "<p><span >Use a map to track the difference between cumulative counts of x and y as you iterate through the array, and increment the result whenever the same difference is encountered again, indicating balanced subarrays.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int sameOccurrence(vector<int>& arr, int x, int y) {\n        int n = arr.size(); // Get the size of the array\n        // Arrays to store count of x and y up to each index\n        vector<int> countX(n), countY(n);\n        map<int, int> m; // To store counts of same diffs\n\n        // Count occurrences of x and y\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                countX[i] = (i != 0) ? countX[i - 1] + 1 : 1;\n            } else {\n                countX[i] = (i != 0) ? countX[i - 1] : 0;\n            }\n\n            if (arr[i] == y) {\n                countY[i] = (i != 0) ? countY[i - 1] + 1 : 1;\n            } else {\n                countY[i] = (i != 0) ? countY[i - 1] : 0;\n            }\n\n            // Increment count of current difference (countX - countY)\n            m[countX[i] - countY[i]]++;\n        }\n\n        // Traverse map and compute the result\n        int result = m[0]; // Number of subarrays where countX == countY\n        for (auto it = m.begin(); it != m.end(); ++it) {\n            long long freq = it->second;\n            // Combination formula for counting pairs\n            result = result + (freq * (freq - 1)) / 2LL;\n        }\n\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n\n    // Function to compute number of subarrays where occurrences of x and y are the same\n    static int sameOccurrence(int[] arr, int x, int y) {\n        int n = arr.length;        // Get the size of the array\n        int[] countX = new int[n]; // Array to store count of x up to each index\n        int[] countY = new int[n]; // Array to store count of y up to each index\n        Map<Integer, Integer> map = new HashMap<>(); // To store counts of same diffs\n\n        // Count occurrences of x and y\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                countX[i] = (i != 0) ? countX[i - 1] + 1 : 1;\n            } else {\n                countX[i] = (i != 0) ? countX[i - 1] : 0;\n            }\n\n            if (arr[i] == y) {\n                countY[i] = (i != 0) ? countY[i - 1] + 1 : 1;\n            } else {\n                countY[i] = (i != 0) ? countY[i - 1] : 0;\n            }\n\n            // Increment count of current difference (countX - countY)\n            map.put(countX[i] - countY[i],\n                    map.getOrDefault(countX[i] - countY[i], 0) + 1);\n        }\n\n        // Traverse map and compute the result\n        int result =\n            map.getOrDefault(0, 0); // Number of subarrays where countX == countY\n        for (int freq : map.values()) {\n            result = result + (int)(((long)freq * (freq - 1)) /\n                                    2); // Combination formula for counting pairs\n        }\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from collections import defaultdict\n\n\nclass Solution:\n\n    def sameOccurrence(self, arr, x, y):\n        n = len(arr)  # Get the size of the array\n        countX = [0] * n  # Array to store count of x up to each index\n        countY = [0] * n  # Array to store count of y up to each index\n\n        diff_map = defaultdict(int)  # To store counts of same diffs\n\n        # Count occurrences of x and y\n        for i in range(n):\n            if arr[i] == x:\n                countX[i] = countX[i - 1] + 1 if i != 0 else 1\n            else:\n                countX[i] = countX[i - 1] if i != 0 else 0\n\n            if arr[i] == y:\n                countY[i] = countY[i - 1] + 1 if i != 0 else 1\n            else:\n                countY[i] = countY[i - 1] if i != 0 else 0\n\n            # Increment count of current difference (countX - countY)\n            diff_map[countX[i] - countY[i]] += 1\n\n        # Traverse map and compute the result\n        result = diff_map[0]  # Number of subarrays where countX == countY\n        for freq in diff_map.values():\n            result = result + (\n                freq *\n                (freq - 1)) // 2  # Combination formula for counting pairs\n\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {number[]} arr - The input array\n * @param {number} x - The first number\n * @param {number} y - The second number\n * @returns {number} - The number of subarrays where occurrences of x and y are the same\n */\nclass Solution {\n    // Function to find the number of subarrays where x and y occur the same number of\n    // times\n    sameOccurrence(arr, x, y) {\n        const n = arr.length; // Get the size of the array\n        const countX =\n            new Array(n).fill(0); // Array to store count of x up to each index\n        const countY =\n            new Array(n).fill(0); // Array to store count of y up to each index\n\n        const diffMap = new Map(); // To store counts of same diffs\n\n        let result = 0;\n        diffMap.set(0, 1); // To count the cases when countX == countY from the start\n\n        // Count occurrences of x and y\n        for (let i = 0; i < n; i++) {\n            countX[i] = (i > 0 ? countX[i - 1] : 0) + (arr[i] === x ? 1 : 0);\n            countY[i] = (i > 0 ? countY[i - 1] : 0) + (arr[i] === y ? 1 : 0);\n\n            const diff = countX[i] - countY[i];\n\n            // Increment count of current difference (countX - countY)\n            if (diffMap.has(diff)) {\n                result = (result + diffMap.get(diff));\n                diffMap.set(diff, diffMap.get(diff) + 1);\n            } else {\n                diffMap.set(diff, 1);\n            }\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}