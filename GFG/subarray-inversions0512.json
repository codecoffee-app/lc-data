{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703440,
            "title": "Subarray Inversions",
            "titleSlug": "subarray-inversions0512",
            "content": "<p><span style=\"font-size: 12pt;\">Given an array <strong>arr[]</strong>, the task is to find the sum of the number of inversions in all subarrays of length <strong>k</strong>. To clarify, determine the number of inversions in each of the <strong>n-k+1 </strong>(where, n is the size of the array<strong>)</strong>&nbsp;subarrays of length k and add them together.</span></p>\n<p><span style=\"font-size: 12pt;\">For example, if <strong>i </strong>and <strong>j </strong>are two different indices of an array <strong>arr[]</strong> such that <strong>i &lt; j</strong>&nbsp;and <strong>arr[i] &gt; arr[j]</strong>, it is an inversion.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [1, 6, 7, 2], k = 3<strong>\nOutput:</strong> 2\n<strong>Explanation</strong>: There are two subarrays of size 3, {1, 6, 7} and {6, 7, 2}. Count of inversions in first subarray is 0 and count of inversions in second subarray is 2. So sum is 0 + 2 = 2.</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [12, 3, 14, 8, 15, 1, 4, 22], k = 4\n<strong>Output:</strong> 14 </span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>).&nbsp;<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &le; arr.size &le; 10<sup>3<br /></sup>1 &le; arr[i] &le; 10<sup>3</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, the task is to find the sum of the number of inversions in all subarrays of length `k`. An inversion is defined as a pair of indices `i` and `j` in an array such that `i < j` and `arr[i] > arr[j]`. Determine the number of inversions in each of the `n-k+1` subarrays of length `k` (where `n` is the size of the array) and sum them up.",
                "constraints": [
                    "1 <= arr.size <= 1000",
                    "1 <= arr[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 6, 7, 2], k = 3",
                        "output": "2",
                        "explanation": "There are two subarrays of size 3: {1, 6, 7} and {6, 7, 2}. The subarray {1, 6, 7} has 0 inversions. The subarray {6, 7, 2} has 2 inversions (6 > 2 and 7 > 2). Therefore, the sum of inversions is 0 + 2 = 2."
                    },
                    {
                        "input": "arr[] = [12, 3, 14, 8, 15, 1, 4, 22], k = 4",
                        "output": "14",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try Using the merge sort-based method or similar concepts.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n\n  private:\n    // Function to create a copy of a range of elements in a vector.\n    vector<int> copyofrange(vector<int>& arr, int s, int e) {\n        vector<int> t;\n        for (int i = s; i < e; ++i) {\n            t.push_back(arr[i]);\n        }\n        return t;\n    }\n\n    // Function to merge two sorted vectors and count inversions.\n    long long merge_inversion_count(vector<int>& arr, vector<int>& left,\n                                    vector<int>& right) {\n        int i = 0, j = 0;\n        long long count = 0;\n        while (i < left.size() || j < right.size()) {\n            if (i == left.size()) {\n                arr[i + j] = right[j];\n                ++j;\n            } else if (j == right.size()) {\n                arr[i + j] = left[i];\n                ++i;\n            } else if (left[i] <= right[j]) {\n                arr[i + j] = left[i];\n                ++i;\n            } else {\n                arr[i + j] = right[j];\n                count += left.size() - i;\n                ++j;\n            }\n        }\n        return count;\n    }\n\n    // Function to count inversions in a subarray.\n    long long subarray_inversion_count(vector<int>& arr) {\n        if (arr.size() < 2)\n            return 0;\n        int m = (arr.size() + 1) / 2;\n        vector<int> left = copyofrange(arr, 0, m);\n        vector<int> right = copyofrange(arr, m, arr.size());\n        return subarray_inversion_count(left) + subarray_inversion_count(right) +\n               merge_inversion_count(arr, left, right);\n    }\n\n  public:\n    // Function to count inversions in a given range of the array.\n    long long inversion_count(vector<int>& arr, int k) {\n        int n = arr.size();\n        long long count = 0;\n        for (int start = 0; start < n - k + 1; ++start) {\n            vector<int> sub_array(k);\n            for (int i = start; i < start + k; ++i) {\n                sub_array[i - start] = arr[i];\n            }\n            count += subarray_inversion_count(sub_array);\n        }\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n\n    // Inversion counting method, slides window of [start,\n    // end] across array\n    public long inversion_count(int[] a, int k) {\n        int n = a.length;\n        int count = 0;\n        for (int start = 0; start < n - k + 1; start++) {\n            int[] sub_array = new int[k];\n            for (int i = start; i < start + k; i++) {\n                sub_array[i - start] = a[i];\n            }\n            count += subarray_inversion_count(sub_array);\n        }\n        return count;\n    }\n\n    // Counts number of inversions when merging\n    public static long merge_inversion_count(int[] arr, int[] left, int[] right) {\n        int i = 0, j = 0, count = 0;\n        while (i < left.length || j < right.length) {\n            if (i == left.length) {\n                arr[i + j] = right[j];\n                j++;\n            } else if (j == right.length) {\n                arr[i + j] = left[i];\n                i++;\n            } else if (left[i] <= right[j]) {\n                arr[i + j] = left[i];\n                i++;\n            } else {\n                arr[i + j] = right[j];\n                count += left.length - i;\n                j++;\n            }\n        }\n        return count;\n    }\n\n    // Divide and conquer approach -- splits array and counts\n    // inversions via merge method\n    public static long subarray_inversion_count(int[] arr) {\n        if (arr.length < 2) return 0;\n\n        int m = (arr.length + 1) / 2;\n        int left[] = Arrays.copyOfRange(arr, 0, m);\n        int right[] = Arrays.copyOfRange(arr, m, arr.length);\n\n        return subarray_inversion_count(left) + subarray_inversion_count(right) +\n            merge_inversion_count(arr, left, right);\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def inversion_count(self, arr, k):\n        n = len(arr)\n        count = 0\n        # Iterate over all possible subarrays of length k\n        for start in range(n - k + 1):\n            sub_array = arr[start:start + k]\n            count += self.subarray_inversion_count(sub_array)\n        return count\n\n    # Merge function that counts the number of inversions during the merge process\n    def merge_inversion_count(self, arr, left, right):\n        i = j = count = 0\n        while i < len(left) or j < len(right):\n            if i == len(left):\n                arr[i + j] = right[j]\n                j += 1\n            elif j == len(right):\n                arr[i + j] = left[i]\n                i += 1\n            elif left[i] <= right[j]:\n                arr[i + j] = left[i]\n                i += 1\n            else:\n                arr[i + j] = right[j]\n                count += len(left) - i  # Count the number of inversions\n                j += 1\n        return count\n\n    # Recursive function to count inversions in the subarray using divide and conquer\n    def subarray_inversion_count(self, arr):\n        if len(arr) < 2:\n            return 0\n\n        m = (len(arr) + 1) // 2\n        left = arr[:m]\n        right = arr[m:]\n\n        return (self.subarray_inversion_count(left) +\n                self.subarray_inversion_count(right) +\n                self.merge_inversion_count(arr, left, right))\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    inversionCount(arr, k) {\n        let n = arr.length;\n        let count = 0;\n\n        for (let start = 0; start <= n - k; start++) {\n            let subArray = arr.slice(start, start + k);\n            count += this.subarrayInversionCount(subArray);\n        }\n\n        return count;\n    }\n\n    mergeInversionCount(arr, left, right) {\n        let i = 0, j = 0, count = 0;\n\n        while (i < left.length || j < right.length) {\n            if (i === left.length) {\n                arr[i + j] = right[j];\n                j++;\n            } else if (j === right.length) {\n                arr[i + j] = left[i];\n                i++;\n            } else if (left[i] <= right[j]) {\n                arr[i + j] = left[i];\n                i++;\n            } else {\n                arr[i + j] = right[j];\n                count += left.length - i;\n                j++;\n            }\n        }\n\n        return count;\n    }\n\n    subarrayInversionCount(arr) {\n        if (arr.length < 2) {\n            return 0;\n        }\n\n        let mid = Math.floor((arr.length + 1) / 2);\n        let left = arr.slice(0, mid);\n        let right = arr.slice(mid);\n\n        return this.subarrayInversionCount(left) + this.subarrayInversionCount(right) +\n               this.mergeInversionCount(arr, left, right);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}