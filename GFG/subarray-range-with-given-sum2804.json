{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702681,
            "title": "Subarrays with given sum",
            "titleSlug": "subarray-range-with-given-sum2804",
            "content": "<p><span style=\"font-size: 18px;\">Given an unsorted array <strong>arr</strong>[] of integers and a sum <strong>k</strong>. The task is to count the number of subarrays that add to a given number <strong>k</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 2, -2, -20, 10], k = -10\n<strong>Output:</strong> 3\n<strong>Explanation</strong>: Subarrays with sum -10 are: [10, 2, -2, -20], [2, -2, -20, 10] and [-20, 10].\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 4, 20, 3, 10, 5], k = 33\n<strong>Output:</strong> 1\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6<br /></sup>-10<sup>6 </sup>&le; arr[i],k &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array of integers `arr[]` and a target sum `k`, determine the number of subarrays within `arr[]` whose elements sum up to `k`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "-10^6 <= arr[i], k <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [10, 2, -2, -20, 10], k = -10",
                        "output": "3",
                        "explanation": "The subarrays [10, 2, -2, -20], [2, -2, -20, 10], and [-20, 10] sum to -10."
                    },
                    {
                        "input": "arr[] = [1, 4, 20, 3, 10, 5], k = 33",
                        "output": "1",
                        "explanation": "The subarray [20, 3, 10] sums to 33."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Ensure you're considering all possible subarrays, including those starting from the beginning of the array, and correctly handling cases where the cumulative sum equals the target sum k.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the count of subarrays with given sum.\n    int subArraySum(vector<int>& arr, int k) {\n        // creating a map to store cumulative sum and its frequency.\n        int n = arr.size();\n        unordered_map<int, int> mp;\n        int curr_sum = 0; // variable to store the current sum\n        int count = 0;    // variable to store the count of subarrays with given sum\n\n        // iterating over the array\n        for (int i = 0; i < n; i++) {\n            curr_sum =\n                curr_sum + arr[i]; // updating the current sum with the current element\n\n            // if the current sum is equal to the given sum, increment the count\n            if (curr_sum == k) {\n                count++;\n            }\n\n            // if there is a subarray with sum equal to (curr_sum - sum),\n            // increment the count with the frequency of that subarray\n            if (mp.count(curr_sum - k) != 0) {\n                count += mp[curr_sum - k];\n            }\n\n            // incrementing the frequency of current sum in the map\n            mp[curr_sum] += 1;\n        }\n\n        // returning the count of subarrays with given sum\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "/*package whatever //do not write package name here */\nclass Solution {\n\n    public static int subArraySum(int[] arr, int k) {\n        int n = arr.length;\n        // using an unordered_map to store prefix sum frequency\n        Map<Integer, Integer> d = new HashMap<>(); // equivalent to unordered_map in C++\n        int curr_sum = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            // calculating current prefix sum\n            curr_sum += arr[i];\n            // incrementing count if current prefix sum is equal to target sum\n            if (curr_sum == k) count++;\n            // incrementing count if current prefix sum minus target sum is present in\n            // the map\n            if (d.containsKey(curr_sum - k)) count += d.get(curr_sum - k);\n            // updating the frequency of current prefix sum in the map\n            d.put(curr_sum, d.getOrDefault(curr_sum, 0) + 1);\n        }\n        // returning the count\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nfrom collections import defaultdict\n\n\nclass Solution:\n\n    def subArraySum(self, arr, k):\n        # creating a defaultdict to store cumulative sum and its frequency.\n        n = len(arr)\n        mp = defaultdict(int)\n        curr_sum = 0  # variable to store the current sum\n        count = 0  # variable to store the count of subarrays with given sum\n\n        # iterating over the array\n        for i in range(n):\n            # updating the current sum with the current element\n            curr_sum += arr[i]\n\n            # if the current sum is equal to the given sum, increment the count\n            if curr_sum == k:\n                count += 1\n\n            # if there is a subarray with sum equal to (curr_sum - sum),\n            # increment the count with the frequency of that subarray\n            if (curr_sum - k) in mp:\n                count += mp[curr_sum - k]\n\n            # incrementing the frequency of current sum in the map\n            mp[curr_sum] += 1\n\n        # returning the count of subarrays with given sum\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    subArraySum(arr, k) {\n        // create map for storing commulative sums\n        let mp = new Map();\n        let n = arr.length;\n        let curr_sum = 0;\n        let count = 0;\n\n        for (let i = 0; i < n; i++) {\n            // update current sums\n            curr_sum = curr_sum + arr[i];\n\n            if (curr_sum === k) {\n                count++;\n            }\n            // check in map to find sums\n            if (mp.has(curr_sum - k)) {\n                count += mp.get(curr_sum - k);\n            }\n\n            if (!mp.has(curr_sum)) {\n                mp.set(curr_sum, 0);\n            }\n            // insert in map\n            mp.set(curr_sum, mp.get(curr_sum) + 1);\n        }\n        // return count\n        return count;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}