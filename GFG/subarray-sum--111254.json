{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881453,
            "title": "Subarray sum",
            "titleSlug": "subarray-sum--111254",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer array <strong>arr</strong>[]. Find the&nbsp;maximum sum of the subarray&nbsp;that&nbsp;<strong>starts and ends</strong> with the same value element. A single value subarray can be considered as the start and end with the same element.<br />Note:<strong>&nbsp;</strong>The answer will always fit into a 32-bit integer.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 6, 4]\n<strong>Output:</strong> 6\n<strong>Explanation</strong>:\nThe maximum sum of the subarray is 6 because there is no such subarray where starting and ending point is same and 6 is the maximum element.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [6, 3, 2, 3, 2, 6]\n<strong>Output:</strong> 22\n<strong>Explanation</strong>: Maximum sum of subarray is 22 where the subarray is starting with 6 and ending with 6.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr`, find the maximum sum of a subarray that starts and ends with the same value. A single-element subarray is considered valid.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2, 6, 4]",
                        "output": "6",
                        "explanation": "The maximum sum of a subarray starting and ending with the same element is 6, as there are no such subarrays. Thus, the largest single element is considered."
                    },
                    {
                        "input": "[6, 3, 2, 3, 2, 6]",
                        "output": "22",
                        "explanation": "The subarray [6, 3, 2, 3, 2, 6] starts and ends with 6. The sum of this subarray is 6 + 3 + 2 + 3 + 2 + 6 = 22, which is the maximum possible sum."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. prefix sum</p>\n\n<p>2.Use the map to store the first index of the current element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int maximum_sum(vector<int> &arr) {\n        int n = arr.size();\n        int prefix[n];\n        prefix[0] = arr[0];\n        int i;\n        for (i = 1; i < n; i++) {\n            prefix[i] = arr[i] + prefix[i - 1];\n        }\n\n        unordered_map<int, int> m1;\n        int ans = 0;\n        for (i = 0; i < n; i++) {\n            int x;\n            x = arr[i];\n            if (m1.find(x) == m1.end()) {\n                ans = max(ans, x);\n                m1[x] = i;\n            } else {\n                int pre;\n                pre = m1[x];\n                ans = max(ans, prefix[i] - prefix[pre] + arr[pre]);\n            }\n        }\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            }
        },
        "platform": "GFG"
    }
}