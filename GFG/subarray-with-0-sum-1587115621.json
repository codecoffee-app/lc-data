{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701289,
            "title": "Subarray with 0 sum",
            "titleSlug": "subarray-with-0-sum-1587115621",
            "content": "<p><span >Given an array of integers, <strong>arr[]</strong>. Find if there is a <strong>subarray </strong>(of size at least one) with <strong>0 sum</strong>. Return true/false depending upon whether there is a subarray present with 0-sum or not.&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [4, 2, -3, 1, 6]\n<strong>Output: </strong>true<strong>\nExplanation: </strong>2, -3, 1 is the subarray with a sum of 0.</span></pre>\n<pre><span ><strong>Input: </strong>arr = [4, 2, 0, 1, 6]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 0 is one of the element in the array so there exist a subarray with sum 0.</span></pre>\n<pre><span ><strong>Input: </strong>arr = [1, 2, -1]\n<strong>Output:</strong> false</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size &lt;= 10<sup>4</sup><br />-10<sup>5</sup> &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, `arr[]`, determine if there exists a subarray (with a size of at least one) whose elements sum to zero. Return `true` if such a subarray exists, and `false` otherwise.",
                "constraints": [
                    "1 <= arr.size <= 10^4",
                    "-10^5 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[4, 2, -3, 1, 6]",
                        "output": "true",
                        "explanation": "The subarray [2, -3, 1] has a sum of 0."
                    },
                    {
                        "input": "[4, 2, 0, 1, 6]",
                        "output": "true",
                        "explanation": "The subarray [0] has a sum of 0."
                    },
                    {
                        "input": "[1, 2, -1]",
                        "output": "false",
                        "explanation": "There is no subarray with a sum of 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Track prefix sums in a map; if a sum repeats or is zero, a zero-sum subarray exists.</span></p>",
            "<p><span >Use a map to track prefix sums as you iterate; if a prefix sum repeats or is zero, a subarray with a zero-sum exists.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check whether there is a subarray present with 0-sum or not.\n    bool subArrayExists(vector<int>& arr) {\n        // using map to store the prefix sum which has appeared already.\n        unordered_map<int, bool> sumMap;\n\n        int sum = 0;\n        int n = arr.size();\n        // iterating over the array.\n        for (int i = 0; i < n; i++) {\n            // storing prefix sum.\n            sum += arr[i];\n\n            // if prefix sum is 0 or if it is already present in map then it is\n            // repeated which means there is a subarray whose summation is 0,\n            // so we return true.\n            if (sum == 0 || sumMap[sum] == true)\n                return true;\n\n            // storing true in map for every prefix sum obtained.\n            sumMap[sum] = true;\n        }\n        // returning false if we don't get any subarray with 0 sum.\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to check whether there is a subarray present with 0-sum or not.\n    static boolean findsum(int arr[]) {\n        int n = arr.length;\n        // using Hashmap to store the prefix sum which has appeared already.\n        HashMap<Integer, Integer> hM = new HashMap<Integer, Integer>();\n\n        int sum = 0;\n\n        // iterating over the array.\n        for (int i = 0; i < arr.length; i++) {\n            // storing prefix sum.\n            sum += arr[i];\n\n            // if prefix sum is 0 or if it is already present in Hashmap\n            // then it is repeated which means there is a subarray whose\n            // summation is 0, so we return true.\n            if (sum == 0 || hM.get(sum) != null) return true;\n\n            // storing every prefix sum obtained in Hashmap.\n            hM.put(sum, i);\n        }\n        // returning false if we don't get any subarray with 0 sum.\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to check whether there is a subarray present with 0-sum or not.\n    def subArrayExists(self, arr):\n        n = len(arr)\n\n        #using set to store the prefix sum which has appeared already.\n        s = set()\n\n        sum = 0\n        #iterating over the array.\n        for i in range(n):\n            #storing prefix sum.\n            sum += arr[i]\n\n            #if prefix sum is 0 or if it is already present in set then it is\n            #repeated which means there is a subarray whose summation was 0,\n            #so we return true.\n            if sum == 0 or sum in s:\n                return True\n\n            #storing every prefix sum obtained in set.\n            s.add(sum)\n\n        #returning false if we don't get any subarray with 0 sum.\n        return False\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @returns {boolean}\n */\nclass Solution {\n    // Function to check whether there is a subarray present with 0-sum or not.\n    subArrayExists(arr) {\n        let n = arr.length;\n        // using map to store the prefix sum which has appeared already.\n        let sumMap = new Map();\n\n        let sum = 0;\n        // iterating over the array.\n        for (let i = 0; i < n; i++) {\n            // storing prefix sum.\n            sum += arr[i];\n\n            // if prefix sum is 0 or if it is already present in map then it is\n            // repeated which means there is a subarray whose summation was 0,\n            // so we return true.\n            if (sum == 0 || sumMap.has(sum) == true) return true;\n\n            // storing true in map for every prefix sum obtained.\n            sumMap.set(sum, true);\n        }\n        // returning false if we don't get any subarray with 0 sum.\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}