{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876268,
            "title": "Subarray with Given Sum",
            "titleSlug": "subarray-with-given-sum--145933",
            "content": "<p><span >You are given an array&nbsp;<strong>arr[]&nbsp;</strong>and an integer&nbsp;<strong>sum</strong>. You need to return the start and end (<strong>1-Based</strong>) indexes of a subarray whose sum is equal to the given&nbsp;<strong>sum</strong>.<br />If many such sub-array are present, return the indexes which comes first moving from left to right. If no such sub-array is present return empty array</span></p>\n<p><strong><span >Examples:</span></strong></p>\n<pre><span ><strong>Input: </strong>arr[] = [15, 2, 4, 8, 9, 5, 10, 23], sum = 23\n<strong>Output: </strong>2 5 \n<strong>Explanation : </strong>Sum of elements between indices 2 and 5 is 2+4+8+9 = 23</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 4, 0, 0, 3, 10, 5], sum = 7\n<strong>Output: </strong>2 5\n<strong>Explanation: </strong>Sum of elements between indices 2 and 5 is 4+0+0+3 = 7</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 4], sum = 0\n<strong>Output: </strong>[]\n<strong>Explanation: </strong>There is no subarray with 0 sum</span></pre>\n<p><strong style=\"font-size: 18.6667px;\">Constraints:</strong><br style=\"font-size: 18.6667px;\" /><span style=\"font-size: 18.6667px;\">1 &le; arr.size &le; 10</span><sup>6</sup><br style=\"font-size: 18.6667px;\" /><span style=\"font-size: 18.6667px;\">0 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]` and an integer `sum`, find the starting and ending indices (1-based) of the first subarray from left to right whose elements sum to `sum`. If no such subarray exists, return an empty array.",
                "constraints": [
                    "1 <= arr.size <= 10^6",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [15, 2, 4, 8, 9, 5, 10, 23], sum = 23",
                        "output": "[2, 5]",
                        "explanation": "The subarray [2, 4, 8, 9] starts at index 2 and ends at index 5, and its sum (2 + 4 + 8 + 9) equals 23."
                    },
                    {
                        "input": "arr[] = [1, 4, 0, 0, 3, 10, 5], sum = 7",
                        "output": "[2, 5]",
                        "explanation": "The subarray [4, 0, 0, 3] starts at index 2 and ends at index 5, and its sum (4 + 0 + 0 + 3) equals 7."
                    },
                    {
                        "input": "arr[] = [1, 4], sum = 0",
                        "output": "[]",
                        "explanation": "There is no subarray within [1, 4] that sums to 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Try to use sliding window concept.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find a continuous sub-array which adds up to a given number.\n    vector<int> subarraySum(vector<int>& arr, int sum) {\n        int n = arr.size();\n        int last = 0;\n        int start = 0;\n        int currsum = 0;\n        bool flag = false;\n        vector<int> res;\n\n        // Iterate over the array\n        for (int i = 0; i < n; i++) {\n            // Store sum up to current element\n            currsum += arr[i];\n\n            // Check if current sum is greater than or equal to given number\n            if (currsum >= sum) {\n                last = i;\n\n                // Start from starting index till current index\n                while (sum < currsum && start < last) {\n                    // Subtract the element from left\n                    currsum -= arr[start];\n                    ++start;\n                }\n\n                // If current sum becomes equal to given number\n                if (currsum == sum) {\n                    res.push_back(start + 1); // 1-based index\n                    res.push_back(last + 1);  // 1-based index\n                    flag = true;\n                    break;\n                }\n            }\n        }\n\n        // Return the result\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to find a continuous sub-array which adds up to a given number.\n    public static ArrayList<Integer> subarraySum(int[] arr, int sum) {\n        int n = arr.length;\n        int last = 0;\n        int start = 0;\n        int currsum = 0;\n        boolean flag = false;\n        ArrayList<Integer> res = new ArrayList<>();\n\n        // Iterate over the array\n        for (int i = 0; i < n; i++) {\n            // Store sum up to current element\n            currsum += arr[i];\n\n            // Check if current sum is greater than or equal to given number\n            if (currsum >= sum) {\n                last = i;\n\n                // Start from starting index till current index\n                while (sum < currsum && start < last) {\n                    // Subtract the element from left\n                    currsum -= arr[start];\n                    ++start;\n                }\n\n                // If current sum becomes equal to given number\n                if (currsum == sum) {\n                    res.add(start + 1);\n                    res.add(last + 1);\n                    flag = true;\n                    break;\n                }\n            }\n        }\n\n        // Return the result\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    # Function to find a continuous sub-array which adds up to a given number.\n    def subarray_sum(self, arr, total_sum):\n        n = len(arr)\n        last = 0\n        start = 0\n        currsum = 0\n        res = []\n\n        # Iterate over the array\n        for i in range(n):\n            # Store sum up to current element\n            currsum += arr[i]\n\n            # Check if current sum is greater than or equal to given number\n            if currsum >= total_sum:\n                last = i\n\n                # Start from starting index till current index\n                while currsum > total_sum and start < last:\n                    # Subtract the element from left\n                    currsum -= arr[start]\n                    start += 1\n\n                # If current sum becomes equal to given number\n                if currsum == total_sum:\n                    res.append(start + 1)  # 1-based index\n                    res.append(last + 1)  # 1-based index\n                    break\n\n        # Return the result\n        return res",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find a continuous sub-array which adds up to a given number.\n    subarraySum(arr, sum) {\n        let n = arr.length;\n        let last = 0;\n        let start = 0;\n        let currsum = 0;\n        let res = [];\n\n        // Iterate over the array\n        for (let i = 0; i < n; i++) {\n            // Store sum up to current element\n            currsum += arr[i];\n\n            // Check if current sum is greater than or equal to given number\n            if (currsum >= sum) {\n                last = i;\n\n                // Start from starting index till current index\n                while (currsum > sum && start < last) {\n                    // Subtract the element from left\n                    currsum -= arr[start];\n                    start++;\n                }\n\n                // If current sum becomes equal to given number\n                if (currsum === sum) {\n                    res.push(start + 1); // Convert to 1-based index\n                    res.push(last + 1);  // Convert to 1-based index\n                    break;\n                }\n            }\n        }\n\n        // Return the result\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}