{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701236,
            "title": "Indexes of Subarray Sum",
            "titleSlug": "subarray-with-given-sum-1587115621",
            "content": "<p><span >Given an array <strong>arr[]</strong> containing only non-negative integers, your task is to find a continuous subarray (a contiguous sequence of elements) whose sum equals a specified value <strong><code>target</code></strong>. You need to return the <strong>1-based indices</strong> of the leftmost and rightmost elements of this subarray. You need to find the first subarray whose sum is equal to the target.</span></p>\n<p><span >Note: If no such array is possible then, return [-1].</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 7, 5], target = 12\n<strong>Output: </strong>[2, 4]<strong>\nExplanation: </strong>The sum of elements from 2nd to 4th position is 12.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 15\n<strong>Output: </strong>[1, 5]<strong>\nExplanation: </strong>The sum of elements from 1st to 5th position is 15.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [5, 3, 4], target = 2\n<strong>Output: </strong>[-1]<strong>\nExplanation: </strong>There is no subarray with sum 2.</span></pre>\n<p><span ><strong>Constraints:<br /></strong>1 &lt;= arr.size()&lt;= 10<sup>6<br /></sup>0 &lt;= arr[i] &lt;= 10<sup>3</sup></span><br /><span >0 &lt;=&nbsp;</span><span >target</span><span > &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use a sliding window approach to maintain a current sum of the subarray. Adjust the window's start index when the sum exceeds the target.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            }
        ],
        "companies": [
            "amazon",
            "facebook",
            "google",
            "visa"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find a continuous sub-array which adds up to a given number.\n    vector<int> subarraySum(vector<int> &arr, int target) {\n        int s = 0, e = 0;\n        vector<int> res;\n\n        int curr = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            curr += arr[i];\n\n            // If current sum becomes more or equal,\n            // set end and try adjusting start\n            if (curr >= target) {\n                e = i;\n\n                // While current sum is greater,\n                // remove starting elements of current window\n                while (curr > target && s < e) {\n                    curr -= arr[s];\n                    ++s;\n                }\n\n                // If we found a subraay\n                if (curr == target) {\n                    res.push_back(s + 1);\n                    res.push_back(e + 1);\n                    return res;\n                }\n            }\n        }\n        // If no subarray is found\n        return {-1};\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to find a continuous sub-array which adds up to a given number\n    static ArrayList<Integer> subarraySum(int[] arr, int target) {\n        int s = 0, e = 0;\n        int curr = 0;\n        ArrayList<Integer> res = new ArrayList<>();\n\n        for (int i = 0; i < arr.length; i++) {\n            curr += arr[i];\n\n            // If current sum becomes more or equal,\n            // set end and try adjusting start\n            if (curr >= target) {\n                e = i;\n\n                // While current sum is greater,\n                // remove starting elements of current window\n                while (curr > target && s < e) {\n                    curr -= arr[s];\n                    s++;\n                }\n\n                // If we found a subarray\n                if (curr == target) {\n                    res.add(s + 1); // Convert to 1-based indexing\n                    res.add(e + 1);\n                    return res;\n                }\n            }\n        }\n        // If no subarray is found\n        res.add(-1);\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to find a continuous sub-array which adds up to a given number\n    def subarraySum(self, arr, target):\n        s = 0\n        curr = 0\n\n        for e in range(len(arr)):\n            curr += arr[e]\n\n            # Adjust the start of the window if the current sum exceeds the target\n            while curr > target and s < e:\n                curr -= arr[s]\n                s += 1\n\n            # If the current sum equals the target, return the 1-based indices\n            if curr == target:\n                return [s + 1, e + 1]\n\n        # If no subarray is found\n        return [-1]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Function to find a continuous sub-array which adds up to a given number.\n    public List<int> SubarraySum(int[] arr, int target) {\n        int s = 0, e = 0;\n        List<int> res = new List<int>();\n        int curr = 0;\n\n        for (int i = 0; i < arr.Length; i++) {\n            curr += arr[i];\n\n            // If current sum becomes more or equal,\n            // set end and try adjusting start\n            if (curr >= target) {\n                e = i;\n\n                // While current sum is greater,\n                // remove starting elements of current window\n                while (curr > target && s < e) {\n                    curr -= arr[s];\n                    ++s;\n                }\n\n                // If we found a subarray\n                if (curr == target) {\n                    res.Add(s + 1);\n                    res.Add(e + 1);\n                    return res;\n                }\n            }\n        }\n        // If no subarray is found\n        res.Add(-1);\n        return res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find a continuous sub-array which adds up to a given number\n    subarraySum(arr, target) {\n        let s = 0;\n        let curr = 0;\n\n        for (let e = 0; e < arr.length; e++) {\n            curr += arr[e];\n\n            // Adjust the start of the window if the current sum exceeds the target\n            while (curr > target && s < e) {\n                curr -= arr[s];\n                s++;\n            }\n\n            // If the current sum equals the target, return the 1-based indices\n            if (curr === target) {\n                return [ s + 1, e + 1 ];\n            }\n        }\n\n        // If no subarray is found\n        return [ -1 ];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}