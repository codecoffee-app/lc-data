{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704992,
            "title": "Subarray with least average",
            "titleSlug": "subarray-with-least-average5031",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of size <strong>n</strong>. Find the subarray of size <strong>k</strong> that has the least average among all the subarrays of size of <strong>k</strong>. R</span><span style=\"font-size: 18px;\">eturn the index of the first element of the subarray(</span><strong style=\"font-size: 18px;\">1-based indexing</strong><span style=\"font-size: 18px;\">) of size <strong>k</strong> that has least average.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>nums = [30, 20, 10], k = 1\n<strong>Output: </strong>3\n<strong>Explanation: </strong>Subarrays of length 1 are {30}, {20}, {10}. {10} has the least average equal to 10.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>nums = [30, 20, 10], k = 2\n<strong>Output: </strong>2\n<strong>Explanation: </strong>Subarrays of length 2 are {30, 20}, {20, 10}. {20, 10} has the least average equal to (20 + 10)/2 = 15.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br /><strong>Expected Space Compelxity:&nbsp;</strong>O(1)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= k &lt;= n &lt;= 100000<br />1 &lt;= elements of array &lt;= 1000000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Optimize your solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\nclass Solution{\n\tpublic:\n\t// Function to find the starting index of subarray with least average\n\tint least_average(vector<int>nums, int k)\n\t{\n\t\t// Initialize the sum variable\n\t\tlong long int sum = 0;\n\t\t// Get the size of the input array\n\t\tint n = nums.size();\n\t\t// Calculate the sum of the first k elements\n\t\tfor(int i = 0; i < k; i++){\n\t\t\t// Take the current element as a long long int\n\t\t\tlong long int x = nums[i];\n\t\t\t// Add it to the sum\n\t\t\tsum += x;\n\t\t}\n\t\t// Set the initial result as the sum\n\t\tlong long int res = sum;\n\t\t// Set the initial index as 1\n\t\tint id = 1;\n\t\t// Calculate the sum for the remaining subarrays\n\t\tfor(int i = k; i < n; i++){\n\t\t\t// Take the current element as a long long int\n\t\t\tlong long int x = nums[i];\n\t\t\t// Update the sum by subtracting the first element of the previous subarray\n\t\t\t// and adding the current element\n\t\t\tsum += (x - nums[i-k]);\n\t\t\t// If the updated sum is smaller than the previous result,\n\t\t\t// update the result and the index\n\t\t\tif(sum < res){\n\t\t\t\tres = sum;\n\t\t\t\tid = i-k+2;\n\t\t\t}\n\t\t}\n\t\t// Return the starting index of the subarray with the least average\n\t\treturn id;\n\t}  \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    public int least_average(List<int> nums, int k) {\n        // Check if the array is empty\n        if (nums.Count == 0) {\n            return -1; // Return -1 if the array is empty\n        }\n\n        // Initialize the sum variable\n        long sum = 0;\n        // Get the size of the input array\n        int n = nums.Count;\n        // Calculate the sum of the first k elements\n        for (int i = 0; i < k; i++) {\n            // Take the current element as a long int\n            long x = nums[i];\n            // Add it to the sum\n            sum += x;\n        }\n        // Set the initial result as the sum\n        long res = sum;\n        // Set the initial index as 1\n        int id = 1;\n        // Calculate the sum for the remaining subarrays\n        for (int i = k; i < n; i++) {\n            // Take the current element as a long int\n            long x = nums[i];\n            // Update the sum by subtracting the first element of the previous subarray\n            // and adding the current element\n            sum += (x - nums[i - k]);\n            // If the updated sum is smaller than the previous result,\n            // update the result and the index\n            if (sum < res) {\n                res = sum;\n                id = i - k + 2;\n            }\n        }\n        // Return the starting index of the subarray with the least average\n        return id;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}