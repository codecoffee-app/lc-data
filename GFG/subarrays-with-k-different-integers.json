{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712195,
            "title": "Subarrays with K Distinct Integers",
            "titleSlug": "subarrays-with-k-different-integers",
            "content": "<p><span >You are given an array <strong>arr[]</strong> of positive integers and an integer <strong>k</strong>, find the number of <strong>subarrays</strong> in <strong>arr[] </strong>where the count of distinct integers is exactly <strong>k.</strong></span></p>\n<p><span ><strong>Note:</strong> A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong style=\"background-color: #eeeeee;\">Input: </strong><span style=\"background-color: #eeeeee;\">arr[] = [1, 2, 2, 3], k = 2</span><br style=\"background-color: #eeeeee;\" /><strong style=\"background-color: #eeeeee;\">Output:</strong><span style=\"background-color: #eeeeee;\"> 4</span><br style=\"background-color: #eeeeee;\" /><strong style=\"background-color: #eeeeee;\">Explanation:</strong><span style=\"background-color: #eeeeee;\"> Subarrays formed with exactly 2 different integers are: arr[0..1], arr[0..2], arr[1..3] and arr[2..3].</span></span></pre>\n<pre><span ><strong style=\"background-color: #eeeeee;\">Input: </strong><span style=\"background-color: #eeeeee;\">arr[] = [3, 1, 2, 2, 3], k = 3</span></span><br style=\"font-size: 18px; background-color: #eeeeee;\" /><span ><strong style=\"background-color: #eeeeee;\">Output: </strong><span style=\"background-color: #eeeeee;\">4<br /><strong>Explanation:</strong> Subarrays formed with exactly 3 distinct integers are: arr[0..2], arr[0..3], arr[0..4], arr[1..4].</span></span></pre>\n<pre><span ><strong style=\"background-color: #eeeeee;\">Input: </strong><span style=\"background-color: #eeeeee;\">arr[] = [1, 1, 1, 1], k = 2</span></span><br style=\"font-size: 18px; background-color: #eeeeee;\" /><span ><strong style=\"background-color: #eeeeee;\">Output: </strong><span style=\"background-color: #eeeeee;\">0<br /><strong>Explanation:</strong> There is no subarray having exactly 2 distinct integers.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>4</sup><br />1 &le; k &le; arr.size()<br />1&le; arr<sub>i&nbsp; </sub>&le; arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers `arr[]` and an integer `k`, find the number of contiguous subarrays in `arr[]` where the count of distinct integers is exactly `k`.",
                "constraints": [
                    "1 <= arr.size() <= 10^4",
                    "1 <= k <= arr.size()",
                    "1 <= arr[i] <= arr.size()"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 2, 3], k = 2",
                        "output": "4",
                        "explanation": "The subarrays with exactly 2 distinct integers are: [1, 2], [1, 2, 2], [2, 2, 3], and [2, 3]."
                    },
                    {
                        "input": "arr[] = [3, 1, 2, 2, 3], k = 3",
                        "output": "4",
                        "explanation": "The subarrays with exactly 3 distinct integers are: [3, 1, 2], [3, 1, 2, 2], [3, 1, 2, 2, 3], and [1, 2, 2, 3]."
                    },
                    {
                        "input": "arr[] = [1, 1, 1, 1], k = 2",
                        "output": "0",
                        "explanation": "There are no subarrays with exactly 2 distinct integers because the array only contains the integer 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Can you find a subarray with at most k elements? Then, try subtracting the number of subarrays with at most k elements and the number of subarrays with at most k-1 elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to count the number of subarrays with at most K distinct elements\n    int atMostK(vector<int> &arr, int k) {\n        int i = 0, res = 0;\n        unordered_map<int, int> count;\n        for (int j = 0; j < arr.size(); ++j) {\n            // If the element at index j is encountered for the first time, decrement K\n            if (!count[arr[j]]++)\n                k--;\n\n            // If the number of distinct elements exceeds K, move the left pointer i and\n            // increment K\n            while (k < 0) {\n                if (!--count[arr[i]])\n                    k++;\n                i++;\n            }\n            // Add the number of subarrays that can be formed with the current window\n            res += j - i + 1;\n        }\n        return res;\n    }\n\n    // Function to count the number of subarrays with exactly K distinct elements\n    int exactlyK(vector<int> &arr, int k) {\n        // Count the number of subarrays with at most K distinct elements and subtract\n        // the count of subarrays with at most (K-1) distinct elements to get the count\n        // of subarrays with exactly K distinct elements\n        return atMostK(arr, k) - atMostK(arr, k - 1);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to count the number of subarrays with at most K distinct elements\n    public int atMostK(int[] arr, int k) {\n        int i = 0, res = 0;\n        Map<Integer, Integer> count = new HashMap<>();\n        for (int j = 0; j < arr.length; ++j) {\n            // If the element at index j is encountered for the first time, decrement K\n            count.put(arr[j], count.getOrDefault(arr[j], 0) + 1);\n            if (count.get(arr[j]) == 1) k--;\n\n            // If the number of distinct elements exceeds K, move the left pointer i and\n            // increment K\n            while (k < 0) {\n                count.put(arr[i], count.get(arr[i]) - 1);\n                if (count.get(arr[i]) == 0) k++;\n                i++;\n            }\n            // Add the number of subarrays that can be formed with the current window\n            res += j - i + 1;\n        }\n        return res;\n    }\n\n    // Function to count the number of subarrays with exactly K distinct elements\n    public int exactlyK(int[] arr, int k) {\n        // Count the number of subarrays with at most K distinct elements and subtract\n        // the count of subarrays with at most (K-1) distinct elements to get the count\n        // of subarrays with exactly K distinct elements\n        return atMostK(arr, k) - atMostK(arr, k - 1);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to count the number of subarrays with at most K distinct elements\n    def atMostK(self, arr, k):\n        i = 0\n        res = 0\n        count = {}\n        for j in range(len(arr)):\n            if arr[j] not in count:\n                count[arr[j]] = 0\n            # If the element at index j is encountered for the first time, decrement K\n            if count[arr[j]] == 0:\n                k -= 1\n            count[arr[j]] += 1\n\n            # If the number of distinct elements exceeds K, move the left pointer i and increment K\n            while k < 0:\n                count[arr[i]] -= 1\n                if count[arr[i]] == 0:\n                    k += 1\n                i += 1\n\n            # Add the number of subarrays that can be formed with the current window\n            res += j - i + 1\n        return res\n\n    # Function to count the number of subarrays with exactly K distinct elements\n    def exactlyK(self, arr, k):\n        # Count the number of subarrays with at most K distinct elements and subtract the count of subarrays\n        # with at most (K-1) distinct elements to get the count of subarrays with exactly K distinct elements\n        return self.atMostK(arr, k) - self.atMostK(arr, k - 1)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to count the number of subarrays with at most K distinct elements\n    atMostK(arr, k) {\n        let i = 0, res = 0;\n        const count = new Map();\n        for (let j = 0; j < arr.length; ++j) {\n            // If the element at index j is encountered for the first time, decrement K\n            count.set(arr[j], (count.get(arr[j]) || 0) + 1);\n            if (count.get(arr[j]) === 1) k--;\n\n            // If the number of distinct elements exceeds K, move the left pointer i and\n            // increment K\n            while (k < 0) {\n                count.set(arr[i], count.get(arr[i]) - 1);\n                if (count.get(arr[i]) === 0) k++;\n                i++;\n            }\n            // Add the number of subarrays that can be formed with the current window\n            res += j - i + 1;\n        }\n        return res;\n    }\n\n    // Function to count the number of subarrays with exactly K distinct elements\n    exactlyK(arr, k) {\n        // Count the number of subarrays with at most K distinct elements and subtract\n        // the count of subarrays with at most (K-1) distinct elements to get the count\n        // of subarrays with exactly K distinct elements\n        return this.atMostK(arr, k) - this.atMostK(arr, k - 1);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}