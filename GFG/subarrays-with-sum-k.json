{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706226,
            "title": "Subarrays with sum K",
            "titleSlug": "subarrays-with-sum-k",
            "content": "<p><span >Given an unsorted array of integers, find the number of subarrays having sum exactly equal to a given number <strong>k</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong><strong> </strong>arr = [10, 2, -2, -20, 10], k = -10\n<strong>Output:</strong> 3\n<strong>Explaination:</strong> Subarrays: arr[0...3], arr[1...4], arr[3...4] have sum exactly equal to -10.</span></pre>\n<pre><span ><strong>Input:</strong> arr = [9, 4, 20, 3, 10, 5], k = 33\n<strong>Output:</strong> 2\n<strong>Explaination:</strong> Subarrays: arr[0...2], arr[2...4] have sum exactly equal to 33.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr = [1, 3, 5], k = 0<br /></span><span ><strong>Output:</strong> 0\n<strong>Explaination: </strong>No subarray with 0 sum.</span></pre>\n<p><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Constraints:</strong></p>\n<ul>\n<li><span >1 &le; arr.size() &le; 10<sup>5</sup></span></li>\n<li><span >-10<sup>3</sup> &le; arr[i] &le; 10<sup>3</sup></span></li>\n<li><span >-10<sup>7</sup>&nbsp;&le; k&nbsp;&le; 10<sup>7</sup></span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array of integers, find the number of contiguous subarrays whose elements sum up to exactly a given target value, `k`.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "-10^3 <= arr[i] <= 10^3",
                    "-10^7 <= k <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "arr = [10, 2, -2, -20, 10], k = -10",
                        "output": "3",
                        "explanation": "The subarrays [10, 2, -2, -20], [2, -2, -20, 10], and [-20, 10] sum to -10."
                    },
                    {
                        "input": "arr = [9, 4, 20, 3, 10, 5], k = 33",
                        "output": "2",
                        "explanation": "The subarrays [9, 4, 20] and [20, 3, 10] sum to 33."
                    },
                    {
                        "input": "arr = [1, 3, 5], k = 0",
                        "output": "0",
                        "explanation": "There are no subarrays that sum to 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For any index I, utilize the Prefix sum hashmap or dictionary to check the number of subarrays that satisfy the condition and end at index I.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int countSubarrays(vector<int> &arr, int k) {\n\n        // unordered_map to store prefix sums frequencies\n        unordered_map<int, int> prefixSums;\n\n        int res = 0;\n        int currSum = 0;\n\n        for (int i = 0; i < arr.size(); i++) {\n            // Add current element to sum so far.\n            currSum += arr[i];\n\n            // If currSum is equal to desired sum, then a new\n            // subarray is found. So increase count of subarrays.\n            if (currSum == k)\n                res++;\n\n            // Check if the difference exists in the prefixSums map.\n            if (prefixSums.find(currSum - k) != prefixSums.end())\n                res += prefixSums[currSum - k];\n\n            // Add currSum to the set of prefix sums.\n            prefixSums[currSum]++;\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\n// User function Template for Java\nclass Solution {\n    public int countSubarrays(int arr[], int k) {\n        // HashMap to store prefix sums frequencies\n        Map<Integer, Integer> prefixSums = new HashMap<>();\n        int res = 0;\n        int currSum = 0;\n\n        for (int i = 0; i < arr.length; i++) {\n            // Add current element to sum so far.\n            currSum += arr[i];\n\n            // If currSum is equal to desired sum, then a new subarray is found.\n            if (currSum == k) res++;\n\n            // Check if the difference exists in the prefixSums map.\n            if (prefixSums.containsKey(currSum - k)) res += prefixSums.get(currSum - k);\n\n            // Add currSum to the set of prefix sums.\n            prefixSums.put(currSum, prefixSums.getOrDefault(currSum, 0) + 1);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countSubarrays(self, arr, k):\n        # Dictionary to store prefix sums frequencies\n        prefixSums = {}\n        res = 0\n        currSum = 0\n\n        for val in arr:\n            # Add current element to sum so far\n            currSum += val\n\n            # If currSum is equal to desired sum, then a new subarray is found\n            if currSum == k:\n                res += 1\n\n            # Check if the difference exists in the prefixSums dictionary\n            if currSum - k in prefixSums:\n                res += prefixSums[currSum - k]\n\n            # Add currSum to the dictionary of prefix sums\n            prefixSums[currSum] = prefixSums.get(currSum, 0) + 1\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number}\n */\n\nclass Solution {\n    countSubarrays(arr, k) {\n        // Map to store prefix sums frequencies\n        const prefixSums = new Map();\n        let res = 0;\n        let currSum = 0;\n\n        for (let val of arr) {\n            // Add current element to sum so far\n            currSum += val;\n\n            // If currSum is equal to desired sum, then a new subarray is found\n            if (currSum === k) res++;\n\n            // Check if the difference exists in the prefixSums map\n            if (prefixSums.has(currSum - k)) res += prefixSums.get(currSum - k);\n\n            // Add currSum to the map of prefix sums\n            prefixSums.set(currSum, (prefixSums.get(currSum) || 0) + 1);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}