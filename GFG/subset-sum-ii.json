{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712209,
            "title": "Subset II",
            "titleSlug": "subset-sum-ii",
            "content": "<p><span style=\"font-size: 18px;\">You are given an integer array <strong>nums</strong> that may contain duplicates. Your task is to return all possible subsets. Return only unique subsets and they can be in any order.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note: The individual subsets should be sorted.</span></strong></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong> </span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> \nnums = [1,2,2] \n<strong>Output:</strong> \n[[],[1],[1,2],[1,2,2],[2],[2,2]]\n<strong>Explanation:</strong> \nWe can have subsets ranging from length 0 to 3. which are listed above. Also the subset [1,2] appears twice but is printed only once as we require only unique subsets.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Complete the function vector&gt; printUniqueSubset(), which takes &nbsp;a vector nums and return a vector of vector consisting of all unique subsets.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(2<sup>N</sup>).<br /><strong>Expected Auxiliary Space:</strong> O(2<sup>N</sup>).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= nums.length &lt;= 10<br />-10 &lt;= nums[i] &lt;= 10</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `nums` that may contain duplicate elements, the task is to generate all possible unique subsets. The order of the subsets in the output doesn't matter, but each individual subset must be sorted in ascending order.",
                "constraints": [
                    "1 <= nums.length <= 10",
                    "-10 <= nums[i] <= 10"
                ],
                "testcases": [
                    {
                        "input": "[1,2,2]",
                        "output": "[[],[1],[1,2],[1,2,2],[2],[2,2]]",
                        "explanation": "The input array [1, 2, 2] generates the following unique subsets:\n- The empty set [].\n- Subsets containing only a single element: [1] and [2].\n- Subsets with two elements: [1, 2] and [2, 2].\n- The subset with all three elements: [1, 2, 2]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  //recursive function to generate unique subsets\n  void func(int ind, vector<int>& nums, vector<int>& curr, vector<vector<int>>& answer){\n        //base case: if all elements have been considered, add current subset to the answer\n        if(ind == nums.size()){\n            answer.push_back(curr);\n            return;\n        }\n\n        //include current element in the subset\n        curr.push_back(nums[ind]);\n        //recursive call to consider next element\n        func(ind+1, nums, curr, answer);\n        //remove current element to backtrack\n        curr.pop_back();\n\n        //skip duplicate elements\n        while(ind + 1 < nums.size() && nums[ind] == nums[ind+1]){\n            ind += 1;\n        }\n        //recursive call to skip duplicate element\n        func(ind + 1, nums, curr, answer);\n    }\n    public:\n    //function to generate unique subsets\n    vector<vector<int>> printUniqueSubsets(vector<int>& nums) {\n        //sort the input array in non-decreasing order\n        sort(nums.begin(), nums.end());\n        //vector to store the unique subsets\n        vector<vector<int>> answer;\n        //vector to store the current subset\n        vector<int> curr;\n        //call the recursive function\n        func(0, nums, curr, answer);\n        //return the unique subsets\n        return answer;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    public static ArrayList<ArrayList<Integer>> printUniqueSubsets(int[] nums) {\n        // Sorting the array to handle duplicates\n        Arrays.sort(nums);\n        // ArrayList to store all unique subsets\n        ArrayList<ArrayList<Integer>> all = new ArrayList<>();\n        // Calling the solve function to find unique subsets\n        solve(all, new ArrayList<>(), nums, 0);\n        // Returning the list of unique subsets\n        return all;\n    }\n    // Recursive function to find unique subsets\n    static void solve(ArrayList<ArrayList<Integer>> all, ArrayList<Integer> cur,\n                      int a[], int start) {\n        // Adding the current subset to the result list\n        all.add(new ArrayList<Integer>(cur));\n        // Iterating through the array from the start index\n        for (int i = start; i < a.length; i++) {\n            // Skipping duplicate elements to avoid duplicates in subsets\n            if (i > start && a[i] == a[i - 1]) continue;\n            // Adding the current element to the current subset\n            cur.add(a[i]);\n            // Recursively calling the solve function for next index\n            solve(all, cur, a, i + 1);\n            // Removing the current element to backtrack and find other subsets\n            cur.remove(cur.size() - 1);\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def printUniqueSubset(self, a):\n\n        def dfs(idx, path):\n            ans.append(path)  # Add the current subset to the list of answers\n            for i in range(idx, n):\n                if i > idx and a[i] == a[\n                        i -\n                        1]:  # Skip duplicates by checking if current element is the same as the previous one\n                    continue\n                dfs(\n                    i + 1, path + [a[i]]\n                )  # Recursive call to find subsets starting from the next index\n\n        a.sort()  # Sort the input array to handle duplicates\n        n = len(a)  # Length of the input array\n        ans = []  # List to store the unique subsets\n\n        dfs(0, [])  # Initial call to the recursive function with an empty path\n        return ans  # Return the list of unique subsets\n",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}