{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706123,
            "title": "Subset Sum Problem",
            "titleSlug": "subset-sum-problem-1611555638",
            "content": "<p><span >Given an array of positive integers <strong>arr[]</strong> and a value <strong>sum</strong>, determine if there is a subset of <strong>arr[]</strong> with sum equal to given <strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">sum</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.&nbsp;</span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: arr[] = [3, 34, 4, 12, 5, 2], sum = 9<br /><strong>Output:</strong> true&nbsp;\n<strong>Explanation</strong>: Here there exists a subset with target sum = 9, 4+3+2 = 9.\n</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [3, 34, 4, 12, 5, 2], sum = 30\n<strong>Output:</strong> false\n<strong>Explanation</strong>: There is no subset with target sum 30.</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [1, 2, 3], sum = 6\n<strong>Output:</strong> true<br /><strong>Explanation</strong>: The entire array can be taken as a subset, giving 1 + 2 + 3 = 6.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 200</span><br /><span >1&lt;= arr[i] &lt;= 200<br />1&lt;= sum &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers `arr[]` and a target value `sum`, determine if there exists a subset of `arr[]` whose elements sum up to the given `sum`.",
                "constraints": [
                    "1 <= arr.length <= 200",
                    "1 <= arr[i] <= 200",
                    "1 <= sum <= 10000"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [3, 34, 4, 12, 5, 2], sum = 9",
                        "output": "true",
                        "explanation": "The subset [4, 3, 2] sums up to 9."
                    },
                    {
                        "input": "arr[] = [3, 34, 4, 12, 5, 2], sum = 30",
                        "output": "false",
                        "explanation": "There is no subset of the given array that sums up to 30."
                    },
                    {
                        "input": "arr[] = [1, 2, 3], sum = 6",
                        "output": "true",
                        "explanation": "The entire array [1, 2, 3] forms a subset that sums up to 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Check if a subset of the array sums up to the given value using dynamic programming.</span></p>",
            "<p><span >Following is the recurrence relation:</span></p>\n<p><span >If <strong>isSubsetSum(i, arr, sum)</strong> denotes whether there exists a subset of first <strong>i<sup>th</sup></strong> elements of the array then:<br />&nbsp;<strong>isSubsetSum(i,arr,sum)</strong> = <strong>isSubsetSum(i-1,arr,sum)</strong> || <strong>isSubsetSum(i-1,arr,sum-arr[i-1])</strong> .</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool isSubsetSum(vector<int> arr, int sum) {\n        int n = arr.size();\n        vector<bool> prev(sum + 1, false), curr(sum + 1);\n\n        // Mark prev[0] = true as it is true\n        // to make sum = 0 using 0 elements\n        prev[0] = true;\n\n        // Fill the subset table in\n        // bottom up manner\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= sum; j++) {\n                if (j < arr[i - 1])\n                    curr[j] = prev[j];\n                else\n                    curr[j] = (prev[j] || prev[j - arr[i - 1]]);\n            }\n            prev = curr;\n        }\n        return prev[sum];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    static boolean isSubsetSum(int[] arr, int sum) {\n        int n = arr.length;\n        boolean[] prev = new boolean[sum + 1];\n        boolean[] curr = new boolean[sum + 1];\n\n        // Mark prev[0] = true as it is true to\n        // make sum = 0 using 0 elements\n        prev[0] = true;\n\n        // Fill the subset table in bottom-up\n        // manner\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= sum; j++) {\n                if (j < arr[i - 1]) {\n                    curr[j] = prev[j];\n                } else {\n                    curr[j] = prev[j] || prev[j - arr[i - 1]];\n                }\n            }\n\n            // Update prev to be the current row\n            System.arraycopy(curr, 0, prev, 0, sum + 1);\n        }\n        return prev[sum];\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def isSubsetSum(self, arr, sum):\n        # The value of subset[i][j] will be True if\n        # there is a subset of arr[0..j-1] with sum\n        # equal to i\n        N = len(arr)\n        subset = [[False] * (sum + 1) for _ in range(N + 1)]\n\n        # If sum is 0, then answer is True\n        for i in range(N + 1):\n            subset[i][0] = True\n\n        # If sum is not 0 and set is empty,\n        # then answer is False\n        for i in range(1, sum + 1):\n            subset[0][i] = False\n\n        # Fill the subset table in bottom-up manner\n        for i in range(1, N + 1):\n            for j in range(1, sum + 1):\n                if j < arr[i - 1]:\n                    subset[i][j] = subset[i - 1][j]\n                if j >= arr[i - 1]:\n                    subset[i][j] = subset[i - 1][j] or subset[i -\n                                                              1][j -\n                                                                 arr[i - 1]]\n\n        return subset[N][sum]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    isSubsetSum(arr, sum) {\n        const n = arr.length;\n        const prev = new Array(sum + 1).fill(false);\n        const curr = new Array(sum + 1).fill(false);\n\n        // Base case: sum 0 can always\n        // be achieved\n        prev[0] = true;\n\n        // Fill the dp table in a\n        // bottom-up manner\n        for (let i = 1; i <= n; i++) {\n            for (let j = 0; j <= sum; j++) {\n                if (j < arr[i - 1]) {\n                    curr[j] = prev[j];\n                } else {\n                    curr[j] = prev[j] || prev[j - arr[i - 1]];\n                }\n            }\n\n            // Update prev to be the current row\n            for (let j = 0; j <= sum; j++) {\n                prev[j] = curr[j];\n            }\n        }\n        return prev[sum];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}