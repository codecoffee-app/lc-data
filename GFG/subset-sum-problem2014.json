{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704573,
            "title": "Partition Equal Subset Sum",
            "titleSlug": "subset-sum-problem2014",
            "content": "<p><span >Given an array <strong>arr[], </strong>determine if it can be partitioned into two subsets such that the sum of elements in both parts is the <strong>same.</strong></span></p>\n<p><span ><strong>Note:</strong>&nbsp;Each element must be in exactly one subset.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr = [1, 5, 11, 5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The two parts are [1, 5, 5] and [11].\n</span></pre>\n<pre><span ><strong>Input:</strong> arr = [1, 3, 5]\n<strong>Output:</strong> false\n<strong>Explanation: </strong>This array can never be partitioned into two such parts.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size &le; 100<br />1 &le; arr[i] &le; 200</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr`, determine if it can be partitioned into two subsets such that the sum of elements in both subsets is equal. Each element must belong to exactly one subset.",
                "constraints": [
                    "1 <= arr.size <= 100",
                    "1 <= arr[i] <= 200"
                ],
                "testcases": [
                    {
                        "input": "[1, 5, 11, 5]",
                        "output": "true",
                        "explanation": "The array can be partitioned into [1, 5, 5] and [11], where the sum of elements in each subset is 11."
                    },
                    {
                        "input": "[1, 3, 5]",
                        "output": "false",
                        "explanation": "It is impossible to partition the array into two subsets with equal sums."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The problem can be solved recursively but an optimal solution will be to use bottom-up dynamic programming approach.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "subset",
                "slug": "subset"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "adobe",
            "drishti-soft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool equalPartition(vector<int>& arr) {\n\n        // Calculate sum of the elements in array\n        int sum = accumulate(arr.begin(), arr.end(), 0);\n\n        // If sum is odd, there cannot be two\n        // subsets with equal sum\n        if (sum % 2 != 0)\n            return false;\n\n        sum = sum / 2;\n\n        int n = arr.size();\n        vector<bool> prev(sum + 1, false), curr(sum + 1);\n\n        // Mark prev[0] = true as it is true\n        // to make sum = 0 using 0 elements\n        prev[0] = true;\n\n        // Fill the subset table in\n        // bottom up manner\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= sum; j++) {\n                if (j < arr[i - 1])\n                    curr[j] = prev[j];\n                else\n                    curr[j] = (prev[j] || prev[j - arr[i - 1]]);\n            }\n            prev = curr;\n        }\n        return prev[sum];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static boolean equalPartition(int[] arr) {\n\n        // Calculate sum of the elements in array\n        int sum = 0;\n        for (int num : arr) {\n            sum += num;\n        }\n\n        // If sum is odd, there cannot be two\n        // subsets with equal sum\n        if (sum % 2 != 0) return false;\n\n        sum = sum / 2;\n\n        int n = arr.length;\n        boolean[] prev = new boolean[sum + 1];\n        boolean[] curr = new boolean[sum + 1];\n\n        // Mark prev[0] = true as it is true\n        // to make sum = 0 using 0 elements\n        prev[0] = true;\n\n        // Fill the subset table in\n        // bottom-up manner\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= sum; j++) {\n                if (j < arr[i - 1])\n                    curr[j] = prev[j];\n                else\n                    curr[j] = (prev[j] || prev[j - arr[i - 1]]);\n            }\n\n            // copy curr into prev\n            for (int j = 0; j <= sum; j++) {\n                prev[j] = curr[j];\n            }\n        }\n        return prev[sum];\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python3\nclass Solution:\n\n    def equalPartition(self, arr):\n\n        # Calculate sum of the elements in array\n        arrSum = sum(arr)\n\n        # If sum is odd, there cannot be two\n        # subsets with equal sum\n        if arrSum % 2 != 0:\n            return False\n\n        arrSum = arrSum // 2\n\n        n = len(arr)\n        prev = [False] * (arrSum + 1)\n        curr = [False] * (arrSum + 1)\n\n        # Mark prev[0] = true as it is true\n        # to make sum = 0 using 0 elements\n        prev[0] = True\n\n        # Fill the subset table in\n        # bottom-up manner\n        for i in range(1, n + 1):\n            for j in range(arrSum + 1):\n                if j < arr[i - 1]:\n                    curr[j] = prev[j]\n                else:\n                    curr[j] = (prev[j] or prev[j - arr[i - 1]])\n\n            prev = curr.copy()\n\n        return prev[arrSum]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/*\nFunction to check if given array can be partitioned into two subsets of equal sum.\n*/\n\nclass Solution {\n    equalPartition(arr) {\n\n        // Calculate sum of the elements in array\n        let sum = arr.reduce((a, b) => a + b, 0);\n\n        // If sum is odd, there cannot be two\n        // subsets with equal sum\n        if (sum % 2 !== 0) return false;\n\n        sum = sum / 2;\n\n        let n = arr.length;\n        let prev = Array(sum + 1).fill(false);\n        let curr = Array(sum + 1).fill(false);\n\n        // Mark prev[0] = true as it is true\n        // to make sum = 0 using 0 elements\n        prev[0] = true;\n\n        // Fill the subset table in\n        // bottom-up manner\n        for (let i = 1; i <= n; i++) {\n            for (let j = 0; j <= sum; j++) {\n                if (j < arr[i - 1]) {\n                    curr[j] = prev[j];\n                } else {\n                    curr[j] = (prev[j] || prev[j - arr[i - 1]]);\n                }\n            }\n            prev = [...curr ];\n        }\n\n        return prev[sum];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}