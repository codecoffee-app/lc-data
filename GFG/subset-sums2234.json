{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704723,
            "title": "Subset Sums",
            "titleSlug": "subset-sums2234",
            "content": "<div class=\"entry-content\">\n<p><span >Given a array <strong><code>arr</code> </strong>of integers, return the sums of all subsets in the list.&nbsp; Return the sums in any order.</span></p>\n<p><span ><strong>Examples:<br /></strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 3]\n<strong>Output: </strong>[0, 2, 3, 5]\n<strong>Explanation: </strong>When no elements are taken then Sum = 0. When only 2 is taken then Sum = 2. When only 3 is taken then Sum = 3. When elements 2 and 3 are taken then Sum = 2+3 = 5.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 1]\n<strong>Output: </strong>[0, 1, 1, 2, 2, 3, 3, 4]<br /><strong>Explanation: </strong>The possible subset sums are 0 (no elements), 1 (either of the 1's), 2 (the element 2), and their combinations.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [5, 6, 7]\n<strong>Output: </strong>[0, 5, 6, 7, 11, 12, 13, 18]\n<strong>Explanation: </strong>The possible subset sums are 0 (no elements), 5, 6, 7, and their combinations.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 15<br />0 &le; arr[i] &le; 10<sup>4</sup></span></p>\n</div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of integers, return a list containing the sums of all possible subsets. The order of sums in the returned list does not matter.",
                "constraints": [
                    "1 <= arr.size() <= 15",
                    "0 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[2, 3]",
                        "output": "[0, 2, 3, 5]",
                        "explanation": "The subsets are {}, {2}, {3}, and {2, 3}. Their sums are 0, 2, 3, and 5 respectively."
                    },
                    {
                        "input": "[1, 2, 1]",
                        "output": "[0, 1, 1, 2, 2, 3, 3, 4]",
                        "explanation": "The subsets are {}, {1}, {1}, {2}, {1, 1}, {1, 2}, {1, 2}, {1, 1, 2}. Their sums are 0, 1, 1, 2, 2, 3, 3, and 4 respectively."
                    },
                    {
                        "input": "[5, 6, 7]",
                        "output": "[0, 5, 6, 7, 11, 12, 13, 18]",
                        "explanation": "The subsets are {}, {5}, {6}, {7}, {5, 6}, {5, 7}, {6, 7}, {5, 6, 7}. Their sums are 0, 5, 6, 7, 11, 12, 13, and 18 respectively."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to write a recursive approach.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Position this line where user code will be pasted.\nclass Solution {\n  public:\n    // Helper function to recursively calculate subset sums\n    void calculateSubsetSums(vector<int>& arr, int index, int currentSum,\n                             vector<int>& result) {\n        // Base case: if index exceeds array bounds, store the current sum\n        if (index == arr.size()) {\n            result.push_back(currentSum);\n            return;\n        }\n\n        // Include current element in subset and recurse\n        calculateSubsetSums(arr, index + 1, currentSum + arr[index], result);\n\n        // Exclude current element from subset and recurse\n        calculateSubsetSums(arr, index + 1, currentSum, result);\n    }\n\n    vector<int> subsetSums(vector<int>& arr) {\n        vector<int> subsetSumsResult;\n        calculateSubsetSums(arr, 0, 0,\n                            subsetSumsResult); // Start from index 0 with sum 0\n        return subsetSumsResult;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\nclass Solution {\n    // Helper function to recursively calculate subset sums\n    private void subsetSumsHelper(int[] arr, int index, ArrayList<Integer> result,\n                                  int currentSum) {\n        // Base case: if index exceeds array bounds, store the current sum\n        if (index == arr.length) {\n            result.add(currentSum);\n            return;\n        }\n\n        // Include current element in subset and recurse\n        subsetSumsHelper(arr, index + 1, result, currentSum + arr[index]);\n\n        // Exclude current element from subset and recurse\n        subsetSumsHelper(arr, index + 1, result, currentSum);\n    }\n\n    public ArrayList<Integer> subsetSums(int[] arr) {\n        ArrayList<Integer> result = new ArrayList<>();\n        // Start recursive calculation from index 0 with initial sum 0\n        subsetSumsHelper(arr, 0, result, 0);\n        Collections.sort(result); // Sort the result in ascending order\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Helper function to calculate subset sums recursively\n    def subsetSumsHelper(self, arr, index, currentSum, result):\n        # Base case: If we've considered all elements, add the current sum to result\n        if index == len(arr):\n            result.append(currentSum)\n            return\n\n        # Include current element in subset and recurse\n        self.subsetSumsHelper(arr, index + 1, currentSum + arr[index], result)\n\n        # Exclude current element from subset and recurse\n        self.subsetSumsHelper(arr, index + 1, currentSum, result)\n\n    # Main function to return the list of subset sums\n    def subsetSums(self, arr):\n        result = []\n        self.subsetSumsHelper(\n            arr, 0, 0, result)  # Start recursion from index 0 with sum 0\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    // Helper function to recursively calculate subset sums\n    private void subsetSumsHelper(int[] arr, int index, int currentSum,\n                                  List<int> result) {\n        // Base case: If we've processed all elements, add the current sum to the result\n        // list\n        if (index == arr.Length) {\n            result.Add(currentSum);\n            return;\n        }\n\n        // Include the current element in the subset and recurse\n        subsetSumsHelper(arr, index + 1, currentSum + arr[index], result);\n\n        // Exclude the current element from the subset and recurse\n        subsetSumsHelper(arr, index + 1, currentSum, result);\n    }\n\n    // Main function to return the list of subset sums\n    public List<int> subsetSums(int[] arr) {\n        List<int> result = new List<int>();\n        subsetSumsHelper(arr, 0, 0, result); // Start recursion with index 0 and sum 0\n        result.Sort();                       // Sort the result list\n        return result;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @return {number[]}\n */\n\nclass Solution {\n    subsetSums(arr) {\n        let subsetSumsList = [];\n\n        // Helper function to calculate subset sums recursively\n        const findSubsetSums =\n            (arr, currentIndex, lastIndex, subsetSumsList, currentSum = 0) => {\n                // If all elements are processed, add the current sum to the list\n                if (currentIndex > lastIndex) {\n                    subsetSumsList.push(currentSum);\n                    return;\n                }\n\n                // Include arr[currentIndex] in the subset and recurse\n                findSubsetSums(arr, currentIndex + 1, lastIndex, subsetSumsList,\n                               currentSum + arr[currentIndex]);\n\n                // Exclude arr[currentIndex] from the subset and recurse\n                findSubsetSums(arr, currentIndex + 1, lastIndex, subsetSumsList,\n                               currentSum);\n            };\n\n        // Start recursion with index 0 and sum 0\n        findSubsetSums(arr, 0, arr.length - 1, subsetSumsList);\n\n        // Sort the result in ascending order\n        subsetSumsList.sort((a, b) => a - b);\n\n        // Return the subset sums\n        return subsetSumsList;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}