{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703325,
            "title": "Subset with no pair sum divisible by K",
            "titleSlug": "subset-with-no-pair-sum-divisible-by-k1105",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[] </strong>of integers. Your task is to find the maximum size of a subset such that the sum of each pair of this subset is not divisible by <strong>k</strong>.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [3, 7, 2, 9, 1] , k = 3\n<strong>Output : </strong>3\n<strong>Explanation:</strong>\nMaximum size subset whose each pair sum\nis not divisible by K is [3, 7, 1] because,\n3+7 = 10,   \n3+1 = 4,   \n7+1 = 8 \nThese all are not divisible by 3.\nIt is not possible to get a subset of size\nbigger than 3 with the above-mentioned property.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input : </strong>arr[] = [3, 17, 12, 9, 11, 15] , k = 5\n<strong>Output : </strong>4 </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n+k)<br /><strong>Expected Auxiliary Space:</strong> O(k)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= arr.size(), k &lt;=10<sup>6</sup><br />1&lt;= arr[] &lt;=10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]`, determine the maximum size of a subset where the sum of any two elements within the subset is not divisible by `k`.",
                "constraints": [
                    "1 <= arr.size(), k <= 10^6",
                    "1 <= arr[i] <= 10^6 for all elements in arr[]"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [3, 7, 2, 9, 1] , k = 3",
                        "output": "3",
                        "explanation": "The subset [3, 7, 1] satisfies the condition. 3+7 = 10, 3+1 = 4, 7+1 = 8. None of these sums are divisible by 3. No subset of size 4 or greater can satisfy the given condition."
                    },
                    {
                        "input": "arr[] = [3, 17, 12, 9, 11, 15] , k = 5",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a frequency array to track how often each remainder appears when elements are divided by k, then construct the largest subset by ensuring no two elements in the subset have remainders that sum to k.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the maximum size of a subset with no pair sum divisible by K\n    int subsetPairNotDivisibleByK(vector<int>& arr, int k) {\n        // Array to store frequency of modulo values\n        vector<int> f(k, 0); // Initialize the frequency array with zeros\n        int n = arr.size();  // Get the size of the input array\n\n        // Fill frequency array with values modulo k\n        for (int i = 0; i < n; i++) {\n            f[arr[i] % k]++;\n        }\n\n        // If k is even, then update f[k/2]\n        if (k % 2 == 0) {\n            f[k / 2] = min(f[k / 2], 1);\n        }\n\n        // Initialize result with minimum of 1 or count of numbers giving remainder 0\n        int res = min(f[0], 1);\n\n        // Process all elements from 1 to k/2 and choose maximum of count of numbers\n        // giving remainder i or k-i\n        for (int i = 1; i <= k / 2; i++) {\n            res += max(f[i], f[k - i]);\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n\n    // Function to find the maximum size of a subset with no pair sum divisible by K\n    static int subsetPairNotDivisibleByK(int arr[], int k) {\n        // Array to store frequency of modulo values\n        int[] f = new int[k];\n        int n = arr.length; // Get the size of the array\n\n        // Fill frequency array with values modulo k\n        for (int i = 0; i < n; i++) {\n            f[arr[i] % k]++;\n        }\n\n        // If k is even, we can include at most one element with remainder k/2\n        if (k % 2 == 0) {\n            f[k / 2] = Math.min(f[k / 2], 1);\n        }\n\n        // Initialize result with minimum of 1 or count of numbers giving remainder 0\n        int res = Math.min(f[0], 1);\n\n        // Process all elements from 1 to k/2 and choose maximum of count of numbers\n        // giving remainder i or k-i\n        for (int i = 1; i <= k / 2; i++) {\n            res += Math.max(f[i], f[k - i]);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def subsetPairNotDivisibleByK(self, arr, k):\n        # Array to store frequency of modulo values\n        freq = [0] * k\n        n = len(arr)  # Get the size of the array\n\n        # Fill frequency array with values modulo k\n        for i in range(n):\n            freq[arr[i] % k] += 1\n\n        # If k is even, we can include at most one element with remainder k//2\n        if k % 2 == 0:\n            freq[k // 2] = min(freq[k // 2], 1)\n\n        # Initialize result with minimum of 1 or count of numbers giving remainder 0\n        res = min(freq[0], 1)\n\n        # Process all elements from 1 to k//2 and choose maximum of count of numbers\n        # giving remainder i or k-i\n        for i in range(1, (k // 2) + 1):\n            res += max(freq[i], freq[k - i])\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr - The input array of integers\n * @param {number} k - The divisor for checking divisibility\n * @returns {number} - The maximum size of a subset with no pair sum divisible by k\n */\n\nclass Solution {\n    // Function to find the largest subset with no pair sum divisible by k\n    subsetPairNotDivisibleByK(arr, k) {\n        // Array to store frequency of modulo values\n        let freq = new Array(k).fill(0);\n        let n = arr.length; // Get the size of the array\n\n        // Fill frequency array with values modulo k\n        for (let i = 0; i < n; i++) {\n            freq[arr[i] % k]++;\n        }\n\n        // If k is even, we can include at most one element with remainder k/2\n        if (k % 2 === 0) {\n            freq[Math.floor(k / 2)] = Math.min(freq[Math.floor(k / 2)], 1);\n        }\n\n        // Initialize result with minimum of 1 or count of numbers giving remainder 0\n        let res = Math.min(freq[0], 1);\n\n        // Process all elements from 1 to k/2 and choose the maximum of count of numbers\n        // giving remainder i or k-i\n        for (let i = 1; i <= Math.floor(k / 2); i++) {\n            res += Math.max(freq[i], freq[k - i]);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}