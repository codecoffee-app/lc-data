{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704510,
            "title": "Subset with sum divisible by k",
            "titleSlug": "subset-with-sum-divisible-by-m2546",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[] </strong>of positive integers and a value <strong>k.</strong> Return 1 if the sum of any subset(non-empty) of the given array is divisible by k otherwise, return 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 1, 7, 5] , k=6\n<strong>Output: </strong>1\n<strong>Explanation: </strong>If we take the subset {7, 5} then sum will be 12 which is divisible by 6.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 6] , k=5\n<strong>Output: </strong>0\n<strong>Explanation: </strong>All possible subsets of the given set are {1}, {2}, {6}, {1, 2}, {2, 6}, {1, 6} and {1, 2, 6}. There is no subset whose sum is divisible by 5.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n*k)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size(), k &lt;= 1000<br /></span><span style=\"font-size: 18px;\">1 &lt;= arr[i]&lt;= 1000</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use dynamic programming. Track possible remainders of sums modulo k with a boolean array, updating it iteratively for each array element based on previously computed sums.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int DivisibleByM(vector<int>& arr, int k) {\n        int n = arr.size();\n        if (n > k)\n            return 1;\n\n        // This array will keep track of all\n        // the possible sum (after modulo m)\n        // which can be made using subsets of arr[]\n        // initialising boolean array with all false\n        bool DP[k];\n        memset(DP, false, k);\n\n        // we'll loop through all the elements of arr[]\n        for (int i = 0; i < n; i++) {\n            // anytime we encounter a sum divisible\n            // by m, we are done\n            if (DP[0])\n                return true;\n\n            // To store all the new encountered sum (after\n            // modulo). It is used to make sure that arr[i]\n            // is added only to those entries for which DP[j]\n            // was true before current iteration.\n            bool temp[k];\n            memset(temp, false, k);\n\n            // For each element of arr[], we loop through\n            // all elements of DP table from 1 to m and\n            // we add current element i. e., arr[i] to\n            // all those elements which are true in DP\n            // table\n            for (int j = 0; j < k; j++) {\n                // if an element is true in DP table\n                if (DP[j] == true) {\n                    if (DP[(j + arr[i]) % k] == false)\n\n                        // We update it in temp and update\n                        // to DP once loop of j is over\n                        temp[(j + arr[i]) % k] = true;\n                }\n            }\n\n            // Updating all the elements of temp\n            // to DP table since iteration over\n            // j is over\n            for (int j = 0; j < k; j++)\n                if (temp[j])\n                    DP[j] = true;\n\n            // Also since arr[i] is a single element\n            // subset, arr[i]%m is one of the possible\n            // sum\n            DP[arr[i] % k] = true;\n        }\n\n        return DP[0];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    public int DivisibleByM(int[] arr, int k) {\n        int n = arr.length;\n        if (n > k) return 1;\n\n        // This array will keep track of all\n        // the possible sums (after modulo k)\n        // which can be made using subsets of arr[]\n        // initializing boolean array with all false\n        boolean[] DP = new boolean[k];\n\n        // We'll loop through all the elements of arr[]\n        for (int i = 0; i < n; i++) {\n            // anytime we encounter a sum divisible by k, we are done\n            if (DP[0]) return 1;\n\n            // To store all the new encountered sums (after modulo).\n            // It is used to make sure that arr[i] is added only to\n            // those entries for which DP[j] was true before current iteration.\n            boolean[] temp = new boolean[k];\n\n            // For each element of arr[], we loop through\n            // all elements of DP table from 0 to k-1 and\n            // we add the current element, i.e., arr[i] to\n            // all those elements which are true in DP table\n            for (int j = 0; j < k; j++) {\n                // if an element is true in DP table\n                if (DP[j]) {\n                    if (!DP[(j + arr[i]) % k]) {\n                        // We update it in temp and update\n                        // DP once loop of j is over\n                        temp[(j + arr[i]) % k] = true;\n                    }\n                }\n            }\n\n            // Updating all the elements of temp\n            // to DP table since iteration over j is over\n            for (int j = 0; j < k; j++) {\n                if (temp[j]) {\n                    DP[j] = true;\n                }\n            }\n\n            // Also since arr[i] is a single element\n            // subset, arr[i] % k is one of the possible sums\n            DP[arr[i] % k] = true;\n        }\n\n        return DP[0] ? 1 : 0;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# User function Template for python3\n\n\nclass Solution:\n\n    def DivisibleByM(self, arr, k):\n        n = len(arr)\n        if n > k:\n            return 1\n\n        # This array will keep track of all the possible sums (after modulo k)\n        # which can be made using subsets of arr[]\n        # initializing boolean array with all False\n        DP = [False] * k\n\n        # We'll loop through all the elements of arr[]\n        for i in range(n):\n            # anytime we encounter a sum divisible by k, we are done\n            if DP[0]:\n                return 1\n\n            # To store all the new encountered sums (after modulo).\n            # It is used to make sure that arr[i] is added only to\n            # those entries for which DP[j] was true before the current iteration.\n            temp = [False] * k\n\n            # For each element of arr[], we loop through all elements of DP table\n            # from 0 to k-1 and we add the current element, i.e., arr[i], to\n            # all those elements which are true in DP table\n            for j in range(k):\n                # if an element is true in DP table\n                if DP[j]:\n                    if not DP[(j + arr[i]) % k]:\n                        # We update it in temp and update DP once the loop of j is over\n                        temp[(j + arr[i]) % k] = True\n\n            # Updating all the elements of temp to DP table since iteration over j is over\n            for j in range(k):\n                if temp[j]:\n                    DP[j] = True\n\n            # Also, since arr[i] is a single element subset, arr[i] % k is one of the possible sums\n            DP[arr[i] % k] = True\n\n        return 1 if DP[0] else 0\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number}\n */\n\nclass Solution {\n    DivisibleByM(arr, k) {\n        let n = arr.length;\n        if (n > k) {\n            return 1;\n        }\n\n        // This array will keep track of all the possible sums (after modulo k)\n        // which can be made using subsets of arr[]\n        // initializing boolean array with all false\n        let DP = new Array(k).fill(false);\n\n        // We'll loop through all the elements of arr[]\n        for (let i = 0; i < n; i++) {\n            // anytime we encounter a sum divisible by k, we are done\n            if (DP[0]) {\n                return 1;\n            }\n\n            // To store all the new encountered sums (after modulo).\n            // It is used to make sure that arr[i] is added only to\n            // those entries for which DP[j] was true before the current iteration.\n            let temp = new Array(k).fill(false);\n\n            // For each element of arr[], we loop through all elements of DP table\n            // from 0 to k-1 and we add the current element, i.e., arr[i], to\n            // all those elements which are true in DP table\n            for (let j = 0; j < k; j++) {\n                // if an element is true in DP table\n                if (DP[j]) {\n                    if (!DP[(j + arr[i]) % k]) {\n                        // We update it in temp and update DP once the loop of j is over\n                        temp[(j + arr[i]) % k] = true;\n                    }\n                }\n            }\n\n            // Updating all the elements of temp to DP table since iteration over j is\n            // over\n            for (let j = 0; j < k; j++) {\n                if (temp[j]) {\n                    DP[j] = true;\n                }\n            }\n\n            // Also, since arr[i] is a single element subset, arr[i] % k is one of the\n            // possible sums\n            DP[arr[i] % k] = true;\n        }\n\n        return DP[0] ? 1 : 0;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}