{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701373,
            "title": "Unique Subsets",
            "titleSlug": "subsets-1587115621",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr[]</strong><strong> </strong>of integers&nbsp;of size <strong>N</strong> that might contain <strong>duplicates</strong>, the task is to find all possible unique subsets.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong> Each subset should be sorted.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 3, arr[] = {2,1,2}\r\n<strong>Output:</strong>(),(1),(1 2),(1 2 2),(2),(2 2)</span>\r\n<span style=\"font-size:18px\"><strong>Explanation: </strong>\r\nAll possible subsets = (),(2),(1),(1,2),(2),(2,2),(2,1),(2,1,2)\r\nAfter Sorting each subset = (),(2),(1),(1,2),(2),(2,2),(1,2),(1,2,2) \r\nUnique Susbsets in Lexicographical order = (),(1),(1,2),(1,2,2),(2),(2,2)</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 4, arr[] = {1,2,3,3}\r\n<strong>Output: </strong>(),(1),(1 2),(1 2 3)\r\n(1 2 3 3),(1 3),(1 3 3),(2),(2 3)\r\n(2 3 3),(3),(3 3)</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYour task is to complete the function <strong>AllSubsets()</strong>&nbsp;which takes the array <strong>arr[]</strong> and <strong>N</strong> as input parameters and returns list of&nbsp;all possible unique subsets in lexicographical order.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(2<sup>N</sup>).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(2<sup>N</sup>&nbsp;* X), X = Length of each subset.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 12</span><br />\r\n<span style=\"font-size:18px\">1 &le; arr[i] &le; 9</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "",
            ""
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "subset",
                "slug": "subset"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "paypal"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n    public:\r\n    void AllSubsetsHelper(vector<int> A, int index, int n, vector<int> current,\r\n    vector<vector<int> > &result)\r\n    {\r\n        //if all elements are iterated then we store current vector in result.\r\n        if(index >= n){\r\n            result.push_back(current);\r\n            return;\r\n        }\r\n        \r\n        int curIndex=index+1;\r\n        //checking for duplicate elements.\r\n        while(curIndex < n && A[curIndex] == A[index]){\r\n            curIndex++;\r\n        }\r\n        \r\n        int count = curIndex - index;\r\n        \r\n        //inserting all the subsets in current.\r\n        for(int i=0;i<=count;i++)\r\n        {\r\n            for(int j=0;j<i;j++){\r\n                current.push_back(A[index]);\r\n            }\r\n            //calling function recursively for adding further subsets.\r\n            AllSubsetsHelper(A, curIndex, n, current, result);\r\n            \r\n            for(int j=0;j<i;j++)\r\n            {\r\n                //backtracking to exclude current combinations and \r\n                //include further combinations.\r\n                current.pop_back();\r\n            }\r\n        }\r\n    }\r\n    \r\n    //Function to find all possible unique subsets.\r\n    vector<vector<int> > AllSubsets(vector<int> A, int n)\r\n    {\r\n        vector<vector<int> > result;\r\n        vector<int> current;\r\n        sort(A.begin(),A.end());\r\n        AllSubsetsHelper(A, 0, n, current, result);    \r\n        \r\n        //sorting for ascending output.\r\n        sort(result.begin(),result.end());\r\n        \r\n        //returning the result.\r\n        return result;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class solve\r\n{\r\n    public static void printAllSubsetsHelper(int arr[],int start, int n, \r\n        ArrayList<Integer> list, ArrayList <ArrayList <Integer>> res)\r\n    { \r\n        //if all elements are iterated then we simply return.\r\n        if(start>=n){\r\n            return;\r\n        }\r\n        \r\n        for(int i=start;i<n;)\r\n        {\r\n            list.add(arr[i]);\r\n            //checking for duplicate elements.\r\n            res.add (new ArrayList <Integer>(list));\r\n            \r\n            //calling function recursively for adding further subsets.\r\n            printAllSubsetsHelper(arr, i+1, n, list, res);\r\n            int j = i+1;\r\n            while(j<n && arr[j]==arr[i]){\r\n                j++;\r\n            }\r\n            i = j;\r\n            list.remove(list.size()-1);\r\n        }\r\n        \r\n    }\r\n    \r\n    //Function to find all possible unique subsets.\r\n    public static ArrayList <ArrayList <Integer>> AllSubsets(int arr[], int n)\r\n    {\r\n        ArrayList <ArrayList <Integer>> res = new ArrayList <ArrayList <Integer>> (0);\r\n        res.add(new ArrayList<>());\r\n        printAllSubsetsHelper(arr,0,n,new ArrayList<Integer>(), res);\r\n        \r\n        //returning the result.\r\n        return res;\r\n    }\r\n    \r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    \r\n    def subsetsHelper (self, arr, i, n, cur, res):\r\n        \r\n        #if all elements are iterated then we store current in result.\r\n        if i >= n:\r\n            res.append (cur[:])\r\n            return\r\n        \r\n        curInd = i + 1\r\n        #checking for duplicate elements.\r\n        while curInd < n and arr[curInd] == arr[i]:\r\n            curInd += 1\r\n            \r\n        count = curInd - i \r\n        \r\n        #inserting all the subsets in current.\r\n        for j in range (0, count+1):\r\n            for k in range (j):\r\n                cur.append (arr[i])\r\n             \r\n            #calling function recursively for adding further subsets.  \r\n            self.subsetsHelper (arr, curInd, n, cur, res)\r\n            \r\n            #backtracking to exclude current combinations and \r\n            #include further combinations.\r\n            for k in range (j):\r\n                cur.pop ()\r\n    \r\n    #Function to find all possible unique subsets.\r\n    def AllSubsets (self, arr, n):\r\n        \r\n        res = []\r\n        cur = []\r\n        arr.sort()\r\n        \r\n        self.subsetsHelper (arr, 0, n, cur, res)\r\n        \r\n        #sorting for ascending output.\r\n        res.sort ()\r\n        #returning the result.\r\n        return res\r\n        \r\n        \r\n        \r\n        \r\n        ",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    //Helper function to generate all subsets.\n    AllSubsetsHelper(arr, index, n, current, result) {\n        if (index >= n) {\n            result.push([...current]);\n            return;\n        }\n        let curIndex = index + 1;\n        while (curIndex < n && arr[curIndex] == arr[index]) {\n            curIndex++;\n        }\n        \n        let count = curIndex - index;\n        for (let i = 0; i <= count; i++) {\n            for (let j = 0; j < i; j++) {\n                current.push(arr[index]);\n            }\n            this.AllSubsetsHelper(arr, curIndex, n, current, result);            \n            for (let j = 0; j < i; j++) {\n                current.pop();\n            }\n        }\n    }\n    \n    //Function to find all possible unique subsets.\n    AllSubsets(arr, n) {\n        let result = [];\n        let current = [];\n        arr.sort((a, b) => a - b);\n        this.AllSubsetsHelper(arr, 0, n, current, result);\n        result.sort();     \n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}