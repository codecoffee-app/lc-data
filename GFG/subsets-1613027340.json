{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706426,
            "title": "Subsets",
            "titleSlug": "subsets-1613027340",
            "content": "<p><span >Given an array arr of distinct positive integers, your task is to find all its subsets. The subsets should be returned in lexicographical order.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr = [1, 2, 3]\n<strong>Output: </strong>[[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]\n<strong>Explanation: <br /></strong>The subsets of [1, 2, 3] in lexicographical order are:\n[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]</span></pre>\n<pre><span ><strong>Input:</strong> arr = [1, 2]\n<strong>Output: </strong>[[], [1], [1, 2], [2]]\n<strong>Explanation:</strong>\nThe subsets of [1, 2] in lexicographical order are:\n[], [1], [1, 2], [2]</span></pre>\n<pre><span ><strong>Input:</strong> arr = [10]\n<strong>Output: </strong>[[], [10]]\n<strong>Explanation: </strong>For the array with a single element [10]<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, the subsets are [ ] </span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">and [10]</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span></span></pre>\n<div><span ><strong>Constraints :</strong></span></div>\n<div><span >1 &lt;= arr.size() &lt;= 10</span></div>\n<div><span >1 &lt;= arr[i] &lt;=10</span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of distinct positive integers, find all its subsets. The subsets should be returned in lexicographical order.",
                "constraints": [
                    "1 <= arr.size() <= 10",
                    "1 <= arr[i] <= 10"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3]",
                        "output": "[[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]",
                        "explanation": "The subsets of [1, 2, 3] in lexicographical order are: [], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]"
                    },
                    {
                        "input": "[1, 2]",
                        "output": "[[], [1], [1, 2], [2]]",
                        "explanation": "The subsets of [1, 2] in lexicographical order are: [], [1], [1, 2], [2]"
                    },
                    {
                        "input": "[10]",
                        "output": "[[], [10]]",
                        "explanation": "For the array [10], the subsets are [] and [10]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>There are two options for every element in a set- to include or not to include.</p>",
            "<p><strong>Powerset</strong> can be used.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find all subsets of the given array.\n    vector<vector<int>> subsets(vector<int>& arr) {\n        // Creating a vector to store all subsets.\n        vector<vector<int>> ans;\n\n        // Iterating over all possible combinations using bit manipulation.\n        for (int i = 0; i < (1 << arr.size()); i++) {\n            // Creating a vector to store the current subset.\n            vector<int> cur;\n\n            // Iterating over each element of the array.\n            for (int j = 0; j < arr.size(); j++) {\n                // Checking if the jth bit of i is set.\n                if (i & (1 << j))\n                    // If yes, then include that element in the subset.\n                    cur.push_back(arr[j]);\n            }\n\n            // Adding the current subset to the result vector.\n            ans.push_back(cur);\n        }\n\n        // Sorting the subsets in lexicographical order.\n        sort(ans.begin(), ans.end());\n\n        // Returning the result vector containing all subsets.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// User function Template for Java\nclass Solution {\n    public ArrayList<ArrayList<Integer>> subsets(int[] arr) {\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();\n\n        // Iterating over all possible subsets using bit manipulation.\n        for (int i = 0; i < (1 << arr.length); i++) {\n            ArrayList<Integer> cur = new ArrayList<>();\n\n            for (int j = 0; j < arr.length; j++) {\n                // Checking if the jth bit of i is set.\n                if ((i & (1 << j)) > 0) {\n                    cur.add(arr[j]);\n                }\n            }\n\n            ans.add(cur); // Add the current subset to the result\n        }\n\n        // Sorting the subsets in lexicographical order.\n        Collections.sort(ans, (list1, list2) -> {\n            int n1 = list1.size();\n            int n2 = list2.size();\n            for (int i = 0; i < Math.min(n1, n2); i++) {\n                int cmp = Integer.compare(list1.get(i), list2.get(i));\n                if (cmp != 0) return cmp;\n            }\n            return Integer.compare(n1, n2);\n        });\n\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to find all subsets of the given array.\n    def subsets(self, arr):\n\n        # Creating a list to store all subsets.\n        ans = []\n\n        # Iterating over all possible combinations using bit manipulation.\n        for i in range(1 << len(arr)):\n            # Creating a list to store the current subset.\n            cur = []\n\n            # Iterating over each element of the array.\n            for j in range(len(arr)):\n                # Checking if the jth bit of i is set.\n                if i & (1 << j):\n                    # If yes, then include that element in the subset.\n                    cur.append(arr[j])\n\n            # Adding the current subset to the result list.\n            ans.append(cur)\n\n        # Sorting the subsets in lexicographical order.\n        ans.sort()\n\n        # Returning the result list containing all subsets.\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find all subsets of the given array.\n    subsets(arr) {\n\n        // Create an array to store all subsets\n        let ans = [];\n\n        // Iterate over all possible combinations using bit manipulation\n        for (let i = 0; i < (1 << arr.length); i++) {\n            let cur = [];\n\n            // Iterate over each element of the array\n            for (let j = 0; j < arr.length; j++) {\n                // Check if the jth bit of i is set\n                if (i & (1 << j)) {\n                    cur.push(arr[j]); // Include the element in the current subset\n                }\n            }\n\n            // Add the current subset to the result array\n            ans.push(cur);\n        }\n\n        // Sort the subsets lexicographically\n        ans.sort((a, b) => {\n            // Compare the two arrays element-wise\n            let len = Math.min(a.length, b.length);\n            for (let i = 0; i < len; i++) {\n                if (a[i] !== b[i]) return a[i] - b[i];\n            }\n            return a.length - b.length;\n        });\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}