{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704550,
            "title": "Subsets with XOR value",
            "titleSlug": "subsets-with-xor-value2023",
            "content": "<p><span style=\"font-size:20px\">Given an array arr&nbsp;of N integers&nbsp;and an integer&nbsp;K, find the number of subsets of arr having XOR of elements as K.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4\r\nk = 6\r\narr: 6 9 4 2</span><span style=\"font-size:18px\">\r\n<strong>Output:</strong>\r\n2\r\n<strong>Explanation:</strong>\r\nThe subsets are \r\n{4,2} and {6}</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 5\r\nK = 4\r\narr: </span><span style=\"font-size:18px\">1 2 3 4 5\r\n<strong>Output:</strong>\r\n4\r\n<strong>Explanation:</strong>\r\nThe subsets are {1, 5},\r\n{4}, {1, 2, 3, 4},\r\nand {2, 3, 5}</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>subsetXOR()</strong>&nbsp;which takes the array arr[], its size N, and an integer K as input parameters&nbsp;and returns the number of subsets having xor as K</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(N*M)<br />\r\n<strong>Expected Space Complexity: </strong>O(N*M)<br />\r\nNote: M = maximum value any XOR subset will acquire</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=N&lt;=20<br />\r\n1&lt;=K&lt;=100<br />\r\n0&lt;=arr[i]&lt;=100</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of N integers and an integer K, find the number of subsets of `arr` such that the XOR of their elements equals K.",
                "constraints": [
                    "1 <= N <= 20",
                    "1 <= K <= 100",
                    "0 <= arr[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nk = 6\narr: 6 9 4 2",
                        "output": "2",
                        "explanation": "The subsets with XOR equal to 6 are {4, 2} and {6}."
                    },
                    {
                        "input": "N = 5\nK = 4\narr: 1 2 3 4 5",
                        "output": "4",
                        "explanation": "The subsets with XOR equal to 4 are {1, 5}, {4}, {1, 2, 3, 4}, and {2, 3, 5}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use dynamic programming.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\npublic:\r\n    int subsetXOR(vector<int> arr, int N, int K) \r\n    { \r\n        // Find maximum element in arr[] \r\n        int max_ele = arr[0]; \r\n        for (int i=1; i<N; i++) \r\n           if (arr[i] > max_ele) \r\n               max_ele = arr[i]; \r\n      \r\n        // Maximum possible XOR value \r\n        int m = (1 << (int)(log2(max_ele) + 1) ) - 1; \r\n        if( K > m  ) \r\n           return 0; \r\n        // The value of dp[i][j] is the number of subsets having \r\n        // XOR of their elements as j from the set arr[0...i-1] \r\n        int dp[N+1][m+1]; \r\n         \r\n        // Initializing all the values of dp[i][j] as 0 \r\n        for (int i=0; i<=N; i++) \r\n            for (int j=0; j<=m; j++) \r\n                dp[i][j] = 0; \r\n      \r\n        // The xor of empty subset is 0 \r\n        dp[0][0] = 1; \r\n      \r\n        // Fill the dp table \r\n        for (int i=1; i<=N; i++) \r\n            for (int j=0; j<=m; j++) \r\n                dp[i][j] = dp[i-1][j] + dp[i-1][j^arr[i-1]]; \r\n      \r\n        //  The answer is the number of subset from set \r\n        //  arr[0..n-1] having XOR of elements as k \r\n        return dp[N][K]; \r\n    } \r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    static int subsetXOR(int arr[], int N, int K) \r\n    { \r\n        // Find maximum element in arr[] \r\n        int max_ele = arr[0]; \r\n        for (int i=1; i<N; i++) \r\n          if (arr[i] > max_ele) \r\n              max_ele = arr[i]; \r\n        // Maximum possible XOR value \r\n        int m = 10*max_ele;\r\n            \r\n        int[][] dp = new int[N+1][m+1];\r\n         // The xor of empty subset is 0 \r\n        dp[0][0] = 1;\r\n        // Fill the dp table \r\n        for(int i=1;i<=N;i++){\r\n            for(int j=0;j<=m;j++){\r\n                dp[i][j] += dp[i-1][j]; \r\n                if((j^arr[i-1])<=m){\r\n                    dp[i][j] += dp[i-1][j^arr[i-1]];\r\n                }\r\n            }\r\n        }\r\n        //  The answer is the number of subset from set \r\n        //  arr[0..n-1] having XOR of elements as k \r\n        return dp[N][K]; \r\n    } \r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nimport math\r\nclass Solution:\r\n    def subsetXOR(self, arr, N, K): \r\n      \r\n        # Find maximum element in arr[] \r\n        max_ele = arr[0] \r\n        for i in range(1, N): \r\n            if arr[i] > max_ele : \r\n                max_ele = arr[i] \r\n                  \r\n        # Maximum possible XOR value \r\n        m = (1 << (int)(math.log2(max_ele) + 1)) - 1\r\n        if( K > m  ): \r\n           return 0\r\n      \r\n      \r\n        # The value of dp[i][j] is the number  \r\n        # of subsets having XOR of their elements  \r\n        # as j from the set arr[0...i-1] \r\n      \r\n        # Initializing all the values  \r\n        # of dp[i][j] as 0 \r\n        dp = [[0 for i in range(m + 1)] \r\n                 for i in range(N + 1)] \r\n          \r\n        # The xor of empty subset is 0 \r\n        dp[0][0] = 1\r\n      \r\n        # Fill the dp table \r\n        for i in range(1, N + 1): \r\n            for j in range(m + 1): \r\n                dp[i][j] = (dp[i - 1][j] + \r\n                            dp[i - 1][j ^ arr[i - 1]]) \r\n      \r\n        # The answer is the number of subset  \r\n        # from set arr[0..n-1] having XOR of \r\n        # elements as k \r\n        return dp[N][K] ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for JavaScript\n\nclass Solution {\n  subsetXOR(arr, N, K) {\n    let max_ele = arr[0];\n    for (let i = 1; i < N; i++) {\n      if (arr[i] > max_ele) {\n        max_ele = arr[i];\n      }\n    }\n\n    let m = (1 << (Math.floor(Math.log2(max_ele)) + 1)) - 1;\n    if (K > m) {\n      return 0;\n    }\n\n    let dp = [];\n    for (let i = 0; i <= N; i++) {\n      dp.push(new Array(m + 1).fill(0));\n    }\n\n    dp[0][0] = 1;\n\n    for (let i = 1; i <= N; i++) {\n      for (let j = 0; j <= m; j++) {\n        dp[i][j] = dp[i - 1][j] + dp[i - 1][j ^ arr[i - 1]];\n      }\n    }\n\n    return dp[N][K];\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}