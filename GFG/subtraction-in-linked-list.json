{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700313,
            "title": "Subtraction in Linked List",
            "titleSlug": "subtraction-in-linked-list",
            "content": "<p><span >You are given two <strong>linked lists</strong>&nbsp;representing two <strong>large positive numbers</strong>. The linked lists represent these two numbers, <strong>subtract </strong>the smaller number from the larger one and <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">return the head&nbsp;</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">of the&nbsp;linked list</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">representing the result</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">. Please take a look at the examples to get a better understanding of the task.<br /></span></span></p>\n<p><span style=\"font-size: 18.6667px;\">The linked list does not contain leading zeros, except for the number zero itself.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList1: 1-&gt;0-&gt;0, LinkedList2: 1-&gt;2<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Output:  </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">LinkedList: 8-&gt;8<br /></span><strong>Explanation: </strong>First linked list represents 100 and the second one represents 12. 12 subtracted from 100 gives us 88 as the result. It is represented as 8-&gt;8 in the linked list.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700313/Web/Other/blobid1_1735211009.png\" width=\"300\" height=\"193\" /><br /></span></pre>\n<pre><span ><strong>Input: </strong>LinkedList1: 6-&gt;3, LinkedList2: 7-&gt;1-&gt;0<br /><strong>Output: </strong>LinkedList: 6-&gt;4-&gt;7<br /><strong>Explanation: </strong>First linked list represents 63 and the second one represents 710. 63 subtracted from 710 gives us 647 as the result. It is represented as 6-&gt;4-&gt;7 in the linked list.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700313/Web/Other/blobid2_1735211034.png\" width=\"299\" height=\"193\" /><br /></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= size of both linked lists &lt;= 10<sup>6</sup><br />0 &lt;= node-&gt;data &lt;= 9<sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given two linked lists, each representing a large positive number. Subtract the smaller number from the larger one and return the head of the linked list representing the result. The linked list does not contain leading zeros, except for the number zero itself.",
                "constraints": [
                    "1 <= size of both linked lists <= 10^6",
                    "0 <= node->data <= 9"
                ],
                "testcases": [
                    {
                        "input": "LinkedList1: 1->0->0, LinkedList2: 1->2",
                        "output": "LinkedList: 8->8",
                        "explanation": "The first linked list represents 100 and the second represents 12. Subtracting 12 from 100 yields 88, represented as the linked list 8->8."
                    },
                    {
                        "input": "LinkedList1: 6->3, LinkedList2: 7->1->0",
                        "output": "LinkedList: 6->4->7",
                        "explanation": "The first linked list represents 63 and the second represents 710. Subtracting 63 from 710 yields 647, represented as the linked list 6->4->7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Reverse the linked lists and make the number. find their difference.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int length(Node* n) {\n        int ret = 0;\n        while (n) {\n            ret++;\n            n = n->next;\n        }\n        return ret;\n    }\n\n    Node* reverse(Node* head) {\n        Node* prev = nullptr;\n        Node* current = head;\n        Node* next = nullptr;\n\n        while (current != nullptr) {\n            next = current->next;\n            current->next = prev;\n            prev = current;\n            current = next;\n        }\n\n        return prev;\n    }\n\n    Node* subLinkedList(Node* l1, Node* l2) {\n        int n1 = length(l1);\n        int n2 = length(l2);\n\n        if (n1 == 0 && n2 == 0) {\n            return new Node(0);\n        }\n\n        if (n2 > n1) {\n            swap(l1, l2);\n            // making sure l1 list has the bigger number\n        }\n\n        if (n1 == n2) {\n            Node* t1 = l1;\n            Node* t2 = l2;\n            while (t1->data == t2->data) {\n                t1 = t1->next;\n                t2 = t2->next;\n\n                if (t1 == nullptr) {\n                    return new Node(0);\n                    // returning zero if both numbers are the same\n                }\n            }\n\n            if (t2->data > t1->data) {\n                swap(l1, l2);\n                // making sure l1 list has the bigger number\n            }\n        }\n\n        l1 = reverse(l1);\n        l2 = reverse(l2);\n\n        Node* res = nullptr;\n        Node* t1 = l1;\n        Node* t2 = l2;\n\n        while (t1 != nullptr) {\n            int small = (t2 != nullptr) ? t2->data : 0;\n\n            if (t1->data < small) {\n                if (t1->next) {\n                    t1->next->data -= 1;\n                }\n                t1->data += 10;\n            }\n\n            Node* n = new Node(t1->data - small);\n            n->next = res;\n            res = n;\n\n            t1 = t1->next;\n            if (t2 != nullptr) {\n                t2 = t2->next;\n            }\n        }\n\n        while (res != nullptr && res->data == 0) {\n            Node* temp = res;\n            res = res->next;\n            delete temp;\n            // removing trailing zeroes from result list\n        }\n\n        if (res == nullptr) {\n            return new Node(0);\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Method to reverse a linked list\n    static Node reverse(Node head) {\n        Node prev = null;\n        Node current = head;\n        Node next = null;\n\n        while (current != null) {\n            next = current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n        }\n\n        return prev;\n    }\n\n    // Method to find the length of a linked list\n    static int length(Node head) {\n        int length = 0;\n        while (head != null) {\n            length++;\n            head = head.next;\n        }\n        return length;\n    }\n\n    // Method to subtract two linked lists\n    static Node subLinkedList(Node head1, Node head2) {\n        int n1 = length(head1);\n        int n2 = length(head2);\n\n        // Handle edge case when both lists are empty\n        if (n1 == 0 && n2 == 0) {\n            return new Node(0);\n        }\n\n        // Swap lists if second list is longer\n        if (n2 > n1) {\n            Node temp = head1;\n            head1 = head2;\n            head2 = temp;\n        }\n\n        // Compare lists element by element\n        if (n1 == n2) {\n            Node t1 = head1;\n            Node t2 = head2;\n            while (t1 != null && t2 != null && t1.data == t2.data) {\n                t1 = t1.next;\n                t2 = t2.next;\n                if (t1 == null) {\n                    return new Node(0);\n                }\n            }\n\n            if (t2 != null && (t1 == null || t2.data > t1.data)) {\n                Node temp = head1;\n                head1 = head2;\n                head2 = temp;\n            }\n        }\n\n        head1 = reverse(head1);\n        head2 = reverse(head2);\n\n        Node result = null;\n        Node t1 = head1;\n        Node t2 = head2;\n\n        // Subtract corresponding elements of two lists\n        while (t1 != null) {\n            int small = (t2 != null) ? t2.data : 0;\n\n            if (t1.data < small) {\n                if (t1.next != null) {\n                    t1.next.data -= 1;\n                }\n                t1.data += 10;\n            }\n\n            Node newNode = new Node(t1.data - small);\n            newNode.next = result;\n            result = newNode;\n\n            t1 = t1.next;\n            if (t2 != null) {\n                t2 = t2.next;\n            }\n        }\n\n        // Remove leading zeros from result\n        while (result != null && result.data == 0) {\n            result = result.next;\n        }\n\n        // Handle case when result is empty\n        if (result == null) {\n            return new Node(0);\n        }\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def length(self, node):\n        \"\"\"Returns the length of the linked list.\"\"\"\n        length = 0\n        while node:\n            length += 1\n            node = node.next\n        return length\n\n    def reverse(self, head):\n        \"\"\"Reverses the linked list and returns the new head.\"\"\"\n        prev = None\n        current = head\n        while current:\n            next_node = current.next  # Store the next node\n            current.next = prev  # Reverse the link\n            prev = current  # Move prev and current one step forward\n            current = next_node\n        return prev\n\n    def subLinkedList(self, head1, head2):\n        \"\"\"Subtracts two linked lists representing numbers and returns the result as a linked list.\"\"\"\n        n1 = self.length(head1)\n        n2 = self.length(head2)\n\n        # Ensure that head1 represents the larger number\n        if n2 > n1:\n            head1, head2 = head2, head1\n\n        if n1 == n2:\n            t1, t2 = head1, head2\n            while t1 and t2 and t1.data == t2.data:\n                t1 = t1.next\n                t2 = t2.next\n                if t1 is None:\n                    return Node(0)  # Both numbers are equal\n\n            if t2 and (t1 is None or t2.data > t1.data):\n                head1, head2 = head2, head1\n\n        head1 = self.reverse(head1)\n        head2 = self.reverse(head2)\n\n        result = None\n        t1, t2 = head1, head2\n\n        while t1:\n            small = t2.data if t2 else 0\n\n            if t1.data < small:\n                if t1.next:\n                    t1.next.data -= 1\n                t1.data += 10\n\n            new_node = Node(t1.data - small)\n            new_node.next = result\n            result = new_node\n\n            t1 = t1.next\n            if t2:\n                t2 = t2.next\n\n        # Remove leading zeros\n        while result and result.data == 0:\n            result = result.next\n\n        if result is None:\n            return Node(0)\n\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Returns the length of the linked list\n    length(node) {\n        let length = 0;\n        while (node !== null) {\n            length++;\n            node = node.next;\n        }\n        return length;\n    }\n\n    // Reverses the linked list and returns the new head\n    reverse(head) {\n        let prev = null;\n        let current = head;\n        while (current !== null) {\n            let next = current.next; // Store the next node\n            current.next = prev;     // Reverse the link\n            prev = current;          // Move prev and current one step forward\n            current = next;\n        }\n        return prev;\n    }\n\n    // Subtracts two linked lists representing numbers and returns the result as a\n    // linked list\n    subLinkedList(head1, head2) {\n        const n1 = this.length(head1);\n        const n2 = this.length(head2);\n\n        // Ensure that head1 represents the larger number\n        if (n2 > n1) {\n            [head1, head2] = [ head2, head1 ];\n        }\n\n        if (n1 === n2) {\n            let t1 = head1;\n            let t2 = head2;\n            while (t1 !== null && t2 !== null && t1.data === t2.data) {\n                t1 = t1.next;\n                t2 = t2.next;\n                if (t1 === null) {\n                    return new Node(0); // Both numbers are equal\n                }\n            }\n\n            if (t2 !== null && (t1 === null || t2.data > t1.data)) {\n                [head1, head2] = [ head2, head1 ];\n            }\n        }\n\n        head1 = this.reverse(head1);\n        head2 = this.reverse(head2);\n\n        let result = null;\n        let t1 = head1;\n        let t2 = head2;\n\n        while (t1 !== null) {\n            let small = t2 !== null ? t2.data : 0;\n\n            if (t1.data < small) {\n                if (t1.next !== null) {\n                    t1.next.data -= 1;\n                }\n                t1.data += 10;\n            }\n\n            let newNode = new Node(t1.data - small);\n            newNode.next = result;\n            result = newNode;\n\n            t1 = t1.next;\n            if (t2 !== null) {\n                t2 = t2.next;\n            }\n        }\n\n        // Remove leading zeros\n        while (result !== null && result.data === 0) {\n            result = result.next;\n        }\n\n        if (result === null) {\n            return new Node(0);\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}