{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714276,
            "title": "Subtree In N-ary Tree",
            "titleSlug": "subtree-in-n-ary-tree--170647",
            "content": "<p><span style=\"font-size: 18px;\">Given the root of a&nbsp;n-ary tree find the number of duplicate subtrees in the&nbsp;n-ary tree. Two trees are&nbsp;<strong>duplicates</strong>&nbsp;if they have the&nbsp;<strong>same structure</strong>&nbsp;with the&nbsp;<strong>same node values</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n1 N 2 2 3 N 4 N 4 4 3 N N N N N\n<img style=\"height: 241px; width: 400px;\" src=\"https://media.geeksforgeeks.org/img-practice/n-ary-1-1668854978.PNG\" alt=\"\" />\n<strong>Output:</strong> \n2\n<strong>Explanation:</strong> \n[4], [3] are duplicate subtree.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">1 N 2 3 N 4 5 6 N N N N\n<img src=\"https://media.geeksforgeeks.org/img-practice/Duplicaten-arytree-1-1668674633.png\" alt=\"\" />\n<strong>Output:</strong> \n0\n<strong>Explanation:</strong> \nNo duplicate subtree found.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function duplicateSubtreeNaryTree</span><span style=\"font-size: 18px;\">() which takes the root of the n-ary tree as input and returns an integer value as a number of duplicate subtrees.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n), n is the total no of nodes<br /><strong>Expected Space Complexity:</strong> O(n<sup>2</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />&nbsp;&nbsp;&nbsp;1 &lt;= n &lt;&nbsp;10<sup>3</sup><br />&nbsp;&nbsp;&nbsp;1 &lt;= node.key&lt;&nbsp;10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">N-ary tree traversal</span></p>",
            "<p><span style=\"font-size:18px\">Use hashing to find duplicates</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //HashMap to store subtree patterns and their count\n    map<string,int> hmap;\n    \n    //Function to recursively traverse the N-ary tree and build the subtree patterns\n    string recurse(Node *node){\n        //String to store the subtree pattern\n        string p=to_string(node->data)+\"#\";\n        \n        //Traversing through each child node and adding their subtree patterns to the current pattern\n        for(auto child:node->children){\n            p+=recurse(child);\n        }\n        \n        //Updating the HashMap with the current subtree pattern\n        hmap[p]++;\n        \n        //Returning the subtree pattern\n        return p;\n    }\n    \n    //Function to find the count of duplicate subtrees in the N-ary tree\n    int duplicateSubtreeNaryTree(Node *root){\n        //Vector to store the count of duplicate subtrees\n        vector<int> res;\n        \n        //Recursively build the subtree patterns\n        recurse(root);\n        \n        //Variable to store the count of duplicate subtrees\n        int ans=0;\n        \n        //Iterating through the HashMap and counting the duplicate subtrees\n        for(auto x:hmap){\n            if(x.second>1) ans++;\n        }\n        \n        //Returning the count of duplicate subtrees\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    public int duplicateSubtreeNaryTree(Node root){\r\n        int count = 0;\r\n        hm = new HashMap<>();\r\n        dfs(root);\r\n        for(Map.Entry<String, Integer> e : hm.entrySet()){\r\n            if(e.getValue() > 1)\r\n                count++;\r\n        }\r\n        return count;\r\n    }\r\n    static String dfs(Node node){\r\n        StringBuilder sb = new StringBuilder(node.data + \"#\");\r\n        for(Node child : node.children){\r\n            sb.append(dfs(child));\r\n        }\r\n        String s = sb.toString();\r\n        hm.put(s, hm.getOrDefault(s, 0) + 1);\r\n        return s;\r\n    }\r\n    static Map<String, Integer> hm;\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "'''\nclass Node:\n\tdef __init__(self, key, children=None):\n\t\tself.key = key\n\t\tself.children = children or []\n\t\n\tdef __str__(self):\n\t\treturn str(self.key)\n'''\n\n\nclass Solution:\n    #Function to count the number of duplicate subtrees in a N-ary tree.\n    def duplicateSubtreeNaryTree(self, root):\n        #Initializing an empty list to store the duplicate subtrees.\n        res = []\n\n        #Initializing an empty dictionary to store the subtrees and their counts.\n        hmap = {}\n\n        #Recursive function to traverse the tree and find the subtrees.\n        def recurse(node):\n            p = str(node.key) + \"#\"\n            for child in node.children:\n                p += recurse(child)\n\n            #If the current subtree is not present in the dictionary, add it.\n            if p not in hmap:\n                hmap[p] = 0\n            hmap[p] += 1\n            return p\n\n        #Calling the recursive function to traverse the tree.\n        recurse(root)\n\n        #Initializing a variable to store the count of duplicate subtrees.\n        ans = 0\n\n        #Iterating over the values in the dictionary.\n        for val in hmap.values():\n            #If the count of a subtree is greater than 1, it is a duplicate subtree.\n            if val > 1:\n                ans += 1\n\n        #Returning the count of duplicate subtrees.\n        return ans\n",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}