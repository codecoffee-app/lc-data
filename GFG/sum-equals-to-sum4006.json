{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702700,
            "title": "Pairs of equals Sum",
            "titleSlug": "sum-equals-to-sum4006",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr</strong>. Find if there are two pairs (a, b) and (c, d) such that a+b = c+d.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 4, 7, 1, 2, 9, 8] <br /><strong>Output:</strong> true<br /><strong>Explanation</strong>: (3, 7) and (9, 1) are the pairs whosesum are equal.  <br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [65, 30, 7, 90, 1, 9, 8]<br /><strong>Output:</strong> false<br /><strong>Explanation: </strong>There is no pair.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>3<br /></sup></span><span style=\"font-size: 18px;\">1 &le; arr[i] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr`, determine if there exist two distinct pairs (a, b) and (c, d) such that a + b = c + d.",
                "constraints": [
                    "1 <= arr.size() <= 10^3",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[3, 4, 7, 1, 2, 9, 8]",
                        "output": "true",
                        "explanation": "The pairs (3, 7) and (9, 1) both sum to 10. Therefore, two distinct pairs with equal sums exist."
                    },
                    {
                        "input": "[65, 30, 7, 90, 1, 9, 8]",
                        "output": "false",
                        "explanation": "No two distinct pairs in the array sum to the same value."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>An<strong>&nbsp;Efficient Solution</strong>&nbsp;can solve this problem in O(n<sup>2</sup>) time. The idea is to use&nbsp;<a href=\"http://geeksquiz.com/hashing-set-1-introduction/\">hashing</a>. We use sum as key and pair as value in hash table.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "oyo-rooms"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool findPairs(vector<int>& arr) {\n\n        int n = arr.size();\n        map<int, pair<int, int>> mp;\n        // create a map to store the sums of pairs with their indices\n\n        for (int i = 0; i < n; i++) { // iterate through the array\n            for (int j = i + 1; j < n; j++) {\n                // iterate through the array starting from the next element\n                int sum = arr[i] + arr[j];\n                // calculate the sum of the pair\n                if (mp.find(sum) == mp.end()) {\n                    // if the sum does not exist in the map\n                    mp[sum] = make_pair(i, j);\n                    // store the sum and its corresponding indices in the map\n                } else {\n                    pair<int, int> p = mp[sum]; // if the sum already exists in the map\n                    // flag = 1;\n                    return 1; // return 1 to indicate that duplicate pairs exist\n                }\n            }\n        }\n        return 0; // return 0 to indicate that no duplicate pairs exist\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Class to represent a pair\n    class pair {\n        int first, second;\n\n        pair(int f, int s) {\n            first = f;\n            second = s;\n        }\n    };\n\n    public boolean findPairs(int arr[]) {\n        int n = arr.length;\n        // Create an empty Hash to store mapping from sum to\n        // pair indexes\n        HashMap<Integer, pair> map = new HashMap<Integer, pair>();\n\n        // Traverse through all possible pairs of arr[]\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                // If sum of current pair is not in hash,\n                // then store it and continue to next pair\n                int sum = arr[i] + arr[j];\n                if (!map.containsKey(sum))\n                    map.put(sum, new pair(i, j));\n\n                else // Else (Sum already present in hash)\n                {\n                    // Find previous pair\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def findPairs(self, arr):\n\n        # Create an empty hashmap to store mapping\n        # from sum to pair indexes\n        n = len(arr)\n        Hash = {}\n\n        # Traverse through all possible pairs of arr[]\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                sum = arr[i] + arr[j]\n                # Sum already present in hash\n                if sum in Hash.keys():\n                    return 1\n                else:\n                    # sum is not in hash\n                    # store it and continue to next pair\n                    Hash[sum] = (arr[i], arr[j])\n        return 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    findPairs(arr) {\n        let n = arr.length;\n        let mp = {};\n\n        for (let i = 0; i < n; i++) {\n            for (let j = i + 1; j < n; j++) {\n                //  Traverse through all possible pairs of arr[]\n                let sum = arr[i] + arr[j];\n                if (!(sum in mp)) {\n                    // sum is not in the hash\n                    mp[sum] = [ i, j ];\n                } else {\n                    // sum is in the hash\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}