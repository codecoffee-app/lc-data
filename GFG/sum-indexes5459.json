{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704699,
            "title": "Sum Indexes",
            "titleSlug": "sum-indexes5459",
            "content": "<p><span style=\"font-size:18px\">You are given 3 different arrays A, B, and C of the same size N. Find the number of indexes i such that:<br />\r\n<strong>A<sub>i</sub> = B<sub>i </sub>+ C<sub>k&nbsp;</sub></strong><br />\r\nwhere k&nbsp;lies between [1, N].</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 3\r\nA = {1, 2, 3}\r\nB = {3, 2, 4}\r\nC = {0, 5, -2}\r\n<strong>Output:</strong> 2\r\n<strong>Explaination:</strong> The possible i&#39;s are 0 and 1. \r\n1 = 3 + (-2) and 2 = 2 + 0.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>pairCount()</strong> which takes the value N and the arrays A, B, and C as input parameters and returns the number of possible indices.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>4</sup></span><br />\r\n<span style=\"font-size:18px\">1 &le; A[i], B[i] &le; 100</span><br />\r\n<span style=\"font-size:18px\">-100 &le; C[i] &le; 100</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use hashing for the elememts of C array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to count pairs\n    int pairCount(int N, int A[], int B[], int C[])\n    {\n        int count = 0;\n        // Initializing hash table for positive and negative numbers\n        int hash[101][2] = {{0}};\n\n        // Loop to fill the hash table\n        for(int i = 0; i < N;i++){\n            // If current number is negative\n            if(C[i] < 0){\n                int temp = -C[i];\n                // Marking the negative number in the hash table\n                hash[temp][1] = 1;\n            }\n            // If current number is positive\n            else{\n                // Marking the positive number in the hash table\n                hash[C[i]][0] = 1;\n            }\n        }\n\n        // Loop to count the pairs\n        for(int i = 0; i < N;i++){\n            // If A[i] < B[i]\n            if(A[i] < B[i]){\n                // Checking if the difference between B[i] and A[i] exists in the hash table for negative numbers\n                if(hash[B[i]-A[i]][1])\n                    count++;\n            }\n            // If A[i] >= B[i]\n            else{\n                // Checking if the difference between A[i] and B[i] exists in the hash table for positive numbers\n                if(hash[A[i]-B[i]][0])\n                    count++;\n            }\n        }\n\n        // Returning the count of pairs\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to count pairs from the two arrays.\n    public int pairCount(int N, int[] A, int[] B, int[] C)\n    {\n        int count = 0;\n        // Initializing hash table for positive and negative numbers\n        int[,] hash = new int[101,2];\n\n        // Loop to fill the hash table\n        for(int i = 0; i < N;i++){\n            // If current number is negative\n            if(C[i] < 0){\n                int temp = -C[i];\n                // Marking the negative number in the hash table\n                hash[temp,1] = 1;\n            }\n            // If current number is positive\n            else{\n                // Marking the positive number in the hash table\n                hash[C[i],0] = 1;\n            }\n        }\n\n        // Loop to count the pairs\n        for(int i = 0; i < N;i++){\n            // If A[i] < B[i]\n            if(A[i] < B[i]){\n                // Checking if the difference between B[i] and A[i] exists in the hash table for negative numbers\n                if(hash[B[i]-A[i],1] != 0)\n                    count++;\n            }\n            // If A[i] >= B[i]\n            else{\n                // Checking if the difference between A[i] and B[i] exists in the hash table for positive numbers\n                if(hash[A[i]-B[i],0] != 0)\n                    count++;\n            }\n        }\n\n        // Returning the count of pairs\n        return count;\n    }\n\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}