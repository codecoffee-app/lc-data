{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704934,
            "title": "Sum of all prime numbers between 1 and n",
            "titleSlug": "sum-of-all-prime-numbers-between-1-and-n4404",
            "content": "<p><span >Given a positive integer <strong>n</strong>, compute and return the sum of all prime numbers between <strong>1</strong> and <strong>n</strong> (inclusive).</span></p>\n<p data-start=\"134\" data-end=\"242\"><span >A <strong data-start=\"136\" data-end=\"152\">prime number</strong> is a natural number greater than 1 that has no positive divisors other than 1 and itself.</span> &nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5\n<strong>Output: </strong>10\n<strong>Explanation: </strong>2, 3 and 5 are prime numbers between 1 and 5(inclusive), and their sum is 2 + 3 + 5 = 10.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 10\n<strong>Output: </strong>17\n<strong>Explanation: </strong>2, 3, 5 and 7 are prime numbers between 1 and 10(inclusive), and their sum is </span><span >2 + 3 + 5 + 7 = 17.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, calculate the sum of all prime numbers within the range of 1 to `n` (inclusive). A prime number is a natural number greater than 1 that is only divisible by 1 and itself.",
                "constraints": [
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "10",
                        "explanation": "The prime numbers between 1 and 5 are 2, 3, and 5. Their sum is 2 + 3 + 5 = 10."
                    },
                    {
                        "input": "10",
                        "output": "17",
                        "explanation": "The prime numbers between 1 and 10 are 2, 3, 5, and 7. Their sum is 2 + 3 + 5 + 7 = 17."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Optimize you solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "samsung",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to calculate sum of prime numbers up to n\n    int prime_Sum(int n) {\n        vector<bool> vis(n + 1, true);\n        int sum = 0;\n\n        // Finding all prime numbers using Sieve of Eratosthenes algorithm\n        for (int i = 2; i * i <= n; i++) {\n            if (vis[i]) {\n                for (int j = i * i; j <= n; j += i) {\n                    vis[j] = false;\n                }\n            }\n        }\n\n        // Calculating sum of prime numbers\n        for (int i = 2; i <= n; i++)\n            if (vis[i])\n                sum += i;\n\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Method to calculate the sum of prime numbers up to a given value\n    public int prime_Sum(int n) {\n        int sum = 0;\n        // Loop through numbers up to n\n        for (int i = 1; i <= n; i++) {\n            // Check if the number is prime\n            boolean flag = isPrime(i);\n            if (flag == true) sum = sum + i;\n        }\n        return sum;\n    }\n\n    // Method to check if a number is prime\n    static boolean isPrime(int n) {\n        // Corner case: 1 and negative numbers are not prime\n        if (n <= 1) return false;\n\n        // Check from 2 to square root of n\n        for (int i = 2; i <= Math.sqrt(n); i++)\n\n            // If n is divisible by any number other than 1 and itself, it's not prime\n            if (n % i == 0) return false;\n\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\n\nclass Solution:\n    #Function to find the sum of all prime numbers till n.\n    def prime_Sum(self, n):\n        #initializing a sieve array to mark prime numbers.\n        sieve = [True] * (n + 1)\n        sieve[0] = False\n        sieve[1] = False\n\n        #variable to store the total sum of prime numbers.\n        tot = 0\n\n        #iterating over numbers to mark non-prime numbers.\n        for i in range(2, int(n**0.5) + 1):\n            for j in range(i * 2, n + 1, i):\n                sieve[j] = False\n\n        #calculating the total sum of prime numbers.\n        for i in range(n + 1):\n            tot += i if sieve[i] else 0\n\n        return tot\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    // Function to calculate the sum of prime numbers up to the given number.\n    public long prime_Sum(int n) {\n        bool[] vis = new bool[n + 1];\n        for (int i = 2; i <= n; i++) {\n            vis[i] = true;\n        }\n        long sum = 0;\n        // Finding all prime numbers using Sieve of Eratosthenes algorithm\n        for (int i = 2; i * i <= n; i++) {\n            if (vis[i]) {\n                for (int j = i * i; j <= n; j += i) {\n                    vis[j] = false;\n                }\n            }\n        }\n\n        // Calculating sum of prime numbers\n        for (int i = 2; i <= n; i++) {\n            if (vis[i]) {\n                sum += i;\n            }\n        }\n\n        return sum;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    prime_Sum(n) {\n        let vis = new Array(n + 1);\n        for (let i = 0; i <= n; i++) {\n            vis[i] = true;\n        }\n        let sum = 0;\n\n        for (let i = 2; i * i <= n; i++) {\n            if (vis[i]) {\n                for (let j = i * i; j <= n; j += i) {\n                    vis[j] = false;\n                }\n            }\n        }\n\n        for (let i = 2; i <= n; i++) { // Iterate from 2 to n.\n            if (vis[i]) {\n                sum += i; // Add the prime numbers to the sum.\n            }\n        }\n\n        return sum; // Return the final sum.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}