{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703079,
            "title": "Sum of all sub-sequences of a number",
            "titleSlug": "sum-of-all-sub-sequences-of-a-number3437",
            "content": "<p><span style=\"font-size:18px\">Given a number as integer <strong>s</strong>, find the sum of all the elements present in all possible subsequences of <strong>s</strong>. </span><br />\n<br />\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>  S = &quot;123&quot; </span><span style=\"font-size:18px\">\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> {1}, {2}, {3}, {1, 2}, {2, 3}\n{1, 3}, {1, 2, 3} are all possible sub-\nsequences</span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>  S = &quot;5&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> {5} is the only possible \nsub sequence</span>\n\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>User Task:</strong><br />\nYour task is to complete the function <strong><code>subsequnceSum</code>()&nbsp;</strong>which takes a single string as inputs and returns the sum. You need not take any input or print anything.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|s|)<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= |S| &lt;= 20</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number represented as a string `s`, find the sum of all the elements present in all possible subsequences of `s`.  Consider each digit in the string as an individual element.",
                "constraints": [
                    "1 <= |S| <= 20"
                ],
                "testcases": [
                    {
                        "input": "123",
                        "output": "24",
                        "explanation": "The subsequences are {1}, {2}, {3}, {1, 2}, {2, 3}, {1, 3}, {1, 2, 3}.  The sum is 1 + 2 + 3 + (1+2) + (2+3) + (1+3) + (1+2+3) = 1 + 2 + 3 + 3 + 5 + 4 + 6 = 24"
                    },
                    {
                        "input": "5",
                        "output": "5",
                        "explanation": "The only possible subsequence is {5}. Therefore, the sum is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. Each integer contributes 2^(n-1) times to the sum, where n is the size of the string</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\npublic:\n\n    // Function to calculate the sum of all possible subsequences\n    int subsequenceSum(string s) \n    { \n        int n = s.size();\n\n        int sum = 0; \n        // Iterating over each character in the string\n        for (int i = 0; i < n; i++) \n            // Converting the character to integer and adding it to sum\n            sum += (int)(s[i]-'0'); \n\n        // Result is sum multiplied by 2 raised to the power of (n-1) \n        sum = sum * (1 << (n - 1)); \n\n        // Returning the sum\n        return sum;\n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}