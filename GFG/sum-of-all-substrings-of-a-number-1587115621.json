{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701427,
            "title": "Sum of all substrings of a number",
            "titleSlug": "sum-of-all-substrings-of-a-number-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer <strong>s</strong> represented as a string, the task is to get the sum of all possible sub-strings of this string.<br />As the answer will be large, return answer <strong>modulo 10<sup>9</sup>+7</strong>.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> The number may have leading zeros.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>s = \"1234\"\n<strong>Output: <br /></strong>1670<strong>\nExplanation: <br /></strong>Sum = 1 + 2 + 3 + 4 + 12 + 23 + 34 + 123 + 234 + 1234 = 1670</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>s = \"421\"\n<strong>Output: <br /></strong>491<strong>\nExplanation: <br /></strong>Sum = 4 + 2 + 1 + 42 + 21 + 421 = 491</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You only need to complete the function <strong>sumSubstrings</strong> that takes <strong>s</strong> as an argument and returns the answer&nbsp;<strong>modulo 10<sup>9</sup>+7</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|s|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(|s|).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |s| &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer 's' represented as a string, calculate the sum of all possible substrings of 's'. Return the answer modulo 10^9 + 7. Note that the number may have leading zeros.",
                "constraints": [
                    "1 <= |s| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "1234",
                        "output": "1670",
                        "explanation": "The substrings are 1, 2, 3, 4, 12, 23, 34, 123, 234, and 1234.  Their sum is 1 + 2 + 3 + 4 + 12 + 23 + 34 + 123 + 234 + 1234 = 1670."
                    },
                    {
                        "input": "421",
                        "output": "491",
                        "explanation": "The substrings are 4, 2, 1, 42, 21, and 421. Their sum is 4 + 2 + 1 + 42 + 21 + 421 = 491."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Try to&nbsp;<span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito;\">store the summation of all substrings ending at the ith index into an extra space.</span></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to find sum of all possible substrings of the given string.\r\n    long long sumSubstrings(string s)\r\n    {\r\n        //dp[] array to store sum till ith index.\r\n        long long dp[s.size()];\r\n        dp[0]=int(s[0]-'0');\r\n        long long res=0, p=1000000007;\r\n        res=dp[0]; \r\n        \r\n        //iterating over all the digits.\r\n        for(int i=1;i<s.length();i++)\r\n        {\r\n            //getting the integer value of current digit from string.\r\n            int cur_digit=(int)(s[i]-'0');\r\n            \r\n            //storing [current digit*(i+1)+dp[i-1]*10] at dp[i].\r\n            dp[i]=(((i+1)*(cur_digit))%p+(dp[i-1]*10)%p)%p; \r\n            \r\n            //res stores the sum of all values in dp[].\r\n            res = (res+dp[i])%p;                            \r\n        }\r\n        //returning the result.\r\n        return res;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //Function to find sum of all possible substrings of the given string.\r\n    public static long sumSubstrings(String s)\r\n    {\r\n        //dp[] array to store sum till ith index.\r\n        long dp[]=new long[s.length()];\r\n        dp[0]=(int)(s.charAt(0)-'0');\r\n        long res=0, p=1000000007;\r\n        res=dp[0];     \r\n        \r\n        //iterating over all the digits.\r\n        for(int i=1;i<s.length();i++)\r\n        {\r\n            //getting the integer value of current digit from string.\r\n            int cur_digit=(int)(s.charAt(i)-'0');  \r\n            \r\n            //storing [current digit*(i+1)+dp[i-1]*10] at dp[i].\r\n            dp[i]=(((i+1)*(cur_digit))%p+(dp[i-1]*10)%p)%p;\r\n            \r\n            //res stores the sum of all values in dp[].\r\n            res = (res+dp[i])%p;                              \r\n        }\r\n        //returning the result.\r\n        return res;\r\n        \r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to find sum of all possible substrings of the given string.\r\n    def sumSubstrings(self,s):\r\n        \r\n        n = len(s) \r\n        digits = []  \r\n        \r\n        #converting string into list of digits.\r\n        for char in s:\r\n            digits.append(int(char))\r\n    \r\n        #dp[] array to store sum till ith index.\r\n        dp = [0 for i in range(n)] \r\n    \r\n        dp[0] = digits[0] \r\n        res = dp[0] \r\n        \r\n        #iterating over all the digits.\r\n        for i in range(1,n):\r\n            \r\n            #storing [current digit*(i+1)+dp[i-1]*10] at dp[i].\r\n            dp[i] = ((i+1)*digits[i]+(dp[i-1]*10))%1000000007 \r\n            \r\n            #res stores the sum of all values in dp[].\r\n            res+=dp[i] \r\n            res%=1000000007;\r\n    \r\n        #returning the result.\r\n        return res\r\n    \r\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find sum of all possible substrings of the given string.\n    public long sumSubstrings(string s)\n    {\n        int p = 1000000007;\n        long[] dp = new long[s.Length];\n        dp[0] = int.Parse(s.Substring(0,1));\n        long res = dp[0];\n        \n        for(int i=1; i<s.Length; i++)\n        {\n            int cur_digit = int.Parse(s.Substring(i,1));\n            \n            dp[i] = (((i+1)*cur_digit) % p + (dp[i-1]*10) % p) % p;\n            \n            res = (res + dp[i]) % p;\n        }\n        \n        return res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {string} s\r\n * @returns {BigInt}\r\n*/\r\n\r\nclass Solution \r\n{\r\n    //Function to find sum of all possible substrings of the given string.\r\n    sumSubstrings(s)\r\n    {\r\n        //dp[] array to store sum till ith index.\r\n        let dp = new Array(s.length);\r\n        dp[0]=BigInt(s[0]);\r\n        let res=BigInt(0), p=BigInt(1000000007);\r\n        res=dp[0];\r\n        \r\n        //iterating over all the digits.\r\n        for(let i=1;i<s.length;i++)\r\n        {\r\n            //getting the integer value of current digit from string.\r\n            let cur_digit=BigInt(s[i]);   \r\n            \r\n            //storing [current digit*(i+1)+dp[i-1]*10] at dp[i].\r\n            dp[i]=(((BigInt(i+1))*(cur_digit))%p+(dp[i-1]*BigInt(10))%p)%p;\r\n            \r\n            //res stores the sum of all values in dp[].\r\n            res = (res+dp[i])%p;                            \r\n        }\r\n        //returning the result.\r\n        return res;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}