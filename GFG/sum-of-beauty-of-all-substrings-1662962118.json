{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712102,
            "title": "Sum of Beauty of All Substrings",
            "titleSlug": "sum-of-beauty-of-all-substrings-1662962118",
            "content": "<p><span style=\"font-size: 18px;\">Given a&nbsp;string<strong> S</strong>, return the sum of <strong>beauty</strong> of all its substrings.<br />The <strong>beauty</strong> of a string is defined as the difference in frequencies between the most frequent and least frequent characters.</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">For example, the beauty of string \"aaac\" is 3 - 1 = 2.</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<div style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />S = \"aaac\"<br /><strong>Output: </strong><br />3<br /><strong>Explanation:&nbsp;</strong>The substrings with non - zero&nbsp;beauty are [\"aaac\",\"aac\"] <br />where beauty of \"aaac\" is 2 and beauty of \"aac\" is 1.</span></div>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<div style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />S = \"geeksforgeeks\"<br /><strong>Output: </strong><br />62<br /><strong>Explanation:</strong> There are 91&nbsp;substrings of the given strings.<br />Like, the beauty of substring \"geek\" is 1. <br />In this way the sum of&nbsp;beauties of all substrings are 62.</span></div>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>beautySum()</strong> which takes&nbsp;string <strong>S</strong> as input paramters&nbsp;and returns the sum of <strong>beauty</strong> of all its substrings.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(|S|<sup>2</sup>)<br /><strong>Expected Auxiliary Space: </strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:&nbsp;</strong><br />1 &le; |S|&nbsp;&le; 500<br />S only contains lower case alphabets.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S`, calculate the sum of the 'beauty' of all its substrings. The beauty of a string is defined as the difference between the highest and lowest character frequencies within the string.",
                "constraints": [
                    "1 <= |S| <= 500",
                    "S only contains lowercase alphabets."
                ],
                "testcases": [
                    {
                        "input": "aaac",
                        "output": "3",
                        "explanation": "The substrings with non-zero beauty are ['aaac','aac']. Beauty of 'aaac' is 2 (3-1) and beauty of 'aac' is 1 (2-1).  The sum is 2 + 1 = 3."
                    },
                    {
                        "input": "geeksforgeeks",
                        "output": "62",
                        "explanation": "There are 91 substrings of the given string.  For example, the beauty of substring 'geek' is 1 (1-0). The total sum of beauties of all substrings is 62."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a greedy approach</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    //Function to find the beauty sum of the string.\n    int beautySum(string s) {\n        int ans = 0;\n        \n        //iterating over each character of the string.\n        for (auto i = 0; i < s.size(); ++i) {\n            int cnt[26] = {}, max_f = 0, min_f = 0;\n            \n            //iterating over subarrays starting from i.\n            for (auto j = i; j < s.size(); ++j) {\n                int idx = s[j] - 'a';\n                //updating maximum frequency.\n                max_f = max(max_f, ++cnt[idx]);\n                \n                //updating minimum frequency.\n                if (min_f >= cnt[idx] - 1) {\n                    min_f = cnt[idx];\n                    for (int k = 0; k < 26; ++k)\n                        //finding minimum frequency of all characters.\n                        min_f = min(min_f, cnt[k] == 0 ? INT_MAX : cnt[k]);\n                }\n                \n                //adding the difference between maximum and minimum frequency.\n                ans += max_f - min_f;\n            }\n        }\n        \n        //returning the beauty sum.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int beautySum(String s) {\r\n        // code here\r\n         int sum = 0;\r\n        \r\n        for (int i = 0; i < s.length(); ++i) {\r\n            int[] charCount = new int[26]; // initialize charCount to all 0\r\n            \r\n            for (int j = i; j < s.length(); ++j) {\r\n                ++charCount[s.charAt(j) - 'a'];\r\n\r\n\t\t\t\t// get beauty of substring from i to j\r\n\t\t\t\tint beauty = getMaxCount(charCount) - getMinCount(charCount);\r\n                sum += beauty;\r\n            }\r\n        }\r\n        \r\n        return sum;\r\n    }\r\n     private static int getMinCount(int[] charCount) {\r\n        int min = Integer.MAX_VALUE;\r\n\t\t\r\n        for (int i = 0; i < charCount.length; ++i) {\r\n            if (charCount[i] != 0) {\r\n                min = Math.min(min, charCount[i]);\r\n            }\r\n        }\r\n\t\t\r\n        return min;\r\n    }\r\n    \r\n    private static int getMaxCount(int[] charCount) {\r\n        int max = 0;\r\n\t\t\r\n        for (int i = 0; i < charCount.length; ++i) {\r\n            max = Math.max(max, charCount[i]);\r\n        }\r\n\t\t\r\n        return max;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom collections import Counter\nclass Solution:\n    \n    #Function to calculate the beauty sum.\n    def beautySum(self, s):\n        n = len(s)\n        ans = 0\n        d = [0] * 26 #array to store frequencies of each character\n        PI = float('inf') # Positive Infinity\n        d = Counter()\n        \n        #iterating over all possible substrings\n        for i in range(n):\n            d.clear()\n            mxFreq = 0 #maximum frequency of any character in the substring\n            \n            #checking all substrings starting from i\n            for j in range(i, n):\n                d[s[j]] += 1 #counting frequencies of characters\n                mxFreq = max(mxFreq, d[s[j]]) #updating maximum frequency\n                mnFreq = min(d.values()) #minimum frequency of any character in the substring\n                ans += mxFreq - mnFreq #adding the difference in frequencies to the answer\n        \n        return ans #returning the final answer",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\r\n * @param {string} s\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\n    //Function to find the sum of all beauty values of each sorted array.\r\n    beautySum(s) {\n        let n = s.length;\n        let ans = 0;\n        let d = {};\n        \n        //iterating over all possible substrings\n        for (let i = 0; i < n; i++) {\n            d = {};\n            let mxFreq = 0; //maximum frequency of any character in the substring\n            \n            //checking all substrings starting from i\n            for (let j = i; j < n; j++) {\n                if (d.hasOwnProperty(s[j])) {\n                    d[s[j]] += 1; //counting frequencies of characters\n                } else {\n                    d[s[j]] = 1;\n                }\n                mxFreq = Math.max(mxFreq, d[s[j]]); //updating maximum frequency\n                let mnFreq = Math.min(...Object.values(d)); //minimum frequency of any character in the substring\n                ans += mxFreq - mnFreq; //adding the difference in frequencies to the answer\n            }\n        }\n        \n        return ans; //returning the final answer\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int beautySum(string s)\n    {\n        int ans = 0;\n        for (int i = 0; i < s.Length; i++)\n        {\n            int[] cnt = new int[26];\n            int max_f = 0;\n            int min_f = 0;\n            \n            for (int j = i; j < s.Length; j++)\n            {\n                int idx = s[j] - 'a';\n                max_f = Math.Max(max_f, ++cnt[idx]);\n                \n                if (min_f >= cnt[idx] - 1)\n                {\n                    min_f = cnt[idx];\n                    for (int k = 0; k < 26; k++)\n                        min_f = Math.Min(min_f, cnt[k] == 0 ? int.MaxValue : cnt[k]);\n                }\n                \n                ans += max_f - min_f;\n            }\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}