{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700655,
            "title": "Sum of Binary Tree",
            "titleSlug": "sum-of-binary-tree",
            "content": "<p><span >Given a binary tree, find the sum of values of all the nodes.&nbsp;<br /></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> root = [10, 20, 30, 40, 60, N, N]<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp; \\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20&nbsp;&nbsp;&nbsp;&nbsp;30\n &nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp; \\\n &nbsp;&nbsp; 40&nbsp;&nbsp;&nbsp;&nbsp; 60\n<strong>Output: </strong>160<br /><strong>Explanation</strong>: The sum of all the nodes is 10 + 20 + 30 + 40 + 60.<br /></span></pre>\n<pre><span ><strong>Input:</strong> root = [1, 3, 2]<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n &nbsp;&nbsp; /&nbsp;&nbsp; \\\n &nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp; 2\n<strong>Output: </strong>6<br /><strong>Explanation</strong>: </span>The sum of all the nodes is 1 + 2 + 3 = 6.</pre>\n<pre><span ><strong>Input:</strong> root = [1, 2, N, 4, N]<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp; \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;\n &nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;\n &nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp; \n<strong>Output: </strong>7<br /><strong>Explanation</strong>: </span>The sum of all the nodes is 1 + 2 + 4 = 7.</pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>4<br /></sup></span><span >-</span><span >10</span><sup>5</sup><span >&nbsp;&lt;= node-&gt;data &lt;= 10</span><sup>5</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Simply traverse the tree and add up each node.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "factset"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to calculate the sum of keys in a binary tree\n    int sumBT(Node* root) {\n        // If the root is NULL, return 0\n        if (root == NULL)\n            return 0;\n\n        // Return the sum of the current node's key, left subtree's sum, and right\n        // subtree's sum\n        return (root->data + sumBT(root->left) + sumBT(root->right));\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n// Function to calculate the sum of all elements in a binary tree\nclass Solution {\n    static int sumBT(Node head) {\n        // If the tree is empty, return 0\n        if (head == null) {\n            return 0;\n        }\n        // Recursively calculate the sum of the left subtree, right subtree, and the\n        // current node's data\n        return head.data + sumBT(head.right) + sumBT(head.left);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n'''\nclass Node:\n    def __init__(self, val):\n        self.right = None\n        self.data = val\n        self.left = None\n'''\n\n\nclass Solution:\n    # Function to calculate the sum of all nodes in a binary tree\n    def sumBT(self, root):\n        if root is None:\n            return 0\n\n        stack = [root]\n        total_sum = 0\n\n        while stack:\n            node = stack.pop()\n            total_sum += node.data\n\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n\n        return total_sum\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to calculate the sum of all nodes in a binary tree\n    sumBT(root) {\n        // Check if the root is null, in which case return 0 as there are no nodes\n        // present\n        if (root === null) return 0;\n\n        // Return the sum of the current root's value, left subtree sum, and right\n        // subtree sum\n        return (root.data + this.sumBT(root.left) + this.sumBT(root.right));\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}