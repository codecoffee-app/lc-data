{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705732,
            "title": "Sum of dependencies in a graph",
            "titleSlug": "sum-of-dependencies-in-a-graph5311",
            "content": "<p><span style=\"font-size: 18px;\">Given a directed graph with&nbsp;</span><span style=\"font-size: 18px;\"><strong>V</strong> nodes and&nbsp;</span><span style=\"font-size: 18px;\"><strong>E</strong> edges, the graph's edges are represented as a 2D array, <strong>edges</strong>[][]</span><span style=\"font-size: 18px;\">. Each row in the array represents a directed edge </span><span style=\"font-size: 18px;\">(<strong>u</strong>, <strong>v</strong>), meaning there is a directed edge from node </span><span style=\"font-size: 18px;\"><strong>u</strong> to node </span><span style=\"font-size: 18px;\"><strong>v</strong>. </span><span style=\"font-size: 18px;\">If there is a directed edge from&nbsp;</span><span style=\"font-size: 18px;\"><strong>u</strong> to<strong>&nbsp;</strong></span><span style=\"font-size: 18px;\"><strong>v</strong>, it means that&nbsp;</span><span style=\"font-size: 18px;\"><strong>u</strong> depends on&nbsp;</span><span style=\"font-size: 18px;\"><strong>v</strong>. The Number of Dependencies (NoD) for a node&nbsp;</span><span style=\"font-size: 18px;\"><strong>x</strong> is the total count of nodes that&nbsp;</span><span style=\"font-size: 18px;\"><strong>x</strong> depends upon.</span></p>\n<p><span style=\"font-size: 18px;\">Your task is to calculate the sum of the Number of Dependencies (NoD) for all nodes in the graph.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> V<strong> </strong>= 4, E<strong> </strong>= 4, edges[][] = [[0,2],[0,3],[1,3],[2,3]]</span>\n<span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/705732/Web/Other/blobid0_1733466066.png\" width=\"322\" height=\"285\" /></span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>4\n<strong>Explanation: </strong>For the graph in diagram, A depends on C and D i.e. A's NoD is 2, </span><span style=\"font-size: 18px;\">B depends on D i.e. B's NoD is 1, C depends on D i.e. D's NoD is 1 and D depends on none. Hence answer is 2 + 1 + 1 + 0 = 4.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> V<strong> </strong>= 4, E<strong> </strong>= 3, edges[][]<strong> </strong>= [[0,3],[0,2],[0,1]]\n<strong>Output: </strong>3\n<strong>Explanation: </strong>The sum of dependencies: 3 + 0 + 0 + 0 = 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= V &lt;= 10<sup>5<br /></sup>1 &lt;= E &lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">edges.size() = E<br />edges[i].size() = 2<br />0 &lt;= edges[i][j] &lt;= V-1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with V nodes and E edges, represented by a 2D array edges[][]. Each row in edges represents a directed edge (u, v), indicating a dependency from node u to node v.  The Number of Dependencies (NoD) for a node x is the count of nodes that x depends upon. Calculate the sum of the NoD for all nodes in the graph.",
                "constraints": [
                    "1 <= V <= 10^5",
                    "1 <= E <= 10^5",
                    "edges.size() = E",
                    "edges[i].size() = 2",
                    "0 <= edges[i][j] <= V-1"
                ],
                "testcases": [
                    {
                        "input": "V = 4, E = 4, edges = [[0,2],[0,3],[1,3],[2,3]]",
                        "output": "4",
                        "explanation": "Node 0 depends on nodes 2 and 3 (NoD = 2). Node 1 depends on node 3 (NoD = 1). Node 2 depends on node 3 (NoD = 1). Node 3 depends on no nodes (NoD = 0).  The sum of NoD is 2 + 1 + 1 + 0 = 4."
                    },
                    {
                        "input": "V = 4, E = 3, edges = [[0,3],[0,2],[0,1]]",
                        "output": "3",
                        "explanation": "Node 0 depends on nodes 3, 2, and 1 (NoD = 3). Nodes 1, 2, and 3 depend on no nodes (NoD = 0). The sum of dependencies is 3 + 0 + 0 + 0 = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The sum of dependencies depends upon the number of edges attached to each node.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to calculate the sum of dependencies.\n    int sumOfDependencies(int V, vector<vector<int>> &edges) { return edges.size(); }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // function to calculate the sum of dependencies in the graph\n    int sumOfDependencies(int V, int[][] edges) {\n        // initialize ans variable to store the sum of dependencies\n        return edges.length;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to calculate the sum of dependencies for all vertices.\n    def sumOfDependencies(self, V, edges):\n        return len(edges)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n    * @param number V\n    * @param number[][] edges\n\n    * @returns number\n    */\n    // Function to calculate the sum of dependencies.\n    sumOfDependencies(V, edges) { return edges.length; }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}