{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701104,
            "title": "Sum of diagonals",
            "titleSlug": "sum-of-diagonals-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">Given a square of matrix <strong>M</strong> of size<strong> N*N</strong>. You task is to compute and return <strong>sum</strong> of principal diagonal elements of matrix. Your have to complete the function <strong>diagonalSum() </strong>which accepts <strong>N</strong> (size of matrix, N*N) and matrix <strong>M[ ][ ]</strong> as arguments.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Input:</strong><br />The first input line contains <strong>T</strong>, denoting the number of testcases. Each testcase contains <strong>two</strong> lines. The first line contains N (size of matrix). The second line contains N*N elements of matrix separated by space.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Output:</strong><br />For each testcase in new line, print the sum of diagonal elements.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>User Task:</strong><br />Since this is a functional problem you don't have to worry about input, you just have to complete the function <strong>sumDiagonal().</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= T &lt;= 100<br />1 &lt;= N &lt;= 50<br />1 &lt;= M[i][j] &lt;= 100</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:<br />Input:</strong><br />1<br />3<br />1 2 3 4 5 6 7 8 9</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Output:</strong><br />15</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Explanation:<br />Testcase 1:</strong> Sum of diagonal elements are: 1+5+9 = 15</span>.<br />&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square matrix **M** of size **N*N**, calculate and return the sum of its principal diagonal elements. Implement the function **diagonalSum(N, M)** which takes the size of the matrix **N** and the matrix **M** as input.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 50 (Size of the matrix)",
                    "1 <= M[i][j] <= 100 (Value of each element in the matrix)"
                ],
                "testcases": [
                    {
                        "input": "3\n1 2 3 4 5 6 7 8 9",
                        "output": "15",
                        "explanation": "For a 3x3 matrix, the diagonal elements are M[0][0], M[1][1], and M[2][2].  In this case, they are 1, 5, and 9 respectively. Their sum is 1 + 5 + 9 = 15."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Practice-Problems",
                "slug": "practice-problems"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Function to calculate the sum of the diagonal elements in a square matrix.\r\n\r\nint sumDiagonal(int N, int M[][N])\r\n{\r\n\r\n    // Variable to store the sum of diagonal elements.\r\n    int sum = 0;\r\n\r\n    // Loop through each row and column of the matrix.\r\n    for(int i = 0; i < N; i++)\r\n    \r\n        // Add the element at the diagonal position to the sum.\r\n        sum += M[i][i];\r\n        \r\n    // Return the final sum of diagonal elements.\r\n    return sum;\r\n}",
                "lang_text": "c"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n\t// function to calculate the sum of diagonal elements\r\n\tint sumDiagonal(int N, int [][] M) {\r\n\t\tint sum = 0;\r\n\t\t// iterate over the diagonal elements of the matrix\r\n\t    for(int i = 0; i < N; i++)\r\n\t    \t// add each diagonal element to the sum\r\n\t        sum += M[i][i];\r\n\t    // return the sum of diagonal elements\r\n\t    return sum;\r\n\t}\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\nclass Solution:\n    def sumDiagonal(self, N : int , M : List[List[int]] ) -> int :\n        ans = 0\n        for i in range(N):\n            ans+=M[i][i]\n        return ans  ",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}