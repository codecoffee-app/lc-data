{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701388,
            "title": "Sum of Digits of a Number",
            "titleSlug": "sum-of-digits-of-a-number",
            "content": "<p><span style=\"font-size:18px\">You are given a number <strong>n</strong>. You need to find the<strong> sum of digits</strong> of n.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>n = 1\n<strong>Output: </strong>1\n<strong>Explanation: </strong>Sum of digit of 1 is 1.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>n = 99999\n<strong>Output: </strong>45\n<strong>Explanation: </strong>Sum of digit of 99999 is 45.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function</span><span style=\"font-size:18px\"> <strong>sumOfDigits()&nbsp;</strong>that takes<strong> n</strong> as <strong>parameter </strong>and <strong>returns </strong>the <strong>sum of digits</strong> of n.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(Logn).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(Logn) (Recursive).</span></p>\n\n<p><strong><span style=\"font-size:18px\">Constraints: </span></strong><br />\n<span style=\"font-size:18px\">1 &lt;= n &lt;= 10<sup>7</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number n, find the sum of its digits.",
                "constraints": [
                    "1 <= n <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "The sum of digits of 1 is 1."
                    },
                    {
                        "input": "99999",
                        "output": "45",
                        "explanation": "The sum of digits of 99999 (9+9+9+9+9) is 45."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nint sumOfDigits(int n)\n{\n    // Return n if it is less than 10\n    if(n<10)\n        return n;\n    // Recursively compute sum of digits if n is more than 9\n    else\n        return n%10+sumOfDigits(n/10);\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n\nclass Solution{\n  public:\n    int sumOfDigits(int n)\n    {\n        // Return n if it is less than 10\n        if(n<10)\n            return n;\n        // Recursively compute sum of digits if n is more than 9\n        else\n            return n%10+sumOfDigits(n/10);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    public static int sumOfDigits(int n)\n    {\n        // Return n if it is less than 10\n        if(n < 10)\n            return n;\n        else\n        // Recursively compute sum of digits if n is more than 9\n            return (n%10) + sumOfDigits(n/10);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def sumOfDigits(self, n):\n        '''\n        :param n: given number\n        :return: sum of digits of n.\n        '''\n        # base case, if it is reaches single digit state.\n        if n<10: \n            return n\n        # else add least significant digit and recur for remaining number\n        return (n%10) + (self.sumOfDigits(n//10))",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} n\n * @returns {number}\n*/\nclass Solution {\n  \n    sumOfDigits(n)\n    {\n        // Return n if it is less than 10\n        if(n<10)\n            return n;\n        // Recursively compute sum of digits if n is more than 9\n        else\n            return ((n%10) + this.sumOfDigits(Math.floor(n/10)));\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int sumOfDigits(int n)\n    {\n        // Return n if it is less than 10\n        if (n < 10)\n            return n;\n        // Recursively compute sum of digits if n is more than 9\n        else\n            return n % 10 + sumOfDigits(n / 10);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}