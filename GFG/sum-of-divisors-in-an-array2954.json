{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705432,
            "title": "Sum of Divisors in an array",
            "titleSlug": "sum-of-divisors-in-an-array2954",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of natural numbers count the sum of its proper divisors for every element in the array.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note: For simplicity, 0 is assumed to be a proper divisor of itself.</span></strong></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 3\narr = {2, 4, 3}\n<strong>Output:</strong> {1, 3, 1}\n<strong>Explaination:</strong> \ndivisor of 2 is 1.\ndivisors of 4 is 1, 2.\ndivisor of 3 is 1.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 3\nArr = {2, 4, 1}\n<strong>Output:</strong> {1, 3, 0}\n<strong>Explaination:</strong> \nProper divisor of 2 is 1.\nProper divisors of 4 is 1, 2.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>sumOfProperDivisors()</strong>&nbsp;which takes the array a<strong>rr[]</strong> and its size <strong>N&nbsp;</strong>as input parameters&nbsp;and returns&nbsp;the sum of its proper divisors for every element in the array.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(NlogN)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 100</span><br /><span style=\"font-size: 18px;\">0 &le; arr[i] &le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of natural numbers, calculate the sum of the proper divisors for each element in the array. A proper divisor of a number `n` is any positive divisor of `n` excluding `n` itself. For simplicity, 0 is considered a proper divisor of itself.",
                "constraints": [
                    "1 <= N <= 100",
                    "0 <= arr[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "N = 3\narr = {2, 4, 3}",
                        "output": "{1, 3, 1}",
                        "explanation": "For the input array {2, 4, 3}: The proper divisor of 2 is 1. The proper divisors of 4 are 1 and 2 (sum is 3). The proper divisor of 3 is 1. Therefore, the output is {1, 3, 1}."
                    },
                    {
                        "input": "N = 3\nArr = {2, 4, 1}",
                        "output": "{1, 3, 0}",
                        "explanation": "For the input array {2, 4, 1}: The proper divisor of 2 is 1. The proper divisors of 4 are 1 and 2 (sum is 3). The proper divisor of 1 is none except 1. Therefore, the output is {1, 3, 0}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use&nbsp;sieve of Eratothenese.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution {\n  public:\n    // To store prime factors and their\n    // powers\n    vector<pair<int, int>> factors[1001];\n\n    // Fills factors such that factors[i] is\n    // a vector of pairs containing prime factors\n    // (of i) and their powers.\n    // Also sets values in isPrime[]\n    void sieveOfEratothenese() {\n        // To check if a number is prime\n        bool isPrime[1001];\n        memset(isPrime, true, sizeof(isPrime));\n        isPrime[0] = isPrime[1] = false;\n\n        for (int i = 2; i < 1001; i++) {\n            // If i is prime, then update its\n            // powers in all multiples of it.\n            if (isPrime[i]) {\n                for (int j = i; j < 1000; j += i) {\n                    int k, l;\n                    isPrime[j] = false;\n                    for (k = j, l = 0; k % i == 0; l++, k /= i)\n                        ;\n                    factors[j].push_back(make_pair(i, l));\n                }\n            }\n        }\n    }\n\n    // Returns sum of proper divisors of num\n    // using factors[]\n    int sumOfDivisors(int num) {\n        // Applying above discussed formula for every\n        // array element\n        int mul = 1;\n        for (int i = 0; i < factors[num].size(); i++)\n            mul *=\n                ((pow(factors[num][i].first, factors[num][i].second + 1) - 1) /\n                 (factors[num][i].first - 1));\n        return mul - num;\n    }\n    vector<int> sumOfProperDivisors(int arr[], int N) {\n        sieveOfEratothenese();\n        vector<int> ans;\n        for (int i = 0; i < N; i++) ans.push_back(sumOfDivisors(arr[i]));\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public List<int> sumOfProperDivisors(int[] arr, int N)\n    {\n        // Declare and initialize factors array\n        List<List<KeyValuePair<int, int>>> factors = new List<List<KeyValuePair<int, int>>>();\n        for (int i = 0; i < 1001; i++)\n        {\n            factors.Add(new List<KeyValuePair<int, int>>());\n        }\n\n        // Declare and initialize isPrime array\n        bool[] isPrime = new bool[1001];\n        for (int i = 0; i < 1001; i++)\n        {\n            isPrime[i] = true;\n        }\n        isPrime[0] = isPrime[1] = false;\n\n        // Calculate prime factors using Sieve of Eratosthenes\n        for (int i = 2; i < 1001; i++)\n        {\n            if (isPrime[i])\n            {\n                for (int j = i; j < 1000; j += i)\n                {\n                    int k, l;\n                    isPrime[j] = false;\n                    for (k = j, l = 0; k % i == 0; l++, k /= i)\n                    {\n                        ;\n                    }\n                    factors[j].Add(new KeyValuePair<int, int>(i, l));\n                }\n            }\n        }\n\n        // Calculate sum of proper divisors for each element in arr\n        List<int> ans = new List<int>();\n        for (int i = 0; i < N; i++)\n        {\n            int num = arr[i];\n            int mul = 1;\n            foreach (KeyValuePair<int, int> factor in factors[num])\n            {\n                mul *= ((int)Math.Pow(factor.Key, factor.Value + 1) - 1) / (factor.Key - 1);\n            }\n            ans.Add(mul - num);\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}