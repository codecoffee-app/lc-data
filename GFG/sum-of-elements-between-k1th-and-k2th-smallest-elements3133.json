{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702793,
            "title": "Sum of elements between k1'th and k2'th smallest elements",
            "titleSlug": "sum-of-elements-between-k1th-and-k2th-smallest-elements3133",
            "content": "<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\">Given an array <strong>A[]</strong>&nbsp;of <strong>N</strong>&nbsp;positive&nbsp;integers and two positive integers <strong>K<sub>1</sub></strong> and <strong>K<sub>2</sub></strong>. Find the sum of all elements between K<sub>1</sub><sup>th</sup> and&nbsp;K<sub>2</sub><sup>th</sup> smallest elements of the array.&nbsp;</span></span><span style=\"font-size: 18px;\">It may be assumed that (1 &lt;= k1 &lt; k2 &lt;= n).</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></span></p>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Input:</strong></span><span style=\"font-size: 18px;\">\nN  = 7\nA[] = {20, 8, 22, 4, 12, 10, 14}\nK1 = 3, K2 = 6\n<strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">26\n<strong>Explanation:</strong></span><span style=\"font-size: 18px;\">\n3rd smallest element is 10\n6th smallest element is 20\nElement between 10 and 20 \n12,14. Their sum = 26.</span></span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></span></p>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Input</strong>\nN = 6\nA[] = {10, 2, 50, 12, 48, 13}\nK1= 2, K2 = 6\n<strong>Output:</strong></span><span style=\"font-size: 18px;\">\n73</span></span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>sumBetweenTwoKth()</strong>&nbsp;which takes the array <strong>A[]</strong>, its size <strong>N</strong><strong> </strong>and two integers <strong>K1</strong> and <strong>K2</strong> as inputs and returns the sum of all the elements between K<sub>1</sub><sup>th</sup> and K<sub>2</sub><sup>th</sup> smallest elements.</span></span><br />&nbsp;</p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N. log(N))<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup><br />1 &le; K<sub>1</sub>, K<sub>2</sub> &le; 10</span><sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array A of N positive integers and two positive integers K1 and K2. Find the sum of all elements in A that are strictly greater than the K1th smallest element and strictly smaller than the K2th smallest element. Assume that 1 <= K1 < K2 <= N.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= K1, K2 <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 7\nA = [20, 8, 22, 4, 12, 10, 14]\nK1 = 3\nK2 = 6",
                        "output": "26",
                        "explanation": "The 3rd smallest element is 10, and the 6th smallest element is 20.  The elements between 10 and 20 are 12 and 14. Their sum is 12 + 14 = 26."
                    },
                    {
                        "input": "N = 6\nA = [10, 2, 50, 12, 48, 13]\nK1 = 2\nK2 = 6",
                        "output": "73",
                        "explanation": "The 2nd smallest element is 10, and the 6th smallest element is 50. The elements between 10 and 50 are 12, 13, 48. Their sum is 12 + 13 + 48 = 73."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">First sort the given array using a O(n log n) sorting algorithm like <a href=\"http://quiz.geeksforgeeks.org/merge-sort/\">Merge Sort</a>, <a href=\"http://quiz.geeksforgeeks.org/heap-sort/\">Heap Sort</a>, etc and return the sum of all element between index k1 and k2 in the sorted array.<br />\n<strong>Note: </strong></span></p>\n\n<ul>\n\t<li><span style=\"font-size:18px\">Array elements are not necessarily distinct.</span></li>\n\t<li><span style=\"font-size:18px\">K<sub>1</sub>&nbsp;&lt;&nbsp;K<sub>2 </sub>and K<sub>2</sub>&gt;N is possible, deal accordingly.</span></li>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n    // Function to find the sum of elements between the K1th and K2th smallest elements\r\n    long long sumBetweenTwoKth( long long a[], long long n, long long k1, long long k2)\r\n    {\r\n        // Sorting the array in ascending order\r\n        sort(a, a+n);\r\n        \r\n        // Creating an unordered set to store unique elements\r\n        unordered_set<long long> s;\r\n        \r\n        long long c = 0, sum = 0;    \r\n    \r\n        // Swapping k1 and k2 if k1 is greater than k2\r\n        if(k1 > k2)\r\n            swap(k1, k2);\r\n    \r\n        for(int i =0; i < n; i++){\r\n            // Counting the distinct elements encountered\r\n            if(s.count(a[i]) == 0){\r\n                s.insert(a[i]);\r\n                c++;\r\n            }\r\n            \r\n            // Adding the element to the sum if it is between k1 and k2\r\n            if(c > k1 && c < k2)\r\n                sum += a[i];\r\n            \r\n            // Breaking the loop if c is equal to k2\r\n            if(c == k2)\r\n                break;\r\n        }\r\n        return sum;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution { \n    public static long sumBetweenTwoKth(long a[], long n, long k1, long k2)\n    {\n        //Sorting the array in ascending order\n        Arrays.sort(a);\n        \n        //Creating a set to store unique elements\n        Set<Long> s = new HashSet<Long>();\n        \n        //Initializing count and sum variables\n        long c = 0, sum = 0;\n\n        //Swapping k1 and k2 if k2 is smaller than k1\n        if(k1>k2)\n        {\n            long temp = k1;\n            k1 = k2;\n            k2 = temp;\n        }\n    \n        //Iterating over the array\n        for(int i=0;i<n;i++){\n            //Checking if the element is already present in the set\n            //If not, adding it to the set and incrementing the count\n            if(s.contains(a[i]) == false){\n                s.add(a[i]);\n                c++;\n            }\n            \n            //Checking if the count is between k1 and k2\n            //If yes, adding the element to the sum\n            if(c > k1 && c < k2)\n                sum+=a[i];\n            \n            //Breaking the loop if count is equal to k2\n            if(c == k2)\n                break;\n        }\n        \n        //Returning the sum\n        return sum;\n    }\n    \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to find the sum of elements between two kth smallest numbers.\n    def sumBetweenTwoKth(self, a, n, k1, k2):\n        \n        #sorting the array.\n        a.sort()\n        s = set()\n        c, sum = 0, 0\n\n        #swapping k1 and k2 if k1 is greater than k2.\n        if(k1>k2):\n            temp = k1\n            k1 = k2\n            k2 = temp\n\n        #iterating over the array.\n        for i in range(0,n):\n\n            #adding elements to the set and increasing the count.\n            if(a[i] in s) == False:\n                s.add(a[i])\n                c+=1\n\n            #calculating the sum for elements between k1 and k2.\n            if(c > k1 and c < k2):\n                sum+=a[i]\n\n            #breaking the loop if we reach k2.\n            if(c == k2):\n                break\n\n        return sum",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    sumBetweenTwoKth(A, N, K1, K2) {\n        A.sort((a, b) => a - b);\n        let s = new Set();\n        let c = 0;\n        let sum = 0;\n\n        if (K1 > K2) {\n            [K1, K2] = [K2, K1];\n        }\n\n        for (let i = 0; i < N; i++) {\n            if (!s.has(A[i])) {\n                s.add(A[i]);\n                c++;\n            }\n\n            if (c > K1 && c < K2) {\n                sum += A[i];\n            }\n\n            if (c === K2) {\n                break;\n            }\n        }\n\n        return sum;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Complete this function\n    public long sumBetweenTwoKth(long[] A, long N, long K1, long K2)\n    {\n        // Sorting the array in ascending order\n        Array.Sort(A);\n\n        // Creating a HashSet to store unique elements\n        HashSet<long> set = new HashSet<long>();\n\n        long c = 0, sum = 0;\n\n        // Swapping K1 and K2 if K1 is greater than K2\n        if (K1 > K2)\n            (K1, K2) = (K2, K1);\n\n        for (int i = 0; i < N; i++)\n        {\n            // Counting the distinct elements encountered\n            if (!set.Contains(A[i]))\n            {\n                set.Add(A[i]);\n                c++;\n            }\n\n            // Adding the element to the sum if it is between K1 and K2\n            if (c > K1 && c < K2)\n                sum += A[i];\n\n            // Breaking the loop if c is equal to K2\n            if (c == K2)\n                break;\n        }\n\n        return sum;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}