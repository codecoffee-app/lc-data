{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703988,
            "title": "Sum of elements in a matrix",
            "titleSlug": "sum-of-elements-in-a-matrix2000",
            "content": "<p><span style=\"font-size:18px\">Given a non null integer matrix Grid of dimensions NxM.Calculate the sum of its elements.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=2,M=3\r\nGrid=\r\n[[1,0,1],\r\n[-8,9,-2]]\r\n<strong>Output:</strong>\r\n1\r\n<strong>Explanation:</strong>\r\nThe sum of all elements of the matrix is \r\n(1+0+1-8+9-2)=1.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=3,M=5\r\nGrid=\r\n[[1,0,1,0,1],\r\n[0,1,0,1,0],\r\n[-1,-1,-1,-1,-1]]\r\n<strong>Output:</strong>\r\n0\r\n<strong>Explanation:</strong>\r\nThe sum of all elements of the matrix are\r\n(1+0+1+0+1+0+1+0+1+0-1-1-1-1-1)=0.</span></pre>\r\n\r\n<p><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything.Your task is to complete the function <strong>sumOfMatrix()</strong> which takes two integers N ,M and a 2D array Grid as input parameters and returns the sum of all the elements of the Grid.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(N*M)<br />\r\n<strong>Expected Auxillary Space:</strong>O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=N,M&lt;=1000<br />\r\n-1000&lt;=Grid[i][j]&lt;=1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-null integer matrix `Grid` of dimensions N x M, calculate the sum of its elements.",
                "constraints": [
                    "1 <= N, M <= 1000",
                    "-1000 <= Grid[i][j] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 2, M = 3\nGrid =\n[[1, 0, 1],\n [-8, 9, -2]]",
                        "output": "1",
                        "explanation": "The sum of the matrix elements is 1 + 0 + 1 + (-8) + 9 + (-2) = 1."
                    },
                    {
                        "input": "N = 3, M = 5\nGrid =\n[[1, 0, 1, 0, 1],\n [0, 1, 0, 1, 0],\n [-1, -1, -1, -1, -1]]",
                        "output": "0",
                        "explanation": "The sum of the matrix elements is 1 + 0 + 1 + 0 + 1 + 0 + 1 + 0 + 1 + 0 + (-1) + (-1) + (-1) + (-1) + (-1) = 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse all over the matrix and just add all the elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the sum of all elements in the given matrix.\n    int sumOfMatrix(int N, int M, vector<vector<int>> Grid) {\n        int sum = 0;\n        // iterating through each row\n        for (int i = 0; i < N; i++)\n            // iterating through each column in the row\n            for (int j = 0; j < M; j++) sum += Grid[i][j];\n        // returning the sum of all elements\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    // Function to find the sum of all elements in a matrix\r\n    int sumOfMatrix(int N, int M, int[][] Grid) {\r\n        // variable to store the sum\r\n        int sum = 0;\r\n        // loop through each row of the matrix\r\n        for (int i = 0; i < N; i++)\r\n            // loop through each column of the matrix\r\n            for (int j = 0; j < M; j++)\r\n                // add the current element to the sum\r\n                sum += Grid[i][j];\r\n        // return the final sum\r\n        return sum;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to find the sum of all elements in a matrix.\n    def sumOfMatrix(self,N,M,Grid):\n        sum=0\n        for i in range(N):\n            for j in range(M):\n                #Adding each element of the matrix to the sum.\n                sum+=Grid[i][j]\n        return sum",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    sumOfMatrix(N,M,Grid){\n       let sum = 0; //Initialize variable to store the sum of matrix elements\n       for(let row of Grid){ //Iterate over each row in the matrix\n        for(let el of row){ //Iterate over each element in the row\n            sum+=el; //Add the element to the sum\n        }\n       }\n       return sum; //Return the sum of the matrix elements\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}