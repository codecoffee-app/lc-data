{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703288,
            "title": "Sum of f(a[i], a[j]) over all pairs in an array of n integers",
            "titleSlug": "sum-of-fai-aj-over-all-pairs-in-an-array-of-n-integers4057",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]&nbsp;</strong>of positive integers, find the sum of <strong>f(a[i], a[j]) </strong>of all pairs (i, j) such that (1 &lt;= i &lt; j &lt;= n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>f(a[i], a[j]):</strong>&nbsp; &nbsp; &nbsp; &nbsp;<em>if</em>&nbsp;<strong>abs(a[j]-a[i])&nbsp;&gt; 1</strong></span></p>\n<p><span style=\"font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;f(a[i], a[j]) = a[j] - a[i]</span></p>\n<p><span style=\"font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<em>else &nbsp;if</em>&nbsp;<strong>abs(a[j]-a[i])</strong>&nbsp;&lt;= 1</span></p>\n<p><span style=\"font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;f(a[i], a[j]) = 0&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [6, 6, 4, 4]\n<strong>Output :</strong> -8\n<strong>Explanation: </strong>All pairs are: (6 - 6) + (4 - 6) + (4 - 6) + (4 - 6) + (4 - 6) + (4 - 4) = -8 return -8.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [1, 2, 3, 1, 3] <strong>\nOutput:</strong>  4\n<strong>Explanation:</strong> All pairs are:(3-1) + (1-3) + (3-1) + (3-1) = 4 ,(1-2),(3-2),(1-1),(2-1),(3-3),(3-2) these pairs will give zero as their absolute difference is &lt;= 1</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span><br /><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of positive integers, calculate the sum of `f(a[i], a[j])` for all pairs (i, j) such that 1 <= i < j <= n, where `f(a[i], a[j])` is defined as follows:\n\n*   If `abs(a[j] - a[i]) > 1`, then `f(a[i], a[j]) = a[j] - a[i]`.\n*   If `abs(a[j] - a[i]) <= 1`, then `f(a[i], a[j]) = 0`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[6, 6, 4, 4]",
                        "output": "-8",
                        "explanation": "The pairs are (6,6), (6,4), (6,4), (6,4), (6,4), (4,4).  Calculating f(a[i], a[j]) for each and summing them gives: 0 + (4-6) + (4-6) + (4-6) + (4-6) + 0 = -8."
                    },
                    {
                        "input": "[1, 2, 3, 1, 3]",
                        "output": "4",
                        "explanation": "The relevant pairs are (1,3), (3,1), (1,3), (3,1). Calculating f(a[i],a[j]) for each of them and summing them gives: (3-1) + (1-3) + (3-1) + (3-1) = 2 - 2 + 2 + 2 = 4. The other pairs have an absolute difference less than or equal to 1 and contribute 0 to the sum."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a hash map to efficiently track element frequencies and compute contributions based on their indices, adjusting results with counts of neighboring values.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    long long sum(vector<int>& arr) {\n        // map to keep a count of occurrences\n        int n = arr.size();\n        unordered_map<int, int> cnt;\n\n        // Traverse in the list from start to end\n        // number of times arr[i] can be in a pair and\n        // to get the difference we subtract pre_sum.\n        long long ans = 0, pre_sum = 0;\n        for (int i = 0; i < n; i++) {\n            ans += (i * arr[i]) - pre_sum;\n            pre_sum += arr[i];\n\n            // if the (arr[i] - 1) is present then\n            // subtract that value as f(arr[i], arr[i] - 1) = 0\n            if (cnt[arr[i] - 1])\n                ans -= cnt[arr[i] - 1];\n\n            // if the (arr[i] + 1) is present then\n            // add that value as f(arr[i], arr[i] - 1) = 0\n            // here we add as arr[i] - (arr[i] - 1) < 0 which would\n            // have been added as negative sum, so we add\n            // to remove this pair from the sum value\n            if (cnt[arr[i] + 1])\n                ans += cnt[arr[i] + 1];\n\n            // keeping a counter for every element\n            cnt[arr[i]]++;\n        }\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function for finding the sum\n    public static long sum(int[] arr) {\n        int n = arr.length;\n        Map<Integer, Integer> cnt = new HashMap<>();\n        long ans = 0;\n        long pre_sum = 0;\n        // Traverse in the list from start to end\n        // number of times arr[i] can be in a pair and\n        // to get the difference we subtract pre_sum.\n\n        for (int i = 0; i < n; i++) {\n            ans += (i * arr[i]) - pre_sum;\n            pre_sum += arr[i];\n\n            // if the (arr[i] - 1) is present then\n            // subtract that value as f(arr[i], arr[i] - 1) = 0\n\n            if (cnt.containsKey(arr[i] - 1)) {\n                ans -= cnt.get(arr[i] - 1);\n            }\n            // if the (arr[i] + 1) is present then\n            // add that value as f(arr[i], arr[i] - 1) = 0\n            // here we add as arr[i] - (arr[i] - 1) < 0 which would\n            // have been added as negative sum, so we add\n            // to remove this pair from the sum value\n            if (cnt.containsKey(arr[i] + 1)) {\n                ans += cnt.get(arr[i] + 1);\n            }\n\n            cnt.put(arr[i], cnt.getOrDefault(arr[i], 0) + 1);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import defaultdict\n\n\nclass Solution:\n    # Function for finding the sum\n    def sum(self, arr):\n        n = len(arr)\n        cnt = defaultdict(int)\n        ans = 0\n        pre_sum = 0\n        #  Traverse in the list from start to end\n        #  number of times arr[i] can be in a pair and\n        #  to get the difference we subtract pre_sum.\n        for i in range(n):\n            ans += (i * arr[i]) - pre_sum\n            pre_sum += arr[i]\n\n            #    if the (arr[i] - 1) is present then\n            #      subtract that value as f(arr[i], arr[i] - 1) = 0\n            if (arr[i] - 1) in cnt:\n                ans -= cnt[arr[i] - 1]\n\n            #   if the (arr[i] + 1) is present then\n            #  add that value as f(arr[i], arr[i] - 1) = 0\n            #  here we add as arr[i] - (arr[i] - 1) < 0 which would\n            #  have been added as negative sum, so we add\n            #  to remove this pair from the sum value\n            if (arr[i] + 1) in cnt:\n                ans += cnt[arr[i] + 1]\n\n            cnt[arr[i]] += 1\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function for finding the sum\n    sum(arr) {\n        const n = arr.length;\n        const cnt = new Map();\n        let ans = 0;\n        let pre_sum = 0;\n\n        // Traverse in the list from start to end\n        // number of times arr[i] can be in a pair and\n        // to get the difference we subtract pre_sum.\n        for (let i = 0; i < n; i++) {\n            ans += (i * arr[i]) - pre_sum;\n            pre_sum += arr[i];\n            // if the (arr[i] - 1) is present then\n            // subtract that value as f(arr[i], arr[i] - 1) = 0\n            if (cnt.has(arr[i] - 1)) {\n                ans -= cnt.get(arr[i] - 1);\n            }\n\n            // if the (arr[i] + 1) is present then\n            // add that value as f(arr[i], arr[i] - 1) = 0\n            // here we add as arr[i] - (arr[i] - 1) < 0 which would\n            // have been added as negative sum, so we add\n            // to remove this pair from the sum value\n            if (cnt.has(arr[i] + 1)) {\n                ans += cnt.get(arr[i] + 1);\n            }\n\n            cnt.set(arr[i], (cnt.get(arr[i]) || 0) + 1);\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}