{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704523,
            "title": "Sum of GCDs",
            "titleSlug": "sum-of-gcds1050",
            "content": "<p><span style=\"font-size:20px\">Given an integer N, find the sum of GCD(i, N) where i = 1&nbsp;to N. GCD denotes the greatest common divisor. Provide the answer modulus 10<sup>9</sup> + 7.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 2\n<strong>Output:</strong> 3\n<strong>Explanation</strong>:\nGCD(1,2)+GCD(2,2) = 1 + 2 = 3\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: N = 10\n<strong>Output:</strong> 27\n<strong>Explanation</strong>:\nGCD(1,10)+GCD(2,10)+...\n+GCD(9, 10)+GCD(10, 10)=1+2+..+1+10=27\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>sumOfGCDofPairs()</strong>&nbsp;which takes&nbsp;<strong>N&nbsp;</strong>as inputs and returns the answer.<br />\n<br />\n<strong>Expected Time Complexity:</strong>&nbsp;O(sqrt(N))<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>6</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>GCD(i, N) gives one of the divisors of N.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{   \npublic:\n    int getCount(int d, int n){ \n        int no = n / d; \n        int result = no; \n        for (int p = 2; p * p <= no; ++p) { \n            // Check if p is a prime factor \n            if (no % p == 0) { \n                // If yes, then update no \n                // and result \n                while (no % p == 0) \n                    no /= p; \n                result -= result / p; \n            } \n        } \n        // If no has a prime factor greater \n        // than sqrt(n) then at-most one such \n        // prime factor exists \n        if (no > 1) \n            result -= result / no; \n        // Return the result \n        return result; \n    } \n    long long int sumOfGCDofPairs(int n) { \n        long long int res = 0, mod = 1e9 + 7; \n        for (int i = 1; i * i <= n; i++) { \n            if (n % i == 0) { \n                // Calculate the divisors \n                int d1 = i; \n                int d2 = n / i; \n                // Return count of numbers \n                // from 1 to N with GCD d with N \n                res += (d1 * getCount(d1, n)) % mod; \n                res %= mod;\n                if (d1 != d2) \n                    res += (d2 * getCount(d2, n)) % mod; \n                res %= mod;\n            } \n        } \n      \n        return res % mod; \n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution   \n{   \n    //Complete this function\n    public long sumOfGCDofPairs(int N)\n    {   \n        long res = 0;\n        long mod = 1000000007;\n        for (int i = 1; i * i <= N; i++)\n        {\n            if (N % i == 0)\n            {\n                // Calculate the divisors\n                int d1 = i;\n                int d2 = N / i;\n                // Return count of numbers\n                // from 1 to N with GCD d with N\n                res += (d1 * getCount(d1, N)) % mod;\n                res %= mod;\n                if (d1 != d2)\n                    res += (d2 * getCount(d2, N)) % mod;\n                res %= mod;\n            }\n        }\n        return res % mod;\n    }\n\n    public int getCount(int d, int N)\n    {\n        int no = N / d;\n        int result = no;\n        for (int p = 2; p * p <= no; ++p)\n        {\n            // Check if p is a prime factor\n            if (no % p == 0)\n            {\n                // If yes, then update no \n                // and result \n                while (no % p == 0)\n                    no /= p;\n                result -= result / p;\n            }\n        }\n        // If no has a prime factor greater \n        // than sqrt(N) then at-most one such \n        // prime factor exists \n        if (no > 1)\n            result -= result / no;\n        // Return the result \n        return result;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}