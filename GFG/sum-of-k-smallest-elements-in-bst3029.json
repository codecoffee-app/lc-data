{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705873,
            "title": "Sum of k smallest elements in BST",
            "titleSlug": "sum-of-k-smallest-elements-in-bst3029",
            "content": "<p>&nbsp;<span style=\"font-size:18px\">Given a Binary Search Tree. Find sum of all elements smaller than and&nbsp;equal to Kth smallest element.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\n\\t    20\r\n\\t  /    \\\r\n\\t 8     22\r\n     /    \\\r\n    4     12\r\n\\t   /    \\\r\n\\t  10    14   , K=3\r\n\r\n<strong>Output:</strong> 22\r\n<strong>Explanation:</strong>\r\nSum of 3 smallest elements are: \r\n4 + 8 + 10 = 22</span></pre>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Example 2:</strong></span></div>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n     10\r\n&nbsp;   /  \\\r\n&nbsp;  5    11\r\n&nbsp; / \\ \r\n&nbsp;4   7\r\n&nbsp;     \\\r\n&nbsp;\\t8 , K=2\r\n\r\n<strong>Output:</strong> 9\r\n<strong>Explanation:</strong>\r\nThe sum of two smallest elements \r\nis 4+5=9.</span></pre>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Your task:</strong></span></div>\r\n\r\n<div><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function <strong>sum() </strong>which takes the <strong>root node</strong> and an <strong>integer K</strong> as input parameters and returns the sum of all elements smaller than and&nbsp;equal to kth&nbsp;smallest element.</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(K)</span></div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong> O(1)</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=Number of nodes in BST&lt;=100<br />\r\n1&lt;=K&lt;=N</span></div>\r\n\r\n<p>&nbsp;&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST), find the sum of all elements that are less than or equal to the Kth smallest element in the BST.",
                "constraints": [
                    "1 <= Number of nodes in BST <= 100",
                    "1 <= K <= N, where N is the number of nodes in the BST"
                ],
                "testcases": [
                    {
                        "input": "BST: [20, 8, 22, 4, 12, 10, 14], K = 3",
                        "output": "22",
                        "explanation": "The 3 smallest elements are 4, 8, and 10. Their sum is 4 + 8 + 10 = 22."
                    },
                    {
                        "input": "BST: [10, 5, 11, 4, 7, null, 8], K = 2",
                        "output": "9",
                        "explanation": "The 2 smallest elements are 4 and 5. Their sum is 4 + 5 = 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse BST in inorder traversal.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nint ksmallestElementSumRec(Node *root, int k, int &count) \r\n{ \r\n    // Base cases \r\n    if (root == NULL) \r\n        return 0; \r\n    if (count > k) \r\n        return 0; \r\n  \r\n    // Compute sum of elements in left subtree \r\n    int res = ksmallestElementSumRec(root->left, k, count); \r\n    if (count >= k) \r\n        return res; \r\n  \r\n    // Add root's data \r\n    res += root->data; \r\n  \r\n    // Add current Node \r\n    count++; \r\n    if (count >= k) \r\n      return res; \r\n  \r\n    // If count is less than k, return right subtree Nodes \r\n    return res + ksmallestElementSumRec(root->right, k, count); \r\n}\r\n\r\nint sum(Node *root, int k)\r\n{\r\n    int count = 0; \r\n    return ksmallestElementSumRec(root, k, count); \r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Tree {\r\n    static int count;\r\n    int sum(Node root, int k)\r\n    {\r\n        count = 0; \r\n        return ksmallestElementSumRec(root, k); \r\n    }\r\n    int ksmallestElementSumRec(Node root, int k) \r\n    { \r\n        // Base cases \r\n        if (root == null) \r\n            return 0; \r\n        if (count > k) \r\n            return 0; \r\n      \r\n        // Compute sum of elements in left subtree \r\n        int res = ksmallestElementSumRec(root.left, k); \r\n        if (count >= k) \r\n            return res; \r\n      \r\n        // Add root's data \r\n        res += root.data; \r\n      \r\n        // Add current Node \r\n        count++; \r\n        if (count >= k) \r\n          return res; \r\n      \r\n        // If count is less than k, return right subtree Nodes \r\n        return res + ksmallestElementSumRec(root.right, k); \r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "'''\n# Node Class:\nclass Node:\n    def __init__(self,val):\n        self.key = val\n        self.left = None\n        self.right = None\n'''\n\ndef summ(root, k):\n    # code here\n    \n    #creating an empty list to store the inorder traversal of the tree\n    res = []\n    \n    #inorder traversal function\n    def inorder(node):\n        if node:\n            #recursively traversing left subtree\n            inorder(node.left)\n            \n            #appending the current node's key to the result list\n            res.append(node.key)\n            \n            #recursively traversing right subtree\n            inorder(node.right)\n            \n    \n    #calling the inorder traversal function with the root node\n    inorder(root)\n    \n    #returning the sum of the first k elements in the result list\n    return sum(res[:k])",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}