{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704939,
            "title": "Sum of large numbers",
            "titleSlug": "sum-of-large-numbers5827",
            "content": "<p><span style=\"font-size:18px\">A pair&nbsp;of two very large positive integers is given. Find their sum.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>s1 = &quot;63457&quot;, s2 = &quot;645&quot;\r\n<strong>Output: </strong>64102\r\n<strong>Explanation: </strong>63457 + 645 = 64102\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>s1 = &quot;101&quot;, s2 = &quot;102&quot;\r\n<strong>Output: </strong>203\r\n<strong>Explanation: </strong>101 + 102 = 203</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task to complete the function&nbsp;<strong>add()</strong>&nbsp;which takes two numbers in string format as input parameter and returns their sum in string format.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(max(len(s1), len(s2))<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= |s1|, |s2| &lt;= 100000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two very large positive integers represented as strings, find their sum, also represented as a string.",
                "constraints": [
                    "1 <= |s1|, |s2| <= 100000"
                ],
                "testcases": [
                    {
                        "input": "s1 = \"63457\", s2 = \"645\"",
                        "output": "64102",
                        "explanation": "The sum of 63457 and 645 is 64102."
                    },
                    {
                        "input": "s1 = \"101\", s2 = \"102\"",
                        "output": "203",
                        "explanation": "The sum of 101 and 102 is 203."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>First make two numbers of same length and then do addition.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n\tpublic:\n\t//Function to add two strings representing numbers.\n   \tstring add(string s1, string s2){\n   \t\t//if length of s1 is greater than s2, swap the strings.\n   \t\tif(s1.size() > s2.size())\n            swap(s2, s1);\n        \n   \t\t//calculating the difference in lengths of s1 and s2.\n        int rem = s2.size() - s1.size();\n        \n   \t\t//adding leading zeros to s1 to make both strings have same length.\n        s1 = string(rem, '0') + s1;\n        \n   \t\t//initializing an empty string to store the result.\n        string ans = \" \";\n        \n   \t\t//initializing carry to 0.\n        int carry = 0;\n        \n   \t\t//iterating from right to left over the digits of the strings.\n        for(int i = s1.size() - 1; i >= 0; i--){\n   \t\t\t//converting the current digits of s1 and s2 from char to int and adding them.\n            int sum = s1[i] - '0' + s2[i] - '0';\n            \n   \t\t\t//adding the carry to the sum.\n            sum += carry;\n            \n   \t\t\t//updating the carry and the sum.\n            carry = sum / 10;\n            sum %= 10;\n            \n   \t\t\t//appending the sum digit to the answer string.\n            ans += char(sum + '0');\n   \t\t}\n        \n   \t\t//if there is still a carry left, appending it to the answer string.\n        if(carry)\n            ans += char(carry + '0');\n        \n   \t\t//reversing the answer string to get the correct result.\n        reverse(ans.begin(), ans.end());\n        \n   \t\t//returning the answer string.\n        return ans;\n   \t}    \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}