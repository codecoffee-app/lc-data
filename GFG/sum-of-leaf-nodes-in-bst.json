{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700547,
            "title": "Sum of leaf nodes in BST",
            "titleSlug": "sum-of-leaf-nodes-in-bst",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>Binary Search Tree </strong>with <strong>n</strong> nodes, find the sum of all <strong>leaf nodes</strong>. <strong>BST </strong>has the following property&nbsp;(duplicate nodes are possible):</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">The<strong> left subtree </strong>of a node contains only nodes with <strong>keys less </strong>than the node&rsquo;s key.</span></li>\n<li><span style=\"font-size: 18px;\">The<strong> right subtree </strong>of a node contains only nodes with<strong> keys greater</strong> <strong>than </strong>or <strong>equal </strong>to the node&rsquo;s key.</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\">Your task is to determine the <strong>total sum </strong>of the values of the <strong>leaf nodes</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note:&nbsp;</span></strong><span style=\"font-size: 18px;\">Input array <strong>arr</strong> doesn't represent the actual <strong>BST</strong>, it represents the order in which the elements will be added into the <strong>BST</strong>.</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Example 1:</strong><br /><strong>Input:</strong><br />n = 6<br />arr = {67, 34, 82, 12, 45, 78}<br /></span><span style=\"font-size: 18px;\"><strong>Output:</strong><br />135<br /></span><span style=\"font-size: 18px;\"><strong>Explanation:</strong><br />In first test case, the BST for the given input will be-</span><br /><span style=\"font-size: 18px;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 67</span><br /><span style=\"font-size: 18px;\">   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /     \\</span><br /><span style=\"font-size: 18px;\">\\t   &nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 82</span><br /><span style=\"font-size: 18px;\">\\t  &nbsp; /&nbsp;&nbsp; \\&nbsp; &nbsp; /</span><br /><span style=\"font-size: 18px;\">\\t   12&nbsp;&nbsp; 45&nbsp;&nbsp;78</span><br /><br /><span style=\"font-size: 18px;\">Hence, the required sum= 12 + 45 + 78 = 135</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong><br /><strong>Input:</strong><br />n = 1<br />arr = {45}</span><br /><span style=\"font-size: 18px;\"><strong>Output:</strong><br />45</span><br /><span style=\"font-size: 18px;\"><strong>Explanation:<br /></strong>As the root node is a leaf node itself,&nbsp;<br />the required sum will be 45</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Your Task:</span></strong><br /><span style=\"font-size: 18px;\">You don't have to take any input or print anything. You are required to complete the function <strong>sumOfLeafNodes&nbsp;</strong>that takes&nbsp;<strong>root node of a BST </strong>with <strong>n</strong> nodes as&nbsp;<strong>parameter&nbsp;</strong>and returns <strong>the sum of leaf nodes</strong>.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>4<br /></sup>1 &lt;= Value of each node &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) constructed by inserting 'n' nodes, determine the sum of all leaf nodes within the BST. A BST adheres to the following properties:\n\n*   The left subtree of a node contains only nodes with keys less than the node's key.\n*   The right subtree of a node contains only nodes with keys greater than or equal to the node's key.\n\nYour task is to calculate the total sum of the values held by all leaf nodes in the BST.  Note that the input array represents the insertion order into the BST, not the BST itself.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "1 <= Value of each node <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 6\narr = {67, 34, 82, 12, 45, 78}",
                        "output": "135",
                        "explanation": "A BST is constructed by inserting the elements in the given array in order. The BST will have 67 as the root. The left subtree is formed with 34, 12, 45, and the right subtree with 82, 78. The leaf nodes are 12, 45, and 78. The sum is 12 + 45 + 78 = 135"
                    },
                    {
                        "input": "n = 1\narr = {45}",
                        "output": "45",
                        "explanation": "Since there is only one node in the tree (root), it is also a leaf node.  Therefore, the sum is simply the value of the root node: 45."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #1e2229; font-family: Nunito; font-size: 16px; background-color: #ffffff;\">We know the fact that leaf nodes are the nodes whose left and right nodes are NULL.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution\n{\n    public:\n        // Function to calculate the sum of leaf nodes\n        int sumOfLeafNodes(Node *root){\n            // If the node is empty, return 0\n            if (root == NULL) return 0;\n        \n            // If the node has no children, return its data\n            if (root->left == NULL && root->right == NULL)\n                return root->data;\n        \n            // Recursive call to calculate the sum of leaf nodes in the left and right subtrees\n            return sumOfLeafNodes(root->left) + sumOfLeafNodes(root->right);\n        }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int sumOfLeafNodes(Node root) {\n        // If root is null, return 0\n        if(root == null)\n          return 0;\n          \n        // If root has no left or right child, return its data as it is a leaf node\n        if(root.left == null && root.right == null)\n          return root.data;\n          \n        // Recursively calculate the sum of leaf nodes in the left and right subtrees\n        return sumOfLeafNodes(root.left)+sumOfLeafNodes(root.right);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\nimport sys\nsys.setrecursionlimit(10**6)\n\n##Structure of node\n'''\nclass Node:\n    def __init__(self, data=0):\n        self.data=0\n        self.left=None\n        self.right=None\n'''\n\nclass Solution:\n    def sumOfLeafNodes(self, root):\n        # Base case: if root is None, return 0\n        if root is None:\n            return 0\n        \n        # If the root is a leaf node, return its value\n        if(root.left is None and root.right is None):\n            return root.data\n        \n        # Recursively find the sum of leaf nodes in the left and right subtrees\n        return self.sumOfLeafNodes(root.left)+self.sumOfLeafNodes(root.right)",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\r\n\r\npublic static int sumOfLeafNodes(Node root)\r\n{\r\n    if(root==null)\r\n    return 0;\r\n    if(root.left==null && root.right==null)\r\n    return root.data;\r\n    return sumOfLeafNodes(root.left)+sumOfLeafNodes(root.right);\r\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {Node} root\n * @returns {number}\n */\n\nclass Solution {\n    //Structure of node\n    /**\n     * class Node {\n     *     constructor() {\n     *         this.data=0;\n     *         this.left=null;\n     *         this.right=null;\n     *     }\n     * }\n     */\n\n    //Function to return sum of all the leaf nodes.\n    sumOfLeafNodes(root)\n    {\n        // Base case: if root is null, return 0\n        if (root === null) {\n            return 0;\n        }\n        \n        // If the root is a leaf node, return its value\n        if (root.left === null && root.right === null) {\n            return root.data;\n        }\n        \n        // Recursively find the sum of leaf nodes in the left and right subtrees\n        return this.sumOfLeafNodes(root.left) + this.sumOfLeafNodes(root.right);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}