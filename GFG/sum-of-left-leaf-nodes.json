{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700667,
            "title": "Sum of Left Leaf Nodes",
            "titleSlug": "sum-of-left-leaf-nodes",
            "content": "<p><span >Given a Binary Tree<strong>. </strong>Find&nbsp;the sum of all the&nbsp;leaf nodes that are left&nbsp;child of their parent&nbsp;of the given binary tree.<br /><br /><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:\n&nbsp;\\t</strong>1\n&nbsp;    /   \\\n&nbsp;   2     3<strong>\nOutput: </strong>2\n</span></pre>\n<pre><span ><strong>Input</strong> : \n\\t   1\n\\t  /  \\\n\\t 2    3\n     /  \\     \\\n    4    5     8 \n  /  \\\\t  /  \\\n 7    2\\t6    9\n<strong>Output</strong>: 13\n<strong>Explanation: </strong>sum = 6 + 7 = 13</span></pre>\n<pre><span ><strong>Input: </strong>1<strong>\nOutput: </strong>0<strong><br /></strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">There is no leaf node, so sum is 0.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;=10<sup>6</sup><sup><br /></sup>1 &lt;= node-&gt;data &lt;=10<sup>5</sup><sup><br /></sup>It is guaranteed that sum will not exceed integer max value<sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the sum of all leaf nodes that are the left children of their parent nodes.",
                "constraints": [
                    "1 <= number of nodes <= 10^6",
                    "1 <= node->data <= 10^5",
                    "The sum will not exceed the maximum integer value."
                ],
                "testcases": [
                    {
                        "input": "     1\n    /   \\\n   2     3",
                        "output": "2",
                        "explanation": "The left leaf child is 2."
                    },
                    {
                        "input": "   1\n  /  \\\n 2    3\n     /  \\\n    4    5\n  /  \\    /  \\\n 7    2    6    9",
                        "output": "13",
                        "explanation": "The left leaf children are 7 and 6.  Their sum is 7 + 6 = 13."
                    },
                    {
                        "input": "1",
                        "output": "0",
                        "explanation": "There are no left leaf nodes, so the sum is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The idea is to traverse the tree, starting from the root. For every node, check if its left subtree is a leaf. If it is, then add it to the result.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // This function returns the sum of all left leaves in a given binary tree\n    int leftLeavesSum(Node *root) {\n        // Initialize result\n        int res = 0;\n\n        // Update result if root is not NULL\n        if (root != NULL) {\n            // If left of root is not NULL and it is a leaf, then add key of left child\n            if (isLeaf(root->left))\n                res += root->left->data;\n            else // Else recur for left child of root\n                res += leftLeavesSum(root->left);\n\n            // Recur for right child of root and update res\n            res += leftLeavesSum(root->right);\n        }\n\n        // return result\n        return res;\n    }\n\n    // Utility function to check if a node is a leaf node\n    bool isLeaf(Node *node) {\n        if (node == NULL)\n            return false;\n        if (node->left == NULL && node->right == NULL)\n            return true;\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass Solution{\n\n    // Function to check if a node is a leaf node\n    public boolean isLeaf(Node root) \n    { \n        if(root == null)  // If the root is null, it is not a leaf node\n           return false; \n        if (root.left == null && root.right == null)  // If both left and right child are null, it is a leaf node\n           return true; \n        \n        return false;  // If above conditions are not met, it is not a leaf node\n    } \n    \n    // Function to calculate the sum of left leaf nodes\n    public int leftLeavesSum(Node root) \n    { \n        int ans = 0; // Initialize the answer as 0\n      \n        if(root != null) // If the root is not null\n        {\n            if(isLeaf(root.left))  // If the left child is a leaf node, add its data to the answer\n                ans += root.left.data; \n            else \n                ans += leftLeavesSum(root.left); // If the left child is not a leaf node, recursively calculate sum for left subtree\n            ans += leftLeavesSum(root.right); // Recursively calculate sum for right subtree\n        }\n        \n        return ans; // Return the final sum\n    } \n\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Solution class that contains the required methods\nclass Solution:\n    # Function to check if a node is a leaf node or not\n    def isLeaf(self, node):\n        if node is None:\n            return False\n        if node.left is None and node.right is None:\n            return True\n        return False\n\n    # Function to calculate the sum of left leaves of a binary tree\n    def leftLeavesSum(self, root_node):\n        if root_node is None:\n            return 0\n\n        ans = 0\n\n        # If the left child of the current node is a leaf node, add its value to the sum\n        if self.isLeaf(root_node.left):\n            ans += root_node.left.data\n        else:\n            # If the left child is not a leaf node, recursively calculate the sum of left leaves of the left subtree\n            ans += self.leftLeavesSum(root_node.left)\n\n        # Recursively calculate the sum of left leaves of the right subtree\n        ans += self.leftLeavesSum(root_node.right)\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/*\r\nclass Node\r\n{\r\n    constructor(x){\r\n        this.data=x;\r\n        this.left=null;\r\n        this.right=null;\r\n    }\r\n}\r\n*/\r\n\r\n/**\r\n * @param {Node} root\r\n * @return {number} \r\n*/\r\nclass Solution {\r\n  \tleftLeavesSum(root){\r\n  \t\t//code here\r\n        if (root == null) {\r\n            return 0;\r\n        }\r\n\r\n        let sum = 0;\r\n\r\n        if (root.left != null && root.left.left == null && root.left.right == null) {\r\n            sum += root.left.data;\r\n        }\r\n\r\n        sum += this.leftLeavesSum(root.left);\r\n        sum += this.leftLeavesSum(root.right);\r\n\r\n        return sum;\r\n  \t}\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}