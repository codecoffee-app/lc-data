{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703396,
            "title": "Sum of Lengths of Non-Overlapping SubArrays",
            "titleSlug": "sum-of-lengths-of-non-overlapping-subarrays2237",
            "content": "<p><span style=\"font-family: tahoma,geneva,sans-serif;\"><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>, the task is to find the maximum sum of lengths of all non-overlapping subarrays with <strong>k</strong>&nbsp;as the maximum element in the subarray.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 1, 4, 9, 2, 3, 8, 3, 4]. k = 4 \n<strong>Output:</strong> 5\n<strong>Explanation</strong>: <br />{2, 1, 4} =&gt; Length = 3<br />{3, 4} =&gt; Length = 2<br />So, 3 + 2 = 5 is the answer.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 2, 3, 4, 1], k = 4\n<strong>Output:</strong>&nbsp;7\n<strong>Explanation:</strong> {1, 2, 3, 2, 3, 4, 1} =&gt; Length = 7.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6<br /></sup></span><span style=\"font-size: 18px;\">0 &le; arr[i] &le; 10<sup>6</sup><sup><br /></sup></span><span style=\"font-size: 18px;\">0 </span><span style=\"font-size: 18px;\">&le; k&nbsp;</span><span style=\"font-size: 18px;\">&le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, find the maximum sum of lengths of all non-overlapping subarrays where `k` is the maximum element within each subarray.",
                "constraints": [
                    "1 \u2264 arr.size() \u2264 10^6",
                    "0 \u2264 arr[i] \u2264 10^6",
                    "0 \u2264 k \u2264 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [2, 1, 4, 9, 2, 3, 8, 3, 4], k = 4",
                        "output": "5",
                        "explanation": "The subarrays are {2, 1, 4} with length 3 and {3, 4} with length 2.  The sum of their lengths is 3 + 2 = 5."
                    },
                    {
                        "input": "arr[] = [1, 2, 3, 2, 3, 4, 1], k = 4",
                        "output": "7",
                        "explanation": "The subarray is {1, 2, 3, 2, 3, 4, 1} with length 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >To solve the problem, track subarrays with k as the maximum element. Count valid subarrays where k appears and sum their lengths. Skip elements greater than k to avoid overlap.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Solution class where the user function is implemented\nclass Solution {\n  public:\n    // Function to calculate the maximum sum of consecutive elements less than or equal\n    // to k\n    int calculateMaxSumLength(vector<int> &arr, int k) {\n        int n = arr.size();\n        int ans = 0;\n        int count = 0; // Variable to store the count of consecutive elements less than\n                       // or equal to k\n        int flag = 0;  // Flag to check if k is present in the consecutive elements\n\n        for (int i = 0; i < n;) {\n            count = 0;\n            flag = 0;\n            while (i < n && arr[i] <= k) {\n                count++;\n                if (arr[i] == k)\n                    flag = 1;\n                i++;\n            }\n            if (flag == 1)\n                ans += count; // Adding the count of consecutive elements containing k\n            while (i < n && arr[i] > k)\n                i++; // Skipping consecutive elements greater than k\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to calculate the maximum sum of consecutive elements less than or equal\n    // to k\n    public int calculateMaxSumLength(List<Integer> arr, int k) {\n        int n = arr.size();\n        int ans = 0;\n        int count = 0; // Variable to store the count of consecutive elements less than\n                       // or equal to k\n        int flag = 0;  // Flag to check if k is present in the consecutive elements\n\n        for (int i = 0; i < n;) {\n            count = 0;\n            flag = 0;\n            while (i < n && arr.get(i) <= k) {\n                count++;\n                if (arr.get(i) == k) flag = 1;\n                i++;\n            }\n            if (flag == 1)\n                ans += count; // Adding the count of consecutive elements containing k\n            while (i < n && arr.get(i) > k)\n                i++; // Skipping consecutive elements greater than k\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def calculate_max_sum_length(self, arr, k):\n        n = len(arr)\n        ans = 0\n        count = 0  # Variable to store the count of consecutive elements less than or equal to k\n        flag = 0  # Flag to check if k is present in the consecutive elements\n\n        i = 0\n        while i < n:\n            count = 0\n            flag = 0\n            while i < n and arr[i] <= k:\n                count += 1\n                if arr[i] == k:\n                    flag = 1\n                i += 1\n            if flag == 1:\n                ans += count  # Adding the count of consecutive elements containing k\n            while i < n and arr[i] > k:\n                i += 1  # Skipping consecutive elements greater than k\n\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    // Function to calculate the maximum sum of consecutive elements less than or equal\n    // to k\n    calculateMaxSumLength(arr, k) {\n        let n = arr.length;\n        let ans = 0;\n        let count = 0; // Variable to store the count of consecutive elements less than\n                       // or equal to k\n        let flag = 0;  // Flag to check if k is present in the consecutive elements\n\n        for (let i = 0; i < n;) {\n            count = 0;\n            flag = 0;\n            while (i < n && arr[i] <= k) {\n                count++;\n                if (arr[i] === k) {\n                    flag = 1;\n                }\n                i++;\n            }\n            if (flag === 1) {\n                ans += count; // Adding the count of consecutive elements containing k\n            }\n            while (i < n && arr[i] > k) {\n                i++; // Skipping consecutive elements greater than k\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}