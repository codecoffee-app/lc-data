{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878634,
            "title": "Sum of Max of Subarrays",
            "titleSlug": "sum-of-max-of-subarrays",
            "content": "<p><span style=\"font-family: arial, helvetica, sans-serif;\"><span style=\"color: #273239; font-size: 18px; letter-spacing: 0.162px; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Given an array&nbsp;</span><strong style=\"color: #273239; font-size: 18px; letter-spacing: 0.162px; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">arr[]</strong><span style=\"color: #273239; font-size: 18px; letter-spacing: 0.162px; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">, the task is to find the sum of the maximum <strong>elements</strong> of every possible non-empty sub-arrays of the given array <strong>arr[]</strong>.</span></span></p>\n<p><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Note</strong>: The answer will always fit into <strong>32 bit integer</strong>.</span></p>\n<p><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-family: arial, helvetica, sans-serif;\"><span style=\"box-sizing: border-box; line-height: 1.7em; font-size: 14pt; color: var(--text-color) !important; background-color: unset !important;\"><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: var(--text-color) !important; background-color: unset !important;\">Input: </span><span style=\"color: #273239; letter-spacing: 0.162px; word-spacing: 0px; white-space-collapse: preserve; background-color: #f9f9f9;\">arr[] = [1, 3, 2]<br /></span></span><span style=\"box-sizing: border-box; line-height: 1.7em; font-size: 14pt; color: var(--text-color) !important; background-color: unset !important;\"><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: var(--text-color) !important; background-color: unset !important;\">Output: </span><span style=\"color: #273239; letter-spacing: 0.162px; word-spacing: 0px; white-space-collapse: preserve; background-color: #f9f9f9;\">15<br /></span></span><span ><span style=\"box-sizing: border-box; line-height: 1.7em; color: var(--text-color) !important; background-color: unset !important;\"><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: var(--text-color) !important; background-color: unset !important;\">Explanation: </span></span>All possible non-empty subarrays of [1, 3, 2] are [1], [3], [2], [1, 3], [3, 2] and [1, 3, 2]. The maximum elements of the subarrays are 1, 3, 2, 3, 3, 3 respectively. The sum will be 15.</span></span></pre>\n<pre style=\"box-sizing: border-box; line-height: 1.7em; color: #1e2229; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; border: 1px solid var(--card-border); border-radius: 4px; white-space: break-spaces; word-spacing: 4px; font-family: var(--gfg-font-primary) !important;\"><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><span style=\"box-sizing: border-box; line-height: 1.7em; color: var(--text-color) !important; background-color: unset !important;\"><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: var(--text-color) !important; background-color: unset !important;\">Input: </span><span style=\"color: #273239; letter-spacing: 0.162px; word-spacing: 0px; white-space-collapse: preserve; background-color: #f9f9f9;\">arr[] = [3, 1]<br /></span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: var(--text-color) !important; background-color: unset !important;\">Output: </span>7<br /><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: var(--text-color) !important; background-color: unset !important;\">Explanation: </span></span>All possible non-empty subarrays of [3, 1] are [3], [1] and [3, 1]. The maximum elements of the subarrays are 3, 1, 3 respectively. The sum will be 7.</span></pre>\n<pre style=\"box-sizing: border-box; line-height: 1.7em; color: #1e2229; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; border: 1px solid var(--card-border); border-radius: 4px; white-space: break-spaces; word-spacing: 4px; font-family: var(--gfg-font-primary) !important;\"><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><span style=\"box-sizing: border-box; line-height: 1.7em; color: var(--text-color) !important; background-color: unset !important;\"><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: var(--text-color) !important; background-color: unset !important;\">Input: </span><span style=\"color: #273239; letter-spacing: 0.162px; word-spacing: 0px; white-space-collapse: preserve; background-color: #f9f9f9;\">arr[] = [8, 0, 1]</span>\n<span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: var(--text-color) !important; background-color: unset !important;\">Output: </span><span style=\"color: #273239; letter-spacing: 0.162px; word-spacing: 0px; white-space-collapse: preserve; background-color: #f9f9f9;\">26</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: var(--text-color) !important; background-color: unset !important;\">\nExplanation: </span></span>All possible non-empty subarrays of [8, 0, 1] are [8], [0], [1], [8, 0], [0, 1] and [8, 0, 1]. The maximum elements of the subarrays are 8, 0, 1, 8, 1, 8 respectively. The sum will be 26.</span></pre>\n<p><span style=\"font-family: arial, helvetica, sans-serif;\"><strong><span >Constraints:<br /></span></strong></span><span style=\"font-family: arial, helvetica, sans-serif;\"><span style=\"box-sizing: border-box; line-height: 1.7em; font-size: 14pt; color: #1e2229; background-color: #ffffff;\">1 &lt;= arr.size() &lt;= 10<sup>4<br /></sup>0 &lt;= arr[i] &lt;= 10<sup>9</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Try to use monotonic stack concept.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int sumOfMax(vector<int> &arr) {\n        int n = arr.size();\n        int res = 0;\n        stack<int> stk;\n        vector<int> left(n), right(n);\n\n        // Finding the left boundary for each element\n        for (int i = 0; i < n; ++i) {\n\n            // Pop elements smaller than arr[i] from stack\n            while (!stk.empty() && arr[stk.top()] < arr[i]) {\n                stk.pop();\n            }\n\n            // Calculate left boundary count\n            left[i] = (stk.empty()) ? (i + 1) : (i - stk.top());\n\n            // Push current index into stack\n            stk.push(i);\n        }\n\n        // Clear the stack for right boundary computation\n        while (!stk.empty()) {\n            stk.pop();\n        }\n\n        // Finding the right boundary for each element\n        for (int i = n - 1; i >= 0; --i) {\n\n            // Pop elements smaller or equal to arr[i] from stack\n            while (!stk.empty() && arr[stk.top()] <= arr[i]) {\n                stk.pop();\n            }\n\n            // Calculate right boundary count\n            right[i] = (stk.empty()) ? (n - i) : (stk.top() - i);\n\n            // Push current index into stack\n            stk.push(i);\n        }\n\n        // Compute sum of max elements of all subarrays\n        for (int i = 0; i < n; ++i) {\n\n            // Contribution of arr[i] as max in subarrays\n            res += arr[i] * left[i] * right[i];\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int sumOfMax(int[] arr) {\n        int n = arr.length;\n        int res = 0;\n        Stack<Integer> stk = new Stack<>();\n        int[] left = new int[n], right = new int[n];\n\n        // Finding the left boundary for each element\n        for (int i = 0; i < n; ++i) {\n\n            // Pop elements smaller than arr[i] from stack\n            while (!stk.isEmpty() && arr[stk.peek()] < arr[i]) {\n                stk.pop();\n            }\n\n            // Calculate left boundary count\n            left[i] = (stk.isEmpty()) ? (i + 1) : (i - stk.peek());\n\n            // Push current index into stack\n            stk.push(i);\n        }\n\n        // Clear the stack for right boundary computation\n        stk.clear();\n\n        // Finding the right boundary for each element\n        for (int i = n - 1; i >= 0; --i) {\n\n            // Pop elements smaller or equal to arr[i] from stack\n            while (!stk.isEmpty() && arr[stk.peek()] <= arr[i]) {\n                stk.pop();\n            }\n\n            // Calculate right boundary count\n            right[i] = (stk.isEmpty()) ? (n - i) : (stk.peek() - i);\n\n            // Push current index into stack\n            stk.push(i);\n        }\n\n        // Compute sum of max elements of all subarrays\n        for (int i = 0; i < n; ++i) {\n\n            // Contribution of arr[i] as max in subarrays\n            res += arr[i] * left[i] * right[i];\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def sumOfMax(self, arr):\n        n = len(arr)\n        res = 0\n        stk = []\n        left = [0] * n\n        right = [0] * n\n\n        # Finding the left boundary for each element\n        for i in range(n):\n\n            # Pop elements smaller than arr[i] from stack\n            while stk and arr[stk[-1]] < arr[i]:\n                stk.pop()\n\n            # Calculate left boundary count\n            left[i] = (i + 1) if not stk else (i - stk[-1])\n\n            # Push current index into stack\n            stk.append(i)\n\n        # Clear the stack for right boundary computation\n        stk.clear()\n\n        # Finding the right boundary for each element\n        for i in range(n - 1, -1, -1):\n\n            # Pop elements smaller or equal to arr[i] from stack\n            while stk and arr[stk[-1]] <= arr[i]:\n                stk.pop()\n\n            # Calculate right boundary count\n            right[i] = (n - i) if not stk else (stk[-1] - i)\n\n            # Push current index into stack\n            stk.append(i)\n\n        # Compute sum of max elements of all subarrays\n        for i in range(n):\n\n            # Contribution of arr[i] as max in subarrays\n            res += arr[i] * left[i] * right[i]\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    sumOfMax(arr) {\n        let n = arr.length;\n        let res = 0;\n        let stk = [];\n        let left = new Array(n).fill(0);\n        let right = new Array(n).fill(0);\n\n        // Finding the left boundary for each element\n        for (let i = 0; i < n; ++i) {\n\n            // Pop elements smaller than arr[i] from stack\n            while (stk.length > 0 && arr[stk[stk.length - 1]] < arr[i]) {\n                stk.pop();\n            }\n\n            // Calculate left boundary count\n            left[i] = (stk.length === 0) ? (i + 1) : (i - stk[stk.length - 1]);\n\n            // Push current index into stack\n            stk.push(i);\n        }\n\n        // Clear the stack for right boundary computation\n        stk = [];\n\n        // Finding the right boundary for each element\n        for (let i = n - 1; i >= 0; --i) {\n\n            // Pop elements smaller or equal to arr[i] from stack\n            while (stk.length > 0 && arr[stk[stk.length - 1]] <= arr[i]) {\n                stk.pop();\n            }\n\n            // Calculate right boundary count\n            right[i] = (stk.length === 0) ? (n - i) : (stk[stk.length - 1] - i);\n\n            // Push current index into stack\n            stk.push(i);\n        }\n\n        // Compute sum of max elements of all subarrays\n        for (let i = 0; i < n; ++i) {\n\n            // Contribution of arr[i] as max in subarrays\n            res += arr[i] * left[i] * right[i];\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}