{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 702760,
      "title": "Sum of Middle elements of two sorted arrays",
      "titleSlug": "sum-of-middle-elements-of-two-sorted-arrays2305",
      "content": "<p><span >Given 2 sorted integer arrays <strong>arr1</strong> and <strong>arr2 </strong>of the same size. Find the <strong>sum </strong>of the<strong> middle </strong>elements of two sorted arrays arr1 and arr2.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr1 = [1, 2, 4, 6, 10], arr2 = [4, 5, 6, 9, 12]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The merged array looks like [1, 2, 4, 4, <strong>5, 6, </strong>6, 9, 10, 12]. Sum of middle elements is 11 (5 + 6).\n</span></pre>\n<pre><span ><strong>Input: </strong>arr1 = [1, 12, 15, 26, 38], arr2 = [2, 13, 17, 30, 45]\n<strong>Output:</strong> 32\n<strong>Explanation:</strong> The merged array looks like [1, 2, 12, 13, <strong>15, 17,</strong> 26, 30, 38, 45]. Sum of middle elements is 32 (15 + 17).</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(log n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr1.size() == arr2.size() &lt;= 10<sup>3</sup><br />1 &lt;= arr1[i] &lt;= 10<sup>6</sup><br />1 &lt;= arr2[i] &lt;= 10<sup>6</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA"
    },
    "similar": [],
    "hints": [
      "<p>Use the fact that the two arrays are of the same size. Regardless of being even or odd, the size of the merged array will always be even.&nbsp;</p>"
    ],
    "relatedTopics": [
      {
        "name": "Arrays",
        "slug": "arrays"
      },
      {
        "name": "Divide and Conquer",
        "slug": "divide-and-conquer"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      }
    ],
    "companies": ["amazon", "de-shaw"],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "//Back-end complete function template for C++.\n\n//Position this line where user code will be pasted.\nclass Solution {\n  public:\n    int SumofMiddleElements(vector<int> &arr1, vector<int> &arr2) {\n        int n = arr1.size();\n        int low = 0, high = n;\n\n        while (low <= high) {\n            // Partition points in both arrays\n            int cut1 = (low + high) / 2;\n            int cut2 = n - cut1;\n\n            // Elements around the partition points\n            int l1 = (cut1 == 0) ? INT_MIN : arr1[cut1 - 1];\n            int l2 = (cut2 == 0) ? INT_MIN : arr2[cut2 - 1];\n            int r1 = (cut1 == n) ? INT_MAX : arr1[cut1];\n            int r2 = (cut2 == n) ? INT_MAX : arr2[cut2];\n\n            // Check if we have found the correct partition\n            if (l1 <= r2 && l2 <= r1) {\n                // Return the sum of the middle elements\n                return max(l1, l2) + min(r1, r2);\n            } else if (l1 > r2) {\n                high = cut1 - 1;\n            } else {\n                low = cut1 + 1;\n            }\n        }\n\n        // This case will never occur for valid input\n        return 0;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "class Solution {\n    public int SumofMiddleElements(int[] arr1, int[] arr2) {\n        int n = arr1.length;\n        int[] merged = new int[2 * n];\n        int i = 0, j = 0, k = 0;\n\n        // Merge the two arrays\n        while (i < n && j < n) {\n            if (arr1[i] <= arr2[j]) {\n                merged[k++] = arr1[i++];\n            } else {\n                merged[k++] = arr2[j++];\n            }\n        }\n        // Copy remaining elements of arr1\n        while (i < n) {\n            merged[k++] = arr1[i++];\n        }\n        // Copy remaining elements of arr2\n        while (j < n) {\n            merged[k++] = arr2[j++];\n        }\n\n        // Find the middle elements\n        int middle1 = merged[n - 1];\n        int middle2 = merged[n];\n\n        // Return the sum of the two middle elements\n        return middle1 + middle2;\n    }\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "class Solution:\n\n    def sum_of_middle_elements(self, arr1, arr2):\n        n = len(arr1)\n        low, high = 0, n\n\n        while low <= high:\n            cut1 = (low + high) // 2\n            cut2 = n - cut1\n\n            l1 = float('-inf') if cut1 == 0 else arr1[cut1 - 1]\n            l2 = float('-inf') if cut2 == 0 else arr2[cut2 - 1]\n            r1 = float('inf') if cut1 == n else arr1[cut1]\n            r2 = float('inf') if cut2 == n else arr2[cut2]\n\n            if l1 <= r2 and l2 <= r1:\n                return max(l1, l2) + min(r1, r2)\n            elif l1 > r2:\n                high = cut1 - 1\n            else:\n                low = cut1 + 1\n\n        return 0  # This case will never occur for valid input\n",
        "lang_text": "python3"
      },
      {
        "lang": "Javascript",
        "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    SumofMiddleElements(arr1, arr2) {\n        const n = arr1.length;\n        let low = 0, high = n;\n\n        while (low <= high) {\n            const cut1 = Math.floor((low + high) / 2);\n            const cut2 = n - cut1;\n\n            const l1 = (cut1 === 0) ? Number.MIN_SAFE_INTEGER : arr1[cut1 - 1];\n            const l2 = (cut2 === 0) ? Number.MIN_SAFE_INTEGER : arr2[cut2 - 1];\n            const r1 = (cut1 === n) ? Number.MAX_SAFE_INTEGER : arr1[cut1];\n            const r2 = (cut2 === n) ? Number.MAX_SAFE_INTEGER : arr2[cut2];\n\n            if (l1 <= r2 && l2 <= r1) {\n                return Math.max(l1, l2) + Math.min(r1, r2);\n            } else if (l1 > r2) {\n                high = cut1 - 1;\n            } else {\n                low = cut1 + 1;\n            }\n        }\n\n        return 0; // This case will never occur for valid input\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
