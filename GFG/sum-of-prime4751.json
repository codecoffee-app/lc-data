{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704728,
            "title": "Prime Pair with Target Sum",
            "titleSlug": "sum-of-prime4751",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">Given a number n, find out if n can be expressed as a+b, where both a and b are prime numbers. If such a pair exists, return the values of a and b, otherwise</span> return [-1,-1] as an array of size 2.<br /><strong style=\"font-size: 18px;\">Note: </strong><span style=\"font-size: 18px;\">If [a, b] is one solution with a &lt;= b, and [c, d] is another solution with c &lt;= d, and a &lt; c then&nbsp; [a, b] is considered as our answer.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\">n = 10</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">3 7</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong>There are two possiblities 3, 7 &amp; 5, 5</span><span style=\"font-size: 18px;\"> are both prime &amp; their sum is 10, but we'll pick 3, 7 as 3 &lt; 5.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\">n = 3</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">-1 -1</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">There are no solutions to the number 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*loglog(n))<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">2 &lt;= n &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number `n`, determine if it can be expressed as the sum of two prime numbers, `a` and `b`. If such a pair exists, return the pair `[a, b]` where `a` and `b` are prime and `a <= b`. If multiple solutions exist, return the solution with the smallest `a`. If no such pair exists, return `[-1, -1]`.",
                "constraints": [
                    "2 <= n <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "3 7",
                        "explanation": "The numbers 3 and 7 are both prime, and their sum is 10. The pair 5 and 5 also sums to 10, but 3 < 5, therefore [3, 7] is the chosen solution."
                    },
                    {
                        "input": "3",
                        "output": "-1 -1",
                        "explanation": "There are no two prime numbers whose sum equals 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">An even number can always be represented as the sum of two primes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "constructive algo",
                "slug": "constructive-algo"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> getPrimes(int n) {\n\n        bool b[n + 1];\n        memset(b, true, sizeof(b));\n\n        b[0] = false;\n        b[1] = false;\n\n        vector<int> ptr;\n\n        for (int i = 2; i <= sqrt(n); i++)\n            for (int j = 2; i * j <= n; j++)\n                b[i * j] = false;\n\n        int flag = 0;\n\n        for (int i = 2; i <= n; i++) {\n            if (b[i] && b[n - i]) {\n                ptr.push_back(i);\n                ptr.push_back(n - i);\n                flag = 1;\n                break;\n            }\n        }\n\n        if (flag == 0) {\n            ptr.push_back(-1);\n            ptr.push_back(-1);\n        }\n        return ptr;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static ArrayList<Integer> getPrimes(int n) {\n        boolean[] primes = new boolean[n + 1];\n        ArrayList<Integer> result = new ArrayList<>();\n\n        // Mark all numbers as primes initially\n        for (int i = 2; i <= n; i++) {\n            primes[i] = true;\n        }\n\n        // Sieve of Eratosthenes algorithm to find primes\n        for (int i = 2; i * i <= n; i++) {\n            if (primes[i]) {\n                for (int j = i * i; j <= n; j += i) {\n                    primes[j] = false;\n                }\n            }\n        }\n\n        // Find the pair of primes that sum up to n\n        boolean found = false;\n        for (int i = 2; i <= n; i++) {\n            if (primes[i] && primes[n - i]) {\n                result.add(i);\n                result.add(n - i);\n                found = true;\n                break;\n            }\n        }\n\n        // If no such pair exists, return -1\n        if (!found) {\n            result.add(-1);\n            result.add(-1);\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def getPrimes(self, n: int) -> List[int]:\n        primes = [True] * (n + 1)\n        result = []\n\n        # Mark 0 and 1 as not prime\n        primes[0] = primes[1] = False\n\n        # Sieve of Eratosthenes algorithm to find primes\n        for i in range(2, int(n**0.5) + 1):\n            if primes[i]:\n                for j in range(i * i, n + 1, i):\n                    primes[j] = False\n\n        # Find the pair of primes that sum up to n\n        found = False\n        for i in range(2, n + 1):\n            if primes[i] and primes[n - i]:\n                result.append(i)\n                result.append(n - i)\n                found = True\n                break\n\n        # If no such pair exists, append -1\n        if not found:\n            result.extend([-1, -1])\n\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}