{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705010,
            "title": "Sum of Query II",
            "titleSlug": "sum-of-query-ii5310",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr[]</strong> of <strong>n</strong> integers and <strong>q</strong> queries in an array <strong>queries[]</strong> of length <strong>2*q </strong>containing <strong>l</strong>, <strong>r</strong> pair for all q queries. You need to compute the following sum over q queries.</span></p>\n<p><span style=\"font-size: 18px;\">&nbsp;<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/705010/Web/Other/blobid0_1717675141.png\" width=\"131\" height=\"66\" /></span></p>\n<p><span style=\"font-size: 18px;\">Note : Array is 1-Indexed.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :<br /></span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 4, arr = {1, 2, 3, 4}, q = 2, queries = {1, 4, 2, 3}\n<strong>Output:</strong> 10 5\n<strong>Explaination:</strong> In the first query we need sum from 1 to 4 which is 1+2+3+4 = 10. In the second query we need sum from 2 to 3 which is 2 + 3 = 5.<br /></span></pre>\n<pre><strong>Input:</strong> n = 5, arr = {26, 30, 48, 29, 8}, q = 2, queries = {4, 4, 2, 3}\n<strong>Output:</strong> 29 78\n<strong>Explaination:</strong> In the first query we need sum from 4 to 4 which is 29. In the second query we need sum from 2 to 3 which is 30 + 48 = 78.</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>querySum()</strong> which takes n, arr, q and queries as input parameters and returns the answer for all the queries.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n+q)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n, q &le; 10<sup>5</sup><br />1 &le; arr<sub>i</sub> &le; 10<sup>3</sup><br />1 &le; l &le; r &le; n</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Store the sum at each point and calculate the answer.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate the sum of subarrays based on queries.\n    vector<int> querySum(int n, int arr[], int q, int queries[])\n    {\n        int pre[n]; // Array to store the prefix sum of the given array\n\n        // Calculating prefix sum array\n        for(int i = 0;i < n;i++)\n            pre[i] = arr[i];\n        for(int i = 1;i < n;i++)\n            pre[i] += pre[i-1];\n\n        vector<int> sol; // Vector to store the solutions for the queries\n\n        // Iterating over the queries\n        for(int i = 0;i < 2*q;i += 2){\n            if(queries[i] == 1) // Query for sum of subarray starting from index 1\n                sol.emplace_back(pre[queries[i+1]-1]); // Adding the sum to the solution vector\n            else \n                sol.emplace_back(pre[queries[i+1]-1] - pre[queries[i]-2]); // Query for sum of subarray between two indices\n        }\n\n        return sol;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to calculate the sum of subarrays based on queries.\n    querySum(n, arr, q, queries) {\n        let pre = new Array(n); // Array to store the prefix sum of the given array\n\n        // Calculating prefix sum array\n        for (let i = 0; i < n; i++) pre[i] = arr[i];\n        for (let i = 1; i < n; i++) pre[i] += pre[i - 1];\n\n        let sol = []; // Array to store the solutions for the queries\n\n        // Iterating over the queries\n        for (let i = 0; i < 2 * q; i += 2) {\n            if (queries[i] == 1) // Query for sum of subarray starting from index 1\n                sol.push(\n                    pre[queries[i + 1] - 1]); // Adding the sum to the solution array\n            else\n                sol.push(pre[queries[i + 1] - 1] -\n                         pre[queries[i] -\n                             2]); // Query for sum of subarray between two indices\n        }\n\n        return sol;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}