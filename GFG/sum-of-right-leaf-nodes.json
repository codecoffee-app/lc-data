{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700666,
            "title": "Sum of Right Leaf Nodes",
            "titleSlug": "sum-of-right-leaf-nodes",
            "content": "<p><span >Given a Binary Tree. Your task is to complete the function <strong>rightLeafSum()</strong>, which should return the sum of all the&nbsp;leaf nodes that are the right child of their parent&nbsp;of the given binary tree.<br /><strong><br />Examples:</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><br />Input:</strong></span></p>\n<pre><span >\\t    52\n\\t  /    \\\n\\t12\\t55\n     /  \\     /  \\\n    83   6   17  82\n   /    /  \\   \n  56   61  35\n<strong>Output : </strong>117\n<strong>Explanation: </strong>All the right leaf nodes presents are 35, 82 which sums up to 117\n</span></pre>\n<pre><span ><strong>Input:</strong>\n\\t   12\n\\t  /  \\    \n     20     30\n    /  \\     /\n  40   60  90\n\n<strong>Output: </strong>60\n<strong>Explanation: </strong>The only right leaf node is present is 60<br /></span></pre>\n<pre style=\"font-family: -apple-system, 'system-ui', 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium; white-space: normal;\"><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Input : </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><br /></strong> <strong>Output : </strong>0 <br /><strong>Explanation:&nbsp;</strong><span style=\"color: var(--text-color); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; word-spacing: 4px; white-space-collapse: break-spaces;\">There is no leaf node, so sum is 0.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;=10<sup>6</sup><sup><br /></sup>1 &lt;= node-&gt;data &lt;=10<sup>5</sup><sup><br /></sup>It is guaranteed that sum will not exceed integer max value<br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Run a postorder traversal and add only the right leaf nodes from the input tree.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Class Solution\nclass Solution{\n    public:\n    // Utility function to calculate the sum of right leaf nodes\n    void rightLeafSumUtil(Node* root, int * sum){\n     // Base case: if root is NULL, return\n     if(!root) \n    \t\treturn;\n     \n     // Checking if the current node's right child is a leaf node\n     // If it is a leaf node, add its data to the sum\n     if(root->right)\n    \t\tif(!root->right->left && !root->right->right)\n    \t\t    *sum += root->right->data;\n    \t\t    \n     // Recursively traverse the left and right subtree\n     rightLeafSumUtil(root->left, sum);\n     rightLeafSumUtil(root->right, sum);\n    }\n    \n    // Function to calculate the sum of right leaf nodes\n    int rightLeafSum(Node* root)\n    {\n        // Initialize sum to 0\n        int sum = 0;\n        \n        // Call utility function to calculate the sum\n        rightLeafSumUtil(root, &sum);\n        \n        // Return the sum of right leaf nodes\n        return sum;\n    }  \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    static int sum = 0;\n    static void rightLeafSumUtil(Node root){\n        if(root == null)\n            return;\n     \n        // check if the right child\n        // of root is leaf node\n        if(root.right != null)\n            if(root.right.left == null &&\n               root.right.right == null)\n                sum += root.right.data;\n     \n        rightLeafSumUtil(root.left );\n        rightLeafSumUtil(root.right );\n    }\n    \n    int rightLeafSum(Node root)\n    {\n        sum = 0;\n        rightLeafSumUtil(root);\n        return sum;\n    }\n}\n\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Utility function to calculate the sum of right leaf nodes\n    def rightLeafSumUtil(self, root, sum_ref):\n        # Base case: if root is None, return\n        if not root:\n            return\n\n        # Check if the current node's right child is a leaf node\n        if root.right and not root.right.left and not root.right.right:\n            sum_ref[0] += root.right.data\n\n        # Recursively traverse the left and right subtree\n        self.rightLeafSumUtil(root.left, sum_ref)\n        self.rightLeafSumUtil(root.right, sum_ref)\n\n    # Function to calculate the sum of right leaf nodes\n    def rightLeafSum(self, root):\n        # Initialize sum to 0\n        sum_ref = [0]  # Use a list to pass by reference\n        # Call utility function to calculate the sum\n        self.rightLeafSumUtil(root, sum_ref)\n        # Return the sum of right leaf nodes\n        return sum_ref[0]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to calculate the sum of right leaf nodes in the binary tree\n    rightLeafSum(root) {\n        // Initialize sum to store the sum of right leaf nodes\n        let sum = 0;\n\n        // Helper function to traverse the tree and update sum\n        function rightLeafSumUtil(node) {\n            // Base case: if the current node is null, return\n            if (node === null) {\n                return;\n            }\n\n            // Check if the current node has a right child\n            if (node.right) {\n                // If the right child is a leaf node (no left or right child)\n                if (node.right.left === null && node.right.right === null) {\n                    // Add the right leaf node's data to the sum\n                    sum += node.right.key;\n                }\n            }\n\n            // Recursively traverse the left and right subtrees\n            rightLeafSumUtil(node.left);\n            rightLeafSumUtil(node.right);\n        }\n\n        // Call the helper function to start the traversal from the root\n        rightLeafSumUtil(root);\n\n        // Return the computed sum of right leaf nodes\n        return sum;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}