{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712173,
            "title": "Sum of subarray minimum",
            "titleSlug": "sum-of-subarray-minimum",
            "content": "<p><span >Given an array <strong>a</strong><strong>rr</strong> containing positive integers, find the sum of the minimum element of all subarrays. Since the answer may be very large, return the answer modulo 10<sup>9</sup>&nbsp;+7.&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [3, 1, 2, 4]<br /><strong>Output: </strong>17<br /><strong>Explanation:</strong> subarrays are {3}, {1}, {2}, {4}, {3, 1}, {1, 2}, {2, 4}, {3, 1, 2}, {1, 2, 4}, {3, 1, 2, 4}. Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1. Sum is 17.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [71, 55, 82, 55]<br /><strong>Output: </strong>593<br /><strong>Explanation:&nbsp;</strong>The sum of the minimum of all the subarrays are 593.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i]<sub>&nbsp;&nbsp;</sub>&le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, find the sum of the minimum element of all possible subarrays. Since the answer can be very large, return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[3, 1, 2, 4]",
                        "output": "17",
                        "explanation": "The subarrays are {3}, {1}, {2}, {4}, {3, 1}, {1, 2}, {2, 4}, {3, 1, 2}, {1, 2, 4}, {3, 1, 2, 4}.  The minimum values of these subarrays are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.  The sum of these minimums is 17."
                    },
                    {
                        "input": "[71, 55, 82, 55]",
                        "output": "593",
                        "explanation": "The sum of the minimums of all subarrays is 593."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use stack and try to think for each number that in how many subarrays this number is the minimum.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    const int mod = 1e9 + 7; // constant variable to store modulo value\n\n    int sumSubarrayMins(vector<int> &arr) {\n        int N = arr.size();\n        int left[N], right[N]; // arrays to store left and right limits\n        for (int i = 0; i < N; i++)\n            right[i] = N - 1 - i; // initializing right limits\n        for (int i = N - 1; i >= 0; i--)\n            left[i] = i; // initializing left limits\n        stack<int> st;   // stack to track subarray limits\n        for (int i = 0; i < N; i++) {\n            while (!st.empty() and arr[st.top()] >= arr[i]) { // finding right limits\n                right[st.top()] = i - st.top() - 1;           // updating right limit\n                st.pop();\n            }\n            st.push(i); // pushing current index into stack\n        }\n        while (st.size()) {\n            st.pop();\n        }\n        for (int i = N - 1; i >= 0; i--) {\n            while (!st.empty() and arr[st.top()] > arr[i]) { // finding left limits\n                left[st.top()] = st.top() - i - 1;           // updating left limit\n                st.pop();\n            }\n            st.push(i); // pushing current index into stack\n        }\n        long long ans = 0; // variable to store the answer\n        for (int i = 0; i < N; i++) {\n            ans = (ans + (long)arr[i] * (left[i] + 1) * (right[i] + 1)) %\n                  mod; // calculating sum of subarray mins\n        }\n        return (int)ans; // returning the final answer\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\npublic class Solution {\n    public static final int MOD =\n        (int)1e9 + 7; // constant variable to store modulo value\n\n    public int sumSubarrayMins(int[] arr) {\n        int N = arr.length;\n        int[] left = new int[N],\n              right = new int[N]; // arrays to store left and right limits\n\n        // Initializing right limits\n        for (int i = 0; i < N; i++) right[i] = N - 1 - i;\n\n        // Initializing left limits\n        for (int i = N - 1; i >= 0; i--) left[i] = i;\n\n        Stack<Integer> st = new Stack<>(); // stack to track subarray limits\n\n        // Calculating right limits\n        for (int i = 0; i < N; i++) {\n            while (!st.isEmpty() && arr[st.peek()] >= arr[i]) { // finding right limits\n                right[st.peek()] = i - st.peek() - 1;           // updating right limit\n                st.pop();\n            }\n            st.push(i); // pushing current index into stack\n        }\n\n        st.clear(); // Clear the stack for reuse\n\n        // Calculating left limits\n        for (int i = N - 1; i >= 0; i--) {\n            while (!st.isEmpty() && arr[st.peek()] > arr[i]) { // finding left limits\n                left[st.peek()] = st.peek() - i - 1;           // updating left limit\n                st.pop();\n            }\n            st.push(i); // pushing current index into stack\n        }\n\n        long ans = 0; // variable to store the answer\n\n        // Calculating sum of subarray mins\n        for (int i = 0; i < N; i++) {\n            ans = (ans + (long)arr[i] * (left[i] + 1) * (right[i] + 1)) % MOD;\n        }\n\n        return (int)ans; // returning the final answer\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def sumSubarrayMins(self, arr):\n        MOD = int(1e9 + 7)\n        N = len(arr)\n        left = [0] * N\n        right = [0] * N\n\n        # Initializing right limits\n        for i in range(N):\n            right[i] = N - 1 - i\n\n        # Initializing left limits\n        for i in range(N - 1, -1, -1):\n            left[i] = i\n\n        stack = []\n\n        # Calculating right limits\n        for i in range(N):\n            while stack and arr[stack[-1]] >= arr[i]:  # finding right limits\n                right[stack[-1]] = i - stack[-1] - 1  # updating right limit\n                stack.pop()\n            stack.append(i)  # pushing current index into stack\n\n        stack.clear()  # Clear the stack for reuse\n\n        # Calculating left limits\n        for i in range(N - 1, -1, -1):\n            while stack and arr[stack[-1]] > arr[i]:  # finding left limits\n                left[stack[-1]] = stack[-1] - i - 1  # updating left limit\n                stack.pop()\n            stack.append(i)  # pushing current index into stack\n\n        ans = 0\n\n        # Calculating sum of subarray mins\n        for i in range(N):\n            ans = (ans + arr[i] * (left[i] + 1) * (right[i] + 1)) % MOD\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    sumSubarrayMins(arr) {\n        const MOD = 1e9 + 7;\n        const N = arr.length;\n        const left = new Array(N).fill(0);\n        const right = new Array(N).fill(0);\n\n        // Initializing right limits\n        for (let i = 0; i < N; i++) right[i] = N - 1 - i;\n\n        // Initializing left limits\n        for (let i = N - 1; i >= 0; i--) left[i] = i;\n\n        const stack = [];\n\n        // Calculating right limits\n        for (let i = 0; i < N; i++) {\n            while (stack.length > 0 && arr[stack[stack.length - 1]] >= arr[i]) {\n                right[stack[stack.length - 1]] =\n                    i - stack[stack.length - 1] - 1; // updating right limit\n                stack.pop();\n            }\n            stack.push(i); // pushing current index into stack\n        }\n\n        stack.length = 0; // Clear the stack for reuse\n\n        // Calculating left limits\n        for (let i = N - 1; i >= 0; i--) {\n            while (stack.length > 0 && arr[stack[stack.length - 1]] > arr[i]) {\n                left[stack[stack.length - 1]] =\n                    stack[stack.length - 1] - i - 1; // updating left limit\n                stack.pop();\n            }\n            stack.push(i); // pushing current index into stack\n        }\n\n        let ans = 0;\n\n        // Calculating sum of subarray mins\n        for (let i = 0; i < N; i++) {\n            ans = (ans + arr[i] * (left[i] + 1) * (right[i] + 1)) % MOD;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}