{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702706,
            "title": "Sum of Subarrays",
            "titleSlug": "sum-of-subarrays2229",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr.</strong> Find the sum of all subarrays of the array since the sum could be very large print the sum modulo <strong>(10<sup>9</sup>+7)</strong>.<br /><br /></span><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3]\n<strong>Output: </strong>20\n<strong>Explanation: </strong>All subarray sums are: </span><span style=\"font-size: 18px;\">[1] = 1, [2] = 2, [3] = 3, [1,2] = 3, [2,3] = 5, [1,2,3] = 6. Thus total sum is 1+2+3+3+5+6 = 20.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 3]\n<strong>Output: </strong>8<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>All subarray sums are: [1] = 1 [3] = 3 [1,3] = 4. Thus total sum is 1+3+4 = 8.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space: </strong>O(1)</span><br /><br /><span style=\"font-size: 18px;\"><strong>Constraints :</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the sum of all its subarrays. Since the sum can be very large, return the sum modulo (10^9 + 7).",
                "constraints": [
                    "1 <= array size <= 10^6",
                    "1 <= element in array <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3]",
                        "output": "20",
                        "explanation": "The subarrays are [1], [2], [3], [1, 2], [2, 3], [1, 2, 3]. Their sums are 1, 2, 3, 3, 5, 6, respectively. The total sum is 1 + 2 + 3 + 3 + 5 + 6 = 20."
                    },
                    {
                        "input": "[1, 3]",
                        "output": "8",
                        "explanation": "The subarrays are [1], [3], [1, 3]. Their sums are 1, 3, 4, respectively. The total sum is 1 + 3 + 4 = 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Every number in the array at i<sup>th</sup> (1 based) position would come (i)*(n-i+1) times. So we just have to sum this.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\n  public:\n    // Function to calculate the sum of products of subarrays\n    long long subarraySum(vector<int>& arr) {\n        int n = arr.size();\n        long long p = 1e9 + 7, sum = 0;\n\n        // iterating over the array\n        for (int i = 0; i < n; i++)\n            // calculating the sum of products for each subarray\n            sum = (sum + (1ll * (((i + 1) * 1ll * arr[i]) % p) * (n - i)) % p) % p;\n\n        // returning the final sum\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public long subarraySum(int[] arr) {\n        int n = arr.length;\n        long p = 1_000_000_007L, sum = 0;\n\n        // Iterating over the array\n        for (int i = 0; i < n; i++) {\n            // Calculating the sum of products for each subarray\n            sum = (sum + ((1L * (((i + 1) * 1L * arr[i]) % p) * (n - i)) % p)) % p;\n        }\n\n        // Returning the final sum\n        return sum;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to find the sum of all possible subarrays.\n    def subarraySum(self, arr):\n        n = len(arr)\n        p, sum = 1000000007, 0\n        #iterating over the array.\n        for i in range(0, n):\n            #calculating the sum of the current subarray.\n            sum = (sum + ((((i + 1) * arr[i]) % p) * (n - i)) % p) % p\n        #returning the final sum of all possible subarrays.\n        return sum\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    subarraySum(arr) {\n        let n = arr.length;\n        let p = 1e9 + 7;\n        let sum = 0;\n        for (let i = 0; i < n; i++)\n            // calculating the sum of the current subarray.\n            sum = (sum + ((((i + 1) * arr[i]) % p) * (n - i)) % p) % p;\n\n        return sum;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}