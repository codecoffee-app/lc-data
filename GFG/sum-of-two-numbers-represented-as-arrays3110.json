{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703046,
            "title": "Sum of two numbers represented as arrays",
            "titleSlug": "sum-of-two-numbers-represented-as-arrays3110",
            "content": "<p><span style=\"font-size: 18px;\">Given two numbers represented by two different arrays, <strong>arr1[]</strong> and <strong>arr2[]</strong>, the task is to find their sum as a new array. Each array represents a number where each element corresponds to a digit in that number. The resulting sum array should also represent the sum of the two numbers in the same digit-by-digit format.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: </span><span style=\"font-size: 18px;\">No leading zeroes in array arr1 and arr2.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1[] = [5, 6, 3], arr2[] = [8, 4, 2]\n<strong>Output:</strong> [1, 4, 0, 5]\n<strong>Explanation: </strong>As 563 + 842 = 1405.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1[] = [2, 2, 7, 5, 3, 3], arr2[] = [4, 3, 3, 8]\n<strong>Output:</strong> [2, 3, 1, 8, 7, 1]\n<strong>Explanation:</strong> As 227533 + 4338 = 231871.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(max(n, m))<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr1.size() &le; arr2.size() &le; 10<sup>6</sup><br />0 &le; arr1<sub>i</sub>, arr2<sub>i&nbsp;</sub>&le; 9</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>The idea is based on traversing both strings from the end, one by one adding digits, and keeping track of carry.<br /><br /></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho",
            "accolite",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    vector<int> findSum(vector<int> &arr1, vector<int> &arr2) {\n        // Before proceeding further, make sure length\n        // of arr2is larger.\n        if (arr1.size() > arr2.size())\n            swap(arr1, arr2);\n\n        // Take an empty vector for storing result\n        vector<int> ans;\n\n        // Calculate length of both vector\n        int n = arr1.size(), m = arr2.size();\n\n        // Reverse both of vector\n        reverse(arr1.begin(), arr1.end());\n        reverse(arr2.begin(), arr2.end());\n\n        int carry = 0;\n        for (int i = 0; i < n; i++) {\n            // Do school mathematics, compute sum of\n            // current digits and carry\n            int sum = (arr1[i] + arr2[i] + carry);\n            ans.push_back(sum % 10);\n\n            // Calculate carry for next step\n            carry = sum / 10;\n        }\n\n        // Add remaining digits of larger number\n        for (int i = n; i < m; i++) {\n            int sum = (arr2[i] + carry);\n            ans.push_back(sum % 10);\n            carry = sum / 10;\n        }\n\n        // Add remaining carry\n        if (carry)\n            ans.push_back(carry);\n\n        // reverse resultant vector\n        reverse(ans.begin(), ans.end());\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    ArrayList<Integer> findSum(int arr1[], int arr2[]) {\n        // Make sure the length of arr2 is larger or equal to arr1\n        if (arr1.length > arr2.length) {\n            int[] temp = arr1;\n            arr1 = arr2;\n            arr2 = temp;\n        }\n\n        ArrayList<Integer> ans = new ArrayList<>();\n\n        int n = arr1.length;\n        int m = arr2.length;\n\n        // Reverse both arrays\n        reverseArray(arr1);\n        reverseArray(arr2);\n\n        int carry = 0;\n\n        for (int i = 0; i < n; i++) {\n            int sum = arr1[i] + arr2[i] + carry;\n            ans.add(sum % 10);\n            carry = sum / 10;\n        }\n\n        for (int i = n; i < m; i++) {\n            int sum = arr2[i] + carry;\n            ans.add(sum % 10);\n            carry = sum / 10;\n        }\n\n        if (carry != 0) {\n            ans.add(carry);\n        }\n\n        // Reverse the resultant array\n        Collections.reverse(ans);\n\n        return ans;\n    }\n\n    private void reverseArray(int[] arr) {\n        int start = 0;\n        int end = arr.length - 1;\n\n        while (start < end) {\n            int temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findSum(self, arr1, arr2):\n        # Ensure arr1 is not longer than arr2\n        if len(arr1) > len(arr2):\n            arr1, arr2 = arr2, arr1\n\n        # Reverse both arrays\n        arr1 = arr1[::-1]\n        arr2 = arr2[::-1]\n\n        ans = []\n        carry = 0\n\n        n = len(arr1)\n        m = len(arr2)\n\n        # Add digits of both arrays\n        for i in range(n):\n            sum_ = arr1[i] + arr2[i] + carry\n            ans.append(sum_ % 10)\n            carry = sum_ // 10\n\n        # Add remaining digits of the longer array\n        for i in range(n, m):\n            sum_ = arr2[i] + carry\n            ans.append(sum_ % 10)\n            carry = sum_ // 10\n\n        # Add remaining carry\n        if carry:\n            ans.append(carry)\n\n        # Reverse the result to get the final sum\n        ans.reverse()\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} a\n * @param {number[]} b\n * @returns {number[]}\n */\n\nclass Solution {\n    findSum(arr1, arr2) {\n        // Before proceeding further, make sure length\n        // of arr2 is larger.\n        if (arr1.length > arr2.length) {\n            [arr1, arr2] = [ arr2, arr1 ];\n        }\n\n        // Take an empty array for storing result\n        let ans = [];\n\n        // Calculate length of both array\n        let n = arr1.length, m = arr2.length;\n\n        // Reverse both array\n        arr1.reverse();\n        arr2.reverse();\n\n        let carry = 0;\n        for (let i = 0; i < n; i++) {\n            // Do school mathematics, compute sum of\n            // current digits and carry\n            let sum = arr1[i] + arr2[i] + carry;\n            ans.push(sum % 10);\n\n            // Calculate carry for next step\n            carry = Math.floor(sum / 10);\n        }\n\n        // Add remaining digits of larger array\n        for (let i = n; i < m; i++) {\n            let sum = arr2[i] + carry;\n            ans.push(sum % 10);\n            carry = Math.floor(sum / 10);\n        }\n\n        // Add remaining carry\n        if (carry) {\n            ans.push(carry);\n        }\n\n        // Reverse resultant array\n        ans.reverse();\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}