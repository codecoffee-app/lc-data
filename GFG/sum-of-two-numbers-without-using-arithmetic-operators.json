{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706216,
            "title": "Sum of two numbers without using arithmetic operators",
            "titleSlug": "sum-of-two-numbers-without-using-arithmetic-operators",
            "content": "<p><span style=\"font-size: 18px;\">Given two integers <strong>a</strong> and<strong> b</strong>. Find the sum of two numbers<strong> without </strong>using<strong>&nbsp;arithmetic operators</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a = 5, b = 3\n<strong>Output:</strong> 8\n<strong>Explanation: </strong>5 + 3 = 8</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a = 10, b = 30\n<strong>Output:</strong> 40\n<strong>Explanation: </strong>10 + 30 = 40</span></pre>\n<div><span style=\"font-size: 18px;\"><strong>Expected Time Complexity :</strong> O(max(number of bits in 'a', number of bits in 'b'))</span></div>\n<div><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space: </strong>O(1)</span></div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></div>\n<div><span style=\"font-size: 18px;\">-10<sup>8</sup>&lt;=a, b&lt;=10<sup>8</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use bitwise AND and XOR.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int sum(int a, int b) {\n        // Iterate till there is no carry\n        while (b != 0) {\n            // carry now contains common\n            // set bits of x and y\n            unsigned carry = a & b;\n\n            // Sum of bits of x and y where at\n            // least one of the bits is not set\n            a = a ^ b;\n\n            // Carry is shifted by one so that adding\n            // it to x gives the required sum\n            b = carry << 1;\n        }\n        return a;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    int sum(int a , int b)\r\n    {\r\n        // Iterate till there is no carry  \r\n        while (b != 0)  \r\n        {  \r\n            // carry now contains common  \r\n            //set bits of x and y  \r\n            int carry = a & b;  \r\n      \r\n            // Sum of bits of x and y where at  \r\n            //least one of the bits is not set  \r\n            a = a ^ b;  \r\n      \r\n            // Carry is shifted by one so that adding  \r\n            // it to x gives the required sum  \r\n            b = carry << 1;  \r\n        }  \r\n        return a;  \r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int sum(int a, int b)\n    {\n        // Iterate till there is no carry\n        while (b != 0)\n        {\n            // carry now contains common\n            //set bits of x and y\n            int carry = a & b;\n\n            // Sum of bits of x and y where at\n            //least one of the bits is not set\n            a = a ^ b;\n\n            // Carry is shifted by one so that adding\n            // it to x gives the required sum\n            b = carry << 1;\n        }\n        return a;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    \r\n    sum(a,b)\r\n    {\r\n        while (b != 0) {\r\n            let carry = a & b;\r\n            a = a ^ b;\r\n            b = carry << 1;\r\n        }\r\n        return a;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}