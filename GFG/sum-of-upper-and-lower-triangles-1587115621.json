{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701261,
            "title": "Sum of upper and lower triangles",
            "titleSlug": "sum-of-upper-and-lower-triangles-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">Given a square matrix<strong>&nbsp;</strong>of size<strong> N*N</strong>, print the <strong>sum of upper and lower triangular elements</strong>. Upper Triangle consists of elements on the diagonal and above it. The lower triangle consists of elements on the diagonal and below it.&nbsp;</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nN = 3 \nmat[][] = {{6, 5, 4},\n&nbsp;\\t    {1, 2, 5}\n&nbsp;\\t    {7, 9, 7}}\n<strong>Output</strong>: <br />29 32\n<strong>Explanation</strong>:\nThe given matrix is\n6 5 4\n1 2 5\n7 9 7\nThe elements of upper triangle are\n6 5 4\n&nbsp;&nbsp;2 5\n&nbsp;&nbsp;&nbsp; 7\nSum of these elements is 6+5+4+2+5+7=29.\nThe elements of lower triangle are\n6\n1 2\n7 9 7\nSum of these elements is 6+1+2+7+9+7= 32.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nN = 2\nmat[][] = {{1, 2},\n&nbsp;\\t    {3, 4}}\n<strong>Output</strong>: <br />7 8\n<strong>Explanation:</strong>\nUpper triangular matrix:\n1 2\n&nbsp; 4\nSum of these elements are 7.\nLower triangular matrix:\n1\n3 4\nSum of these elements are 8.</span>\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Complete the function <strong>sumTriangles()&nbsp;</strong>that takes&nbsp;matrix and its size N as input parameters and returns the list of integers&nbsp;containing&nbsp;the sum of upper and lower triangle. </span><br /><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N * N)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span><br /><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong>&nbsp;<br />1 &lt;= N &lt;= 10<sup>3</sup><br />1 &lt;= matrix[i][j] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square matrix of size N*N, calculate and return the sum of its upper and lower triangular elements. The upper triangle includes elements on and above the main diagonal, while the lower triangle includes elements on and below the main diagonal.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "1 <= matrix[i][j] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nmat[][] = {{6, 5, 4},\n           {1, 2, 5},\n           {7, 9, 7}}",
                        "output": "29 32",
                        "explanation": "The upper triangle consists of elements 6, 5, 4, 2, 5, and 7, summing to 29. The lower triangle consists of elements 6, 1, 2, 7, 9, and 7, summing to 32."
                    },
                    {
                        "input": "N = 2\nmat[][] = {{1, 2},\n           {3, 4}}",
                        "output": "7 8",
                        "explanation": "The upper triangle consists of elements 1, 2, and 4, summing to 7. The lower triangle consists of elements 1, 3, and 4, summing to 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution\n{   \n    public:\n    //Function to return sum of upper and lower triangles of a matrix.  \n    vector<int> sumTriangles(const vector<vector<int> >& matrix, int n)\n    {\n        int upper = 0; \n        int lower = 0; \n        \n        for (int i = 0; i < n; ++i)\n        {\n            for (int j = 0; j < n; ++j)\n            {\n                //diagonal elements will be common in both upper and lower sum.\n                if(i == j)\n                {\n                    upper += matrix[i][j];\n                    lower += matrix[i][j];\n                }\n                \n                //else if j>i, this condition satisfies only for upper triangle.\n                else if (j>i) \n                    upper += matrix[i][j]; \n\n                //else if i>j, this condition satisfies only for lower triangle.\n                else if(j<i)\n                    lower += matrix[i][j]; \n            }\n        }\n        \n        //storing both the sum in a list and returning the list.\n        vector<int> result;\n        result.push_back(upper);\n        result.push_back(lower);\n        return result; \n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution\n{\n    //Function to return sum of upper and lower triangles of a matrix.\n    static ArrayList<Integer> sumTriangles(int matrix[][], int n)\n    {\n        int upper = 0; \n        int lower = 0; \n        \n        for (int i = 0; i < n; ++i)\n        {\n            for (int j = 0; j < n; ++j)\n            {\n                //diagonal elements will be common in both upper and lower sum.\n                if(i == j)\n                {\n                    upper += matrix[i][j];\n                    lower += matrix[i][j];\n                }\n                \n                //else if j>i, this condition satisfies only for upper triangle.\n                else if (j>i) \n                    upper += matrix[i][j]; \n\n                //else if i>j, this condition satisfies only for lower triangle.\n                else if(j<i)\n                    lower += matrix[i][j]; \n            }\n        }\n        \n        //storing both the sum in a list and returning the list.\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(upper);\n        result.add(lower);\n        return result; \n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "\n#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to return sum of upper and lower triangles of a matrix.\n    def sumTriangles(self,matrix, n):\n        upper = 0 \n        lower = 0 \n        \n        for i in range(n):\n            for j in range(n):\n                #diagonal elements will be common in both upper and lower sum.\n                if(i == j):\n                    upper += matrix[i][j];\n                    lower += matrix[i][j];\n                    \n                #else if j>i, this condition satisfies only for upper triangle.\n                elif (j>i):\n                    upper += matrix[i][j]; \n    \n                #else if i>j, this condition satisfies only for lower triangle.\n                elif(j<i):\n                    lower += matrix[i][j]; \n    \n        #storing both the sum in a list and returning the list.\n        return [upper,lower]; \n    \n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[][]} mat\n * @param {number} N\n * @returns {number[]} \n*/\nclass Solution\n{\n    //Function to return sum of upper and lower triangles of a matrix.\n    sumTriangles(mat, N)\n    {\n        let upper = 0; \n        let lower = 0;\n        \n        for (let i = 0; i < N; ++i)\n        {\n            for (let j = 0; j < N; ++j)\n            {\n                //diagonal elements will be common in both upper and lower sum.\n                if(i == j)\n                {\n                    upper += mat[i][j];\n                    lower += mat[i][j];\n                }\n                \n                //else if j>i, this condition satisfies only for upper triangle.\n                else if (j>i) \n                    upper += mat[i][j]; \n\n                //else if i>j, this condition satisfies only for lower triangle.\n                else if(j<i)\n                    lower += mat[i][j]; \n            }\n        }\n        \n        //storing both the sum in a list and returning the list.\n        let result = new Array();\n        result.push(upper);\n        result.push(lower);\n        return result; \n    } \n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}