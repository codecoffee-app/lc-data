{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703194,
            "title": "Sum of XOR of all pairs",
            "titleSlug": "sum-of-xor-of-all-pairs0723",
            "content": "<p><span style=\"font-size: 20px;\">Given an array of <strong>N</strong> integers, find the <strong>sum of xor </strong>of all pairs of numbers in the array <strong>arr</strong>. In other words, select all possible pairs of <strong>i</strong> and <strong>j</strong> from <strong>0</strong> to <strong>N-1 (i&lt;j)</strong> and determine <strong>sum </strong>of all <strong>(arr<sub>i</sub> xor arr<sub>j</sub>)</strong>.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input :</strong> arr[ ] = {7, 3, 5}\n<strong>Output :</strong> 12\n<strong>Explanation:</strong>\nAll possible pairs and there Xor\nValue: ( 3 ^ 5 = 6 ) + (7 ^ 3 = 4)\n + ( 7 ^ 5 = 2 ) =  6 + 4 + 2 = 12\n</span></pre>\n<p><span style=\"font-size: 20px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input :</strong> arr[ ] = {5, 9, 7, 6} <strong>\nOutput :</strong>  47<br /><strong>Explanation:<br /></strong>All possible pairs and there Xor<br />Value: (5 ^ 9 = 12) + (5 ^ 7 = 2)<br /> + (5 ^ 6 = 3) + (9 ^ 7 = 14)<br /> + (9 ^ 6 = 15) + (7 ^ 6 = 1)<br /> = 12 + 2 + 3 + 14 + 15 + 1 = 47</span></pre>\n<p><span style=\"font-size: 20px;\"><strong>Your Task:</strong><br />You do not have to take input or print output. You only need to complete the function <strong>sumXOR()</strong> that takes an array <strong>(arr)</strong>, sizeOfArray <strong>(n)</strong>, and <strong>return</strong>&nbsp;the <strong>sum of xor of all pairs </strong>of numbers in the array.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Constraints</strong><br />2 &le; n &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>5 </sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N integers, calculate the sum of the bitwise XOR of all possible pairs of numbers within the array. For an array `arr`, consider all pairs (i, j) where 0 <= i < j < N and compute the sum of (arr[i] XOR arr[j]).",
                "constraints": [
                    "2 <= n <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "{7, 3, 5}",
                        "output": "12",
                        "explanation": "The pairs are (7, 3), (7, 5), and (3, 5).  Their XOR values are 7^3 = 4, 7^5 = 2, and 3^5 = 6. The sum of these XOR values is 4 + 2 + 6 = 12."
                    },
                    {
                        "input": "{5, 9, 7, 6}",
                        "output": "47",
                        "explanation": "The pairs are (5, 9), (5, 7), (5, 6), (9, 7), (9, 6), and (7, 6). Their XOR values are 5^9 = 12, 5^7 = 2, 5^6 = 3, 9^7 = 14, 9^6 = 15, and 7^6 = 1. The sum of these XOR values is 12 + 2 + 3 + 14 + 15 + 1 = 47."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>An&nbsp;<strong>Efficient Solution</strong>&nbsp;can solve this problem in O(n) time. The assumption here is that integers are represented using 32 bits.<br />\nOptimized solution will be to try&nbsp;<a href=\"https://www.geeksforgeeks.org/bits-manipulation-important-tactics/\">bit manipulation</a>. To implement the solution, we consider all bits which are 1 and which are 0 and store their count in two different variables. Next multiple those counts along with the power of 2 raised to that bit position. Do this for all the bit positions of the numbers. Their sum would be our answer.<br />\n<strong>How this actually works?</strong></p>\n\n<p>For example, look at the rightmost bit of all the numbers in the array. Suppose that a numbers have a rightmost 0-bit, and b numbers have a 1-bit. Then out of the pairs, a*b of them will have 1 in the rightmost bit of the XOR. This is because there are a*b ways to choose one number that has a 0-bit and one that has a 1-bit. These bits will therefore contribute a*b towards the total of all the XORs.</p>\n\n<p>In general, when looking at the nth bit (where the rightmost bit is the 0th), count how many numbers have 0 (call this an) and how many have 1 (call this bn). The contribution towards the final sum will be an*bn*pow(2,n). You need to do this for each bit and sum all these contributions together.</p>\n\n<p>This can be done in O(kn) time, where k is the number of bits in the given values.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution{\n    public:\n    // Returns sum of bitwise OR\n    // of all pairs\n    long long int sumXOR(int arr[], int n)\n    {\n    \tlong long int sum = 0;\n    \tfor (int i = 0; i < 32; i++) \n    \t{\n    \t\t// Count of zeros and ones\n    \t\tlong long int  zc = 0, oc = 0; \n    \t\t\n    \t\t// Individual sum at each bit position\n    \t\tlong long int idsum = 0; \n    \t\tfor (int j = 0; j < n; j++)\n    \t\t{\n    \t\t\tif (arr[j] % 2 == 0)\n    \t\t\t\tzc++;\n    \t\t\telse\n    \t\t\t\toc++;\n    \t\t\tarr[j] /= 2;\n    \t\t}\n    \t\t\n    \t\t// calculating individual bit sum \n    \t\tidsum = oc * zc * (1 << i); \n    \n    \t\t// final sum \n    \t\tsum += idsum; \n    \t}\n    \treturn sum;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    public long sumXOR (int arr[], int n) {\n        int count[] = new int[31];\n        for(int x : arr){\n            for(int bit = 0; bit < 31; bit++){\n                if(((x >> bit) & 1) == 0)\n                    count[bit]++;\n            }\n        }\n        long ans = 0;\n        for(int x : arr){\n            for(int bit = 0; bit < 31; bit++){\n                if(((x >> bit) & 1) == 1)\n                    ans += (1l << bit) * 1l * (count[bit]);\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def sumXOR(self, arr, n):\n        sum_val = 0\n        n = len(arr)\n        for i in range(32):\n            zc = 0  # Count of zeros\n            oc = 0  # Count of ones\n\n            # Individual sum at each bit position\n            id_sum = 0\n\n            for j in range(n):\n                if arr[j] % 2 == 0:\n                    zc += 1\n                else:\n                    oc += 1\n                arr[j] //= 2\n\n            # Calculating individual bit sum\n            id_sum = oc * zc * (1 << i)\n\n            # Final sum\n            sum_val += id_sum\n\n        return sum_val",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    //Returns sum of bitwise OR\n    //of all pairs\n    public long sumXOR(int[] arr, int n)\n    {\n        long sum = 0;\n        for (int i = 0; i < 32; i++)\n        {\n            // Count of zeros and ones\n            long zc = 0, oc = 0;\n\n            // Individual sum at each bit position\n            long idsum = 0;\n            for (int j = 0; j < n; j++)\n            {\n                if (arr[j] % 2 == 0)\n                    zc++;\n                else\n                    oc++;\n                arr[j] /= 2;\n            }\n\n            // calculating individual bit sum \n            idsum = oc * zc * (1 << i);\n\n            // final sum \n            sum += idsum;\n        }\n        return sum;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}