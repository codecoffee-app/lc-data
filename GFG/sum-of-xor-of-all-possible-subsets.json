{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 885680,
            "title": "Sum of XOR of all possible subsets",
            "titleSlug": "sum-of-xor-of-all-possible-subsets",
            "content": "<p><span style=\"font-size: 18.6667px;\">Given an array <strong>arr[]</strong>, return the sum of the XOR of all elements for every possible <strong>subset </strong>of the array. </span><span >Subsets with the same elements should be counted multiple times.</span></p>\n<p><span >An array <strong>a </strong>is a subset of an array <strong>b </strong>if a can be obtained from b by deleting some (possibly zero) elements of b.</span></p>\n<p><span ><strong>Note:</strong> The answer is guaranteed to fit within a <strong>32-bit</strong> integer.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: arr[] = [1, 2]</span><br /><span ><strong>Output</strong>: 6</span><br /><span ><strong>Explanation</strong>: Subsets are: [[], [1], [2], [1, 2]]</span><br /><span >Sum of all XOR's = 1 + 2 + (1 ^ 2) = 6.</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [1, 5, 6]</span><br /><span ><strong>Output</strong>: 28</span><br /><span ><strong>Explanation</strong>: Subsets are: [[], [1], [5], [6], [1, 5], [1, 6], [5, 6], [1, 5, 6]]</span><br /><span >Sum of all XOR's = 1 + 5 + 6 + (1 ^ 5)&nbsp; + (1 ^ 6) + (5 ^ 6) + (1 ^ 5 ^ 6) = 28.</span></pre>\n<p><span ><strong>Constraints:</strong></span></p>\n<p><span style=\"font-size: 18.6667px;\">1 &le; arr.size() &le; 30<br /></span><span style=\"font-size: 18.6667px;\">1 &le; arr[i] &le; 10</span><sup>3</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, calculate the sum of the XOR of all possible subsets of the array.  Subsets containing the same elements should be counted as distinct.",
                "constraints": [
                    "1 <= arr.size() <= 30",
                    "1 <= arr[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[1, 2]",
                        "output": "6",
                        "explanation": "The subsets are: [], [1], [2], [1, 2].  The sum of their XOR values is 0 + 1 + 2 + (1 ^ 2) = 0 + 1 + 2 + 3 = 6."
                    },
                    {
                        "input": "[1, 5, 6]",
                        "output": "28",
                        "explanation": "The subsets are: [], [1], [5], [6], [1, 5], [1, 6], [5, 6], [1, 5, 6]. The sum of their XOR values is 0 + 1 + 5 + 6 + (1 ^ 5) + (1 ^ 6) + (5 ^ 6) + (1 ^ 5 ^ 6) = 0 + 1 + 5 + 6 + 4 + 7 + 3 + 7 = 28."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<div class=\"flex max-w-full flex-col flex-grow\">\n<div class=\"min-h-8 text-message flex w-full flex-col items-end gap-2 whitespace-normal break-words text-start [.text-message+&amp;]:mt-5\" dir=\"auto\" data-message-author-role=\"assistant\" data-message-id=\"8eed6433-26f2-42cb-981b-a094a6ed6869\" data-message-model-slug=\"gpt-4o\">\n<div class=\"flex w-full flex-col gap-1 empty:hidden first:pt-[3px]\">\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\n<p>Each bit of an element contributes independently to the XOR of all subsets. An element appears in 2^<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord\"><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n-</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span> subsets, so calculate its total contribution efficiently without generating subsets explicitly.</p>\n</div>\n</div>\n</div>\n</div>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "adobe",
            "amazon",
            "apple",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    int subsetXORSum(vector<int>& arr) {\n        int result = 0;\n        // Saving all \"1\" bits\n        for (int i = 0; i < arr.size(); i++) {\n            result |= arr[i];\n        }\n        // Finding the sum (equivalent to (2^(x - 1)) * 2^(n - 1) )\n        return result << (arr.size() - 1);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    int subsetXORSum(int[] arr) {\n        int result = 0;\n        // Calculate the OR of all elements in the array\n        for (int num : arr) {\n            result |= num;\n        }\n        // Multiply by 2^(n-1) where n is the size of the array\n        return result << (arr.length - 1);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def subsetXORSum(self, arr):\n        result = 0\n        # Calculate the OR of all elements in the array\n        for num in arr:\n            result |= num\n        # Multiply by 2^(n-1) where n is the size of the array\n        return result << (len(arr) - 1)\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    subsetXORSum(arr) {\n        let result = 0;\n        // Calculate the OR of all elements in the array\n        for (const num of arr) {\n            result |= num;\n        }\n        // Multiply by 2^(n-1) where n is the size of the array\n        return result << (arr.length - 1);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}