{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704948,
            "title": "Sum Palindrome",
            "titleSlug": "sum-palindrome3857",
            "content": "<p><span style=\"font-size: 18px;\">Given a number, reverse it and add it to itself unless it becomes a palindrome or return <strong>-1</strong> if the number of iterations becomes more than <strong>5</strong>. R</span><span style=\"font-size: 18px;\">eturn that palindrome number if it becomes a palindrome else, it returns -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 23<br /><strong>Output:</strong> 55&nbsp;<br /><strong>Explanation</strong>: reverse(23) = 32, then 32+23 = 55 which is a palindrome. </span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 73<br /><strong>Output: </strong>121<br /><strong>Explanation</strong>: reverse(73) = 37, then 37+73 = 110 which is not a palindrome, again reverse(110)= 011, then 110+11 = 121 which is a palindrome.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Reverse and add until count is less than 5.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "palindrome",
                "slug": "palindrome"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to reverse the digits of a number.\n    int reversDigits(int num) {\n        int rev_num = 0;\n        while (num > 0) {\n            rev_num = rev_num * 10 + num % 10;\n            num = num / 10;\n        }\n        return rev_num;\n    }\n\n    /* Function to check whether the number is palindrome or not */\n    bool isPalindrome(int num) { return (reversDigits(num) == num); }\n\n    // Function to find palindrome by adding reverse of the number to itself.\n    int isSumPalindrome(int n) {\n        int count = 0;\n        while (!isPalindrome(n) && count < 5) {\n            int k = reversDigits(n);\n            n += k;\n            count++;\n        }\n        if (isPalindrome(n))\n            return n;\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def isSumPalindrome(self, n):\n        # Function to reverse a number\n        def reverse(n):\n            rev_num = 0\n            while n > 0:\n                rev_num = rev_num * 10 + n % 10\n                n = n // 10\n            return rev_num\n\n        # Function to check if a number is palindrome\n        def isPalindrome(n):\n            return reverse(n) == n\n\n        count = 0\n        # Iterate until the number is a palindrome or count reaches 5\n        while ((isPalindrome(n) == False) and count < 5):\n            k = reverse(n)\n            n += k\n            count += 1\n\n        # Return the final number if it is palindrome, otherwise return -1\n        if isPalindrome(n):\n            return n\n        return -1",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\nclass Solution {\n    // Function to reverse the digits of a number.\n    public int reversDigits(int num) {\n        int rev_num = 0;\n        while (num > 0) {\n            rev_num = rev_num * 10 + num % 10;\n            num = num / 10;\n        }\n        return rev_num;\n    }\n\n    /* Function to check whether the number is palindrome or not */\n    public bool isPalindrome(int num) { return (reversDigits(num) == num); }\n\n    // Function to find palindrome by adding reverse of the number to itself.\n    public int isSumPalindrome(int n) {\n        int count = 0;\n        while (!isPalindrome(n) && count < 5) {\n            int k = (int)reversDigits(n);\n            n += k;\n            count++;\n        }\n        if (isPalindrome(n)) return n;\n        return -1;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    isSumPalindrome(N) {\n        let count = 0;\n        while (!this.isPalindrome(N) && count < 5) {\n            let k = this.reversDigits(N);\n            N += k;\n            count++;\n        }\n        if (this.isPalindrome(N)) {\n            return N;\n        }\n        return -1;\n    }\n\n    reversDigits(num) {\n        let rev_num = 0;\n        while (num > 0) {\n            rev_num = rev_num * 10 + num % 10;\n            num = Math.floor(num / 10);\n        }\n        return rev_num;\n    }\n\n    isPalindrome(num) {\n        let reversedNum = this.reversDigits(num);\n        return reversedNum === num;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}