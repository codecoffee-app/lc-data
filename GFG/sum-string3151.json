{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703705,
            "title": "Sum-string",
            "titleSlug": "sum-string3151",
            "content": "<p><span >Given a string of <strong>digits</strong>, the task is to check if it is a &lsquo;<strong>sum-string</strong>&rsquo;. A string <strong>S</strong> is called a sum-string when it is broken down into more than one substring and the rightmost substring can be written as a sum of two substrings before it and the same is recursively true for substrings before it. Please note that, the rightmost substring shouldnot contain leading zeroes.</span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>Input:</strong>\nS = \"12243660\"\n<strong>Output:</strong>\n1\n<strong>Explanation:</strong>\n\"12243660\" can be broken down as {\"12\", \"24\", \"36\", \"60\"}.<br />We can get 60 from 24 and 36 as 24 + 36 = 60. Similarly 36 can be written as 12 + 24.</span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input:</strong>\n1111112223\n<strong>Output:</strong>\n1\n<strong>Explanation:<br /></strong>\"1111112223\" can be broken down as {\"1\", \"111\", \"112\", \"223\"}.<br /></span><span >We can get 223 from 111 and 112 as 111 + 112 = 223. Similarly 112 can be written as 1 + 111.</span></pre>\n<p><span ><strong>Your Task:</strong></span></p>\n<p><span >You don't need to read input or print anything. Your task is to complete the function <strong>isSumString()</strong> which takes the string S and returns 1 is S is a sum-string otherwise returns 0.</span></p>\n<p><span ><strong>Expected Time Complexity: </strong>O(|S|<sup>3</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(|S|)</span></p>\n<p><span ><strong>Constraints:<br /></strong>1 &lt;= |S| &lt;= 500</span><span ><br /><span >String consists of characters from '0' to '9'.</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string of digits, determine if it is a 'sum-string'. A string S is a sum-string if it can be broken down into more than one substring, where the rightmost substring is the sum of the two substrings before it, and this holds recursively for substrings before it. The rightmost substring must not contain leading zeroes.",
                "constraints": [
                    "1 <= |S| <= 500",
                    "String consists of characters from '0' to '9'"
                ],
                "testcases": [
                    {
                        "input": "12243660",
                        "output": "1",
                        "explanation": "The string can be broken down as {\"12\", \"24\", \"36\", \"60\"}. 60 can be obtained by summing 24 and 36 (24 + 36 = 60). Similarly, 36 can be written as 12 + 24."
                    },
                    {
                        "input": "1111112223",
                        "output": "1",
                        "explanation": "The string can be broken down as {\"1\", \"111\", \"112\", \"223\"}. 223 can be obtained by summing 111 and 112 (111 + 112 = 223). Similarly, 112 can be written as 1 + 111."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try thinking to check possibilities recursively.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "nutanix"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\r\nclass Solution{   \r\n\r\npublic:\r\n    // Function to add two strings representing numbers\r\n    string string_sum(string str1, string str2)\r\n    {\r\n        // Swapping the strings if str1 has fewer digits than str2\r\n        if (str1.size() < str2.size())\r\n            swap(str1, str2);\r\n\r\n        int m = str1.size();\r\n        int n = str2.size();\r\n        string ans = \"\";\r\n        int carry = 0;\r\n\r\n        // Adding digits from right to left\r\n        for (int i = 0; i < n; i++) \r\n        {\r\n            // Calculating sum and carry for current digits\r\n            int ds = ((str1[m - 1 - i] - '0') +\r\n                        (str2[n - 1 - i] - '0') +\r\n                        carry) % 10;\r\n\r\n            carry = ((str1[m - 1 - i] - '0') +\r\n                        (str2[n - 1 - i] - '0') +\r\n                        carry) / 10;\r\n\r\n            ans = char(ds + '0') + ans;\r\n        }\r\n\r\n        // Adding remaining digits from str1\r\n        for (int i = n; i < m; i++) \r\n        {\r\n            int ds = (str1[m - 1 - i] - '0' +\r\n                        carry) % 10;\r\n            carry = (str1[m - 1 - i] - '0' +\r\n                        carry) / 10;\r\n            ans = char(ds + '0') + ans;\r\n        }\r\n\r\n        // Adding the final carry if present\r\n        if (carry)\r\n            ans = char(carry + '0') + ans;\r\n        return ans;\r\n    }\r\n\r\n    // Function to check if string can be split into a sum string\r\n    bool checkSumStrUtil(string str, int beg,\r\n                        int len1, int len2)\r\n    {\r\n        // Getting the substring corresponding to the first number\r\n        string s1 = str.substr(beg, len1);\r\n\r\n        // Getting the substring corresponding to the second number\r\n        string s2 = str.substr(beg + len1, len2);\r\n\r\n        // Calculating the sum of the two numbers\r\n        string s3 = string_sum(s1, s2);\r\n\r\n        int s3_len = s3.size();\r\n\r\n        // If the length of the sum is greater than the remaining substring,\r\n        // then it is not a sum string\r\n        if (s3_len > str.size() - len1 - len2 - beg)\r\n            return false;\r\n\r\n        // If the sum matches the next substring, check recursively for the remaining substring\r\n        if (s3 == str.substr(beg + len1 + len2, s3_len)) \r\n        {\r\n            // If there are no remaining substrings, it is a sum string\r\n            if (beg + len1 + len2 + s3_len == str.size())\r\n                return true;\r\n\r\n            // Checking for the remaining substring\r\n            return checkSumStrUtil(str, beg + len1, len2,\r\n                                    s3_len);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Function to check if a string can be split into a sum string\r\n    bool isSumStr(string str)\r\n    {\r\n        int n = str.size();\r\n\r\n        // Checking all possible combinations of splitting the string into two numbers\r\n        for (int i = 1; i < n; i++)\r\n            for (int j = 1; i + j < n; j++)\r\n                if (checkSumStrUtil(str, 0, i, j))\r\n                    return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    // Function to check if a string is a sum string\r\n    int isSumString(string S)\r\n    {\r\n        return isSumStr(S);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution \r\n{\r\n    private String stringSum(String str1, String str2) \r\n    {\r\n        if (str1.length() < str2.length()) {\r\n            String temp = str1;\r\n            str1 = str2;\r\n            str2 = temp;\r\n        }\r\n\r\n        int m = str1.length();\r\n        int n = str2.length();\r\n        StringBuilder ans = new StringBuilder();\r\n        int carry = 0;\r\n\r\n        for (int i = 0; i < n; i++) \r\n        {\r\n            int ds = ((str1.charAt(m - 1 - i) - '0') +\r\n                    (str2.charAt(n - 1 - i) - '0') +\r\n                    carry) % 10;\r\n\r\n            carry = ((str1.charAt(m - 1 - i) - '0') +\r\n                    (str2.charAt(n - 1 - i) - '0') +\r\n                    carry) / 10;\r\n\r\n            ans.insert(0, ds);\r\n        }\r\n\r\n        for (int i = n; i < m; i++) {\r\n            int ds = (str1.charAt(m - 1 - i) - '0' +\r\n                    carry) % 10;\r\n            carry = (str1.charAt(m - 1 - i) - '0' +\r\n                    carry) / 10;\r\n            ans.insert(0, ds);\r\n        }\r\n\r\n        if (carry > 0) \r\n        {\r\n            ans.insert(0, carry);\r\n        }\r\n\r\n        return ans.toString();\r\n    }\r\n\r\n    private boolean checkSumStrUtil(String str, int beg, int len1, int len2) \r\n    {\r\n        String s1 = str.substring(beg, beg + len1);\r\n        String s2 = str.substring(beg + len1, beg + len1 + len2);\r\n        String s3 = stringSum(s1, s2);\r\n        int s3Len = s3.length();\r\n\r\n        if (s3Len > str.length() - len1 - len2 - beg) {\r\n            return false;\r\n        }\r\n\r\n        if (s3.equals(str.substring(beg + len1 + len2, beg + len1 + len2 + s3Len))) {\r\n            if (beg + len1 + len2 + s3Len == str.length()) {\r\n                return true;\r\n            }\r\n\r\n            return checkSumStrUtil(str, beg + len1, len2, s3Len);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean isSumStr(String str) {\r\n        int n = str.length();\r\n\r\n        for (int i = 1; i < n; i++) {\r\n            for (int j = 1; i + j < n; j++) {\r\n                if (checkSumStrUtil(str, 0, i, j)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public int isSumString(String S) {\r\n        return isSumStr(S) ? 1 : 0;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\r\n    def string_sum(self, str1, str2):\r\n        if len(str1) < len(str2):\r\n            str1, str2 = str2, str1\r\n\r\n        m, n = len(str1), len(str2)\r\n        ans = \"\"\r\n        carry = 0\r\n\r\n        for i in range(n):\r\n            ds = ((ord(str1[m - 1 - i]) - ord('0')) +\r\n                  (ord(str2[n - 1 - i]) - ord('0')) +\r\n                  carry) % 10\r\n\r\n            carry = ((ord(str1[m - 1 - i]) - ord('0')) +\r\n                     (ord(str2[n - 1 - i]) - ord('0')) +\r\n                     carry) // 10\r\n\r\n            ans = chr(ds + ord('0')) + ans\r\n\r\n        for i in range(n, m):\r\n            ds = (ord(str1[m - 1 - i]) - ord('0') +\r\n                  carry) % 10\r\n            carry = (ord(str1[m - 1 - i]) - ord('0') +\r\n                     carry) // 10\r\n            ans = chr(ds + ord('0')) + ans\r\n\r\n        if carry:\r\n            ans = chr(carry + ord('0')) + ans\r\n        return ans\r\n\r\n    def checkSumStrUtil(self, string, beg, len1, len2):\r\n        s1 = string[beg: beg + len1]\r\n        s2 = string[beg + len1: beg + len1 + len2]\r\n        s3 = self.string_sum(s1, s2)\r\n        s3_len = len(s3)\r\n\r\n        if s3_len > len(string) - len1 - len2 - beg:\r\n            return False\r\n\r\n        if s3 == string[beg + len1 + len2: beg + len1 + len2 + s3_len]:\r\n            if beg + len1 + len2 + s3_len == len(string):\r\n                return True\r\n            return self.checkSumStrUtil(string, beg + len1, len2, s3_len)\r\n        return False\r\n\r\n    def isSumStr(self, string):\r\n        n = len(string)\r\n\r\n        for i in range(1, n):\r\n            for j in range(1, n - i):\r\n                if self.checkSumStrUtil(string, 0, i, j):\r\n                    return True\r\n        return False\r\n\r\n    def isSumString(self, S):\r\n        return int(self.isSumStr(S))\r\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}