{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700179,
      "title": "Sum Tree",
      "titleSlug": "sum-tree",
      "content": "<div class=\"entry-content\">\n<p><span >Given a Binary Tree. Check for the <strong>Sum Tree</strong> for every node except the leaf node. Return true if it is a Sum Tree otherwise, return false.</span></p>\n<blockquote>\n<p><span ><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">A <strong>SumTree</strong> is a Binary Tree where the value of a node is equal to the sum of the nodes present in its<strong> left</strong> subtree and <strong>right </strong>subtree. </span>An empty tree is also a Sum Tree as the sum of an empty tree can be considered to be <strong>0</strong>. A leaf node is also considered a Sum Tree.</span></p>\n</blockquote>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong>\n    3\n  /   \\    \n 1     2\n<strong>Output:</strong> true\n<strong>Explanation: </strong>The sum of left subtree and right subtree is 1 + 2 = 3, which is the value of the root node. Therefore,the given binary tree is a sum tree.\n</span></pre>\n<pre><span ><strong>Input:</strong>\n\\t    10\n\\t  /    \\\n\\t20\\t30\n    /   \\ \n   10    10\n<strong>Output: </strong>false\n<strong>Explanation: </strong>The given tree is not a sum tree. For the root node, sum of elements in left subtree is 40 and sum of elements in right subtree is 30. Root element = 10 which is not equal to 30+40.<br /></span></pre>\n<pre><span ><strong>Input:</strong>\n   25\n  /   \\    \n 9     15\n<strong>Output:</strong> false</span></pre>\n<p><span ><strong>Constraints:</strong><br />2 &le; number of nodes &le; 10<sup>5<br /></sup>1 &le; node-&gt;data &le; 10<sup>5</sup></span></p>\n</div>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA"
    },
    "similar": [],
    "hints": [
      "<p><span >&nbsp;If the node is a leaf node then sum of subtree rooted with this node is equal to value of this node.<br /></span></p>",
      "<p><span style=\"font-size: 18px;\">If the node is not a leaf node then sum of subtree rooted with this node is twice the value of this node. Use recursion/tree traversal to check for subtrees.&nbsp;</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Tree",
        "slug": "tree"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": ["amazon", "microsoft", "de-shaw", "goldman-sachs", "adobe"],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "class Solution {\n  public:\n    int isLeaf(struct Node* node) {\n        if (node == NULL)\n            return 0;\n        if (node->left == NULL && node->right == NULL)\n            return 1;\n        return 0;\n    }\n\n    /* returns 1 if SumTree property holds for the given\n        tree */\n  public:\n    bool isSumTree(struct Node* node) {\n        int ls; // for sum of nodes in left subtree\n        int rs; // for sum of nodes in right subtree\n\n        /* If node is NULL or it's a leaf node then\n           return true */\n        if (node == NULL || isLeaf(node))\n            return 1;\n\n        if (isSumTree(node->left) && isSumTree(node->right)) {\n            // Get the sum of nodes in left subtree\n            if (node->left == NULL)\n                ls = 0;\n            else if (isLeaf(node->left))\n                ls = node->left->data;\n            else\n                ls = 2 * (node->left->data);\n\n            // Get the sum of nodes in right subtree\n            if (node->right == NULL)\n                rs = 0;\n            else if (isLeaf(node->right))\n                rs = node->right->data;\n            else\n                rs = 2 * (node->right->data);\n\n            /* If root's data is equal to sum of nodes in left\n               and right subtrees then return 1 else return 0*/\n            return (node->data == ls + rs);\n        }\n\n        return 0;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "class Solution {\n    /* Utility function to check if the given node is leaf or not */\n    boolean isLeaf(Node node) {\n        if (node == null) return false;\n        if (node.left == null && node.right == null) return true;\n        return false;\n    }\n\n    /* returns 1 if SumTree property holds for the given\n       tree */\n    boolean isSumTree(Node node) {\n        int ls; // for sum of nodes in left subtree\n        int rs; // for sum of nodes in right subtree\n\n        /* If node is NULL or it's a leaf node then\n         return true */\n        if (node == null || isLeaf(node) == true) return true;\n\n        if (isSumTree(node.left) != false && isSumTree(node.right) != false) {\n            // Get the sum of nodes in left subtree\n            if (node.left == null)\n                ls = 0;\n            else if (isLeaf(node.left) != false)\n                ls = node.left.data;\n            else\n                ls = 2 * (node.left.data);\n\n            // Get the sum of nodes in right subtree\n            if (node.right == null)\n                rs = 0;\n            else if (isLeaf(node.right) != false)\n                rs = node.right.data;\n            else\n                rs = 2 * (node.right.data);\n\n            /* If root's data is equal to sum of nodes in left\n               and right subtrees then return 1 else return 0*/\n            if ((node.data == rs + ls))\n                return true;\n            else\n                return false;\n        }\n\n        return false;\n    }\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "# Back-end complete function Template for Python 3\nclass Solution:\n\n    # Helper method to check if a node is a leaf node\n    def is_leaf(self, node):\n        # A node is considered leaf if it is None or has no left and right children\n        if node is None:\n            return True\n        if node.left is None and node.right is None:\n            return True\n        return False\n\n    # Main method to check if the given binary tree is a Sum Tree\n    def is_sum_tree(self, node):\n        # If the node is None or it's a leaf node, it is a Sum Tree\n        if node is None or self.is_leaf(node):\n            return True\n\n        # Recursively check if the left and right subtrees are Sum Trees\n        if self.is_sum_tree(node.left) and self.is_sum_tree(node.right):\n            ls = 0  # Initialize left subtree sum\n            rs = 0  # Initialize right subtree sum\n\n            # Calculate the sum for the left subtree\n            if node.left is None:\n                ls = 0  # No left child, sum is 0\n            elif self.is_leaf(node.left):\n                ls = node.left.data  # Leaf node, its value contributes to the sum\n            else:\n                ls = 2 * node.left.data  # Non-leaf node, add its value\n\n            # Calculate the sum for the right subtree\n            if node.right is None:\n                rs = 0  # No right child, sum is 0\n            elif self.is_leaf(node.right):\n                rs = node.right.data  # Leaf node, its value contributes to the sum\n            else:\n                rs = 2 * node.right.data  # Non-leaf node, add its value\n\n            # Check if the current node's value equals the sum of its children's values\n            return node.data == ls + rs\n\n        return False  # If any of the conditions fail, return False\n",
        "lang_text": "python3"
      },
      {
        "lang": "Javascript",
        "full_func": "class Solution {\n    // Helper method to check if a node is a leaf node\n    isLeaf(node) {\n        // A node is considered a leaf if it is null or has no left and right children\n        if (node === null) return true; // Null node is treated as a leaf\n        if (node.left === null && node.right === null)\n            return true; // Both children are null\n        return false;    // Otherwise, it's not a leaf\n    }\n\n    // Main method to check if the given binary tree is a Sum Tree\n    isSumTree(node) {\n        let ls; // Initialize left subtree sum\n        let rs; // Initialize right subtree sum\n\n        // If the node is null or it's a leaf node, it's considered a Sum Tree\n        if (node === null || this.isLeaf(node)) return true;\n\n        // Recursively check if the left and right subtrees are Sum Trees\n        if (this.isSumTree(node.left) && this.isSumTree(node.right)) {\n\n            // Calculate the sum for the left subtree\n            if (node.left === null)\n                ls = 0; // No left child, sum is 0\n            else if (this.isLeaf(node.left))\n                ls = node.left.key; // Leaf node, its value contributes to the sum\n            else\n                ls = 2 * (node.left.key); // Non-leaf node, add its value\n\n            // Calculate the sum for the right subtree\n            if (node.right === null)\n                rs = 0; // No right child, sum is 0\n            else if (this.isLeaf(node.right))\n                rs = node.right.key; // Leaf node, its value contributes to the sum\n            else\n                rs = 2 * (node.right.key); // Non-leaf node, add its value\n\n            // Check if the current node's value equals the sum of its children's values\n            return (node.key === ls + rs);\n        }\n\n        return false; // If any of the conditions fail, return false\n    }\n}\n",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
