{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703299,
            "title": "Sum Triangle for given array",
            "titleSlug": "sum-triangle-for-given-array1159",
            "content": "<p><span style=\"font-size: 18px;\">Given an array, write a program to construct a triangle where the last row contains elements of the given array, every element of the second last row contains the sum of the below two elements with modulo 10 <sup>9</sup>+7, and so on.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 7, 3, 6, 7]\n<strong>Output: </strong>[81, 40, 41, 21, 19, 22, 11, 10, 9, 13, 4, 7, 3, 6, 7]\n<strong>Explanation:</strong>\n\\t 81\n     40  41\n   21  19  22\n 11  10   9   13\n4   7   3   6    7 </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 4]\n<strong>Output: </strong>[9, 3, 6, 1, 2, 4] <br /><strong>Explanation:<br />   </strong>9<strong><br /> </strong>3   6<strong><br /></strong>1  2  4</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(n<sup>2</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=arr.size()&lt;=10<sup>3</sup><br />1&lt;=arr[i]&lt;=10<sup>2</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >An important observation about the output is that the final value is at the top and the top element needs to be printed first. Therefore, we use a 2D auxiliary array to construct the triangle in bottom-up manner and then print the triangle.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> getTriangle(vector<int>& arr) {\n        int n = arr.size();\n        // Initialize a 2D array to store triangle\n        int tri[n][n];\n        memset(tri, 0, sizeof(tri));\n\n        // Initialize last row of triangle\n        for (int i = 0; i < n; i++)\n            tri[n - 1][i] = arr[i];\n\n        // Fill other rows\n        for (int i = n - 2; i >= 0; i--)\n            for (int j = 0; j <= i; j++)\n                tri[i][j] = (tri[i + 1][j] + tri[i + 1][j + 1]) % 1000000007;\n\n        vector<int> Triangle;\n        // Storing the triangle\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j <= i; j++)\n                Triangle.push_back(tri[i][j]);\n\n        return Triangle;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public ArrayList<Integer> getTriangle(int[] arr) {\n        int n = arr.length;\n        // Initialize a 2D array to store the triangle\n        int[][] tri = new int[n][n];\n\n        // Initialize the last row of the triangle\n        for (int i = 0; i < n; i++) {\n            tri[n - 1][i] = arr[i];\n        }\n\n        // Fill other rows\n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = 0; j <= i; j++) {\n                tri[i][j] = (tri[i + 1][j] + tri[i + 1][j + 1]) % 1000000007;\n            }\n        }\n\n        // Storing the triangle in an ArrayList\n        ArrayList<Integer> Triangle = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= i; j++) {\n                Triangle.add((int)tri[i][j]);\n            }\n        }\n\n        return Triangle;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def getTriangle(self, arr):\n        n = len(arr)\n        # Initialize a 2D list to store the triangle\n        tri = [[0] * n for _ in range(n)]\n\n        # Initialize the last row of the triangle\n        for i in range(n):\n            tri[n - 1][i] = arr[i]\n\n        # Fill other rows\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1):\n                tri[i][j] = (tri[i + 1][j] + tri[i + 1][j + 1]) % 1000000007\n\n        # Storing the triangle in a list\n        Triangle = []\n        for i in range(n):\n            for j in range(i + 1):\n                Triangle.append(tri[i][j])\n\n        return Triangle\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    getTriangle(arr) {\n        let n = arr.length;\n        // Initialize a 2D array to store the triangle\n        let tri = Array.from({length : n}, () => Array(n).fill(0));\n\n        // Initialize the last row of the triangle\n        for (let i = 0; i < n; i++) {\n            tri[n - 1][i] = arr[i];\n        }\n\n        // Fill other rows\n        for (let i = n - 2; i >= 0; i--) {\n            for (let j = 0; j <= i; j++) {\n                tri[i][j] = (tri[i + 1][j] + tri[i + 1][j + 1]) % 1000000007;\n            }\n        }\n\n        // Storing the triangle in an array\n        let Triangle = [];\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j <= i; j++) {\n                Triangle.push(tri[i][j]);\n            }\n        }\n\n        return Triangle;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}