{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705115,
            "title": "Summed Matrix",
            "titleSlug": "summed-matrix5834",
            "content": "<p><span style=\"font-size: 18px; color: #000000;\"><span style=\"font-family: Mulish, sans-serif; font-size: 14pt; background-color: #ffffff;\">A matrix is constructed of size<strong> n*n</strong> and given an integer &lsquo;<strong>q&rsquo;.</strong> The value at every cell of the matrix is given as, <strong>M(i,j) = i+j,</strong> where &lsquo;<strong>M(i,j)</strong>' is the value of a cell, &lsquo;<strong>i</strong>&rsquo; is the row number, and &lsquo;<strong>j&rsquo;</strong> is the column number. Return the number of cells having value &lsquo;<strong>q</strong>&rsquo;.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> Assume, the array is in 1-based indexing.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\"><strong>n = </strong>4, <strong>q = </strong>7</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">2</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">Matrix becomes\n2 3 4 5 \n3 4 5 6 \n4 5 6 7\n5 6 7 8\n</span><span style=\"font-size: 18px;\">The count of 7 is 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\"><strong>n = </strong>5, <strong>q = </strong>4</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">3</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">Matrix becomes\n2 3 4 5 6&nbsp;\n3 4 5 6 7&nbsp;\n4 5 6 7 8&nbsp;\n5 6 7 8 9&nbsp;\n6 7 8 9 10&nbsp;\nThe count of 4 is 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(1)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; n,q &le; 10<sup>18</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an n x n matrix where each cell M(i, j) is equal to i + j (using 1-based indexing), and an integer q, determine the number of cells in the matrix that have the value q.",
                "constraints": [
                    "1 <= n <= 10^18",
                    "1 <= q <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "n = 4, q = 7",
                        "output": "2",
                        "explanation": "The matrix is:\n2 3 4 5\n3 4 5 6\n4 5 6 7\n5 6 7 8\nThe number 7 appears twice."
                    },
                    {
                        "input": "n = 5, q = 4",
                        "output": "3",
                        "explanation": "The matrix is:\n2 3 4 5 6\n3 4 5 6 7\n4 5 6 7 8\n5 6 7 8 9\n6 7 8 9 10\nThe number 4 appears three times."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check if q&nbsp; is greater than&nbsp; 2*n to return 0, otherwise compute the sum based on whether <span class=\"katex\"><span class=\"katex-mathml\">n</span></span> is greater than or equal to <span class=\"katex\"><span class=\"katex-mathml\">q</span></span> or less than <span class=\"katex\"><span class=\"katex-mathml\">q</span></span>.</p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution {\n  public:\n    //Function to calculate the sum in the given matrix.\n    long long sumMatrix(long long n, long long q) {\n        \n        long long ans;\n        \n        //if q is greater than 2*n, return 0 as there won't be any elements\n        //in the matrix.\n        if(q > 2*n)\n            return 0ll;\n        \n        //if n is greater than or equal to q, calculate ans as q-1.\n        else if(n >= q)\n            ans = q-1;\n        //if n is less than q, calculate ans as 2*n - q + 1.\n        else\n            ans = (2*n) - q + 1;\n            \n        //returning the answer.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to calculate the sum in the given matrix.\n    public long sumMatrix(long n, long q) {\n\n        long ans;\n\n        // if q is greater than 2*n, return 0 as there won't be any elements\n        // in the matrix.\n        if (q > 2 * n) {\n            return 0L;\n        }\n\n        // if n is greater than or equal to q, calculate ans as q-1.\n        else if (n >= q) {\n            ans = q - 1;\n        }\n        // if n is less than q, calculate ans as 2*n - q + 1.\n        else {\n            ans = (2 * n) - q + 1;\n        }\n\n        // returning the answer.\n        return ans;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def sumMatrix(self, n, q):\n        # if q is greater than 2*n, return 0 as there won't be any elements\n        # in the matrix.\n        if q > 2 * n:\n            return 0\n\n        # if n is greater than or equal to q, calculate ans as q-1.\n        elif n >= q:\n            ans = q - 1\n        # if n is less than q, calculate ans as 2*n - q + 1.\n        else:\n            ans = (2 * n) - q + 1\n\n        # returning the answer.\n        return ans\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}