{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702913,
            "title": "Super Primes",
            "titleSlug": "super-primes2443",
            "content": "<p><span style=\"font-size: 20px;\">A prime number is Super Prime if it is a sum of two primes. Find all the Super Primes upto <strong>N</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 5\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>5 = 2 + 3, 5 is the\nonly super prime</span>\n\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 10 \n<strong>Output:</strong> 2\n<strong>Explanation: </strong>5 and 7 are super primes</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>superPrimes()</strong>&nbsp;which takes the <strong>N </strong>as input and returns the count of super primes.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(Nlog(logN))<br /><strong>Expected Auxiliary Space:</strong> O(N)</span><br /><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; <strong>N</strong> &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A Super Prime is a prime number that can be expressed as the sum of two other prime numbers.  Find the count of all Super Primes less than or equal to a given number N.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "1",
                        "explanation": "The prime number 5 can be expressed as the sum of two primes: 2 + 3 = 5. Therefore, 5 is a Super Prime. There are no other Super Primes less than or equal to 5."
                    },
                    {
                        "input": "10",
                        "output": "2",
                        "explanation": "The prime numbers 5 and 7 are Super Primes. 5 = 2 + 3, and 7 = 2 + 5. There are no other Super Primes less than or equal to 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Apart from 2, all of the prime numbers are odd. So it is not possible to represent a prime number (which is odd) to be written as a sum of two odd prime numbers, so we are sure that one of the two prime number should be 2.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n    //Function to count the number of super primes.\n    int superPrimes(int n)\n    {\n        //Array to store whether a number is prime or not.\n        bool isPrime[n+1];\n\n        //Initializing all numbers as prime.\n        memset(isPrime, true, sizeof isPrime);\n\n        //Marking 0 and 1 as not prime.\n        isPrime[0] = isPrime[1] = false;\n\n        //Iterating from 2 to n to find primes.\n        for(int i = 2; i <= n; i++)\n        {\n            //Checking if the current number is prime.\n            if(isPrime[i])\n            {\n                //Marking all multiples of current number as not prime.\n                for(int j = i*2; j <= n; j += i)\n                {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        //Variable to store the count of super primes.\n        int ans = 0;\n\n        //Iterating from 4 to n to count super primes.\n        for(int i = 4; i <= n; i++)\n        {\n            //Checking if both current number and (current number - 2) are prime.\n            if(isPrime[i] and isPrime[i-2])\n            {\n                //Incrementing the count of super primes.\n                ans++;\n            }\n        }\n\n        //Returning the count of super primes.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\r\n\r\nclass Solution{\r\n\tint superPrimes(int n) {\r\n\t\t// Create a boolean array to store the prime numbers\r\n\t\tboolean isPrime[] = new boolean[n+1];\r\n\t\t\r\n\t\t// Mark all numbers as prime initially\r\n\t\tArrays.fill(isPrime, true);\r\n\r\n\t\t// 0 and 1 are not prime numbers, so mark them as false\r\n\t\tisPrime[0] = isPrime[1] = false;\r\n\r\n\t\t// Loop through all numbers starting from 2\r\n\t\tfor(int i = 2; i <= n; i++)\r\n\t\t{\r\n\t\t\t// If the number is prime\r\n\t\t\tif(isPrime[i])\r\n\t\t\t{\r\n\t\t\t\t// Mark all multiples of the number as non-prime\r\n\t\t\t\tfor(int j = i*2; j <= n; j += i)\r\n\t\t\t\t{\r\n\t\t\t\t\tisPrime[j] = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Initialize a counter for the number of super primes\r\n\t\tint ans = 0;\r\n\r\n\t\t// Check if each number from 4 to n is a super prime\r\n\t\tfor(int i = 4; i <= n; i++)\r\n\t\t{\r\n\t\t\t// If both the number and its predecessor are prime,\r\n\t\t\t// increment the counter\r\n\t\t\tif(isPrime[i] && isPrime[i-2])\r\n\t\t\t{\r\n\t\t\t\tans++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Return the number of super primes\r\n\t\treturn ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def superPrimes(self, n):\n        primes = [1] * (n + 1)  # initialize a list to track prime numbers\n        for i in range(2, (n + 1) // 2):  # iterate from 2 to half of n\n            if primes[i]:  # check if the number is prime\n                j = 2\n                while i * j < n + 1:  # mark all the multiples of the prime number as non-prime\n                    primes[i * j] = 0\n                    j += 1\n        count = 0  # initialize a counter to count the number of super primes\n        for i in range(5, n + 1):  # iterate from 5 to n\n            if primes[i] and primes[\n                    i - 2]:  # check if the number 'i' and 'i-2' are prime\n                count += 1\n        return count  # return the count of super primes\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution{\n    public int superPrimes(int n)\n    {\n        //Array to store whether a number is prime or not.\n        bool[] isPrime = new bool[n+1];\n\n        //Initializing all numbers as prime.\n        Array.Fill(isPrime, true);\n\n        //Marking 0 and 1 as not prime.\n        isPrime[0] = isPrime[1] = false;\n\n        //Iterating from 2 to n to find primes.\n        for(int i = 2; i <= n; i++)\n        {\n            //Checking if the current number is prime.\n            if(isPrime[i])\n            {\n                //Marking all multiples of current number as not prime.\n                for(int j = i*2; j <= n; j += i)\n                {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        //Variable to store the count of super primes.\n        int ans = 0;\n\n        //Iterating from 4 to n to count super primes.\n        for(int i = 4; i <= n; i++)\n        {\n            //Checking if both current number and (current number - 2) are prime.\n            if(isPrime[i] && isPrime[i-2])\n            {\n                //Incrementing the count of super primes.\n                ans++;\n            }\n        }\n\n        //Returning the count of super primes.\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @returns {number}\n */\n\nclass Solution {\n    //Function to find the count of super prime numbers.\n    superPrimes(n)\n    {\n        let primes = new Array(n+1).fill(1); //initialize a list to track prime numbers\n        \n        for(let i=2; i <= (n+1)/2; i++) { //iterate from 2 to half of n\n            if(primes[i]) { //check if the number is prime\n                let j = 2;\n                while(i*j < n+1) { //mark all the multiples of the prime number as non-prime\n                    primes[i*j] = 0;\n                    j += 1;\n                }\n            }\n        }\n        \n        let count = 0; //initialize a counter to count the number of super primes\n        for(let i=5; i <= n; i++) { //iterate from 5 to n\n            if(primes[i] && primes[i-2]) { //check if the number 'i' and 'i-2' are prime\n                count += 1;\n            }\n        }\n        \n        return count; //return the count of super primes\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}