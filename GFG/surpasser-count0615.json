{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703454,
            "title": "Surpasser Count",
            "titleSlug": "surpasser-count0615",
            "content": "<p><span style=\"font-size: 18px;\">Given an array containing distinct integers, find the number of surpassers for each of its elements.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\">An element <strong>y</strong> is said to be the surpasser of element <strong>x</strong> if it is a greater element on the right of x. ie if x = arr[i] and y = arr[j], i&lt;j and arr[i] &lt; arr[j].&nbsp;<br /></span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 5, 1, 2, 3]<br /></span><span style=\"font-size: 18px;\"><strong>Output:</strong> [1, 0, 2, 1, 0]</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong> There are no elements greater than 3 at the right of 3. There is one element at right of 2 and greater than 2. There are 2 elements greater than 1 at the right of 1. And so on.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 7, 5, 3, 8, 1]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> [4, 1, 1, 1, 0, 0]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of distinct integers, determine the number of surpassers for each element. A surpasser of an element `x` (at index `i`) is any element `y` (at index `j`) to the right of `x` (i.e., `i < j`) that is greater than `x` (i.e., `arr[i] < arr[j]`).  In essence, for each element in the array, count how many elements to its right are larger.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[4, 5, 1, 2, 3]",
                        "output": "[1, 0, 2, 1, 0]",
                        "explanation": "For the element 4, only 5 is a surpasser. For 5, there are no surpassers. For 1, both 2 and 3 are surpassers. For 2, only 3 is a surpasser. For 3, there are no surpassers."
                    },
                    {
                        "input": "[2, 7, 5, 3, 8, 1]",
                        "output": "[4, 1, 1, 1, 0, 0]",
                        "explanation": "For the element 2, the surpassers are 7, 5, 3 and 8. For the element 7, the surpasser is 8. For the element 5, the surpasser is 8. For the element 3, the surpasser is 8. For the element 8 and 1, there are no surpassers."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span ><strong>Method 1 (Naive)</strong></span><br /><span >The naive solution would be to run two loops. For each element of the array, we count all elements greater than it to its right. The complexity of this solution is O(n<sup>2</sup>)</span></p>",
            "<p><span ><strong>Method 2 (Uses Merge Sort)</strong></span><br /><span >For any element of the array, we can easily find out number of elements to the right that are greater than that element if we know number of elements to its right that are less than that element. The idea is to count the number of inversions for each element of the array using merge sort. So, surpasser count of an element at position i will be equal to &ldquo;n &ndash; i &ndash; inversion-count&rdquo; at that position where n is the size of the array.</span></p>\n<p><span >We have already discussed how to find inversion count of complete array&nbsp;<a href=\"https://www.geeksforgeeks.org/counting-inversions/\">here</a>. We have modified the discussed approach to find number of inversions for each element of the array instead of returning inversion count of whole array. Also, as all elements of the array are distinct, we maintain a map that stores inversion count for each element of the array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "google",
            "yahoo"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to merge two halves of array\n    void merge(int arr[], int l, int m, int r, unordered_map<int, int>& hm) {\n        int i, j, k;\n        int n1 = m - l + 1;\n        int n2 = r - m;\n\n        // Create temp arrays\n        vector<int> L(n1), R(n2);\n\n        // Copy data to temp arrays L[] and R[]\n        for (i = 0; i < n1; i++)\n            L[i] = arr[l + i];\n        for (j = 0; j < n2; j++)\n            R[j] = arr[m + 1 + j];\n\n        // Merge the temp arrays back into arr[l..r]\n        i = 0, j = 0, k = l;\n        int c = 0;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                // Increment surpasser count for L[i]\n                hm[L[i]] += c;\n                arr[k++] = L[i++];\n            } else {\n                arr[k++] = R[j++];\n                // Surpasser found\n                c++;\n            }\n        }\n\n        // Copy the remaining elements of L[]\n        while (i < n1) {\n            hm[L[i]] += c;\n            arr[k++] = L[i++];\n        }\n\n        // Copy the remaining elements of R[]\n        while (j < n2)\n            arr[k++] = R[j++];\n    }\n\n    // Function to perform merge sort\n    void mergeSort(int arr[], int l, int r, unordered_map<int, int>& hm) {\n        if (l < r) {\n            int m = l + (r - l) / 2;\n            mergeSort(arr, l, m, hm);\n            mergeSort(arr, m + 1, r, hm);\n            merge(arr, l, m, r, hm);\n        }\n    }\n\n    // Function to find surpasser count\n    vector<int> findSurpasser(vector<int>& arr) {\n        int n = arr.size();\n        unordered_map<int, int> hm;\n\n        // Create a copy of the original array\n        vector<int> dup = arr;\n\n        // Sort the copy and store surpasser count for each element\n        mergeSort(dup.data(), 0, n - 1, hm);\n\n        vector<int> surpasser(n);\n        for (int i = 0; i < n; i++) {\n            surpasser[i] = (n - 1) - i - hm[arr[i]];\n        }\n\n        return surpasser;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n\n    // Function to merge two halves of the array\n    private void merge(int[] arr, int l, int m, int r, Map<Integer, Integer> hm) {\n        int n1 = m - l + 1;\n        int n2 = r - m;\n\n        // Create temp arrays\n        int[] L = new int[n1];\n        int[] R = new int[n2];\n\n        // Copy data to temp arrays L[] and R[]\n        for (int i = 0; i < n1; i++) {\n            L[i] = arr[l + i];\n        }\n        for (int j = 0; j < n2; j++) {\n            R[j] = arr[m + 1 + j];\n        }\n\n        // Merge the temp arrays back into arr[l..r]\n        int i = 0, j = 0, k = l;\n        int c = 0; // To count surpassers\n\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                // Increment surpasser count for L[i]\n                hm.put(L[i], hm.get(L[i]) + c);\n                arr[k++] = L[i++];\n            } else {\n                arr[k++] = R[j++];\n                // Surpasser found\n                c++;\n            }\n        }\n\n        // Copy the remaining elements of L[]\n        while (i < n1) {\n            hm.put(L[i], hm.get(L[i]) + c);\n            arr[k++] = L[i++];\n        }\n\n        // Copy the remaining elements of R[]\n        while (j < n2) {\n            arr[k++] = R[j++];\n        }\n    }\n\n    // Function to perform merge sort\n    private void mergeSort(int[] arr, int l, int r, Map<Integer, Integer> hm) {\n        if (l < r) {\n            int m = l + (r - l) / 2;\n            mergeSort(arr, l, m, hm);\n            mergeSort(arr, m + 1, r, hm);\n            merge(arr, l, m, r, hm);\n        }\n    }\n\n    // Function to find surpasser count\n    public List<Integer> findSurpasser(int[] nums) {\n        int n = nums.length;\n        Map<Integer, Integer> hm = new HashMap<>();\n\n        // Initialize hashmap with zero counts\n        for (int num : nums) {\n            hm.put(num, 0);\n        }\n\n        // Create a copy of the original array\n        int[] dup = Arrays.copyOf(nums, n);\n\n        // Sort the copy and store surpasser count for each element\n        mergeSort(dup, 0, n - 1, hm);\n\n        List<Integer> surpasser = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            surpasser.add((n - 1) - i - hm.get(nums[i]));\n        }\n\n        return surpasser;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to merge two halves of array\n    def merge(self, arr, l, m, r, hm):\n        n1 = m - l + 1\n        n2 = r - m\n\n        # Create temp arrays\n        L = arr[l:l + n1]\n        R = arr[m + 1:m + 1 + n2]\n\n        # Merge the temp arrays back into arr[l..r]\n        i, j, k = 0, 0, l\n        c = 0  # To count surpassers\n\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                # Increment surpasser count for L[i]\n                hm[L[i]] += c\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n                # Surpasser found\n                c += 1\n            k += 1\n\n        # Copy the remaining elements of L[]\n        while i < n1:\n            hm[L[i]] += c\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        # Copy the remaining elements of R[]\n        while j < n2:\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n    # Function to perform merge sort\n    def mergeSort(self, arr, l, r, hm):\n        if l < r:\n            m = l + (r - l) // 2\n            self.mergeSort(arr, l, m, hm)\n            self.mergeSort(arr, m + 1, r, hm)\n            self.merge(arr, l, m, r, hm)\n\n    # Function to find surpasser count\n    def findSurpasser(self, nums):\n        n = len(nums)\n        hm = {num: 0 for num in nums}\n\n        # Create a copy of the original array\n        dup = nums[:]\n\n        # Sort the copy and store surpasser count for each element\n        self.mergeSort(dup, 0, n - 1, hm)\n\n        surpasser = [0] * n\n        for i in range(n):\n            surpasser[i] = (n - 1) - i - hm[nums[i]]\n\n        return surpasser\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to merge two halves of the array\n    merge(arr, l, m, r, hm) {\n        let n1 = m - l + 1;\n        let n2 = r - m;\n\n        // Create temp arrays\n        let L = new Array(n1);\n        let R = new Array(n2);\n\n        // Copy data to temp arrays L[] and R[]\n        for (let i = 0; i < n1; i++) L[i] = arr[l + i];\n        for (let j = 0; j < n2; j++) R[j] = arr[m + 1 + j];\n\n        // Merge the temp arrays back into arr[l..r]\n        let i = 0, j = 0, k = l;\n        let c = 0;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                // Increment surpasser count for L[i]\n                hm.set(L[i], (hm.get(L[i]) || 0) + c);\n                arr[k++] = L[i++];\n            } else {\n                arr[k++] = R[j++];\n                // Surpasser found\n                c++;\n            }\n        }\n\n        // Copy the remaining elements of L[]\n        while (i < n1) {\n            hm.set(L[i], (hm.get(L[i]) || 0) + c);\n            arr[k++] = L[i++];\n        }\n\n        // Copy the remaining elements of R[]\n        while (j < n2) arr[k++] = R[j++];\n    }\n\n    // Function to perform merge sort\n    mergeSort(arr, l, r, hm) {\n        if (l < r) {\n            let m = l + Math.floor((r - l) / 2);\n            this.mergeSort(arr, l, m, hm);\n            this.mergeSort(arr, m + 1, r, hm);\n            this.merge(arr, l, m, r, hm);\n        }\n    }\n\n    // Function to find surpasser count\n    findSurpasser(nums) {\n        let n = nums.length;\n        let hm = new Map();\n\n        // Create a copy of the original array\n        let dup = nums.slice();\n\n        // Sort the copy and store surpasser count for each element\n        this.mergeSort(dup, 0, n - 1, hm);\n\n        let surpasser = new Array(n);\n        for (let i = 0; i < n; i++) {\n            surpasser[i] = (n - 1) - i - (hm.get(nums[i]) || 0);\n        }\n\n        return surpasser;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}