{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705157,
            "title": "Surround the 1's",
            "titleSlug": "surround-the-1s2505",
            "content": "<p><span style=\"font-size: 18px;\">Given a matrix of order <strong>n</strong>x<strong>m</strong>, composed of only 0's and 1's, find the number of 1's in the matrix that are surrounded by an <strong>even number (&gt;0) of 0's</strong>. The surrounding of a cell in the matrix is defined as the <strong>elements above</strong>, <strong>below</strong>, on <strong>left</strong>, on <strong>right</strong> as well as the<strong> 4 diagonal elements</strong> around the cell of the matrix. Hence, the surrounding of any matrix elements is composed of 8 elements. Find the number of such 1's.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>matrix = {{1, 0, 0}, <br />\\t    {1, 1, 0}, \n\\t    {0, 1, 0}}\n<strong>Output: <br /></strong>1\n<strong>Explanation: <br /></strong>1 that occurs in the 1st row and 1st column, has 3 surrounding elements 0,1 and 1. The occurrence of zero is odd. <br />1 that occurs in 2nd row and 1st column has 5 surrounding elements 1,0,1,1 and 0. The occurrence of zero is even. <br />1 that occurs in 2nd row and 2nd column has 8 surrounding elements. The occurrence of 0 is odd. <br />Similarly, for the 1 that occurs in 3rd row and 2nd column, the occurrence of zero in it's 5 surrounding elements is odd. \nHence, the output is 1.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>matrix = {{1}}\n<strong>Output: <br /></strong>0\n<strong>Explanation: <br /></strong>There is only 1 element in the matrix. Hence, it has no surroundings, so it's count for even 0's is 0 for the whole matrix. <br />0 is even but we want occurrence of a zero in the surrounding at least once. \nHence, output is 0.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>Count()</strong> which takes the matrix as input parameter and returns the number of 1's which are surrounded by even number of 0's.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n * m)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n, m &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of order n x m, composed of only 0's and 1's, find the number of 1's in the matrix that are surrounded by an even number (>0) of 0's. The surrounding of a cell in the matrix includes the elements above, below, left, right, and the four diagonal elements around the cell.  Therefore, each cell has 8 surrounding elements. Return the count of 1's that satisfy this condition.",
                "constraints": [
                    "1 <= n, m <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "matrix = {{1, 0, 0}, {1, 1, 0}, {0, 1, 0}}",
                        "output": "1",
                        "explanation": "The 1 at matrix[0][0] has neighbors 0, 1, and 1 (one 0). The 1 at matrix[1][0] has neighbors 1, 0, 1, 1, and 0 (two 0s). The 1 at matrix[1][1] has neighbors 1, 0, 0, 1, 1, 0, 1, 0 (four 0s). The 1 at matrix[2][1] has neighbors 1, 1, 0, 1, 0 (two 0s). Only the 1 at matrix[1][0] has an even number of surrounding zeros."
                    },
                    {
                        "input": "matrix = {{1}}",
                        "output": "0",
                        "explanation": "The single element has no surrounding elements. While 0 is an even number, the condition requires at least one surrounding 0 to exist."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do simple counting.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\npublic:\n    //Function to count the number of cells in the matrix that satisfy the given conditions.\n    int Count(vector<vector<int> >& matrix) {\n        int n = matrix.size();\n        int m = matrix[0].size();\n        int ans = 0;\n        \n        //iterating over all the cells in the matrix.\n        for(int i = 0; i < n; i++){\n        \tfor(int j = 0; j < m; j++){\n        \t\t//checking if the cell is not empty.\n        \t\tif(matrix[i][j]){\n        \t\t\tint cnt = 0;\n        \t\t\t\n        \t\t\t//checking the neighboring cells and counting the number of empty cells.\n        \t\t\tif(i - 1 >= 0)\n        \t\t\t\tcnt += matrix[i-1][j] == 0;\n        \t\t\tif(i + 1 < n)\n        \t\t\t\tcnt += matrix[i+1][j] == 0;\n        \t\t\tif(j - 1 >= 0)\n        \t\t\t\tcnt += matrix[i][j-1] == 0;\n        \t\t\tif(j + 1 < m)\n        \t\t\t\tcnt += matrix[i][j+1] == 0;\n        \t\t\tif(i - 1 >= 0 and j - 1 >= 0)\n        \t\t\t\tcnt += matrix[i-1][j-1] == 0;\n        \t\t\tif(i - 1 >= 0 and j + 1 < m)\n        \t\t\t\tcnt += matrix[i-1][j+1] == 0;\n        \t\t\tif(i + 1 < n and j - 1 >= 0)\n        \t\t\t\tcnt += matrix[i+1][j-1] == 0;\n        \t\t\tif(i + 1 < n and j + 1 < m)\n        \t\t\t\tcnt += matrix[i+1][j+1] == 0;\n        \t\t\t\n        \t\t\t//checking if the number of empty cells is even and non-zero.\n        \t\t\tif(!(cnt & 1) and cnt)\n        \t\t\t\tans++;\n        \t\t}\n        \t}\n        }\n        //returning the final count of qualifying cells.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n    public int  Count(int[][] matrix)\n    {\n        // code here\n        int n = matrix.length;\n        int m = matrix[0].length;\n        int ans = 0;\n        for(int i = 0; i < n; i++){\n        \tfor(int j = 0; j < m; j++){\n        \t\tif(matrix[i][j]==1){\n        \t\t\tint cnt = 0;\n        \t\t\tif(i - 1 >= 0)\n        \t\t\t\tcnt += matrix[i-1][j] == 0?1:0;\n        \t\t\tif(i + 1 < n)\n        \t\t\t\tcnt += matrix[i+1][j] == 0?1:0;\n        \t\t\tif(j - 1 >= 0)\n        \t\t\t\tcnt += matrix[i][j-1] == 0?1:0;\n        \t\t\tif(j + 1 < m)\n        \t\t\t\tcnt += matrix[i][j+1] == 0?1:0;\n        \t\t\tif(i - 1 >= 0 && j - 1 >= 0)\n        \t\t\t\tcnt += matrix[i-1][j-1] == 0?1:0;\n        \t\t\tif(i - 1 >= 0 && j + 1 < m)\n        \t\t\t\tcnt += matrix[i-1][j+1] == 0?1:0;\n        \t\t\tif(i + 1 < n && j - 1 >= 0)\n        \t\t\t\tcnt += matrix[i+1][j-1] == 0?1:0;\n        \t\t\tif(i + 1 < n && j + 1 < m)\n        \t\t\t\tcnt += matrix[i+1][j+1] == 0?1:0;\n        \t\t\tif((cnt & 1)==0 && cnt!=0)\n        \t\t\t\tans++;\n        \t\t}\n        \t}\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def Count(self, matrix):\n        n = len(matrix)\n        m = len(matrix[0])\n        ans = 0\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j]:\n                    cnt = 0\n                    if i - 1 >= 0:\n                        cnt += matrix[i - 1][j] == 0\n                    if i + 1 < n:\n                        cnt += matrix[i + 1][j] == 0\n                    if j - 1 >= 0:\n                        cnt += matrix[i][j - 1] == 0\n                    if j + 1 < m:\n                        cnt += matrix[i][j + 1] == 0\n                    if i - 1 >= 0 and j - 1 >= 0:\n                        cnt += matrix[i - 1][j - 1] == 0\n                    if i - 1 >= 0 and j + 1 < m:\n                        cnt += matrix[i - 1][j + 1] == 0\n                    if i + 1 < n and j - 1 >= 0:\n                        cnt += matrix[i + 1][j - 1] == 0\n                    if i + 1 < n and j + 1 < m:\n                        cnt += matrix[i + 1][j + 1] == 0\n                    if not (cnt & 1) and cnt:\n                        ans += 1\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int Count(int[][] matrix)\n    {\n        int n = matrix.Length;\n        int m = matrix[0].Length;\n        int ans = 0;\n        \n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(matrix[i][j] != 0){\n                    int cnt = 0;\n                    \n                    if(i - 1 >= 0)\n                        cnt += matrix[i-1][j] == 0 ? 1 : 0;\n                    if(i + 1 < n)\n                        cnt += matrix[i+1][j] == 0 ? 1 : 0;\n                    if(j - 1 >= 0)\n                        cnt += matrix[i][j-1] == 0 ? 1 : 0;\n                    if(j + 1 < m)\n                        cnt += matrix[i][j+1] == 0 ? 1 : 0;\n                    if(i - 1 >= 0 && j - 1 >= 0)\n                        cnt += matrix[i-1][j-1] == 0 ? 1 : 0;\n                    if(i - 1 >= 0 && j + 1 < m)\n                        cnt += matrix[i-1][j+1] == 0 ? 1 : 0;\n                    if(i + 1 < n && j - 1 >= 0)\n                        cnt += matrix[i+1][j-1] == 0 ? 1 : 0;\n                    if(i + 1 < n && j + 1 < m)\n                        cnt += matrix[i+1][j+1] == 0 ? 1 : 0;\n                    \n                    if(cnt % 2 == 0 && cnt != 0)\n                        ans++;\n                }\n            }\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[][]} matrix\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to count the number of 1s in the given matrix.\n    Count(matrix)\n    {\n        //your code here\n        let n = matrix.length;\n        let m = matrix[0].length;\n        let ans = 0;\n        for(let i=0; i<n; i++){\n            for(let j=0; j<m; j++){\n                if(matrix[i][j]){\n                    let cnt = 0;\n                    if(i-1 >= 0){\n                        cnt += matrix[i-1][j] == 0;\n                    }\n                    if(i+1 < n){\n                        cnt += matrix[i+1][j] == 0;\n                    }\n                    if(j-1 >= 0){\n                        cnt += matrix[i][j-1] == 0;\n                    }\n                    if(j+1 < m){\n                        cnt += matrix[i][j+1] == 0;\n                    }\n                    if(i-1 >= 0 && j-1 >= 0){\n                        cnt += matrix[i-1][j-1] == 0;\n                    }\n                    if(i-1 >= 0 && j+1 < m){\n                        cnt += matrix[i-1][j+1] == 0;\n                    }\n                    if(i+1 < n && j-1 >= 0){\n                        cnt += matrix[i+1][j-1] == 0;\n                    }\n                    if(i+1 < n && j+1 < m){\n                        cnt += matrix[i+1][j+1] == 0;\n                    }\n                    if(!(cnt & 1) && cnt){\n                        ans += 1;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}