{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702879,
            "title": "Swap and Maximize",
            "titleSlug": "swap-and-maximize5859",
            "content": "<p><span >Given an array <strong>arr[ ]</strong> of positive elements. Consider the array as a circular array, meaning the element after the last element is the first element of the array. The task is to find the maximum sum of the absolute differences between consecutive elements with shuffling of array elements allowed <em>i.e</em>. shuffle the array elements and make [</span><span ><strong>a<span style=\"font-size: 12pt;\"><sub>1</sub></span></strong></span><span >..</span><span ><strong>a<span style=\"font-size: 12pt;\"><sub>n</sub></span></strong></span><span >] such order that&nbsp; <strong>|a<span style=\"font-size: 12pt;\"><sub>1</sub></span>&nbsp;&ndash; a<span style=\"font-size: 12pt;\"><sub>2</sub></span>| + |a<span style=\"font-size: 12pt;\"><sub>2</sub></span>&nbsp;&ndash; a<span style=\"font-size: 12pt;\"><sub>3</sub></span>| + &hellip;&hellip; + |a<sub><span style=\"font-size: 12pt;\">n-1</span>&nbsp;</sub>&ndash;&nbsp;a<span style=\"font-size: 12pt;\"><sub>n</sub></span>| + |a<span style=\"font-size: 12pt;\"><sub>n</sub></span>&nbsp;&ndash; a<span style=\"font-size: 12pt;\"><sub>1</sub></span>| </strong>is maximized.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 2, 1, 8]\n<strong>Output:</strong> 18\n<strong>Explanation</strong>: After Shuffling, we get [1, 8, 2, 4]. Sum of absolute difference between consecutive elements after rearrangement = |1 - 8| + |8 - 2| + |2 - 4| + |4 - 1| = 7 + 6 + 2 + 3 = 18.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 12]\n<strong>Output: </strong>4<br /></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: No need of rearrangement. Sum of absolute difference between consecutive elements = |10 - 12| + |12 - 10| = 2 + 2 = 4.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; arr.size()&le; 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= arr[i] &lt;= 10</span><sup>5</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a circular array `arr[]` of positive elements, find the maximum sum of the absolute differences between consecutive elements after shuffling the array. The array is considered circular, meaning the element following the last element is the first element.",
                "constraints": [
                    "2 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[4, 2, 1, 8]",
                        "output": "18",
                        "explanation": "By rearranging the array to [1, 8, 2, 4], the sum of absolute differences between consecutive elements is |1 - 8| + |8 - 2| + |2 - 4| + |4 - 1| = 7 + 6 + 2 + 3 = 18. This is the maximum possible sum."
                    },
                    {
                        "input": "[10, 12]",
                        "output": "4",
                        "explanation": "No rearrangement is needed. The sum of absolute differences between consecutive elements is |10 - 12| + |12 - 10| = 2 + 2 = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\"><span >The idea is to use the Greedy Approach and try to bring elements having greater differences closer. Consider the sorted permutation of the given array a<sub>1</sub>, a<sub>1</sub>, a<sub>2</sub>,&hellip;., a<sub>n &ndash; 1</sub>, a<sub>n</sub>&nbsp;such that a<sub>1</sub>&nbsp;&lt; a<sub>2</sub>&nbsp;&lt; a<sub>3</sub>&hellip;. &lt; a<sub>n &ndash; 1</sub>&nbsp;&lt; a<sub>n</sub>.</span><br /></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to find the maximum sum of the array elements\nclass Solution {\n  public:\n\n    long long maxSum(vector<int> &arr) {\n        long long sum = 0;\n        int n = arr.size(); // Size of the array\n\n        // Sorting the array in ascending order\n        sort(arr.begin(), arr.end());\n\n        // Looping over the first half of the array\n        for (int i = 0; i < n / 2; i++) {\n            // Subtracting twice the current element and adding twice\n            // the element at the opposite end of the array to the sum\n            sum -= (2 * arr[i]);\n            sum += (2 * arr[n - i - 1]);\n        }\n\n        // Returning the maximum sum\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the maximum sum of the array elements\n    public long maxSum(Long[] arr) {\n        long sum = 0;\n        int n = arr.length; // Size of the array\n\n        // Sorting the array in ascending order\n        Arrays.sort(arr);\n\n        // Looping over the first half of the array\n        for (int i = 0; i < n / 2; i++) {\n            // Subtracting twice the current element and adding twice\n            // the element at the opposite end of the array to the sum\n            sum -= (2 * arr[i]);         // No type conversion error here\n            sum += (2 * arr[n - i - 1]); // No type conversion error here\n        }\n\n        // Returning the maximum sum\n        return sum;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def maxSum(self, arr):\n        n = len(arr)  # Size of the array\n        arr.sort()  # Sorting the array in ascending order\n\n        # Initializing the sum\n        total_sum = 0\n\n        # Looping over the first half of the array\n        for i in range(n // 2):\n            # Subtracting twice the current element and adding twice\n            # the element at the opposite end of the array to the sum\n            total_sum -= (2 * arr[i])\n            total_sum += (2 * arr[n - i - 1])\n\n        # Returning the maximum sum\n        return total_sum\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    maxSum(arr) {\n        const n = arr.length; // Size of the array\n\n        // Sorting the array in ascending order\n        arr.sort((a, b) => a - b);\n\n        let sum = 0;\n\n        // Looping over the first half of the array\n        for (let i = 0; i < Math.floor(n / 2); i++) {\n            // Subtracting twice the current element and adding twice\n            // the element at the opposite end of the array to the sum\n            sum -= (2 * arr[i]);\n            sum += (2 * arr[n - i - 1]);\n        }\n\n        // Returning the maximum sum\n        return sum;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}