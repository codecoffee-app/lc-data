{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704385,
            "title": "Swap bits",
            "titleSlug": "swap-bits5726",
            "content": "<p><span style=\"font-size: 18px;\">Given a number X and two positions (from right side) in binary representation of X, write a program that swaps N bits at given two positions and returns the result.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nX = 47\nP1 = 1\nP2 = 5\nN = 3\n<strong>Output:</strong>&nbsp;227\n<strong>Explanation</strong>:\nThe 3 bits starting from the second bit \n(from the right side) are swapped with 3 bits\nstarting from 6th position (from the right side) </span></pre>\n<pre><span style=\"font-size: 18px;\">X = 47 (</span><span style=\"font-size: 18px;\">00101111)\n[001]0[111]1\nANS = [111]0[001]1\nANS = 227 (</span><span style=\"font-size: 18px;\">11100011)\nHence, the result is 227.  \n</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nX = 28\nP1 = 0\nP2 = 3\nN = 2\n<strong>Output:&nbsp;</strong>7</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>swapBits()</strong>&nbsp;which takes the integer X, integer P1, integer P2, and&nbsp;integer&nbsp;N<strong>&nbsp;</strong>as input parameters and returns the new integer after swapping.&nbsp;<br /><br /><strong>Expected Time Complexity:</strong> O(1)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span><br />&nbsp;</p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; X &le; 200<br />0 &le; P1 &lt; P2&nbsp;&le; 11<br />1 &le; N &le; 5</span><br /><br />&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<pre>\n1) Move all bits of the first set to the rightmost side\n   set1 =  (x &gt;&gt; p1) &amp; ((1U &lt;&lt; n) - 1)\nHere the expression <em>(1U &lt;&lt; n) - 1</em> gives a number that \ncontains last n bits set and other bits as 0. We do &amp; \nwith this expression so that bits other than the last \nn bits become 0.\n2) Move all bits of second set to rightmost side\n   set2 =  (x &gt;&gt; p2) &amp; ((1U &lt;&lt; n) - 1)\n3) XOR the two sets of bits\n   xor = (set1 ^ set2) \n4) Put the xor bits back to their original positions. \n   xor = (xor &lt;&lt; p1) | (xor &lt;&lt; p2)\n5) Finally, XOR the xor with original number so \n   that the two sets are swapped.\n   result = x ^ xor</pre>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\npublic:    \r\n    int swapBits(int x, int p1, int p2, int n)\r\n    {\r\n        unsigned int set1 =  (x >> p1) & ((1U << n) - 1);\r\n     \r\n        unsigned int set2 =  (x >> p2) & ((1U << n) - 1);\r\n     \r\n        unsigned int xor1 = (set1 ^ set2);\r\n     \r\n        xor1 = (xor1 << p1) | (xor1 << p2);\r\n     \r\n        unsigned int result = x ^ xor1;\r\n     \r\n        return result;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def swapBits(self, x, p1, p2, n):\n        n_bits_from_p1 = (x >> p1) & ((1 << n) - 1)\n        n_bits_from_p2 = (x >> p2) & ((1 << n) - 1)\n\n        # Computing the mask by XORing the bits extracted from p1 and p2\n        mask = n_bits_from_p1 ^ n_bits_from_p2\n\n        # Creating a swapper mask by shifting the mask to the correct positions\n        swapper_mask = (mask << p1) | (mask << p2)\n\n        # Performing the bit swapping operation by XORing the swapper mask with the original number\n        return swapper_mask ^ x\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int swapBits(int x, int p1, int p2, int n)\n    {\n        int set1 = (x >> p1) & ((1 << n) - 1);\n        int set2 = (x >> p2) & ((1 << n) - 1);\n        int xor1 = set1 ^ set2;\n        xor1 = (xor1 << p1) | (xor1 << p2);\n        int result = x ^ xor1;\n        return result;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} X\r\n * @param {number} P1\r\n * @param {number} P2\r\n * @param {number} N\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n   //Function to swap bits in a given number.\r\n   swapBits(X, P1, P2, N) {\r\n       //Extracting the bits from P1\r\n       let n_bits_from_p1 = (X >> P1) & ((1 << N) - 1);\r\n       \r\n       //Extracting the bits from P2\r\n       let n_bits_from_p2 = (X >> P2) & ((1 << N) - 1);\r\n       \r\n       //Computing the mask by XORing the bits extracted from P1 and P2\r\n       let mask = n_bits_from_p1 ^ n_bits_from_p2;\r\n       \r\n       //Creating a swapper mask by shifting the mask to the correct positions\r\n       let swapper_mask = (mask << P1) | (mask << P2);\r\n       \r\n       //Performing the bit swapping operation by XORing the swapper mask with the original number\r\n       return swapper_mask ^ X;\r\n   }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}