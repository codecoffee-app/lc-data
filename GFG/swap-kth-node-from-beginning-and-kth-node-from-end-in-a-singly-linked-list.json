{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701070,
            "title": "Swap Kth nodes from ends",
            "titleSlug": "swap-kth-node-from-beginning-and-kth-node-from-end-in-a-singly-linked-list",
            "content": "<p><span >A singly linked list and an integer of k are given. You need to swap the k<sup>th</sup> node from the beginning and the k<sup>th</sup> node from the end of the linked list. Swap the nodes through the links. Do&nbsp;not change&nbsp;the content of the nodes.</span></p>\n<p><span ><strong>Note:&nbsp;</strong>The driver code will output <strong>\"true\"</strong> if you successfully swap the nodes.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;3-&gt;4, k = 1\n<strong>Output: </strong>true<strong>\nExplanation: </strong>Here k = 1, hence after swapping the 1st node from the beginning and end the new list will be 4-&gt;2-&gt;3-&gt;1. </span></pre>\n<pre><span ><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5, k = 7\n<strong>Output: </strong>true<strong>\nExplanation: </strong>k &gt; n. Swapping is invalid. Return the head node as it is.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/701070/Web/Other/blobid1_1722511116.png\" width=\"395\" height=\"138\" /> </span></pre>\n<p><span ><strong>Expected Time Complexity</strong>: O(n)<br /><strong>Expected Auxillary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints:</strong></span><br /><span ><span >1 &lt;= number of nodes &lt;= 10</span><sup>3<br /></sup></span><span ><span style=\"font-size: 18.6667px;\">1 &lt;= node-&gt;data &lt;= 10<sup>6<br /></sup></span></span><span >1 &lt;= k &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list and an integer k, swap the kth node from the beginning with the kth node from the end of the linked list. Perform the swap by modifying the links, without altering the data within the nodes.",
                "constraints": [
                    "1 <= number of nodes <= 1000",
                    "1 <= node data <= 1000000",
                    "1 <= k <= 1000"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 1->2->3->4, k = 1",
                        "output": "true",
                        "explanation": "The first node (1) and the last node (4) are swapped, resulting in the list 4->2->3->1."
                    },
                    {
                        "input": "LinkedList: 1->2->3->4->5, k = 7",
                        "output": "true",
                        "explanation": "Since k (7) is greater than the number of nodes in the list, swapping is invalid. The original head node is returned unchanged."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find the kth node from the start and end. Swap their links, ensuring you handle edge cases where k is at the head, tail, or same node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to swap Kth node from beginning and end in a linked list.\nclass Solution {\n  public:\n    Node* swapKthNode(Node* head, int k) {\n        // Count the number of nodes in the list\n        Node* dummy = head;\n        int num = 0;\n        while (dummy) {\n            dummy = dummy->next;\n            num++;\n        }\n\n        if (k > num || 2 * k - 1 == num)\n            return head;\n\n        Node* x_prev = NULL;\n        Node* x = head;\n        Node* y_prev = NULL;\n        Node* y = head;\n\n        int count = k - 1;\n\n        // Finding the Kth node from the beginning of the list.\n        while (count--) {\n            x_prev = x;\n            x = x->next;\n        }\n\n        count = num - k;\n\n        // Finding the Kth node from the end and its previous node.\n        while (count--) {\n            y_prev = y;\n            y = y->next;\n        }\n\n        // If x_prev exists, then new next of it will be y.\n        if (x_prev)\n            x_prev->next = y;\n        // If y_prev exists, then new next of it will be x.\n        if (y_prev)\n            y_prev->next = x;\n\n        // Swap the next pointers of x and y.\n        Node* temp = x->next;\n        x->next = y->next;\n        y->next = temp;\n\n        // Changing head pointers when k is 1 or num.\n        if (k == 1)\n            return y;\n        if (k == num)\n            return x;\n\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public Node swapKthNode(Node head, int k) {\n        // Count the number of nodes in the list\n        Node dummy = head;\n        int num = 0;\n        while (dummy != null) {\n            dummy = dummy.next;\n            num++;\n        }\n\n        // If k is greater than the number of nodes or it is the middle node\n        if (k > num || 2 * k - 1 == num) {\n            return head;\n        }\n\n        Node x_prev = null;\n        Node x = head;\n        Node y_prev = null;\n        Node y = head;\n\n        int count = k - 1;\n\n        // Finding the Kth node from the beginning\n        while (count-- > 0) {\n            x_prev = x;\n            x = x.next;\n        }\n\n        count = num - k;\n\n        // Finding the Kth node from the end\n        while (count-- > 0) {\n            y_prev = y;\n            y = y.next;\n        }\n\n        // Swap the next pointers of x and y\n        if (x_prev != null) {\n            x_prev.next = y;\n        }\n\n        if (y_prev != null) {\n            y_prev.next = x;\n        }\n\n        Node temp = x.next;\n        x.next = y.next;\n        y.next = temp;\n\n        // Update the head if needed\n        if (k == 1) {\n            return y;\n        }\n        if (k == num) {\n            return x;\n        }\n\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def swap_kth_node(self, head, k):\n        # Count the number of nodes in the list\n        dummy = head\n        num = 0\n        while dummy:\n            dummy = dummy.next\n            num += 1\n\n        if k > num or 2 * k - 1 == num:\n            return head\n\n        x_prev = None\n        x = head\n        y_prev = None\n        y = head\n\n        count = k - 1\n\n        # Finding the Kth node from the beginning of the list.\n        while count > 0:\n            x_prev = x\n            x = x.next\n            count -= 1\n\n        count = num - k\n\n        # Finding the Kth node from the end and its previous node.\n        while count > 0:\n            y_prev = y\n            y = y.next\n            count -= 1\n\n        # If x_prev exists, then new next of it will be y.\n        if x_prev:\n            x_prev.next = y\n        # If y_prev exists, then new next of it will be x.\n        if y_prev:\n            y_prev.next = x\n\n        # Swap the next pointers of x and y.\n        temp = x.next\n        x.next = y.next\n        y.next = temp\n\n        # Changing head pointers when k is 1 or num.\n        if k == 1:\n            return y\n        if k == num:\n            return x\n\n        return head\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    swapKthNode(head, k) {\n        // Count the number of nodes in the list\n        let dummy = head;\n        let num = 0;\n        while (dummy) {\n            dummy = dummy.next;\n            num++;\n        }\n\n        if (k > num || 2 * k - 1 === num) {\n            return head;\n        }\n\n        let xPrev = null;\n        let x = head;\n        let yPrev = null;\n        let y = head;\n\n        let count = k - 1;\n\n        // Finding the Kth node from the beginning of the list.\n        while (count > 0) {\n            xPrev = x;\n            x = x.next;\n            count--;\n        }\n\n        count = num - k;\n\n        // Finding the Kth node from the end and its previous node.\n        while (count > 0) {\n            yPrev = y;\n            y = y.next;\n            count--;\n        }\n\n        // If xPrev exists, then new next of it will be y.\n        if (xPrev) {\n            xPrev.next = y;\n        }\n        // If yPrev exists, then new next of it will be x.\n        if (yPrev) {\n            yPrev.next = x;\n        }\n\n        // Swap the next pointers of x and y.\n        let temp = x.next;\n        x.next = y.next;\n        y.next = temp;\n\n        // Changing head pointers when k is 1 or num.\n        if (k === 1) {\n            return y;\n        }\n        if (k === num) {\n            return x;\n        }\n\n        return head;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}