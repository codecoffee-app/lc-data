{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703858,
            "title": "Swap two nibbles in a byte",
            "titleSlug": "swap-two-nibbles-in-a-byte0446",
            "content": "<p><span style=\"font-size: 18px;\">Given a number <strong>n</strong>, Your task is to swap the two <strong>nibbles</strong> and find the resulting number.&nbsp;</span></p>\n<blockquote>\n<p><span >A <strong><a href=\"http://en.wikipedia.org/wiki/Nibble\" target=\"_blank\" rel=\"noopener\">nibble</a></strong> </span><span >is a four-bit aggregation, or half an octet. There are two nibbles in a byte. For example, the decimal number 150 is represented as 10010110 in an 8-bit byte. This byte can be divided into two nibbles: 1001 and 0110.</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 100\n<strong>Output: </strong>70<br /><strong>Explanation: </strong>100 in binary is 01100100, </span><span style=\"font-size: 20px;\"><span style=\"font-size: 18px;\">two nibbles are (0110) and (0100). If we swap the two nibbles, we get 01000110 which is 70 in decimal.</span></span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 129\n<strong>Output: </strong>24\n<strong>Explanation: </strong>129 in binary is 10000001, </span><span style=\"font-size: 20px;\"><span style=\"font-size: 18px;\">two nibbles are (</span></span><span style=\"font-size: 18px;\">1000</span><span style=\"font-size: 20px;\"><span style=\"font-size: 18px;\">) and (</span></span><span style=\"font-size: 18px;\">0001</span><span style=\"font-size: 20px;\"><span style=\"font-size: 18px;\">). If we swap the two nibbles, we get </span></span><span style=\"font-size: 18px;\">0001</span><span style=\"font-size: 18px;\">1000</span><span style=\"font-size: 20px;\"><span style=\"font-size: 18px;\"> which is 24 in decimal.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>swapNibbles()</strong> which takes&nbsp;an integer <strong>n</strong> as input parameter and returns an integer after swapping nibbles in the binary representation of n.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong></span> <span style=\"font-size: 18px;\">O(1)<br /><strong>Expected Space Complexity:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />0 &le; n &le; 255</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number `n`, swap its two nibbles (a nibble is a four-bit aggregation) and return the resulting number. The input number `n` is an 8-bit number.",
                "constraints": [
                    "0 <= n <= 255"
                ],
                "testcases": [
                    {
                        "input": "100",
                        "output": "70",
                        "explanation": "The binary representation of 100 is 01100100. The two nibbles are (0110) and (0100). Swapping them results in 01000110, which is 70 in decimal."
                    },
                    {
                        "input": "129",
                        "output": "24",
                        "explanation": "The binary representation of 129 is 10000001. The two nibbles are (1000) and (0001). Swapping them results in 00011000, which is 24 in decimal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">To swap the nibbles, we can use bitwise &amp;, bitwise &lsquo;&lt;&lt;&#39; and &#39;&gt;&gt;&rsquo; operators.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "samsung",
            "cisco",
            "qualcomm"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to swap the nibbles of a given number.\n    int swapNibbles(int n) {\n        // Using bitwise operators to extract and swap the nibbles.\n        // The expression \"n & 0x0F\" gives us the last 4 bits of n.\n        // The expression \"n & 0xF0\" gives us the first four bits of n.\n        // Shifting the last 4 bits to the left by 4 positions and\n        // shifting the first four bits to the right by 4 positions.\n        // Combining the two nibbles using bitwise OR(|) operator.\n        return ((n & 0x0F) << 4 | (n & 0xF0) >> 4);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    static int swapNibbles(int n) {\n        //  expression \u00e2\u20ac\u0153N & 0x0F\u00e2\u20ac\u009d gives us last 4 bits of N.\n        // expression \u00e2\u20ac\u0153N & 0xF0\u00e2\u20ac\u009d gives us first four bits of N\n        return ((n & 0x0F) << 4 | (n & 0xF0) >> 4);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def swapNibbles(self, n):\n        # expression \u00e2\u20ac\u0153N & 0x0F\u00e2\u20ac\u009d gives us last 4 bits of n.\n        # expression \u00e2\u20ac\u0153N & 0xF0\u00e2\u20ac\u009d gives us first four bits of n\n        return ((n & 0x0F) << 4 | (n & 0xF0) >> 4)\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    // Function to swap the nibbles of a given byte.\n    public int swapNibbles(int n) {\n        // Using bitwise operators to extract and swap the nibbles.\n        // The expression \"N & 0x0F\" gives us the last 4 bits of N.\n        // The expression \"N & 0xF0\" gives us the first four bits of N.\n        // Shifting the last 4 bits to the left by 4 positions and\n        // shifting the first four bits to the right by 4 positions.\n        // Combining the two nibbles using bitwise OR(|) operator.\n        return ((n & 0x0F) << 4 | (n & 0xF0) >> 4);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number} n\n * @return {number}\n */\n\nclass Solution {\n    swapNibbles(n) { return ((n & 0x0F) << 4 | (n & 0xF0) >> 4); }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}