{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702955,
            "title": "Swapping pairs make sum equal",
            "titleSlug": "swapping-pairs-make-sum-equal4142",
            "content": "<p><span style=\"font-size: 18px;\">Given two arrays of integers <strong>a[]</strong> and <strong>b[]</strong>, the task is to check if a pair of values (one value from each array) exists such that swapping the elements of the pair will make the sum of two arrays equal.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a[] = [4, 1, 2, 1, 1, 2], b[] = [3, 6, 3, 3]\n<strong>Output: </strong>true\n<strong>Explanation</strong>: Sum of elements in a[] = 11, Sum of elements in b[] = 15, To get same sum from both arrays, we can swap following values: 1 from a[] and 3 from b[]</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a[] = [5, 7, 4, 6], b[] = [1, 2, 3, 8]\n<strong>Output:</strong> true\n<strong>Explanation</strong>: We can swap 6 from array a[] and 2 from array b[]<br /></span></pre>\n<pre><strong>Input: </strong>a[] = [3, 3], b[] = [6, 5, 6, 6]\n<strong>Output:</strong> false</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; a.size() &le; 10<sup>6<br /></sup>1 &le; b.size() &le; 10<sup>6<br /></sup></span><span style=\"font-size: 18px;\">1 &le; a[i] &le; 10<sup>3<br /></sup>1 &le; b[i] &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays of integers, `a` and `b`, determine if there exists a pair of values (one from each array) that, when swapped, will result in the two arrays having equal sums.",
                "constraints": [
                    "1 <= a.size() <= 10^6",
                    "1 <= b.size() <= 10^6",
                    "1 <= a[i] <= 10^3",
                    "1 <= b[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "a = [4, 1, 2, 1, 1, 2], b = [3, 6, 3, 3]",
                        "output": "true",
                        "explanation": "The sum of elements in `a` is 11, and the sum of elements in `b` is 15. Swapping 1 from `a` and 3 from `b` will equalize the sums."
                    },
                    {
                        "input": "a = [5, 7, 4, 6], b = [1, 2, 3, 8]",
                        "output": "true",
                        "explanation": "Swapping 6 from `a` and 2 from `b` will equalize the sums."
                    },
                    {
                        "input": "a = [3, 3], b = [6, 5, 6, 6]",
                        "output": "false",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #1e2229; font-family: arial, helvetica, sans-serif; font-size: 16px; background-color: #ffffff;\">You can use this formula a - b = (sumA - sumB) / 2 to get the target.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n\n  private:\n    // Function to calculate the sum of a vector.\n    int getSum(vector<int>& v) {\n        int sum = 0;\n        for (int num : v)\n            sum += num;\n        return sum;\n    }\n\n    // Function to calculate the target value.\n    int getTarget(vector<int>& A, vector<int>& B) {\n        int sum1 = getSum(A);\n        int sum2 = getSum(B);\n\n        if ((sum1 - sum2) % 2 != 0)\n            return INT_MIN;\n        return ((sum1 - sum2) / 2);\n    }\n\n  public:\n    // Function to find if swapping values from both arrays can make their sums equal.\n    bool findSwapValues(vector<int>& a, vector<int>& b) {\n        // Sorting both vectors.\n        sort(a.begin(), a.end());\n        sort(b.begin(), b.end());\n\n        // Calculating the target value.\n        int target = getTarget(a, b);\n\n        // If target value is not feasible, return false.\n        if (target == INT_MIN)\n            return false;\n\n        int i = 0, j = 0;\n\n        // Iterating through both vectors to find the values that can be swapped.\n        while (i < a.size() && j < b.size()) {\n            int diff = a[i] - b[j];\n\n            // If difference is equal to target, swapping is possible so return true.\n            if (diff == target) {\n                return true;\n            }\n\n            // If difference is less than target, increment index i.\n            else if (diff < target)\n                i++;\n\n            // If difference is greater than target, increment index j.\n            else\n                j++;\n        }\n\n        // If no valid swap is found, return false.\n        return false;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    // Helper function to calculate the sum of an array\n    private int getSum(int[] arr) {\n        int sum = 0;\n        for (int num : arr) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    // Helper function to calculate the target difference\n    private int getTarget(int[] a, int[] b) {\n        int sumA = getSum(a);\n        int sumB = getSum(b);\n\n        if ((sumA - sumB) % 2 != 0) {\n            return Integer.MIN_VALUE; // If target isn't feasible\n        }\n        return (sumA - sumB) / 2;\n    }\n\n    boolean findSwapValues(int[] a, int[] b) {\n        // Sort both arrays\n        Arrays.sort(a);\n        Arrays.sort(b);\n\n        // Calculate the target value\n        int target = getTarget(a, b);\n\n        // If target is not feasible, return false\n        if (target == Integer.MIN_VALUE) {\n            return false;\n        }\n\n        int i = 0, j = 0;\n\n        // Use two-pointer technique to find if swap is possible\n        while (i < a.length && j < b.length) {\n            int diff = a[i] - b[j];\n\n            if (diff == target) {\n                return true; // Swap is possible\n            } else if (diff < target) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n\n        // If no valid swap is found\n        return false;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findSwapValues(self, a, b):\n        # Your code goes here\n        suma = sum(a)\n        sumb = sum(b)\n        if sumb > suma:\n            a, b = b, a\n            suma, sumb = sumb, suma\n        if (suma - sumb) % 2 != 0:\n            return False\n        diff = (sumb - suma) // 2\n        setA = set(a)\n        for bx in b:\n            ax = bx - diff\n            if ax in setA:\n                return True\n        return False\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} a\n * @param {number[]} b\n * @return {bool}\n */\n\nclass Solution {\n\n    findSwapValues(a, b) {\n        let n = a.length, m = b.length;\n        let sum1 = this.getSum(a, n);\n        let sum2 = this.getSum(b, m);\n\n        if ((sum1 - sum2) % 2 !== 0) return 0;\n\n        let target = (sum1 - sum2) / 2;\n\n        a.sort((a, b) => a - b);\n        b.sort((a, b) => a - b);\n\n        let i = 0, j = 0;\n        while (i < n && j < m) {\n            let diff = a[i] - b[j];\n            if (diff === target) {\n                return 1;\n            } else if (diff < target) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n\n        return 0;\n    }\n\n    getSum(X, n) {\n        let sum = 0;\n        for (let i = 0; i < n; i++) {\n            sum += X[i];\n        }\n        return sum;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}