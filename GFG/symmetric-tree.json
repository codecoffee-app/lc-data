{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700583,
            "title": "Symmetric Tree",
            "titleSlug": "symmetric-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>root </strong>of a Binary Tree. Your task is to check whether it is Symmetric or not, i.e. whether the binary tree is a <strong>Mirror image of itself</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root[] = [1, 2, 2, 3, 4, 4, 3]\n   <img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20240926171713/ex-1_1.webp\" alt=\"ex-1_1\" width=\"239\" height=\"213\" /><strong>\nOutput: </strong>True<strong>\nExplanation: </strong>Tree is mirror image of itself i.e. tree is symmetric.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root[] = [1, 2, 2, N, 3, N, 3]\n   <img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20240926171713/ex-2_1.webp\" alt=\"ex-2_1\" width=\"239\" height=\"213\" /><strong>\nOutput: </strong>False<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Tree is not mirror image of itself i.e. tree is not symmetric.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= number of nodes&lt;=2000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary tree, determine if it is symmetric. A symmetric binary tree is a mirror image of itself.",
                "constraints": [
                    "1 <= number of nodes <= 2000"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 2, 3, 4, 4, 3]",
                        "output": "True",
                        "explanation": "The binary tree is a mirror image of itself, therefore it is symmetric."
                    },
                    {
                        "input": "[1, 2, 2, null, 3, null, 3]",
                        "output": "False",
                        "explanation": "The binary tree is not a mirror image of itself, therefore it is not symmetric."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a recursive approach to compare mirrored nodes simultaneously from the left and right subtrees, ensuring data matches and symmetry in structure.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if the binary tree is symmetric\n    bool isSymmetric(Node* root) {\n        if (root == nullptr)\n            return true;\n\n        // Two stacks to store nodes for comparison\n        stack<Node*> s1, s2;\n\n        // Initialize the stacks with the left\n        // and right subtrees\n        s1.push(root->left);\n        s2.push(root->right);\n\n        while (!s1.empty() && !s2.empty()) {\n\n            // Get the current pair of nodes\n            Node* node1 = s1.top();\n            Node* node2 = s2.top();\n            s1.pop();\n            s2.pop();\n\n            // If both nodes are null, continue to the next pair\n            if (node1 == nullptr && node2 == nullptr) {\n                continue;\n            }\n\n            // If one node is null and the other is not,\n            // or the nodes' data do not match\n            // then the tree is not symmetric\n            if (node1 == nullptr || node2 == nullptr || node1->data != node2->data) {\n                return false;\n            }\n\n            // Push children of node1 and node2 in opposite order\n            // Push left child of node1 and right child of node2\n            s1.push(node1->left);\n            s2.push(node2->right);\n\n            // Push right child of node1 and left child of node2\n            s1.push(node1->right);\n            s2.push(node2->left);\n        }\n\n        // If both stacks are empty, the tree is symmetric\n        return s1.empty() && s2.empty();\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to check if the binary tree is symmetric\n    static boolean isSymmetric(Node root) {\n        if (root == null) {\n            return true;\n        }\n\n        // Two stacks to store nodes for comparison\n        Stack<Node> s1 = new Stack<>();\n        Stack<Node> s2 = new Stack<>();\n\n        // Initialize the stacks with the left\n        // and right subtrees\n        s1.push(root.left);\n        s2.push(root.right);\n\n        while (!s1.isEmpty() && !s2.isEmpty()) {\n\n            // Get the current pair of nodes\n            Node node1 = s1.pop();\n            Node node2 = s2.pop();\n\n            // If both nodes are null, continue to the next pair\n            if (node1 == null && node2 == null) {\n                continue;\n            }\n\n            // If one node is null and the other is not,\n            // or the nodes' data do not match\n            // then the tree is not symmetric\n            if (node1 == null || node2 == null || node1.data != node2.data) {\n                return false;\n            }\n\n            // Push children of node1 and node2 in opposite order\n            // Push left child of node1 and right child of node2\n            s1.push(node1.left);\n            s2.push(node2.right);\n\n            // Push right child of node1 and left child of node2\n            s1.push(node1.right);\n            s2.push(node2.left);\n        }\n\n        // If both stacks are empty, the tree is symmetric\n        return s1.isEmpty() && s2.isEmpty();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to check if the binary tree is symmetric\n    def isSymmetric(self, root):\n        if root is None:\n            return True\n\n        # Two stacks to store nodes for comparison\n        s1 = []\n        s2 = []\n\n        # Initialize the stacks with the\n        # left and right subtrees\n        s1.append(root.left)\n        s2.append(root.right)\n\n        while s1 and s2:\n\n            # Get the current pair of nodes\n            node1 = s1.pop()\n            node2 = s2.pop()\n\n            # If both nodes are null, continue to the next pair\n            if node1 is None and node2 is None:\n                continue\n\n            # If one node is null and the other is not,\n            # or the nodes' data do not match\n            # then the tree is not symmetric\n            if node1 is None or node2 is None or node1.data != node2.data:\n                return False\n\n            # Push children of node1 and node2 in opposite order\n            # Push left child of node1 and right child of node2\n            s1.append(node1.left)\n            s2.append(node2.right)\n\n            # Push right child of node1 and left child of node2\n            s1.append(node1.right)\n            s2.append(node2.left)\n\n        # If both stacks are empty, the tree is symmetric\n        return len(s1) == 0 and len(s2) == 0\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to check if the binary tree is symmetric\n    isSymmetric(root) {\n        if (root === null) {\n            return true;\n        }\n\n        // Two stacks to store nodes for comparison\n        let s1 = [];\n        let s2 = [];\n\n        // Initialize the stacks with the\n        // left and right subtrees\n        s1.push(root.left);\n        s2.push(root.right);\n\n        while (s1.length > 0 && s2.length > 0) {\n\n            // Get the current pair of nodes\n            let node1 = s1.pop();\n            let node2 = s2.pop();\n\n            // If both nodes are null, continue to the next pair\n            if (node1 === null && node2 === null) {\n                continue;\n            }\n\n            // If one node is null and the other is not,\n            // or the nodes' data do not match\n            // then the tree is not symmetric\n            if (node1 === null || node2 === null || node1.data !== node2.data) {\n                return false;\n            }\n\n            // Push children of node1 and node2 in opposite order\n            // Push left child of node1 and right child of node2\n            s1.push(node1.left);\n            s2.push(node2.right);\n\n            // Push right child of node1 and left child of node2\n            s1.push(node1.right);\n            s2.push(node2.left);\n        }\n\n        // If both stacks are empty, the tree is symmetric\n        return s1.length === 0 && s2.length === 0;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}