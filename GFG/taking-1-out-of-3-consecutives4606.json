{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702673,
            "title": "Taking 1 out of 3 consecutives",
            "titleSlug": "taking-1-out-of-3-consecutives4606",
            "content": "<p><span >Given an array <strong>arr[]</strong> consisting of <strong>&nbsp;</strong>non-negative integers, your task is to find the <strong>minimum sum</strong> of the array such that take one of the elements from the first 3 consecutive elements and then from the <strong>ith</strong> position where the previous element was taken, do the same operation for the next three from ith position and so on.<br /></span></p>\n<p><span ><strong>Note: </strong>You have to take one element from 3 consecutive elements.</span><br /><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 6, 7, 1]\n<strong>Output: </strong>4\n<strong>Explanation: </strong>Moving from left to right 3+1. When 3 is added next 3 consecutive elements be 6, 7 and 1, from which we take 1. Which covers all subarray of lenght 3 (3+1=4).</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[]=[3,2]\n<strong>Output: </strong>0\n<strong>Explanation: </strong>We won't take any element as the array length is less than 3.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space: </strong>O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >See which of the first three you have to take for the optimal case and think dynamically about the next 3 consecutive elements.</span></p>",
            "<p><span >Use dynamic programming to calculate the minimum sum by considering the minimum value among the last three elements at each step.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the minimum sum.\n    int minSum(vector<int>& arr) {\n        int n = arr.size();\n        int dp[n + 5], i, minans;\n        minans = arr[0];\n\n        // if array size is less than 3, return 0.\n        if (n < 3) {\n            return 0;\n        } else {\n            // initializing dp array with first three elements.\n            dp[0] = arr[0];\n            dp[1] = arr[1];\n            dp[2] = arr[2];\n\n            // iterating over the array to find the minimum sum.\n            for (i = 3; i < n; i++) {\n                // finding the minimum value among last three elements of dp array.\n                minans = min({dp[i - 3], dp[i - 2], dp[i - 1]});\n                // updating dp array with the minimum value plus current element.\n                dp[i] = arr[i] + minans;\n            }\n\n            // returning the minimum sum among the last three elements of dp array.\n            return min({dp[n - 1], dp[n - 2], dp[n - 3]});\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    // Function to find the minimum sum possible\n    public static int minSum(int arr[]) {\n\n        int n = arr.length;\n\n        // Creating an array dp to store the minimum sum\n        int dp[] = new int[n + 5];\n        int i, minans = arr[0];\n\n        // If there are less than 3 elements in the array, return 0\n        if (n < 3) {\n            return 0;\n        }\n        // If there are 3 or more elements in the array\n        else {\n            // Initialize the dp array with the first 3 elements of a\n            dp[0] = arr[0];\n            dp[1] = arr[1];\n            dp[2] = arr[2];\n\n            // Loop from index 3 to n-1\n            for (i = 3; i < n; i++) {\n                // Calculate the minimum sum of the previous 3 elements\n                minans = Math.min(dp[i - 1], Math.min(dp[i - 2], dp[i - 3]));\n\n                // Add the current element from a to the minimum sum\n                dp[i] = arr[i] + minans;\n            }\n\n            // Return the minimum sum of the last 3 elements of dp\n            return Math.min(dp[n - 1], Math.min(dp[n - 2], dp[n - 3]));\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to find the minimum possible sum.\n    def minSum(self, arr):\n\n        n = len(arr)\n        #Creating a list to store the minimum sum for each element.\n        dp = [0 for i in range(n + 5)]\n        minans = arr[0]\n\n        #Checking if the array size is less than 3.\n        if (n < 3):\n            return 0\n\n        else:\n            #Initializing dp with first three elements of the array.\n            dp[0] = arr[0]\n            dp[1] = arr[1]\n            dp[2] = arr[2]\n\n            #Iterating over the remaining array elements.\n            for i in range(3, n):\n                #Calculating the minimum sum among the previous three elements.\n                minans = min(dp[i - 1], dp[i - 2], dp[i - 3])\n                #Adding the current element with the minimum sum.\n                dp[i] = arr[i] + minans\n\n            #Returning the minimum sum among the last three elements of dp.\n            return min(dp[n - 1], dp[n - 2], dp[n - 3])\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to return minimum sum of absolute difference\n    // between any two elements of the array.\n    minSum(arr) {\n\n        let n = arr.length;\n        // Creating a list to store the minimum sum for each element.\n        let dp = new Array(n + 5).fill(0);\n        let minans = arr[0];\n\n        // Checking if the array size is less than 3.\n        if (n < 3) {\n            return 0;\n        } else {\n            // Initializing dp with first three elements of the array.\n            dp[0] = arr[0];\n            dp[1] = arr[1];\n            dp[2] = arr[2];\n\n            // Iterating over the remaining array elements.\n            for (let i = 3; i < n; i++) {\n                // Calculating the minimum sum among the previous three elements.\n                minans = Math.min(dp[i - 1], dp[i - 2], dp[i - 3]);\n                // Adding the current element with the minimum sum.\n                dp[i] = arr[i] + minans;\n            }\n\n            // Returning the minimum sum among the last three elements of dp.\n            return Math.min(dp[n - 1], dp[n - 2], dp[n - 3]);\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}