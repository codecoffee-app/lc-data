{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 708220,
            "title": "Target Sum",
            "titleSlug": "target-sum-1626326450",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of integers <strong>A[]</strong> of length N and an integer <strong>target</strong>.<br />You want to build an <strong>expression&nbsp;</strong>out of <strong>A&nbsp;</strong>by adding one of the symbols '<strong>+</strong>' and '<strong>-</strong>' before each integer in <strong>A</strong>&nbsp;and then concatenate all the integers.</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">For example, if arr&nbsp;= {2, 1}, you can add a '<strong>+</strong>' before 2 and a '<strong>-</strong>' before 1 and concatenate them to build the expression \"+2-1\".</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\">Return the number of different&nbsp;<strong>expressions</strong>&nbsp;that can be built, which evaluates to&nbsp;<strong>target </strong>and return your answer with <strong>modulo 10<sup>9</sup></strong><strong>+7</strong>.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 5\nA[] = {1, 1, 1, 1, 1}\ntarget = 3\n<strong>Output:\n</strong>5<strong>\nExplanation:\n</strong>There are 5 ways to assign symbols to \nmake the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3</span>\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 1\nA[] = {1}\ntarget = 1\n<strong>Output:\n</strong>1\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />The task is to complete the function <strong>findTargetSumWays</strong>() which finds and returns the number of different expressions that can be built with modulo 10<sup>9</sup> + 7<sup>.</sup></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N*sum), where sum refers to the range of sum possible.<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 100<br />-1000 &le; A[i] &le; 1000<br />0 &lt;= sum(A[i]) &lt;= 10<sup>4</sup><br />-1000 &lt;= target &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `A` of length `N` and an integer `target`, the goal is to determine the number of different expressions that can be constructed by adding either a '+' or '-' sign before each integer in `A` and then concatenating the integers. The expression should evaluate to the given `target`. The result must be returned modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= N <= 100",
                    "-1000 <= A[i] <= 1000",
                    "0 <= sum(A[i]) <= 10<sup>4</sup>",
                    "-1000 <= target <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 5\nA[] = {1, 1, 1, 1, 1}\ntarget = 3",
                        "output": "5",
                        "explanation": "There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3"
                    },
                    {
                        "input": "N = 1\nA[] = {1}\ntarget = 1",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to apply <strong>Subset Sum</strong>.</span></p>",
            "<p><span style=\"font-size:18px\">The problem can be converted as follows-</span></p>\n\n<p><span style=\"font-size:18px\">Find a&nbsp;<strong>subset</strong>&nbsp;<code>P</code>&nbsp;of&nbsp;<code>nums</code>&nbsp;such that&nbsp;<code>sum(P) = (target + sum(A)) / 2</code></span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    long long findTargetSumWays(int n, vector<int>& arr, int target) {\n        vector<vector<long long>> dp(\n            n, vector<long long>(8000,\n                                 -1)); // Assuming the range of the sum is [-1000, 1000]\n        return recursiveHelper(arr, n, target, dp, 0);\n    }\n\n    long long mod = 1e9 + 7;\n\n    long long recursiveHelper(vector<int>& arr, int n, int target,\n                              vector<vector<long long>>& dp, long long i) {\n        if (i == n) {\n            return target == 0 ? 1 : 0;\n        }\n\n        if (dp[i][target + 4000] != -1) {\n            return dp[i][target + 4000];\n        }\n\n        long long ways = (recursiveHelper(arr, n, target + arr[i], dp, i + 1) +\n                          recursiveHelper(arr, n, target - arr[i], dp, i + 1)) %\n                         mod;\n\n        dp[i][target + 4000] = ways;\n        return ways;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from functools import lru_cache\nimport sys \nsys.setrecursionlimit(10**7)\nclass Solution:\n    def findTargetSumWays(self, n, arr, target):\n        mod = 10**9+7\n        @lru_cache(None)\n        def dp(i,target):\n            if i==n:\n                if target==0:\n                    return 1\n                return 0\n            return (dp(i+1,target-arr[i]) + dp(i+1,target+arr[i]))%mod\n        return dp(0,target)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}