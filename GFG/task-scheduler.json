{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712323,
            "title": "Task Scheduler",
            "titleSlug": "task-scheduler",
            "content": "<p><span style=\"font-size: 18px;\">Given a character array <strong>tasks</strong> of size <strong>N</strong>, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.<br /></span><span style=\"font-size: 18px;\">CPU has a cooldown period for each task. CPU can repeat a task only after atleast <strong>K&nbsp;</strong>units of time has passed after it did same task last time. It can perform other tasks in that time, can stay idle to wait for repeating that task.</span></p>\n<p><span style=\"font-size: 18px;\">Return the <strong>least</strong> number of units of times that the CPU will take to finish all the given tasks.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />N = 6<br />K = 2<br />task[ ] = {'A', 'A',&nbsp;'A',&nbsp;'B',&nbsp;'B',&nbsp;'B'}<br /><strong>Output: </strong>8<br /><strong>Explanation:</strong>&nbsp;<br />A -&gt; B -&gt; idle&nbsp;-&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B<br />There is atleast 2 units of time between any two same tasks.</span><br />&nbsp;</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />N = 12<br />K = 2<br />task[ ] = {'A', 'A',&nbsp;'A',&nbsp;'A', 'A',&nbsp;'A', 'B',&nbsp;'C',&nbsp;'D', 'E', 'F', 'G'}<br /><strong>Output: </strong>16<br /><strong>Explanation:</strong>&nbsp;&nbsp;<br />One possible solution is&nbsp;<br />A -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle&nbsp;</span><span style=\"font-size: 18px;\">-&gt; idle</span><span style=\"font-size: 18px;\"> </span><span style=\"font-size: 18px;\">-&gt; A&nbsp;</span><span style=\"font-size: 18px;\">-&gt; idle</span><span style=\"font-size: 18px;\"> </span><span style=\"font-size: 18px;\">-&gt; idle -&gt; A.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>leastInterval()</strong>&nbsp;which takes the interger <strong>N</strong>, integer <strong>K</strong> and an character&nbsp;array&nbsp;<strong>tasks&nbsp;</strong>as parameters and returns the minimum unit of time required to complete all tasks.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>4</sup><br />0 &le; K&nbsp;&le; 100</span><br /><span style=\"font-size: 18px;\">task</span><sub>i&nbsp;</sub><span style=\"font-size: 18px;\">is upper-case English letter.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a character array `tasks` of size `N`, representing the tasks a CPU needs to perform. Each letter represents a different task. Tasks can be done in any order, and each task takes one unit of time. The CPU can either complete a task or be idle during each unit of time.\n\nThe CPU has a cooldown period `K` for each task. This means that the CPU can only repeat a task after at least `K` units of time have passed since it last performed that task.  It can perform other tasks during this time, or stay idle to wait.\n\nDetermine the least number of units of time the CPU will take to finish all the given tasks.",
                "constraints": [
                    "1 <= N <= 10^4",
                    "0 <= K <= 100",
                    "task_i is an uppercase English letter."
                ],
                "testcases": [
                    {
                        "input": "N = 6\nK = 2\ntask[] = {'A', 'A', 'A', 'B', 'B', 'B'}",
                        "output": "8",
                        "explanation": "One possible schedule is: A -> B -> idle -> A -> B -> idle -> A -> B.  There are at least 2 units of time between any two of the same task."
                    },
                    {
                        "input": "N = 12\nK = 2\ntask[] = {'A', 'A', 'A', 'A', 'A', 'A', 'B', 'C', 'D', 'E', 'F', 'G'}",
                        "output": "16",
                        "explanation": "One possible schedule is: A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A. The 'A' tasks are spaced out by K=2, and idle times are inserted to ensure the constraint is met."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Which task will result in more idling of the CPU?</p>",
            "<p>Either all tasks could be completed without CPU staying idle or a task with maximum occurence will force CPU to remain idle after every other task is compelted</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    // Function to find the minimum time required to complete all tasks\r\n    int leastInterval(int N, int K, vector<char> &tasks) {\r\n        unordered_map<char, int> mp; // create a map to store task counts\r\n        int count = 0; // initialize count of most frequent task\r\n        for (auto e : tasks) { // iterate over tasks\r\n            mp[e]++; // increment count of task in map\r\n            count = max(count, mp[e]); // update count if necessary\r\n        }\r\n\r\n        int ans = (count - 1) * (K + 1); // calculate time required for same tasks loop\r\n        for (auto e : mp) // iterate over map\r\n            if (e.second == count) ans++; // increment answer for tasks with count equal to most frequent task\r\n        return max((int)tasks.size(), ans); // return maximum of total tasks length and answer\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static int leastInterval(int n, int K, char tasks[]) {\r\n        // creating an array to store the frequencies of tasks\r\n        int[] counter = new int[26];\r\n        // variable to store the maximum frequency\r\n        int max = 0;\r\n        // variable to store the number of tasks with maximum frequency\r\n        int maxCount = 0;\r\n        \r\n        // iterating over the tasks array\r\n        for (char task : tasks) {\r\n            // incrementing the frequency of the current task\r\n            counter[task - 'A']++;\r\n            // checking if the current task has the maximum frequency so far\r\n            // and updating max and maxCount accordingly\r\n            if (max == counter[task - 'A']) {\r\n                maxCount++;\r\n            } else if (max < counter[task - 'A']) {\r\n                max = counter[task - 'A'];\r\n                maxCount = 1;\r\n            }\r\n        }\r\n\r\n        // calculating the number of parts and their lengths\r\n        int partCount = max - 1;\r\n        int partLength = K - (maxCount - 1);\r\n        \r\n        // calculating the number of empty slots, available tasks, and idles\r\n        int emptySlots = partCount * partLength;\r\n        int availableTasks = tasks.length - max * maxCount;\r\n        int idles = Math.max(0, emptySlots - availableTasks);\r\n\r\n        // returning the total number of tasks and idles\r\n        return tasks.length + idles;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom collections import Counter\nclass Solution:\n    \n    #Function to find the least interval between tasks.\n    def leastInterval(self, N, K, tasks):\n        \n        #Creating a counter dictionary to count the frequency of each task.\n        mp = Counter(tasks)\n        \n        #Finding the task with the maximum frequency.\n        count = max(mp.values())\n        \n        #Calculating the number of intervals required.\n        ans = (count - 1) * (K + 1)\n        \n        #Checking if there are other tasks with the same maximum frequency.\n        for key, val in mp.items():\n            if val == count:\n                ans += 1\n        \n        #Returning the maximum of total tasks and the calculated intervals.\n        return max(len(tasks), ans)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} N\r\n * @param {number} K\r\n * @param {number[]} tasks\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to execute least number of operations to complete all the tasks\r\n    leastInterval(N, K, tasks) {\r\n        //Creating a counter dictionary to count the frequency of each task.\r\n        let mp = {};\r\n        for(let i=0; i<tasks.length; i++) {\r\n            if(mp[tasks[i]]) {\r\n                mp[tasks[i]]++;\r\n            } else {\r\n                mp[tasks[i]] = 1;\r\n            }\r\n        }\r\n        \r\n        //Finding the task with the maximum frequency.\r\n        let count = Math.max(...Object.values(mp));\r\n        \r\n        //Calculating the number of intervals required.\r\n        let ans = (count - 1) * (K + 1);\r\n\r\n        //Checking if there are other tasks with the same maximum frequency.\r\n        for (let key in mp) {\r\n            if (mp[key] === count) {\r\n                ans += 1;\r\n            }\r\n        }\r\n        \r\n        //Returning the maximum of total tasks and the calculated intervals.\r\n        return Math.max(tasks.length, ans);\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int leastInterval(int N, int K, List<char> tasks)\n    {\n        Dictionary<char, int> mp = new Dictionary<char, int>();\n        int count = 0;\n        foreach (char e in tasks)\n        {\n            if (mp.ContainsKey(e))\n            {\n                mp[e]++;\n            }\n            else\n            {\n                mp[e] = 1;\n            }\n            count = Math.Max(count, mp[e]);\n        }\n\n        int ans = (count - 1) * (K + 1);\n        foreach (KeyValuePair<char, int> e in mp)\n        {\n            if (e.Value == count)\n            {\n                ans++;\n            }\n        }\n        return Math.Max(tasks.Count, ans);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}