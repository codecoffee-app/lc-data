{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714082,
            "title": "Taxi Booking",
            "titleSlug": "taxi-booking--170647",
            "content": "<p><span style=\"font-size:18px\">You are going to book a taxi. There are infinite number of points 1, 2, 3... on the X axis and your current position is <strong>cur</strong>. There are <strong>N</strong> Taxis near you, and the position of those taxis is given as an array <strong>pos</strong>. Where <strong>pos[i]</strong> denotes the position of the <strong>ith</strong> taxi. You are also given an array <strong>time</strong>. Where <strong>time[i]</strong> denotes the time taken by the <strong>ith</strong> taxi to cover <strong>1 unit</strong> of distance. Your task is to find the <strong>minimum</strong> time to board a taxi.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3, cur = 4\r\npos = [1, 5, 6]\r\ntime = [2, 3, 1]\r\n<strong>Output:</strong>\r\n2\r\n<strong>Explanation:</strong>\r\nTotal time taken by the 1st taxi will be: (4-1)*2 = 6\r\nTotal time taken by the 2nd taxi will be: (5-4)*3 = 3\r\nTotal time taken by the 3rd taxi will be: (6-4)*1 = 2\r\nSo, the minimum time will be 2 sec.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 2, cur = 1\r\npos = [1, 6]\r\ntime = [10, 3]\r\n<strong>Output:</strong>\r\n0\r\n<strong>Explanation:</strong>\r\nTotal time taken by the 1st taxi will be: (1-1)*10 = 0\r\nTotal time taken by the 2nd taxi will be: (6-1)*3 = 15\r\nSo, the minimum time will be 0 sec.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>minimumTime()</strong>&nbsp;which takes two&nbsp;integers&nbsp;<strong>N </strong>and<strong> cur</strong>, and<strong> 2</strong>&nbsp;arrays&nbsp;<strong>pos</strong>, and<strong> time&nbsp;</strong>as input parameters and returns the minimum time required to board the taxi.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N&nbsp;&le; 10<sup>5</sup><br />\r\n1&nbsp;&le; cur&nbsp;&le; 10<sup>5</sup><br />\r\n1&nbsp;&le; pos[i] &le; 10<sup>5</sup><br />\r\n1&nbsp;&le; time[i]&nbsp;&le; 10<sup>3</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Think about finding the absolute distance between the current position and the position of the taxis.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to calculate minimum time required to reach current position.\n    int minimumTime(int N,int cur,vector<int> &pos,vector<int> &time){\n        int mn=1e9; //Initializing minimum time as very large number.\n\n        //Iterating over all the positions.\n        for(int i=0;i<N;i++){\n\n            //Calculating distance from current position to each position.\n            int dist=abs(pos[i]-cur);\n\n            //Calculating minimum time using the formula: distance * time.\n            mn=min(mn,dist*time[i]);\n        }\n\n        //Returning the minimum time required.\n        return mn;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int minimumTime(int N, int cur, int[] pos, int[] time) {\r\n        // code here\r\n        int mn=(int)1e9;\r\n        for(int i=0;i<N;i++){\r\n            int dist=Math.abs(pos[i]-cur);\r\n            mn=Math.min(mn,dist*time[i]);\r\n        }\r\n        return mn;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\r\n\r\n# Defining a class Solution\r\nclass Solution:\r\n    # Function to calculate the minimum time\r\n    def minimumTime(self, N : int, cur : int, pos : List[int], time : List[int]) -> int:\r\n        # Initializing the minimum time as a very large number\r\n        mn=10**9\r\n        # Looping through the positions and times\r\n        for i in range(N):\r\n            # Calculating the distance between the current position and the current position\r\n            dist=abs(pos[i]-cur)\r\n            # Updating the minimum time if necessary\r\n            mn=min(mn,dist*time[i])\r\n        \r\n        # Returning the minimum time\r\n        return mn",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}