{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705496,
            "title": "Telephone Number or Involution Number",
            "titleSlug": "telephone-number-or-involution-number4412",
            "content": "<p><span style=\"font-size:18px\">Given a positive integer <strong>n</strong>. The task is to find the n<sup>th</sup> telephone number. The <strong>telephone numbers or the involution numbers</strong> are a sequence of integers </span><span style=\"font-size:18px\">that count the number of connection patterns in a telephone system with&nbsp;<strong>n</strong>&nbsp;subscribers, where connections are made between pairs of subscribers. These numbers also describe the number of matchings of a complete graph of n vertices, the number of permutations on n elements that are involutions, the sum of absolute value of coefficients of the Hermite polynomials, the number of standard Young tableaux with n cells, and the sum of the degrees of the irreducible representations of the symmetric group.</span></p>\n\n<p><span style=\"font-size:18px\">Telephone numbers also used to derive the number of ways to place <strong>n</strong> rooks on </span><span style=\"font-size:18px\">an </span><span style=\"font-size:18px\"><strong>n</strong><strong> x n</strong> chessboard in such a way that no two rooks attack each other, and in such a way that the configuration of the rooks is symmetric under a diagonal reflection of the board. </span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 4\n<strong>Output:</strong> 10\n<strong>Explaination:</strong> There are 10 such possible ways.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 2\n<strong>Output:</strong> 2\n<strong>Explaination:</strong> There are only two ways.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need&nbsp; to read input or print anything. Your task is to complete the function <strong>telephoneNum()</strong> which takes n as input parameters and returns the resultant number modulo <strong>10<sup>9</sup>+7</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(n)<br />\n<strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; n &le; 1000&nbsp;&nbsp;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, find the n<sup>th</sup> telephone number (or involution number) modulo 10<sup>9</sup> + 7. Telephone numbers represent the number of connection patterns in a telephone system with `n` subscribers, where connections are made between pairs of subscribers.  They also represent the number of involutions on `n` elements, matchings in a complete graph of `n` vertices, and other combinatorial objects.",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "10",
                        "explanation": "There are 10 possible telephone numbers for n=4.  These numbers enumerate various combinatorial structures, including symmetric rook placements on a chessboard and involutions on a set of size 4."
                    },
                    {
                        "input": "2",
                        "output": "2",
                        "explanation": "There are 2 possible telephone numbers for n=2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">It follows a sequence. If ith telephone number is denoted by T(i), then<br />\nT(i) = 1, for i = 0, 1;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; T(i-1) + (i-1)*T(i-2) ,&nbsp; for any i</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "series",
                "slug": "series"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to count the number of telephone numbers\n    long long telephoneNum(long long n){\n        long long mod = 1000000007LL;\n        long long dp[n+1]; // array to store the number of telephone numbers\n        memset(dp, 0, sizeof(dp)); // initializing the array with all zeros\n        dp[0] = dp[1] = 1; // base case: there is only one telephone number for n = 0 or 1\n        // looping through the array to calculate the number of telephone numbers for each n\n        for(long long i = 2;i <= n;i++) {\n            dp[i] = (dp[i-1]%mod + ((i-1)*dp[i-2])%mod)%mod; // calculating the number of telephone numbers using recurrence relation\n        }\n        return dp[n]; // returning the number of telephone numbers for n\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}