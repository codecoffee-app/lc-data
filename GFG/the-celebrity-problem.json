{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700253,
            "title": "The Celebrity Problem",
            "titleSlug": "the-celebrity-problem",
            "content": "<p><span >A celebrity is a person who is known to all but&nbsp;<strong>does not know</strong>&nbsp;anyone at a party. A party is being organized by some people. A square matrix&nbsp;<strong>mat[][]&nbsp;</strong>(n*n)&nbsp;is used to represent people at the party such that if an element of <strong>row i and column j is set to 1</strong> it means <strong>ith person knows jth person</strong>.&nbsp;You need to return the <strong>index of the celebrity</strong> in the party, if the celebrity does not exist, return&nbsp;<strong>-1</strong>.</span></p>\n<p><span ><strong>Note:</strong>&nbsp;Follow <strong>0-based </strong>indexing.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>mat[][] = [[1, 1, 0], [0, 1, 0], [0, 1, 1]]\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>0th and 2nd person both know 1st person. Therefore, 1 is the celebrity person. </span></pre>\n<pre><span ><strong>Input: </strong>mat[][] = [[1, 1], [1, 1]]\n<strong>Output:</strong> -1\n<strong>Explanation: </strong>Since both the people at the party know each other. Hence none of them is a celebrity person.</span></pre>\n<pre><span ><strong>Input: </strong>mat[][] = [[1]]\n<strong>Output:</strong> 0</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= mat.size()&lt;= 1000<br />0 &lt;= mat[i][j]&lt;= 1<br />mat[i][i] == 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are at a party represented by a square matrix `mat[][]` of size n*n. A celebrity is someone who is known by everyone but doesn't know anyone else at the party. `mat[i][j] = 1` indicates that person `i` knows person `j`. Your task is to find and return the index of the celebrity. If no celebrity exists, return -1.  Remember to use 0-based indexing.",
                "constraints": [
                    "1 <= mat.size() <= 1000",
                    "0 <= mat[i][j] <= 1",
                    "mat[i][i] == 1"
                ],
                "testcases": [
                    {
                        "input": "[[1, 1, 0], [0, 1, 0], [0, 1, 1]]",
                        "output": "1",
                        "explanation": "Person 1 is known by person 0 and person 2, but person 1 does not know anyone. Therefore, person 1 is the celebrity."
                    },
                    {
                        "input": "[[1, 1], [1, 1]]",
                        "output": "-1",
                        "explanation": "Neither person is a celebrity because they both know each other."
                    },
                    {
                        "input": "[[1]]",
                        "output": "0",
                        "explanation": "Person 0 does not know anyone and nobody else is in the party to know person 0, hence person 0 is the celebrity"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to create a count variable for each person and check how much the count is.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho",
            "flipkart",
            "amazon",
            "microsoft",
            "google",
            "fab.com",
            "one97",
            "united-health-group"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find if there is a celebrity in the party or not.\n    int celebrity(vector<vector<int> >& mat) {\n        int n = mat.size();\n\n        int i = 0, j = n - 1;\n        while (i < j) {\n\n            // j knows i, thus j can't be celebrity\n            if (mat[j][i] == 1)\n                j--;\n\n            // else i can't be celebrity\n            else\n                i++;\n        }\n\n        // i points to our celebrity candidate\n        int c = i;\n\n        // Check if c is actually\n        // a celebrity or not\n        for (i = 0; i < n; i++) {\n            if (i == c)\n                continue;\n\n            // If any person doesn't\n            // know 'c' or 'c' doesn't\n            // know any person, return -1\n            if (mat[c][i] || !mat[i][c])\n                return -1;\n        }\n\n        return c;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find if there is a celebrity in the party or not.\n    public int celebrity(int mat[][]) {\n        int n = mat.length;\n\n        int i = 0, j = n - 1;\n        while (i < j) {\n\n            // j knows i, thus j can't be celebrity\n            if (mat[j][i] == 1) j--;\n\n            // else i can't be celebrity\n            else\n                i++;\n        }\n\n        // i points to our celebrity candidate\n        int c = i;\n\n        // Check if c is actually\n        // a celebrity or not\n        for (i = 0; i < n; i++) {\n            if (i == c) continue;\n\n            // If any person doesn't\n            // know 'c' or 'c' doesn't\n            // know any person, return -1\n            if (mat[c][i] != 0 || mat[i][c] == 0) return -1;\n        }\n\n        return c;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    #Function to find the celebrity.\n    def celebrity(self, mat):\n        n = len(mat)\n\n        i = 0\n        j = n - 1\n        while i < j:\n\n            # j knows i, thus j can't be celebrity\n            if mat[j][i] == 1:\n                j -= 1\n\n            # else i can't be celebrity\n            else:\n                i += 1\n\n        # i points to our celebrity candidate\n        c = i\n\n        # Check if c is actually\n        # a celebrity or not\n        for i in range(n):\n            if i == c:\n                continue\n\n            # If any person doesn't\n            # know 'c' or 'c' doesn't\n            # know any person, return -1\n            if mat[c][i] or not mat[i][c]:\n                return -1\n\n        return c\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    celebrity(mat) {\n        let n = mat.length;\n\n        let i = 0, j = n - 1;\n        while (i < j) {\n\n            // j knows i, thus j can't be celebrity\n            if (mat[j][i] === 1) j--;\n\n            // else i can't be celebrity\n            else\n                i++;\n        }\n\n        // i points to our celebrity candidate\n        let c = i;\n\n        // Check if c is actually\n        // a celebrity or not\n        for (let i = 0; i < n; i++) {\n            if (i === c) continue;\n\n            // If any person doesn't\n            // know 'c' or 'c' doesn't\n            // know any person, return -1\n            if (mat[c][i] || !mat[i][c]) return -1;\n        }\n\n        return c;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}