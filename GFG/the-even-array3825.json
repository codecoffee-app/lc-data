{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703138,
            "title": "The Even Array",
            "titleSlug": "the-even-array3825",
            "content": "<p><span style=\"font-size:18px\">Given a string contains &#39;E&#39; and &#39;O&#39;, &#39;E&#39; represents a number is even and &#39;O&#39; represents a number is odd.</span> <span style=\"font-size:18px\">To make an element even, you can add 1 to any odd element of the array. Also, when any element of the array is converted to even, any neighboring element which is odd, can also be made even without adding 1. The task is to find the minimum number of additions required to make all the elements even. </span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;EOOE&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Add 1 to 2nd element, \nit&#39;s neighbour 3rd element will \nconvert into even. </span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;EOOOOE&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Add 1 to 2nd element, \nit&#39;s neighbour 3rd element will \nconvert into even. Then 4th and \n5th elements too</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>convertToEven()&nbsp;</strong>which takes a string as inputs and returns the minimum number of additions required. </span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= |S| &lt; 10<sup>5</sup> </span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` consisting of 'E's and 'O's, where 'E' represents an even number and 'O' represents an odd number. The goal is to determine the minimum number of additions needed to make all elements represented by the string even. You can add 1 to any odd element ('O') to make it even. When an element is converted to even, any adjacent odd elements can also be considered even without requiring an additional increment.",
                "constraints": [
                    "1 <= |S| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "EOOE",
                        "output": "1",
                        "explanation": "Adding 1 to the second element ('O') makes it even. This, in turn, converts its neighboring element ('O' at index 2) to even without further addition."
                    },
                    {
                        "input": "EOOOOE",
                        "output": "1",
                        "explanation": "Adding 1 to the second element ('O') makes it even. The neighboring odd elements at indices 2, 3 and 4 will also become even without extra additions."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. Count substrings with O&#39;s</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{ \n    public:\n    //Function to convert a string to the even sequence.\n    int convertToEven(string s)\n    {\n    \tint ans = (s[0]=='O');\n    \n    \t//Iterating over the string to count the number of transitions.\n    \tfor(int i = 1; i < s.size(); i++)\n    \t{\n    \t\t//If the current element is 'O' and the previous element is 'E',\n            //increment the count.\n    \t\tif(s[i]=='O' and s[i-1]=='E')\n    \t\t\tans++;\n    \t}\n    \n    \treturn ans;\n    }\n\n    \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution\n{\n    // Complete this function\n    public int convertToEven(string s)\n    {\n        // Count is 1 if the first character is 'O', otherwise 0\n        int ans = (s[0] == 'O') ? 1 : 0;\n\n        // Iterating over the string to count the number of transitions.\n        for (int i = 1; i < s.Length; i++)\n        {\n            // If the current character is 'O' and the previous character is 'E',\n            // increment the count.\n            if (s[i] == 'O' && s[i - 1] == 'E')\n                ans++;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}