{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705694,
            "title": "The Infinite String",
            "titleSlug": "the-infinite-string1049",
            "content": "<p><span style=\"font-size:18px\">Consider a string A = &quot;12345&quot;.&nbsp; An infinite string&nbsp;is built by performing infinite steps on A recursively. In i<sup>th</sup> step, A is concatenated with &lsquo;$&rsquo; i times followed by reverse of A, that is,&nbsp;<strong>A = A | $...$ | reverse(A)</strong>, where | denotes concatenation.</span></p>\n\n<p><span style=\"font-size:18px\">Given a position <strong>pos</strong>, find out the character at pos in the infinite string.</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: pos = 3\n<strong>Output: </strong>3\n<strong>Explanation</strong>: A = &quot;12345&quot;, then A[pos] is 3.\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>pos = 10\n<strong>Output:&nbsp;</strong>2\n<strong>Explanation</strong>: A = &quot;12345$54321&quot;, then A[pos] is 2.\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>posInfinite()&nbsp;</strong>which takes pos&nbsp;as input parameter and returns&nbsp;the character in the infinite string at pos.</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(sqrtn)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;= pos&nbsp;&lt;=10<sup>12</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Consider a string A = \"12345\". An infinite string is built by recursively performing the following steps on A. In the i-th step, A is concatenated with '$' i times, followed by the reverse of A.  That is, A = A | $...$ | reverse(A), where | denotes concatenation. Given a position pos, find the character at that position in the infinite string.",
                "constraints": [
                    "1 <= pos <= 10^12"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "3",
                        "explanation": "Initially, A = \"12345\". The character at position 3 is '3'."
                    },
                    {
                        "input": "10",
                        "output": "2",
                        "explanation": "After the first step, A becomes \"12345$54321\". The character at position 10 is '2'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">Implementation based problem mainly focused on math.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "national-instruments"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    //Function to return the character at the given position.\n    char posInfinite(long long pos){\n        string s=\"12345\";\n        int n=5;\n        // char ans;\n        long long flag=0;\n        long long i=0;\n        flag=0;\n        do\n        {\n            long long count=s.length();\n            long long i=0;\n            while(count<pos)\n            {\n                i++;\n                //calculating the new count after each iteration.\n                count=count*2+i;\n                \n            }\n            \n            //if position is less than or equal to 2n+1, exit the loop.\n            if(pos<=2*n+1)\n            break;\n            \n            long long temp=(count-i)/2;\n            \n            //checking if the position falls within the range of temp to temp+i.\n            if(pos>temp && pos<=temp+i)\n            {\n                flag=1;\n            }\n            \n            //updating the position for the next iteration.\n            pos=pos-temp-i;\n            \n        }while(flag==0 && pos>2*n+1);\n        \n        if(flag==1)\n        return '$';\n        else\n        {\n            //if position is equal to n+1, return '$'.\n            if(pos==n+1)\n            return '$';\n            //if position is less than or equal to n, return the character at that position.\n            else if (pos<=n)\n            return s[pos-1];\n            //if position is greater than n, return the character at n - pos.\n            else\n            {\n                pos=pos-n-1;\n                return s[n-pos];\n            }\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}