{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704978,
            "title": "The Lazy Caterer's Problem",
            "titleSlug": "the-lazy-caterers-problem2527",
            "content": "<p><span style=\"font-size:18px\">Given an integer <strong>n</strong>, denoting the number of cuts that can be made on a pancake, find the maximum number of pieces that can be formed by making n&nbsp;cuts.<br />\n<strong>NOTE:</strong>&nbsp;Cuts can&#39;t be horizontal.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 5\n<strong>Output: </strong>16\n<strong>Explanation:  </strong>16 pieces can be formed by\nmaking 5 cuts.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<strong><span style=\"font-size:18px\">Input: </span></strong><span style=\"font-size:18px\">N = 3\n<strong>Output: </strong>7\n<strong>Explanation: </strong>7 pieces can be formed by \nmaking 3 cuts.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;</strong><br />\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>maximum_Cuts()</strong>&nbsp;which takes n as input parameter and returns the maximum number of pieces that can be formed by making n cuts.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(1)<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `n`, representing the number of cuts that can be made on a pancake, determine the maximum number of pieces that can be formed.  Each cut must be a straight line across the pancake. Cuts are not restricted to be vertical or horizontal.",
                "constraints": [
                    "1 <= N <= 10000"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "16",
                        "explanation": "With 5 cuts, the maximum number of pieces that can be formed is 16.  Each new cut should intersect all previous cuts at different points to maximize the number of regions created."
                    },
                    {
                        "input": "3",
                        "output": "7",
                        "explanation": "With 3 cuts, the maximum number of pieces is 7.  The cuts should intersect each other to create new regions."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Optimize your solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "visa"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n\tpublic:\n   \t//Function to find the maximum number of cuts that can be made.\n   \tint maximum_Cuts(int n){\n   \t\t//calculating the number of cuts using the formula (n*(n+1))/2 and adding 1.\n   \t\tint ans = (n*(n+1))/2;\n   \t\tans += 1;\n   \t\t//returning the maximum number of cuts.\n   \t\treturn ans;\n   \t}    \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n  maximum_Cuts(n) {\n    let ans = (n * (n + 1)) / 2;\n    ans += 1;\n    return ans;\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}