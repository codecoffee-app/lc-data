{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703586,
            "title": "The Muskteers",
            "titleSlug": "the-muskteers3519",
            "content": "<p><span style=\"font-size:18px\">Given binary string str consisting of only 0&#39;s and 1&#39;s, Check if all the 0&#39;s are together or not.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nstr = &quot;000&quot;\n<strong>Output:</strong>\nYES\n<strong>Explanation:</strong>\nAll the 0&#39;s are together.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nstr = &quot;111&quot;\n<strong>Output:</strong>\nNO\n<strong>Explanation:</strong>\nAll the 0&#39;s are not together.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>checkTogether()</strong>&nbsp;which takes the binary string str<strong>&nbsp;</strong>as an input parameter&nbsp;and returns 1 if all the 0&#39;s are&nbsp;together else returns 0.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N), Where N is the size of the&nbsp;string.<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= |str| &lt;= 10000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to form a group of zero if you have group equal to 1 then answer is YES otherwise NO.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution{   \npublic:\n    bool checkTogether(string str)\n    {\n        int firstZeroIndex = -1;\n        int lastZeroIndex = -1;\n        for (int i = 0; i < str.size(); i++)\n        {\n            if (str[i] == '0')\n            {\n                if (firstZeroIndex == -1)\n                {\n                    firstZeroIndex = i;\n                }\n                lastZeroIndex = i; // Keep updating last index of 0\n            }\n        }\n        \n        if (firstZeroIndex == -1)\n        {\n            return false;\n        }\n        \n        bool together = true;\n        \n        for (int i = firstZeroIndex; i <= lastZeroIndex; i++)\n        {\n            if (str[i] == '1')\n            {\n                together = false; //There shouldn't be any 1 b/w two end of 0's\n            }\n        }\n        \n        return together;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    static boolean checkTogether(String str){\n        // Initialize variables to keep track of indices of first and last occurrence of 0\n        int firstZeroIndex = -1;\n        int lastZeroIndex = -1;\n\n        // Iterate through the string to find the first and last occurrence of 0\n        for (int i = 0; i < str.length(); i++)\n        {\n            // If 0 is found\n            if (str.charAt(i) == '0')\n            {\n                // Update firstZeroIndex if it has not been assigned yet\n                if (firstZeroIndex == -1)\n                {\n                    firstZeroIndex = i;\n                }\n                // Update lastZeroIndex to keep track of the most recent 0\n                lastZeroIndex = i; // Keep updating last index of 0\n            }\n        }\n        \n        // If no 0 is found in the string, return false\n        if (firstZeroIndex == -1)\n        {\n            return false;\n        }\n        \n        // Initialize variable to check if all 1s are found between the two 0s\n        boolean together = true;\n        \n        // Iterate through the string from firstZeroIndex to lastZeroIndex\n        // to check if there are any 1s present\n        for (int i = firstZeroIndex; i <= lastZeroIndex; i++)\n        {\n            // If a 1 is found between the two 0s, set together to false\n            if (str.charAt(i) == '1')\n            {\n                together = false; //There shouldn't be any 1 b/w two end of 0's\n            }\n        }\n        \n        // Return the value of together, indicating if all 1s are found between the two 0s\n        return together;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution   \n{\n    //Complete this function\n    //Function to check whether characters of a string can be rearranged to form a palindrome.\n    public bool checkTogether(string str)\n    {\n        int firstZeroIndex = -1;\n        int lastZeroIndex = -1;\n        for (int i = 0; i < str.Length; i++)\n        {\n            if (str[i] == '0')\n            {\n                if (firstZeroIndex == -1)\n                {\n                    firstZeroIndex = i;\n                }\n                lastZeroIndex = i; // Keep updating last index of 0\n            }\n        }\n        \n        if (firstZeroIndex == -1)\n        {\n            return false;\n        }\n        \n        bool together = true;\n        \n        for (int i = firstZeroIndex; i <= lastZeroIndex; i++)\n        {\n            if (str[i] == '1')\n            {\n                together = false; //There shouldn't be any 1 b/w two end of 0's\n            }\n        }\n        \n        return together;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}