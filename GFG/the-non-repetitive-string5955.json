{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703182,
            "title": "The Non-repetitive String",
            "titleSlug": "the-non-repetitive-string5955",
            "content": "<p><span style=\"font-size: 18px;\">Given a string S, the task is to check if a string is a non-repetitive or not.&nbsp; A <strong>non-repetitive</strong> string is defined as a string that does not contain any different character between two same characters </span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> S = \"AABBCCCCC\"\n<strong>Output:</strong> 1\n<strong>Explanation:</strong></span> <span style=\"font-size: 18px;\">No different character is \nplaced between the two same characters.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> S = \"ABA\"\n<strong>Output:</strong> 0\n<strong>Explanation:</strong></span> <span style=\"font-size: 18px;\">B is in between two A's</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>nonRepetitive()&nbsp;</strong>which takes a string S as input and returns the boolean value. </span><br /><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(constant).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |S| &lt;= 10<sup>5</sup><br />S contains upper case English alphabets</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>1. Find the occurrence of each character</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution\n{\n  public:\n    //Function to check if the string has non-repetitive characters.\n    bool nonRepetitive(string S)\n    {\n    \tint n = S.size();\n            \n        //array to keep track of the count of each character.\n        int vis[26] = {0};\n        \n        //iterating over the string starting from the second character.\n        for(int i = 1; i < S.size(); i++)\n        {\n            //if the current character is not equal to the previous character, increment the count of the previous character.\n            if(S[i-1]!=S[i])\n                vis[S[i-1]-'A']++;\n        }\n        \n        //increment the count of the last character in the string.\n        vis[S[n-1]-'A']++;\n        \n        //flag variable to check if any character has count greater than 1.\n        int flag = 1;\n        \n        //iterating over the count array.\n        for(int i = 0; i < 26; i++)\n        {\n            //if any character has count greater than 1, return false.\n            if(vis[i]>1)\n            {\n                return 0;\n            }\n        }\n        \n        //return true if all characters have count 1 or 0.\n        return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution {\n    public bool nonRepetitive(string S) {\n        int n = S.Length;\n\n        int[] vis = new int[26];\n\n        for (int i = 1; i < S.Length; i++) {\n            if (S[i - 1] != S[i]) vis[S[i - 1] - 'A']++;\n        }\n\n        vis[S[n - 1] - 'A']++;\n\n        // int flag = 1;\n\n        for (int i = 0; i < 26; i++) {\n            if (vis[i] > 1) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}