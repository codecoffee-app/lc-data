{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703461,
            "title": "The Optimal Selection",
            "titleSlug": "the-optimal-selection5413",
            "content": "<p><span >Given an array <strong>arr[] </strong>of positive integers, you need to select all integers from the array in an order that maximizes the total points. For each selected integer, the points earned are equal to the integer's value multiplied by the number of integers already selected before it. Calculate the maximum points possible and return the result modulo </span><span class=\"katex\"><strong><span class=\"katex-mathml\" >10^9 + 7</span></strong><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span ><span class=\"mord\">.</span></span></span></span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong><span style=\"font-size: 18px;\"> arr[] = [1, 2, 2, 4, 9]\n</span><strong style=\"font-size: 18px;\">Output:</strong><span style=\"font-size: 18px;\"> 54\n</span><strong style=\"font-size: 18px;\">Explanation:</strong><span style=\"font-size: 18px;\">\nSelect 1: Points = 1 * 0 = 0\nSelect 2: Points = 2 * 1 = 2\nSelect 2: Points = 2 * 2 = 4\nSelect 4: Points = 4 * 3 = 12\nSelect 9: Points = 9 * 4 = 36\nTotal Points: 0 + 2 + 4 + 12 + 36 = 54.</span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [2, 2, 2, 2] <strong>\nOutput:</strong> 12 </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints :</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of positive integers, the goal is to select all integers from the array in an order that maximizes the total points earned. When an integer is selected, the points earned are calculated as the integer's value multiplied by the number of integers already selected before it.  Calculate the maximum possible points achievable and return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 2, 4, 9]",
                        "output": "54",
                        "explanation": "The optimal selection order is [1, 2, 2, 4, 9].  Here's the point breakdown:\n- Select 1: Points = 1 * 0 = 0\n- Select 2: Points = 2 * 1 = 2\n- Select 2: Points = 2 * 2 = 4\n- Select 4: Points = 4 * 3 = 12\n- Select 9: Points = 9 * 4 = 36\nTotal Points: 0 + 2 + 4 + 12 + 36 = 54."
                    },
                    {
                        "input": "[2, 2, 2, 2]",
                        "output": "12",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use modular arithmetic to sum the products of each element and its index after sorting, and ensure results are within bounds using modulo&nbsp; 1e9+7.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the sum of selections\n    int Selection(vector<int>& arr) {\n        int n = arr.size();\n        const int MOD = 1e9 + 7;\n\n        int ans = 0;\n\n        // Sorting the array in ascending order\n        std::sort(arr.begin(), arr.end());\n\n        // Calculating sum of products of element and its index\n        for (int i = 0; i < n; i++) {\n            ans = (ans + (long long)arr[i] * i) % MOD;\n        }\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public static int Selection(int[] arr) {\n        final int MOD = 1000000007;\n        int n = arr.length;\n        long ans = 0;\n\n        // Sorting the array in ascending order\n        Arrays.sort(arr);\n\n        // Calculating sum of products of element and its index\n        for (int i = 0; i < n; i++) {\n            ans = (ans + (long)arr[i] * i) % MOD;\n        }\n\n        return (int)ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def Selection(self, arr):\n        MOD = 10**9 + 7\n        n = len(arr)\n        ans = 0\n\n        # Sorting the array in ascending order\n        arr.sort()\n\n        # Calculating sum of products of element and its index\n        for i in range(n):\n            ans = (ans + arr[i] * i) % MOD\n\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to calculate the sum of selections\n    Selection(arr) {\n        const MOD = BigInt(1e9 + 7); // Convert MOD to BigInt\n        const n = arr.length;\n        let ans = BigInt(0); // Initialize ans as BigInt\n\n        // Sorting the array in ascending order\n        arr.sort((a, b) => a - b);\n\n        // Calculating sum of products of element and its index\n        for (let i = 0; i < n; i++) {\n            ans = (ans + BigInt(arr[i]) * BigInt(i)) % MOD;\n        }\n\n        return Number(ans); // Convert BigInt to Number before returning\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}