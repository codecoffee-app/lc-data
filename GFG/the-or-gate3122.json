{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703747,
            "title": "The OR Gate",
            "titleSlug": "the-or-gate3122",
            "content": "<p><span style=\"font-size:18px\">Given N bits to an OR - Gate&nbsp;find the output that will be produced.&nbsp;<br />\r\nOR - Gate Table:<br />\r\n1 | 1 = 1<br />\r\n1 | 0 = 1<br />\r\n0 | 1 = 1<br />\r\n0 | 0 = 0</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4\r\narr: 1 1 1 0\r\n<strong>Output:</strong>\r\n1\r\n<strong>Explanation:</strong>\r\n1 | 1 = 1\r\n1 | 1 = 1\r\n1 | 0 = 1\r\nhence output is 1</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4\r\narr: 0 0 1 0\r\n<strong>Output:</strong>\r\n1\r\n<strong>Explanation:</strong>\r\n0 | 0 = 0\r\n0 | 1 = 1\r\n1 | 0 = 1\r\nhence output is 1</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>orGate()</strong>&nbsp;which takes the array arr[], its size N as input parameters&nbsp;and returns the output after processing OR operations on N bits.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(N)<br />\r\n<strong>Expected Space Complexity: </strong>O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=N&lt;=1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given N bits, find the output produced by applying the OR operation to all bits.",
                "constraints": [
                    "1 <= N <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 4\narr: 1 1 1 0",
                        "output": "1",
                        "explanation": "The OR operation is applied sequentially: 1 | 1 = 1, 1 | 1 = 1, 1 | 0 = 1. Therefore, the final output is 1."
                    },
                    {
                        "input": "N = 4\narr: 0 0 1 0",
                        "output": "1",
                        "explanation": "The OR operation is applied sequentially: 0 | 0 = 0, 0 | 1 = 1, 1 | 0 = 1. Therefore, the final output is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If we find a bit as 1 in the given bits the resulting&nbsp;answer will always be 1 otherwise 0.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "   \r\nclass Solution{\r\npublic:\r\n    int orGate(vector<int> arr,int N){\r\n        for(int i = 0 ;i<N ;i++){\r\n            // if we find a bit as 1 the resulting \r\n            // answer will always be 1\r\n            if(arr[i] == 1)\r\n                return 1;\r\n        }\r\n        // if no 1 is present then answer is zero\r\n        return 0;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\nclass Solution{\r\n    static int orGate(int arr[] , int N){\r\n        for(int i = 0 ;i<N ;i++){\r\n            // if we find a bit as 1 the resulting \r\n            // answer will always be 1\r\n            if(arr[i] == 1)\r\n                return 1;\r\n        }\r\n        // if no 1 is present then answer is zero\r\n        return 0;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def orGate (self, arr, N):\r\n        for i in arr:\r\n            # if we find a bit as 1 the resulting \r\n            # answer will always be 1\r\n            if i == 1:\r\n               return 1\r\n        # if no 1 is present then answer is zero\r\n        return 0",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to perform OR operation on all array elements.\n    orGate(arr, N)\n    {\n        for (let i = 0; i < N; i++) {\n            if (arr[i] === 1) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}