{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702853,
            "title": "The Painter's Partition Problem-II",
            "titleSlug": "the-painters-partition-problem1535",
            "content": "<p><span >Dilpreet wants to paint&nbsp;his dog's home that has&nbsp;<strong>n</strong> boards with&nbsp;different lengths. The length of i<sup>th&nbsp;</sup>board is given by <strong>arr[i]</strong> where <strong>arr[]</strong> is an array of <strong>n</strong> integers. He hired <strong>k</strong> painters for this work and each painter takes <strong>1 unit time to paint 1 unit of the board. <br /></strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><br />Return the minimum time to get this job done if all painters start together with the constraint that any painter will only paint continuous boards, say boards numbered </span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">[2,3,4] </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">or only board </span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">[1]</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> or nothing but not boards </span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">[2,4,5]</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [5, 10, 30, 20, 15], k = 3\n<strong>Output:</strong> 35\n<strong>Explanation: </strong>The most optimal way will be: Painter 1 allocation : [5,10], Painter 2 allocation : [30], Painter 3 allocation : [20,15], Job will be done when all painters finish i.e. at time = max(5+10, 30, 20+15) = 35</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [10, 20, 30, 40], k = 2\n<strong>Output: </strong>60\n<strong>Explanation: </strong>The most optimal way to paint: Painter 1 allocation : [10,20,30], Painter 2 allocation : [40], Job will be complete at time = 60</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [100, 200, 300, 400], k = 1\n<strong>Output: </strong>1000\n<strong>Explanation: </strong>There is only one painter, so the painter must paint all boards sequentially. The total time taken will be the sum of all board lengths, i.e., 100 + 200 + 300 + 400 = 1000.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5<br /></sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &le; arr[i] &le; 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5<br /></sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &le; k &le; 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Dilpreet needs to paint his dog's home, which consists of 'n' boards of varying lengths. The length of the i-th board is given by arr[i], where arr is an array of 'n' integers. He has hired 'k' painters. Each painter takes 1 unit of time to paint 1 unit of the board. The goal is to find the minimum time required to complete the painting job, given that all painters start simultaneously and each painter can only paint continuous sections of boards (e.g., boards [2, 3, 4] are valid, but [2, 4, 5] are not).",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5",
                    "1 <= k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [5, 10, 30, 20, 15], k = 3",
                        "output": "35",
                        "explanation": "The optimal allocation is: Painter 1: [5, 10], Painter 2: [30], Painter 3: [20, 15]. The total time is max(5+10, 30, 20+15) = 35."
                    },
                    {
                        "input": "arr[] = [10, 20, 30, 40], k = 2",
                        "output": "60",
                        "explanation": "The optimal allocation is: Painter 1: [10, 20, 30], Painter 2: [40]. The total time is max(10+20+30, 40) = 60."
                    },
                    {
                        "input": "arr[] = [100, 200, 300, 400], k = 1",
                        "output": "1000",
                        "explanation": "With only one painter, they must paint all boards. The total time is 100 + 200 + 300 + 400 = 1000."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try using binary search to minimize the maximum time a painter takes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft",
            "google",
            "codenation"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    // return the maximum element from the array\n    int getMax(vector<int> arr, int n) {\n        int max = INT_MIN;\n        for (int i = 0; i < n; i++)\n            if (arr[i] > max)\n                max = arr[i];\n        return max;\n    }\n\n    // return the sum of the elements in the array\n    int getSum(vector<int> arr, int n) {\n        int total = 0;\n        for (int i = 0; i < n; i++)\n            total += arr[i];\n        return total;\n    }\n\n    // find minimum required painters for given maxlen\n    // which is the maximum length a painter can paint\n    int numberOfPainters(vector<int> arr, int n, int maxLen) {\n        int total = 0, numPainters = 1;\n\n        for (int i = 0; i < n; i++) {\n            total += arr[i];\n\n            if (total > maxLen) {\n\n                // for next count\n                total = arr[i];\n                numPainters++;\n            }\n        }\n\n        return numPainters;\n    }\n\n    int minTime(vector<int>& arr, int k) {\n        int n = arr.size();\n        int lo = getMax(arr, n);\n        int hi = getSum(arr, n);\n\n        while (lo < hi) {\n            int mid = lo + (hi - lo) / 2;\n            int requiredPainters = numberOfPainters(arr, n, mid);\n\n            // find better optimum in lower half\n            // here mid is included because we\n            // may not get anything better\n            if (requiredPainters <= k)\n                hi = mid;\n\n            // find better optimum in upper half\n            // here mid is excluded because it gives\n            // required Painters > k, which is invalid\n            else\n                lo = mid + 1;\n        }\n\n        // required\n        return lo;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Backend complete function trmplate for JAVA\n\nclass Solution {\n    // return the maximum element from the array\n    static int getMax(int arr[], int n) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < n; i++)\n            if (arr[i] > max) max = arr[i];\n        return max;\n    }\n\n    // return the sum of the elements in the array\n    static int getSum(int arr[], int n) {\n        int total = 0;\n        for (int i = 0; i < n; i++) total += arr[i];\n        return total;\n    }\n\n    // find minimum required painters for given maxlen\n    // which is the maximum length a painter can paint\n    static int numberOfPainters(int arr[], int n, int maxLen) {\n        int total = 0, numPainters = 1;\n\n        for (int i = 0; i < n; i++) {\n            total += arr[i];\n\n            if (total > maxLen) {\n\n                // for next count\n                total = arr[i];\n                numPainters++;\n            }\n        }\n\n        return numPainters;\n    }\n\n    public int minTime(int arr[], int k) {\n        int n = arr.length;\n        int lo = getMax(arr, n);\n        int hi = getSum(arr, n);\n\n        while (lo < hi) {\n            int mid = lo + (hi - lo) / 2;\n            int requiredPainters = numberOfPainters(arr, n, mid);\n\n            // find better optimum in lower half\n            // here mid is included because we\n            // may not get anything better\n            if (requiredPainters <= k) hi = mid;\n\n            // find better optimum in upper half\n            // here mid is excluded because it gives\n            // required Painters > k, which is invalid\n            else\n                lo = mid + 1;\n        }\n\n        // required\n        return lo;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Backend complete function template for Python 3\n\n\nclass Solution:\n\n    def numberOfPainters(self, arr, n, maxLen):\n        total = 0\n        numPainters = 1\n\n        for i in arr:\n            total += i\n\n            if (total > maxLen):\n\n                # for next count\n                total = i\n                numPainters += 1\n\n        return numPainters\n\n    def minTime(self, arr, k):\n        n = len(arr)\n        lo = max(arr)\n        hi = sum(arr)\n\n        while (lo < hi):\n            mid = lo + (hi - lo) // 2\n            requiredPainters = self.numberOfPainters(arr, n, mid)\n\n            # find better optimum in lower half\n            # here mid is included because we\n            # may not get anything better\n            if (requiredPainters <= k):\n                hi = mid\n\n            # find better optimum in upper half\n            # here mid is excluded because it gives\n            # required Painters > k, which is invalid\n            else:\n                lo = mid + 1\n\n        # required\n        return lo\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} k\n * @returns {number}\n */\nclass Solution {\n\n    minTime(arr, k) {\n        let n = arr.length;\n\n        // return the maximum element from the array\n        function getMax(n) {\n            let max = Number.MIN_SAFE_INTEGER;\n            for (let i = 0; i < n; i++) {\n                if (arr[i] > max) {\n                    max = arr[i];\n                }\n            }\n            return max;\n        }\n\n        // return the sum of the elements in the array\n        function getSum(n) {\n            let total = 0;\n            for (let i = 0; i < n; i++) {\n                total += arr[i];\n            }\n            return total;\n        }\n\n        // find minimum required painters for given maxlen\n        // which is the maximum length a painter can paint\n        function numberOfPainters(n, maxLen) {\n            let total = 0;\n            let numPainters = 1;\n\n            for (let i = 0; i < n; i++) {\n                total += arr[i];\n\n                if (total > maxLen) {\n\n                    // for next count\n                    total = arr[i];\n                    numPainters++;\n                }\n            }\n\n            return numPainters;\n        }\n\n        let lo = getMax(n);\n        let hi = getSum(n);\n\n        while (lo < hi) {\n            let mid = lo + Math.floor((hi - lo) / 2);\n            let requiredPainters = numberOfPainters(n, mid);\n\n            // find better optimum in lower half\n            // here mid is included because we\n            // may not get anything better\n            if (requiredPainters <= k) {\n                hi = mid;\n            }\n\n            // find better optimum in upper half\n            // here mid is excluded because it gives\n            // required Painters > k, which is invalid\n            else {\n                lo = mid + 1;\n            }\n        }\n\n        // required\n        return lo;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}