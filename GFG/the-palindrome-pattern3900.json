{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704788,
            "title": "The Palindrome Pattern",
            "titleSlug": "the-palindrome-pattern3900",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">Given a two-dimensional integer array <strong>arr</strong> of dimensions <strong>n x n</strong>, consisting solely of zeros and ones, identify the row or column (using 0-based indexing) where all elements form a palindrome. If multiple palindromes are identified, prioritize the palindromes found in rows over those in columns. Within rows or columns, the palindrome with the smaller index takes precedence. The result should be represented by the index followed by either <strong>'R'</strong> or <strong>'C'</strong>, indicating whether the palindrome was located in a row or column. The output should be space-separated. If no palindrome is found, return the string <strong>-1</strong>.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: <br /></span><span style=\"font-size: 18px;\">arr[][] =  [[1, 0, 0], <br /></span><span style=\"font-size: 18px;\">\\t     [0, 1, 0],<br />\\t     [1, 1, 0]]\n<strong>Output:</strong>&nbsp;1 R\n<strong>Explanation</strong>: In the first test case, 0-1-0 is a palindrome \noccuring in a row having index 1.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>arr[][] =   [[1, 0],<br />\\t     [1, 0]]</span><br /><span style=\"font-size: 18px;\"><strong>Output: </strong>0 C</span><br /><span style=\"font-size: 18px;\"><strong>Explanation</strong>: 1-1 occurs before 0-0 in the 0th column. And there is no palindrome in the two rows.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints: <br /></strong></span><span style=\"font-size: 18px;\">1&lt;= arr.size &lt;= 50<br /></span><span style=\"font-size: 18px;\">0 &lt;= arr[i][j] &lt;= 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a two-dimensional integer array `arr` of dimensions `n x n`, consisting solely of zeros and ones, find the row or column (using 0-based indexing) where all elements form a palindrome. If multiple palindromes are found, prioritize rows over columns. Within rows or columns, the palindrome with the smaller index takes precedence.  Return the index followed by either 'R' or 'C', indicating the location (row or column), separated by a space. If no palindrome is found, return the string '-1'.",
                "constraints": [
                    "1 <= arr.size <= 50",
                    "0 <= arr[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "arr[][] = [[1, 0, 0], [0, 1, 0], [1, 1, 0]]",
                        "output": "1 R",
                        "explanation": "The row with index 1 (0-indexed) forms a palindrome: 0-1-0."
                    },
                    {
                        "input": "arr[][] = [[1, 0], [1, 0]]",
                        "output": "0 C",
                        "explanation": "The column with index 0 (0-indexed) forms a palindrome: 1-1.  No row forms a palindrome, and column 0 precedes column 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Prioritize rows over columns and return the smallest index.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Functions",
                "slug": "functions"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if the given array is a palindrome.\n    bool palindrome(int arr[], int n) {\n        bool isPalindrome = true;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] != arr[n - 1 - i]) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;\n    }\n\n    // Function to find the pattern in the given 2D array.\n    string pattern(vector<vector<int>> &arr) {\n        int n = arr.size();\n\n        string ans = \"-1\";\n\n        // check for row\n        for (int i = 0; i < n; i++) {\n            int currRow[n];\n            for (int j = 0; j < n; j++) {\n                currRow[j] = arr[i][j];\n            }\n\n            if (palindrome(currRow, n)) {\n                ans = to_string(i) + \" R\";\n                return ans;\n            }\n        }\n\n        // check for column\n        for (int j = 0; j < n; j++) {\n            int currCol[n];\n            for (int i = 0; i < n; i++) {\n                currCol[i] = arr[i][j];\n            }\n\n            if (palindrome(currCol, n)) {\n                ans = to_string(j) + \" C\";\n                return ans;\n            }\n        }\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public String pattern(int[][] arr) {\n        // Code here\n        int n = arr.length;\n        int[] temp = new int[n];\n        int flag = 0;\n        String ans = \"\";\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                temp[j] =\n                    arr[i][j]; // Copying each row of the 2D array to a temporary array.\n            }\n\n            if (isPalindrome(temp)) { // Checking if the row is a palindrome.\n                flag = 1;\n                ans = i + \" \"\n                      + \"R\"; // Setting the answer as the row index and \"R\" to indicate\n                             // the pattern is in a row.\n                break;\n            }\n        }\n\n        if (flag == 0) {\n            for (int j = 0; j < n; j++) {\n                for (int i = 0; i < n; i++) {\n                    temp[i] = arr[i][j]; // Copying each column of the 2D array to a\n                                         // temporary array.\n                }\n\n                if (isPalindrome(temp)) { // Checking if the column is a palindrome.\n                    flag = 1;\n                    ans = j + \" \"\n                          + \"C\"; // Setting the answer as the column index and \"C\" to\n                                 // indicate the pattern is in a column.\n                    break;\n                }\n            }\n        }\n\n        if (flag == 0)\n            ans = \"-1\"; // If no palindrome pattern is found, set answer as -1.\n\n        return ans; // Return the answer.\n    }\n\n    // Function to check if the given array is a palindrome.\n    private boolean isPalindrome(int[] arr) {\n        int n = arr.length;\n        int mid = n / 2;\n\n        for (int i = 0; i < mid; i++) {\n            if (arr[i] != arr[n - 1 - i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def pattern(self, arr):\n        n = len(arr)\n        temp = [0] * n\n        flag = 0\n        ans = \"\"\n\n        for i in range(n):\n            for j in range(n):\n                temp[j] = arr[i][\n                    j]  # Copying each row of the 2D array to a temporary array.\n\n            if self.is_palindrome(\n                    temp):  # Checking if the row is a palindrome.\n                flag = 1\n                ans = str(\n                    i\n                ) + \" \" + \"R\"  # Setting the answer as the row index and \"R\" to indicate the pattern is in a row.\n                break\n\n        if flag == 0:\n            for j in range(n):\n                for i in range(n):\n                    temp[i] = arr[i][\n                        j]  # Copying each column of the 2D array to a temporary array.\n\n                if self.is_palindrome(\n                        temp):  # Checking if the column is a palindrome.\n                    flag = 1\n                    ans = str(\n                        j\n                    ) + \" \" + \"C\"  # Setting the answer as the column index and \"C\" to indicate the pattern is in a column.\n                    break\n\n        if flag == 0:\n            ans = \"-1\"  # If no palindrome pattern is found, set answer as -1.\n\n        return ans  # Return the answer.\n\n    # Function to check if the given array is a palindrome.\n    def is_palindrome(self, arr):\n        n = len(arr)\n        mid = n // 2\n\n        for i in range(mid):\n            if arr[i] != arr[n - 1 - i]:\n                return False\n\n        return True\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    pattern(arr) {\n        let ans = \"\";\n        let n = arr.length;\n\n        for (let i = 0; i < n; i++) {\n            let f = 0;\n            for (let j = 0; j < Math.floor(n / 2); j++) {\n                if (arr[i][j] !== arr[i][n - j - 1]) {\n                    f = 1;\n                    break;\n                }\n            }\n            if (f === 0) {\n                ans += i.toString() + \" R\";\n                return ans;\n            }\n        }\n\n        for (let i = 0; i < n; i++) {\n            let f = 0;\n            for (let j = 0; j < Math.floor(n / 2); j++) {\n                if (arr[j][i] !== arr[n - j - 1][i]) {\n                    f = 1;\n                    break;\n                }\n            }\n            if (f === 0) {\n                ans += i.toString() + \" C\";\n                return ans;\n            }\n        }\n\n        return \"-1\";\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}