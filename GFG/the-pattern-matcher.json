{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700823,
            "title": "The Pattern Matcher",
            "titleSlug": "the-pattern-matcher",
            "content": "<p><em><span style=\"font-size:18px\">All right! Let&#39;s implement some pattern-matching using CPP strings.</span></em></p><p><span style=\"font-size:18px\">You are given a string s of <strong>x and y</strong>. You need to verify whether the string follows the pattern <strong>x<sup>n</sup>y<sup>n</sup></strong>. That is the string is valid only if equal number of y<em>s</em> follow equal number of x<em>s</em>.<br />As an example: <strong>xxyyxxyy is valid</strong>. xy is valid.<strong> xxyyx is invalid</strong>. xxxyyyxxyyxy is valid.</span></p><p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p><pre><span style=\"font-size:18px\"><strong>Input:</strong>s = xxyy<strong>Output:</strong>1</span></pre><p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p><pre><span style=\"font-size:18px\"><strong>Input:</strong>s = xyx<strong>Output:</strong>0</span></pre><p></p><p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />Since this is a function problem, you don&#39;t need to take any input. Just complete the function<strong> follPatt(string s) </strong>that outputs 1 if string is valid, else it outputs 0. In a new line, <strong>print 1 if the string is valid else print 0</strong>.<br /><br /><strong>Expected Time Complexity:</strong>O(|s|)<br /><strong>Expected Auxilary Space:</strong>O(1)</span></p><p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />1 &lt;= |s| &lt;=100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">Count x&#39;s and y&#39;s in string then compare the count to print the result.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "cpp-strings",
                "slug": "cpp-strings"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n  public:\n    void follPatt(string s)\n    {   \n        //to store count of x\n        int x_count=0;\n        \n        //to store count of y\n        int y_count=0;\n        bool flag=false;\n        for(int i=0; i<s.length(); i++)\n        {\n           \n            if(s[i]=='x')\n            {\n                x_count++;\n            }\n            else\n            {\n                while(i<s.length() && s[i]=='y')\n                {\n                    y_count++;\n                    i++;\n                }\n                i--;\n               \n                if(x_count==y_count)\n                {\n                    x_count=y_count=0;\n                }\n                else\n                {\n                    flag=true;\n                    break;\n                }\n            }\n         \n        }\n       \n        if(flag==false && x_count==y_count)\n            cout<<1;\n        else\n            cout<<0;\n       \n        cout<<endl;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    \n    follPatt(s) {\n        let x_count=0; // Initialize a variable to store the count of 'x'\n        \n        let y_count=0; // Initialize a variable to store the count of 'y'\n        let flag=false; // Initialize a flag variable to check if the pattern is followed\n        for(let i=0; i<s.length; i++) // Loop through the length of the string\n        {\n           \n            if(s[i]=='x') // Check if the current character is 'x'\n            {\n                x_count++; // Increment the count of 'x'\n            }\n            else // If the current character is 'y'\n            {\n                while(i < s.length && s[i] ==='y') // Continue counting consecutive 'y' until a different character is found\n                {\n                    y_count++; // Increment the count of 'y'\n                    i++; // Increment the loop variable\n                }\n                i--; // Decrement the loop variable to compensate for the extra increment\n\n                if(x_count === y_count) // If the count of 'x' and 'y' is the same\n                {\n                    x_count=y_count=0; // Reset the counts to 0\n                }\n                else // If the count of 'x' and 'y' is not the same\n                {\n                    flag=true; // Set the flag variable to true\n                    break; // Exit the loop\n                }\n            }\n         \n        }\n       \n        if(flag===false && x_count===y_count) // Check if the flag is false and the count of 'x' and 'y' is the same\n            console.log(1); // Print 1 to indicate that the pattern is followed\n        else\n            console.log(0); // Print 0 to indicate that the pattern is not followed\n        \n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public void follPatt(string s)\n    {\n        int x_count = 0; //to store count of x\n        int y_count = 0; //to store count of y\n        bool flag = false;\n        \n        for(int i=0; i<s.Length; i++)\n        {\n            if(s[i]=='x')\n            {\n                x_count++;\n            }\n            else\n            {\n                while(i<s.Length && s[i]=='y')\n                {\n                    y_count++;\n                    i++;\n                }\n                i--;\n               \n                if(x_count==y_count)\n                {\n                    x_count = 0;\n                    y_count = 0;\n                }\n                else\n                {\n                    flag = true;\n                    break;\n                }\n            }\n        }\n       \n        if(flag == false && x_count==y_count)\n            Console.WriteLine(1);\n        else\n            Console.WriteLine(0);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}