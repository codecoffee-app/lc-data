{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703044,
            "title": "The problem of identical arrays",
            "titleSlug": "the-problem-of-identical-arrays3229",
            "content": "<p><span style=\"font-size: 18px;\">Check whether given two arrays <strong>a[]</strong>&nbsp;and <strong>b[] </strong>are identical or not. Two arrays are called identical arrays if they contain the same element with the same count, regardless of the order of elements.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> a[] = [1, 2, 3, 4, 5], b[] = [3, 4, 1, 2, 5]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>Here we can see array a[] = [1, 2, 3, 4, 5] and b[] = [3, 4, 1, 2, 5]. If we look both the array then we can get that array b[] is the permutation of a[]. So, both array.are identical. </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> a[] = [1, 2, 4], b[] = [3, 2, 1]\n<strong>Output:</strong> false\n<strong>Explanation: </strong>Here we can see that, missing 4 in array b and has 3 so they are not identical.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; a.size(), b.size() &le; 10<sup>5<br /></sup>a.size() = b.size()<br />1 &le; a[i], b[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `a[]` and `b[]`, determine if they are identical. Two arrays are considered identical if they contain the same elements with the same frequency, regardless of their order.",
                "constraints": [
                    "1 <= a.length, b.length <= 10^5",
                    "a.length = b.length",
                    "1 <= a[i], b[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "a[] = [1, 2, 3, 4, 5], b[] = [3, 4, 1, 2, 5]",
                        "output": "true",
                        "explanation": "Array `b[]` is a permutation of array `a[]`. Both arrays contain the same elements with the same counts; therefore, they are identical."
                    },
                    {
                        "input": "a[] = [1, 2, 4], b[] = [3, 2, 1]",
                        "output": "false",
                        "explanation": "Array `b[]` contains the element 3, which is not present in `a[]`, and is missing the element 4 which is in `a[]`. Therefore, the arrays are not identical."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Try checking elements of both the array <strong>arr1[]</strong> and <strong>arr2[]</strong> and store the count and then check whether both the arrays are identical or not If it is identical return <strong>true</strong> otherwise <strong>false</strong>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to compare two arrays\nclass Solution {\n  public:\n    bool isIdentical(vector<int> &arr1, vector<int> &arr2) {\n        unordered_map<int, int> m1, m2;\n        for (auto &i : arr1)\n            m1[i]++;\n        for (auto &i : arr2)\n            m2[i]++;\n        return m1 == m2;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public boolean isIdentical(List<Integer> arr1, List<Integer> arr2) {\n        Map<Integer, Integer> m1 = new HashMap<>();\n        Map<Integer, Integer> m2 = new HashMap<>();\n\n        for (int i : arr1) {\n            m1.put(i, m1.getOrDefault(i, 0) + 1);\n        }\n\n        for (int i : arr2) {\n            m2.put(i, m2.getOrDefault(i, 0) + 1);\n        }\n\n        return m1.equals(m2);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nfrom collections import Counter\n\n\nclass Solution:\n\n    def isIdentical(self, arr1, arr2):\n        return Counter(arr1) == Counter(arr2)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n\n    isIdentical(arr1, arr2) {\n        let freqMap1 = new Map();\n        let freqMap2 = new Map();\n\n        for (let num of arr1) {\n            freqMap1.set(num, (freqMap1.get(num) || 0) + 1);\n        }\n\n        for (let num of arr2) {\n            freqMap2.set(num, (freqMap2.get(num) || 0) + 1);\n        }\n\n        return freqMap1.size === freqMap2.size &&\n               Array.from(freqMap1.keys())\n                   .every(key => freqMap1.get(key) === freqMap2.get(key));\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}