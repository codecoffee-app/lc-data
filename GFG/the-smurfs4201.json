{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705523,
            "title": "The Smurfs",
            "titleSlug": "the-smurfs4201",
            "content": "<p dir=\"ltr\"><span style=\"font-size:18px\">A geek once visited a magical island where he found a special creature. He named it as&nbsp;Smurf. He noticed a very strange thing there. The&nbsp;smurfs&nbsp;resembled the primary colors of light. To make it more clear, the primary colors of light are <strong>Red</strong>(R), <strong>Green</strong>(G), and <strong>Blue</strong>(B). He talked to one of the&nbsp;smurfs. The&nbsp;smurfs&nbsp;came to know that he is a good programmer. The&nbsp;smurfs&nbsp;suggested a deal that they will ask him one question and if he is able to answer that question, they will allow the geek to take anything from the island.<br />\r\nThe question is as follows:<br />\r\nThe&nbsp;smurfs&nbsp;possess a very magical property. When two&nbsp;smurfs&nbsp;of different colors meet with other, they gets converted into a&nbsp;smurf&nbsp;of the third color. How many minimum number of&nbsp;smurfs&nbsp;will be remaining after this transformation? The question looked simple to geek. However, the&nbsp;smurfs&nbsp;put another constraint to make the geek think more. The two&nbsp;smurfs&nbsp;must be adjacent to each other &nbsp;to make the transformation take place. There are <strong>n</strong> smurfs the colors of which are given in an array <strong>a[]</strong>.</span></p>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 5\r\na = {&#39;R&#39; , &#39;G&#39;, &#39;B&#39;, &#39;R&#39;, &#39;B&#39;}\r\n<strong>Output:</strong> 1\r\n<strong>Explaination:</strong> First &#39;R&#39; and &#39;G&#39; makes &#39;B&#39;. \r\nThen &#39;B&#39; and &#39;R&#39; makes &#39;G&#39; and that &#39;G&#39; \r\nwith &#39;B&#39; at index 2 makes &#39;R&#39;, Now the &#39;R&#39; \r\nand the last &#39;B&#39; makes &#39;G&#39;.</span></pre>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 2\r\na = {&#39;R&#39;, &#39;R&#39;}\r\n<strong>Output:</strong> 2\r\n<strong>Explaination:</strong> There are two &#39;R&#39; s. So \r\nthey cannot change to anything else.</span></pre>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>findMin()</strong> which takes n and a as input parameters and retunrs the minimum number of smurfs existing at the end.</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n &le; 1000&nbsp;&nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A programmer visits a magical island inhabited by Smurfs, who resemble the primary colors of light: Red (R), Green (G), and Blue (B). The Smurfs propose a challenge: given an array of *n* Smurfs' colors, determine the minimum number of Smurfs remaining after transformations. When two adjacent Smurfs of different colors meet, they transform into a Smurf of the third color. The goal is to find the fewest Smurfs left after applying this transformation as many times as possible.",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 5\na = ['R', 'G', 'B', 'R', 'B']",
                        "output": "1",
                        "explanation": "The sequence of transformations leads to a single Smurf remaining. 'R' and 'G' combine to form 'B'. 'B' and the original 'B' combine with 'R' to make 'G'. That new 'G' combines with the original 'B' to make 'R'. Finally the new 'R' combines with the last 'B' to form 'G'."
                    },
                    {
                        "input": "n = 2\na = ['R', 'R']",
                        "output": "2",
                        "explanation": "Since both Smurfs are the same color, no transformation is possible, and both remain."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If adjacent colours are different then reduce the count by 1 and change the colour.</span></p>",
            "<p>Count the number of elements of each color. There are 4 different cases.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Puzzles",
                "slug": "puzzles"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to find the minimum number of operations required\n    int findMin(int n, char a[]){\n        int cntr = 0, cntg = 0, cntb = 0;\n\n        // Counting the number of red, green, and blue colors\n        for(int i = 0;i < n;i++){\n            if(a[i] == 'R')\n                cntr++;\n            else if(a[i] == 'G')\n                cntg++;\n            else\n                cntb++;\n        }\n        \n        // If all the colors are the same, return the total number of balls\n        if(cntr == n || cntg == n || cntb == n)\n            return n;\n\n        // If all the counts are odd, return 2 (operation required)\n        else if(cntr&1 && cntg&1 && cntb&1)\n            return 2;\n\n        // If all the counts are even, return 2 (operation required)\n        else if(cntr%2 == 0 && cntg%2 == 0 && cntb%2 == 0)\n            return 2;\n\n        // Otherwise, return 1 (operation required)\n        return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    static int minFind(int n, String a[]){\n        // initializing count variables for three colors - red, green, blue\n        int r=0,g=0,b=0;\n        \n        // counting the occurrences of each color in the input array\n        for(int i=0;i<n;i++){\n            if(a[i].charAt(0)=='R'){ // if color is red\n                r++;\n            }else if(a[i].charAt(0)=='G'){ // if color is green\n                g++;\n            }else{\n                b++; // if color is blue\n            }\n        }\n        \n        // if all elements are of the same color, return n\n        if(r==n || g==n || b==n){\n            return n;\n        }\n        \n        // if all three colors have even or odd count, return 2\n        else if((r%2==0 && g%2==0 && b%2==0) || (r%2==1 && g%2==1 && b%2==1)){\n            return 2;\n        }\n        \n        // return 1 if none of the above conditions are met\n        return 1;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def minFind(self, n, a):\r\n        # Count the number of red, green, and blue elements\r\n        cntr=cntg=cntb=0\r\n        for i in range(n):\r\n            if a[i]==\"R\":\r\n                cntr+=1\r\n            elif a[i]==\"B\":\r\n                cntg+=1\r\n            else :\r\n                cntb+=1\r\n        \r\n        # If all elements are of the same color, return n\r\n        if cntr==n or cntg==n or cntb==n:\r\n            return n\r\n\r\n        # If all colors have even counts or all colors have odd counts, return 2\r\n        elif ((cntr&1==0) and (cntg&1==0) and (cntb&1==0)):\r\n            return 2\r\n        elif ((cntr&1!=0) and (cntg&1!=0) and (cntb&1!=0)):\r\n            return  2\r\n        \r\n        # If the above conditions are not met, return 1\r\n        else:\r\n            return  1",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {string[]} a\n * @returns {number}\n*/\n\nclass Solution {\n    minFind(n, a) {\n        // Count the number of red, green, and blue elements\n        let cntr = 0, cntg = 0, cntb = 0;\n        for (let i = 0; i < n; i++) {\n            if (a[i] === \"R\") {\n                cntr++;\n            } else if (a[i] === \"G\") {\n                cntg++;\n            } else {\n                cntb++;\n            }\n        }\n\n        // If all elements are of the same color, return n\n        if (cntr === n || cntg === n || cntb === n) {\n            return n;\n        }\n\n        // If all colors have even counts or all colors have odd counts, return 2\n        if (((cntr & 1) === 0 && (cntg & 1) === 0 && (cntb & 1) === 0) ||\n            ((cntr & 1) !== 0 && (cntg & 1) !== 0 && (cntb & 1) !== 0)) {\n            return 2;\n        }\n\n        // If the above conditions are not met, return 1\n        return 1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}