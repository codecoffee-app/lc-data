{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704742,
            "title": "The Spider Steps",
            "titleSlug": "the-spider-steps3600",
            "content": "<p><span style=\"font-size:18px\">A spider present at the bottom of the well of height H, needs to get out of it. The walls of the well are very slippery. In each step, it climbs U metres and slips down D metres. If in the last step, the spider gets out of the well by climbing U metres, it does not slip back. Find the number of steps the spider takes.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nH = 200, U = 50, D = 1\r\n<strong>Output:</strong> 5\r\n<strong>Explaination: </strong>\r\nFirst Step: 50 -1 = 49 \r\nSecond Step: 49 + 50 - 1 = 98 \r\nThird Step: 98 + 50 - 1 = 147 \r\nFouth Step: 147 + 50 - 1 = 196\r\nFifth Step: Reach beyond H.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nH = 100, U = 5, D = 3\r\n<strong>Output:</strong> 49\r\n<strong>Explanation:</strong>\r\nA single step covers (U-D=2) in each step. \r\nYou can cover 96 in 48 steps. In the 49th \r\nstep increment by 5 and don&#39;t decrement by 3.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 3:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nH = 10, U = 4, D = 1\r\n<strong>Output:</strong> 4\r\n<strong>Explaination:</strong>\r\nFirst Step: 4 - 1 = 3\r\nSecond Step: 3 + 4 - 1 = 6 \r\nThird Step: 6 + 4 - 1 = 9 \r\nFourth Step: 9+4 = 13 &gt; 10\r\n</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>minStep()</strong> which takes H, U and D as input parameters and returns the steps required to go beyond H.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n50 &le; H &le; 1000<br />\r\n1 &le; D &lt; U &le; 100</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A spider is trapped at the bottom of a well with height H. The well walls are slippery. The spider climbs U meters and then slips down D meters in each attempt. If the spider reaches or exceeds the well's height (H) during its climb (U), it escapes and does not slip back. Determine the minimum number of attempts the spider needs to escape the well.",
                "constraints": [
                    "50 <= H <= 1000",
                    "1 <= D < U <= 100"
                ],
                "testcases": [
                    {
                        "input": "H = 200, U = 50, D = 1",
                        "output": "5",
                        "explanation": "The spider's progress is as follows:\n- Attempt 1: Climbs to 50, slips to 49\n- Attempt 2: Climbs to 99, slips to 98\n- Attempt 3: Climbs to 148, slips to 147\n- Attempt 4: Climbs to 197, slips to 196\n- Attempt 5: Climbs to 246, escapes the well."
                    },
                    {
                        "input": "H = 100, U = 5, D = 3",
                        "output": "49",
                        "explanation": "The spider gains a net height of 2 meters (U-D) with each attempt until the last. After 48 attempts, the spider reaches height 96. On the 49th attempt, the spider gains 5 meters reaching a height of 101 and escapes, and doesn't slip."
                    },
                    {
                        "input": "H = 10, U = 4, D = 1",
                        "output": "4",
                        "explanation": "The spider's progress is as follows:\n- Attempt 1: Climbs to 4, slips to 3\n- Attempt 2: Climbs to 7, slips to 6\n- Attempt 3: Climbs to 10, slips to 9\n- Attempt 4: Climbs to 13, escapes the well."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The difference between U and D can become helpful.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "logical-thinking",
                "slug": "logical-thinking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate the minimum number of steps\n    int minStep(int H, int U, int D){\n        int x = (U - D); // Calculating the difference between the upward and downward steps\n        int ans = 1; // Initializing the minimum number of steps to 1\n        H = (H + 1 - U); // Calculating the remaining height after the first step\n        // Checking if the remaining height is divisible by x\n        if(H%x == 0)\n            ans += (H/x); // Adding the number of steps required to fully cover the remaining height\n        else\n            ans += (H/x + 1); // Adding the rounded up number of steps required to cover the remaining height\n        return ans; // Returning the minimum number of steps\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}