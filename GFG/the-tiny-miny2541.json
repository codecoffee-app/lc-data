{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703177,
            "title": "The Tiny Miny",
            "titleSlug": "the-tiny-miny2541",
            "content": "<p><span >Given two integers <strong>a</strong> and <strong>n</strong>, generate a series by raising <strong>a</strong> to the power of 1 to <strong>n</strong> (i.e., a^1, a^2, a^3, ..., a^n). From each result, extract all the digits (including repeating ones), and then form the smallest possible number using all these digits (excluding zeros).</span></p>\n<h3><span >Examples:</span></h3>\n<pre><span ><strong>Input:</strong> a = 9, n = 4</span><br /><span ><strong>Output:</strong> 1125667899</span><br /><span ><strong>Explanation: </strong></span><span >9^1 = 9, 9^2 = 81, 9^3 = 729, 9^4 = 6561. </span><span >The digits from these values are: 9, 81, 729, 6561. </span><span >All digits combined form: 9817296561. </span><span >By rearranging these digits, the smallest possible number is 1125667899.</span></pre>\n<pre><span ><strong>Input:</strong> a = 5, n = 1</span><br /><span ><strong>Output:</strong> 5</span><br /><span ><strong>Explanation: </strong></span><span >5^1 = 5. </span><span >There is only one digit, so the smallest number is 5.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n&sup2; log a)</span><br /><span ><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints:&nbsp; &nbsp;<br /></strong></span><span >0 &le; n &le; 5<br />0 &le; a &le; 70</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, `a` and `n`, generate a series by raising `a` to the power of 1 to `n` (i.e., a^1, a^2, a^3, ..., a^n). Extract all digits from each resulting power (including repeating ones).  Construct the smallest possible number using all these extracted digits, excluding any zeros.",
                "constraints": [
                    "0 \u2264 n \u2264 5",
                    "0 \u2264 a \u2264 70"
                ],
                "testcases": [
                    {
                        "input": "a = 9, n = 4",
                        "output": "1125667899",
                        "explanation": "The powers are: 9^1 = 9, 9^2 = 81, 9^3 = 729, 9^4 = 6561. The digits extracted are: 9, 8, 1, 7, 2, 9, 6, 5, 6, 1. Arranging these digits to form the smallest possible number (excluding zeros) yields 1125667899."
                    },
                    {
                        "input": "a = 5, n = 1",
                        "output": "5",
                        "explanation": "The only power is 5^1 = 5.  The single digit extracted is 5, which is the smallest possible number."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try storing the count of each digit, then make the smallest number from it.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to generate the smallest number formed by multiplying a with powers of\n    // n.\n    string tinyMiny(int a, int n) {\n        int freq[10]; // array to store the frequency of digits from 1 to 9\n\n        // initializing the frequency array with zeros\n        for (int i = 0; i < 10; i++) {\n            freq[i] = 0;\n        }\n\n        // special case when a is 0, the smallest number will be 0\n        if (a == 0)\n            return \"0\";\n\n        // special case when n is 0, the smallest number will be 1\n        if (n == 0)\n            return \"1\";\n\n        int c = 1; // variable to store the power of a\n        for (int i = n; i > 0; i--) {\n            c = c * a;\n            int temp = c;\n\n            // updating the frequency of digits in c\n            while (temp) {\n                freq[temp % 10]++;\n                temp = temp / 10;\n            }\n        }\n\n        string ans = \"\"; // string to store the final answer\n\n        // generating the smallest number by concatenating digits in increasing order\n        for (int x = 1; x <= 9; x++)\n            for (int y = 0; y < freq[x]; y++)\n                ans += to_string(x);\n\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public String tinyMiny(int a, int n) {\n        int[] freq = new int[10]; // array to store the frequency of digits from 1 to 9\n\n        // initializing the frequency array with zeros\n        for (int i = 0; i < 10; i++) {\n            freq[i] = 0;\n        }\n\n        // special case when a is 0, the smallest number will be 0\n        if (a == 0) {\n            return \"0\";\n        }\n\n        // special case when n is 0, the smallest number will be 1\n        if (n == 0) {\n            return \"1\";\n        }\n\n        int c = 1; // variable to store the power of a\n        for (int i = n; i > 0; i--) {\n            c = c * a;\n            int temp = c;\n\n            // updating the frequency of digits in c\n            while (temp > 0) {\n                freq[temp % 10]++;\n                temp = temp / 10;\n            }\n        }\n\n        StringBuilder ans = new StringBuilder(); // string to store the final answer\n\n        // generating the smallest number by concatenating digits in increasing order\n        for (int x = 1; x <= 9; x++) {\n            for (int y = 0; y < freq[x]; y++) {\n                ans.append(x);\n            }\n        }\n\n        return ans.toString();\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def tinyMiny(self, a, n):\n        freq = [0] * 10  # array to store the frequency of digits from 1 to 9\n\n        # special case when a is 0, the smallest number will be 0\n        if a == 0:\n            return \"0\"\n\n        # special case when n is 0, the smallest number will be 1\n        if n == 0:\n            return \"1\"\n\n        c = 1  # variable to store the power of a\n        for i in range(n, 0, -1):\n            c *= a\n            temp = c\n\n            # updating the frequency of digits in c\n            while temp > 0:\n                freq[temp % 10] += 1\n                temp //= 10\n\n        ans = \"\"  # string to store the final answer\n\n        # generating the smallest number by concatenating digits in increasing order\n        for x in range(1, 10):\n            ans += str(x) * freq[x]\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    tinyMiny(a, n) {\n        const freq =\n            Array(10).fill(0); // array to store the frequency of digits from 1 to 9\n\n        // special case when a is 0, the smallest number will be 0\n        if (a === 0) {\n            return \"0\";\n        }\n\n        // special case when n is 0, the smallest number will be 1\n        if (n === 0) {\n            return \"1\";\n        }\n\n        let c = 1; // variable to store the power of a\n        for (let i = n; i > 0; i--) {\n            c *= a;\n            let temp = c;\n\n            // updating the frequency of digits in c\n            while (temp > 0) {\n                freq[temp % 10]++;\n                temp = Math.floor(temp / 10);\n            }\n        }\n\n        let ans = \"\"; // string to store the final answer\n\n        // generating the smallest number by concatenating digits in increasing order\n        for (let x = 1; x <= 9; x++) {\n            ans += String(x).repeat(freq[x]);\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}