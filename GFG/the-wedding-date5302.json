{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703620,
            "title": "The Wedding Date",
            "titleSlug": "the-wedding-date5302",
            "content": "<p><span style=\"font-size:18px\">Given a date in&nbsp;<strong>dd mm yyyy&nbsp;</strong>format. Find the nearest date greater than the given date&nbsp;such that all the digits in both the dates should be equal provided order of digits may be change.<br />\r\n<strong>Note: </strong>Assume that every month of the year has 30 days.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: \r\n</strong>12 02 2014\r\n<strong>Output:\r\n</strong>21 02 2014\r\n<strong>Explanation:\r\n</strong>If we change the positions of \r\ndate 12 to 21 then it will be \r\na valid date.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>09 05 1998\r\n<strong>Output:</strong>\r\n05 09 1998\r\n<strong>Exaplanation:\r\n</strong>Switch day with the month and we \r\nwill get the nearest valid date.\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function <strong>closest_date()&nbsp;</strong>which takes date as the first parameter, month as the second parameter, year as the third parameter(All in string form) and returns the nearest date in&nbsp;<strong>dd mm yyyy&nbsp;</strong>format in string form. If not possible return &quot;-1&quot;(Without quotes).<br />\r\n<br />\r\n<strong>Expected Time Complexity:&nbsp;</strong>O(n)<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(n)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; date &le; 30<br />\r\n1 &le; month &le; 12<br />\r\n1000 &le; year &le; 9999</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a date in `dd mm yyyy` format, find the nearest date greater than the given date such that all the digits in both dates are the same, although the order of digits may change. Assume every month has 30 days.",
                "constraints": [
                    "1 <= date <= 30",
                    "1 <= month <= 12",
                    "1000 <= year <= 9999"
                ],
                "testcases": [
                    {
                        "input": "12 02 2014",
                        "output": "21 02 2014",
                        "explanation": "By rearranging the digits of the day from 12 to 21, we obtain a valid date that is greater than the input date."
                    },
                    {
                        "input": "09 05 1998",
                        "output": "05 09 1998",
                        "explanation": "Swapping the day and month (09 and 05) results in a valid date greater than the input date."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Check for corner cases.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Date-Time",
                "slug": "date-time"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n\tprivate:\r\n\t\tvector<int>freq(int dd, int mm, int yr)\r\n\t\t{\r\n\t\t    // Calculating frequency of digits of date, month and year\r\n\t\t\tvector<int> hash(10,0);\r\n\t\t\thash[dd%10]++;\r\n\t\t\thash[dd/10]++;\r\n\t\t\thash[mm%10]++;\r\n\t\t\thash[mm/10]++;\r\n\t\t\twhile(yr){\r\n\t\t\t\thash[yr%10]++;\r\n\t\t\t\tyr/=10;\r\n\t\t\t}\r\n\t\t\treturn hash;\r\n\t\t}\r\n\tprivate:\r\n\t// Converting number into string\r\n\t\tstring tostring(int num)\r\n\t\t{\r\n\t\t\tstring res  = \"\";\r\n\t\t\twhile(num)\r\n\t\t\t{\r\n\t\t\t\tres = res + char(num%10 + '0');\r\n\t\t\t\tnum = num / 10;\r\n\t\t\t}\r\n\t\t\treverse(res.begin(), res.end());\r\n\t\t\treturn res;\r\n\t\t}\r\n\tpublic:\r\n\t\tstring closest_date(string date, string month, string year)\r\n\t\t{\r\n\t\t    // converting into integer \r\n\t\t\tint dd = ((date[0] - '0')*10 + date[1]-'0');\r\n\t\t\tint mm = ((month[0] - '0')*10 + month[1]-'0');\r\n\t\t\tint yr = ((year[0] - '0')*1000 + (year[1] - '0')*100 + (year[2] - '0')*10 + (year[3] - '0'));\r\n\t\t\tvector<int> hash = freq(dd, mm, yr);\r\n\t\t\t// cout<<dd<<\" \"<<mm<<' '<<yr<<\"\\n\";\r\n\t\t\twhile(yr <= 9999)\r\n\t\t\t{\r\n\t\t\t\tdd++;\r\n\t\t\t\t// if date becomes greater than 30 increase month and initialize date with 1.\r\n\t\t\t\tif(dd > 30){\r\n\t\t\t\t\tdd = 1;\r\n\t\t\t\t\tmm++;\r\n\t\t\t\t}\r\n\t\t\t\t// if month becomes greater than 12 increase year and initialize year with 1.\r\n\t\t\t\tif(mm > 12){\r\n\t\t\t\t\tmm  = 1;\r\n\t\t\t\t\tyr++;\r\n\t\t\t\t}\r\n\t\t\t\t// If year becomes greater than 9999 then not possible\r\n\t\t\t\tif(yr > 9999)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tbool f = true;\r\n\t\t\t\t// check frequencies of digits of cur date and the initial date is equal or not\r\n\t\t\t\tvector<int> cur_hash = freq(mm, dd, yr);\r\n\t\t\t\tfor(int i = 0; i <= 9; i++){\r\n\t\t\t\t\tif(hash[i] != cur_hash[i]){\r\n\t\t\t\t\t\tf = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(f)\r\n\t\t\t\t{\r\n\t\t\t\t    // If got the answer then convert into dd mm yyyy format.\r\n\t\t\t\t\tstring res = \"\";\r\n\t\t\t\t\tif(dd < 10)\r\n\t\t\t\t\t\tres = res + \"0\" + char((dd + '0'));\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tres = res + tostring(dd);\r\n\t\t\t\t\tres = res + \" \";\r\n\t\t\t\t\tif(mm < 10)\r\n\t\t\t\t\t\tres = res + \"0\" + char((mm + '0'));\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tres = res + tostring(mm);\r\n\t\t\t\t\tres = res + \" \";\r\n\t\t\t\t\tres = res + tostring(yr);\r\n\t\t\t\t\t// cout<<dd<<\" \"<<mm<<\" \"<<yr<<\"\\n\";\r\n\t\t\t\t\treturn res;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn \"-1\";\r\n\r\n\t\t}\r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}