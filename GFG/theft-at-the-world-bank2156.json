{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705898,
            "title": "Theft at World Bank",
            "titleSlug": "theft-at-the-world-bank2156",
            "content": "<p><span style=\"font-size: 18px;\">The worlds most successful thief Albert Spaggiari was planning for his next heist on the world bank. He decides to carry a sack with him, which can carry a maximum weight of <strong>c</strong> kgs. Inside the world bank there were <strong>n</strong> large blocks of gold. All the blocks have some profit value associated with them<em> i.e.</em> if he steals <strong>i<sup>th</sup></strong> block of weight <strong>w[i]</strong> then he will have <strong>p[i] </strong>profit. As blocks were heavy he decided to steal some part of them by cutting them&nbsp;with his cutter.<br />The thief does not like symmetry, hence, he wishes to not take blocks or parts of them whose weight is a perfect square. Now, you need to find out the maximum profit that he can earn given that he can only carry blocks of gold in his sack.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: The answer should be precise upto 3 decimal places.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\">n = 3, c = 10, w[] = {4, 5, 7}, p[] = {8, 5, 4)\n<strong>Output: </strong>\n7.857\n<strong>Explanation: </strong>As first blocks weight is 4 which is a perfect square, he will not use this block. Now with the remaining blocks the most optimal way is to use 2<sup>nd</sup> block completely and cut 5kg piece from the 3<sup>rd</sup> block to get a total profit of 5 + 2.857 = 7.857</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n * Log(n))<br /><strong>Expected Space Complexity :&nbsp;</strong>O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>3</sup><br />1 &le; c &le; 10<sup>18</sup><br />1 &le; w<sub>i&nbsp;</sub>&le;&nbsp;10<sup>9</sup><br />1 &le; p<sub>i&nbsp;</sub>&le;&nbsp;10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Albert Spaggiari is planning a heist on the world bank. He has a sack that can hold a maximum weight of 'c' kgs. Inside the bank, there are 'n' gold blocks. Each block 'i' has a weight 'w[i]' and a profit value 'p[i]'. Albert can cut the gold blocks. However, he dislikes symmetry and refuses to take blocks or parts of blocks with weights that are perfect squares.  Determine the maximum profit Albert can obtain, considering his sack's capacity and the restriction on perfect square weights. The answer should be precise up to 3 decimal places.",
                "constraints": [
                    "1 <= n <= 10^3",
                    "1 <= c <= 10^18",
                    "1 <= w[i] <= 10^9",
                    "1 <= p[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 3, c = 10, w[] = {4, 5, 7}, p[] = {8, 5, 4)",
                        "output": "7.857",
                        "explanation": "Since the first block's weight (4) is a perfect square, it cannot be used. The optimal strategy with the remaining blocks is to take the entire second block (weight 5, profit 5) and a portion of the third block.  To maximize profit within the capacity, Albert should take 5 kg from the third block (7 kg total), yielding a profit of (5/7) * 4 = 2.857.  Therefore, the total profit is 5 + 2.857 = 7.857."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">After removing all the blocks whose weight is a perfect sqaure, the problem reduces to fractional knapsack problem.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n    //Function to calculate maximum profit.\n    long double maximumProfit(int N, long long C, vector<long long> w, vector<long long> p){\n        vector<pair<long double, long long>> v(N);\n\n        //calculating the profit-weight ratio for each item.\n        for(int i = 0; i < N; i++){\n            long long temp = sqrt(w[i]);\n\n            //if weight is a perfect square, profit is set to 0.\n            if(temp * temp == w[i]){\n                p[i] = 0;\n            }\n            v[i].first = (long double )p[i] / (long double )w[i];\n            v[i].second = w[i];\n        }\n\n        //sorting the items based on profit-weight ratio.\n        sort(v.begin(), v.end());\n        reverse(v.begin(), v.end());\n        long double ans = 0;\n        int itr = 0;\n\n        //iterating over items and calculating maximum profit.\n        while(itr < N && C){\n            long long t = min(C, v[itr].second);\n            ans += (long double )t * v[itr].first;\n            C -= t;\n            itr++;\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\r\n\r\nclass Solution {\r\n    public double maximumProfit(int N, long C, long w[], long p[]) {\r\n        Pair v[] = new Pair[N]; // Create an array of Pairs to store weight and profit\r\n        for (int i = 0; i < N; i++) {\r\n            v[i] = new Pair(); // Initialize each Pair object\r\n        }\r\n        \r\n        // Calculate the profit-to-weight ratio and store in the Pair objects\r\n        // If weight is a perfect square, set profit to 0\r\n        for (int i = 0; i < N; i++) {\r\n            long temp = (long) Math.sqrt(w[i]);\r\n            if (temp * temp == w[i]) {\r\n                p[i] = 0;\r\n            }\r\n            v[i].first = (double) p[i] / (double) w[i]; // Profit-to-weight ratio\r\n            v[i].second = w[i]; // Weight\r\n        }\r\n        \r\n        Arrays.sort(v); // Sort the array based on the profit-to-weight ratio\r\n        \r\n        double ans = 0; // Initialize the total profit\r\n        int itr = N - 1; // Start from the last element (highest profit-to-weight ratio)\r\n        while (itr >= 0 && C > 0) { // Keep going until either all items are included or no more capacity\r\n            long t = Math.min(C, v[itr].second); // Take the minimum weight between remaining capacity and the weight of current item\r\n            ans += (double) t * v[itr].first; // Add the product of weight and profit-to-weight ratio to the total profit\r\n            C -= t; // Reduce the remaining capacity by the weight of current item\r\n            itr--; // Move to the next item\r\n        }\r\n        \r\n        return ans; // Return the maximum profit\r\n    }\r\n    \r\n    \r\n    static class Pair implements Comparable<Pair> {\r\n        double first;\r\n        long second;\r\n        \r\n        public int compareTo(Pair o) {\r\n            if (this.first > o.first)\r\n                return 1;\r\n            else if (this.first < o.first)\r\n                return -1;\r\n            else {\r\n                if (this.second > o.second)\r\n                    return 1;\r\n                else if (this.second < o.second)\r\n                    return -1;\r\n                else\r\n                    return 0;\r\n            }\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\n\nclass Solution:\n\n    #Function to find the maximum profit.\n    def maximumProfit(self, N, C, w, p):\n        l = []\n        # zers=[]\n\n        #iterating over all the items.\n        for i in range(N):\n\n            #if weight of item is not zero, add it to the list.\n            if w[i] != 0:\n                l.append((p[i], w[i]))\n\n        #sorting the items in descending order of their profit to weight ratio.\n        l.sort(key=lambda x: x[0] / x[1], reverse=True)\n        prof = 0\n\n        #iterating over the items.\n        for i in l:\n\n            #checking if the weight of item is perfect square.\n            if self.isperf(i[1]):\n                continue\n            else:\n                #if weight of item is less than or equal to the remaining capacity\n                #of the knapsack, add its profit to the total profit and deduct the\n                #weight of item from the remaining capacity of the knapsack.\n                if C - i[1] >= 0:\n                    C -= i[1]\n                    prof += i[0]\n                    if C == 0:\n                        return prof\n\n                #if weight of item is greater than the remaining capacity\n                #of the knapsack, calculate the fraction of the item that can\n                #be taken, add its fraction of profit to the total profit and return.\n                else:\n                    fractn = C / i[1]\n                    prof += i[0] * fractn\n                    return prof\n\n        return 9.9\n\n    #Function to check if the number is perfect square or not.\n    def isperf(self, num):\n\n        #checking if the square root of number is an integer.\n        if num**(0.5) == int(num**(0.5)):\n            return True\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number} C\n * @param {number[]} w\n * @param {number[]} p\n * @returns {number}\n*/\n\nclass Solution {\n    // Function to find the maximum profit.\n    maximumProfit(N, C, w, p) {\n        let items = [];\n        for (let i = 0; i < N; i++) {\n            if (w[i] !== 0) {\n                items.push({ profit: p[i], weight: w[i] });\n            }\n        }\n        items.sort((a, b) => (b.profit / b.weight) - (a.profit / a.weight));\n        let profit = 0;\n        for (let item of items) {\n            if (this.isPerfectSquare(item.weight)) {\n                continue;\n            } else {\n                if (C - item.weight >= 0) {\n                    C -= item.weight;\n                    profit += item.profit;\n                    if (C === 0) {\n                        return parseFloat(profit.toFixed(3));\n                    }\n                } else {\n                    let fraction = C / item.weight;\n                    profit += item.profit * fraction;\n                    return parseFloat(profit.toFixed(3));\n                }\n            }\n        }\n        return parseFloat(profit.toFixed(3));\n    }\n    \n    // Function to check if the number is a perfect square.\n    isPerfectSquare(num) {\n        let sqrt = Math.sqrt(num);\n        return sqrt === Math.floor(sqrt);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}