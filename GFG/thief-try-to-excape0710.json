{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705020,
            "title": "Thief trying to escape",
            "titleSlug": "thief-try-to-excape0710",
            "content": "<p><span style=\"font-size:18px\">A thief trying to escape from a jail has to cross <strong>N</strong>&nbsp;walls whose heights&nbsp;are given in&nbsp;<strong>arr[]</strong> each with varying heights. He climbs <strong>X</strong> feet every time. But, due to the slippery nature of those walls, every time he slips back by <strong>Y</strong>&nbsp;feet. &nbsp;Now the task is to calculate the total number of jumps required to cross all walls and escape from the jail.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> X = 10, Y = 1, N = 1\r\narr = {5}\r\n<strong>Output:</strong> 1\r\n<strong>Explaination:</strong> He jumps 10 feet and cross \r\nthe walls.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> X = 4, Y = 1, N = 5\r\narr = {6, 9, 11, 4, 5}\r\n<strong>Output:</strong> 12\r\n<strong>Explaination:</strong> He will have to jump 2, 3, 4, 1 \r\nand 2 times to cross all the walls.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>totalJumps()</strong> which takes X, Y, N, and arr as input parameters and returns the total number of jumps to cross all the walls.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le;&nbsp;N &le; 100<br />\r\nX &gt; Y<br />\r\n1 &le; arr[i], X, Y &le; 1000&nbsp;&nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A thief is trying to escape from jail by crossing N walls of varying heights. The heights of the walls are given in the array `arr[]`.  The thief climbs X feet every jump but slips back Y feet due to the slippery walls.  Determine the total number of jumps required to cross all the walls and escape.",
                "constraints": [
                    "1 <= N <= 100",
                    "X > Y",
                    "1 <= arr[i], X, Y <= 1000"
                ],
                "testcases": [
                    {
                        "input": "X = 10, Y = 1, N = 1\narr = {5}",
                        "output": "1",
                        "explanation": "The thief jumps 10 feet, which is enough to cross the wall of 5 feet in a single jump."
                    },
                    {
                        "input": "X = 4, Y = 1, N = 5\narr = {6, 9, 11, 4, 5}",
                        "output": "12",
                        "explanation": "The thief needs 2 jumps for the first wall (6 feet), 3 for the second (9 feet), 4 for the third (11 feet), 1 for the fourth (4 feet), and 2 for the fifth (5 feet).  2 + 3 + 4 + 1 + 2 = 12"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Calculate number of jumps required for each wall.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "makemytrip",
            "cisco"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate the total number of jumps required\n    int totalJumps(int X, int Y, int N, int arr[]){\n        int jumps = 0, k, temp;\n        \n        // Iterating over the array of distances\n        for(int i = 0;i < N;i++){\n            \n            // If the current distance is less than or equal to X,\n            // increment the jumps count\n    \t\tif(arr[i] <= X)\n    \t\t    jumps++;\n    \t\t\n    \t\t// If the current distance is greater than X, additional\n    \t\t// jumps are required to cover the distance\n    \t\telse{\n    \t\t\tjumps++;\n    \t\t\tk = arr[i]-X;\n    \t\t\t\n    \t\t\t// Calculating how many additional jumps are required\n    \t\t\ttemp = k/(X-Y);\n    \t\t\t\n    \t\t\t// If there are remaining distance after considering the\n    \t\t\t// additional jumps, increment the jumps count\n    \t\t\tif(temp*(X-Y) < k)\n    \t\t\t    jumps++;\n    \t\t    \n    \t\t    // Adding the additional jumps to the jumps count\n\t\t\t    jumps += temp;\n    \t\t}\n    \t}\n    \t\n    \t// Returning the total number of jumps required\n    \treturn jumps;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int totalJumps(int X, int Y, int N, int[] arr)\n    {\n        int jumps = 0, k, temp;\n        \n        // Iterating over the array of distances\n        for(int i = 0;i < N;i++){\n            \n            // If the current distance is less than or equal to X,\n            // increment the jumps count\n            if(arr[i] <= X)\n                jumps++;\n            \n            // If the current distance is greater than X, additional\n            // jumps are required to cover the distance\n            else{\n                jumps++;\n                k = arr[i]-X;\n                \n                // Calculating how many additional jumps are required\n                temp = k/(X-Y);\n                \n                // If there are remaining distance after considering the\n                // additional jumps, increment the jumps count\n                if(temp*(X-Y) < k)\n                    jumps++;\n                \n                // Adding the additional jumps to the jumps count\n                jumps += temp;\n            }\n        }\n        \n        // Returning the total number of jumps required\n        return jumps;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}