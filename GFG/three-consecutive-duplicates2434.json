{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703188,
            "title": "Three consecutive duplicates",
            "titleSlug": "three-consecutive-duplicates2434",
            "content": "<p><span style=\"font-size:18px\">Given a string S, in an operation you can remove 3 consecutive characters which are duplicates and concatenate the rest string. You can perform this operation any number of times. Find the reduced string.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note:</strong> Return &#39;-1&#39; if the string is empty after removing the&nbsp;duplicates.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;</span><span style=\"font-size:20px\">aabbbaccddddc</span><span style=\"font-size:18px\">&quot;\n<strong>Output:</strong> ccdc\n<strong>Explanation:</strong></span> <span style=\"font-size:18px\">First remove 3 consecutive\nb&#39;s and d&#39;s and then a&#39;s</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;</span><span style=\"font-size:20px\">aabbaccddc</span><span style=\"font-size:18px\">&quot;\n<strong>Output:</strong> </span><span style=\"font-size:20px\">aabbaccddc</span><span style=\"font-size:18px\">\n<strong>Explanation:</strong></span> <span style=\"font-size:18px\">No three consecutive \nduplicates exists</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>remove3ConsecutiveDuplicates()&nbsp;</strong>which takes a string S as input and returns the string. </span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(|S|).</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= |S| &lt;= 10<sup>5</sup><br />\nS contains lower case English alphabets</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S, you can perform operations to reduce it. In each operation, you can remove 3 consecutive identical characters and concatenate the remaining parts of the string.  You can repeat this operation as many times as needed.  Determine the final reduced string after applying all possible operations.",
                "constraints": [
                    "1 <= |S| <= 10^5",
                    "S contains lowercase English alphabets"
                ],
                "testcases": [
                    {
                        "input": "aabbbaccddddc",
                        "output": "ccdc",
                        "explanation": "First, remove the 'bbb' resulting in 'aaaccddddc'. Then, remove the 'ddd' which leads to 'aaaccdc'. Finally, remove the 'aaa' to get 'ccdc'."
                    },
                    {
                        "input": "aabbaccddc",
                        "output": "aabbaccddc",
                        "explanation": "There are no occurrences of 3 consecutive identical characters in the string, therefore no operations can be performed.  The string remains unchanged."
                    },
                    {
                        "input": "aaabbbccc",
                        "output": "-1",
                        "explanation": "Removing 'aaa' gives 'bbbccc'. Removing 'bbb' gives 'ccc'. Removing 'ccc' gives an empty string. Therefore the output is -1."
                    },
                    {
                        "input": "aaaa",
                        "output": "a",
                        "explanation": "Removing 'aaa' gives 'a'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. Check last three added characters in the answer string</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n    //Function to remove 3 consecutive duplicates from the given string.\n    string remove3ConsecutiveDuplicates(string S)\n    {\n        string ans = \"\";\n        for (int i = 0; i < S.size(); ++i) \n        {\n            ans += S[i];\n \n            //Checking if the last three characters are duplicates.\n            if (ans.size() > 2) \n            {\n                int sz = ans.size();\n                if (ans[sz - 1] == ans[sz - 2] && \n                    ans[sz - 2] == ans[sz - 3]) {\n                    ans.pop_back();\n                    ans.pop_back();\n                    ans.pop_back();\n                }\n            }\n        }\n\n        //If no characters are left in the string, return -1.\n        if(ans.size() == 0)\n            return \"-1\";\n\n        //Return the modified string.\n        return ans;\n        \n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}