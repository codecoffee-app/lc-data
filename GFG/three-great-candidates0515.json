{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703314,
            "title": "Three Great Candidates",
            "titleSlug": "three-great-candidates0515",
            "content": "<p><span >The hiring team aims to find 3 candidates who are great collectively. Each candidate has his or her ability expressed as an integer. 3 candidates are great collectively if the product of their abilities is maximum. Given the abilities of some candidates in an array, <strong>arr[]</strong>, return the maximum collective ability from the pool of candidates.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [10, 3, 5, 6, 20]\n<strong>Output:</strong> 1200\n<strong>Explanation: </strong>Multiplication of 10, 6, and 20 is 1200.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [-10, -3, -5, -6, -20]\n<strong>Output:</strong> -90\n<strong>Explanation: </strong>Multiplication of -3, -5 and -6 is -90.</span></pre>\n<p><span ><strong>Constraints:</strong><br />3 &le; arr.size &le; 10<sup>5</sup><br />-10<sup>3</sup>&nbsp;&le; arr[i] &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of integers representing the abilities of candidates, find the maximum possible product of three candidates' abilities. The hiring team wants to select three candidates whose collective ability (product of their individual abilities) is maximized. Return this maximum product.",
                "constraints": [
                    "3 \u2264 arr.size \u2264 10^5",
                    "-10^3 \u2264 arr[i] \u2264 10^3"
                ],
                "testcases": [
                    {
                        "input": "[10, 3, 5, 6, 20]",
                        "output": "1200",
                        "explanation": "The maximum product is achieved by multiplying 10, 6, and 20, resulting in 1200."
                    },
                    {
                        "input": "[-10, -3, -5, -6, -20]",
                        "output": "-90",
                        "explanation": "The maximum product is achieved by multiplying -3, -5, and -6, resulting in -90."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Scan the array to find the three largest and two smallest elements, then return the maximum product of either the three largest elements or the two smallest elements with the largest element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "snapdeal"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    int maxProduct(vector<int> arr) {\n        int n = arr.size();\n        // Initialize Maximum, second maximum\n        // and third maximum element\n        int maxA = INT_MIN, maxB = INT_MIN, maxC = INT_MIN;\n\n        // Initialize minimum and second minimum element\n        int minA = INT_MAX, minB = INT_MAX;\n\n        for (int i = 0; i < n; i++) {\n            // Update Maximum, second maximum and third maximum element\n            if (arr[i] > maxA) {\n                maxC = maxB;\n                maxB = maxA;\n                maxA = arr[i];\n            }\n\n            // Update second maximum and third maximum element\n            else if (arr[i] > maxB) {\n                maxC = maxB;\n                maxB = arr[i];\n            }\n\n            // Update third maximum element\n            else if (arr[i] > maxC)\n                maxC = arr[i];\n\n            // Update Minimum and second minimum element\n            if (arr[i] < minA) {\n                minB = minA;\n                minA = arr[i];\n            }\n\n            // Update second minimum element\n            else if (arr[i] < minB)\n                minB = arr[i];\n        }\n        return max(minA * minB * maxA, maxA * maxB * maxC);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    int maxProduct(int[] arr) {\n        int n = arr.length;\n        // Initialize Maximum, second maximum, and third maximum element\n        int maxA = Integer.MIN_VALUE, maxB = Integer.MIN_VALUE,\n            maxC = Integer.MIN_VALUE;\n\n        // Initialize minimum and second minimum element\n        int minA = Integer.MAX_VALUE, minB = Integer.MAX_VALUE;\n\n        for (int i = 0; i < n; i++) {\n            // Update Maximum, second maximum, and third maximum element\n            if (arr[i] > maxA) {\n                maxC = maxB;\n                maxB = maxA;\n                maxA = arr[i];\n            } else if (arr[i] > maxB) {\n                maxC = maxB;\n                maxB = arr[i];\n            } else if (arr[i] > maxC) {\n                maxC = arr[i];\n            }\n\n            // Update Minimum and second minimum element\n            if (arr[i] < minA) {\n                minB = minA;\n                minA = arr[i];\n            } else if (arr[i] < minB) {\n                minB = arr[i];\n            }\n        }\n        return Math.max(minA * minB * maxA, maxA * maxB * maxC);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxProduct(self, arr):\n        n = len(arr)\n        # Initialize Maximum, second maximum\n        # and third maximum element\n        maxA = float('-inf')\n        maxB = float('-inf')\n        maxC = float('-inf')\n\n        # Initialize minimum and second minimum element\n        minA = float('inf')\n        minB = float('inf')\n\n        for i in range(n):\n            # Update Maximum, second maximum and third maximum element\n            if arr[i] > maxA:\n                maxC = maxB\n                maxB = maxA\n                maxA = arr[i]\n            elif arr[i] > maxB:\n                maxC = maxB\n                maxB = arr[i]\n            elif arr[i] > maxC:\n                maxC = arr[i]\n\n            # Update Minimum and second minimum element\n            if arr[i] < minA:\n                minB = minA\n                minA = arr[i]\n            elif arr[i] < minB:\n                minB = arr[i]\n\n        return max(minA * minB * maxA, maxA * maxB * maxC)\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxProduct(arr) {\n        let n = arr.length;\n        // Initialize Maximum, second maximum and third maximum element\n        let maxA = Number.MIN_SAFE_INTEGER;\n        let maxB = Number.MIN_SAFE_INTEGER;\n        let maxC = Number.MIN_SAFE_INTEGER;\n\n        // Initialize minimum and second minimum element\n        let minA = Number.MAX_SAFE_INTEGER;\n        let minB = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < n; i++) {\n            // Update Maximum, second maximum and third maximum element\n            if (arr[i] > maxA) {\n                maxC = maxB;\n                maxB = maxA;\n                maxA = arr[i];\n            }\n\n            // Update second maximum and third maximum element\n            else if (arr[i] > maxB) {\n                maxC = maxB;\n                maxB = arr[i];\n            }\n\n            // Update third maximum element\n            else if (arr[i] > maxC)\n                maxC = arr[i];\n\n            // Update Minimum and second minimum element\n            if (arr[i] < minA) {\n                minB = minA;\n                minA = arr[i];\n            }\n\n            // Update second minimum element\n            else if (arr[i] < minB)\n                minB = arr[i];\n        }\n        return Math.max(minA * minB * maxA, maxA * maxB * maxC);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}