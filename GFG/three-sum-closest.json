{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702068,
            "title": "Closest Three Sum",
            "titleSlug": "three-sum-closest",
            "content": "<p><span style=\"font-size: 18px;\">Given an array, <strong>a</strong><strong>rr</strong> of integers, and another number <strong>target</strong>, find three integers in the array such that their sum is closest to the target. Return the sum of the three integers.</span></p>\n<p><span style=\"font-size: 18px;\">Note: If there are multiple solutions, return the <strong>maximum</strong> one.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-7, 9, 8, 3, 1, 1], target = 2\n<strong>Output: </strong>2<strong>\nExplanation: </strong>There is only one triplet present in the array where elements are -7,8,1 whose sum is 2.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 2, 7, 5], target = 13<br /><strong>Output: </strong>14<strong>\nExplanation: </strong>There is one triplet with sum 12 and other with sum 14 in the array. Triplet elements are 5, 2, 5 and 2, 7, 5 respectively. Since abs(13-12) ==abs(13-14) maximum triplet sum will be preferred i.e 14.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />3 &le; arr.size() &le; 10<sup>3</sup><br />-10<sup>5</sup> &le; arr[i] &le; 10<sup>5</sup><br />1 &le; target&nbsp;&le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr` and a target number `target`, find three integers in the array whose sum is closest to the target. Return the sum of the three integers. If there are multiple solutions with the same minimum difference to the target, return the maximum sum.",
                "constraints": [
                    "3 <= arr.size() <= 10^3",
                    "-10^5 <= arr[i] <= 10^5",
                    "1 <= target <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [-7, 9, 8, 3, 1, 1], target = 2",
                        "output": "2",
                        "explanation": "The triplet -7, 8, and 1 sums to 2, which is closest to the target of 2. Therefore, the output is 2."
                    },
                    {
                        "input": "arr[] = [5, 2, 7, 5], target = 13",
                        "output": "14",
                        "explanation": "The triplet 5, 2, and 5 sums to 12, and the triplet 2, 7, and 5 sums to 14.  Both 12 and 14 have an absolute difference of 1 from the target 13. Since abs(13-12) == abs(13-14) the maximum of the sums 12 and 14 which is 14 is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Sort&nbsp;the given array to&nbsp;improve the efficiency of the algorithm. </span></p>",
            "<p><span style=\"font-size: 18px;\">Fix one element in the sorted array, and use the two pointer technique to find the remaining integers.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "google",
            "apple"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Complete backend function template for C++\n\n    int threeSumClosest(vector<int> arr, int target) {\n        int flag = 0, n = arr.size();\n        int res;\n\n        // Sort the array\n        sort(arr.begin(), arr.end());\n\n        // Fix the smallest number among the three integers\n        for (int i = 0; i < n - 2; ++i) {\n\n            // Two pointers initially pointing at the last\n            //  and the element next to the fixed element\n            int j = i + 1, k = n - 1;\n\n            // While there could be more pairs to check\n            while (j < k) {\n\n                // Calculate the sum of the current triplet\n                int sum = arr[i] + arr[j] + arr[k];\n\n                if (!flag) {\n                    res = sum;\n                    flag = 1;\n                }\n\n                // If sum is closer than current closest sum\n                if (abs(sum - target) < abs(res - target))\n                    res = sum;\n\n                else if (abs(sum - target) == abs(res - target)) {\n                    if (sum > res)\n                        res = sum;\n                }\n\n                // If sum is greater than target increment first pointer\n                if (target > sum)\n                    j++;\n                // Else decrement second pointer\n                else\n                    k--;\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int threeSumClosest(int[] array, int target) {\n        int flag = 0; // flag variable to check if result is found\n        int n = array.length;\n        int result = Integer.MAX_VALUE; // initialize result variable\n        Arrays.sort(array);             // sort the array\n\n        for (int i = 0; i < n - 2; ++i) // iterate through the array\n        {\n            int j = i + 1, k = n - 1; // initialize two pointers\n\n            while (j < k) // iterate until the pointers meet\n            {\n                int sum =\n                    array[i] + array[j] + array[k]; // calculate sum of three elements\n\n                if (flag != 1) {  // check if no result is found yet\n                    result = sum; // initialize result with the first sum\n                    flag = 1;     // set flag to 1 to indicate result is found\n                }\n\n                if (Math.abs(sum - target) <\n                    Math.abs(result -\n                             target)) // compare the absolute difference between sum and\n                                      // target with current result\n                    result = sum; // update result if the absolute difference is smaller\n\n                else if (Math.abs(sum - target) ==\n                         Math.abs(result -\n                                  target)) { // if the absolute differences are equal\n                    if (sum > result)        // choose the sum with a greater value\n                        result = sum;\n                }\n\n                if (target > sum) // move the left pointer if target is greater than sum\n                    j++;\n                else\n                    k--; // move the right pointer if target is smaller than sum\n            }\n        }\n        return result; // return the result\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    #Back-end complete function Template for Python 3\n\n    def threeSumClosest(self, arr, target):\n        n = len(arr)\n        arr = sorted(arr)\n\n        minDiff = 1000000007  # stores the min difference between the triplet sum and target\n        res = -1000000007  # final result to be returned\n\n        for i in range(n):\n            sp = i + 1\n            ep = n - 1\n\n            while sp < ep:\n                sum = arr[i] + arr[sp] + arr[ep]\n                curDiff = abs(target - sum)\n\n                # in this case, we need to report the max sum\n                if curDiff == minDiff:\n                    res = max(res, sum)\n\n                # making necessary updates if we encounter a lesser difference\n                elif curDiff < minDiff:\n                    minDiff = curDiff\n                    res = sum\n\n                # absolute difference cannot be less than 0\n                if sum == target:\n                    break\n\n                # decreasing the sum\n                elif sum > target:\n                    ep -= 1\n\n                # increasing the sum\n                else:\n                    sp += 1\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    threeSumClosest(arr, target) {\n        let flag = 0;\n        let n = arr.length;\n        let res;\n\n        // Sort the array\n        arr.sort((a, b) => a - b);\n\n        // Fix the smallest number among the three integers\n        for (let i = 0; i < n - 2; ++i) {\n\n            // Two pointers initially pointing at the last\n            //  and the element next to the fixed element\n            let j = i + 1, k = n - 1;\n\n            // While there could be more pairs to check\n            while (j < k) {\n\n                // Calculate the sum of the current triplet\n                let sum = arr[i] + arr[j] + arr[k];\n\n                if (!flag) {\n                    res = sum;\n                    flag = 1;\n                }\n\n                // If sum is closer than current closest sum\n                if (Math.abs(sum - target) < Math.abs(res - target))\n                    res = sum;\n                else if (Math.abs(sum - target) == Math.abs(res - target)) {\n                    if (sum > res) res = sum;\n                }\n\n                // If sum is greater than target increment first pointer\n                if (target > sum) j++;\n                // Else decrement second pointer\n                else\n                    k--;\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}