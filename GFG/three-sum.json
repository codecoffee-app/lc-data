{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 871687,
            "title": "Three Sum",
            "titleSlug": "three-sum",
            "content": "<p><span >Given an integer array <strong>arr</strong>, return all the <strong>unique </strong>triplets [arr[i], arr[j], arr[k]] such that<strong> i != j, i != k, and j != k, </strong>and <strong>arr[i] + arr[j] + arr[k] == 0.</strong></span></p>\n<p><span >Note: The triplets must be returned in <strong>sorted </strong>order, the solution vector should also be <strong>sorted</strong>, and the answer must not contain any <strong>duplicate </strong>triplets.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [-1,0,1,2,-1,-4]\n<strong>Output: </strong>[[-1,-1,2],[-1,0,1]]<strong>\nExplanation: </strong>arr[0] + arr[1] + arr[2] = (-1) + 0 + 1 = 0.\narr[1] + arr[2] + arr[4] = 0 + 1 + (-1) = 0.\narr[0] + arr[3] + arr[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [0,0,0]\n<strong>Output: </strong>[[0,0,0]]<strong>\nExplanation: </strong>The only possible triplet sums up to 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(n<sup>2</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">3 &lt;= arr.length &lt;= 3000<br /></span><span style=\"font-size: 18px;\">-10<sup>5</sup> &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr`, find all unique triplets `[arr[i], arr[j], arr[k]]` such that `i != j`, `i != k`, `j != k`, and `arr[i] + arr[j] + arr[k] == 0`. The solution should not contain duplicate triplets, and the triplets should be returned in sorted order, as well as the solution vector.",
                "constraints": [
                    "3 <= arr.length <= 3000",
                    "-10^5 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[-1,0,1,2,-1,-4]",
                        "output": "[[-1,-1,2],[-1,0,1]]",
                        "explanation": "The triplets [-1, -1, 2] and [-1, 0, 1] sum to 0 and are unique.  Other combinations exist, but lead to duplicates when the output is sorted or include the same index multiple times, so they are not included in the output.  For example, arr[0] + arr[1] + arr[2] = (-1) + 0 + 1 = 0 and arr[1] + arr[2] + arr[4] = 0 + 1 + (-1) = 0 and arr[0] + arr[3] + arr[4] = (-1) + 2 + (-1) = 0. But only  [[-1,-1,2],[-1,0,1]] are valid triplets."
                    },
                    {
                        "input": "[0,0,0]",
                        "output": "[[0,0,0]]",
                        "explanation": "The only possible triplet sums up to 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to fix one of the numbers, then the problem seems like a two-sum problem.</p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<vector<int>> triplets(vector<int>& arr) {\n        int n = arr.size();\n        sort(arr.begin(), arr.end());\n        vector<vector<int>> result;\n        for (int i = 0; i < n - 1; i++) {\n            int left = i + 1, right = n - 1;\n            while (left < right) {\n                if (arr[i] + arr[left] + arr[right] < 0) {\n                    left++;\n                } else if (arr[i] + arr[left] + arr[right] > 0) {\n                    right--;\n                } else {\n                    result.push_back({arr[i], arr[left], arr[right]});\n                    int tempLeft = left, tempRight = right;\n                    while (left < right && arr[left] == arr[tempLeft])\n                        left++;\n                    while (left < right && arr[right] == arr[tempRight])\n                        right--;\n                }\n            }\n            while (i + 1 < n && arr[i] == arr[i + 1])\n                i++;\n        }\n\n        for (int i = 0; i < result.size(); i++)\n            sort(result[i].begin(), result[i].end());\n        sort(result.begin(), result.end());\n        return result;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static ArrayList<ArrayList<Integer>> triplets(int[] arr) {\n        ArrayList<ArrayList<Integer>> result = new ArrayList<>();\n        int n = arr.length;\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            if (i != 0 && arr[i] == arr[i - 1]) {\n                continue;\n            }\n\n            int left = i + 1;\n            int right = n - 1;\n            while (left < right) {\n                int sum = arr[i] + arr[left] + arr[right];\n                if (sum < 0) {\n                    left++;\n                } else if (sum > 0) {\n                    right--;\n                } else {\n                    ArrayList<Integer> triplet = new ArrayList<>();\n                    triplet.add(arr[i]);\n                    triplet.add(arr[left]);\n                    triplet.add(arr[right]);\n                    result.add(triplet);\n                    left++;\n                    right--;\n                    while (left < right && arr[left] == arr[left - 1]) {\n                        left++;\n                    }\n                    while (left < right && arr[right] == arr[right + 1]) {\n                        right--;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def triplets(self, arr):\n        result = []\n        n = len(arr)\n        arr.sort()\n        for i in range(n):\n            if i != 0 and arr[i] == arr[i - 1]:\n                continue\n\n            # Moving the two pointers\n            left = i + 1\n            right = n - 1\n            while left < right:\n                sum = arr[i] + arr[left] + arr[right]\n                if sum < 0:\n                    left += 1\n                elif sum > 0:\n                    right -= 1\n                else:\n                    triplet = [arr[i], arr[left], arr[right]]\n                    result.append(triplet)\n                    left += 1\n                    right -= 1\n                    # Skip duplicates\n                    while left < right and arr[left] == arr[left - 1]:\n                        left += 1\n                    while left < right and arr[right] == arr[right + 1]:\n                        right -= 1\n\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number[]} arr\n     * @returns {number[][]}\n     */\n    triplets(arr) {\n        let result = [];\n        let n = arr.length;\n        arr.sort((a, b) => a - b);\n        for (let i = 0; i < n; i++) {\n            if (i != 0 && arr[i] == arr[i - 1]) {\n                continue;\n            }\n\n            let left = i + 1;\n            let right = n - 1;\n            while (left < right) {\n                let sum = arr[i] + arr[left] + arr[right];\n                if (sum < 0) {\n                    left += 1;\n                } else if (sum > 0) {\n                    right -= 1;\n                } else {\n                    let triplet = [ arr[i], arr[left], arr[right] ];\n                    result.push(triplet);\n                    left += 1;\n                    right -= 1;\n                    while (left < right && arr[left] == arr[left - 1]) {\n                        left += 1;\n                    }\n                    while (left < right && arr[right] == arr[right + 1]) {\n                        right -= 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}