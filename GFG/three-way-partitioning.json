{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700455,
            "title": "Three way partitioning",
            "titleSlug": "three-way-partitioning",
            "content": "<p><span style=\"font-size: 18px;\">Given an <strong>array</strong> and a range <strong>a</strong>, <strong>b</strong>. The task is to partition the array around the range such that the array is divided into three parts.<br />1) All elements smaller than <strong>a</strong> come first.<br />2) All elements in range <strong>a</strong> to <strong>b</strong> come next.<br />3) All elements greater than <strong>b</strong> appear in the end.<br />The individual elements of three sets can appear in any order. You are required to return the modified array.<br /><br /><strong>Note</strong>: The generated output is true if you modify the given array successfully. Otherwise false.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Geeky Challenge: </span></strong><span style=\"font-size: 18px;\">Solve this problem in O(n) time complexity.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [1, 2, 3, 3, 4], a = 1, b = 2\n<strong>Output:</strong> true\n<strong>Explanation</strong>: One possible arrangement is: {1, 2, 3, 3, 4}. If you return a valid arrangement, output will be true.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [1, 4, 3, 6, 2, 1], a = 1, b = 3\n<strong>Output</strong>: true\n<strong>Explanation: </strong>One possible arrangement is: {1, 3, 2, 1, 4, 6}. If you return a valid arrangement, output will be true.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= arr.size()&lt;= 10</span><sup><span style=\"font-size: 15px;\">6</span></sup><br /><span style=\"font-size: 18px;\">1 &lt;= array[i], a, b &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array and a range [a, b], partition the array such that:\n1. Elements smaller than 'a' come first.\n2. Elements within the range [a, b] come next.\n3. Elements greater than 'b' appear last.\n\nThe individual order of elements within each of the three sections is not important. Modify the given array in-place to achieve this partitioning.",
                "constraints": [
                    "1 <= arr.size() <= 1000000",
                    "1 <= array[i], a, b <= 1000000000"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 3, 3, 4], a = 1, b = 2",
                        "output": "true",
                        "explanation": "A possible arrangement is: {1, 2, 3, 3, 4}. Any valid arrangement will return true."
                    },
                    {
                        "input": "arr[] = [1, 4, 3, 6, 2, 1], a = 1, b = 3",
                        "output": "true",
                        "explanation": "A possible arrangement is: {1, 3, 2, 1, 4, 6}. Any valid arrangement will return true."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to use the Two Pointer Approach.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "yahoo"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to partition the arr around the range such\n    // that arr is divided into three parts.\n    void threeWayPartition(vector<int>& arr, int a, int b) {\n        int n = arr.size();\n        // Using two pointers which help in finding the index with which\n        // the elements need to be swapped if they are not in correct position.\n        int start = 0, end = n - 1;\n\n        for (int i = 0; i <= end;) {\n            // If current element is smaller than lower range, we swap\n            // it with value on next available smallest position.\n            if (arr[i] < a)\n                swap(arr[i++], arr[start++]);\n\n            // If current element is greater than higher range, we swap\n            // it with value on next available greatest position.\n            else if (arr[i] > b)\n                swap(arr[i], arr[end--]);\n\n            // Else we just move ahead in the arr.\n            else\n                i++;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to partition the arr around the range such\n    // that arr is divided into three parts.\n    public void threeWayPartition(int arr[], int a, int b) {\n        int n = arr.length;\n        // Using two pointers which help in finding the index with which\n        // the elements need to be swapped if they are not in correct position.\n        int start = 0, end = n - 1;\n\n        for (int i = 0; i <= end;) {\n            // If current element is smaller than lower range, we swap\n            // it with value on next available smallest position.\n            if (arr[i] < a) {\n                int temp = arr[i];\n                arr[i] = arr[start];\n                arr[start] = temp;\n                i++;\n                start++;\n            }\n            // If current element is greater than higher range, we swap\n            // it with value on next available greatest position.\n            else if (arr[i] > b) {\n                int temp = arr[i];\n                arr[i] = arr[end];\n                arr[end] = temp;\n                end--;\n            }\n\n            // Else we just move ahead in the arr.\n            else\n                i++;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function template for Python\n\n\nclass Solution:\n    #Function to partition the arr around the range such\n    #that arr is divided into three parts.\n    def threeWayPartition(self, arr, a, b):\n        n = len(arr)\n\n        #Using two pointers which help in finding the index with which\n        #the elements need to be swapped if they are not in correct position.\n        s = i = 0\n        e = n - 1\n\n        while (i <= e):\n\n            #If current element is smaller than lower range, we swap\n            #it with value on next available smallest position.\n            if arr[i] < a:\n                arr[i], arr[s] = arr[s], arr[i]\n                i += 1\n                s += 1\n\n            #If current element is greater than higher range, we swap\n            #it with value on next available greatest position.\n            elif arr[i] > b:\n                arr[i], arr[e] = arr[e], arr[i]\n                e -= 1\n\n            #Else we just move ahead in the arr.\n            else:\n                i += 1\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    // Function to partition the arr around the range such\n    // that arr is divided into three parts.\n    threeWayPartition(arr, a, b) {\n        let n = arr.length;\n        // Using two pointers which help in finding the index with which\n        // the elements need to be swapped if they are not in correct position.\n        let start = 0, end = n - 1;\n\n        for (let i = 0; i <= end;) {\n            // If current element is smaller than lower range, we swap\n            // it with value on next available smallest position.\n            if (arr[i] < a) {\n                [arr[i], arr[start]] = [ arr[start], arr[i] ];\n                i++;\n                start++;\n            }\n            // If current element is greater than higher range, we swap\n            // it with value on next available greatest position.\n            else if (arr[i] > b) {\n                [arr[i], arr[end]] = [ arr[end], arr[i] ];\n                end--;\n            }\n            // Else we just move ahead in the arr.\n            else\n                i++;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}