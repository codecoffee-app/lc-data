{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 715408,
            "title": "Ticket Counter",
            "titleSlug": "ticket-counter-2731",
            "content": "<p><span ><strong>n</strong> people from 1 to n are standing in the queue at a movie ticket counter. It is a weird counter, as it distributes tickets to the <strong>first k</strong>&nbsp;people and then the <strong>last k </strong>people and again first k people and so on, once a person gets a ticket moves <strong>out</strong> of the queue. The task is to find the <strong>last</strong> person to get the ticket.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 9, k = 3</span><br /><span ><strong>Output: </strong>6</span><br /><span ><strong>Explanation:</strong></span><br /><span >Starting queue will like [1, 2, 3, 4, 5, 6, 7, 8, 9]. After the first distribution queue will look like [4, 5, 6, 7, 8, 9].</span><br /><span >And after the second distribution queue will look like [4, 5, 6]. The last person to get the ticket will be 6.</span></pre>\n<pre><span ><strong>Input:</strong> n = 5, k = 1</span><br /><span ><strong>Output: </strong>3</span><br /><span ><strong>Explanation:</strong></span><br /><span >Queue start as [1, 2, 3, 4, 5] -&gt; [2, 3, 4, 5] -&gt; [2, 3, 4] -&gt; [3, 4] -&gt; [3]</span><br /><span >Last person to get ticket will be 3.</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1&nbsp;</span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito; font-size: 17px;\">&le; </span><span >&nbsp;k</span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito; font-size: 17px;\">&nbsp;</span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito; font-size: 17px;\">&le; </span><span >&nbsp;n </span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito; font-size: 17px;\">&nbsp;</span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito; font-size: 17px;\">&le;</span><span >&nbsp;10</span><sup>5</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "n people numbered from 1 to n are in a queue at a movie ticket counter. The counter distributes tickets in a specific way: it serves the first k people, then the last k people, and repeats this process. Each person leaves the queue after receiving a ticket. The goal is to find the number of the last person to receive a ticket.",
                "constraints": [
                    "1 <= k <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 9, k = 3",
                        "output": "6",
                        "explanation": "Initially, the queue is [1, 2, 3, 4, 5, 6, 7, 8, 9]. After serving the first 3, the queue becomes [4, 5, 6, 7, 8, 9].  Then, serving the last 3 makes the queue [4, 5, 6]. The last person to receive a ticket is 6."
                    },
                    {
                        "input": "n = 5, k = 1",
                        "output": "3",
                        "explanation": "The queue evolves as follows: [1, 2, 3, 4, 5] -> [2, 3, 4, 5] -> [2, 3, 4] -> [3, 4] -> [3]. The last person to receive a ticket is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You can use a Deque and apply its suitable methods accordingly.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Queue",
                "slug": "queue"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    int distributeTicket(int n, int k) {\n        int m = n / k;\n        int r = n % k;\n\n        if (m % 2 == 0 && r)\n            return k * (m / 2) + r;\n        if (m % 2 && !r)\n            return k * (m / 2 + 1);\n        if (m % 2 && r)\n            return k * (m / 2 + 1) + 1;\n        if (m % 2 == 0 && !r)\n            return k * (m / 2) + 1;\n\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int distributeTicket(int n, int k) {\n        int m = n / k;\n        int r = n % k;\n\n        if (m % 2 == 0 && r != 0) return k * (m / 2) + r;\n        if (m % 2 != 0 && r == 0) return k * (m / 2 + 1);\n        if (m % 2 != 0 && r != 0) return k * (m / 2 + 1) + 1;\n        if (m % 2 == 0 && r == 0) return k * (m / 2) + 1;\n\n        return 0;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import deque\n\n\nclass Solution:\n\n    def distributeTicket(self, n: int, k: int) -> int:\n        m = n // k\n        r = n % k\n\n        if m % 2 == 0 and r:\n            return k * (m // 2) + r\n        if m % 2 and not r:\n            return k * (m // 2 + 1)\n        if m % 2 and r:\n            return k * (m // 2 + 1) + 1\n        if m % 2 == 0 and not r:\n            return k * (m // 2) + 1\n\n        return 0\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    // Function to distribute the N tickets.\n    public int distributeTicket(int n, int k) {\n\n        int m = n / k;\n        int r = n % k;\n\n        if (m % 2 == 0 && r != 0) return k * (m / 2) + r;\n        if (m % 2 != 0 && r == 0) return k * (m / 2 + 1);\n        if (m % 2 != 0 && r != 0) return k * (m / 2 + 1) + 1;\n        if (m % 2 == 0 && r == 0) return k * (m / 2) + 1;\n\n        return 0;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number} N\n * @param {number} K\n * @returns {number}\n */\n\nclass Solution {\n    // Function to distribute tickets.\n    distributeTicket(n, k) {\n        let m = Math.floor(n / k);\n        let r = n % k;\n\n        if (m % 2 === 0 && r !== 0) return k * (m / 2) + r;\n        if (m % 2 !== 0 && r === 0) return k * (Math.floor(m / 2) + 1);\n        if (m % 2 !== 0 && r !== 0) return k * (Math.floor(m / 2) + 1) + 1;\n        if (m % 2 === 0 && r === 0) return k * (m / 2) + 1;\n\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}