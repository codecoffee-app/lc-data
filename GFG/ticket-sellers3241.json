{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704504,
            "title": "Ticket sellers",
            "titleSlug": "ticket-sellers3241",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr[]</strong> of ticket sellers where the <strong>ith</strong> ticket seller has <strong>arr[i]</strong> tickets. </span><span style=\"font-size: 18px;\">The price of a ticket is the number of tickets remaining with the ticket seller. They are allowed to sell at most <strong>k</strong> tickets. Find the maximum amount they can earn by selling <strong>k</strong>&nbsp;tickets. </span><span style=\"font-size: 18px;\">The amount of tickets of each seller is provided in array <strong>arr[]</strong>. Give the answer modulo <strong>10<sup>9</sup>&nbsp;+ 7.</strong></span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [4, 3, 6, 2, 4] , k=3\n<strong>Output:</strong> 15\n<strong>Explaination:</strong> Consider 0 based indexing. For first two turns the 2nd seller sells. For the third turn either 0th or 2nd seller can sell. So the total becomes 6 + 5 + 4 = 15.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [5, 3, 5, 2, 4, 4] , k=2\n<strong>Output:</strong> 10\n<strong>Explaination:</strong> The turns are taken by 0th and 2nd seller. 5 + 5 = 10 is the maximum amount.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i], k &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array `arr` of ticket sellers, where `arr[i]` represents the number of tickets the i-th seller has. You are allowed to sell at most `k` tickets.  The price of each ticket sold by a seller is equal to the number of tickets remaining with that seller at the time of sale.  Find the maximum amount of money you can earn by selling at most `k` tickets. Return the answer modulo 10^9 + 7.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i], k <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [4, 3, 6, 2, 4] , k=3",
                        "output": "15",
                        "explanation": "The optimal strategy is to sell two tickets from the seller with 6 tickets (reducing their count to 4) and one ticket from a seller with 4 tickets. This yields a total of 6 + 5 + 4 = 15."
                    },
                    {
                        "input": "arr[] = [5, 3, 5, 2, 4, 4] , k=2",
                        "output": "10",
                        "explanation": "The optimal strategy is to sell one ticket each from the two sellers with 5 tickets. This gives a total of 5 + 5 = 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use the concept of max heap.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "bankbazaar",
            "linkedin"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int maxAmount(vector<int>& arr, int k) {\n        int mod = 1000000007;\n        int n = arr.size();\n        priority_queue<int> q;\n\n        // inserting values in priority queue.\n        for (int i = 0; i < n; i++)\n            q.push(arr[i]);\n\n        int ans = 0, x;\n        // calculating answer modulo 1e9 + 7\n        while (k && !q.empty()) {\n            x = q.top();\n            q.pop();\n            ans = (ans + x) % mod;\n            x--;\n            k--;\n            if (x)\n                q.push(x);\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static int maxAmount(int[] arr, int k) {\n        int mod = 1000000007;\n        int n = arr.length;\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);\n\n        // Insert values into the priority queue\n        for (int i = 0; i < n; i++) {\n            pq.offer(arr[i]);\n        }\n\n        int ans = 0;\n        while (k > 0 && !pq.isEmpty()) {\n            int x = pq.poll();\n            ans = (ans + x) % mod;\n            x--;\n            k--;\n            if (x > 0) {\n                pq.offer(x);\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import heapq\n\n\nclass Solution:\n\n    def maxAmount(self, arr, k):\n        mod = 1000000007\n        n = len(arr)\n\n        # Convert arr into a max heap by inverting the values\n        max_heap = [-x for x in arr]\n        heapq.heapify(max_heap)\n\n        ans = 0\n        while k > 0 and max_heap:\n            # Get the largest element (smallest in the inverted max heap)\n            x = -heapq.heappop(max_heap)\n            ans = (ans + x) % mod\n            x -= 1\n            k -= 1\n            if x > 0:\n                # Push the updated value back into the heap\n                heapq.heappush(max_heap, -x)\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    maxAmount(arr, k) {\n        const mod = 1000000007;\n        const maxHeap = new MaxHeap();\n\n        // Insert elements into the max heap\n        arr.forEach(num => maxHeap.push(num));\n\n        let ans = 0;\n\n        while (k > 0 && !maxHeap.isEmpty()) {\n            let x = maxHeap.pop();\n            ans = (ans + x) % mod;\n            x--;\n            k--;\n            if (x > 0) {\n                maxHeap.push(x);\n            }\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}