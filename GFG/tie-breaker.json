{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701615,
            "title": "Tie Breaker",
            "titleSlug": "tie-breaker",
            "content": "<p><span style=\"font-size: 18px;\">Given an<strong> </strong>array of names <strong>arr[]</strong> of candidates in an election. A candidate name in array represents a <strong>vote casted</strong> to the candidate. You need to find the <strong>candidate </strong>with<strong> maximum votes </strong>recieved in the election. It may happen that two or more candidates may have<strong> same votes</strong>, in that case you need to return the name of the&nbsp;candidate which comes<strong> first lexicographically</strong> in dictionary.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [\"Turin\", \"Nick\", \"Turin\", \"Nick\"]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>Nick</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Both have the same 2 number of votes but Nick comes<strong> </strong>first lexicographically.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [\"John\", \"Shushma\", \"Rajnath\"]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>John </span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>All the three have same number of votes of 1.<strong> </strong>Lexicographically John comes first.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong><br />1 &lt;= arr.size() &lt;= 10<sup>4</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:20px\">Cpp: Make use of unordered map and&nbsp;use Iterator to traverse the un-ordered map.</span></p>\n\n<p><span style=\"font-size:20px\">Java: Make use of HashMap and use for-loop or Iterator to traverse HashMap or Map.</span></p>\n\n<p>&nbsp;</p>",
            "<p><span style=\"font-size:20px\">You may use an ordered map as it will always keep the keys in a sorted order.</span></p>\n\n<p><span style=\"font-size:20px\">You can also use an unordered map, and when traversing the unordered map you can use an if condition to check whether current key has values greater than prev max value and if there is a tie then compare the key value of the prev max to current key value.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    string TieBreak(vector<string>& arr) {\n        int n = arr.size();\n        string winner = \"\";\n        unordered_map<string, int> ump;\n        for (int i = 0; i < n; i++)\n            ump[arr[i]]++;\n\n        int maxVotes = 0;\n        for (auto itr = ump.begin(); itr != ump.end(); itr++) {\n            if ((itr->second > maxVotes) ||\n                ((itr->second == maxVotes) && (itr->first < winner))) {\n                maxVotes = itr->second;\n                winner = itr->first;\n            }\n        }\n        return winner;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public static String TieBreak(String arr[]) {\n        // Initializing winner to an empty String\n        String winner = \"\";\n        int n = arr.length;\n        // Declaring and Initializing a HashMap\n        HashMap<String, Integer> mp = new HashMap<>();\n\n        for (int i = 0; i < n; i++) {\n            // incrementing count if HashMap\n            // already contains the name of the\n            // candidate\n            if (mp.containsKey(arr[i])) {\n                mp.put(arr[i], mp.get(arr[i]) + 1);\n            } else // initializing the count of the candidate votes with 1\n            {\n                mp.put(arr[i], 1);\n            }\n        }\n\n        int maxVotes = 0;\n\n        // running a loop to find the person's\n        // name who has the maxVotes\n        // in case of tie, we choose the\n        // person who has lower lexogrophical name\n        for (Map.Entry mapElement : mp.entrySet()) {\n            String key = (String)mapElement.getKey();\n            int value = ((int)mapElement.getValue());\n\n            if (maxVotes < value ||\n                ((value == maxVotes) && (key.compareTo(winner) < 0))) {\n                maxVotes = value;\n                winner = key;\n            }\n        }\n\n        // returing the name of the winner\n        return winner;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Complete this function\n    public string TieBreak(string[] arr) {\n        int n = arr.Length;\n        string winner = \"\";\n        Dictionary<string, int> ump = new Dictionary<string, int>();\n        for (int i = 0; i < n; i++) {\n            if (ump.ContainsKey(arr[i])) {\n                ump[arr[i]]++;\n            } else {\n                ump.Add(arr[i], 1);\n            }\n        }\n\n        int maxVotes = 0;\n        foreach (var kvp in ump) {\n            if ((kvp.Value > maxVotes) ||\n                ((kvp.Value == maxVotes) && (kvp.Key.CompareTo(winner) < 0))) {\n                maxVotes = kvp.Value;\n                winner = kvp.Key;\n            }\n        }\n        return winner;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}