{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703125,
            "title": "Find the number of tabs opened",
            "titleSlug": "tiger-zinda-hai5531",
            "content": "<p><span style=\"font-size: 18.6667px;\">You are given an array <strong>arr[]</strong>, where each element is either a tab ID or the string \"END\". If a tab ID appears, toggle its state (open if it's closed, or close if it's open). If \"END\" appears, close all open tabs. Your task is to determine the number of tabs that remain open after all operations are completed.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [\"1\", \"2\", \"1\", \"END\", \"2\"]\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>In the above test case, firstly tab 1st is opened then 2nd is opened then 1st is closed then all are closed then again 2nd is opened.\n</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [\"1\", \"2\", \"END\"]\n<strong>Output:</strong> 0<br /><strong>Explanation</strong>: 1st and 2nd tab is opened then both closed so zero tabs open at last,<br /></span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span ><strong>Constraints:<br /></strong>1 &le; arr.size() &le; 10<sup>6<br /></sup></span><span >1 &le; arr[i].size() &le; 6</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of strings, where each element is either a tab ID (a string representing a number) or the string \"END\".  If a tab ID appears, toggle its state (open if closed, close if open). If \"END\" appears, close all open tabs. Determine the number of tabs that remain open after all operations are completed.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i].size() <= 6"
                ],
                "testcases": [
                    {
                        "input": "[\"1\", \"2\", \"1\", \"END\", \"2\"]",
                        "output": "1",
                        "explanation": "Initially, tab 1 is opened, then tab 2. Tab 1 is then closed.  The 'END' command closes all open tabs. Finally, tab 2 is opened, leaving only tab 2 open."
                    },
                    {
                        "input": "[\"1\", \"2\", \"END\"]",
                        "output": "0",
                        "explanation": "Tab 1 is opened, then tab 2. The 'END' command closes both tabs, resulting in zero open tabs."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use data structure to count the number of pages that you have opened till END occurs.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "oracle"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to count the number of tabs open after executing a set of commands.\n    int countTabs(vector<string> &arr) {\n        int n = arr.size();\n        int ans = 0;\n\n        // creating a map to store the count of open tabs.\n        unordered_map<string, int> mp;\n        for (int i = 0; i < n; i++) {\n            string str = arr[i];\n            if (str != \"END\") {\n                mp[str] += 1;\n\n                // incrementing the count for the current tab.\n            } else {\n                mp.clear(); // clearing the map if \"END\" command is encountered.\n            }\n        }\n\n        // iterating over the map to count the number of tabs open.\n        auto it = mp.begin();\n        while (it != mp.end()) {\n            if (it->second & 1) {\n                // checking if the count is odd.\n                ++ans;\n                // incrementing the answer if count is odd.\n            }\n            ++it;\n        }\n        return ans; // returning the final count.\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to count the number of tabs open after executing a set of commands.\n    public int countTabs(List<String> arr) {\n        int n = arr.size();\n        int ans = 0;\n\n        // Creating a map to store the count of open tabs.\n        Map<String, Integer> mp = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            String str = arr.get(i);\n            if (!str.equals(\"END\")) {\n                mp.put(str, mp.getOrDefault(str, 0) + 1);\n                // Incrementing the count for the current tab.\n            } else {\n                mp.clear();\n                // Clearing the map if \"END\" command is encountered.\n            }\n        }\n\n        // Iterating over the map to count the number of tabs open.\n        for (Map.Entry<String, Integer> entry : mp.entrySet()) {\n            if (entry.getValue() % 2 == 1) {\n                // Checking if the count is odd.\n                ans++;\n                // Incrementing the answer if count is odd.\n            }\n        }\n        return ans; // Returning the final count.\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def countTabs(self, arr):\n        n = len(arr)\n        ans = 0\n\n        # Creating a dictionary to store the count of open tabs.\n        mp = {}\n        for i in range(n):\n            str_val = arr[i]\n            if str_val != \"END\":\n                if str_val in mp:\n                    mp[str_val] += 1\n                    # Incrementing the count for the current tab.\n                else:\n                    mp[str_val] = 1\n            else:\n                mp.clear()\n                # Clearing the dictionary if \"END\" command is encountered.\n\n        # Iterating over the dictionary to count the number of tabs open.\n        for key, value in mp.items():\n            if value % 2 == 1:  # Checking if the count is odd.\n                ans += 1\n                # Incrementing the answer if count is odd.\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to count the number of tabs open after executing a set of commands.\n    countTabs(arr) {\n        let n = arr.length;\n        let ans = 0;\n\n        // Creating a map to store the count of open tabs.\n        let mp = new Map();\n        for (let i = 0; i < n; i++) {\n            let str = arr[i];\n            if (str !== \"END\") {\n                if (mp.has(str)) {\n                    mp.set(str, mp.get(str) + 1);\n                    // Incrementing the count for the current tab.\n                } else {\n                    mp.set(str, 1);\n                }\n            } else {\n                mp.clear();\n                // Clearing the map if \"END\" command is encountered.\n            }\n        }\n\n        // Iterating over the map to count the number of tabs open.\n        for (let [key, value] of mp) {\n            if (value % 2 === 1) { // Checking if the count is odd.\n                ans++;             // Incrementing the answer if count is odd.\n            }\n        }\n        return ans; // Returning the final count.\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}