{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700291,
            "title": "Toeplitz matrix",
            "titleSlug": "toeplitz-matrix",
            "content": "<p><span style=\"font-size: 18px;\">A Toeplitz (or diagonal-constant) matrix is a matrix in which each descending diagonal from left to right is constant, i.e., all elements in a diagonal are the same. Given a rectangular matrix <strong>mat,</strong>&nbsp;your task is to complete the function <strong>isToeplitz</strong> which returns <strong>true</strong> if the matrix is Toeplitz otherwise, it returns <strong>false</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span><span style=\"font-size: 18px;\"><br />mat = [[6, 7, 8],<br />\\t [4, 6, 7],<br />\\t [1, 4, 6]]<br /></span><span style=\"font-size: 18px;\"><strong>Output: </strong>true</span><br /><span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><span style=\"font-size: 18px;\">The test case represents a 3x3 matrix</span>\n<span style=\"font-size: 18px;\"> 6 7 8 </span>\n<span style=\"font-size: 18px;\"> 4 6 7 </span>\n<span style=\"font-size: 18px;\"> 1 4 6</span>\n<span style=\"font-size: 18px;\">Output will be<strong> </strong>true, as values in all downward diagonals from left to right contain the same elements.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: <br /></span></strong><span style=\"font-size: 18px;\">mat = [[1,2,3],<br />\\t [4,5,6]]<br /></span><strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">false<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><span style=\"font-size: 18px;\">Matrix of order 2x3 will be 1 2 3 4 5 6 Output: false as values in all diagonals are not the same.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong> <br /></span><span style=\"font-size: 18px;\">1&lt;=mat.size,mat[0].size&lt;=40 <br /></span><span style=\"font-size: 18px;\">0&lt;=mat[i][j]&lt;=100</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected time complexity: </strong>O(n*m</span><span style=\"font-size: 18px;\">)<br /></span><span style=\"font-size: 18px;\"><strong>Expected space complexity: </strong>O(1)</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "bool ok(vector<vector<int>>& mat, int i, int j, int n, int m) {\n    int res = mat[i][j];\n    // Loop through the diagonal line and check if elements are equal\n    while (++i < n && ++j < m) {\n        if (mat[i][j] != res)\n            return false;\n    }\n    // Return true if all elements in the diagonal line are equal\n    return true;\n}\n\nbool isToeplitz(vector<vector<int>>& mat) {\n    // Check all diagonal lines starting from the top row\n    int n = mat.size();\n    int m = mat[0].size();\n    for (int i = 0; i < m; i++) {\n        // If any diagonal line is not equal, return false\n        if (!ok(mat, 0, i, n, m))\n            return false;\n    }\n\n    // Check all diagonal lines starting from the first column (excluding the top row)\n    for (int i = 1; i < n; i++) {\n        // If any diagonal line is not equal, return false\n        if (!ok(mat, i, 0, n, m))\n            return false;\n    }\n\n    // Return true if all diagonal lines are equal\n    return true;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // function to check if all elements in a diagonal line starting from a given\n    // element are equal\n    boolean ok(int mat[][], int i, int j, int n, int m) {\n        int res = mat[i][j];\n        // loop through the diagonal line and check if elements are equal\n        while (++i < n && ++j < m) {\n            if (mat[i][j] != res) return false;\n        }\n        // return true if all elements in the diagonal line are equal\n        return true;\n    }\n\n    boolean isToeplitz(int mat[][]) {\n        // check all diagonal lines starting from the top row\n        int n = mat.length;\n        int m = mat[0].length;\n        for (int i = 0; i < m; i++) {\n            // if any diagonal line is not equal, return false\n            if (!ok(mat, 0, i, n, m)) return false;\n        }\n\n        // check all diagonal lines starting from the first column (excluding the top\n        // row)\n        for (int i = 1; i < n; i++) {\n            // if any diagonal line is not equal, return false\n            if (!ok(mat, i, 0, n, m)) return false;\n        }\n\n        // return true if all diagonal lines are equal\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "def isToeplitz(mat):\n    # Function to check if matrix is a Toepliz matrix\n    n = len(mat)\n    m = len(mat[0])\n\n    if (m == 1):\n        return True\n\n    # Checking each element of the matrix except for the first row and first column\n    for i in range(1, n):\n        for j in range(1, m):\n            # If any element is not equal to the element diagonally before it, return False\n            if (mat[i - 1][j - 1] != mat[i][j]):\n                return False\n\n    return True\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    isToeplitz(mat) {\n        let n = mat.length;\n        let m = mat[0].length;\n\n        for (let i = 0; i < m; i++) {\n            let k = i; // Initialize a variable to keep track of the column index.\n            let j = 0; // Initialize a variable to keep track of the row index.\n            let val = mat[0][i]; // Store the value of the element at the first row and\n                                 // i-th column.\n            while (j < n && k < m) { // Iterate through the elements in the diagonal.\n                if (mat[j][k] !== val)\n                    return false; // Check if the current element is different from the\n                                  // first element in the diagonal.\n                j++;              // Move to the next row.\n                k++;              // Move to the next column.\n            }\n        }\n        for (let i = 0; i < n; i++) {\n            let k = i; // Initialize a variable to keep track of the row index.\n            let j = 0; // Initialize a variable to keep track of the column index.\n            let val = mat[i][0]; // Store the value of the element at the i-th row and\n                                 // first column.\n            while (k < n && j < m) { // Iterate through the elements in the diagonal.\n                if (mat[k][j] !== val)\n                    return false; // Check if the current element is different from the\n                                  // first element in the diagonal.\n                j++;              // Move to the next column.\n                k++;              // Move to the next row.\n            }\n        }\n        return true; // Return true if all the elements in the diagonals are equal,\n                     // indicating a Toeplitz matrix.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}