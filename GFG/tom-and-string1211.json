{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703550,
            "title": "Tom and String",
            "titleSlug": "tom-and-string1211",
            "content": "<p><span style=\"font-size:18px\">Given a list <strong>S </strong>consisting&nbsp;of strings&nbsp;separated by a space.&nbsp;Hash the list using the hash rule and a long string X&nbsp;given below&nbsp;and return the hash value.<br />\nString X: <strong>&quot;abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;.</strong></span><br />\n<span style=\"font-size:18px\"><strong>Hash Rule:&nbsp;</strong>Hash is the summation of all the character values in the input:<strong>&nbsp;(currentIndex + (position of the character In the string initial) ).</strong>&nbsp;And then this hash is multiplied by the number of strings in the list.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\">S = aA1 b</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">132</span>\n<strong><span style=\"font-size:18px\">Explanation: \n</span></strong><span style=\"font-size:18px\">List is [<strong>&quot;aA1&quot;, &quot;b&quot;</strong>]</span>\n<span style=\"font-size:18px\">a: 0 + 0 = 0\nA: 1 + 36 = 37\n1: 2 + 26 = 28\n\nb: 0 + 1 = 1</span>\n<span style=\"font-size:18px\">So, 2*(0+1+37+28) = 2*(66) = 132</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS = aa BB cc DD\n<strong>Output:</strong>\n640</span>\n<span style=\"font-size:18px\"><strong>Explanation: \n</strong>List is [<strong>&quot;aa&quot;, &quot;BB&quot;,&quot;cc&quot;,&quot;DD&quot;</strong>]</span>\n<span style=\"font-size:18px\">a: 0 + 0 = 0\na: 1 + 0 = 1</span>\n\n<span style=\"font-size:18px\">B: 0 + 37 = 37\nB: 1 + 37 = 38</span>\n\n<span style=\"font-size:18px\">c: 0 + 2 = 2\nc: 1 + 2 = 3</span>\n\n<span style=\"font-size:18px\">D: 0 + 39 = 39\nD: 1 + 39 = 40</span>\n<span style=\"font-size:18px\">So, 4*(0+1+37+38+2+3+39+40)= 4*(160)=640</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>hashString()</strong>&nbsp;which takes string S, list of space-separated strings&nbsp;as a parameter&nbsp;and returns the hash value of the list.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(Sum of the length of all the strings)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(Length of initial string)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; Length of a string &le; 30<br />\n1 &le; Number of strings in a list &le; 20</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list **S** consisting of strings separated by a space, hash the list using the hash rule and a long string X given below and return the hash value.\n\nString X: **\"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"**.\n\n**Hash Rule:** Hash is the summation of all the character values in the input: **(currentIndex + (position of the character In the string initial))**. And then this hash is multiplied by the number of strings in the list.",
                "constraints": [
                    "1 <= Length of a string <= 30",
                    "1 <= Number of strings in a list <= 20"
                ],
                "testcases": [
                    {
                        "input": "aA1 b",
                        "output": "132",
                        "explanation": "The list of strings is [\"aA1\", \"b\"].\n\nFor \"aA1\":\na: index 0 + position(a) = 0 + 0 = 0\nA: index 1 + position(A) = 1 + 36 = 37\n1: index 2 + position(1) = 2 + 26 = 28\n\nFor \"b\":\nb: index 0 + position(b) = 0 + 1 = 1\n\nTotal sum: 0 + 37 + 28 + 1 = 66\nFinal hash: 2 * 66 = 132"
                    },
                    {
                        "input": "aa BB cc DD",
                        "output": "640",
                        "explanation": "The list of strings is [\"aa\", \"BB\", \"cc\", \"DD\"].\n\nFor \"aa\":\na: index 0 + position(a) = 0 + 0 = 0\na: index 1 + position(a) = 1 + 0 = 1\n\nFor \"BB\":\nB: index 0 + position(B) = 0 + 37 = 37\nB: index 1 + position(B) = 1 + 37 = 38\n\nFor \"cc\":\nc: index 0 + position(c) = 0 + 2 = 2\nc: index 1 + position(c) = 1 + 2 = 3\n\nFor \"DD\":\nD: index 0 + position(D) = 0 + 39 = 39\nD: index 1 + position(D) = 1 + 39 = 40\n\nTotal sum: 0 + 1 + 37 + 38 + 2 + 3 + 39 + 40 = 160\nFinal hash: 4 * 160 = 640"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use brute force technique and map the&nbsp;character in the initial string to their index positions.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution {\n  public:\n    long long int hashString(string S) {\n        string initial =\"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        map<char, int> m;\n        // Map all the characters in initial string to their position into m;\n        for (int i = 0; i < initial.length(); i++) m[initial[i]] = i;\n        vector<string> arr;\n        string x = \"\";\n        // Split the string into array of strings.\n        for (int i = 0; i < S.length(); i++) {\n            if (S[i] == ' ') {\n                arr.push_back(x);\n                x = \"\";\n            } else\n                x = x + S[i];\n        }\n        arr.push_back(x);\n        long long int ssum = 0;\n        // Perform brute force\n        for (int i = 0; i < arr.size(); i++) {\n            string astring = arr[i];\n            long long int sum = 0;\n            for (int j = 0; j < astring.length(); j++) {\n                char ch = astring[j];\n                sum = sum + j + m[ch];\n            }\n            ssum = ssum + sum;\n        }\n        long long int ans = ssum * arr.size();\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static long hashString(String S) {\n        // Split the string into array of strings.\n        String arr[] = S.split(\" \");\n        long ssum = 0;\n        String initial =\n            \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        long m[] = new long[200];\n        // Map all the characters in initial string to their position into m;\n        for (int i = 0; i < initial.length(); i++) {\n            m[(int)initial.charAt(i)] = i;\n        }\n        // Perform brute force\n        for (int i = 0; i < arr.length; i++) {\n            String astring = arr[i];\n            long sum = 0;\n            for (int j = 0; j < astring.length(); j++) {\n                char ch = astring.charAt(j);\n                sum = sum + j + m[(int)ch];\n            }\n            ssum = ssum + sum;\n        }\n        long ans = ssum * arr.length;\n        return ans;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    def hashString(self, S):\n        m = {}\n        initial=\"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        # Map all the characters in initial string to their position into m;\n        for i in range(len(initial)):\n           m[initial[i]] = i;\n        #Split the string into array of strings.   \n        S = S.strip().split()\n        hash = 0\n        # Perform brute force\n        for s in S:\n            for i in range(len(s)):\n                hash += m[s[i]] + i\n        ans = hash * len(S)\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to hash the given string.\n    hashString(S) {\n        let m = {};\n        let initial = \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        // Map all the characters in initial string to their position into m;\n        for (let i = 0; i < initial.length; i++) {\n            m[initial[i]] = i;\n        }\n        //Split the string into array of strings.   \n        let strArr = S.trim().split(\" \");\n        let hash = 0;\n        // Perform brute force\n        for (let s of strArr) {\n            for (let i = 0; i < s.length; i++) {\n                hash += m[s[i]] + i;\n            }\n        }\n        let ans = hash * strArr.length;\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}