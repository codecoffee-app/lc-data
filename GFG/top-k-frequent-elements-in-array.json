{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702051,
            "title": "Top K Frequent in Array",
            "titleSlug": "top-k-frequent-elements-in-array",
            "content": "<p><span >Given a non-empty integer array <strong>arr[]</strong> of size n, find the top <strong>k</strong> elements which have the <strong>highest frequency </strong>in the array. </span></p>\n<p><span >Note: If two numbers have the same frequencies, then the <strong>larger number </strong>should be given more preference.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [3, 1, 4, 4, 5, 2, 6, 1], k = 2<br /><strong>Output: </strong>[4, 1]<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong>Frequency of 4 is 2 and frequency of 1 is 2, these two have the maximum frequency and 4 is larger than 1.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [7, 10, 11, 5, 2, 5, 5, 7, 11, 8, 9], k = 4<br /><strong>Output: </strong>[5, 11, 7, 10]<strong>\nExplanation: </strong>Frequency of 5 is 3, frequency of 11 is 2, frequency of 7 is 2, frequency of 10 is 1.</span></pre>\n<p><span ><strong>Constraints: </strong></span><br /><span >1 &lt;= n &lt;= 10<sup>5</sup><br />1&lt;= arr[i] &lt;=10<sup>5<br /></sup>1 &lt;= k &lt;= no. of distinct elements</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-empty integer array `arr` of size `n`, find the top `k` elements with the highest frequency. If two numbers have the same frequency, the larger number should be prioritized.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= arr[i] <= 10^5",
                    "1 <= k <= number of distinct elements"
                ],
                "testcases": [
                    {
                        "input": "arr = [3, 1, 4, 4, 5, 2, 6, 1], k = 2",
                        "output": "[4, 1]",
                        "explanation": "The frequency of 4 is 2, and the frequency of 1 is 2. These two elements have the highest frequencies. Since 4 is larger than 1, it comes first in the output."
                    },
                    {
                        "input": "arr = [7, 10, 11, 5, 2, 5, 5, 7, 11, 8, 9], k = 4",
                        "output": "[5, 11, 7, 10]",
                        "explanation": "The frequency of 5 is 3, the frequency of 11 is 2, the frequency of 7 is 2, and the frequency of 10 is 1.  The top 4 most frequent elements, ordered by frequency and then by value, are 5, 11, 7, and 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Using hash table to store&nbsp;the frequency of occurrence of each number in the given array.&nbsp;Now we traverse this hash table and create an array&nbsp;<strong>freq_arr[]</strong>&nbsp;which stores these (number, frequency) tuples. Sort this&nbsp;<strong>freq_arr[]</strong>&nbsp;on the basis of the conditions defined in the problem statement. Print the first&nbsp;<strong>k</strong>&nbsp;numbers of this&nbsp;<strong>freq_arr[]</strong>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    // Comparison function to sort the frequency array\n    static bool compare(pair<int, int> &p1, pair<int, int> &p2) {\n\n        // Prioritise element's value incase their frequency was same\n        if (p1.second == p2.second)\n            return p1.first > p2.first;\n\n        // Sort on the basis of decreasing order\n        // of frequencies\n        return p1.second > p2.second;\n    }\n\n    // Function to find k numbers with most occurrences\n    vector<int> topKFrequent(vector<int> &arr, int k) {\n        int n = arr.size();\n\n        // unordered_map 'mp' implemented as frequency hash table\n        unordered_map<int, int> mp;\n        for (int i = 0; i < n; i++)\n            mp[arr[i]]++;\n\n        // Store the elements of 'mp' in the vector 'freq'\n        vector<pair<int, int>> freq(mp.begin(), mp.end());\n\n        // Sort the vector 'freq' on the basis of the\n        // 'compare' function\n        sort(freq.begin(), freq.end(), compare);\n\n        vector<int> res;\n\n        // Extract and store the top k frequent elements\n        for (int i = 0; i < k; i++)\n            res.push_back(freq[i].first);\n\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Comparison function to sort the frequency array\n    static class Compare implements Comparator<int[]> {\n        public int compare(int[] p1, int[] p2) {\n\n            // Prioritise element's value in case their frequency was same\n            if (p1[1] == p2[1]) return Integer.compare(p2[0], p1[0]);\n\n            // Sort on the basis of decreasing order\n            // of frequencies\n            return Integer.compare(p2[1], p1[1]);\n        }\n    }\n\n    // Function to find k numbers with most occurrences\n    static ArrayList<Integer> topKFrequent(int[] arr, int k) {\n        int n = arr.length;\n\n        // HashMap 'mp' implemented as frequency hash table\n        Map<Integer, Integer> mp = new HashMap<>();\n        for (int i = 0; i < n; i++) mp.put(arr[i], mp.getOrDefault(arr[i], 0) + 1);\n\n        // Store the elements of 'mp' in the list 'freq'\n        ArrayList<int[]> freq = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : mp.entrySet())\n            freq.add(new int[] {entry.getKey(), entry.getValue()});\n\n        // Sort the list 'freq' on the basis of the\n        // 'compare' function\n        freq.sort(new Compare());\n\n        ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(freq.get(i)[0]);\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nfrom collections import Counter\n\n\nclass Solution:\n    # Function to find k numbers with most occurrences\n    def topKFrequent(self, arr, k):\n        n = len(arr)\n\n        # Dictionary 'mp' implemented as frequency hash table\n        mp = Counter(arr)\n\n        # Store the elements of 'mp' in the list 'freq'\n        freq = list(mp.items())\n\n        # Sort the list 'freq' on the basis of the\n        # 'compare' function\n        freq.sort(key=lambda x: (x[1], x[0]), reverse=True)\n\n        res = []\n\n        # Extract and store the top k frequent elements\n        for i in range(k):\n            res.append(freq[i][0])\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Comparison function to sort the frequency array\n    compare(p1, p2) {\n\n        // Prioritise element's value in case their frequency was same\n        if (p1[1] === p2[1]) return p2[0] - p1[0];\n\n        // Sort on the basis of decreasing order\n        // of frequencies\n        return p2[1] - p1[1];\n    }\n\n    // Function to find k numbers with most occurrences\n    topKFrequent(arr, k) {\n        let n = arr.length;\n\n        // Object 'mp' implemented as frequency hash table\n        let mp = {};\n        for (let i = 0; i < n; i++) mp[arr[i]] = (mp[arr[i]] || 0) + 1;\n\n        // Store the elements of 'mp' in the array 'freq'\n        let freq = Object.entries(mp).map(([ key, value ]) => [parseInt(key), value]);\n\n        // Sort the array 'freq' on the basis of the\n        // 'compare' function\n        freq.sort(this.compare);\n\n        let res = [];\n\n        // Extract and store the top k frequent elements\n        for (let i = 0; i < k; i++) res.push(freq[i][0]);\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}