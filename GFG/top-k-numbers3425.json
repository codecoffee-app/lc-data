{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702717,
            "title": "Top k numbers in a stream",
            "titleSlug": "top-k-numbers3425",
            "content": "<p><span style=\"font-size: 18px;\">Given <strong>N</strong> numbers in an array, your task is to keep <strong>at most </strong>the <strong>top K </strong>numbers with respect to their <strong>frequency</strong>.</span></p>\n<p><span style=\"font-size: 18px;\">In other words, you have to iterate over the array, and <strong>after each index</strong>, determine the <strong>top K most frequent numbers </strong>until that iteration and store them in an array in <strong>decreasing order of frequency</strong>. An array will be formed for each iteration and stored in <strong>an array of arrays</strong>. If the total number of distinct elements is less than <strong>K</strong>, then keep all the distinct numbers in the array. If two numbers have <strong>equal frequency</strong>, place the <strong>smaller number first </strong>in the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N=5, K=4\narr[] = {5, 2, 1, 3, 2} \n<strong>Output:</strong> <br />5 <br />2 5 <br />1 2 5 <br />1 2 3 5 <br />2 1 3 5&nbsp;\n<strong>Explanation</strong>:\nFirstly there was 5 whose frequency\nis max till now. So resulting sequence is {5}.\nThen came 2, which is smaller than 5 but\ntheir frequencies are same so resulting sequence is {2, 5}.<br />Then came 1, which is the smallest among all the\nnumbers arrived, so resulting sequence is {1, 2, 5}.<br />Then came 3 , so resulting sequence is {1, 2, 3, 5}<br />Then again 2, which has the highest\nfrequency among all numbers, <br />so resulting sequence {2, 1, 3, 5}.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N=6, K=3\narr[] = {2, 1, 2, 1, 2, 1} \n<strong>Output:</strong> <br />2 <br />1 2 <br />2 1 <br />1 2 <br />2 1<br />1 2<br /><strong>Explanation:<br /></strong>As total number of distinct values never<br />exceeds 2, you have to return only those two<br />values. In the case where frequency of 1 gets<br />equal with the frequency of 2, you have to <br />keep 1 before 2 in the array.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Since, this is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function <strong>kTop()</strong> that takes <strong>array a</strong>,&nbsp;<strong>integer n</strong> <strong>and integer&nbsp;k</strong> as parameters and returns the array of arrays.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N*K).<br /><strong>Expected Auxiliary Space:</strong> O(N).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>4<br /></sup></span><span style=\"font-size: 18px;\">1 &le; K &le; 10<sup>2</sup><sup><br /></sup>1 &le; a[i] &le; 10<sup>2</sup><sup>&nbsp;</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N numbers, the task is to maintain the top K most frequent numbers encountered so far after each index. The result should be an array of arrays, where each inner array represents the top K frequent numbers up to that index, sorted in decreasing order of frequency. If two numbers have the same frequency, the smaller number should come first. If the number of distinct elements is less than K, include all distinct numbers.",
                "constraints": [
                    "1 <= N <= 10^4",
                    "1 <= K <= 10^2",
                    "1 <= a[i] <= 10^2"
                ],
                "testcases": [
                    {
                        "input": "N=5, K=4\narr[] = {5, 2, 1, 3, 2}",
                        "output": "5\n2 5\n1 2 5\n1 2 3 5\n2 1 3 5",
                        "explanation": "Initially, only 5 is present. Then 2 is added, and since it's smaller than 5 and has the same frequency (1), it comes first. Next, 1 is added with frequency 1. Then 3 is added with frequency 1. Finally, another 2 is added, increasing its frequency to 2, making it the most frequent. Therefore, 2 comes first, followed by 1, 3, and 5 (all with frequency 1, and sorted in ascending order)."
                    },
                    {
                        "input": "N=6, K=3\narr[] = {2, 1, 2, 1, 2, 1}",
                        "output": "2\n1 2\n2 1\n1 2\n2 1\n1 2",
                        "explanation": "The distinct numbers are always 1 and 2. When frequencies are the same, the smaller number comes first. The array contains these two values. For example the first element is 2, second is 1, so till index 2 (2,1) the elements are 1,2. Then the next element is 2, so now we have (2,1,2) frequency of 2 becomes 2, and frequency of 1 becomes 1, hence output is 2,1. Then the next element is 1, so now we have (2,1,2,1) frequency of 2 becomes 2, and frequency of 1 becomes 2, hence output is 1,2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">The idea is to store the top k elements with maximum frequency.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "priority-queue",
                "slug": "priority-queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "media.net"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\n{\n  public:\n    // Function to print top k numbers\n    vector<vector<int>> kTop(vector<int>&a, int n, int k)\n    {\n        // vector of size k+1 to store elements\n        vector<int> top(k + 1);\n        vector<vector<int>> ans;\n        // array to keep track of frequency\n        unordered_map<int, int> freq;\n        // iterate till the end of stream\n        for (int m = 0; m < n; m++) {\n            \n            vector<int>temp;\n            // increase the frequency\n            freq[a[m]]++;\n            // store that element in top vector\n            top[k] = a[m];\n            // search in top vector for same element\n            auto it = find(top.begin(), top.end() - 1, a[m]);\n            // iterate from the position of element to zero\n            for (int i = distance(top.begin(), it) - 1; i >= 0; --i) {\n                // compare the frequency and swap if higher\n                // frequency element is stored next to it\n                if (freq[top[i]] < freq[top[i + 1]])\n                    swap(top[i], top[i + 1]);\n                // if frequency is same compare the elements\n                // and swap if next element is high\n                else if ((freq[top[i]] == freq[top[i + 1]])\n                         && (top[i] > top[i + 1]))\n                    swap(top[i], top[i + 1]);\n                else\n                    break;\n            }\n            // print top k elements\n            for (int i = 0; i < k && top[i] != 0; ++i)\n                temp.push_back(top[i]);\n                //cout << top[i] << ' ';\n            ans.push_back(temp);\n        }\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public ArrayList<ArrayList<Integer>> kTop(int[] arr, int n, int k) {\r\n        HashMap<Integer, Integer> m = new HashMap<>();\r\n        TreeSet<Pair<Integer, Integer>> s = new TreeSet<>(Comparator.<Pair<Integer, Integer>>comparingInt(p -> p.first)\r\n                .thenComparingInt(p -> p.second));\r\n        s.add(new Pair<>(-1, arr[0]));\r\n        m.put(arr[0], 1);\r\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();\r\n        ArrayList<Integer> initialList = new ArrayList<>();\r\n        initialList.add(arr[0]);\r\n        ans.add(initialList);\r\n        for (int i = 1; i < n; i++) {\r\n            if (s.contains(new Pair<>(-m.getOrDefault(arr[i], 0), arr[i]))) {\r\n                s.remove(new Pair<>(-m.getOrDefault(arr[i], 0), arr[i]));\r\n            }\r\n            int currentCount = m.getOrDefault(arr[i], 0);\r\n            m.put(arr[i], currentCount + 1);\r\n            s.add(new Pair<>(-currentCount - 1, arr[i]));\r\n            while (s.size() > k) {\r\n                s.pollLast();\r\n            }\r\n            ArrayList<Integer> curr = new ArrayList<>();\r\n            for (Pair<Integer, Integer> t : s) {\r\n                curr.add(t.second);\r\n            }\r\n            ans.add(curr);\r\n        }\r\n        return ans;\r\n    }\r\n    static class Pair<T, U> {\r\n        T first;\r\n        U second;\r\n        public Pair(T first, U second) {\r\n            this.first = first;\r\n            this.second = second;\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def kTop(self, arr, N, K):\n        final_ans=[]\n      \n        # list of size k + 1 to store elements \n        top = [0 for i in range(K + 1)] \n       \n        # dictionary to keep track of frequency \n        freq = {i:0 for i in range(K + 1)} \n      \n        # iterate till the end of stream \n        for m in range(N): \n      \n            # increase the frequency \n            if a[m] in freq.keys(): \n                freq[a[m]] += 1\n            else: \n                freq[a[m]] = 1\n      \n            # store that element in top vector \n            top[k] = a[m] \n       \n            i = top.index(a[m]) \n            i -= 1\n              \n            while i >= 0: \n      \n                # compare the frequency and swap if higher \n                # frequency element is stored next to it \n                if (freq[top[i]] < freq[top[i + 1]]): \n                    t = top[i] \n                    top[i] = top[i + 1] \n                    top[i + 1] = t \n                  \n                # if frequency is same compare the elements \n                # and swap if next element is high \n                elif ((freq[top[i]] == freq[top[i + 1]]) and (top[i] > top[i + 1])): \n                    t = top[i] \n                    top[i] = top[i + 1] \n                    top[i + 1] = t \n                else: \n                    break\n                i -= 1\n              \n            # print top k elements \n            i = 0\n            ans = []\n            while i < K and top[i] != 0: \n                ans.append(top[i]) \n                i += 1\n            \n            final_ans += [ans]\n        return final_ans\n        ",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}