{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700490,
            "title": "Top View of Binary Tree",
            "titleSlug": "top-view-of-binary-tree",
            "content": "<p><span >You are given a binary tree, and your task is to return its <strong>top view</strong>. The top view of a binary tree is the set of nodes visible when the tree is viewed from the top.</span></p>\n<p><span ><strong>Note:&nbsp;</strong></span></p>\n<ul>\n<li><span >Return the nodes from the leftmost node to the rightmost node.</span></li>\n<li><span >If two nodes are at the same position (horizontal distance) and are outside the shadow of the tree, consider the leftmost node only.&nbsp;<br /></span></li>\n</ul>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>root[] = [1, 2, 3] <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700490/Web/Other/blobid0_1733898095.png\" width=\"249\" height=\"219\" /> <br /><strong>Output: </strong>[2, 1, 3]\n</span></pre>\n<pre><span ><strong>Input:</strong> root[] = [10, 20, 30, 40, 60, 90, 100]<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700490/Web/Other/blobid1_1733898122.png\" width=\"306\" height=\"271\" /> <br /><strong>Output: </strong>[40, 20, 10, 30, 100]<br /><strong>Explanation: </strong>The root 10 is visible.\nOn the left, 40 is the leftmost node and visible, followed by 20.\nOn the right, 30 and 100 are visible. Thus, the top view is 40 20 10 30 100.</span></pre>\n<pre><span ><strong>Input:</strong> root[] = [1, 2, 3, N, 4, N, N, N, 5, N, 6]\n\\t 1\n     /   \\\n    2     3\n     \\   \n\\t4\n\\t \\\n\\t  5\n\\t   \\\n\\t    6\n<strong>Output: </strong>[2, 1, 3, 6]<br /><strong>Explanation: </strong>Node 1 is the root and visible.\nNode 2 is the left child and visible from the left side.\nNode 3 is the right child and visible from the right side.\nNodes 4, 5, and 6 are vertically aligned, but only the lowest node 6 is visible from the top view. Thus, the top view is 2 1 3 6.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>5</sup><br />1 &le; node-&gt;data &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use level order traversal with a queue and track horizontal distances using a map to store topmost nodes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "ola-cabs",
            "walmart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to return a list of nodes visible from the top view\n    // from left to right in Binary Tree.\n    vector<int> topView(Node *root) {\n\n        // base case\n        if (root == nullptr) {\n            return {};\n        }\n        Node *temp = nullptr;\n\n        // creating empty queue for level order traversal.\n        queue<pair<Node *, int>> q;\n\n        // creating a map to store nodes at a\n        // particular horizontal distance.\n        unordered_map<int, int> mp;\n\n        int mn = INT_MAX;\n        q.push({root, 0});\n        while (!q.empty()) {\n\n            temp = q.front().first;\n            int d = q.front().second;\n            mn = min(mn, d);\n            q.pop();\n\n            // storing temp->data in map.\n            if (mp.find(d) == mp.end()) {\n                mp[d] = temp->data;\n            }\n\n            // if left child of temp exists, pushing it in\n            // the queue with the horizontal distance.\n            if (temp->left) {\n                q.push({temp->left, d - 1});\n            }\n\n            // if right child of temp exists, pushing it in\n            // the queue with the horizontal distance.\n            if (temp->right) {\n                q.push({temp->right, d + 1});\n            }\n        }\n        vector<int> ans(mp.size());\n\n        // traversing the map and storing the nodes in list\n        // at every horizontal distance.\n        for (auto it = mp.begin(); it != mp.end(); it++) {\n            ans[it->first - mn] = (it->second);\n        }\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to return a list of nodes visible from the top view\n    // from left to right in Binary Tree.\n    static ArrayList<Integer> topView(Node root) {\n\n        // Base case: if the tree is empty, return an empty\n        // list\n        if (root == null) {\n            return new ArrayList<>();\n        }\n\n        // Queue to perform level order traversal.\n        // Each element in the queue is a pair of (Node,\n        // horizontal distance)\n        Queue<Pair> queue = new LinkedList<>();\n        queue.add(new Pair(root, 0));\n\n        // HashMap to store the first node at each\n        // horizontal distance\n        HashMap<Integer, Integer> map = new HashMap<>();\n\n        // Variables to track the minimum and maximum\n        // horizontal distances\n        int minHD = 0;\n        int maxHD = 0;\n        while (!queue.isEmpty()) {\n            Pair current = queue.poll();\n            Node currentNode = current.node;\n            int hd = current.dist;\n\n            // Update min and max horizontal distances\n            if (hd < minHD) {\n                minHD = hd;\n            }\n            if (hd > maxHD) {\n                maxHD = hd;\n            }\n\n            // If a horizontal distance is encountered for\n            // the first time, add it to the map\n            if (!map.containsKey(hd)) {\n                map.put(hd, currentNode.data);\n            }\n\n            // Enqueue the left child with horizontal\n            // distance hd - 1\n            if (currentNode.left != null) {\n                queue.add(new Pair(currentNode.left, hd - 1));\n            }\n\n            // Enqueue the right child with horizontal\n            // distance hd + 1\n            if (currentNode.right != null) {\n                queue.add(new Pair(currentNode.right, hd + 1));\n            }\n        }\n\n        // Prepare the result list by traversing from minHD\n        // to maxHD\n        ArrayList<Integer> topViewList = new ArrayList<>();\n        for (int hd = minHD; hd <= maxHD; hd++) {\n            if (map.containsKey(hd)) {\n                topViewList.add(map.get(hd));\n            }\n        }\n        return topViewList;\n    }\n\n    // Helper class to store a node along with its\n    // horizontal distance\n    static class Pair {\n        Node node;\n        int dist;\n\n        Pair(Node node, int dist) {\n            this.node = node;\n            this.dist = dist;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from queue import Queue\n\n\nclass Solution:\n    #Function to return a list of nodes visible from the top view\n    #from left to right in Binary Tree.\n    def topView(self, root):\n\n        # base case\n        if not root:\n            return []\n\n        temp = None\n\n        # creating empty queue for level order traversal.\n        q = Queue()\n\n        # creating a dictionary to store nodes at a\n        # particular horizontal distance.\n        mp = {}\n\n        mn = float('inf')\n        q.put((root, 0))\n        while not q.empty():\n            temp, d = q.get()\n            mn = min(mn, d)\n\n            # storing temp.data in dictionary.\n            if d not in mp:\n                mp[d] = temp.data\n\n            # if left child of temp exists, pushing it in\n            # the queue with the horizontal distance.\n            if temp.left:\n                q.put((temp.left, d - 1))\n\n            # if right child of temp exists, pushing it in\n            # the queue with the horizontal distance.\n            if temp.right:\n                q.put((temp.right, d + 1))\n\n        # Initialize result array with size equal to dictionary size\n        ans = [0] * len(mp)\n\n        # Fill result array based on horizontal distances\n        for d, value in mp.items():\n            ans[d - mn] = value\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Function to return a list of nodes visible from the top view\n    // from left to right in Binary Tree.\n    public List<int> topView(Node root) {\n        // code here\n        // base case\n        if (root == null) return new List<int>();\n\n        Node temp = null;\n\n        // creating empty queue for level order traversal.\n        Queue<(Node, int)> q = new Queue<(Node, int)>();\n\n        // creating a dictionary to store nodes at a\n        // particular horizontal distance.\n        Dictionary<int, int> mp = new Dictionary<int, int>();\n\n        int mn = int.MaxValue;\n        q.Enqueue((root, 0));\n\n        while (q.Count > 0) {\n            var front = q.Dequeue();\n            temp = front.Item1;\n            int d = front.Item2;\n            mn = Math.Min(mn, d);\n\n            // storing temp.data in dictionary.\n            if (!mp.ContainsKey(d)) {\n                mp[d] = temp.data;\n            }\n\n            // if left child of temp exists, pushing it in\n            // the queue with the horizontal distance.\n            if (temp.left != null) {\n                q.Enqueue((temp.left, d - 1));\n            }\n\n            // if right child of temp exists, pushing it in\n            // the queue with the horizontal distance.\n            if (temp.right != null) {\n                q.Enqueue((temp.right, d + 1));\n            }\n        }\n\n        // Initialize result array with size equal to\n        // dictionary size\n        List<int> ans = new List<int>(new int[mp.Count]);\n\n        // Fill result array based on horizontal distances\n        foreach (var entry in mp) {\n            ans[entry.Key - mn] = entry.Value;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} root\n */\n\nclass Solution {\n    // Function to return a list of nodes visible from the top view\n    // from left to right in Binary Tree.\n    topView(root) {\n        // code here\n        // Base case\n        if (root === null) {\n            return [];\n        }\n\n        // Queue for level order traversal\n        let queue = [];\n\n        // Map to store nodes at a particular horizontal\n        // distance\n        let map = new Map();\n\n        // Track the minimum horizontal distance\n        let minDistance = Number.MAX_VALUE;\n\n        // Start with the root at horizontal distance 0\n        queue.push([ root, 0 ]);\n\n        while (queue.length > 0) {\n            let [temp, d] = queue.shift();\n\n            // Update the minimum horizontal distance\n            minDistance = Math.min(minDistance, d);\n\n            // If the horizontal distance is not yet in the map,\n            // add it\n            if (!map.has(d)) {\n                map.set(d, temp.data);\n            }\n\n            // Add left child with horizontal distance d - 1\n            if (temp.left) {\n                queue.push([ temp.left, d - 1 ]);\n            }\n\n            // Add right child with horizontal distance d + 1\n            if (temp.right) {\n                queue.push([ temp.right, d + 1 ]);\n            }\n        }\n\n        // Create the result array with size equal to map size\n        let ans = new Array(map.size);\n\n        // Populate the result array using the map\n        for (let [key, value] of map) {\n            ans[key - minDistance] = value;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}