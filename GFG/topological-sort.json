{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700255,
      "title": "Topological sort",
      "titleSlug": "topological-sort",
      "content": "<p><span >Given an adjacency list for a Directed Acyclic Graph (DAG) where <strong>adj[u]</strong> contains a list of all vertices&nbsp;<strong>v</strong> such that there exists a <strong>directed edge</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px;\"> </span><strong>u </strong><strong>-&gt; v</strong>. </span><span >Return <strong>topological sort</strong> for the given graph.</span></p>\n<blockquote><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">Topological sorting for&nbsp;</span><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Directed Acyclic Graph (DAG)</span></span><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;is a linear ordering of vertices such that for every directed edge u -&gt; v, vertex&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">u</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;comes before&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">v</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;in the ordering.</span></blockquote>\n<p><span >Note:<strong>&nbsp;</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">As there are multiple Topological orders possible, you may return any of them. If your returned Topological sort is correct then the output will be <strong>1</strong> else <strong>0</strong>.</span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> adj = [[], [0], [0], [0]] </span><br /><span ><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700255/Web/Other/24aa5d54-bc1f-489c-bd2d-ad02ddccdf31_1684492511.png\" alt=\"\" /></span><br /><span ><strong>Output: </strong>1</span><br /><span ><strong>Explanation</strong>: The output 1 denotes that the order is valid. Few valid Topological orders for the given graph are:\n[3, 2, 1, 0]</span><br /><span >[1, 2, 3, 0]</span><br /><span >[2, 3, 1, 0]</span></pre>\n<pre><span ><strong>Input: </strong>adj = [[], [3], [3], [], [0,1], [0,2]]\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700255/Web/Other/c35bb1d1-130c-49aa-a17e-118181d7bdcd_1684492512.png\" alt=\"\" /><br /><strong>Output: </strong>1\n<strong>Explanation: </strong>The output 1 denotes that the order is valid. Few valid Topological orders for the graph are:<br />[4, 5, 0, 1, 2, 3]<br />[5, 2, 4, 0, 1, 3]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2&nbsp; </span><span style=\"font-size: 18px;\">&le;</span> &nbsp;<span style=\"font-size: 18px;\">V&nbsp; </span><span style=\"font-size: 18px;\">&le;</span> &nbsp;<span style=\"font-size: 18px;\">10<sup>3</sup><br />1&nbsp; </span><span style=\"font-size: 18px;\">&le;</span> &nbsp;<span style=\"font-size: 18px;\">E&nbsp; </span><span style=\"font-size: 18px;\">&le;</span> &nbsp;<span style=\"font-size: 18px;\">(V * (V - 1)) / 2</span></p>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given an adjacency list `adj` representing a Directed Acyclic Graph (DAG), where `adj[u]` contains a list of vertices `v` such that there is a directed edge from `u` to `v` (u -> v), determine a topological sort for the graph. A topological sort is a linear ordering of vertices where for every directed edge u -> v, vertex u comes before vertex v in the ordering.",
        "constraints": [
          "2 <= V <= 10^3 (where V is the number of vertices)",
          "1 <= E <= (V * (V - 1)) / 2 (where E is the number of edges)"
        ],
        "testcases": [
          {
            "input": "adj = [[], [0], [0], [0]]",
            "output": "1",
            "explanation": "Any of the following orders are valid: [3, 2, 1, 0], [1, 2, 3, 0], [2, 3, 1, 0]. The output 1 indicates that the generated topological sort is valid"
          },
          {
            "input": "adj = [[], [3], [3], [], [0,1], [0,2]]",
            "output": "1",
            "explanation": "Any of the following orders are valid: [4, 5, 0, 1, 2, 3], [5, 2, 4, 0, 1, 3]. The output 1 indicates that the generated topological sort is valid"
          }
        ]
      }
    },
    "similar": [],
    "hints": [],
    "relatedTopics": [
      {
        "name": "Graph",
        "slug": "graph"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": [
      "moonfrog-labs",
      "flipkart",
      "morgan-stanley",
      "accolite",
      "amazon",
      "microsoft",
      "oyo-rooms",
      "samsung",
      "de-shaw",
      "visa"
    ],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "class Solution {\n  public:\n    // Utility function for performing DFS and storing the topological order\n    void topoSortUtil(int v, vector<bool>& visited, stack<int>& Stack,\n                      vector<vector<int>>& adj) {\n        // Mark the current node as visited\n        visited[v] = true;\n\n        // Iterate through all the adjacent vertices\n        for (int i : adj[v]) {\n            // If an adjacent vertex hasn't been visited, recurse on it\n            if (!visited[i])\n                topoSortUtil(i, visited, Stack, adj);\n        }\n\n        // After visiting all adjacent vertices, push the current vertex to the stack\n        // This ensures that nodes are pushed after all their dependencies\n        Stack.push(v);\n    }\n\n    // Function to perform topological sort on the given DAG\n    vector<int> topologicalSort(vector<vector<int>>& adj) {\n        int N = adj.size();             // Number of vertices in the graph\n        stack<int> Stack;               // Stack to store the order of vertices\n        vector<bool> visited(N, false); // Vector to keep track of visited vertices\n\n        // Iterate through all vertices of the graph\n        for (int i = 0; i < N; i++) {\n            // If the vertex hasn't been visited, perform DFS from it\n            if (!visited[i])\n                topoSortUtil(i, visited, Stack, adj);\n        }\n\n        vector<int> res; // Vector to store the final topological order\n\n        // Pop all elements from the stack and add them to the result vector\n        // This reverses the order to get the correct topological sorting\n        while (!Stack.empty()) {\n            res.push_back(Stack.top());\n            Stack.pop();\n        }\n\n        return res; // Return the topological order\n    }\n};\n",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "class Solution {\n    // Function to return list containing vertices in Topological order.\n    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer> > adj) {\n        int V = adj.size();\n        // Array to store indegree of each vertex\n        int[] indegree = new int[V];\n        for (int i = 0; i < V; i++) {\n            for (int it : adj.get(i)) {\n                indegree[it]++;\n            }\n        }\n\n        // Queue to store vertices with indegree 0\n        Queue<Integer> q = new LinkedList<>();\n        for (int i = 0; i < V; i++) {\n            if (indegree[i] == 0) {\n                q.offer(i);\n            }\n        }\n\n        ArrayList<Integer> result = new ArrayList<>();\n        int index = 0;\n        while (!q.isEmpty()) {\n            int node = q.poll();\n            result.add(node);\n\n            // Decrease indegree of adjacent vertices as the\n            // current node is in topological order\n            for (int it : adj.get(node)) {\n                indegree[it]--;\n\n                // If indegree becomes 0, push it to the\n                // queue\n                if (indegree[it] == 0) {\n                    q.offer(it);\n                }\n            }\n        }\n\n        return result;\n    }\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "# Back-end Complete function Solution for Python\n\n\nclass Solution:\n\n    # A recursive function used by topologicalSort\n    def DFSUtil(self, adj, v, visited, stack):\n\n        #marking the current vertex as visited.\n        visited[v] = True\n\n        #traversing over the adjacent vertices.\n        for i in adj[v]:\n\n            #if any vertex is not visited, we call the function recursively.\n            if visited[i] == False:\n                self.DFSUtil(adj, i, visited, stack)\n\n        #pushing the current vertex into the stack.\n        stack.insert(0, v)\n\n    #Function to return list containing vertices in Topological order.\n    def topologicalSort(self, adj):\n        V = len(adj)\n        #using boolean array to mark visited nodes and currently\n        #marking all the nodes as false.\n        visited = [False] * V\n        stack = []\n\n        #traversing over all the vertices.\n        for i in range(V):\n\n            #if the current vertex is not visited, we call the topo function.\n            if visited[i] == False:\n                self.DFSUtil(adj, i, visited, stack)\n\n        #returning the stack.\n        return stack\n",
        "lang_text": "python3"
      },
      {
        "lang": "C#",
        "full_func": "//Back-end complete function Template for csharp\n\nclass Solution {\n    void topo(List<List<int>> adj, int u, ref List<bool> visited, ref Stack<int> s) {\n        // marking the current vertex as visited.\n        visited[u] = true;\n\n        // traversing over the adjacent vertices.\n        foreach (var v in adj[u]) {\n            // if any vertex is not visited, we call the function recursively.\n            if (!visited[v]) topo(adj, v, ref visited, ref s);\n        }\n        // pushing the current vertex into the stack.\n        s.Push(u);\n    }\n\n    // Function to return list containing vertices in Topological order.\n    public List<int> topologicalSort(List<List<int>> adj) {\n        int V = adj.Count;\n        // using boolean array to mark visited nodes and currently\n        // marking all the nodes as false.\n        List<bool> visited = new List<bool>();\n        for (int i = 0; i < V + 1; i++) {\n            visited.Add(false);\n        }\n\n        Stack<int> s = new Stack<int>();\n\n        // traversing over all the vertices.\n        for (int i = 0; i < V; i++) {\n            // if the current vertex is not visited, we call the topo function.\n            if (!visited[i]) topo(adj, i, ref visited, ref s);\n        }\n\n        List<int> res = new List<int>();\n        while (s.Count > 0) {\n            // pushing elements of stack in list and popping them from stack.\n            res.Add(s.Peek());\n            s.Pop();\n        }\n        // returning the list.\n        return res;\n    }\n}\n",
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} V\n * @param {number[][]} adj\n * @returns {number[]}\n */\nclass Solution {\n    topo(adj, u, visited, s) {\n        // marking the current vertex as visited.\n        visited[u] = true;\n\n        // traversing over the adjacent vertices.\n        for (let i = 0; i < adj[u].length; i++) {\n            let v = adj[u][i];\n\n            // if any vertex is not visited, we call the function recursively.\n            if (!visited[v]) this.topo(adj, v, visited, s);\n        }\n        // pushing the current vertex into the stack.\n        s.push(u);\n    }\n\n    // Function to return list containing vertices in Topological order.\n    topologicalSort(adj) {\n        let V = adj.length;\n        // using boolean array to mark visited nodes and currently\n        // marking all the nodes as false.\n        let visited = new Array(V + 1);\n        visited.fill(false);\n\n        let s = new Array();\n\n        // traversing over all the vertices.\n        for (let i = 0; i < V; i++) {\n            // if the current vertex is not visited, we call the topo function.\n            if (!visited[i]) this.topo(adj, i, visited, s);\n        }\n\n        let res = new Array();\n        let i = -1;\n        while (s.length != 0) {\n            // pushing elements of stack in list and popping them from stack.\n            res.push(s[s.length - 1]);\n            s.pop();\n        }\n        // returning the list.\n        return res;\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
