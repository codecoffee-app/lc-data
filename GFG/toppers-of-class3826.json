{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703041,
            "title": "Toppers Of Class",
            "titleSlug": "toppers-of-class3826",
            "content": "<p><span style=\"font-size: 18px;\">There is a class of some students and the task is to find the top <strong>k</strong> marks scorers. You need to print the index of the class's toppers, which will be the same as the student's index in the input array (use 0-based indexing). First, return the index of the students having the highest marks then the students with second highest and so on. If more than one student has the same marks then return their indices in ascending order. Suppose k = 2 and the students having the highest marks have indices 0 and 5 and students having second highest marks have indices 6 and 7 then output will be 0 5 6 7.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: here <strong>k</strong> will be always less than equal to the number of distinct elements in marks of students <strong>arr[]</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 2, 1, 3, 1], k = 3 \n<strong>Output:</strong> [3, 0, 1, 2, 4]\n<strong>Explanation</strong>: Topper with 3 marks is present at 3rd index, 2 marks is present at 0<sup>th</sup> index and next at 1<sup>st</sup> index. 1 marks is present at 2 and 4.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4], k = 1 \n<strong>Output: </strong>[3]\n<strong>Explanation</strong>: The highest marks is at index 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; k &le; 10<sup>6<br /></sup>1 &le; arr[i] &le; 10<sup>8</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` representing the marks of students in a class, find the indices of the top `k` marks scorers. Return the indices in descending order of marks, i.e., first the index of the student with the highest mark, then the index of the student with the second highest mark, and so on. If multiple students have the same mark, return their indices in ascending order.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "1 <= k <= 10^6",
                    "1 <= arr[i] <= 10^8",
                    "k is always less than or equal to the number of distinct elements in `arr`"
                ],
                "testcases": [
                    {
                        "input": "arr = [2, 2, 1, 3, 1], k = 3",
                        "output": "[3, 0, 1, 2, 4]",
                        "explanation": "The highest mark is 3, found at index 3. The next highest mark is 2, found at indices 0 and 1. The next highest mark is 1, found at indices 2 and 4. Returning the indices in the specified order: [3, 0, 1, 2, 4]"
                    },
                    {
                        "input": "arr = [1, 2, 3, 4], k = 1",
                        "output": "[3]",
                        "explanation": "The highest mark is 4, which is at index 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Can you use sort to get maximum marks, now can you get the top <strong>k</strong> marks scorer?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "de-shaw"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to compare two nodes based on their marks\nclass Solution {\n  public:\n    vector<int> kToppers(vector<int> &arr, int k) {\n        // Vector of pairs to store marks and their indices\n        vector<pair<int, int>> marks_indices;\n\n        // Filling the vector with pairs of marks and their indices\n        for (int i = 0; i < arr.size(); i++) {\n            marks_indices.push_back({arr[i], i});\n        }\n\n        // Sorting the vector first by marks in descending order, and then by indices in\n        // ascending order\n        sort(marks_indices.begin(), marks_indices.end(),\n             [](pair<int, int> &a, pair<int, int> &b) {\n                 if (a.first != b.first)\n                     return a.first > b.first; // Descending order of marks\n                 return a.second < b.second;   // Ascending order of indices\n             });\n\n        // Collecting the top k scorers\n        vector<int> result;\n        int count = 0;\n        for (int i = 0; i < marks_indices.size() && count <= k; i++) {\n            if (i == 0 || marks_indices[i].first != marks_indices[i - 1].first) {\n                count++;\n            }\n            if (count > k)\n                break;\n            result.push_back(marks_indices[i].second);\n        }\n\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<Integer> kToppers(int[] arr, int k) {\n        // List of pairs to store marks and their indices\n        List<int[]> marksIndices = new ArrayList<>();\n\n        // Filling the list with pairs of marks and their indices\n        for (int i = 0; i < arr.length; i++) {\n            marksIndices.add(new int[] {arr[i], i});\n        }\n\n        // Sorting the list first by marks in descending order, and then by indices in\n        // ascending order\n        Collections.sort(marksIndices, (a, b) -> {\n            if (a[0] != b[0]) {\n                return b[0] - a[0]; // Descending order of marks\n            } else {\n                return a[1] - b[1]; // Ascending order of indices\n            }\n        });\n\n        // Collecting the top k scorers\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < marksIndices.size(); i++) {\n            if (i == 0 || marksIndices.get(i)[0] != marksIndices.get(i - 1)[0]) {\n                count++;\n            }\n            if (count > k) break;\n            result.add(marksIndices.get(i)[1]);\n        }\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def kToppers(self, arr, k):\n        # List of tuples to store marks and their indices\n        marks_indices = [(arr[i], i) for i in range(len(arr))]\n\n        # Sorting the list first by marks in descending order, and then by indices in ascending order\n        marks_indices.sort(key=lambda x: (-x[0], x[1]))\n\n        # Collecting the top k scorers\n        result = []\n        count = 0\n        for i in range(len(marks_indices)):\n            if i == 0 or marks_indices[i][0] != marks_indices[i - 1][0]:\n                count += 1\n            if count > k:\n                break\n            result.append(marks_indices[i][1])\n\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    kToppers(arr, k) {\n        // Array of objects to store marks and their indices\n        let marksIndices = arr.map((mark, index) => ({mark, index}));\n\n        // Sorting the array first by marks in descending order, and then by indices in\n        // ascending order\n        marksIndices.sort((a, b) => {\n            if (a.mark !== b.mark) {\n                return b.mark - a.mark; // Descending order of marks\n            } else {\n                return a.index - b.index; // Ascending order of indices\n            }\n        });\n\n        // Collecting the top k scorers\n        let result = [];\n        let count = 0;\n        for (let i = 0; i < marksIndices.length; i++) {\n            if (i === 0 || marksIndices[i].mark !== marksIndices[i - 1].mark) {\n                count++;\n            }\n            if (count > k) break;\n            result.push(marksIndices[i].index);\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}