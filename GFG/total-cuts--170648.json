{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714325,
            "title": "Total Cuts",
            "titleSlug": "total-cuts--170648",
            "content": "<p><span style=\"font-size:18px\">You are given an array <strong>A</strong> of <strong>N</strong> integers and an integer <strong>K</strong>, and your task is to find the total number of cuts that you can make such that for each cut these two conditions are satisfied<br />\r\n1. A cut divides an array into two parts equal or unequal length (non-zero).<br />\r\n2. Sum of the largest element in the left part and the smallest element in the right part is greater than or equal to K.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=3\r\nK=3\r\nA[]={1,2,3}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n2</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nTwo ways in which array is divided to satisfy above conditions are:\r\n{1} and {2,3} -&gt; 1+2&gt;=3(satisfies the condition)\r\n{1,2} and {3} -&gt; 2+3&gt;=3(satisfies the condition)</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=5\r\nK=5\r\nA[]={1,2,3,4,5}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n3</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\n{1,2} and {3,4,5} -&gt; 2+3&gt;=5\r\n{1,2,3} and {4,5} -&gt; 3+4&gt;=5\r\n{1,2,3,4} and {5} -&gt; 4+5&gt;=5</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function totalCuts() which takes two integers N, K, and an array A of size N as input parameters, and returns an integer representing the total number of cuts that satisfy both conditions.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10^6<br />\r\n0 &lt;= K &lt;= 10^6<br />\r\n0 &lt;= A[i] &lt;= 10^6</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to precompute some necessary things related to prefix and suffix of the array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to calculate the total number of cuts.\n    int totalCuts(int N,int K,vector<int> &A){\n        //creating a new vector to store the maximum values.\n        vector<int> mx=A;\n\n        //calculating the maximum value for each index.\n        for(int i=1;i<N;i++){\n            mx[i]=max(mx[i],mx[i-1]);\n        }\n        \n        //initializing the minimum value with 1e9 and the answer with 0.\n        int mn=1e9,ans=0;\n        \n        //iterating from right to left.\n        for(int i=N-2;i>=0;i--){\n            //updating the minimum value.\n            mn=min(mn,A[i+1]);\n            \n            //if the sum of maximum value of left part and minimum value of \n            //right part is greater than or equal to K, then increment the answer.\n            if(mx[i]+mn>=K) ans++;\n        }\n        \n        //returning the total number of cuts.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\nclass Solution\r\n{\r\n    public static int totalCuts(int N,int K,int A[])\r\n    {\r\n        int small[]=new int[N];\r\n        int large[]=new int[N];\r\n        large[0]=A[0];\r\n        for(int i=1;i<N;i++){\r\n            large[i]=Math.max(large[i-1],A[i]);\r\n        }\r\n        small[N-1]=A[N-1];\r\n        for(int i=N-2;i>=0;i--){\r\n            small[i]=Math.min(small[i+1],A[i]);\r\n        }\r\n        int ans=0;\r\n        for(int i=0;i<N-1;i++){\r\n            if(large[i]+small[i+1]>=K){\r\n                ans++;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\nclass Solution:\n    def totalCuts(self, N: int, K: int, A: List[int]) -> int:\n        # Initializing the arrays to store the maximum and minimum values\n        # encountered so far\n        small = [0]*N\n        large = [0]*N\n        large[0] = A[0]\n        \n        # calculating the maximum value encountered so far from left to right\n        for i in range(1, N):\n            large[i] = max(large[i-1], A[i])\n        \n        small[-1] = A[-1]\n        # calculating the minimum value encountered so far from right to left\n        for i in range(N-2, -1, -1):\n            small[i] = min(small[i+1], A[i])\n        \n        ans = 0\n        # checking if the sum of the largest value encountered so far\n        # and the smallest value encountered after that is greater than or equal to K\n        for i in range(N-1):\n            if large[i] + small[i+1] >= K:\n                ans += 1\n        \n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} N\r\n * @param {number} K\r\n * @param {number[]} A\r\n * @returns {number}\r\n */\r\n\r\nclass Solution {\r\n    //Function to count the total number of distinct subsequences.\r\n    totalCuts(N, K, A)\r\n    {\r\n        // Initializing the arrays to store the maximum and minimum values\r\n        // encountered so far\r\n        let small = new Array(N).fill(0);\r\n        let large = new Array(N).fill(0);\r\n        large[0] = A[0];\r\n        \r\n        // calculating the maximum value encountered so far from left to right\r\n        for (let i = 1; i < N; i++) {\r\n            large[i] = Math.max(large[i-1], A[i]);\r\n        }\r\n        \r\n        small[N-1] = A[N-1];\r\n        // calculating the minimum value encountered so far from right to left\r\n        for (let i = N-2; i >= 0; i--) {\r\n            small[i] = Math.min(small[i+1], A[i]);\r\n        }\r\n        \r\n        let ans = 0;\r\n        // checking if the sum of the largest value encountered so far\r\n        // and the smallest value encountered after that is greater than or equal to K\r\n        for (let i = 0; i < N-1; i++) {\r\n            if (large[i] + small[i+1] >= K) {\r\n                ans += 1;\r\n            }\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}