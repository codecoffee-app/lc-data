{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705327,
            "title": "Total Decoding Messages",
            "titleSlug": "total-decoding-messages1235",
            "content": "<p><span >A message containing letters<code>&nbsp;A-Z </code>is being encoded to numbers using the following mapping:</span></p>\n<div class=\"highlighter-rouge\">\n<blockquote>\n<p><span >'A' -&gt; 1 <br />'B' -&gt; 2 <br />... <br />'Z' -&gt; 26 </span></p>\n</blockquote>\n</div>\n<p><span >You are given a string <strong>digits</strong>. You have to determine the <strong>total number of ways</strong> that message can be decoded.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">digits </span>= \"123\"\n<strong>Output: </strong>3\n<strong>Explanation: </strong>\"123\" can be decoded as \"ABC\"(1, 2, 3), \"LC\"(12, 3) and \"AW\"(1, 23).\n</span></pre>\n<pre><span ><strong>Input: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">digits</span> = \"90\"</span><br /><span ><strong>Output: </strong>0\n<strong>Explanation: </strong>\"90\" cannot be decoded, as it's an invalid string and we cannot decode '0'.<sup><br /></sup></span></pre>\n<pre><span ><strong>Input: </strong>digits = \"05\"\n<strong>Output: </strong>0\n<strong>Explanation: </strong>\"05\" cannot be mapped to \"E\" because of the leading zero (\"5\" is different from \"05\"), the string is not a valid encoding message.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; digits.size() &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use Dynamic programming approach store all possible decodings.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho",
            "flipkart",
            "morgan-stanley",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "makemytrip",
            "goldman-sachs",
            "nutanix",
            "linkedin",
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\nclass Solution {\n  public:\n    int countWays(string &digits) {\n        int n = digits.length();\n\n        // If the string is empty or starts with '0',\n        // there are no valid decodings.\n        if (n == 0 || digits[0] == '0') {\n            return 0;\n        }\n\n        // two variables to store the previous two results.\n        int prev1 = 1, prev2 = 0;\n\n        for (int i = 1; i <= n; ++i) {\n            int current = 0;\n\n            // Check for valid single-digit decoding\n            if (digits[i - 1] != '0') {\n                current += prev1;\n            }\n\n            // Check for valid two-digit decoding\n            // (previous digit and current digit form a\n            // valid number between 10 and 26)\n            if (i > 1) {\n                int twoDigit = (digits[i - 2] - '0') * 10 + (digits[i - 1] - '0');\n                if (twoDigit >= 10 && twoDigit <= 26) {\n                    current += prev2;\n                }\n            }\n\n            // Update prev1 and prev2 for the next iteration.\n            prev2 = prev1;\n            prev1 = current;\n        }\n        return prev1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int countWays(String digits) {\n        int n = digits.length();\n\n        // If the string is empty or starts with '0',\n        // there are no valid decodings.\n        if (n == 0 || digits.charAt(0) == '0') {\n            return 0;\n        }\n\n        // two variables to store the previous two results.\n        int prev1 = 1, prev2 = 0;\n\n        for (int i = 1; i <= n; ++i) {\n\n            int current = 0;\n\n            // Check for valid single-digit decoding\n            if (digits.charAt(i - 1) != '0') {\n                current += prev1;\n            }\n\n            // Check for valid two-digit decoding\n            // (previous digit and current digit form\n            // a valid number between 10 and 26)\n            if (i > 1) {\n                int twoDigit =\n                    (digits.charAt(i - 2) - '0') * 10 + (digits.charAt(i - 1) - '0');\n                if (twoDigit >= 10 && twoDigit <= 26) {\n                    current += prev2;\n                }\n            }\n\n            // Update prev1 and prev2 for the next\n            // iteration.\n            prev2 = prev1;\n            prev1 = current;\n        }\n        return prev1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countWays(self, digits):\n        n = len(digits)\n\n        # If the string is empty or starts with '0',\n        # there are no valid decodings.\n        if n == 0 or digits[0] == '0':\n            return 0\n\n        # two variables to store the previous two results.\n        prev1, prev2 = 1, 0\n\n        for i in range(1, n + 1):\n            current = 0\n            # Check for valid single-digit decoding\n            if digits[i - 1] != '0':\n                current += prev1\n            # Check for valid two-digit decoding\n            # (previous digit and current digit form a valid number between 10 and 26)\n            if i > 1:\n                two_digit = (int(digits[i - 2]) * 10 + int(digits[i - 1]))\n                if 10 <= two_digit <= 26:\n                    current += prev2\n\n            # Update prev1 and prev2 for the next iteration.\n            prev2 = prev1\n            prev1 = current\n        return prev1\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int countWays(string digits) {\n        int n = digits.Length;\n\n        // If the string is empty or starts with '0',\n        // there are no valid decodings.\n        if (n == 0 || digits[0] == '0') {\n            return 0;\n        }\n\n        // two variables to store the previous two results.\n        int prev1 = 1, prev2 = 0;\n\n        for (int i = 1; i <= n; ++i) {\n            int current = 0;\n            // Check for valid single-digit decoding\n            if (digits[i - 1] != '0') {\n                current += prev1;\n            }\n            // Check for valid two-digit decoding\n            // (previous digit and current digit form a\n            // valid number between 10 and 26)\n            if (i > 1) {\n                int twoDigit = (digits[i - 2] - '0') * 10 + (digits[i - 1] - '0');\n                if (twoDigit >= 10 && twoDigit <= 26) {\n                    current += prev2;\n                }\n            }\n\n            // Update prev1 and prev2 for the next\n            // iteration.\n            prev2 = prev1;\n            prev1 = current;\n        }\n        return prev1;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string} digits\n * @return {number}\n */\n\nclass Solution {\n    countWays(digits) {\n        const n = digits.length;\n\n        // If the string is empty or starts with '0',\n        // there are no valid decodings.\n        if (n === 0 || digits[0] === \"0\") {\n            return 0;\n        }\n\n        // two variables to store the previous two results.\n        let prev1 = 1, prev2 = 0;\n\n        for (let i = 1; i <= n; ++i) {\n            let current = 0;\n            // Check for valid single-digit decoding\n            if (digits[i - 1] !== \"0\") {\n                current += prev1;\n            }\n            // Check for valid two-digit decoding\n            // (previous digit and current digit form a valid\n            // number between 10 and 26)\n            if (i > 1) {\n                const twoDigit =\n                    (parseInt(digits[i - 2]) * 10 + parseInt(digits[i - 1]));\n                if (twoDigit >= 10 && twoDigit <= 26) {\n                    current += prev2;\n                }\n            }\n\n            // Update prev1 and prev2 for the next iteration.\n            prev2 = prev1;\n            prev1 = current;\n        }\n        return prev1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}