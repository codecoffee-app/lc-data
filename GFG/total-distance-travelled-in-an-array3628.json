{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703389,
            "title": "Total distance travelled in an array",
            "titleSlug": "total-distance-travelled-in-an-array3628",
            "content": "<p><span >You are given an array <strong>arr[]</strong> consisting of a permutation of the set <strong>{1, 2, 3, &hellip;, n}</strong> for some positive integer n. The task is to calculate the total distance you must travel starting from the position of 1 in the array, then moving to the position of 2, and so on, until you reach the position of n.</span></p>\n<p><span ><strong>Note:</strong> When you travel from arr[i] to arr[j], the distance travelled is | i&ndash; j |.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 1, 4, 3, 2]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The numbers and their respective indices are given below:\n1-&gt;1\n2-&gt;4\n3-&gt;3\n4-&gt;2\n5-&gt;0\nTotal distance =|4-1|+|3-4|+|2-3|+|0-2| = 3+1+1+2 = 7.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [6, 5, 1, 2, 4, 3]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Total distance = |2-3|+|3-5|+|5-4|+|4-1|+|1-0| = 1+2+1+3+1 = 8.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1&lt;= arr[i]<sub>&nbsp;</sub>&lt;= arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` consisting of a permutation of the set {1, 2, 3, ..., n} for some positive integer n, calculate the total distance you must travel. Start at the index of the element '1' in the array, then move to the index of '2', and so on, until you reach the index of 'n'. The distance travelled from index i to index j is |i - j|.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= arr.size()"
                ],
                "testcases": [
                    {
                        "input": "[5, 1, 4, 3, 2]",
                        "output": "7",
                        "explanation": "The positions of the numbers are: 1 -> index 1, 2 -> index 4, 3 -> index 3, 4 -> index 2, 5 -> index 0.  Total distance = |4-1| + |3-4| + |2-3| + |0-2| = 3 + 1 + 1 + 2 = 7"
                    },
                    {
                        "input": "[6, 5, 1, 2, 4, 3]",
                        "output": "8",
                        "explanation": "The positions of the numbers are: 1 -> index 2, 2 -> index 3, 3 -> index 5, 4 -> index 4, 5 -> index 1, 6 -> index 0. Total distance = |2-3| + |3-5| + |5-4| + |4-1| + |1-0| = 1 + 2 + 1 + 3 + 1 = 8"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Track the positions of elements and compute the sum of absolute differences between consecutive positions.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// User function template for C++\n\nclass Solution {\n  public:\n    long long distance(vector<int>& arr) {\n        int n = arr.size();\n\n        // Vector to store the positions of each element in the original array\n        vector<int> positions(n);\n\n        // Storing the position of each element in the vector 'positions'\n        for (int i = 0; i < n; i++) {\n            positions[arr[i] - 1] = i;\n        }\n\n        // Calculating the total distance between consecutive elements in their correct\n        // positions\n        long long dis = 0;\n        for (int i = 0; i < n - 1; i++) {\n            dis += abs(positions[i] - positions[i + 1]);\n        }\n\n        return dis;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function template for Java\n\nclass Solution {\n    long distance(int[] arr) {\n        int n = arr.length;\n\n        // Array to store the positions of each element in the original array\n        int[] positions = new int[n];\n\n        // Storing the position of each element in the 'positions' array\n        for (int i = 0; i < n; i++) {\n            positions[arr[i] - 1] = i;\n        }\n\n        // Calculating the total distance between consecutive elements in their correct\n        // positions\n        long dis = 0;\n        for (int i = 0; i < n - 1; i++) {\n            dis += Math.abs(positions[i] - positions[i + 1]);\n        }\n\n        return dis;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# User function Template for python3\n\n\nclass Solution:\n\n    def distance(self, arr):\n        n = len(arr)\n\n        # List to store the positions of each element in the original array\n        positions = [0] * n\n\n        # Storing the position of each element in the 'positions' list\n        for i in range(n):\n            positions[arr[i] - 1] = i\n\n        # Calculating the total distance between consecutive elements in their correct positions\n        total_distance = 0\n        for i in range(n - 1):\n            total_distance += abs(positions[i] - positions[i + 1])\n\n        return total_distance\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n//  User function Template for JavaScript\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    // Function to calculate the distance between each element and its correct position\n    distance(arr) {\n        const n = arr.length;\n\n        // Array to store the positions of each element in the original array\n        const positions = new Array(n).fill(0);\n\n        // Storing the position of each element in the 'positions' array\n        for (let i = 0; i < n; i++) {\n            positions[arr[i] - 1] = i;\n        }\n\n        // Calculating the total distance between consecutive elements in their correct\n        // positions\n        let totalDistance = 0;\n        for (let i = 0; i < n - 1; i++) {\n            totalDistance += Math.abs(positions[i] - positions[i + 1]);\n        }\n\n        return totalDistance;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}