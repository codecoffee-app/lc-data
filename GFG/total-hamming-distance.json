{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 885809,
            "title": "Total Hamming Distance",
            "titleSlug": "total-hamming-distance",
            "content": "<p><span >Given an integer array <strong>arr[]</strong>, return the sum of <a href=\"https://www.geeksforgeeks.org/hamming-distance-between-two-integers/\" target=\"_blank\" rel=\"noopener\">Hamming distances</a> between all the pairs of the integers in <strong>arr</strong>.</span></p>\n<p><strong style=\"font-size: 18.6667px;\">Note:</strong><span style=\"font-size: 18.6667px;\">&nbsp;The answer is guaranteed to fit within a&nbsp;</span><strong style=\"font-size: 18.6667px;\">32-bit</strong><span style=\"font-size: 18.6667px;\">&nbsp;integer.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><span ><strong>Input:&nbsp;</strong>arr[] = [1, 14]</span><br style=\"font-size: medium;\" /><span ><strong>Output: </strong>4<strong><br />Explanation:&nbsp;</strong>Binary representations of 1 is 0001, 14 is 1110. The answer will be:</span><br style=\"font-size: medium;\" /><span >HammingDistance(1, 14) = 4.</span></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [4, 14, 4, 14]</span><br /><span ><strong>Output: </strong>8<strong><br />Explanation: </strong>Binary representations of 4 is 0100, 14 is 1110. The answer will be:</span><br /><span >HammingDistance(4, 14) + HammingDistance(4, 4) +&nbsp;</span><span style=\"font-size: 18.6667px;\">HammingDistance(4, 14) + </span><span >HammingDistance(14, 4) + </span><span style=\"font-size: 18.6667px;\">HammingDistance(14, 14) +</span><span >&nbsp;</span><span style=\"font-size: 18.6667px;\">HammingDistance(4, 14) </span><span >= 2 + 0 + 2 + 2 + 0 + 2 = 8.</span></pre>\n<p><span ><strong>Constraints:<br /></strong></span><span >2 &le; arr.size() &le; 10<sup>4</sup><br />1 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr[]`, return the sum of Hamming distances between all pairs of integers in `arr`. The Hamming distance between two integers is the number of positions at which the corresponding bits are different.",
                "constraints": [
                    "2 <= arr.length <= 10^4",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1, 14]",
                        "output": "4",
                        "explanation": "The binary representation of 1 is 0001, and the binary representation of 14 is 1110.  The Hamming distance between 1 and 14 is 4, as there are four bit positions where they differ."
                    },
                    {
                        "input": "[4, 14, 4, 14]",
                        "output": "8",
                        "explanation": "The binary representation of 4 is 0100, and the binary representation of 14 is 1110. The sum of Hamming distances between all pairs is:  HammingDistance(4, 14) + HammingDistance(4, 4) + HammingDistance(4, 14) + HammingDistance(14, 4) + HammingDistance(14, 14) + HammingDistance(14, 4) = 2 + 0 + 2 + 2 + 0 + 2 = 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Focus on each bit position (0 to 31) independently and count how many numbers have the bit set (1) and how many don't (0).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    int totHammingDist(vector<int>& arr) {\n        int n = arr.size(), ans = 0;\n        for (int i = 0; i < 32; i++) {\n\n            // Count of the number of elements that have the 'i'th bit set\n            int count = 0;\n            for (int k = 0; k < n; k++) {\n                count += (arr[k] >> i) & 1;\n            }\n            ans += count * (n - count);\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    int totHammingDist(int[] arr) {\n        int n = arr.length, ans = 0;\n\n        for (int i = 0; i < 32; i++) {\n            // Count of the number of elements that have the 'i'th bit set\n            int count = 0;\n            for (int k = 0; k < n; k++) {\n                count += (arr[k] >> i) & 1;\n            }\n            ans += count * (n - count);\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def totHammingDist(self, arr):\n        n = len(arr)\n        ans = 0\n\n        for i in range(32):\n            # Count of the number of elements that have the 'i'th bit set\n            count = 0\n            for k in range(n):\n                count += (arr[k] >> i) & 1\n            ans += count * (n - count)\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    totHammingDist(arr) {\n        let n = arr.length, ans = 0;\n\n        for (let i = 0; i < 32; i++) {\n            // Count of the number of elements that have the 'i'th bit set\n            let count = 0;\n            for (let k = 0; k < n; k++) {\n                count += (arr[k] >> i) & 1;\n            }\n            ans += count * (n - count);\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}