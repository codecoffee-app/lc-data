{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704638,
            "title": "Total number of non-decreasing numbers with n digits",
            "titleSlug": "total-number-of-non-decreasing-numbers-with-n-digits5548",
            "content": "<p><span style=\"font-size:18px\">A number is non-decreasing if each of its&nbsp;digits&nbsp;is greater than or equal to the previous digit. For example, 223, 4455567, 899, are non-decreasing numbers.&nbsp;<br />\r\nGiven an integer&nbsp;<strong>N</strong>, find the total number&nbsp;of&nbsp;non-decreasing numbers&nbsp;that have&nbsp;N&nbsp;digits.</span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 1\r\n<strong>Output:</strong> 10\r\n<strong>Explaination:</strong> All the single digit numbers \r\nare non-decreasing. So count is 10.</span></pre>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 2\r\n<strong>Output:</strong> 55\r\n<strong>Explaination:</strong> For number starting with 1 there \r\nis 1 decreasing number 10, for number starting \r\nwith 2 there are 2 decreasing numbers. \r\nSimilarly numbers starting with 3, 4 . . . 9 \r\nthere are 3, 4 . . . 9 decreasing numbers. \r\nTotal 45 decreasing numbers. Total possible \r\nnumbers are 10<sup>2</sup> = 100. So total number of \r\nnon-decreasing numbers are 100-45 = 55.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>count()</strong> which takes the number N as input parameter and return the&nbsp;total number of non-decreasing numbers.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 500</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use the concept of meomoization for time optimization. Use digit dp concept.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution{\r\npublic:\r\n    long long int count(int N){\r\n        // dp[i][j] contains total count of non decreasing\r\n        // numbers ending with digit i and of length j\r\n        long long int dp[10][N+1];\r\n        memset(dp, 0, sizeof(dp));\r\n        \r\n        // Fill table for non decreasing numbers of length 1\r\n        // Base cases 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\r\n        for(int i = 0;i < 10;i++)\r\n            dp[i][1] = 1;\r\n        \r\n        // Fill the table in bottom-up manner\r\n        for(int digit = 0;digit <= 9;digit++){\r\n            // Compute total numbers of non decreasing\r\n            // numbers of length 'len'\r\n            for(int len = 2;len <= N;len++){\r\n                // sum of all numbers of length of len-1\r\n                // in which last digit x is <= 'digit'\r\n                for(int i = 0;i <= digit;i++)\r\n                    dp[digit][len] += dp[i][len-1];\r\n            }\r\n        }\r\n        \r\n        // There total nondecreasing numbers of length N\r\n        // will be dp[0][N] +  dp[1][N] ..+ dp[9][N]\r\n        long long int count = 0;\r\n        for(int i = 0;i < 10;i++)\r\n            count += dp[i][N];\r\n        \r\n        return count;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to count the number of possible triangles.\n    public long count(int N)\n    {\n        // dp[i][j] contains total count of non decreasing\n        // numbers ending with digit i and of length j\n        long[,] dp = new long[10,N+1];\n        \n        // Fill table for non decreasing numbers of length 1\n        // Base cases 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n        for(int i = 0;i < 10;i++)\n            dp[i,1] = 1;\n        \n        // Fill the table in bottom-up manner\n        for(int digit = 0;digit <= 9;digit++){\n            // Compute total numbers of non decreasing\n            // numbers of length 'len'\n            for(int len = 2;len <= N;len++){\n                // sum of all numbers of length of len-1\n                // in which last digit x is <= 'digit'\n                for(int i = 0;i <= digit;i++)\n                    dp[digit,len] += dp[i,len-1];\n            }\n        }\n        \n        // There total nondecreasing numbers of length N\n        // will be dp[0][N] +  dp[1][N] ..+ dp[9][N]\n        long count = 0;\n        for(int i = 0;i < 10;i++)\n            count += dp[i,N];\n        \n        return count;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}