{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710272,
            "title": "Total Number Of Spanning Trees In A Graph",
            "titleSlug": "total-number-of-spanning-trees-in-a-graph",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>connected undirected graph</strong>&nbsp;of <strong>N</strong>&nbsp;</span><span style=\"font-size: 18px;\">vertices</span><span style=\"font-size: 18px;\">&nbsp;and </span><strong style=\"font-size: 18px;\">M</strong><span style=\"font-size: 18px;\">&nbsp;</span><span style=\"font-size: 18px;\">edges</span><span style=\"font-size: 18px;\">. The task is the find the total number of spanning trees possible in the graph.</span></p>\n<p><span style=\"font-size: 18px;\"><br /><strong>Note:&nbsp;</strong>A&nbsp;<strong>spanning tree</strong>&nbsp;is a subset of Graph G, which has all the vertices covered with the minimum possible number of edges. Hence, a&nbsp;<strong>spanning tree</strong>&nbsp;does not have cycles and it cannot be disconnected. By this definition, we can draw a conclusion that every connected and undirected Graph G has at least one&nbsp;<strong>spanning tree.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n<code>N = 6, M = 5\ngraph = {{0, 3}\n\\t   {0, 1}\n\\t   {1, 2}.\n\\t   {1, 5},\n\\t   {3, 4}}</code> <strong>Output: </strong>1 <strong>Explanation:</strong> Only one spanning tree is possible,i.e. the graph itself. {{0, 1}, &nbsp;{0, 3}, &nbsp;{1, 2}, &nbsp;{1, 5}, &nbsp;{3, 4}} </span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>countSpanningTrees</strong><strong>()</strong>&nbsp;which takes two integers&nbsp;<strong>N</strong>&nbsp;and&nbsp;<strong>M</strong>&nbsp;and a 2D matrix denoting the connected edges and returns an integers as output.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N<sup>4</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(N<sup>2</sup>)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<br />N - 1 &lt;= M&nbsp;&lt;= N *(N - 1) / 2<br />0 &lt;= graph[i][0], graph[i][1] &lt;= N - 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a connected undirected graph with N vertices and M edges, determine the total number of spanning trees possible within the graph.\n\nNote: A spanning tree is a subgraph of G that includes all vertices with the minimum possible number of edges, forming a connected, acyclic structure. Every connected and undirected graph has at least one spanning tree.",
                "constraints": [
                    "1 <= N <= 10",
                    "N - 1 <= M <= N * (N - 1) / 2",
                    "0 <= graph[i][0], graph[i][1] <= N - 1"
                ],
                "testcases": [
                    {
                        "input": "N = 6, M = 5\ngraph = {{0, 3},\n\t   {0, 1},\n\t   {1, 2},\n\t   {1, 5},\n\t   {3, 4}}",
                        "output": "1",
                        "explanation": "Only one spanning tree is possible, which is the graph itself: {{0, 1}, {0, 3}, {1, 2}, {1, 5}, {3, 4}}"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try&nbsp;using the degree of the node in the adjacency matrix.</span></p>",
            "<p><span style=\"font-size:18px\">Replace all the diagonal elements with the degree of nodes</span></p>",
            "<p><span style=\"font-size:18px\">&nbsp;Replace all non-diagonal 1&rsquo;s with -1 and calculate co-factor for any element.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    int findDeterminant(vector<vector<int>>&Matrix){\r\n        // Variable to store the determinant value\r\n        int det = 0;\r\n        if (Matrix.size() == 1)\r\n        {\r\n            return Matrix[0][0];\r\n        }\r\n\r\n        else if (Matrix.size() == 2)\r\n        {\r\n            det = (Matrix[0][0] * Matrix[1][1] - Matrix[0][1] * Matrix[1][0]);\r\n            return det;\r\n        }\r\n\r\n        else\r\n        {\r\n\r\n            for (int p = 0; p < Matrix[0].size(); p++)\r\n            {\r\n                vector<vector<int>> tempMatrix;\r\n                for (int i = 1; i < Matrix.size(); i++)\r\n                {\r\n                    vector<int> row;\r\n                    for (int j = 0; j < Matrix[i].size(); j++)\r\n                    {\r\n                        if (j != p)\r\n                        {\r\n                            row.push_back(Matrix[i][j]);\r\n                        }\r\n\r\n                    }\r\n\r\n                    if (row.size() > 0)\r\n                    {\r\n                        tempMatrix.push_back(row);\r\n                    }\r\n\r\n                }\r\n\r\n                det = det + Matrix[0][p] * pow(-1, p) * findDeterminant(tempMatrix);\r\n\r\n            }\r\n\r\n            return det;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    int countSpanningTrees(vector<vector<int>>&graph, int n, int m){\r\n        vector<vector<int>>adjMatrix(n, vector<int>(n, 0));\r\n        for(int i = 0; i < graph.size(); i++){\r\n            int x = graph[i][0];\r\n            int y = graph[i][1];\r\n            adjMatrix[x][y] = 1;\r\n            adjMatrix[y][x] = 1;\r\n        }\r\n        int degree[n] = {0};\r\n\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            for (int j = 0; j < n; j++)\r\n            {\r\n                if (adjMatrix[i][j] == 1)\r\n                {\r\n                    // Calculating degree of each node\r\n                    degree[i]++;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // Updating the values of primary diagonal with degree of the node\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            adjMatrix[i][i] = degree[i];\r\n        }\r\n\r\n        // Replacing all 1 in the matrix which are not present on primary diagonal with -1\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            for (int j = 0; j < n; j++)\r\n            {\r\n                if ((i != j) and adjMatrix[i][j] == 1)\r\n                {\r\n                    adjMatrix[i][j] = -1;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // Submatrix of size (n-1)*(n-1) in which 1st row and 1st column values will not be there\r\n        vector<vector<int>>submatrix(n - 1, vector<int>(n - 1));\r\n\r\n        for (int i = 1; i < n; i++)\r\n        {\r\n            for (int j = 1; j < n; j++)\r\n            {\r\n                submatrix[i - 1][j - 1] = adjMatrix[i][j];\r\n            }\r\n\r\n        }\r\n\r\n        // This will be the answer as (-1)^(1+1) will be equal to 1 only\r\n        return  findDeterminant(submatrix);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}