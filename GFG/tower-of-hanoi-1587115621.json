{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701190,
            "title": "Tower Of Hanoi",
            "titleSlug": "tower-of-hanoi-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">In the Tower of Hanoi puzzle, you are given<strong> n </strong>disks stacked in ascending order (smallest at the top) on the first of three rods. The goal is to move all disks to the third rod following two rules: only one disk can be moved at a time, and a disk can only be placed on top of a larger disk. Given the number of disks n and three rods labeled as from, to, and aux (starting rod, target rod, and auxiliary rod, respectively),&nbsp; returns the total<strong> number of moves </strong>needed to transfer all disks from the starting rod to the target rod.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 2\n<strong>Output: </strong>3<strong>\nExplanation: </strong>For n =2 , steps will be as follows in the example and total 3 steps will be taken.<br /></span><span style=\"font-size: 18px;\">move disk 1 from rod 1 to rod 2<br /></span><span style=\"font-size: 18px;\">move disk 2 from rod 1 to rod 3<br />move disk 1 from rod 2 to rod 3<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3\n<strong>Output: </strong>7<strong>\nExplanation: </strong>For N=3 , steps will be as follows in the example and total 7 steps will be taken.<br />move disk 1 from rod 1 to rod 3<br />move disk 2 from rod 1 to rod 2<br />move disk 1 from rod 3 to rod 2<br />move disk 3 from rod 1 to rod 3<br />move disk 1 from rod 2 to rod 1<br />move disk 2 from rod 2 to rod 3<br />move disk 1 from rod 1 to rod 3<br /></span></pre>\n<pre><span ><strong>Input: </strong>n = 0\n<strong>Output: </strong>0<strong>\nExplanation: </strong>Total 0 steps will be taken.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">0 &lt;= n &lt;= 16</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'n' disks stacked in ascending order on the first of three rods (labeled 'from', 'to', and 'aux'), determine the minimum number of moves required to transfer all disks to the third rod ('to') following the Tower of Hanoi rules: only one disk can be moved at a time, and a disk can only be placed on top of a larger disk.",
                "constraints": [
                    "0 <= n <= 16"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "3",
                        "explanation": "To move 2 disks, first move the smallest disk to the auxiliary rod. Then, move the largest disk to the target rod. Finally, move the smallest disk from the auxiliary rod to the target rod. This requires 3 moves."
                    },
                    {
                        "input": "3",
                        "output": "7",
                        "explanation": "To move 3 disks, the process involves multiple steps moving disks between the rods resulting in a total of 7 moves."
                    },
                    {
                        "input": "0",
                        "output": "0",
                        "explanation": "If there are no disks, no moves are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use recursion to break down the problem by moving <code>n-1</code> disks to an auxiliary rod, then moving the largest disk to the target rod and finally moving the <code>n-1</code> disks to the target rod.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find moves\n    int towerOfHanoi(int n, int from, int to, int aux) {\n        int moves = 0;\n        if (n >= 1) {\n            // recursive call to move top disk from \"from\" to aux in current call\n            moves += towerOfHanoi(n - 1, from, aux, to);\n\n            // increment moves\n            moves++;\n\n            // recursive call to move top disk from aux to \"to\" in current call\n            moves += towerOfHanoi(n - 1, aux, to, from);\n        }\n        return moves;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    public int towerOfHanoi(int n, int from, int to, int aux) {\n        int moves = 0;\n        if (n >= 1) {\n            // recursive call to move top disk from \"from\" to aux in current call\n            moves += towerOfHanoi(n - 1, from, aux, to);\n\n            // increment moves\n            moves++;\n\n            // recursive call to move top disk from aux to \"to\" in current call\n            moves += towerOfHanoi(n - 1, aux, to, from);\n        }\n        return moves;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def towerOfHanoi(self, n, fromm, to, aux):\n        if (n == 0):\n            return 0\n        # recursive call to move top disk from \"from\" to aux in current call\n        moves = 0\n        moves += self.towerOfHanoi(n - 1, fromm, aux, to)\n        moves += 1  # increment moves\n        #recursive call to move top disk from aux to \"to\" in current call\n        moves += self.towerOfHanoi(n - 1, aux, to, fromm)\n        return moves\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} n\n * @param {number} from\n * @param {number} to\n * @param {number} aux\n * @returns {number}\n */\nclass Solution {\n\n    towerOfHanoi(n, from, to, aux) {\n        let moves = 0;\n        if (n >= 1) {\n            // recursive call to move top disk from \"from\" to aux in current call\n            moves += this.towerOfHanoi(n - 1, from, aux, to);\n\n            // increment moves\n            moves++;\n\n            // recursive call to move top disk from aux to \"to\" in current call\n            moves += this.towerOfHanoi(n - 1, aux, to, from);\n        }\n        return moves;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}