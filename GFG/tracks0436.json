{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703318,
            "title": "Tracks",
            "titleSlug": "tracks0436",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr[]</strong> representing the heights of pillars on a track. The track is considered valid if it satisfies the following conditions:</span></p>\n<p><span style=\"font-size: 18px;\">1)There is a constant, non-zero difference between the heights of consecutive pillars.</span></p>\n<p><span style=\"font-size: 18px;\">2)The height of the middle pillar must be exactly 1.</span></p>\n<p><span style=\"font-size: 18px;\">3)The number of pillars on both sides of the middle pillar must be equal, and the heights of the corresponding pillars on each side must be identical.</span></p>\n<p><span style=\"font-size: 18px;\">Return true if the track is valid, otherwise, return false.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 1, 2]\n<strong>Output: </strong>true<br /><strong>Explanation:</strong> The track is valid because it has a constant height difference of 1, the middle pillar is 1, and both sides of the middle pillar have an equal number of identical height pillars.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 3, 2, 3, 4]\n<strong>Output: </strong>false</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />3 &lt;= arr.size()&lt;= 10<sup>6</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` representing the heights of pillars on a track, determine if the track is valid based on the following criteria:\n\n1.  **Constant Difference:** The difference between the heights of consecutive pillars must be constant and non-zero.\n2.  **Middle Pillar:** The height of the middle pillar must be exactly 1.\n3.  **Symmetry:** The number of pillars on both sides of the middle pillar must be equal, and the heights of corresponding pillars on each side must be identical.\n\nReturn `true` if the track is valid; otherwise, return `false`.",
                "constraints": [
                    "3 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2, 1, 2]",
                        "output": "true",
                        "explanation": "The track is valid. The constant difference is 1, the middle pillar's height is 1, and the pillars on either side of the middle pillar are symmetrical."
                    },
                    {
                        "input": "[4, 3, 2, 3, 4]",
                        "output": "false",
                        "explanation": "The track is invalid because the middle pillar's height isn't one."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Ensure the array's size is odd and verify the pattern before and after the middle element based on the difference between consecutive elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if the given array represents a valid pattern or not\n    bool ValidTrack(vector<int>& arr) {\n        int n = arr.size();\n\n        // If the array size is even or the middle element is not 1, return false\n        if (n % 2 == 0 || arr[n / 2] != 1) {\n            return false;\n        }\n\n        // Calculating the difference between the first two elements\n        int k = arr[0] - arr[1];\n\n        // If the difference is 0, the pattern is invalid\n        if (k == 0) {\n            return false;\n        }\n\n        // Checking the pattern in the array\n        for (int i = 0; i < n - 1; i++) {\n            if (i < n / 2) {\n                // Check the pattern before the middle element\n                if (arr[i] != arr[i + 1] + k) {\n                    return false;\n                }\n            } else {\n                // Check the pattern after the middle element\n                if (arr[i] != arr[i + 1] - k) {\n                    return false;\n                }\n            }\n        }\n\n        // If all checks pass, return true\n        return true;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public boolean ValidTrack(int[] arr) {\n        int n = arr.length;\n\n        // If the array size is even or the middle element is not 1, return false\n        if (n % 2 == 0 || arr[n / 2] != 1) {\n            return false;\n        }\n\n        // Calculating the difference between the first two elements\n        int k = arr[0] - arr[1];\n\n        // If the difference is 0, the pattern is invalid\n        if (k == 0) {\n            return false;\n        }\n\n        // Checking the pattern in the array\n        for (int i = 0; i < n - 1; i++) {\n            if (i < n / 2) {\n                // Check the pattern before the middle element\n                if (arr[i] != arr[i + 1] + k) {\n                    return false;\n                }\n            } else {\n                // Check the pattern after the middle element\n                if (arr[i] != arr[i + 1] - k) {\n                    return false;\n                }\n            }\n        }\n\n        // If all checks pass, return true\n        return true;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def ValidTrack(self, arr):\n        n = len(arr)\n\n        # If the array size is even or the middle element is not 1, return False\n        if n % 2 == 0 or arr[n // 2] != 1:\n            return False\n\n        # Calculating the difference between the first two elements\n        k = arr[0] - arr[1]\n\n        # If the difference is 0, the pattern is invalid\n        if k == 0:\n            return False\n\n        # Checking the pattern in the array\n        for i in range(n - 1):\n            if i < n // 2:\n                # Check the pattern before the middle element\n                if arr[i] != arr[i + 1] + k:\n                    return False\n            else:\n                # Check the pattern after the middle element\n                if arr[i] != arr[i + 1] - k:\n                    return False\n\n        # If all checks pass, return True\n        return True\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    ValidTrack(arr) {\n        const n = arr.length;\n\n        // If the array size is even or the middle element is not 1, return false\n        if (n % 2 === 0 || arr[Math.floor(n / 2)] !== 1) {\n            return false;\n        }\n\n        // Calculating the difference between the first two elements\n        const k = arr[0] - arr[1];\n\n        // If the difference is 0, the pattern is invalid\n        if (k === 0) {\n            return false;\n        }\n\n        // Checking the pattern in the array\n        for (let i = 0; i < n - 1; i++) {\n            if (i < Math.floor(n / 2)) {\n                // Check the pattern before the middle element\n                if (arr[i] !== arr[i + 1] + k) {\n                    return false;\n                }\n            } else {\n                // Check the pattern after the middle element\n                if (arr[i] !== arr[i + 1] - k) {\n                    return false;\n                }\n            }\n        }\n\n        // If all checks pass, return true\n        return true;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}