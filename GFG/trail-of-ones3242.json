{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704354,
            "title": "Trail of ones",
            "titleSlug": "trail-of-ones3242",
            "content": "<p><span style=\"font-size: 18px;\">Given a number <strong>n</strong>, find the number of binary strings of length <strong>n </strong>that contain consecutive 1's in them. Since the number can be very large, return the answer after modulo with 1e9+7.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong> <span style=\"font-size: 18px;\">n = 2</span>\n<strong><span style=\"font-size: 18px;\">Output:</span></strong> <span style=\"font-size: 18px;\">1</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span></strong> <span style=\"font-size: 18px;\">There are 4 strings of </span><span style=\"font-size: 18px;\">length 2, the strings are </span><span style=\"font-size: 18px;\">00, 01, 10, and 11. Only </span><span style=\"font-size: 18px;\">the string 11 has </span><span style=\"font-size: 18px;\">consecutive 1's.<br /></span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Input</strong>: n = 3\n<strong>Output</strong>: 3\n<strong>Explanation</strong>: There are 8 strings of length 3, the strings are 000, 001, 010, 011, 100, 101, 110 and 111.  The strings with consecutive 1's are 011, 110 and 111.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 3:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">n = 5</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">19</span>\n<strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">There are 19 strings</span> <span style=\"font-size: 18px;\">having consecutive 1's.\n</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Your Task:<br /></span></strong><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function numberOfConsecutiveOnes() which takes an integer n and returns the number of binary strings<strong>&nbsp;</strong>that contain consecutive 1s in them.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong><br />2 &lt;= <strong>n </strong>&lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, determine the count of binary strings of length `n` that contain at least one occurrence of consecutive 1s. Since the answer can be very large, return the result modulo 10^9 + 7.",
                "constraints": [
                    "2 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "1",
                        "explanation": "There are four possible binary strings of length 2: \"00\", \"01\", \"10\", and \"11\". Only \"11\" contains consecutive 1s. Therefore, the count is 1."
                    },
                    {
                        "input": "3",
                        "output": "3",
                        "explanation": "There are eight possible binary strings of length 3: \"000\", \"001\", \"010\", \"011\", \"100\", \"101\", \"110\", and \"111\". The strings with consecutive 1s are \"011\", \"110\", and \"111\". Therefore, the count is 3."
                    },
                    {
                        "input": "5",
                        "output": "19",
                        "explanation": "There are 32 possible binary strings of length 5. 19 of them contains consecutive 1s."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>It is like&nbsp;reverse problem of counting strings without consecutive 1&rsquo;s can be solved using Dynamic Programming.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to count the number of binary strings of length N without consecutive\n    // ones\n\n    // Function to calculate power with modulo\n    long long power(long long a, long long b, long long mod) {\n        long long ans = 1;\n        while (b > 0) {\n            if (b & 1) {\n                ans *= a;\n                ans %= mod;\n            }\n            a *= a;\n            a %= mod;\n            b >>= 1;\n        }\n        return ans;\n    }\n\n    // Function to calculate the number of binary strings without consecutive ones\n    int numberOfConsecutiveOnes(int n) {\n\n        int a[n], b[n];\n        a[0] = b[0] = 1;\n        long long mod = 1e9 + 7;\n        // Generating the count of strings ending with 0 and strings ending with 1\n        for (int i = 1; i < n; i++) {\n            a[i] = (a[i - 1] + b[i - 1]) % mod;\n            b[i] = a[i - 1];\n        }\n\n        // Subtracting the count of strings with consecutive ones from 2^N\n        return (power(2, n, mod) + mod - (a[n - 1] + b[n - 1]) % mod) % mod;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to calculate power with modulo\n    private static long power(long a, long b, long mod) {\n        long ans = 1;\n        while (b > 0) {\n            if ((b & 1) == 1) {\n                ans = (ans * a) % mod;\n            }\n            a = (a * a) % mod;\n            b >>= 1;\n        }\n        return ans;\n    }\n\n    // Function to calculate the number of binary strings without consecutive ones\n    static int numberOfConsecutiveOnes(int n) {\n        long mod = 1000000007;\n        if (n == 0) return 0; // Special case for n = 0\n\n        long[] a = new long[n];\n        long[] b = new long[n];\n        a[0] = 1;\n        b[0] = 1;\n\n        // Generating the count of strings ending with 0 and strings ending with 1\n        for (int i = 1; i < n; i++) {\n            a[i] = (a[i - 1] + b[i - 1]) % mod;\n            b[i] = a[i - 1];\n        }\n\n        // Subtracting the count of strings with consecutive ones from 2^N\n        return (int)((power(2, n, mod) + mod - (a[n - 1] + b[n - 1]) % mod) % mod);\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def power(self, a, b, mod):\n        ans = 1\n        while b > 0:\n            if b & 1:\n                ans *= a\n                ans %= mod\n            a *= a\n            a %= mod\n            b >>= 1\n        return ans\n\n    def numberOfConsecutiveOnes(self, n):\n        mod = int(1e9 + 7)\n\n        # If n is 1, then there are only two strings: \"0\" and \"1\"\n        if n == 1:\n            return 1\n\n        a = [0] * n\n        b = [0] * n\n        a[0] = b[0] = 1\n\n        # Generating the count of strings ending with 0 and strings ending with 1\n        for i in range(1, n):\n            a[i] = (a[i - 1] + b[i - 1]) % mod\n            b[i] = a[i - 1]\n\n        # Subtracting the count of strings with consecutive ones from 2^N\n        return (self.power(2, n, mod) + mod -\n                (a[n - 1] + b[n - 1]) % mod) % mod\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}