{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706065,
            "title": "Transfiguration",
            "titleSlug": "transfiguration--141631",
            "content": "<p><span style=\"font-size:18px\">Professor McGonagall teaches transfiguration at Hogwarts. She has given Harry the task of changing himself into a cat. She explains that the trick is to analyze your own DNA and change it into the DNA&nbsp;of a cat. The transfigure spell can be used to pick any one character from the DNA string, remove it and insert it in the beginning.&nbsp;<br />\nHelp Harry calculates minimum number of times he needs to use the spell to change himself into a cat.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: \n</strong>A = &quot;GEEKSFORGEEKS&quot; \nB = &quot;FORGEEKSGEEKS&quot;</span>\n<span style=\"font-size:18px\"><strong>Output:</strong> 3</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong>The conversion can take place \nin 3 operations:\n1. Pick &#39;R&#39; and place it at the front, \n&nbsp;  A=&quot;RGEEKSFOGEEKS&quot;\n2. Pick &#39;O&#39; and place it at the front, \n&nbsp;  A=&quot;ORGEEKSFGEEKS&quot;\n3. Pick &#39;F&#39; and place it at the front, \n&nbsp;  A=&quot;FORGEEKSGEEKS&quot;</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: \n</strong>A = &quot;ABC&quot; \nB = &quot;BCA&quot;</span>\n<span style=\"font-size:18px\"><strong>Output:</strong> 2</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong> The conversion can take place \nin 2 operations:\n1. Pick &#39;C&#39; and place it at the front, \n&nbsp;  A = &quot;CAB&quot;\n2. Pick &#39;B&#39; and place it at the front, \n&nbsp;  A = &quot;BCA&quot;</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: </strong>&nbsp;<br />\nYou don&#39;t need to read input or print anything. Complete the function <strong>transfigure()</strong> which takes strings <strong>A</strong> and <strong>B</strong> as input parameters and returns the minimum number of spells needed. If it is not possible to convert <strong>A</strong> to <strong>B</strong> then return -1.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(max(|A|, |B|))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; |A|, |B| &le; 10<sup>5</sup><br />\nA and B consists of lowercase and uppercase letters of english alphabet only.</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Professor McGonagall has challenged Harry to transfigure himself into a cat! To succeed, Harry must alter his DNA string to match a cat's DNA string. He can use a transfiguration spell that removes a single character from his DNA and inserts it at the beginning of the string.  Your task is to determine the minimum number of times Harry needs to use the spell to transform his DNA into the desired cat DNA.",
                "constraints": [
                    "1 <= |A|, |B| <= 10^5",
                    "A and B consist of lowercase and uppercase letters of the English alphabet only."
                ],
                "testcases": [
                    {
                        "input": "A = \"GEEKSFORGEEKS\"\nB = \"FORGEEKSGEEKS\"",
                        "output": "3",
                        "explanation": "To transform 'GEEKSFORGEEKS' to 'FORGEEKSGEEKS':\n1. Move 'R' to the front: 'RGEEKSFOGEEKS'\n2. Move 'O' to the front: 'ORGEEKSFGEEKS'\n3. Move 'F' to the front: 'FORGEEKSGEEKS'"
                    },
                    {
                        "input": "A = \"ABC\"\nB = \"BCA\"",
                        "output": "2",
                        "explanation": "To transform 'ABC' to 'BCA':\n1. Move 'C' to the front: 'CAB'\n2. Move 'B' to the front: 'BCA'"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Firsly, we need to check whether such a conversion is possible or not, the frequency of all the elements in A must be same as the frequency of all the elements in B.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    \n    public:\n    //Function to find minimum number of operations to transfigure A into B.\n    int transfigure (string A, string B)\n    {\n    \t//if length of A and B are not equal, return -1\n    \tif (A.length () != B.length ())\n    \t{\n    \t\treturn -1;\n    \t}\n    \n    \t//map to store frequency of characters in string A\n    \tunordered_map <char, int> m;\n    \tint n = A.length ();\n    \n    \t//counting the frequency of each character in string A\n    \tfor\t(int i = 0; i < n; i++)\n    \t\tm[A[i]]++;\n    \n    \t//decreasing the frequency of characters in string A\n    \t//based on frequency in string B\n    \tfor (int i = 0; i < n; i++)\n    \t\tif (m[B[i]]--);\n    \n    \t//iterating over the map to check if all characters have\n    \t//been transfigured\n    \tfor (auto i : m)\n    \t{\n    \t\tif (i.second != 0)\n    \t\t{\n    \t\t\treturn -1;\n    \t\t}\n    \t}\n    \n    \t//two pointers approach to count the number of operations\n    \tint i = n - 1, j = n - 1;\n    \tint res = 0;\n    \twhile (i >= 0 and j >= 0)\n    \t{\n    \t\t//move pointer i backwards until A[i] matches B[j]\n    \t\t//counting number of operations required\n    \t\twhile (i >= 0 and A[i] != B[j])\n    \t\t{\n    \t\t\ti--;\n    \t\t\tres++;\n    \t\t}\n    \n    \t\t//move both pointers backwards\n    \t\ti--;\n    \t\tj--;\n    \t}\n    \n    \t//return total number of operations required\n    \treturn res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    \n    // Function to find the minimum number of operations\n    // required to transform one string to another.\n    int transfigure (String A, String B) {\n        \n        // If lengths of both strings are not equal,\n        // it is not possible to transform one string to another.\n        if (A.length () != B.length ()) {\n            return -1;\n        }\n        \n        // Creating a HashMap to store the frequency of characters in string A.\n        HashMap<Character,Integer> m = new HashMap<Character,Integer>();\n        int n = A.length ();\n        \n        // Counting the frequency of characters in string A and storing them in HashMap.\n        for (int i = 0; i < n; i++) {\n            if(m.containsKey(A.charAt(i))) {\n                m.put(A.charAt(i), m.get(A.charAt(i)) + 1);\n            } else {\n                m.put(A.charAt(i),1);\n            }\n        }\n    \n        // Decreasing the frequency of characters in string B from the frequency in the HashMap.\n        for(int i = 0; i < n; i++) {\n            if(m.containsKey(B.charAt(i))) {\n                m.put(B.charAt(i),m.get(B.charAt(i)) - 1);\n            }\n        }\n        \n        // Checking if there are any remaining characters in the HashMap with non-zero frequency.\n        for(Map.Entry<Character,Integer> entry : m.entrySet()) {\n            if (entry.getValue() != 0) {\n                return -1;\n            }\n        }\n    \t\n        // Initializing two pointers i and j at the end of the strings.\n        int i = n - 1, j = n - 1;\n    \t\n        // Variable to store the minimum number of operations required.\n        int res = 0;\n    \t\n        // Moving the pointers from the end to the start of the strings.\n        while (i >= 0 && j >= 0) {\n            \n            // If the characters at the current positions are not equal,\n            // moving the pointer in string A and increasing the result by 1.\n            while (i >= 0 && A.charAt(i) != B.charAt(j)) {\n                i--;\n                res++;\n            }\n    \n            // Moving both pointers towards the start of the strings.\n            i--;\n            j--;\n        }\n    \n        // Returning the minimum number of operations required.\n    \treturn res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def transfigure(self, A, B): \n        m = len(A) \n        n = len(B) \n    \n        # Check whether conversion is possible or not \n        if n != m: \n            return -1\n    \n        count = {}\n        keys = count.keys()\n    \n        # count characters in A \n        for i in A:\n            if i in keys:\n                count[i] += 1\n            else:\n                count[i] = 1\n    \n        # subtract count for every char in B \n        for i in B:\n            if i in keys:\n                count[i] -= 1\n            else:\n                count[i] = 1\n    \n        # Check if all counts become 0 \n        for i in keys:  \n            if count[i]: \n                return -1\n    \n        # Calculate the number of operations required \n        res = 0\n        i = n-1\n        j = n-1 \n        while i >= 0: \n        \n            # if there is a mismatch, then keep incrementing \n            # result 'res' until B[j] is not found in A[0..i] \n            while i>= 0 and A[i] != B[j]: \n                i -= 1\n                res += 1\n    \n            # if A[i] and B[j] match \n            if i >= 0: \n                i -= 1\n                j -= 1\n    \n        return res ",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n  transfigure(A, B) {\n    if (A.length !== B.length) {\n      return -1;\n    }\n  \n    const m = new Map();\n    const n = A.length;\n  \n    for (let i = 0; i < n; i++) {\n      if (m.has(A[i])) {\n        m.set(A[i], m.get(A[i]) + 1);\n      } else {\n        m.set(A[i], 1);\n      }\n    }\n  \n    for (let i = 0; i < n; i++) {\n      if (m.has(B[i])) {\n        if (m.get(B[i]) > 0) {\n          m.set(B[i], m.get(B[i]) - 1);\n        } else {\n          return -1;\n        }\n      } else {\n        return -1;\n      }\n    }\n  \n    let i = n - 1;\n    let j = n - 1;\n    let res = 0;\n    while (i >= 0 && j >= 0) {\n      while (i >= 0 && A[i] !== B[j]) {\n        i--;\n        res++;\n      }\n  \n      i--;\n      j--;\n    }\n  \n    return res;\n  }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int transfigure(string A, string B)\n    {\n        //if length of A and B are not equal, return -1\n        if (A.Length != B.Length)\n        {\n            return -1;\n        }\n\n        //dictionary to store frequency of characters in string A\n        Dictionary<char, int> m = new Dictionary<char, int>();\n        int n = A.Length;\n\n        //counting the frequency of each character in string A\n        for (int k = 0; k < n; k++)\n        {\n            if (!m.ContainsKey(A[k]))\n            {\n                m[A[k]] = 1;\n            }\n            else\n            {\n                m[A[k]]++;\n            }\n        }\n\n        //decreasing the frequency of characters in string A\n        //based on frequency in string B\n        for (int k = 0; k < n; k++)\n        {\n            if (m.ContainsKey(B[k]))\n            {\n                m[B[k]]--;\n            }\n        }\n\n        //iterating over the dictionary to check if all characters have\n        //been transfigured\n        foreach (KeyValuePair<char, int> pair in m)\n        {\n            if (pair.Value != 0)\n            {\n                return -1;\n            }\n        }\n\n        //two pointers approach to count the number of operations\n        int i = n - 1, j = n - 1;\n        int res = 0;\n        while (i >= 0 && j >= 0)\n        {\n            //move pointer i backwards until A[i] matches B[j]\n            //counting number of operations required\n            while (i >= 0 && A[i] != B[j])\n            {\n                i--;\n                res++;\n            }\n\n            //move both pointers backwards\n            i--;\n            j--;\n        }\n\n        //return total number of operations required\n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}