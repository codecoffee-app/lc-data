{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703385,
            "title": "Transform the array",
            "titleSlug": "transform-the-array4344",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> containing integers, zero is considered an invalid number, and the rest of the other numbers are valid. If the two nearest valid numbers are equal, then double the value of the first one and make the second number 0. At last, move all the valid numbers on the left.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 4, 5, 0, 0, 5, 4, 8, 6, 0, 6, 8]\n<strong>Output:</strong> [2, 4, 10, 4, 8, 12, 8, 0, 0, 0, 0, 0]\n<strong>Explanation</strong>: After performing above given operation we get array as [2, 4, 10, 0, 0, 0, 4, 8, 12, 0, 0, 8], then shifting all zero's to the right, we get resultant array as - [2, 4, 10, 4, 8, 12, 8, 0, 0, 0, 0, 0] </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, 0]\n<strong>Output:</strong> [0, 0]\n<strong>Explanation:</strong> All elements in the array are invalid .</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size()&le; 10<sup>6<br /></sup>1 &le; arr[i]&le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]`, where zero is considered invalid and all other numbers are valid. If two adjacent valid numbers are equal, double the value of the first number and set the second number to zero. Finally, move all valid numbers to the left side of the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2, 4, 5, 0, 0, 5, 4, 8, 6, 0, 6, 8]",
                        "output": "[2, 4, 10, 4, 8, 12, 8, 0, 0, 0, 0, 0]",
                        "explanation": "The initial steps involve doubling adjacent equal valid numbers and setting the second to zero. Subsequently, all non-zero elements (valid numbers) are shifted to the left, and zeros are moved to the right."
                    },
                    {
                        "input": "[0, 0]",
                        "output": "[0, 0]",
                        "explanation": "All elements in the array are invalid (zero)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Traverse the array, update prev and j for non-zero values, double the value of duplicates, swap them with the earliest index j, set duplicates to zero, and keep track of zero counts.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n\n  private:\n    // Function to swap two integers\n    void swap(int *a, int *b) {\n        int temp;\n        temp = *a;\n        *a = *b;\n        *b = temp;\n    }\n\n  public:\n\n    // Function to rearrange the given array\n    vector<int> valid(vector<int> &arr) {\n        vector<int> ans;\n        int n = arr.size();\n        int i, j = 0, prev = 0, c = 0;\n\n        // Iterating over the array\n        for (i = 0; i < n; i++) {\n            if (arr[i] > 0) {\n                // If current element is equal to the previous element\n                if (arr[i] == prev) {\n                    arr[i] += arr[i];\n                    prev = arr[i];\n\n                    // Swapping the current element with the element at index j\n                    swap(&arr[i], &arr[j]);\n                    arr[i] = 0;\n\n                    // Incrementing the count of elements that are 0\n                    c++;\n                } else {\n                    prev = arr[i];\n                    j = i;\n                }\n            } else {\n                // Incrementing the count of elements that are 0\n                c++;\n            }\n        }\n\n        // Adding the non-zero elements to the resulting vector\n        for (i = 0; i < n; i++) {\n            if (arr[i] > 0)\n                ans.push_back(arr[i]);\n        }\n\n        // Adding the 0 elements to the resulting vector based on count\n        while (c--)\n            ans.push_back(0);\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to swap two integers\n    private void swap(int[] arr, int a, int b) {\n        int temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n    }\n\n    public ArrayList<Integer> valid(int[] arr) {\n        int n = arr.length;\n        ArrayList<Integer> ans = new ArrayList<>();\n        int j = 0, prev = 0, c = 0;\n\n        // Iterating over the array\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > 0) {\n                // If current element is equal to the previous element\n                if (arr[i] == prev) {\n                    arr[i] += arr[i];\n                    prev = arr[i];\n\n                    // Swapping the current element with the element at index j\n                    swap(arr, i, j);\n                    arr[i] = 0;\n\n                    // Incrementing the count of elements that are 0\n                    c++;\n                } else {\n                    prev = arr[i];\n                    j = i;\n                }\n            } else {\n                // Incrementing the count of elements that are 0\n                c++;\n            }\n        }\n\n        // Adding the non-zero elements to the resulting list\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > 0) ans.add(arr[i]);\n        }\n\n        // Adding the 0 elements to the resulting list based on count\n        while (c-- > 0) ans.add(0);\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def swap(self, a, b):\n        temp = a\n        a = b\n        b = temp\n        return a, b\n\n    def valid(self, arr):\n        ans = []\n        n = len(arr)\n        i, j = 0, 0\n        prev = 0\n        c = 0\n\n        # Iterating over the array\n        while i < n:\n            if arr[i] > 0:\n                # If current element is equal to the previous element\n                if arr[i] == prev:\n                    arr[i] += arr[i]\n                    prev = arr[i]\n\n                    # Swapping the current element with the element at index j\n                    arr[i], arr[j] = self.swap(arr[i], arr[j])\n                    arr[i] = 0\n\n                    # Incrementing the count of elements that are 0\n                    c += 1\n                else:\n                    prev = arr[i]\n                    j = i\n            else:\n                # Incrementing the count of elements that are 0\n                c += 1\n            i += 1\n\n        # Adding the non-zero elements to the resulting list\n        for i in range(n):\n            if arr[i] > 0:\n                ans.append(arr[i])\n\n        # Adding the 0 elements to the resulting list based on count\n        ans.extend([0] * c)\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to swap two elements\n    swap(a, b) {\n        let temp = a;\n        a = b;\n        b = temp;\n        return [ a, b ];\n    }\n\n    valid(arr) {\n        let ans = [];\n        let n = arr.length;\n        let i = 0, j = 0, prev = 0, c = 0;\n\n        // Iterating over the array\n        while (i < n) {\n            if (arr[i] > 0) {\n                // If current element is equal to the previous element\n                if (arr[i] === prev) {\n                    arr[i] += arr[i];\n                    prev = arr[i];\n\n                    // Swapping the current element with the element at index j\n                    [arr[i], arr[j]] = this.swap(arr[i], arr[j]);\n                    arr[i] = 0;\n\n                    // Incrementing the count of elements that are 0\n                    c++;\n                } else {\n                    prev = arr[i];\n                    j = i;\n                }\n            } else {\n                // Incrementing the count of elements that are 0\n                c++;\n            }\n            i++;\n        }\n\n        // Adding the non-zero elements to the resulting array\n        for (let i = 0; i < n; i++) {\n            if (arr[i] > 0) {\n                ans.push(arr[i]);\n            }\n        }\n\n        // Adding the 0 elements to the resulting array based on count\n        for (let i = 0; i < c; i++) {\n            ans.push(0);\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}