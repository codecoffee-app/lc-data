{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713144,
            "title": "Transform to Sum Tree",
            "titleSlug": "transform-to-sum-tree--170645",
            "content": "<p><span style=\"font-size:18px\">Given a Binary Tree of size N , where each node can have positive or negative values. Convert this to a tree where value of each node will be the sum of the values of all the nodes in left and right sub trees of the original tree. The values of leaf nodes are changed to 0.<br />\r\n<strong>Note: </strong>You have to modify the given tree in-place.</span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n\\t\\t 10\r\n\\t    /\\t\\\r\n\\t  -2\\t  6\r\n\\t /   \\     /  \\\r\n\\t8    -4   7    5</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n\\t\\t20\r\n\\t    /     \\\r\n\\t  4\\t  12\r\n\\t /  \\     /  \\\r\n     0     0   0    0</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">\\t     (4-2+12+6)\r\n\\t    /\\t     \\\r\n\\t(8-4)\\t    (7+5)\r\n\\t /   \\\\t   /  \\\r\n\\t0     0\\t 0    0</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n\\t\\t10\r\n\\t  /\\t  \\\r\n\\t-2\\t     6\r\n     /   \\\\t  /  \\\r\n    8    -4\\t7     5</span>\r\n    <span style=\"font-size:18px\">/ \\   / \\    / \\   / \\\r\n&nbsp; 2  -2 3  -5  9  -8 2   8</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n\\t\\t29\r\n\\t  /\\t  \\\r\n\\t 2\\t    23\r\n     /  \\\\t  /  \\\r\n    0   -2\\t1    10\r\n&nbsp;  / \\  / \\    / \\   / \\</span>\r\n   <span style=\"font-size:18px\">0  0 0   0  0   0 0   0</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">\\t\\t     (-2+6+8-4+7+5+2-2+3-5+9-8+2+8)\r\n\\t\\t   /\\t\\t\\t\\t\\t  \\\r\n\\t    (8-4+2-2+3-5)\\t\\t\\t  (7+5+9-8+2+8)\r\n\\t    /\\t\\\\t\\t\\t\\t    /\\t\\\\t \r\n\\t (2-2)   (3-5)\\t\\t\\t\\t(9-8)    (2+8)</span>\r\n\\t  <span style=\"font-size:18px\">/     \\  /    \\\\t\\t\\t    /     \\   /     \\</span>\r\n\\t<span style=\"font-size:18px\"> 0\\t0 0\\t0\\t\\t\\t 0\\t  0 0\\t 0</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task</strong></span><strong>:&nbsp; </strong><br />\r\n<span style=\"font-size:18px\">You dont need to read input or print anything. Complete the function<strong> toSumTree()</strong> which takes root node as input parameter and modifies the given tree in-place.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong> If you click on Compile and Test the output will be the in-order traversal of the modified tree.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(N)<br />\r\n<strong>Expected Auxiliary Space: </strong>O(height of tree)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N&nbsp;&le; 10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of size N, where each node has a positive or negative value, convert it into a sum tree. In a sum tree, the value of each node is the sum of the values of all nodes in its left and right subtrees in the original tree. Leaf nodes in the sum tree have a value of 0. You must modify the tree in-place.",
                "constraints": [
                    "1 \u2264 N \u2264 10^4"
                ],
                "testcases": [
                    {
                        "input": "    10\n   /  \\\n  -2   6\n /   \\ /  \\\n8    -4 7    5",
                        "output": "    20\n   /   \\\n  4   12\n /  \\ /  \\\n0    0 0    0",
                        "explanation": "The root node becomes the sum of its subtrees ( -2 + 6 + 8 - 4 + 7 + 5 = 20). The left child becomes the sum of its subtrees (8 - 4 = 4). The right child becomes the sum of its subtrees (7 + 5 = 12). Leaf nodes become 0."
                    },
                    {
                        "input": "    10\n   /  \\\n -2   6\n/   \\ /  \\\n8    -4 7    5\n/ \\ / \\ / \\ / \\\n2  -2 3  -5 9  -8 2   8",
                        "output": "    29\n   /  \\\n  2   23\n /  \\ /  \\\n0   -2 1   10\n/ \\ / \\ / \\ / \\\n0 0 0 0 0 0 0 0",
                        "explanation": "The root node becomes the sum of its subtrees (-2 + 6 + 8 - 4 + 7 + 5 + 2 - 2 + 3 - 5 + 9 - 8 + 2 + 8 = 29). The left child becomes the sum of its subtrees (8 - 4 + 2 - 2 + 3 - 5 = 2). The right child becomes the sum of its subtrees (7 + 5 + 9 - 8 + 2 + 8 = 23). Further node's value is the sum of all of its subtree. Leaf nodes become 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Recursively call for left and right subtrees and change the value of current node as sum of the values returned by the recursive calls.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "samsung",
            "factset",
            "walmart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end Complete function template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    // Convert a given tree to a tree where  \r\n    // every node contains sum of values of  \r\n    // nodes in left and right subtrees in the original tree\r\n    int toSumTreeUtil(Node *node)  \r\n    {  \r\n        // Base case  \r\n        if(node == NULL)  \r\n        return 0;  \r\n      \r\n        // Store the old value  \r\n        int old_val = node->data;  \r\n      \r\n        // Recursively call for left and \r\n        // right subtrees and store the sum as  \r\n        // new value of this node  \r\n        node->data = toSumTreeUtil(node->left) + toSumTreeUtil(node->right);  \r\n      \r\n        // Return the sum of values of nodes \r\n        // in left and right subtrees and  \r\n        // old_value of this node  \r\n        return node->data + old_val;  \r\n    } \r\n    \r\n    void toSumTree(Node *node)\r\n    {\r\n        toSumTreeUtil(node);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end Complete function for JAVA\r\n\r\nclass Solution\r\n{\r\n    // Convert a given tree to a tree where every node contains sum of \r\n    // values of nodes in left and right subtrees in the original tree \r\n    public int toSumTreeUtil(Node node)  \r\n    { \r\n        // Base case \r\n        if (node == null) \r\n            return 0; \r\n   \r\n        // Store the old value \r\n        int old_val = node.data; \r\n   \r\n        // Recursively call for left and right subtrees and store the sum \r\n        // as new value of this node \r\n        node.data = toSumTreeUtil(node.left) + toSumTreeUtil(node.right); \r\n   \r\n        // Return the sum of values of nodes in left and right subtrees \r\n        // and old_value of this node \r\n        return node.data + old_val; \r\n    } \r\n\r\n    public void toSumTree(Node node)\r\n    {\r\n        toSumTreeUtil(node);\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end Complete function template for Python\r\n\r\nclass Solution:\r\n    def toSumTree(self, Node) : \r\n          \r\n        # Base case  \r\n        if(Node == None) : \r\n            return 0\r\n      \r\n        # Store the old value  \r\n        old_val = Node.data  \r\n      \r\n        # Recursively call for left and  \r\n        # right subtrees and store the sum as  \r\n        # new value of this node  \r\n        Node.data = self.toSumTree(Node.left) +  self.toSumTree(Node.right)  \r\n      \r\n        # Return the sum of values of nodes  \r\n        # in left and right subtrees and  \r\n        # old_value of this node  \r\n        return Node.data + old_val  ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\n//User function Template for \n\n/*\nclass Node\n{\n    constructor(x){\n        this.data=x;\n        this.left=null;\n        this.right=null;\n    }\n}\n*/\n\nclass Solution {\n  // Convert a given tree to a tree where  \n  // every node contains sum of values of  \n  // nodes in left and right subtrees in the original tree\n  toSumTreeUtil(node) { \n        // Base case  \n        if(node == null)  \n        return 0;  \n    \n        // Store the old value \n        let old_val = node.data; \n    \n        // Recursively call for left and \n        // right subtrees and store the sum as  \n        // new value of this node  \n        node.data = this.toSumTreeUtil(node.left) + this.toSumTreeUtil(node.right);  \n    \n        // Return the sum of values of nodes \n        // in left and right subtrees and  \n        // old_value of this node  \n        return node.data + old_val;  \n  } \n\n  toSumTree(node) {\n      return this.toSumTreeUtil(node);\n  }\n}\nmodule.exports = { Solution };",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}