{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700185,
            "title": "Transform to Sum Tree",
            "titleSlug": "transform-to-sum-tree",
            "content": "<p><span style=\"font-size:18px\">Given a Binary Tree of size N , where each node can have positive or negative values. Convert this to a tree where each node contains the sum of the left and right sub trees of the original tree. The values of leaf nodes are changed to 0.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\n\\t\\t 10\n\\t    /\\t\\\n\\t  -2\\t  6\n\\t /   \\     /  \\\n     8     -4   7    5</span>\n\n<span style=\"font-size:18px\"><strong>Output:</strong>\n\\t\\t20\n\\t    /    \\\n\\t  4\\t  12\n\\t /  \\     /  \\\n     0     0   0    0</span>\n\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\n\n<span style=\"font-size:18px\">\\t     (4-2+12+6)\n\\t    /\\t     \\\n\\t(8-4)\\t    (7+5)\n\\t /   \\\\t   /  \\\n\\t0     0\\t 0    0</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function<strong> toSumTree()</strong> which takes root node as input parameter and modifies the given tree in-place.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note:</strong> If you click on Compile and Test the output will be the in-order traversal of the modified tree.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(N)<br />\n<strong>Expected Auxiliary Space: </strong>O(height of tree)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N&nbsp;&le; 10<sup>4</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of size N, where each node can have positive or negative values, convert it to a sum tree. In a sum tree, each node contains the sum of the values in its left and right subtrees in the original tree. Leaf nodes should have their values changed to 0.",
                "constraints": [
                    "1 <= N <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "    10\n   /  \\\n -2   6\n / \\  / \\\n8  -4 7  5",
                        "output": "    20\n   /  \\\n 4   12\n / \\  / \\\n0   0 0  0",
                        "explanation": "The root node becomes the sum of all nodes in the original tree (10 - 2 + 6 + 8 - 4 + 7 + 5 = 30, however, because the final root node has to be sum of left and right subtree values 4 + 12 = 16. The left subtree's root (-2) becomes the sum of its subtrees (8 - 4 = 4). The right subtree's root (6) becomes the sum of its subtrees (7 + 5 = 12).  Leaf nodes (8, -4, 7, 5) become 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Recursively call for left and right subtrees and change the value of current node as sum of the values returned by the recursive calls.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "samsung",
            "factset",
            "walmart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\n//Back-end Complete function template for C++\n\nclass Solution {\n  public:\n    // Convert a given tree to a tree where  \n    // every node contains sum of values of  \n    // nodes in left and right subtrees in the original tree\n    int toSumTreeUtil(Node *node)  \n    {  \n        // Base case  \n        if(node == NULL)  \n        return 0;  \n      \n        // Store the old value  \n        int old_val = node->data;  \n      \n        // Recursively call for left and \n        // right subtrees and store the sum as  \n        // new value of this node  \n        node->data = toSumTreeUtil(node->left) + toSumTreeUtil(node->right);  \n      \n        // Return the sum of values of nodes \n        // in left and right subtrees and  \n        // old_value of this node  \n        return node->data + old_val;  \n    } \n    \n    void toSumTree(Node *node)\n    {\n        toSumTreeUtil(node);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end Complete function for JAVA\n\nclass Solution\n{\n    // Convert a given tree to a tree where every node contains sum of \n    // values of nodes in left and right subtrees in the original tree \n    public int toSumTreeUtil(Node node)  \n    { \n        // Base case \n        if (node == null) \n            return 0; \n   \n        // Store the old value \n        int old_val = node.data; \n   \n        // Recursively call for left and right subtrees and store the sum \n        // as new value of this node \n        node.data = toSumTreeUtil(node.left) + toSumTreeUtil(node.right); \n   \n        // Return the sum of values of nodes in left and right subtrees \n        // and old_value of this node \n        return node.data + old_val; \n    } \n\n    public void toSumTree(Node node)\n    {\n        toSumTreeUtil(node);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end Complete function template for Python\n\nclass Solution:\n    def toSumTree(self, Node) : \n          \n        # Base case  \n        if(Node == None) : \n            return 0\n      \n        # Store the old value  \n        old_val = Node.data  \n      \n        # Recursively call for left and  \n        # right subtrees and store the sum as  \n        # new value of this node  \n        Node.data = self.toSumTree(Node.left) +  self.toSumTree(Node.right)  \n      \n        # Return the sum of values of nodes  \n        # in left and right subtrees and  \n        # old_value of this node  \n        return Node.data + old_val  ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/*\nclass Node\n{\n    constructor(x){\n        this.data=x;\n        this.left=null;\n        this.right=null;\n    }\n}\n*/\n\n/**\n * @param {Node} root\n*/\nclass Solution {\n    toSumTree(root) {\n        if (root === null) {\n            return 0;\n        }\n        \n        // Store the old value\n        let old_val = root.data;\n        \n        // Recursively call for left and right subtrees\n        let leftSum = this.toSumTree(root.left);\n        let rightSum = this.toSumTree(root.right);\n        \n        // Update the value of the current node\n        root.data = leftSum + rightSum;\n        \n        // Return the sum of values of nodes in left and right subtrees and old_value of this node\n        return root.data + old_val;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}