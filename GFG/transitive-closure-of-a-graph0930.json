{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705579,
            "title": "Transitive closure of a Graph",
            "titleSlug": "transitive-closure-of-a-graph0930",
            "content": "<p><span style=\"font-size: 18px;\">Given a directed graph, determine whether a vertex <strong>j</strong> is reachable from another vertex <strong>i</strong>&nbsp;for all vertex pairs <strong>(i, j)</strong> in the given <strong>graph</strong>. Here,&nbsp;</span><span style=\"font-size: 18px;\">vertex&nbsp;</span><strong style=\"font-size: 18px;\">j</strong><span style=\"font-size: 18px;\">&nbsp;is reachable from another vertex&nbsp;</span><strong style=\"font-size: 18px;\">i </strong><span style=\"font-size: 18px;\">means that there is a path from vertex </span><strong style=\"font-size: 18px;\">i </strong><span style=\"font-size: 18px;\">to </span><strong style=\"font-size: 18px;\">j.</strong><span style=\"font-size: 18px;\">&nbsp;The reachability matrix is called the </span><strong style=\"font-size: 18px;\">transitive closure of a graph</strong><span style=\"font-size: 18px;\">. The directed graph is represented by an </span><strong style=\"font-size: 18px;\">adjacency matrix </strong><span style=\"font-size: 18px;\">where there are </span><strong style=\"font-size: 18px;\">N</strong><span style=\"font-size: 18px;\"> vertices.&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 4\ngraph = {{1, 1, 0, 1}, \n&nbsp;\\t  {0, 1, 1, 0}, \n&nbsp;\\t  {0, 0, 1, 1}, \n&nbsp;\\t  {0, 0, 0, 1}}\n<strong>Output:</strong> {{1, 1, 1, 1}, \n&nbsp;\\t  {0, 1, 1, 1}, \n&nbsp;\\t  {0, 0, 1, 1}, \n&nbsp;\\t  {0, 0, 0, 1}}\n<strong>Explanation: <br /></strong></span><span style=\"font-size: 18px;\">The output list shows the reachable indexes.<br /></span></pre>\n<p style=\"font-family: sans-serif; font-size: medium; white-space: normal;\"><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span ><strong>Input:</strong> N = 3\ngraph = {{1, 0, 0}, \n&nbsp;\\t  {0, 1, 0}, \n&nbsp;\\t  {0, 0, 1}}\n<strong>Output:</strong> {{1, 0, 0}, \n&nbsp;\\t  {0, 1, 0}, \n&nbsp;\\t  {0, 0, 1}}\n<strong>Explanation: <br /></strong>The output list shows the reachable indexes.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>transitiveClosure()</strong> which takes an integer <strong>N</strong> and a 2D array <strong>graph</strong>(adjacency matrix of the graph)<strong>&nbsp;</strong>as <strong>input parameters </strong>and returns the <strong>transitive closure </strong>of the graph in the form of <strong>2D array</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N<sup>3</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(N<sup>2</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 100&nbsp;&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph represented by an N x N adjacency matrix, determine the transitive closure. The transitive closure indicates whether a vertex 'j' is reachable from another vertex 'i' for all vertex pairs (i, j) in the graph. Reachability implies the existence of a path from vertex 'i' to vertex 'j'. Construct and return the transitive closure matrix.",
                "constraints": [
                    "1 <= N <= 100"
                ],
                "testcases": [
                    {
                        "input": "N = 4\ngraph = {{1, 1, 0, 1},\n         {0, 1, 1, 0},\n         {0, 0, 1, 1},\n         {0, 0, 0, 1}}",
                        "output": "{{1, 1, 1, 1},\n         {0, 1, 1, 1},\n         {0, 0, 1, 1},\n         {0, 0, 0, 1}}",
                        "explanation": "The output matrix represents the reachability between all pairs of vertices. A '1' at graph[i][j] indicates that vertex 'j' is reachable from vertex 'i'."
                    },
                    {
                        "input": "N = 3\ngraph = {{1, 0, 0},\n         {0, 1, 0},\n         {0, 0, 1}}",
                        "output": "{{1, 0, 0},\n         {0, 1, 0},\n         {0, 0, 1}}",
                        "explanation": "In this case, each vertex is only reachable from itself, as indicated by the adjacency matrix. The transitive closure reflects this."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">From each node check which nodes are reachable. You can run a dfs from each node to see which nodes are reachable from that node.</span></p>",
            "<p>Use Floyd Warshall algorithm.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to find the transitive closure of a graph.\n    vector<vector<int>> transitiveClosure(int N, vector<vector<int>> graph)\n    {\n        //creating a 2D vector to store the reachability matrix.\n        vector<vector<int>> reach(N, vector<int>(N, -1));\n\n        //initializing reachability matrix with the given graph.\n        for(int i = 0;i < N;i++){\n            for(int j = 0;j < N;j++){\n                if(i == j)\n                    reach[i][j] = 1;\n                else\n                    reach[i][j] = graph[i][j];\n            }\n        }\n\n        //applying Floyd Warshall algorithm to find transitive closure.\n        for(int k = 0;k < N;k++)\n            for(int i = 0;i < N;i++)\n                for(int j = 0;j < N;j++)\n                    reach[i][j] = reach[i][j] || (reach[i][k] && reach[k][j]);\n\n        //returning the reachability matrix.\n        return reach;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    // method to find the transitive closure of a given graph\n    static ArrayList<ArrayList<Integer>> transitiveClosure(int N, int graph[][])\n    {\n        // create a 2D array 'vis' to store the intermediate results\n        int vis[][] = new int[N][N];\n        \n        // initialize 'vis' array with the values of the 'graph' array\n        // and set diagonal elements to 1\n        for(int i=0;i<N;i++){\n            for(int j =0;j<N;j++){\n                vis[i][j] = graph[i][j];\n                if(i==j)\n                vis[i][j] = 1;\n            }\n        }\n        \n        // modify 'vis' array to find the transitive closure\n        // using Floyd-Warshall algorithm\n        for(int k =0;k<N;k++){\n            for(int i = 0; i<N;i++){\n                for(int j =0;j<N;j++){\n                    if(vis[i][j]!=0 || (vis[i][k] >0 &&  vis[k][j]>0))\n                    vis[i][j] = 1;\n                }\n            }\n        }\n        \n        // store the transitive closure matrix in an ArrayList of ArrayLists 'al'\n        ArrayList<ArrayList<Integer>> al = new ArrayList<ArrayList<Integer>> ();\n        for(int i =0;i<N;i++){\n            al.add(new ArrayList<Integer>());\n            for(int j =0;j<N;j++){\n                al.get(i).add(vis[i][j]);\n            }\n        }\n        \n        // return the ArrayList containing the transitive closure matrix\n        return al;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    #Function to find the transitive closure of a graph.\n    def transitiveClosure(self,N,graph):\n        #Creating a matrix to store reachability status.\n        reach=[[-1 for i in range(N)] for i in range(N)]\n\n        #Initializing reachability matrix based on the input graph.\n        for i in range(N):\n            for j in range(N):\n                if i == j:\n                    reach[i][j] = 1\n                else:\n                    reach[i][j] = graph[i][j]\n            \n        #Applying the Floyd-Warshall algorithm to find transitive closure.\n        for k in range(N):\n            for i in range(N):\n                for j in range(N):\n                    reach[i][j] = (reach[i][j])or(reach[i][k] and reach[k][j])\n        \n        #Returning the transitive closure matrix.\n        return reach",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}