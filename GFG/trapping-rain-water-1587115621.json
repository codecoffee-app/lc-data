{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701211,
            "title": "Trapping Rain Water",
            "titleSlug": "trapping-rain-water-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[] </strong>with non-negative integers representing the height of blocks. If the width of each block is 1, compute how much water can be trapped between the blocks during the rainy season.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 0, 1, 0, 4, 0 2]\n<strong>Output: </strong>10<strong>\nExplanation: </strong>Total water trapped = 0 + 3 + 2 + 3 + 0 + 2 + 0 = 10 units.<br /></span><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/701211/Web/Other/blobid0_1741784862.png\" alt=\"\" /></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 0, 2, 0, 4]\n<strong>Output: </strong>7<strong>\nExplanation: </strong>Total water trapped = 0 + 3 + 1 + 3 + 0 = 7 units.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4]\n<strong>Output: </strong>0<strong>\nExplanation: </strong>We cannot trap water as there is no height bound on both sides.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 1, 5, 3, 1, 0, 4]\n<strong>Output: </strong>9<strong>\nExplanation: </strong>Total water trapped = 0 + 1 + 0 + 1 + 3 + 4 + 0 = 9 units.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 <u>&lt;</u> arr.size() <u>&lt;</u> 10<sup>5</sup><br />0 <u>&lt;</u> arr[i] <u>&lt;</u> 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of non-negative integers, where each integer represents the height of a block and the width of each block is 1, calculate the total amount of water that can be trapped between the blocks during a rainy season.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "[3, 0, 1, 0, 4, 0, 2]",
                        "output": "10",
                        "explanation": "The water trapped above each block is as follows: 0 + 3 + 2 + 3 + 0 + 2 + 0 = 10 units."
                    },
                    {
                        "input": "[3, 0, 2, 0, 4]",
                        "output": "7",
                        "explanation": "The water trapped above each block is as follows: 0 + 3 + 1 + 3 + 0 = 7 units."
                    },
                    {
                        "input": "[1, 2, 3, 4]",
                        "output": "0",
                        "explanation": "No water can be trapped as the heights are monotonically increasing and there are no height bounds on both sides."
                    },
                    {
                        "input": "[2, 1, 5, 3, 1, 0, 4]",
                        "output": "9",
                        "explanation": "The water trapped above each block is as follows: 0 + 1 + 0 + 1 + 3 + 4 + 0 = 9 units."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >You need to determine the maximum water level it can hold. This depends on the height of the tallest bars to its left and right.</span></p>",
            "<p><span >Compute two auxiliary arrays:</span></p>\n<p><span >leftMax[i] stores the maximum height to the left of index i.</span></p>\n<p><span >rightMax[i] stores the maximum height to the right of index i.</span></p>",
            "<p><span >For each index i, the water trapped at i is the minimum of leftMax[i] and rightMax[i], minus the height at i.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "google",
            "goldman-sachs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxWater(vector<int> &arr) {\n        int left = 1;\n        int right = arr.size() - 2;\n\n        // lMax : Maximum in subarray arr[0..left-1]\n        // rMax : Maximum in subarray arr[right+1..n-1]\n        int lMax = arr[left - 1];\n        int rMax = arr[right + 1];\n\n        int res = 0;\n        while (left <= right) {\n\n            // If rMax is smaller, then we can decide the amount of water for arr[right]\n            if (rMax <= lMax) {\n\n                // Add the water for arr[right]\n                res += max(0, rMax - arr[right]);\n\n                // Update right max\n                rMax = max(rMax, arr[right]);\n\n                // Update right pointer as we have decided the amount of water for this\n                right -= 1;\n            } else {\n                // Add the water for arr[left]\n                res += max(0, lMax - arr[left]);\n\n                // Update left max\n                lMax = max(lMax, arr[left]);\n\n                // Update left pointer as we have decided water for this\n                left += 1;\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maxWater(int arr[]) {\n        int left = 1;\n        int right = arr.length - 2;\n\n        // lMax : Maximum in subarray arr[0..left-1]\n        // rMax : Maximum in subarray arr[right+1..n-1]\n        int lMax = arr[left - 1];\n        int rMax = arr[right + 1];\n\n        int res = 0;\n        while (left <= right) {\n\n            // If rMax is smaller, then we can decide the amount of water for arr[right]\n            if (rMax <= lMax) {\n\n                // Add the water for arr[right]\n                res += Math.max(0, rMax - arr[right]);\n\n                // Update right max\n                rMax = Math.max(rMax, arr[right]);\n\n                // Update right pointer as we have decided the amount of water for this\n                right -= 1;\n            } else {\n\n                // Add the water for arr[left]\n                res += Math.max(0, lMax - arr[left]);\n\n                // Update left max\n                lMax = Math.max(lMax, arr[left]);\n\n                // Update left pointer as we have decided water for this\n                left += 1;\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxWater(self, arr):\n        left = 1\n        right = len(arr) - 2\n\n        # lMax : Maximum in subarray arr[0..left-1]\n        # rMax : Maximum in subarray arr[right+1..n-1]\n        lMax = arr[left - 1]\n        rMax = arr[right + 1]\n\n        res = 0\n        while left <= right:\n\n            # If rMax is smaller, then we can decide the amount of water for arr[right]\n            if rMax <= lMax:\n\n                # Add the water for arr[right]\n                res += max(0, rMax - arr[right])\n\n                # Update right max\n                rMax = max(rMax, arr[right])\n\n                # Update right pointer as we have decided the amount of water for this\n                right -= 1\n            else:\n\n                # Add the water for arr[left]\n                res += max(0, lMax - arr[left])\n\n                # Update left max\n                lMax = max(lMax, arr[left])\n\n                # Update left pointer as we have decided water for this\n                left += 1\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int MaxWater(int[] arr) {\n        if (arr == null || arr.Length < 3) return 0;\n\n        int left = 1;\n        int right = arr.Length - 2;\n        int lMax = arr[left - 1];\n        int rMax = arr[right + 1];\n        int res = 0;\n\n        while (left <= right) {\n            if (rMax <= lMax) {\n                res += Math.Max(0, rMax - arr[right]);\n                rMax = Math.Max(rMax, arr[right]);\n                right--;\n            } else {\n                res += Math.Max(0, lMax - arr[left]);\n                lMax = Math.Max(lMax, arr[left]);\n                left++;\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    maxWater(arr) {\n        let left = 1;\n        let right = arr.length - 2;\n\n        // lMax : Maximum in subarray arr[0..left-1]\n        // rMax : Maximum in subarray arr[right+1..n-1]\n        let lMax = arr[left - 1];\n        let rMax = arr[right + 1];\n\n        let res = 0;\n        while (left <= right) {\n\n            // If rMax is smaller, then we can decide the amount of water for arr[right]\n            if (rMax <= lMax) {\n\n                // Add the water for arr[right]\n                res += Math.max(0, rMax - arr[right]);\n\n                // Update right max\n                rMax = Math.max(rMax, arr[right]);\n\n                // Update right pointer as we have decided the amount of water for this\n                right -= 1;\n            } else {\n                // Add the water for arr[left]\n                res += Math.max(0, lMax - arr[left]);\n\n                // Update left max\n                lMax = Math.max(lMax, arr[left]);\n\n                // Update left pointer as we have decided water for this\n                left += 1;\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}