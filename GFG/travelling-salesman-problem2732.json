{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705721,
            "title": "Travelling Salesman Problem",
            "titleSlug": "travelling-salesman-problem2732",
            "content": "<p><span style=\"font-size: 18px;\">Given a matrix cost of size n where cost[i][j] denotes the cost of moving from city i to city j. Your task is to complete a tour from city 0 (0-based index) to all other cities such that you visit each city exactly once and then at the end come back to city 0 at minimum cost.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>cost = [[0, 111], [112, 0]]\n<strong>Output: </strong>223\n<strong>Explanation: </strong>We can visit 0-&gt;1-&gt;0 and cost = 111 + 112.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>cost = [[0, 1000, 5000], [5000, 0, 1000], [1000, 5000, 0]]\n<strong>Output: </strong>3000\n<strong>Explanation: </strong>We can visit 0-&gt;1-&gt;2-&gt;0 and cost = 1000+1000+1000 = 3000</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= cost.size() &lt;= 20<br />1 &lt;= cost[i][j] &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">Use dynamic programming with bit masking to explore all possible routes efficiently. This approach involves recursively calculating the minimum cost while memoizing results to avoid redundant calculations.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft",
            "samsung",
            "google",
            "opera"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the total cost of the TSP problem\n    int tsp(int mask, int pos, int VISITED_ALL, vector<vector<int>>& cost,\n            vector<vector<int>>& dp) {\n        int n = cost.size();\n\n        // Base case: if all the cities have been visited,\n        // return the cost of returning to the starting city\n        if (mask == VISITED_ALL) {\n            return cost[pos][0];\n        }\n\n        // If the optimal cost for the current mask and position\n        // has already been calculated, return it\n        if (dp[mask][pos] != -1) {\n            return dp[mask][pos];\n        }\n\n        int ans = INT_MAX;\n\n        // Iterating over all the unvisited cities to take the best route\n        for (int city = 0; city < n; city++) {\n\n            // Checking if the city has not been visited\n            if ((mask & (1 << city)) == 0) {\n\n                // Calculating the cost of going from the current position to the city\n                // and recursively calculating the optimal cost for the remaining cities\n                int newAns = cost[pos][city] +\n                             tsp(mask | (1 << city), city, VISITED_ALL, cost, dp);\n\n                // Updating the minimum cost\n                ans = min(ans, newAns);\n            }\n        }\n\n        // Storing the optimal cost for the current mask and position\n        dp[mask][pos] = ans;\n        return ans;\n    }\n\n    // Function to calculate the total cost for the Traveling Salesman Problem\n    int tsp(vector<vector<int>>& cost) {\n        int n = cost.size();\n\n        // Initializing the dp array with -1 to store the optimal cost\n        vector<vector<int>> dp((1 << n) + 5, vector<int>(n, -1));\n\n        // Creating the mask for all cities visited\n        int VISITED_ALL = (1 << n) - 1;\n\n        // Calling the tsp function to calculate the total cost\n        return tsp(1, 0, VISITED_ALL, cost, dp);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Helper function to calculate the total cost of the TSP problem\n    private int tsp(int mask, int pos, int VISITED_ALL, int[][] cost, int[][] dp) {\n        int n = cost.length;\n\n        // Base case: if all the cities have been visited,\n        // return the cost of returning to the starting city\n        if (mask == VISITED_ALL) {\n            return cost[pos][0];\n        }\n\n        // If the optimal cost for the current mask and position\n        // has already been calculated, return it\n        if (dp[mask][pos] != -1) {\n            return dp[mask][pos];\n        }\n\n        int ans = Integer.MAX_VALUE;\n\n        // Iterating over all the unvisited cities to take the best route\n        for (int city = 0; city < n; city++) {\n\n            // Checking if the city has not been visited\n            if ((mask & (1 << city)) == 0) {\n\n                // Calculating the cost of going from the current position to the city\n                // and recursively calculating the optimal cost for the remaining cities\n                int newAns = cost[pos][city] +\n                             tsp(mask | (1 << city), city, VISITED_ALL, cost, dp);\n\n                // Updating the minimum cost\n                ans = Math.min(ans, newAns);\n            }\n        }\n\n        // Storing the optimal cost for the current mask and position\n        dp[mask][pos] = ans;\n        return ans;\n    }\n\n    // Function to calculate the total cost for the Traveling Salesman Problem\n    public int tsp(int[][] cost) {\n        int n = cost.length;\n\n        // Initializing the dp array with -1 to store the optimal cost\n        int[][] dp = new int[(1 << n) + 5][n];\n        for (int[] row : dp) {\n            Arrays.fill(row, -1);\n        }\n\n        // Creating the mask for all cities visited\n        int VISITED_ALL = (1 << n) - 1;\n\n        // Calling the tsp function to calculate the total cost\n        return tsp(1, 0, VISITED_ALL, cost, dp);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    public int tsp(List<List<int>> cost) {\n        int n = cost.Count;\n\n        // Initializing the dp array with -1 to store the optimal cost\n        List<List<int>> dp = new List<List<int>>();\n        for (int i = 0; i < (1 << n) + 5; i++) {\n            dp.Add(new List<int>());\n            for (int j = 0; j < n; j++) {\n                dp[i].Add(-1);\n            }\n        }\n\n        // Creating the mask for all cities visited\n        int VISITED_ALL = (1 << n) - 1;\n\n        // Calling the tsp function to calculate the total cost\n        return tsp(1, 0, VISITED_ALL, cost, dp);\n    }\n\n    // Function to calculate the total cost of the TSP problem\n    public int tsp(int mask, int pos, int VISITED_ALL, List<List<int>> cost,\n                   List<List<int>> dp) {\n        int n = cost.Count;\n\n        // Base case: if all the cities have been visited,\n        // return the cost of returning to the starting city\n        if (mask == VISITED_ALL) {\n            return cost[pos][0];\n        }\n\n        // If the optimal cost for the current mask and position\n        // has already been calculated, return it\n        if (dp[mask][pos] != -1) {\n            return dp[mask][pos];\n        }\n\n        int ans = int.MaxValue;\n\n        // Iterating over all the unvisited cities to take the best route\n        for (int city = 0; city < n; city++) {\n\n            // Checking if the city has not been visited\n            if ((mask & (1 << city)) == 0) {\n\n                // Calculating the cost of going from the current position to the city\n                // and recursively calculating the optimal cost for the remaining cities\n                int newAns = cost[pos][city] +\n                             tsp(mask | (1 << city), city, VISITED_ALL, cost, dp);\n\n                // Updating the minimum cost\n                ans = Math.Min(ans, newAns);\n            }\n        }\n\n        // Storing the optimal cost for the current mask and position\n        dp[mask][pos] = ans;\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number[][]} cost - The cost matrix\n     * @returns {number} - The minimum cost of visiting all cities\n     */\n    tsp(cost) {\n        const n = cost.length;\n        const VISITED_ALL = (1 << n) - 1;\n\n        // Initialize dp array with -1\n        const dp = Array(1 << n).fill(null).map(() => Array(n).fill(-1));\n\n        function tspHelper(mask, pos) {\n            // Base case: all cities visited, return cost to starting city\n            if (mask === VISITED_ALL) {\n                return cost[pos][0];\n            }\n\n            // Return cached result if already computed\n            if (dp[mask][pos] !== -1) {\n                return dp[mask][pos];\n            }\n\n            let ans = Infinity;\n\n            // Iterate over all unvisited cities\n            for (let city = 0; city < n; city++) {\n                if ((mask & (1 << city)) === 0) {\n                    const newAns =\n                        cost[pos][city] + tspHelper(mask | (1 << city), city);\n                    ans = Math.min(ans, newAns);\n                }\n            }\n\n            // Store result in dp array\n            dp[mask][pos] = ans;\n            return ans;\n        }\n\n        // Start TSP from the first city\n        return tspHelper(1, 0);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}