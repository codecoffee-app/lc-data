{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713196,
            "title": "Tree Transformation",
            "titleSlug": "tree-transformation--170645",
            "content": "<p><span style=\"font-size: 18px;\">Given a connected undirected tree with <strong>N&nbsp;</strong>nodes. In one move, you can merge any two adjacent nodes. Calculate the minimum number of moves required to turn the tree into a <strong>star</strong> tree.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\">-&gt; Merging adjacent nodes means deleting the edge between them and considering both the nodes as a single one.<br />-&gt;&nbsp;A Star tree is a tree with a center&nbsp;node, and all other nodes are connected to the center node only.</span></p>\n</blockquote>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 5\np[] = {-1, 0, 0, 1, 1}\n<strong>Output:\n</strong>1\n<strong>Explanation</strong>: \nTree looks like:\n\\t\\t0\n&nbsp;\\t    / \\ \n\\t   1    2 \n\\t /  \\ \n\\t3    4\nMerge the edge 0 - 2 in one operation\n\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 8\np[] = {-1 0 0 0 0 2 2 5}\n<strong>Output:</strong>\n2\n<strong>Explanation</strong>:\nTree looks like:\n\\t\\t  0\n\\t     / / \\ \\\n\\t    / |   |  \\\n\\t  1   2   3   4\n\\t     / \\\n\\t    5   6\n\\t    |\n\\t    7\nMerge node 5 to 2 and then 2 to 0, \nthus tree formed will be a star tree. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read, input, or print anything. Your task is to complete the function <strong><em>solve( )</em>, </strong>which takes integer <strong>N, </strong>and an array <strong>p[ ] </strong>as input parameters and returns the minimum number of moves required to turn the tree into a <strong>star</strong> tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup><br />0 &le; p[i] &lt; N<br />p[0] = -1, 0 is the root node.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a connected undirected tree with N nodes, determine the minimum number of merge operations required to transform it into a star tree. In a single move, you can merge any two adjacent nodes by deleting the edge between them and treating them as a single node. A star tree is characterized by a central node connected directly to all other nodes.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= p[i] < N",
                    "p[0] = -1, node 0 is the root node."
                ],
                "testcases": [
                    {
                        "input": "N = 5\np[] = {-1, 0, 0, 1, 1}",
                        "output": "1",
                        "explanation": "The initial tree structure is such that merging node 2 with node 0 results in a star tree configuration. Therefore, only one merge operation is required."
                    },
                    {
                        "input": "N = 8\np[] = {-1, 0, 0, 0, 0, 2, 2, 5}",
                        "output": "2",
                        "explanation": "The initial tree structure necessitates merging node 5 into node 2, and then merging node 2 into node 0 to form a star tree. This process requires two merge operations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n    public:\r\n    int solve(int N, vector<int> p){\r\n        // code here\r\n        \r\n        int g[N + 1] = {0};\r\n        \r\n        for (int i = 1; i < p.size(); i++) {\r\n            g[p[i]]++;\r\n            g[i]++;\r\n        }\r\n        int cnt = 0;\r\n        for (int i = 0; i < N; i++) {\r\n            if (g[i] == 1)\r\n                cnt++;\r\n        }\r\n        \r\n        cnt = N - cnt;\r\n        \r\n        return max(cnt - 1, 0);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    public static int solve(int N, int[] p) {\n        //initialize an array to store the degrees of each vertex\n        int [] g = new int[N + 1];\n        \n        //calculate the degrees by incrementing the degree\n        //of each vertex and its parent in the array\n        for (int i = 1; i < N; i++) {\n            g[p[i]]++; //increment the degree of parent vertex\n            g[i]++; //increment the degree of current vertex\n        }\n        \n        //count the number of vertices with degree 1\n        int cnt = 0;\n        for (int i = 0; i < N; i++) {\n            if (g[i] == 1) //if degree of vertex is 1\n                cnt++; //increment the count\n        }\n        \n        //return the maximum possible number of edges\n        //that can be removed to make the graph connected\n        return Math.max(N - cnt - 1, 0);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def solve(self, N: int, p: List[int]) -> int:\n        #Initializing a list to store the frequency of each element\n        store = [0] * N\n\n        #Iterating over the input list\n        for i in range(N):\n            #If the element is not -1, increment the frequency of both the current element and the corresponding element\n            if p[i] != -1:\n                store[p[i]] += 1\n                store[i] += 1\n\n        #Returning the maximum number of elements that have a frequency of 1, after subtracting it from N-1\n        return max(0, N - 1 - store.count(1))\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}