{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714517,
            "title": "Tree Transformation",
            "titleSlug": "tree-transformation--170648",
            "content": "<p><span style=\"font-size: 18px;\">You are given a tree containing&nbsp;</span><strong>N</strong><span style=\"font-size: 18px;\">&nbsp;nodes in the form of an array&nbsp;</span><strong>P</strong><span style=\"font-size: 18px;\">&nbsp;where&nbsp;</span><strong>P<sub>i</sub></strong><span style=\"font-size: 18px;\">&nbsp;represents the parent of the&nbsp;</span><em>i-</em><span style=\"font-size: 18px;\">th node and&nbsp;</span><strong><span style=\"font-size: 18px;\">P<sub>0</sub></span></strong><span style=\"font-size: 18px;\">&nbsp;= -1 as the tree is rooted at node 0.</span><span style=\"font-size: 18px;\"> In one move, you can merge any two adjacent nodes. Calculate the minimum number of moves required to turn the tree into a <strong>star</strong> tree.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\">-&gt; Merging adjacent nodes means deleting the edge between them and considering both the nodes as a single one.<br />-&gt;&nbsp;A Star tree is a tree with a center&nbsp;node, and all other nodes are connected to the center node only.</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 5\np[] = {-1, 0, 0, 1, 1}\n<strong>Output:\n</strong>1\n<strong>Explanation</strong>: \nTree looks like:\n\\t\\t<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/714517/Web/Other/02e0710d-481c-4add-bd29-7114737e9990_1685088062.png\" alt=\"\" width=\"186\" height=\"186\" />\nMerge the node 2 to 0 in one operation\n\nOur Tree will look like:</span>\n&nbsp;\\t     <img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/714517/Web/Other/09987026-7f43-4936-8ace-331f57083138_1685088062.png\" alt=\"\" width=\"165\" height=\"183\" />\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 8\np[] = {-1 0 0 0 0 2 2 5}\n<strong>Output:</strong>\n2\n<strong>Explanation</strong>:\nTree looks like:\n\n\\t  <img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/714517/Web/Other/f5c895e1-7ac4-4cd7-a643-0e457808f515_1685088062.png\" alt=\"\" width=\"244\" height=\"230\" />\n\nMerge node 5 to 2, tree will look like\n\n&nbsp;\\t   <img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/714517/Web/Other/7a974d9a-2726-4069-9753-87d3384b36a6_1685088061.png\" alt=\"\" width=\"239\" height=\"164\" />\n\nand then 2 to 0, finally the tree will be:\n\n&nbsp;\\t\\t<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/714517/Web/Other/eeb48c25-c3fd-485e-ac14-099540c24d03_1685088062.png\" alt=\"\" width=\"210\" height=\"106\" />\n\nthus tree formed will be a star tree.\n </span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read, input, or print anything. Your task is to complete the function <strong><em>solve( )</em>, </strong>which takes integer <strong>N, </strong>and an array <strong>p[ ] </strong>as input parameters and returns the minimum number of moves required to turn the tree into a <strong>star</strong> tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup><br />0 &le; p[i] &lt; N<br />p[0] = -1, 0 is the root node.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a tree with N nodes, represented by an array P where P[i] is the parent of the i-th node, and P[0] = -1 (node 0 is the root). In a single move, you can merge two adjacent nodes (effectively contracting the edge between them into a single node). Determine the minimum number of moves required to transform the given tree into a star tree. A star tree has a central node connected to all other nodes directly.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= P[i] < N",
                    "P[0] = -1, 0 is the root node"
                ],
                "testcases": [
                    {
                        "input": "N = 5\nP = {-1, 0, 0, 1, 1}",
                        "output": "1",
                        "explanation": "The initial tree structure requires merging node 2 with node 0. This single operation transforms the tree into a star tree."
                    },
                    {
                        "input": "N = 8\nP = {-1, 0, 0, 0, 0, 2, 2, 5}",
                        "output": "2",
                        "explanation": "Initially, merge node 5 into node 2. Then merge node 2 into node 0. These two operations will form a star tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Count the number of leaf nodes and try to draw some conclusions out of it.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n    public:\n    //Function to solve the given problem\n    int solve(int N, vector<int> p){\n        \n        //Initializing an array g with all elements as 0\n        int g[N + 1] = {0};\n        \n        //Iterating over the vector p starting from index 1\n        for (int i = 1; i < p.size(); i++) {\n            //Incrementing the count of element at index p[i] in array g\n            g[p[i]]++;\n            //Incrementing the count of element at index i in array g\n            g[i]++;\n        }\n        \n        //Initializing a variable cnt to 0\n        int cnt = 0;\n        \n        //Iterating over the array g\n        for (int i = 0; i < N; i++) {\n            //Checking if the count of element at index i in array g is equal to 1\n            if (g[i] == 1)\n                //Incrementing cnt if above condition is true\n                cnt++;\n        }\n        \n        //Calculating the value of cnt by subtracting it from N\n        cnt = N - cnt;\n        \n        //Returning the maximum of (cnt - 1) and 0\n        return max(cnt - 1, 0);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    public static int solve(int N, int[] p) {\r\n        int [] g = new int[N + 1];\r\n        for (int i = 1; i < N; i++) {\r\n            g[p[i]]++;\r\n            g[i]++;\r\n        }\r\n        \r\n        int cnt = 0;\r\n        for (int i = 0; i < N; i++) {\r\n            if (g[i] == 1)\r\n                cnt++;\r\n        }\r\n        return Math.max(N - cnt - 1, 0);\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n    def solve(self, N : int, p : List[int]) -> int:\n        # creating a list with N elements initialized to 0\n        store = [0]*N\n        \n        # iterating over the list of integers\n        for i in range(N):\n            # if the current element is not -1\n            if p[i] != -1:\n                # increment the count of the current element and the count at index i\n                store[p[i]] += 1\n                store[i] += 1\n                \n        # return the maximum value between 0 and N-1 minus the count of 1s in the store list\n        return max(0, N-1-store.count(1))",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int solve(int N, List<int> p)\n    {\n        //Initializing an array g with all elements as 0\n        int[] g = new int[N + 1];\n        \n        //Iterating over the vector p starting from index 1\n        for (int i = 1; i < p.Count; i++) {\n            //Incrementing the count of element at index p[i] in array g\n            g[p[i]]++;\n            //Incrementing the count of element at index i in array g\n            g[i]++;\n        }\n        \n        //Initializing a variable cnt to 0\n        int cnt = 0;\n        \n        //Iterating over the array g\n        for (int i = 0; i < N; i++) {\n            //Checking if the count of element at index i in array g is equal to 1\n            if (g[i] == 1)\n                //Incrementing cnt if above condition is true\n                cnt++;\n        }\n        \n        //Calculating the value of cnt by subtracting it from N\n        cnt = N - cnt;\n        \n        //Returning the maximum of (cnt - 1) and 0\n        return Math.Max(cnt - 1, 0);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}