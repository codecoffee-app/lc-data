{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711659,
            "title": "Pattern 7",
            "titleSlug": "triangle-pattern-1661492263",
            "content": "<p><span style=\"font-size: 18px;\">Geek is very fond of patterns. Once, his teacher gave him a pattern to solve. He gave Ram an integer n and asked him to build a pattern.<br /></span><span style=\"font-size: 18px;\">Help Ram build a&nbsp;pattern.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: 5\n<strong>Output:</strong></span>\n<span style=\"font-size: 18px;\"><strong>   </strong> *\n   ***  \n  *****\n *******\n*********</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: 3\n<strong>Output:</strong></span>\n<span style=\"font-size: 18px;\"><strong>  </strong>*\n ***  \n*****</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:<br /></strong></span><span style=\"font-size: 18px;\">You don't need to input anything. Complete the function <strong>printTriangle()&nbsp;</strong>which takes an integer <strong>n</strong> <strong>&nbsp;</strong>as the input parameter and prints the pattern.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n<sup>2</sup></span><span style=\"font-size: 18px;\">).</span><span style=\"font-size: 18px;\"><strong><br /></strong></span><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space: </strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1&lt;= <strong>n</strong> &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `n`, construct a pattern of asterisks where each row `i` (from 1 to `n`) contains `2*i - 1` asterisks. The pattern should be centered, meaning the asterisks are aligned in the middle of each row, with leading spaces added accordingly.",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "    *\n   ***\n  *****\n *******\n*********",
                        "explanation": null
                    },
                    {
                        "input": "3",
                        "output": "  *\n ***\n*****",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The number of stars increases as the row number decreases, following the pattern of 2 * (n - i) + 1, where 'i' is the current row number.</p>"
        ],
        "relatedTopics": [
            {
                "name": "pattern-printing",
                "slug": "pattern-printing"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to print a triangle pattern with n rows\nclass Solution {\n\n  public:\n    void printTriangle(int n) {\n\n        // Loop for each row of the triangle\n        for (int i = n; i >= 1; i--) {\n            // Loop for spaces before the stars in each row\n            for (int j = 1; j < i; j++) {\n                cout << \" \";\n            }\n            // Loop for printing stars in each row\n            for (int j = 1; j <= 2 * (n - i) + 1; j++) {\n                cout << \"*\";\n            }\n            cout << endl;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Method to print a triangle with n lines\n    void printTriangle(int n) {\n        for (int i = n; i >= 1; i--) { // loop to iterate over each line of the triangle, starting from the last line\n            for (int j = 1; j < i; j++) { // loop to print spaces before each line\n                System.out.print(\" \");\n            }\n            for (int j = 1; j <= 2 * (n - i) + 1; j++) { // loop to print asterisks in each line\n                System.out.print(\"*\");\n            }\n            System.out.println(); // move to next line after printing each line of the triangle\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to print a pattern triangle of asterisks.\r\n    def printTriangle(self, N):\r\n        #Loop to iterate through each row of the triangle.\r\n        for row in range(1, 1 + N):\r\n            #Loop to print the required number of spaces before the asterisks.\r\n            for space in range(N - row):\r\n                print(' ', end = '')\r\n            #Loop to print the asterisks for each row.\r\n            for asterisk in range(1, 2 * row):\r\n                print('*', end = '')\r\n            #Printing a new line after each row.\r\n            print()",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n/**\n* @param number n\n\n* @returns none\n*/\n    printTriangle(n) {\n        // code here\n        for (let i = n; i >= 1; i--) {\n            // Loop for spaces before the stars in each row\n            let ans = \"\";\n            for (let j = 1; j < i; j++) {\n                ans+=\" \";\n            }\n            // Loop for printing stars in each row\n            for (let j = 1; j <= 2 * (n - i) + 1; j++) {\n                ans+=\"*\";\n            }\n            console.log(ans);\n        }\n    }\n}\n        \n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}