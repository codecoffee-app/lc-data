{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711694,
            "title": "Pattern 10",
            "titleSlug": "triangle-pattern-1661718013",
            "content": "<p><span style=\"font-size: 18px;\">Geek is very fond of patterns. Once, his teacher gave him a pattern to solve. He gave Geek&nbsp;an integer <strong>n</strong> and asked him to build a pattern.</span></p>\n<p><span style=\"font-size: 18px;\">Help Geek to build a star pattern.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: 5\n<strong>Output:</strong>\n* \n* * \n* * * \n* * * * \n* * * * *\n* * * *\n* * *\n* *\n*</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: 3\n<strong>Output:</strong>\n* \n* * \n* * * \n* *\n*</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:<br /></strong></span><span style=\"font-size: 18px;\">You don't need to input anything. Complete the function <strong>printTriangle()&nbsp;</strong>which takes an integer <strong>n</strong> <strong>&nbsp;</strong>as the input parameter and prints the pattern.</span></p>\n<p><span style=\"font-size: 18px;\">Expected Time Complexity: O(n<sup>2</sup><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">)</span><span style=\"vertical-align: super; font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.<br /></span>Expected Auxiliary Space: O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1 &lt;= <strong>n</strong> &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `n`, print a star pattern as follows:\n\nFor `n` rows, print `i` stars in the `i`-th row (where `i` goes from 1 to `n`).  Then, for `n-1` rows, print `i` stars in the `i`-th row (where `i` goes from `n-1` down to 1).",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "* \n* * \n* * * \n* * * * \n* * * * * \n* * * * \n* * * \n* * \n*",
                        "explanation": null
                    },
                    {
                        "input": "3",
                        "output": "* \n* * \n* * * \n* * \n*",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use nesting of loops to print upper and lower half seperately.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "pattern-printing",
                "slug": "pattern-printing"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution{\npublic:\n    \n    // Function to print the triangle pattern\n    void printTriangle(int n) {\n        // Loop to iterate over rows\n        for (int i = 1; i <= n; i++) {\n            // Loop to print stars in each row\n            for (int j = 1; j <= i; j++) {\n                cout << \"* \";\n            }\n            cout << endl;\n        }\n        \n        // Loop to iterate over rows in reverse order\n        for (int i = n - 1; i >= 1; i--) {\n            // Loop to print stars in each row\n            for (int j = 1; j <= i; j++) {\n                cout << \"* \";\n            }\n            cout << endl;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Method to print a triangle pattern\n    void printTriangle(int n) {\n        // Loop to print the upper half of the triangle\n        for (int i = 1; i <= n; i++) {\n            // Loop to print the *s for each row\n            for (int j = 1; j <= i; j++) {\n                System.out.print(\"* \");\n            }\n            // Move to the next line after each row\n            System.out.println();\n        }\n        // Loop to print the lower half of the triangle\n        for (int i = n - 1; i >= 1; i--) {\n            // Loop to print the *s for each row\n            for (int j = 1; j <= i; j++) {\n                System.out.print(\"* \");\n            }\n            // Move to the next line after each row\n            System.out.println();\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def printTriangle(self, N):\r\n        # Upper Triangle of (N-1) rows\r\n        for i in range(1, N):\r\n            for j in range(1, i + 1):\r\n                print('* ', end = '')\r\n            print()\r\n        \r\n        # Lower triangle of N rows\r\n        for i in range(N, 0, -1):\r\n            for j in range(1, i + 1):\r\n                print('* ', end = '')\r\n            print()",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to print the pattern\n    printTriangle(N) {\n        // Upper Triangle of (N-1) rows\n        for (let i = 1; i < N; i++) {\n            for (let j = 1; j <= i; j++) {\n                process.stdout.write('* ');\n            }\n            console.log();\n        }\n        \n        // Lower triangle of N rows\n        for (let i = N; i > 0; i--) {\n            for (let j = 1; j <= i; j++) {\n                process.stdout.write('* ');\n            }\n            console.log();\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}