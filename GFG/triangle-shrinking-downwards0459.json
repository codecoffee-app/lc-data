{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703588,
            "title": "Triangle shrinking downwards",
            "titleSlug": "triangle-shrinking-downwards0459",
            "content": "<p><span style=\"font-size:18px\">Given a string of a constant length, print&nbsp;a triangle out of it. The triangle should start with the given&nbsp;string and keeps shrinking&nbsp;downwards by removing&nbsp;one character from the begining of the string. The spaces on the left side of the triangle should be replaced with dot character.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span><span style=\"font-size:18px\"><strong> </strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>S = </strong>Geeks</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\nGeeks\r\n.eeks\r\n..eks\r\n...ks\r\n....s\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span><span style=\"font-size:18px\"><strong> </strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>S = </strong></span><span style=\"font-size:18px\">@io30</span> \r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n</span> <span style=\"font-size:18px\">@io30\r\n.io30\r\n..o30\r\n...30\r\n....0</span> </pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>triDownwards()</strong> which takes a String S and returns a string formed by joining all the lines together. For the Input &quot;GEEKS&quot; you should return the String &quot;GEEKS.EEKS..EKS...KS....S&quot;.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|S|<sup>2</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(|S|)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= |S| &lt;=100</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Create a Nested Loop and for every position where row index is smaller than column index, append a &#39;.&#39;. Every other position should have it&#39;s original Character.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "pattern-printing",
                "slug": "pattern-printing"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    string triDownwards(string S) {\r\n        \r\n        string ans=\"\";\r\n        \r\n        // If we imagine the final Output as a 2-D Matrix, we can observe that at\r\n        // the positions where row number is less than the Column number, we add '.'\r\n        // and the rest positions we should add the characters of the Input String.\r\n        \r\n        for(int i=0 ; i<S.length() ; i++)\r\n        {\r\n            for(int j=0 ; j<S.length() ; j++)\r\n            {\r\n                if(j<i)\r\n                    ans+='.';      // We add '.' at the required Positions.\r\n                else\r\n                    ans+=S[j];\r\n            }\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static String triDownwards(String S){\r\n        \r\n        String ans=\"\";\r\n        \r\n        // If we imagine the final Output as a 2-D Matrix, we can observe that at\r\n        // the positions where row number is less than the Column number, we add '.'\r\n        // and the rest positions we should add the characters of the Input String.\r\n        \r\n        for(int i=0 ; i<S.length() ; i++)\r\n        {\r\n            for(int j=0 ; j<S.length() ; j++)\r\n            {\r\n                if(j<i)\r\n                    ans+='.';      // We add '.' at the required Positions.\r\n                else\r\n                    ans+=S.charAt(j);\r\n            }\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def triDownwards(self, S):\r\n        \r\n        ans=\"\"\r\n        \r\n        # If we imagine the final Output as a 2-D Matrix, we can observe that at\r\n        # the positions where row number is less than the Column number, we add '.'\r\n        # and the rest positions we should add the characters of the Input String.\r\n        \r\n        for i in range(len(S)):\r\n            for j in range(len(S)):\r\n                if i>j:\r\n                    ans+='.'       # We add '.' at the required Positions.\r\n                else:\r\n                    ans+=S[j]\r\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    //Function to reverse a string\n    public string triDownwards(string S)\n    {\n        string ans = \"\";\n\n        for (int i = 0; i < S.Length; i++)\n        {\n            for (int j = 0; j < S.Length; j++)\n            {\n                if (j < i)\n                    ans += '.';      // We add '.' at the required Positions.\n                else\n                    ans += S[j];\n            }\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}