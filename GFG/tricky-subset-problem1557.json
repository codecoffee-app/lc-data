{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705441,
            "title": "Tricky Subset Problem",
            "titleSlug": "tricky-subset-problem1557",
            "content": "<p><span style=\"font-size:18px\">N children are made to stand in a queue. Each of them is given a number A[i]. The teacher writes a number S on a page and passes it to the first child. Each child must add all the numbers they see on the page along with their own number, write the sum on the paper and pass it to the next person.&nbsp;<br />\r\nIn the end, the teacher must determine if X can be formed by adding some of the numbers from the series of numbers written on the paper.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nS = 1, N = 4, X = 7\r\nA = {1, 2, 4, 2}\r\n<strong>Output:</strong> yes\r\n<strong>Explaination:</strong> The final sequence of \r\nnumbers on the paper is 1, 2, 5, 12, 22. \r\nUsing 2 and 5 we can form 7. </span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nS = 100, N = 2, X = 500\r\nA = {51, 88}\r\n<strong>Output: </strong>no\r\n<strong>Explaination:</strong> The final sequence of \r\nnumbers on the paper is 100, 151, 339. \r\nUsing these numbers we cannot form 500.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>isPossible() </strong>which takes S, N, X and array A as input parameters and returns 1 if there is a subset which adds to this sum. Otherwise returns 0.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(N)<br />\r\n<strong>Expected Auxiliary Space: </strong>O(N)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints</strong><br />\r\n1 &le; N &le; 10<sup>5</sup><br />\r\n1 &le; S, A<sub>i</sub>&nbsp;, X &le; 10<sup>18</sup>&nbsp;&nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "N children stand in a queue. Each child receives a number A[i]. A teacher writes a number S on a page and passes it to the first child. Each child adds all the numbers they see on the page along with their own number, writes the sum on the page, and passes it to the next person. The teacher needs to determine if a target value X can be formed by summing some of the numbers written on the paper during this process.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= S, A[i], X <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "S = 1, N = 4, X = 7\nA = {1, 2, 4, 2}",
                        "output": "yes",
                        "explanation": "The sequence of numbers written on the paper is 1, 2, 5, 12, 22. The sum 2 + 5 equals the target value 7."
                    },
                    {
                        "input": "S = 100, N = 2, X = 500\nA = {51, 88}",
                        "output": "no",
                        "explanation": "The sequence of numbers written on the paper is 100, 151, 339. No combination of these numbers sums to the target value 500."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The numbers in the list will be automatically in increasing order.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to check if it is possible to achieve the given sum using the given array elements\n    int isPossible(long long S, long long N, long long X, long long A[])\n    {\n        vector<long long> cash; // vector to store the sums of elements in the array\n        bool flag = true; // flag to check if the sum exceeds the given value\n        long long c, prevsum, p; // variables for storing the current sum, previous sum, and a placeholder\n\n        c = S;\n        prevsum = S;\n        cash.push_back(S); // add the initial sum to the vector\n        \n        // iterate through the array elements\n        for(long long i = 0;i < N;i++){\n            c = prevsum + A[i]; // calculate the sum of the current element with the previous sum\n            \n            // check if the sum exceeds the given value\n            if(c > X)\n                flag=false;\n            \n            // if the sum is within the given value, add it to the vector\n            if(flag)\n                cash.push_back(c);\n            \n            prevsum = c + prevsum; // update the previous sum\n        }\n        \n        // iterate through the vector from the largest sum to the smallest\n        for(int i=cash.size()-1;i>=0;i--){\n            if(cash[i]>X) continue; // if the sum is larger than the given value, continue to the next iteration\n            X-=cash[i]; // subtract the sum from the given value\n            \n            // if the given value becomes 0, return true\n            if(X==0) \n                return true;\n        }\n        \n        return false; // return false if it is not possible to achieve the given sum\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    static int lower(ArrayList<Long> array, long key)\r\n    {\r\n        // finding the lower bound index for a given key in an array\r\n        int lowerBound = 0;\r\n        while (lowerBound < array.size()) {\r\n            if (key > array.get(lowerBound))\r\n                lowerBound++;\r\n            else\r\n                return lowerBound;\r\n        }\r\n        return lowerBound;\r\n    }\r\n    static int isPossible(long S, int N, long X, long A[])\r\n    {\r\n        ArrayList<Long> cash = new ArrayList<>();\r\n        // creating an arraylist to store cash values\r\n        boolean flag = true;\r\n        long c, prevsum;\r\n        int p;\r\n        c = S; prevsum = S;\r\n        cash.add(S);\r\n        for(int i = 0; i < N; i++){\r\n            c = prevsum + A[i];\r\n            // checking if the calculated cash value exceeds the given limit X\r\n            if(c > X) \r\n                flag=false; // if so, set the flag variable as false\r\n            if(flag)\r\n                cash.add(c); // if flag is true, add the cash value to the arraylist\r\n            prevsum = c + prevsum;\r\n        }\r\n        flag = true;\r\n        p = lower(cash, X);\r\n        while(X > 0){\r\n            // checking if the cash value at index p is equal to X\r\n            if(p < cash.size() && X == cash.get(p)){\r\n                X = 0;\r\n                break;\r\n            }\r\n            // if not, subtract the previous cash value from X and move to the previous index\r\n            if(p == 0 && cash.get(p) != X)\r\n                break;\r\n            if(X >= cash.get(p-1))\r\n                X -= cash.get(p-1);\r\n            p--;\r\n        }\r\n        // checking if the final value of X is 0, if so, return 1 indicating it is possible to reach X\r\n        if(X == 0)\r\n            return 1;\r\n        return 0; // otherwise return 0 indicating it is not possible to reach X\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    \n    # Function to check if it is possible to achieve the target X\n    \n    def isPossible(self, S, N, X, A):\n        \n        sum=S\n        a=[]\n        a.append(S)\n\n        # calculating the cumulative sum and storing in 'a'\n        for i in range(N):\n            a.append(sum+A[i])\n            sum+=a[-1]\n            a.sort\n\n        # iterating through 'a' in reverse order\n        for i in range(len(a)-1,-1,-1):\n            # if the current value is greater than or equal to X, skip to the next iteration\n            if a[i]>X:\n                continue\n            else:\n                X-=a[i]\n                # if X becomes 0, return True\n                if X==0:\n                    return True\n\n        # if no possible distribution is found, return False\n        return False",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}