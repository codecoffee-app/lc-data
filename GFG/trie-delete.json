{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700449,
            "title": "Trie | (Delete)",
            "titleSlug": "trie-delete",
            "content": "<p><span style=\"font-size:18px\">Trie is an efficient information retrieval data structure. This data structure is used to store Strings and search strings, String stored can also be deleted. Given a Trie <strong>root</strong> for a larger string <strong>super&nbsp;</strong>and a string <strong>key, </strong>delete all the occurences of <strong>key&nbsp;</strong>in the Trie.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 8\r\nsuper = &quot;the a there answer any by bye their&quot; \r\nkey = &quot;the&quot; </span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">Complete the function <strong>deleteKey()</strong> to delete the given string <strong>key</strong>.The String <strong>key</strong>&nbsp;if exists&nbsp;in the larger string <strong>super</strong>,&nbsp;must be deleted from Trie <strong>root</strong>. The larger string <strong>super</strong>&nbsp;contains space separated small strings.&nbsp;And if the string is deleted successfully than 1 will be printed.<br />\r\nIf any other string other than String A is deleted, you will get wrong answer.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&le; T &le;200<br />\r\n1&le; N, |A| &le;20</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a function to delete all occurrences of a given `key` string from a Trie data structure. The Trie is populated with strings from a larger string `super`, where the strings are space-separated. The function should return 1 if the `key` is successfully deleted from the Trie, otherwise handle the case where the key isn't present or the trie is not formed. It should not delete any other strings other than the specified `key`.",
                "constraints": [
                    "1 <= T <= 200",
                    "1 <= N, |A| <= 20"
                ],
                "testcases": [
                    {
                        "input": "N = 8\nsuper = \"the a there answer any by bye their\"\nkey = \"the\"",
                        "output": "1",
                        "explanation": "The string \"the\" exists in the super string. After deleting it from the trie, the function should return 1."
                    },
                    {
                        "input": "N = 5\nsuper = \"a b c d e\"\nkey = \"z\"",
                        "output": "null",
                        "explanation": "The string \"z\" does not exist in the super string, so deleting it from the trie would be an invalid operation."
                    },
                    {
                        "input": "N = 3\nsuper = \"apple banana apple\"\nkey = \"apple\"",
                        "output": "1",
                        "explanation": "The string \"apple\" exists in the super string multiple times. After deleting all occurences of it from the trie, the function should return 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Learn how to delete a node from a Trie data structure</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Design-Pattern",
                "slug": "design-pattern"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n    int leafNode(trie_node_t *pNode)\r\n    {\r\n        return (pNode->value != 0);\r\n    }\r\n     \r\n    int isItFreeNode(trie_node_t *pNode)\r\n    {\r\n        int i;\r\n        for(i = 0; i < ALPHABET_SIZE; i++)\r\n        {\r\n            if( pNode->children[i] )\r\n                return 0;\r\n        }\r\n     \r\n        return 1;\r\n    }\r\n    \r\n    void remove(trie_node_t *root,char key[], int level,int len)\r\n    {\r\n        // If tree is empty\r\n        if (!root)\r\n            return;\r\n      \r\n        // If last character of key is being processed\r\n        if (level == len) {\r\n      \r\n            // This node is no more end of word after\r\n            // removal of given key\r\n            if (root->value)\r\n                root->value = 0;\r\n      \r\n            // If given is not prefix of any other word\r\n            if (isItFreeNode(root)) {\r\n                 \r\n                root = NULL;\r\n            }\r\n            return;\r\n        }\r\n      \r\n        // If not last character, recur for the child\r\n        // obtained using ASCII value\r\n        int index =INDEX( key[level+1] );\r\n        remove(root->children[index], key, level + 1, len);\r\n      \r\n        // If root does not have any child (its only child got\r\n        // deleted), and it is not end of another word.\r\n        if (isItFreeNode(root) && root->value == false) {\r\n            \r\n            root = NULL;\r\n        }\r\n    }\r\n      \r\n    \r\n     \r\n    void deleteKey(trie_node_t *root, char key[])\r\n    {\r\n        int len = strlen(key);\r\n     \r\n        if( len > 0 )\r\n        {\r\n            remove(root->children[INDEX(key[0])], key, 0, len-1);\r\n        }\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/*class TrieNode{\r\n    constructor(){ \r\n        this.children = new Array(26);\r\n        this.children.fill(null);\r\n        // isEndOfWord is True if node represent the end of the word \r\n        this.isEndOfWord = false\r\n    }\r\n}*/\r\n\r\n/**\r\n * @param {TrieNode} root (root of trie tree)\r\n * @param {string} key (key to be inserted)\r\n*/\r\nclass Solution {\r\n    deleteKey(root, key){\r\n        if (root == null)\r\n            return root;\r\n \r\n        // If the key is present in root\r\n        if (root.isEndOfWord) {\r\n            root.isEndOfWord = false;\r\n        }\r\n \r\n        // If key is not present in root\r\n        if (key.length != 0) {\r\n            let index = key[0].charCodeAt(0) - 'a'.charCodeAt(0);\r\n            if (root.children[index])\r\n                root.children[index] = this.deleteKey(root.children[index], key.substr(1));\r\n        }\r\n \r\n        // If root does not have any child nodes after deleting key\r\n        if (root.isEndOfWord == false) {\r\n            for (let i = 0; i < 26; i++)\r\n                if (root.children[i])\r\n                    return root;\r\n \r\n            root = null;\r\n        }\r\n        return root;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}