{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700653,
            "title": "Triplet Family",
            "titleSlug": "triplet-family",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong> of integers. First sort the array then find whether three numbers are such that the sum of two elements equals the third element. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5]<br /><strong>Output: </strong>true<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>The pair (1, 2) sums to 3.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 4, 5]<br /><strong>Output: </strong>false<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>No triplets satisfy the condition.</span></pre>\n<p><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Constraints:<br /></strong><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &lt;= arr.size() &lt;= 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">3</sup><br style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" /><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">0 &lt;= arr[i]</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;&lt;= 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5</sup><br style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" /></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Try to check for every number in the array whether the element can be made equal by summing two elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "arcesium"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool findTriplet(vector<int>& arr) {\n        int n = arr.size();\n        vector<int> result;\n        // sorting the array in ascending order\n        sort(arr.begin(), arr.end());\n        for (int i = n - 1; i >= 0; i--) {\n            int j = 0;\n            int k = i - 1;\n            // checking for triplets in the array\n            while (j < k) {\n                // if triplet is found, add it to the result vector and return\n                if (arr[i] == arr[j] + arr[k]) {\n                    return true;\n                }\n                // adjust pointers based on the sum of current elements\n                else if (arr[i] > arr[j] + arr[k])\n                    j += 1;\n                else\n                    k -= 1;\n            }\n        }\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean findTriplet(int[] arr) {\n        int n = arr.length;\n        // Sorting the array in ascending order\n        Arrays.sort(arr);\n        for (int i = n - 1; i >= 0; i--) {\n            int j = 0;\n            int k = i - 1;\n            // Checking for triplets in the array\n            while (j < k) {\n                // If triplet is found, return true\n                if (arr[i] == arr[j] + arr[k]) {\n                    return true;\n                }\n                // Adjust pointers based on the sum of current elements\n                else if (arr[i] > arr[j] + arr[k]) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findTriplet(self, arr):\n        n = len(arr)\n        # Sorting the array in ascending order\n        arr.sort()\n        for i in range(n - 1, -1, -1):\n            j = 0\n            k = i - 1\n            # Checking for triplets in the array\n            while j < k:\n                # If triplet is found, return True\n                if arr[i] == arr[j] + arr[k]:\n                    return True\n                # Adjust pointers based on the sum of current elements\n                elif arr[i] > arr[j] + arr[k]:\n                    j += 1\n                else:\n                    k -= 1\n        return False\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\nclass Solution {\n    findTriplet(arr) {\n        let n = arr.length;\n        // Sorting the array in ascending order\n        arr.sort((a, b) => a - b);\n        for (let i = n - 1; i >= 0; i--) {\n            let j = 0;\n            let k = i - 1;\n            // Checking for triplets in the array\n            while (j < k) {\n                // If triplet is found, return true\n                if (arr[i] === arr[j] + arr[k]) {\n                    return true;\n                }\n                // Adjust pointers based on the sum of current elements\n                else if (arr[i] > arr[j] + arr[k]) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}