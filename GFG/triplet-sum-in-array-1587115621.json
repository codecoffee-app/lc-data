{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701241,
            "title": "Triplet Sum in Array",
            "titleSlug": "triplet-sum-in-array-1587115621",
            "content": "<p><span >Given an array <strong><code>arr[]</code></strong> and an integer <strong><code>target</code></strong>, determine if there exists a triplet in the array whose sum equals the given <code>target</code>.</span></p>\n<p><span >Return <code>true</code> if such a triplet exists, otherwise, return <code>false</code>.</span></p>\n<p><span ><strong>Examples<br /></strong></span></p>\n<pre><span ><strong>Input</strong>: <code>arr[] = [1, 4, 45, 6, 10, 8]</code>, <code>target = 13</code> <br /><strong>Output</strong>: true <br /><strong>Explanation</strong>: The triplet {1, 4, 8} sums up to 13</span></pre>\n<pre><span ><strong>Input</strong>: <code>arr[] = [1, 2, 4, 3, 6, 7]</code>, <code>target = 10</code> <br /><strong>Output</strong>: true <br /><strong>Explanation</strong>: The triplets {1, 3, 6} and {1, 2, 7} both sum to 10. </span></pre>\n<pre><span ><strong>Input</strong>: <code>arr[] = [40, 20, 10, 3, 6, 7]</code>, <code>target = 24</code> <br /><strong>Output</strong>: false <br /><strong>Explanation</strong>: No triplet in the array sums to 24</span></pre>\n<p><span ><strong>Constraints:</strong><br />3 &le; arr.size() &le; 10<sup>3</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` and an integer `target`, determine whether there exists a triplet in `arr[]` whose sum is equal to `target`. Return `true` if such a triplet exists; otherwise, return `false`.",
                "constraints": [
                    "3 \u2264 arr.size() \u2264 10^3",
                    "1 \u2264 arr[i] \u2264 10^5"
                ],
                "testcases": [
                    {
                        "input": "`arr[] = [1, 4, 45, 6, 10, 8]`, `target = 13`",
                        "output": "true",
                        "explanation": "The triplet {1, 4, 8} sums to 13."
                    },
                    {
                        "input": "`arr[] = [1, 2, 4, 3, 6, 7]`, `target = 10`",
                        "output": "true",
                        "explanation": "The triplets {1, 3, 6} and {1, 2, 7} both sum to 10."
                    },
                    {
                        "input": "`arr[] = [40, 20, 10, 3, 6, 7]`, `target = 24`",
                        "output": "false",
                        "explanation": "No triplet in the array sums to 24."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort the array, then use a two-pointer approach to find a triplet with the target sum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "samsung",
            "carwale"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\n  public:\n    // Function to find if there exists a triplet in the\n    // array arr[] which sums up to the target.\n    bool hasTripletSum(vector<int> &arr, int target) {\n        int n = arr.size();\n        int l, r;\n\n        // Sorting the elements.\n        sort(arr.begin(), arr.end());\n\n        // Traversing the array elements.\n        for (int i = 0; i < n - 2; i++) {\n            // Taking two pointers. One at element after ith index and another\n            // at the last index.\n            l = i + 1;\n            r = n - 1;\n            while (l < r) {\n                // If sum of elements at indexes i, l and r is equal\n                // to the target, we return true.\n                if (arr[i] + arr[l] + arr[r] == target)\n                    return true;\n                // Else if the sum is less than the target, we increase the left pointer\n                // l.\n                else if (arr[i] + arr[l] + arr[r] < target)\n                    l++;\n                // Else the sum is more than the target, so we decrease the right\n                // pointer r.\n                else\n                    r--;\n            }\n        }\n\n        // Returning false if no triplet sum equal to the target is present.\n        return false;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find if there exists a triplet in the\n    // array arr[] which sums up to target.\n    public static boolean hasTripletSum(int arr[], int target) {\n        int l, r;\n\n        // Sorting the elements.\n        Arrays.sort(arr);\n\n        // Traversing the array elements.\n        for (int i = 0; i < arr.length - 2; i++) {\n            // Taking two pointers. One at element after ith index and another\n            // at the last index.\n            l = i + 1;\n            r = arr.length - 1;\n            while (l < r) {\n                // If sum of elements at indexes i, l and r is equal\n                // to the target, we return true.\n                if (arr[i] + arr[l] + arr[r] == target) {\n                    return true;\n                }\n                // Else if the sum is less than the target, we increase the left pointer\n                // l.\n                else if (arr[i] + arr[l] + arr[r] < target) {\n                    l++;\n                }\n                // Else the sum is more than the target, so we decrease the right\n                // pointer r.\n                else {\n                    r--;\n                }\n            }\n        }\n\n        // Returning false if no triplet sum equal to the target is present.\n        return false;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find if there exists a triplet in the array arr[] which sums up to target.\n    def hasTripletSum(self, arr, target):\n        arr.sort()  # Sorting the array\n\n        # Traversing the array elements.\n        for i in range(len(arr) - 2):\n            # Taking two pointers. One at element after i and another at the last index.\n            l = i + 1\n            r = len(arr) - 1\n\n            while l < r:\n                curr_sum = arr[i] + arr[l] + arr[r]\n\n                # If sum of elements at i, l, and r is equal to target, return True\n                if curr_sum == target:\n                    return True\n                # If the sum is less than target, we increase the left pointer l.\n                elif curr_sum < target:\n                    l += 1\n                # If the sum is more than target, we decrease the right pointer r.\n                else:\n                    r -= 1\n\n        # Returning False if no triplet sum equal to target is found.\n        return False\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for JavaScript\n\nclass Solution {\n    // Function to find if there exists a triplet in the array arr[] which sums up to\n    // target\n    hasTripletSum(arr, target) {\n        let l, r;\n\n        // Sorting the elements.\n        arr.sort(function(a, b) { return a - b; });\n\n        // Traversing the array elements.\n        for (let i = 0; i < arr.length - 2; i++) {\n\n            // Taking two pointers. One at element after i and another at the last\n            // index.\n            l = i + 1;\n            r = arr.length - 1;\n\n            while (l < r) {\n                // If sum of elements at indexes i, l, and r is equal to target, return\n                // true\n                let currentSum = arr[i] + arr[l] + arr[r];\n                if (currentSum === target) {\n                    return true;\n                }\n                // Else if the sum is less than target, move the left pointer to the\n                // right\n                else if (currentSum < target) {\n                    l++;\n                }\n                // Else, the sum is greater than the target, move the right pointer to\n                // the left\n                else {\n                    r--;\n                }\n            }\n        }\n\n        // Returning false if no triplet sum equal to the target is found.\n        return false;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}