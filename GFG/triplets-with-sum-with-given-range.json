{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706119,
            "title": "Triplets with sum with given range",
            "titleSlug": "triplets-with-sum-with-given-range",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>Arr[]&nbsp;</strong>of <strong>N</strong> distinct integers and a range from <strong>L</strong>&nbsp;to <strong>R</strong>, the task is to count the number of triplets having a sum in the range [L, R].</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 4\nArr = {8 , 3, 5, 2}\nL = 7, R = 11\n<strong>Output:</strong> 1\n<strong>Explaination:</strong> There is only one triplet {2, 3, 5}\nhaving sum 10 in range [7, 11].</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\nArr = {5, 1, 4, 3, 2}\nL = 2, R = 7\n<strong>Output:</strong> 2\n<strong>Explaination:</strong> There two triplets having \nsum in range [2, 7] are {1,4,2} and {1,3,2}.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>countTriplets()</strong>&nbsp;which takes the array <strong>Arr[]</strong> and its size <strong>N </strong>and <strong>L</strong> and <strong>R&nbsp;</strong>as input parameters&nbsp;and returns the count.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>3</sup><br />\n1 &le; Arr[i]&nbsp;&le; 10<sup>3</sup><br />\n1 &le; L&nbsp;&le; R &le; 10<sup>9</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `Arr` of `N` distinct integers and a range from `L` to `R`, the task is to count the number of triplets (i, j, k where i < j < k) in `Arr` such that the sum `Arr[i] + Arr[j] + Arr[k]` falls within the inclusive range [L, R].",
                "constraints": [
                    "1 <= N <= 10^3",
                    "1 <= Arr[i] <= 10^3",
                    "1 <= L <= R <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nArr = [8, 3, 5, 2]\nL = 7\nR = 11",
                        "output": "1",
                        "explanation": "The only triplet {2, 3, 5} sums to 10, which lies within the range [7, 11]."
                    },
                    {
                        "input": "N = 5\nArr = [5, 1, 4, 3, 2]\nL = 2\nR = 7",
                        "output": "2",
                        "explanation": "The triplets {1, 4, 2} and {1, 3, 2} have sums 7 and 6 respectively, which are within the range [2, 7]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to sort the numbers first.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find count of triplets having\n    // sum less than or equal to val.\n    int countTripletsLessThan(int arr[], int n, int val) {\n        // sort the input array.\n        sort(arr, arr + n);\n\n        // Initialize result\n        int ans = 0;\n\n        int j, k;\n\n        // to store sum\n        int sum;\n\n        // Fix the first element\n        for (int i = 0; i < n - 2; i++) {\n\n            // Initialize other two elements as\n            // corner elements of subarray arr[j+1..k]\n            j = i + 1;\n            k = n - 1;\n\n            // Use Meet in the Middle concept.\n            while (j != k) {\n                sum = arr[i] + arr[j] + arr[k];\n\n                // If sum of current triplet\n                // is greater, then to reduce it\n                // decrease k.\n                if (sum > val) k--;\n\n                // If sum is less than or equal\n                // to given value, then add\n                // possible triplets (k-j) to result.\n                else {\n                    ans += (k - j);\n                    j++;\n                }\n            }\n        }\n\n        return ans;\n    }\n\n    // Function to return count of triplets having\n    // sum in range [a, b].\n    int countTriplets(int Arr[], int N, int L, int R) {\n\n        // to store count of triplets.\n        int res;\n\n        // Find count of triplets having sum less\n        // than or equal to b and subtract count\n        // of triplets having sum less than or\n        // equal to a-1.\n        res = countTripletsLessThan(Arr, N, R) -\n              countTripletsLessThan(Arr, N, L - 1);\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int countTripletsLessThan(int[] arr, int n, int val) {\n        // sort the input array.\n        Arrays.sort(arr);\n\n        // Initialize result\n        int ans = 0;\n\n        int j, k;\n\n        // to store sum\n        int sum;\n\n        // Fix the first element\n        for (int i = 0; i < n - 2; i++) {\n\n            // Initialize other two elements\n            // as corner elements of subarray\n            // arr[j+1..k]\n            j = i + 1;\n            k = n - 1;\n\n            // Use Meet in the\n            // Middle concept.\n            while (j != k) {\n                sum = arr[i] + arr[j] + arr[k];\n\n                // If sum of current triplet\n                // is greater, then to reduce it\n                // decrease k.\n                if (sum > val) k--;\n\n                // If sum is less than or\n                // equal to given value,\n                // then add possible\n                // triplets (k-j) to result.\n                else {\n                    ans += (k - j);\n                    j++;\n                }\n            }\n        }\n\n        return ans;\n    }\n\n    // Function to return count\n    // of triplets having sum\n    // in range [a, b].\n    public static int countTriplets(int arr[], int n, int a, int b) {\n\n        // to store count\n        // of triplets.\n        int res;\n\n        // Find count of triplets\n        // having sum less than or\n        // equal to b and subtract\n        // count of triplets having\n        // sum less than or equal\n        // to a-1.\n        res = countTripletsLessThan(arr, n, b) -\n              countTripletsLessThan(arr, n, a - 1);\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "def countTripletsLessThan(arr, n, val):\n        # sort the input array.\n        arr.sort()\n    \n        # Initialize result\n        ans = 0\n    \n        j = 0; k = 0\n    \n        # to store sum\n        sum = 0\n    \n        # Fix the first element\n        for i in range(0,n-2):\n    \n            # Initialize other two \n            # elements as corner \n            # elements of subarray \n            # arr[j+1..k]\n            j = i + 1\n            k = n - 1\n    \n            # Use Meet in the \n            # Middle concept.\n            while j != k :\n                sum = arr[i] + arr[j] + arr[k]\n                \n                # If sum of current triplet\n                # is greater, then to reduce it\n                # decrease k.\n                if sum > val:\n                    k-=1\n    \n                # If sum is less than or \n                # equal to given value, \n                # then add possible \n                # triplets (k-j) to result.\n                else :\n                    ans += (k - j)\n                    j += 1\n        return ans\n        \nclass Solution:\n    # Function to return\n    # count of triplets having\n    # sum in range [a, b].\n    def countTriplets(self,arr, n, a, b):\n    \n        # to store count of triplets.\n        res = 0\n\n        # Find count of triplets \n        # having sum less than or \n        # equal to b and subtract \n        # count of triplets having \n        # sum less than or equal to a-1.\n        res = (countTripletsLessThan(arr, n, b) -\n            countTripletsLessThan(arr, n, a - 1))\n    \n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    \n    // Function to find count of triplets having sum less than or equal to val.\n    countTripletsLessThan(arr, n, val) {\n        // sort the input array.\n        arr.sort((a, b) => a - b);\n\n        // Initialize result\n        let ans = 0;\n\n        let j, k;\n\n        // to store sum\n        let sum;\n\n        // Fix the first element\n        for (let i = 0; i < n - 2; i++) {\n\n            // Initialize other two elements as\n            // corner elements of subarray arr[j+1..k]\n            j = i + 1;\n            k = n - 1;\n\n            // Use Meet in the Middle concept.\n            while (j < k) {\n                sum = arr[i] + arr[j] + arr[k];\n\n                // If sum of current triplet\n                // is greater, then to reduce it\n                // decrease k.\n                if (sum > val) k--;\n\n                // If sum is less than or equal\n                // to given value, then add\n                // possible triplets (k-j) to result.\n                else {\n                    ans += (k - j);\n                    j++;\n                }\n            }\n        }\n\n        return ans;\n    }\n    \n    // Function to return count of triplets having sum in range [L, R].\n    countTriplets(arr, N, L, R) {\n\n        // to store count of triplets.\n        let res;\n\n        // Find count of triplets having sum less\n        // than or equal to R and subtract count\n        // of triplets having sum less than or\n        // equal to L-1.\n        res = this.countTripletsLessThan(arr, N, R) -\n              this.countTripletsLessThan(arr, N, L - 1);\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}