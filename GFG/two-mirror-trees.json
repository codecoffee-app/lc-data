{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700156,
            "title": "Two Mirror Trees",
            "titleSlug": "two-mirror-trees",
            "content": "<p><span style=\"font-size: 18px;\">Given a Two Binary Trees, write a function that returns true if one is mirror of other, else returns false.<br /><img class=\"aligncenter size-full wp-image-663\" style=\"height: 400px; width: 500px;\" title=\"MirrorTree1\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/mirrortrees.jpg\" alt=\"MirrorTree1\" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>a:<strong>\\t</strong>1     b:<strong>\\t</strong>1\n&nbsp;     /   \\\\t   /   \\\n&nbsp;    2     3\\t 3     2\n<strong>Output: </strong>true<br /><strong>Explanation:</strong> Given pairs of binary tree are mirror of each other.<br /></span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\na:<strong>\\t</strong>10\\tb: <strong>   </strong>10\n&nbsp;\\t/  \\\\t    /  \\\n&nbsp;     20  30\\t  20  30\n&nbsp;    /  \\\\t    /  \\\n&nbsp;   40   60\\t 40  60<strong>\nOutput: </strong>false<br /></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:</strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> Given pairs of binary tree are not mirror of each other.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(h).</span><br /><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes&lt;= 10<sup>5</sup><br />0 &lt;= node -&gt; data&lt;= 10<sup>5</sup></span>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two binary trees, determine if they are mirror images of each other. A mirror image means that the left subtree of one tree is structurally identical to the right subtree of the other tree, and vice versa.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "0 <= node -> data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "Tree a:\n    1     \n   / \\\t   \n  2   3\t\nTree b:\n    1\n   / \\\n  3   2",
                        "output": "true",
                        "explanation": "The given binary trees are mirror images of each other."
                    },
                    {
                        "input": "Tree a:\n    10\n   / \\\n  20  30\n /  \\\n40   60\nTree b:\n    10\n   / \\\n  20  30\n /  \\\n40   60",
                        "output": "false",
                        "explanation": "The given binary trees are not mirror images of each other."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse in both trees together but in opposite directions.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "d-e-shaw",
            "hike"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int areMirror(Node* a, Node* b) {\n        /* Base case : Both empty */\n        if (a == NULL && b == NULL)\n            return true;\n\n        // If only one is empty\n        if (a == NULL || b == NULL)\n            return false;\n\n        /* Both non-empty, compare them recursively\n         Note that in recursive calls, we pass left\n         of one tree and right of other tree */\n        return a->data == b->data && areMirror(a->left, b->right) &&\n               areMirror(a->right, b->left);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    boolean areMirror(Node a, Node b) {\n        // Base case : Both empty\n        if (a == null && b == null) return true;\n\n        // If only one is empty\n        if (a == null || b == null) return false;\n\n        // Both non-empty, compare them recursively\n        // Note that in recursive calls, we pass left of one tree and right of the other\n        // tree\n        return a.data == b.data && areMirror(a.left, b.right) &&\n            areMirror(a.right, b.left);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to check if two trees are mirror images of each other.\n    def areMirror(self, a, b):\n\n        # If both trees are empty, they are mirror images.\n        if a is None and b is None:\n            return True\n\n        # If one tree is empty and the other is not, they are not mirror images.\n        if a is None or b is None:\n            return False\n\n        # Check if the data at the root of the two trees is equal\n        # and recursively check if the left subtree of one tree is\n        # the mirror image of the right subtree of the other tree,\n        # and vice versa.\n        return (a.data == b.data and self.areMirror(a.left, b.right)\n                and self.areMirror(a.right, b.left))\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    areMirror(a, b) {\n        // Base case: both trees are empty\n        if (a === null && b === null) {\n            return true;\n        }\n\n        // If only one tree is empty, they are not mirrors of each other\n        if (a === null || b === null) {\n            return false;\n        }\n\n        // Compare the data of the nodes and recursively check the mirrored subtrees\n        return (a.data === b.data && this.areMirror(a.left, b.right) &&\n                this.areMirror(a.right, b.left));\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}