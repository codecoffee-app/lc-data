{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705589,
            "title": "Two numbers with odd occurrences",
            "titleSlug": "two-numbers-with-odd-occurrences5846",
            "content": "<p><span style=\"font-size: 18px;\">Given an unsorted array,&nbsp;<strong>Arr</strong>[] of size <strong>N</strong> and that contains <strong>even </strong>number of occurrences for all numbers except two numbers. Find the two numbers in <strong>decreasing</strong> order which has <strong>odd</strong> occurrences.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 8\nArr = {4, 2, 4, 5, 2, 3, 3, 1}\n<strong>Output:</strong> {5, 1} \n<strong>Explanation:</strong> 5 and 1 have odd occurrences.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 8\nArr = {1 7 5 7 5 4 7 4}\n<strong>Output:</strong> {7, 1}\n<strong>Explanation:</strong> 7 and 1 have odd occurrences.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>twoOddNum()</strong>&nbsp;which takes the array <strong>Arr[]</strong> and its size <strong>N&nbsp;</strong>as input parameters&nbsp;and returns the two numbers in decreasing order which have odd occurrences.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; N &le; 10<sup>6</sup><br />1 &le; Arr<sub>i</sub>&nbsp;&le; 10<sup>12</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array, **Arr** of size **N**, where all numbers occur an even number of times except for two numbers. Find those two numbers which occur an odd number of times and return them in decreasing order.",
                "constraints": [
                    "2 \u2264 N \u2264 10^6",
                    "1 \u2264 Arr[i] \u2264 10^12"
                ],
                "testcases": [
                    {
                        "input": "N = 8\nArr = {4, 2, 4, 5, 2, 3, 3, 1}",
                        "output": "{5, 1}",
                        "explanation": "The numbers 5 and 1 appear once each, which is an odd number of times. These are the only two numbers that satisfy the criteria. Ordering them in decreasing order gives {5, 1}."
                    },
                    {
                        "input": "N = 8\nArr = {1, 7, 5, 7, 5, 4, 7, 4}",
                        "output": "{7, 1}",
                        "explanation": "The numbers 7 and 1 appear once each, which is an odd number of times. These are the only two numbers that satisfy the criteria. Ordering them in decreasing order gives {7, 1}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\"><strong>use bitwise XOR</strong></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Operators",
                "slug": "operators"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n    //Function to find two odd occurring numbers in an array.\r\n    vector<long long int> twoOddNum(long long int Arr[], long long int N){\r\n        \r\n        long long int xor2 = Arr[0]; /* Will hold XOR of two odd occurring elements */\r\n        long long int set_bit_no; /* Will have only single set bit of xor2 */\r\n        long long int i, x = 0, y = 0;  \r\n          \r\n        /* Get the xor of all elements in Arr[]. The xor will basically  \r\n            be xor of two odd occurring elements */\r\n        for(i = 1; i < N; i++)  \r\n            xor2 = xor2 ^ Arr[i];  \r\n          \r\n        /* Get one set bit in the xor2. We get rightmost set bit  \r\n            in the following line as it is easy to get */\r\n        set_bit_no = xor2 & ~(xor2-1);  \r\n          \r\n        /* Now divide elements in two sets:  \r\n            1) The elements having the corresponding bit as 1.  \r\n            2) The elements having the corresponding bit as 0. */\r\n        for(i = 0; i < N; i++){  \r\n            /* XOR of first set is finally going to hold one odd  \r\n            occurring number x */\r\n            if(Arr[i] & set_bit_no)  \r\n            x = x ^ Arr[i];  \r\n          \r\n            /* XOR of second set is finally going to hold the other  \r\n            odd occurring number y */\r\n            else\r\n            y = y ^ Arr[i];  \r\n        }\r\n        \r\n        //Creating a vector to store the two odd occurring numbers.\r\n        vector<long long int>v;\r\n        v.push_back(max(x,y)); //Inserting maximum odd occurring number into vector\r\n        v.push_back(min(x,y)); //Inserting minimum odd occurring number into vector\r\n        return v; \r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int[] twoOddNum(int Arr[], int N) {\n        // Initializing xor variable with the first element of the array\n        int xor = Arr[0];\n        \n        // Calculating xor of all array elements\n        for (int i = 1; i < N; i++) {\n            xor ^= Arr[i];\n        }\n        \n        // Finding the position of the last set bit in the xor variable\n        int last_set_bit = (xor & (~(xor - 1)));\n        \n        // Initializing x and y variables\n        int x = 0;\n        int y = 0;\n        \n        // Separating the array elements into two groups based on the position of the last set bit\n        for (int i = 0; i < N; i++) {\n            if ((Arr[i] & last_set_bit) == 0) {\n                x ^= Arr[i];\n            } else {\n                y ^= Arr[i];\n            }\n        }\n        \n        // Returning the two odd numbers as an array\n        return new int[]{Math.max(x, y), Math.min(x, y)};\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\r\n    \r\n    #Function to find two odd occurring numbers in an array.\r\n    def twoOddNum(self, Arr, N):\r\n        \r\n        #initializing variables\r\n        xor2 = Arr[0]     #to store the xor of all elements\r\n        x = 0             #to store the first odd occurring number\r\n        y = 0             #to store the second odd occurring number\r\n        \r\n        #calculating xor of all elements in the array\r\n        for i in range(1, N):\r\n            xor2 = xor2 ^ Arr[i]\r\n        \r\n        #finding the rightmost set bit in xor2\r\n        set_bit_no = (xor2) & ~(xor2-1)\r\n        \r\n        #finding the first odd occurring number (x) and the second odd occurring number (y)\r\n        for i in range(N):\r\n            if Arr[i] & set_bit_no:\r\n                x = x ^ Arr[i]\r\n            else:\r\n                y = y ^ Arr[i]\r\n        \r\n        #returning the max and min values of x and y as a list\r\n        v = [max(x, y), min(x, y)]\r\n        return v",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} Arr\n * @param {number} N\n * @returns {number[]}\n*/\n\nclass Solution\n{\n    // Function to find two odd occurring numbers in an array.\n    twoOddNum(Arr, N)\n    {\n        let xor2 = Arr[0];     //to store the xor of all elements\n        let x = 0;             //to store the first odd occurring number\n        let y = 0;             //to store the second odd occurring number\n        \n        //calculating xor of all elements in the array\n        for (let i = 1; i < N; i++) {\n            xor2 = xor2 ^ Arr[i];\n        }\n        \n        //finding the rightmost set bit in xor2\n        let set_bit_no = (xor2) & ~(xor2-1);\n        \n        //finding the first odd occurring number (x) and the second odd occurring number (y)\n        for (let i = 0; i < N; i++) {\n            if (Arr[i] & set_bit_no) {\n                x = x ^ Arr[i];\n            } else {\n                y = y ^ Arr[i];\n            }\n        }\n        \n        //returning the max and min values of x and y as a list\n        let v = [Math.max(x, y), Math.min(x, y)];\n        return v;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}