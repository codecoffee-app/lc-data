{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702822,
            "title": "Pair Sum Closest to 0",
            "titleSlug": "two-numbers-with-sum-closest-to-zero1737",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer array&nbsp;of&nbsp;<strong>N</strong>&nbsp;elements. You need to find the maximum sum of two elements such that sum is closest to zero.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 3\narr[] = {-8 -66 -60}\n<strong>Output:</strong> -68\n<strong>Explanation</strong>: Sum of two elements closest to \nzero is -68 using numbers -60 and -8.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nN = 6\narr[] = {-21 -67 -37 -18 4 -65}\n<strong>Output:</strong> -14\n<strong>Explanation</strong>: Sum of two elements closest to\nzero is -14 using numbers -18 and 4.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong> : In Case if we have two of more ways to form sum of two elements closest to zero return the maximum sum.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. You just need to complete the function&nbsp;<strong>closestToZero()&nbsp;</strong>which takes an array arr[] and its size n as inputs and returns&nbsp;the maximum sum closest to zero that can be formed by summing any two elements in the array.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N*logN).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; N &le;&nbsp;5 *&nbsp;10<sup>5</sup><br />-10<sup>6</sup> &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array of N elements, find the maximum sum of two distinct elements in the array that is closest to zero.",
                "constraints": [
                    "2 <= N <= 5 * 10^5",
                    "-10^6 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 3\narr[] = {-8, -66, -60}",
                        "output": "-68",
                        "explanation": "The pair of numbers -60 and -8 sums to -68, which is the closest sum to zero among all possible pairs."
                    },
                    {
                        "input": "N = 6\narr[] = {-21, -67, -37, -18, 4, -65}",
                        "output": "-14",
                        "explanation": "The pair of numbers -18 and 4 sums to -14, which is the closest sum to zero among all possible pairs."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">1. Sort the given array, try two pointer algorithm to find sum closest to zero.</span></p>",
            "<p><span style=\"font-size:18px\">2.Step1: Maintain two pointer left and right initialized with 0 and n-1.<br />\n&nbsp;&nbsp; Step2: find sum(arr[left] + arr[right]) and check if absolute sum is &lt; previous absolute sum then update the previous sum<br />\n&nbsp;&nbsp; Step3: increment left pointer by 1 if sum &lt; 0, otherwise if sum &gt; 0 then decrement right pointer by 1.<br />\n&nbsp;&nbsp; Step4: Repeat above step until left &lt; right.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "microsoft",
            "snapdeal"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n    public:\r\n        int closestToZero(int arr[], int n)\r\n        {\r\n        \tsort (arr, arr + n); // sorting the array\r\n        \tint i = 0, j = n - 1;\r\n        \tint sum = arr[i] + arr[j]; // initializing sum\r\n        \tint diff = abs (sum); // initializing the result\r\n        \r\n        \twhile (i < j)\r\n        \t{\r\n        \t    // if we have zero sum, there's no result better. Hence, we return\r\n        \t\tif (arr[i] + arr[j] == 0) \r\n        \t\t\treturn 0;\r\n        \t\t\t\r\n        \t\t// if we get a better result, we update the difference\r\n        \t\tif (abs (arr[i] + arr[j]) < abs (diff))\r\n        \t\t{\r\n        \t\t\tdiff = (arr[i] + arr[j]);\r\n        \t\t\tsum = arr[i] + arr[j];\r\n        \t\t}\r\n        \t\telse if(abs (arr[i] + arr[j]) == abs (diff))\r\n                {\r\n                    sum=max(sum,arr[i]+arr[j]);\r\n                }\r\n                \r\n                // if the current sum is greater than zero, we search for a smaller sum\r\n        \t\tif (arr[i] + arr[j] > 0)\r\n        \t\t\tj--;\r\n        \t\t// else, we search for a larger sum\r\n        \t\telse\r\n        \t\t\ti++;\r\n        \t}\r\n        \treturn sum;\r\n        }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static int closestToZero (int arr[], int n)\r\n    {\r\n        Arrays.sort(arr);  // sorting the array\r\n    \tint i = 0, j = n - 1;\r\n    \tint sum = arr[i] + arr[j]; // initializing sum\r\n    \tint diff = Math.abs (sum); // initializing the result\r\n    \r\n    \twhile (i < j)\r\n    \t{\r\n    \t    // if we have zero sum, there's no result better. Hence, we return\r\n    \t\tif (arr[i] + arr[j] == 0) \r\n    \t\t\treturn 0;\r\n    \t\t\t\r\n    \t\t// if we get a better result, we update the difference\r\n    \t\tif (Math.abs (arr[i] + arr[j]) < Math.abs (diff))\r\n    \t\t{\r\n    \t\t\tdiff = (arr[i] + arr[j]);\r\n    \t\t\tsum = arr[i] + arr[j];\r\n    \t\t}\r\n    \t\telse if (Math.abs (arr[i] + arr[j]) == Math.abs (diff))\r\n    \t\t{\r\n    \t\t    sum = Math.max(sum,arr[i] + arr[j]);\r\n    \t\t}\r\n            \r\n            // if the current sum is greater than zero, we search for a smaller sum\r\n    \t\tif (arr[i] + arr[j] > 0)\r\n    \t\t\tj--;\r\n    \t\t// else, we search for a larger sum\r\n    \t\telse\r\n    \t\t\ti++;\r\n    \t}\r\n    \treturn sum;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def closestToZero (self,arr, n):\r\n        arr.sort () # sorting the array\r\n        \r\n        i = 0\r\n        j = n-1\r\n        sum = arr[i] + arr[j] # initializing sum\r\n        diff = abs (sum) # initializing result\r\n        \r\n        while i < j:\r\n            # if we have zero sum, there's no result better. Hence, we return\r\n            if (arr[i] + arr[j] == 0):\r\n                return 0\r\n            \r\n            # if we get a better result, we update the difference\r\n            if (abs (arr[i] + arr[j]) < abs (diff)):\r\n                diff = (arr[i] + arr[j])\r\n                sum = arr[i] + arr[j]\r\n            elif (abs (arr[i] + arr[j]) == abs (diff)):\r\n                sum = max(sum,arr[i] + arr[j])\r\n            \r\n            # if the current sum is greater than zero, we search for a smaller sum\r\n            if (arr[i] + arr[j] > 0):\r\n                j -= 1\r\n            \r\n            # else, we search for a larger sum\r\n            else:\r\n                i += 1\r\n        \r\n        return sum",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} n\n * @return {number}\n*/\n\nclass Solution {\n\n    closestToZero(arr,n){\n        arr.sort((a, b) => a - b); // sorting the array\n        let i = 0, j = n - 1;\n        let sum = arr[i] + arr[j]; // initializing sum\n        let diff = Math.abs(sum); // initializing the result\n    \n        while (i < j)\n        {\n            // if we have zero sum, there's no result better. Hence, we return\n            if (arr[i] + arr[j] == 0) \n                return 0;\n                \n            // if we get a better result, we update the difference\n            if (Math.abs(arr[i] + arr[j]) < Math.abs(diff))\n            {\n                diff = (arr[i] + arr[j]);\n                sum = arr[i] + arr[j];\n            }\n            else if(Math.abs(arr[i] + arr[j]) == Math.abs(diff))\n            {\n                sum = Math.max(sum, arr[i] + arr[j]);\n            }\n            \n            // if the current sum is greater than zero, we search for a smaller sum\n            if (arr[i] + arr[j] > 0)\n                j--;\n            // else, we search for a larger sum\n            else\n                i++;\n        }\n        return sum;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}