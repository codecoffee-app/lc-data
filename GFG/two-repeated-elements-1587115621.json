{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701227,
            "title": "Two Repeated Elements",
            "titleSlug": "two-repeated-elements-1587115621",
            "content": "<p><span >You are given an integer&nbsp;<strong>n&nbsp;</strong>and an integer&nbsp;array <strong>arr</strong> of size <strong>n+2</strong>. All elements of the array are in the range from 1 to <strong>n</strong>. Also, all elements occur once except two numbers which occur twice. Find the two repeating numbers.<br /><strong>Note: </strong>Return the numbers in their order of appearing twice. So, if <strong>x</strong> and <strong>y</strong> are repeating numbers, and <strong>x</strong>'s second appearance comes before the second appearance of <strong>y</strong>, then the order should be (<strong>x</strong>, <strong>y</strong>).</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 4, arr[] = [1, 2, 1, 3, 4, 3]\n<strong>Output: </strong>1 3<strong>\nExplanation: </strong>In the given array, 1 and 3 are repeated two times, and as 1's second appearance occurs before 2's second appearance, so the output should be 1 3.</span></pre>\n<pre><span ><strong>Input: </strong>n = 2, arr[] = [1, 2, 2, 1]\n<strong>Output: </strong>2 1<strong>\nExplanation: </strong>In the given array, 1 and 2 are repeated two times and second occurence of 2 comes before 1. So the output is 2 1.\n</span></pre>\n<p><span ><strong>Constraints: </strong><br />2 &le; n &le; 10<sup>5</sup><br />1 &le; arr[i] &le; n</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `n` and an integer array `arr` of size `n+2`, where all elements are in the range from 1 to `n`. All elements occur once except for two numbers that occur twice. Find the two repeating numbers. The order of the output should be based on the order of their second appearance in the array.",
                "constraints": [
                    "2 <= n <= 10^5",
                    "1 <= arr[i] <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr[] = [1, 2, 1, 3, 4, 3]",
                        "output": "1 3",
                        "explanation": "The numbers 1 and 3 are repeated. The second occurrence of 1 appears before the second occurrence of 3, so the output is 1 3."
                    },
                    {
                        "input": "n = 2, arr[] = [1, 2, 2, 1]",
                        "output": "2 1",
                        "explanation": "The numbers 1 and 2 are repeated. The second occurrence of 2 appears before the second occurrence of 1, so the output is 2 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: arial, helvetica, sans-serif; font-size: 14pt; white-space-collapse: preserve; background-color: #ffffff;\">Use the concept of cyclic sort to identify the repeating elements. Keep track of the elements that are out of place.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find two repeated elements.\n    vector<int> twoRepeated(int n, int arr[]) {\n        vector<int> res(2);\n        bool first = false;\n\n        // iterating over the array elements.\n        for (int i = 0; i < n + 2; i++) {\n            // making the visited elements negative.\n            if (arr[abs(arr[i])] > 0)\n                arr[abs(arr[i])] = -arr[abs(arr[i])];\n\n            // if the number is negative, it was visited previously\n            // so this would be the repeated element.\n            else {\n                // storing first and second repeated element accordingly.\n                if (first == false) {\n                    res[0] = abs(arr[i]);\n                    first = true;\n                } else {\n                    res[1] = abs(arr[i]);\n                    break;\n                }\n            }\n        }\n        // returning the result.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Backend complete function template for JAVA\n\nclass Solution {\n    // Function to find two repeated elements.\n    public int[] twoRepeated(int n, int arr[]) {\n        boolean first = false;\n        int[] res = new int[2];\n\n        // iterating over the array elements.\n        for (int p = 0; p < n + 2; p++) {\n            // making the visited elements negative.\n            if (arr[Math.abs(arr[p])] > 0) {\n                arr[Math.abs(arr[p])] = -arr[Math.abs(arr[p])];\n            }\n            // if the number is negative, it was visited previously\n            // so this would be the repeated element.\n            else {\n                // storing first and second repeated element accordingly.\n                if (first == false) {\n                    res[0] = Math.abs(arr[p]);\n                    first = true;\n                } else\n                    res[1] = Math.abs(arr[p]);\n            }\n        }\n        // returning the result.\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to find two repeated elements.\n    def twoRepeated(self, n, arr):\n\n        res = []\n        first = False\n\n        #iterating over the array elements.\n        for i in range(0, n + 2):\n\n            #making the visited elements negative.\n            if arr[abs(arr[i])] > 0:\n                arr[abs(arr[i])] = -arr[abs(arr[i])]\n\n            #if the number is negative, it was visited previously\n            #so this would be the repeated element.\n            else:\n\n                #storing first and second repeated element accordingly.\n                if (first == False):\n                    res.append(abs(arr[i]))\n                    first = True\n                else:\n                    res.append(abs(arr[i]))\n\n        #returning the result.\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} n\n * @param {number[]} arr\n * @returns {number []}\n */\n\nclass Solution {\n    // Function to find two repeated elements.\n    twoRepeated(n, arr) {\n        let first = false;\n        let res = new Array();\n\n        // iterating over the array elements.\n        for (let p = 0; p < n + 2; p++) {\n            // making the visited elements negative.\n            if (arr[Math.abs(arr[p])] > 0) {\n                arr[Math.abs(arr[p])] = -arr[Math.abs(arr[p])];\n            }\n            // if the number is negative, it was visited previously\n            // so this would be the repeated element.\n            else {\n                // storing first and second repeated element accordingly.\n                if (first === false) {\n                    res.push(Math.abs(arr[p]));\n                    first = true;\n                } else\n                    res.push(Math.abs(arr[p]));\n            }\n        }\n        // returning the result.\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}