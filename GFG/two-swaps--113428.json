{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 717670,
            "title": "Two Swaps",
            "titleSlug": "two-swaps--113428",
            "content": "<p><span style=\"font-size: 18px;\">Given a permutation of first n natural numbers as an array<strong> arr[]</strong></span><span style=\"font-size: 18px;\">. Your task is to sort&nbsp;the&nbsp;array&nbsp;in <strong>exactly</strong> two swaps. If It is possible to sort the array then return true otherwise return false.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> You can't swap the same pair of indexes two times.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [4, 3, 2, 1]\n<strong>Output: </strong>true\n<strong>Explanation: \n</strong>swap(arr[1], arr[4]), now arr[] = [1, 3, 2, 4]\nswap(arr[2], arr[3]), now arr[] = [1, 2, 3, 4]</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 3, 1, 2]\n<strong>Output: </strong>false<strong>\nExplanation: </strong>\nNot possible to sort the array in 2 swaps.</span>\n</pre>\n<p><strong style=\"font-size: 18px;\">Expected Time Complexity:&nbsp;</strong><span style=\"font-size: 18px;\">O(n)</span><br style=\"font-size: 18px;\" /><strong style=\"font-size: 18px;\">Expected Auxiliary Space:&nbsp;</strong><span style=\"font-size: 18px;\">O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a permutation of the first n natural numbers represented as an array `arr[]`, determine if it's possible to sort the array into ascending order using exactly two swaps. Each pair of indices can be swapped only once. Return `true` if sorting is possible with two swaps, and `false` otherwise.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "1 <= arr[i] <= arr.length"
                ],
                "testcases": [
                    {
                        "input": "[4, 3, 2, 1]",
                        "output": "true",
                        "explanation": "First swap: arr[0] and arr[3], resulting in [1, 3, 2, 4].  Second swap: arr[1] and arr[2], resulting in [1, 2, 3, 4]. The array is now sorted."
                    },
                    {
                        "input": "[4, 3, 1, 2]",
                        "output": "false",
                        "explanation": "It is not possible to sort the array [4, 3, 1, 2] using only two swaps."
                    },
                    {
                        "input": "[1, 2, 3, 4, 5]",
                        "output": "false",
                        "explanation": "The array is already sorted, so no swaps are needed. Since exactly two swaps are required, the answer is false."
                    },
                    {
                        "input": "[2, 1, 3, 4, 5]",
                        "output": "false",
                        "explanation": "We can sort this in one swap. Since exactly two swaps are required, the answer is false."
                    },
                    {
                        "input": "[3, 1, 2]",
                        "output": "true",
                        "explanation": "swap(0,1): [1,3,2]. swap(1,2): [1,2,3]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Count mismatches and check if two swaps can place all elements in their correct positions.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool checkSorted(vector<int>& arr) {\n        int N = arr.size();\n        int cnt = 0;\n\n        // Step 1: Count the number of mismatches\n        for (int i = 0; i < N; i++) {\n            if (arr[i] != i + 1) {\n                cnt++;\n            }\n        }\n\n        // Step 2: Handle base cases\n        if (cnt == 0)\n            return true; // Already sorted\n        if (cnt > 4 || cnt < 3)\n            return false; // More than 4 or fewer than 3 mismatches cannot be fixed with\n                          // a single swap\n        if (cnt == 3)\n            return true; // Special case when there are exactly 3 mismatches\n\n        // Step 3: Verify if swapping will solve the problem\n        for (int i = 0; i < N; i++) {\n            if (arr[i] != i + 1) {\n                // Check if swapping the current element with its correct position would\n                // fix the array\n                if (arr[arr[i] - 1] != i + 1) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\nclass Solution {\n    boolean checkSorted(int[] arr) {\n        int N = arr.length;\n        int cnt = 0;\n\n        // Step 1: Count the number of mismatches\n        for (int i = 0; i < N; i++) {\n            if (arr[i] != i + 1) {\n                cnt++;\n            }\n        }\n\n        // Step 2: Handle base cases\n        if (cnt == 0) return true; // Already sorted\n        if (cnt > 4 || cnt < 3)\n            return false; // More than 4 or fewer than 3 mismatches cannot be fixed with\n                          // a single swap\n        if (cnt == 3) return true; // Special case when there are exactly 3 mismatches\n\n        // Step 3: Verify if swapping will solve the problem\n        for (int i = 0; i < N; i++) {\n            if (arr[i] != i + 1) {\n                // Check if swapping the current element with its correct position would\n                // fix the array\n                if (arr[arr[i] - 1] != i + 1) {\n                    return false;\n                }\n            }\n        }\n\n        return true; // The array can be sorted with a single swap\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# User function Template for python3\nclass Solution:\n\n    def checkSorted(self, arr):\n        N = len(arr)\n        cnt = 0\n\n        # Step 1: Count the number of mismatches\n        for i in range(N):\n            if arr[i] != i + 1:\n                cnt += 1\n\n        # Step 2: Handle base cases\n        if cnt == 0:\n            return True  # Already sorted\n        if cnt > 4 or cnt < 3:\n            return False  # More than 4 or fewer than 3 mismatches cannot be fixed with a single swap\n        if cnt == 3:\n            return True  # Special case when there are exactly 3 mismatches\n\n        # Step 3: Verify if swapping will solve the problem\n        for i in range(N):\n            if arr[i] != i + 1:\n                # Check if swapping the current element with its correct position would fix the array\n                if arr[arr[i] - 1] != i + 1:\n                    return False\n\n        return True  # The array can be sorted with a single swap\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number[]} arr\n     * @returns {boolean}\n     */\n    checkSorted(arr) {\n        const N = arr.length;\n        let cnt = 0;\n\n        // Step 1: Count the number of mismatches\n        for (let i = 0; i < N; i++) {\n            if (arr[i] !== i + 1) {\n                cnt++;\n            }\n        }\n\n        // Step 2: Handle base cases\n        if (cnt === 0) {\n            return true; // Already sorted\n        }\n        if (cnt > 4 || cnt < 3) {\n            return false; // More than 4 or fewer than 3 mismatches cannot be fixed with\n                          // a single swap\n        }\n        if (cnt === 3) {\n            return true; // Special case when there are exactly 3 mismatches\n        }\n\n        // Step 3: Verify if swapping will solve the problem\n        for (let i = 0; i < N; i++) {\n            if (arr[i] !== i + 1) {\n                // Check if swapping the current element with its correct position would\n                // fix the array\n                if (arr[arr[i] - 1] !== i + 1) {\n                    return false;\n                }\n            }\n        }\n\n        return true; // The array can be sorted with a single swap\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}