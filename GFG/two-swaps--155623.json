{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 875836,
            "title": "Two Swaps",
            "titleSlug": "two-swaps--155623",
            "content": "<p><span >Given a permutation of some of the first natural numbers in an array <strong>arr[]</strong>, determine if the array can be sorted in exactly two swaps. A swap can involve the same pair of indices twice.</span></p>\n<p><span >Return <strong>true</strong> if it is possible to sort the array with exactly two or zero swaps, otherwise return <strong>false</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr = <span style=\"font-family: math;\">[</span><span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord\">4</span><span class=\"mpunct\">, </span><span class=\"mord\">3</span><span class=\"mpunct\">, </span><span class=\"mord\">2</span><span class=\"mpunct\">, </span><span class=\"mord\">1]</span></span></span></span></span><br /><span ><strong>Output:</strong> true</span><br /><span ><strong>Explanation: </strong></span><span >First, swap <strong>arr[0]</strong> and <strong>arr[3]</strong>. The array becomes <span style=\"font-family: math;\">[</span><span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord\">1</span><span class=\"mpunct\">, </span><span class=\"mord\">3</span><span class=\"mpunct\">, </span><span class=\"mord\">2</span><span class=\"mpunct\">, </span><span class=\"mord\">4]</span></span></span></span>. </span><span >Then, swap <strong>arr[1]</strong> and <strong>arr[2]</strong>. The array becomes [<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord\">1</span><span class=\"mpunct\">, </span><span class=\"mord\">2</span><span class=\"mpunct\">, </span><span class=\"mord\">3</span><span class=\"mpunct\">, </span><span class=\"mord\">4],</span></span></span></span>&nbsp;which is sorted.</span></pre>\n<pre><span ><strong>Input:</strong> arr = <span class=\"katex\"><span class=\"katex-mathml\">[4, 3, 1, 2</span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord\">]</span></span></span></span></span><br /><span ><strong>Output:</strong> false</span><br /><span ><strong>Explanation:</strong> It is not possible to sort the array with exactly two swaps.<br /></span></pre>\n<pre><span ><strong>Input:</strong> arr = <span class=\"katex\"><span class=\"katex-mathml\">[1, 2, 3, 4</span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord\">]</span></span></span></span></span><br /><span ><strong>Output:</strong> true</span><br /><span ><strong>Explanation:</strong> It is already sorted array, so no swaps needed.</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &le; arr.size() &le; 10<sup>6</sup></span><br /><span >1 &le; arr[i] &le; arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Calculate number of misplaced elements and try to fix them.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void doOneSwap(int &n, vector<int> &arr) {\n        for (int i = 0; i < n; i++) {\n            if (arr[i] != i + 1) {\n                for (int j = i + 1; j < n; j++) {\n                    if (arr[j] == i + 1) {\n                        swap(arr[i], arr[j]);\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    bool checkSorted(vector<int> &arr) {\n        int n = arr.size();\n        int misMatch = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] != i + 1)\n                misMatch++;\n        }\n        if (n == 1)\n            return false;\n        if (misMatch == 0 || misMatch == 3)\n            return true;\n        if (misMatch != 4)\n            return false;\n        doOneSwap(n, arr);\n        doOneSwap(n, arr);\n        for (int i = 0; i < n; i++) {\n            if (arr[i] != i + 1)\n                return false;\n        }\n        return true;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to swap once in case of mismatch\n    public void doOneSwap(int n, List<Integer> arr) {\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) != i + 1) {\n                for (int j = i + 1; j < n; j++) {\n                    if (arr.get(j) == i + 1) {\n                        Collections.swap(arr, i, j);\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    // Function to check if sorted or can be sorted with a maximum of two swaps\n    public boolean checkSorted(List<Integer> arr) {\n        int n = arr.size();\n        int misMatch = 0;\n\n        // Count mismatches\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) != i + 1) misMatch++;\n        }\n\n        // Edge case if size is 1\n        if (n == 1) return false;\n\n        // If already sorted or only 3 mismatches\n        if (misMatch == 0 || misMatch == 3) return true;\n\n        // If mismatches are not exactly 4, return false\n        if (misMatch != 4) return false;\n\n        // Perform two swaps\n        doOneSwap(n, arr);\n        doOneSwap(n, arr);\n\n        // Final check if sorted\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) != i + 1) return false;\n        }\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def doOneSwap(self, n, arr):\n        for i in range(n):\n            if arr[i] != i + 1:\n                for j in range(i + 1, n):\n                    if arr[j] == i + 1:\n                        arr[i], arr[j] = arr[j], arr[i]\n                        return\n\n    def checkSorted(self, arr):\n        n = len(arr)\n        misMatch = 0\n\n        # Count the number of mismatches\n        for i in range(n):\n            if arr[i] != i + 1:\n                misMatch += 1\n\n        # Handle edge cases based on mismatch count\n        if n == 1:\n            return False\n        if misMatch == 0 or misMatch == 3:\n            return True\n        if misMatch != 4:\n            return False\n\n        # Try to sort the array with two swaps\n        self.doOneSwap(n, arr)\n        self.doOneSwap(n, arr)\n\n        # Check if the array is now sorted\n        for i in range(n):\n            if arr[i] != i + 1:\n                return False\n\n        return True\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to swap once in case of mismatch\n    doOneSwap(n, arr) {\n        for (let i = 0; i < n; i++) {\n            if (arr[i] !== i + 1) {\n                for (let j = i + 1; j < n; j++) {\n                    if (arr[j] === i + 1) {\n                        [arr[i], arr[j]] = [ arr[j], arr[i] ]; // Swap elements\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    // Function to check if sorted or can be sorted with a maximum of two swaps\n    checkSorted(arr) {\n        let n = arr.length;\n        let misMatch = 0;\n\n        // Count mismatches\n        for (let i = 0; i < n; i++) {\n            if (arr[i] !== i + 1) {\n                misMatch++;\n            }\n        }\n\n        // Edge case if size is 1\n        if (n === 1) {\n            return false;\n        }\n\n        // If already sorted or only 3 mismatches\n        if (misMatch === 0 || misMatch === 3) {\n            return true;\n        }\n\n        // If mismatches are not exactly 4, return false\n        if (misMatch !== 4) {\n            return false;\n        }\n\n        // Perform two swaps\n        this.doOneSwap(n, arr);\n        this.doOneSwap(n, arr);\n\n        // Final check if sorted\n        for (let i = 0; i < n; i++) {\n            if (arr[i] !== i + 1) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}