{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713195,
            "title": "Type it!",
            "titleSlug": "type-it--170645",
            "content": "<p><span style=\"font-size:18px\">Geek is extremely punctual&nbsp;but today even he is not feeling like doing his homework assignment. He must start doing it immediately in order to meet the&nbsp;deadline. For the assignment, Geek needs to type a&nbsp;string <strong>s</strong>.<br />\r\nTo reduce his workload, he has decided to perform&nbsp;one of the following two operations till he gets the string.</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">Append a character at the end of the string.</span></li>\r\n\t<li><span style=\"font-size:18px\">Append the string formed thus far to the end of the string. (This can not be done&nbsp;more than once.)</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\">Help Geek find the minimum operations required to type the given string.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\ns = abcabca\r\n<strong>Output:</strong>&nbsp;5\r\n<strong>Explanation</strong>: a -&gt; ab -&gt; abc -&gt; abcabc \r\n-&gt; abcabca\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\ns = abcdefgh\r\n<strong>Output:&nbsp;</strong>8\r\n<strong>Explanation</strong>: a -&gt; ab -&gt; abc -&gt; abcd \r\n-&gt; abcde -&gt; abcdef -&gt; abcdefg -&gt; abcdefgh\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>minOperation()</strong>&nbsp;which takes a string s<strong>&nbsp;</strong>as input parameter&nbsp;and returns the minimum operations required to type it.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>)<br />\r\n<strong>Expected Auxiliary Space: </strong>O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>3</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek needs to type a string `s` and wants to minimize the number of operations. He can perform the following operations:\n\n*   Append a character to the end of the string.\n*   Append the string formed thus far to the end of the string (can be done at most once).",
                "constraints": [
                    "1 <= N <= 10^3, where N is the length of the string s"
                ],
                "testcases": [
                    {
                        "input": "abcabca",
                        "output": "5",
                        "explanation": "a -> ab -> abc -> abcabc -> abcabca"
                    },
                    {
                        "input": "abcdefgh",
                        "output": "8",
                        "explanation": "a -> ab -> abc -> abcd -> abcde -> abcdef -> abcdefg -> abcdefgh"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Since second operation can be done at most once, try and use it wisely. Make the biggest possible string by this operation.</span></p>",
            "<p><span style=\"font-size:18px\">To perform the second operation, take the righmost index i such that s[0...i] = s[i+1 .... 2i].</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find the minimum number of operations required\n    int minOperation(string s) {\n        int n = s.size();\n        // Iterating from middle of string to first character\n        for (int i = n / 2 - 1; i >= 0; --i)\n            // Checking if the left substring is equal to the right substring\n            if (s.substr(0, i + 1) == s.substr(i + 1, i + 1))\n                // Returning the minimum number of operations required\n                return (i + 1) + 1 + (n - 2 * (i + 1));\n\n        // If no operations required, return the length of the string\n        return n;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Function to calculate the minimum number of operations required\n// to make the string s a palindrome.\n\nclass Solution {\n    int minOperation(String s) {\n    \n        // Getting the length of the input string\n        int n = s.length();\n        \n        // Looping through the first half of the string in reverse order\n        for (int i = n / 2 - 1; i >= 0; --i)\n            \n            // Checking if the substring from the start to current index\n            // is equal to the substring from current index + 1 to the\n            // end (checking if it is a palindrome)\n            if (s.substring(0, i + 1).equals(s.substring(i + 1, 2 * (i + 1))))\n                \n                // If it is a palindrome, returning the number of operations\n                // required (i + 1) + 1 + (n - 2 * (i + 1))\n                return (i + 1) + 1 + (n - 2 * (i + 1));\n\n        // If no palindrome is found, returning the length of the string\n        return n;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def minOperation(self, s):\r\n        n = len(s)\r\n        #iterating from the middle of the string to the beginning\r\n        #to find the largest substring that can be repeated\r\n        for i in range (n // 2 - 1, -1, -1):\r\n            #checking if the substring from 0 to i is equal to the substring from i+1 to 2*(i+1)\r\n            if(s[0 : i + 1] == s[i + 1 : 2 * (i + 1)]):\r\n                #returning the minimum number of operations required\r\n                return (i + 1) + 1 + (n - 2 * (i + 1))\r\n        #returning the length of the string if no repeating substring is found\r\n        return n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the minimum number of characters \n    //you need to delete to make a string palindrome.\n    minOperation(s)\n    {\n        let n = s.length;\n        //iterating from the middle of the string to the beginning\n        //to find the largest substring that can be repeated\n        for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n            //checking if the substring from 0 to i is equal to the substring from i+1 to 2*(i+1)\n            if (s.substring(0, i + 1) === s.substring(i + 1, 2 * (i + 1))) {\n                //returning the minimum number of operations required\n                return (i + 1) + 1 + (n - 2 * (i + 1));\n            }\n        }\n        //returning the length of the string if no repeating substring is found\n        return n;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public int minOperation(string s)\n    {\n        int n = s.Length;\n        // Iterating from middle of string to first character\n        for (int i = n / 2 - 1; i >= 0; --i)\n        {\n            // Checking if the left substring is equal to the right substring\n            if (s.Substring(0, i + 1) == s.Substring(i + 1, i + 1))\n            {\n                // Returning the minimum number of operations required\n                return (i + 1) + 1 + (n - 2 * (i + 1));\n            }\n        }\n\n        // If no operations required, return the length of the string\n        return n;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}