{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702896,
            "title": "Type of array",
            "titleSlug": "type-of-array4605",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr[] </strong>having unique elements. Your task is to r</span><span style=\"font-size: 18px;\">eturn the type of array.<br /></span><span style=\"font-size: 18px;\">Note: The array can be categorized into </span><span style=\"font-size: 18px;\">ascending,&nbsp;</span><span style=\"font-size: 18px;\">descending,&nbsp;</span><span style=\"font-size: 18px;\">descending rotated and a</span><span style=\"font-size: 18px;\">scending rotated followed by:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">Return 1 if the array is in ascending order</span></li>\n<li><span style=\"font-size: 18px;\">Return 2 if the array is in descending order</span></li>\n<li><span style=\"font-size: 18px;\">Return 3 if the array is in descending rotated order</span></li>\n<li><span style=\"font-size: 18px;\">Return 4 if the array is in ascending rotated order</span></li>\n</ul>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 1, 5, 4, 3]\n<strong>Output: </strong>3\n<strong>Explanation: </strong>Descending rotated, rotate 2 times left.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 4, 5, 1, 2]\n<strong>Output: </strong>4\n<strong>Explanation: </strong>Ascending rotated, rotate 2 times right. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />3 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of unique elements, determine the type of array based on its order. The array can be classified as one of the following:\n\n*   **Ascending:** Elements are in strictly increasing order.\n*   **Descending:** Elements are in strictly decreasing order.\n*   **Descending Rotated:** A descending array rotated a certain number of times.\n*   **Ascending Rotated:** An ascending array rotated a certain number of times.\n\nReturn the corresponding integer value for each type:\n\n*   1: Ascending\n*   2: Descending\n*   3: Descending Rotated\n*   4: Ascending Rotated",
                "constraints": [
                    "3 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2, 1, 5, 4, 3]",
                        "output": "3",
                        "explanation": "The array is descending rotated.  It can be obtained by rotating the descending array [5, 4, 3, 2, 1] two positions to the left."
                    },
                    {
                        "input": "[3, 4, 5, 1, 2]",
                        "output": "4",
                        "explanation": "The array is ascending rotated. It can be obtained by rotating the ascending array [1, 2, 3, 4, 5] two positions to the right."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about how the pattern would look like each of the four types and the positions of maximum and minimum elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxNtype(vector<int>& arr) {\n        int n = arr.size();\n        int max = 0, index = 0, type;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n                index = i;\n            }\n        }\n        if (arr[0] == max && arr[n - 2] > arr[n - 1])\n            type = 2;\n\n        else if (arr[n - 1] == max && arr[1] > arr[0])\n            type = 1;\n\n        else if (arr[(n + index - 1) % n] > arr[(n + index + 1) % n])\n            type = 4;\n\n        else\n            type = 3;\n\n        return type;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n\n    int maxNtype(int arr[]) {\n        int n = arr.length;\n        int max = 0, index = 0, type = 0;\n\n        // Find the maximum element and its index.\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n                index = i;\n            }\n        }\n\n        // Determine the type based on the given conditions.\n        if (arr[0] == max && arr[n - 2] > arr[n - 1]) {\n            type = 2;\n        } else if (arr[n - 1] == max && arr[1] > arr[0]) {\n            type = 1;\n        } else if (arr[(n + index - 1) % n] > arr[(n + index + 1) % n]) {\n            type = 4;\n        } else {\n            type = 3;\n        }\n\n        return type;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#User function Template for Python\n\n\nclass Solution:\n\n    def maxNtype(self, arr):\n        #code here.\n        n = len(arr)\n        max_value = 0\n        index = 0\n\n        # Find the maximum element and its index.\n        for i in range(n):\n            if arr[i] > max_value:\n                max_value = arr[i]\n                index = i\n\n        # Determine the type based on the given conditions.\n        if arr[0] == max_value and arr[n - 2] > arr[n - 1]:\n            type_value = 2\n        elif arr[n - 1] == max_value and arr[1] > arr[0]:\n            type_value = 1\n        elif arr[(n + index - 1) % n] > arr[(n + index + 1) % n]:\n            type_value = 4\n        else:\n            type_value = 3\n\n        return type_value\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    maxNtype(arr) {\n        // code here\n        const n = arr.length;\n        let max = 0, index = 0, type = 0;\n\n        // Find the maximum element and its index.\n        for (let i = 0; i < n; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n                index = i;\n            }\n        }\n\n        // Determine the type based on the given conditions.\n        if (arr[0] === max && arr[n - 2] > arr[n - 1]) {\n            type = 2;\n        } else if (arr[n - 1] === max && arr[1] > arr[0]) {\n            type = 1;\n        } else if (arr[(n + index - 1) % n] > arr[(n + index + 1) % n]) {\n            type = 4;\n        } else {\n            type = 3;\n        }\n\n        return type;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}