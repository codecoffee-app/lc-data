{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703071,
            "title": "Uncommon characters",
            "titleSlug": "uncommon-characters4932",
            "content": "<p><span >You are given two strings <strong>s1</strong> and <strong>s2</strong>. Your task is to identify the characters that appear in either string but not in both (i.e., characters that are unique to one of the strings). Return the result as a sorted string.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s1 = \"geeksforgeeks\", s2 = \"geeksquiz\"\n<strong>Output: </strong>\"fioqruz\"\n<strong>Explanation: </strong>The characters 'f', 'i', 'o', 'q', 'r', 'u', and 'z' are present in either s1 or s2, but not in both.</span></pre>\n<pre><span ><strong>Input:</strong> s1 = \"characters\", s2 = \"alphabets\"\n<strong>Output:</strong> \"bclpr\"\n<strong>Explanation: </strong>The characters 'b', 'c', 'l', 'p', and 'r' are present in either s1 or s2, but not in both.</span></pre>\n<pre><span ><strong>Input:</strong> s1 = \"rome\", s2 = \"more\"\n<strong>Output:</strong> \"\"\n<strong>Explanation: </strong>Both strings contain the same characters, so there are no unique characters. The output is an empty string.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1&lt;= s1.size(), s2.size() &lt;= 10<sup>5<br /></sup>Both strings contain only lowercase English letters.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, find the characters that appear in either `s1` or `s2`, but not in both. Return these characters as a sorted string. These characters are unique to one of the input strings.",
                "constraints": [
                    "1 <= s1.size(), s2.size() <= 10^5",
                    "Both strings contain only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"geeksforgeeks\", s2 = \"geeksquiz\"",
                        "output": "\"fioqruz\"",
                        "explanation": "The characters 'f', 'i', 'o', 'q', 'r', 'u', and 'z' are present in either `s1` or `s2`, but not in both. They are unique to one of the strings."
                    },
                    {
                        "input": "s1 = \"characters\", s2 = \"alphabets\"",
                        "output": "\"bclpr\"",
                        "explanation": "The characters 'b', 'c', 'l', 'p', and 'r' are present in either `s1` or `s2`, but not in both. They are unique to one of the strings."
                    },
                    {
                        "input": "s1 = \"rome\", s2 = \"more\"",
                        "output": "\"\"",
                        "explanation": "Both strings contain the same characters, so there are no unique characters."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use frequency arrays for both strings, mark uncommon characters, and return them sorted.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string uncommonChars(string& s1, string& s2) {\n        string result;\n        int MAX_CHAR = 26;\n        // mark presence of each character as 0\n        // in the hash table 'present[]'\n        int present[MAX_CHAR];\n        for (int i = 0; i < MAX_CHAR; i++)\n            present[i] = 0;\n\n        // for each character of s1, mark its\n        // presence as 1 in 'present[]'\n        for (int i = 0; i < s1.size(); i++)\n            present[s1[i] - 'a'] = 1;\n\n        // for each character of s2\n        for (int i = 0; i < s2.size(); i++) {\n            // if a character of s2 is also present\n            // in s1, then mark its presence as -1\n            if (present[s2[i] - 'a'] == 1 || present[s2[i] - 'a'] == -1)\n                present[s2[i] - 'a'] = -1;\n\n            // else mark its presence as 2\n            else\n                present[s2[i] - 'a'] = 2;\n        }\n\n        // push all uncommon chars into result\n        for (int i = 0; i < MAX_CHAR; i++)\n            if (present[i] == 1 || present[i] == 2)\n                result += char(i + 'a');\n\n        return result;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    String uncommonChars(String s1, String s2) {\n        String result = \"\";\n        int MAX_CHAR = 26;\n\n        // Create a frequency array to track character presence\n        int[] present = new int[MAX_CHAR];\n        Arrays.fill(present, 0);\n\n        // Mark characters present in s1\n        for (int i = 0; i < s1.length(); i++) {\n            present[s1.charAt(i) - 'a'] = 1;\n        }\n\n        // Mark characters in s2\n        for (int i = 0; i < s2.length(); i++) {\n            if (present[s2.charAt(i) - 'a'] == 1 || present[s2.charAt(i) - 'a'] == -1) {\n                present[s2.charAt(i) - 'a'] = -1;\n            } else {\n                present[s2.charAt(i) - 'a'] = 2;\n            }\n        }\n\n        // Collect uncommon characters\n        for (int i = 0; i < MAX_CHAR; i++) {\n            if (present[i] == 1 || present[i] == 2) {\n                result += (char)(i + 'a');\n            }\n        }\n\n        // Return sorted result or \"-1\" if no uncommon characters\n        return result.chars()\n            .sorted()\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\n                     StringBuilder::append)\n            .toString();\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    # Function to find uncommon characters between two strings.\n    def uncommonChars(self, s1, s2):\n        res = ''\n\n        # Creating a list to keep track of presence of characters.\n        present = [0] * 26\n\n        # Iterating over first string and marking presence of each character.\n        for e in s1:\n            present[ord(e) - ord('a')] = 1\n\n        # Iterating over second string and updating presence list accordingly.\n        for e in s2:\n            if present[ord(e) - ord('a')] == 1 or present[ord(e) -\n                                                          ord('a')] == -1:\n                present[ord(e) - ord('a')] = -1\n            else:\n                present[ord(e) - ord('a')] = 2\n\n        res = ''\n\n        # Iterating over the presence list to get the uncommon characters.\n        for i, e in enumerate(present):\n            if e == 1 or e == 2:\n                res += chr(i + ord('a'))\n\n        # Returning the result.\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string} s1\n * @param {string} s2\n * @returns {string}\n */\n\nclass Solution {\n    uncommonChars(s1, s2) {\n        let result = '';\n        const MAX_CHAR = 26;\n        let present = new Array(MAX_CHAR).fill(0);\n\n        // Mark presence of each character in s1\n        for (let i = 0; i < s1.length; i++) {\n            present[s1.charCodeAt(i) - 'a'.charCodeAt(0)] = 1;\n        }\n\n        // Update presence list for characters in s2\n        for (let i = 0; i < s2.length; i++) {\n            if (present[s2.charCodeAt(i) - 'a'.charCodeAt(0)] === 1 ||\n                present[s2.charCodeAt(i) - 'a'.charCodeAt(0)] === -1) {\n                present[s2.charCodeAt(i) - 'a'.charCodeAt(0)] = -1;\n            } else {\n                present[s2.charCodeAt(i) - 'a'.charCodeAt(0)] = 2;\n            }\n        }\n\n        // Collect all uncommon characters\n        for (let i = 0; i < MAX_CHAR; i++) {\n            if (present[i] === 1 || present[i] === 2) {\n                result += String.fromCharCode(i + 'a'.charCodeAt(0));\n            }\n        }\n\n        // Return sorted result or \"-1\" if no uncommon characters\n        return result.split('').sort().join('');\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}