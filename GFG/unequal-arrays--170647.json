{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714170,
            "title": "Unequal Arrays",
            "titleSlug": "unequal-arrays--170647",
            "content": "<p><span style=\"font-size: 18px;\">You are given two arrays <strong>A </strong>and <strong>B </strong>each of length <strong>N</strong>.&nbsp;You can perform the following operation on array<em> A</em> zero or more times.&nbsp;</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">Select any two indices <strong>i</strong> and <strong>j</strong>, <strong>1 &lt;= i , j &lt;= N </strong>and <strong>i != j</strong></span></li>\n<li><span style=\"font-size: 18px;\">Set <strong>A[i]&nbsp;</strong>= <strong>A[i]&nbsp;</strong>+ <strong>2 </strong>and <strong>A[j] = A[j]-2 </strong></span></li>\n</ul>\n<p><span style=\"font-size: 18px;\">Find the <strong>minimum </strong>number of operations required to make A and B <strong>equal</strong>.</span></p>\n<p><em><span style=\"font-size: 18px;\">Note :</span></em></p>\n<ul>\n<li><span style=\"font-size: 18px;\">Two arrays are said to be equal if the frequency of each element is equal in both of them.</span></li>\n<li><span style=\"font-size: 18px;\">Arrays may contain duplicate elements.</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nN = 3\nA[] = {2, 5, 6}\nB[] = {1, 2, 10}\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: </span>\n<span style=\"font-size: 18px;\">Select i = 3, j = 2, A[3] = 6 + 2 = 8 and A[2] = 5 - 2 = 3</span>\n<span style=\"font-size: 18px;\">Select i = 3, j = 2, A[3] = 8 + 2 = 10 and A[2] = 3 - 2 = 1</span>\n<span style=\"font-size: 18px;\">Now A = {2, 1, 10} and B = {1, 2, 10}</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nN = 2\nA[] = {3, 3}\nB[] = {9, 8}\n<strong>Output:</strong> -1\n<strong>Explanation</strong>: </span>\n<span style=\"font-size: 18px;\">It can be shown that <strong>A </strong>cannot be made equal to <strong>B</strong>.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp; </strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>solve()</strong> which takes the 2 arrays <strong>A[]</strong>, <strong>B[]</strong>&nbsp;and their&nbsp;size <strong>N </strong>as input parameters and returns the <strong>minimum </strong>number of moves to make A and B equal if possible else return <strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(NlogN)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>5</sup><br />-10<sup>9</sup> &lt;= A[i] &lt;= 10<sup>9</sup><br />-10<sup>9</sup> &lt;= B[i] &lt;= 10<sup>9</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, **A** and **B**, each of length **N**, determine the minimum number of operations required to make array **A** equal to array **B**.  An operation involves selecting two distinct indices *i* and *j* (1 <= *i*, *j* <= N, *i* != *j*) and incrementing **A[i]** by 2 while decrementing **A[j]** by 2.  Two arrays are considered equal if the frequency of each element is the same in both arrays.  Return -1 if it is impossible to make A equal to B.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^9 <= A[i] <= 10^9",
                    "-10^9 <= B[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nA[] = {2, 5, 6}\nB[] = {1, 2, 10}",
                        "output": "2",
                        "explanation": "First, select i = 3, j = 2, then A[3] becomes 6 + 2 = 8 and A[2] becomes 5 - 2 = 3. Then, select i = 3, j = 2, so A[3] becomes 8 + 2 = 10 and A[2] becomes 3 - 2 = 1.  Now A = {2, 1, 10} and B = {1, 2, 10}, which have the same elements with same frequencies."
                    },
                    {
                        "input": "N = 2\nA[] = {3, 3}\nB[] = {9, 8}",
                        "output": "-1",
                        "explanation": "It is impossible to make A equal to B using the allowed operations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The odd number count and the sum of the two arrays should be equal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "logical-thinking",
                "slug": "logical-thinking"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n\nclass Solution {\n  public:\n    // Function to solve the problem\n    long long solve(int N, vector<int> &A, vector<int> &B) {\n        \n        long long sum = 0;\n        vector<int> AP[2], BP[2];\n        // Finding the sum of the differences between A and B arrays\n        // Categorizing the elements of A and B arrays into two separate arrays based on their modulus\n        for(int i = 0; i < N; i++) {\n           sum += A[i] - B[i];\n           AP[abs(A[i]) % 2].push_back(A[i]);\n           BP[abs(B[i]) % 2].push_back(B[i]);\n        }\n        \n        // Checking if the sum is not zero or the sizes of the two arrays are not equal\n        if(sum != 0 || (int)AP[0].size() != (int)BP[0].size())\n        return -1;\n        \n        long long ans = 0;\n        // Sorting the arrays AP and BP\n        for(int i = 0; i < 2; i++) {\n           sort(AP[i].begin(), AP[i].end());\n           sort(BP[i].begin(), BP[i].end());\n        \n           // Finding the absolute difference between the corresponding elements of AP and BP and dividing by 2\n           // Adding the result to ans\n           for(int j = 0; j < (int)AP[i].size(); j++) {\n               ans += abs(AP[i][j] - BP[i][j]) / 2;\n           }\n        }\n        // Dividing the final ans by 2 and returning\n        return ans / 2;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static long solve(int N, int[] A, int[] B) {\r\n        // code here\r\n        long sum = 0;\r\n        ArrayList<Integer> AP[]=new ArrayList[2], BP[]=new ArrayList[2];\r\n        for(int i=0;i<2;i++){\r\n            AP[i]=new ArrayList<>();\r\n            BP[i]=new ArrayList<>();\r\n        }\r\n        for(int i = 0; i < N; i++) {\r\n           sum += A[i] - B[i];\r\n           AP[Math.abs(A[i]) % 2].add(A[i]);\r\n           BP[Math.abs(B[i]) % 2].add(B[i]);\r\n        }\r\n        if(sum != 0 || (int)AP[0].size() != (int)BP[0].size())\r\n        return -1;\r\n        \r\n        long ans = 0;\r\n        for(int i = 0; i < 2; i++) {\r\n           Collections.sort(AP[i]);\r\n           Collections.sort(BP[i]);\r\n        \r\n           for(int j = 0; j < (int)AP[i].size(); j++) {\r\n               ans += Math.abs(AP[i].get(j) - BP[i].get(j)) / 2;\r\n           }\r\n        }\r\n        return ans / 2;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import List\nfrom collections import defaultdict\nclass Solution:\n    def solve(self, N : int, A : List[int], B : List[int]) -> int:\n        # initializing variables\n        ssum = 0\n        ap = defaultdict(list)\n        bp = defaultdict(list)\n        \n        # calculating the difference between A and B and storing them in separate dictionaries based on parity\n        for i in range(N):\n            ssum += A[i] - B[i]\n            ap[abs(A[i]) % 2].append(A[i])\n            bp[abs(B[i]) % 2].append(B[i])\n        \n        # checking if the total sum is not zero or the number of elements with even parity in both dictionaries is not equal\n        if ssum != 0 or int(len(ap[0])) != int(len(bp[0])):\n            return -1\n        \n        ans = 0\n        # sorting the values in the dictionaries\n        for i in range(2):\n            ap[i].sort()\n            bp[i].sort()\n            \n            # calculating the absolute difference divided by 2 and adding it to the answer\n            for j in range(len(ap[i])):\n                ans += abs(ap[i][j] - bp[i][j]) // 2\n            \n        # returning the answer divided by 2\n        return ans // 2",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}