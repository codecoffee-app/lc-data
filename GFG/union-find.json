{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701408,
            "title": "Union-Find",
            "titleSlug": "union-find",
            "content": "<p><span style=\"font-size:18px\">This problem is to implement disjoint set union. There will be 2 incomplete functions namely union and find. You have to complete these functions.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Union:</strong> Join two subsets into a single set.<br />\r\n<strong>isConnected:</strong> Determine which subset a particular element is in. This can be used for determining if two elements are in same subset.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 5\r\nq = 4\r\nQueries = \r\nUnion(1,3)\r\nisConnected(1,2)\r\nUnion(1,5)\r\nisConnected(3,5)\r\n<strong>Output:\r\n</strong>0\r\n1<strong>\r\nExplanation: </strong>Initially all nodes 1 2 3 4 5\r\nare not connected.&nbsp;\r\nAfter <strong>Union(1,3)</strong>, node 1 and 3 will be\r\nconnected.\r\nWhen we do <strong>isConnected(</strong><strong>1,2)</strong>,&nbsp; as node 1\r\nand 2&nbsp;are not connected it will return 0.\r\nAfter <strong>Union(1,5)</strong>, node 1 and 5&nbsp;will be\r\nconnected.\r\nWhen we do <strong>isConnected(3,5</strong><strong>)</strong>,&nbsp; as node\r\n1 and 3&nbsp;are&nbsp;connected, and node 1 and 5\r\nare connected, hence 3 and 5 are\r\nconnected.&nbsp;Thus it will return 1.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 5\r\nq = 4\r\nQueries = \r\nUnion(1,4)\r\nUnion(1,5)\r\nisConnected(2,3)\r\nUnion(3,4)\r\n<strong>Output: </strong>0</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">You have to complete the function <strong>union_() </strong>which merges the node1 and node2. You will also have to complete the function <strong>isConnected() </strong>which will return whether the two nodes are connected.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Note:&nbsp;</span></strong><span style=\"font-size:18px\">Both function will contain two arrays&nbsp;<strong>par[] and ranks1[]&nbsp;</strong>along with two nodes. Initially&nbsp;<strong>par[i] = i </strong>and <strong>rank1[i] = 1&nbsp;</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N + Q).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:&nbsp;</strong><br />\r\n1 &lt;= N &lt;= 10<sup>5</sup><br />\r\n1&lt;= Q &lt;= 10<sup>5</sup><br />\r\n1 &lt;= node1, node2 &lt;= N</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Disjoint Set",
                "slug": "disjoint-set"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to find root of a node.\r\n    int findRoot(int i, int par[], int rank1[]) \r\n    {\r\n        //iterating to find the node whose par[i] is equal to i.\r\n        while(i!=par[i]) {\r\n            i = par[i];\r\n        }\r\n        return i;\r\n    }\r\n    \r\n    //Function to merge two nodes a and b.\r\n    void union_( int a, int b, int par[], int rank1[]) \r\n    {\r\n        //find root of nodes a and b.\r\n        int x = findRoot(a, par, rank1);\r\n        int y = findRoot(b, par, rank1);\r\n        \r\n        //base case if they are already in same set.\r\n        if(x==y) {\r\n            return;\r\n        }\r\n        \r\n        //checking for rank, and putting in set with higher rank.\r\n        if(rank1[x]>=rank1[y]) {\r\n            rank1[x]++;\r\n            par[y] = par[x];\r\n        } else {\r\n            rank1[y]++;\r\n            par[x] = par[y];\r\n        }\r\n        return;\r\n    }\r\n    \r\n    //Function to check whether 2 nodes are connected or not.    \r\n    bool isConnected(int x,int y, int par[], int rank1[]) \r\n    {\r\n        //if root of both nodes is same then they are connected.\r\n        return (findRoot(x, par, rank1) == findRoot(y, par, rank1));\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //Function to find root of a node.\r\n    private int findRoot(int i, int par[])\r\n    {\r\n        //iterating to find the node whose par[i] is equal to i.\r\n        while(i != par[i])\r\n            i = par[i];\r\n        return i;\r\n    }\r\n\r\n    //Function to merge two nodes a and b.\r\n    public void union_(int a, int b, int par[], int rank[])\r\n    {\r\n        //find root of nodes a and b.\r\n        int x = findRoot(a, par);\r\n        int y = findRoot(b, par);\r\n    \r\n        //base case if they are already in same set.\r\n        if(x == y)\r\n            return;\r\n        \r\n        //checking for rank and putting in set with higher rank.\r\n        if(rank[x] >= rank[y]){\r\n            rank[x]++;\r\n            par[y] = par[x];\r\n        }else{\r\n            rank[y]++;\r\n            par[x] = par[y];\r\n        }\r\n        return;\r\n    }\r\n    \r\n    //Function to check whether 2 nodes are connected or not.\r\n    public Boolean isConnected(int a, int b, int par[], int rank[])\r\n    {\r\n        //if root of both nodes is same then they are connected.\r\n        return (findRoot(a, par) == findRoot(b, par));\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to find root of a node.\r\n    def findRoot(self,x,par):\r\n        \r\n        #finding the node whose par[i] is equal to i.\r\n        if x == par[x]: \r\n            return x\r\n        return self.findRoot(par[x],par)\r\n    \r\n    #Function to merge two nodes a and b.\r\n    def union_(self,a,b,par,rank1):\r\n        \r\n        #find root of nodes a and b.\r\n        root_a = self.findRoot(a,par)\r\n        root_b = self.findRoot(b,par) \r\n    \r\n        rank_root_a = rank1[root_a] \r\n        rank_root_b = rank1[root_b] \r\n    \r\n        #checking for rank and putting in set with higher rank.\r\n        if rank_root_a > rank_root_b :\r\n            \r\n            par[root_b] = root_a\r\n            rank1[root_a]+=rank1[root_b]\r\n        else:\r\n            \r\n            par[root_a] = root_b\r\n            rank1[root_b] += rank1[root_a]\r\n    \r\n        return\r\n    \r\n    #Function to check whether 2 nodes are connected or not.\r\n    def isConnected(self,x,y,par,rank1):\r\n        \r\n        root_x = self.findRoot(x, par) \r\n        root_y = self.findRoot(y, par)  \r\n    \r\n        #if root of both nodes is same then they are connected.\r\n        if root_x == root_y:\r\n            return True\r\n        else:\r\n            return False\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\r\n\r\nclass Solution\r\n{\r\n    //Function to find root of a node.\r\n    int findRoot(int i, int[] par, int[] rank)\r\n    {\r\n        //iterating to find the node whose par[i] is equal to i.\r\n        while (i != par[i])\r\n        {\r\n            i = par[i];\r\n        }\r\n        return i;\r\n    }\r\n    //Function to merge two nodes a and b.\r\n    public void union(int a, int b, int[] par, int[] rank)\r\n    {\r\n        //find root of nodes a and b.\r\n        int x = findRoot(a, par, rank);\r\n        int y = findRoot(b, par, rank);\r\n\r\n        //base case if they are already in same set.\r\n        if (x == y)\r\n        {\r\n            return;\r\n        }\r\n\r\n        //checking for rank, and putting in set with higher rank.\r\n        if (rank[x] >= rank[y])\r\n        {\r\n            rank[x]++;\r\n            par[y] = par[x];\r\n        }\r\n        else\r\n        {\r\n            rank[y]++;\r\n            par[x] = par[y];\r\n        }\r\n        return;\r\n    }\r\n\r\n    //Function to check whether 2 nodes are connected or not.\r\n    public bool isConnected(int x, int y, int[] par, int[] rank)\r\n    {\r\n        //if root of both nodes is same then they are connected.\r\n        return (findRoot(x, par, rank) == findRoot(y, par, rank));\r\n    }\r\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n * @param {number[]} par\r\n * @param {number[]} rank1\r\n * @param {number} x\r\n * @param {number} y\r\n*/\r\nclass Solution\r\n{\r\n    //Function to find root of a node.\r\n    findRoot(i, par, rank1) \r\n    {\r\n        //iterating to find the node whose par[i] is equal to i.\r\n        while(i!=par[i]) {\r\n            i = par[i];\r\n        }\r\n        return i;\r\n    }\r\n    \r\n    //Function to merge two nodes a and b.\r\n    union_( a, b, par, rank1) \r\n    {\r\n        //find root of nodes a and b.\r\n        let x = this.findRoot(a, par, rank1);\r\n        let y = this.findRoot(b, par, rank1);\r\n        \r\n        //base case if they are already in same set.\r\n        if(x==y) {\r\n            return;\r\n        }\r\n        \r\n        //checking for rank and putting in set with higher rank.\r\n        if(rank1[x]>=rank1[y]) {\r\n            rank1[x]++;\r\n            par[y] = par[x];\r\n        } else {\r\n            rank1[y]++;\r\n            par[x] = par[y];\r\n        }\r\n        return;   \r\n    }\r\n    \r\n    //Function to check whether 2 nodes are connected or not.\r\n    isConnected(x,y, par, rank1)\r\n    {\r\n        //if root of both nodes is same then they are connected.\r\n        return (this.findRoot(x, par, rank1) == this.findRoot(y, par, rank1));\r\n    }\r\n}\r\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}