{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876806,
            "title": "Union of Two Arrays with Distinct Elements",
            "titleSlug": "union-of-two-arrays-with-distinct-elements",
            "content": "<p><span style=\"font-size: 18px;\">Given two&nbsp;<strong>unsorted</strong>&nbsp;arrays&nbsp;<strong>a[]</strong>&nbsp;and&nbsp;<strong>b[]&nbsp;</strong>each consisting of&nbsp;<strong>distinct</strong>&nbsp;elements , the task is to return the&nbsp;of elements in the&nbsp;<strong>union</strong> of the two arrays in <strong>sorted </strong>order.</span></p>\n<blockquote><span style=\"font-size: 18px;\">Union of two arrays can be defined as the set containing distinct common elements in both the arrays.&nbsp;</span></blockquote>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">a[] = [89, 24, 75, 11, 23], b[] = [89, 2, 4]</span><br /><span style=\"font-size: 18px;\"><strong>Output: </strong>[2, 4, 11, 23,  24, 75, 89]\n</span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>All the distinct elements in both arrays.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">a[] = [1, 2, 3, 4, 5, 6], b[] = [3, 4, 5, 6, 7]\n<strong>Output: </strong>[1, 2, 3, 4, 5, 6, 7]<strong>\nExplanation: </strong></span><span >All the distinct elements in both arrays.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1&nbsp; &le;&nbsp; a.size(), b.size() &le;&nbsp; 10<sup>5</sup><br />1&nbsp; &le;&nbsp; a[i], b[i]&nbsp; &le;&nbsp; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<int> findUnion(vector<int> &a, vector<int> &b) {\n        vector<int> res = a;\n\n        // Traverse through b[] and search every element\n        // b[i] in a[]\n        for (int i = 0; i < b.size(); i++) {\n\n            // check if the element was present in a[]\n            // to avoid duplicates\n            int j;\n            for (j = 0; j < a.size(); j++) {\n                if (a[j] == b[i])\n                    break;\n            }\n\n            // if not already present then\n            // add it to result\n            if (j == a.size()) {\n                res.push_back(b[i]);\n            }\n        }\n        sort(res.begin(), res.end());\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    ArrayList<Integer> findUnion(int[] a, int[] b) {\n        ArrayList<Integer> res = new ArrayList<>();\n\n        // Add all elements from array a to res\n        for (int i = 0; i < a.length; i++) {\n            res.add(a[i]);\n        }\n\n        // Traverse through b[] and search every element\n        // b[i] in a[]\n        for (int i = 0; i < b.length; i++) {\n\n            // check if the element was present in a[]\n            // to avoid duplicates\n            int j;\n            for (j = 0; j < a.length; j++) {\n                if (a[j] == b[i]) break;\n            }\n\n            // If not already present, add it to res\n            if (j == a.length) {\n                res.add(b[i]);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def findUnion(self, a, b):\n        res = a[:]\n\n        # Traverse through b[] and search every element\n        # b[i] in a[]\n        for i in range(len(b)):\n\n            # check if the element was present in a[]\n            # to avoid duplicates\n            if b[i] not in a:\n\n                # if not already present then\n                # add it to result\n                res.append(b[i])\n        res = sorted(res)\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    findUnion(a, b) {\n\n        // create a result array with\n        // content of array a[]\n        let res = [...a ];\n\n        // Traverse through b[] and search every element\n        // b[i] in a[]\n        for (let i = 0; i < b.length; i++) {\n\n            // check if the element was present in a[]\n            // to avoid duplicates\n            if (!a.includes(b[i])) {\n\n                // if not already present then\n                // add it to result\n                res.push(b[i]);\n            }\n        }\n        res.sort(function(a, b) { return a - b; });\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}