{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700534,
            "title": "Union of Two Linked Lists",
            "titleSlug": "union-of-two-linked-list",
            "content": "<p><span style=\"font-size: 12pt;\">Given two linked lists (L1 &amp; L2), your task is to complete the function <strong>makeUnion(),&nbsp;</strong>which returns the union list of two linked lists. This union list should include all the <strong>distinct </strong>elements only and it should be sorted in <strong>ascending </strong>order.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>L1 = 9-&gt;6-&gt;4-&gt;2-&gt;3-&gt;8, L2 = 1-&gt;2-&gt;8-&gt;6-&gt;2\n<strong>Output: </strong>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 6 -&gt; 8 -&gt; 9<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700534/Web/Other/blobid0_1723400421.png\" width=\"371\" height=\"175\" /><br /><strong>Explanation:</strong> All the distinct numbers from two lists, when sorted form the list in the output. </span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>L1 = 1-&gt;5-&gt;1-&gt;2-&gt;2-&gt;5, L2 = 4-&gt;5-&gt;6-&gt;7-&gt;1\n<strong>Output: </strong>1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700534/Web/Other/blobid2_1723400444.png\" width=\"364\" height=\"172\" /><br /><strong>Explaination:</strong> All the distinct numbers from two lists, when sorted forms the list in the output.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:</strong> O((n+m)*Log(n+m))<br /><strong>Expected Space&nbsp;</strong></span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 16px;\">Complexity</strong><strong style=\"font-size: 12pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">:</strong><span style=\"font-size: 12pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> O(n+m)</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1&lt;=size of both linked lists&lt;=10<sup>5<br /></sup>1&lt;= data of nodes&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try using merge sort.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "24*7-innovation-labs",
            "komli-media",
            "taxi4sure"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// solution:\nclass Solution {\n  public:\n    struct Node* makeUnion(struct Node* head1, struct Node* head2) {\n        set<int> myset; // this set will store all elements\n        // elements appearing more than once get stored only once in set\n        set<int>::iterator it;\n\n        while (head1) {\n            myset.insert(head1->data); // inserting all elements in a set\n            head1 = head1->next;\n        }\n\n        while (head2) {\n            myset.insert(head2->data); // inserting all elements in a set\n            head2 = head2->next;\n        }\n\n        it = myset.begin();                      // it points to first element of set\n        struct Node* union_head = new Node(*it); // head of union list\n        struct Node* union_tail = union_head;    // tail of union list\n\n        for (++it; it != myset.end(); it++) {\n            union_tail->next = new Node(*it); // adding all elements\n            union_tail = union_tail->next;\n        }\n\n        return union_head;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static Node findUnion(Node head1, Node head2) {\n        Node cur = null, start = null;\n\n        TreeSet<Integer> s = new TreeSet<Integer>();\n        // using tree set to store numbers in sorted order\n\n        while (head1 != null) {\n            // adding all numbers in list1 to set\n            s.add(head1.data);\n            head1 = head1.next;\n        }\n        while (head2 != null) {\n            // adding all numbers in list2 to set\n            // duplicates will be ignored in set\n            s.add(head2.data);\n            head2 = head2.next;\n        }\n        for (Integer i : s) {\n            Node ptr = new Node(i);\n            if (start == null) {\n                // creating new head\n                start = ptr;\n                cur = ptr;\n            } else {\n                // appending node at the end\n                cur.next = ptr;\n                cur = ptr;\n            }\n        }\n        return start;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def union(self, head1, head2):\n        cur = None\n        start = None\n\n        s = set()\n\n        while (head1 != None):\n            s.add(head1.data)\n            head1 = head1.next\n            # adding all values in linkedlist1 to set\n\n        while (head2 != None):\n            s.add(head2.data)\n            head2 = head2.next\n            # adding all values in linkedlist2 to set\n            # duplicate values will be ignored in set\n\n        s = list(s)\n        s.sort()\n        # storing values in a list to sort them\n\n        for i in s:\n            ptr = Node(i)\n\n            if (start == None):\n                # creating linked list head\n                start = ptr\n                cur = ptr\n            else:\n                # appending node at the end of linkedlist\n                cur.next = ptr\n                cur = ptr\n\n        return start\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    makeUnion(head1, head2) {\n        // Create a set to store unique elements from both linked lists\n        let mySet = new Set();\n\n        // Traverse the first linked list and add each element to the set\n        let temp = head1;\n        while (temp) {\n            mySet.add(temp.data);\n            temp = temp.next;\n        }\n\n        // Traverse the second linked list and add each element to the set\n        temp = head2;\n        while (temp) {\n            mySet.add(temp.data);\n            temp = temp.next;\n        }\n\n        // Convert the set to an array and sort it in ascending order\n        let arr = Array.from(mySet).sort((a, b) => a - b);\n\n        // Create a new linked list starting with the first element in the sorted array\n        let union_head = new Node(arr[0]);\n        let union_tail = union_head;\n\n        // Iterate through the remaining elements in the sorted array\n        for (let i = 1; i < arr.length; i++) {\n            // Create a new node for each element and link it to the previous node\n            union_tail.next = new Node(arr[i]);\n            union_tail = union_tail.next;\n        }\n\n        // Return the head of the new linked list, which is the union of the two lists\n        return union_head;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}