{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701235,
            "title": "Union of 2 Sorted with Duplicates",
            "titleSlug": "union-of-two-sorted-arrays-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">Given two <strong>sorted</strong>&nbsp;arrays&nbsp;<strong>a[]</strong>&nbsp;and&nbsp;<strong>b[]</strong>, where each array may contain <strong>duplicate</strong>&nbsp;elements , the task is to return the elements in the&nbsp;<strong>union</strong> of the two arrays in <strong>sorted</strong> order.</span></p>\n<blockquote><span style=\"font-size: 18px;\">Union of two arrays can be defined as the set containing distinct common elements that are present in either of the arrays.</span></blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [1, 2, 3, 4, 5], b[] = [1, 2, 3, 6, 7]</span><br /><span style=\"font-size: 18px;\"><strong>Output</strong>: 1 2 3 4 5 6 7</span><br /><span style=\"font-size: 18px;\"><strong>Explanation</strong>: Distinct elements including both the arrays are: 1 2 3 4 5 6 7.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [2, 2, 3, 4, 5], b[] = [1, 1, 2, 3, 4]\n<strong>Output</strong>: 1 2 3 4 5\n<strong>Explanation</strong>: Distinct elements including both the arrays are: 1 2 3 4 5.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [1, 1, 1, 1, 1], b[] = [2, 2, 2, 2, 2]\n<strong>Output</strong>: 1 2\n<strong>Explanation</strong>: Distinct elements including both the arrays are: 1 2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&nbsp; &lt;=&nbsp; a.size(), b.size()&nbsp; &lt;=&nbsp; 10<sup>5</sup><br />-10<sup>9</sup>&nbsp; &lt;=&nbsp; a[i] , b[i]&nbsp; &lt;=&nbsp; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two **sorted** arrays `a[]` and `b[]`, which may contain **duplicate** elements, return a **sorted** array containing the distinct elements from the union of `a[]` and `b[]`.",
                "constraints": [
                    "1 <= a.size(), b.size() <= 10^5",
                    "-10^9 <= a[i], b[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "a[] = [1, 2, 3, 4, 5], b[] = [1, 2, 3, 6, 7]",
                        "output": "1 2 3 4 5 6 7",
                        "explanation": "The union of the arrays contains the distinct elements: 1, 2, 3, 4, 5, 6, and 7."
                    },
                    {
                        "input": "a[] = [2, 2, 3, 4, 5], b[] = [1, 1, 2, 3, 4]",
                        "output": "1 2 3 4 5",
                        "explanation": "The union of the arrays contains the distinct elements: 1, 2, 3, 4, and 5."
                    },
                    {
                        "input": "a[] = [1, 1, 1, 1, 1], b[] = [2, 2, 2, 2, 2]",
                        "output": "1 2",
                        "explanation": "The union of the arrays contains the distinct elements: 1 and 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #1e2229; font-family: Nunito; font-size: 14pt; background-color: #ffffff;\">If any element is common in both arrays, take only one in the output array because we have to take the union of UNIQUE elements of both arrays</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "#include <vector>\nusing namespace std;\n\nclass Solution {\n  public:\n    // Function to return a list containing the union of the two arrays.\n    vector<int> findUnion(vector<int> &a, vector<int> &b) {\n        int n = a.size();\n        int m = b.size();\n        int i = 0, j = 0;\n        vector<int> ans;\n\n        // Using two pointers i and j over the two arrays which helps\n        // in storing the smaller element.\n        while (i < n && j < m) {\n            // Updating the pointer i until we have identical\n            // elements at consecutive positions in a.\n            while (i + 1 < n && a[i] == a[i + 1])\n                i++;\n\n            // Updating the pointer j until we have identical\n            // elements at consecutive positions in b.\n            while (j + 1 < m && b[j] == b[j + 1])\n                j++;\n\n            // Comparing elements of the arrays a and b at pointers\n            // i and j and accordingly storing the smaller element\n            // and updating the pointers.\n            if (a[i] < b[j])\n                ans.push_back(a[i++]);\n            else if (b[j] < a[i])\n                ans.push_back(b[j++]);\n            else {\n                // If a[i] is the same as b[j], we update both pointers.\n                ans.push_back(b[j++]);\n                i++;\n            }\n        }\n\n        // Storing the remaining elements of the first array (if there are any).\n        while (i < n) {\n            // Updating the pointer i until we have identical\n            // elements at consecutive positions in a.\n            while (i + 1 < n && a[i] == a[i + 1])\n                i++;\n\n            // Storing the elements.\n            ans.push_back(a[i++]);\n        }\n\n        // Storing the remaining elements of the second array (if there are any).\n        while (j < m) {\n            // Updating the pointer j until we have identical\n            // elements at consecutive positions in b.\n            while (j + 1 < m && b[j] == b[j + 1])\n                j++;\n\n            // Storing the elements.\n            ans.push_back(b[j++]);\n        }\n\n        // Returning the list containing the union of the two arrays.\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to return a list containing the union of the two arrays.\n    public static ArrayList<Integer> findUnion(int a[], int b[]) {\n        int n = a.length;\n        int m = b.length;\n        int i = 0, j = 0;\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\n        // Using two pointers i and j over the two arrays which helps\n        // in storing the smaller element.\n        while (i < n && j < m) {\n            // Updating the pointer i until we have identical\n            // elements at consecutive position in a.\n            while (i + 1 < n && a[i] == a[i + 1]) i++;\n\n            // Updating the pointer j until we have identical\n            // elements at consecutive position in b.\n            while (j + 1 < m && b[j] == b[j + 1]) j++;\n\n            // Comparing element of the arrays a and b at pointers\n            // i and j and accordingly storing the smaller element\n            // and updating the pointers.\n            if (a[i] < b[j])\n                ans.add(a[i++]);\n            else if (b[j] < a[i])\n                ans.add(b[j++]);\n            else {\n                // If a[i] is the same as b[j], we update both pointers.\n                ans.add(b[j++]);\n                i++;\n            }\n        }\n\n        // Storing the remaining elements of first array (if there are any).\n        while (i < n) {\n            // Updating the pointer i until we have identical\n            // elements at consecutive position in a.\n            while (i + 1 < n && a[i] == a[i + 1]) i++;\n\n            // Storing the elements.\n            ans.add(a[i++]);\n        }\n\n        // Storing the remaining elements of second array (if there are any).\n        while (j < m) {\n            // Updating the pointer j until we have identical\n            // elements at consecutive position in b.\n            while (j + 1 < m && b[j] == b[j + 1]) j++;\n\n            // Storing the elements.\n            ans.add(b[j++]);\n        }\n\n        // Returning the list containing the union of the two arrays.\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to return a list containing the union of the two arrays.\n    def findUnion(self, a, b):\n        n = len(a)\n        m = len(b)\n        union_li = list()\n        i, j = 0, 0\n\n        #Using two pointers i and j over the two arrays which helps\n        #in storing the smaller element.\n        while i < n and j < m:\n\n            #Updating the pointer i until we have identical\n            #elements at consecutive position in a.\n            while i + 1 < n and a[i + 1] == a[i]:\n                i += 1\n\n            #Updating the pointer j until we have identical\n            #elements at consecutive position in b.\n            while j + 1 < m and b[j + 1] == b[j]:\n                j += 1\n\n            #Comparing element of the arrays a and b at pointers\n            #i and j and accordingly storing the smaller element\n            #and updating the pointers.\n            if a[i] < b[j]:\n                union_li.append(a[i])\n                i += 1\n            elif b[j] < a[i]:\n                union_li.append(b[j])\n                j += 1\n            else:\n                #If a[i] is same as b[j], we update both pointers.\n                union_li.append(b[j])\n                j += 1\n                i += 1\n\n        #Storing the remaining elements of first array (if there are any).\n        while i < n:\n            #Updating the pointer i until we have identical\n            #elements at consecutive position in a.\n            while i + 1 < n and a[i + 1] == a[i]:\n                i += 1\n\n            #Storing the elements.\n            union_li.append(a[i])\n            i += 1\n\n        #Storing the remaining elements of second array (if there are any).\n        while j < m:\n            #Updating the pointer j until we have identical\n            #elements at consecutive position in b.\n            while j + 1 < m and b[j + 1] == b[j]:\n                j += 1\n\n            #Storing the elements.\n            union_li.append(b[j])\n            j += 1\n\n        #returning the list containing the union of the two arrays.\n        return union_li\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} a\n * @param {number[]} b\n * @returns {number[]}\n */\n\nclass Solution {\n    // Function to return a list containing the union of the two arrays.\n    findUnion(a, b) {\n        let n = a.length;\n        let m = b.length;\n        let i = 0, j = 0;\n        let ans = [];\n\n        // Using two pointers i and j over the two arrays which helps\n        // in storing the smaller element.\n        while (i < n && j < m) {\n            // Updating the pointer i until we have identical\n            // elements at consecutive position in a.\n            while (i + 1 < n && a[i] == a[i + 1]) i++;\n\n            // Updating the pointer j until we have identical\n            // elements at consecutive position in b.\n            while (j + 1 < m && b[j] == b[j + 1]) j++;\n\n            // Comparing element of the arrays a and b at pointers\n            // i and j and accordingly storing the smaller element\n            // and updating the pointers.\n            if (a[i] < b[j])\n                ans.push(a[i++]);\n\n            else if (b[j] < a[i])\n                ans.push(b[j++]);\n\n            else {\n                // If a[i] is same as b[j], we update both pointers.\n                ans.push(b[j++]);\n                i++;\n            }\n        }\n        // Storing the remaining elements of first array (if there are any).\n        while (i < n) {\n            // Updating the pointer i until we have identical\n            // elements at consecutive position in a.\n            while (i + 1 < n && a[i] == a[i + 1]) i++;\n            // Storing the elements.\n            ans.push(a[i++]);\n        }\n        // Storing the remaining elements of second array (if there are any).\n        while (j < m) {\n            // Updating the pointer j until we have identical\n            // elements at consecutive position in b.\n            while (j + 1 < m && b[j] == b[j + 1]) j++;\n            // Storing the elements.\n            ans.push(b[j++]);\n        }\n        // returning the list containing the union of the two arrays.\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}