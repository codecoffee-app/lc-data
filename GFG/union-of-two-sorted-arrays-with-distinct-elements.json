{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876745,
            "title": "Union of Two Sorted Arrays with Distinct Elements",
            "titleSlug": "union-of-two-sorted-arrays-with-distinct-elements",
            "content": "<p><span style=\"font-size: 18px;\">Given two&nbsp;<strong>sorted</strong>&nbsp;arrays&nbsp;<strong>a[]</strong>&nbsp;and&nbsp;<strong>b[]</strong>, where each array contains <strong>distinct</strong>&nbsp;elements , the task is to return the elements in the&nbsp;<strong>union</strong>&nbsp;of the two arrays in&nbsp;<strong>sorted</strong>&nbsp;order.</span></p>\n<blockquote><span style=\"font-size: 18px;\">Union of two arrays can be defined as the set containing distinct common elements that are present in either of the arrays.</span></blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [1, 2, 3, 4, 5], b[] = [1, 2, 3, 6, 7]</span><br /><span style=\"font-size: 18px;\"><strong>Output</strong>: 1 2 3 4 5 6 7</span><br /><span style=\"font-size: 18px;\"><strong>Explanation</strong>: Distinct elements including both the arrays are: 1 2 3 4 5 6 7.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [2, 3, 4, 5], b[] = [1, 2, 3, 4]\n<strong>Output</strong>: 1 2 3 4 5\n<strong>Explanation</strong>: Distinct elements including both the arrays are: 1 2 3 4 5.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [1], b[] = [2]\n<strong>Output</strong>: 1 2\n<strong>Explanation</strong>: Distinct elements including both the arrays are: 1 2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&nbsp; &lt;=&nbsp; a.size(), b.size()&nbsp; &lt;=&nbsp; 10<sup>5</sup><br />-10<sup>9</sup>&nbsp; &lt;=&nbsp; a[i] , b[i]&nbsp; &lt;=&nbsp; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted arrays `a[]` and `b[]`, where each array contains distinct elements, return the elements in the union of the two arrays in sorted order. The union of two arrays is defined as the set containing all distinct elements present in either of the arrays.",
                "constraints": [
                    "1 <= a.size(), b.size() <= 10^5",
                    "-10^9 <= a[i], b[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "a[] = [1, 2, 3, 4, 5], b[] = [1, 2, 3, 6, 7]",
                        "output": "1 2 3 4 5 6 7",
                        "explanation": "The union of the arrays [1, 2, 3, 4, 5] and [1, 2, 3, 6, 7] contains the distinct elements: 1, 2, 3, 4, 5, 6, and 7."
                    },
                    {
                        "input": "a[] = [2, 3, 4, 5], b[] = [1, 2, 3, 4]",
                        "output": "1 2 3 4 5",
                        "explanation": "The union of the arrays [2, 3, 4, 5] and [1, 2, 3, 4] contains the distinct elements: 1, 2, 3, 4, and 5."
                    },
                    {
                        "input": "a[] = [1], b[] = [2]",
                        "output": "1 2",
                        "explanation": "The union of the arrays [1] and [2] contains the distinct elements: 1 and 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>To find the union of two sorted arrays, use two pointers to traverse both arrays. Add smaller elements to the result, move respective pointers, and handle duplicates by moving both pointers. Add remaining elements after traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "#include <vector>\nusing namespace std;\n\nclass Solution {\n  public:\n    // Function to return a list containing the union of the two arrays.\n    vector<int> findUnion(vector<int> &a, vector<int> &b) {\n        vector<int> res;\n        int n = a.size();\n        int m = b.size();\n        int i = 0, j = 0;\n\n        // This is similar to merge of merge sort\n        while (i < n && j < m) {\n            // Select and add the smaller element from the current elements and move\n            // accordingly\n            if (a[i] < b[j]) {\n                res.push_back(a[i++]);\n            } else if (a[i] > b[j]) {\n                res.push_back(b[j++]);\n            } else {\n                // If equal, then add to result and move both\n                res.push_back(a[i++]);\n                j++;\n            }\n        }\n\n        // Add the remaining elements of a[]\n        while (i < n) {\n            res.push_back(a[i++]);\n        }\n\n        // Add the remaining elements of b[]\n        while (j < m) {\n            res.push_back(b[j++]);\n        }\n\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to return a list containing the union of the two arrays.\n    public static ArrayList<Integer> findUnion(int a[], int b[]) {\n        ArrayList<Integer> res = new ArrayList<>();\n        int n = a.length;\n        int m = b.length;\n        int i = 0, j = 0;\n\n        // This is similar to merge of merge sort\n        while (i < n && j < m) {\n\n            // select and add the smaller element\n            // from the current elements and move accordingly\n            if (a[i] < b[j]) {\n                res.add(a[i++]);\n            } else if (a[i] > b[j]) {\n                res.add(b[j++]);\n            }\n\n            // If equal, then add to result and move both\n            else {\n                res.add(a[i++]);\n                j++;\n            }\n        }\n\n        // Add the remaining elements of a[]\n        while (i < n) res.add(a[i++]);\n\n        // Add the remaining elements of b[]\n        while (j < m) res.add(b[j++]);\n\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def findUnion(self, a, b):\n        res = []\n        n, m = len(a), len(b)\n        i, j = 0, 0\n\n        # This is similar to merge of merge sort\n        while i < n and j < m:\n\n            # select and add the smaller element\n            # from the current elements and move accordingly\n            if a[i] < b[j]:\n                res.append(a[i])\n                i += 1\n            elif a[i] > b[j]:\n                res.append(b[j])\n                j += 1\n\n            # If equal, then add to result and move both\n            else:\n                res.append(a[i])\n                i += 1\n                j += 1\n\n        # Add the remaining elements of a[]\n        while i < n:\n            res.append(a[i])\n            i += 1\n\n        # Add the remaining elements of b[]\n        while j < m:\n            res.append(b[j])\n            j += 1\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    findUnion(a, b) {\n        let res = [];\n        let n = a.length, m = b.length;\n        let i = 0, j = 0;\n\n        // This is similar to merge of merge sort\n        while (i < n && j < m) {\n\n            // select and add the smaller element\n            // from the current elements and move accordingly\n            if (a[i] < b[j]) {\n                res.push(a[i]);\n                i++;\n            } else if (a[i] > b[j]) {\n                res.push(b[j]);\n                j++;\n            }\n\n            // if equal, then add to result and move both\n            else {\n                res.push(a[i]);\n                i++;\n                j++;\n            }\n        }\n\n        // Add the remaining elements of a[]\n        while (i < n) {\n            res.push(a[i]);\n            i++;\n        }\n\n        // Add the remaining elements of b[]\n        while (j < m) {\n            res.push(b[j]);\n            j++;\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}