{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712680,
            "title": "Unique Binary Tree Requirements",
            "titleSlug": "unique-binary-tree-requirements",
            "content": "<p><span style=\"font-size:18px\">Geek wants to know the traversals required to construct a <strong>unique binary tree</strong>.</span>&nbsp;<span style=\"font-size:18px\">Given a pair of traversal, return <strong>true</strong> if it is possible to construct unique binary tree from the given traversals otherwise return <strong>false</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Each traversal is represented with an integer:&nbsp;preorder - 1, inorder - 2, postorder - 3.&nbsp;&nbsp;&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\na = 1, b=2\r\n<strong>Output:</strong> 1\r\n<strong>Explanation: </strong>We can construct binary tree using inorder traversal and preorder traversal. \r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> a = 1, b=3\r\n<strong>Output:</strong> 0 \r\n<strong>Explanation: </strong>We cannot construct binary tree using preorder traversal and postorder traversal. </span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= a,b &lt;=3</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>isPossible()</strong> which takes <strong>a</strong> and <strong>b</strong>&nbsp;as input parameters and returns <strong>true</strong> or <strong>false</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(1)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two tree traversals represented by integers (preorder - 1, inorder - 2, postorder - 3), determine if it's possible to construct a unique binary tree from them.",
                "constraints": [
                    "1 <= a, b <= 3"
                ],
                "testcases": [
                    {
                        "input": "a = 1, b = 2",
                        "output": "1",
                        "explanation": "A unique binary tree can be constructed using inorder and preorder traversals."
                    },
                    {
                        "input": "a = 1, b = 3",
                        "output": "0",
                        "explanation": "A unique binary tree cannot be constructed using preorder and postorder traversals."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\npublic:\n     //Function to check if it is possible to move from a to b in one step.\n    bool isPossible(int a,int b)\n    {\n        //Checking if the pair (a,b) is valid for a single step transition.\n        if((a==2 && b==1) || (a==1 && b==2)) return true;\n        else if((a==2 && b==3) || (a==3 && b==2)) return true;\n\n        //Returning false if the pair (a,b) is not valid for a single step transition.\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    \r\n    public static boolean isPossible(int a, int b){\r\n        if((a==2 && b==1) || (a==1 && b==2)) \r\n            return true;\r\n        else if((a==2 && b==3) || (a==3 && b==2)) \r\n            return true;\r\n        return false;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    # Function to check if two numbers can form a valid pair.\n    def isPossible(self, a, b):\n        \n        # Checking if the numbers are (2,1) or (1,2), which are valid pairs.\n        if((a==2 and b==1) or (a==1 and b==2)):\n            return True\n        \n        # Checking if the numbers are (2,3) or (3,2), which are valid pairs.\n        elif((a==2 and b==3) or (a==3 and b==2)):\n            return True\n        \n        # If none of the valid pairs, return False.\n        return False",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} a\n * @param {number[]} b\n * @returns {boolean}\n*/\n\nclass Solution {\n    //Function to check whether it is possible to pick array elements to get the sum equals to N.\n    isPossible(a, b) {\n        // Checking if the numbers are (2,1) or (1,2), which are valid pairs.\n        if((a==2 && b==1) || (a==1 && b==2)){\n            return true;\n        }\n        \n        // Checking if the numbers are (2,3) or (3,2), which are valid pairs.\n        else if((a==2 && b==3) || (a==3 && b==2)){\n            return true;\n        }\n        \n        // If none of the valid pairs, return false.\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}