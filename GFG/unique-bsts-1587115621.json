{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701232,
            "title": "Unique BST's",
            "titleSlug": "unique-bsts-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer. Find how many <strong>structurally unique binary search trees </strong>are there that stores the&nbsp;values from 1 to that integer (inclusive).&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">n = 2<strong>\nOutput: </strong>2<strong>\nExplanation:</strong>for n = 2, there are 2 unique\nBSTs\n&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2 &nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">n = 3<strong>\nOutput: </strong>5<strong>\nExplanation: </strong>for N = 3, there are 5\npossible BSTs\n&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp; 1\n&nbsp;&nbsp;&nbsp; \\ &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;  /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp; \\ &nbsp;&nbsp;&nbsp; \\\n&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp; 2\n&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\\n&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3<br /></span></pre>\n<pre><strong><span>Input: </span></strong><span>n = 1<strong>\nOutput: </strong>1</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1&lt;=n&lt;=1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming to calculate the number of unique BSTs by iterating over possible roots and combining the results of left and right subtrees.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "samsung",
            "twitter"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to return the total number of possible unique BST.\n    int numTrees(int n) {\n        // dp[] to store the number of unique BST with key i.\n        int dp[n + 1];\n\n        // base cases\n        dp[0] = 1;\n        dp[1] = 1;\n        int mod = 1000000007;\n\n        // filling the dp[] table in top-down approach.\n        for (int i = 2; i <= n; i++) {\n            dp[i] = 0;\n            for (int j = 1; j <= i; j++) {\n                // if we take j as root, then [1\u00e2\u20ac\u00a6.j-1] numbers will fall in the\n                // left subtree and [j+1\u00e2\u20ac\u00a6.i] numbers will fall in the right\n                // subtree. So, we add dp[j-1]*dp[i-j] to dp[i].\n                dp[i] = dp[i] + 1LL * dp[j - 1] * dp[i - j];\n            }\n        }\n\n        // returning the answer.\n        return dp[n];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to return the total number of possible unique BST.\n    static int numTrees(int n) {\n        // dp[] to store the number of unique BST with key i.\n        int dp[] = new int[n + 1];\n\n        // base cases\n        dp[0] = 1;\n        dp[1] = 1;\n        long mod = 1000000007;\n\n        // filling the dp[] table in top-down approach.\n        for (int i = 2; i <= n; i++) {\n            dp[i] = 0;\n            for (int j = 1; j <= i; j++) {\n                // if we take j as root, then [1\u00e2\u20ac\u00a6.j-1] numbers will fall in the\n                // left subtree and [j+1\u00e2\u20ac\u00a6.i] numbers will fall in the right\n                // subtree. So, we add dp[j-1]*dp[i-j] to dp[i].\n                dp[i] = dp[i] + (dp[j - 1] * dp[i - j]);\n            }\n        }\n\n        // returning the answer.\n        return (int)dp[n];\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to return the total number of possible unique BST.\n    def numTrees(self, n):\n\n        #dp[] to store the number of unique BST with key i.\n        dp = [0] * (n + 1)\n\n        #base cases\n        dp[0], dp[1] = 1, 1\n\n        #filling the dp[] table in top-down approach.\n        for i in range(2, n + 1):\n\n            for j in range(1, i + 1):\n\n                #if we take j as root, then [1\u00e2\u20ac\u00a6.j-1] numbers will fall in the\n                #left subtree and [j+1\u00e2\u20ac\u00a6.i] numbers will fall in the right\n                #subtree. So, we add dp[j-1]*dp[i-j] to dp[i].\n                dp[i] = dp[i] + (dp[i - j] * dp[j - 1])\n\n        #returning the answer.\n        return dp[n]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\nclass Solution {\n    // Complete this function\n    // Function to return the total number of possible unique BST.\n    public int numTrees(int N) {\n        long[] dp = new long[N + 1];\n        dp[0] = 1;\n        dp[1] = 1;\n\n        for (int i = 2; i <= N; i++) {\n            dp[i] = 0;\n            for (int j = 1; j <= i; j++) {\n                dp[i] = dp[i] + (dp[j - 1] * dp[i - j]);\n            }\n        }\n\n        return (int)dp[N];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} n\n * @returns {number}\n */\n\nclass Solution {\n    // Function to return the total number of possible unique BST.\n    numTrees(n) {\n        // dp[] to store the number of unique BST with key i.\n        let dp = new Array(n + 1);\n\n        // base cases\n        dp[0] = BigInt(1);\n        dp[1] = BigInt(1);\n        let mod = BigInt(1000000007);\n\n        // filling the dp[] table in top-down approach.\n        for (let i = 2; i <= n; i++) {\n            dp[i] = BigInt(0);\n            for (let j = 1; j <= i; j++) {\n                // if we take j as root, then [1\u00e2\u20ac\u00a6.j-1] numbers will fall in the\n                // left subtree and [j+1\u00e2\u20ac\u00a6.i] numbers will fall in the right\n                // subtree. So, we add dp[j-1]*dp[i-j] to dp[i].\n                dp[i] = dp[i] + (dp[j - 1] * dp[i - j]);\n            }\n        }\n\n        // returning the answer.\n        return Number(dp[n]);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}