{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 715906,
            "title": "Unique Number of Occurrences",
            "titleSlug": "unique-frequencies-of-not",
            "content": "<p><span >Given an array <strong>arr</strong> of <strong>N</strong> integers, the task is to check whether the frequency of the elements in the array is unique or not. Or in other words, there are no two <strong>distinct</strong> numbers in array with equal frequency. If all the frequency is unique then return <strong>true</strong>, else return <strong>false</strong>.</span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>I</strong><strong>nput:</strong>\nN = 5<br />arr = [1, 1, 2, 5, 5]\n<strong>Output:</strong>\nfalse\n<strong>Explanation:<br /></strong>The array contains 2 (1&rsquo;s), 1 (2&rsquo;s) and 2 (5&rsquo;s), since the number of frequency of 1 and 5 are the same i.e. 2 times. Therefore, this array does not satisfy the condition.\n</span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input:</strong>\nN = 10<br />arr = [2, 2, 5, 10, 1, 2, 10, 5, 10, 2]\n<strong>Output:</strong>\ntrue\n<strong>Explanation:</strong>\nNumber of 1&rsquo;s -&gt; 1\nNumber of 2&rsquo;s -&gt; 4\nNumber of 5&rsquo;s -&gt; 2\nNumber of 10&rsquo;s -&gt; 3.\nSince, the number of occurrences of elements present in the array is unique. Therefore, this array satisfy the condition.</span></pre>\n<p><span ><strong>Your task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>isFrequencyUnique()</strong> which take integer <strong>N</strong> and array <strong>arr</strong> of size N as arguments, and returns a boolean.</span></p>\n<p><span ><strong style=\"font-size: 18px;\">Expected Time Complexity:</strong><span style=\"font-size: 18px;\">&nbsp;O(N)</span><br style=\"font-size: 18px;\" /><strong style=\"font-size: 18px;\">Expected Auxiliary Space:</strong><span style=\"font-size: 18px;\">&nbsp;O(N)</span></span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= N &lt;=10<sup>5</sup><br />-10<sup>9</sup> &lt;= arr[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N integers, determine if the frequency of each element in the array is unique. That is, no two distinct numbers in the array should have the same frequency of occurrence. Return `true` if all frequencies are unique; otherwise, return `false`.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^9 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 5\narr = [1, 1, 2, 5, 5]",
                        "output": "false",
                        "explanation": "The array contains two 1's, one 2, and two 5's. The frequency of 1 and 5 is the same (2), so the frequencies are not unique."
                    },
                    {
                        "input": "N = 10\narr = [2, 2, 5, 10, 1, 2, 10, 5, 10, 2]",
                        "output": "true",
                        "explanation": "The frequencies are: 1 appears once, 2 appears four times, 5 appears twice, and 10 appears three times. All these frequencies (1, 4, 2, 3) are unique."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use map or set to store frequencies.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "set",
                "slug": "set"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Map",
                "slug": "map"
            }
        ],
        "companies": [
            "paypal",
            "bloomberg",
            "adobe",
            "google",
            "amazon",
            "apple"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution\n{\n    public:\n    //Function to check if the frequency of elements in the array is unique.\n    bool isFrequencyUnique(int n, int arr[])\n    {\n        //Creating an unordered map to store the frequency of elements.\n        unordered_map<int, int> freq;\n \n        //Iterating through the array and updating the frequency map.\n        for (int i = 0; i < n; i++) {\n            freq[arr[i]]++;\n        }\n     \n        //Creating an unordered set to store unique frequencies.\n        unordered_set<int> uniqueFreq;\n        \n        //Iterating through the frequency map.\n        for (auto& i : freq) {\n            //If the frequency is already present in the uniqueFreq set,\n            //return false as it means the frequency is not unique.\n            if (uniqueFreq.count(i.second))\n                return false;\n            //Otherwise, insert the frequency in the uniqueFreq set.\n            else\n                uniqueFreq.insert(i.second);\n        }\n     \n        //If all frequencies are unique, return true.\n        return true;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static boolean isFrequencyUnique(int n, int[] arr) {\n        // code here\n        HashMap<Integer,Integer> hm=new HashMap<>();\n        for(int i:arr){\n            hm.put(i,hm.getOrDefault(i,0)+1);\n        }\n        HashSet<Integer> hs=new HashSet<>();\n        for(int i:hm.values()){\n            if(hs.contains(i))return false;\n            hs.add(i);\n        }\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    def isFrequencyUnique(self, n, arr):\n\n        #create a frequency dictionary to count the occurrences of each element\n        freq = {}\n        \n        #loop through the array\n        for i in range(n):\n            #check if the element is already in the dictionary, if so, increment its count\n            if arr[i] in freq:\n                freq[arr[i]] += 1\n            #if the element is not in the dictionary, add it with a count of 1\n            else:\n                freq[arr[i]] = 1\n        \n        #create a set to store unique frequencies\n        uniqueFreq = set()\n        \n        #loop through the frequency dictionary\n        for key, value in freq.items():\n            #check if the current frequency is already in the set, if so, return False\n            if value in uniqueFreq:\n                return False\n            #if the current frequency is not in the set, add it to the set\n            else:\n                uniqueFreq.add(value)\n        \n        #return True if all frequencies are unique\n        return True",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}