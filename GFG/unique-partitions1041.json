{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704726,
            "title": "Unique partitions",
            "titleSlug": "unique-partitions1041",
            "content": "<p><span style=\"font-size: 18px;\">Given a positive integer <strong>n</strong>, generate all possible unique ways to represent <strong>n</strong> as sum of positive integers.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:&nbsp;</strong>The generated output is&nbsp;printed without partitions.&nbsp;Each partition must be&nbsp;in decreasing order. Printing of all the partitions is done in reverse sorted order.&nbsp;</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3\n<strong>Output: </strong>3 2 1 1 1 1\n<strong>Explanation: </strong>For n = 3, \n{3}, {2, 1} and {1, 1, 1}.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4 \n<strong>Output: </strong>4 3 1 2 2 2 1 1 1 1 1 1\n<strong>Explanation: </strong>For n = 4, \n{4}, {3, 1}, {2, 2}, {2, 1, 1}, {1, 1, 1, 1}.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>UniquePartitions()&nbsp;</strong>which takes n as input parameter and returns a list of all possible combinations in lexicographically decreasing order.&nbsp;</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(2<sup>n</sup>)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(2<sup>n</sup>)</span><br /><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 25</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, find all unique ways to represent `n` as the sum of positive integers. The partitions should be generated in decreasing order, and the final output should be sorted in reverse lexicographical order.",
                "constraints": [
                    "1 <= n <= 25"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "3 2 1 1 1 1",
                        "explanation": "The possible partitions for n=3 are {3}, {2, 1}, and {1, 1, 1}. The required output format flattens these into a space-separated string."
                    },
                    {
                        "input": "4",
                        "output": "4 3 1 2 2 2 1 1 1 1 1 1",
                        "explanation": "The possible partitions for n=4 are {4}, {3, 1}, {2, 2}, {2, 1, 1}, and {1, 1, 1, 1}.  The required output format flattens these into a space-separated string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use recursion and backtracking to generate all possibilities for sum.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    vector<vector<int>> ans;\n\n    // Function to recursively generate unique partitions\n    bool fun(int target, vector<int>& candidates, vector<int> res, int pos) {\n        // If target sum is achieved\n        if (target == 0) {\n            // Sort the current partition in descending order\n            sort(res.begin(), res.end());\n            reverse(res.begin(), res.end());\n\n            // Add the partition to the final answer\n            ans.push_back(res);\n\n            // Return true to continue generating partitions\n            return true;\n        }\n\n        // If target sum is negative, return false\n        if (target < 0)\n            return false;\n\n        bool f = false;\n        // Iterate through the candidates from current position\n        for (int i = pos; i < candidates.size(); i++) {\n            // Add the current candidate to the current partition\n            res.push_back(candidates[i]);\n\n            // Recursively generate partitions with the remaining target sum\n            f = fun(target - candidates[i], candidates, res, i);\n\n            // Remove the current candidate from the current partition\n            res.pop_back();\n        }\n\n        // Return the result of partition generation\n        return f;\n    }\n\n    // Function to generate unique partitions\n    vector<vector<int>> UniquePartitions(int n) {\n        vector<int> cur, nums;\n\n        // Create candidates array from 1 to n\n        for (int i = 1; i <= n; i++)\n            nums.push_back(i);\n\n        // Generate partitions recursively\n        fun(n, nums, cur, 0);\n\n        // Sort the final answer in descending order\n        sort(ans.begin(), ans.end());\n        reverse(ans.begin(), ans.end());\n\n        // Return the final answer\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution\n{\n    ArrayList<ArrayList<Integer>> arr; //ArrayList to store the unique partitions\n    \n    public ArrayList<ArrayList<Integer>> UniquePartitions(int n) //Function to generate unique partitions\n    {\n        arr=new ArrayList<>(); //Initializing the ArrayList\n        \n        ArrayList<Integer> nums=new ArrayList<>(); //ArrayList to store numbers from n to 1\n        for(int i=n;i>=1;i--){\n            nums.add(i); //Adding numbers from n to 1 to the nums ArrayList\n        }\n        \n        ArrayList<Integer> curr=new ArrayList<>(); //ArrayList to store the current partition\n        \n        fun(n,nums,curr,0); //Calling the recursive function to generate partitions\n        \n        return arr; //Returning the ArrayList of unique partitions\n    }\n    \n    public void fun(int n,ArrayList<Integer> nums,ArrayList<Integer> curr,int start)\n    {\n        if(n==0){ //If n becomes 0, it means we have formed a valid partition\n            ArrayList<Integer> A=new ArrayList<>(); //Create a new ArrayList to store the current partition\n            for(int i:curr){\n                A.add(i); //Add the elements of curr ArrayList to A ArrayList\n            }\n            arr.add(A); //Add the current partition to the ArrayList of unique partitions\n            return;\n        }\n        for(int i=start;i<nums.size();i++){\n            if((n-nums.get(i))>=0){ //If the difference between n and the current number is non-negative\n                curr.add(nums.get(i)); //Add the current number to the curr ArrayList\n                fun(n-nums.get(i),nums,curr,i); //Recursive call to generate further partitions with the remaining sum and updated curr ArrayList\n                curr.remove(curr.size()-1); //Remove the current number to backtrack\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() { this.temp = []; }\n\n    solve(a, v, idx, s, n) {\n\n        // first base case if sum=n we can store vector in a vector\n        if (s === n) {\n            v.push([...this.temp ]);\n            return;\n        }\n\n        // if idx < 0 return\n        if (idx < 0) {\n            return;\n        }\n\n        // not take condition\n        this.solve(a, v, idx - 1, s, n);\n        if (s < n) {\n            this.temp.push(a[idx]);\n\n            // this is main condition where we can take one element many times\n            this.solve(a, v, idx, s + a[idx], n);\n            this.temp.pop();\n        }\n    }\n\n    UniquePartitions(n) {\n        const a = Array.from({length : n}, (_, i) => i + 1);\n        const v = [];\n\n        // call solve to get answer\n        this.solve(a, v, n - 1, 0, n);\n        v.reverse();\n        return v;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}