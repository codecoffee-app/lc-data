{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713969,
            "title": "Unique Paths in a Grid",
            "titleSlug": "unique-paths-in-a-grid--170647",
            "content": "<p><span style=\"font-size:18px\">You are given a matrix <strong>grid</strong> of&nbsp;<strong>n</strong> x&nbsp; <strong>m</strong> size consisting of values <strong>0</strong> and <strong>1</strong>. A value of <strong>1</strong> means that you can enter that cell and <strong>0</strong> implies that entry to that cell is not allowed. </span></p>\r\n\r\n<p><span style=\"font-size:18px\">You start at the upper-left corner of the grid <strong>(1, 1)</strong> and you have to reach the bottom-right corner <strong>(n, m)</strong> such that you can only move in the right or down direction from every cell. </span></p>\r\n\r\n<p><span style=\"font-size:18px\">Your task is to calculate the total number of ways of reaching the target <strong>modulo (10<sup>9</sup>+7)</strong>.<br />\r\n<strong>Note:</strong> The <strong>first (1, 1)</strong> and <strong>last cell (n, m)</strong> of the grid can also be <strong>0</strong></span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>n = 3, m = 3\r\ngrid[][] = {{1, 1, 1};\r\n&nbsp;\\t     {1, 0, 1};\r\n&nbsp;\\t     {1, 1, 1}}\r\n<strong>Output:\r\n</strong>2\r\n<strong>Explanation:</strong>\r\n<strong>1</strong> 1 1\r\n<strong>1</strong> 0 1\r\n<strong>1 1 1\r\n</strong>This is one possible path.\r\n<strong>1</strong> <strong>1 1</strong>\r\n1 0 <strong>1</strong>\r\n1<strong> </strong>1 <strong>1\r\n</strong>This is another possible path.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>n = 1, m = 3\r\ngrid = {{1, 0, 1}}\r\n<strong>Output :</strong>\r\n0\r\n<strong>Explanation:</strong>\r\nThere is no possible path to reach the end.\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>uniquePaths()</strong>&nbsp;which takes 2&nbsp;integers n,&nbsp;and m, and a matrix of size n*m as input and returns the number of unique paths from cell (1,1) to (n,m) modulo (10<sup>9</sup>+7)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(n*m)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(n*m)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n*m &le; 10</span><sup><span style=\"font-size:15px\">6</span></sup></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a matrix `grid` of size `n x m` consisting of 0s and 1s. A value of 1 means you can enter that cell, and 0 means entry is not allowed. You start at the top-left corner (1, 1) and must reach the bottom-right corner (n, m). You can only move right or down from each cell. Calculate the total number of ways to reach the target, modulo (10^9 + 7). Note: The first (1, 1) and last cell (n, m) of the grid can also be 0.",
                "constraints": [
                    "1 <= n*m <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3\ngrid[][] = {{1, 1, 1},\n         {1, 0, 1},\n         {1, 1, 1}}",
                        "output": "2",
                        "explanation": "There are two possible paths: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) and (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3)"
                    },
                    {
                        "input": "n = 1, m = 3\ngrid = {{1, 0, 1}}",
                        "output": "0",
                        "explanation": "There is no possible path to reach the end because the second cell is blocked."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to think of&nbsp;finding out the number of ways to reach a particular&nbsp;cell if the number of ways to reach its neighbour cells are known.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "uber"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int uniquePaths(int n, int m, vector<vector<int>> &grid) {\r\n\r\n        int mod = (int)1e9+7;\r\n\r\n        // create a 2D-matrix and initializing\r\n        // with value 0\r\n        vector<vector<int>> paths(n, vector<int>(m, 0));\r\n         \r\n        // Initializing the left corner if\r\n        // no obstacle there\r\n        if (grid[0][0] == 1)\r\n            paths[0][0] = 1;\r\n             \r\n        // Initializing first column of\r\n        // the 2D matrix\r\n        for(int i = 1; i < n; i++)\r\n        {\r\n            // If not obstacle\r\n            if (grid[i][0] == 1)\r\n                paths[i][0] = paths[i-1][0];\r\n        }\r\n         \r\n        // Initializing first row of the 2D matrix\r\n        for(int j = 1; j < m; j++)\r\n        {\r\n             \r\n            // If not obstacle\r\n            if (grid[0][j] == 1)\r\n                paths[0][j] = paths[0][j - 1];\r\n        }  \r\n          \r\n        for(int i = 1; i < n; i++)\r\n        {\r\n            for(int j = 1; j < m; j++)\r\n            {\r\n                 \r\n                // If current cell is not obstacle\r\n                if (grid[i][j] == 1)\r\n                    paths[i][j] = (paths[i - 1][j] % mod +\r\n                                  paths[i][j - 1] % mod) % mod;\r\n            } \r\n        }\r\n         \r\n        // Returning the corner value\r\n        // of the matrix\r\n        return paths[n - 1][m-1]%mod;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end function Template for Java\r\n\r\nclass Solution {\r\n    static int uniquePaths(int n, int m, int[][] grid) {\r\n        \r\n        int mod = 1000000007;\r\n        \r\n        // create a 2D-matrix and initializing\r\n        // with value 0\r\n        int[][] paths = new int[n][m];\r\n        for(int i = 0; i < n; i++)\r\n        {\r\n            for(int j = 0; j < m; j++)\r\n            {\r\n                paths[i][j] = 0;\r\n            }\r\n        }\r\n    \r\n        // Initializing the left corner if\r\n        // no obstacle there\r\n        if (grid[0][0] == 1)\r\n          paths[0][0] = 1;\r\n    \r\n        // Initializing first column of\r\n        // the 2D matrix\r\n        for(int i = 1; i < n; i++)\r\n        {\r\n          // If not obstacle\r\n          if (grid[i][0] == 1)\r\n            paths[i][0] = paths[i - 1][0];\r\n        } \r\n    \r\n        // Initializing first row of the 2D matrix\r\n        for(int j = 1; j < m; j++)\r\n        {\r\n    \r\n          // If not obstacle\r\n          if (grid[0][j] == 1)\r\n            paths[0][j] = paths[0][j - 1];\r\n        }   \r\n    \r\n        for(int i = 1; i < n; i++)\r\n        {\r\n            for(int j = 1; j < m; j++)\r\n            {\r\n    \r\n                // If current cell is not obstacle \r\n                if (grid[i][j] == 1)\r\n                    paths[i][j] = (paths[i - 1][j] % mod + paths[i][j - 1] % mod) % mod; \r\n            }  \r\n        }\r\n    \r\n        // Returning the corner value \r\n        // of the matrix\r\n        return paths[n - 1][m - 1];\r\n    }\r\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end function Template for Python\r\n\r\nclass Solution:\r\n    def uniquePaths(self, n, m, grid):\r\n        \r\n        mod = 1000000007\r\n        # create a 2D-matrix and initializing with value 0\r\n        paths = [[0]*m for i in range(n)]\r\n        \r\n        # initializing the left corner if no obstacle there\r\n        if grid[0][0] == 1:\r\n            paths[0][0] = 1\r\n        \r\n        # initializing first column of the 2D matrix\r\n        for i in range(1, n):\r\n            \r\n            # If not obstacle\r\n            if grid[i][0] == 1:\r\n                paths[i][0] = paths[i-1][0]\r\n                \r\n        # initializing first row of the 2D matrix\r\n        for j in range(1, m):\r\n            \r\n            # If not obstacle\r\n            if grid[0][j] == 1:\r\n                paths[0][j] = paths[0][j-1]\r\n                \r\n        for i in range(1, n):\r\n            for j in range(1, m):\r\n    \r\n                # If current cell is not obstacle\r\n                if grid[i][j] == 1:\r\n                    paths[i][j] = (paths[i-1][j] + paths[i][j-1]) % mod\r\n    \r\n        # returning the corner value of the matrix\r\n        return paths[-1][-1]",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number} m\n * @param {number[][]} grid\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the number of unique paths.\n    uniquePaths(n, m, grid)\n    {\n        const mod = 1000000007;\n        // create a 2D-matrix and initializing with value 0\n        const paths = Array.from({length: n}, () => Array(m).fill(0));\n        \n        // initializing the left corner if no obstacle there\n        if (grid[0][0] == 1) {\n            paths[0][0] = 1;\n        }\n        \n        // initializing first column of the 2D matrix\n        for (let i = 1; i < n; i++) {\n            // If not obstacle\n            if (grid[i][0] == 1) {\n                paths[i][0] = paths[i-1][0];\n            }\n        }\n        \n        // initializing first row of the 2D matrix\n        for (let j = 1; j < m; j++) {\n            // If not obstacle\n            if (grid[0][j] == 1) {\n                paths[0][j] = paths[0][j-1];\n            }   \n        }\n        \n        for (let i = 1; i < n; i++) {\n            for (let j = 1; j < m; j++) {\n                // If current cell is not obstacle\n                if (grid[i][j] == 1) {\n                    paths[i][j] = (paths[i-1][j] + paths[i][j-1]) % mod;\n                }\n            }\n        }\n    \n        // returning the corner value of the matrix\n        return paths[n-1][m-1];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}