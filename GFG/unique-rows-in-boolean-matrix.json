{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700280,
            "title": "Unique rows in boolean matrix",
            "titleSlug": "unique-rows-in-boolean-matrix",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary matrix your task is to find all unique rows of the given matrix in the order of their appearance in the matrix. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>row = 3, col = 4 \nM[][] = {{1 1 0 1},{1 0 0 1},{1 1 0 1}}\n<strong>Output: </strong>$1 1 0 1 $1 0 0 1 $<strong>\nExplanation: </strong>Above the matrix of size 3x4\nlooks like\n1 1 0 1\n1 0 0 1\n1 1 0 1\nThe two unique rows are R<sub>1</sub>: {1 1 0 1} and R<sub>2</sub>: {1 0 0 1}. <br />As R<sub>1 </sub>first appeared at row-0 and R<sub>2</sub> appeared at row-1, in the resulting list, R<sub>1</sub> is kept before R<sub>2</sub>.</span></pre>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium; white-space: normal;\"><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><strong>Input:\n</strong>row = 2, col = 4 \nM[][] = {{0 0 0 1}, {0 0 0 1}}\n<strong>Output: $</strong>0 0 0 1 $<strong>\nExplanation: </strong>Above the matrix of size 2x4\nlooks like\n0 0 0 1\n0 0 0 1\nOnly unique row is $0 0 0 1 $</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You only need to implement the given function&nbsp;<strong>uniqueRow()</strong>.&nbsp;The function takes three arguments the first argument is a matrix <strong>M</strong> and the next two arguments are <strong>row</strong>&nbsp;and <strong>col</strong>&nbsp;denoting the rows and columns&nbsp;of the matrix.&nbsp;The function should <strong>return</strong> the list of the unique row of the matrix. Do not read input, instead use the arguments given in the function.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:&nbsp;</strong>The driver code prints the rows \"$\" separated. You have to just return list of rows, you do not have to worry about printing anything.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(row * col)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(row * col)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=row,col&lt;=40<br />0&lt;=M[][]&lt;=1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary matrix, find all unique rows in the order of their appearance in the matrix.  A row is considered unique if it is not identical to any previously encountered row.",
                "constraints": [
                    "1 <= row, col <= 40",
                    "0 <= M[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "row = 3, col = 4 \nM[][] = {{1, 1, 0, 1}, {1, 0, 0, 1}, {1, 1, 0, 1}}",
                        "output": "[1, 1, 0, 1], [1, 0, 0, 1]",
                        "explanation": "The matrix has three rows: {1, 1, 0, 1}, {1, 0, 0, 1}, and {1, 1, 0, 1}.  The unique rows are {1, 1, 0, 1} and {1, 0, 0, 1}. The first occurrence of {1, 1, 0, 1} is at index 0, and the first occurrence of {1, 0, 0, 1} is at index 1."
                    },
                    {
                        "input": "row = 2, col = 4 \nM[][] = {{0, 0, 0, 1}, {0, 0, 0, 1}}",
                        "output": "[0, 0, 0, 1]",
                        "explanation": "The matrix has two rows: {0, 0, 0, 1} and {0, 0, 0, 1}. The only unique row is {0, 0, 0, 1}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use the&nbsp;<strong>HashSet </strong>data structure&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "set",
                "slug": "set"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [
            "zoho",
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution\n{\n    public:\n    // Function to find unique rows in a matrix.\n    vector<vector<int>> uniqueRow(int M[MAX][MAX],int row,int col)\n    {\n        // Creating a set to store unique rows in string format.\n        set<string> st;\n        // Creating a vector to store unique rows in integer format.\n        vector<vector<int>> vec;\n        \n        // Iterating over each row of the matrix.\n        for(int i=0;i<row;i++)\n        {\n            string curr;\n            // Converting each row into a string.\n            for (int j = 0;j < col;j++)\n            {\n                curr += '0' + M[i][j];\n            }\n            // Inserting the string representation of the row into the set.\n            st.insert(curr);\n        }\n        // Iterating over each row of the matrix again.\n        for(int i=0;i<row;i++)\n        {\n            string curr;\n            // Converting each row into a string.\n            for (int j = 0;j < col;j++)\n            {\n                curr += '0' + M[i][j];\n            }\n            // Checking if the string representation of the row is present\n            // in the set.\n            if (st.find(curr) != st.end())\n            {\n                // If present, removing it from the set, adding it to the\n                // vector, and converting it back to integer format.\n                st.erase(curr);\n                vector<int> demo;\n                for (int j = 0;j < col;j++)\n                {\n                    demo.push_back(M[i][j]);\n                }\n                vec.push_back(demo);\n            }\n        }\n        // Returning the vector containing unique rows.\n        return vec;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class GfG {\n    public static ArrayList<ArrayList<Integer>> uniqueRow(int a[][], int r, int c) {\n        // using a HashSet to store unique rows\n        HashSet<String> st = new HashSet<>();\n        // using an ArrayList of ArrayLists to store unique rows in the correct order\n        ArrayList<ArrayList<Integer>> vec = new ArrayList<>();\n\n        // iterating over the matrix\n        for (int i = 0; i < r; i++) {\n            StringBuilder curr = new StringBuilder();\n            // converting each row into a string representation\n            for (int j = 0; j < c; j++) {\n                curr.append('0' + a[i][j]);\n            }\n            // adding the string representation of the row to the HashSet to check for uniqueness\n            st.add(curr.toString());\n        }\n\n        // iterating over the matrix again\n        for (int i = 0; i < r; i++) {\n            StringBuilder curr = new StringBuilder();\n            // converting each row into a string representation\n            for (int j = 0; j < c; j++) {\n                curr.append('0' + a[i][j]);\n            }\n            // if the string representation is found in the HashSet, remove it from the HashSet\n            // and add the row to the ArrayList vec\n            if (st.contains(curr.toString())) {\n                st.remove(curr.toString());\n                ArrayList<Integer> demo = new ArrayList<>();\n                for (int j = 0; j < c; j++) {\n                    demo.add(a[i][j]);\n                }\n                vec.add(demo);\n            }\n        }\n\n        // return the ArrayList vec containing unique rows\n        return vec;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from typing import List\n\nclass Solution:\n    def uniqueRow(self, row : int, col : int, M : List[List[int]]) -> List[List[int]]:\n        st = set()  # create an empty set to store unique rows\n        vec = []  # create an empty list to store unique rows as lists\n        \n        for i in range(row):\n            curr = ''\n            for j in range(col):\n                curr += str(M[i][j])  # concatenate the elements of each row\n            st.add(curr)  # add the concatenated string to the set\n            \n        for i in range(row):\n            curr = ''\n            for j in range(col):\n                curr += str(M[i][j])  # concatenate the elements of each row\n            if curr in st:  # if the concatenated string is present in the set\n                st.remove(curr)  # remove the string from the set\n                demo = []\n                for j in range(col):\n                    demo.append(M[i][j])  # add the row as a list to the vector\n                vec.append(demo)  # append the row to the vector as a list\n                \n        return vec  # return the vector containing unique rows as lists",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    uniqueRow(M, row, col){\n        let set = new Set();\n        let vec = [];\n        \n        for(let i=0;i<row;i++){\n            let curr = \"\";\n            for (let j = 0;j < col;j++){\n                curr += M[i][j].toString();\n            }\n            set.add(curr);\n        }\n        for(let i=0;i<row;i++){\n            let curr = \"\";\n            for (let j = 0;j < col;j++){\n                curr += M[i][j].toString();\n            }\n            if (set.has(curr)){\n                set.delete(curr);\n                let demo = [];\n                for (let j = 0;j < col;j++){\n                    demo.push(M[i][j]);\n                }\n                vec.push(demo);\n            }\n        }\n        return vec;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}