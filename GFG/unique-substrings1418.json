{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703631,
            "title": "Unique substrings",
            "titleSlug": "unique-substrings1418",
            "content": "<p><span style=\"font-size:20px\">Given a string S, consisting only of &lsquo;0&rsquo; and &lsquo;1&rsquo;, and also you are given an integer k. You are asked to find the sum of all unique substrings (in decimal notation) of length k in the string, such that string S is the repetition of these substrings. </span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>010100010010 3\n<strong>Output:\n </strong>6\n<strong>Exaplanation:\n</strong>Unique substrings are &ldquo;010&rdquo; and &ldquo;100&rdquo;.\nThe required sum is 2+4=6.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>00100110 4\n<strong>Output:\n</strong></span><span style=\"font-size:18px\">8</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>unique_substring_sum()</strong>&nbsp;which takes the binary string S as first parameter and k as the second parameter and returns the sum of unique substring (In decimal notation).If the string S can&rsquo;t be split into substrings of length k without leaving any characters in the string return -1.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;&nbsp;</strong>O(n)<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(n)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= length of string &lt;= 1000<br />\nk will not exceed 20</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string S consisting of '0' and '1', and an integer k, find the sum of all unique substrings of length k (converted to decimal representation). The string S should be formed by repeating these substrings.",
                "constraints": [
                    "1 <= length of string <= 1000",
                    "k will not exceed 20"
                ],
                "testcases": [
                    {
                        "input": "010100010010 3",
                        "output": "6",
                        "explanation": "The unique substrings of length 3 are \"010\" and \"100\".  Their decimal values are 2 and 4 respectively. The sum is 2 + 4 = 6. Note that the original string can be created by repeating either of the substrings."
                    },
                    {
                        "input": "00100110 4",
                        "output": "8",
                        "explanation": "The unique substrings of length 4 are \"0010\" and \"0110\". Their decimal values are 2 and 6 respectively. The sum is 2 + 6 = 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find all uniqiue substrings of length k.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\n\nclass Solution\n{\n\tprivate:\n\t\tint decimal_value(string s)\n\t\t{\n\t\t\tint k = s.size() - 1;\n\t\t\tint sum = 0;\n\t\t\tfor(int i = 0; i < s.size(); i++)\n\t\t\t{\n\t\t\t\t// adding 2^i * (s[i]-'0') to answer.\n\t\t\t\tsum = sum + (1<<k)*(s[i] - '0');\n\t\t\t\tk--;\n\t\t\t}\n\t\t\treturn sum;\n\n\t\t}\n\tpublic:\n\t\tlong int unique_substring_sum(string s, int k)\n\t\t{\n\t\t\tint n = s.size();\n\t\t\t// k is not divisible by string length answer will be -1.\n\t\t\tif(n % k != 0)\n\t\t\t\treturn -1;\n\t\t\tunordered_map<string, int> hash;\n\t\t\tint low = 0;\n\t\t\twhile(low < n){\n\t\t\t\tstring cur = s.substr(low, k);\n\t\t\t\t// storing every substring of length k in hash table\n\t\t\t\thash[cur]++;\n\t\t\t\tlow = low + k;\n\t\t\t}\n\t\t\tlong int sum = 0;\n\t\t\tfor(auto i: hash)\n\t\t\t\t// Getting the decimal value of the substring\n\t\t\t\tsum = sum + decimal_value(i.first);\n\t\t\treturn sum;\n\n\n\t\t}\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}