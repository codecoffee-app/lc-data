{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710065,
            "title": "Unoccupied Computers",
            "titleSlug": "unoccupied-computers-1646661078",
            "content": "<p><span style=\"font-size:18px\">A cafe has N computers. Several customers come to the cafe to use these computers. A customer will be serviced only if there is any unoccupied computer at the moment the customer visits the cafe. If there is no unoccupied computer, the customer leaves the cafe.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\">You are given an integer N representing the number of computers in the cafe and a sequence of uppercase letters S. Every letter in S occurs exactly two times. The first occurrence denotes the arrival of a customer and the second occurrence denotes the departure of the same customer if he gets allocated the computer.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\">You have to find the number of customers that walked away without using a computer.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3\r\nS = GACCBDDBAGEE\r\n<strong>Output: </strong>1\r\n<strong>Explanation:</strong> Only D will not be able to \r\nget any computer. So the answer is 1.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\">\r\nN = 1\r\nS = ABCBAC\r\n<strong>Output: </strong>2\r\n<strong>Explanation: </strong>B and C will not be able to \r\nget any computers. So the answer is 2.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>solve()</strong>&nbsp;which takes the integer N (the number of computers in the cafe) and the string S (denoting the arrival and departure of a customer)<strong>&nbsp;</strong>as input parameters&nbsp;and returns an integer representing the number of customers that walked away without using a computer.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|S|)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 26<br />\r\n1 &lt;= |S| &lt;= 52</span></p>\r\n\r\n<p><span style=\"font-size:18px\">S consists of uppercase English letters and each letter occurs exactly 2 times.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A cafe has N computers. Customers arrive and use the computers. A customer is served only if a computer is available. If no computer is available, the customer leaves. You are given N, the number of computers, and a string S representing customer arrivals and departures. Each letter in S appears exactly twice: the first occurrence is arrival, the second is departure. Determine the number of customers who left without using a computer.",
                "constraints": [
                    "1 <= N <= 26",
                    "1 <= |S| <= 52",
                    "S consists of uppercase English letters and each letter occurs exactly 2 times."
                ],
                "testcases": [
                    {
                        "input": "N = 3\nS = GACCBDDBAGEE",
                        "output": "1",
                        "explanation": "Only customer 'D' is unable to get a computer during their arrival, resulting in 1 customer walking away."
                    },
                    {
                        "input": "N = 1\nS = ABCBAC",
                        "output": "2",
                        "explanation": "Customers 'B' and 'C' are unable to get a computer, so the answer is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We will iterate the given sequence and check if there is any unoccupied computer. If there is one, we will provide the computer to the customer and decrement the count of unoccupied by 1. When the person who has occupied a computer leaves, increment the count of unoccupied by 1.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\n#define MAX_CHAR 26 \r\nclass Solution {\r\n  public:\r\n    int solve(int n, string seq) {\r\n        // code here\r\n        char seen[MAX_CHAR] = {0}; \r\n        int res = 0; \r\n        int occupied = 0; // To keep track of occupied computers \r\n        // Traverse the input sequence \r\n        for (int i=0; i <seq.length(); i++) \r\n        { \r\n            // Find index of current character in seen[0...25] \r\n            int ind = seq[i] - 'A'; \r\n    \r\n            // If First occurrence of 'seq[i]' \r\n            if (seen[ind] == 0) \r\n            { \r\n                // set the current character as seen \r\n                seen[ind] = 1; \r\n    \r\n                // If number of occupied computers is less than \r\n                // n, then assign a computer to new customer \r\n                if (occupied < n) \r\n                { \r\n                    occupied++; \r\n    \r\n                    // Set the current character as occupying a computer \r\n                    seen[ind] = 2; \r\n                } \r\n    \r\n                // Else this customer cannot get a computer, \r\n                // increment result \r\n                else\r\n                    res++; \r\n            } \r\n            // If this is second occurrence of 'seq[i]' \r\n            else\r\n            { \r\n            // Decrement occupied only if this customer \r\n            // was using a computer \r\n            if (seen[ind] == 2) \r\n                occupied--; \r\n            seen[ind] = 0; \r\n            } \r\n        } \r\n        return res;\r\n    }\r\n};\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    # Function to find minimum number of classrooms required\n    def solve(self, n, s):\n        seen = [0]*26\n        ans = 0\n        occupied = 0\n        for i in s:\n            # Converting letter to index\n            ind = ord(i) - ord('A')\n            # If the letter is not seen before\n            if seen[ind]==0:\n                seen[ind]=1\n                # If there are still available classrooms\n                if occupied<n:\n                    occupied += 1\n                    seen[ind]=2\n                else:\n                    # If all classrooms are occupied, increment ans\n                    ans+=1\n            else:\n                # If the letter is seen before\n                if seen[ind]==2:\n                    # Free up a classroom\n                    occupied -= 1\n                seen[ind] = 0\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {string} s\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to find the answer.\n    solve(n, s)\n    {\n        //Variable to store the answer.\n        let ans = 0;\n        \n        let seen = new Array(26).fill(0);\n        let occupied = 0;\n        \n        for(let i = 0; i < s.length; i++) {\n            let ind = s.charCodeAt(i) - 65;\n            \n            if(seen[ind] == 0) {\n                seen[ind] = 1;\n                \n                if(occupied < n) {\n                    occupied++;\n                    seen[ind] = 2;\n                } else {\n                    ans++;\n                }\n                \n            } else {\n                if(seen[ind] == 2) {\n                    occupied--;\n                }\n                \n                seen[ind] = 0;\n            }\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int solve(int n, string s)\n    {\n        const int MAX_CHAR = 26; \n        int[] seen = new int[MAX_CHAR]; \n        int res = 0; \n        int occupied = 0; // To keep track of occupied computers \n        // Traverse the input sequence \n        for (int i=0; i < s.Length; i++) \n        { \n            // Find index of current character in seen[0...25] \n            int ind = s[i] - 'A'; \n    \n            // If First occurrence of 's[i]' \n            if (seen[ind] == 0) \n            { \n                // set the current character as seen \n                seen[ind] = 1; \n    \n                // If number of occupied computers is less than \n                // n, then assign a computer to new customer \n                if (occupied < n) \n                { \n                    occupied++; \n    \n                    // Set the current character as occupying a computer \n                    seen[ind] = 2; \n                } \n    \n                // Else this customer cannot get a computer, \n                // increment result \n                else\n                    res++; \n            } \n            // If this is second occurrence of 's[i]' \n            else \n            { \n                // Decrement occupied only if this customer \n                // was using a computer \n                if (seen[ind] == 2) \n                    occupied--; \n                seen[ind] = 0; \n            } \n        } \n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}