{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701664,
            "title": "Unordered Set Find Duplicate",
            "titleSlug": "unordered-set-find-duplicate",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr[]</strong>. You need to find the duplicates in that array and print them using an iterator.<br /><strong>Note:&nbsp;</strong>Use unordered set, and give <strong>extra line</strong> after printing.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[]= [1, 1, 2, 2]<br /><strong>Output: </strong>1 2<br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>You may use 2 sets<strong>&nbsp;</strong>to get the result.</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nvector<int> DuplicateMe(vector<int>& arr) {\n    int n = arr.size();\n    unordered_set<int> origial;\n    unordered_set<int> duplicate;\n\n    for (int i = 0; i < n; ++i) {\n        // If element is not there then insert into original set\n        if (origial.find(arr[i]) == origial.end())\n            origial.insert(arr[i]);\n\n        // If element is already there then insert into duplicate set\n        else\n            duplicate.insert(arr[i]);\n    }\n\n    unordered_set<int>::iterator itr;\n    vector<int> res;\n    for (itr = duplicate.begin(); itr != duplicate.end(); ++itr)\n        res.push_back(*itr);\n\n    return res;\n}\n",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}