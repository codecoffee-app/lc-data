{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703327,
            "title": "Element with left side smaller and right side greater",
            "titleSlug": "unsorted-array4925",
            "content": "<p><span style=\"font-size: 18px;\">Given an unsorted array of arr. Find the first element in an array such that all of its left elements are smaller and all right elements of its are greater than it.</span></p>\n<p><span style=\"font-size: 18px;\">Note: Return <strong>-1</strong> if there is no such element.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :&nbsp;</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [4, 2, 5, 7]\n<strong>Output: </strong>5\n<strong>Explanation: </strong>Elements on left of 5 are smaller than 5 and on right of it are greater than 5.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [11, 9, 12]\n<strong>Output: </strong>-1<br /><strong>Explanation: </strong>As no element here which we can say smaller in left &amp; greater in right.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />3 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= arr<sub>i</sub> &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array `arr`, find the first element where all elements to its left are smaller, and all elements to its right are greater.  Return -1 if no such element exists.",
                "constraints": [
                    "3 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[4, 2, 5, 7]",
                        "output": "5",
                        "explanation": "5 is the first element where all elements to its left (4, 2) are smaller, and all elements to its right (7) are greater."
                    },
                    {
                        "input": "[11, 9, 12]",
                        "output": "-1",
                        "explanation": "No element satisfies the condition; therefore, the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Traverse left to right and keep track of maximum element till ith index, similarly traverse right to left and keep track of minimum element till ith index.</span></p>",
            "<p><span style=\"font-size: 18px;\">Use of auxiliary arrays here will be useful to keep track of maximum and minimum element<br />Finally ttravese the input array and chek if arr[i] &gt; ith maximum in leftmax array and arr[i] &lt; ith minimum in rightmin array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho",
            "amazon",
            "oyo-rooms",
            "intuit"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nclass Solution {\n  public:\n    int findElement(vector<int> &arr) {\n        int n = arr.size();\n        // leftMax[i] stores maximum of arr[0..i-1]\n        int leftMax[n], rightMin[n];\n        leftMax[0] = arr[0];\n        // Initialize minimum from right\n        rightMin[n - 1] = arr[n - 1];\n\n        // Fill leftMax[]1..n-1]\n        for (int i = 1; i < n; i++)\n            leftMax[i] = max(leftMax[i - 1], arr[i]);\n\n        // Fill rightMin[]1..n-1]\n        for (int i = n - 2; i >= 0; i--)\n            rightMin[i] = min(rightMin[i + 1], arr[i]);\n\n        // Traverse array from right\n        for (int i = 1; i < n - 1; i++) {\n            // Check if we found a required element\n            if (leftMax[i - 1] <= arr[i] && rightMin[i + 1] >= arr[i])\n                return arr[i];\n        }\n\n        // If there was no element matching criteria\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findElement(List<Integer> arr) {\n        int n = arr.size();\n        int[] leftMax = new int[n];\n        int[] rightMin = new int[n];\n\n        // leftMax[i] stores maximum of arr[0..i-1]\n        leftMax[0] = arr.get(0);\n\n        // Initialize minimum from right\n        rightMin[n - 1] = arr.get(n - 1);\n\n        // Fill leftMax[1..n-1]\n        for (int i = 1; i < n; i++) {\n            leftMax[i] = Math.max(leftMax[i - 1], arr.get(i));\n        }\n\n        // Fill rightMin[1..n-1]\n        for (int i = n - 2; i >= 0; i--) {\n            rightMin[i] = Math.min(rightMin[i + 1], arr.get(i));\n        }\n\n        // Traverse array from right\n        for (int i = 1; i < n - 1; i++) {\n            // Check if we found a required element\n            if (leftMax[i - 1] <= arr.get(i) && rightMin[i + 1] >= arr.get(i)) {\n                return arr.get(i);\n            }\n        }\n\n        // If there was no element matching criteria\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findElement(self, arr):\n        n = len(arr)\n        if n <= 2:\n            return -1\n\n        # leftMax[i] stores maximum of arr[0..i-1]\n        leftMax = [0] * n\n        rightMin = [0] * n\n\n        leftMax[0] = arr[0]\n        # Initialize minimum from right\n        rightMin[n - 1] = arr[n - 1]\n\n        # Fill leftMax[1..n-1]\n        for i in range(1, n):\n            leftMax[i] = max(leftMax[i - 1], arr[i])\n\n        # Fill rightMin[1..n-1]\n        for i in range(n - 2, -1, -1):\n            rightMin[i] = min(rightMin[i + 1], arr[i])\n\n        # Traverse array from right\n        for i in range(1, n - 1):\n            # Check if we found a required element\n            if leftMax[i - 1] <= arr[i] and rightMin[i + 1] >= arr[i]:\n                return arr[i]\n\n        # If there was no element matching criteria\n        return -1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    findElement(arr) {\n        let n = arr.length;\n        // leftMax[i] stores maximum of arr[0..i-1]\n        let leftMax = new Array(n);\n        let rightMin = new Array(n);\n        leftMax[0] = arr[0];\n        // Initialize minimum from right\n        rightMin[n - 1] = arr[n - 1];\n\n        // Fill leftMax[1..n-1]\n        for (let i = 1; i < n; i++) {\n            leftMax[i] = Math.max(leftMax[i - 1], arr[i]);\n        }\n\n        // Fill rightMin[0..n-2]\n        for (let i = n - 2; i >= 0; i--) {\n            rightMin[i] = Math.min(rightMin[i + 1], arr[i]);\n        }\n\n        // Traverse array from right\n        for (let i = 1; i < n - 1; i++) {\n            // Check if we found a required element\n            if (leftMax[i - 1] <= arr[i] && rightMin[i + 1] >= arr[i]) {\n                return arr[i];\n            }\n        }\n\n        // If there was no element matching criteria\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}