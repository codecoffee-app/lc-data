{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702820,
            "title": "Unusual String Sort",
            "titleSlug": "unusual-string-sort0405",
            "content": "<p><span style=\"font-size:18px\">Given a string composed of both lowercase and uppercase letters. Sort it in such a manner such that the uppercase and lowercase letter comes in an alternate manner but in sorted way.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS = bAwutndekWEdkd\n<strong>Output:</strong> AbEdWddekkntuw\n<strong>Explanation</strong>: letters A,E,W are sorted \nas well as letters b,d,d,d,e,k,k,n,t,u,w are \nsorted and both appears alternately in the \nstring as far as possible.\n</span></pre>\n\n<p><span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \nS = AiBFR\n<strong>Output:</strong> AiBFR\n<strong>Explanation</strong>: letters A,B,F,R and sorted \nas well as letter i. </span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>User Task:</strong><br />\nYou don&#39;t need to read input or print anything. You just have to complete the function&nbsp;<strong>stringSort ()&nbsp;</strong>which takes a string as input and returns the sorted string as described in the problem description.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).&nbsp;</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=|S|&lt;=1000</span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>The only way to sort a string in linear time is by using something like counting sort.<br />\nStore the frequencies of lowercase and uppercase characters separately in two arrays and then printing by somehow traversing both the arrays simultneously.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution\n{\n  public:\n    string stringSort (string s)\n    {\n        int up[26] = {0}; // stores the frequency of uppercase characters\n        int lo[26] = {0}; // stores the frequency of lowercase characters\n        \n        for (int i = 0; i < s.length (); i++)\n        {\n            if (s[i] >= 'a' and s[i] <= 'z') lo[s[i] - 'a']++;\n            else up[s[i] - 'A']++;\n        }\n        \n        int i = 0; // uppercase\n        int j = 0; // lowercase\n        \n        s = \"\";\n        while (i < 26 || j < 26)\n        {\n            // if uppercase character can be placed, place it\n            while (i < 26 and up[i] == 0) i++;\n            if (i < 26) \n            {\n                s += ('A' + i);\n                up[i]--;\n            }\n            // if lowercase character can be placed. place it \n            while (j < 26 and lo[j] == 0) j++;\n            if (j < 26)\n            {\n                s += ('a' + j);\n                lo[j]--;\n            }\n        }\n        return s;\n    }\n    // Contributes By: Pranay Bansal\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Sol\n{\n    public static String stringSort (String s)\n    {\n        int[] up = new int[26]; // stores the frequency of uppercase characters\n        int[] lo = new int[26]; // stores the frequency of lowercase characters\n        \n        for (int i = 0; i < s.length (); i++)\n        {\n            if (s.charAt (i) >= 'a' && s.charAt (i) <= 'z') lo[s.charAt (i) - 'a']++;\n            else up[s.charAt (i) - 'A']++;\n        }\n        \n        int i = 0; // uppercase\n        int j = 0; // lowercase\n        \n        s = \"\";\n        while (i < 26 || j < 26)\n        {\n            // if uppercase character can be placed, place it\n            while (i < 26 && up[i] == 0) i++;\n            if (i < 26) \n            {\n                s += (char)('A' + i);\n                up[i]--;\n            }\n            // if lowercase character can be placed. place it \n            while (j < 26 && lo[j] == 0) j++;\n            if (j < 26)\n            {\n                s += (char)('a' + j);\n                lo[j]--;\n            }\n        }\n        return s;\n    }\n}\n// Contributed By: Pranay Bansal",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def stringSort (self,s):\n        up = [0 for i in range (26)] # Uppercase\n        lo = [0 for i in range (26)] # Lowercase\n        \n        for i in s:\n            if i >= 'a' and i <= 'z':\n                lo[ord(i) - ord('a')] += 1\n            else:\n                up[ord(i) - ord('A')] += 1\n                \n        \n        res = \"\"\n        i = 0\n        j = 0 \n        while i < 26 or j < 26:\n            # if uppercase character can be placed, place it\n            while i < 26 and up[i] == 0:\n                i += 1\n            if i < 26:\n                res += chr (ord('A') + i)\n                up[i] -= 1\n            \n            # if lowercase character can be placed. place it \n            while j < 26 and lo[j] == 0:\n                j += 1\n            if j < 26:\n                res += chr (ord('a') + j)\n                lo[j] -= 1\n            \n        return res\n        \n    # Contributes By: Pranay Bansal",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @returns {string}\n*/\n\nclass Solution\n{\n    //Function to sort the characters of a string in alphabetical order.\n    stringSort (s)\n    {\n        let up = new Array(26).fill(0); // Uppercase\n        let lo = new Array(26).fill(0); // Lowercase\n        \n        for(let i=0; i<s.length; i++) {\n            if(s[i] >= 'a' && s[i] <= 'z'){\n                lo[s.charCodeAt(i) - 'a'.charCodeAt(0)] += 1;\n            } else {\n                up[s.charCodeAt(i) - 'A'.charCodeAt(0)] += 1;\n            }\n        }\n        \n        let res = \"\";\n        let i = 0;\n        let j = 0;\n        while (i < 26 || j < 26){\n            // if uppercase character can be placed, place it\n            while (i < 26 && up[i] === 0){\n                i += 1;\n            }\n            if (i < 26){\n                res += String.fromCharCode('A'.charCodeAt(0) + i);\n                up[i] -= 1;\n            }\n            \n            // if lowercase character can be placed. place it \n            while (j < 26 && lo[j] === 0){\n                j += 1;\n            }\n            if (j < 26){\n                res += String.fromCharCode('a'.charCodeAt(0) + j);\n                lo[j] -= 1;\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution\n{\n    public string stringSort(string s)\n    {\n        int[] up = new int[26]; // stores the frequency of uppercase characters\n        int[] lo = new int[26]; // stores the frequency of lowercase characters\n        \n        foreach (char c in s)\n        {\n            if (c >= 'a' && c <= 'z') lo[c - 'a']++;\n            else up[c - 'A']++;\n        }\n        \n        int i = 0; // uppercase\n        int j = 0; // lowercase\n\n        StringBuilder sb = new StringBuilder();\n        while (i < 26 || j < 26)\n        {\n            // if uppercase character can be placed, place it\n            while (i < 26 && up[i] == 0) i++;\n            if (i < 26) \n            {\n                sb.Append((char)('A' + i));\n                up[i]--;\n            }\n            // if lowercase character can be placed, place it \n            while (j < 26 && lo[j] == 0) j++;\n            if (j < 26)\n            {\n                sb.Append((char)('a' + j));\n                lo[j]--;\n            }\n\n            // Break condition: exit the loop when there are no more characters to sort\n            if (i >= 26 && j >= 26)\n            {\n                break; \n            }\n        }\n        return sb.ToString();\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}