{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713978,
            "title": "Update Queries",
            "titleSlug": "update-queries--170647",
            "content": "<p dir=\"ltr\"><span style=\"font-size:18px\">You are given an array of n elements, initially all a[i] = 0. Q&nbsp;queries need to be performed. Each query contains three integers l, r, and x&nbsp; and you need to change all <strong>a[i]</strong> to <strong>(a[i] | x)</strong> for all <strong>l&nbsp;&le;&nbsp;i &le; r</strong>.</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">Return the array after executing Q queries.</span></p>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=3, Q=2\r\nU=[[1, 3, 1],\r\n   [1, 3, 2]]\r\n\r\n<strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">a[]={3,3,3}</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong> </span>\r\n<span style=\"font-size:18px\">Initially, all elements of the array are 0. After execution of the</span>\r\n<span style=\"font-size:18px\">first query, all elements become 1 and after execution of the </span>\r\n<span style=\"font-size:18px\">second query all elements become 3.</span></pre>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:</span></strong>\r\n<span style=\"font-size:18px\">N=3, Q=2\r\nU=[[1, 2, 1],\r\n   [3, 3, 2]]\r\n\r\n<strong>Output:</strong>\r\na[]={1,1,2}</span>\r\n\r\n<strong><span style=\"font-size:18px\">Explanantion:</span></strong>\r\n<span style=\"font-size:18px\">[0,0,0] =&gt; [1,1,0] =&gt; [1,1,2]</span></pre>\r\n\r\n<p dir=\"ltr\">&nbsp;</p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function updateQuery<strong>()</strong>&nbsp;which takes the integer N,Q, and U a&nbsp;QX3 matrix containing the Q queries where&nbsp;U[i][0] is l<sub>i</sub>, U[i][1] is r<sub>i</sub> andU[i][2] is x<sub>i</sub>.and it returns the final array a.</span></p>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Expected Time Complexity: O(N)<br />\r\nExpected Space Complexity: O(N)</span></strong></p>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Constraints:</span></strong></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">1&lt;=N&lt;=10<sup>5</sup></span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">1&lt;=Q&lt;=10<sup>5</sup></span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">1&lt;=U[i][0] &lt;= U[i][1]&lt;=N</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">1&lt;= U[i][2] &lt;=10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array `a` of `n` elements, initially all set to 0. You need to perform `Q` queries. Each query consists of three integers: `l`, `r`, and `x`. For each query, you must update the array such that `a[i] = a[i] | x` for all indices `i` within the range `l <= i <= r` (inclusive). Return the final state of the array `a` after executing all `Q` queries.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= Q <= 10^5",
                    "1 <= U[i][0] <= U[i][1] <= N",
                    "1 <= U[i][2] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N=3, Q=2\nU=[[1, 3, 1],\n   [1, 3, 2]]",
                        "output": "a[]={3,3,3}",
                        "explanation": "Initially, all elements of the array are 0. The first query changes all elements to 1 (0 | 1 = 1). The second query changes all elements to 3 (1 | 2 = 3)."
                    },
                    {
                        "input": "N=3, Q=2\nU=[[1, 2, 1],\n   [3, 3, 2]]",
                        "output": "a[]={1,1,2}",
                        "explanation": "Initially [0, 0, 0]. First query (l=1, r=2, x=1) updates the array to [1, 1, 0]. Second query (l=3, r=3, x=2) updates the array to [1, 1, 2]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You can use the concept of difference array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n        //Function to update the elements of the array based on the queries.\n        //Returns the updated array.\n        vector<int> updateQuery(int n,int q,vector<vector<int>> &u)\n        {\n            //Initializing the array with zeros.\n            vector <int> a(n);\n            fill(a.begin(),a.end(),0);\n            \n            //Initializing a 2D array dp with zeros.\n            int dp[n][20];\n            for(int i=0;i<n;i++)\n            {\n                for(int j=0;j<20;j++)\n                    dp[i][j]=0;\n            }\n            \n            //Looping over the update queries.\n            for(auto j:u)\n            {\n                //Looping over the bits of the third element in the query.\n                for(int i=0;i<20;i++)\n                {\n                    //If the bit is set at position i, update the dp array.\n                    if(j[2]&(1ll<<i))\n                    {\n                        dp[j[0]-1][i]++;\n                        if(j[1]<n)\n                            dp[j[1]][i]--;\n                    }\n                }\n            }\n            \n            //Updating the dp array to obtain the final values.\n            for(int j=0;j<20;j++)\n            {\n                for(int i=1;i<n;i++)\n                {\n                    dp[i][j]+=dp[i-1][j];\n                }\n            }\n            \n            //Updating the array a based on the dp array.\n            for(int i=0;i<n;i++)\n            {\n                int ans=0;\n                for(int j=0;j<20;j++)\n                {\n                    if(dp[i][j])\n                        ans+=(1ll<<j);\n                }\n                a[i]=ans;\n            }\n            \n            //Returning the updated array.\n            return a;\n        }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    // Function to update the values of an array based on given queries.\n\tint [] updateQuery(int N, int Q, int [][]U){\n        // Creating a 2D array to store the differences between elements in each query.\n        int diff[][]=new int[N+1][20];\n        // Creating an array to store the final updated values.\n        int ans[]=new int[N];\n        \n        // Looping through each query and updating the differences array.\n        for(int i=0;i<Q;i++){\n            int temp=U[i][2];\n            int in=0;\n            while(temp>0){\n                // If the current bit is 1, increment the difference of the corresponding elements.\n                if((temp&1)!=0){\n                    diff[U[i][0]-1][in]++;\n                    diff[U[i][1]][in]--;\n                }\n                in++;\n                temp>>=1;\n            }\n        }\n        \n        // Calculating the cumulative differences for each element in the differences array.\n        for(int i=0;i<20;i++){\n            for(int j=1;j<N;j++){\n                diff[j][i]+=diff[j-1][i];\n            }\n        }\n        \n        // Calculating the final updated values based on the differences array.\n        for(int i=0;i<N;i++){\n            int val=0;\n            for(int j=0;j<20;j++){\n                if(diff[i][j]>0){\n                    val+=(1<<j);\n                }\n            }\n            ans[i]=val;\n        }\n        \n        // Returning the updated values array.\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution():\n\n    #Function to update the query.\n    def updateQuery(self, N, Q, U):\n\n        #initializing the number of bits as 5.\n        bits = 5\n\n        #creating a 2D array to store the dynamic programming values.\n        dp = [[0 for j in range(bits)] for i in range(n+1)]\n\n        #iterating over each query.\n        for i in U:\n            l,r,x = i\n            #updating the dp array based on the query.\n            for j in range(bits):\n                val = int(x&(1<<j) > 0)\n                dp[l-1][j]+=val\n                dp[r][j] -= val\n\n        #initializing a temporary variable.\n        tmp = 0\n        \n        #creating an array to store the final values.\n        arr = [0]*n\n\n        #calculating the initial value for arr[0].\n        for j in range(bits):\n                if dp[0][j] > 0:\n                    val = 1\n                else:\n                    val = 0\n                tmp += val<<j\n        arr[0] = tmp\n\n        #updating the remaining values for arr.\n        for i in range(1, n):\n            tmp = 0\n            for j in range(bits):\n                #updating dp and calculating the value for arr.\n                dp[i][j] += dp[i-1][j]\n                if dp[i][j] > 0:\n                    val = 1\n                else:\n                    val = 0\n                tmp += val<<j\n            arr[i] = tmp\n        \n        #returning the final array.\n        return arr",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for Javascript\n\n/**\n * @param {number} N\n * @param {number} Q\n * @param {number[]} U\n * @returns {number[]}\n*/\n\nclass Solution {\n    updateQuery(N, Q, U) \n    {\n        let bits = 5;\n        let dp = [];\n        \n        for(let i=0; i<=N; i++){\n            dp.push(new Array(bits).fill(0));\n        }\n        \n        for(let i=0; i<Q; i++){\n            let l = U[i][0];\n            let r = U[i][1];\n            let x = U[i][2];\n            \n            for(let j=0; j<bits; j++){\n                let val = x & (1<<j) ? 1 : 0;\n                dp[l-1][j] += val;\n                dp[r][j] -= val;\n            }\n        }\n        \n        let tmp = 0;\n        let arr = new Array(N).fill(0);\n        \n        for(let j=0; j<bits; j++){\n            let val = dp[0][j] > 0 ? 1 : 0;\n            tmp += val<<j;\n        }\n        arr[0] = tmp;\n\n        for(let i=1; i<N; i++){\n            tmp = 0;\n            for(let j=0; j<bits; j++){\n                dp[i][j] += dp[i-1][j];\n                let val = dp[i][j] > 0 ? 1 : 0;\n                tmp += val<<j;\n            }\n            arr[i] = tmp;\n        }\n        \n        return arr;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to update the array according to the Query and print the updated array.\n    public List<int> updateQuery(int N,int Q, List<List<int>> U)\n    {\n        //Initializing the array with zeros.\n        List<int> a = new List<int>(N);\n        for (int i = 0; i < N; i++)\n        {\n            a.Add(0);\n        }\n\n        //Initializing a 2D array dp with zeros.\n        int[,] dp = new int[N, 20];\n        for (int i = 0; i < N; i++)\n        {\n            for (int j = 0; j < 20; j++)\n            {\n                dp[i, j] = 0;\n            }\n        }\n\n        //Looping over the update queries.\n        foreach (List<int> q in U)\n        {\n            //Looping over the bits of the third element in the query.\n            for (int i = 0; i < 20; i++)\n            {\n                //If the bit is set at position i, update the dp array.\n                if ((q[2] & (1 << i)) != 0)\n                {\n                    dp[q[0] - 1, i]++;\n                    if (q[1] < N)\n                        dp[q[1], i]--;\n                }\n            }\n        }\n\n        //Updating the dp array to obtain the final values.\n        for (int j = 0; j < 20; j++)\n        {\n            for (int i = 1; i < N; i++)\n            {\n                dp[i, j] += dp[i - 1, j];\n            }\n        }\n\n        //Updating the array a based on the dp array.\n        for (int i = 0; i < N; i++)\n        {\n            int ans = 0;\n            for (int j = 0; j < 20; j++)\n            {\n                if (dp[i, j] != 0)\n                    ans += (1 << j);\n            }\n            a[i] = ans;\n        }\n\n        //Returning the updated array.\n        return a;\n    }\n\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}