{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703534,
            "title": "Valid Substring",
            "titleSlug": "valid-substring0624",
            "content": "<p><span >Given a string <code>s</code> consisting only of opening and closing parentheses <code>(</code> and <code>)</code>, find the length of the longest valid (well-formed) parentheses substring.</span></p>\n<p><span ><strong>Note: </strong>The length of the smallest valid substring <code>()</code> is 2.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \"(()(\"\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>The longest valid substring is <code>()</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">. Its length is 2.</span> </span></pre>\n<pre><span ><strong>Input: </strong>s = \"()(())(\"\n<strong>Output:</strong> 6\n<strong>Explanation: </strong>The longest valid substring is <code>()(())</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">. Its length is 6.</span></span></pre>\n<pre><span ><strong>Input: </strong>s = \"(()())\"\n<strong>Output:</strong> 6\n<strong>Explanation: </strong>The longest valid substring is <code>(()())</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">. Its length is 6.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= s.size() &lt;= 10<sup>5</sup><br />s[i] = { '(' , ')' }</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting only of opening and closing parentheses `(` and `)`, determine the length of the longest valid (well-formed) parentheses substring.",
                "constraints": [
                    "1 <= s.size() <= 10^5",
                    "s[i] = { '(' , ')' }"
                ],
                "testcases": [
                    {
                        "input": "(()(",
                        "output": "2",
                        "explanation": "The longest valid substring is `()`. Its length is 2."
                    },
                    {
                        "input": "()(())(",
                        "output": "6",
                        "explanation": "The longest valid substring is `()(())`. Its length is 6."
                    },
                    {
                        "input": "(()())",
                        "output": "6",
                        "explanation": "The longest valid substring is `(()())`. Its length is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\"><strong>Two-pointer </strong>approach to </span><span style=\"font-size: 18px;\">keep track of the count of open parentheses and closed parentheses.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend complete function template for c++\nclass Solution {\n  public:\n    int findMaxLen(string& s) {\n        int n = s.length();\n\n        // Variables for left and right counter.\n        // maxlength to store the maximum length found so far\n        int left = 0, right = 0, maxlength = 0;\n\n        // Iterating the string from left to right\n        for (int i = 0; i < n; i++) {\n            // If \"(\" is encountered,\n            // then left counter is incremented\n            // else right counter is incremented\n            if (s[i] == '(')\n                left++;\n            else\n                right++;\n\n            // Whenever left is equal to right, it signifies\n            // that the subsequence is valid and\n            if (left == right)\n                maxlength = max(maxlength, 2 * right);\n\n            // Reseting the counters when the subsequence\n            // becomes invalid\n            else if (right > left)\n                left = right = 0;\n        }\n\n        left = right = 0;\n\n        // Iterating the string from right to left\n        for (int i = n - 1; i >= 0; i--) {\n\n            // If \"(\" is encountered,\n            // then left counter is incremented\n            // else right counter is incremented\n            if (s[i] == '(')\n                left++;\n            else\n                right++;\n\n            // Whenever left is equal to right, it signifies\n            // that the subsequence is valid and\n            if (left == right)\n                maxlength = max(maxlength, 2 * left);\n\n            // Reseting the counters when the subsequence\n            // becomes invalid\n            else if (left > right)\n                left = right = 0;\n        }\n        return maxlength;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findMaxLen(String s) {\n        int n = s.length();\n\n        // Variables for left and right counter.\n        // maxlength to store the maximum length found so far\n        int left = 0, right = 0, maxlength = 0;\n\n        // Iterating the string from left to right\n        for (int i = 0; i < n; i++) {\n            // If \"(\" is encountered,\n            // then left counter is incremented\n            // else right counter is incremented\n            if (s.charAt(i) == '(')\n                left++;\n            else\n                right++;\n\n            // Whenever left is equal to right, it signifies\n            // that the subsequence is valid and\n            if (left == right) maxlength = Math.max(maxlength, 2 * right);\n\n            // Reseting the counters when the subsequence\n            // becomes invalid\n            else if (right > left)\n                left = right = 0;\n        }\n\n        left = right = 0;\n\n        // Iterating the string from right to left\n        for (int i = n - 1; i >= 0; i--) {\n\n            // If \"(\" is encountered,\n            // then left counter is incremented\n            // else right counter is incremented\n            if (s.charAt(i) == '(')\n                left++;\n            else\n                right++;\n\n            // Whenever left is equal to right, it signifies\n            // that the subsequence is valid and\n            if (left == right) maxlength = Math.max(maxlength, 2 * left);\n\n            // Reseting the counters when the subsequence\n            // becomes invalid\n            else if (left > right)\n                left = right = 0;\n        }\n        return maxlength;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findMaxLen(self, s):\n        n = len(s)\n\n        # Variables for left and right counters and maxlength\n        left, right, maxlength = 0, 0, 0\n\n        # Iterating the string from left to right\n        for i in range(n):\n            if s[i] == '(':\n                left += 1\n            else:\n                right += 1\n\n            # Check if the current substring is valid\n            if left == right:\n                maxlength = max(maxlength, 2 * right)\n\n            # Reset counters if the substring becomes invalid\n            elif right > left:\n                left = right = 0\n\n        left = right = 0\n\n        # Iterating the string from right to left\n        for i in range(n - 1, -1, -1):\n            if s[i] == '(':\n                left += 1\n            else:\n                right += 1\n\n            # Check if the current substring is valid\n            if left == right:\n                maxlength = max(maxlength, 2 * left)\n\n            # Reset counters if the substring becomes invalid\n            elif left > right:\n                left = right = 0\n\n        return maxlength\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findMaxLen(s) {\n        let n = s.length;\n        let left = 0;\n        let right = 0;\n        let maxlength = 0;\n\n        for (let i = 0; i < n; i++) {\n            if (s[i] === '(')\n                left++;\n            else\n                right++;\n\n            if (left === right)\n                maxlength = Math.max(maxlength, 2 * right);\n            else if (right > left)\n                left = right = 0;\n        }\n\n        left = right = 0;\n\n        for (let i = n - 1; i >= 0; i--) {\n            if (s[i] === '(')\n                left++;\n            else\n                right++;\n\n            if (left === right)\n                maxlength = Math.max(maxlength, 2 * left);\n            else if (left > right)\n                left = right = 0;\n        }\n        return maxlength;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}