{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700325,
            "title": "Validate an IP Address",
            "titleSlug": "validate-an-ip-address-1587115621",
            "content": "<p><span >You are given a string <strong>s </strong>in the form of an IPv4 Address. Your task is to validate an IPv4 Address, if it is valid return <strong>true</strong> otherwise return <strong>false</strong>.</span></p>\n<blockquote>\n<p><span ><strong><a href=\"http://en.wikipedia.org/wiki/IP_address\">IPv4 addresses</a></strong> are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots, e.g., \"172.16.254.1\"</span></p>\n<p><span >A<strong> valid IPv4 Address</strong> is of the form x1.x2.x3.x4 where <strong>0 &lt;= (x1, x2, x3, x4) &lt;= 255</strong>. Thus, we can write the generalized form of an IPv4 address as (0-255).(0-255).(0-255).(0-255)</span></p>\n</blockquote>\n<p><span >Note: Here we are considering numbers only from 0 to 255 and any additional <strong>leading zeroes</strong> will be considered invalid.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \"222.111.111.111\"\n<strong>Output: </strong>true\n<strong>Explanation:</strong> Here, the IPv4 address is as per the criteria mentioned and also all four decimal numbers lies in the mentioned range.\n</span></pre>\n<pre><span ><strong>Input: </strong>s<strong> </strong>= \"5555..555\"\n<strong>Output: </strong>false<strong>\nExplanation: \"</strong>5555..555\" is not a valid. IPv4 address, as the middle two portions are missing.<br /></span></pre>\n<pre><span ><strong>Input: </strong>s<strong> </strong>= \"0.0.0.255\"\n<strong>Output: </strong>false</span></pre>\n<p><span ><strong>Constraints:</strong><br />1&lt;= |s| &lt;=15</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` representing an IPv4 address, determine if it is a valid IPv4 address. A valid IPv4 address consists of four decimal numbers, each in the range of 0 to 255, separated by dots (e.g., \"172.16.254.1\"). Leading zeroes in any of the four numbers will make the address invalid.",
                "constraints": [
                    "1 <= |s| <= 15"
                ],
                "testcases": [
                    {
                        "input": "222.111.111.111",
                        "output": "true",
                        "explanation": "The IPv4 address is in the correct format and all four numbers are within the range of 0 to 255, without leading zeros."
                    },
                    {
                        "input": "5555..555",
                        "output": "false",
                        "explanation": "The input is not a valid IPv4 address because the middle two portions are missing numbers."
                    },
                    {
                        "input": "0.0.0.255",
                        "output": "false",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Split the string according to the positions of '.' and then check all those segments if it is in the range [0, 255]. Also, check that there is no leading zeroes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho",
            "amazon",
            "microsoft",
            "qualcomm"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    int isValid(string& str) {\n        // your code here\n        int counter = 0;\n        // count number of '.'\n        for (int i = 0; i < str.length(); i++) {\n            if (str[i] == '.')\n                counter++;\n        }\n        if (counter != 3)\n            return 0;\n\n        // stores the valid numbers\n        unordered_set<string> st;\n        for (int i = 0; i < 256; i++)\n            st.insert(to_string(i));\n        counter = 0;\n        // temp contains the current segment\n        string temp = \"\";\n        for (int i = 0; i < str.length(); i++) {\n\n            if (str[i] != '.') {\n                temp = temp + str[i];\n            } else {\n                // if temp doesn't present in valid numbers set\n                if (st.count(temp) != 0)\n                    counter++;\n\n                temp = \"\";\n            }\n        }\n        // temp=temp+s[s.length()-1];\n        if (st.count(temp) != 0)\n            counter++;\n\n        if (counter == 4)\n            return 1;\n        else\n            return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    public Set<String> allnums;\n\n    public boolean isValid(String s) {\n        allnums = new HashSet<>();\n        // allowed segments\n        for (int i = 0; i < 256; i++) {\n            allnums.add(String.valueOf(i));\n        }\n\n        int dots = 0;\n        // counting dots\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '.') dots++;\n        }\n        if (dots != 3) return false;\n\n        // split according to positions of '.'\n        String[] nums = s.split(\"\\\\.\");\n        if (nums.length != 4) return false;\n\n        for (String x : nums) {\n            if (!allnums.contains(x)) return false;\n        }\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to validate an IP address\n    def isValid(self, s):\n        counter = 0\n        for i in range(0, len(s)):\n            # Count the number of periods (.)\n            if (s[i] == '.'):\n                counter = counter + 1\n        # If the number of periods is not 3, IP address is invalid\n        if (counter != 3):\n            return 0\n\n        # Create a set to store all possible values of a byte (0-255)\n        st = set()\n        for i in range(0, 256):\n            st.add(str(i))\n\n        counter = 0\n        temp = \"\"\n        for i in range(0, len(s)):\n            # If character is not a period (.), add it to the temporary string\n            if (s[i] != '.'):\n                temp = temp + s[i]\n            else:\n                # Check if the temporary string is a valid byte\n                if (temp in st):\n                    counter = counter + 1\n                temp = \"\"\n        # Check if the final temporary string is a valid byte\n        if (temp in st):\n            counter = counter + 1\n\n        # If the number of valid bytes is 4, IP address is valid\n        if (counter == 4):\n            return 1\n        else:\n            return 0\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string} s\n * @returns {number}\n */\n\nclass Solution {\n    isValid(s) {\n        // count number of '.'\n        let counter = 0;\n        for (let i = 0; i < s.length; i++) {\n            if (s[i] === '.') counter++;\n        }\n        if (counter !== 3) return 0;\n\n        // stores the valid numbers\n        let st = new Set();\n        for (let i = 0; i < 256; i++) st.add(i.toString());\n        counter = 0;\n        // temp contains the current segment\n        let temp = \"\";\n        for (let i = 0; i < s.length; i++) {\n            if (s[i] !== '.') {\n                temp = temp + s[i];\n            } else {\n                // if temp doesn't present in valid numbers set\n                if (st.has(temp)) counter++;\n\n                temp = \"\";\n            }\n        }\n        // temp=temp+s[s.length()-1];\n        if (st.has(temp)) counter++;\n\n        if (counter === 4)\n            return 1;\n        else\n            return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}