{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701650,
            "title": "Vector Erase and Clear",
            "titleSlug": "vector-erase-and-clear",
            "content": "<p><span style=\"font-size: 18px;\">Given a vector <strong>arr[]</strong><strong> </strong>containing integers. Complete below functions on given vector depending on each query :<br /><strong>1. clearAll():</strong> This function removes all elements from vector.<br /><strong>2. eraseAt():</strong> This function removes&nbsp;element&nbsp;from specified <strong>position </strong>present in the&nbsp;vector.<br /><strong>3. eraseInRange():</strong> This function removes element from vector in the given range <strong>start</strong> &amp; <strong>end</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong> <strong> </strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[]= [2, 3, 4, 5, 6], query: 2 3\n<strong>Output: </strong>[2, 3, 4, 6]\n<strong>Explanation: </strong>Query in this case is to remove element from specified position, thus after removal/modification elements present\nin the vector are 2 3 4 6.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[]= [1, 4, 5, 4, 2], query: 3 2 4\n<strong>Output: </strong>[1, 4]\n<strong>Explanation: </strong>Query in this case is to erase elements in specific range, thus after removal/modification elements present\nin the vector are 1 4.</span></pre>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a vector `arr` of integers. You need to implement the following functions based on the given query type:\n\n1.  **`clearAll()`:** Removes all elements from the vector.\n2.  **`eraseAt(position)`:** Removes the element at the specified `position` in the vector (0-based indexing).\n3.  **`eraseInRange(start, end)`:** Removes elements from the vector within the inclusive range [`start`, `end`] (0-based indexing).",
                "constraints": [],
                "testcases": [
                    {
                        "input": "arr = [2, 3, 4, 5, 6], query = 2 3",
                        "output": "[2, 3, 4, 6]",
                        "explanation": "The query is to remove the element at position 3 (which is 5). The resulting vector is [2, 3, 4, 6]."
                    },
                    {
                        "input": "arr = [1, 4, 5, 4, 2], query = 3 2 4",
                        "output": "[1, 4]",
                        "explanation": "The query is to remove elements from index 2 to 4 (inclusive).  This removes 5, 4, and 2. The resulting vector is [1, 4]."
                    },
                    {
                        "input": "arr = [1, 2, 3], query = 1",
                        "output": "[]",
                        "explanation": "The query is to clear the whole array. Thus the final output is an empty array."
                    },
                    {
                        "input": "arr = [7, 8, 9, 10], query = 2 0",
                        "output": "[8, 9, 10]",
                        "explanation": "The query is to remove the element at index 0, so 7 is removed from the array and the final array is [8,9,10]."
                    },
                    {
                        "input": "arr = [11, 12, 13, 14, 15], query = 3 1 3",
                        "output": "[11, 15]",
                        "explanation": "The query is to remove the elements in range [1,3] i.e. the elements at index 1, 2 and 3 are removed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>void eraseAt(vector&lt;int&gt; &amp;V, int pos)<br />\n{<br />\n&nbsp;&nbsp;&nbsp; vector&lt;int&gt;::iterator it;<br />\n&nbsp;&nbsp;&nbsp; it = V.begin() + pos;<br />\n&nbsp;&nbsp;&nbsp; V.erase(it);<br />\n&nbsp;&nbsp; &nbsp;<br />\n}</p>\n\n<p>void eraseInRange(vector&lt;int&gt; &amp;V, int start, int end)<br />\n{<br />\n&nbsp;&nbsp;&nbsp; vector&lt;int&gt;:: iterator st;<br />\n&nbsp;&nbsp;&nbsp; vector&lt;int&gt;:: iterator en;<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp; st = V.begin() + start;<br />\n&nbsp;&nbsp;&nbsp; en = V.begin() + end;<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp; V.erase(st, en);<br />\n}</p>\n\n<p>void clearAll(vector&lt;int&gt; &amp;V)<br />\n{<br />\n&nbsp;&nbsp;&nbsp; V.clear();<br />\n&nbsp;&nbsp; &nbsp;<br />\n}</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nvoid eraseAt(vector<int> &arr, int pos) {\n    vector<int>::iterator it;\n    it = arr.begin() + pos;\n    arr.erase(it);\n}\n\nvoid eraseInRange(vector<int> &arr, int start, int end) {\n    vector<int>::iterator st;\n    vector<int>::iterator en;\n\n    st = arr.begin() + start;\n    en = arr.begin() + end;\n\n    arr.erase(st, en);\n}\n\nvoid clearAll(vector<int> &arr) {\n    arr.clear();\n}",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}