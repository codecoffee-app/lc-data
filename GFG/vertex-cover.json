{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710294,
            "title": "Vertex Cover",
            "titleSlug": "vertex-cover",
            "content": "<p><span style=\"font-size: 18px;\"><strong>Vertex cover </strong>of an undirected graph is a list of vertices such that every vertex not in the vertex cover shares their every edge with the vertices in the <strong>vertex cover</strong>. In other words, for every edge in the graph, atleast one of the endpoints of the graph should belong to the <strong>vertex cover</strong>. You will be given an undirected graph <strong>G</strong>, and your task is to determine the <strong>smallest possible size </strong>of a <strong>vertex cover.</strong></span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong><code>\nN=5\nM=6\nedges[][]={{1,2}\n\\t     {4, 1},\n\\t     {2, 4},\n\\t     {3, 4},\n\\t     {5, 2},\n\\t     {1, 3}}\n<strong>Output:</strong>\n3\n<strong>Explanation:</strong>\n{2, 3, 4} </code>forms a vertex cover<br />with the smallest size.</span></pre>\n<p><strong><span style=\"font-size: 18px;\"><code>Example 2:</code></span></strong></p>\n<pre><span style=\"font-size: 18px;\"><code><strong>Input:</strong>\nN=2\nM=1\nedges[][]={{1,2}}</code> <br /><strong>Output:</strong> <br />1 <br /><strong>Explanation:</strong> <br />Include either node 1 or node 2<br />in the vertex cover.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>vertexCover()</strong> which takes the <strong>edge list </strong>and an integer <strong>n </strong>for the number of nodes of the graph<strong>&nbsp;</strong>as input parameters&nbsp;and returns the <strong>size of the smallest possible vertex cover</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(M*2<sup>N</sup>)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N<sup>2</sup>)</span><br /><br />&nbsp;<span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 16<br />1 &lt;= M &lt;= N*(N-1)/2<br />1 &lt;= edges[i][0], edges[i][1] &lt;= N</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph G with N vertices and M edges, determine the smallest possible size of a vertex cover. A vertex cover is a set of vertices such that for every edge in the graph, at least one of its endpoints is in the set.",
                "constraints": [
                    "1 <= N <= 16",
                    "1 <= M <= N*(N-1)/2",
                    "1 <= edges[i][0], edges[i][1] <= N"
                ],
                "testcases": [
                    {
                        "input": "N=5\nM=6\nedges[][]={{1,2}\n\t     {4, 1},\n\t     {2, 4},\n\t     {3, 4},\n\t     {5, 2},\n\t     {1, 3}}",
                        "output": "3",
                        "explanation": "The set of vertices {2, 3, 4} forms a vertex cover of the smallest possible size. Every edge in the graph has at least one endpoint in this set."
                    },
                    {
                        "input": "N=2\nM=1\nedges[][]={{1,2}}",
                        "output": "1",
                        "explanation": "Including either node 1 or node 2 in the vertex cover satisfies the condition that every edge has at least one endpoint in the cover."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Bits.</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    bool checkCover(int n, int k, int m, vector<vector<int>> &e) {\r\n    \t// Set has first 'k' bits high initially\r\n    \tint set = (1 << k) - 1;\r\n    \r\n    \tint limit = (1 << n);\r\n    \r\n    \t// To mark the edges covered in each subset of size 'k'.\r\n    \tbool visited[n + 1][n + 1];\r\n    \r\n    \twhile (set < limit) {\r\n    \t\t// Reset visited array for every subset of vertices.\r\n    \t\tmemset(visited, 0, sizeof(visited));\r\n    \r\n    \t\t// Set counter for number of edges covered from this subset of vertices to zero.\r\n    \t\tint cnt = 0;\r\n    \r\n    \t\t// Selected vertex cover is the indices where 'set' has its bit high.\r\n    \t\tfor (int j = 1, v = 1; j < limit; j = j << 1, v++) {\r\n    \t\t\tif (set & j) {\r\n    \t\t\t\t// Mark all edges emerging out of this vertex visited\r\n    \t\t\t\tfor (int k = 1; k <= n; k++) {\r\n    \t\t\t\t\tif (e[v][k] && !visited[v][k]) {\r\n    \t\t\t\t\t\tvisited[v][k] = 1;\r\n    \t\t\t\t\t\tvisited[k][v] = 1;\r\n    \t\t\t\t\t\tcnt++;\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n    \t\t}\r\n    \r\n    \t\t// If the current subset covers all the edges\r\n    \t\tif (cnt == m) {\r\n    \t\t\treturn true;\r\n    \t\t}\r\n    \r\n    \t\t// Generate previous combination with k bits high set & -set = (1 << last bit high in set).\r\n    \t\tint c = set & -set;\r\n    \t\tint r = set + c;\r\n    \t\tset = (((r ^ set) >> 2) / c) | r;\r\n    \t}\r\n    \treturn false;\r\n    }\r\n\r\n    int vertexCoverHelper(vector<vector<int>> e, int n, int m) {\r\n    \t// Binary search the answer.\r\n    \tint low = 1, high = n;\r\n    \r\n    \twhile (high > low) {\r\n    \t\tint mid = (low + high) >> 1;\r\n    \r\n    \t\tif (checkCover(n, mid, m, e) == false) {\r\n    \t\t\tlow = mid + 1;\r\n    \t\t}\r\n    \t\telse {\r\n    \t\t\thigh = mid;\r\n    \t\t}\r\n    \t}\r\n    \treturn low;\r\n    }\r\n\r\nint vertexCover(int n, vector<pair<int, int>> &edges) {\r\n\r\n\tint m = edges.size();\r\n\r\n\tvector<vector<int>> e(n + 1, vector<int>(n + 1, 0));\r\n\r\n\t// Push the adjacent nodes for each node.\r\n\tfor (int i = 0; i < m; i++) {\r\n\t\te[edges[i].first][edges[i].second] = 1;\r\n\t\te[edges[i].second][edges[i].first] = 1;\r\n\t}\r\n\treturn vertexCoverHelper(e, n, m);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int vertexCover(int n, int m, int[][] edges) \r\n    {\r\n        int g[][]= new int[n][n];\r\n        for(int i= 0; i<m; i++){\r\n            g[edges[i][0]-1][edges[i][1]-1]= 1;\r\n            g[edges[i][1]-1][edges[i][0]-1]= 1;\r\n        }\r\n        \r\n        return findCover(n, m, g);\r\n    }\r\n    \r\n    public static int findCover(int n, int m, int[][] g){\r\n        int l= 1;\r\n        int h= n;\r\n        while(l<h){\r\n            int mid= (l+h)/2;\r\n            if(checkEdges(n, mid, m, g)==false){\r\n                l= mid+1;\r\n            }\r\n            else{\r\n                h= mid;\r\n            }\r\n        }\r\n        \r\n        return l;\r\n    }\r\n    \r\n    public static boolean checkEdges(int n, int k, int m, int[][] g){\r\n        int set= (1<<k)-1;\r\n        int limit= 1<<n;\r\n        \r\n        while(set<limit){\r\n            \r\n            boolean visited[][]= new boolean[n][n];\r\n            int count= 0;\r\n            \r\n            for(int i= 1, j= 1; i<limit; i= i<<1, j++ ){\r\n                if((set&i)!=0){\r\n                    for(int v= 0; v<n; v++){\r\n                        if(g[j-1][v]==1 && !visited[j-1][v]){\r\n                            visited[j-1][v]= true;\r\n                            visited[v][j-1]= true;\r\n                            count++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if(count==m){\r\n                return true;\r\n            }\r\n            \r\n            int co= set & -set;\r\n            int ro= set + co;\r\n            set= (((ro^set)>>2)/co)|ro;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n}\r\n        ",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from typing import List\r\n\r\n\r\nclass Solution:\r\n    def checkCover(self, n, k, m, e):\r\n        # Set has first 'k' bits high initially\r\n        set_val = (1 << k) - 1\r\n    \r\n        limit = (1 << n)\r\n    \r\n        # To mark the edges covered in each subset of size 'k'.\r\n    \r\n        while set_val < limit:\r\n            visited = [[False] * (n + 1) for _ in range(n + 1)]\r\n    \r\n            # Set counter for number of edges covered from this subset of vertices to zero.\r\n            cnt = 0\r\n    \r\n            # Selected vertex cover is the indices where 'set_val' has its bit high.\r\n            v = 1\r\n            j = 1\r\n            while j<limit:\r\n                # v = 1 << (j - 1)\r\n                if set_val & j:\r\n                    # Mark all edges emerging out of this vertex as visited\r\n                    for k in range(1, n + 1):\r\n                        if e[v][k] and not visited[v][k]:\r\n                            visited[v][k] = True\r\n                            visited[k][v] = True\r\n                            cnt += 1\r\n                \r\n                j <<= 1\r\n                v += 1\r\n    \r\n            # If the current subset covers all the edges\r\n            if cnt == m:\r\n                return True\r\n    \r\n            # Generate next combination with k set bits\r\n            c = set_val & -set_val\r\n            r = set_val + c\r\n            set_val = (((r ^ set_val) >> 2) // c) | r\r\n        \r\n        return False\r\n\r\n    def vertexCoverHelper(self, e, n, m):\r\n        # Binary search the answer.\r\n        low, high = 1, n\r\n    \r\n        while high > low:\r\n            mid = (low + high) >> 1\r\n    \r\n            if not self.checkCover(n, mid, m, e):\r\n                low = mid + 1\r\n            else:\r\n                high = mid\r\n        \r\n        return low\r\n\r\n    def vertexCover(self, n : int, edges : List[List[int]]) -> int:\r\n        m = len(edges)\r\n\r\n        e = [[0] * (n + 1) for _ in range(n + 1)]\r\n\r\n        # Push the adjacent nodes for each node.\r\n        for i in range(m):\r\n            e[edges[i][0]][edges[i][1]] = 1\r\n            e[edges[i][1]][edges[i][0]] = 1\r\n        \r\n        return self.vertexCoverHelper(e, n, m)\r\n        \r\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}