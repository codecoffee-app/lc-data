{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700704,
            "title": "Vertical Width of a Binary Tree",
            "titleSlug": "vertical-width-of-a-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Tree. You need to find and return the vertical width of the tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>\\t   1\n\\t /    \\\n\\t2\\t3\n     / \\    /  \\\n    4   5  6   7\n\\t\\t\\   \\\n\\t\\t 8   9\n<strong>Output: </strong>6\n<strong>Explanation:</strong> The width of a binary tree is\nthe number of vertical paths in that tree.</span>\n\n<span style=\"font-size: 18px;\"><img class=\"alignnone size-full wp-image-356895\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/tree2-8.png\" alt=\"\" /></span>\n\n<span style=\"font-size: 18px;\">The above tree contains <strong>6</strong> vertical lines.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>     1\n&nbsp;   /  \\\n&nbsp;  2    3\n<strong>Output: </strong>3<br /></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">The above tree has 3 vertical lines, hence the answer is 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(nlogn)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(height of the tree).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />0 &lt;= number of nodes &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, determine its vertical width. The vertical width is defined as the number of distinct vertical lines that pass through the tree's nodes.",
                "constraints": [
                    "0 <= number of nodes <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "     1\n    /    \\\n   2    3\n  / \\  / \\\n 4   5 6   7\n     / \\\n    8   9",
                        "output": "6",
                        "explanation": "The tree contains 6 vertical lines. The leftmost line passes through node 4, and the rightmost line passes through node 9."
                    },
                    {
                        "input": "     1\n    /  \\\n   2    3",
                        "output": "3",
                        "explanation": "The tree has 3 vertical lines."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse the tree while tracking the horizontal distance of each node from the root, updating the minimum and maximum distances.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    void lengthUtil(Node* root, int& maximum, int& minimum, int curr) {\n        // base case for recursion.\n        if (root == NULL)\n            return;\n\n        // calling the lengthUtil function recursively for the left subtrees.\n        lengthUtil(root->left, maximum, minimum, curr - 1);\n\n        // updating maximum and minimum.\n        if (minimum > curr)\n            minimum = curr;\n        if (maximum < curr)\n            maximum = curr;\n\n        // calling the lengthUtil function recursively for the right subtrees.\n        lengthUtil(root->right, maximum, minimum, curr + 1);\n    }\n\n    // Function to find the vertical width of a Binary Tree.\n    int verticalWidth(Node* root) {\n        if (!root) {\n            return 0;\n        }\n        int maximum = 0, minimum = 0;\n        lengthUtil(root, maximum, minimum, 0);\n        // returning the result.\n        return (abs(minimum) + maximum) + 1;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public HashSet<Integer> s = new HashSet<Integer>();\n\n    public Solution() { s.clear(); }\n\n    public void find(Node root, int l) {\n        // base case for recursion.\n        if (root == null) return;\n\n        // adding the distance to set.\n        s.add(l);\n\n        // calling the find function recursively for the left and right subtrees.\n        find(root.left, l - 1);\n        find(root.right, l + 1);\n    }\n\n    // Function to find the vertical width of a Binary Tree.\n    public int verticalWidth(Node root) {\n        if (root == null) return 0;\n        find(root, 0);\n        // returning the result.\n        return s.size();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "maximum = 0\nminimum = 0\n\n\ndef lengthUtil(root, curr):\n    global maximum\n    global minimum\n\n    #base case for recursion.\n    if root == None:\n        return\n\n    #calling the lengthUtil function recursively for the left subtrees.\n    lengthUtil(root.left, curr - 1)\n\n    #updating maximum and minimum.\n    minimum = min(minimum, curr)\n    maximum = max(maximum, curr)\n\n    #calling the lengthUtil function recursively for the right subtrees.\n    lengthUtil(root.right, curr + 1)\n\n\n#Function to find the vertical width of a Binary Tree.\ndef verticalWidth(root):\n    if (root == None):\n        return 0\n    global maximum\n    global minimum\n    maximum, minimum = 0, 0\n    lengthUtil(root, 0)\n\n    #returning the result.\n    return (abs(maximum) + abs(minimum) + 1)\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\n\nclass Solution {\n    void lengthUtil(Node root, ref int maximum, ref int minimum, int curr) {\n        // base case for recursion.\n        if (root == null) return;\n\n        // calling the lengthUtil function recursively for the left subtrees.\n        lengthUtil(root.left, ref maximum, ref minimum, curr - 1);\n\n        // updating maximum and minimum.\n        if (minimum > curr) minimum = curr;\n        if (maximum < curr) maximum = curr;\n\n        // calling the lengthUtil function recursively for the right subtrees.\n        lengthUtil(root.right, ref maximum, ref minimum, curr + 1);\n    }\n\n    // Function to find the vertical width of a Binary Tree.\n    public int verticalWidth(Node root) {\n        if (root == null) {\n            return 0;\n        }\n        int maximum = 0, minimum = 0;\n        lengthUtil(root, ref maximum, ref minimum, 0);\n        // returning the result.\n        return (Math.Abs(minimum) + maximum) + 1;\n    }\n}\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\n\n/**\n * @param {Node} root\n * @returns {number}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n\n    constructor() {\n        this.maximum = 0;\n        this.minimum = 0;\n    }\n\n    lengthUtil(root, curr) {\n        // base case for recursion.\n        if (root === null) return;\n\n        // calling the lengthUtil function recursively for the left subtrees.\n        this.lengthUtil(root.left, curr - 1);\n\n        // updating maximum and minimum.\n        if (this.minimum > curr) this.minimum = curr;\n        if (this.maximum < curr) this.maximum = curr;\n\n        // calling the lengthUtil function recursively for the right subtrees.\n        this.lengthUtil(root.right, curr + 1);\n    }\n\n    // Function to find the vertical width of a Binary Tree.\n    verticalWidth(root) {\n        if (!root) {\n            return 0;\n        }\n        this.lengthUtil(root, 0);\n        // returning the result.\n        return (Math.abs(this.minimum) + this.maximum) + 1;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}