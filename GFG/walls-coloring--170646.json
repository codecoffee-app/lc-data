{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713592,
            "title": "Walls Coloring",
            "titleSlug": "walls-coloring--170646",
            "content": "<p><span style=\"font-size:18px\">There is a row of&nbsp;<strong>N</strong>&nbsp;walls in Geeksland. The king of Geeksland ordered Alexa to color all the walls on the occasion of New Year. Alexa can color each wall with either pink, black, or yellow. The cost associated with coloring each wall with a particular color is represented by a 2D array <strong>colors</strong> of size <strong>N*3</strong>&nbsp;, where&nbsp;<strong>colors[i][0]</strong>,&nbsp;<strong>colors[i][1]</strong>, and&nbsp;<strong>colors[i][2]</strong>&nbsp;is the cost of painting ith wall with colors pink, black, and yellow respectively.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">You need to find the minimum cost to color all the walls such that no two adjacent walls have the same color.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3\r\ncolors[][] = {{14, 2, 11},\r\n\\t\\t {11, 14, 5},\r\n\\t\\t {14, 3, 10}}\r\n<strong>Output:</strong>\r\n10\r\n<strong>Explanation:</strong>\r\nColor wall 0 with black. Cost = 2. \r\nColor wall 1 with yellow. Cost = 5. \r\nColor wall 2 with black. Cost = 3.\r\nTotal Cost = 2 + 5 + 3 = 10</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 2\r\ncolors[][] = {{1, 2, 3},\r\n\\t\\t {1, 4, 6}}\r\n<strong>Output:</strong>\r\n3\r\n<strong>Explanation:</strong>\r\nColor wall 0 with black. Cost = 2\r\nColor wall 1 with pink. Cost = 1\r\nTotal Cost = 1 + 2 = 3</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">Your task is to complete the function <strong>minCost()</strong> which takes the 2D integer array <strong>colors</strong>&nbsp;and an integer <strong>N</strong> as the input parameters&nbsp;and returns an integer, representing the minimum cost to color&nbsp;all the walls.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup></span></li>\r\n\t<li><span style=\"font-size:18px\">1 &lt;= colors[i][0], colors[i][1], colors[i][2] &lt;= 10<sup>4</sup></span></li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "There are N walls in a row that need to be painted. You can paint each wall pink, black, or yellow. The cost to paint the i-th wall with a particular color is given in the colors array: colors[i][0] is the cost of painting the i-th wall pink, colors[i][1] is the cost of painting it black, and colors[i][2] is the cost of painting it yellow.  Find the minimum cost to paint all the walls such that no two adjacent walls have the same color.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= colors[i][0], colors[i][1], colors[i][2] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "N = 3\ncolors[][] = {{14, 2, 11},\n\t\t {11, 14, 5},\n\t\t {14, 3, 10}}",
                        "output": "10",
                        "explanation": "One possible solution is:\n- Color wall 0 with black (cost = 2).\n- Color wall 1 with yellow (cost = 5).\n- Color wall 2 with black (cost = 3).\nTotal cost = 2 + 5 + 3 = 10. This yields the minimum possible cost."
                    },
                    {
                        "input": "N = 2\ncolors[][] = {{1, 2, 3},\n\t\t {1, 4, 6}}",
                        "output": "3",
                        "explanation": "One possible solution is:\n- Color wall 0 with black (cost = 2).\n- Color wall 1 with pink (cost = 1).\nTotal cost = 2 + 1 = 3. This yields the minimum possible cost."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">Try to make a recurrence relation.<br />\nIf you color&nbsp;wall&nbsp;&lsquo;i&rsquo; with pink&nbsp;then you can only color&nbsp;wall&nbsp;&lsquo;i-1&rsquo; with black&nbsp;and yellow.<br />\nThink of making the recurrence relation using the above fact.</span><br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{   \npublic:\n    int minCost(vector<vector<int>> &colors, int n) {\n        int dp[n + 1][3];\n        // Base Case\n        dp[0][0] = colors[0][0];\n        dp[0][1] = colors[0][1];\n        dp[0][2] = colors[0][2];\n    \n        // Dynamic Programming loop\n        for (int i = 1; i < n; i++) {\n            // Calculating minimum cost for each color\n            dp[i][0] = colors[i][0] + min(dp[i - 1][1], dp[i - 1][2]);\n            dp[i][1] = colors[i][1] + min(dp[i - 1][0], dp[i - 1][2]);\n            dp[i][2] = colors[i][2] + min(dp[i - 1][0], dp[i - 1][1]);\n        }\n        // Returning the minimum cost among all colors\n        return min(dp[n - 1][0], min(dp[n - 1][1], dp[n - 1][2]));\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    int minCost(int [][] colors, int n){\n        \n        //Creating a dynamic programming array to store the minimum cost\n        int[][] dp = new int[n + 1][3];\n        \n        //Initializing the first row of dp with the costs from the colors array\n        dp[0][0] = colors[0][0];\n        dp[0][1] = colors[0][1];\n        dp[0][2] = colors[0][2];\n    \n        //Iterating over the remaining rows of dp\n        for (int i = 1; i < n; i++) {\n            \n            //Calculating the minimum cost for each color option and storing it in dp\n            dp[i][0] = colors[i][0] + Math.min(dp[i - 1][1], dp[i - 1][2]);\n            dp[i][1] = colors[i][1] + Math.min(dp[i - 1][0], dp[i - 1][2]);\n            dp[i][2] = colors[i][2] + Math.min(dp[i - 1][0], dp[i - 1][1]);\n        }\n        \n        //Returning the minimum cost among the three color options from the last row of dp\n        return Math.min(dp[n - 1][0], Math.min(dp[n - 1][1], dp[n - 1][2]));\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\ninf = 10**18\r\nclass Solution():\r\n    \r\n    #Function to find the minimum cost.\r\n    def minCost(self, colors, N):\r\n        ans = colors[0][:]\r\n        \r\n        #iterating through the colors.\r\n        for i in range(1, n):\r\n            tmp = ans[:]\r\n            ans = [inf, inf, inf]\r\n            \r\n            #iterating through the possible colors.\r\n            for j in range(3):\r\n                \r\n                #calculating the minimum cost for each color.\r\n                ans[j] = min(ans[j], tmp[(j+1)%3]+colors[i][j])\r\n                ans[j] = min(ans[j], tmp[(j+2)%3]+colors[i][j])\r\n        return min(ans)",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution   \n{\n    //Complete this function\n    public int minCost(List<List<int>> colors, int N)\n    {\n        // Base Case\n        int[,] dp = new int[N + 1, 3];\n        dp[0, 0] = colors[0][0];\n        dp[0, 1] = colors[0][1];\n        dp[0, 2] = colors[0][2];\n    \n        // Dynamic Programming loop\n        for (int i = 1; i < N; i++) {\n            // Calculating minimum cost for each color\n            dp[i, 0] = colors[i][0] + Math.Min(dp[i - 1, 1], dp[i - 1, 2]);\n            dp[i, 1] = colors[i][1] + Math.Min(dp[i - 1, 0], dp[i - 1, 2]);\n            dp[i, 2] = colors[i][2] + Math.Min(dp[i - 1, 0], dp[i - 1, 1]);\n        }\n        // Returning the minimum cost among all colors\n        return Math.Min(dp[N - 1, 0], Math.Min(dp[N - 1, 1], dp[N - 1, 2]));\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}