{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713979,
            "title": "Walls Coloring II",
            "titleSlug": "walls-coloring-ii--170647",
            "content": "<p><span style=\"font-size:18px\">There is a row of&nbsp;<strong>N</strong>&nbsp;walls in Geeksland. The king of Geeksland ordered Alexa to color all the walls on the occasion of New Year. Alexa can color each wall with one of the&nbsp;<strong>K</strong>&nbsp;colors. The cost associated with coloring each wall with a particular color is represented by a 2D&nbsp;<strong>costs</strong>&nbsp;array of size&nbsp;<strong>N * K</strong>. For example, costs[0][0] is the cost of coloring wall 0 with color 0; costs[1][2] is the cost of coloring wall 1 with color 2, and so on... Find the minimum cost to color all the walls such that no two adjacent walls have the same color.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:&nbsp;</strong></span><span style=\"font-size:18px\"><strong>If you are not able to paint&nbsp;all the walls, then you should return -1.</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4, K = 3\r\ncosts[][] = {{1, 5, 7},\r\n\\t\\t {5, 8, 4},\r\n&nbsp;\\t\\t{3, 2, 9},\r\n&nbsp;\\t\\t{1, 2, 4}}\r\n\r\n<strong>Output:</strong>\r\n8\r\n<strong>Explanation:</strong>\r\nPaint wall 0 with color 0. Cost = 1\r\nPaint wall 1 with color 2. Cost = 4\r\nPaint wall 2 with color 1. Cost = 2\r\nPaint wall 3 with color 0. Cost = 1\r\nTotal Cost = 1 + 4 + 2 + 1 = 8</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 5, K = 1\r\ncosts[][] = {{5},\r\n\\t\\t {4},\r\n&nbsp;\\t\\t{9},\r\n&nbsp;\\t\\t{2},\r\n&nbsp;\\t\\t{1}}\r\n<strong>Output:</strong>\r\n-1\r\n<strong>Explanation:</strong>\r\nIt is not possible to color all the walls under the given conditions.</span></pre>\r\n\r\n<p><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">Your task is to complete the function <strong>minCost()&nbsp;</strong>which takes a 2D integer matrix <strong>costs&nbsp;</strong>as the only argument and returns an integer, representing the minimum cost to paint&nbsp;all the walls.&nbsp;If you are not able to paint all the walls, then you should return -1</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: O(N*K)<br />\r\nExpected Space Complexity: O(N*K)</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">0 &lt;= N &lt;= 10<sup>3</sup></span></li>\r\n\t<li><span style=\"font-size:18px\">0 &lt;= K &lt;= 10<sup>3</sup></span></li>\r\n\t<li><span style=\"font-size:18px\">1 &lt;= costs[i][j] &lt;= 10<sup>5</sup></span></li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are tasked with coloring a row of N walls in Geeksland using K different colors. The cost of painting each wall with a specific color is given by the N x K 2D array `costs`. `costs[i][j]` represents the cost of painting wall `i` with color `j`. Your goal is to find the minimum total cost to color all the walls such that no two adjacent walls have the same color. If it's impossible to color all walls under this condition, return -1.",
                "constraints": [
                    "0 <= N <= 1000",
                    "0 <= K <= 1000",
                    "1 <= costs[i][j] <= 100000"
                ],
                "testcases": [
                    {
                        "input": "N = 4, K = 3\ncosts = {{1, 5, 7},\n         {5, 8, 4},\n         {3, 2, 9},\n         {1, 2, 4}}",
                        "output": "8",
                        "explanation": "One possible optimal coloring is:\n- Paint wall 0 with color 0 (cost = 1)\n- Paint wall 1 with color 2 (cost = 4)\n- Paint wall 2 with color 1 (cost = 2)\n- Paint wall 3 with color 0 (cost = 1)\nTotal cost = 1 + 4 + 2 + 1 = 8"
                    },
                    {
                        "input": "N = 5, K = 1\ncosts = {{5},\n         {4},\n         {9},\n         {2},\n         {1}}",
                        "output": "-1",
                        "explanation": "With only one color available, it's impossible to color adjacent walls with different colors. Therefore, it's not possible to paint all the walls under the given conditions."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">This problem is similar to knapsack problem.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\npublic:\r\n    int minCost(vector<vector<int>> &costs) {\r\n        int n = costs.size();\r\n        if (n == 0) return 0;\r\n        int k = costs[0].size();\r\n        if (k == 0) return 0;\r\n        // Stores the first minimum value\r\n        int min1 = INT_MAX;\r\n        // Stores the second most minimum value\r\n        int min2 = INT_MAX;\r\n        // Creating a dp 2D array of size n*k\r\n        vector<vector<int>> dp(n, vector<int>(k));\r\n        for (int i = 0; i < k; i++) {\r\n            dp[0][i] = costs[0][i];\r\n            if (costs[0][i] < min1) {\r\n                min2 = min1;\r\n                min1 = costs[0][i];\r\n            } else if (costs[0][i] < min2) {\r\n                min2 = costs[0][i];\r\n            }\r\n        }\r\n        if (n == 1) {\r\n            return min1;\r\n        }\r\n        // Stores the current minimum value in a given iteration\r\n        int cmin1 = INT_MAX;\r\n        // Stores the second most current minimum value in a given iteration\r\n        int cmin2 = INT_MAX;\r\n        for (int i = 1; i < n; i++) {\r\n            for (int j = 0; j < k; j++) {\r\n                if (dp[i - 1][j] != min1) {\r\n                    dp[i][j] = costs[i][j] + min1;\r\n                }\r\n                else {\r\n                    dp[i][j] = costs[i][j] + min2;\r\n                }\r\n                    \r\n                if (dp[i][j] < cmin1) {\r\n                    cmin2 = cmin1;\r\n                    cmin1 = dp[i][j];\r\n                } \r\n                else if (dp[i][j] < cmin2) {\r\n                    cmin2 = dp[i][j];\r\n                }\r\n            }\r\n            min1 = cmin1;\r\n            min2 = cmin2;\r\n            cmin1 = INT_MAX;\r\n            cmin2 = INT_MAX;\r\n        }\r\n        // If min1 value is less than 0, implies the answer is not possible\r\n        if (min1 < 0) {\r\n            return -1;\r\n            \r\n        }\r\n        return min1;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n\tint minCost(int [][] costs) {\r\n\t    int n = costs.length;\r\n\t    if (n == 0) \r\n\t    \treturn 0;\r\n\t    int k = costs[0].length;\r\n\t    if (k == 0) \r\n\t    \treturn 0;\r\n\t    // Stores the first minimum value\r\n\t    int min1 = Integer.MAX_VALUE;\r\n\t    // Stores the second most minimum value\r\n\t    int min2 = Integer.MAX_VALUE;\r\n\t    // Creating a dp 2D array of size n*k\r\n\t    int [][] dp = new int[n][k];\r\n\t    //vector<vector<int>> dp(n, vector<int>(k));\r\n\t    for (int i = 0; i < k; i++) {\r\n\t        dp[0][i] = costs[0][i];\r\n\t        if (costs[0][i] < min1) {\r\n\t            min2 = min1;\r\n\t            min1 = costs[0][i];\r\n\t        } else if (costs[0][i] < min2) {\r\n\t            min2 = costs[0][i];\r\n\t        }\r\n\t    }\r\n\t    if (n == 1) {\r\n\t        return min1;\r\n\t    }\r\n\t    // Stores the current minimum value in a given iteration\r\n\t    int cmin1 = Integer.MAX_VALUE;\r\n\t    // Stores the second most current minimum value in a given iteration\r\n\t    int cmin2 = Integer.MAX_VALUE;\r\n\t    for (int i = 1; i < n; i++) {\r\n\t        for (int j = 0; j < k; j++) {\r\n\t            if (dp[i - 1][j] != min1) {\r\n\t                dp[i][j] = costs[i][j] + min1;\r\n\t            }\r\n\t            else {\r\n\t                dp[i][j] = costs[i][j] + min2;\r\n\t            }\r\n\t                \r\n\t            if (dp[i][j] < cmin1) {\r\n\t                cmin2 = cmin1;\r\n\t                cmin1 = dp[i][j];\r\n\t            } \r\n\t            else if (dp[i][j] < cmin2) {\r\n\t                cmin2 = dp[i][j];\r\n\t            }\r\n\t        }\r\n\t        min1 = cmin1;\r\n\t        min2 = cmin2;\r\n\t        cmin1 = Integer.MAX_VALUE;\r\n\t        cmin2 = Integer.MAX_VALUE;\r\n\t    }\r\n\t    // If min1 value is less than 0, implies the answer is not possible\r\n\t    if (min1 < 0) {\r\n\t        return -1;\r\n\t        \r\n\t    }\r\n\t    return min1;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\ninf = 10**18\n\nclass Solution:\n    # Function to find the minimum cost\n    def minCost(self, costs : List[List[int]]) -> int:\n        n, k = len(costs), len(costs[0])\n\n        # If there is only one color and more than one house,\n        # then it is impossible to paint all houses\n        if k == 1 and n > 1:\n            return -1\n\n        # List to store the minimum costs and the previous color chosen for each house\n        nmin = [[0,-1],[0,-1]]\n\n        # Iterate through each house\n        for i in range(1, n+1):\n            # Copy the previous minimum costs\n            min1 = nmin[:]\n            nmin = []\n\n            # Iterate through each color\n            for j in range(1, k+1):\n                # Choose the minimum cost among the two previous minimum costs\n                mini = min1[0]\n\n                if mini[1] == j-1:\n                    mini = min1[1]\n                \n                # Calculate the cost of painting the current house with the current color\n                cost = [costs[i-1][j-1] + mini[0], j-1]\n                nmin.append(cost)\n\n                # Sort the minimum costs list in ascending order\n                nmin.sort()\n\n                # Keep only the two minimum costs\n                nmin = nmin[:2]\n\n            # The two minimum costs are stored for the next iteration\n        return nmin[0][0]",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number[][]} costs\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to find the minimum cost to paint all houses.\r\n    minCost(costs)\r\n    {\r\n        let n = costs.length;\r\n        let k = costs[0].length;\r\n\r\n        // If there is only one color and more than one house,\r\n        // then it is impossible to paint all houses\r\n        if (k == 1 && n > 1) {\r\n            return -1;\r\n        }\r\n\r\n        // List to store the minimum costs and the previous color chosen for each house\r\n        let nmin = [[0,-1],[0,-1]];\r\n\r\n        // Iterate through each house\r\n        for (let i = 1; i < n+1; i++) {\r\n            // Copy the previous minimum costs\r\n            let min1 = [...nmin];\r\n            nmin = [];\r\n\r\n            // Iterate through each color\r\n            for (let j = 1; j < k+1; j++) {\r\n                // Choose the minimum cost among the two previous minimum costs\r\n                let mini = min1[0];\r\n\r\n                if (mini[1] == j-1) {\r\n                    mini = min1[1];\r\n                }\r\n                \r\n                // Calculate the cost of painting the current house with the current color\r\n                let cost = [costs[i-1][j-1] + mini[0], j-1];\r\n                nmin.push(cost);\r\n\r\n                // Sort the minimum costs list in ascending order\r\n                nmin.sort(function(a, b) { return a[0]-b[0] });\r\n                \r\n                // Keep only the two minimum costs\r\n                nmin = nmin.slice(0, 2);\r\n            }\r\n\r\n            // The two minimum costs are stored for the next iteration\r\n        }\r\n        return nmin[0][0];\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\npublic class Solution\n{\n    //Complete this function\n    public int minCost(List<List<int>> costs)\n    {\n        int n = costs.Count;\n        if (n == 0) return 0;\n        int k = costs[0].Count;\n        if (k == 0) return 0;\n        // Stores the first minimum value\n        int min1 = int.MaxValue;\n        // Stores the second most minimum value\n        int min2 = int.MaxValue;\n        // Creating a dp 2D array of size n*k\n        List<List<int>> dp = new List<List<int>>();\n        for (int i = 0; i < n; i++) {\n            dp.Add(new List<int>(new int[k]));\n        }\n        for (int i = 0; i < k; i++) {\n            dp[0][i] = costs[0][i];\n            if (costs[0][i] < min1) {\n                min2 = min1;\n                min1 = costs[0][i];\n            } else if (costs[0][i] < min2) {\n                min2 = costs[0][i];\n            }\n        }\n        if (n == 1) {\n            return min1;\n        }\n        // Stores the current minimum value in a given iteration\n        int cmin1 = int.MaxValue;\n        // Stores the second most current minimum value in a given iteration\n        int cmin2 = int.MaxValue;\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < k; j++) {\n                if (dp[i - 1][j] != min1) {\n                    dp[i][j] = costs[i][j] + min1;\n                }\n                else {\n                    dp[i][j] = costs[i][j] + min2;\n                }\n                    \n                if (dp[i][j] < cmin1) {\n                    cmin2 = cmin1;\n                    cmin1 = dp[i][j];\n                } \n                else if (dp[i][j] < cmin2) {\n                    cmin2 = dp[i][j];\n                }\n            }\n            min1 = cmin1;\n            min2 = cmin2;\n            cmin1 = int.MaxValue;\n            cmin2 = int.MaxValue;\n        }\n        // If min1 value is less than 0, implies the answer is not possible\n        if (min1 < 0) {\n            return -1;\n            \n        }\n        return min1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}