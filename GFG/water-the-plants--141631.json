{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706083,
            "title": "Closest Similar Elements",
            "titleSlug": "water-the-plants--141631",
            "content": "<p><span style=\"font-size: 18px;\">Geek has an integer array <strong>arr </strong>of size <strong>n</strong>&nbsp;and integers <strong>indexDifference, valueDifference.</strong> Geek needs to find a pair of indexes (i, j) which follows all the given conditions<br /></span></p>\n<ul>\n<li><strong><span style=\"font-size: 18px;\">i != j</span></strong></li>\n<li><strong><span style=\"font-size: 18px;\">abs(i - j) &lt;= indexDifference</span></strong></li>\n<li><strong><span style=\"font-size: 18px;\">abs(Arr[i] - Arr[j]) &lt;= valueDifference</span></strong></li>\n</ul>\n<p><span style=\"font-size: 18px;\">Geek needs your help to find out if such a pair, return <strong>True</strong> if such a pair exists else return <strong>False</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4, arr[] = {1, 2, 3, 1}, indexDifference = 3, valueDifference = 0\n<strong>Output: </strong>True\n<strong>Explanation: </strong>The index i = 0 and j = 3 follows all the given conditions hence the output is <strong>True</strong>.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 6, arr[] = {1, 5, 9, 1, 5, 9}, indexDifference = 2, valueDifference = 3\n<strong>Output: </strong>False\n<strong>Explanation: </strong>No pair of indexes follow all the given conditions hence the output is <strong>False</strong>.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>5</sup><br />-10<sup>9</sup> &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Make a list/vector of all sprinklers and sort them wrt the starting point of their span.</span></p>\n\n<p><span style=\"font-size:18px\">Now set the target at the start of the gallery and select the sprinkler which covers the target and reaches the furthest&nbsp;possible point (end of span).</span></p>\n\n<p><span style=\"font-size:18px\">Now, the target point moves one unit ahead of the&nbsp;end of span of the previously selected sprinkler. Repeat this process of selecting sprinklers&nbsp;till the complete gallery is covered.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool closestSimilarElements(int n, vector<int>& arr, int indexDifference,\n                                int valueDifference) {\n\n        if (n == 0 || indexDifference < 0 || valueDifference < 0)\n            return false;\n\n        unordered_map<int, int> buckets;\n\n        for (int i = 0; i < n; ++i) {\n            int bucket = arr[i] / ((long)valueDifference + 1);\n\n            if (arr[i] < 0)\n                --bucket;\n\n            if (buckets.find(bucket) != buckets.end())\n                return true;\n            else {\n                buckets[bucket] = arr[i];\n                if (buckets.find(bucket - 1) != buckets.end() &&\n                    (long)arr[i] - buckets[bucket - 1] <= valueDifference)\n                    return true;\n                if (buckets.find(bucket + 1) != buckets.end() &&\n                    (long)buckets[bucket + 1] - arr[i] <= valueDifference)\n                    return true;\n\n                if (buckets.size() > indexDifference) {\n                    int key_to_remove =\n                        arr[i - indexDifference] / ((long)valueDifference + 1);\n\n                    if (arr[i - indexDifference] < 0)\n                        --key_to_remove;\n\n                    buckets.erase(key_to_remove);\n                }\n            }\n        }\n\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}