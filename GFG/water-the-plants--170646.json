{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713593,
            "title": "Water the plants",
            "titleSlug": "water-the-plants--170646",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">A gallery with plants is divided into <strong>n</strong> parts, numbered 0, 1, 2, 3, ..., n-1. There are provisions for attaching water sprinklers in every division. A sprinkler with range <strong>x</strong> at division <strong>i</strong> can water all divisions from <strong>i-x</strong> to <strong>i+x</strong>.</span></span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">Given an array <strong>gallery[]</strong> consisting of <strong>n</strong> integers, where <strong>gallery[i]</strong> is the range of the sprinkler at partition <strong>i</strong> (a power of <strong>-1</strong> indicates no sprinkler attached), return the <strong>minimum </strong>number of sprinklers that need to be turned on to water the entire gallery. If there is <strong>no possible way </strong>to water the full length using the given sprinklers, print <strong>-1</strong>.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 6\ngallery[] = {-1, 2, 2, -1, 0, 0}\n<strong>Output:\n</strong>2\n<strong>Explanation: <br /></strong>Sprinklers at index 2 and 5\ncan water the full gallery, span of\nsprinkler at index 2 = [0,4] and span\nof sprinkler at index 5 = [5,5].</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 9\ngallery[ ] = {2, 3, 4, -1, 2, 0, 0, -1, 0}\n<strong>Output:\n</strong>-1\n<strong>Explanation: <br /></strong>No sprinkler can throw water\nat index 7. Hence all plants cannot be\nwatered.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 3:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 9\ngallery[ ] = {2, 3, 4, -1, 0, 0, 0, 0, 0}\n<strong>Output:\n</strong>3\n<strong>Explanation: <br /></strong>Sprinkler at indexes 2, 7 and\n8 together can water all plants.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your task:</strong><br />You do not have to take any input or print anything. Your task is to complete the function <strong>min_sprinklers()</strong>&nbsp;which takes the array&nbsp;<strong>gallery[ ]</strong>&nbsp;and the integer&nbsp;<strong>n</strong>&nbsp;as input parameters and returns the&nbsp;<strong>minimum&nbsp;</strong>number of sprinklers that need to be turned on to water the entire gallery.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O( nlog(n) )<br /><strong>Expected Auxiliary Space:</strong> O( n )</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le;&nbsp;10<sup>5</sup><br />gallery[i] &le;&nbsp;50</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A gallery with 'n' sections, numbered from 0 to n-1, has provisions for sprinklers. A sprinkler at section 'i' with range 'x' waters sections from i-x to i+x. Given an array 'gallery[]' of length 'n', where gallery[i] represents the range of the sprinkler at section 'i' (-1 indicates no sprinkler), determine the minimum number of sprinklers needed to water the entire gallery. If it's impossible to water the entire gallery, return -1.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "gallery[i] <= 50"
                ],
                "testcases": [
                    {
                        "input": "n = 6\ngallery[] = {-1, 2, 2, -1, 0, 0}",
                        "output": "2",
                        "explanation": "Sprinklers at indices 2 and 5 can water the full gallery. The sprinkler at index 2 covers sections [0, 4], and the sprinkler at index 5 covers section [5]."
                    },
                    {
                        "input": "n = 9\ngallery[ ] = {2, 3, 4, -1, 2, 0, 0, -1, 0}",
                        "output": "-1",
                        "explanation": "No sprinkler can reach index 7, so the entire gallery cannot be watered."
                    },
                    {
                        "input": "n = 9\ngallery[ ] = {2, 3, 4, -1, 0, 0, 0, 0, 0}",
                        "output": "3",
                        "explanation": "Sprinklers at indices 2, 7, and 8 together can water all sections of the gallery."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You have to take the minimum number of sprinklers that need to be turned on to water the complete gallery. So the idea is to take those sprinklers whose range is larger.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    //Function to find the minimum number of sprinklers required.\n    int min_sprinklers(int gallery[], int n)\n    {\n        //creating a vector of pairs to store the range of each sprinkler.\n        vector<pair<int,int>> sprinklers;\n        \n        //iterating over the gallery array.\n        for(int i=0; i<n; i++)\n        {\n            //checking if the gallery at current index is not -1.\n            if(gallery[i] > -1)\n            {\n                //adding the range of each sprinkler to the vector.\n                sprinklers.push_back( pair<int,int> ( i-gallery[i], i+gallery[i] ) );\n            }\n        }\n        \n        //sorting the sprinklers based on their starting range.\n        sort(sprinklers.begin(), sprinklers.end());\n        \n        //initializing target, sprinklers_on, and i.\n        int target=0, sprinklers_on=0, i=0;\n        \n        //looping until target is less than n.\n        while(target<n)\n        {\n            //checking if i has reached the end of the sprinklers vector\n            //or the starting range of next sprinkler is greater than the target.\n            if(i==sprinklers.size() || sprinklers[i].first>target)\n            {\n                //returning -1 if above condition is true.\n                return -1;\n            }\n            \n            //initializing max_range with the ending range of current sprinkler.\n            int max_range = sprinklers[i].second;\n            \n            //looping until i+1 is within the range of sprinklers vector\n            //and the starting range of next sprinkler is less than or equal to target.\n            while( i+1<sprinklers.size() && sprinklers[i+1].first<=target )\n            {\n                //updating i and max_range if above condition is true.\n                i++;\n                max_range = max( max_range,  sprinklers[i].second );\n            }\n            \n            //checking if the maximum range is less than target\n            //which means no sprinkle can cover the current target point.\n            if(max_range<target)\n            {\n                //returning -1 if above condition is true.\n                return -1;\n            }\n            \n            //incrementing the count of sprinklers and updating target and i.\n            sprinklers_on++;\n            target = max_range +1;\n            i++;\n        }\n        \n        //returning the minimum number of sprinklers required.\n        return sprinklers_on;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Pair{\n   int x;\n   int y;\n   public Pair(int x,int y)\n   {\n       this.x = x;\n       this.y = y;\n   }\n}\n\nclass Solution\n{\n    // Function to calculate the minimum number of sprinklers required\n    int min_sprinklers(int gallery[], int n)\n    {\n        // Create a list to store the sprinklers\n        List <Pair> sprinklers = new ArrayList<>();\n        // Loop through the gallery array\n        for(int i=0; i<n; i++)\n            // Check if the gallery is not blocked\n            if(gallery[i] > -1)\n                // Add the sprinkler coordinate range to the list\n                sprinklers.add( new Pair( i-gallery[i], i+gallery[i] ) );\n        \n        // Sort the sprinklers list based on the starting coordinate\n        Collections.sort(sprinklers, new Comparator<Pair>(){\n            @Override\n            public int compare(Pair p1,Pair p2)\n            {\n                return p1.x - p2.x;\n            }\n            \n        });\n        \n        int target=0, sprinklers_on=0, i=0;\n        // Iterate until target reaches the end of the gallery\n        while(target<n)\n        {\n            // Check if there are no more sprinklers or the next sprinkler is beyond the target coordinate\n            if(i==sprinklers.size() || sprinklers.get(i).x>target)\n                // Return -1 indicating no solution\n                return -1;\n            \n            int max_range = sprinklers.get(i).y;\n            // Check if there are more sprinklers within the range of the target coordinate\n            while( i+1<sprinklers.size() && sprinklers.get(i+1).x<=target )\n            {\n                i++;\n                // Update the maximum range\n                max_range = Math.max( max_range,  sprinklers.get(i).y );\n            }\n            // Check if the maximum range is less than the target coordinate\n            if(max_range<target)\n                // Return -1 indicating no solution\n                return -1;\n            \n            // Increment the number of sprinklers turned on\n            sprinklers_on++;\n            // Update the target coordinate to the maximum range plus one\n            target = max_range +1;\n            // Move to the next sprinkler\n            i++;\n        }\n        \n        // Return the total number of sprinklers turned on\n        return sprinklers_on;\n    }\n\n\n\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def min_sprinklers(self, gallery, n):\r\n        # code here\r\n        sprinklers = []                     # initialize empty list for sprinklers\r\n        for i in range(n):\r\n            if gallery[i]>-1:\r\n                sprinklers.append( [i-gallery[i] , i+gallery[i]] );    # add intervals for non-negative gallery values to sprinklers list\r\n        sprinklers.sort()                   # sort the sprinklers list\r\n        target=0                            # initialize target variable\r\n        sprinklers_on=0                     # initialize sprinklers_on variable\r\n        i=0                                 # initialize i variable\r\n        while(target<n):                    # while target is less than n\r\n            if i==len(sprinklers) or sprinklers[i][0]>target:\r\n                return -1                   # if i reached end of sprinklers list or current sprinkler is beyond target, return -1\r\n            max_range = sprinklers[i][1]    # set max_range to the maximum range of current sprinkler\r\n            while( i+1<len(sprinklers) and sprinklers[i+1][0]<=target ):\r\n                i+=1                        # increment i and update max_range if the next sprinkler can cover the target\r\n                max_range = max(max_range,sprinklers[i][1])\r\n            if max_range<target:\r\n                return -1                   # if max_range is less than target, return -1\r\n            sprinklers_on+=1                # increment sprinklers_on as a sprinkler can cover the target\r\n            target=max_range+1              # update target to the next position after the coverage of the last sprinkler\r\n            i+=1                            # increment i to move to the next sprinkler\r\n        return sprinklers_on                 # return the count of sprinklers needed",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int min_sprinklers(int[] gallery, int n)\n    {\n        //creating a list of tuples to store the range of each sprinkler.\n        List<(int, int)> sprinklers = new List<(int, int)>();\n        \n        //iterating over the gallery array.\n        for(int j=0; j<n; j++)\n        {\n            //checking if the gallery at current index is not -1.\n            if(gallery[j] > -1)\n            {\n                //adding the range of each sprinkler to the list.\n                sprinklers.Add( ( j-gallery[j], j+gallery[j] ) );\n            }\n        }\n        \n        //sorting the sprinklers based on their starting range.\n        sprinklers.Sort();\n        \n        //initializing target, sprinklers_on, and i.\n        int target=0, sprinklers_on=0, i=0;\n        \n        //looping until target is less than n.\n        while(target<n)\n        {\n            //checking if i has reached the end of the sprinklers list\n            //or the starting range of next sprinkler is greater than the target.\n            if(i==sprinklers.Count || sprinklers[i].Item1>target)\n            {\n                //returning -1 if above condition is true.\n                return -1;\n            }\n            \n            //initializing max_range with the ending range of current sprinkler.\n            int max_range = sprinklers[i].Item2;\n            \n            //looping until i+1 is within the range of sprinklers list\n            //and the starting range of next sprinkler is less than or equal to target.\n            while( i+1<sprinklers.Count && sprinklers[i+1].Item1<=target )\n            {\n                //updating i and max_range if above condition is true.\n                i++;\n                max_range = Math.Max( max_range,  sprinklers[i].Item2 );\n            }\n            \n            //checking if the maximum range is less than target\n            //which means no sprinkle can cover the current target point.\n            if(max_range<target)\n            {\n                //returning -1 if above condition is true.\n                return -1;\n            }\n            \n            //incrementing the count of sprinklers and updating target and i.\n            sprinklers_on++;\n            target = max_range +1;\n            i++;\n        }\n        \n        //returning the minimum number of sprinklers required.\n        return sprinklers_on;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n    min_sprinklers(gallery, n) {\n        let sprinklers = [];\n        for(let i = 0; i < n; i++) {\n            if(gallery[i] > -1) {\n                sprinklers.push({start: i - gallery[i], end: i + gallery[i] });\n            }\n        }\n\n        sprinklers.sort((a, b) => a.start - b.start);\n\n        let target = 0, sprinklers_on = 0, i = 0;\n        while(target < n) {\n            if(i == sprinklers.length || sprinklers[i].start > target) {\n                return -1;\n            }\n\n            let max_range = sprinklers[i].end;\n            while(i + 1 < sprinklers.length && sprinklers[i + 1].start <= target) {\n                i++;\n                max_range = Math.max(max_range, sprinklers[i].end);\n            }\n\n            if(max_range < target) {\n                return -1;\n            }\n\n            sprinklers_on++;\n            target = max_range + 1;\n            i++;\n        }\n\n        return sprinklers_on;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}