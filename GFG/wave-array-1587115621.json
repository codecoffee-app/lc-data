{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701198,
            "title": "Wave Array",
            "titleSlug": "wave-array-1587115621",
            "content": "<p><span style=\"font-size: 12pt;\">Given a <strong>sorted</strong> array <strong>arr[]</strong> of distinct integers. Sort the array into a wave-like array(In Place). In other words, arrange the elements into a sequence such that arr[1] &gt;= arr[2] &lt;= arr[3] &gt;= arr[4] &lt;= arr[5].....<br />If there are multiple solutions, find the lexicographically smallest one.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Note: </strong>The given array is sorted in ascending order, and you don't need to return anything to change the original array.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5]\n<strong>Output: [</strong>2, 1, 4, 3, 5]<strong>\nExplanation: </strong>Array elements after sorting it in the waveform are 2, 1, 4, 3, 5.</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [2, 4, 7, 8, 9, 10]\n<strong>Output: [</strong>4, 2, 8, 7, 10, 9]<strong>\nExplanation: </strong>Array elements after sorting it in the waveform are 4, 2, 8, 7, 10, 9.<br /><br />Input: arr[] = [1]<br />Output: [1]</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &le; arr.size &le; 10<sup>6</sup><br />0 &le; arr[i] &le;10<sup>7</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr[]` of distinct integers, rearrange the array in-place to form a wave-like array. A wave-like array follows the pattern: `arr[1] >= arr[2] <= arr[3] >= arr[4] <= arr[5].....` If multiple valid arrangements exist, find the lexicographically smallest one. The array is initially sorted in ascending order.",
                "constraints": [
                    "1 <= arr.size <= 10^6",
                    "0 <= arr[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5]",
                        "output": "[2, 1, 4, 3, 5]",
                        "explanation": "The array is rearranged such that it follows the wave pattern: 2 >= 1 <= 4 >= 3 <= 5."
                    },
                    {
                        "input": "[2, 4, 7, 8, 9, 10]",
                        "output": "[4, 2, 8, 7, 10, 9]",
                        "explanation": "The array is rearranged such that it follows the wave pattern: 4 >= 2 <= 8 >= 7 <= 10 >= 9."
                    },
                    {
                        "input": "[1]",
                        "output": "[1]",
                        "explanation": "A single-element array is already in wave form."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think in swapping adjacent elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "flipkart",
            "amazon",
            "microsoft",
            "factset",
            "goldman-sachs",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void convertToWave(vector<int>& arr) {\n        int n = arr.size();\n\n        for (int i = 0; i + 1 < n; i += 2)\n            swap(arr[i], arr[i + 1]);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static void convertToWave(int[] arr) {\n        int n = arr.length;\n        // Temporary variable to store element during swapping\n        int temp = 0;\n\n        // Loop through array with step of 2, swapping adjacent elements\n        for (int i = 0; i < n - 1; i = i + 2) {\n            temp = arr[i];\n            arr[i] = arr[i + 1];\n            arr[i + 1] = temp;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def convertToWave(self, arr: List[int]) -> None:\n\n        for i in range(0, len(arr) - 1, 2):\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n\n    public List<int> convertToWave(int[] arr) {\n        int n = arr.Length;\n\n        List<int> result = arr.ToList();\n\n        for (int i = 0; i + 1 < n; i += 2) {\n\n            int temp = result[i];\n            result[i] = result[i + 1];\n            result[i + 1] = temp;\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    // arr: input array\n    // Function to sort the array into a wave-like array.\n    convertToWave(arr) {\n        for (let i = 0; i + 1 < arr.length; i += 2)\n            [arr[i], arr[i + 1]] = [ arr[i + 1], arr[i] ];\n        return arr;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}