{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703622,
            "title": "Ways to split string such that each partition starts with distinct letter",
            "titleSlug": "ways-to-split-string-such-that-each-partition-starts-with-distinct-letter5723",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>S</strong>. Let&nbsp;<strong>k</strong>&nbsp;be the maximum number of partitions possible of the given string with each partition starts with a distinct letter. The task is to find the number of ways string <strong>S </strong>can be split into&nbsp;<strong>k</strong>&nbsp;partition (non-empty) such that each partition starts with a distinct letter. Print number modulo&nbsp;1000000007.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note : </strong>S consists of lowercase letters only.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>S =</strong> &quot;abb&quot;\r\n<strong>Output:</strong>\r\n2\r\n<strong>Explanation:</strong>\r\n &quot;abb&quot; can be maximum split into 2 partitions\r\n{a, bb} with distinct starting letter, for k = 2.\r\nAnd, the number of ways to split &quot;abb&quot;\r\ninto 2 partitions with distinct starting letter\r\nare 2 {a, bb} and {ab, b}.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>S =</strong> &quot;abbcc&quot;\r\n<strong>Output:</strong>\r\n4\r\n<strong>Explanation:</strong>\r\n&quot;abbcc&quot; can be maximum split into 3 partitions\r\nwith distinct letter, so k=3. Thus the number\r\nof ways to split &quot;abbcc&quot; into 3 partitions with\r\ndistinct letter is 4 i.e. {ab, b, cc},\r\n{ab, bc, c},{a, bb, cc} and {a, bbc, c}. </span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>waysToSplit()</strong> which takes a String S and returns the answer.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|S|)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(|1|)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= |S| &lt;=10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S, determine the maximum number of partitions possible (k) such that each partition begins with a distinct letter. Calculate the number of ways to split S into k non-empty partitions, where each partition starts with a unique letter. Return this number modulo 1000000007.",
                "constraints": [
                    "1 <= |S| <= 10^5",
                    "S consists of lowercase letters only."
                ],
                "testcases": [
                    {
                        "input": "abb",
                        "output": "2",
                        "explanation": "The string \"abb\" can be split into a maximum of 2 partitions with distinct starting letters (k=2). The possible splits are {a, bb} and {ab, b}, resulting in 2 ways."
                    },
                    {
                        "input": "abbcc",
                        "output": "4",
                        "explanation": "The string \"abbcc\" can be split into a maximum of 3 partitions with distinct starting letters (k=3). The possible splits are {ab, b, cc}, {ab, bc, c}, {a, bb, cc}, and {a, bbc, c}, resulting in 4 ways."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Observe that k will be equal to number of distinct characters in the string because only that number of partitions can be maximum such that each partition have distinct starting element. </span></p>",
            "<p><span style=\"font-size:18px\">Let count<sub>i</sub> be the number of occurrences of character i in s. So our answer will be product of count<sub>i</sub> of all i&rsquo;s such that i occurs in the string and i is not equal to first character of the string. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    int waysToSplit(string S) {\r\n        \r\n        int count[26] = { 0 };\r\n        \r\n         // Finding the frequency of each \r\n        // character. \r\n        \r\n    \tfor(int i=0 ; i<S.length() ; i++)\r\n    \t\tcount[S[i]-'a']++;\r\n    \t\t\r\n    \t// making frequency of first character \r\n        // of string equal to 1. \r\n    \tcount[S[0] - 'a'] = 1;\r\n    \r\n    \tlong long  ans = 1;\r\n    \t\r\n    \t// Finding the product of frequency  \r\n        // of occurrence of each character. \r\n    \tfor (int i = 0; i < 26; ++i)\r\n        {\r\n            if (count[i] != 0)\r\n                ans *= count[i];\r\n            ans=ans%1000000007;\r\n        }\r\n    \t\t\t\r\n        ans=ans%1000000007;\r\n        \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static Long waysToSplit(String S){\r\n        int count[] = new int[26];\r\n        Arrays.fill(count,0);\r\n        \r\n         // Finding the frequency of each \r\n        // character. \r\n        \r\n    \tfor(int i=0 ; i<S.length() ; i++)\r\n    \t\tcount[S.charAt(i)-'a']++;\r\n    \t\t\r\n    \t// making frequency of first character \r\n        // of string equal to 1. \r\n    \tcount[S.charAt(0) - 'a'] = 1;\r\n    \r\n    \tLong ans = new Long(1);\r\n    \t\r\n    \t// Finding the product of frequency  \r\n        // of occurrence of each character. \r\n    \tfor (int i = 0; i < 26; ++i)\r\n        {\r\n            if (count[i] != 0)\r\n                ans *= count[i];\r\n            ans=ans%1000000007;\r\n        }\r\n    \t\t\t\r\n        ans=ans%1000000007;\r\n        \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def waysToSplit(self, S):\r\n        \r\n        # Finding the frequency of each \r\n        # character. \r\n        \r\n        count=[0]*26 \r\n        \r\n        for i in range(len(S)):\r\n            count[ord(S[i])-97]+=1 \r\n            \r\n        # making frequency of first character \r\n        # of string equal to 1. \r\n        count[ord(S[0])-97]=1 \r\n        \r\n        ans=1 \r\n        \r\n        # Finding the product of frequency  \r\n        # of occurrence of each character. \r\n        for i in range(26):\r\n            if count[i]:\r\n                ans*=count[i]\r\n            ans%=1000000007\r\n            \r\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the number of ways to split the string.\n    waysToSplit(S) {\n        //Finding the frequency of each character.\n\n        let count = new Array(26).fill(0);\n\n        for (let i = 0; i < S.length; i++) {\n            count[S.charCodeAt(i) - 97] += 1;\n        }\n\n        //Making frequency of first character of string equal to 1.\n        count[S.charCodeAt(0) - 97] = 1;\n\n        let ans = 1;\n\n        //Finding the product of frequency of occurrence of each character.\n        for (let i = 0; i < 26; i++) {\n            if (count[i]) {\n                ans *= count[i];\n            }\n            ans %= 1000000007;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}