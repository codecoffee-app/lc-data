{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703823,
            "title": "Ways to sum to N",
            "titleSlug": "ways-to-sum-to-n5759",
            "content": "<p><span style=\"font-size:18px\">Given a set of m distinct positive integers and a value &lsquo;N&rsquo;. Count the total number of ways we can form &lsquo;N&rsquo; by&nbsp;&nbsp;adding&nbsp;the array elements. Repetitions and different arrangements are allowed.<br />\n<strong>Note: </strong>Answer can be quite large&nbsp;output the answer modulo 10<sup>9</sup>+7.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nm = 3 , N = 7\nArr[] = {1,5,6}\n<strong>Output:</strong> 6\n<strong>Explanation</strong>: The different ways are:\n1+1+1+1+1+1+1\n1+1+5\n1+5+1\n5+1+1\n1+6\n6+1</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \nm = 3 , N = 3\nArr[] = {1,2,3}\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: The different ways are:\n1+1+1\n1+2\n2+1\n3  </span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>countWays()&nbsp;</strong>which accepts array arr[],<strong>&nbsp;</strong>its size m and integer N and returns the total number of ways we can form &lsquo;N&rsquo; by adding&nbsp;array elements.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N*m)<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N , m &lt;= 10<sup>3</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a set of 'm' distinct positive integers and a target value 'N', determine the number of ways to form 'N' by summing elements from the given set. Repetitions and different arrangements are considered distinct combinations. The answer can be large, so return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "1 <= m <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "m = 3, N = 7, Arr[] = {1, 5, 6}",
                        "output": "6",
                        "explanation": "The possible combinations are: 1+1+1+1+1+1+1, 1+1+5, 1+5+1, 5+1+1, 1+6, 6+1"
                    },
                    {
                        "input": "m = 3, N = 3, Arr[] = {1, 2, 3}",
                        "output": "4",
                        "explanation": "The possible combinations are: 1+1+1, 1+2, 2+1, 3"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think along the lines of the coin change problem.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "#define mod 1000000007\nclass Solution\n{\n  public:\n    // function to count the total  \n    // number of ways to sum up to 'N' \n    int countWays(int arr[], int m, int N) \n    { \n        int count[N + 1]; \n        memset(count, 0, sizeof(count)); \n          \n        // base case \n        count[0] = 1; \n          \n        // count ways for all values up  \n        // to 'N' and store the result \n        for (int i = 1; i <= N; i++) \n            for (int j = 0; j < m; j++) \n      \n                // if i >= arr[j] then \n                // accumulate count for value 'i' as \n                // ways to form value 'i-arr[j]' \n                if (i >= arr[j]) \n                    count[i] = (count[i]%mod + count[i - arr[j]]%mod )%mod; \n          \n        // required number of ways  \n        return count[N];  \n          \n    } \n    \n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    public int countWays(int arr[], int m, int N) \n    { \n        int mod = 1000000007;\n        int count[] = new int[N + 1]; \n        for(int i = 0 ;i<N + 1;i++)\n        \tcount[i] = 0;\n          \n        // base case \n        count[0] = 1; \n          \n        // count ways for all values up  \n        // to 'N' and store the result \n        for (int i = 1; i <= N; i++) \n            for (int j = 0; j < m; j++) \n      \n                // if i >= arr[j] then \n                // accumulate count for value 'i' as \n                // ways to form value 'i-arr[j]' \n                if (i >= arr[j]) \n                    count[i] = (count[i]%mod + count[i - arr[j]]%mod )%mod; \n          \n        // required number of ways  \n        return count[N];  \n          \n    } \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def countWays(self, arr, m, n):\n        dp=[-1]*(1003)\n        # initialize the dp array with -1\n        \n        # call the recursive function and return its result\n        return self.rec(arr,m,n,dp)\n    \n    # recursive function to count the number of ways\n    def rec(self,a,n,m,dp):\n        mod=10**9+7\n        # set the modulo value\n        \n        if(m==0):\n            return 1;\n        # base case: if target sum is 0, return 1 as 1 way to reach that sum\n        \n        if(dp[m]!=-1):\n            return dp[m];\n        # if the result for the given target sum is already calculated, return it\n        \n        res=0;\n        # variable to store the count of ways\n        \n        for i in range(n):\n            # iterate through the array\n            \n            if(m>=a[i]):\n                res+=self.rec(a,n,m-a[i],dp)%mod;\n                res%=mod;\n                # recursive call to count the ways with updated target sum\n                # update the result by adding the count of ways\n                \n        dp[m]=res;\n        # store the result in the dp array for future reference\n        \n        return dp[m]",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n\n/**\n * @param {number[]} arr\n * @param {number} m\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution{\n    countWays(arr,m,n){\n        const mod = 1000000007;\n        let count = new Array(n + 1).fill(0);\n\n        // base case\n        count[0] = 1;\n\n        // count ways for all values up to 'N' and store the result\n        for (let i = 1; i <= n; i++) {\n            for (let j = 0; j < m; j++) {\n\n                // if i >= arr[j] then accumulate count for value 'i' as ways to form value 'i-arr[j]'\n                if (i >= arr[j]) {\n                    count[i] = (count[i] + count[i - arr[j]]) % mod;\n                }\n            }\n        }\n\n        // required number of ways\n        return count[n];\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    //Function to count the total number of ways to sum up to 'N'.\n    public int countWays(int[] arr, int m, int N)\n    {\n        int mod = 1000000007; // define the value of 'mod'\n        int[] count = new int[N + 1];\n        Array.Fill(count, 0);\n          \n        // base case \n        count[0] = 1;\n          \n        // count ways for all values up  \n        // to 'N' and store the result \n        for (int i = 1; i <= N; i++)\n        {\n            for (int j = 0; j < m; j++)\n            {\n                // if i >= arr[j] then \n                // accumulate count for value 'i' as \n                // ways to form value 'i-arr[j]'\n                if (i >= arr[j])\n                    count[i] = (count[i] + count[i - arr[j]]) % mod;\n            }\n        }\n          \n        // required number of ways  \n        return count[N];\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}