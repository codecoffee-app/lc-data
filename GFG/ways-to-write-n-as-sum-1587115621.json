{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701416,
            "title": "Ways to write n as sum",
            "titleSlug": "ways-to-write-n-as-sum-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">Given a positive integer n, the task is to find the number of different ways in which <strong>n </strong>can be written as a sum of two or more positive integers. Return the answer with the modulo 10<sup>9</sup>+7.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5\n<strong>Output: </strong>6<strong>\nExplanation: </strong>1+1+1+1+1, 1+1+1+2, 1+1+3, 1+4, 2+1+2 and 2+3. So, a total of 6 ways.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3\n</span><span style=\"font-size: 18px;\"><strong>Output: </strong>2<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1+1+1 and 1+2.  So, a total of 2 ways.</span>\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n^2)<br /><strong>Expected Auxiliary Space: </strong>O(n)<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer 'n', determine the number of distinct ways 'n' can be expressed as the sum of two or more positive integers. Return the result modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= n <= 10<sup>3</sup>"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "6",
                        "explanation": "The possible ways to express 5 as the sum of two or more positive integers are: 1+1+1+1+1, 1+1+1+2, 1+1+3, 1+4, 1+2+2, 2+3. Therefore, there are a total of 6 ways."
                    },
                    {
                        "input": "3",
                        "output": "2",
                        "explanation": "The possible ways to express 3 as the sum of two or more positive integers are: 1+1+1, 1+2. Therefore, there are a total of 2 ways."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">Use dynamic programming to count the ways to sum integers up to </span><span class=\"math math-inline\" style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\"><span class=\"katex\" style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 1.21em; line-height: 1.2; font-family: KaTeX_Main, 'Times New Roman', serif; text-rendering: auto;\"><span class=\"katex-mathml\" style=\"border: 0px; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; clip: rect(1px, 1px, 1px, 1px); height: 1px; overflow: hidden; padding: 0px; position: absolute; width: 1px;\">????</span><span class=\"katex-html\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\" aria-hidden=\"true\"><span class=\"base\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; position: relative; white-space: nowrap; width: min-content; display: inline-block;\"><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">, update a table iteratively, and apply a modulo operation to handle large numbers. Initialize with a base case for zero and update for each integer up to </span><span class=\"math math-inline\" style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\"><span class=\"katex\" style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; font-size: 1.21em; line-height: 1.2; font-family: KaTeX_Main, 'Times New Roman', serif; text-rendering: auto;\"><span class=\"katex-mathml\" style=\"border: 0px; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; clip: rect(1px, 1px, 1px, 1px); height: 1px; overflow: hidden; padding: 0px; position: absolute; width: 1px;\">????</span><span class=\"katex-html\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\" aria-hidden=\"true\"><span class=\"base\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; position: relative; white-space: nowrap; width: min-content; display: inline-block;\"><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic;\">n.</span></span></span></span></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\n  public:\n    // Function to count the number of different ways in which n can be\n    // written as a sum of two or more positive integers.\n    int countWays(int n) {\n        // table[i] will be storing the number of solutions for value i.\n        // We need n+1 rows as the table is consturcted in bottom up\n        // manner using the base case (n = 0).\n        int table[n + 1];\n\n        // initializing all table values as 0.\n        for (int i = 0; i <= n; i++)\n            table[i] = 0;\n\n        int mod = (int)(1e9 + 7);\n\n        // base case.\n        table[0] = 1;\n\n        // picking all integer one by one and updating the table[] values\n        // from index j to the index less than or equal to n.\n        for (int i = 1; i < n; i++)\n            for (int j = i; j <= n; j++)\n                table[j] = (table[j] % mod + table[j - i] % mod) % mod;\n\n        // returning the result.\n        return table[n] % mod;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "/*package whatever //do not write package name here */\n\nclass Solution {\n    // Function to count the number of different ways in which n can be\n    // written as a sum of two or more positive integers.\n    int countWays(int n) {\n        // table[i] will be storing the number of solutions for value i.\n        // We need n+1 rows as the table is consturcted in bottom up\n        // manner using the base case (n = 0).\n        int table[] = new int[n + 1];\n\n        int mod = (int)(1e9 + 7);\n\n        // initializing all table values as 0.\n        for (int i = 0; i <= n; i++) table[i] = 0;\n\n        // base case\n        table[0] = 1;\n\n        // picking all integer one by one and updating the table[] values\n        // from index j to the index less than or equal to n.\n        for (int i = 1; i < n; i++)\n            for (int j = i; j <= n; j++)\n                table[j] = (table[j] % mod + table[j - i] % mod) % mod;\n\n        // returning the result.\n        return table[n] % mod;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to count the number of different ways in which n can be \n    #written as a sum of two or more positive integers.\n    def countWays(self,n):\n      \n        mod = 1000000007\n        \n        #dp[i] will be storing the number of solutions for value i.\n        #We need n+1 rows as the table is consturcted in bottom up\n        #manner using the base case (n = 0).\n        ##initializing all dp values as 0.\n        dp = [0 for i in range(n+1)]\n        \n        #base case\n        dp[0]=1 \n        \n        #picking all integer one by one and updating the dp[] values\n        #from index j to the index less than or equal to n.\n        for i in range(1,n):\n            for j in range(i,n+1):\n                dp[j] = (dp[j]%mod + dp[j-i]%mod)%mod\n    \n        #returning the result.\n        return dp[n] ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n\n\n/**\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution \n{\n    //Function to count the number of different ways in which n can be \n    //written as a sum of two or more positive integers.\n    countWays(n)\n    {\n        //table[i] will be storing the number of solutions for value i.\n        //We need n+1 rows as the table is consturcted in bottom up\n        //manner using the base case (n = 0).\n        let table = new Array(n+1);\n     \n        //initializing all table values as 0.\n        table.fill(0);\n        \n        let mod = (1e9+7);\n     \n        //base case \n        table[0] = 1;\n     \n        //picking all integer one by one and updating the table[] values\n        //from index j to the index less than or equal to n.\n        for (let i=1; i<n; i++)\n            for (let j=i; j<=n; j++)\n                table[j] = (table[j]%mod + table[j-i]%mod)%mod;\n     \n        //returning the result.\n        return table[n]%mod;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}