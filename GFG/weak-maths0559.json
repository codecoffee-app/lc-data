{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704725,
            "title": "Smallest number with maximum and minimum divisor in an array",
            "titleSlug": "weak-maths0559",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr[]</strong> of length <strong>N</strong>, find the lowest number which has both the maximum and minimum of the array as it&#39;s divisor.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>4</span>\r\n<span style=\"font-size:18px\"><strong>arr[] = </strong>{3, 4, 8, 6}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">24</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">Minimum of the array is 3, while the\r\nmaximum is 8. The lowest number which has\r\nboth 3 and 8 as divisors is 24.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>2</span>\r\n<span style=\"font-size:18px\"><strong>arr[] = </strong>{1, 8}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">8</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">Minimum of the array is 1, while the\r\nmaximum is 8. The lowest number which has\r\nboth 1 and 8 as divisors is 8.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>getNum()</strong> which takes an Integer N and an array arr[] of size N as input and returns the integer.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup><br />\r\n1 &lt;= arr[i] &lt;= 10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of length `N`, find the smallest positive integer that is divisible by both the maximum and minimum elements of the array.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "N = 4\narr[] = {3, 4, 8, 6}",
                        "output": "24",
                        "explanation": "The minimum element in the array is 3, and the maximum element is 8. The smallest number divisible by both 3 and 8 is their least common multiple (LCM), which is 24."
                    },
                    {
                        "input": "N = 2\narr[] = {1, 8}",
                        "output": "8",
                        "explanation": "The minimum element in the array is 1, and the maximum element is 8.  The smallest number divisible by both 1 and 8 is 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The smallest number which has both divisors a and b is the LCM of a and b.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    \r\n    // Function to find gcd of 2 numbers\r\n    int gcd(int a, int b)\r\n    {\r\n        if (a == b)\r\n            return a;\r\n        if (a > b)\r\n            return gcd(a-b, b);\r\n        return gcd(a, b-a);\r\n    }\r\n    \r\n    // Function to find lcm of 2 numbers\r\n    int lcm(int a, int b)\r\n    {\r\n        return (a*b)/gcd(a, b);\r\n    }\r\n    \r\n    int getNum(int arr[] , int N) {\r\n        \r\n        int mx = -1;    // Initilaizing max as -1\r\n        int mn = 1e8;   // Initializing min as 1e8\r\n        \r\n        for(int i=0 ; i<N ; i++)\r\n        {\r\n            mx = max(mx,arr[i]);\r\n            mn = min(mn,arr[i]);\r\n        }\r\n        \r\n        int ans = lcm(mx,mn);\r\n        \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public int getNum(int[] arr, int N)\n    {\n        int mx = -1;    // Initializing max as -1\n        int mn = 100000000;   // Initializing min as 1e8\n        \n        for(int i=0 ; i<N ; i++)\n        {\n            mx = Math.Max(mx,arr[i]);\n            mn = Math.Min(mn,arr[i]);\n        }\n        \n        int ans = lcm(mx,mn);\n        \n        return ans;\n    }\n    \n    // Function to find gcd of 2 numbers\n    public int gcd(int a, int b)\n    {\n        if (a == b)\n            return a;\n        if (a > b)\n            return gcd(a-b, b);\n        return gcd(a, b-a);\n    }\n    \n    // Function to find lcm of 2 numbers\n    public int lcm(int a, int b)\n    {\n        return (a*b)/gcd(a, b);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}