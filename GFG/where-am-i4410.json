{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705829,
            "title": "Where Am I ?",
            "titleSlug": "where-am-i4410",
            "content": "<p><span style=\"font-size:18px\">You are given a set of movements of a person, find out his total displacement from origin and the direction in which he will be facing if initially he was facing North and standing at origin. The movements can be any one of the following four:</span></p>\n\n<ul>\n\t<li><span style=\"font-size:18px\">Up: Representing forward movement, denoted by &#39;U&#39;, along with the distance in that direction.</span></li>\n\t<li><span style=\"font-size:18px\">Down:&nbsp;Representing backward movement,&nbsp;denoted by &#39;D&#39;, along with the distance in that direction. The direction of his face will be in opposite of which he was facing to earlier.</span></li>\n\t<li><span style=\"font-size:18px\">Left: Representing Left turn and then a forward movement, denoted by &#39;L&#39;, along with the distance in that direction. The direction of his face will turn to the left side to which he was facing to earlier, For e.g, if he was facing North, after this movement he will face West.</span></li>\n\t<li><span style=\"font-size:18px\">Right: Representing a Right turn and then a forward movement, denoted by &#39;R&#39;, along with the distance in that direction. The direction of his face will turn to the right of which he was facing to earlier, For e.g, if he was facing North after this movement he will face East.</span></li>\n</ul>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: m = 5\nArr = {{&#39;U&#39;,1},{&#39;R&#39;,1},{&#39;R&#39;,1},{&#39;R&#39;,1},{&#39;R&#39;,0}}</span><span style=\"font-size:18px\">\n<strong>Output: </strong>{0,&#39;N&#39;}\n<strong>Explanation</strong>: After completing 5 movement as\ngiven the final displacement of the person\nis 0 and he is facing North.  </span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>m = 4\nArr = {{&#39;U&#39;,1},{&#39;U&#39;,1},{&#39;U&#39;,2},{&#39;D&#39;,1}}\n<strong>Output:&nbsp;</strong>{3,&#39;S&#39;}\n<strong>Explanation</strong>: After completing 4 movement as\ngiven the final displacement of the person\nis 3 and he is facing South. \n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>whereAmI()&nbsp;</strong>which takes l&nbsp;and r&nbsp;as input parameter and returns&nbsp;the final displacement of the&nbsp;person from origin and the final direction(&#39;N&#39; for North, &#39;S&#39; for South, &#39;E&#39; for East,&nbsp;&#39;W&#39; for West) to which he is facing. If the displacement is a fraction, output its floor( after truncating the fractional part) value.</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(m)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &lt;= m&nbsp;&lt;=100<br />\n1 &lt;= d&nbsp; &lt;=10</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A person starts at the origin facing North. Given a series of movements, determine the person's final displacement from the origin and the direction they are facing. The movements are described as follows:\n\n*   **Up (U, distance):** Move forward by the given distance in the current direction.\n*   **Down (D, distance):** Move backward by the given distance. The direction faced is reversed (North becomes South, East becomes West, etc.).\n*   **Left (L, distance):** Turn left (90 degrees counter-clockwise) and then move forward by the given distance.\n*   **Right (R, distance):** Turn right (90 degrees clockwise) and then move forward by the given distance.\n\nCalculate the total displacement (considering only the magnitude of the displacement, i.e., the straight-line distance from the origin) and final facing direction after all movements are completed. The displacement should be the floor of the actual displacement value.",
                "constraints": [
                    "1 <= m <= 100 (where m is the number of movements)",
                    "1 <= d <= 10 (where d is the distance of each movement)"
                ],
                "testcases": [
                    {
                        "input": "m = 5\nArr = [['U',1],['R',1],['R',1],['R',1],['R',0]]",
                        "output": "{0, 'N'}",
                        "explanation": "The person starts facing North and moves 1 unit North. Then turns Right (East) and moves 1 unit East, turns Right (South) moves 1 unit South, turns Right (West) and moves 1 unit West. The final turn is Right (North) and moves 0 units. The final displacement is 0, facing North."
                    },
                    {
                        "input": "m = 4\nArr = [['U',1],['U',1],['U',2],['D',1]]",
                        "output": "{3, 'S'}",
                        "explanation": "The person starts facing North and moves 1 unit North, then 1 unit North, then 2 units North, then moves 1 unit back which is now South.The final displacement is 3 units North and final facing direction is South."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Pure implementation according to the given movement .</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to find the final position and direction\n    pair<int,char> whereAmI(vector<pair<char,int>>&Arr, int m){\n        int pos=0,x=0,y=0;\n        \n        // Iterating through the list of moves\n        for(int i=0;i<m;i++){\n            switch(Arr[i].first){\n                // If the move is 'R', rotate the position to the right\n                case 'R':\n                    pos = (pos+1)%4;\n                    break;\n                \n                // If the move is 'D', rotate the position to the opposite direction\n                case 'D':\n                    pos = (pos+2)%4;\n                    break;\n                \n                // If the move is 'L', rotate the position to the left\n                case 'L':\n                    pos = (pos+3)%4;\n                    break;\n            }\n            \n            // Update the position based on the current direction\n            switch(pos){\n                case 0:\n                    y = y+Arr[i].second;\n                    break;\n                case 1:\n                    x = x+Arr[i].second;\n                    break;\n                case 2:\n                    y = y-Arr[i].second;\n                    break;\n                case 3:\n                    x = x-Arr[i].second;\n                    break;\n            }\n        }\n        \n        // Calculate the distance from the starting point to the final position\n        pair<int,char>ans;\n        ans.first=(int)sqrt(x*x + y*y);\n        \n        // Determine the final direction based on the final position\n        if(pos == 0)\n            ans.second='N';\n        else if(pos == 1)\n            ans.second='E';\n        else if(pos == 2)\n            ans.second='S';\n        else\n            ans.second='W';\n            \n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}