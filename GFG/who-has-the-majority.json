{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701011,
            "title": "Who has the majority?",
            "titleSlug": "who-has-the-majority",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>&nbsp;of size <strong>N</strong> and&nbsp;two elements <strong>x</strong> and <strong>y</strong>, use counter variables to find which element appears most in the array.&nbsp;If both elements have the same frequency, then&nbsp;return the smaller element.<br /><strong>Note:</strong>&nbsp; We need to return the element, not its&nbsp;count.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 11\narr[] = {1,1,2,2,3,3,4,4,4,4,5}\nx = 4, y = 5\n<strong>Output: </strong>4<strong>\nExplanation: </strong>\nfrequency of 4 is 4.\nfrequency of 5 is 1.\n</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 8\narr[] = {1,2,3,4,5,6,7,8}\nx = 1, y = 7\n<strong>Output: </strong>1<strong>\nExplanation: \n</strong>frequency of 1 is 1.\nfrequency of 7 is 1.\nSince 1 &lt; 7, return 1.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Complete the function <strong>majorityWins()</strong> that takes<strong> array, n, x, y </strong>as input parameters<strong>&nbsp;</strong>and return the element with higher&nbsp;frequency.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 10<sup>3</sup><br />0 &lt;= arr<sub>i</sub> , x , y &lt;= 10<sup>8</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of size `N` and two elements `x` and `y`, determine which element appears most frequently in the array using counter variables. If both elements have the same frequency, return the smaller element. Return the element, not its count.",
                "constraints": [
                    "1 <= n <= 10^3",
                    "0 <= arr[i], x, y <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "N = 11\narr[] = {1,1,2,2,3,3,4,4,4,4,5}\nx = 4, y = 5",
                        "output": "4",
                        "explanation": "The frequency of 4 is 4, and the frequency of 5 is 1. Since 4 appears more often than 5, the output is 4."
                    },
                    {
                        "input": "N = 8\narr[] = {1,2,3,4,5,6,7,8}\nx = 1, y = 7",
                        "output": "1",
                        "explanation": "The frequency of 1 is 1, and the frequency of 7 is 1. Since both have the same frequency, the smaller element (1) is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\r\n\r\n// Function to find element with more appearances between two elements in an\r\n// array.\r\nint majorityWins(int arr[], int n, int x, int y) {\r\n    int count_x = 0;\r\n    int count_y = 0;\r\n\r\n    // Iterating through the array elements.\r\n    // Incrementing the counter variables accordingly.\r\n    for (int i = 0; i < n; i++) {\r\n        if (arr[i] == x) count_x++;\r\n        if (arr[i] == y) count_y++;\r\n    }\r\n    \r\n    // Comparing the two counters.\r\n    if (count_x > count_y)\r\n        // Returning the number with more appearances in the array.\r\n        return x;\r\n    else if (count_y > count_x)\r\n        // Returning the number with more appearances in the array.\r\n        return y;\r\n    \r\n        // If both appear same number of times, returning the smaller number.\r\n    else\r\n        return x < y ? x : y;\r\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n  public:\r\n    // Function to find element with more appearances between two elements in an\r\n    // array.\r\n    int majorityWins(int arr[], int n, int x, int y) {\r\n        int count_x = 0;\r\n        int count_y = 0;\r\n    \r\n        // Iterating through the array elements.\r\n        // Incrementing the counter variables accordingly.\r\n        for (int i = 0; i < n; i++) {\r\n            if (arr[i] == x) count_x++;\r\n            if (arr[i] == y) count_y++;\r\n        }\r\n    \r\n        // Comparing the two counters.\r\n        if (count_x > count_y)\r\n            // Returning the number with more appearances in the array.\r\n            return x;\r\n    \r\n        else if (count_y > count_x)\r\n            // Returning the number with more appearances in the array.\r\n            return y;\r\n    \r\n        // If both appear same number of times, returning the smaller number.\r\n        else\r\n            return x < y ? x : y;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    // Function to find element with more appearances between two elements in an\r\n    // array.\r\n    public int majorityWins(int arr[], int n, int x, int y) {\r\n        int count_x = 0;\r\n        int count_y = 0;\r\n\r\n        // Iterating through the array elements.\r\n        // Incrementing the counter variables accordingly.\r\n        for (int i = 0; i < n; i++) {\r\n            if (arr[i] == x) count_x++;\r\n            if (arr[i] == y) count_y++;\r\n        }\r\n\r\n        // Comparing the two counters.\r\n        if (count_x > count_y)\r\n            // Returning the number with more appearances in the array.\r\n            return x;\r\n\r\n        else if (count_y > count_x)\r\n            // Returning the number with more appearances in the array.\r\n            return y;\r\n\r\n        // If both appear same number of times, returning the smaller number.\r\n        else if (x < y)\r\n            return x;\r\n        else\r\n            return y;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n#Function to find element with more appearances between two elements in an array.    \r\nclass Solution:\r\n    def majorityWins(self, arr, n, x, y):\r\n        count_x=0;\r\n        count_y=0;\r\n        \r\n        for i in range(0,n):\r\n            #Iterating through the array elements.\r\n            #Incrementing the counter variables accordingly.\r\n            if(arr[i]==x):\r\n                count_x+=1\r\n            if(arr[i]==y):\r\n                count_y+=1\r\n        \r\n        #Comparing the two counters.\r\n        #If both appear same number of times, returning the smaller number.\r\n        if(count_x>count_y or (count_x==count_y and x<y)):\r\n            #Returning the number with more appearances in the array.\r\n            return x\r\n        else:\r\n            #Returning the number with more appearances in the array.\r\n            return y\r\n            ",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {number[]} arr\r\n * @param {number} n\r\n * @param {number} x\r\n * @param {number} y\r\n * @returns {number}\r\n*/\r\nclass Solution {\r\n    // Function to find element with more appearances between two elements in an\r\n    // array.\r\n    majorityWins(arr, n, x, y) {\r\n        let count_x = 0;\r\n        let count_y = 0;\r\n\r\n        // Iterating through the array elements.\r\n        // Incrementing the counter variables accordingly.\r\n        for (let i = 0; i < n; i++) {\r\n            if (arr[i] == x) count_x++;\r\n            if (arr[i] == y) count_y++;\r\n        }\r\n\r\n        // Comparing the two counters.\r\n        if (count_x > count_y)\r\n            // Returning the number with more appearances in the array.\r\n            return x;\r\n\r\n        else if (count_y > count_x)\r\n            // Returning the number with more appearances in the array.\r\n            return y;\r\n\r\n        // If both appear same number of times, returning the smaller number.\r\n        else\r\n            return x < y ? x : y;\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution{\n  public int majorityWins(int[] arr, int n, int x, int y) {\n        int count_x = 0;\n        int count_y = 0;\n    \n        // Iterating through the array elements.\n        // Incrementing the counter variables accordingly.\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) count_x++;\n            if (arr[i] == y) count_y++;\n        }\n    \n        // Comparing the two counters.\n        if (count_x > count_y)\n            // Returning the number with more appearances in the array.\n            return x;\n    \n        else if (count_y > count_x)\n            // Returning the number with more appearances in the array.\n            return y;\n    \n        // If both appear same number of times, returning the smaller number.\n        else\n            return x < y ? x : y;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}