{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701218,
            "title": "Sorted Array Search",
            "titleSlug": "who-will-win-1587115621",
            "content": "<p><span >Given an array, <strong>arr[] </strong>sorted in ascending order and an integer <strong>k</strong>. Return true if k is present in the array, otherwise, false.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 4, 6], k = 6\n<strong>Output: </strong>true<strong>\nExlpanation: </strong>Since, 6 is present in the array at index 4 (0-based indexing), output is true.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 4, 5, 6], k = 3\n<strong>Output:</strong> false<strong>\nExlpanation: </strong>Since, 3 is not present in the array, output is false.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 3, 5, 6], k = 1\n<strong>Output:</strong> false</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= k &lt;= 10<sup>6</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr[]` in ascending order and an integer `k`, determine if `k` is present in the array. Return `true` if `k` is found, otherwise return `false`.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "1 <= k <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 3, 4, 6], k = 6",
                        "output": "true",
                        "explanation": "The integer 6 is present in the array."
                    },
                    {
                        "input": "arr[] = [1, 2, 4, 5, 6], k = 3",
                        "output": "false",
                        "explanation": "The integer 3 is not present in the array."
                    },
                    {
                        "input": "arr[] = [2, 3, 5, 6], k = 1",
                        "output": "false",
                        "explanation": "The integer 1 is not present in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use binary search to find an element in a sorted array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to search for an element in a sorted array\n    bool searchInSorted(vector<int>& arr, int k) {\n        int n = arr.size();\n        // Initialize left index as 0 and right index as n-1\n        int l = 0, r = n - 1;\n        // Calculate initial mid index\n        int m = l + (r - l) / 2;\n\n        // Binary search algorithm\n        while (l <= r) {\n            // Calculate mid index on each iteration\n            m = l + (r - l) / 2;\n\n            // Check if the element is present at mid\n            if (arr[m] == k)\n                return true;\n\n            // If element is greater, ignore left half\n            if (arr[m] < k)\n                l = m + 1;\n\n            // If element is smaller, ignore right half\n            else\n                r = m - 1;\n        }\n\n        // If element is not found, return false\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    static boolean searchInSorted(int arr[], int k) {\n        int n = arr.length;\n        // store left index in l with 0 and right in r with n-1\n        int l = 0, r = n - 1;\n        // calculate mid\n        int m = l + (r - l) / 2;\n\n        while (l <= r) {\n            // calculate mid on each iteration\n            m = l + (r - l) / 2;\n\n            // Check if x is present at mid\n            if (arr[m] == k) return true;\n\n            // If x greater, ignore left half\n            if (arr[m] < k) l = m + 1;\n\n            // If x is smaller, ignore right half\n            else\n                r = m - 1;\n        }\n\n        // if we reach here, then element was\n        // not present\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    #Function to search for an element in a sorted array using binary search.\n    def searchInSorted(self, arr, K):\n\n        N = len(arr)\n        left, right = 0, N - 1\n\n        #Binary search algorithm\n        while left <= right:\n            mid = left + (right - left) // 2\n\n            if arr[mid] == K:\n                return True\n            elif arr[mid] < K:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        return False  # Element not found",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} k\n * @returns {number}\n */\n\nclass Solution {\n\n    searchInSorted(arr, K) {\n        let N = arr.length;\n        // store left index in l with 0 and right in r with n-1\n        let l = 0, r = N - 1;\n        // calculate mid\n        let m = l + Math.floor((r - l) / 2);\n\n        // binary search to find the element in sorted array\n        while (l <= r) {\n            // calculate mid on each iteration\n            m = l + Math.floor((r - l) / 2);\n\n            // Check if x is present at mid\n            if (arr[m] == K) return true;\n\n            // If x greater, ignore left half\n            if (arr[m] < K) l = m + 1;\n\n            // If x is smaller, ignore right half\n            else\n                r = m - 1;\n        }\n\n        // if we reach here, then element was\n        // not present\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}