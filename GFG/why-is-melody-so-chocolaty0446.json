{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703309,
            "title": "Why is Melody so chocolaty?",
            "titleSlug": "why-is-melody-so-chocolaty0446",
            "content": "<p><span >Chunky gets happy by eating Melody. Given an array <strong>arr[]</strong>, each element represents the happiness Chunky gets by eating the melody.<br />Chunky knows why Melody is so chocolaty but will only tell you once you tell him the maximum happiness he can get by eating two adjacent melodies.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input :</strong> arr[] = [1, 2, 3, 4, 5]\n<strong>Output :</strong> 9\n<strong>Explanation: </strong>maximum happiness he can get is 9, selecting arr[3] = 4 and arr[4] = 5 which adds up to 9.\n</span></pre>\n<pre><span ><strong>Input :</strong> arr[] = [2, 1, 3, 4]\n<strong>Output :</strong> 7\n<strong>Explanation: </strong>maximum happiness he can get is 7, selecting arr[2] = 3 and arr[3] = 4 which adds up to 7.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />2 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Check the sum of <strong>arr[i]</strong> and <strong>arr[i+1]</strong> and return maximum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxHappiness(vector<int> &arr) {\n        // Initializing ans as minimum value\n        int ans = INT_MIN;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            // finding the largest adjacent sum.\n            ans = max(ans, arr[i] + arr[i + 1]);\n        }\n        // returning ans\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maxHappiness(List<Integer> arr) {\n        // Initializing ans as minimum value\n        int ans = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            // Finding the largest adjacent sum\n            ans = Math.max(ans, arr.get(i) + arr.get(i + 1));\n        }\n        // Returning ans\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def max_happiness(self, arr):\n        # Initializing ans as minimum value\n        ans = float('-inf')\n        for i in range(len(arr) - 1):\n            # Finding the largest adjacent sum\n            ans = max(ans, arr[i] + arr[i + 1])\n        # Returning ans\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    maxHappiness(arr) {\n        // Initializing ans as minimum value\n        let ans = -Infinity;\n        for (let i = 0; i < arr.length - 1; i++) {\n            // Finding the largest adjacent sum\n            ans = Math.max(ans, arr[i] + arr[i + 1]);\n        }\n        // Returning ans\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}