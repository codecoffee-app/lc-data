{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714215,
            "title": "Wifi Range",
            "titleSlug": "wifi-range--170647",
            "content": "<p><span style=\"font-size:18px\">There are&nbsp;<strong>N</strong> rooms in a straight line in Geekland State University&#39;s hostel, you are given a binary string <strong>S</strong> of length <strong>N</strong> where <strong>S[i] = &#39;1&#39;</strong> represents that there is a wifi in <strong>i<sup>th</sup></strong> room or&nbsp;<strong>S[i] = &#39;0&#39;</strong>&nbsp;represents no wifi. Each wifi has range <strong>X</strong> <em>i.e.</em> if there is a wifi in i<sup>th</sup> room then its range will go upto <strong>X</strong> more rooms on its left as well as right. You have to find whether students in&nbsp;all rooms can use wifi.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:&nbsp;</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3, X = 0\r\nS = &quot;010&quot;\r\n<strong>Output:</strong>\r\n0\r\n<strong>Explanation</strong>: \r\nSince the range(X)=0, So Wifi is only \r\naccessible in second room while 1st &amp; 3rd\r\nroom have no wifi.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:&nbsp;</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 5, X = 1\r\nS = &quot;10010&quot;\r\n<strong>Output:</strong>\r\n1\r\n<strong>Explanation</strong>: \r\nIndex 0 : Wifi is available\r\nIndex 1 : Since range of 0th Index is 1\r\n&nbsp;\\t   so, here wifi will be available.\r\nIndex 2 : Since range of 3rd Index is 1\r\n&nbsp;\\t   so, here also wifi available.\r\nIndex 3 : Wifi is available\r\nIndex 4 : here range of 3rd Index is available.\r\nSo all the rooms have wifi, so return true.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>wifiRange( )</strong>&nbsp;which takes integer&nbsp;<strong>N</strong>, string <strong>S</strong> and integer <strong>X</strong> as input parameters and returns true if&nbsp;students in&nbsp;all rooms can use wifi or false otherwise.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>:O(N)</span><br />\r\n<span style=\"font-size:18px\"><strong>Expected Space Complexity</strong>:O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N&nbsp;&le; 10<sup>6</sup><br />\r\n0 &le; X&nbsp;&le; 10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "There are N rooms in a straight line in Geekland State University's hostel. You are given a binary string S of length N where S[i] = '1' represents that there is wifi in the i<sup>th</sup> room, and S[i] = '0' represents no wifi. Each wifi has a range X, meaning if there is wifi in the i<sup>th</sup> room, its signal covers X rooms to its left and X rooms to its right. Determine whether students in all rooms can access wifi.",
                "constraints": [
                    "1 <= N <= 10<sup>6</sup>",
                    "0 <= X <= 10<sup>6</sup>"
                ],
                "testcases": [
                    {
                        "input": "N = 3, X = 0\nS = \"010\"",
                        "output": "0",
                        "explanation": "With a range of 0, wifi is only available in the room with the wifi source. Rooms 1 and 3 do not have wifi."
                    },
                    {
                        "input": "N = 5, X = 1\nS = \"10010\"",
                        "output": "1",
                        "explanation": "Room 0 has wifi. Room 1 is covered by the range of room 0. Room 2 is covered by the range of room 3. Room 3 has wifi. Room 4 is covered by the range of room 3. Thus, all rooms have wifi access."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each room find the leftmost room on its right which has wifi and the rightmost room on its left which has wifi.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    // Function to check if all positions can be covered by Wifi range\r\n    bool wifiRange(int N, string S, int X){\r\n        vector<int> A(N, -1e9), B(N, 1e9);\r\n        int cur = -1e9;\r\n        \r\n        // Finding the leftmost position of each WiFi in the string\r\n        for(int i = 0; i < N; i++){\r\n            if(S[i] == '1'){\r\n                cur = i;\r\n            }\r\n            A[i] = cur;\r\n        }\r\n        cur = 1e9;\r\n        \r\n        // Finding the rightmost position of each WiFi in the string\r\n        for(int i = N - 1; i >= 0; i--){\r\n            if(S[i] == '1'){\r\n                cur = i;\r\n            }\r\n            B[i] = cur;\r\n        }\r\n        \r\n        // Checking if all positions are within the WiFi range\r\n        for(int i = 0; i < N; i++){\r\n            if(abs(i - A[i]) > X && abs(i - B[i]) > X){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\nclass Solution \r\n{ \r\n    boolean wifiRange(int N, String S, int X) \r\n    { \r\n        int A[] = new int[N];\r\n        Arrays.fill(A,(int)-1e9);\r\n        int B[] = new int[N];\r\n        Arrays.fill(B,(int)1e9);\r\n        int cur = (int)-1e9;\r\n        for(int i = 0; i < N; i++){\r\n            if(S.charAt(i) == '1'){\r\n                cur = i;\r\n            }\r\n            A[i] = cur;\r\n        }\r\n        cur = (int)1e9;\r\n        for(int i = N - 1; i >= 0; i--){\r\n            if(S.charAt(i) == '1'){\r\n                cur = i;\r\n            }\r\n            B[i] = cur;\r\n        }\r\n        for(int i = 0; i < N; i++){\r\n            if(Math.abs(i - A[i]) > X && Math.abs(i - B[i]) > X){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n} ",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\nclass Solution:\r\n    def wifiRange(self, N, S, X): \r\n        #creating an array A to store the index of the nearest access point to the left from the current position\r\n        A = [-10**9]*N\r\n        \r\n        #creating an array B to store the index of the nearest access point to the right from the current position\r\n        B = [1e9]*N\r\n        \r\n        #initializing a variable cur to -10^9\r\n        cur = -10**9\r\n        \r\n        #iterating through the positions\r\n        for i in range(N):\r\n            \r\n            #if an access point is present at the current position, update cur to the current position\r\n            if S[i] == '1':\r\n                cur = i\r\n            \r\n            #store the index of the nearest access point to the left from the current position in the array A\r\n            A[i] = cur\r\n        \r\n        #initializing a variable cur to 10^9\r\n        cur = 10**9\r\n        \r\n        #iterating through the positions in reverse order\r\n        for i in range(N-1,-1,-1):\r\n            \r\n            #if an access point is present at the current position, update cur to the current position\r\n            if S[i] == '1':\r\n                cur = i\r\n            \r\n            #store the index of the nearest access point to the right from the current position in the array B\r\n            B[i] = cur\r\n        \r\n        #iterating through the positions\r\n        for i in range(N):\r\n            \r\n            #if the distance between the current position and the nearest access point to the left is greater than X\r\n            #and the distance between the current position and the nearest access point to the right is greater than X\r\n            if abs(i - A[i]) > X and abs(i - B[i]) > X:\r\n                \r\n                #return False as it is not possible to have WiFi coverage at the current position\r\n                return False\r\n        \r\n        #return True as it is possible to have WiFi coverage at all positions\r\n        return True",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to find the wifi range based on the number of access points.\n    wifiRange(N, S, X) \n    { \n        let A = new Array(N).fill(-Math.pow(10,9));\n        let B = new Array(N).fill(Math.pow(10,9));\n        let cur = -Math.pow(10,9);\n        \n        for (let i = 0; i < N; i++) {\n            if (S[i] === '1') {\n                cur = i;\n            }\n            A[i] = cur;\n        }\n        \n        cur = Math.pow(10,9);\n        \n        for (let i = N-1; i >= 0; i--) {\n            if (S[i] === '1') {\n                cur = i;\n            }\n            B[i] = cur;\n        }\n        \n        for (let i = 0; i < N; i++) {\n            if (Math.abs(i - A[i]) > X && Math.abs(i - B[i]) > X) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public bool wifiRange(int N, string S, int X)\n    {\n        int[] A = new int[N];\n        int[] B = new int[N];\n        int cur = -1000000000;\n\n        // Finding the leftmost position of each WiFi in the string\n        for (int i = 0; i < N; i++)\n        {\n            if (S[i] == '1')\n            {\n                cur = i;\n            }\n            A[i] = cur;\n        }\n        cur = 1000000000;\n\n        // Finding the rightmost position of each WiFi in the string\n        for (int i = N - 1; i >= 0; i--)\n        {\n            if (S[i] == '1')\n            {\n                cur = i;\n            }\n            B[i] = cur;\n        }\n\n        // Checking if all positions are within the WiFi range\n        for (int i = 0; i < N; i++)\n        {\n            if (Math.Abs(i - A[i]) > X && Math.Abs(i - B[i]) > X)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}