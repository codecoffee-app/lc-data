{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710108,
            "title": "Wine Buying and Selling",
            "titleSlug": "wine-buying-and-selling",
            "content": "<p>Given an array, Arr[] of size N represents N house&nbsp;built along a straight line with equal distance between adjacent houses. Each house has a certain number of wine and they want to buy/sell those wines to other houses. Transporting one bottle of wine from one house to an adjacent house results in one unit of work. The task is to find the minimum number of work is required to fulfill all the demands of those N houses.</p>\r\n\r\n<ol>\r\n\t<li>if arr[i] &lt;&nbsp;0, then ith house wants to sell arr[i] number of a wine bottle to other houses.</li>\r\n\t<li>if arr[i] &gt;&nbsp;0, then ith house wants to buy&nbsp;arr[i] number of a wine bottle from&nbsp;other houses.</li>\r\n</ol>\r\n\r\n<p><strong>Note:</strong> One have to print the minimum number such that, all the house can buy/sell wine to each other.<br />\r\nIt is guaranteed that sum of all the elements of the array will be 0.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> N = 5,\r\nArr[] = {5, -4, 1, -3, 1}\r\n<strong>Output:</strong> 9\r\n<strong>Explanation: </strong>\r\n1th house can sell 4 wine bottles to 0th house,\r\ntotal work needed 4*(1-0) = 4, new arr[] = 1,0,1,-3,1\r\nnow 3rd house can sell wine to 0th, 2th and 4th.\r\nso total work needed = 1*(3-0)+1*(3-2)+1*(4-3) = 5\r\nSo total work will be 4+5 = 9</pre>\r\n\r\n<p><strong>Example 2:&nbsp;</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> N = 6,\r\nArr[]={-1000, -1000, -1000, 1000, 1000, 1000}\r\n<strong>Output:</strong> 9000\r\n<strong>Explanation: </strong> \r\n0th house sell 1000 wine bottles to 3rd house, \r\ntotal work needed 1000*(3-0) = 3000. \r\n1st house sell 1000 wine bottles to 4th house,\r\ntotal work needed 3000 + 1000*(3-0) = 6000.\r\n2nd house sell 1000 wine bottles to 5th house,\r\ntotal work needed 6000 + 1000*(3-0) = 9000. \r\nSo total work will be 9000 unit.\r\n</pre>\r\n\r\n<p><strong>Your Task: &nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function <strong>wineSelling()</strong>&nbsp;which takes the array Arr[] and its size N as input parameters and returns an integer as output.</p>\r\n\r\n<p><strong>Expected Time Complexity:&nbsp;</strong>O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</p>\r\n\r\n<p><br />\r\n<strong>Constraints:</strong><br />\r\n1 &le; N &le; 10^5<br />\r\n-10^6 &le; Arr[i] &le; 10^6</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `Arr` of size `N` representing `N` houses built along a straight line with equal distance between adjacent houses. Each house has a certain number of wines and they want to buy/sell those wines to other houses. Transporting one bottle of wine from one house to an adjacent house results in one unit of work. Find the minimum number of work required to fulfill all the demands of those `N` houses.\n\n*   If `Arr[i] < 0`, then the i-th house wants to sell `Arr[i]` number of wine bottles to other houses.\n*   If `Arr[i] > 0`, then the i-th house wants to buy `Arr[i]` number of wine bottles from other houses.\n\n**Note:** Print the minimum number of work units such that all houses can buy/sell wine to each other. The sum of all elements of the array will always be 0.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^6 <= Arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 5, Arr[] = {5, -4, 1, -3, 1}",
                        "output": "9",
                        "explanation": "The first house can sell 4 wine bottles to the zeroth house, requiring 4 * (1-0) = 4 work units. The array becomes {1, 0, 1, -3, 1}. Then, the third house can sell wine to the zeroth, second, and fourth houses, needing 1 * (3-0) + 1 * (3-2) + 1 * (4-3) = 5 work units.  The total work will be 4 + 5 = 9."
                    },
                    {
                        "input": "N = 6, Arr[] = {-1000, -1000, -1000, 1000, 1000, 1000}",
                        "output": "9000",
                        "explanation": "The zeroth house sells 1000 wine bottles to the third house, requiring 1000 * (3-0) = 3000 work units. The first house sells 1000 wine bottles to the fourth house, requiring 3000 + 1000 * (4-1) = 6000 work units. The second house sells 1000 wine bottles to the fifth house, requiring 6000 + 1000 * (5-2) = 9000 work units. The total work is 9000."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to fill the demand from the nearest house&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n  public:\n  //Function to calculate the maximum profit from selling wines.\n  long long int wineSelling(vector<int>& Arr, int N){\n      \n        //Creating two vectors to store the buying and selling prices of wines.\n        vector<pair<int,int> > buy;\n        vector<pair<int,int> > sell;\n        \n        //Iterating over the input array to split it into buying and selling prices.\n        for(int i=0;i<N;i++){\n            //If the price is positive, it is the buying price.\n            if(Arr[i]>0) buy.push_back({Arr[i],i});\n            //If the price is negative, it is the selling price.\n            else sell.push_back({Arr[i],i});\n        }\n        \n        //Initializing the total profit as 0.\n        long long int ans = 0;\n        //Initializing two pointers to iterate over the buying and selling vectors.\n        int i=0,j=0;\n        \n        //Iterating until both vectors are completely processed.\n        while(i<buy.size() and j<sell.size()){\n            //Calculating the maximum quantity that can be bought/sold.\n            long long int x = min(buy[i].first,-sell[j].first);\n            //Updating the remaining quantity after buying/selling.\n            buy[i].first -= x;\n            sell[j].first += x;\n            //Calculating the difference in positions of the wines bought and sold.\n            long long int diff = abs(buy[i].second - sell[j].second);\n            //Updating the total profit by adding the contribution of the current transaction.\n            ans += (x * diff);\n            //If all the wines at this buying price are bought, move to the next buying price.\n            if(buy[i].first == 0) i++;\n            //If all the wines at this selling price are sold, move to the next selling price.\n            if(sell[j].first == 0) j++;\n        }\n        //Returning the maximum profit obtained from selling the wines.\n        return ans;\n  }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Define a class pair to store values in buy and sell ArrayLists\n    static class pair {\n        int first, second;\n        \n        // Constructor for pair class\n        pair(int first, int second) {\n            this.first = first;\n            this.second = second;\n        }\n    }\n    \n    // Method to calculate the total profit from selling wines\n    long wineSelling(int Arr[], int N) {\n        // Create ArrayLists to store buy and sell pairs\n        ArrayList<pair> buy = new ArrayList<>(); // pairs for buying wines\n        ArrayList<pair> sell = new ArrayList<>(); // pairs for selling wines\n        \n        // Loop through the array of wine prices\n        for (int i = 0; i < N; i++) {\n            // Add the pairs to the buy ArrayList if the price is positive\n            if (Arr[i] > 0) {\n                buy.add(new pair(Arr[i], i));\n            } \n            // Add the pairs to the sell ArrayList if the price is negative\n            else {\n                sell.add(new pair(Arr[i], i));\n            }\n        }\n        \n        // Initialize the total profit to zero\n        long ans = 0;\n        int i = 0, j = 0;\n        \n        // Iterate through both the buy and sell ArrayLists simultaneously\n        while (i < buy.size() && j < sell.size()) {\n            // Determine the minimum value between the price in buy and the absolute value of the price in sell\n            long x = Math.min(buy.get(i).first, -sell.get(j).first);\n            \n            // Update the prices in buy and sell ArrayLists by subtracting or adding the determined value\n            buy.get(i).first -= x;\n            sell.get(j).first += x;\n            \n            // Calculate the absolute difference in positions between the pair in buy and sell arrays\n            long diff = Math.abs(buy.get(i).second - sell.get(j).second);\n            \n            // Update the total profit by multiplying the value x with the difference in positions\n            ans += (x * diff);\n            \n            // Increment the index if the price in buy or sell becomes zero\n            if (buy.get(i).first == 0) {\n                i++;\n            }\n            if (sell.get(j).first == 0) {\n                j++;\n            }\n        }\n        \n        // Return the final total profit\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# Class Solution\n\nclass Solution:\n\t\n    # Function to calculate maximum profit from selling wine\n\tdef wineSelling(self, Arr, N):\n\t    buy=[]\n\t    sell=[]\n\t    \n\t    # looping through the wine price array\n\t    for i in range(N):\n\t        \n\t        # if price is positive, add it to the buy array with index\n\t        if Arr[i]>0:\n\t            buy.append([Arr[i],i])\n\t            \n\t        # if price is negative, add it to the sell array with index\n\t        else:\n\t            sell.append([Arr[i],i])\n\t            \n\t    # initializing variables\n\t    ans=0\n\t    i=0\n\t    j=0\n\t    \n\t    # loop until either buy or sell array is fully traversed\n\t    while i<len(buy) and j<len(sell):\n\t        \n\t        # find the minimum value between buy and sell prices\n\t        x=min(buy[i][0],-sell[j][0])\n\t        \n\t        # adjust the buy and sell prices accordingly\n\t        buy[i][0]-=x\n\t        sell[j][0]+=x\n\t        \n\t        # find the difference in indices\n\t        diff=abs(buy[i][1]-sell[j][1])\n\t        \n\t        # add the calculated profit to the ans variable\n\t        ans+=x*diff\n\t        \n\t        # move to the next element in buy array if current element is exhausted\n\t        if buy[i][0]==0:\n\t            i+=1\n\t        \n\t        # move to the next element in sell array if current element is exhausted\n\t        if sell[j][0]==0:\n\t            j+=1\n\t            \n\t    # return the maximum profit\n\t    return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number[]} Arr\r\n * @param {number} N\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to find maximum money the wine seller can make.\r\n    wineSelling(Arr, N) {\r\n        let buy = [];\r\n        let sell = [];\r\n        \r\n        // looping through the wine price array\r\n        for (let i = 0; i < N; i++) {\r\n            \r\n            // if price is positive, add it to the buy array with index\r\n            if (Arr[i] > 0) {\r\n                buy.push([Arr[i], i]);\r\n            }\r\n            \r\n            // if price is negative, add it to the sell array with index\r\n            else {\r\n                sell.push([Arr[i], i]);\r\n            }\r\n        }\r\n        \r\n        // initializing variables\r\n        let ans = 0;\r\n        let i = 0;\r\n        let j = 0;\r\n        \r\n        // loop until either buy or sell array is fully traversed\r\n        while (i < buy.length && j < sell.length) {\r\n            \r\n            // find the minimum value between buy and sell prices\r\n            let x = Math.min(buy[i][0], -sell[j][0]);\r\n            \r\n            // adjust the buy and sell prices accordingly\r\n            buy[i][0] -= x;\r\n            sell[j][0] += x;\r\n            \r\n            // find the difference in indices\r\n            let diff = Math.abs(buy[i][1] - sell[j][1]);\r\n            \r\n            // add the calculated profit to the ans variable\r\n            ans += x * diff;\r\n            \r\n            // move to the next element in buy array if current element is exhausted\r\n            if (buy[i][0] == 0) {\r\n                i += 1;\r\n            }\r\n            \r\n            // move to the next element in sell array if current element is exhausted\r\n            if (sell[j][0] == 0) {\r\n                j += 1;\r\n            }\r\n        }\r\n        \r\n        // return the maximum profit\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}