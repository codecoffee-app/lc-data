{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881634,
            "title": "Winner of an election",
            "titleSlug": "winner-of-an-election-where-votes-are-represented-as-candidate-names-1587115621--162858",
            "content": "<p><span style=\"font-size: 18px;\">Given a lowercase string array <strong>arr</strong>[]. Each element in the array represents a vote cast for a candidate. Return the name of the candidate who received the maximum number of votes and the count of votes he received. In case of a tie between two or more candidates, return the <strong>lexicographically</strong> smallest name.<br /></span></p>\n<p><span style=\"font-size: 18px;\">Note: Return an array of strings, the winning candidate name as the first element and the vote count as the second element (typecast the count to string).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :<br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [\"john\", \"johnny\", \"jackie\", \"johnny\", \"john\", \"jackie\", \"jamie\", \"jamie\", \"john\", \"johnny\", \"jamie\", \"johnny\", \"john\"]\n<strong>Output: </strong>[\"john\", \"4\"]<strong>\nExplanation: \"</strong>john\" has 4 votes casted for him, but so does \"johnny\". \"john\" is lexicographically smaller, so we print \"john\" and the votes he received.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3\narr[] = [\"andy\", \"blake\", \"clark\"]\n<strong>Output: </strong>[<strong>\"</strong>Andy\", \"1\"]<strong>\nExplanation: </strong>All the candidates get 1 votes each. We print \"andy\" as it is lexicographically smaller.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= arr[i].size() &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "adobe",
            "atlassian"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to return the name of candidate that received maximum votes.\n    vector<string> winner(vector<string> &arr) {\n        // using map to store count of votes for each name.\n        int n = arr.size();\n        unordered_map<string, int> mp;\n\n        // storing the frequency of names in the map.\n        for (int j = 0; j < n; j++) {\n            mp[arr[j]]++;\n        }\n\n        int maxx = -1;\n        string answer = \"\";\n\n        // iterating through the map to find the name with highest frequency.\n        for (auto it = mp.begin(); it != mp.end(); it++) {\n            // updating answer whenever we get any name with frequency\n            // greater than frequency of name stored previously.\n            if (it->second > maxx) {\n                maxx = it->second;\n                answer = it->first;\n            }\n            // if frequency of current name is same as the previously\n            // stored name then we compare both names and store\n            // lexicographically smaller name.\n            else if (it->second == maxx && answer.compare(it->first) > 0)\n                answer = it->first;\n        }\n        // storing name with highest votes and the number of votes in a list.\n        vector<string> vec = {answer, to_string(maxx)};\n\n        // returning the list.\n        return vec;\n    }\n};",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}