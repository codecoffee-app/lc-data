{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701290,
            "title": "Winner of an election",
            "titleSlug": "winner-of-an-election-where-votes-are-represented-as-candidate-names-1587115621",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of <em>n </em>names arr of candidates in an election, where each name is </span><span style=\"font-size: 18px;\">a string of lowercase characters</span><span style=\"font-size: 18px;\">. A candidate name in the array represents a vote casted to the candidate. Print the name of the candidate that received the maximum count of votes. If there is a draw between two candidates, then print <em>lexicographically </em>smaller name.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :<br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 13\narr[] = {john,johnny,jackie,johnny,john,jackie,jamie,jamie,john,johnny,jamie,johnny,john}\n<strong>Output: </strong>john 4<strong>\nExplanation: </strong>john has 4 votes casted for him, but so does johnny. john is lexicographically smaller, so we print john and the votes he received.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3\narr[] = {andy,blake,clark}\n<strong>Output: </strong>Andy 1<strong>\nExplanation: </strong>All the candidates get 1 votes each. We print andy as it is lexicographically smaller.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You only need to complete the function&nbsp;<strong>winner()</strong>&nbsp;that takes an array of strings&nbsp;<strong>arr</strong>, and length of <strong>arr</strong>&nbsp;<strong>n</strong> as parameters and returns an <strong>array of string </strong>of <strong>length 2</strong>. First element of the array should be the <strong>name </strong>of the candidate and second element should be the <strong>number of votes </strong>that candidate got in <strong>string format</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n&nbsp;&lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= |arr<sub>i</sub>| &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of *n* names `arr` of candidates in an election, where each name is a string of lowercase characters. Each name in the array represents a vote cast for that candidate. Determine the candidate who received the maximum number of votes. If there is a tie between two or more candidates, return the lexicographically smallest name among those with the maximum votes.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= |arr_i| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 13\narr[] = {john,johnny,jackie,johnny,john,jackie,jamie,jamie,john,johnny,jamie,johnny,john}",
                        "output": "john 4",
                        "explanation": "John has 4 votes, and Johnny also has 4 votes. Since 'john' is lexicographically smaller than 'johnny', the output is 'john 4'."
                    },
                    {
                        "input": "n = 3\narr[] = {andy,blake,clark}",
                        "output": "andy 1",
                        "explanation": "All candidates (andy, blake, and clark) have 1 vote each.  'andy' is lexicographically the smallest among them, so the output is 'andy 1'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "adobe",
            "atlassian"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n  public:\n    //Function to return the name of candidate that received maximum votes.\n    vector<string> winner(string arr[],int n)\n    {\n            //using map to store count of votes for each name.\n            unordered_map<string,int>mp;\n            \n            //storing the frequency of names in the map.\n            for(int j=0;j<n;j++)\n            {\n                mp[arr[j]]++;\n            }\n            \n            int maxx=-1;\n            string answer=\"\";\n            \n            //iterating through the map to find the name with highest frequency.\n            for(auto it=mp.begin();it!=mp.end();it++)\n            {\n                //updating answer whenever we get any name with frequency \n                //greater than frequency of name stored previously.\n                if(it->second>maxx)\n                {\n                    maxx=it->second;\n                    answer=it->first;\n                }\n                //if frequency of current name is same as the previously \n                //stored name then we compare both names and store \n                //lexicographically smaller name.\n                else if(it->second == maxx && answer.compare(it->first) > 0)\n                    answer = it->first;\n            }\n            //storing name with highest votes and the number of votes in a list.\n            vector<string> vec = {answer,to_string(maxx)};\n            \n            //returning the list.\n            return vec;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n    //Function to print the name of candidate that received maximum votes.\n    public static String[] winner(String arr[], int n)\n    {\n        //using map to store count of votes for each name.\n        HashMap<String, Integer> mp = new HashMap<>();\n        \n        //storing the frequency of names in the map.\n        for(int i = 0; i < n; i++)\n        {\n            String key = arr[i];\n            if(mp.containsKey(key) == true)\n            {\n                int freq = mp.get(key);\n                freq++;\n                mp.put(key, freq);\n            }else\n            {\n                mp.put(key, 1);\n            }\n        }\n        \n        int maxx = 0; \n        String answer = \"\"; \n        \n        //iterating through the map to find the name with highest frequency.\n        for (Map.Entry<String,Integer> entry : mp.entrySet()) \n        { \n            String key  = entry.getKey(); \n            Integer val = entry.getValue();\n            \n            //updating answer whenever we get any name with frequency \n            //greater than frequency of name stored previously.\n            if (val > maxx) \n            { \n                maxx = val; \n                answer = key; \n            } \n            //if frequency of current name is same as the previously \n            //stored name then we compare both names and store \n            //lexicographically smaller name.\n            else if (val == maxx && \n                answer.compareTo(key) > 0) \n                answer = key; \n        } \n        \n        //storing name with highest votes and the number of votes in a list.\n        String result[] = {answer,maxx+\"\"};\n        \n        //returning the list.\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom collections import OrderedDict\nclass Solution:\n    \n    #Function to return the name of candidate that received maximum votes.\n    def winner(self,arr,n):\n        \n        #using dictionary to store count of votes for each name.\n        mp=OrderedDict({})\n        \n        #storing the frequency of names in the dictionary.\n        for i in arr:\n            mp[i]=mp.get(i,0)+1\n        \n        maxx=-1\n        ans=\"\"\n        \n        #sorting the dictionary by key or name which means names will \n        #be sorted in lexicographically smaller order.\n        mp=OrderedDict(sorted(mp.items()))\n        \n        #iterating over the dictoinary to find the name with highest frequency.\n        for key,value in mp.items():\n            \n            #updating answer whenever we get any name with frequency \n            #greater than frequency of name stored previously.\n            if value>maxx:\n                maxx=value\n                answer=key\n                \n        #storing name with highest votes and the number of votes in a list.\n        result = [answer,maxx]\n        \n        #returning the list.\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    //Function to return the name of candidate that received maximum votes.\n    public List<string> winner(string[] arr, int n)\n    {\n        Dictionary<string, int> mp = new Dictionary<string, int>();\n\n        //storing the frequency of names in the dictionary.\n        for (int j = 0; j < n; j++)\n        {\n            if (mp.ContainsKey(arr[j]))\n            {\n                mp[arr[j]]++;\n            }\n            else\n            {\n                mp[arr[j]] = 1;\n            }\n        }\n\n        int maxx = -1;\n        string answer = \"\";\n\n        //iterating through the dictionary to find the name with highest frequency.\n        foreach (var entry in mp)\n        {\n            //updating answer whenever we get any name with frequency \n            //greater than frequency of name stored previously.\n            if (entry.Value > maxx)\n            {\n                maxx = entry.Value;\n                answer = entry.Key;\n            }\n            //if frequency of current name is same as the previously \n            //stored name then we compare both names and store \n            //lexicographically smaller name.\n            else if (entry.Value == maxx && string.Compare(entry.Key, answer) < 0)\n            {\n                answer = entry.Key;\n            }\n        }\n        //storing name with highest votes and the number of votes in a list.\n        List<string> vec = new List<string>();\n        vec.Add(answer);\n        vec.Add(maxx.ToString());\n\n        //returning the list.\n        return vec;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {string[]} arr\n * @param {number} n\n * @returns {string[]}\n*/\n\nclass Solution {\n    //Function to return the name of candidate that received maximum votes and number of votes.\n    winner(arr, n){\n        \n        //using map to store count of votes for each name.\n        let mp = new Map();\n        \n        //storing the frequency of names in the map.\n        for(let j=0;j<n;j++)\n        {\n            if(!mp.has(arr[j]))\n                mp.set(arr[j],1);\n            else\n                mp.set(arr[j],mp.get(arr[j])+1);\n        }\n        let maxx=-1;\n        let answer=\"\";\n        \n        //iterating through the map to find the name with highest frequency.\n        for(const [key,value] of mp.entries())\n        {\n            //updating answer whenever we get any name with frequency \n            //greater than frequency of name stored previously.\n            if(value>maxx)\n            {\n                maxx=value;\n                answer=key;\n            }\n            //if frequency of current name is same as the previously \n            //stored name then we compare both names and store \n            //lexicographically smaller name.\n            else if(value == maxx && answer.localeCompare(key) == 1)\n                answer = key;\n        }\n        //returning the name with highest votes and the number of votes.\n        return [answer, maxx];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}