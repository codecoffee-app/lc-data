{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705632,
            "title": "Winter is Coming",
            "titleSlug": "winter-is-coming1535",
            "content": "<p><span style=\"font-size:18px\">Winter is coming, along with winter comes the white walkers who may destroy every human life on the planet. Only Brandon can stop it from happening but he is kidnapped by the White Walkers. His brother Jon wishes to set him free so that they can stop the destruction.<br />\r\nTo set his brother free Jon has to kill the White Walkers who stand against the cave where his brother is kept as slave. Jon has somehow managed to place few of his men among the White Walkers who may help him in rescuing Brandon. Jon has the power to kill at most <strong>k</strong>&nbsp;White Walkers at a time, after which he would need one of his friends to help him gain back his power. Every time Jon meets any of his friend his power is restored to <strong>k.</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">The <strong>n</strong>&nbsp;White Walkers (all assumed to be White Walkers apparently) stand in the given order denoted by some numbers. The ith person will have the number a[i] associated with them. Jon can identify his friend with the help of the numbers. If the number is prime, it is Jon&rsquo;s friend who stands there else it&rsquo;s the White Walkers.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Given the order, comment whether Jon will be able to rescue his brother or not.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 5, k = 2\r\nArr = {6 , 3, 4, 5, 6}\r\n<strong>Output:</strong> 1\r\n<strong>Explaination:</strong> Jon can kill at most 2 White \r\nWalkers before reaching his friend. \r\nHe kills the first (6) and he finds his \r\nfriend (3) then again he kills one (4) and \r\nfinds his friend (5). He now only has to kill \r\none White Walker (6) to reach his brother.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 6, k = 3\r\nArr = {1, 2, 10, 4, 6, 8}\r\n<strong>Output:</strong> 0\r\n<strong>Explaination:</strong> same logic as the previous one.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>ableTorescue()</strong>&nbsp;which takes the array <strong>Arr[]</strong> and its size <strong>n</strong>&nbsp;and <strong>k&nbsp;</strong>as input parameters&nbsp;and returns 1&nbsp;if Jon is able to rescue his brother, 0&nbsp;if he cannot.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(nloglogn)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(n)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= k&nbsp;&lt;= n&nbsp;&lt;=10<sup>5</sup><br />\r\n1 &lt;= Arr[i] &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Jon Snow needs to rescue his brother Brandon from the White Walkers. He can kill at most *k* White Walkers at a time before needing to replenish his strength by meeting a friend. The White Walkers and Jon's friends are arranged in a sequence. Each person is represented by a number in the array *Arr*. White Walkers have composite numbers, and Jon's friends have prime numbers. Determine if Jon can reach Brandon (the last position in *Arr*) by strategically using his power and finding his friends along the way.",
                "constraints": [
                    "1 <= k <= n <= 10^5",
                    "1 <= Arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 5, k = 2\nArr = {6 , 3, 4, 5, 6}",
                        "output": "1",
                        "explanation": "Jon starts with power k=2. He kills the first White Walker (6), power becomes 1. He meets his friend (3), power restored to 2. He kills the next White Walker (4), power becomes 1. He meets his friend (5), power restored to 2. He kills the last White Walker (6) with remaining power 2, so he rescues Brandon."
                    },
                    {
                        "input": "n = 6, k = 3\nArr = {1, 2, 10, 4, 6, 8}",
                        "output": "0",
                        "explanation": "Jon starts with power k=3.  1 is neither prime nor composite so it cannot be considered a friend. He can kill it but reduces the power to k=2. He meets friend (2) and power restores to k=3. He kills the next white walker (10), power becomes 2. Then kills (4) and power becomes 1. After that he kills (6) and power becomes 0. Since, the power is over. He cant rescue his brother Brandon."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Sieve of Eratosthenes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Misc",
                "slug": "misc"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to check if a number is prime\n    int prime(int a)\n    {\n        if(a==1)\n            return 0;\n        if(a==2)\n            return 1;\n        if(a%2==0)\n            return 0;\n        int i;\n        for(i=3;i*i<=a;i+=2)\n            if(a%i==0)\n                return 0;\n        return 1;\n    }\n\n    // Function to check if it is possible to rescue the hostages\n    int ableTorescue(int Arr[], int n, int k) {\n        int prev=-1;\n        int current=0;\n        int flag=0;\n        for(int i=0;i<n;i++)\n        {\n            // Checking if the number is prime\n            if(prime(Arr[i])==1)\n            {\n                prev=i;\n            }\n            else\n            {\n                current=i;\n            }\n            // Checking the difference between current and previous prime number\n            if(current-prev>k)\n            {\n                flag=1;\n                break;\n            }\n        }\n        if(flag==1)\n            return 0;\n        else\n            return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Function to check if a number is prime\n    private int Prime(int a)\n    {\n        if (a == 1)\n            return 0;\n        if (a == 2)\n            return 1;\n        if (a % 2 == 0)\n            return 0;\n        int i;\n        for (i = 3; i * i <= a; i += 2)\n        {\n            if (a % i == 0)\n                return 0;\n        }\n        return 1;\n    }\n\n    // Function to check if it is possible to rescue the hostages\n    public int ableTorescue(int[] Arr, int n, int k)\n    {\n        int prev = -1;\n        int current = 0;\n        int flag = 0;\n        for (int i = 0; i < n; i++)\n        {\n            // Checking if the number is prime\n            if (Prime(Arr[i]) == 1)\n            {\n                prev = i;\n            }\n            else\n            {\n                current = i;\n            }\n            // Checking the difference between current and previous prime number\n            if (current - prev > k)\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 1)\n            return 0;\n        else\n            return 1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}