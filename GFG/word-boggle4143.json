{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702105,
            "title": "Word Boggle",
            "titleSlug": "word-boggle4143",
            "content": "<p><span style=\"font-size: 18px;\">Given a dictionary of distinct <strong>words</strong> and an <strong>M x N</strong> board where every cell has one character. Find all possible words from the dictionary that can be formed by a sequence of adjacent characters on the board. We can move to any of 8 adjacent characters</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;While forming a word we can move to&nbsp;any of the 8 adjacent cells. A&nbsp;cell can be used&nbsp;only once in one word.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: \n</strong>N = 1\ndictionary = {\"CAT\"}\nR = 3, C = 3\nboard = {{C,A,P},{A,N,D},{T,I,E}}\n<strong>Output:</strong>\nCAT\n<strong>Explanation</strong>: \n<span style=\"color: #800080;\">C</span> A P\n<span style=\"color: #800080;\">A</span> N D\n<span style=\"color: #800080;\">T</span> I E\nWords we got is denoted using same color.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 4\ndictionary = {\"GEEKS\",\"FOR\",\"QUIZ\",\"GO\"}\nR = 3, C = 3 \nboard = {{G,I,Z},{U,E,K},{Q,S,E}}\n<strong>Output:</strong>\nGEEKS QUIZ\n<strong>Explanation</strong>: \n<span style=\"color: #ff8c00;\">G</span> <span style=\"color: #0000cd;\">I</span> <span style=\"color: #0000cd;\">Z</span>\n<span style=\"color: #0000cd;\">U</span> <span style=\"color: #ff8c00;\">E</span> <span style=\"color: #ff8c00;\">K</span>\n<span style=\"color: #0000cd;\">Q</span> <span style=\"color: #ff8c00;\">S</span> <span style=\"color: #ff8c00;\">E</span> \nWords we got is denoted using same color.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your task:</strong><br />You dont need to read input or print anything. Your task is to complete the function&nbsp;<strong>wordBoggle()</strong>&nbsp;which takes the dictionary contaning N&nbsp;space-separated strings and R*C board </span><span style=\"font-size: 18px;\">as input parameters and returns a list of&nbsp;words that exist on the board in <strong>lexicographical order</strong>.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N*W + R*C^2)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(N*W + R*C)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N&nbsp;&le; 15<br />1 &le; R, C&nbsp;&le; 50<br />1 &le; length of Word&nbsp;&le; 60<br />Each word can consist of both lowercase and uppercase letters.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try Backtracking. For each exploration path maintain a visited array. If the path does not lead to the end result reset the path and try another one.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "makemytrip",
            "directi",
            "google",
            "facebook",
            "yahoo",
            "nvidia"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n    bool search(vector<vector<char> >& board, const string& word, int index, int x,\r\n            int y) {\r\n\r\n    // If position of the cell is out of boundary of board or\r\n    // letter in current cell does not match letter of word\r\n    if (x < 0 || x == board[0].size() || y < 0 || y == board.size() ||\r\n        word[index] != board[y][x])\r\n        return false;\r\n\r\n    // Base case : each character of the word has been matched\r\n    if (index == word.length() - 1) return true;\r\n\r\n    // mark the current cell as visited\r\n    char cur = board[y][x];\r\n    board[y][x] = '#';\r\n    bool found = search(board, word, index + 1, x + 1, y)        // bottom\r\n                 || search(board, word, index + 1, x - 1, y)     // top\r\n                 || search(board, word, index + 1, x, y + 1)     // right\r\n                 || search(board, word, index + 1, x, y - 1)     // left\r\n                 || search(board, word, index + 1, x + 1, y + 1) // bottom right\r\n                 || search(board, word, index + 1, x - 1, y + 1) // top right\r\n                 || search(board, word, index + 1, x + 1, y - 1) // bottom left\r\n                 || search(board, word, index + 1, x - 1, y - 1); // top left\r\n\r\n    // revert the current cell back to its original state\r\n    board[y][x] = cur;\r\n    return found;\r\n}\r\n\r\nbool exist(vector<vector<char> >& board, string word) {\r\n    if (board.size() == 0) return false;\r\n\r\n    // Consider every character cell and look for all words\r\n    // starting with this character\r\n    for (int i = 0; i < board[0].size(); i++)\r\n        for (int j = 0; j < board.size(); j++)\r\n            if (search(board, word, 0, i, j)) return true;\r\n\r\n    return false;\r\n}\r\n\r\nvector<string> wordBoggle(vector<vector<char> >& board,\r\n                      vector<string>& dictionary) {\r\n    vector<string> result;\r\n\r\n    // Iterate through every word in the dictionary\r\n    for (int i = 0; i < dictionary.size(); ++i) {\r\n        string word = dictionary[i];\r\n        if (exist(board, word)) result.push_back(word);\r\n    }\r\n    return result;\r\n}\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\nclass Solution\r\n{\r\n    private boolean search(char board[][], String word, int index, int i, int j)\r\n    {\r\n        int n = board.length;\r\n        int m = board[0].length;\r\n        \r\n        // If position of the cell is inside the board or not\r\n        if(i < 0 || i > n - 1 || j < 0 || j > m - 1) \r\n            return false;\r\n        \r\n        // If the current cell does not match the letter at index  \r\n        if( word.charAt(index) != board[i][j]) return false;\r\n    \r\n        // If each character is matched\r\n        if (index == word.length() - 1) return true;\r\n        \r\n        char ch = board[i][j];\r\n        board[i][j] = '#';\r\n        \r\n        // Search for adjacent indices\r\n        int dx[] = {-1,0,+1,-1,+1,-1,0,+1};\r\n        int dy[] = {+1,+1,+1,0,0,-1,-1,-1};\r\n        \r\n        for(int x= 0;x<dx.length;x++)\r\n        {\r\n            if(search(board,word,index + 1,i+dx[x],j+dy[x]))\r\n            {\r\n                board[i][j] = ch;\r\n                return true;\r\n            }\r\n        }\r\n        \r\n        board[i][j] = ch;\r\n        \r\n        return false;\r\n    }\r\n    \r\n    private boolean exist(char board[][], String word)\r\n    {\r\n        for(int i=0;i<board.length;i++)\r\n            for(int j=0;j<board[0].length;j++)\r\n                if(search(board,word,0,i,j)) return true;\r\n        \r\n        return false;\r\n    }\r\n    \r\n    public String[] wordBoggle(char board[][], String[] dictionary)\r\n    {\r\n        List <String> wordslist = new ArrayList<String>();\r\n        for(int i=0;i<dictionary.length;i++)\r\n            if(exist(board,dictionary[i]))\r\n                wordslist.add(dictionary[i]);\r\n                \r\n        String[] ans = wordslist.toArray(new String[0]);\r\n        // Arrays.sort(ans);\r\n        return ans;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def search(self, board, word, index, i, j):\n        n = len(board)\n        m = len(board[0])\n\n        # If position of the cell is inside the board or not\n        if i < 0 or i > n - 1 or j < 0 or j > m - 1:\n            return False\n\n        # If the current cell does not match the letter at index\n        if word[index] != board[i][j]:\n            return False\n\n        # If each character is matched\n        if index == len(word) - 1:\n            return True\n\n        ch = board[i][j]\n        board[i][j] = '#'\n\n        # Search for adjacent indices\n        dx = [-1, 0, +1, -1, +1, -1, 0, +1]\n        dy = [+1, +1, +1, 0, 0, -1, -1, -1]\n\n        for x in range(len(dx)):\n            if self.search(board, word, index + 1, i + dx[x], j + dy[x]):\n                board[i][j] = ch\n                return True\n\n        board[i][j] = ch\n        return False\n\n    def exist(self, board, word):\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.search(board, word, 0, i, j):\n                    return True\n\n        return False\n\n    def wordBoggle(self, board, dictionary):\n        wordslist = []\n        for i in range(len(dictionary)):\n            if self.exist(board, dictionary[i]):\n                wordslist.append(dictionary[i])\n\n        return wordslist\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public List<string> wordBoggle(List<List<char>> board, List<string> dictionary)\n    {\n        List<string> result = new List<string>();\n        foreach (string word in dictionary)\n        {\n            if (Exist(board, word))\n            {\n                result.Add(word);\n            }\n        }\n        return result;\n    }\n\n    private bool Exist(List<List<char>> board, string word)\n    {\n        if (board.Count == 0)\n        {\n            return false;\n        }\n\n        for (int i = 0; i < board[0].Count; i++)\n        {\n            for (int j = 0; j < board.Count; j++)\n            {\n                if (Search(board, word, 0, i, j))\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private bool Search(List<List<char>> board, string word, int index, int x, int y)\n    {\n        if (x < 0 || x == board[0].Count || y < 0 || y == board.Count ||\n            word[index] != board[y][x])\n        {\n            return false;\n        }\n\n        if (index == word.Length - 1)\n        {\n            return true;\n        }\n\n        char cur = board[y][x];\n        board[y][x] = '#';\n        bool found = Search(board, word, index + 1, x + 1, y)\n                     || Search(board, word, index + 1, x - 1, y)\n                     || Search(board, word, index + 1, x, y + 1)\n                     || Search(board, word, index + 1, x, y - 1)\n                     || Search(board, word, index + 1, x + 1, y + 1)\n                     || Search(board, word, index + 1, x - 1, y + 1)\n                     || Search(board, word, index + 1, x + 1, y - 1)\n                     || Search(board, word, index + 1, x - 1, y - 1);\n        board[y][x] = cur;\n        return found;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function\n\nclass Solution {\n    wordBoggle(board,dictionary){\n        //code here\n        const search = (board, word, index, x, y) => {\n            if (x < 0 || x === board[0].length || y < 0 || y === board.length || word[index] !== board[y][x]) {\n                return false;\n            }\n\n            if (index === word.length - 1) {\n                return true;\n            }\n\n            let cur = board[y][x];\n            board[y][x] = '#';\n\n            let found = \n                search(board, word, index + 1, x + 1, y) ||\n                search(board, word, index + 1, x - 1, y) ||\n                search(board, word, index + 1, x, y + 1) ||\n                search(board, word, index + 1, x, y - 1) ||\n                search(board, word, index + 1, x + 1, y + 1) ||\n                search(board, word, index + 1, x - 1, y + 1) ||\n                search(board, word, index + 1, x + 1, y - 1) ||\n                search(board, word, index + 1, x - 1, y - 1);\n\n            board[y][x] = cur;\n\n            return found;\n        };\n\n        const exist = (board, word) => {\n            if (board.length === 0) {\n                return false;\n            }\n\n            for (let i = 0; i < board[0].length; i++) {\n                for (let j = 0; j < board.length; j++) {\n                    if (search(board, word, 0, i, j)) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n        let result = [];\n\n        for (let i = 0; i < dictionary.length; i++) {\n            let word = dictionary[i];\n            if (exist(board, word)) {\n                result.push(word);\n            }\n        }\n\n        result.sort();\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}