{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705291,
            "title": "Word Break - 2",
            "titleSlug": "word-break-part-23249",
            "content": "<p><span >Given a string <strong><code data-start=\"116\" data-end=\"119\">s</code></strong> and a dictionary <strong><code data-start=\"137\" data-end=\"145\">dict[] </code></strong>of valid words, you need to return <strong>all possible ways</strong> to break the string&nbsp;<strong>s </strong>into <strong>sentence </strong>such that each word in the sentence is a valid dictionary word. <br />You are allowed to use a valid word multiple times in the sentence.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> s = \"likegfg\", dict[] = [\"lik\", \"like\", \"egfg\", \"gfg\"]\n<strong>Output:</strong> <br />\"lik egfg\"<br />\"like gfg\"\n<strong>Explanation:</strong> All the words in the given sentences are present in the dictionary.</span></pre>\n<pre><span ><strong>Input:</strong> s = \"geeksforgeeks\", dict[] = [\"for\", \"geeks\"]\n<strong>Output:</strong> \"geeks for geeks\"\n<strong>Explanation:</strong> The string \"geeksforgeeks\" can be broken into valid words from the dictionary in one way.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; dict.size() &le; 20<br />1 &le; dict[i] &le; 15<br />1 &le; s.size() &le; 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Starting from a position check if you can break the remaining sentence and in how many ways. If breakable and all the words lie&nbsp;in the dictionary then add the total sentence in your resulting list.</span></p>",
            "<p><span style=\"font-size:18px\">Go through the concept of backtracking for finding out the solution.</span></p>",
            "<p><span style=\"font-size:18px\">Implement dynamic programming concept for time optimization.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google",
            "ibm"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<string> wordBreak(vector<string> &dict, string &s) {\n        // Convert dictionary to a set for fast lookups\n        unordered_set<string> st(dict.begin(), dict.end());\n\n        int n = s.length();\n\n        // dp[i] stores all valid sentences\n        // starting from index i\n        vector<vector<string>> dp(n + 1);\n\n        // Base case: an empty string at the end\n        dp[n] = {\"\"};\n\n        for (int i = n - 1; i >= 0; --i) {\n\n            // Check substrings starting from the\n            // current index\n            for (int j = i + 1; j <= n; ++j) {\n                string word = s.substr(i, j - i);\n\n                if (st.count(word)) {\n\n                    // Append valid sub-sentences to the\n                    // current word\n                    for (string &sub : dp[j]) {\n                        if (sub.empty()) {\n                            dp[i].push_back(word);\n                        } else {\n                            dp[i].push_back(word + \" \" + sub);\n                        }\n                    }\n                }\n            }\n        }\n\n        return dp[0];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static String[] wordBreak(String[] dict, String s) {\n\n        HashSet<String> st = new HashSet<>(Arrays.asList(dict));\n        int n = s.length();\n\n        List<List<String>> dp = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            dp.add(new ArrayList<>());\n        }\n\n        dp.get(n).add(\"\");\n\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i + 1; j <= n; ++j) {\n                String word = s.substring(i, j);\n\n                if (st.contains(word)) {\n                    for (String sub : dp.get(j)) {\n                        if (sub.isEmpty()) {\n                            dp.get(i).add(word);\n                        } else {\n                            dp.get(i).add(word + \" \" + sub);\n                        }\n                    }\n                }\n            }\n        }\n\n        return dp.get(0).toArray(new String[0]);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def wordBreak(self, dict, s):\n        st = set(dict)\n        n = len(s)\n\n        # dp[i] stores all valid sentences starting from index i\n        dp = [[] for _ in range(n + 1)]\n\n        # Base case: an empty string at the end\n        dp[n].append(\"\")\n\n        for i in range(n - 1, -1, -1):\n            # Check substrings starting from the current index\n            for j in range(i + 1, n + 1):\n                word = s[i:j]\n\n                # Check if the word exists in the dictionary\n                if word in st:\n                    # Append valid sub-sentences to the current word\n                    for sub in dp[j]:\n                        if sub:\n                            dp[i].append(word + \" \" + sub)\n                        else:\n                            dp[i].append(word)\n\n        return dp[0]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    wordBreak(dict, s) {\n        // Convert dictionary array to a Set\n        let st = new Set(dict);\n        let n = s.length;\n\n        // dp[i] stores all valid sentences\n        // starting from index i\n        let dp = Array.from({length : n + 1}, () => []);\n\n        // Base case: an empty string at the end\n        dp[n].push(\"\");\n\n        for (let i = n - 1; i >= 0; i--) {\n\n            // Check substrings starting from the\n            // current index\n            for (let j = i + 1; j <= n; j++) {\n                let word = s.substring(i, j);\n\n                if (st.has(word)) {\n\n                    // Append valid sub-sentences to\n                    // the current word\n                    for (let sub of dp[j]) {\n                        if (sub.length > 0) {\n                            dp[i].push(word + \" \" + sub);\n                        } else {\n                            dp[i].push(word);\n                        }\n                    }\n                }\n            }\n        }\n\n        return dp[0];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}