{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706333,
            "title": "Word Break (Trie)",
            "titleSlug": "word-break-trie--141631",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>A </strong>and a dictionary of n words <strong>B</strong>, find out if A&nbsp;can be segmented into a space-separated sequence of dictionary words.&nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 12\r\nB = { &quot;i&quot;, &quot;like&quot;, &quot;sam&quot;, &quot;sung&quot;, &quot;samsung&quot;,\r\n&quot;mobile&quot;,&quot;ice&quot;,&quot;cream&quot;, &quot;icecream&quot;, &quot;man&quot;,\r\n&quot;go&quot;, &quot;mango&quot; }, A = &quot;ilike&quot;\r\n<strong>Output:</strong> 1\r\n<strong>Explanation: </strong>The string can be segmented as\r\n&quot;i like&quot;.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>: </span>\r\n<span style=\"font-size:18px\">n = 12 </span>\r\n<span style=\"font-size:18px\">B = { &quot;i&quot;, &quot;like&quot;, &quot;sam&quot;, &quot;sung&quot;, &quot;samsung&quot;,\r\n&quot;mobile&quot;,&quot;ice&quot;,&quot;cream&quot;, &quot;icecream&quot;, &quot;man&quot;, \r\n&quot;go&quot;, &quot;mango&quot; }, A = &quot;ilikesamsung&quot; </span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 1</span>\r\n<span style=\"font-size:18px\"><strong>Explanation</strong>: The string can be segmented as \r\n&quot;i like samsung&quot; or &quot;i like sam sung&quot;.</span>\r\n\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nComplete&nbsp;<strong>wordBreak()</strong>&nbsp;function which takes a string and list of strings as a parameter&nbsp;and returns 1 if it is possible to break words, else return&nbsp;0. You don&#39;t need to read any input or print any output, it is done by driver code.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected time complexity:&nbsp;</strong>O(n*l+|A|<sup>2</sup>) where l is the leght of longest string present in the dictionary and |A| is the length of&nbsp;string A</span><br />\r\n<span style=\"font-size:18px\"><strong>Expected auxiliary space:</strong>&nbsp;O(|A| + k) , where k = sum of length of all strings present in B</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints</strong>:<br />\r\n1 &lt;= N &lt;= 12<br />\r\n1 &lt;= s &lt;=1000 , where s =&nbsp;length of string A<br />\r\n&nbsp;The length of each word is less than 15.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `A` and a dictionary of `n` words `B`, determine if `A` can be segmented into a space-separated sequence of words from the dictionary `B`.",
                "constraints": [
                    "1 <= N <= 12",
                    "1 <= s <= 1000, where s = length of string A",
                    "The length of each word is less than 15."
                ],
                "testcases": [
                    {
                        "input": "n = 12\nB = { \"i\", \"like\", \"sam\", \"sung\", \"samsung\", \"mobile\",\"ice\",\"cream\", \"icecream\", \"man\", \"go\", \"mango\" }\nA = \"ilike\"",
                        "output": "1",
                        "explanation": "The string can be segmented as \"i like\"."
                    },
                    {
                        "input": "n = 12\nB = { \"i\", \"like\", \"sam\", \"sung\", \"samsung\", \"mobile\",\"ice\",\"cream\", \"icecream\", \"man\", \"go\", \"mango\" }\nA = \"ilikesamsung\"",
                        "output": "1",
                        "explanation": "The string can be segmented as \"i like samsung\" or \"i like sam sung\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Insert all words present in the dictionary into a trie.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [
            "zoho",
            "amazon",
            "microsoft",
            "hike",
            "walmart",
            "maq-software",
            "google",
            "ibm"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Complete back-end function template for C++\r\n\r\n    const int ALPHABET_SIZE = 26; \r\n      \r\n    // trie node \r\n    struct TrieNode \r\n    { \r\n        struct TrieNode *children[ALPHABET_SIZE]; \r\n      \r\n        // isEndOfWord is true if the node represents \r\n        // end of a word \r\n        bool isEndOfWord; \r\n    }; \r\n      \r\n    // Returns new trie node (initialized to NULLs) \r\n    struct TrieNode *getNode(void) \r\n    { \r\n        struct TrieNode *pNode =  new TrieNode; \r\n      \r\n        pNode->isEndOfWord = false; \r\n      \r\n        for (int i = 0; i < ALPHABET_SIZE; i++) \r\n            pNode->children[i] = NULL; \r\n      \r\n        return pNode; \r\n    } \r\nclass Solution{\r\n    public:\r\n      \r\n    // If not present, inserts key into trie \r\n    // If the key is prefix of trie node, just \r\n    // marks leaf node \r\n    void insert(struct TrieNode *root, string key) \r\n    { \r\n        struct TrieNode *pCrawl = root; \r\n      \r\n        for (int i = 0; i < key.length(); i++) \r\n        { \r\n            int index = key[i] - 'a'; \r\n            if (!pCrawl->children[index]) \r\n                pCrawl->children[index] = getNode(); \r\n      \r\n            pCrawl = pCrawl->children[index]; \r\n        } \r\n      \r\n        // mark last node as leaf \r\n        pCrawl->isEndOfWord = true; \r\n    } \r\n      \r\n    // Returns true if key presents in trie, else \r\n    // false \r\n    bool search(struct TrieNode *root, string key) \r\n    { \r\n        struct TrieNode *pCrawl = root; \r\n      \r\n        for (int i = 0; i < key.length(); i++) \r\n        { \r\n            int index = key[i] - 'a'; \r\n            if (!pCrawl->children[index]) \r\n                return false; \r\n      \r\n            pCrawl = pCrawl->children[index]; \r\n        } \r\n      \r\n        return (pCrawl != NULL && pCrawl->isEndOfWord); \r\n    } \r\n      \r\n    // returns true if string can be segmented into \r\n    // space separated words, otherwise returns false \r\n    bool wordBreakutil(string const &str, TrieNode *root) \r\n    { \r\n        int size = str.size(); \r\n      \r\n        // Base case \r\n        if (size == 0)  return true; \r\n      \r\n        // Try all prefixes of lengths from 1 to size \r\n        for (int i=1; i<=size; i++) \r\n        { \r\n            // The parameter for search is str.substr(0, i) \r\n            // str.substr(0, i) which is prefix (of input \r\n            // string) of length 'i'. We first check whether \r\n            // current prefix is in dictionary. Then we \r\n            // recursively check for remaining string \r\n            // str.substr(i, size-i) which is suffix of \r\n            // length size-i \r\n            if (search(root, str.substr(0, i)) && \r\n                wordBreakutil(str.substr(i, size-i), root)) \r\n                return true; \r\n        } \r\n      \r\n        // If we have tried all prefixes and none \r\n        // of them worked \r\n        return false; \r\n    } \r\n    \r\n    int wordBreak(string A, vector<string> &B) {\r\n        //code here\r\n        struct TrieNode *root = getNode(); \r\n      \r\n        // Construct trie \r\n        for (int i = 0; i < B.size(); i++) \r\n            insert(root, B[i]); \r\n            \r\n            return wordBreakutil(A,root)?1:0;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    static final int ALPHABET_SIZE = 26; \r\n  \r\n// trie node \r\nstatic class TrieNode \r\n{ \r\n    TrieNode children[]; \r\n  \r\n    // isEndOfWord is true if the node \r\n    // represents end of a word \r\n    boolean isEndOfWord; \r\n  \r\n    // Constructor of TrieNode \r\n    TrieNode() \r\n    { \r\n        children = new TrieNode[ALPHABET_SIZE]; \r\n        for(int i = 0; i < ALPHABET_SIZE; i++) \r\n            children[i] = null; \r\n              \r\n        isEndOfWord = false; \r\n    } \r\n} \r\n  \r\n// If not present, inserts key into trie \r\n// If the key is prefix of trie node, just \r\n// marks leaf node \r\nstatic void insert(TrieNode root, String key) \r\n{ \r\n    TrieNode pCrawl = root; \r\n  \r\n    for(int i = 0; i < key.length(); i++)  \r\n    { \r\n        int index = key.charAt(i) - 'a'; \r\n        if (pCrawl.children[index] == null) \r\n            pCrawl.children[index] = new TrieNode(); \r\n  \r\n        pCrawl = pCrawl.children[index]; \r\n    } \r\n  \r\n    // Mark last node as leaf \r\n    pCrawl.isEndOfWord = true; \r\n} \r\n  \r\n// Returns true if key presents in trie, else \r\n// false \r\nstatic boolean search(TrieNode root, String key) \r\n{ \r\n    TrieNode pCrawl = root; \r\n  \r\n    for(int i = 0; i < key.length(); i++) \r\n    { \r\n        int index = key.charAt(i) - 'a'; \r\n        if (pCrawl.children[index] == null) \r\n            return false; \r\n  \r\n        pCrawl = pCrawl.children[index]; \r\n    } \r\n    return (pCrawl != null && pCrawl.isEndOfWord); \r\n} \r\n  \r\n// Returns true if string can be segmented \r\n// into space separated words, otherwise  \r\n// returns false \r\nstatic boolean wordBreakUtil(String str, TrieNode root) \r\n{ \r\n    int size = str.length(); \r\n  \r\n    // Base case \r\n    if (size == 0) \r\n        return true; \r\n  \r\n    // Try all prefixes of lengths from 1 to size \r\n    for(int i = 1; i <= size; i++)  \r\n    { \r\n          \r\n        // The parameter for search is  \r\n        // str.substring(0, i)  \r\n        // str.substrinf(0, i) which is \r\n        // prefix (of input string) of  \r\n        // length 'i'. We first check whether \r\n        // current prefix is in dictionary.  \r\n        // Then we recursively check for remaining \r\n        // string str.substr(i, size) which  \r\n        // is suffix of length size-i. \r\n        if (search(root, str.substring(0, i)) &&  \r\n            wordBreakUtil(str.substring(i, size), root)) \r\n            return true; \r\n    } \r\n  \r\n    // If we have tried all prefixes and none \r\n    // of them worked \r\n    return false; \r\n} \r\n  \r\n    public static int wordBreak(String A, ArrayList<String> B )\r\n    {\r\n        //code here\r\n        TrieNode root = new TrieNode(); \r\n  \r\n    // Construct trie \r\n    int n = B.size();\r\n    for(int i = 0; i < n; i++) \r\n        insert(root, B.get(i)); \r\n        \r\n        if(wordBreakUtil(A,root)==true)\r\n        return 1;\r\n        else return 0;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\n//User function Template for \n\nclass TrieNode {\n  constructor() {\n    this.children = new Array(26).fill(null);\n    this.isEndOfWord = false;\n  }\n}\n\nclass Solution {\n  insert(root, key) {\n    let node = root;\n    for (let i = 0; i < key.length; i++) {\n      let index = key.charCodeAt(i) - 'a'.charCodeAt(0);\n      if (node.children[index] === null) {\n        node.children[index] = new TrieNode();\n      }\n      node = node.children[index];\n    }\n    node.isEndOfWord = true;\n  }\n\n  search(root, key) {\n    let node = root;\n    for (let i = 0; i < key.length; i++) {\n      let index = key.charCodeAt(i) - 'a'.charCodeAt(0);\n      if (node.children[index] === null) {\n        return false;\n      }\n      node = node.children[index];\n    }\n    return (node !== null && node.isEndOfWord);\n  }\n\n  wordBreakutil(str, root) {\n    let size = str.length;\n    if (size === 0) return true;\n    for (let i = 1; i <= size; i++) {\n      if (this.search(root, str.substring(0, i)) && this.wordBreakutil(str.substring(i, size), root)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  wordBreak(A, B) {\n    //code here\n    let root = new TrieNode();\n    for (let i = 0; i < B.length; i++) {\n      this.insert(root, B[i]);\n    }\n    return this.wordBreakutil(A, root) ? 1 : 0;\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}