{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702073,
            "title": "Word Break",
            "titleSlug": "word-break1352",
            "content": "<p><span >You are given a string <strong><code data-start=\"145\" data-end=\"148\">s</code></strong> and a list <strong><code data-start=\"160\" data-end=\"174\">dictionary[]</code></strong> of words. Your task is to determine whether the string <strong><code data-start=\"230\" data-end=\"233\">s</code></strong> can be formed by concatenating one or more words from the <strong><code data-start=\"292\" data-end=\"306\">dictionary[]</code></strong>.</span></p>\n<p><span ><strong>Note</strong>: From&nbsp;<strong>dictionary[]</strong>, any word can be taken any number of times and in any order.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">s</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">&nbsp;</strong>= \"ilike\", dictionary[] = [\"i\", \"like\", \"gfg\"]<br /><strong>Output: </strong>true\n<strong>Explanation: </strong>s can be breakdown as \"i like\".\n</span></pre>\n<pre><span ><strong>Input</strong>: <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">s</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">&nbsp;</strong>= \"ilikegfg\", dictionary[] = [\"i\", \"like\", \"man\", \"india\", \"gfg\"]\n<strong>Output: </strong>true\n<strong>Explanation</strong>: s can be breakdown as \"i like gfg\".</span></pre>\n<pre><span ><strong>Input</strong>: <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">s</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">&nbsp;</strong>= \"ilikemangoes\", dictionary[] = [\"i\", \"like\", \"man\", \"india\", \"gfg\"]\n<strong>Output: </strong>false\n<strong>Explanation</strong>: s cannot be formed using dictionary[] words.</span></pre>\n<p><span ><strong>Constraints</strong>:<br />1 &le; s.size() &le; 3000<br />1 &le; dictionary.size() &le; 1000<br />1 &le; dictionary[i].size() &le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` and a list of words `dictionary`, determine if `s` can be formed by concatenating one or more words from `dictionary`. Words from `dictionary` can be used any number of times and in any order.",
                "constraints": [
                    "1 <= s.size() <= 3000",
                    "1 <= dictionary.size() <= 1000",
                    "1 <= dictionary[i].size() <= 100"
                ],
                "testcases": [
                    {
                        "input": "s = \"ilike\", dictionary = [\"i\", \"like\", \"gfg\"]",
                        "output": "true",
                        "explanation": "The string 'ilike' can be formed by concatenating 'i' and 'like' from the dictionary."
                    },
                    {
                        "input": "s = \"ilikegfg\", dictionary = [\"i\", \"like\", \"man\", \"india\", \"gfg\"]",
                        "output": "true",
                        "explanation": "The string 'ilikegfg' can be formed by concatenating 'i', 'like', and 'gfg' from the dictionary."
                    },
                    {
                        "input": "s = \"ilikemangoes\", dictionary = [\"i\", \"like\", \"man\", \"india\", \"gfg\"]",
                        "output": "false",
                        "explanation": "The string 'ilikemangoes' cannot be formed using words from the given dictionary."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Try considering each prefix and search for it in the dictionary. If the prefix is present in the dictionary, we recur for the rest of the string (or suffix).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho",
            "flipkart",
            "amazon",
            "microsoft",
            "hike",
            "walmart",
            "maq-software",
            "google",
            "ibm"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool wordBreak(string &s, vector<string> &dictionary) {\n        int n = s.size();\n        vector<bool> dp(n + 1, 0);\n        dp[0] = 1;\n\n        // Traverse through the given string\n        for (int i = 1; i <= n; i++) {\n\n            // Traverse through the dictionary words\n            for (string &w : dictionary) {\n\n                // Check if current word is present\n                // the prefix before the word is also\n                // breakable\n                int start = i - w.size();\n                if (start >= 0 && dp[start] && s.substr(start, w.size()) == w) {\n                    dp[i] = 1;\n                    break;\n                }\n            }\n        }\n        return dp[n];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean wordBreak(String s, String[] dictionary) {\n        int n = s.length();\n        boolean[] dp = new boolean[n + 1];\n        dp[0] = true;\n\n        // Traverse through the given string\n        for (int i = 1; i <= n; i++) {\n            // Traverse through the dictionary words\n            for (String w : dictionary) {\n                // Check if the current word is present and\n                // the prefix before the word is also\n                // breakable\n                int start = i - w.length();\n                if (start >= 0 && dp[start] &&\n                    s.substring(start, start + w.length()).equals(w)) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n\n        return dp[n];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def wordBreak(self, s, dictionary):\n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n\n        # Traverse through the given string\n        for i in range(1, n + 1):\n\n            # Traverse through the dictionary words\n            for w in dictionary:\n\n                # Check if current word is present\n                # the prefix before the word is also\n                # breakable\n                start = i - len(w)\n                if start >= 0 and dp[start] and s[start:start + len(w)] == w:\n                    dp[i] = True\n                    break\n        return 1 if dp[n] else 0\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public bool wordBreak(string s, string[] dictionary) {\n        int n = s.Length;\n        bool[] dp = new bool[n + 1];\n        dp[0] = true;\n\n        // Traverse through the given string\n        for (int i = 1; i <= n; i++) {\n\n            // Traverse through the dictionary words\n            foreach (string w in dictionary) {\n                // Check if current word is present and the\n                // prefix before the word is also breakable\n                int start = i - w.Length;\n                if (start >= 0 && dp[start] && s.Substring(start, w.Length) == w) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n        return dp[n]; // Return true if word break is\n                      // possible, else false\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    wordBreak(s, dictionary) {\n        const n = s.length;\n        const dp = new Array(n + 1).fill(false);\n        dp[0] = true;\n\n        // Traverse through the given string\n        for (let i = 1; i <= n; i++) {\n\n            // Traverse through the dictionary words\n            for (const w of dictionary) {\n\n                // Check if current word is present\n                // the prefix before the word is also\n                // breakable\n                const start = i - w.length;\n                if (start >= 0 && dp[start] &&\n                    s.substring(start, start + w.length) === w) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n        return (dp[n]) ? 1 : 0;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}