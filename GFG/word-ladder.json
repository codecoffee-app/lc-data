{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701841,
            "title": "Word Ladder I",
            "titleSlug": "word-ladder",
            "content": "<p><span style=\"font-size: 18px;\">Given two distinct words <strong>startWord</strong> and <strong>targetWord</strong>, and a list&nbsp;denoting <strong>wordList</strong>&nbsp;of unique words of equal lengths. Find the length of the shortest transformation sequence from startWord to targetWord.<br />Keep&nbsp;the following conditions in mind:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">A word can only consist of lowercase characters.</span></li>\n<li><span style=\"font-size: 18px;\">Only one letter can be changed in each transformation.</span></li>\n<li><span style=\"font-size: 18px;\">Each transformed word must exist in the wordList including the targetWord.</span></li>\n<li><span style=\"font-size: 18px;\">startWord may or may not be part of the&nbsp;wordList</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\">The second part of this problem can be found <a href=\"https://practice.geeksforgeeks.org/problems/word-ladder-ii/1/\">here</a>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: If no possible way to&nbsp;transform&nbsp;sequence from startWord to targetWord <strong>return 0</strong></span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nwordList = {\"des\",\"der\",\"dfr\",\"dgt\",\"dfs\"}\nstartWord = \"der\", targetWord= \"dfs\",\n<strong>Output:\n</strong>3\n<strong>Explanation:\n</strong>The length of the smallest transformation\nsequence from \"der\" to \"dfs\" is 3\ni,e \"der\" -&gt; \"dfr\" -&gt; \"dfs\".\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nwordList = {\"geek\", \"gefk\"}\nstartWord = \"gedk\", targetWord= \"geek\", \n<strong>Output:\n</strong>2\n<strong>Explanation:\n</strong>gedk -&gt; geek</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 3:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>\nwordList = {\"poon\", \"plee\", \"same\", \"poie\",\"plea\",\"plie\",\"poin\"}\nstartWord = \"toon\", targetWord= \"plea\",\n<strong>Output: </strong>7 \n<strong>Explanation:\n</strong>toon -&gt; poon -&gt; poin -&gt; poie -&gt; plie -&gt; plee -&gt; plea </span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything, Your task is to complete the function&nbsp;<strong>wordLadderLength()&nbsp;</strong>which takes startWord, targetWord and wordList as input parameter and returns the&nbsp;length of the shortest transformation sequence from startWord to targetWord. If not possible return&nbsp;0.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Compelxity:&nbsp;</strong>O(N<sup>2</sup>&nbsp;* M)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(N * M) where N = length of wordList and M = |wordList<sub>i</sub>|</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 100<br />1 &le; M &le; 10</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two distinct words `startWord` and `targetWord`, and a list `wordList` of unique words of equal lengths, find the length of the shortest transformation sequence from `startWord` to `targetWord`. The words can only consist of lowercase characters. Each transformation must change only one letter, and each transformed word must exist in the `wordList`, including the `targetWord`. The `startWord` may or may not be part of the `wordList`. If no possible transformation sequence exists, return 0.",
                "constraints": [
                    "1 <= N <= 100 (where N is the length of wordList)",
                    "1 <= M <= 10 (where M is the length of each word in wordList)"
                ],
                "testcases": [
                    {
                        "input": "wordList = {\"des\",\"der\",\"dfr\",\"dgt\",\"dfs\"}\nstartWord = \"der\", targetWord= \"dfs\"",
                        "output": "3",
                        "explanation": "The shortest transformation sequence from \"der\" to \"dfs\" is 3: \"der\" -> \"dfr\" -> \"dfs\"."
                    },
                    {
                        "input": "wordList = {\"geek\", \"gefk\"}\nstartWord = \"gedk\", targetWord= \"geek\"",
                        "output": "2",
                        "explanation": "The shortest transformation sequence is gedk -> geek."
                    },
                    {
                        "input": "wordList = {\"poon\", \"plee\", \"same\", \"poie\",\"plea\",\"plie\",\"poin\"}\nstartWord = \"toon\", targetWord= \"plea\"",
                        "output": "7",
                        "explanation": "The shortest transformation sequence is toon -> poon -> poin -> poie -> plie -> plee -> plea."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Think of words having difference in only one character as adjacent nodes and solve using BFS algorithm. ie- use a queue to keep track of adjacent nodes.&nbsp;</span><br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "adobe",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\npublic:\r\n    int wordLadderLength(string startWord, string targetWord, vector<string>& wordList) {\r\n        unordered_set<string>st(wordList.begin(), wordList.end());\r\n        queue<string>q;\r\n        ladderLengthUtility(startWord, q, st);\r\n        int ans = 2;\r\n        while(!q.empty()){\r\n            int n = q.size();\r\n            for(int i = 0; i < n; i++){\r\n                startWord = q.front();\r\n                q.pop();\r\n                if(startWord == targetWord)\r\n                    return ans;\r\n                ladderLengthUtility(startWord, q, st);\r\n            }\r\n            ans++;\r\n        }\r\n        return 0;\r\n    }\r\n    void ladderLengthUtility(string word, queue<string>&q, unordered_set<string>&st){\r\n        st.erase(word);\r\n        for(int i = 0; i < word.size(); i++){\r\n            char x = word[i];\r\n            for(char c = 'a'; c <= 'z'; c++){\r\n                word[i] =  c;\r\n                if(st.find(word) != st.end()){\r\n                    q.push(word);\r\n                    st.erase(word);\r\n                }\r\n            }\r\n            word[i] = x;\r\n        }\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end Complete function Template for JAVA\r\n\r\nclass Solution\r\n{\r\n    public int wordLadderLength(String startWord, String targetWord, String[] wordList)\r\n    {\r\n        Set<String> D = new HashSet<String>();\r\n        for(int i=0; i<wordList.length; i++)\r\n            D.add(wordList[i]);\r\n            \r\n        if(startWord.equals(targetWord))\r\n            return 0;\r\n        \r\n        // If the target String is not\r\n        // present in the dictionary\r\n        if (!D.contains(targetWord))\r\n            return 0;\r\n    \r\n        // To store the current chain length\r\n        // and the length of the words\r\n        int level = 0, wordlength = startWord.length();\r\n    \r\n        // Push the starting word into the queue\r\n        Queue<String> Q = new LinkedList<>();\r\n        Q.add(startWord);\r\n    \r\n        // While the queue is non-empty\r\n        while (!Q.isEmpty())\r\n        {\r\n    \r\n            // Increment the chain length\r\n            ++level;\r\n    \r\n            // Current size of the queue\r\n            int sizeofQ = Q.size();\r\n    \r\n            // Since the queue is being updated while\r\n            // it is being traversed so only the\r\n            // elements which were already present\r\n            // in the queue before the start of this\r\n            // loop will be traversed for now\r\n            for (int i = 0; i < sizeofQ; ++i) \r\n            {\r\n    \r\n                // Remove the first word from the queue\r\n                char []word = Q.peek().toCharArray();\r\n                Q.remove();\r\n    \r\n                // For every character of the word\r\n                for (int pos = 0; pos < wordlength; ++pos)\r\n                {\r\n    \r\n                    // Retain the original character\r\n                    // at the current position\r\n                    char orig_char = word[pos];\r\n    \r\n                    // Replace the current character with\r\n                    // every possible lowercase alphabet\r\n                    for (char c = 'a'; c <= 'z'; ++c)\r\n                    {\r\n                        word[pos] = c;\r\n    \r\n                        // If the new word is equal\r\n                        // to the target word\r\n                        if (String.valueOf(word).equals(targetWord))\r\n                            return level + 1;\r\n    \r\n                        // Remove the word from the set\r\n                        // if it is found in it\r\n                        if (!D.contains(String.valueOf(word)))\r\n                            continue;\r\n                        D.remove(String.valueOf(word));\r\n    \r\n                        // And push the newly generated word\r\n                        // which will be a part of the chain\r\n                        Q.add(String.valueOf(word));\r\n                    }\r\n    \r\n                    // Restore the original character\r\n                    // at the current position\r\n                    word[pos] = orig_char;\r\n                }\r\n            }\r\n        }\r\n    \r\n        return 0;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end Complete function Solution for Python\n\nfrom collections import deque\nfrom typing import List\n\n\nclass Solution:\n\n    # Function to find the length of the word ladder\n    def wordLadderLength(self, startWord: str, targetWord: str,\n                         wordList: List[str]) -> int:\n\n        # Utility function for finding the ladder length\n        def ladderLengthUtility(word: str, q: deque, st: set):\n\n            # Remove the current word from the set\n            st.discard(word)\n\n            # Traverse through each letter in the word\n            for i in range(len(word)):\n                x = word[i]\n\n                # Replace each letter in the word with each letter of the alphabet\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    word = word[:i] + c + word[i + 1:]\n\n                    # If the modified word is in the word set, add it to the queue\n                    if word in st:\n                        q.append(word)\n\n                        # Remove the word from the set\n                        st.discard(word)\n\n                # Reset the modified word back to the original word\n                word = word[:i] + x + word[i + 1:]\n\n        # Convert the word list into a set\n        st = set(wordList)\n\n        # Create a queue for BFS traversal\n        q = deque()\n\n        # Invoke the utility function to start the BFS traversal\n        ladderLengthUtility(startWord, q, st)\n\n        # Initialize the answer variable to 2 (start word and target word)\n        ans = 2\n\n        # BFS traversal\n        while q:\n            n = len(q)\n\n            # Traverse through all words at the current level\n            for i in range(n):\n                startWord = q.popleft()\n\n                # If the current word is the target word, return the answer\n                if startWord == targetWord:\n                    return ans\n\n                # Continue BFS traversal by invoking the utility function again\n                ladderLengthUtility(startWord, q, st)\n\n            # Increase the answer by 1 for each level\n            ans += 1\n\n        # If no word ladder is found, return 0\n        return 0\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    \n    wordLadderLength(startWord, targetWord, wordList) {\n        let st = new Set(wordList);\n        let q = [];\n        this.ladderLengthUtility(startWord, q, st);\n        let ans = 2;\n        while(q.length > 0){\n            let n = q.length;\n            for(let i = 0; i < n; i++){\n                startWord = q.shift();\n                if(startWord === targetWord)\n                    return ans;\n                this.ladderLengthUtility(startWord, q, st);\n            }\n            ans++;\n        }\n        return 0;\n    }\n\n    ladderLengthUtility(word, q, st) {\n        st.delete(word);\n        for(let i = 0; i < word.length; i++){\n            let x = word[i];\n            for(let j = 0; j < 26; j++){\n                let c = String.fromCharCode('a'.charCodeAt(0) + j);\n                word = word.substr(0, i) + c + word.substr(i+1);\n                if(st.has(word)){\n                    q.push(word);\n                    st.delete(word);\n                }\n            }\n            word = word.substr(0, i) + x + word.substr(i+1);\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}