{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712253,
            "title": "Word Search",
            "titleSlug": "word-search-1664453028",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>s</strong> and matrix of characters <strong>mat</strong> having <strong>n</strong> number&nbsp;of rows and <strong>m</strong> number&nbsp;of columns. Find if string exist in the grid.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:</span>\r\n</strong><span style=\"font-size:18px\">n = 4 , m = 4</span>\r\n<span style=\"font-size:18px\">mat = [ [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;],[&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;],[&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;],[&#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;] ]</span>\r\n<span style=\"font-size:18px\">str = &quot;bcgkjn&quot;</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> </span><span style=\"font-size:18px\">1</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>&nbsp;\r\n<span style=\"font-size:18px\">Follow the path ( 0,1 ),&nbsp;( 0,2&nbsp;),&nbsp;( 1,2&nbsp;),&nbsp;( 2,2&nbsp;),&nbsp;( 2,1 ),&nbsp;( 3,1 ).</span>\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:</span></strong>\r\n<span style=\"font-size:18px\">n = 4 , m = 4</span>\r\n<span style=\"font-size:18px\">mat = [ [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;],[&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;],[&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;],[&#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;] ]</span>\r\n<span style=\"font-size:18px\">str = &quot;adeijp&quot;</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> </span><span style=\"font-size:18px\">0</span>\r\n<strong><span style=\"font-size:18px\">Explanation:\r\n</span></strong><span style=\"font-size:18px\">No path is available following which we can generate required string.</span>&nbsp;\r\n</pre>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Constraints:</strong></span></div>\r\n\r\n<div><span style=\"font-size:18px\">1 &lt;= n,m &lt;= 6</span></div>\r\n\r\n<div><span style=\"font-size:18px\">1 &lt;= str.length&nbsp;&lt;= 15</span></div>\r\n\r\n<div><span style=\"font-size:18px\"><code>mat</code>&nbsp;and str&nbsp;consists of only lowercase</span><span style=\"font-size:18px\">&nbsp;English letters.</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>wordSearch()</strong> which takes mat[] ,and s&nbsp;as input parameters and returns 1 or 0.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(n*m)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(n*m)</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a character matrix `mat` of size `n x m` and a string `s`, determine if `s` exists within the grid. The string can be formed by traversing adjacent cells (horizontally or vertically) in the matrix.  A cell can only be used once within a path.",
                "constraints": [
                    "1 <= n, m <= 6",
                    "1 <= str.length <= 15",
                    "`mat` and `str` consist of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 4\nmat = [['a','b','c','d'],['e','f','g','h'],['i','j','k','l'],['m','n','o','p']]\nstr = \"bcgkjn\"",
                        "output": "1",
                        "explanation": "The string \"bcgkjn\" can be formed by the path (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,1) -> (3,1)."
                    },
                    {
                        "input": "n = 4, m = 4\nmat = [['a','b','c','d'],['e','f','g','h'],['i','j','k','l'],['m','n','o','p']]\nstr = \"adeijp\"",
                        "output": "0",
                        "explanation": "There is no path in the matrix that can form the string \"adeijp\" following the given constraints."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution {\r\npublic:\r\n    vector<vector<bool>> vis; //matrix to keep track of visited elements\r\n    bool dfs(vector<vector<char>>& m,string& w,int i,int j,int x,int len,int r,int c)\r\n    {\r\n        if(x==len) //if all characters of the word have been found, return true\r\n        {\r\n            return true;\r\n        }\r\n        if(i>r-1 || j>c-1 || i<0 || j<0 || vis[i][j] || m[i][j]!=w[x]) return false; //conditions for invalid indices or already visited elements or mismatch in characters\r\n        vis[i][j]=true; //mark the current element as visited\r\n        //recursive calls in all four directions to find the next character\r\n        if(dfs(m,w,i+1,j,x+1,len,r,c)||\r\n        dfs(m,w,i,j+1,x+1,len,r,c)||\r\n        dfs(m,w,i-1,j,x+1,len,r,c)||\r\n        dfs(m,w,i,j-1,x+1,len,r,c)) return true; //if any direction returns true, return true\r\n        vis[i][j]=false; //mark the current element as unvisited\r\n        return false; //if no direction returns true, return false\r\n    }\r\n    bool wordSearch(vector<vector<char>>& m, string w) {\r\n        int len=w.size(),r=m.size(),c=m[0].size(); //length of word and dimensions of matrix\r\n        vis.resize(r,vector<bool>(c)); //resize the visited matrix to match the size of matrix\r\n        for(int i=0;i<r;i++)\r\n        {\r\n            for(int j=0;j<c;j++)\r\n            {\r\n                if(dfs(m,w,i,j,0,len,r,c)) //start the dfs from each element of the matrix\r\n                {\r\n                    return true; //if word is found, return true\r\n                }\r\n            }\r\n        }\r\n        return false; //if word is not found, return false\r\n    }\r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n  public static boolean wordSearch(char[][] board, String word) {\r\n    // convert the word to a character array\r\n    char[] w = word.toCharArray();\r\n    // iterate through each cell on the board\r\n    for (int y=0; y<board.length; y++) {\r\n    \tfor (int x=0; x<board[y].length; x++) {\r\n    \t\t// check if the word can be found starting from this cell\r\n    \t\tif (exist(board, y, x, w, 0)) return true;\r\n    \t}\r\n    }\r\n    // return false if the word cannot be found on the board\r\n    return false;\r\n\r\n  }\r\n  // recursive function to check if the word can be found on the board\r\n  static boolean exist(char[][] board, int y, int x, char[] word, int i) {\r\n\t// if all characters in the word have been checked, return true\r\n\tif (i == word.length) return true;\r\n\t// if the current cell is out of bounds, return false\r\n\tif (y<0 || x<0 || y == board.length || x == board[y].length) return false;\r\n\t// if the current cell does not match the current character in the word, return false\r\n\tif (board[y][x] != word[i]) return false;\r\n\t// mark the current cell as visited by xor'ing its ASCII value with 256\r\n\tboard[y][x] ^= 256;\r\n\t// recursive check on the neighboring cells\r\n\tboolean exist = exist(board, y, x+1, word, i+1)\r\n\t\t|| exist(board, y, x-1, word, i+1)\r\n\t\t|| exist(board, y+1, x, word, i+1)\r\n\t\t|| exist(board, y-1, x, word, i+1);\r\n\t// reset the cell to its original value\r\n\tboard[y][x] ^= 256;\r\n\t// return the result of the recursive check\r\n\treturn exist;\r\n  }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    bool[,] vis; //matrix to keep track of visited elements\n    bool dfs(char[][] m, string w, int i, int j, int x, int len, int r, int c)\n    {\n        if (x == len) //if all characters of the word have been found, return true\n        {\n            return true;\n        }\n        if (i >= r || j >= c || i < 0 || j < 0 || vis[i, j] || m[i][j] != w[x]) return false; //conditions for invalid indices or already visited elements or mismatch in characters\n        vis[i, j] = true; //mark the current element as visited\n        //recursive calls in all four directions to find the next character\n        if (dfs(m, w, i + 1, j, x + 1, len, r, c) ||\n        dfs(m, w, i, j + 1, x + 1, len, r, c) ||\n        dfs(m, w, i - 1, j, x + 1, len, r, c) ||\n        dfs(m, w, i, j - 1, x + 1, len, r, c)) return true; //if any direction returns true, return true\n        vis[i, j] = false; //mark the current element as unvisited\n        return false; //if no direction returns true, return false\n    }\n    public bool wordSearch(char[][] m, string w)\n    {\n        int len = w.Length, r = m.Length, c = m[0].Length; //length of word and dimensions of matrix\n        vis = new bool[r, c]; //resize the visited matrix to match the size of matrix\n        for (int i = 0; i < r; i++)\n        {\n            for (int j = 0; j < c; j++)\n            {\n                if (dfs(m, w, i, j, 0, len, r, c)) //start the dfs from each element of the matrix\n                {\n                    return true; //if word is found, return true\n                }\n            }\n        }\n        return false; //if word is not found, return false\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}