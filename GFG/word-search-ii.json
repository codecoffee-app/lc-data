{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876764,
            "title": "Word Search II",
            "titleSlug": "word-search-ii",
            "content": "<p><span >Given a <strong>2-D board </strong>of characters of size <strong>n</strong>x<strong>m</strong> and a list of string <strong>words</strong>. Return a list of words that are present in the board in <strong>any</strong> order.</span></p>\n<p><span >Each word must be constructed from letters of sequentially <strong>adjacent</strong> cells, where adjacent cells are <strong>horizontally</strong> or <strong>vertically</strong> connected.&nbsp;<br />The same letter cell cannot be used more than once in a word. A single-letter cell can be used for many different words.</span></p>\n<p><span >Note: Driver code will sort the returned list before printing.</span></p>\n<p><strong><span >Examples:</span></strong></p>\n<pre><strong><span >Input: </span></strong><span >board[][] = [['o', 'a', 'a', 'n'], ['e', 't', 'a', 'e'], ['i', 'h', 'k', 'r'], ['i', 'f', 'l', 'v']], words[] = [\"oath\", \"pea\", \"eat\", \"rain\"]<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/876764/Web/Other/blobid0_1732516922.jpg\" width=\"312\" height=\"276\" /><br /><strong>Output: </strong>[\"eat\", \"oath\"]<br /></span></pre>\n<pre><strong><span >Input:</span></strong><span > board[][] = [['a', 'b'],['c', 'd']], words[] = [\"abcb\"]<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/876764/Web/Other/blobid0_1732517302.jpg\" height=\"100\" /><br /><strong>Output: </strong>[]</span></pre>\n<p><strong><span >Constraints:<br /></span></strong><span >1&nbsp; &lt;=&nbsp; n, m&nbsp; &lt;=&nbsp; 12</span><span ><br />1&nbsp; &lt;=&nbsp; words.size() &nbsp;&lt;=&nbsp; 3*10<sup>4</sup><br />1&nbsp; &lt;=&nbsp; words[i].length() &nbsp;&lt;=&nbsp; 10<br />All strings of words are <strong>unique</strong> and only consist of <strong>lowercase</strong> English letters</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D board of characters (n x m) and a list of words, find all words from the list that can be formed on the board. Words can be constructed from sequentially adjacent cells (horizontally or vertically).  The same cell cannot be used more than once within a single word, but a single-letter cell can be used for different words.",
                "constraints": [
                    "1 <= n, m <= 12",
                    "1 <= words.size() <= 3 * 10^4",
                    "1 <= words[i].length() <= 10",
                    "All strings in 'words' are unique and consist only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "board = [['o', 'a', 'a', 'n'], ['e', 't', 'a', 'e'], ['i', 'h', 'k', 'r'], ['i', 'f', 'l', 'v']], words = ['oath', 'pea', 'eat', 'rain']",
                        "output": "['eat', 'oath']",
                        "explanation": "The words 'eat' and 'oath' can be found in the board by traversing adjacent cells."
                    },
                    {
                        "input": "board = [['a', 'b'],['c', 'd']], words = ['abcb']",
                        "output": "[]",
                        "explanation": "The word 'abcb' cannot be found in the board following the adjacency and single-use rule."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Trie Data Structure</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class TrieNode {\n  public:\n    unordered_map<char, TrieNode*> children;\n    string word;\n\n    TrieNode()\n        : word(\"\") {}\n};\n\nclass Solution {\n  private:\n    vector<vector<char>> _board;\n    vector<string> _result;\n\n  public:\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        // Step 1). Construct the Trie\n        TrieNode* root = new TrieNode();\n        for (string& word : words) {\n            TrieNode* node = root;\n            for (char letter : word) {\n                if (node->children.find(letter) != node->children.end()) {\n                    node = node->children[letter];\n                } else {\n                    TrieNode* newNode = new TrieNode();\n                    node->children[letter] = newNode;\n                    node = newNode;\n                }\n            }\n            node->word = word; // store words in Trie\n        }\n\n        this->_board = board;\n        // Step 2). Backtracking starting for each cell in the board\n        for (int row = 0; row < board.size(); ++row) {\n            for (int col = 0; col < board[row].size(); ++col) {\n                if (root->children.find(board[row][col]) != root->children.end()) {\n                    backtracking(row, col, root);\n                }\n            }\n        }\n\n        return this->_result;\n    }\n\n  private:\n    void backtracking(int row, int col, TrieNode* parent) {\n        char letter = this->_board[row][col];\n        TrieNode* currNode = parent->children[letter];\n\n        // check if there is any match\n        if (currNode->word != \"\") {\n            this->_result.push_back(currNode->word);\n            currNode->word = \"\"; // prevent duplicate entries\n        }\n\n        // mark the current letter before the EXPLORATION\n        this->_board[row][col] = '#';\n\n        // explore neighbor cells in around-clock directions: up, right, down,\n        // left\n        int rowOffset[] = {-1, 0, 1, 0};\n        int colOffset[] = {0, 1, 0, -1};\n        for (int i = 0; i < 4; ++i) {\n            int newRow = row + rowOffset[i];\n            int newCol = col + colOffset[i];\n            if (newRow < 0 || newRow >= this->_board.size() || newCol < 0 ||\n                newCol >= this->_board[0].size()) {\n                continue;\n            }\n            if (currNode->children.find(this->_board[newRow][newCol]) !=\n                currNode->children.end()) {\n                backtracking(newRow, newCol, currNode);\n            }\n        }\n\n        // End of EXPLORATION, restore the original letter in the board.\n        this->_board[row][col] = letter;\n\n        // Optimization: incrementally remove the leaf nodes\n        if (currNode->children.empty()) {\n            parent->children.erase(letter);\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass TrieNode {\n    HashMap<Character, TrieNode> children = new HashMap<Character, TrieNode>();\n    String word = null;\n\n    public TrieNode() {}\n}\n\nclass Solution {\n    char[][] _board = null;\n    ArrayList<String> _result = new ArrayList<String>();\n\n    public ArrayList<String> findWords(char[][] board, String[] words) {\n        // Step 1). Construct the Trie\n        TrieNode root = new TrieNode();\n        for (String word : words) {\n            TrieNode node = root;\n\n            for (Character letter : word.toCharArray()) {\n                if (node.children.containsKey(letter)) {\n                    node = node.children.get(letter);\n                } else {\n                    TrieNode newNode = new TrieNode();\n                    node.children.put(letter, newNode);\n                    node = newNode;\n                }\n            }\n            node.word = word; // store words in Trie\n        }\n\n        this._board = board;\n        // Step 2). Backtracking starting for each cell in the board\n        for (int row = 0; row < board.length; ++row) {\n            for (int col = 0; col < board[row].length; ++col) {\n                if (root.children.containsKey(board[row][col])) {\n                    backtracking(row, col, root);\n                }\n            }\n        }\n        return this._result;\n    }\n\n    private void backtracking(int row, int col, TrieNode parent) {\n        Character letter = this._board[row][col];\n        TrieNode currNode = parent.children.get(letter);\n\n        // check if there is any match\n        if (currNode.word != null) {\n            this._result.add(currNode.word);\n            currNode.word = null;\n        }\n\n        // mark the current letter before the EXPLORATION\n        this._board[row][col] = '#';\n\n        // explore neighbor cells in around-clock directions: up, right, down, left\n        int[] rowOffset = {-1, 0, 1, 0};\n        int[] colOffset = {0, 1, 0, -1};\n        for (int i = 0; i < 4; ++i) {\n            int newRow = row + rowOffset[i];\n            int newCol = col + colOffset[i];\n            if (newRow < 0 || newRow >= this._board.length || newCol < 0 ||\n                newCol >= this._board[0].length) {\n                continue;\n            }\n            if (currNode.children.containsKey(this._board[newRow][newCol])) {\n                backtracking(newRow, newCol, currNode);\n            }\n        }\n\n        // End of EXPLORATION, restore the original letter in the board.\n        this._board[row][col] = letter;\n\n        // Optimization: incrementally remove the leaf nodes\n        if (currNode.children.isEmpty()) {\n            parent.children.remove(letter);\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        WORD_KEY = \"$\"\n\n        trie = {}\n        for word in words:\n            node = trie\n            for letter in word:\n                # retrieve the next node; If not found, create a empty node.\n                node = node.setdefault(letter, {})\n            # mark the existence of a word in trie node\n            node[WORD_KEY] = word\n\n        rowNum = len(board)\n        colNum = len(board[0])\n\n        matchedWords = []\n\n        def backtracking(row, col, parent):\n\n            letter = board[row][col]\n            currNode = parent[letter]\n\n            # check if we find a match of word\n            word_match = currNode.pop(WORD_KEY, False)\n            if word_match:\n                # also we removed the matched word to avoid duplicates,\n                #   as well as avoiding using set() for results.\n                matchedWords.append(word_match)\n\n            # Before the EXPLORATION, mark the cell as visited\n            board[row][col] = \"#\"\n\n            # Explore the neighbors in 4 directions, i.e. up, right, down, left\n            for rowOffset, colOffset in [(-1, 0), (0, 1), (1, 0), (0, -1)]:\n                newRow, newCol = row + rowOffset, col + colOffset\n                if (newRow < 0 or newRow >= rowNum or newCol < 0\n                        or newCol >= colNum):\n                    continue\n                if not board[newRow][newCol] in currNode:\n                    continue\n                backtracking(newRow, newCol, currNode)\n\n            # End of EXPLORATION, we restore the cell\n            board[row][col] = letter\n\n            # Optimization: incrementally remove the matched leaf node in Trie.\n            if not currNode:\n                parent.pop(letter)\n\n        for row in range(rowNum):\n            for col in range(colNum):\n                # starting from each of the cells\n                if board[row][col] in trie:\n                    backtracking(row, col, trie)\n\n        return matchedWords\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    /**\n     * @param {char[][]} board\n     * @param {string[]} words\n     * @return {string[]}\n     */\n    findWords(board, words) {\n        const WORD_KEY = '$';\n        const trie = {};\n\n        // Build the Trie from the words\n        for (const word of words) {\n            let node = trie;\n            for (const letter of word) {\n                node = node[letter] || (node[letter] = {});\n            }\n            node[WORD_KEY] = word;\n        }\n\n        const rowNum = board.length;\n        const colNum = board[0].length;\n        const matchedWords = [];\n\n        const backtracking = (row, col, parent) => {\n            const letter = board[row][col];\n            const currNode = parent[letter];\n\n            // Check if we find a match of word\n            const wordMatch = currNode[WORD_KEY];\n            if (wordMatch) {\n                matchedWords.push(wordMatch);\n                delete currNode[WORD_KEY]; // Remove the matched word to avoid\n                                           // duplicates\n            }\n\n            // Before the exploration, mark the cell as visited\n            board[row][col] = '#';\n\n            // Explore the neighbors in 4 directions\n            const directions = [\n                [ -1, 0 ], // up\n                [ 0, 1 ],  // right\n                [ 1, 0 ],  // down\n                [ 0, -1 ]  // left\n            ];\n            for (const [rowOffset, colOffset] of directions) {\n                const newRow = row + rowOffset;\n                const newCol = col + colOffset;\n                if (newRow < 0 || newRow >= rowNum || newCol < 0 || newCol >= colNum ||\n                    !(board[newRow][newCol] in currNode)) {\n                    continue;\n                }\n                backtracking(newRow, newCol, currNode);\n            }\n\n            // End of exploration, restore the cell\n            board[row][col] = letter;\n\n            // Optimization: incrementally remove the matched leaf node in Trie\n            if (Object.keys(currNode).length === 0) {\n                delete parent[letter];\n            }\n        };\n\n        for (let row = 0; row < rowNum; row++) {\n            for (let col = 0; col < colNum; col++) {\n                // Starting from each of the cells\n                if (board[row][col] in trie) {\n                    backtracking(row, col, trie);\n                }\n            }\n        }\n\n        return matchedWords;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}