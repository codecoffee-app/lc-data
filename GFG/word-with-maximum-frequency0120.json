{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703081,
            "title": "Word with maximum frequency",
            "titleSlug": "word-with-maximum-frequency0120",
            "content": "<p><span style=\"font-size: 18px;\">You are given a string <strong>s</strong>&nbsp;that is made up of words separated by spaces. Your task is to find the word with the highest frequency, i.e. it appears the most times in the sentence. If multiple words have maximum frequency, then print the word that occurs first in the sentence.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"the devil in the sky\"\n<strong>Output:</strong> \"the 2\"\n<strong>Explanation: </strong>The frequency of \"<em>the\"</em> is 2, so we return \"<em>the\"</em> and its frequency \"2\" i.e., <strong>\"the 2\" \n</strong></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = \"this is not right\"\n<strong>Output</strong>: \"this 1\"\n<strong>Explanation: </strong>Every word has the frequency of \"1\", so we return \"<em>this 1\" </em>as <em>this </em>occurs first in the sentence. \n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; s.size() &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of words separated by spaces, find the word with the highest frequency. If multiple words share the maximum frequency, return the word that appears first in the string along with its frequency.",
                "constraints": [
                    "1 <= s.size() <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "the devil in the sky",
                        "output": "the 2",
                        "explanation": "The word 'the' appears twice, which is the highest frequency among all words in the input string. Therefore, the output is 'the 2'."
                    },
                    {
                        "input": "this is not right",
                        "output": "this 1",
                        "explanation": "All words appear only once. Since 'this' appears first, the output is 'this 1'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use a map to assign a frequency to each word. Find the max frequency and the word associated with it by traversing the words of the string and checking the words for their freuqency in the map.</span></p>\n\n<p><span style=\"font-size:18px\">&nbsp; &nbsp; &nbsp;&nbsp; </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string maximumFrequency(string &str) {\n        // stringstream to split the given string into words\n        std::istringstream stm(str);\n\n        string word; // variable to store each word\n\n        vector<string> words; // vector to store all the words\n\n        // Splitting the string and storing the words in the vector\n        while (stm >> word)\n            words.push_back(word);\n\n        unordered_map<string, int> freq; // map to store the frequency of each word\n        for (int j = 0; j < words.size(); j++) {\n            // If the word is not already present in the map, insert it with frequency 1\n            if (freq.count(words[j]) == 0) {\n                freq.insert(pair<string, int>(words[j], 1));\n            }\n            // If the word is already present, increment its frequency\n            else {\n                freq[words[j]]++;\n            }\n        }\n        int maxx = -1;      // variable to store the maximum frequency\n        string answer = \"\"; // variable to store the word with maximum frequency\n\n        // Finding the word with maximum frequency\n        for (int j = 0; j < words.size(); j++) {\n            if (freq[words[j]] > maxx) {\n                maxx = freq[words[j]];\n                answer = words[j];\n            }\n        }\n\n        // Storing the result in the required format\n        string ans = answer;\n        ans += \" \";\n        ans += to_string(maxx);\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public String maximumFrequency(String str) {\n        // Splitting the string into words\n        String[] words = str.split(\"\\\\s+\");\n\n        // Map to store the frequency of each word\n        Map<String, Integer> freq = new HashMap<>();\n\n        // Calculating the frequency of each word\n        for (String word : words) {\n            freq.put(word, freq.getOrDefault(word, 0) + 1);\n        }\n\n        // Finding the word with the maximum frequency\n        int maxFreq = -1;\n        String answer = \"\";\n\n        for (String word : words) {\n            if (freq.get(word) > maxFreq) {\n                maxFreq = freq.get(word);\n                answer = word;\n            }\n        }\n\n        // Storing the result in the required format\n        String ans = answer + \" \" + maxFreq;\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def maximumFrequency(self, str):\n        # Splitting the string into words\n        words = str.split()\n\n        # Dictionary to store the frequency of each word\n        freq = {}\n\n        # Calculating the frequency of each word\n        for word in words:\n            if word in freq:\n                freq[word] += 1\n            else:\n                freq[word] = 1\n\n        # Finding the word with the maximum frequency\n        max_freq = -1\n        answer = \"\"\n\n        for word in words:\n            if freq[word] > max_freq:\n                max_freq = freq[word]\n                answer = word\n\n        # Storing the result in the required format\n        ans = \"{} {}\".format(answer, max_freq)\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    maximumFrequency(str) {\n        let words = str.split(/\\s+/); // Split the string into words\n        let freq = new Map();         // Map to store the frequency of each word\n\n        // Count the frequency of each word\n        for (let word of words) {\n            freq.set(word, (freq.get(word) || 0) + 1);\n        }\n\n        let maxCount = -1;\n        let answer = \"\";\n\n        // Find the word with the maximum frequency\n        for (let word of words) {\n            let count = freq.get(word);\n            if (count > maxCount) {\n                maxCount = count;\n                answer = word;\n            }\n        }\n\n        // Return the result in the required format\n        return `${answer} ${maxCount}`;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}