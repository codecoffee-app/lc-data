{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705739,
            "title": "Word Wrap",
            "titleSlug": "word-wrap1646",
            "content": "<div class=\"row bottom\">\n<div class=\"col-xs-12 textAlign\">\n<div class=\"modifiedAnswer\">\n<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>, where&nbsp;<strong>arr[i]</strong>&nbsp;denotes the number of characters in one word.</span><span style=\"font-size: 18px;\"> Let <strong>k</strong> be the&nbsp;limit on the number of characters that can be put in one line (line width). Put line breaks in the given sequence such that the lines are printed neatly.<br />Assume that the length of each word is smaller than the line width. When line breaks are inserted there is a possibility that extra spaces are present in each line. The extra spaces include spaces put at the end of every line <strong>except the last one</strong>.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\">You have&nbsp;to <strong>minimize </strong>the following total cost where <strong>total cost </strong>= Sum of cost of all lines, where cost of line is = (Number of extra spaces in the line)<sup>2</sup>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3,2,2,5], k = 6\n<strong>Output: </strong>10\n<strong>Explanation</strong>: Given a line can have 6 characters,\nLine number 1: From word no. 1 to 1\nLine number 2: From word no. 2 to 3\nLine number 3: From word no. 4 to 4\nSo total cost = (6-3)<sup>2</sup> + (6-2-2-1)<sup>2</sup> = 3<sup>2</sup>+1<sup>2</sup> = 10. As in the first line word length = 3 thus extra spaces = 6 - 3 = 3 and in the second line there are two word of length 2 and there already 1 space between two word thus extra spaces = 6 - 2 -2 -1 = 1. As mentioned in the problem description there will be no extra spaces in the last line. Placing first and second word in first line and third word on second line would take a cost of 0<sup>2</sup> + 4<sup>2</sup> = 16 (zero spaces on first line and 6-2 = 4 spaces on second), which isn't the minimum possible cost.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3,2,2], k = 4\n<strong>Output: </strong>5\n<strong>Explanation: </strong>Given a line can have 4 characters,\nLine number 1: From word no. 1 to 1\nLine number 2: From word no. 2 to 2\nLine number 3: From word no. 3 to 3\nSame explaination as above total cost = (4 - 3)<sup>2</sup> + (4 - 2)<sup>2</sup> = 5<strong>.</strong></span>&nbsp;&nbsp;</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 500<br />1 &le; arr[i] &le; 1000<br />max(arr[i]) &le; k &le; 2000</span></p>\n</div>\n</div>\n</div>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of word lengths and a line width `k`, find the minimum cost to arrange the words into lines. The cost of each line is the square of the number of extra spaces at the end of the line (excluding the last line).  The length of each word is smaller than the line width. Minimize the total cost across all lines.",
                "constraints": [
                    "1 \u2264 arr.length \u2264 500",
                    "1 \u2264 arr[i] \u2264 1000",
                    "max(arr[i]) \u2264 k \u2264 2000"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [3, 2, 2, 5], k = 6",
                        "output": "10",
                        "explanation": "Optimal arrangement: Line 1: word 1 (length 3), Line 2: words 2 & 3 (lengths 2 & 2), Line 3: word 4 (length 5). Cost = (6-3)^2 + (6-2-2-1)^2 + 0^2 = 9 + 1 + 0 = 10. (Note the '1' in the second term is for the space between words 2 and 3)."
                    },
                    {
                        "input": "arr[] = [3, 2, 2], k = 4",
                        "output": "5",
                        "explanation": "Optimal arrangement: Line 1: word 1 (length 3), Line 2: words 2 & 3 (lengths 2 & 2). Cost = (4-3)^2 + (4-2)^2 = 1 + 4 = 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Dynamic Programming.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the minimum cost of word wrapping.\n    int solveWordWrap(vector<int> arr, int k) {\n        int n = arr.size();\n        int i, j;\n        int currlen;\n        int cost;\n\n        // Initializing dp and ans vectors.\n        vector<int> dp(n, 0);\n        vector<int> ans(n, 0);\n        dp[n - 1] = 0;\n        ans[n - 1] = n - 1;\n\n        // Calculating dp values from right to left.\n        for (i = n - 2; i >= 0; i--) {\n            currlen = -1;\n            dp[i] = INT_MAX;\n\n            // Calculating cost for current line wrappings.\n            for (j = i; j < n; j++) {\n                currlen += (arr[j] + 1);\n\n                // If current line length exceeds the limit, break.\n                if (currlen > k)\n                    break;\n\n                // Calculating cost for current wrapping.\n                if (j == n - 1)\n                    cost = 0;\n                else\n                    cost = (k - currlen) * (k - currlen) + dp[j + 1];\n\n                // Updating dp and ans vectors.\n                if (cost < dp[i]) {\n                    dp[i] = cost;\n                    ans[i] = j;\n                }\n            }\n        }\n        int res = 0;\n        i = 0;\n\n        // Calculating final result by summing up the costs.\n        while (i < n) {\n            int pos = 0;\n\n            // Calculating positions for current line wrappings.\n            for (int j = i; j < ans[i] + 1; j++) {\n                pos += arr[j];\n            }\n\n            // Calculating cost of extra spaces.\n            int x = ans[i] - i;\n            if (ans[i] + 1 != arr.size())\n                res += (k - x - pos) * (k - x - pos);\n\n            // Updating i to next line wrapping.\n            i = ans[i] + 1;\n        }\n\n        // Returning the final result.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int solveWordWrap(int[] arr, int k) {\n        // Code here\n        int n = arr.length;\n        int i, j;\n\n        // Variable to store\n        // number of characters\n        // in given line.\n        int currlen;\n\n        // Variable to store\n        // possible minimum\n        // cost of line.\n        int cost;\n\n        // DP table in which\n        // dp[i] represents\n        // cost of line starting\n        // with word arr[i].\n        int dp[] = new int[n];\n\n        // Array in which ans[i]\n        // store index of last\n        // word in line starting\n        // with word arr[i].\n        int ans[] = new int[n];\n\n        // If only one word is present\n        // then only one line is required.\n        // Cost of last line is zero.\n        // Hence cost of this line is zero.\n        // Ending point is also n-1 as\n        // single word is present.\n        dp[n - 1] = 0;\n        ans[n - 1] = n - 1;\n\n        // Make each word first\n        // word of line by iterating\n        // over each index in arr.\n        for (i = n - 2; i >= 0; i--) {\n            currlen = -1;\n            dp[i] = Integer.MAX_VALUE;\n\n            // Keep on adding words in\n            // current line by iterating\n            // from starting word upto\n            // last word in arr.\n            for (j = i; j < n; j++) {\n\n                // Update number of characters\n                // in current line. arr[j] is\n                // number of characters in\n                // current word and 1\n                // represents space character\n                // between two words.\n                currlen += (arr[j] + 1);\n\n                // If limit of characters\n                // is violated then no more\n                // words can be added to\n                // current line.\n                if (currlen > k) break;\n\n                // If current word that is\n                // added to line is last\n                // word of arr then current\n                // line is last line. Cost of\n                // last line is 0. Else cost\n                // is square of extra spaces\n                // plus cost of putting line\n                // breaks in rest of words\n                // from j+1 to n-1.\n                if (j == n - 1)\n                    cost = 0;\n                else\n                    cost = (k - currlen) * (k - currlen) + dp[j + 1];\n\n                // Check if this arrangement\n                // gives minimum cost for\n                // line starting with word\n                // arr[i].\n                if (cost < dp[i]) {\n                    dp[i] = cost;\n                    ans[i] = j;\n                }\n            }\n        }\n        int res = 0;\n        i = 0;\n        while (i < n) {\n            int pos = 0;\n            for (j = i; j < ans[i] + 1; j++) {\n                pos += arr[j];\n            }\n            int x = ans[i] - i;\n            if (ans[i] + 1 != n) res += (k - x - pos) * (k - x - pos);\n            i = ans[i] + 1;\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\nimport sys\n\n\nclass Solution:\n\n    def solveWordWrap(self, arr, k):\n        n = len(arr)\n        dp = [0] * n  # initialize dp array with 0\n        ans = [0] * n  # initialize ans array with 0\n        dp[n - 1] = 0  # set value of dp for last word to 0\n        ans[n - 1] = n - 1  # set value of ans for last word to n-1\n\n        # iterate from second last word to first word\n        for i in range(n - 2, -1, -1):\n            currlen = -1  # initialize currlen with -1\n            dp[i] = sys.maxsize  # set value of dp for current word to maximum possible value\n            for j in range(i, n):\n                currlen += (arr[j] + 1\n                            )  # update currlen with length of current word\n                if currlen > k:  # if currlen exceeds the given limit, break the loop\n                    break\n                if j == n - 1:  # if the current word is the last word, set cost to 0\n                    cost = 0\n                else:\n                    cost = ((k - currlen) * (k - currlen) + dp[j + 1]\n                            )  # calculate the cost\n                if cost < dp[\n                        i]:  # if current cost is less than dp for the current word, update dp and ans\n                    dp[i] = cost\n                    ans[i] = j\n\n        i = 0  # initialize i to 0\n        res = 0  # initialize res to 0\n        while i < n:\n            pos = 0  # initialize pos to 0\n            for j in range(i, ans[i] + 1):\n                pos = pos + arr[\n                    j]  # calculate the sum of lengths of words in the line\n            x = ans[i] - i  # calculate the number of extra spaces in the line\n            if ans[i] + 1 != n:\n                res = res + (k - x - pos\n                             )**2  # calculate the additional cost for the line\n            i = ans[i] + 1  # move to the next line\n        return res  # return the total cost of word wrapping\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the minimum cost of word wrapping.\n    solveWordWrap(arr, k) {\n        const n = arr.length;\n        let dp = new Array(n).fill(0);  // dp array\n        let ans = new Array(n).fill(0); // ans array\n\n        dp[n - 1] = 0;      // Base case: no cost for the last word\n        ans[n - 1] = n - 1; // Last word wraps itself\n\n        // Calculating dp values from right to left\n        for (let i = n - 2; i >= 0; i--) {\n            let currlen = -1;\n            dp[i] = Number.MAX_SAFE_INTEGER; // Initialize with a large value\n\n            // Calculating cost for current line wrappings\n            for (let j = i; j < n; j++) {\n                currlen += (arr[j] + 1);\n\n                // If current line length exceeds the limit, break\n                if (currlen > k) break;\n\n                // Calculating cost for current wrapping\n                let cost = 0;\n                if (j === n - 1) {\n                    cost = 0; // No cost for the last line\n                } else {\n                    cost = Math.pow(k - currlen, 2) + dp[j + 1];\n                }\n\n                // Updating dp and ans arrays\n                if (cost < dp[i]) {\n                    dp[i] = cost;\n                    ans[i] = j;\n                }\n            }\n        }\n\n        let res = 0;\n        let i = 0;\n\n        // Calculating the final result by summing up the costs\n        while (i < n) {\n            let pos = 0;\n\n            // Calculating positions for current line wrappings\n            for (let j = i; j <= ans[i]; j++) {\n                pos += arr[j];\n            }\n\n            // Calculating the cost of extra spaces\n            let x = ans[i] - i;\n            if (ans[i] + 1 !== arr.length) {\n                res += Math.pow(k - x - pos, 2);\n            }\n\n            // Updating i to the next line wrapping\n            i = ans[i] + 1;\n        }\n\n        // Returning the final result\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}