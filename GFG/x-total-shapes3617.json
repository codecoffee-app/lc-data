{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701737,
            "title": "X Total Shapes",
            "titleSlug": "x-total-shapes3617",
            "content": "<p><span style=\"font-size: 18px;\">Given&nbsp; a grid of <strong>n</strong>*<strong>m</strong>&nbsp;consisting<strong>&nbsp;</strong>of <strong>O<code>'s</code></strong>&nbsp;and <strong>X<code>'s</code></strong>. The task is to find the number of '<strong>X</strong>' total shapes.<br /><strong>Note:&nbsp;</strong>'<strong>X</strong>' shape consists of one or more adjacent <strong>X</strong><code>'s</code>&nbsp;(diagonals not included).</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>grid = {{X,O,X},{O,X,O},{X,X,X}}\n<strong>Output: </strong>3\n<strong>Explanation: \n</strong>The grid is-\n<span style=\"color: #ee82ee;\"><strong>X</strong></span> O <span style=\"color: #ff8c00;\"><strong>X</strong></span>\nO <span style=\"color: #00ff00;\"><strong>X</strong></span> O\n<strong><span style=\"color: #00ff00;\">X</span> <span style=\"color: #00ff00;\">X</span> <span style=\"color: #00ff00;\">X</span>\n</strong>So, X with same colour are adjacent to each \nother vertically for horizontally (diagonals \nnot included). So, there are 3 different groups \nin the given grid.</span>\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>grid = {{X,X},{X,X}}\n<strong>Output: </strong>1\n<strong>Expanation: \n</strong>The grid is- \n<span style=\"color: #ee82ee;\"><strong>X</strong></span> <span style=\"color: #ee82ee;\"><strong>X</strong></span>\n<strong><span style=\"color: #ee82ee;\">X</span> <span style=\"color: #ee82ee;\">X</span></strong>\nSo, X with same colour are adjacent to each\nother vertically for horizontally (diagonals\nnot included). So, there is only 1 group\nin the given grid.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function <strong>xShape()&nbsp;</strong>which takes grid as input parameter and returns the count of total X shapes.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Compelxity:&nbsp;</strong>O(n*m)<br /><strong>Expected Space Compelxity:&nbsp;</strong>O(n*m)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n, m&nbsp;&le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a grid of n*m consisting of 'O's and 'X's, find the number of distinct 'X' shapes. An 'X' shape consists of one or more adjacent 'X's (horizontally or vertically, diagonals not included).",
                "constraints": [
                    "1 <= n, m <= 100"
                ],
                "testcases": [
                    {
                        "input": "grid = {{X,O,X},{O,X,O},{X,X,X}}",
                        "output": "3",
                        "explanation": "The grid contains three distinct 'X' shapes. One in the top left corner, one in the top right corner, and one composed of the three 'X's in the bottom row and the single 'X' in the middle."
                    },
                    {
                        "input": "grid = {{X,X},{X,X}}",
                        "output": "1",
                        "explanation": "All 'X's are connected, forming a single 'X' shape."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n\nclass Solution \n{\n    public:\n    void dfs(vector<vector<char>>& grid, int x, int y)\n    {\n        //checking whether the cell is within the matrix bounds.\n        if(x<0||y<0||x>=grid.size()||grid[x].size()<=y){\n            return ;\n        }\n        //if grid value is X, we update the grid value as 0 and\n        //call the function recursively for adjacent nodes.\n    \tif(grid[x][y]=='X')\n    \t{\n    \t\tgrid[x][y]='O';\n    \t\tdfs(grid,x+1,y);dfs(grid,x,y+1);dfs(grid,x-1,y);dfs(grid,x,y-1);\n    \t}\n    }\n    \n    //Function to find the number of 'X' total shapes.\n    int xShape(vector<vector<char>>& grid) \n    {\n    \tint n=grid.size();\n    \tint m=grid[0].size();\n        int i,j,ans=0;\n        \n        //traversing all the cells of the matrix.\n    \tfor(i=0;i<grid.size();i++)\n    \t{\n    \t\tfor(j=0;j<grid[i].size();j++)\n    \t\t{\n    \t\t    //if grid value is X, we increment the counter and\n                //call the dfs function.\n    \t\t\tif(grid[i][j]=='X'){\n    \t\t\t\tans++;\n    \t\t\t\tdfs(grid, i,j);\n    \t\t\t}\n    \t\t}\n    \t}\n    \t//returning the count.\n    \treturn ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution\n{\n    void dfs(char[][] grid, int x, int y)\n    {\n        //checking whether the cell is within the matrix bounds.\n        if(x<0||y<0||x>=grid.length||grid[x].length<=y)\n        {\n            return ;\n        }\n        \n        //if grid value is X, we update the grid value as 0 and\n        //call the function recursively for adjacent nodes.\n    \tif(grid[x][y]=='X')\n    \t{\n    \t\tgrid[x][y]='O';\n    \t\tdfs(grid,x+1,y);dfs(grid,x,y+1);dfs(grid,x-1,y);dfs(grid,x,y-1);\n    \t}\n    }\n    \n    //Function to find the number of 'X' total shapes.\n    public int xShape(char[][] grid)\n    {\n        int n=grid.length;\n        int m=grid[0].length;\n        int i,j,ans=0;\n        \n        //traversing all the cells of the matrix.\n        for(i=0;i<grid.length;i++)\n        {\n            for(j=0;j<grid[i].length;j++)\n            {\n                //if grid value is X, we increment the counter and\n                //call the dfs function.\n                if(grid[i][j]=='X'){\n\t\t\t\tans++;\n\t\t\t\tdfs(grid, i,j);\n\t\t\t    }\n\t\t    }\n\t    }\n\t    //returning the count.\n\t    return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "import sys\nfrom collections import deque\n\n\nclass Solution:\n\n    #Function to check whether the cell is within the matrix bounds.\n    def isValid(self, x, y, n, m):\n        return (x >= 0 and x < n and y >= 0 and y < m)\n\n    #Function to find the number of 'X' total shapes.\n    def xShape(self, grid):\n\n        n = len(grid)\n        m = len(grid[0])\n        dx = [-1, 1, 0, 0]\n        dy = [0, 0, -1, 1]\n        q = deque()\n        ans = 0\n\n        #traversing all the cells of the matrix.\n        for i in range(n):\n            for j in range(m):\n\n                #if grid value is X, we increment the counter, update grid\n                #value as 0 and push cell index in queue.\n                if (grid[i][j] == 'X'):\n                    ans = ans + 1\n                    grid[i][j] = 'O'\n                    q.append([i, j])\n\n                    while (len(q)):\n                        cur = q.popleft()\n                        x = cur[0]\n                        y = cur[1]\n\n                        #traversing all the adjacent cells.\n                        for k in range(4):\n                            n_x = x + dx[k]\n                            n_y = y + dy[k]\n\n                            #if grid value is X and cell is within bounds, we\n                            #update grid value as 0 and push cell index in queue.\n                            if (self.isValid(n_x, n_y, n, m)\n                                    and grid[n_x][n_y] == 'X'):\n                                grid[n_x][n_y] = 'O'\n                                q.append([n_x, n_y])\n\n        #returning the count.\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {character[][]} grid\n * @returns {number}\n*/\nclass Solution \n{\n    dfs(grid, x, y)\n    {\n        //checking whether the cell is within the matrix bounds.\n        if(x<0||y<0||x>=grid.length||grid[x].length<=y){\n            return ;\n        }\n        \n        //if grid value is X, we update the grid value as 0 and\n        //call the function recursively for adjacent nodes.\n    \tif(grid[x][y]=='X')\n    \t{\n    \t\tgrid[x][y]='O';\n    \t\tthis.dfs(grid,x+1,y);this.dfs(grid,x,y+1);\n    \t\tthis.dfs(grid,x-1,y);this.dfs(grid,x,y-1);\n    \t}\n    }\n    \n    //Function to find the number of 'X' total shapes.\n    xShape(grid) \n    {\n    \tlet n=grid.length;\n    \tlet m=grid[0].length;\n        let i,j,ans=0;\n        \n        //traversing all the cells of the matrix.\n    \tfor(i=0;i<grid.length;i++)\n    \t{\n    \t\tfor(j=0;j<grid[i].length;j++)\n    \t\t{\n    \t\t    //if grid value is X, we increment the counter and\n                //call the dfs function.\n    \t\t\tif(grid[i][j]=='X'){\n    \t\t\t\tans++;\n    \t\t\t\tthis.dfs(grid, i,j);\n    \t\t\t}\n    \t\t}\n    \t}\n    \t//returning the count.\n    \treturn ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}