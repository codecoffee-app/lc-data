{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706299,
            "title": "Minimum X (xor) A",
            "titleSlug": "x-xor-a-is-minimum-and-set-bits-in-x-b",
            "content": "<p><span style=\"font-size:18px\">Given two integers&nbsp;<strong>A</strong>&nbsp;and&nbsp;<strong>B</strong>, the task is to find an integer&nbsp;<strong>X</strong>&nbsp;such that&nbsp;<strong>(X XOR A)</strong>&nbsp;is minimum possible and the count of set bit in&nbsp;<strong>X</strong>&nbsp;is equal to the count of set bits in&nbsp;<strong>B</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\nA = 3, B = 5\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong>\r\nBinary(A) = Binary(3) = 011\r\nBinary(B) = Binary(5) = 101\r\nThe XOR will be minimum when x = 3\r\ni.e. (3 XOR 3) = 0 and the number\r\nof set bits in 3 is equal\r\nto the number of set bits in 5.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\nA = 7, B = 12\r\n<strong>Output:</strong> 6\r\n<strong>Explanation:</strong>\r\n(7)<sub>2</sub>= 111\r\n(12)<sub>2</sub>= 1100\r\nThe XOR will be minimum when x = 6 \r\ni.e. (6 XOR 7) = 1 and the number \r\nof set bits in 6 is equal to the \r\nnumber of set bits in 12.</span></pre>\r\n\r\n<div><strong><span style=\"font-size:18px\">Your task :</span></strong></div>\r\n\r\n<div><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function <strong>minVal()</strong> that takes integer A and B as input and returns the value of X according to the question.</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><strong><span style=\"font-size:18px\">Expected Time Complexity : </span></strong><span style=\"font-size:18px\">O(log N)</span></div>\r\n\r\n<div><strong><span style=\"font-size:18px\">Expected Auxiliary Space : </span></strong><span style=\"font-size:18px\">O(1)</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><strong><span style=\"font-size:18px\">Constraints :</span></strong></div>\r\n\r\n<div><span style=\"font-size:18px\">0 &lt;= A, B &lt;= 10<sup>9</sup></span></div>\r\n\r\n<div>&nbsp;</div>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers A and B, find an integer X such that (X XOR A) is minimized, and the number of set bits in X is equal to the number of set bits in B.",
                "constraints": [
                    "0 <= A, B <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "A = 3, B = 5",
                        "output": "3",
                        "explanation": "The binary representation of A (3) is 011, and the binary representation of B (5) is 101. We need an X with the same number of set bits as B (two set bits) such that X XOR A is minimized. Choosing X = 3 (011) results in X XOR A = 0, which is the minimum possible value. X has two set bits, satisfying the condition."
                    },
                    {
                        "input": "A = 7, B = 12",
                        "output": "6",
                        "explanation": "The binary representation of A (7) is 111, and the binary representation of B (12) is 1100. We need an X with the same number of set bits as B (two set bits) such that X XOR A is minimized. Choosing X = 6 (110) results in X XOR A = 1, which is minimal. X has two set bits, satisfying the condition."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to generate M&rsquo;s binary representation as close to A as possible.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int minVal(int a, int b) {\r\n        // Count of set-bits in bit\r\n        int setBits = __builtin_popcount(b);\r\n        int setBits1 = __builtin_popcount(a);\r\n        int ans = 0;\r\n\r\n        for (int i = 0; i <= 31; i++) {\r\n            int mask = 1 << i;\r\n            int set = a & mask;\r\n\r\n            // If i'th bit is set also set the\r\n            // same bit in the required number\r\n            if (set == 0 && setBits > setBits1) {\r\n                ans |= (mask);\r\n                setBits--;\r\n            } else if (set && setBits1 > setBits) {\r\n                setBits1--;\r\n            } else {\r\n                ans |= set;\r\n            }\r\n        }\r\n\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    // Method to find the minimum value\n    public static int minVal(int a, int b) {\n        // Counting the number of set bits in b\n        int setBits = Integer.bitCount(b);\n        // Counting the number of set bits in a\n        int setBits1 = Integer.bitCount(a);\n        // Initializing the answer variable\n        int ans = 0;\n\n        // Looping through each bit from 0 to 31\n        for (int i = 0; i <= 31; i++) {\n            // Creating a bitmask for the i'th bit\n            int mask = 1 << i;\n            // Checking if the i'th bit is set in a\n            int set = a & mask;\n\n            // If i'th bit is not set and number of set bits in b is greater than set bits in a\n            // Then set the i'th bit in the answer number and decrement the setBits count\n            if (set == 0 && setBits > setBits1) {\n                ans |= (mask);\n                setBits--;\n            } \n            // If i'th bit is set and number of set bits in a is greater than set bits in b\n            // Then decrement the setBits1 count\n            else if (set!=0 && setBits1 > setBits) {\n                setBits1--;\n            } \n            // If none of the conditions are met, then set the i'th bit in the answer number as same as in a\n            else {\n                ans |= set;\n            }\n        }\n\n        // Returning the final answer\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    def minVal(self, a, b):\n        # Function to find the minimum of two values\n        bit_a = 0\n        bit_b = 0\n\n        tmp_a = a\n        # Counting the number of set bits in a\n        while tmp_a != 0:\n            bit_a+=1\n            tmp_a = tmp_a & (tmp_a-1)\n\n        tmp_b = b\n        # Counting the number of set bits in b\n        while tmp_b != 0:\n            bit_b+=1\n            tmp_b = tmp_b & (tmp_b-1)\n\n        if bit_a == bit_b:\n            num = a\n        # If a and b have the same number of set bits, return a\n        \n        elif bit_a > bit_b:\n            num = a\n            mask = 1\n            # Adjusting the set bits in a to match the number in b\n            while bit_a != bit_b:\n                if num & mask:\n                    num = num^mask\n                    bit_a -= 1\n                mask = mask<<1\n\n        else:\n            num = a\n            mask = 1\n            # Adjusting the set bits in a to match the number in b\n            while bit_a != bit_b:\n                if num & mask == 0:\n                    num = num^mask\n                    bit_a += 1\n                mask = mask<<1    \n\n        return num",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}