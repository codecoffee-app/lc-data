{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703634,
            "title": "XOR Cipher",
            "titleSlug": "xor-cipher3009",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>str</strong> created by a cypher algorithm. Find and return the original hexadecimal string.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>The cypher algorithm</strong>: A hexadecimal string is XORed,&nbsp;<strong>n </strong>number of times, where <strong>n</strong> is the string length and&nbsp;every&nbsp;XOR operation is done after shifting the consecutive string<strong>&nbsp;</strong>to the right.<br />For example : String: \"</span><strong><span style=\"font-size: 18px;\">abcd\".&nbsp;</span>&nbsp;</strong><br /><img src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/pic1-2.jpg\" alt=\"\" /><br />&nbsp;<strong style=\"font-size: 18px;\">Note:</strong><span style=\"font-size: 18px;\"> Alphabets are in uppercase.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>str = A1D0A1D\n<strong>Output: </strong>ABCD\n<strong>Explanation: </strong>Look at the matrix given in the problem statement.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>str = 653CABEBD24\n<strong>Output: </strong>636F61</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:\n</strong></span><span style=\"font-size: 18px;\">636F61\n </span><span style=\"font-size: 18px;\">636F61\n&nbsp; </span><span style=\"font-size: 18px;\">636F61\n   636F61\n&nbsp;   636F61\n&nbsp;    636F61\n653CABEBD24</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Space Complexity: </strong>O(n)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= n &lt;=1001 and n</span><span style=\"font-size: 18px;\">%2 = 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` that has been encrypted using a cipher algorithm, find and return the original hexadecimal string.\n\n**The cipher algorithm**: A hexadecimal string is XORed, `n` number of times, where `n` is the string length. Each XOR operation is performed after shifting the consecutive string to the right.",
                "constraints": [
                    "1 <= n <= 1001",
                    "n % 2 = 1 (n is odd)"
                ],
                "testcases": [
                    {
                        "input": "A1D0A1D",
                        "output": "ABCD",
                        "explanation": "The encrypted string 'A1D0A1D' deciphers to the original hexadecimal string 'ABCD' following the XOR-based cipher algorithm with right shifts."
                    },
                    {
                        "input": "653CABEBD24",
                        "output": "636F61",
                        "explanation": "The encrypted string '653CABEBD24' deciphers to the original hexadecimal string '636F61' following the XOR-based cipher algorithm with right shifts. The cipher operation is demonstrated as follows:\n\n636F61\n 636F61\n  636F61\n   636F61\n    636F61\n     636F61\n----------------\n653CABEBD24"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">An important and useful property of XOR that is widely popular in cryptography is that in case of multiple XORing of numbers (say&nbsp;<strong>M</strong>&nbsp;numbers) if we know only the&nbsp;<strong>M &ndash; 1</strong>&nbsp;numbers (one is unknown) along with the&nbsp;<strong>XOR result</strong>&nbsp;then, we can easily calculate the missing number by XORing the known numbers and the XOR result.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Binary Representation",
                "slug": "binary-representation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to decrypt the given string.\n    string deCypher(string str) {\n        int n = str.size();\n        string ans = \"\";\n        ans += str[0];\n\n        // iterating over half of the string to decrypt each pair of characters.\n        for (int i = 1; i <= n / 2; i++) {\n            int p = 0;\n            // converting character to integer value based on ASCII.\n            if (str[i - 1] >= '0' && str[i - 1] <= '9') {\n                p = str[i - 1] - '0';\n            } else {\n                p = str[i - 1] - 'A' + 10;\n            }\n\n            int curr = 0;\n            // converting character to integer value based on ASCII.\n            if (str[i] >= '0' && str[i] <= '9') {\n                curr = str[i] - '0';\n            } else {\n                curr = str[i] - 'A' + 10;\n            }\n\n            // performing XOR operation to decrypt the pair of characters.\n            int xr = p ^ curr;\n            // checking if the result is a digit or alphabet and adding to result\n            // string.\n            if (xr >= 0 && xr <= 9) {\n                ans.push_back(xr + '0');\n            } else {\n                char ch = xr - 10 + 'A';\n                ans.push_back(ch);\n            }\n        }\n        // returning the decrypted string.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}