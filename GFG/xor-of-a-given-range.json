{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700574,
            "title": "XOR of a given range",
            "titleSlug": "xor-of-a-given-range",
            "content": "<p><span >You are given an array nums. Your task is to complete the function&nbsp;<strong>getXor&nbsp;</strong>to return the XOR of the given range a and b.</span><br /><span >&nbsp;</span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>Input: </strong>nums = {1, 3, 5, 7, 9, 11}\n,a = 1, b = 3\n<strong>Output: </strong>1\n<strong>Explanation: </strong>3^5^7 = 1\n</span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input: </strong>nums = {1, 2, 3, 4, 5}\na = 0, b = 4\n<strong>Output: </strong>1\n</span></pre>\n<p>&nbsp;</p>\n<p><span ><strong>Your Task:</strong><br />You don't need to read or print anyhting. Your task is to comlplete the function&nbsp;<strong>getXor()</strong>&nbsp;which takes nums, a and b as input parameter and returns the xor from a to b.</span><br /><span >&nbsp;</span></p>\n<p><span ><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br /><span >&nbsp;</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>5</sup><br />0 &le; a &le; b &lt;&nbsp;n<br />1 &le; nums[i] &le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `nums`, calculate the XOR of the elements within the range [a, b] (inclusive).",
                "constraints": [
                    "1 <= n <= 10^5 (where n is the length of nums)",
                    "0 <= a <= b < n",
                    "1 <= nums[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "nums = {1, 3, 5, 7, 9, 11}, a = 1, b = 3",
                        "output": "1",
                        "explanation": "The XOR of the elements from index 1 to 3 (inclusive) is calculated as 3 ^ 5 ^ 7 = 1."
                    },
                    {
                        "input": "nums = {1, 2, 3, 4, 5}, a = 0, b = 4",
                        "output": "1",
                        "explanation": "The XOR of the elements from index 0 to 4 (inclusive) is calculated as 1 ^ 2 ^ 3 ^ 4 ^ 5 = 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use brute force approach</p>"
        ],
        "relatedTopics": [
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the XOR of the numbers in the given range.\n    int getXor(vector<int>& nums, int a, int b) {\n        int ans = 0;\n        // Iterating over the numbers from a to b.\n        for (int i = a; i <= b; i++) {\n            // Calculating XOR of the current number and the previous XOR result.\n            ans = nums[i] ^ ans;\n        }\n        // Returning the final XOR result.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    public int getXor(int[] nums, int a, int b){\n        int ans = 0; // Initialize ans as 0\n        for(int i = a; i <= b; i++){ // Iterate from a to b\n            ans = ans ^ nums[i]; // Perform XOR operation between ans and nums[i]\n        }\n        return ans; // Return the result of XOR operation\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to calculate XOR of elements within a given range\n    def getXor(self, nums, a, b):\n        ans = 0\n\n        # iterating over the elements within the given range\n        for i in range(a, b + 1):\n            ans = ans ^ nums[i]\n\n        # returning the final XOR value\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    // Function to get the XOR of a range of numbers in an array.\n    getXor(nums, a, b) {\n        let ans = 0; // Initialize the result variable to 0.\n        for (let i = a; i <= b; i++) {\n            ans = (ans ^ nums[i]); // Calculate the XOR of each number in the range and update the result variable.\n        }\n        return ans; // Return the final XOR result.\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}