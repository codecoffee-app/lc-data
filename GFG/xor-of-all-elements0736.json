{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703741,
            "title": "XOR of all elements",
            "titleSlug": "xor-of-all-elements0736",
            "content": "<p><span style=\"font-size: 18px;\">Given a list <strong>A</strong>&nbsp;having <strong>N</strong> positive elements. The task to create another list&nbsp;such as i<sup>th</sup>&nbsp;element&nbsp;is XOR of all elements of&nbsp;&nbsp;A&nbsp;except A[i].</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nA = [2, 1, 5, 9]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n13 14 10 6</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nAt first position 1^5^9 = 13\nAt second position 2^5^9 = 14\nAt third position 2^1^9 = 10\nAt last position 2^1^5 = 6</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nA = [2, 1]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n1 2\n<strong>Explanation:</strong> \nAt first position except first position \nthere is only one element = 1\nAt second position except second position\n&acirc;&euro;&lsaquo;there is only one element = 2</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong>&nbsp;&nbsp;<br />You don't need to read input or print anything. Your task is to complete the function <strong>getXor</strong>() which takes a list A and an integer N which is the size of the list A and returns the modified list.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N)<br /><strong>Expected Auxiliary Space:</strong> O(1), Where N is the size of the input array</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= N &lt;=10000<br />1&lt;= A[i]&nbsp;&lt;=100000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of positive integers `A` of size `N`, create a new list where the i-th element is the XOR of all elements in `A` except `A[i]`.",
                "constraints": [
                    "1 <= N <= 10000",
                    "1 <= A[i] <= 100000"
                ],
                "testcases": [
                    {
                        "input": "[2, 1, 5, 9]",
                        "output": "13 14 10 6",
                        "explanation": "The XOR of all elements except 2 is 1 ^ 5 ^ 9 = 13.  The XOR of all elements except 1 is 2 ^ 5 ^ 9 = 14. The XOR of all elements except 5 is 2 ^ 1 ^ 9 = 10. The XOR of all elements except 9 is 2 ^ 1 ^ 5 = 6."
                    },
                    {
                        "input": "[2, 1]",
                        "output": "1 2",
                        "explanation": "The XOR of all elements except 2 is 1. The XOR of all elements except 1 is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to use the property of the xor.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\n{\npublic:\n    // Function to calculate XOR of array elements\n    vector<int> getXor(vector<int> A, int N)\n    {\n        int XOR = 0;\n        // calculate XOR of array\n        for (int i = 0; i < N; i++)\n            XOR ^= A[i];\n            \n        // update array by XORing each element with XOR\n        for (int i = 0; i < N; i++)\n            A[i] = XOR ^ A[i];\n            \n        return A;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static ArrayList<Integer> getXor(ArrayList<Integer> A, int N) {\n\n        ArrayList<Integer> list = new ArrayList<Integer>();\n\n        int xor = 0;\n        for (int i = 0; i < N; i++) xor ^= A.get(i);\n\n        for (int i = 0; i < N; i++) list.add(xor ^ A.get(i));\n\n        return list;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public List<int> getXor(List<int> A, int N)\n    {\n        int XOR = 0;\n        // calculate XOR of array\n        for (int i = 0; i < N; i++)\n            XOR ^= A[i];\n            \n        // update array by XORing each element with XOR\n        for (int i = 0; i < N; i++)\n            A[i] = XOR ^ A[i];\n            \n        return A;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}