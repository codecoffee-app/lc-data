{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703817,
            "title": "XOR play",
            "titleSlug": "xor-play1544",
            "content": "<p><span style=\"font-size:18px\">Given an integer <strong>N</strong>, list all the&nbsp;divisors of N (excluding N) in sorted order. Find the number formed by performing the&nbsp;XOR operation on each divisor in the list.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 10\r\n<strong>Output:\r\n</strong>1 2 5\r\n6\r\n</span><strong><span style=\"font-size:18px\">Explanation:\r\n</span></strong><span style=\"font-size:18px\">All the proper divisors are 1, 2 and 5.\r\n1 XOR 2 XOR 5 = 6</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 8\r\n<strong>Output:\r\n</strong>1 2 4\r\n7\r\n<strong>Explanation:</strong>\r\nAll the proper divisors are 1, 2 and 4.\r\n1 XOR 2 XOR 4 = 7</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>xor_play()</strong>&nbsp;which takes N as input parameter and returns a list of integers containing all the proper divisors in sorted order. The last element in the list must contain the XOR result.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(sqrt(N))<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(K) where K is the number of divisors of N.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, find all its divisors (excluding N itself) in ascending order. Then, calculate the XOR of all the listed divisors. Return a list containing the divisors followed by their XOR sum.",
                "constraints": [
                    "1 <= N <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "1 2 5 6",
                        "explanation": "The divisors of 10 (excluding 10) are 1, 2, and 5.  1 XOR 2 XOR 5 = 6. The expected output is the divisors followed by the XOR result."
                    },
                    {
                        "input": "8",
                        "output": "1 2 4 7",
                        "explanation": "The divisors of 8 (excluding 8) are 1, 2, and 4. 1 XOR 2 XOR 4 = 7. The expected output is the divisors followed by the XOR result."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Calulate all divisors till sqrt(N).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n\tpublic:\r\n\t\tvector<int> xor_play(int n)\r\n\t\t{\r\n\t\t\tvector<int> res;\r\n\t\t\t// Calculating all divisors.\r\n\t\t\tfor(int i = 1; i <= n / i; i++)\r\n\t\t\t{\r\n\t\t\t\tif(n % i == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif( i != n / i)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tres.push_back(i);\r\n\t\t\t\t\t\tres.push_back(n / i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tres.push_back(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsort(res.begin(), res.end());\r\n\t\t\t// removing n\r\n\t\t\tres.pop_back();\r\n\t\t\tint ans = 0;\r\n\t\t\t// calculating xor of all the proper divisors. \r\n\t\t\tfor(auto i : res)\r\n\t\t\t\tans = ans ^ i;\r\n\t\t\tres.push_back(ans);\r\n\t\t\treturn res;\r\n\t\t}\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}