{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714141,
            "title": "Yet another query problem",
            "titleSlug": "yet-another-query-problem--170647",
            "content": "<p><span style=\"font-size:18px\">You are given an array of <strong>N</strong> elements and <strong>num</strong>&nbsp;queries, In each query you are given three numbers L,R and K and you have to tell, how many indexes are there in between L and R(L&lt;=i&lt;=R) such that the frequency of a[i] from index i to n-1 is k.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong> 0-based indexing</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=5\r\nnum=3\r\nA={1,1,3,4,3}\r\nQ={{0,2,2},{0,2,1},{0,4,2}}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n2 1 2</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">For query 1: 0 2 2\r\nL=0,R=2,K=2\r\nlet, L&lt;=i&lt;=R\r\nFor i=0: frequency of a[i] i.e. 1 from i to n-1 is 2.\r\nFor i=1: frequency of a[i] i.e. 1 from i to n-1 is 1.\r\nFor i=2: frequency of a[i] i.e. 3 from i to n-1 is 2.\r\nHence we have <strong>two</strong> elements from index 0 to 2 \r\nwhose frequency from i to n-1 is 2.</span>\r\n\r\n<span style=\"font-size:18px\">For query 2: 0 2 1\r\nL=0,R=2,K=1\r\nAs we can see from the above query that there is \r\nonly a single element in 0 to 2 whose frequency \r\nfrom i to n-1 is 1.</span>\r\n\r\n<span style=\"font-size:18px\">For query 3: 0 4 2\r\nThe answer will be 2 because of the index 0 and 2.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=5\r\nnum=2\r\nA={1,1,1,1,1}\r\nQ={{0,4,2},{0,4,1}}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n1 1</span> \r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong> \r\n<span style=\"font-size:18px\">For query 1: 0 4 2 \r\nL=0,R=4,K=2 \r\nlet, L&lt;=i&lt;=R \r\nFor i=0: frequency of a[i] i.e. 1 from i to n-1 is 5. \r\nFor i=1: frequency of a[i] i.e. 1 from i to n-1 is 4. \r\nFor i=2: frequency of a[i] i.e. 1 from i to n-1 is 3.\r\nFor i=3: frequency of a[i] i.e. 1 from i to n-1 is <strong>2</strong>.\r\nFor i=4: frequency of a[i] i.e. 1 from i to n-1 is 1. \r\nHence we have <strong>one</strong> elements from index 0 to 4 whose frequency from i to n-1 is 2.</span> \r\n\r\n<span style=\"font-size:18px\">Similarly For query 2: \r\nthere is only 1 element in 0 to 4 whose frequency from i to n-1 is 1.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N<sup>2</sup></span><span style=\"font-size:18px\">)</span><br />\r\n<span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong>&nbsp;O(N<sup>2</sup>)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function solveQueries() which take two variable <strong>N</strong> and <strong>num</strong>&nbsp;representing the length of the original array and number of queries and two arrays as input, <strong>A</strong> and <strong>Q</strong> representing the original array and an array of queries(2-D array with 3 columns of<strong> L</strong>,<strong>R</strong> and <strong>K </strong>respectively), and returns the array of length <strong>num&nbsp;</strong>with the solution to each query.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>3</sup></span><br />\r\n<span style=\"font-size:18px\">0 &lt;= Q &lt; 10<sup>3</sup></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= A[i] &lt;= 10<sup>5</sup></span></p>\r\n\r\n<p><br />\r\n<strong>&nbsp;</strong></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Store the frequencies(occurence from i to n-1) for&nbsp;every a[i], and find an optimal way to answer every query using this preprocessing.</span></p>",
            "<p><span style=\"font-size:18px\">We can make a 2-D matrix, and use prefix-sum technique to answer every query in O(1).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution {\npublic:\n    // Function to solve the queries based on given parameters.\n    vector<int> solveQueries(int N, int num, vector<int> &A, vector<vector<int>> &Q) {\n        vector<int> ans;\n\n        // Initializing a 2D vector to store the prefix sum of counts.\n        vector<vector<int>> pre(N+1,vector<int>(N+1,0));\n\n        // Looping over the array to calculate the counts.\n        for(int i=0;i<N;i++){\n            int cnt=0;\n\n            // Counting the occurrences of the current element.\n            for(int j=i;j<N;j++){\n                if(A[i]==A[j]){\n                    cnt++;\n                }\n            }\n            // Updating the count in the prefix sum vector.\n            pre[i][cnt]++;\n        }\n        \n        // Computing the prefix sum for each column in the prefix sum vector.\n        for(int i=0;i<N+1;i++){\n            for(int j=1;j<N;j++){\n                pre[j][i]+=pre[j-1][i];\n            }\n        }\n\n        // Looping over the queries to compute the answer for each query.\n        for(int i=0;i<num;i++){\n            int L=Q[i][0];\n            int R=Q[i][1];\n            int K=Q[i][2];\n\n            // Computing the answer based on the prefix sums.\n            ans.push_back((L==0?pre[R][K]:pre[R][K]-pre[L-1][K]));\n        }\n\n        // Returning the answers for all the queries.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static ArrayList<Integer> solveQueries(int N, int num, int[] A, int[][] Q) {\r\n        // code here\r\n        ArrayList<Integer> arr=new ArrayList<>();\r\n        int temp[][]=new int[N][N+1];\r\n        for(int i=0;i<N;i++){\r\n            int cnt=0;\r\n            for(int j=i;j<N;j++){\r\n                if(A[i]==A[j]){\r\n                    cnt++;\r\n                }\r\n            }\r\n            temp[i][cnt]++;\r\n        }\r\n        for(int i=0;i<N+1;i++){\r\n            for(int j=1;j<N;j++){\r\n                temp[j][i]+=temp[j-1][i];\r\n            }\r\n        }\r\n        for(int i=0;i<num;i++){\r\n            int L=Q[i][0];\r\n            int R=Q[i][1];\r\n            int K=Q[i][2];\r\n            arr.add((L==0?temp[R][K]:temp[R][K]-temp[L-1][K]));\r\n        }\r\n        return arr;\r\n    }\r\n}\r\n        \r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\r\n\r\nclass Solution:\r\n    #Function to solve queries\r\n    def solveQueries(self, N : int, num : int, A : List[int], Q : List[List[int]]) -> List[int]:\r\n        ans=[]\r\n        \r\n        #2D list to store prefix sums\r\n        pre=[[0]*(N+1) for _ in range(N+1)]\r\n        \r\n        #Calculating count of occurrences of each element in the array\r\n        for i in range(N):\r\n            cnt=0\r\n            for j in range(i,N):\r\n                if A[i]==A[j]:\r\n                    cnt+=1\r\n            pre[i][cnt]+=1\r\n        \r\n        #Calculating prefix sums\r\n        for i in range(N):\r\n            for j in range(1,N):\r\n                pre[j][i]+=pre[j-1][i]\r\n        \r\n        #Iterating through each query\r\n        for i in range(num):\r\n            L=Q[i][0]\r\n            R=Q[i][1]\r\n            K=Q[i][2]\r\n            \r\n            #Checking if left index is 0, if yes, return count at index R\r\n            if L==0:\r\n                ans.append(pre[R][K])\r\n            \r\n            #Else, return count at index R minus count at index L-1\r\n            else :\r\n                ans.append(pre[R][K]-pre[L-1][K])\r\n        \r\n        return ans",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}