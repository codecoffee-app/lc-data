{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700373,
            "title": "You and your books",
            "titleSlug": "you-and-your-books",
            "content": "<p><span style=\"font-size: 20px;\">You have <strong>n</strong> stacks of books. Each stack of books has some height <strong>arr</strong>[i] equal to the number of books on that stack ( considering all the books are identical and each book has a height of 1 unit ). In one move, you can select any number of consecutive stacks of books such that the height of each selected stack of books arr[i] &lt;= <strong>k</strong>. Once such a sequence of stacks is chosen, You can collect any number of books from the chosen sequence of stacks.<br />What is the maximum number of books that you can collect this way?</span></p>\n<p><strong><span style=\"font-size: 20px;\">Example 1</span></strong></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input</strong><br />8 1<br />3 2 2 3 1 1 1 3<br /><strong>Output</strong><br />3<br /></span><span style=\"font-size: 20px;\"><strong>Explanation&nbsp;</strong></span><span style=\"font-size: 20px;\"><br />We can collect maximum books from consecutive stacks numbered 5, 6, and 7 having height less than equal to K.</span></pre>\n<p><strong><span style=\"font-size: 20px;\">Example 2</span></strong></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input</strong><br />8 2<br />3 2 2 3 1 1 1 3<br /><strong>Output</strong><br />4<br /></span><span style=\"font-size: 20px;\"><strong>Explanation</strong><br />We can collect maximum books from consecutive stacks numbered 2 and 3 having height less than equal to K.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Your Task:</span></strong><br /><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">You don't have to read input or print anything. Your task is to complete the function&nbsp;<strong>max_Books</strong></span><strong style=\"font-size: 18px;\">() </strong><span style=\"font-size: 18px;\">which takes the integer arr, n, and k</span><span style=\"font-size: 18px;\"> returns the </span></span><span style=\"font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">maximum number of books you can collect.</span></p>\n<p><span style=\"font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><strong>Expected Time Complexity:</strong>&nbsp;O(n)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span></p>\n<p><strong style=\"font-size: 20px;\">Constraints:</strong><br style=\"font-size: 20px;\" /><span style=\"font-size: 20px;\">1 &lt;= n &lt;=&nbsp;</span><span style=\"font-size: 20px;\">10</span><sup>5</sup><br style=\"font-size: 20px;\" /><span style=\"font-size: 20px;\">1 &lt;= k &lt;=&nbsp;</span><span style=\"font-size: 20px;\">10</span><sup>9</sup><br style=\"font-size: 20px;\" /><span style=\"font-size: 20px;\">0 &lt;= arr[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given `n` stacks of books, where each stack `arr[i]` represents the number of books in that stack (and thus its height, assuming each book has height 1).  In a single move, you can select any contiguous sequence of stacks such that the height of each stack in the sequence `arr[i]` is less than or equal to `k`. You can then collect any number of books from the chosen sequence.  What is the maximum number of books you can collect this way?",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= k <= 10^9",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "8 1\n3 2 2 3 1 1 1 3",
                        "output": "3",
                        "explanation": "The maximum number of books can be collected from the consecutive stacks numbered 5, 6, and 7, which all have heights less than or equal to k=1. The sum of books in these stacks is 1 + 1 + 1 = 3."
                    },
                    {
                        "input": "8 2\n3 2 2 3 1 1 1 3",
                        "output": "4",
                        "explanation": "The maximum number of books can be collected from the consecutive stacks numbered 2 and 3, which both have heights less than or equal to k=2.  The sum of books in these stacks is 2 + 2 = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all the valid consecutive groups and take the maximum sum among all.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "junglee-games"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    long long max_Books(int a[], int n, int k) {\n        long long ans = 0;\n        int count = 0;\n        long long fin = 0;\n        for (int i = 0; i < n; i++) {\n            if (a[i] <= k)\n                ans += a[i];\n            else\n                ans = 0;\n\n            fin = max(fin, ans);\n        }\n        return fin;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the maximum number of books that can be bought within the given\n    // budget\n    long max_Books(int a[], int n, int k) {\n        int size = a.length;\n        long max_so_far = 0, max_ending_here = 0;\n\n        // Loop through the array to calculate the maximum sum of books' prices\n        for (int i = 0; i < size; i++) {\n            // Check if the price of the current book is within the budget\n            if (a[i] <= k) {\n                // Add the price of the current book to the current subarray sum\n                max_ending_here = max_ending_here + a[i];\n\n                // Update the maximum sum if the current subarray sum is greater\n                if (max_so_far < max_ending_here) max_so_far = max_ending_here;\n            } else {\n                // Reset the current subarray sum if the price of the current book\n                // exceeds the budget\n                max_ending_here = 0;\n            }\n        }\n\n        // Return the maximum sum of books' prices\n        return max_so_far;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def max_Books(self, n, k, a):\n        #initialize variables to store the sum of books and the maximum sum\n        sum = 0\n        ans = 0\n\n        #iterate over all the books\n        for i in range(n):\n            #if the number of pages in the current book is less than or equal to k,\n            #add the number of pages to the sum\n            if a[i] <= k:\n                sum += a[i]\n            #if the number of pages in the current book is greater than k,\n            #reset the sum to 0\n            else:\n                sum = 0\n            #update the maximum sum with the current sum\n            ans = max(ans, sum)\n\n        #return the maximum sum\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution{\n    max_Books(arr,n,k){\n        let ans=0;\n        let count=0;\n        let fin=0;\n        for(let i=0; i<n; i++){\n            if(arr[i]<=k) ans+=arr[i];\n            else ans=0;\n            fin=Math.max(fin,ans);\t\n        }\n        return fin;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}