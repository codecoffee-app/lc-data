{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705619,
            "title": "Your Social Network",
            "titleSlug": "your-social-network0328",
            "content": "<p><span style=\"font-size:18px\">Influenced by Social Networking sites, Rahul launches his own site&nbsp;Friendsbook. Each user in Friendsbook is given a unique number, first user being numbered 1. There are N users in Friendsbook numbered from 1 to N. In Friendsbook, i th user can make j th user his friend without becoming his friend himself, i.e. in Friendsbook, there is a one-way link rather than a two-way link as in Facebook. Moreover i th user can make j th user his friend iff i&gt;j. Also one user should have no more and no less than one friend except user 1 who will have no friend. Rahul wants to modify Friendsbook and find out whether one user is somehow linked to some other user. Help Rahul do so.</span></p>\n\n<p><span style=\"font-size:18px\">Print all possible connections between the users in the following format:&nbsp;<br />\n4 2 2 means 4 is linked to 2 via 2 connections.<br />\n5 2 3 means 5 is linked to 2 via 3 connections, and so on.</span></p>\n\n<p><span style=\"font-size:18px\">The order of display should be as follows:</span><br />\n<span style=\"font-size:18px\">Print all possible connections starting from user 2 to user N with other users starting from 1 to The Current User Number - 1. In case one user is not connected at all with another user, that connection should not be printed.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>3</span>\n<span style=\"font-size:18px\"><strong>arr[] = </strong>{1, 2}</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">2 1 1 3 1 2 3 2 1\n<strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">2 is directly linked to 1 and hence 2 is\nlinked to 1 via 1 connection. 3 is directly\nlinked to 2 which in turn is directly\nlinked to 1. Hence 3 is linked to 1 via \n2 connections and to 2 via 1 connection.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>3</span>\n<span style=\"font-size:18px\"><strong>arr[] = </strong>{1, 1}</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">2 1 1 3 1 1\n<strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">Both 2 and 3 are directly linked to 1.\nHence both 2 and 3 are linked to 1 via\n1 connection.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>socialNetwork()</strong> which takes an Integer N and an array arr[] of N-1 integers as input and returns s string representing the answer.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>)<br />\n<strong>Expected Auxiliary Space:</strong> O(N<sup>2</sup>)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">2 &lt;= N &lt;= 500</span><br />\n<span style=\"font-size:18px\">1 &lt;= arr[i] &lt;= i</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Rahul creates Friendsbook, a social network where users are numbered from 1 to N. User 'i' can be friends with user 'j' only if i > j. This friendship is a one-way link. Every user, except user 1, has exactly one friend. The task is to determine all possible connections between users and report them in the format 'A B C', indicating user A is linked to user B via C connections.\n\nThe connections should be printed starting from user 2 to user N, considering connections to users 1 to Current User Number - 1. If a user is not connected to another, that connection shouldn't be printed.",
                "constraints": [
                    "2 <= N <= 500",
                    "1 <= arr[i] <= i"
                ],
                "testcases": [
                    {
                        "input": "N = 3\narr[] = {1, 2}",
                        "output": "2 1 1 3 1 2 3 2 1",
                        "explanation": "User 2 is directly linked to User 1 (1 connection). User 3 is directly linked to User 2, who is linked to User 1.  Therefore, User 3 is linked to User 1 via 2 connections, and User 3 is directly linked to User 2 via 1 connection."
                    },
                    {
                        "input": "N = 3\narr[] = {1, 1}",
                        "output": "2 1 1 3 1 1",
                        "explanation": "Both User 2 and User 3 are directly linked to User 1. Hence, both User 2 and User 3 are linked to User 1 via 1 connection each."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">You don&#39;t necessarily need BFS or DFS to solve the problem.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    //Function to form the social network.\n    string socialNetwork(int arr[], int N) {\n        \n        string ans;\n        \n        //Creating a matrix to store the connections between users.\n        int mat[N+1][N+1];\n        \n        //Initializing the matrix with 0s.\n        memset(mat,0,sizeof(mat));\n        \n        //Iterating over the array to form the connections.\n        for(int i=2; i<=N; i++)\n        {\n            int x = arr[i-2];\n            //Storing the direct connection between two users.\n            mat[i][x] = 1;\n\n            //Checking for indirect connections through other users.\n            for(int j=1; j<=N; j++)\n            {\n                //If there is a connection between the current user and j\n                //and j is not the same as x, then there is a path from i to j\n                //through x. Incrementing the path length by 1.\n                if(mat[x][j] && j!=x)\n                    mat[i][j] = mat[x][j] + 1;\n            }\n        }\n        \n        //Iterating over the matrix to form the output string.\n        for(int i=2; i<=N; i++)\n            for(int j=1; j<=N; j++)\n                if(mat[i][j])\n                    ans += to_string(i) + \" \" + to_string(j) + \" \" + to_string(mat[i][j]) + \" \";\n                    \n        //Returning the formed social network string.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    def socialNetwork(self, arr, N):\n        ans = \"\"\n        # Creating a matrix with size N+1 x N+1\n        mat = [[0 for i in range(N+1)] for i in range(N+1)]\n        \n        # Building the matrix using the given array\n        for i in range(2, N+1):\n            x = arr[i-2]\n            mat[i][x] = 1\n            # Updating the matrix by adding 1 to the values corresponding to the connections\n            for j in range(1, N+1):\n                if(mat[x][j] and j != x):\n                    mat[i][j] = mat[x][j] + 1\n        \n        # Building the answer string using the matrix\n        for i in range(2, N+1):\n            for j in range(1, N+1):\n                if(mat[i][j]):\n                    ans  = ans + str(i) + \" \" + str(j) + \" \" + str(mat[i][j]) + \" \"\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to perform some operations on the given list.\n    socialNetwork(arr, N)\n    {\n        let ans = \"\";\n        let mat = Array.from({length: N+1}, () => new Array(N+1).fill(0));\n        \n        for (let i = 2; i <= N; i++) {\n            let x = arr[i-2];\n            mat[i][x] = 1;\n            for (let j = 1; j <= N; j++) {\n                if(mat[x][j] && j !== x) {\n                    mat[i][j] = mat[x][j] + 1;\n                }\n            }\n        }\n\n        for (let i = 2; i <= N; i++) {\n            for (let j = 1; j <= N; j++) {\n                if (mat[i][j]) {\n                    ans += i + \" \" + j + \" \" + mat[i][j] + \" \";\n                }\n            }\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}