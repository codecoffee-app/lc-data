{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700688,
            "title": "ZigZag Tree Traversal",
            "titleSlug": "zigzag-tree-traversal",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree with <strong>n</strong> nodes. Find the zig-zag level order traversal of the binary tree. <br /></span><span style=\"font-size: 18px;\">In zig zag traversal starting from the first level go from <strong>left to right</strong> for odd-numbered levels and <strong>right to left </strong>for even-numbered levels.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>  &nbsp; &nbsp; &nbsp;&nbsp;1\n &nbsp;  &nbsp; /&nbsp; &nbsp;\\\n     2&nbsp; &nbsp;   3\n&nbsp;   / \\    /  \\\n&nbsp;  4   5  6    7\n<strong>Output: </strong>[1, 3, 2, 4, 5, 6, 7]<br /><strong>Explanation:</strong><br />For level 1 going left to right, we get traversal as {1}.<br />For level 2 going right to left, we get traversal as {3,2}.<br />For level 3 going left to right, we get traversal as {4,5,6,7}.<br />Merging all this traversals in single array we get {1,3,2,4,5,6,7}.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>  &nbsp; &nbsp; &nbsp; &nbsp; 7\n &nbsp; &nbsp; &nbsp; &nbsp;/&nbsp;  \\\n &nbsp; &nbsp; &nbsp; 9&nbsp; &nbsp; &nbsp;7\n &nbsp; &nbsp; /&nbsp; \\&nbsp;  /&nbsp; &nbsp;\n&nbsp;  &nbsp;8&nbsp; &nbsp;8&nbsp; 6&nbsp; &nbsp; &nbsp;\n &nbsp; /&nbsp; \\\n&nbsp; 10&nbsp;  9&nbsp;\n<strong>Output: </strong></span><span style=\"font-size: 18px;\">[7, 7, 9, 8, 8, 6, 9, 10] <br /><strong>Explanation:<br /></strong>For level 1 going left to right, we get traversal as {7}.<br />For level 2 going right to left, we get traversal as {7,9}.<br />For level 3 going left to right, we get traversal as {8,8,6}.<br />For level 4 going right to left, we get traversal as {9,10}.<br /></span><span ><span >Merging all this traversals in single array we get {7,7,9,8,8,6,9,10}.<br /></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:\n</strong><span style=\"font-size: 18px;\">  &nbsp; &nbsp; &nbsp;   5\n\\t  /   \\\n\\t 1     9\n\\t/ \\   / \\\n     3   2 8   4\n\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">[</span></span><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">5, 9, 1, 3, 2, 8, 4]\n</span><strong style=\"font-size: 18px;\">Explanation:<br /></strong><span style=\"font-size: 18px;\">For level 1 going left to right, we get traversal as {5}.<br />For level 2 going right to left, we get traversal as {9,1}.<br />For level 3 going left to right, we get traversal as {3,2,8,4}.<br /></span></span><span >Merging all this traversals in single array we get {5,9,1,3,2,8,4}.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong><strong>Constraints:</strong></strong><br />1 &lt;= number of nodes &lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= node-&gt;data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with **n** nodes, find its zig-zag level order traversal.\nIn zig-zag traversal, start from the first level and traverse from left to right for odd-numbered levels and from right to left for even-numbered levels.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "     1\n   /  \\\n  2    3\n / \\  / \\\n4   5 6   7",
                        "output": "[1, 3, 2, 4, 5, 6, 7]",
                        "explanation": "Level 1 (left to right): {1}\nLevel 2 (right to left): {3, 2}\nLevel 3 (left to right): {4, 5, 6, 7}\nCombined: {1, 3, 2, 4, 5, 6, 7}"
                    },
                    {
                        "input": "      7\n     /  \\\n    9    7\n   / \\  /  \n  8   8 6   \n /  \\\n10   9",
                        "output": "[7, 7, 9, 8, 8, 6, 9, 10]",
                        "explanation": "Level 1 (left to right): {7}\nLevel 2 (right to left): {7, 9}\nLevel 3 (left to right): {8, 8, 6}\nLevel 4 (right to left): {9, 10}\nCombined: {7, 7, 9, 8, 8, 6, 9, 10}"
                    },
                    {
                        "input": "    5\n   /   \\\n  1     9\n / \\   / \\\n3   2 8   4",
                        "output": "[5, 9, 1, 3, 2, 8, 4]",
                        "explanation": "Level 1 (left to right): {5}\nLevel 2 (right to left): {9, 1}\nLevel 3 (left to right): {3, 2, 8, 4}\nCombined: {5, 9, 1, 3, 2, 8, 4}"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to use stacks to perform the level order traversal for tracking the visited node.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "snapdeal",
            "factset",
            "hike",
            "walmart",
            "cisco"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    //Function to store the zig zag order traversal of tree in a list.\r\n    vector <int> zigZagTraversal(Node* root)\r\n    {\r\n        vector <int> res;\r\n        \r\n        //if root is null, we return the list.\r\n    \tif (!root)return res;\r\n    \t\r\n    \t//declaring two stacks to store the current and new level.\r\n    \tstack<struct Node*> currentlevel;\r\n    \tstack<struct Node*> nextlevel;\r\n    \t\r\n    \t//pushing the root in currentlevel stack.\r\n    \tcurrentlevel.push(root);\r\n    \tbool lefttoright = true;\r\n    \t\r\n    \twhile (!currentlevel.empty())\r\n    \t{\r\n    \t    //storing the top element of currentlevel stack in temp and popping it.\r\n    \t\tNode* temp = currentlevel.top();\r\n    \t\tcurrentlevel.pop();\r\n    \t\t\r\n    \t\t//if temp is not null, we store the data at temp in list.\r\n    \t\tif (temp) \r\n    \t\t{\r\n    \t\t\tres.push_back (temp->data);\r\n    \t\t\t\r\n    \t\t\t//if lefttoright is true then it stores nodes from left to right \r\n    \t\t\t//else from right to left in nextlevel stack.\r\n    \t\t\tif (lefttoright)\r\n    \t\t\t{\r\n    \t\t\t\tif (temp->left)\r\n    \t\t\t\t\tnextlevel.push(temp->left);\r\n    \t\t\t\tif (temp->right)\r\n    \t\t\t\t\tnextlevel.push(temp->right);\r\n    \t\t\t}\r\n    \t\t\telse \r\n    \t\t\t{\r\n    \t\t\t\tif (temp->right)\r\n    \t\t\t\t\tnextlevel.push(temp->right);\r\n    \t\t\t\tif (temp->left)\r\n    \t\t\t\t\tnextlevel.push(temp->left);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\t\r\n    \t\t//if currentlevel stack is empty lefttoright is flipped to change \r\n    \t\t//the order of storing the nodes and both stacks are swapped.\r\n    \t\tif (currentlevel.empty()) \r\n    \t\t{\r\n    \t\t\tlefttoright = !lefttoright;\r\n    \t\t\tswap(currentlevel, nextlevel);\r\n    \t\t}\r\n    \t}\r\n    \t//returning the list.\r\n    \treturn res;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass GFG\r\n{\r\n    //Function to store the zig zag order traversal of tree in a list.\r\n\tArrayList<Integer> zigZagTraversal(Node root)\r\n\t{\r\n\t     ArrayList<Integer> res = new ArrayList<Integer>(0);\r\n\t     \r\n\t    //if root is null, we return the list.\r\n        if (root == null) \r\n        return res;\r\n     \r\n        //declaring two stacks to store the current and new level.\r\n        Stack<Node> currentLevel = new Stack<>();\r\n        Stack<Node> nextLevel = new Stack<>();\r\n     \r\n        //pushing the root in currentlevel stack.\r\n        currentLevel.push(root);\r\n        boolean leftToRight = true;\r\n    \r\n        while (!currentLevel.isEmpty()) \r\n        {\r\n            //storing top element of currentlevel stack in temp and popping it.\r\n            Node temp = currentLevel.pop();\r\n            \r\n            //if temp is not null, we store the data at temp in list.\r\n            if(temp!=null)\r\n            {\r\n                res.add(temp.data);\r\n                \r\n                //if lefttoright is true then it stores nodes from left to right \r\n\t\t\t    //else from right to left in nextlevel stack.\r\n                if (leftToRight)\r\n                {\r\n                    if (temp.left!= null) {\r\n                    nextLevel.push(temp.left);\r\n                    }\r\n                     \r\n                    if (temp.right!= null) {\r\n                    nextLevel.push(temp.right);\r\n                    }\r\n                }\r\n                else \r\n                {\r\n                    if (temp.right!= null) {\r\n                    nextLevel.push(temp.right);\r\n                    }\r\n                     \r\n                    if (temp.left!= null) {\r\n                    nextLevel.push(temp.left);\r\n                    }\r\n                }\r\n            }\r\n         \r\n            //if currentlevel stack is empty lefttoright is flipped to change \r\n\t\t    //the order of storing the nodes and both stacks are swapped.\r\n            if (currentLevel.isEmpty()) \r\n            {\r\n                leftToRight = !leftToRight;\r\n                Stack<Node> temp1 = currentLevel;\r\n                currentLevel = nextLevel;\r\n                nextLevel = temp1;\r\n            }\r\n        }\r\n        //returning the list.\r\n        return res; \r\n\t}\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to store the zig zag order traversal of tree in a list.\r\n    def zigZagTraversal(self, root):\r\n \r\n        res = []\r\n        #if root is null, we return the list.\r\n        if root is None:\r\n            return res\r\n \r\n        #declaring two stacks to store the current and new level.\r\n        currentLevel = []\r\n        nextLevel = []\r\n\r\n        ltr = True\r\n \r\n        #pushing the root in currentlevel stack.\r\n        currentLevel.append(root)\r\n \r\n        while len(currentLevel) > 0:\r\n            \r\n            #storing the top element of currentlevel stack in temp and popping it.\r\n            temp = currentLevel.pop(-1)\r\n       \r\n            #if temp is not null, we store the data at temp in list.\r\n            res.append(temp.data)\r\n \r\n            #if lefttoright is true then it stores nodes from left to right \r\n\t\t    #else from right to left in nextlevel stack.\r\n            if ltr:\r\n                if temp.left:\r\n                    nextLevel.append(temp.left)\r\n                if temp.right:\r\n                    nextLevel.append(temp.right)\r\n            else:\r\n                if temp.right:\r\n                    nextLevel.append(temp.right)\r\n                if temp.left:\r\n                    nextLevel.append(temp.left)\r\n \r\n            #if currentlevel stack is empty ltr is flipped to change \r\n\t\t    #the order of storing the nodes and both stacks are swapped.\r\n            if len(currentLevel) == 0:\r\n            \r\n                ltr = not ltr\r\n                currentLevel, nextLevel = nextLevel, currentLevel\r\n    \r\n        #returning the list.    \r\n        return res   \r\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\r\n\r\nclass Solution\r\n{\r\n   //Function to store the zig zag order traversal of tree in a list.\r\n    public List<int> zigZagTraversal(Node root)\r\n    {\r\n    \tList<int> res = new List<int> ();\r\n    \r\n        //if root is null, we return the list.\r\n    \tif (root == null)return res;\r\n    \t\r\n    \t//declaring two stacks to store the current and new level.\r\n    \tStack<Node> currentlevel = new Stack<Node> ();\r\n    \tStack<Node> nextlevel = new Stack<Node> ();\r\n    \t\r\n    \t//pushing the root in currentlevel stack.\r\n    \tcurrentlevel.Push(root);\r\n    \tbool lefttoright = true;\r\n    \t\r\n    \twhile (currentlevel.Count > 0)\r\n    \t{\r\n    \t    //storing the top element of currentlevel stack in temp and popping it.\r\n    \t\tNode temp = currentlevel.Peek();\r\n    \t\tcurrentlevel.Pop();\r\n    \t\t\r\n    \t\t//if temp is not null, we store the data at temp in list.\r\n    \t\tif (temp!=null) \r\n    \t\t{\r\n    \t\t\tres.Add(temp.data);\r\n    \t\t\t\r\n    \t\t\t//if lefttoright is true then it stores nodes from left to right \r\n    \t\t\t//else from right to left in nextlevel stack.\r\n    \t\t\tif (lefttoright)\r\n    \t\t\t{\r\n    \t\t\t\tif (temp.left!=null)\r\n    \t\t\t\t\tnextlevel.Push(temp.left);\r\n    \t\t\t\tif (temp.right!=null)\r\n    \t\t\t\t\tnextlevel.Push(temp.right);\r\n    \t\t\t}\r\n    \t\t\telse \r\n    \t\t\t{\r\n    \t\t\t\tif (temp.right!=null)\r\n    \t\t\t\t\tnextlevel.Push(temp.right);\r\n    \t\t\t\tif (temp.left!=null)\r\n    \t\t\t\t\tnextlevel.Push(temp.left);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\t\r\n    \t\t//if currentlevel stack is empty lefttoright is flipped to change \r\n    \t\t//the order of storing the nodes and both stacks are swapped.\r\n    \t\tif (currentlevel.Count==0) \r\n    \t\t{\r\n    \t\t\tlefttoright = !lefttoright;\r\n    \t\t\tvar t = currentlevel;\r\n    \t\t\tcurrentlevel = nextlevel;\r\n    \t\t\tnextlevel = t;\r\n    \t\t}\r\n    \t}\r\n    \t//returning the list.\r\n    \treturn res;\r\n    }\r\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} root\r\n * @returns {number[]}\r\n*/\r\n\r\n/*\r\nclass Node{\r\n    constructor(data){\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n*/\r\n\r\nclass Solution \r\n{\r\n    //Function to store the zig zag order traversal of tree in a list.\r\n    zigZagTraversal(root)\r\n    {\r\n        let res = []; \r\n        //if root is null, we return the list.\r\n    \tif (!root)\r\n    \treturn res;\r\n    \t\r\n    \t//declaring two stacks to store the current and new level.\r\n    \tlet currentlevel = [];\r\n    \tlet nextlevel = [];\r\n    \t\r\n    \t//pushing the root in currentlevel stack.\r\n    \tcurrentlevel.push(root);\r\n    \t\r\n    \tlet lefttoright = true;\r\n    \twhile (currentlevel.length)\r\n    \t{\r\n    \t    //storing top element of currentlevel stack in temp and popping it.\r\n    \t\tlet temp = currentlevel[currentlevel.length - 1];\r\n    \t\tcurrentlevel.pop();\r\n    \t\t\r\n    \t\t//if temp is not null, we store the data at temp in list.\r\n    \t\tif (temp) \r\n    \t\t{\r\n    \t\t\tres.push(temp.data);\r\n    \t\t\t\r\n    \t\t\t//if lefttoright is true then it stores nodes from left to right \r\n\t\t\t    //else from right to left in nextlevel stack.\r\n    \t\t\tif (lefttoright)\r\n    \t\t\t{\r\n    \t\t\t\tif (temp.left)\r\n    \t\t\t\t\tnextlevel.push(temp.left);\r\n    \t\t\t\tif (temp.right)\r\n    \t\t\t\t\tnextlevel.push(temp.right);\r\n    \t\t\t}\r\n    \t\t\telse\r\n    \t\t\t{\r\n    \t\t\t\tif (temp.right)\r\n    \t\t\t\t\tnextlevel.push(temp.right);\r\n    \t\t\t\tif (temp.left)\r\n    \t\t\t\t\tnextlevel.push(temp.left);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\t//if currentlevel stack is empty lefttoright is flipped to change \r\n\t\t    //the order of storing the nodes and both stacks are swapped.\r\n    \t\tif (currentlevel.length === 0) \r\n    \t\t{\r\n    \t\t\tlefttoright = !lefttoright;\r\n    \t\t\t[currentlevel, nextlevel] = [nextlevel, currentlevel];\r\n    \t\t}\r\n    \t}\r\n    \t//returning the list.\r\n    \treturn res;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}