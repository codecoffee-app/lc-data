[
  {
    "type": "h4",
    "text": "What is an Array?"
  },
  {
    "type": "p5",
    "text": "Imagine you have a row of boxes, and you want to store your toys in them. Each box has a number written on it — starting from '0'. You can easily check what’s inside any box by looking at its number."
  },
  {
    "type": "p5",
    "text": "In programming, an Array works in exactly the same way. It’s a collection of items stored at contiguous memory locations. These items can be numbers, characters, or even words."
  },
  {
    "type": "h4",
    "text": "Definition:"
  },
  {
    "type": "p5",
    "text": "An Array is a data structure that can hold multiple values of the same type together."
  },
  {
    "type": "h4",
    "text": "Illustration: Array as a Row of Boxes"
  },
  {
    "type": "img",
    "text": "https://codecoffee-app.github.io/lc-data/handbook-images/array/introduction/1.webp",
    "style": "w-33 h-9"
  },
  {
    "type": "h4",
    "text": "Why Use Arrays?"
  },
  {
    "type": "ul",
    "text": [
      "To store multiple values of the same type under a single name.",
      "To easily access, modify, or iterate through elements using their index.",
      "Arrays are the building blocks for more advanced data structures like stacks, queues, and matrices."
    ]
  },
  {
    "type": "h4",
    "text": "How Do Arrays Work?"
  },
  {
    "type": "p5",
    "text": "Each element in an array can be accessed using an index number, which starts from 0."
  },
  {
    "type": "p5",
    "text": "For example:"
  },
  {
    "type": "ul",
    "text": [
      "The first element is at position 0",
      "The second element is at position 1",
      "And so on..."
    ]
  },
  {
    "type": "h4",
    "text": "Declaring an Array"
  },
  {
    "type": "p5",
    "text": "An array must be declared before it can be used."
  },
  {
    "type": "p5",
    "text": "Declaring an array involved specifying the following:"
  },
  {
    "type": "ol",
    "text": [
      "data type: tke kind of values it can store, e.g. int, char, float",
      "name: used to identify the array",
      "size: maximum number of values the array can store"
    ]
  },
  {
    "type": "p5",
    "text": "The syntax for declaring an array is as follows:"
  },
  {
    "type": "code",
    "text": {
      "lang": "bash",
      "code": "type name[size];"
    }
  },
  {
    "type": "h4",
    "text": "How Are Array Elements Stored in Memory?"
  },
  {
    "type": "p5",
    "text": "When you create an array, it gets stored in the computer’s memory at continuous (contiguous) memory locations."
  },
  {
    "type": "p5",
    "text": "Each element can be accessed using a formula that calculates its memory address based on the base address and its position (index)."
  },
  {
    "type": "h4",
    "text": "Formula to Calculate Address of Array Element"
  },
  {
    "type": "p5",
    "text": "If"
  },
  {
    "type": "ul",
    "text": [
      "B = Base address of the array (starting address)",
      "W = Size of each element (in bytes)",
      "i = Index of the element"
    ]
  },
  {
    "type": "p5",
    "text": "Then"
  },
  {
    "type": "p5",
    "text": "Address of A[i] = B + (i × W)"
  },
  {
    "type": "h4",
    "text": "Illustration"
  },
  {
    "type": "img",
    "text": "https://codecoffee-app.github.io/lc-data/handbook-images/array/introduction/2.webp",
    "style": "w-30 h-10.5"
  },
  {
    "type": "p5",
    "text": "Example:"
  },
  {
    "type": "p5",
    "text": "If"
  },
  {
    "type": "ul",
    "text": ["Base address B = 1000", "Element size W = 4 bytes", "Index i = 2"]
  },
  {
    "type": "p5",
    "text": "Then:"
  },
  {
    "type": "p5",
    "text": "Address of A[2] = 1000 + (2 × 4) = 1008"
  },
  {
    "type": "h4",
    "text": "What is a Two-Dimensional (2D) Array?"
  },
  {
    "type": "p5",
    "text": "A 2D Array is like a table or matrix with rows and columns."
  },
  {
    "type": "p5",
    "text": "Each element is identified by two indices — one for the row and one for the column."
  },
  {
    "type": "img",
    "text": "https://codecoffee-app.github.io/lc-data/handbook-images/array/introduction/3.webp",
    "style": "w-25 h-25 mt-1"
  },
  {
    "type": "h4",
    "text": "Declaring a 2D Array"
  },
  {
    "type": "p5",
    "text": "A 2d array can be declared using the following syntax:"
  },
  {
    "type": "code",
    "text": {
      "lang": "bash",
      "code": "type name[row_size][column_size]"
    }
  },
  {
    "type": "h4",
    "text": "Accessing 2D Arrays"
  },
  {
    "type": "p5",
    "text": "You access an element by specifying its row and column index."
  },
  {
    "type": "code",
    "text": {
      "lang": "bash",
      "code": "type name[row_number][column_number]"
    }
  },
  {
    "type": "h4",
    "text": "Representation of 2D Arrays in Memory"
  },
  {
    "type": "p5",
    "text": "Though it looks like a table, a 2D array is actually stored as a 1D sequence in memory. There are two common ways to represent it:"
  },
  {
    "type": "h5",
    "text": "Row-Major Order"
  },
  {
    "type": "p5",
    "text": "In Row-Major Order, the elements are stored row by row. The 'n' elements of first row are stored in first 'n' locations, elements of second row are stored in next 'n' locations, and so on."
  },
  {
    "type": "p5",
    "text": "Address Calculation in Row-Major:"
  },
  {
    "type": "p5",
    "text": "If"
  },
  {
    "type": "ul",
    "text": [
      "B = Base address",
      "W = Size of each element",
      "i = Row index",
      "j = Column index",
      "N = Number of columns"
    ]
  },
  {
    "type": "p5",
    "text": "Then:"
  },
  {
    "type": "p5",
    "text": "Address of A[i][j] = B + [ (i × N) + j ] × W"
  },
  {
    "type": "h5",
    "text": "Column-Major Order"
  },
  {
    "type": "p5",
    "text": "In Column-Major Order, the elements are stored column by column. The 'm' elements of first column are stored in first 'm' locations, elements of second column are stored in next 'm' locations, and so on."
  },
  {
    "type": "p5",
    "text": "Address Calculation in Column-Major:"
  },
  {
    "type": "p5",
    "text": "If:"
  },
  {
    "type": "ul",
    "text": ["M = Number of rows"]
  },
  {
    "type": "p5",
    "text": "Then:"
  },
  {
    "type": "p5",
    "text": "Address of A[i][j] = B + [ (j × M) + i ] × W"
  },
  {
    "type": "h4",
    "text": "Sparse Matrix"
  },
  {
    "type": "p5",
    "text": "A Sparse Matrix is a matrix in which most of the elements are zero."
  },
  {
    "type": "p5",
    "text": "Instead of storing all the zeros, it’s better to store only the non-zero values to save memory."
  }
]
