[
  {
    "type": "h4",
    "text": "Searching Operation"
  },
  {
    "type": "p5",
    "text": "Searching in an array involves comparing elements to a target value. There are multiple methods to achieve this based on the nature of the array and the frequency of search operations."
  },
  {
    "type": "h5",
    "text": "1. Linear (Sequential) Search"
  },
  {
    "type": "p5",
    "text": "Linear Search scans each element of the array one by one until it finds the target value or reaches the end of the array."
  },
  {
    "type": "ul",
    "text": [
      "Best suited for unsorted arrays or when only a single search is needed.",
      "Simple but becomes slower as the size of the array increases.",
      "Time Complexity: O(n)"
    ]
  },
  {
    "type": "code",
    "text": {
      "lang": "pseudo",
      "code": "function linear_search(arr, target):\n    for i from 0 to n - 1:\n        if arr[i] == target:\n            print target + \" found at index \" + i\n            return\n    print target + \" not found in array\""
    }
  },
  {
    "type": "h5",
    "text": "2. Binary Search"
  },
  {
    "type": "p5",
    "text": "Binary Search repeatedly divides the sorted array in half to find the target element. Itâ€™s much faster than linear search, but requires the array to be sorted."
  },
  {
    "type": "ul",
    "text": [
      "Highly efficient for large, sorted arrays.",
      "Reduces the search space by half with each iteration.",
      "Time Complexity: O(log n)"
    ]
  },
  {
    "type": "code",
    "text": {
      "lang": "pseudo",
      "code": "function binary_search(arr, target):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            print target + \" found at index \" + mid\n            return\n        else if arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    print target + \" not found in array\""
    }
  }
]
