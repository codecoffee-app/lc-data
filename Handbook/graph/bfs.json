[
    {
      "type": "h4",
      "text": "What is BFS (Breadth-First Search)?"
    },
    {
      "type": "p5",
      "text": "Breadth-First Search (BFS) is a graph traversal technique where we start from a selected node (called the 'source' or 'starting point') and explore all its neighboring nodes first, before moving on to the next level of neighbors."
    },
    {
      "type": "p5",
      "text": "Think of it like ripples in water — you start at a point, and the exploration spreads outward one level at a time."
    },
    {
      "type": "h4",
      "text": "How Does BFS Work?"
    },
    {
      "type": "ul",
      "text": [
        "Start from a selected node (source).",
        "Visit and mark it as 'visited'.",
        "Put it into a queue.",
        "While the queue is not empty:",
        "Remove the front node from the queue.",
        "Visit all its unvisited neighbors.",
        "Mark them as 'visited' and add them to the queue."
      ]
    },
    {
      "type": "h4",
      "text": "Visual Example"
    },
    {
      "type": "p5",
      "text": "Consider this simple graph:"
    },
    {
      "type": "img",
      "text": "https://codecoffee-app.github.io/lc-data/handbook-images/graph/introduction/3.webp",
      "style": "w-15 h-20.89 my-1"
    },
    {
      "type": "p5",
      "text": "Graph connections:\nA → B, C\nB → D, E\nC → F"
    },
    {
      "type": "h5",
      "text": "Starting BFS from node A:"
    },
    {
      "type": "ul",
      "text": [
        "Visit A, add A to queue.",
        "Remove A from queue, visit neighbors B and C, add them to queue.",
        "Remove B from queue, visit neighbors D and E, add them to queue.",
        "Remove C from queue, visit neighbor F, add it to queue.",
        "Continue this process until queue is empty."
      ]
    },
    {
      "type": "p5",
      "text": "Order of traversal will be: A → B → C → D → E → F"
    },
    {
      "type": "h4",
      "text": "Pseudo Code for BFS"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo code",
        "code": "function BFS(graph, startNode):\n    create an empty queue Q\n    mark startNode as visited\n    enqueue startNode into Q\n\n    while Q is not empty:\n        currentNode = Q.dequeue()\n        process currentNode\n\n        for each neighbor of currentNode:\n            if neighbor is not visited:\n                mark neighbor as visited\n                enqueue neighbor into Q"
      }
    },
    {
      "type": "h4",
      "text": "Key Points about BFS"
    },
    {
      "type": "ul",
      "text": [
        "Uses a Queue data structure (First In, First Out).",
        "Good for finding the shortest path in unweighted graphs.",
        "Explores all neighbors at the current depth before moving deeper."
      ]
    },
    {
      "type": "h4",
      "text": "When to Use BFS?"
    },
    {
      "type": "ul",
      "text": [
        "When you need the shortest path from one node to another in an unweighted graph.",
        "When you need to explore all reachable nodes from a starting point.",
        "When you want a level-order traversal (like in trees)."
      ]
    }
  ]
  