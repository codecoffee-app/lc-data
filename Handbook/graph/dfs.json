[
    {
      "type": "h4",
      "text": "What is DFS (Depth-First Search)?"
    },
    {
      "type": "p5",
      "text": "Depth-First Search (DFS) is a graph traversal technique where we start from a selected node (called the 'source') and explore as far as possible along each branch before backtracking."
    },
    {
      "type": "p5",
      "text": "Imagine walking through a maze — you keep going deeper until you hit a dead end, then backtrack and try a different path."
    },
    {
      "type": "h4",
      "text": "How Does DFS Work?"
    },
    {
      "type": "ul",
      "text": [
        "Start from a selected node (source).",
        "Visit and mark it as 'visited'.",
        "For each unvisited neighbor: Move to that neighbor and repeat the process.",
        "If no unvisited neighbor is found, backtrack to the previous node.",
        "Repeat until all reachable nodes are visited."
      ]
    },
    {
      "type": "h4",
      "text": "Visual Example"
    },
    {
      "type": "p5",
      "text": "Consider this simple graph:"
    },
    {
      "type": "img",
      "text": "https://picsum.photos/300/180",
      "style": "w-40 h-10"
    },
    {
      "type": "p5",
      "text": "Graph connections:\nA → B, C\nB → D, E\nC → F"
    },
    {
      "type": "h5",
      "text": "Starting DFS from node A:"
    },
    {
      "type": "ul",
      "text": [
        "Visit A.",
        "Move to B.",
        "From B, move to D.",
        "Backtrack to B, then to E.",
        "Backtrack to A, move to C.",
        "From C, move to F."
      ]
    },
    {
      "type": "p5",
      "text": "Order of traversal will be: A → B → D → E → C → F"
    },
    {
      "type": "h4",
      "text": "Pseudo Code for DFS (Recursive)"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo code",
        "code": "function DFS(graph, currentNode, visited):\n    mark currentNode as visited\n    process currentNode\n\n    for each neighbor of currentNode:\n        if neighbor is not visited:\n            call DFS(graph, neighbor, visited)"
      }
    },
    {
      "type": "h4",
      "text": "Key Points about DFS"
    },
    {
      "type": "ul",
      "text": [
        "Uses a Stack data structure (explicitly or via recursion).",
        "Good for exploring deep paths in a graph.",
        "Backtracks when it reaches a dead end."
      ]
    },
    {
      "type": "h4",
      "text": "When to Use DFS?"
    },
    {
      "type": "ul",
      "text": [
        "When you need to visit every node in a graph deeply before moving sideways.",
        "When solving puzzles like mazes or backtracking problems.",
        "When finding connected components in a graph."
      ]
    }
  ]
  