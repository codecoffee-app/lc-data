[
    {
      "type": "h4",
      "text": "What is a Graph Representation?"
    },
    {
      "type": "p5",
      "text": "A graph is a way to represent connections or relationships between a set of objects. But inside a computer's memory, we need to store these connections in an organized way so that we can easily search, modify, or analyze them. This is done using different graph representation techniques."
    },
    {
      "type": "p5",
      "text": "The two most popular methods to represent a graph are: Adjacency Matrix and Adjacency List."
    },
    {
      "type": "h4",
      "text": "Adjacency Matrix"
    },
    {
      "type": "p5",
      "text": "An adjacency matrix is a 2D table (matrix) where the rows and columns represent the graph’s vertices. If there is an edge (a connection) between two vertices, we mark the corresponding cell with '1'. If there's no connection, we mark it with '0'."
    },
    {
      "type": "h5",
      "text": "Example:"
    },
    {
      "type": "p5",
      "text": "Consider a graph with 3 vertices A, B, and C. And the connections are: A-B, B-C."
    },
    {
      "type": "img",
      "text": "https://codecoffee-app.github.io/lc-data/handbook-images/graph/introduction/2.webp",
      "style": "w-8 h-10.62 my-1"
    },
    {
      "type": "p5",
      "text": "Its adjacency matrix will look like this:"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo code",
        "code": "    A  B  C\nA [ 0, 1, 0 ]\nB [ 1, 0, 1 ]\nC [ 0, 1, 0 ]"
      }
    },
    {
      "type": "ul",
      "text": [
        "Easy to check if an edge exists between two vertices.",
        "Consumes more memory for large sparse graphs (with fewer edges).",
        "Ideal for dense graphs where most vertices are connected."
      ]
    },
    {
        "type": "p5",
        "text": "Example code:"
      },
    {
      "type": "code",
      "text": {
        "lang": "pseudo code",
        "code": "create a 2D array matrix[V][V]\nfor each edge (u, v) in graph:\n    matrix[u][v] = 1\n    matrix[v][u] = 1  // if undirected"
      }
    },
    {
      "type": "h4",
      "text": "Adjacency List"
    },
    {
      "type": "p5",
      "text": "An adjacency list uses an array where each index represents a vertex. Each vertex stores a list of other vertices it is connected to. It’s like having a list of friends for each person in a group."
    },
    {
      "type": "h5",
      "text": "Example:"
    },
    {
      "type": "p5",
      "text": "For the same graph with vertices A, B, and C, with connections A-B, B-C:"
    },
    {
      "type": "img",
      "text": "https://codecoffee-app.github.io/lc-data/handbook-images/graph/introduction/2.webp",
      "style": "w-8 h-10.62 my-1"
    },
    {
      "type": "p5",
      "text": "Its adjacency list will be:"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo code",
        "code": "A → B\nB → A, C\nC → B"
      }
    },
    {
      "type": "ul",
      "text": [
        "Saves memory in case of sparse graphs.",
        "Slower to check if a particular edge exists.",
        "Efficient for iterating over neighbors of a vertex."
      ]
    },
    {
        "type": "p5",
        "text": "Example code:"
      },
    {
      "type": "code",
      "text": {
        "lang": "pseudo code",
        "code": "create an array of lists adjList[V]\nfor each edge (u, v) in graph:\n    add v to adjList[u]\n    add u to adjList[v]  // if undirected"
      }
    },
    {
      "type": "h4",
      "text": "Which One Should You Use?"
    },
    {
      "type": "ul",
      "text": [
        "Use Adjacency Matrix for dense graphs with many connections.",
        "Use Adjacency List for sparse graphs with fewer connections."
      ]
    },
    {
      "type": "p5",
      "text": "Choosing the right graph representation depends on the type of problem you’re solving and how large or connected your graph is."
    }
  ]
  