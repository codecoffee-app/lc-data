[
    {
      "type": "p5",
      "text": "The Bellman-Ford algorithm is used to calculate the shortest path from a starting node to every other node in a graph. You might recall that we’ve already explored Dijkstra’s algorithm (see article link) for solving the same problem. So, what sets Bellman-Ford apart from Dijkstra’s approach?"
    },
    {
      "type": "p5",
      "text": "When studying Dijkstra’s algorithm, we encountered two scenarios where it doesn’t perform well:"
    },
    {
      "type": "ul",
      "text": [
        "The graph includes negative weight edges.",
        "The graph contains a negative weight cycle (In this case, Dijkstra’s algorithm can't compute the correct shortest paths—it keeps revisiting the cycle endlessly, causing it to run forever and eventually trigger a Time Limit Exceeded error)."
      ]
    },
    {
      "type": "p5",
      "text": "Negative Cycle: This refers to a loop in the graph where the total weight of all the edges in the cycle adds up to a negative value."
    },
    {
      "type": "img",
      "text": "https://codecoffee-app.github.io/lc-data/handbook-images/graphalgo/bell/1.webp",
      "style": "w-20 h-18 my-2"
    },
    {
      "type": "p5",
      "text": "Sum: 2 + (-3) + (-1) = -2"
    },
    {
      "type": "p5",
      "text": "The Bellman-Ford algorithm effectively handles these challenges. It can manage negative edge weights and even identify the presence of a negative weight cycle within the graph. However, it's designed specifically for directed graphs. To use it with an undirected graph, you simply need to convert each undirected edge into two directed edges, as shown below:"
    },
    {
      "type": "img",
      "text": "http://192.168.29.189:5500/handbook-images/graphalgo/bell/2.webp",
      "style": "w-20 h-18 my-2"
    },
    {
      "type": "p5",
      "text": "An undirected edge connecting nodes u and v implies the existence of two directed edges—one going from u to v, and the other from v to u. Therefore, this conversion is logically sound. Once the undirected graph has been transformed into a directed one using this approach, the Bellman-Ford algorithm can be applied without any modifications."
    },
    {
      "type": "p5",
      "text": "In the Bellman-Ford algorithm, edges can be processed in any order. The logic is to perform relaxation on all edges sequentially for N - 1 iterations, where N is the number of nodes in the graph. By the end of these iterations, the shortest distances to all nodes should be accurately calculated."
    },
    {
      "type": "h5",
      "text": "Understanding Relaxation"
    },
    {
      "type": "p5",
      "text": "Let’s take the previously discussed graph and focus on three components: dist[u], dist[v], and w. Here, w is the weight of the edge connecting nodes u and v. The value dist[u] represents the currently known shortest distance to reach node u, while dist[v] (which might initially be infinite) reflects the shortest known distance to node v."
    },
    {
      "type": "p5",
      "text": "If going from u to v through this edge results in a shorter path—that is, if dist[u] + w is less than dist[v]—then we update dist[v] with this new, smaller value. This updating step is known as edge relaxation."
    },
    {
      "type": "p5",
      "text": "In the Bellman-Ford algorithm, this relaxation process is repeated for all edges a total of N - 1 times, where N is the number of nodes in the graph."
    },
    {
      "type": "p5",
      "text": "We need exactly N-1 iterations in the Bellman-Ford algorithm because:"
    },
    {
      "type": "p5",
      "text": "In a graph with N nodes, the longest possible simple path (a path that doesn't repeat nodes) can have at most N-1 edges."
    },
    {
      "type": "p5",
      "text": "Here’s the logic:"
    },
    {
      "type": "ul",
      "text": [
        "On each iteration, Bellman-Ford relaxes all the edges..",
        "With each iteration, it improves the shortest distance to some nodes.",
        "After 1st iteration, the shortest path to nodes that are 1 edge away from the source gets updated.",
        "After 2nd iteration, the shortest path to nodes that are 2 edges away is updated.",
        "...",
        "After N-1 iterations, we’ve had a chance to find the shortest path to all nodes that are reachable from the source."
      ]
    },
    {
      "type": "p5",
      "text": "Any further iteration should not result in a better path—if it does, it means there's a negative cycle."
    },
    {
      "type": "p5",
      "text": "So in order to check the existence of a negative cycle, we will relax the edges one more time after the completion of N-1 iterations. And if in that Nth iteration, it is found that further relaxation of any edge is possible, we can conclude that the graph has a negative cycle."
    },
    {
      "type": "h5",
      "text": "Understanding Algorithm"
    },
    {
      "type": "p5",
      "text": "As part of initial config, we create a distance array ( dist[] ) which is initialized with infinity, except for the source node, as dist[src] will be initialized to 0."
    },
    {
      "type": "ul",
      "text": [
        "We begin by setting the distance to the source node as 0 and assigning infinity to all other nodes in the distance array.",
        "Next, we execute a loop that runs exactly N-1 times.",
        "Within each iteration of this loop, we attempt to relax all the edges.\nFor instance, consider an edge represented as (u, v, w), where 'u' is the starting point, 'v' is the endpoint, and 'w' is the edge weight. For such edges, we check whether 'u' is reachable and if going from 'u' to 'v' results in a shorter path than previously known (i.e., check if dist[u] + w < dist[v]). If so, we update dist[v].",
        "After performing the relaxation process for N-1 rounds, we run the same process one additional time to detect a negative cycle. If further relaxation is possible in this round, it indicates the presence of a negative cycle, and we return an array filled with -1 (meaning valid shortest paths cannot be determined).",
        "If no negative cycle is detected, we return the distance array which now holds the minimized distances from the source to all other nodes."
      ]
    },
    {
      "type": "ol",
      "text": [
        "Step 1: Initialize distances. Distance[A] = 0, all others = ∞",
        "Step 2: First iteration (relax all edges):",
        "A → B: 0 + 4 = 4 → Distance[B] = 4",
        "A → C: 0 + 5 = 5 → Distance[C] = 5",
        "B → C: 4 + (-3) = 1 → Distance[C] = 1",
        "C → D: 1 + 4 = 5 → Distance[D] = 5",
        "D → B: 5 + (-6) = -1 → Distance[B] = -1",
        "Step 3: Second iteration:",
        "B → C: -1 + (-3) = -4 → Distance[C] = -4",
        "C → D: -4 + 4 = 0 → Distance[D] = 0",
        "D → B: 0 + (-6) = -6 → Distance[B] = -6",
        "Step 4: Third iteration: values keep reducing.",
        "If values continue to decrease, we detect a negative weight cycle!"
      ]
    },
    {
      "type": "h4",
      "text": "Bellman-Ford Pseudocode"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function bellmanFord(vertices, edges, source):\n    distance = map with all vertices set to ∞\n    distance[source] = 0\n\n    for i = 1 to vertices - 1:\n        for each (u, v, weight) in edges:\n            if distance[u] + weight < distance[v]:\n                distance[v] = distance[u] + weight\n\n    for each (u, v, weight) in edges:\n        if distance[u] + weight < distance[v]:\n            report \"Negative cycle detected\"\n\n    return distance"
      }
    },
    {
      "type": "h4",
      "text": "Time Complexity"
    },
    {
      "type": "ul",
      "text": [
        "Best Case: O(V × E)",
        "Average Case: O(V × E)",
        "Worst Case: O(V × E)"
      ]
    },
    {
      "type": "p5",
      "text": "Here, V is the number of vertices and E is the number of edges. It’s slower than Dijkstra but works when negative weights are present."
    },
    {
      "type": "h4",
      "text": "When to Use Bellman-Ford"
    },
    {
      "type": "ul",
      "text": [
        "When the graph contains negative edge weights.",
        "When you need to detect negative weight cycles.",
        "Not suitable for very large graphs due to higher time complexity."
      ]
    }
  ]
  