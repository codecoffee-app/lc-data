[
    {
      "type": "h4",
      "text": "What is the Bellman-Ford Algorithm?"
    },
    {
      "type": "p5",
      "text": "Bellman-Ford is a shortest path algorithm that works on graphs with both positive and negative edge weights. It’s particularly useful when there are edges with negative weights, where Dijkstra’s algorithm doesn’t work."
    },
    {
      "type": "ul",
      "text": [
        "Works on both directed and undirected graphs.",
        "Can handle graphs with negative edge weights.",
        "Detects negative weight cycles (cycles that reduce total path cost indefinitely)."
      ]
    },
    {
      "type": "h5",
      "text": "Real Life Example"
    },
    {
      "type": "p5",
      "text": "Imagine a network of cities connected by roads, where each road has a toll. Some roads even give refunds (negative tolls). Bellman-Ford helps you figure out the cheapest way to travel from one city to another, even when refunds exist."
    },
    {
      "type": "h4",
      "text": "How Bellman-Ford Works"
    },
    {
      "type": "ol",
      "text": [
        "Set the distance to the source node as 0 and all other nodes as infinity.",
        "Relax all edges |V| - 1 times, where |V| is the number of vertices.",
        "To relax an edge means: if the distance to the destination can be shortened by taking the edge, update the distance.",
        "After |V| - 1 iterations, check for negative weight cycles by checking one more time. If any distance can still be updated, there is a negative cycle."
      ]
    },
    {
      "type": "h4",
      "text": "Manual Walkthrough Example"
    },
    {
      "type": "p5",
      "text": "Let’s walk through an example graph:"
    },
    {
      "type": "code",
      "text": {
        "lang": "text",
        "code": "Vertices: A, B, C, D\nEdges:\nA → B (4)\nA → C (5)\nB → C (-3)\nC → D (4)\nD → B (-6)"
      }
    },
    {
      "type": "p5",
      "text": "We want to find the shortest paths from A to all other vertices."
    },
    {
      "type": "ol",
      "text": [
        "Step 1: Initialize distances. Distance[A] = 0, all others = ∞",
        "Step 2: First iteration (relax all edges):",
        "A → B: 0 + 4 = 4 → Distance[B] = 4",
        "A → C: 0 + 5 = 5 → Distance[C] = 5",
        "B → C: 4 + (-3) = 1 → Distance[C] = 1",
        "C → D: 1 + 4 = 5 → Distance[D] = 5",
        "D → B: 5 + (-6) = -1 → Distance[B] = -1",
        "Step 3: Second iteration:",
        "B → C: -1 + (-3) = -4 → Distance[C] = -4",
        "C → D: -4 + 4 = 0 → Distance[D] = 0",
        "D → B: 0 + (-6) = -6 → Distance[B] = -6",
        "Step 4: Third iteration: values keep reducing.",
        "If values continue to decrease, we detect a negative weight cycle!"
      ]
    },
    {
      "type": "h4",
      "text": "Bellman-Ford Pseudocode"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function bellmanFord(vertices, edges, source):\n    distance = map with all vertices set to ∞\n    distance[source] = 0\n\n    for i = 1 to vertices - 1:\n        for each (u, v, weight) in edges:\n            if distance[u] + weight < distance[v]:\n                distance[v] = distance[u] + weight\n\n    for each (u, v, weight) in edges:\n        if distance[u] + weight < distance[v]:\n            report \"Negative cycle detected\"\n\n    return distance"
      }
    },
    {
      "type": "h4",
      "text": "Time Complexity"
    },
    {
      "type": "ul",
      "text": [
        "Best Case: O(V × E)",
        "Average Case: O(V × E)",
        "Worst Case: O(V × E)"
      ]
    },
    {
      "type": "p5",
      "text": "Here, V is the number of vertices and E is the number of edges. It’s slower than Dijkstra but works when negative weights are present."
    },
    {
      "type": "h4",
      "text": "When to Use Bellman-Ford"
    },
    {
      "type": "ul",
      "text": [
        "When the graph contains negative edge weights.",
        "When you need to detect negative weight cycles.",
        "Not suitable for very large graphs due to higher time complexity."
      ]
    }
  ]
  