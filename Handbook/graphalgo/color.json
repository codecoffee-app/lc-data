[
    {
      "type": "h4",
      "text": "Graph Coloring"
    },
    {
      "type": "p5",
      "text": "Graph Coloring is a way of assigning colors to the vertices of a graph such that no two adjacent vertices share the same color."
    },
    {
      "type": "h5",
      "text": "Why is Graph Coloring Important?"
    },
    {
      "type": "ul",
      "text": [
        "Used in scheduling problems, such as exam or job scheduling.",
        "Used in register allocation in compilers.",
        "Used in map coloring where adjacent regions must have different colors."
      ]
    },
    {
      "type": "h5",
      "text": "What is the Chromatic Number?"
    },
    {
      "type": "p5",
      "text": "The chromatic number of a graph is the smallest number of colors needed to color the graph such that no two adjacent vertices share the same color."
    },
    {
      "type": "h5",
      "text": "Example Graph"
    },
    {
      "type": "img",
      "text": "https://i.imgur.com/I1uOaCJ.png",
      "style": "w-20 h-20"
    },
    {
      "type": "p5",
      "text": "Let’s consider a simple graph with 4 vertices and the following edges: 0-1, 0-2, 1-2, 1-3."
    },
    {
      "type": "h5",
      "text": "Step-by-Step Walkthrough (Greedy Coloring)"
    },
    {
      "type": "ol",
      "text": [
        "Start with the first vertex (0). Assign it color 0.",
        "Move to vertex 1. It is adjacent to vertex 0 (which is color 0), so assign color 1.",
        "Move to vertex 2. It is adjacent to both 0 (color 0) and 1 (color 1), so assign color 2.",
        "Move to vertex 3. It is adjacent only to vertex 1 (color 1), so assign color 0 (which is unused in its neighbors)."
      ]
    },
    {
      "type": "p5",
      "text": "Final colors: Vertex 0 → Color 0, Vertex 1 → Color 1, Vertex 2 → Color 2, Vertex 3 → Color 0."
    },
    {
      "type": "h5",
      "text": "Pseudo Code (Greedy Coloring)"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function greedyColoring(graph, V):\n    result = [-1] * V\n    result[0] = 0\n\n    for u from 1 to V-1:\n        available = [true] * V\n\n        for each neighbor of u:\n            if result[neighbor] != -1:\n                available[result[neighbor]] = false\n\n        for color from 0 to V-1:\n            if available[color] == true:\n                result[u] = color\n                break\n\n    return result"
      }
    },
    {
      "type": "h5",
      "text": "Time Complexity"
    },
    {
      "type": "ul",
      "text": [
        "Greedy Coloring: O(V^2) in adjacency matrix",
        "Can be optimized with adjacency list and efficient set lookup"
      ]
    },
    {
      "type": "h5",
      "text": "Real-World Applications"
    },
    {
      "type": "ul",
      "text": [
        "Timetable scheduling: Avoiding subject clashes for students",
        "Register allocation in compilers",
        "Frequency assignment for mobile towers",
        "Solving Sudoku puzzles"
      ]
    }
  ]
  