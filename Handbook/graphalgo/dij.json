[
  {
    "type": "h4",
    "text": "What is Dijkstra's Algorithm?"
  },
  {
    "type": "p5",
    "text": "Dijkstra's Algorithm is used to find the shortest path from a starting node to all other nodes in a weighted graph. It works for graphs with non-negative weights and is widely used in routing and navigation systems."
  },
  {
    "type": "h5",
    "text": "Why use Dijkstra's Algorithm?"
  },
  {
    "type": "ul",
    "text": [
      "To calculate the shortest path in a graph with non-negative weights.",
      "Useful for network routing, GPS navigation, and game development.",
      "Efficient and guarantees the shortest path."
    ]
  },
  {
    "type": "h5",
    "text": "Basic Idea"
  },
  {
    "type": "p5",
    "text": "Start with the source node, and assign it a distance of 0. All other nodes start with a distance of infinity. From the source, keep updating the shortest known distances to all its neighbors. Pick the next closest node and repeat this process until all nodes have been visited."
  },
  {
    "type": "h5",
    "text": "Manual Example Walkthrough"
  },
  {
    "type": "p5",
    "text": "Consider a graph with 5 nodes: A, B, C, D, E. The edges and their weights are:"
  },
  {
    "type": "code",
    "text": {
      "lang": "plain",
      "code": "A - B (2)\nA - C (4)\nB - C (1)\nB - D (7)\nC - E (3)\nD - E (1)"
    }
  },
  {
    "type": "ol",
    "text": [
      "Start at node A. Set distance of A = 0, and all others = âˆž.",
      "From A, update distances to neighbors: B (2), C (4).",
      "Next, pick B (the closest unvisited node). Check its neighbors.",
      "C can be reached via B at a total cost of 2 + 1 = 3, which is less than 4. Update C's distance to 3.",
      "D can be reached via B at a total cost of 2 + 7 = 9. Update D's distance to 9.",
      "Next, pick C (distance 3). From C, update E: 3 + 3 = 6.",
      "Now pick E (distance 6). From E, check D again: 6 + 1 = 7, which is less than 9. Update D's distance to 7.",
      "Finally, visit D. All nodes are now visited. Shortest distances from A are: A (0), B (2), C (3), D (7), E (6)."
    ]
  },
  {
    "type": "h5",
    "text": "Pseudo-Code"
  },
  {
    "type": "code",
    "text": {
      "lang": "pseudo",
      "code": "function Dijkstra(Graph, source):\n  for each node in Graph:\n    distance[node] = infinity\n    visited[node] = false\n  distance[source] = 0\n\n  while there are unvisited nodes:\n    current = node with smallest distance\n    visited[current] = true\n\n    for each neighbor of current:\n      if not visited[neighbor]:\n        newDist = distance[current] + edgeWeight(current, neighbor)\n        if newDist < distance[neighbor]:\n          distance[neighbor] = newDist\n\n  return distance"
    }
  },
  {
    "type": "h5",
    "text": "Time Complexity"
  },
  {
    "type": "p5",
    "text": "Using a priority queue, Dijkstra's algorithm has a time complexity of O((V + E) log V), where V is the number of vertices and E is the number of edges."
  },
  {
    "type": "h5",
    "text": "Important Notes"
  },
  {
    "type": "ul",
    "text": [
      "Does not work correctly with negative edge weights.",
      "Use Bellman-Ford for graphs with negative weights.",
      "Can be optimized using Min Heap or Priority Queue."
    ]
  }
]
