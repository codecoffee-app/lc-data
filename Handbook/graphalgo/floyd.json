[
    {
      "type": "h4",
      "text": "What is the Floyd-Warshall Algorithm?"
    },
    {
      "type": "p5",
      "text": "The Floyd-Warshall algorithm is a dynamic programming technique used to find the shortest paths between all pairs of nodes in a weighted graph. It works for both directed and undirected graphs and can handle negative edge weights, as long as there are no negative cycles."
    },
    {
      "type": "ul",
      "text": [
        "Used for finding shortest distances between every pair of vertices.",
        "Supports negative edge weights (no negative cycles).",
        "Time complexity is O(n^3), where n is the number of vertices."
      ]
    },
    {
      "type": "h5",
      "text": "Real-World Example"
    },
    {
      "type": "p5",
      "text": "Imagine a city's traffic navigation system. The roads (edges) between areas (nodes) have different travel times. You want to know the fastest way to get from every area to every other area. The Floyd-Warshall algorithm helps compute this efficiently."
    },
    {
      "type": "h4",
      "text": "How the Algorithm Works"
    },
    {
      "type": "ol",
      "text": [
        "Create a distance matrix 'dist[][]' where 'dist[i][j]' stores the shortest distance from node 'i' to node 'j'.",
        "Initialize the matrix with edge weights. If there’s no edge between 'i' and 'j', use infinity ('INF').",
        "For every node 'k' as an intermediate node:\n  For every pair of nodes '(i, j)':\n    If the path 'i -> k -> j'\n    is shorter than 'i -> j',\n    update 'dist[i][j]'.",
        "Repeat this process for all nodes 'k'."
      ]
    },
    {
      "type": "h4",
      "text": "Manual Walkthrough Example"
    },
    {
      "type": "p5",
      "text": "Let's take a simple graph with 4 nodes. The adjacency matrix (initial weights between nodes) is:"
    },
    {
      "type": "code",
      "text": {
        "lang": "plaintext",
        "code": "    0   1   2   3\n0 [  0   5  INF  10 ]\n1 [ INF  0   3  INF ]\n2 [ INF INF  0   1  ]\n3 [ INF INF INF  0  ]"
      }
    },
    {
      "type": "p5",
      "text": "Now we update the matrix by choosing each node as an intermediate node."
    },
    {
      "type": "ol",
      "text": [
        "Start with k = 0 (use node 0 as intermediate): No updates since all indirect paths through node 0 are longer.",
        "Now k = 1:",
        "dist[0][2] = min(INF, dist[0][1] + dist[1][2]) = min(INF, 5 + 3) = 8",
        "Updated matrix:\n    [ 0 ,  5 ,  8 ,  10  ]\n    [INF,  0 ,  3 , INF]\n    [INF, INF,  0 ,  1  ]\n    [INF, INF, INF, 0 ]",
        "Next, k = 2:",
        "dist[0][3] = min(10, dist[0][2] + dist[2][3]) = min(10, 8 + 1) = 9",
        "dist[1][3] = min(INF, dist[1][2] + dist[2][3]) = min(INF, 3 + 1) = 4",
        "Updated matrix:\n    [ 0 ,   5 ,  8 , 9]\n    [INF,  0 ,  3 , 4]\n    [INF, INF,  0 , 1]\n    [INF, INF, INF, 0]",
        "Finally, k = 3: No further updates as all shortest paths are already known."
      ]
    },
    {
      "type": "h4",
      "text": "Final Distance Matrix"
    },
    {
      "type": "code",
      "text": {
        "lang": "plaintext",
        "code": "     0   1   2   3\n0 [  0   5   8   9 ]\n1 [ INF  0   3   4 ]\n2 [ INF INF  0   1 ]\n3 [ INF INF INF  0 ]"
      }
    },
    {
      "type": "h4",
      "text": "Pseudo Code"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function floydWarshall(graph):\n    let dist = graph  // Copy the adjacency matrix\n    for k = 0 to V-1:\n        for i = 0 to V-1:\n            for j = 0 to V-1:\n                if dist[i][k] + dist[k][j] < dist[i][j]:\n                    dist[i][j] = dist[i][k] + dist[k][j]\n    return dist"
      }
    },
    {
      "type": "h4",
      "text": "Time Complexity"
    },
    {
      "type": "p5",
      "text": "The Floyd-Warshall algorithm has a time complexity of O(n³), where 'n' is the number of vertices. It's efficient for small to medium-sized graphs where all-pairs shortest path info is needed."
    },
    {
      "type": "h4",
      "text": "Key Notes"
    },
    {
      "type": "ul",
      "text": [
        "Works on both directed and undirected graphs.",
        "Can detect negative cycles if dist[i][i] becomes negative after processing.",
        "Better suited for dense graphs with a lot of edges."
      ]
    }
  ]
  