[
    {
      "type": "h4",
      "text": "Kruskal's Algorithm"
    },
    {
      "type": "p5",
      "text": "Kruskal’s Algorithm is a greedy algorithm used to find the Minimum Spanning Tree (MST) of a connected, undirected graph. An MST connects all the vertices in the graph with the minimum possible total edge weight and no cycles."
    },
    {
      "type": "h5",
      "text": "Why use Kruskal's Algorithm?"
    },
    {
      "type": "ul",
      "text": [
        "It helps in reducing the overall cost when connecting nodes.",
        "It is efficient for sparse graphs with fewer edges.",
        "Useful in designing network layouts like roads, electrical grids, or computer networks."
      ]
    },
    {
      "type": "h5",
      "text": "How does it work?"
    },
    {
      "type": "ol",
      "text": [
        "Sort all edges in increasing order of their weights.",
        "Start with an empty graph and keep adding the smallest edge that doesn’t form a cycle.",
        "Use a Union-Find (Disjoint Set Union) structure to detect cycles efficiently.",
        "Repeat until you have (V - 1) edges, where V is the number of vertices."
      ]
    },
    {
      "type": "h5",
      "text": "Example Graph"
    },
    {
      "type": "img",
      "text": "https://i.imgur.com/XhHg2Eq.png",
      "style": "w-100 h-100"
    },
    {
      "type": "p5",
      "text": "Imagine a graph with 4 nodes and 5 edges: A-B (1), A-C (3), B-C (2), B-D (4), C-D (5)."
    },
    {
      "type": "h5",
      "text": "Step-by-Step Walkthrough"
    },
    {
      "type": "ol",
      "text": [
        "Sort all edges: A-B (1), B-C (2), A-C (3), B-D (4), C-D (5)",
        "Start adding edges to MST one by one.",
        "Add A-B (1): No cycle.",
        "Add B-C (2): No cycle.",
        "Add A-C (3): Would form a cycle. Skip it.",
        "Add B-D (4): No cycle. Add it.",
        "We have 3 edges and 4 nodes. Done."
      ]
    },
    {
      "type": "p5",
      "text": "Final MST includes edges: A-B (1), B-C (2), B-D (4). Total weight = 7."
    },
    {
      "type": "h5",
      "text": "Pseudo Code"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function kruskal(graph):\n    mst = []\n    sort edges in graph by weight\n    create disjoint sets for each vertex\n\n    for each edge (u, v) in sorted edges:\n        if find(u) != find(v):\n            mst.append((u, v))\n            union(u, v)\n\n    return mst"
      }
    },
    {
      "type": "h5",
      "text": "Time Complexity"
    },
    {
      "type": "ul",
      "text": [
        "Sorting edges takes O(E log E)",
        "Union-Find operations are nearly constant time with path compression",
        "Overall: O(E log E), where E = number of edges"
      ]
    },
    {
      "type": "h5",
      "text": "Real-World Use Cases"
    },
    {
      "type": "ul",
      "text": [
        "Designing efficient electrical grids",
        "Laying fiber-optic cables between cities",
        "Creating cost-efficient road systems"
      ]
    }
  ]
  