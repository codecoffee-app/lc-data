[
    {
      "type": "h4",
      "text": "Prim's Algorithm"
    },
    {
      "type": "p5",
      "text": "Primâ€™s Algorithm is a greedy algorithm that helps us find the Minimum Spanning Tree (MST) of a weighted, connected, undirected graph. The MST connects all the nodes using the minimum possible total edge weight, without forming cycles."
    },
    {
      "type": "h5",
      "text": "Why use Prim's Algorithm?"
    },
    {
      "type": "ul",
      "text": [
        "Efficient for dense graphs with many edges.",
        "Great for network design problems such as computer networks, road maps, or electrical wiring.",
        "It builds the MST gradually by always choosing the smallest edge that expands the tree."
      ]
    },
    {
      "type": "h5",
      "text": "How does it work?"
    },
    {
      "type": "ol",
      "text": [
        "Start from any arbitrary node.",
        "Mark it as part of the MST.",
        "Look at all the edges that connect the MST to nodes not yet in the MST.",
        "Choose the edge with the smallest weight and add its destination node to the MST.",
        "Repeat until all nodes are included in the MST."
      ]
    },
    {
      "type": "h5",
      "text": "Example Graph"
    },
    {
      "type": "img",
      "text": "https://i.imgur.com/NAMbA8i.png",
      "style": "w-50 h-50"
    },
    {
      "type": "p5",
      "text": "Suppose we have 5 nodes with edges: A-B (2), A-C (3), B-D (3), C-D (1), D-E (6), C-E (5)."
    },
    {
      "type": "h5",
      "text": "Step-by-Step Walkthrough"
    },
    {
      "type": "ol",
      "text": [
        "Start from node A. Mark A as part of MST.",
        "Edges available: A-B (2), A-C (3)",
        "Choose A-B (2). Add B to MST.",
        "Now consider: A-C (3), B-D (3)",
        "Choose A-C (3). Add C to MST.",
        "Now consider: B-D (3), C-D (1), C-E (5)",
        "Choose C-D (1). Add D to MST.",
        "Now consider: C-E (5), D-E (6)",
        "Choose C-E (5). Add E to MST.",
        "All nodes are in the MST. Done."
      ]
    },
    {
      "type": "p5",
      "text": "Final MST includes edges: A-B (2), A-C (3), C-D (1), C-E (5). Total weight = 11."
    },
    {
      "type": "h5",
      "text": "Pseudo Code"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function prim(graph):\n    mst = []\n    visited = set()\n    minHeap = priority queue (min by weight)\n\n    start from any node, add its edges to minHeap\n\n    while minHeap is not empty and MST not complete:\n        weight, from, to = extract min from minHeap\n        if to not in visited:\n            visited.add(to)\n            mst.append((from, to, weight))\n            add all edges from 'to' to the heap that lead to unvisited nodes\n\n    return mst"
      }
    },
    {
      "type": "h5",
      "text": "Time Complexity"
    },
    {
      "type": "ul",
      "text": [
        "With Min-Heap + Adjacency List: O(E log V)",
        "Where E = number of edges, V = number of vertices"
      ]
    },
    {
      "type": "h5",
      "text": "Real-World Use Cases"
    },
    {
      "type": "ul",
      "text": [
        "Laying network cables minimizing total cost",
        "Designing electrical circuits",
        "Building efficient transportation systems"
      ]
    }
  ]
  