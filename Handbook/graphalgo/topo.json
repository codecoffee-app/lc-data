[
    {
      "type": "h4",
      "text": "Topological Sorting in Graphs"
    },
    {
      "type": "p5",
      "text": "Topological Sorting is a linear ordering of vertices in a Directed Acyclic Graph (DAG) such that for every directed edge u → v, vertex u comes before v in the ordering."
    },
    {
      "type": "h5",
      "text": "Why is Topological Sort Useful?"
    },
    {
      "type": "ul",
      "text": [
        "Used to schedule tasks where some tasks must be done before others.",
        "Common in build systems, course scheduling, and compiler instruction ordering.",
        "Only applicable for Directed Acyclic Graphs (DAGs)."
      ]
    },
    {
      "type": "h5",
      "text": "Conditions for Topological Sort"
    },
    {
      "type": "ul",
      "text": [
        "Graph must be directed.",
        "Graph must not contain cycles (i.e., it should be a DAG)."
      ]
    },
    {
      "type": "h5",
      "text": "Example Graph"
    },
    {
      "type": "img",
      "text": "https://i.imgur.com/OSfGbdQ.png",
      "style": "w-20 h-20"
    },
    {
      "type": "p5",
      "text": "Let's say we have the following edges: 5→0, 5→2, 4→0, 4→1, 2→3, 3→1."
    },
    {
      "type": "h5",
      "text": "Step-by-Step Walkthrough (Using DFS)"
    },
    {
      "type": "ol",
      "text": [
        "Start DFS from any unvisited node (e.g., 5).",
        "From 5, go to 2. From 2, go to 3. From 3, go to 1.",
        "Once you reach a node with no unvisited neighbors, add it to a stack.",
        "Repeat DFS from other unvisited nodes like 4.",
        "From 4, go to 0 and 1 (if not already visited).",
        "Continue this process until all nodes are visited.",
        "Pop nodes from the stack to get the topological order."
      ]
    },
    {
      "type": "p5",
      "text": "One possible topological order: 4, 5, 2, 3, 1, 0 (other valid orders are possible depending on traversal)."
    },
    {
      "type": "h5",
      "text": "Pseudo Code (DFS-Based)"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function topologicalSort(graph):\n    visited = set()\n    stack = []\n\n    for each node in graph:\n        if node not in visited:\n            dfs(node, visited, stack)\n\n    return stack reversed\n\nfunction dfs(node, visited, stack):\n    visited.add(node)\n    for neighbor in graph[node]:\n        if neighbor not in visited:\n            dfs(neighbor, visited, stack)\n    stack.append(node)"
      }
    },
    {
      "type": "h5",
      "text": "Alternative: Kahn’s Algorithm (BFS-Based)"
    },
    {
      "type": "ul",
      "text": [
        "Calculate in-degree of each node.",
        "Add all nodes with in-degree 0 to a queue.",
        "While queue is not empty, remove a node, add to result, and decrease in-degree of neighbors.",
        "If all nodes are processed, the result is a valid topological order."
      ]
    },
    {
      "type": "h5",
      "text": "Time Complexity"
    },
    {
      "type": "ul",
      "text": [
        "DFS-Based: O(V + E)",
        "Kahn’s Algorithm: O(V + E)",
        "Where V = number of vertices and E = number of edges"
      ]
    },
    {
      "type": "h5",
      "text": "Real-World Use Cases"
    },
    {
      "type": "ul",
      "text": [
        "Course prerequisite resolution",
        "Task scheduling in operating systems",
        "Build systems (e.g., Makefile dependency resolution)",
        "Instruction scheduling in compilers"
      ]
    }
  ]
  