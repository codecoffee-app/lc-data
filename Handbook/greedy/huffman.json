[
    {
      "type": "h4",
      "text": "What is Huffman Coding?"
    },
    {
      "type": "p5",
      "text": "Huffman Coding is a popular algorithm used for lossless data compression. It helps in reducing the size of files by encoding characters using variable-length codes. The most frequent characters get shorter codes, while less frequent characters get longer codes."
    },
    {
      "type": "img",
      "text": "https://picsum.photos/400/200",
      "style": "w-36 h-12"
    },
    {
      "type": "h5",
      "text": "How Does Huffman Coding Work?"
    },
    {
      "type": "p5",
      "text": "Huffman coding uses a binary tree structure to create optimal codes. Here's the approach:"
    },
    {
      "type": "ol",
      "text": [
        "Calculate the frequency of each character.",
        "Build a binary tree with the least frequent characters at the leaf nodes.",
        "Merge nodes with the least frequency until all characters are connected to a single root node.",
        "Assign binary codes (0 for left, 1 for right) to each character from the root to the leaf."
      ]
    },
    {
      "type": "h5",
      "text": "Step-by-Step Example"
    },
    {
      "type": "p5",
      "text": "Consider this input string: `ABRACADABRA`"
    },
    {
      "type": "h5",
      "text": "Step 1: Calculate Frequencies"
    },
    {
      "type": "p5",
      "text": "The frequency of each character is calculated as shown below."
    },
    {
        "type": "ul",
        "text": [
          "A: 5",
          "B: 2",
          "R: 2",
          "C: 1",
          "D: 1"
        ]
      },
    {
      "type": "h5",
      "text": "Step 2: Build Huffman Tree"
    },
    {
      "type": "p5",
      "text": "We start by arranging the characters based on their frequencies. We build the tree from the least frequent characters."
    },
    {
      "type": "img",
      "text": "https://example.com/huffman-tree.png",
      "style": "w-36 h-12"
    },
    {
      "type": "h5",
      "text": "Step 3: Generate Binary Codes"
    },
    {
      "type": "p5",
      "text": "Once the tree is built, we assign 0 and 1 to each branch, starting from the root to the leaf nodes."
    },
    {
      "type": "ul",
      "text": [
        "A: 0",
        "B: 10",
        "R: 11",
        "C: 110",
        "D: 111"
      ]
    },
    {
      "type": "h5",
      "text": "Step 4: Resulting Huffman Code"
    },
    {
      "type": "p5",
      "text": "The Huffman encoded string for `ABRACADABRA` becomes:"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "011011011011101011001011011100101"
      }
    },
    {
      "type": "h5",
      "text": "Huffman Coding Pseudo Code"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "Calculate frequencies of each character.\nBuild a priority queue (min-heap) with characters and their frequencies.\nWhile the queue has more than one node:\n    Remove two nodes with the smallest frequency.\n    Create a new internal node with these two nodes as children.\nTraverse the tree to generate the binary codes."
      }
    },
    {
      "type": "h5",
      "text": "Applications of Huffman Coding"
    },
    {
      "type": "ul",
      "text": [
        "Data compression (ZIP files, MP3 audio files)",
        "Text file compression (e.g., .txt, .html)",
        "Image file compression (e.g., JPEG)",
        "Video file compression (e.g., MPEG)"
      ]
    }
  ]
  