[
    {
      "type": "h4",
      "text": "Different Hash Functions"
    },
    {
      "type": "p5",
      "text": "Hash functions convert keys into index values that can be used to access data quickly in a hash table. Let's explore three common techniques used to create these functions."
    },
    {
      "type": "h5",
      "text": "1. Division Method"
    },
    {
      "type": "p5",
      "text": "This is one of the simplest and most widely used hashing techniques. It uses the remainder operation to map keys to table indices."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function hash(key):\n  return key % tableSize"
      }
    },
    {
      "type": "ul",
      "text": [
        "Easy to implement.",
        "Choose a prime number as tableSize to reduce collisions."
      ]
    },
    {
      "type": "h5",
      "text": "2. Multiplication Method"
    },
    {
      "type": "p5",
      "text": "This method multiplies the key by a constant A (0 < A < 1), extracts the fractional part, and multiplies it by the table size."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function hash(key):\n  A = 0.6180339887  // Constant (approx. golden ratio)\n  fractional = (key * A) % 1\n  return floor(tableSize * fractional)"
      }
    },
    {
      "type": "ul",
      "text": [
        "Distributes keys more uniformly.",
        "Less sensitive to patterns in input data."
      ]
    },
    {
      "type": "h5",
      "text": "3. Mid Square Method"
    },
    {
      "type": "p5",
      "text": "This method squares the key and extracts the middle digits or bits of the result to get the index."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function hash(key):\n  square = key * key\n  middleDigits = extractMiddle(square)\n  return middleDigits % tableSize"
      }
    },
    {
      "type": "ul",
      "text": [
        "Good distribution for small key values.",
        "Requires a function to extract middle digits."
      ]
    },
    {
      "type": "p5",
      "text": "Each method has its strengths. The choice depends on your data and the application â€” but all aim to minimize collisions and spread data evenly across the table."
    }
  ]
  