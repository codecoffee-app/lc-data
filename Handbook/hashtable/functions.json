[
    {
      "type": "h4",
      "text": "What is a Hash Function?"
    },
    {
      "type": "p5",
      "text": "A hash function is like a smart calculator that takes in a key (like a name or number) and returns a unique locker number (called a hash) where the data can be stored in a hash table."
    },
    {
      "type": "ul",
      "text": [
        "It takes an input (key) and returns a fixed-size integer (hash code).",
        "The hash code determines the index where the value is stored in the hash table.",
        "The same key will always produce the same hash code."
      ]
    },
    {
      "type": "h5",
      "text": "Simple Example"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function hashFunction(key):\n  hash = 0\n  for each character in key:\n    hash = hash + ASCII value of character\n  return hash % tableSize"
      }
    },
    {
      "type": "p5",
      "text": "In this example, the hash function adds up the ASCII values of all characters in the key and then uses modulo with the table size to ensure it fits inside the table."
    },
    {
      "type": "h5",
      "text": "Properties of a Good Hash Function"
    },
    {
      "type": "ul",
      "text": [
        "Deterministic – The same input should always produce the same output.",
        "Uniform Distribution – It should spread values evenly across the table to avoid clustering.",
        "Efficient – It should compute the hash quickly.",
        "Minimizes Collisions – Fewer chances that different keys get the same hash.",
        "Works Well with Similar Inputs – Slightly different inputs should give very different hash values."
      ]
    },
    {
      "type": "p5",
      "text": "A well-designed hash function helps maintain the speed and efficiency of the hash table by reducing collisions and spreading data evenly."
    }
  ]
  