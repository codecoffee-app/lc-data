[
    {
      "type": "h4",
      "text": "Understanding Bucket Hashing and Collision Resolution"
    },
    {
      "type": "p5",
      "text": "In a hash table, we use a hash function to map keys to positions (or indexes). Sometimes, two different keys might be mapped to the same position. This situation is called a collision. Let's explore how to handle it."
    },
    {
      "type": "h5",
      "text": "What is Bucket Hashing?"
    },
    {
      "type": "p5",
      "text": "In bucket hashing, each slot in the hash table points to a bucket — which is essentially a list or container that can hold multiple items. So, even if multiple keys map to the same index, we can store them all in that bucket."
    },
    {
      "type": "ul",
      "text": [
        "Each index holds a list (or another structure).",
        "Reduces chances of data loss due to collision.",
        "Simple to implement using linked lists."
      ]
    },
    {
      "type": "h5",
      "text": "What are Collisions?"
    },
    {
      "type": "p5",
      "text": "A collision occurs when two different keys are assigned to the same index by the hash function. This is a common issue in hashing, and it must be resolved for the table to work correctly."
    },
    {
      "type": "img",
      "text": "https://picsum.photos/seed/collision/300/200",
      "style": "w-33 h-9"
    },
    {
      "type": "h5",
      "text": "Collision Resolution Strategies"
    },
    {
      "type": "p5",
      "text": "There are two common ways to handle collisions: Open Addressing and Separate Chaining."
    },
    {
      "type": "h5",
      "text": "1. Open Addressing"
    },
    {
      "type": "p5",
      "text": "In open addressing, all elements are stored within the hash table itself. When a collision occurs, we search for the next available slot based on a probing technique."
    },
    {
      "type": "ul",
      "text": [
        "Linear Probing: Check the next slot (index + 1, index + 2, ...).",
        "Quadratic Probing: Use square increments (1², 2², 3²...).",
        "Double Hashing: Use a second hash function to decide step size."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insert(key):\n  index = hash(key)\n  while table[index] is occupied:\n    index = (index + 1) % tableSize\n  table[index] = key"
      }
    },
    {
      "type": "h5",
      "text": "2. Separate Chaining"
    },
    {
      "type": "p5",
      "text": "In separate chaining, each index in the hash table holds a list of all elements that hash to that index. So, if multiple keys map to the same index, they are stored in a linked list."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insert(key):\n  index = hash(key)\n  add key to the linked list at table[index]"
      }
    },
    {
      "type": "ul",
      "text": [
        "Avoids clustering (a problem in open addressing).",
        "Allows unlimited elements at the same index (within memory limits).",
        "Simple and effective using linked lists or dynamic arrays."
      ]
    },
    {
      "type": "p5",
      "text": "Each method has pros and cons. For example, open addressing uses less memory, but separate chaining can be more efficient when there are many collisions."
    }
  ]
  