[
    {
      "type": "h4",
      "text": "What is a Max Heap?"
    },
    {
      "type": "p5",
      "text": "A Max Heap is a complete binary tree where the value at each parent node is greater than or equal to the values of its children. This means the largest value is always at the root of the tree."
    },
    {
      "type": "img",
      "text": "https://codecoffee-app.github.io/lc-data/handbook-images/heap/max/1.webp",
      "style": "w-25 h-13 my-1"
    },
    {
      "type": "h5",
      "text": "Key Properties of Max Heap"
    },
    {
      "type": "ul",
      "text": [
        "It is a complete binary tree.",
        "The root node always has the largest value.",
        "Each parent node is greater than or equal to its children."
      ]
    },
    {
      "type": "p5",
      "text": "Because of this structure, accessing the maximum value is always efficient — it is always at the top!"
    },
    {
      "type": "h5",
      "text": "How Max Heap is Represented"
    },
    {
      "type": "p5",
      "text": "Max Heaps are usually stored as arrays where the index relationships are:"
    },
    {
      "type": "ul",
      "text": [
        "Parent of node at index i: floor((i - 1) / 2)",
        "Left child of node at index i: 2 * i + 1",
        "Right child of node at index i: 2 * i + 2"
      ]
    },
    {
      "type": "h5",
      "text": "Insert Operation in Max Heap"
    },
    {
      "type": "p5",
      "text": "When inserting a new element into a Max Heap:"
    },
    {
      "type": "ol",
      "text": [
        "Add the element at the end of the array.",
        "Compare it with its parent — if it's larger, swap.",
        "Repeat until the heap property is restored."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insert(heap, value):\n  heap.append(value)\n  current = index of last element\n  while current > 0 and heap[current] > heap[parent(current)]:\n    swap heap[current] and heap[parent(current)]\n    current = parent(current)"
      }
    },
    {
      "type": "h5",
      "text": "Delete (Extract Max) Operation in Max Heap"
    },
    {
      "type": "p5",
      "text": "To remove the largest element from a Max Heap:"
    },
    {
      "type": "ol",
      "text": [
        "Replace the root with the last element.",
        "Remove the last element.",
        "Heapify from the root down — swap with the larger child until the heap property is restored."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function extractMax(heap):\n  max = heap[0]\n  heap[0] = heap[last index]\n  remove last element\n  heapifyDown(0)\n  return max"
      }
    },
    {
      "type": "h5",
      "text": "Use Cases of Max Heap"
    },
    {
      "type": "ul",
      "text": [
        "Implementing priority queues where highest priority element is served first.",
        "Heap sort algorithm.",
        "Implementing efficient scheduling systems where tasks with higher priority are executed first.",
        "Finding the Kth largest element in an array."
      ]
    }
  ]
  