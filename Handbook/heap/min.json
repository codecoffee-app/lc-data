[
    {
      "type": "h4",
      "text": "What is a Min Heap?"
    },
    {
      "type": "p5",
      "text": "A Min Heap is a complete binary tree where the value at each parent node is less than or equal to the values of its children. This means the smallest value is always at the root of the tree."
    },
    {
      "type": "img",
      "text": "https://codecoffee-app.github.io/lc-data/handbook-images/heap/introduction/1.webp",
      "style": "w-25 h-13 my-1"
    },
    {
      "type": "h5",
      "text": "Key Properties of Min Heap"
    },
    {
      "type": "ul",
      "text": [
        "It is a complete binary tree.",
        "The root node always has the smallest value.",
        "Each parent node is smaller than or equal to its children."
      ]
    },
    {
      "type": "p5",
      "text": "Because of this structure, accessing the minimum value is always efficient — it is always at the top!"
    },
    {
      "type": "h5",
      "text": "How Min Heap is Represented"
    },
    {
      "type": "p5",
      "text": "Min Heaps are usually stored as arrays where the index relationships are:"
    },
    {
      "type": "ul",
      "text": [
        "Parent of node at index i: floor((i - 1) / 2)",
        "Left child of node at index i: 2 * i + 1",
        "Right child of node at index i: 2 * i + 2"
      ]
    },
    {
      "type": "h5",
      "text": "Insert Operation in Min Heap"
    },
    {
      "type": "p5",
      "text": "When inserting a new element into a Min Heap:"
    },
    {
      "type": "ol",
      "text": [
        "Add the element at the end of the array.",
        "Compare it with its parent — if it's smaller, swap.",
        "Repeat until the heap property is restored."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insert(heap, value):\n  heap.append(value)\n  current = index of last element\n  while current > 0 and heap[current] < heap[parent(current)]:\n    swap heap[current] and heap[parent(current)]\n    current = parent(current)"
      }
    },
    {
      "type": "h5",
      "text": "Delete (Extract Min) Operation in Min Heap"
    },
    {
      "type": "p5",
      "text": "To remove the smallest element from a Min Heap:"
    },
    {
      "type": "ol",
      "text": [
        "Replace the root with the last element.",
        "Remove the last element.",
        "Heapify from the root down — swap with the smaller child until the heap property is restored."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function extractMin(heap):\n  min = heap[0]\n  heap[0] = heap[last index]\n  remove last element\n  heapifyDown(0)\n  return min"
      }
    },
    {
      "type": "h5",
      "text": "Use Cases of Min Heap"
    },
    {
      "type": "ul",
      "text": [
        "Implementing priority queues where lowest priority element is served first.",
        "Dijkstra’s shortest path algorithm.",
        "Merging multiple sorted arrays efficiently.",
        "Scheduling jobs by earliest deadline."
      ]
    }
  ]
  