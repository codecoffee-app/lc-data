[
    {
      "type": "h4",
      "text": "What is a Circular Linked List?"
    },
    {
      "type": "p5",
      "text": "Imagine a group of friends standing in a circle, each holding hands with the next person, and the last person is also holding the first person's hand. That's a circular linked list! The last node points back to the first node, creating a loop."
    },
    {
      "type": "img",
      "text": "https://picsum.photos/300/200",
      "style": "w-33 h-9"
    },
    {
      "type": "ul",
      "text": [
        "There is no true beginning or end.",
        "You can start traversal from any node.",
        "It loops back to the start automatically."
      ]
    },
    {
      "type": "h5",
      "text": "Steps Before Performing Operations"
    },
    {
      "type": "ol",
      "text": [
        "Include necessary utilities and structures.",
        "Declare user-defined functions.",
        "Define a Node with 'data' and 'next'.",
        "Initialize a Node pointer 'head' to NULL."
      ]
    },
    {
      "type": "h5",
      "text": "Inserting at the Beginning"
    },
    {
      "type": "ol",
      "text": [
        "Create a newNode with the given value.",
        "Check whether the list is empty.",
        "If empty, set head = newNode and newNode.next = head.",
        "If not empty, define a pointer 'temp' and start from head.",
        "Move temp until it reaches the last node.",
        "Set newNode.next = head, head = newNode, and temp.next = head."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insertAtBeginning(value):\n  newNode = createNode(value)\n  if head == null:\n    head = newNode\n    newNode.next = head\n  else:\n    temp = head\n    while temp.next != head:\n      temp = temp.next\n    newNode.next = head\n    head = newNode\n    temp.next = head"
      }
    },
    {
      "type": "h5",
      "text": "Inserting at the End"
    },
    {
      "type": "ol",
      "text": [
        "Create a newNode with the given value.",
        "Check whether the list is empty.",
        "If empty, set head = newNode and newNode.next = head.",
        "If not empty, define a pointer temp and start from head.",
        "Move temp until it reaches the last node.",
        "Set temp.next = newNode and newNode.next = head."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insertAtEnd(value):\n  newNode = createNode(value)\n  if head == null:\n    head = newNode\n    newNode.next = head\n  else:\n    temp = head\n    while temp.next != head:\n      temp = temp.next\n    temp.next = newNode\n    newNode.next = head"
      }
    },
    {
      "type": "h5",
      "text": "Inserting After a Given Node"
    },
    {
      "type": "ol",
      "text": [
        "Create a newNode with the given value.",
        "Check whether the list is empty.",
        "If empty, set head = newNode and newNode.next = head.",
        "If not empty, define pointer temp and start from head.",
        "Move temp until temp.data matches the given location or you loop back to head.",
        "If the node is not found, exit.",
        "If itâ€™s the last node, set temp.next = newNode and newNode.next = head.",
        "If not, set newNode.next = temp.next and temp.next = newNode."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insertAfter(value, location):\n  newNode = createNode(value)\n  if head == null:\n    head = newNode\n    newNode.next = head\n  else:\n    temp = head\n    do:\n      if temp.data == location:\n        newNode.next = temp.next\n        temp.next = newNode\n        return\n      temp = temp.next\n    while temp != head\n    print('Node not found')"
      }
    },
    {
      "type": "h5",
      "text": "Deleting from the Beginning"
    },
    {
      "type": "ol",
      "text": [
        "Check if the list is empty.",
        "If empty, print a message and exit.",
        "Find the last node using a loop.",
        "Set temp = head and update head to head.next.",
        "Set last.next = head.",
        "Free the old head node."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function deleteBeginning():\n  if head == null:\n    print('List is empty')\n    return\n  temp = head\n  if temp.next == head:\n    head = null\n    free(temp)\n  else:\n    last = head\n    while last.next != head:\n      last = last.next\n    head = head.next\n    last.next = head\n    free(temp)"
      }
    },
    {
      "type": "h5",
      "text": "Deleting a Specific Node"
    },
    {
      "type": "ol",
      "text": [
        "Check whether list is empty.",
        "If empty, print message and exit.",
        "Initialize pointers temp1 and temp2. Start temp1 from head.",
        "Move temp1 until it reaches the node to delete or loops back.",
        "Track previous node using temp2 before each step.",
        "If node not found, exit.",
        "If only one node and it's the one to delete, set head = null and free node.",
        "If it's the first node, move temp2 to last, update head and last.next.",
        "If it's the last node, update temp2.next = head and free temp1.",
        "If it's a middle node, update temp2.next = temp1.next and free temp1."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function deleteSpecific(value):\n  if head == null:\n    print('List is empty')\n    return\n  temp1 = head\n  do:\n    if temp1.data == value:\n      break\n    temp2 = temp1\n    temp1 = temp1.next\n  while temp1 != head\n  if temp1.data != value:\n    print('Node not found')\n    return\n  if temp1 == head and temp1.next == head:\n    head = null\n  elif temp1 == head:\n    temp2 = head\n    while temp2.next != head:\n      temp2 = temp2.next\n    head = head.next\n    temp2.next = head\n  elif temp1.next == head:\n    temp2.next = head\n  else:\n    temp2.next = temp1.next\n  free(temp1)"
      }
    },
    {
        "type": "h5",
        "text": "Deleting at the End"
      },
      {
        "type": "ol",
        "text": [
          "Check whether the list is empty.",
          "If empty, print a message and exit.",
          "Define two pointers: temp1 and temp2. Start temp1 from head.",
          "Loop until temp1.next is head, moving temp2 to track the previous node.",
          "If temp1 is the only node (head == temp1), set head = null and free temp1.",
          "Otherwise, set temp2.next = head and free temp1."
        ]
      },
      {
        "type": "code",
        "text": {
          "lang": "pseudo",
          "code": "function deleteEnd():\n  if head == null:\n    print('List is empty')\n    return\n  temp1 = head\n  if temp1.next == head:\n    head = null\n    free(temp1)\n    return\n  while temp1.next != head:\n    temp2 = temp1\n    temp1 = temp1.next\n  temp2.next = head\n  free(temp1)"
        }
      }
  ]
  