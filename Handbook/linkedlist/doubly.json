[
    {
      "type": "h4",
      "text": "What is a Doubly Linked List?"
    },
    {
      "type": "p5",
      "text": "A Doubly Linked List is a type of linked list where each node contains a value and two pointers: one pointing to the next node and another pointing to the previous node. This allows movement in both directions—forward and backward."
    },
    {
      "type": "img",
      "text": "https://picsum.photos/300/200",
      "style": "w-33 h-9"
    },
    {
      "type": "ul",
      "text": [
        "Each node contains: data, next pointer, and previous pointer.",
        "You can insert and delete elements from both ends efficiently.",
        "Traversal is possible in both forward and backward directions."
      ]
    },
    {
      "type": "h5",
      "text": "Before You Begin"
    },
    {
      "type": "ol",
      "text": [
        "Define a Node structure with members: data, next, and previous.",
        "Create a pointer named head and initialize it as NULL."
      ]
    },
    {
      "type": "h5",
      "text": "Inserting at the Beginning"
    },
    {
      "type": "ol",
      "text": [
        "Create a new node with the given value. Set its previous pointer to NULL.",
        "Check if the list is empty.",
        "If it is empty, set the next pointer of new node to NULL and assign new node to head.",
        "If it is not empty, set new node’s next pointer to head and update head’s previous pointer to new node. Then assign head to new node."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insertAtBeginning(value):\n    newNode = createNode(value)\n    newNode.previous = NULL\n    if head == NULL:\n        newNode.next = NULL\n        head = newNode\n    else:\n        newNode.next = head\n        head.previous = newNode\n        head = newNode"
      }
    },
    {
      "type": "h5",
      "text": "Inserting at the End"
    },
    {
      "type": "ol",
      "text": [
        "Create a new node with the given value. Set its next pointer to NULL.",
        "Check if the list is empty.",
        "If it is empty, set previous pointer of new node to NULL and assign it to head.",
        "If it is not empty, define a temporary pointer starting at head.",
        "Move temp to its next until it reaches the last node.",
        "Set last node’s next to new node and new node’s previous to temp."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insertAtEnd(value):\n    newNode = createNode(value)\n    newNode.next = NULL\n    if head == NULL:\n        newNode.previous = NULL\n        head = newNode\n    else:\n        temp = head\n        while temp.next != NULL:\n            temp = temp.next\n        temp.next = newNode\n        newNode.previous = temp"
      }
    },
    {
      "type": "h5",
      "text": "Inserting at a Specific Position"
    },
    {
      "type": "ol",
      "text": [
        "Create a new node with the given value.",
        "Check if the list is empty.",
        "If it is empty, set both next and previous pointers of new node to NULL and assign it to head.",
        "If it is not empty, define a temporary pointer starting at head.",
        "Move temp to the position just before where you want to insert the new node (use loop till position - 1).",
        "If position is valid, insert the new node by adjusting the pointers accordingly."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insertAtPosition(value, pos):\n    newNode = createNode(value)\n    if head == NULL:\n        newNode.previous = NULL\n        newNode.next = NULL\n        head = newNode\n    else:\n        temp = head\n        for i from 0 to pos - 1:\n            if temp.next == NULL:\n                return \"Invalid position\"\n            temp = temp.next\n        newNode.next = temp.next\n        if temp.next != NULL:\n            temp.next.previous = newNode\n        temp.next = newNode\n        newNode.previous = temp"
      }
    },
    {
      "type": "h5",
      "text": "Deleting from the Beginning"
    },
    {
      "type": "ol",
      "text": [
        "Check if the list is empty.",
        "If it is empty, display message and return.",
        "If not, define a temporary pointer set to head.",
        "Check if there's only one node.",
        "If only one node, set head to NULL and delete the node.",
        "If more than one node, move head to next and update its previous pointer to NULL. Delete the old head node."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function deleteFromBeginning():\n    if head == NULL:\n        print(\"List is empty\")\n    else:\n        temp = head\n        if temp.next == NULL:\n            head = NULL\n        else:\n            head = temp.next\n            head.previous = NULL\n        delete temp"
      }
    },
    {
      "type": "h5",
      "text": "Deleting from the End"
    },
    {
      "type": "ol",
      "text": [
        "Check if the list is empty.",
        "If it is empty, display message and return.",
        "If not, define a temporary pointer set to head.",
        "Check if there's only one node.",
        "If only one node, set head to NULL and delete it.",
        "If more than one, move temp to last node.",
        "Update the previous node’s next pointer to NULL and delete the last node."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function deleteFromEnd():\n    if head == NULL:\n        print(\"List is empty\")\n    else:\n        temp = head\n        if temp.next == NULL:\n            head = NULL\n        else:\n            while temp.next != NULL:\n                temp = temp.next\n            temp.previous.next = NULL\n        delete temp"
      }
    },
    {
      "type": "h5",
      "text": "Deleting a Specific Node"
    },
    {
      "type": "ol",
      "text": [
        "Check if the list is empty.",
        "If it is empty, display message and return.",
        "Define a temporary pointer starting at head.",
        "Move temp until it matches the node with the given value or reaches the end.",
        "If not found, display message and return.",
        "If the node is the only node, set head to NULL and delete it.",
        "If the node is the first node, move head to next, update its previous pointer to NULL, and delete the node.",
        "If the node is the last node, update previous node’s next to NULL and delete it.",
        "If it's a middle node, connect previous node’s next to next node and next node’s previous to previous node, then delete it."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function deleteNode(value):\n    if head == NULL:\n        print(\"List is empty\")\n    else:\n        temp = head\n        while temp != NULL and temp.data != value:\n            temp = temp.next\n        if temp == NULL:\n            print(\"Node not found\")\n        else if temp == head and temp.next == NULL:\n            head = NULL\n        else if temp == head:\n            head = head.next\n            head.previous = NULL\n        else if temp.next == NULL:\n            temp.previous.next = NULL\n        else:\n            temp.previous.next = temp.next\n            temp.next.previous = temp.previous\n        delete temp"
      }
    }
  ]
  