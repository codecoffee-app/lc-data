[
    {
      "type": "h4",
      "text": "What is a Linked List?"
    },
    {
      "type": "p5",
      "text": "A linked list is a way of storing data where each item (called a node) holds two things: the actual data and a reference (or link) to the next node. This creates a chain-like structure that can grow or shrink dynamically."
    },
    {
      "type": "p5",
      "text": "Unlike arrays, the elements are not stored in continuous memory locations. Instead, each node points to the next, forming a sequence."
    },
    {
      "type": "img",
      "text": "https://codecoffee-app.github.io/lc-data/handbook-images/linkedlist/introduction/1.webp",
      "style": "w-35 h-10"
    },
    {
      "type": "h5",
      "text": "Structure of a Node"
    },
    {
      "type": "p5",
      "text": "Each node contains two parts: the data itself, and a pointer to the next node in the list. Here's how a node is usually defined in C:"
    },
    {
      "type": "code",
      "text": {
        "lang": "c",
        "code": "struct Node {\n    int data;\n    struct Node* next;\n};"
      }
    },
    {
      "type": "h5",
      "text": "Why Use a Linked List Instead of an Array?"
    },
    {
      "type": "ul",
      "text": [
        "Dynamic Size: Linked lists grow or shrink as needed. There's no need to define a fixed size.",
        "Efficient Insertion/Deletion: Adding or removing nodes is fast and doesn't require shifting other elements."]
    },
    {
        "type": "h5",
        "text": "Why not use a Linked List over an Array?"
      },
      {
        "type": "ul",
        "text": [
          "More Memory Overhead: Each node needs extra space for the pointer to the next node.",
          "No Direct Access: You must traverse the list from the start to reach a particular element.",
          "Difficult Reverse Traversal: In a singly linked list, going backwards is not easy. This can be solved using a doubly linked list, which adds another pointer but uses more memory."
        ]
      },
    {
      "type": "h5",
      "text": "Accessing Elements"
    },
    {
      "type": "p5",
      "text": "Unlike arrays where you can jump to any element directly using an index, linked lists require you to go node by node starting from the head. This is why access time is O(n) on average."
    },
    {
      "type": "h5",
      "text": "Big-O Time Complexity"
    },
    {
      "type": "ul",
      "text": [
        "Search: O(n)",
        "Insertion: O(1) (if position is known)",
        "Deletion: O(1) (if position is known)",
        "Access: O(n)",
        "Space: O(n)"
      ]
    },
    {
      "type": "h5",
      "text": "Real-World Uses of Linked Lists"
    },
    {
      "type": "ol",
      "text": [
        "Used in the implementation of stacks, queues, and graph structures.",
        "Applied in hashing techniques such as chaining in hash tables (open chaining).",
        "Used in memory management systems and file systems."
      ]
    }
  ]
  