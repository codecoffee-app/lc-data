[
    {
      "type": "h4",
      "text": "What is a Singly Linked List?"
    },
    {
      "type": "p5",
      "text": "A singly linked list is a linear data structure where each element, called a node, contains data and a reference to the next node in the sequence. Unlike arrays, it allows for dynamic memory usage and efficient insertions or deletions at various positions."
    },
    {
      "type": "ul",
      "text": [
        "Each node contains two parts: data and a pointer to the next node.",
        "The list can only be traversed in one direction — from head to tail.",
        "Memory is allocated dynamically, allowing the list to grow or shrink as needed."
      ]
    },
    {
      "type": "h5",
      "text": "Basic Node Structure in Pseudocode"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "Node {\n  int data\n  Node next\n}"
      }
    },
    {
      "type": "h4",
      "text": "Insertion at Beginning"
    },
    {
      "type": "ul",
      "text": [
        "Create a new node with the given value.",
        "If the list is empty, set head to the new node.",
        "Otherwise, point newNode.next to head and update head to newNode."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insertAtBeginning(value):\n  newNode = new Node(value)\n  if head is NULL:\n    head = newNode\n  else:\n    newNode.next = head\n    head = newNode"
      }
    },
    {
      "type": "h4",
      "text": "Insertion at End"
    },
    {
      "type": "ul",
      "text": [
        "Create a new node and set its next to NULL.",
        "If the list is empty, set head to newNode.",
        "Otherwise, traverse to the last node and set last.next = newNode."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insertAtEnd(value):\n  newNode = new Node(value)\n  if head is NULL:\n    head = newNode\n  else:\n    temp = head\n    while temp.next != NULL:\n      temp = temp.next\n    temp.next = newNode"
      }
    },
    {
      "type": "h4",
      "text": "Insertion at a Specific Position"
    },
    {
      "type": "ul",
      "text": [
        "Create a new node with the given value.",
        "If the position is 1 and list is empty, set head = newNode.",
        "Else, traverse to the node at (pos - 1), and adjust pointers to insert the newNode in between."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function insertAtPosition(value, pos):\n  newNode = new Node(value)\n  if pos == 1:\n    newNode.next = head\n    head = newNode\n  else:\n    temp = head\n    for i = 0 to pos - 2:\n      temp = temp.next\n    newNode.next = temp.next\n    temp.next = newNode"
      }
    },
    {
      "type": "h4",
      "text": "Deletion at Beginning"
    },
    {
      "type": "ul",
      "text": [
        "Check if the list is empty — if yes, return.",
        "Otherwise, move head to head.next and free the old head node."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function deleteBeginning():\n  if head == NULL:\n    print(\"List is Empty\")\n  else:\n    temp = head\n    head = head.next\n    free(temp)"
      }
    },
    {
      "type": "h4",
      "text": "Deletion at End"
    },
    {
      "type": "ul",
      "text": [
        "If the list is empty, return.",
        "If there's only one node, delete it and set head to NULL.",
        "Otherwise, traverse to the second last node and set its next to NULL."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function deleteEnd():\n  if head == NULL:\n    print(\"List is Empty\")\n  elif head.next == NULL:\n    free(head)\n    head = NULL\n  else:\n    temp = head\n    while temp.next.next != NULL:\n      temp = temp.next\n    free(temp.next)\n    temp.next = NULL"
      }
    },
    {
      "type": "h4",
      "text": "Deletion at Specific Position"
    },
    {
      "type": "ul",
      "text": [
        "If the list is empty, return.",
        "If the position is 1, remove the head.",
        "Otherwise, traverse to the node before the one to delete.",
        "Adjust pointers to bypass the node and free it."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function deleteAtPosition(pos):\n  if head == NULL:\n    print(\"List is Empty\")\n  elif pos == 1:\n    temp = head\n    head = head.next\n    free(temp)\n  else:\n    temp = head\n    for i = 0 to pos - 2:\n      temp = temp.next\n    toDelete = temp.next\n    temp.next = toDelete.next\n    free(toDelete)"
      }
    }
  ]
  