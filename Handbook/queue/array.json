[
    {
      "type": "h4",
      "text": "Implementing Queue Using Array"
    },
    {
      "type": "p5",
      "text": "Before we can use a queue in our program, we need to set up some basic components and understand how the queue will operate using an array."
    },
    {
      "type": "h5",
      "text": "Initial Setup"
    },
    {
      "type": "ul",
      "text": [
        "Define a constant SIZE that represents the maximum number of elements in the queue.",
        "Declare a one-dimensional array of SIZE to act as the queue storage.",
        "Initialize two integer pointers: 'front' and 'rear' with -1 to represent an empty queue."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "c",
        "code": "#define SIZE 5\nint queue[SIZE];\nint front = -1, rear = -1;"
      }
    },
    {
      "type": "h5",
      "text": "Enqueue Operation (Insert Element)"
    },
    {
      "type": "ol",
      "text": [
        "Check if the queue is FULL by comparing rear with SIZE - 1.",
        "If full, print 'Overflow. Queue is Full.' and stop the operation.",
        "If not full, increment the 'rear' pointer by 1.",
        "If 'front' is -1, set it to 0 (first element being inserted).",
        "Insert the value at queue[rear]."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "c",
        "code": "void enQueue(int value) {\n  if (rear == SIZE - 1)\n    printf(\"\\nOverflow. Queue is Full.\");\n  else {\n    if (front == -1)\n      front = 0;\n    rear++;\n    queue[rear] = value;\n    printf(\"\\nInsertion was successful\");\n  }\n}"
      }
    },
    {
      "type": "h5",
      "text": "Dequeue Operation (Remove Element)"
    },
    {
      "type": "ol",
      "text": [
        "Check if the queue is EMPTY by comparing front and rear.",
        "If empty, print 'Underflow. Queue is Empty.' and stop the operation.",
        "If not empty, print the value at queue[front] as the deleted item.",
        "Increment the 'front' pointer by 1.",
        "If front equals rear after deletion, reset both to -1 (queue becomes empty)."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "c",
        "code": "void deQueue() {\n  if (front == -1 || front > rear)\n    printf(\"\\nUnderflow. Queue is Empty.\");\n  else {\n    printf(\"\\nDeleted item is: %d\", queue[front]);\n    front++;\n    if (front > rear)\n      front = rear = -1;\n  }\n}"
      }
    },
    {
      "type": "p5",
      "text": "Note: Always check if the queue is empty or full before inserting or removing elements to avoid unexpected behavior."
    }
  ]
  