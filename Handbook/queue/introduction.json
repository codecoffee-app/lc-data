[
    {
      "type": "h4",
      "text": "What is a Queue?"
    },
    {
      "type": "p5",
      "text": "Think of a queue like a line at a movie theater. The person who comes first gets served first. This is the First In, First Out (FIFO) principle that a queue follows."
    },
    {
      "type": "img",
      "text": "https://codecoffee-app.github.io/lc-data/handbook-images/queue/introduction/1.webp",
      "style": "w-20 h-17.6 mb-2"
    },
    {
      "type": "ul",
      "text": [
        "Linear data structure where elements are inserted at one end (rear) and removed from the other (front).",
        "Follows FIFO: First element inserted is the first one to be removed.",
        "Used in real-life scenarios like queues in banks or printers."
      ]
    },
    {
      "type": "h5",
      "text": "Real-Life Examples"
    },
    {
      "type": "ol",
      "text": [
        "People standing in line at a storeâ€”new people join at the end, and service is given from the front.",
        "CPU process scheduling in operating systems, where tasks wait in a queue for CPU time."
      ]
    },
    {
      "type": "h5",
      "text": "Time and Space Complexities"
    },
    {
      "type": "ul",
      "text": [
        "Access: O(n)",
        "Search: O(n)",
        "Insertion (Enqueue): O(1)",
        "Deletion (Dequeue): O(1)",
        "Space: O(n)"
      ]
    },
    {
      "type": "h5",
      "text": "Core Properties of Queues"
    },
    {
      "type": "ul",
      "text": [
        "Works on FIFO principle (First In First Out).",
        "Uses two pointers: 'front' to remove elements and 'rear' to insert elements.",
        "Insertion happens at the rear and deletion at the front."
      ]
    },
    {
      "type": "h4",
      "text": "Types of Queues"
    },
    {
      "type": "h5",
      "text": "1. Double Ended Queue (Deque)"
    },
    {
      "type": "ul",
      "text": [
        "A queue where insertion and deletion can occur at both front and rear ends.",
        "Input Restricted Deque: Insert at rear only, delete from both ends.",
        "Output Restricted Deque: Delete from front only, insert at both ends."
      ]
    },
    {
      "type": "h5",
      "text": "2. Priority Queue"
    },
    {
      "type": "p5",
      "text": "In a priority queue, each element has a priority. Elements with higher priority are served before those with lower priority, regardless of their arrival order."
    },
    {
      "type": "h5",
      "text": "3. Circular Queue"
    },
    {
      "type": "p5",
      "text": "A circular queue connects the rear of the queue back to the front. This is useful in scenarios with fixed storage, like circular buffers or streaming systems."
    },
    {
      "type": "h4",
      "text": "Queue Operations"
    },
    {
      "type": "h5",
      "text": "1. Enqueue (Insert)"
    },
    {
      "type": "p5",
      "text": "Adds an element to the rear of the queue and updates the rear pointer."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function enqueue(queue, value):\n    if queue is full:\n        print 'Queue is Full'\n    else:\n        rear = rear + 1\n        queue[rear] = value"
      }
    },
    {
      "type": "h5",
      "text": "2. Dequeue (Remove)"
    },
    {
      "type": "p5",
      "text": "Removes an element from the front of the queue and updates the front pointer."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function dequeue(queue):\n    if queue is empty:\n        print 'Queue is Empty'\n    else:\n        value = queue[front]\n        front = front + 1\n        return value"
      }
    }
  ]
  