[
    {
      "type": "h4",
      "text": "Implementing Queue Using Linked List"
    },
    {
      "type": "p5",
      "text": "Unlike array-based queues, a queue implemented using a linked list allows dynamic memory usage, meaning it grows as needed without a fixed size."
    },
    {
      "type": "h5",
      "text": "Initial Setup"
    },
    {
      "type": "ul",
      "text": [
        "Define a 'Node' structure that contains two parts: the data and a pointer to the next node.",
        "Initialize two pointers: 'front' and 'rear', both set to NULL at the beginning to indicate the queue is empty."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "c",
        "code": "struct Node {\n  int data;\n  struct Node* next;\n};\n\nstruct Node* front = NULL;\nstruct Node* rear = NULL;"
      }
    },
    {
      "type": "h5",
      "text": "Enqueue Operation (Insert Element)"
    },
    {
      "type": "ol",
      "text": [
        "Create a new node and set its data with the value to be inserted.",
        "Set its next pointer to NULL as it will be the last node in the queue.",
        "If the queue is empty (rear == NULL), set both front and rear to the new node.",
        "Otherwise, set rear â†’ next to the new node and update rear to the new node."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "c",
        "code": "void enQueue(int value) {\n  struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n  newNode->data = value;\n  newNode->next = NULL;\n\n  if (rear == NULL) {\n    front = rear = newNode;\n  } else {\n    rear->next = newNode;\n    rear = newNode;\n  }\n  printf(\"\\nInsertion is Successful\\n\");\n}"
      }
    },
    {
      "type": "h5",
      "text": "Dequeue Operation (Remove Element)"
    },
    {
      "type": "ol",
      "text": [
        "Check if the queue is empty (front == NULL).",
        "If it is empty, print 'Underflow. Queue is Empty' and return.",
        "Otherwise, store the front node in a temporary pointer.",
        "Move the front pointer to the next node.",
        "Print the value of the deleted element.",
        "Free the memory allocated to the old front node.",
        "If the front becomes NULL after deletion, also set rear to NULL."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "c",
        "code": "void deQueue() {\n  if (front == NULL) {\n    printf(\"\\nUnderflow. Queue is Empty\\n\");\n    return;\n  }\n\n  struct Node* temp = front;\n  printf(\"\\nDeleted element: %d\\n\", temp->data);\n  front = front->next;\n\n  if (front == NULL)\n    rear = NULL;\n\n  free(temp);\n}"
      }
    },
    {
      "type": "p5",
      "text": "Using a linked list ensures we don't run into size limitations, as memory is allocated only when needed. This is especially useful when the number of elements is unpredictable."
    }
  ]
  