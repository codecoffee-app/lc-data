[
    {
      "type": "h4",
      "text": "What is Binary Search?"
    },
    {
      "type": "p5",
      "text": "Imagine you're looking for a word in a dictionary. Instead of starting from the first page, you open it in the middle. If the word you’re looking for comes before the word on that page, you search the left half. If it comes after, you search the right half. You keep splitting the section in half until you find the word or run out of pages. That’s essentially how Binary Search works."
    },
    {
      "type": "img",
      "text": "https://picsum.photos/300/201",
      "style": "w-33 h-9"
    },
    {
      "type": "ul",
      "text": [
        "Binary Search works only on sorted collections of values.",
        "It repeatedly divides the search range in half to locate the target value quickly.",
        "It significantly reduces the number of comparisons compared to linear search."
      ]
    },
    {
      "type": "h5",
      "text": "How Binary Search Works"
    },
    {
      "type": "ol",
      "text": [
        "Check the value in the middle of the sorted array.",
        "If it matches the target value, return its index.",
        "If the target is smaller, repeat the search on the left half.",
        "If the target is larger, repeat the search on the right half.",
        "Repeat this process until the value is found or no elements are left to check."
      ]
    },
    {
      "type": "p5",
      "text": "This method quickly narrows down the possible location of a target value by cutting the search space in half during each step."
    },
    {
      "type": "h5",
      "text": "Walkthrough"
    },
    {
      "type": "p5",
      "text": "Let's search for number 18 in this sorted array:"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "[4, 8, 12, 16, 18, 22, 30]"
      }
    },
    {
      "type": "ol",
      "text": [
        "Start by setting 'left' at index 0 and 'right' at index 6.",
        "Find the middle index: (0+6)/2 = 3. Value is 16.",
        "Since 18 is greater than 16, narrow the search to the right side: indexes 4 to 6.",
        "New middle index: (4+6)/2 = 5. Value is 22.",
        "18 is less than 22, so search the left side: indexes 4 to 4.",
        "Middle is 4. Value is 18. Found it at index 4!"
      ]
    },
    {
      "type": "p5",
      "text": "Each time, the algorithm halved the number of possible positions. Initially 7 positions, then 3, then 1. This is why Binary Search is efficient — it reduces the number of checks exponentially."
    },
    {
      "type": "h5",
      "text": "Binary Search Pseudo-Code"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function binarySearch(array, target):\n  left ← 0\n  right ← length(array) - 1\n\n  while left ≤ right:\n    mid ← (left + right) / 2\n    if array[mid] = target:\n      return mid\n    else if array[mid] < target:\n      left ← mid + 1\n    else:\n      right ← mid - 1\n\n  return -1"
      }
    },
    {
      "type": "p5",
      "text": "This pseudo-code describes the logic for performing Binary Search on a sorted array to find the position of a target value."
    },
    {
      "type": "h5",
      "text": "Time Complexity of Binary Search"
    },
    {
      "type": "ul",
      "text": [
        "In the worst case, Binary Search halves the search range at every step.",
        "This results in a time complexity of O(log n).",
        "It’s highly efficient for large sorted datasets."
      ]
    }
  ]
  