[
    {
      "type": "h4",
      "text": "What is Linear Search?"
    },
    {
      "type": "p5",
      "text": "Imagine you have a list of books placed in a row on a shelf. You’re asked to find the book titled 'The Adventure'. Starting from the leftmost book, you check each title one by one until you find it. This is exactly how Linear Search works."
    },
    {
      "type": "p5",
      "text": "Linear Search is a simple algorithm used to find a particular value in a list or array. It examines each element in the array one after the other until it finds the target value."
    },
    {
      "type": "h5",
      "text": "How It Works:"
    },
    {
      "type": "ol",
      "text": [
        "Start from the first element of the array.",
        "Compare the current element with the value you are looking for.",
        "If they match, return the position (index) of that element.",
        "If not, move to the next element and repeat.",
        "If the end of the array is reached without finding the value, return -1 to indicate it wasn’t found."
      ]
    },
    {
      "type": "h5",
      "text": "Important Note"
    },
    {
      "type": "p5",
      "text": "Unlike sorting algorithms that change the order of elements in an array, searching algorithms like Linear Search leave the array unchanged while looking for the target value."
    },
    {
      "type": "h5",
      "text": "Example Walkthrough and Code"
    },
    {
      "type": "p5",
      "text": "Let’s manually work through a Linear Search example before coding it."
    },
    {
      "type": "p5",
      "text": "We’ll search for the value 20 in the following array:"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "[14, 7, 20, 5, 11, 8]"
      }
    },
    {
      "type": "ol",
      "text": [
        "Check the first value (14). Is it 20? No.",
        "Move to the second value (7). Is it 20? No.",
        "Move to the third value (20). Is it 20? Yes — we found it!",
        "Return the index position 2 (since arrays start from index 0).",
        "Stop the search."
      ]
    },
    {
      "type": "p5",
      "text": "The algorithm began at the first position and moved through the array one step at a time, comparing each value to 20. As soon as it found a match at index 2, it stopped and returned that index. If no match was found after checking every element, it would have returned -1."
    },
    {
      "type": "p5",
      "text": "To implement a Linear Search, we need:"
    },
    {
      "type": "ul",
      "text": [
        "An array or list of values.",
        "A target value to find.",
        "A loop to go through each element from start to finish.",
        "A conditional check inside the loop to compare each value with the target.",
        "A way to return the current index when a match is found.",
        "A final return of -1 if the value is not found after checking all elements."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function linearSearch(array, target)\n    for i from 0 to length of array - 1\n        if array[i] == target then\n            return i\n    return -1\n\n// Example Usage\nlist = [5, 9, 13, 7, 2]\nvalueToFind = 13\nresult = linearSearch(list, valueToFind)\n\nif result != -1 then\n    display \"Value found at index \" + result\nelse\n    display \"Value not found\""
      }
    },
    {
      "type": "h5",
      "text": "Time Complexity"
    },
    {
      "type": "p5",
      "text": "The number of comparisons made by Linear Search depends on where the target value is located:"
    },
    {
      "type": "ul",
      "text": [
        "If it’s the first element, only one comparison is needed.",
        "If it’s the last element or not present at all, the algorithm will perform n comparisons, where n is the number of elements in the array."
      ]
    },
    {
      "type": "p5",
      "text": "That’s why the time complexity of Linear Search is expressed as:"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "Time Complexity: O(n)"
      }
    }
  ]
  