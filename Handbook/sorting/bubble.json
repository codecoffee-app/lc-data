[
  {
    "type": "h4",
    "text": "What is Bubble Sort?"
  },
  {
    "type": "p5",
    "text": "Bubble Sort is a simple sorting algorithm used to arrange elements in an array from the smallest to the largest value."
  },
  {
    "type": "p5",
    "text": "The name 'Bubble' comes from how larger elements slowly 'bubble up' to the end of the array with each pass."
  },
  {
    "type": "h5",
    "text": "Why Use Bubble Sort?"
  },
  {
    "type": "ul",
    "text": [
      "It's easy to understand and great for learning how sorting works.",
      "Useful for small datasets or when teaching basic algorithmic concepts.",
      "Although not very efficient, it helps build the foundation for more advanced sorting techniques."
    ]
  },
  {
    "type": "h5",
    "text": "How Does Bubble Sort Work?"
  },
  {
    "type": "ol",
    "text": [
      "Start at the beginning of the array.",
      "Compare the current element with the next one.",
      "If the current element is greater, swap them.",
      "Repeat this process for each pair in the array.",
      "After each full pass, the largest unsorted element moves to its correct position at the end.",
      "Repeat the passes until the array is fully sorted."
    ]
  },
  {
    "type": "h5",
    "text": "Manual Walkthrough (First Pass)"
  },
  {
    "type": "p5",
    "text": "Let’s take a small array and walk through just one full pass of the Bubble Sort process."
  },
  {
    "type": "code",
    "text": {
      "lang": "pseudo",
      "code": "[5, 1, 4, 2, 8]"
    }
  },
  {
    "type": "ol",
    "text": [
      "Compare 5 and 1 — swap to get [1, 5, 4, 2, 8]",
      "Compare 5 and 4 — swap to get [1, 4, 5, 2, 8]",
      "Compare 5 and 2 — swap to get [1, 4, 2, 5, 8]",
      "Compare 5 and 8 — already in order, no swap"
    ]
  },
  {
    "type": "p5",
    "text": "At the end of the first pass, the largest value (8) has moved to its correct position at the end."
  },
  {
    "type": "h5",
    "text": "Why Multiple Passes?"
  },
  {
    "type": "p5",
    "text": "Only the largest value reaches its place in one pass. We need to repeat the process so the next largest values also bubble up. This continues until the array is fully sorted."
  },
  {
    "type": "h5",
    "text": "Bubble Sort Algorithm (Basic Version)"
  },
  {
    "type": "code",
    "text": {
      "lang": "pseudo",
      "code": "for i from 0 to n-1:\n    for j from 0 to n-i-2:\n        if array[j] > array[j+1]:\n            swap array[j] and array[j+1]"
    }
  },
  {
    "type": "h5",
    "text": "Bubble Sort Implementation (Python)"
  },
  {
    "type": "code",
    "text": {
      "lang": "python",
      "code": "arr = [5, 1, 4, 2, 8]\nn = len(arr)\nfor i in range(n-1):\n    for j in range(n-i-1):\n        if arr[j] > arr[j+1]:\n            arr[j], arr[j+1] = arr[j+1], arr[j]\nprint(\"Sorted array:\", arr)"
    }
  },
  {
    "type": "h5",
    "text": "Optimized Bubble Sort"
  },
  {
    "type": "p5",
    "text": "If during a pass no elements are swapped, the array is already sorted. We can stop early to save time."
  },
  {
    "type": "code",
    "text": {
      "lang": "python",
      "code": "arr = [5, 1, 4, 2, 8]\nn = len(arr)\nfor i in range(n-1):\n    swapped = False\n    for j in range(n-i-1):\n        if arr[j] > arr[j+1]:\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n            swapped = True\n    if not swapped:\n        break\nprint(\"Sorted array:\", arr)"
    }
  },
  {
    "type": "h5",
    "text": "Time Complexity"
  },
  {
    "type": "ul",
    "text": [
      "Best Case (already sorted): O(n)",
      "Average Case: O(n²)",
      "Worst Case (completely reversed): O(n²)"
    ]
  }
]
