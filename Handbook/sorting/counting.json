[
    {
      "type": "h4",
      "text": "What is Counting Sort?"
    },
    {
      "type": "p5",
      "text": "Imagine you have a line of numbered baskets labeled from 0 upwards. You also have a collection of colored balls, each marked with a number. Your goal is to sort these balls by placing them into the correct basket based on their number, and then collect them back in order — starting from the basket with the lowest number."
    },
    {
      "type": "ul",
      "text": [
        "Counting Sort works well when sorting non-negative integers.",
        "It avoids comparisons and instead counts how many times each number appears.",
        "It's highly efficient when the range of possible numbers (called 'k') is not significantly larger than the number of items (called 'n') to be sorted."
      ]
    },
    {
      "type": "h5",
      "text": "How Counting Sort Operates"
    },
    {
      "type": "ol",
      "text": [
        "Create a new array (called a count array) to track how many times each number appears.",
        "Loop through the original array and increase the value at the index matching each number in the count array.",
        "After counting, build the sorted array by reading counts and filling in numbers based on the number of times they appeared."
      ]
    },
    {
      "type": "h5",
      "text": "Conditions for Using Counting Sort"
    },
    {
      "type": "ul",
      "text": [
        "Works only with non-negative integers.",
        "Ideal when the largest value isn't dramatically bigger than the number of values to sort.",
        "Not practical for negative numbers because array indices can't be negative.",
        "If the range of numbers is too wide, the count array could consume too much memory."
      ]
    },
    
        {
          "type": "h4",
          "text": "Manual Walkthrough of Counting Sort"
        },
        {
          "type": "p5",
          "text": "Let’s carefully walk through an example to see how Counting Sort operates, step by step."
        },
        {
          "type": "p5",
          "text": "We start with an unsorted array of non-negative integers:"
        },
        {
          "type": "code",
          "text": {
            "lang": "pseudo",
            "code": "numbers = [3, 1, 4, 1, 2, 3, 1]"
          }
        },
        {
          "type": "p5",
          "text": "Next, find the maximum value in the array to determine the size of the counting array."
        },
        {
          "type": "code",
          "text": {
            "lang": "pseudo",
            "code": "max_value = 4"
          }
        },
        {
          "type": "p5",
          "text": "Now, create a counting array with size max_value + 1, initialized with zeros."
        },
        {
          "type": "code",
          "text": {
            "lang": "pseudo",
            "code": "count = [0, 0, 0, 0, 0]"
          }
        },
        {
          "type": "h5",
          "text": "Step-by-Step Counting"
        },
        {
          "type": "ul",
          "text": [
            "Look at the first number: 3. Increment count[3] by 1.",
            "Updated count array: [0, 0, 0, 1, 0]",
            "Look at the next number: 1. Increment count[1] by 1.",
            "Updated count array: [0, 1, 0, 1, 0]",
            "Next number: 4. Increment count[4] by 1.",
            "Updated count array: [0, 1, 0, 1, 1]",
            "Next number: 1. Increment count[1] again.",
            "Updated count array: [0, 2, 0, 1, 1]",
            "Next number: 2. Increment count[2] by 1.",
            "Updated count array: [0, 2, 1, 1, 1]",
            "Next number: 3. Increment count[3] again.",
            "Updated count array: [0, 2, 1, 2, 1]",
            "Last number: 1. Increment count[1] again.",
            "Final count array: [0, 3, 1, 2, 1]"
          ]
        },
        {
          "type": "h5",
          "text": "Step-by-Step Rebuilding the Sorted Array"
        },
        {
          "type": "ul",
          "text": [
            "Start at index 0 in the count array. count[0] is 0 — no '0's to add.",
            "Move to index 1. count[1] is 3, so add three '1's to the result array.",
            "Result array: [1, 1, 1]",
            "Decrease count[1] to 0.",
            "Move to index 2. count[2] is 1, so add one '2'.",
            "Result array: [1, 1, 1, 2]",
            "Decrease count[2] to 0.",
            "Move to index 3. count[3] is 2, so add two '3's.",
            "Result array: [1, 1, 1, 2, 3, 3]",
            "Decrease count[3] to 0.",
            "Move to index 4. count[4] is 1, so add one '4'.",
            "Result array: [1, 1, 1, 2, 3, 3, 4]",
            "Decrease count[4] to 0.",
            "Now, the sorting is complete!"
          ]
        },
        {
          "type": "h5",
          "text": "Final Outcome"
        },
        {
          "type": "code",
          "text": {
            "lang": "pseudo",
            "code": "sorted_numbers = [1, 1, 1, 2, 3, 3, 4]"
          }
        },
        {
            "type": "code",
            "text": {
              "lang": "pseudocode",
              "code": "countingSort(array, maxValue):\n    countArray ← new array of size (maxValue + 1) filled with 0\n\n    for each number in array:\n        countArray[number] ← countArray[number] + 1\n\n    sortedArray ← empty array\n\n    for i from 0 to maxValue:\n        while countArray[i] > 0:\n            append i to sortedArray\n            countArray[i] ← countArray[i] - 1\n\n    return sortedArray"
            }
          },
        {
          "type": "p5",
          "text": "This is how Counting Sort works in a clean and structured way without comparing values directly."
        },      
    {
      "type": "h5",
      "text": "Why Counting Sort is Efficient"
    },
    {
      "type": "p5",
      "text": "Instead of comparing values pairwise like Bubble Sort or Insertion Sort, Counting Sort counts how many times each number appears and then directly reconstructs the sorted array. This can be much faster when the number range is limited."
    },
    {
      "type": "h5",
      "text": "Time Complexity Analysis"
    },
    {
      "type": "ul",
      "text": [
        "Best Case: O(n) when the range of numbers (k) is small.",
        "Average Case: O(n + k)",
        "Worst Case: O(n²) if the range of numbers is much larger than the number of items to sort."
      ]
    }
  ]
  