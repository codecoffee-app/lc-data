[
    {
      "type": "h4",
      "text": "What is Insertion Sort?"
    },
    {
      "type": "p5",
      "text": "Insertion Sort is a simple algorithm that builds a sorted list one element at a time. It works similarly to how you sort playing cards in your hands: you pick one card at a time and insert it into the correct position among the already sorted cards."
    },
    {
      "type": "p5",
      "text": "It divides the array into two parts:"
    },
    {
        "type": "ul",
        "text": [
            "Sorted part on the left",
            "Unsorted part on the right"
        ]
    },
    {
        "type": "p5",
        "text": "Each new element from the unsorted part is inserted into its correct position in the sorted part."
      },
    {
      "type": "h5",
      "text": "How Insertion Sort Works"
    },
    {
      "type": "ol",
      "text": [
        "Start with the first element. It is already sorted.",
        "Pick the next element from the unsorted part.",
        "Compare it with elements in the sorted part.",
        "Shift all greater elements one position to the right.",
        "Insert the picked element at the correct position.",
        "Repeat until the entire array is sorted."
      ]
    },
    {
      "type": "img",
      "text": "https://i.imgur.com/wtAZwiB.png",
      "style": "w-33 h-10"
    },
    {
      "type": "h5",
      "text": "Example: Sort [5, 2, 4, 6, 1, 3]"
    },
    {
      "type": "ol",
      "text": [
        "Initial array: [5, 2, 4, 6, 1, 3]",
        "2 is less than 5, insert before → [2, 5, 4, 6, 1, 3]",
        "4 goes between 2 and 5 → [2, 4, 5, 6, 1, 3]",
        "6 stays in place → [2, 4, 5, 6, 1, 3]",
        "1 goes at the beginning → [1, 2, 4, 5, 6, 3]",
        "3 goes between 2 and 4 → [1, 2, 3, 4, 5, 6]"
      ]
    },
    {
      "type": "h5",
      "text": "Pseudocode"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "for i from 1 to n-1:\n  current = array[i]\n  j = i - 1\n  while j >= 0 and array[j] > current:\n    array[j + 1] = array[j]  // Shift element right\n    j = j - 1\n  array[j + 1] = current"
      }
    },
    {
      "type": "h5",
      "text": "Optimized Version"
    },
    {
      "type": "p5",
      "text": "Instead of using pop and insert, we shift elements to reduce operations. This is more efficient for large arrays."
    },
    {
      "type": "code",
      "text": {
        "lang": "python",
        "code": "arr = [9, 3, 5, 1, 7]\nfor i in range(1, len(arr)):\n    key = arr[i]\n    j = i - 1\n    while j >= 0 and arr[j] > key:\n        arr[j + 1] = arr[j]  # shift\n        j -= 1\n    arr[j + 1] = key\nprint(arr)"
      }
    },
    {
      "type": "h5",
      "text": "Another Example: Sort [11, 7, 9, 10]"
    },
    {
      "type": "ol",
      "text": [
        "Start: [11, 7, 9, 10]",
        "Insert 7 before 11 → [7, 11, 9, 10]",
        "Insert 9 between 7 and 11 → [7, 9, 11, 10]",
        "Insert 10 between 9 and 11 → [7, 9, 10, 11]"
      ]
    },
    {
      "type": "h5",
      "text": "Time Complexity"
    },
    {
      "type": "ul",
      "text": [
        "Best Case: O(n) → when the array is already sorted.",
        "Average Case: O(n²)",
        "Worst Case: O(n²) → when the array is sorted in reverse."
      ]
    },
    {
      "type": "h5",
      "text": "Space Complexity"
    },
    {
      "type": "p5",
      "text": "Insertion Sort is an in-place algorithm. It uses only a constant amount of extra memory → O(1)."
    },
    {
      "type": "h5",
      "text": "Where is Insertion Sort Used?"
    },
    {
      "type": "ul",
      "text": [
        "When sorting small datasets.",
        "As a building block for more complex sorting algorithms like Tim Sort.",
        "When the array is already nearly sorted."
      ]
    }
  ]
  