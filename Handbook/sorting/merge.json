[
    {
      "type": "h4",
      "text": "Merge Sort Algorithm"
    },
    {
      "type": "p5",
      "text": "Merge Sort is a divide-and-conquer algorithm used to sort an array. It works by dividing the array into smaller sub-arrays, sorting them, and then merging the sorted sub-arrays into a final sorted array."
    },
    {
      "type": "ul",
      "text": [
        "Divide: The array is repeatedly divided into two halves.",
        "Conquer: The sub-arrays are recursively sorted.",
        "Combine: The sorted sub-arrays are merged to form a single sorted array."
      ]
    },
    {
      "type": "h5",
      "text": "How Merge Sort Works"
    },
    {
      "type": "p5",
      "text": "The process of Merge Sort is recursive. It splits the array into smaller pieces and merges them back together in sorted order."
    },
    {
      "type": "ol",
      "text": [
        "Divide the unsorted array into two halves.",
        "Continue to divide the sub-arrays until each one has only one element.",
        "Merge the sub-arrays back together by comparing and sorting their elements.",
        "Repeat the merging process until all sub-arrays are merged into a single sorted array."
      ]
    },
    {
      "type": "h5",
      "text": "Recursive Merge Sort"
    },
    {
      "type": "p5",
      "text": "In the recursive version of Merge Sort, the array is split into two halves recursively. This process continues until each sub-array has only one element, at which point the merge process starts."
    },
    {
      "type": "ul",
      "text": [
        "The array is split recursively until each sub-array contains a single element.",
        "The merge function compares the elements of the sub-arrays and combines them in sorted order.",
        "The recursive calls help in dividing the array and then sorting the sub-arrays."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function mergeSort(arr):\n    if length of arr <= 1:\n        return arr\n    mid = length of arr // 2\n    leftHalf = arr[0..mid]\n    rightHalf = arr[mid..end]\n    sortedLeft = mergeSort(leftHalf)\n    sortedRight = mergeSort(rightHalf)\n    return merge(sortedLeft, sortedRight)\n\nfunction merge(left, right):\n    result = []\n    while left and right are not empty:\n        if left[0] < right[0]:\n            result.append(left[0])\n            left = left[1..end]\n        else:\n            result.append(right[0])\n            right = right[1..end]\n    result.extend(left)\n    result.extend(right)\n    return result"
      }
    },
    {
      "type": "h5",
      "text": "Iterative Merge Sort"
    },
    {
      "type": "p5",
      "text": "In the iterative version of Merge Sort, the array is divided into progressively larger sub-arrays using a step size. The merging process happens iteratively until the entire array is sorted."
    },
    {
      "type": "ul",
      "text": [
        "The array is divided into progressively larger sub-arrays, starting with size 1.",
        "After each iteration, the step size doubles.",
        "Merging occurs iteratively by comparing and combining sub-arrays in pairs."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function merge(arr):\n    result = []\n    while left and right are not empty:\n        if left[0] < right[0]:\n            result.append(left[0])\n            left = left[1..end]\n        else:\n            result.append(right[0])\n            right = right[1..end]\n    result.extend(left)\n    result.extend(right)\n    return result\n\nfunction mergeSort(arr):\n    step = 1\n    length = length of arr\n    while step < length:\n        for i from 0 to length with step 2*step:\n            left = arr[i..i+step]\n            right = arr[i+step..i+2*step]\n            merged = merge(left, right)\n            place merged back into arr\n        step = step * 2\n    return arr"
      }
    },
    {
      "type": "h5",
      "text": "Key Differences"
    },
    {
      "type": "ul",
      "text": [
        "Recursive Merge Sort uses function calls to split the array, while Iterative Merge Sort uses loops.",
        "Recursive Merge Sort may use more memory due to function call stack, whereas Iterative Merge Sort uses less memory as no recursive calls are involved.",
        "Both versions follow the divide-and-conquer strategy, but the Recursive version is simpler to understand."
      ]
    },
    {
      "type": "h5",
      "text": "Merge Sort Time Complexity"
    },
    {
      "type": "p5",
      "text": "The time complexity of Merge Sort is O(n log n) for both the best, worst, and average cases. This makes it very efficient for sorting large arrays compared to other algorithms like Bubble Sort or Selection Sort, which have a time complexity of O(nÂ²)."
    },
    {
      "type": "ul",
      "text": [
        "Best Case: O(n log n)",
        "Average Case: O(n log n)",
        "Worst Case: O(n log n)"
      ]
    },
    {
      "type": "h5",
      "text": "Space Complexity"
    },
    {
      "type": "p5",
      "text": "The space complexity of Merge Sort is O(n) because it requires additional space for merging the sub-arrays. Each recursive call creates a new sub-array, and memory is used to store the result during the merge process."
    }
  ]
  