[
    {
      "type": "h4",
      "text": "What is Quicksort?"
    },
    {
      "type": "p5",
      "text": "Quicksort is a fast and efficient sorting algorithm. It works by picking one item in the array (called the 'pivot'), and arranging the other items so that smaller ones come before the pivot and larger ones come after. This process is repeated recursively on smaller parts of the array."
    },
    {
      "type": "h5",
      "text": "Why is it called 'Quick'?"
    },
    {
      "type": "p5",
      "text": "Because in most cases, it sorts faster than many other sorting methods. It’s especially efficient for large datasets."
    },
    {
      "type": "h5",
      "text": "How Quicksort Works - Step by Step"
    },
    {
      "type": "ol",
      "text": [
        "Pick a pivot element from the array. (In our example, we choose the last element.)",
        "Rearrange the array so that all items smaller than the pivot come before it, and items larger go after it.",
        "Place the pivot element in its correct position in the array.",
        "Repeat the same process (recursively) for the sub-arrays to the left and right of the pivot.",
        "Stop when the sub-arrays are of length 0 or 1 (because they are already sorted)."
      ]
    },
    {
      "type": "h5",
      "text": "Visual Example"
    },
    {
      "type": "p5",
      "text": "Let's walk through how quicksort sorts this array: [29, 10, 14, 37, 13]"
    },
    {
      "type": "ol",
      "text": [
        "Choose pivot = 13",
        "Reorder the rest so that smaller elements are on the left: [10], pivot = 13, [29, 14, 37]",
        "Choose pivot = 10 in the left sub-array: nothing to sort, it’s already done.",
        "Now sort right sub-array [29, 14, 37], pivot = 37 → it’s already in correct position",
        "Sort [29, 14], pivot = 14 → swap 14 and 29 → [14, 29]",
        "Now everything is sorted: [10, 13, 14, 29, 37]"
      ]
    },
    {
      "type": "img",
      "text": "https://i.imgur.com/5fr6hVt.png",
      "style": "w-33 h-9"
    },
    {
      "type": "h5",
      "text": "Key Concept: Partitioning"
    },
    {
      "type": "p5",
      "text": "Partitioning means placing the pivot in its correct position such that smaller elements are on the left, and larger ones on the right. This step is crucial for Quicksort to work effectively."
    },
    {
      "type": "h5",
      "text": "Quicksort Pseudo Code"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function quicksort(array, low, high):\n  if low < high:\n    pivot_index = partition(array, low, high)\n    quicksort(array, low, pivot_index - 1)\n    quicksort(array, pivot_index + 1, high)\n\nfunction partition(array, low, high):\n  pivot = array[high]\n  i = low - 1\n  for j from low to high - 1:\n    if array[j] < pivot:\n      i = i + 1\n      swap array[i] and array[j]\n  swap array[i + 1] and array[high]\n  return i + 1"
      }
    },
    {
      "type": "h5",
      "text": "Time and Space Complexity"
    },
    {
      "type": "ul",
      "text": [
        "Best case: O(n log n) — when pivot divides the array evenly",
        "Average case: O(n log n) — for random arrays",
        "Worst case: O(n²) — when pivot is always the smallest or largest",
        "Space Complexity: O(log n) — for recursion stack (in-place sort)"
      ]
    },
    {
      "type": "p5",
      "text": "In real-world scenarios, Quicksort is one of the fastest sorting algorithms due to its efficient use of memory and divide-and-conquer strategy."
    }
  ]
  