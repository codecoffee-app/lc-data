[
    {
      "type": "h4",
      "text": "What is Selection Sort?"
    },
    {
      "type": "p5",
      "text": "Selection Sort is a simple sorting algorithm that works by repeatedly finding the smallest element from the unsorted part of the array and placing it at the beginning. It divides the array into two parts: the sorted part at the front and the unsorted part at the back."
    },
    {
      "type": "h5",
      "text": "How Selection Sort Works Step-by-Step"
    },
    {
      "type": "ol",
      "text": [
        "Start with the first element of the array. Assume it is the minimum.",
        "Scan the rest of the array to find the actual minimum.",
        "Swap the found minimum with the first element.",
        "Move the boundary of the sorted section forward by one, and repeat the process for the remaining unsorted elements.",
        "Continue until the entire array is sorted."
      ]
    },
    {
      "type": "h5",
      "text": "Example: Step-by-Step"
    },
    {
      "type": "p5",
      "text": "Let’s sort this array using Selection Sort:"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "[29, 10, 14, 37, 13]"
      }
    },
    {
      "type": "ol",
      "text": [
        "Start at index 0. Minimum is 29. Scan and find 10 as the new minimum. Swap 29 and 10 → [10, 29, 14, 37, 13]",
        "Now at index 1. Minimum is 29. Scan and find 13 as the new minimum. Swap 29 and 13 → [10, 13, 14, 37, 29]",
        "At index 2. Minimum is 14. It's already correct → [10, 13, 14, 37, 29]",
        "At index 3. Minimum is 37. Find 29 as the new minimum. Swap → [10, 13, 14, 29, 37]",
        "Now the array is fully sorted!"
      ]
    },
    {
      "type": "h5",
      "text": "Pseudo Code"
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "for i from 0 to n-1:\n    min_index = i\n    for j from i+1 to n:\n        if array[j] < array[min_index]:\n            min_index = j\n    swap array[i] and array[min_index]"
      }
    },
    {
      "type": "h5",
      "text": "Why Swapping is Better Than Shifting"
    },
    {
      "type": "p5",
      "text": "Instead of removing and inserting the smallest element (which involves shifting other elements), it's much faster to just swap it with the current position. Swapping reduces overhead and keeps the code simple."
    },
    {
      "type": "h5",
      "text": "Time and Space Complexity"
    },
    {
      "type": "ul",
      "text": [
        "Best Case: O(n²)",
        "Worst Case: O(n²)",
        "Average Case: O(n²)",
        "Space Complexity: O(1) — In-place sorting, uses no extra space"
      ]
    },
    {
      "type": "p5",
      "text": "Selection Sort is not the most efficient sorting algorithm for large datasets, but it is easy to understand and useful for learning the basics of sorting."
    }
  ]
  