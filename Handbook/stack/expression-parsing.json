[
    {
      "type": "h4",
      "text": "Expression Parsing Using Stack"
    },
    {
      "type": "p5",
      "text": "Stacks are powerful tools used in expression parsing â€” converting and evaluating expressions in programming. You can use stacks to convert between different notations like infix, postfix, and prefix, and to evaluate these expressions efficiently."
    },
    {
      "type": "h5",
      "text": "Types of Notations"
    },
    {
      "type": "ul",
      "text": [
        "Infix: The operator is written between the operands (e.g., A + B).",
        "Postfix (Reverse Polish Notation): The operator comes after the operands (e.g., A B +).",
        "Prefix (Polish Notation): The operator comes before the operands (e.g., + A B)."
      ]
    },
    {
      "type": "h5",
      "text": "Why Use Postfix or Prefix?"
    },
    {
      "type": "p5",
      "text": "Infix expressions need parentheses and operator precedence rules, which make them hard to evaluate using a program. Postfix and prefix do not require parentheses, and stacks make it easy to evaluate them in a structured way."
    },
    {
      "type": "h5",
      "text": "Infix to Postfix Conversion (Using Stack)"
    },
    {
      "type": "ol",
      "text": [
        "Initialize an empty stack for operators and an output list for result.",
        "Scan the infix expression left to right.",
        "If you encounter an operand, add it to the output.",
        "If you encounter an operator, pop operators from the stack with higher or equal precedence and add them to output. Then push the current operator.",
        "If you see '(', push it to the stack.",
        "If you see ')', pop and output from the stack until you find '('.",
        "After the expression ends, pop remaining operators from the stack to the output."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function infixToPostfix(expr):\n    for token in expr:\n        if token is operand:\n            add to output\n        else if token is '(': \n            push to stack\n        else if token is ')':\n            pop from stack to output until '(' is found\n        else if token is operator:\n            while top of stack has higher precedence:\n                pop to output\n            push token\n    while stack not empty:\n        pop to output"
      }
    },
    {
      "type": "h5",
      "text": "Evaluating Postfix Expression"
    },
    {
      "type": "p5",
      "text": "In postfix evaluation, we scan left to right. When we find operands, we push them to a stack. When we find an operator, we pop two operands, apply the operator, and push the result back."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function evalPostfix(expr):\n    for token in expr:\n        if token is operand:\n            push to stack\n        else:\n            operand2 = pop()\n            operand1 = pop()\n            result = operand1 op operand2\n            push(result)\n    return top of stack"
      }
    },
    {
      "type": "h5",
      "text": "Prefix Expression Parsing"
    },
    {
      "type": "p5",
      "text": "In prefix evaluation, we scan the expression from right to left. The rest of the process is similar to postfix: push operands, and for operators, pop two operands and push the result."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function evalPrefix(expr):\n    for token in reverse(expr):\n        if token is operand:\n            push to stack\n        else:\n            operand1 = pop()\n            operand2 = pop()\n            result = operand1 op operand2\n            push(result)\n    return top of stack"
      }
    },
    {
      "type": "h5",
      "text": "Example: Converting and Evaluating"
    },
    {
      "type": "ul",
      "text": [
        "Infix: (A + B) * C",
        "Postfix: A B + C *",
        "Prefix: * + A B C",
        "Postfix Evaluation (Assume A=2, B=3, C=4): 2 3 + 4 * = 20",
        "Prefix Evaluation (Same values): * + 2 3 4 = 20"
      ]
    }
  ]
  