[
    {
      "type": "h4",
      "text": "Implementing Stack Using Linked List"
    },
    {
      "type": "p5",
      "text": "A stack can also be implemented using a linked list, where each element (node) points to the next one. This approach doesn't require a fixed size, so itâ€™s more flexible than arrays."
    },
    {
      "type": "h5",
      "text": "Preparation Steps"
    },
    {
      "type": "ol",
      "text": [
        "Create a structure called 'Node' with two members: 'data' (to store the value) and 'next' (to store the address of the next node).",
        "Define a pointer named 'top' and initialize it to 'NULL'. This will point to the top of the stack."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "structure Node:\n    data\n    next\n\ninitialize top = NULL"
      }
    },
    {
      "type": "h5",
      "text": "Push Operation"
    },
    {
      "type": "p5",
      "text": "To push a value onto the stack means to add a new node at the beginning of the list."
    },
    {
      "type": "ul",
      "text": [
        "Create a new node and assign it the given value.",
        "If the stack is empty, set 'newNode.next = NULL'.",
        "Otherwise, point 'newNode.next' to the current top.",
        "Update 'top' to point to 'newNode'."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function push(value):\n    create newNode\n    newNode.data = value\n\n    if top == NULL:\n        newNode.next = NULL\n    else:\n        newNode.next = top\n\n    top = newNode\n    print \"Inserted successfully.\""
      }
    },
    {
      "type": "h5",
      "text": "Pop Operation"
    },
    {
      "type": "p5",
      "text": "To pop a value from the stack means to remove the topmost node."
    },
    {
      "type": "ul",
      "text": [
        "Check if the stack is empty ('top == NULL').",
        "If it is, print an underflow message.",
        "Otherwise, print the value at the top, move 'top' to the next node, and delete the old top."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function pop():\n    if top == NULL:\n        print \"Underflow! Stack is empty.\"\n    else:\n        temp = top\n        print \"Deleted element: \" + temp.data\n        top = top.next\n        delete temp"
      }
    },
    {
      "type": "h5",
      "text": "Display Operation"
    },
    {
      "type": "p5",
      "text": "Displays all the values in the stack from top to bottom."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function display():\n    if top == NULL:\n        print \"Stack is empty.\"\n    else:\n        temp = top\n        while temp != NULL:\n            print temp.data + \" ---> \"\n            temp = temp.next\n        print \"NULL\""
      }
    },
    {
      "type": "h5",
      "text": "Driver Pseudo Code with Menu"
    },
    {
      "type": "p5",
      "text": "A simple loop to interact with the user for stack operations: push, pop, display, or exit."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function main():\n    loop forever:\n        print \"\\n1. Push\\n2. Pop\\n3. Display\\n4. Exit\"\n        choice = input(\"Enter your choice: \")\n\n        if choice == 1:\n            value = input(\"Enter value to push: \")\n            push(value)\n        elif choice == 2:\n            pop()\n        elif choice == 3:\n            display()\n        elif choice == 4:\n            break\n        else:\n            print \"Invalid choice. Try again.\""
      }
    }
  ]
  