[
    {
      "type": "h4",
      "text": "What is an AVL Tree?"
    },
    {
      "type": "p5",
      "text": "An AVL Tree is a type of self-balancing Binary Search Tree (BST) where the difference between heights of left and right subtrees cannot be more than one for all nodes."
    },
    {
      "type": "img",
      "text": "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/AVL_Tree_Example.svg/300px-AVL_Tree_Example.svg.png",
      "style": "w-60 h-20"
    },
    {
      "type": "ul",
      "text": [
        "Named after inventors Adelson-Velsky and Landis.",
        "Maintains O(log n) time complexity for insertion, deletion, and search.",
        "Keeps tree height minimal through rotations."
      ]
    },
    {
      "type": "h5",
      "text": "Why AVL Trees?"
    },
    {
      "type": "p5",
      "text": "In a normal Binary Search Tree, the tree can become skewed (like a linked list), resulting in poor performance. AVL trees prevent this by ensuring the tree remains balanced after every operation."
    },
    {
      "type": "h5",
      "text": "Balance Factor"
    },
    {
      "type": "p5",
      "text": "The balance factor for any node is calculated as:"
    },
    {
      "type": "code",
      "text": {
        "lang": "plaintext",
        "code": "BalanceFactor = height(left subtree) - height(right subtree)"
      }
    },
    {
      "type": "p5",
      "text": "For a node to be balanced, its balance factor must be -1, 0, or +1."
    },
    {
      "type": "h5",
      "text": "Rotations in AVL Tree"
    },
    {
      "type": "ul",
      "text": [
        "Right Rotation (LL Rotation)",
        "Left Rotation (RR Rotation)",
        "Left-Right Rotation (LR Rotation)",
        "Right-Left Rotation (RL Rotation)"
      ]
    },
    {
      "type": "img",
      "text": "https://www.codesdope.com/staticroot/images/data_structure/avlrot.png",
      "style": "w-80 h-20"
    },
    {
      "type": "h5",
      "text": "Insertion in AVL Tree"
    },
    {
      "type": "p5",
      "text": "After inserting a node, if the balance factor of any node becomes unbalanced, perform the appropriate rotation."
    },
    {
      "type": "h5",
      "text": "Example Walkthrough"
    },
    {
      "type": "ol",
      "text": [
        "Insert 30 → Tree: 30",
        "Insert 20 → Tree: 30 -> 20 (left child), still balanced",
        "Insert 10 → Tree becomes unbalanced at 30, balance factor = 2 → LL Rotation needed",
        "Perform Right Rotation on 30 → Tree becomes: 20 → 10 (left), 30 (right)",
        "Insert 25 → goes to right of 20 → Tree: 20 → 10 (left), 30 (right) → 25 to left of 30",
        "Insert 28 → Unbalanced at 30 → balance factor = +2 → LR Rotation on 30",
        "First Left Rotation on 25, then Right Rotation on 30"
      ]
    },
    {
      "type": "img",
      "text": "https://media.geeksforgeeks.org/wp-content/uploads/AVL-Trees.png",
      "style": "w-80 h-25"
    },
    {
      "type": "h5",
      "text": "AVL Tree Insertion Code"
    },
    {
      "type": "code",
      "text": {
        "lang": "cpp",
        "code": "struct Node {\n  int key, height;\n  Node *left, *right;\n};\n\nint getHeight(Node* N) {\n  return N ? N->height : 0;\n}\n\nint getBalance(Node* N) {\n  return N ? getHeight(N->left) - getHeight(N->right) : 0;\n}\n\nNode* rightRotate(Node* y) {\n  Node* x = y->left;\n  Node* T2 = x->right;\n  x->right = y;\n  y->left = T2;\n  y->height = max(getHeight(y->left), getHeight(y->right)) + 1;\n  x->height = max(getHeight(x->left), getHeight(x->right)) + 1;\n  return x;\n}\n\nNode* leftRotate(Node* x) {\n  Node* y = x->right;\n  Node* T2 = y->left;\n  y->left = x;\n  x->right = T2;\n  x->height = max(getHeight(x->left), getHeight(x->right)) + 1;\n  y->height = max(getHeight(y->left), getHeight(y->right)) + 1;\n  return y;\n}"
      }
    },
    {
      "type": "h5",
      "text": "Time and Space Complexity"
    },
    {
      "type": "ul",
      "text": [
        "Search: O(log n)",
        "Insert: O(log n)",
        "Delete: O(log n)",
        "Space: O(n) for storing n nodes"
      ]
    },
    {
      "type": "h4",
      "text": "When to Use AVL Trees?"
    },
    {
      "type": "p5",
      "text": "Use AVL Trees when your application requires frequent insertions and deletions and you need to keep operations efficient with guaranteed logarithmic time."
    }
  ]
  