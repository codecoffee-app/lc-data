[
    {
      "type": "h4",
      "text": "What is a Multiway Search Tree?"
    },
    {
      "type": "p5",
      "text": "Unlike binary trees where each node has at most two children, a multiway search tree allows nodes to have more than two children. These trees are also called m-way trees, where 'm' represents the maximum number of children a node can have."
    },
    {
      "type": "ul",
      "text": [
        "Each node can contain up to m−1 keys (values).",
        "Each node can have up to m child pointers (branches).",
        "Not every node needs to be full — they can have fewer keys and children.",
        "Multiway trees are useful for large datasets stored on disk where minimizing access time is crucial."
      ]
    },
    {
      "type": "h4",
      "text": "What is a B-Tree?"
    },
    {
      "type": "p5",
      "text": "A B-Tree is a balanced m-way search tree specially designed for systems that read and write large blocks of data, such as databases and file systems. It keeps data sorted and allows efficient insertion, deletion, and search operations."
    },
    {
      "type": "h5",
      "text": "Properties of B-Trees"
    },
    {
      "type": "ol",
      "text": [
        "All leaf nodes appear at the same level.",
        "Each node (except the root) must have at least ⌈m/2⌉ − 1 keys and at most m − 1 keys.",
        "A non-leaf node with n − 1 keys must have exactly n children.",
        "Keys in each node are always sorted in ascending order.",
        "Internal nodes (non-leaf) must have at least ⌈m/2⌉ children.",
        "If the root is not a leaf, it must have at least two children."
      ]
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "Insert(key):\n  Find correct leaf node\n  Insert key in sorted order\n  If overflow:\n    Split node and promote middle key"
      }
    },
    {
      "type": "h4",
      "text": "What is a B+ Tree?"
    },
    {
      "type": "p5",
      "text": "A B+ Tree is an advanced version of the B-Tree. The main difference is that all values (records) are stored at the leaf level, and internal nodes only store keys to guide the search. This makes B+ Trees faster for range queries and more space-efficient."
    },
    {
      "type": "h5",
      "text": "Uses of B+ Trees"
    },
    {
      "type": "ul",
      "text": [
        "Ideal for databases and file systems that require fast data retrieval.",
        "Minimizes disk I/O operations by reducing the number of nodes visited.",
        "Great for handling large datasets stored on disk."
      ]
    },
    {
      "type": "h5",
      "text": "Time Complexities in B+ Tree"
    },
    {
      "type": "ul",
      "text": [
        "Insertion: O(log n)",
        "Search: O(log n)",
        "Deletion: O(log n)",
        "Range Query (k elements): O(log n + k)"
      ]
    }
  ]
  