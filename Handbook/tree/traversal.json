[
    {
      "type": "h4",
      "text": "What is a Binary Tree Traversal?"
    },
    {
      "type": "p5",
      "text": "A binary tree traversal is a method to visit each node in a binary tree exactly once in a specific order. Depending on the strategy, the order of visiting the nodes changes."
    },
    {
      "type": "img",
      "text": "https://picsum.photos/300/200",
      "style": "w-36 h-9"
    },
    {
      "type": "h5",
      "text": "Why is Traversal Important?"
    },
    {
      "type": "ul",
      "text": [
        "It allows us to access and process every node in a tree.",
        "Different traversals serve different purposes like searching, copying, or displaying data.",
        "They form the basis for many tree-related algorithms."
      ]
    },
    {
      "type": "h4",
      "text": "Types of Binary Tree Traversals"
    },
    {
      "type": "ol",
      "text": [
        "Inorder Traversal (Left, Root, Right)",
        "Preorder Traversal (Root, Left, Right)",
        "Postorder Traversal (Left, Right, Root)"
      ]
    },
    {
      "type": "h5",
      "text": "Inorder Traversal (Left, Root, Right)"
    },
    {
      "type": "p5",
      "text": "In this traversal, we first visit the left subtree, then the current node, and finally the right subtree. It is especially useful in Binary Search Trees because it gives nodes in sorted order."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function inorder(node):\n  if node is not null:\n    inorder(node.left)\n    visit(node)\n    inorder(node.right)"
      }
    },
    {
      "type": "h5",
      "text": "Preorder Traversal (Root, Left, Right)"
    },
    {
      "type": "p5",
      "text": "In preorder traversal, we first visit the current node, then traverse the left subtree, and finally the right subtree. It's useful for creating a copy of the tree."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function preorder(node):\n  if node is not null:\n    visit(node)\n    preorder(node.left)\n    preorder(node.right)"
      }
    },
    {
      "type": "h5",
      "text": "Postorder Traversal (Left, Right, Root)"
    },
    {
      "type": "p5",
      "text": "In this traversal, we first visit the left subtree, then the right subtree, and finally the current node. It is useful when deleting or freeing nodes in a tree."
    },
    {
      "type": "code",
      "text": {
        "lang": "pseudo",
        "code": "function postorder(node):\n  if node is not null:\n    postorder(node.left)\n    postorder(node.right)\n    visit(node)"
      }
    }
  ]
  