{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "650",
            "title": "2 Keys Keyboard",
            "titleSlug": "2-keys-keyboard",
            "content": "<p>There is only one character <code>&#39;A&#39;</code> on the screen of a notepad. You can perform one of two operations on this notepad for each step:</p>\n\n<ul>\n\t<li>Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).</li>\n\t<li>Paste: You can paste the characters which are copied last time.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <em>the minimum number of operations to get the character</em> <code>&#39;A&#39;</code> <em>exactly</em> <code>n</code> <em>times on the screen</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Initially, we have one character &#39;A&#39;.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get &#39;AA&#39;.\nIn step 3, we use Paste operation to get &#39;AAA&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3404,
            "dislikes": 203,
            "similarQuestions": "[{\"title\": \"4 Keys Keyboard\", \"titleSlug\": \"4-keys-keyboard\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Broken Calculator\", \"titleSlug\": \"broken-calculator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Value After Replacing With Sum of Prime Factors\", \"titleSlug\": \"smallest-value-after-replacing-with-sum-of-prime-factors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Distinct Prime Factors of Product of Array\", \"titleSlug\": \"distinct-prime-factors-of-product-of-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"127.6K\", \"totalSubmission\": \"236.9K\", \"totalAcceptedRaw\": 127638, \"totalSubmissionRaw\": 236949, \"acRate\": \"53.9%\"}",
            "hints": [
                "How many characters may be there in the clipboard at the last step if n = 3? n = 7? n = 10? n = 24?"
            ],
            "rephrased": {
                "body": "You start with a single character 'A' on a notepad. You can perform two operations: 'Copy All' (copy all characters) and 'Paste' (paste the last copied characters). Given an integer `n`, find the minimum number of operations needed to have exactly `n` 'A' characters on the screen.",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "3",
                        "explanation": "Start with 'A'. Copy All (1 operation). Paste (2 operations) resulting in 'AA'. Paste (3 operations) resulting in 'AAA'."
                    },
                    {
                        "input": "1",
                        "output": "0",
                        "explanation": "Since we start with one 'A', no operations are needed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "4-keys-keyboard",
                "title": "4 Keys Keyboard",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "broken-calculator",
                "title": "Broken Calculator",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "smallest-value-after-replacing-with-sum-of-prime-factors",
                "title": "Smallest Value After Replacing With Sum of Prime Factors",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "distinct-prime-factors-of-product-of-array",
                "title": "Distinct Prime Factors of Product of Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How many characters may be there in the clipboard at the last step if n = 3? n = 7? n = 10? n = 24?"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minSteps(int n) {\n    if (n <= 1)\n      return 0;\n\n    // dp[i] := min steps to get i 'A'\n    vector<int> dp(n + 1);\n\n    // Copy 'A', then paste 'A' i - 1 times\n    iota(dp.begin(), dp.end(), 0);\n\n    for (int i = 2; i <= n; ++i)\n      for (int j = i / 2; j > 2; --j)\n        if (i % j == 0) {\n          dp[i] = dp[j] + i / j;  // Paste dp[j] i / j times\n          break;\n        }\n\n    return dp[n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minSteps(int n) {\n    // dp[i] := min steps to get i 'A'\n    int[] dp = new int[n + 1];\n\n    for (int i = 2; i <= n; ++i) {\n      dp[i] = i; // Copy 'A', then paste 'A' i - 1 times\n      for (int j = i / 2; j > 2; --j)\n        if (i % j == 0) {\n          dp[i] = dp[j] + i / j; // Paste dp[j] i / j times\n          break;\n        }\n    }\n\n    return dp[n];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minSteps(self, n: int) -> int:\n    if n <= 1:\n      return 0\n\n    # dp[i] := min steps to get i 'A'\n    # Copy 'A', then paste 'A' i - 1 times\n    dp = [i for i in range(n + 1)]\n\n    for i in range(2, n + 1):\n      for j in range(i // 2, 2, -1):\n        if i % j == 0:\n          dp[i] = dp[j] + i // j  # Paste dp[j] i / j times\n          break\n\n    return dp[n]\n",
                "lang_text": "py"
            }
        }
    }
}