{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "679",
            "title": "24 Game",
            "titleSlug": "24-game",
            "content": "<p>You are given an integer array <code>cards</code> of length <code>4</code>. You have four cards, each containing a number in the range <code>[1, 9]</code>. You should arrange the numbers on these cards in a mathematical expression using the operators <code>[&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;]</code> and the parentheses <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code> to get the value 24.</p>\n\n<p>You are restricted with the following rules:</p>\n\n<ul>\n\t<li>The division operator <code>&#39;/&#39;</code> represents real division, not integer division.\n\n\t<ul>\n\t\t<li>For example, <code>4 / (1 - 2 / 3) = 4 / (1 / 3) = 12</code>.</li>\n\t</ul>\n\t</li>\n\t<li>Every operation done is between two numbers. In particular, we cannot use <code>&#39;-&#39;</code> as a unary operator.\n\t<ul>\n\t\t<li>For example, if <code>cards = [1, 1, 1, 1]</code>, the expression <code>&quot;-1 - 1 - 1 - 1&quot;</code> is <strong>not allowed</strong>.</li>\n\t</ul>\n\t</li>\n\t<li>You cannot concatenate numbers together\n\t<ul>\n\t\t<li>For example, if <code>cards = [1, 2, 1, 2]</code>, the expression <code>&quot;12 + 12&quot;</code> is not valid.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <code>true</code> if you can get such expression that evaluates to <code>24</code>, and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cards = [4,1,8,7]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> (8-4) * (7-1) = 24\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cards = [1,2,1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>cards.length == 4</code></li>\n\t<li><code>1 &lt;= cards[i] &lt;= 9</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1436,
            "dislikes": 246,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"75K\", \"totalSubmission\": \"152.3K\", \"totalAcceptedRaw\": 74980, \"totalSubmissionRaw\": 152346, \"acRate\": \"49.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array `cards` of four integers, each between 1 and 9, determine if it's possible to achieve a value of 24 using these numbers and the operators '+', '-', '*', and '/'. You can also use parentheses '(', ')'.\n\n**Rules:**\n\n*   Division is real division (e.g., 4 / (1 - 2 / 3) = 12).\n*   Every operation is between two numbers; unary minus is not allowed (e.g., -1 - 1 - 1 - 1 is invalid).\n*   Concatenating numbers is not allowed (e.g., 12 + 12 is invalid).",
                "constraints": [
                    "cards.length == 4",
                    "1 <= cards[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "[4,1,8,7]",
                        "output": "true",
                        "explanation": "One possible solution is (8-4) * (7-1) = 24"
                    },
                    {
                        "input": "[1,2,1,2]",
                        "output": "false",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool judgePoint24(vector<int>& nums) {\n    vector<double> doubleNums;\n\n    for (const int num : nums)\n      doubleNums.push_back(num);\n\n    return dfs(doubleNums);\n  }\n\n private:\n  bool dfs(vector<double>& nums) {\n    if (nums.size() == 1)\n      return abs(nums[0] - 24) < 0.001;\n\n    for (int i = 0; i < nums.size(); ++i)\n      for (int j = 0; j < i; ++j) {\n        for (const double num : generate(nums[i], nums[j])) {\n          vector<double> nextRound{num};\n          for (int k = 0; k < nums.size(); ++k) {\n            if (k == i || k == j)  // Used in generate()\n              continue;\n            nextRound.push_back(nums[k]);\n          }\n          if (dfs(nextRound))\n            return true;\n        }\n      }\n\n    return false;\n  }\n\n  vector<double> generate(double a, double b) {\n    return {a * b, a / b, b / a, a + b, a - b, b - a};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean judgePoint24(int[] nums) {\n    List<Double> doubleNums = new ArrayList<>();\n\n    for (final int num : nums)\n      doubleNums.add((double) num);\n\n    return dfs(doubleNums);\n  }\n\n  private boolean dfs(List<Double> nums) {\n    if (nums.size() == 1)\n      return Math.abs(nums.get(0) - 24.0) < 0.001;\n\n    for (int i = 0; i < nums.size(); ++i)\n      for (int j = i + 1; j < nums.size(); ++j)\n        for (final double num : generate(nums.get(i), nums.get(j))) {\n          List<Double> nextRound = new ArrayList<>(Arrays.asList(num));\n          for (int k = 0; k < nums.size(); ++k) {\n            if (k == i || k == j) // Used in generate()\n              continue;\n            nextRound.add(nums.get(k));\n          }\n          if (dfs(nextRound))\n            return true;\n        }\n\n    return false;\n  }\n\n  private double[] generate(double a, double b) {\n    return new double[] {a * b, a / b, b / a, a + b, a - b, b - a};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def judgePoint24(self, nums: List[int]) -> bool:\n    def generate(a: float, b: float) -> List[float]:\n      return [a * b,\n              math.inf if b == 0 else a / b,\n              math.inf if a == 0 else b / a,\n              a + b, a - b, b - a]\n\n    def dfs(nums: List[float]) -> bool:\n      if len(nums) == 1:\n        return abs(nums[0] - 24.0) < 0.001\n\n      for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n          for num in generate(nums[i], nums[j]):\n            nextRound = [num]\n            for k in range(len(nums)):\n              if k == i or k == j:\n                continue\n              nextRound.append(nums[k])\n            if dfs(nextRound):\n              return True\n\n      return False\n\n    return dfs(nums)\n",
                "lang_text": "py"
            }
        }
    }
}