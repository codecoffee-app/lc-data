{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "923",
            "title": "3Sum With Multiplicity",
            "titleSlug": "3sum-with-multiplicity",
            "content": "<p>Given an integer array <code>arr</code>, and an integer <code>target</code>, return the number of tuples <code>i, j, k</code> such that <code>i &lt; j &lt; k</code> and <code>arr[i] + arr[j] + arr[k] == target</code>.</p>\n\n<p>As the answer can be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,1,2,2,3,3,4,4,5,5], target = 8\n<strong>Output:</strong> 20\n<strong>Explanation: </strong>\nEnumerating by the values (arr[i], arr[j], arr[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,1,2,2,2,2], target = 5\n<strong>Output:</strong> 12\n<strong>Explanation: </strong>\narr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,1,3], target = 6\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> (1, 2, 3) occured one time in the array so we return 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 3000</code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= target &lt;= 300</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2574,
            "dislikes": 308,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"99.9K\", \"totalSubmission\": \"220.5K\", \"totalAcceptedRaw\": 99928, \"totalSubmissionRaw\": 220514, \"acRate\": \"45.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `arr`, find the number of unique triplets `(i, j, k)` such that `i < j < k` and `arr[i] + arr[j] + arr[k] == target`. Return the count modulo `10^9 + 7` since the answer can be very large.",
                "constraints": [
                    "3 <= arr.length <= 3000",
                    "0 <= arr[i] <= 100",
                    "0 <= target <= 300"
                ],
                "testcases": [
                    {
                        "input": "arr = [1,1,2,2,3,3,4,4,5,5], target = 8",
                        "output": "20",
                        "explanation": "The valid triplets and their counts are:\n(1, 2, 5) occurring 8 times.\n(1, 3, 4) occurring 8 times.\n(2, 2, 4) occurring 2 times.\n(2, 3, 3) occurring 2 times.\nTotal count: 8 + 8 + 2 + 2 = 20."
                    },
                    {
                        "input": "arr = [1,1,2,2,2,2], target = 5",
                        "output": "12",
                        "explanation": "The only valid triplet is (1, 2, 2).  We need to choose one 1 from the two 1's and two 2's from the four 2's.  This can be done in (2 choose 1) * (4 choose 2) = 2 * 6 = 12 ways."
                    },
                    {
                        "input": "arr = [2,1,3], target = 6",
                        "output": "1",
                        "explanation": "The only triplet that sums to 6 is (1, 2, 3), and it occurs once in the array. Note that the problem specifies i < j < k. So we need to ensure that 1, 2, and 3 are at indices i, j, and k such that the indices satisfy the condition."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int threeSumMulti(vector<int>& arr, int target) {\n    constexpr int kMod = 1'000'000'007;\n    int ans = 0;\n    unordered_map<int, int> count;\n\n    for (const int a : arr)\n      ++count[a];\n\n    for (const auto& [i, x] : count)\n      for (const auto& [j, y] : count) {\n        const int k = target - i - j;\n        const auto it = count.find(k);\n        if (it == count.cend())\n          continue;\n        if (i == j && j == k)\n          ans = (ans + static_cast<long>(x) * (x - 1) * (x - 2) / 6) % kMod;\n        else if (i == j && j != k)\n          ans = (ans + static_cast<long>(x) * (x - 1) / 2 * it->second) % kMod;\n        else if (i < j && j < k)\n          ans = (ans + static_cast<long>(x) * y * it->second) % kMod;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int threeSumMulti(int[] arr, int target) {\n    final int kMod = 1_000_000_007;\n    int ans = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (final int a : arr)\n      count.merge(a, 1, Integer::sum);\n\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n      final int i = entry.getKey();\n      final int x = entry.getValue();\n      for (Map.Entry<Integer, Integer> entry2 : count.entrySet()) {\n        final int j = entry2.getKey();\n        final int y = entry2.getValue();\n        final int k = target - i - j;\n        if (!count.containsKey(k))\n          continue;\n        if (i == j && j == k)\n          ans = (int) ((ans + (long) x * (x - 1) * (x - 2) / 6) % kMod);\n        else if (i == j && j != k)\n          ans = (int) ((ans + (long) x * (x - 1) / 2 * count.get(k)) % kMod);\n        else if (i < j && j < k)\n          ans = (int) ((ans + (long) x * y * count.get(k)) % kMod);\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def threeSumMulti(self, arr: List[int], target: int) -> int:\n    kMod = 1_000_000_007\n    ans = 0\n    count = collections.Counter(arr)\n\n    for i, x in count.items():\n      for j, y in count.items():\n        k = target - i - j\n        if k not in count:\n          continue\n        if i == j and j == k:\n          ans = (ans + x * (x - 1) * (x - 2) // 6) % kMod\n        elif i == j and j != k:\n          ans = (ans + x * (x - 1) // 2 * count[k]) % kMod\n        elif i < j and j < k:\n          ans = (ans + x * y * count[k]) % kMod\n\n    return ans % kMod\n",
                "lang_text": "py"
            }
        }
    }
}