{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "67",
            "title": "Add Binary",
            "titleSlug": "add-binary",
            "content": "<p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> a = \"11\", b = \"1\"\n<strong>Output:</strong> \"100\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> a = \"1010\", b = \"1011\"\n<strong>Output:</strong> \"10101\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code> and <code>b</code> consist&nbsp;only of <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code> characters.</li>\n\t<li>Each string does not contain leading zeros except for the zero itself.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 9042,
            "dislikes": 915,
            "similarQuestions": "[{\"title\": \"Add Two Numbers\", \"titleSlug\": \"add-two-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Multiply Strings\", \"titleSlug\": \"multiply-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Plus One\", \"titleSlug\": \"plus-one\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Add to Array-Form of Integer\", \"titleSlug\": \"add-to-array-form-of-integer\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2.5M\", \"totalAcceptedRaw\": 1330165, \"totalSubmissionRaw\": 2509854, \"acRate\": \"53.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two binary strings `a` and `b`, calculate their sum and return the result as a binary string.",
                "constraints": [
                    "1 <= a.length, b.length <= 10^4",
                    "a and b consist only of '0' or '1' characters.",
                    "Each string does not contain leading zeros except for the zero itself."
                ],
                "testcases": [
                    {
                        "input": "a = \"11\", b = \"1\"",
                        "output": "\"100\"",
                        "explanation": "Adding binary string \"11\" and \"1\" results in \"100\"."
                    },
                    {
                        "input": "a = \"1010\", b = \"1011\"",
                        "output": "\"10101\"",
                        "explanation": "Adding binary string \"1010\" and \"1011\" results in \"10101\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "add-two-numbers",
                "title": "Add Two Numbers",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "multiply-strings",
                "title": "Multiply Strings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "plus-one",
                "title": "Plus One",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "add-to-array-form-of-integer",
                "title": "Add to Array-Form of Integer",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string addBinary(string a, string b) {\n    string ans;\n    int carry = 0;\n    int i = a.length() - 1;\n    int j = b.length() - 1;\n\n    while (i >= 0 || j >= 0 || carry) {\n      if (i >= 0)\n        carry += a[i--] - '0';\n      if (j >= 0)\n        carry += b[j--] - '0';\n      ans += carry % 2 + '0';\n      carry /= 2;\n    }\n\n    reverse(ans.begin(), ans.end());\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String addBinary(String a, String b) {\n    StringBuilder sb = new StringBuilder();\n    int carry = 0;\n    int i = a.length() - 1;\n    int j = b.length() - 1;\n\n    while (i >= 0 || j >= 0 || carry == 1) {\n      if (i >= 0)\n        carry += a.charAt(i--) - '0';\n      if (j >= 0)\n        carry += b.charAt(j--) - '0';\n      sb.append(carry % 2);\n      carry /= 2;\n    }\n\n    return sb.reverse().toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def addBinary(self, a: str, b: str) -> str:\n    ans = []\n    carry = 0\n    i = len(a) - 1\n    j = len(b) - 1\n\n    while i >= 0 or j >= 0 or carry:\n      if i >= 0:\n        carry += int(a[i])\n        i -= 1\n      if j >= 0:\n        carry += int(b[j])\n        j -= 1\n      ans.append(str(carry % 2))\n      carry //= 2\n\n    return ''.join(ans[::-1])\n",
                "lang_text": "py"
            }
        }
    }
}