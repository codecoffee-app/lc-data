{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2508",
            "title": "Add Edges to Make Degrees of All Nodes Even",
            "titleSlug": "add-edges-to-make-degrees-of-all-nodes-even",
            "content": "<p>There is an <strong>undirected</strong> graph consisting of <code>n</code> nodes numbered from <code>1</code> to <code>n</code>. You are given the integer <code>n</code> and a <strong>2D</strong> array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>. The graph can be disconnected.</p>\n\n<p>You can add <strong>at most</strong> two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.</p>\n\n<p>Return <code>true</code><em> if it is possible to make the degree of each node in the graph even, otherwise return </em><code>false</code><em>.</em></p>\n\n<p>The degree of a node is the number of edges connected to it.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/26/agraphdrawio.png\" style=\"width: 500px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> n = 5, edges = [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The above diagram shows a valid way of adding an edge.\nEvery node in the resulting graph is connected to an even number of edges.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/26/aagraphdrawio.png\" style=\"width: 400px; height: 120px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[1,2],[3,4]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The above diagram shows a valid way of adding two edges.</pre>\n\n<p><strong>Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/26/aaagraphdrawio.png\" style=\"width: 150px; height: 158px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[1,2],[1,3],[1,4]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is not possible to obtain a valid graph with adding at most 2 edges.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= edges.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>There are no repeated edges.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 312,
            "dislikes": 54,
            "similarQuestions": "[{\"title\": \"Minimum Degree of a Connected Trio in a Graph\", \"titleSlug\": \"minimum-degree-of-a-connected-trio-in-a-graph\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"11K\", \"totalSubmission\": \"35.1K\", \"totalAcceptedRaw\": 11001, \"totalSubmissionRaw\": 35076, \"acRate\": \"31.4%\"}",
            "hints": [
                "Notice that each edge that we add changes the degree of exactly 2 nodes.",
                "The number of nodes with an odd degree in the original graph should be either 0, 2, or 4. Try to work on each of these cases."
            ],
            "rephrased": {
                "body": "Given an undirected graph with 'n' nodes numbered from 1 to 'n', and a list of edges, determine if it's possible to make the degree of each node even by adding at most two additional edges (without creating self-loops or duplicate edges). The graph may be disconnected. Return true if possible, false otherwise.",
                "constraints": [
                    "3 <= n <= 10^5",
                    "2 <= edges.length <= 10^5",
                    "edges[i].length == 2",
                    "1 <= a_i, b_i <= n",
                    "a_i != b_i",
                    "There are no repeated edges."
                ],
                "testcases": [
                    {
                        "input": "n = 5, edges = [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]",
                        "output": "true",
                        "explanation": "It is possible to add an edge to make the degree of each node even."
                    },
                    {
                        "input": "n = 4, edges = [[1,2],[3,4]]",
                        "output": "true",
                        "explanation": "It is possible to add two edges to make the degree of each node even."
                    },
                    {
                        "input": "n = 4, edges = [[1,2],[1,3],[1,4]]",
                        "output": "false",
                        "explanation": "It is not possible to add at most 2 edges to make the degree of each node even."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-degree-of-a-connected-trio-in-a-graph",
                "title": "Minimum Degree of a Connected Trio in a Graph",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Notice that each edge that we add changes the degree of exactly 2 nodes.",
            "The number of nodes with an odd degree in the original graph should be either 0, 2, or 4. Try to work on each of these cases."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isPossible(int n, vector<vector<int>>& edges) {\n    vector<unordered_set<int>> graph(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0] - 1;\n      const int v = edge[1] - 1;\n      graph[u].insert(v);\n      graph[v].insert(u);\n    }\n\n    const vector<int> oddNodes = getOddNodes(graph);\n    if (oddNodes.empty())\n      return true;\n    if (oddNodes.size() == 2) {\n      const int a = oddNodes[0];\n      const int b = oddNodes[1];\n      for (int i = 0; i < n; ++i)\n        // We can connect i w/ a and i w/ b\n        if (!graph[i].count(a) && !graph[i].count(b))\n          return true;\n    }\n    if (oddNodes.size() == 4) {\n      const int a = oddNodes[0];\n      const int b = oddNodes[1];\n      const int c = oddNodes[2];\n      const int d = oddNodes[3];\n      return (!graph[a].count(b) && !graph[c].count(d)) ||\n             (!graph[a].count(c) && !graph[b].count(d)) ||\n             (!graph[a].count(d) && !graph[b].count(c));\n    }\n    return false;\n  }\n\n private:\n  vector<int> getOddNodes(const vector<unordered_set<int>>& graph) {\n    vector<int> oddNodes;\n    for (int i = 0; i < graph.size(); ++i)\n      if (graph[i].size() & 1)\n        oddNodes.push_back(i);\n    return oddNodes;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isPossible(int n, List<List<Integer>> edges) {\n    Set<Integer>[] graph = new Set[n];\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new HashSet<>();\n\n    for (List<Integer> edge : edges) {\n      final int u = edge.get(0) - 1;\n      final int v = edge.get(1) - 1;\n      graph[u].add(v);\n      graph[v].add(u);\n    }\n\n    List<Integer> oddNodes = getOddNodes(graph);\n    if (oddNodes.isEmpty())\n      return true;\n    if (oddNodes.size() == 2) {\n      final int a = oddNodes.get(0);\n      final int b = oddNodes.get(1);\n      for (int i = 0; i < n; ++i)\n        // We can connect i w/ a and i w/ b\n        if (!graph[i].contains(a) && !graph[i].contains(b))\n          return true;\n    }\n    if (oddNodes.size() == 4) {\n      final int a = oddNodes.get(0);\n      final int b = oddNodes.get(1);\n      final int c = oddNodes.get(2);\n      final int d = oddNodes.get(3);\n      return (!graph[a].contains(b) && !graph[c].contains(d)) ||\n          (!graph[a].contains(c) && !graph[b].contains(d)) ||\n          (!graph[a].contains(d) && !graph[b].contains(c));\n    }\n    return false;\n  }\n\n  private List<Integer> getOddNodes(Set<Integer>[] graph) {\n    List<Integer> oddNodes = new ArrayList<>();\n    for (int i = 0; i < graph.length; ++i)\n      if (graph[i].size() % 2 == 1)\n        oddNodes.add(i);\n    return oddNodes;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isPossible(self, n: int, edges: List[List[int]]) -> bool:\n    graph = [set() for _ in range(n)]\n\n    for u, v in edges:\n      graph[u - 1].add(v - 1)\n      graph[v - 1].add(u - 1)\n\n    oddNodes = [i for i, neighbor in enumerate(graph) if len(neighbor) & 1]\n    if not oddNodes:\n      return True\n    if len(oddNodes) == 2:\n      a, b = oddNodes\n      return any(a not in graph[i] and b not in graph[i] for i in range(n))\n    if len(oddNodes) == 4:\n      a, b, c, d = oddNodes\n      return (b not in graph[a] and d not in graph[c]) or \\\n          (c not in graph[a] and d not in graph[b]) or \\\n          (d not in graph[a] and c not in graph[b])\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}