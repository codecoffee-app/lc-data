{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1936",
            "title": "Add Minimum Number of Rungs",
            "titleSlug": "add-minimum-number-of-rungs",
            "content": "<p>You are given a <strong>strictly increasing</strong> integer array <code>rungs</code> that represents the <strong>height</strong> of rungs on a ladder. You are currently on the <strong>floor</strong> at height <code>0</code>, and you want to reach the last rung.</p>\n\n<p>You are also given an integer <code>dist</code>. You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is <strong>at most</strong> <code>dist</code>. You are able to insert rungs at any positive <strong>integer</strong> height if a rung is not already there.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of rungs that must be added to the ladder in order for you to climb to the last rung.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> rungs = [1,3,5,10], dist = 2\n<strong>Output:</strong> 2\n<strong>Explanation:\n</strong>You currently cannot reach the last rung.\nAdd rungs at heights 7 and 8 to climb this ladder. \nThe ladder will now have rungs at [1,3,5,<u>7</u>,<u>8</u>,10].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rungs = [3,6,8,10], dist = 3\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nThis ladder can be climbed without adding additional rungs.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> rungs = [3,4,6,7], dist = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nYou currently cannot reach the first rung from the ground.\nAdd a rung at height 1 to climb this ladder.\nThe ladder will now have rungs at [<u>1</u>,3,4,6,7].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rungs.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= rungs[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= dist &lt;= 10<sup>9</sup></code></li>\n\t<li><code>rungs</code> is <strong>strictly increasing</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 353,
            "dislikes": 26,
            "similarQuestions": "[{\"title\": \"Cutting Ribbons\", \"titleSlug\": \"cutting-ribbons\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.5K\", \"totalSubmission\": \"59.1K\", \"totalAcceptedRaw\": 25543, \"totalSubmissionRaw\": 59143, \"acRate\": \"43.2%\"}",
            "hints": [
                "Go as far as you can on the available rungs before adding new rungs.",
                "If you have to add a new rung, add it as high up as possible.",
                "Try using division to decrease the number of computations."
            ],
            "rephrased": {
                "body": "You are given a strictly increasing integer array `rungs` representing the heights of rungs on a ladder. You start at height 0 and want to reach the last rung. You are also given an integer `dist`, which is the maximum distance you can climb between rungs or from the floor to the first rung. You can add rungs at any positive integer height that isn't already occupied. Determine the minimum number of rungs you must add to the ladder to reach the last rung.",
                "constraints": [
                    "1 <= rungs.length <= 10^5",
                    "1 <= rungs[i] <= 10^9",
                    "1 <= dist <= 10^9",
                    "`rungs` is strictly increasing."
                ],
                "testcases": [
                    {
                        "input": "rungs = [1,3,5,10], dist = 2",
                        "output": "2",
                        "explanation": "Without adding rungs, you cannot reach the last rung. By adding rungs at heights 7 and 8, the ladder becomes [1, 3, 5, 7, 8, 10], allowing you to climb to the top."
                    },
                    {
                        "input": "rungs = [3,6,8,10], dist = 3",
                        "output": "0",
                        "explanation": "This ladder can be climbed without adding any additional rungs, as the distance between consecutive rungs (and the ground to the first rung) is always less than or equal to `dist`."
                    },
                    {
                        "input": "rungs = [3,4,6,7], dist = 2",
                        "output": "1",
                        "explanation": "You cannot reach the first rung from the ground. Adding a rung at height 1 allows you to climb the ladder, resulting in rungs at [1, 3, 4, 6, 7]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "cutting-ribbons",
                "title": "Cutting Ribbons",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Go as far as you can on the available rungs before adding new rungs.",
            "If you have to add a new rung, add it as high up as possible.",
            "Try using division to decrease the number of computations."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int addRungs(vector<int>& rungs, int dist) {\n    int ans = 0;\n    int prev = 0;\n\n    for (const int rung : rungs) {\n      ans += (rung - prev - 1) / dist;\n      prev = rung;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int addRungs(int[] rungs, int dist) {\n    int ans = 0;\n    int prev = 0;\n\n    for (final int rung : rungs) {\n      ans += (rung - prev - 1) / dist;\n      prev = rung;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def addRungs(self, rungs: List[int], dist: int) -> int:\n    ans = 0\n    prev = 0\n\n    for rung in rungs:\n      ans += (rung - prev - 1) // dist\n      prev = rung\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}