{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "623",
            "title": "Add One Row to Tree",
            "titleSlug": "add-one-row-to-tree",
            "content": "<p>Given the <code>root</code> of a binary tree and two integers <code>val</code> and <code>depth</code>, add a row of nodes with value <code>val</code> at the given depth <code>depth</code>.</p>\n\n<p>Note that the <code>root</code> node is at depth <code>1</code>.</p>\n\n<p>The adding rule is:</p>\n\n<ul>\n\t<li>Given the integer <code>depth</code>, for each not null tree node <code>cur</code> at the depth <code>depth - 1</code>, create two tree nodes with value <code>val</code> as <code>cur</code>&#39;s left subtree root and right subtree root.</li>\n\t<li><code>cur</code>&#39;s original left subtree should be the left subtree of the new left subtree root.</li>\n\t<li><code>cur</code>&#39;s original right subtree should be the right subtree of the new right subtree root.</li>\n\t<li>If <code>depth == 1</code> that means there is no depth <code>depth - 1</code> at all, then create a tree node with value <code>val</code> as the new root of the whole original tree, and the original tree is the new root&#39;s left subtree.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/15/addrow-tree.jpg\" style=\"width: 500px; height: 231px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,6,3,1,5], val = 1, depth = 2\n<strong>Output:</strong> [4,1,1,2,null,null,6,3,1,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/11/add2-tree.jpg\" style=\"width: 500px; height: 277px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,null,3,1], val = 1, depth = 3\n<strong>Output:</strong> [4,2,null,1,1,3,null,null,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li>The depth of the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= depth &lt;= the depth of tree + 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2945,
            "dislikes": 228,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"158.8K\", \"totalSubmission\": \"266.7K\", \"totalAcceptedRaw\": 158850, \"totalSubmissionRaw\": 266708, \"acRate\": \"59.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree and two integers, `val` and `depth`, add a row of nodes with value `val` at the given `depth`. The root node is at depth 1.  At depth `depth - 1`, for each non-null node `cur`, create two new nodes with value `val`.  The left child of `cur` becomes the left child of the new left node. The right child of `cur` becomes the right child of the new right node. If `depth` is 1, create a new root node with value `val` and make the original tree its left child.",
                "constraints": [
                    "The number of nodes in the tree is in the range `[1, 10<sup>4</sup>]`.",
                    "The depth of the tree is in the range `[1, 10<sup>4</sup>]`.",
                    "`-100 <= Node.val <= 100`",
                    "`-10<sup>5</sup> <= val <= 10<sup>5</sup>`",
                    "`1 <= depth <= the depth of tree + 1`"
                ],
                "testcases": [
                    {
                        "input": "root = [4,2,6,3,1,5], val = 1, depth = 2",
                        "output": "[4,1,1,2,null,null,6,3,1,5]",
                        "explanation": "Add a row of nodes with value 1 at depth 2."
                    },
                    {
                        "input": "root = [4,2,null,3,1], val = 1, depth = 3",
                        "output": "[4,2,null,1,1,3,null,null,1]",
                        "explanation": "Add a row of nodes with value 1 at depth 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* addOneRow(TreeNode* root, int v, int d) {\n    if (d == 1) {\n      TreeNode* newRoot = new TreeNode(v);\n      newRoot->left = root;\n      return newRoot;\n    }\n\n    int depth = 0;\n    queue<TreeNode*> q{{root}};\n\n    while (!q.empty()) {\n      ++depth;\n      for (int sz = q.size(); sz > 0; --sz) {\n        TreeNode* node = q.front();\n        q.pop();\n        if (node->left)\n          q.push(node->left);\n        if (node->right)\n          q.push(node->right);\n        if (depth == d - 1) {\n          TreeNode* cachedLeft = node->left;\n          TreeNode* cachedRight = node->right;\n          node->left = new TreeNode(v);\n          node->right = new TreeNode(v);\n          node->left->left = cachedLeft;\n          node->right->right = cachedRight;\n        }\n      }\n      if (depth == d - 1)\n        break;\n    }\n\n    return root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode addOneRow(TreeNode root, int v, int d) {\n    if (d == 1) {\n      TreeNode newRoot = new TreeNode(v);\n      newRoot.left = root;\n      return newRoot;\n    }\n\n    int depth = 0;\n    Queue<TreeNode> q = new ArrayDeque<>(Arrays.asList(root));\n\n    while (!q.isEmpty()) {\n      ++depth;\n      for (int sz = q.size(); sz > 0; --sz) {\n        TreeNode node = q.poll();\n        if (node.left != null)\n          q.offer(node.left);\n        if (node.right != null)\n          q.offer(node.right);\n        if (depth == d - 1) {\n          TreeNode cachedLeft = node.left;\n          TreeNode cachedRight = node.right;\n          node.left = new TreeNode(v);\n          node.right = new TreeNode(v);\n          node.left.left = cachedLeft;\n          node.right.right = cachedRight;\n        }\n      }\n      if (depth == d - 1)\n        break;\n    }\n\n    return root;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}