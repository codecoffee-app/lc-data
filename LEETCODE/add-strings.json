{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "415",
            "title": "Add Strings",
            "titleSlug": "add-strings",
            "content": "<p>Given two non-negative integers, <code>num1</code> and <code>num2</code> represented as string, return <em>the sum of</em> <code>num1</code> <em>and</em> <code>num2</code> <em>as a string</em>.</p>\n\n<p>You must solve the problem without using any built-in library for handling large integers (such as <code>BigInteger</code>). You must also not convert the inputs to integers directly.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;11&quot;, num2 = &quot;123&quot;\n<strong>Output:</strong> &quot;134&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;456&quot;, num2 = &quot;77&quot;\n<strong>Output:</strong> &quot;533&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;0&quot;, num2 = &quot;0&quot;\n<strong>Output:</strong> &quot;0&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>num1</code> and <code>num2</code> consist of only digits.</li>\n\t<li><code>num1</code> and <code>num2</code> don&#39;t have any leading zeros except for the zero itself.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4867,
            "dislikes": 713,
            "similarQuestions": "[{\"title\": \"Add Two Numbers\", \"titleSlug\": \"add-two-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Multiply Strings\", \"titleSlug\": \"multiply-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Add to Array-Form of Integer\", \"titleSlug\": \"add-to-array-form-of-integer\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"624.9K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 624862, \"totalSubmissionRaw\": 1205529, \"acRate\": \"51.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two non-negative integers, `num1` and `num2`, represented as strings, return the sum of `num1` and `num2` as a string. You must solve this problem without using built-in libraries for handling large integers (like `BigInteger`) and without directly converting the input strings to integers.",
                "constraints": [
                    "1 <= num1.length, num2.length <= 10^4",
                    "num1 and num2 consist of only digits.",
                    "num1 and num2 don't have any leading zeros except for the zero itself."
                ],
                "testcases": [
                    {
                        "input": "num1 = \"11\", num2 = \"123\"",
                        "output": "\"134\"",
                        "explanation": "The sum of 11 and 123 is 134."
                    },
                    {
                        "input": "num1 = \"456\", num2 = \"77\"",
                        "output": "\"533\"",
                        "explanation": "The sum of 456 and 77 is 533."
                    },
                    {
                        "input": "num1 = \"0\", num2 = \"0\"",
                        "output": "\"0\"",
                        "explanation": "The sum of 0 and 0 is 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "add-two-numbers",
                "title": "Add Two Numbers",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "multiply-strings",
                "title": "Multiply Strings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "add-to-array-form-of-integer",
                "title": "Add to Array-Form of Integer",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string addStrings(string num1, string num2) {\n    string ans;\n    int carry = 0;\n    int i = num1.length() - 1;\n    int j = num2.length() - 1;\n\n    while (i >= 0 || j >= 0 || carry) {\n      if (i >= 0)\n        carry += num1[i--] - '0';\n      if (j >= 0)\n        carry += num2[j--] - '0';\n      ans += carry % 10 + '0';\n      carry /= 10;\n    }\n\n    reverse(ans.begin(), ans.end());\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String addStrings(String num1, String num2) {\n    StringBuilder sb = new StringBuilder();\n    int carry = 0;\n    int i = num1.length() - 1;\n    int j = num2.length() - 1;\n\n    while (i >= 0 || j >= 0 || carry > 0) {\n      if (i >= 0)\n        carry += num1.charAt(i--) - '0';\n      if (j >= 0)\n        carry += num2.charAt(j--) - '0';\n      sb.append(carry % 10);\n      carry /= 10;\n    }\n\n    return sb.reverse().toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def addStrings(self, num1: str, num2: str) -> str:\n    ans = []\n    carry = 0\n    i = len(num1) - 1\n    j = len(num2) - 1\n\n    while i >= 0 or j >= 0 or carry:\n      if i >= 0:\n        carry += int(num1[i])\n      if j >= 0:\n        carry += int(num2[j])\n      ans.append(str(carry % 10))\n      carry //= 10\n      i -= 1\n      j -= 1\n\n    return ''.join(ans[::-1])\n",
                "lang_text": "py"
            }
        }
    }
}