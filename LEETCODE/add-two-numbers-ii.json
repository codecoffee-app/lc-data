{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "445",
            "title": "Add Two Numbers II",
            "titleSlug": "add-two-numbers-ii",
            "content": "<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>\n\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/sumii-linked-list.jpg\" style=\"width: 523px; height: 342px;\" />\n<pre>\n<strong>Input:</strong> l1 = [7,2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [7,8,0,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [8,0,7]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [0], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n\t<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Could you solve it without reversing the input lists?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5768,
            "dislikes": 281,
            "similarQuestions": "[{\"title\": \"Add Two Numbers\", \"titleSlug\": \"add-two-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Add Two Polynomials Represented as Linked Lists\", \"titleSlug\": \"add-two-polynomials-represented-as-linked-lists\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"455.4K\", \"totalSubmission\": \"745.7K\", \"totalAcceptedRaw\": 455401, \"totalSubmissionRaw\": 745710, \"acRate\": \"61.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given two non-empty linked lists, `l1` and `l2`, representing two non-negative integers. The most significant digit comes first in each list, and each node contains a single digit. Add the two numbers represented by these linked lists and return the sum as a new linked list.",
                "constraints": [
                    "The number of nodes in each linked list is in the range [1, 100].",
                    "0 <= Node.val <= 9",
                    "It is guaranteed that the list represents a number that does not have leading zeros (except for the number 0 itself)."
                ],
                "testcases": [
                    {
                        "input": "l1 = [7,2,4,3], l2 = [5,6,4]",
                        "output": "[7,8,0,7]",
                        "explanation": null
                    },
                    {
                        "input": "l1 = [2,4,3], l2 = [5,6,4]",
                        "output": "[8,0,7]",
                        "explanation": null
                    },
                    {
                        "input": "l1 = [0], l2 = [0]",
                        "output": "[0]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "add-two-numbers",
                "title": "Add Two Numbers",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "add-two-polynomials-represented-as-linked-lists",
                "title": "Add Two Polynomials Represented as Linked Lists",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Stack",
                "slug": "stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n    stack<ListNode*> stack1;\n    stack<ListNode*> stack2;\n\n    while (l1) {\n      stack1.push(l1);\n      l1 = l1->next;\n    }\n\n    while (l2) {\n      stack2.push(l2);\n      l2 = l2->next;\n    }\n\n    ListNode* head = nullptr;\n    int carry = 0;\n\n    while (carry || !stack1.empty() || !stack2.empty()) {\n      if (!stack1.empty())\n        carry += stack1.top()->val, stack1.pop();\n      if (!stack2.empty())\n        carry += stack2.top()->val, stack2.pop();\n      ListNode* node = new ListNode(carry % 10);\n      node->next = head;\n      head = node;\n      carry /= 10;\n    }\n\n    return head;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    Deque<ListNode> stack1 = new ArrayDeque<>();\n    Deque<ListNode> stack2 = new ArrayDeque<>();\n\n    while (l1 != null) {\n      stack1.push(l1);\n      l1 = l1.next;\n    }\n\n    while (l2 != null) {\n      stack2.push(l2);\n      l2 = l2.next;\n    }\n\n    ListNode head = null;\n    int carry = 0;\n\n    while (carry > 0 || !stack1.isEmpty() || !stack2.isEmpty()) {\n      if (!stack1.isEmpty())\n        carry += stack1.pop().val;\n      if (!stack2.isEmpty())\n        carry += stack2.pop().val;\n      ListNode node = new ListNode(carry % 10);\n      node.next = head;\n      head = node;\n      carry /= 10;\n    }\n\n    return head;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n    stack1 = []\n    stack2 = []\n\n    while l1:\n      stack1.append(l1)\n      l1 = l1.next\n\n    while l2:\n      stack2.append(l2)\n      l2 = l2.next\n\n    head = None\n    carry = 0\n\n    while carry or stack1 or stack2:\n      if stack1:\n        carry += stack1.pop().val\n      if stack2:\n        carry += stack2.pop().val\n      node = ListNode(carry % 10)\n      node.next = head\n      head = node\n      carry //= 10\n\n    return head\n",
                "lang_text": "py"
            }
        }
    }
}