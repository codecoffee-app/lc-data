{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1073",
            "title": "Adding Two Negabinary Numbers",
            "titleSlug": "adding-two-negabinary-numbers",
            "content": "<p>Given two numbers <code>arr1</code> and <code>arr2</code> in base <strong>-2</strong>, return the result of adding them together.</p>\n\n<p>Each number is given in <em>array format</em>:&nbsp; as an array of 0s and 1s, from most significant bit to least significant bit.&nbsp; For example, <code>arr = [1,1,0,1]</code> represents the number <code>(-2)^3&nbsp;+ (-2)^2 + (-2)^0 = -3</code>.&nbsp; A number <code>arr</code> in <em>array, format</em> is also guaranteed to have no leading zeros: either&nbsp;<code>arr == [0]</code> or <code>arr[0] == 1</code>.</p>\n\n<p>Return the result of adding <code>arr1</code> and <code>arr2</code> in the same format: as an array of 0s and 1s with no leading zeros.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,1,1,1,1], arr2 = [1,0,1]\n<strong>Output:</strong> [1,0,0,0,0]\n<strong>Explanation: </strong>arr1 represents 11, arr2 represents 5, the output represents 16.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [0], arr2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [0], arr2 = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr1.length,&nbsp;arr2.length &lt;= 1000</code></li>\n\t<li><code>arr1[i]</code>&nbsp;and <code>arr2[i]</code> are&nbsp;<code>0</code> or <code>1</code></li>\n\t<li><code>arr1</code> and <code>arr2</code> have no leading zeros</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 307,
            "dislikes": 123,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                }
            ],
            "stats": "{\"totalAccepted\": \"17.1K\", \"totalSubmission\": \"46.5K\", \"totalAcceptedRaw\": 17052, \"totalSubmissionRaw\": 46466, \"acRate\": \"36.7%\"}",
            "hints": [
                "We can try to determine the last digit of the answer, then divide everything by 2 and repeat."
            ],
            "rephrased": {
                "body": "Given two numbers, `arr1` and `arr2`, represented in base -2 as arrays of 0s and 1s (most significant bit to least significant bit), return their sum, also in base -2 array format. The resulting array should have no leading zeros unless the sum is 0.",
                "constraints": [
                    "1 <= arr1.length, arr2.length <= 1000",
                    "arr1[i] and arr2[i] are 0 or 1",
                    "arr1 and arr2 have no leading zeros"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [1,1,1,1,1], arr2 = [1,0,1]",
                        "output": "[1,0,0,0,0]",
                        "explanation": "arr1 represents 11, arr2 represents 5, and their sum (16) is represented by the output."
                    },
                    {
                        "input": "arr1 = [0], arr2 = [0]",
                        "output": "[0]",
                        "explanation": "The sum of 0 and 0 is 0."
                    },
                    {
                        "input": "arr1 = [0], arr2 = [1]",
                        "output": "[1]",
                        "explanation": "The sum of 0 and 1 is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "We can try to determine the last digit of the answer, then divide everything by 2 and repeat."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> addNegabinary(vector<int>& arr1, vector<int>& arr2) {\n    deque<int> ans;\n    int carry = 0;\n    int i = arr1.size() - 1;\n    int j = arr2.size() - 1;\n\n    while (carry || i >= 0 || j >= 0) {\n      if (i >= 0)\n        carry += arr1[i--];\n      if (j >= 0)\n        carry += arr2[j--];\n      ans.push_front(carry & 1);\n      carry = -(carry >> 1);\n    }\n\n    while (ans.size() > 1 && ans.front() == 0)\n      ans.pop_front();\n\n    return {ans.begin(), ans.end()};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] addNegabinary(int[] arr1, int[] arr2) {\n    Deque<Integer> ans = new ArrayDeque<>();\n    int carry = 0;\n    int i = arr1.length - 1;\n    int j = arr2.length - 1;\n\n    while (carry != 0 || i >= 0 || j >= 0) {\n      if (i >= 0)\n        carry += arr1[i--];\n      if (j >= 0)\n        carry += arr2[j--];\n      ans.addFirst(carry & 1);\n      carry = -(carry >> 1);\n    }\n\n    while (ans.size() > 1 && ans.getFirst() == 0)\n      ans.pollFirst();\n\n    return ans.stream().mapToInt(Integer::intValue).toArray();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def addNegabinary(self, arr1: List[int], arr2: List[int]) -> List[int]:\n    ans = []\n    carry = 0\n\n    while carry or arr1 or arr2:\n      if arr1:\n        carry += arr1.pop()\n      if arr2:\n        carry += arr2.pop()\n      ans.append(carry & 1)\n      carry = -(carry >> 1)\n\n    while len(ans) > 1 and ans[-1] == 0:\n      ans.pop()\n\n    return ans[::-1]\n",
                "lang_text": "py"
            }
        }
    }
}