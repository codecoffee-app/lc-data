{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "870",
            "title": "Advantage Shuffle",
            "titleSlug": "advantage-shuffle",
            "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> both of the same length. The <strong>advantage</strong> of <code>nums1</code> with respect to <code>nums2</code> is the number of indices <code>i</code> for which <code>nums1[i] &gt; nums2[i]</code>.</p>\n\n<p>Return <em>any permutation of </em><code>nums1</code><em> that maximizes its <strong>advantage</strong> with respect to </em><code>nums2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums1 = [2,7,11,15], nums2 = [1,10,4,11]\n<strong>Output:</strong> [2,11,7,15]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums1 = [12,24,8,32], nums2 = [13,25,32,11]\n<strong>Output:</strong> [24,32,8,12]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums2.length == nums1.length</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1575,
            "dislikes": 93,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"64.6K\", \"totalSubmission\": \"123.5K\", \"totalAcceptedRaw\": 64551, \"totalSubmissionRaw\": 123550, \"acRate\": \"52.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two integer arrays `nums1` and `nums2` of the same length, find a permutation of `nums1` that maximizes its advantage over `nums2`. The advantage is defined as the number of indices `i` where `nums1[i]` > `nums2[i]`. Return any such permutation of `nums1`.",
                "constraints": [
                    "1 <= nums1.length <= 10^5",
                    "nums2.length == nums1.length",
                    "0 <= nums1[i], nums2[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": {
                            "nums1": [
                                2,
                                7,
                                11,
                                15
                            ],
                            "nums2": [
                                1,
                                10,
                                4,
                                11
                            ]
                        },
                        "output": [
                            2,
                            11,
                            7,
                            15
                        ],
                        "explanation": "One possible permutation of nums1 that maximizes the advantage over nums2.  2 > 1, 11 > 10, 7 > 4, and 15 > 11 are not all true, so [2,11,7,15] is correct with advantage of 3."
                    },
                    {
                        "input": {
                            "nums1": [
                                12,
                                24,
                                8,
                                32
                            ],
                            "nums2": [
                                13,
                                25,
                                32,
                                11
                            ]
                        },
                        "output": [
                            24,
                            32,
                            8,
                            12
                        ],
                        "explanation": "One possible permutation of nums1 that maximizes the advantage over nums2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> advantageCount(vector<int>& nums1, vector<int>& nums2) {\n    multiset<int> set{nums1.begin(), nums1.end()};\n\n    for (int i = 0; i < nums2.size(); ++i) {\n      const auto p =\n          *set.rbegin() <= nums2[i] ? set.begin() : set.upper_bound(nums2[i]);\n      nums1[i] = *p;\n      set.erase(p);\n    }\n\n    return nums1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] advantageCount(int[] nums1, int[] nums2) {\n    TreeMap<Integer, Integer> map = new TreeMap<>();\n\n    for (final int num : nums1)\n      map.merge(num, 1, Integer::sum);\n\n    for (int i = 0; i < nums2.length; i++) {\n      Integer key = map.higherKey(nums2[i]);\n      if (key == null)\n        key = map.firstKey();\n      if (map.merge(key, -1, Integer::sum) == 0)\n        map.remove(key);\n      nums1[i] = key;\n    }\n\n    return nums1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from sortedcontainers import SortedList\n\n\nclass Solution:\n  def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:\n    sl = SortedList(nums1)\n\n    for i, num in enumerate(nums2):\n      index = 0 if sl[-1] <= num else sl.bisect_right(num)\n      nums1[i] = sl[index]\n      del sl[index]\n\n    return nums1\n",
                "lang_text": "py"
            }
        }
    }
}