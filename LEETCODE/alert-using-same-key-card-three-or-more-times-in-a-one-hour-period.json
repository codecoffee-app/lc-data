{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1604",
            "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
            "titleSlug": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
            "content": "<p>LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker&#39;s name and the time when it was used. The system emits an <strong>alert</strong> if any worker uses the key-card <strong>three or more times</strong> in a one-hour period.</p>\n\n<p>You are given a list of strings <code>keyName</code> and <code>keyTime</code> where <code>[keyName[i], keyTime[i]]</code> corresponds to a person&#39;s name and the time when their key-card was used <strong>in a</strong> <strong>single day</strong>.</p>\n\n<p>Access times are given in the <strong>24-hour time format &quot;HH:MM&quot;</strong>, such as <code>&quot;23:51&quot;</code> and <code>&quot;09:49&quot;</code>.</p>\n\n<p>Return a <em>list of unique worker names who received an alert for frequent keycard use</em>. Sort the names in <strong>ascending order alphabetically</strong>.</p>\n\n<p>Notice that <code>&quot;10:00&quot;</code> - <code>&quot;11:00&quot;</code> is considered to be within a one-hour period, while <code>&quot;22:51&quot;</code> - <code>&quot;23:52&quot;</code> is not considered to be within a one-hour period.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> keyName = [&quot;daniel&quot;,&quot;daniel&quot;,&quot;daniel&quot;,&quot;luis&quot;,&quot;luis&quot;,&quot;luis&quot;,&quot;luis&quot;], keyTime = [&quot;10:00&quot;,&quot;10:40&quot;,&quot;11:00&quot;,&quot;09:00&quot;,&quot;11:00&quot;,&quot;13:00&quot;,&quot;15:00&quot;]\n<strong>Output:</strong> [&quot;daniel&quot;]\n<strong>Explanation:</strong> &quot;daniel&quot; used the keycard 3 times in a one-hour period (&quot;10:00&quot;,&quot;10:40&quot;, &quot;11:00&quot;).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> keyName = [&quot;alice&quot;,&quot;alice&quot;,&quot;alice&quot;,&quot;bob&quot;,&quot;bob&quot;,&quot;bob&quot;,&quot;bob&quot;], keyTime = [&quot;12:01&quot;,&quot;12:00&quot;,&quot;18:00&quot;,&quot;21:00&quot;,&quot;21:20&quot;,&quot;21:30&quot;,&quot;23:00&quot;]\n<strong>Output:</strong> [&quot;bob&quot;]\n<strong>Explanation:</strong> &quot;bob&quot; used the keycard 3 times in a one-hour period (&quot;21:00&quot;,&quot;21:20&quot;, &quot;21:30&quot;).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= keyName.length, keyTime.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>keyName.length == keyTime.length</code></li>\n\t<li><code>keyTime[i]</code> is in the format <strong>&quot;HH:MM&quot;</strong>.</li>\n\t<li><code>[keyName[i], keyTime[i]]</code> is <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= keyName[i].length &lt;= 10</code></li>\n\t<li><code>keyName[i] contains only lowercase English letters.</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 299,
            "dislikes": 407,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"33.8K\", \"totalSubmission\": \"73.8K\", \"totalAcceptedRaw\": 33796, \"totalSubmissionRaw\": 73766, \"acRate\": \"45.8%\"}",
            "hints": [
                "Group the times by the name of the card user, then sort each group"
            ],
            "rephrased": {
                "body": "A company monitors employee keycard access to office doors. The security system logs each keycard use with the employee's name and the time of access. An alert is triggered if an employee uses their keycard three or more times within a one-hour period.\n\nYou are given two lists, `keyName` and `keyTime`, representing employee names and their keycard access times, respectively. Times are in 24-hour format (\"HH:MM\") within a single day.\n\nDetermine the list of unique employees who triggered an alert due to frequent keycard use. The list should be sorted alphabetically in ascending order.",
                "constraints": [
                    "1 <= keyName.length, keyTime.length <= 10^5",
                    "keyName.length == keyTime.length",
                    "keyTime[i] is in the format \"HH:MM\".",
                    "[keyName[i], keyTime[i]] is unique.",
                    "1 <= keyName[i].length <= 10",
                    "keyName[i] contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]",
                        "output": "[\"daniel\"]",
                        "explanation": "Daniel used the keycard three times within a one-hour period: 10:00, 10:40, and 11:00."
                    },
                    {
                        "input": "keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]",
                        "output": "[\"bob\"]",
                        "explanation": "Bob used the keycard three times within a one-hour period: 21:00, 21:20, and 21:30."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Group the times by the name of the card user, then sort each group"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> alertNames(vector<string>& keyName, vector<string>& keyTime) {\n    vector<string> ans;\n    unordered_map<string, vector<int>> nameToMinutes;\n\n    for (int i = 0; i < keyName.size(); ++i) {\n      const int minutes = getMinutes(keyTime[i]);\n      nameToMinutes[keyName[i]].push_back(minutes);\n    }\n\n    for (auto& [name, minutes] : nameToMinutes)\n      if (hasAlert(minutes))\n        ans.push_back(name);\n\n    std::ranges::sort(ans);\n    return ans;\n  }\n\n private:\n  // Returns true if any worker uses the key-card three or more times in a\n  // one-hour period.\n  bool hasAlert(vector<int>& minutes) {\n    if (minutes.size() > 70)\n      return true;\n    std::ranges::sort(minutes);\n    for (int i = 2; i < minutes.size(); ++i)\n      if (minutes[i - 2] + 60 >= minutes[i])\n        return true;\n    return false;\n  }\n\n  int getMinutes(const string& time) {\n    const int h = stoi(time.substr(0, 2));\n    const int m = stoi(time.substr(3));\n    return 60 * h + m;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> alertNames(String[] keyName, String[] keyTime) {\n    List<String> ans = new ArrayList<>();\n    HashMap<String, List<Integer>> nameToMinutes = new HashMap<>();\n\n    for (int i = 0; i < keyName.length; i++) {\n      final int minutes = getMinutes(keyTime[i]);\n      nameToMinutes.putIfAbsent(keyName[i], new ArrayList<>());\n      nameToMinutes.get(keyName[i]).add(minutes);\n    }\n\n    for (Map.Entry<String, List<Integer>> entry : nameToMinutes.entrySet()) {\n      final String name = entry.getKey();\n      List<Integer> minutes = entry.getValue();\n      if (hasAlert(minutes))\n        ans.add(name);\n    }\n\n    Collections.sort(ans);\n    return ans;\n  }\n\n  private boolean hasAlert(List<Integer> minutes) {\n    if (minutes.size() > 70)\n      return true;\n    Collections.sort(minutes);\n    for (int i = 2; i < minutes.size(); i++)\n      if (minutes.get(i - 2) + 60 >= minutes.get(i))\n        return true;\n    return false;\n  }\n\n  private int getMinutes(String time) {\n    final int h = Integer.parseInt(time.substring(0, 2));\n    final int m = Integer.parseInt(time.substring(3));\n    return 60 * h + m;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def alertNames(self, keyName: List[str], keyTime: List[str]) -> List[str]:\n    nameToMinutes = collections.defaultdict(list)\n\n    for name, time in zip(keyName, keyTime):\n      minutes = self._getMinutes(time)\n      nameToMinutes[name].append(minutes)\n\n    return sorted([name for name, minutes in nameToMinutes.items()\n                   if self._hasAlert(minutes)])\n\n  def _hasAlert(self, minutes: List[int]) -> bool:\n    if len(minutes) > 70:\n      return True\n    minutes.sort()\n    for i in range(2, len(minutes)):\n      if minutes[i - 2] + 60 >= minutes[i]:\n        return True\n    return False\n\n  def _getMinutes(self, time: str) -> int:\n    h, m = map(int, time.split(':'))\n    return 60 * h + m\n",
                "lang_text": "py"
            }
        }
    }
}