{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2192",
            "title": "All Ancestors of a Node in a Directed Acyclic Graph",
            "titleSlug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph",
            "content": "<p>You are given a positive integer <code>n</code> representing the number of nodes of a <strong>Directed Acyclic Graph</strong> (DAG). The nodes are numbered from <code>0</code> to <code>n - 1</code> (<strong>inclusive</strong>).</p>\n\n<p>You are also given a 2D integer array <code>edges</code>, where <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> denotes that there is a <strong>unidirectional</strong> edge from <code>from<sub>i</sub></code> to <code>to<sub>i</sub></code> in the graph.</p>\n\n<p>Return <em>a list</em> <code>answer</code><em>, where </em><code>answer[i]</code><em> is the <strong>list of ancestors</strong> of the</em> <code>i<sup>th</sup></code> <em>node, sorted in <strong>ascending order</strong></em>.</p>\n\n<p>A node <code>u</code> is an <strong>ancestor</strong> of another node <code>v</code> if <code>u</code> can reach <code>v</code> via a set of edges.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/12/e1.png\" style=\"width: 322px; height: 265px;\" />\n<pre>\n<strong>Input:</strong> n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]\n<strong>Output:</strong> [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]\n<strong>Explanation:</strong>\nThe above diagram represents the input graph.\n- Nodes 0, 1, and 2 do not have any ancestors.\n- Node 3 has two ancestors 0 and 1.\n- Node 4 has two ancestors 0 and 2.\n- Node 5 has three ancestors 0, 1, and 3.\n- Node 6 has five ancestors 0, 1, 2, 3, and 4.\n- Node 7 has four ancestors 0, 1, 2, and 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/12/e2.png\" style=\"width: 343px; height: 299px;\" />\n<pre>\n<strong>Input:</strong> n = 5, edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n<strong>Output:</strong> [[],[0],[0,1],[0,1,2],[0,1,2,3]]\n<strong>Explanation:</strong>\nThe above diagram represents the input graph.\n- Node 0 does not have any ancestor.\n- Node 1 has one ancestor 0.\n- Node 2 has two ancestors 0 and 1.\n- Node 3 has three ancestors 0, 1, and 2.\n- Node 4 has four ancestors 0, 1, 2, and 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= edges.length &lt;= min(2000, n * (n - 1) / 2)</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>from<sub>i</sub> != to<sub>i</sub></code></li>\n\t<li>There are no duplicate edges.</li>\n\t<li>The graph is <strong>directed</strong> and <strong>acyclic</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1020,
            "dislikes": 17,
            "similarQuestions": "[{\"title\": \"Number of Restricted Paths From First to Last Node\", \"titleSlug\": \"number-of-restricted-paths-from-first-to-last-node\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                }
            ],
            "stats": "{\"totalAccepted\": \"32.8K\", \"totalSubmission\": \"63.6K\", \"totalAcceptedRaw\": 32847, \"totalSubmissionRaw\": 63554, \"acRate\": \"51.7%\"}",
            "hints": [
                "Consider how reversing each edge of the graph can help us.",
                "How can performing BFS/DFS on the reversed graph help us find the ancestors of every node?"
            ],
            "rephrased": {
                "body": "Given a directed acyclic graph (DAG) with `n` nodes labeled from 0 to `n - 1`, and a list of directed edges `edges`, where `edges[i] = [from_i, to_i]` represents a directed edge from node `from_i` to node `to_i`, find the list of ancestors for each node.  Return a list `answer`, where `answer[i]` is the list of ancestors of the `i`th node, sorted in ascending order. A node `u` is an ancestor of node `v` if there is a path from `u` to `v`.",
                "constraints": [
                    "1 <= n <= 1000",
                    "0 <= edges.length <= min(2000, n * (n - 1) / 2)",
                    "edges[i].length == 2",
                    "0 <= from_i, to_i <= n - 1",
                    "from_i != to_i",
                    "There are no duplicate edges.",
                    "The graph is directed and acyclic."
                ],
                "testcases": [
                    {
                        "input": "n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]",
                        "output": "[[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]",
                        "explanation": "Node 0, 1, and 2 do not have any ancestors. Node 3 has ancestors 0 and 1. Node 4 has ancestors 0 and 2. Node 5 has ancestors 0, 1, and 3. Node 6 has ancestors 0, 1, 2, 3, and 4. Node 7 has ancestors 0, 1, 2, and 3."
                    },
                    {
                        "input": "n = 5, edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]",
                        "output": "[[],[0],[0,1],[0,1,2],[0,1,2,3]]",
                        "explanation": "Node 0 does not have any ancestor. Node 1 has ancestor 0. Node 2 has ancestors 0 and 1. Node 3 has ancestors 0, 1, and 2. Node 4 has ancestors 0, 1, 2, and 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-restricted-paths-from-first-to-last-node",
                "title": "Number of Restricted Paths From First to Last Node",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Consider how reversing each edge of the graph can help us.",
            "How can performing BFS/DFS on the reversed graph help us find the ancestors of every node?"
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {\n    vector<vector<int>> ans(n);\n    vector<vector<int>> graph(n);\n\n    for (const vector<int>& edge : edges)\n      graph[e[0]].push_back(e[1]);\n\n    for (int i = 0; i < n; ++i)\n      dfs(graph, i, i, vector<bool>(n), ans);\n\n    return ans;\n  }\n\n private:\n  void dfs(const vector<vector<int>>& graph, int u, int ancestor,\n           vector<bool>&& seen, vector<vector<int>>& ans) {\n    seen[u] = true;\n    for (const int v : graph[u]) {\n      if (seen[v])\n        continue;\n      ans[v].push_back(ancestor);\n      dfs(graph, v, ancestor, move(seen), ans);\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> getAncestors(int n, int[][] edges) {\n    List<List<Integer>> ans = new ArrayList<>();\n    List<Integer>[] graph = new List[n];\n\n    for (int i = 0; i < n; ++i) {\n      ans.add(new ArrayList<>());\n      graph[i] = new ArrayList<>();\n    }\n\n    for (int[] edge : edges)\n      graph[e[0]].add(e[1]);\n\n    for (int i = 0; i < n; ++i)\n      dfs(graph, i, i, new boolean[n], ans);\n\n    return ans;\n  }\n\n  private void dfs(List<Integer>[] graph, int u, int ancestor, boolean[] seen,\n                   List<List<Integer>> ans) {\n    seen[u] = true;\n    for (final int v : graph[u]) {\n      if (seen[v])\n        continue;\n      ans.get(v).add(ancestor);\n      dfs(graph, v, ancestor, seen, ans);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getAncestors(self, n: int, edges: List[List[int]]) -> List[List[int]]:\n    ans = [[] for _ in range(n)]\n    graph = [[] for _ in range(n)]\n\n    for u, v in edges:\n      graph[u].append(v)\n\n    def dfs(u: int, ancestor: int, seen: Set[int]) -> None:\n      seen.add(u)\n      for v in graph[u]:\n        if v in seen:\n          continue\n        ans[v].append(ancestor)\n        dfs(v, ancestor, seen)\n\n    for i in range(n):\n      dfs(i, i, set())\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}