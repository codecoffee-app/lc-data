{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2155",
            "title": "All Divisions With the Highest Score of a Binary Array",
            "titleSlug": "all-divisions-with-the-highest-score-of-a-binary-array",
            "content": "<p>You are given a <strong>0-indexed</strong> binary array <code>nums</code> of length <code>n</code>. <code>nums</code> can be divided at index <code>i</code> (where <code>0 &lt;= i &lt;= n)</code> into two arrays (possibly empty) <code>nums<sub>left</sub></code> and <code>nums<sub>right</sub></code>:</p>\n\n<ul>\n\t<li><code>nums<sub>left</sub></code> has all the elements of <code>nums</code> between index <code>0</code> and <code>i - 1</code> <strong>(inclusive)</strong>, while <code>nums<sub>right</sub></code> has all the elements of nums between index <code>i</code> and <code>n - 1</code> <strong>(inclusive)</strong>.</li>\n\t<li>If <code>i == 0</code>, <code>nums<sub>left</sub></code> is <strong>empty</strong>, while <code>nums<sub>right</sub></code> has all the elements of <code>nums</code>.</li>\n\t<li>If <code>i == n</code>, <code>nums<sub>left</sub></code> has all the elements of nums, while <code>nums<sub>right</sub></code> is <strong>empty</strong>.</li>\n</ul>\n\n<p>The <strong>division score</strong> of an index <code>i</code> is the <strong>sum</strong> of the number of <code>0</code>&#39;s in <code>nums<sub>left</sub></code> and the number of <code>1</code>&#39;s in <code>nums<sub>right</sub></code>.</p>\n\n<p>Return <em><strong>all distinct indices</strong> that have the <strong>highest</strong> possible <strong>division score</strong></em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,0]\n<strong>Output:</strong> [2,4]\n<strong>Explanation:</strong> Division at index\n- 0: nums<sub>left</sub> is []. nums<sub>right</sub> is [0,0,<u><strong>1</strong></u>,0]. The score is 0 + 1 = 1.\n- 1: nums<sub>left</sub> is [<u><strong>0</strong></u>]. nums<sub>right</sub> is [0,<u><strong>1</strong></u>,0]. The score is 1 + 1 = 2.\n- 2: nums<sub>left</sub> is [<u><strong>0</strong></u>,<u><strong>0</strong></u>]. nums<sub>right</sub> is [<u><strong>1</strong></u>,0]. The score is 2 + 1 = 3.\n- 3: nums<sub>left</sub> is [<u><strong>0</strong></u>,<u><strong>0</strong></u>,1]. nums<sub>right</sub> is [0]. The score is 2 + 0 = 2.\n- 4: nums<sub>left</sub> is [<u><strong>0</strong></u>,<u><strong>0</strong></u>,1,<u><strong>0</strong></u>]. nums<sub>right</sub> is []. The score is 3 + 0 = 3.\nIndices 2 and 4 both have the highest possible division score 3.\nNote the answer [4,2] would also be accepted.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0]\n<strong>Output:</strong> [3]\n<strong>Explanation:</strong> Division at index\n- 0: nums<sub>left</sub> is []. nums<sub>right</sub> is [0,0,0]. The score is 0 + 0 = 0.\n- 1: nums<sub>left</sub> is [<u><strong>0</strong></u>]. nums<sub>right</sub> is [0,0]. The score is 1 + 0 = 1.\n- 2: nums<sub>left</sub> is [<u><strong>0</strong></u>,<u><strong>0</strong></u>]. nums<sub>right</sub> is [0]. The score is 2 + 0 = 2.\n- 3: nums<sub>left</sub> is [<u><strong>0</strong></u>,<u><strong>0</strong></u>,<u><strong>0</strong></u>]. nums<sub>right</sub> is []. The score is 3 + 0 = 3.\nOnly index 3 has the highest possible division score 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1]\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> Division at index\n- 0: nums<sub>left</sub> is []. nums<sub>right</sub> is [<u><strong>1</strong></u>,<u><strong>1</strong></u>]. The score is 0 + 2 = 2.\n- 1: nums<sub>left</sub> is [1]. nums<sub>right</sub> is [<u><strong>1</strong></u>]. The score is 0 + 1 = 1.\n- 2: nums<sub>left</sub> is [1,1]. nums<sub>right</sub> is []. The score is 0 + 0 = 0.\nOnly index 0 has the highest possible division score 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 483,
            "dislikes": 14,
            "similarQuestions": "[{\"title\": \"Ones and Zeroes\", \"titleSlug\": \"ones-and-zeroes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Max Consecutive Ones II\", \"titleSlug\": \"max-consecutive-ones-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Subarrays With More Ones Than Zeros\", \"titleSlug\": \"count-subarrays-with-more-ones-than-zeros\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Array Partition\", \"titleSlug\": \"array-partition\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Divide Array in Sets of K Consecutive Numbers\", \"titleSlug\": \"divide-array-in-sets-of-k-consecutive-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.7K\", \"totalSubmission\": \"43.4K\", \"totalAcceptedRaw\": 27713, \"totalSubmissionRaw\": 43416, \"acRate\": \"63.8%\"}",
            "hints": [
                "When you iterate the array, maintain the number of zeros and ones on the left side. Can you quickly calculate the number of ones on the right side?",
                "The number of ones on the right side equals the number of ones in the whole array minus the number of ones on the left side.",
                "Alternatively, you can quickly calculate it by using a prefix sum array."
            ],
            "rephrased": {
                "body": "Given a 0-indexed binary array `nums` of length `n`, find all distinct indices that yield the highest possible division score.  The division score at index `i` (0 <= i <= n) is calculated as the sum of zeros in the left subarray (`nums_left`) and ones in the right subarray (`nums_right`). The left subarray contains elements from index 0 to `i-1`, and the right subarray contains elements from index `i` to `n-1`. If `i` is 0, the left subarray is empty. If `i` is `n`, the right subarray is empty.",
                "constraints": [
                    "n == nums.length",
                    "1 <= n <= 10^5",
                    "nums[i] is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "[0,0,1,0]",
                        "output": "[2,4]",
                        "explanation": "Calculating division scores for each index:\n- Index 0: `nums_left` is []. `nums_right` is [0,0,1,0]. Score is 0 + 1 = 1.\n- Index 1: `nums_left` is [0]. `nums_right` is [0,1,0]. Score is 1 + 1 = 2.\n- Index 2: `nums_left` is [0,0]. `nums_right` is [1,0]. Score is 2 + 1 = 3.\n- Index 3: `nums_left` is [0,0,1]. `nums_right` is [0]. Score is 2 + 0 = 2.\n- Index 4: `nums_left` is [0,0,1,0]. `nums_right` is []. Score is 3 + 0 = 3.\nIndices 2 and 4 have the highest division score of 3."
                    },
                    {
                        "input": "[0,0,0]",
                        "output": "[3]",
                        "explanation": "Calculating division scores for each index:\n- Index 0: `nums_left` is []. `nums_right` is [0,0,0]. Score is 0 + 0 = 0.\n- Index 1: `nums_left` is [0]. `nums_right` is [0,0]. Score is 1 + 0 = 1.\n- Index 2: `nums_left` is [0,0]. `nums_right` is [0]. Score is 2 + 0 = 2.\n- Index 3: `nums_left` is [0,0,0]. `nums_right` is []. Score is 3 + 0 = 3.\nIndex 3 has the highest division score of 3."
                    },
                    {
                        "input": "[1,1]",
                        "output": "[0]",
                        "explanation": "Calculating division scores for each index:\n- Index 0: `nums_left` is []. `nums_right` is [1,1]. Score is 0 + 2 = 2.\n- Index 1: `nums_left` is [1]. `nums_right` is [1]. Score is 0 + 1 = 1.\n- Index 2: `nums_left` is [1,1]. `nums_right` is []. Score is 0 + 0 = 0.\nIndex 0 has the highest division score of 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "ones-and-zeroes",
                "title": "Ones and Zeroes",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "max-consecutive-ones-ii",
                "title": "Max Consecutive Ones II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-subarrays-with-more-ones-than-zeros",
                "title": "Count Subarrays With More Ones Than Zeros",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "array-partition",
                "title": "Array Partition",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "divide-array-in-sets-of-k-consecutive-numbers",
                "title": "Divide Array in Sets of K Consecutive Numbers",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "When you iterate the array, maintain the number of zeros and ones on the left side. Can you quickly calculate the number of ones on the right side?",
            "The number of ones on the right side equals the number of ones in the whole array minus the number of ones on the left side.",
            "Alternatively, you can quickly calculate it by using a prefix sum array."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> maxScoreIndices(vector<int>& nums) {\n    const int zeros = count(nums.begin(), nums.end(), 0);\n    const int ones = nums.size() - zeros;\n    vector<int> ans{0};  // Division at index 0\n    int leftZeros = 0;\n    int leftOnes = 0;\n    int maxScore = ones;  // LeftZeros + rightOnes\n\n    for (int i = 0; i < nums.size(); ++i) {\n      leftZeros += nums[i] == 0;\n      leftOnes += nums[i] == 1;\n      const int rightOnes = ones - leftOnes;\n      const int score = leftZeros + rightOnes;\n      if (maxScore == score) {\n        ans.push_back(i + 1);\n      } else if (maxScore < score) {\n        maxScore = score;\n        ans = {i + 1};\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> maxScoreIndices(int[] nums) {\n    final int ones = Arrays.stream(nums).sum();\n    final int zeros = nums.length - ones;\n    // Division at index 0\n    List<Integer> ans = new ArrayList<>(Arrays.asList(0));\n    int leftZeros = 0;\n    int leftOnes = 0;\n    int maxScore = ones; // LeftZeros + rightOnes\n\n    for (int i = 0; i < nums.length; ++i) {\n      leftZeros += nums[i] == 0 ? 1 : 0;\n      leftOnes += nums[i] == 1 ? 1 : 0;\n      final int rightOnes = ones - leftOnes;\n      final int score = leftZeros + rightOnes;\n      if (maxScore == score) {\n        ans.add(i + 1);\n      } else if (maxScore < score) {\n        maxScore = score;\n        ans = new ArrayList<>(Arrays.asList(i + 1));\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxScoreIndices(self, nums: List[int]) -> List[int]:\n    zeros = nums.count(0)\n    ones = len(nums) - zeros\n    ans = [0]  # Division at index 0\n    leftZeros = 0\n    leftOnes = 0\n    maxScore = ones  # LeftZeros + rightOnes\n\n    for i, num in enumerate(nums):\n      leftZeros += num == 0\n      leftOnes += num == 1\n      rightOnes = ones - leftOnes\n      score = leftZeros + rightOnes\n      if maxScore == score:\n        ans.append(i + 1)\n      elif maxScore < score:\n        maxScore = score\n        ans = [i + 1]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}