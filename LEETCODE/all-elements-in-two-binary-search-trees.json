{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1305",
            "title": "All Elements in Two Binary Search Trees",
            "titleSlug": "all-elements-in-two-binary-search-trees",
            "content": "<p>Given two binary search trees <code>root1</code> and <code>root2</code>, return <em>a list containing all the integers from both trees sorted in <strong>ascending</strong> order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/q2-e1.png\" style=\"width: 457px; height: 207px;\" />\n<pre>\n<strong>Input:</strong> root1 = [2,1,4], root2 = [1,0,3]\n<strong>Output:</strong> [0,1,1,2,3,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/q2-e5-.png\" style=\"width: 352px; height: 197px;\" />\n<pre>\n<strong>Input:</strong> root1 = [1,null,8], root2 = [8,1]\n<strong>Output:</strong> [1,1,8,8]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each tree is in the range <code>[0, 5000]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2998,
            "dislikes": 90,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"205.6K\", \"totalSubmission\": \"257.5K\", \"totalAcceptedRaw\": 205563, \"totalSubmissionRaw\": 257538, \"acRate\": \"79.8%\"}",
            "hints": [
                "Traverse the first tree in list1 and the second tree in list2.",
                "Merge the two trees in one list and sort it."
            ],
            "rephrased": {
                "body": "Given two binary search trees, `root1` and `root2`, return a list containing all the integers from both trees sorted in ascending order.",
                "constraints": [
                    "The number of nodes in each tree is in the range `[0, 5000]`.",
                    "`-10^5 <= Node.val <= 10^5`"
                ],
                "testcases": [
                    {
                        "input": "root1 = [2,1,4], root2 = [1,0,3]",
                        "output": "[0,1,1,2,3,4]",
                        "explanation": "The integers from both trees combined and sorted are [0, 1, 1, 2, 3, 4]."
                    },
                    {
                        "input": "root1 = [1,null,8], root2 = [8,1]",
                        "output": "[1,1,8,8]",
                        "explanation": "The integers from both trees combined and sorted are [1, 1, 8, 8]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Traverse the first tree in list1 and the second tree in list2.",
            "Merge the two trees in one list and sort it."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class BSTIterator {\n public:\n  BSTIterator(TreeNode* root) {\n    pushLeftsUntilNull(root);\n  }\n\n  int peek() {\n    return stack.top()->val;\n  }\n\n  void next() {\n    TreeNode* node = stack.top();\n    stack.pop();\n    pushLeftsUntilNull(node->right);\n  }\n\n  bool hasNext() {\n    return !stack.empty();\n  }\n\n private:\n  stack<TreeNode*> stack;\n\n  void pushLeftsUntilNull(TreeNode* node) {\n    while (node) {\n      stack.push(node);\n      node = node->left;\n    }\n  }\n};\n\nclass Solution {\n public:\n  vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {\n    vector<int> ans;\n    BSTIterator bstIterator1(root1);\n    BSTIterator bstIterator2(root2);\n\n    while (bstIterator1.hasNext() && bstIterator2.hasNext())\n      if (bstIterator1.peek() < bstIterator2.peek()) {\n        ans.push_back(bstIterator1.peek());\n        bstIterator1.next();\n      } else {\n        ans.push_back(bstIterator2.peek());\n        bstIterator2.next();\n      }\n\n    while (bstIterator1.hasNext()) {\n      ans.push_back(bstIterator1.peek());\n      bstIterator1.next();\n    }\n\n    while (bstIterator2.hasNext()) {\n      ans.push_back(bstIterator2.peek());\n      bstIterator2.next();\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class BSTIterator {\n  public BSTIterator(TreeNode root) {\n    pushLeftsUntilNull(root);\n  }\n\n  public int peek() {\n    return stack.peek().val;\n  }\n\n  public void next() {\n    pushLeftsUntilNull(stack.pop().right);\n  }\n\n  public boolean hasNext() {\n    return !stack.isEmpty();\n  }\n\n  private Deque<TreeNode> stack = new ArrayDeque<>();\n\n  private void pushLeftsUntilNull(TreeNode node) {\n    while (node != null) {\n      stack.push(node);\n      node = node.left;\n    }\n  }\n}\n\nclass Solution {\n  public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {\n    List<Integer> ans = new ArrayList<>();\n    BSTIterator bstIterator1 = new BSTIterator(root1);\n    BSTIterator bstIterator2 = new BSTIterator(root2);\n\n    while (bstIterator1.hasNext() && bstIterator2.hasNext())\n      if (bstIterator1.peek() < bstIterator2.peek()) {\n        ans.add(bstIterator1.peek());\n        bstIterator1.next();\n      } else {\n        ans.add(bstIterator2.peek());\n        bstIterator2.next();\n      }\n\n    while (bstIterator1.hasNext()) {\n      ans.add(bstIterator1.peek());\n      bstIterator1.next();\n    }\n\n    while (bstIterator2.hasNext()) {\n      ans.add(bstIterator2.peek());\n      bstIterator2.next();\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}