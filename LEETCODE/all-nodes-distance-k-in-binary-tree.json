{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "863",
            "title": "All Nodes Distance K in Binary Tree",
            "titleSlug": "all-nodes-distance-k-in-binary-tree",
            "content": "<p>Given the <code>root</code> of a binary tree, the value of a target node <code>target</code>, and an integer <code>k</code>, return <em>an array of the values of all nodes that have a distance </em><code>k</code><em> from the target node.</em></p>\n\n<p>You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png\" style=\"width: 500px; height: 429px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2\n<strong>Output:</strong> [7,4,1]\nExplanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1], target = 1, k = 3\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 500]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 500</code></li>\n\t<li>All the values <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>target</code> is the value of one of the nodes in the tree.</li>\n\t<li><code>0 &lt;= k &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10541,
            "dislikes": 206,
            "similarQuestions": "[{\"title\": \"Amount of Time for Binary Tree to Be Infected\", \"titleSlug\": \"amount-of-time-for-binary-tree-to-be-infected\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"400.6K\", \"totalSubmission\": \"624.4K\", \"totalAcceptedRaw\": 400611, \"totalSubmissionRaw\": 624387, \"acRate\": \"64.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, the value of a target node, and an integer k, return an array of the values of all nodes that are exactly k distance away from the target node. The order of the returned values does not matter.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 500].",
                    "0 <= Node.val <= 500",
                    "All the values Node.val are unique.",
                    "target is the value of one of the nodes in the tree.",
                    "0 <= k <= 1000"
                ],
                "testcases": [
                    {
                        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2",
                        "output": "[7,4,1]",
                        "explanation": "The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1."
                    },
                    {
                        "input": "root = [1], target = 1, k = 3",
                        "output": "[]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "amount-of-time-for-binary-tree-to-be-infected",
                "title": "Amount of Time for Binary Tree to Be Infected",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {\n    vector<int> ans;\n    unordered_map<TreeNode*, int> nodeToDist;  // {node: distance to target}\n\n    getDists(root, target, nodeToDist);\n    dfs(root, k, 0, nodeToDist, ans);\n    return ans;\n  }\n\n private:\n  void getDists(TreeNode* root, TreeNode* target,\n                unordered_map<TreeNode*, int>& nodeToDist) {\n    if (root == nullptr)\n      return;\n    if (root == target) {\n      nodeToDist[root] = 0;\n      return;\n    }\n\n    getDists(root->left, target, nodeToDist);\n    if (const auto it = nodeToDist.find(root->left); it != nodeToDist.cend()) {\n      // The target is in the left subtree\n      nodeToDist[root] = it->second + 1;\n      return;\n    }\n\n    getDists(root->right, target, nodeToDist);\n    if (const auto it = nodeToDist.find(root->right); it != nodeToDist.cend())\n      // The target is in the right subtree\n      nodeToDist[root] = it->second + 1;\n  }\n\n  void dfs(TreeNode* root, int k, int dist,\n           unordered_map<TreeNode*, int>& nodeToDist, vector<int>& ans) {\n    if (root == nullptr)\n      return;\n    if (const auto it = nodeToDist.find(root); it != nodeToDist.cend())\n      dist = it->second;\n    if (dist == k)\n      ans.push_back(root->val);\n\n    dfs(root->left, k, dist + 1, nodeToDist, ans);\n    dfs(root->right, k, dist + 1, nodeToDist, ans);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {\n    List<Integer> ans = new ArrayList<>();\n    Map<TreeNode, Integer> nodeToDist = new HashMap<>(); // {node: distance to target}\n\n    getDists(root, target, nodeToDist);\n    dfs(root, k, 0, nodeToDist, ans);\n\n    return ans;\n  }\n\n  private void getDists(TreeNode root, TreeNode target, Map<TreeNode, Integer> nodeToDist) {\n    if (root == null)\n      return;\n    if (root == target) {\n      nodeToDist.put(root, 0);\n      return;\n    }\n\n    getDists(root.left, target, nodeToDist);\n    if (nodeToDist.containsKey(root.left)) {\n      // The target is in the left subtree\n      nodeToDist.put(root, nodeToDist.get(root.left) + 1);\n      return;\n    }\n\n    getDists(root.right, target, nodeToDist);\n    if (nodeToDist.containsKey(root.right))\n      // The target is in the right subtree\n      nodeToDist.put(root, nodeToDist.get(root.right) + 1);\n  }\n\n  private void dfs(TreeNode root, int k, int dist, Map<TreeNode, Integer> nodeToDist,\n                   List<Integer> ans) {\n    if (root == null)\n      return;\n    if (nodeToDist.containsKey(root))\n      dist = nodeToDist.get(root);\n    if (dist == k)\n      ans.add(root.val);\n\n    dfs(root.left, k, dist + 1, nodeToDist, ans);\n    dfs(root.right, k, dist + 1, nodeToDist, ans);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}