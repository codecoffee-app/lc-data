{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "432",
            "title": "All O`one Data Structure",
            "titleSlug": "all-oone-data-structure",
            "content": "<p>Design a data structure to store the strings&#39; count with the ability to return the strings with minimum and maximum counts.</p>\n\n<p>Implement the <code>AllOne</code> class:</p>\n\n<ul>\n\t<li><code>AllOne()</code> Initializes the object of the data structure.</li>\n\t<li><code>inc(String key)</code> Increments the count of the string <code>key</code> by <code>1</code>. If <code>key</code> does not exist in the data structure, insert it with count <code>1</code>.</li>\n\t<li><code>dec(String key)</code> Decrements the count of the string <code>key</code> by <code>1</code>. If the count of <code>key</code> is <code>0</code> after the decrement, remove it from the data structure. It is guaranteed that <code>key</code> exists in the data structure before the decrement.</li>\n\t<li><code>getMaxKey()</code> Returns one of the keys with the maximal count. If no element exists, return an empty string <code>&quot;&quot;</code>.</li>\n\t<li><code>getMinKey()</code> Returns one of the keys with the minimum count. If no element exists, return an empty string <code>&quot;&quot;</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that each function must run in <code>O(1)</code> average time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;AllOne&quot;, &quot;inc&quot;, &quot;inc&quot;, &quot;getMaxKey&quot;, &quot;getMinKey&quot;, &quot;inc&quot;, &quot;getMaxKey&quot;, &quot;getMinKey&quot;]\n[[], [&quot;hello&quot;], [&quot;hello&quot;], [], [], [&quot;leet&quot;], [], []]\n<strong>Output</strong>\n[null, null, null, &quot;hello&quot;, &quot;hello&quot;, null, &quot;hello&quot;, &quot;leet&quot;]\n\n<strong>Explanation</strong>\nAllOne allOne = new AllOne();\nallOne.inc(&quot;hello&quot;);\nallOne.inc(&quot;hello&quot;);\nallOne.getMaxKey(); // return &quot;hello&quot;\nallOne.getMinKey(); // return &quot;hello&quot;\nallOne.inc(&quot;leet&quot;);\nallOne.getMaxKey(); // return &quot;hello&quot;\nallOne.getMinKey(); // return &quot;leet&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= key.length &lt;= 10</code></li>\n\t<li><code>key</code> consists of lowercase English letters.</li>\n\t<li>It is guaranteed that for each call to <code>dec</code>, <code>key</code> is existing in the data structure.</li>\n\t<li>At most <code>5 * 10<sup>4</sup></code>&nbsp;calls will be made to <code>inc</code>, <code>dec</code>, <code>getMaxKey</code>, and <code>getMinKey</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1502,
            "dislikes": 163,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Doubly-Linked List",
                    "slug": "doubly-linked-list"
                }
            ],
            "stats": "{\"totalAccepted\": \"74.7K\", \"totalSubmission\": \"204.4K\", \"totalAcceptedRaw\": 74702, \"totalSubmissionRaw\": 204388, \"acRate\": \"36.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a data structure, `AllOne`, to efficiently track the counts of strings and retrieve strings with the minimum and maximum counts in O(1) time complexity. Implement the following methods:\n\n*   `AllOne()`: Initializes the data structure.\n*   `inc(String key)`: Increments the count of the string `key` by 1. If `key` is not present, insert it with a count of 1.\n*   `dec(String key)`: Decrements the count of the string `key` by 1. If the count of `key` becomes 0, remove it from the data structure. It is guaranteed that `key` exists before decrementing.\n*   `getMaxKey()`: Returns any string with the maximum count. If no strings are present, return an empty string \"\".\n*   `getMinKey()`: Returns any string with the minimum count. If no strings are present, return an empty string \"\".",
                "constraints": [
                    "1 <= key.length <= 10",
                    "key consists of lowercase English letters.",
                    "It is guaranteed that for each call to `dec`, `key` exists in the data structure.",
                    "At most 5 * 10^4 calls will be made to `inc`, `dec`, `getMaxKey`, and `getMinKey`."
                ],
                "testcases": [
                    {
                        "input": "[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"] \n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]",
                        "output": "[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]",
                        "explanation": "1.  `AllOne()`: Initializes the data structure.\n2.  `inc(\"hello\")`: The count of \"hello\" becomes 1.\n3.  `inc(\"hello\")`: The count of \"hello\" becomes 2.\n4.  `getMaxKey()`: Returns \"hello\" as it has the maximum count (2).\n5.  `getMinKey()`: Returns \"hello\" as it has the minimum count (2).\n6.  `inc(\"leet\")`: The count of \"leet\" becomes 1.\n7.  `getMaxKey()`: Returns \"hello\" as it still has the maximum count (2).\n8.  `getMinKey()`: Returns \"leet\" as it now has the minimum count (1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Doubly-Linked List",
                "slug": "doubly-linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class AllOne {\n public:\n  void inc(string key) {\n    const auto it = keyToIterator.find(key);\n\n    // doesn't find the key\n    if (it == keyToIterator.cend()) {\n      if (l.empty() || l.front().value > 1)\n        l.push_front({1, {key}});\n      else\n        l.front().keys.insert(key);\n      keyToIterator[key] = l.begin();\n      return;\n    }\n\n    const auto lit = it->second;  // List iterator\n    auto nit = next(lit);         // Next iterator\n\n    if (nit == l.end() || nit->value > lit->value + 1)\n      nit = l.insert(nit, {lit->value + 1, {key}});\n    else  // Nit->value == lit->value + 1\n      nit->keys.insert(key);\n    keyToIterator[key] = nit;  // Reset the mapping\n\n    // Remove the key in keys set\n    lit->keys.erase(key);\n    if (lit->keys.empty())\n      l.erase(lit);\n  }\n\n  void dec(string key) {\n    const auto it = keyToIterator.find(key);\n\n    // doens't find the key\n    if (it == keyToIterator.cend())\n      return;\n\n    const auto lit = it->second;  // List iterator\n\n    if (lit->value == 1) {  // No need to find prev iterator in this case\n      keyToIterator.erase(key);\n    } else {\n      auto pit = prev(lit);  // Prev iterator\n\n      if (lit == l.begin() || pit->value < lit->value - 1)\n        pit = l.insert(lit, {lit->value - 1, {key}});\n      else  // Pit->value == lit-value - 1\n        pit->keys.insert(key);\n      keyToIterator[key] = pit;  // Reset the mapping\n    }\n\n    // Remove the key in keys set\n    lit->keys.erase(key);\n    if (lit->keys.empty())\n      l.erase(lit);\n  }\n\n  string getMaxKey() {\n    return l.empty() ? \"\" : *l.back(.cbegin().keys);\n  }\n\n  string getMinKey() {\n    return l.empty() ? \"\" : *l.front(.cbegin().keys);\n  }\n\n private:\n  struct Node {\n    int value;\n    unordered_set<string> keys;\n  };\n\n  list<Node> l;\n  unordered_map<string, list<Node>::iterator> keyToIterator;\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}