{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "797",
            "title": "All Paths From Source to Target",
            "titleSlug": "all-paths-from-source-to-target",
            "content": "<p>Given a directed acyclic graph (<strong>DAG</strong>) of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, find all possible paths from node <code>0</code> to node <code>n - 1</code> and return them in <strong>any order</strong>.</p>\n\n<p>The graph is given as follows: <code>graph[i]</code> is a list of all nodes you can visit from node <code>i</code> (i.e., there is a directed edge from node <code>i</code> to node <code>graph[i][j]</code>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,2],[3],[3],[]]\n<strong>Output:</strong> [[0,1,3],[0,2,3]]\n<strong>Explanation:</strong> There are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg\" style=\"width: 423px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> graph = [[4,3,1],[3,2,4],[3],[4],[]]\n<strong>Output:</strong> [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == graph.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 15</code></li>\n\t<li><code>0 &lt;= graph[i][j] &lt; n</code></li>\n\t<li><code>graph[i][j] != i</code> (i.e., there will be no self-loops).</li>\n\t<li>All the elements of <code>graph[i]</code> are <strong>unique</strong>.</li>\n\t<li>The input graph is <strong>guaranteed</strong> to be a <strong>DAG</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7007,
            "dislikes": 138,
            "similarQuestions": "[{\"title\": \"Number of Ways to Arrive at Destination\", \"titleSlug\": \"number-of-ways-to-arrive-at-destination\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Increasing Paths in a Grid\", \"titleSlug\": \"number-of-increasing-paths-in-a-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"487.3K\", \"totalSubmission\": \"591.3K\", \"totalAcceptedRaw\": 487282, \"totalSubmissionRaw\": 591323, \"acRate\": \"82.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a directed acyclic graph (DAG) of `n` nodes labeled from `0` to `n - 1`, find all possible paths from node `0` to node `n - 1` and return them in any order. The graph is represented as an adjacency list, where `graph[i]` contains a list of nodes reachable from node `i`.",
                "constraints": [
                    "`n == graph.length`",
                    "`2 <= n <= 15`",
                    "`0 <= graph[i][j] < n`",
                    "`graph[i][j] != i` (i.e., there will be no self-loops).",
                    "All the elements of `graph[i]` are unique.",
                    "The input graph is guaranteed to be a DAG."
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[3],[3],[]]",
                        "output": "[[0,1,3],[0,2,3]]",
                        "explanation": "There are two paths from node 0 to node 3: 0 -> 1 -> 3 and 0 -> 2 -> 3."
                    },
                    {
                        "input": "[[4,3,1],[3,2,4],[3],[4],[]]",
                        "output": "[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]",
                        "explanation": "There are multiple paths from node 0 to node 4. The output lists all possible paths."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-ways-to-arrive-at-destination",
                "title": "Number of Ways to Arrive at Destination",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-increasing-paths-in-a-grid",
                "title": "Number of Increasing Paths in a Grid",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ]
    }
}