{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1478",
            "title": "Allocate Mailboxes",
            "titleSlug": "allocate-mailboxes",
            "content": "<p>Given the array <code>houses</code> where <code>houses[i]</code> is the location of the <code>i<sup>th</sup></code> house along a street and an integer <code>k</code>, allocate <code>k</code> mailboxes in the street.</p>\n\n<p>Return <em>the <strong>minimum</strong> total distance between each house and its nearest mailbox</em>.</p>\n\n<p>The test cases are generated so that the answer fits in a 32-bit integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/05/07/sample_11_1816.png\" style=\"width: 454px; height: 154px;\" />\n<pre>\n<strong>Input:</strong> houses = [1,4,8,10,20], k = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Allocate mailboxes in position 3, 9 and 20.\nMinimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/05/07/sample_2_1816.png\" style=\"width: 433px; height: 154px;\" />\n<pre>\n<strong>Input:</strong> houses = [2,3,5,12,18], k = 2\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Allocate mailboxes in position 3 and 14.\nMinimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= houses.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= houses[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>All the integers of <code>houses</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1064,
            "dislikes": 19,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.5K\", \"totalSubmission\": \"40.9K\", \"totalAcceptedRaw\": 22532, \"totalSubmissionRaw\": 40887, \"acRate\": \"55.1%\"}",
            "hints": [
                "If k =1, the minimum distance is obtained allocating the mailbox in the median of the array houses.",
                "Generalize this idea, using dynamic programming allocating k mailboxes."
            ],
            "rephrased": {
                "body": "Given an array `houses` representing the locations of houses along a street, and an integer `k`, representing the number of mailboxes to allocate, determine the minimum total distance between each house and its nearest mailbox.",
                "constraints": [
                    "1 <= k <= houses.length <= 100",
                    "1 <= houses[i] <= 10^4",
                    "All the integers of houses are unique."
                ],
                "testcases": [
                    {
                        "input": "houses = [1,4,8,10,20], k = 3",
                        "output": "5",
                        "explanation": "Allocate mailboxes at positions 3, 9, and 20. The minimum total distance is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5"
                    },
                    {
                        "input": "houses = [2,3,5,12,18], k = 2",
                        "output": "9",
                        "explanation": "Allocate mailboxes at positions 3 and 14. The minimum total distance is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "If k =1, the minimum distance is obtained allocating the mailbox in the median of the array houses.",
            "Generalize this idea, using dynamic programming allocating k mailboxes."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minDistance(vector<int>& houses, int k) {\n    const int n = houses.size();\n    // dp[i][j] := min distance to allocate i mailboxes in houses[j:]\n    dp.resize(k + 1, vector<int>(n, INT_MAX));\n    // cost[i][j] := minCost to allocate mailbox between houses[i] and houses[j]\n    cost.resize(n, vector<int>(n));\n\n    std::ranges::sort(houses);\n\n    for (int i = 0; i < n; ++i)\n      for (int j = i + 1; j < n; ++j) {\n        const int median = houses[(i + j) / 2];\n        for (int x = i; x <= j; ++x)\n          cost[i][j] += abs(houses[x] - median);\n      }\n\n    return minDistance(houses, k, 0);\n  }\n\n private:\n  static constexpr int kMax = 1'000'000;\n  vector<vector<int>> dp;\n  vector<vector<int>> cost;\n\n  int minDistance(const vector<int>& houses, int k, int i) {\n    if (k == 0 && i == houses.size())\n      return 0;\n    if (k == 0 || i == houses.size())\n      return kMax;\n    if (dp[k][i] != INT_MAX)\n      return dp[k][i];\n\n    for (int j = i; j < houses.size(); ++j)\n      dp[k][i] = min(dp[k][i], cost[i][j] + minDistance(houses, k - 1, j + 1));\n\n    return dp[k][i];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minDistance(int[] houses, int k) {\n    final int n = houses.length;\n    // dp[i][j] := min distance to allocate i mailboxes in houses[j:]\n    dp = new int[k + 1][n];\n    Arrays.stream(dp).forEach(A -> Arrays.fill(A, Integer.MAX_VALUE));\n    // cost[i][j] := minCost to allocate mailbox between houses[i] and houses[j]\n    cost = new int[n][n];\n\n    Arrays.sort(houses);\n\n    for (int i = 0; i < n; ++i)\n      for (int j = i + 1; j < n; ++j) {\n        final int median = houses[(i + j) / 2];\n        for (int x = i; x <= j; ++x)\n          cost[i][j] += Math.abs(houses[x] - median);\n      }\n\n    return minDistance(houses, k, 0);\n  }\n\n  private static final int kMax = 1_000_000;\n  private int[][] dp;\n  private int[][] cost;\n\n  private int minDistance(int[] houses, int k, int i) {\n    if (k == 0 && i == houses.length)\n      return 0;\n    if (k == 0 || i == houses.length)\n      return kMax;\n    if (dp[k][i] != Integer.MAX_VALUE)\n      return dp[k][i];\n\n    for (int j = i; j < houses.length; ++j)\n      dp[k][i] = Math.min(dp[k][i], cost[i][j] + minDistance(houses, k - 1, j + 1));\n\n    return dp[k][i];\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}