{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2666",
            "title": "Allow One Function Call",
            "titleSlug": "allow-one-function-call",
            "content": "<p>Given a function <code>fn</code>, return a new function that is identical to the original function except that it ensures&nbsp;<code>fn</code>&nbsp;is&nbsp;called at most once.</p>\n\n<ul>\n\t<li>The first time the returned function is called, it should return the same result as&nbsp;<code>fn</code>.</li>\n\t<li>Every subsequent time it is called, it should return&nbsp;<code>undefined</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> fn = (a,b,c) =&gt; (a + b + c), calls = [[1,2,3],[2,3,6]]\n<strong>Output:</strong> [{&quot;calls&quot;:1,&quot;value&quot;:6}]\n<strong>Explanation:</strong>\nconst onceFn = once(fn);\nonceFn(1, 2, 3); // 6\nonceFn(2, 3, 6); // undefined, fn was not called\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> fn = (a,b,c) =&gt; (a * b * c), calls = [[5,7,4],[2,3,6],[4,6,8]]\n<strong>Output:</strong> [{&quot;calls&quot;:1,&quot;value&quot;:140}]\n<strong>Explanation:</strong>\nconst onceFn = once(fn);\nonceFn(5, 7, 4); // 140\nonceFn(2, 3, 6); // undefined, fn was not called\nonceFn(4, 6, 8); // undefined, fn was not called\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>calls</code> is a valid JSON array</li>\n\t<li><code>1 &lt;= calls.length &lt;= 10</code></li>\n\t<li><code>1 &lt;= calls[i].length &lt;= 100</code></li>\n\t<li><code>2 &lt;= JSON.stringify(calls).length &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 408,
            "dislikes": 34,
            "similarQuestions": "[]",
            "topicTags": [],
            "stats": "{\"totalAccepted\": \"58.1K\", \"totalSubmission\": \"67.5K\", \"totalAcceptedRaw\": 58088, \"totalSubmissionRaw\": 67542, \"acRate\": \"86.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a function `fn`, return a new function that ensures `fn` is called at most once.\n\nThe first time the returned function is called, it should return the same result as `fn`. Every subsequent call should return `undefined`.",
                "constraints": [
                    "calls is a valid JSON array",
                    "1 <= calls.length <= 10",
                    "1 <= calls[i].length <= 100",
                    "2 <= JSON.stringify(calls).length <= 1000"
                ],
                "testcases": [
                    {
                        "input": "fn = (a,b,c) => (a + b + c), calls = [[1,2,3],[2,3,6]]",
                        "output": "[{\"calls\":1,\"value\":6}]",
                        "explanation": "The `once` function is created with the provided function. The first call to the `once` function with arguments (1, 2, 3) executes the provided function, returning 6. Subsequent calls to the `once` function with any arguments return `undefined` because the original function `fn` has already been called once."
                    },
                    {
                        "input": "fn = (a,b,c) => (a * b * c), calls = [[5,7,4],[2,3,6],[4,6,8]]",
                        "output": "[{\"calls\":1,\"value\":140}]",
                        "explanation": "The `once` function is created using a multiplication function. The first call with arguments (5, 7, 4) executes the original function, resulting in 140.  Subsequent calls with (2, 3, 6) and (4, 6, 8) return `undefined` as the initial function has already been invoked."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": []
    }
}