{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1138",
            "title": "Alphabet Board Path",
            "titleSlug": "alphabet-board-path",
            "content": "<p>On an alphabet board, we start at position <code>(0, 0)</code>, corresponding to character&nbsp;<code>board[0][0]</code>.</p>\r\n\r\n<p>Here, <code>board = [&quot;abcde&quot;, &quot;fghij&quot;, &quot;klmno&quot;, &quot;pqrst&quot;, &quot;uvwxy&quot;, &quot;z&quot;]</code>, as shown in the diagram below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/07/28/azboard.png\" style=\"width: 250px; height: 317px;\" /></p>\r\n\r\n<p>We may make the following moves:</p>\r\n\r\n<ul>\r\n\t<li><code>&#39;U&#39;</code> moves our position up one row, if the position exists on the board;</li>\r\n\t<li><code>&#39;D&#39;</code> moves our position down one row, if the position exists on the board;</li>\r\n\t<li><code>&#39;L&#39;</code> moves our position left one column, if the position exists on the board;</li>\r\n\t<li><code>&#39;R&#39;</code> moves our position right one column, if the position exists on the board;</li>\r\n\t<li><code>&#39;!&#39;</code>&nbsp;adds the character <code>board[r][c]</code> at our current position <code>(r, c)</code>&nbsp;to the&nbsp;answer.</li>\r\n</ul>\r\n\r\n<p>(Here, the only positions that exist on the board are positions with letters on them.)</p>\r\n\r\n<p>Return a sequence of moves that makes our answer equal to <code>target</code>&nbsp;in the minimum number of moves.&nbsp; You may return any path that does so.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n<pre><strong>Input:</strong> target = \"leet\"\r\n<strong>Output:</strong> \"DDR!UURRR!!DDD!\"\r\n</pre><p><strong class=\"example\">Example 2:</strong></p>\r\n<pre><strong>Input:</strong> target = \"code\"\r\n<strong>Output:</strong> \"RR!DDRR!UUL!R!\"\r\n</pre>\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= target.length &lt;= 100</code></li>\r\n\t<li><code>target</code> consists only of English lowercase letters.</li>\r\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 873,
            "dislikes": 173,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"49.6K\", \"totalSubmission\": \"95.6K\", \"totalAcceptedRaw\": 49557, \"totalSubmissionRaw\": 95580, \"acRate\": \"51.8%\"}",
            "hints": [
                "Create a hashmap from letter to position on the board.",
                "Now for each letter, try moving there in steps, where at each step you check if it is inside the boundaries of the board."
            ],
            "rephrased": {
                "body": "Imagine an alphabet board arranged as follows:\n\n\nboard = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"]\n\n\nYou start at position (0, 0), corresponding to the character 'a'. You can move Up ('U'), Down ('D'), Left ('L'), or Right ('R') to adjacent letters on the board.  Moving off the board is not allowed.  When you reach the desired letter, add it to your sequence by using '!'.\n\nGiven a target string consisting of lowercase English letters, return the shortest sequence of moves to spell out the target string. You are allowed to return any valid path.",
                "constraints": [
                    "1 <= target.length <= 100",
                    "target consists only of English lowercase letters."
                ],
                "testcases": [
                    {
                        "input": "leet",
                        "output": "DDR!UURRR!!DDD!",
                        "explanation": null
                    },
                    {
                        "input": "code",
                        "output": "RR!DDRR!UUL!R!",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Create a hashmap from letter to position on the board.",
            "Now for each letter, try moving there in steps, where at each step you check if it is inside the boundaries of the board."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ]
    }
}