{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3028",
            "title": "Ant on the Boundary",
            "titleSlug": "ant-on-the-boundary",
            "content": "<p>An ant is on a boundary. It sometimes goes <strong>left</strong> and sometimes <strong>right</strong>.</p>\n\n<p>You are given an array of <strong>non-zero</strong> integers <code>nums</code>. The ant starts reading <code>nums</code> from the first element of it to its end. At each step, it moves according to the value of the current element:</p>\n\n<ul>\n\t<li>If <code>nums[i] &lt; 0</code>, it moves <strong>left</strong> by<!-- notionvc: 55fee232-4fc9-445f-952a-f1b979415864 --> <code>-nums[i]</code> units.</li>\n\t<li>If <code>nums[i] &gt; 0</code>, it moves <strong>right</strong> by <code>nums[i]</code> units.</li>\n</ul>\n\n<p>Return <em>the number of times the ant <strong>returns</strong> to the boundary.</em></p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>There is an infinite space on both sides of the boundary.</li>\n\t<li>We check whether the ant is on the boundary only after it has moved <code>|nums[i]|</code> units. In other words, if the ant crosses the boundary during its movement, it does not count.<!-- notionvc: 5ff95338-8634-4d02-a085-1e83c0be6fcd --></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,-5]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> After the first step, the ant is 2 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the second step, the ant is 5 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the third step, the ant is on the boundary.\nSo the answer is 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,-3,-4]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> After the first step, the ant is 3 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the second step, the ant is 5 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the third step, the ant is 2 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the fourth step, the ant is 2 steps to the left of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nThe ant never returned to the boundary, so the answer is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li><code>nums[i] != 0</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 89,
            "dislikes": 33,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"43.8K\", \"totalSubmission\": \"58.6K\", \"totalAcceptedRaw\": 43834, \"totalSubmissionRaw\": 58588, \"acRate\": \"74.8%\"}",
            "hints": [
                "Define a variable and add <code>nums[i]</code> to it in each step."
            ],
            "rephrased": {
                "body": "An ant starts at a boundary and moves left or right based on an array of non-zero integers `nums`.  If `nums[i]` is negative, the ant moves left by `-nums[i]` units. If `nums[i]` is positive, the ant moves right by `nums[i]` units. The ant moves according to each element in `nums` sequentially.\n\nDetermine the number of times the ant returns to the starting boundary after each move is completed. Note that we only check if the ant is at the boundary *after* it has moved the full `|nums[i]|` units.",
                "constraints": [
                    "1 <= nums.length <= 100",
                    "-10 <= nums[i] <= 10",
                    "nums[i] != 0"
                ],
                "testcases": [
                    {
                        "input": "[2,3,-5]",
                        "output": "1",
                        "explanation": "The ant moves 2 units right, then 3 units right (total 5), then 5 units left. It returns to the starting boundary after the third move."
                    },
                    {
                        "input": "[3,2,-3,-4]",
                        "output": "0",
                        "explanation": "The ant moves 3 units right, then 2 units right (total 5), then 3 units left (total 2), then 4 units left (total -2). It never returns to the starting boundary."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Define a variable and add <code>nums[i]</code> to it in each step."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int returnToBoundaryCount(vector<int>& nums) {\n    partial_sum(nums.begin(), nums.end(), nums.begin());\n    return ranges::count(nums, 0);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int returnToBoundaryCount(int[] nums) {\n    int ans = 0;\n    int prefix = 0;\n\n    for (final int num : nums) {\n      prefix += num;\n      if (prefix == 0)\n        ++ans;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def returnToBoundaryCount(self, nums: List[int]) -> int:\n    return sum(prefix == 0 for prefix in itertools.accumulate(nums))\n",
                "lang_text": "py"
            }
        }
    }
}