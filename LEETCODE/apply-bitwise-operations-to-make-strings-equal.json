{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2546",
            "title": "Apply Bitwise Operations to Make Strings Equal",
            "titleSlug": "apply-bitwise-operations-to-make-strings-equal",
            "content": "<p>You are given two <strong>0-indexed binary</strong> strings <code>s</code> and <code>target</code> of the same length <code>n</code>. You can do the following operation on <code>s</code> <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose two <strong>different</strong> indices <code>i</code> and <code>j</code> where <code>0 &lt;= i, j &lt; n</code>.</li>\n\t<li>Simultaneously, replace <code>s[i]</code> with (<code>s[i]</code> <strong>OR</strong> <code>s[j]</code>) and <code>s[j]</code> with (<code>s[i]</code> <strong>XOR</strong> <code>s[j]</code>).</li>\n</ul>\n\n<p>For example, if <code>s = &quot;0110&quot;</code>, you can choose <code>i = 0</code> and <code>j = 2</code>, then simultaneously replace <code>s[0]</code> with (<code>s[0]</code> <strong>OR</strong> <code>s[2]</code> = <code>0</code> <strong>OR</strong> <code>1</code> = <code>1</code>), and <code>s[2]</code> with (<code>s[0]</code> <strong>XOR</strong> <code>s[2]</code> = <code>0</code> <strong>XOR</strong> <code>1</code> = <code>1</code>), so we will have <code>s = &quot;1110&quot;</code>.</p>\n\n<p>Return <code>true</code> <em>if you can make the string </em><code>s</code><em> equal to </em><code>target</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1010&quot;, target = &quot;0110&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can do the following operations:\n- Choose i = 2 and j = 0. We have now s = &quot;<strong><u>0</u></strong>0<strong><u>1</u></strong>0&quot;.\n- Choose i = 2 and j = 1. We have now s = &quot;0<strong><u>11</u></strong>0&quot;.\nSince we can make s equal to target, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;11&quot;, target = &quot;00&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is not possible to make s equal to target with any number of operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == s.length == target.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>target</code> consist of only the digits <code>0</code> and <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 238,
            "dislikes": 97,
            "similarQuestions": "[{\"title\": \"Minimum One Bit Operations to Make Integers Zero\", \"titleSlug\": \"minimum-one-bit-operations-to-make-integers-zero\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"17.7K\", \"totalSubmission\": \"43.5K\", \"totalAcceptedRaw\": 17710, \"totalSubmissionRaw\": 43540, \"acRate\": \"40.7%\"}",
            "hints": [
                "Think of when it is impossible to convert the string to the target.",
                "If exactly one of the strings is having all 0\u2019s, then it is impossible. And it is possible in all other cases. Why is that true?"
            ],
            "rephrased": {
                "body": "Given two 0-indexed binary strings `s` and `target` of the same length `n`, determine if it's possible to transform `s` into `target` using a series of operations. In each operation, you can choose two distinct indices `i` and `j` (0 <= i, j < n) and simultaneously update `s[i]` with `s[i] OR s[j]` and `s[j]` with `s[i] XOR s[j]`. Return `true` if it's possible to make `s` equal to `target`, and `false` otherwise.",
                "constraints": [
                    "n == s.length == target.length",
                    "2 <= n <= 10^5",
                    "s and target consist of only the digits 0 and 1"
                ],
                "testcases": [
                    {
                        "input": "s = \"1010\", target = \"0110\"",
                        "output": "true",
                        "explanation": "It is possible to transform \"1010\" to \"0110\" using the allowed operations. The operations are:\n- Choose i = 2 and j = 0. We have now s = \"0010\".\n- Choose i = 2 and j = 1. We have now s = \"0110\"."
                    },
                    {
                        "input": "s = \"11\", target = \"00\"",
                        "output": "false",
                        "explanation": "It is not possible to transform \"11\" to \"00\" using any number of the allowed operations."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-one-bit-operations-to-make-integers-zero",
                "title": "Minimum One Bit Operations to Make Integers Zero",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think of when it is impossible to convert the string to the target.",
            "If exactly one of the strings is having all 0\u2019s, then it is impossible. And it is possible in all other cases. Why is that true?"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool makeStringsEqual(string s, string target) {\n    return (s.find('1') != string::npos) == (target.find('1') != string::npos);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean makeStringsEqual(String s, String target) {\n    return s.contains(\"1\") == target.contains(\"1\");\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def makeStringsEqual(self, s: str, target: str) -> bool:\n    return ('1' in s) == ('1' in target)\n",
                "lang_text": "py"
            }
        }
    }
}