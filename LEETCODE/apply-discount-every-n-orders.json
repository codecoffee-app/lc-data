{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1357",
            "title": "Apply Discount Every n Orders",
            "titleSlug": "apply-discount-every-n-orders",
            "content": "<p>There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays <code>products</code> and <code>prices</code>, where the <code>i<sup>th</sup></code> product has an ID of <code>products[i]</code> and a price of <code>prices[i]</code>.</p>\n\n<p>When a customer is paying, their bill is represented as two parallel integer arrays <code>product</code> and <code>amount</code>, where the <code>j<sup>th</sup></code> product they purchased has an ID of <code>product[j]</code>, and <code>amount[j]</code> is how much of the product they bought. Their subtotal is calculated as the sum of each <code>amount[j] * (price of the j<sup>th</sup> product)</code>.</p>\n\n<p>The supermarket decided to have a sale. Every <code>n<sup>th</sup></code> customer paying for their groceries will be given a <strong>percentage discount</strong>. The discount amount is given by <code>discount</code>, where they will be given <code>discount</code> percent off their subtotal. More formally, if their subtotal is <code>bill</code>, then they would actually pay <code>bill * ((100 - discount) / 100)</code>.</p>\n\n<p>Implement the <code>Cashier</code> class:</p>\n\n<ul>\n\t<li><code>Cashier(int n, int discount, int[] products, int[] prices)</code> Initializes the object with <code>n</code>, the <code>discount</code>, and the <code>products</code> and their <code>prices</code>.</li>\n\t<li><code>double getBill(int[] product, int[] amount)</code> Returns the final total of the bill with the discount applied (if any). Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Cashier&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\n<strong>Output</strong>\n[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\n<strong>Explanation</strong>\nCashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);                        // return 500.0. 1<sup>st</sup> customer, no discount.\n                                                     // bill = 1 * 100 + 2 * 200 = 500.\ncashier.getBill([3,7],[10,10]);                      // return 4000.0. 2<sup>nd</sup> customer, no discount.\n                                                     // bill = 10 * 300 + 10 * 100 = 4000.\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0. 3<sup>rd</sup> customer, 50% discount.\n                                                     // Original bill = 1600\n                                                     // Actual bill = 1600 * ((100 - 50) / 100) = 800.\ncashier.getBill([4],[10]);                           // return 4000.0. 4<sup>th</sup> customer, no discount.\ncashier.getBill([7,3],[10,10]);                      // return 4000.0. 5<sup>th</sup> customer, no discount.\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0. 6<sup>th</sup> customer, 50% discount.\n                                                     // Original bill = 14700, but with\n                                                     // Actual bill = 14700 * ((100 - 50) / 100) = 7350.\ncashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0.  7<sup>th</sup> customer, no discount.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= discount &lt;= 100</code></li>\n\t<li><code>1 &lt;= products.length &lt;= 200</code></li>\n\t<li><code>prices.length == products.length</code></li>\n\t<li><code>1 &lt;= products[i] &lt;= 200</code></li>\n\t<li><code>1 &lt;= prices[i] &lt;= 1000</code></li>\n\t<li>The elements in <code>products</code> are <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= product.length &lt;= products.length</code></li>\n\t<li><code>amount.length == product.length</code></li>\n\t<li><code>product[j]</code> exists in <code>products</code>.</li>\n\t<li><code>1 &lt;= amount[j] &lt;= 1000</code></li>\n\t<li>The elements of <code>product</code> are <strong>unique</strong>.</li>\n\t<li>At most <code>1000</code> calls will be made to <code>getBill</code>.</li>\n\t<li>Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 178,
            "dislikes": 221,
            "similarQuestions": "[{\"title\": \"Apply Discount to Prices\", \"titleSlug\": \"apply-discount-to-prices\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Design",
                    "slug": "design"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.6K\", \"totalSubmission\": \"29K\", \"totalAcceptedRaw\": 20569, \"totalSubmissionRaw\": 29007, \"acRate\": \"70.9%\"}",
            "hints": [
                "Keep track of the count of the customers.",
                "Check if the count of the customers is divisible by n then apply the discount formula."
            ],
            "rephrased": {
                "body": "A supermarket tracks product IDs and prices.  Customers purchase products with specific quantities.  Every *n*th customer receives a percentage discount. Calculate the final bill amount, applying the discount when applicable.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "0 <= discount <= 100",
                    "1 <= products.length <= 200",
                    "prices.length == products.length",
                    "1 <= products[i] <= 200",
                    "1 <= prices[i] <= 1000",
                    "The elements in products are unique.",
                    "1 <= product.length <= products.length",
                    "amount.length == product.length",
                    "product[j] exists in products.",
                    "1 <= amount[j] <= 1000",
                    "The elements of product are unique.",
                    "At most 1000 calls will be made to getBill.",
                    "Answers within 10^-5 of the actual value will be accepted."
                ],
                "testcases": [
                    {
                        "input": "[&quot;Cashier&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]",
                        "output": "[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]",
                        "explanation": "Initializes a Cashier object with n=3, discount=50%, products=[1,2,3,4,5,6,7], prices=[100,200,300,400,300,200,100].\n\nCustomer 1: Buys product 1 (amount 1) and product 2 (amount 2). Bill: 1*100 + 2*200 = 500. No discount.\n\nCustomer 2: Buys product 3 (amount 10) and product 7 (amount 10). Bill: 10*300 + 10*100 = 4000. No discount.\n\nCustomer 3: Buys products 1 to 7 (amount 1 each). Bill: 1*100 + 1*200 + 1*300 + 1*400 + 1*300 + 1*200 + 1*100 = 1600. 50% discount. Final bill: 1600 * (100-50)/100 = 800.\n\nCustomer 4: Buys product 4 (amount 10). Bill: 10 * 400 = 4000. No discount.\n\nCustomer 5: Buys product 7 (amount 10) and product 3 (amount 10). Bill: 10*100 + 10*300 = 4000. No discount.\n\nCustomer 6: Buys products 7, 5, 3, 1, 6, 4, 2 with amounts 10, 10, 10, 9, 9, 9, 7 respectively. Bill: 10*100 + 10*300 + 10*300 + 9*100 + 9*200 + 9*400 + 7*200 = 14700. 50% discount. Final bill: 14700 * (100-50)/100 = 7350.\n\nCustomer 7: Buys products 2, 3, and 5 with amounts 5, 3, and 2 respectively. Bill: 5*200 + 3*300 + 2*300 = 2500. No discount."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "apply-discount-to-prices",
                "title": "Apply Discount to Prices",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Keep track of the count of the customers.",
            "Check if the count of the customers is divisible by n then apply the discount formula."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Design",
                "slug": "design"
            }
        ]
    }
}