{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2897",
            "title": "Apply Operations on Array to Maximize Sum of Squares",
            "titleSlug": "apply-operations-on-array-to-maximize-sum-of-squares",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>You can do the following operation on the array <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose any two distinct indices <code>i</code> and <code>j</code> and <strong>simultaneously</strong> update the values of <code>nums[i]</code> to <code>(nums[i] AND nums[j])</code> and <code>nums[j]</code> to <code>(nums[i] OR nums[j])</code>. Here, <code>OR</code> denotes the bitwise <code>OR</code> operation, and <code>AND</code> denotes the bitwise <code>AND</code> operation.</li>\n</ul>\n\n<p>You have to choose <code>k</code> elements from the final array and calculate the sum of their <strong>squares</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> sum of squares you can achieve</em>.</p>\n\n<p>Since the answer can be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,6,5,8], k = 2\n<strong>Output:</strong> 261\n<strong>Explanation:</strong> We can do the following operations on the array:\n- Choose i = 0 and j = 3, then change nums[0] to (2 AND 8) = 0 and nums[3] to (2 OR 8) = 10. The resulting array is nums = [0,6,5,10].\n- Choose i = 2 and j = 3, then change nums[2] to (5 AND 10) = 0 and nums[3] to (5 OR 10) = 15. The resulting array is nums = [0,6,0,15].\nWe can choose the elements 15 and 6 from the final array. The sum of squares is 15<sup>2</sup> + 6<sup>2</sup> = 261.\nIt can be shown that this is the maximum value we can get.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,5,4,7], k = 3\n<strong>Output:</strong> 90\n<strong>Explanation:</strong> We do not need to apply any operations.\nWe can choose the elements 7, 5, and 4 with a sum of squares: 7<sup>2</sup> + 5<sup>2</sup> + 4<sup>2</sup> = 90.\nIt can be shown that this is the maximum value we can get.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 178,
            "dislikes": 4,
            "similarQuestions": "[{\"title\": \"Minimize OR of Remaining Elements Using Operations\", \"titleSlug\": \"minimize-or-of-remaining-elements-using-operations\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.6K\", \"totalSubmission\": \"14.1K\", \"totalAcceptedRaw\": 6643, \"totalSubmissionRaw\": 14087, \"acRate\": \"47.2%\"}",
            "hints": [
                "The operation described only transfers some bits from one element to another in their binary representation.",
                "To have a maximum sum of squares, it is optimal to greedily make each number as big as possible."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` and a positive integer `k`, you can perform a specific operation any number of times. This operation involves choosing two distinct indices `i` and `j` and simultaneously updating `nums[i]` to `(nums[i] AND nums[j])` and `nums[j]` to `(nums[i] OR nums[j])`, where `OR` and `AND` are bitwise operations.  The goal is to select `k` elements from the final array and maximize the sum of their squares.  Return the maximum possible sum of squares modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= k <= nums.length <= 10<sup>5</sup>",
                    "1 <= nums[i] <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,6,5,8], k = 2",
                        "output": "261",
                        "explanation": "After performing several operations, the array can be transformed to [0, 6, 0, 15]. Choosing 15 and 6 gives the maximum sum of squares: 15<sup>2</sup> + 6<sup>2</sup> = 225 + 36 = 261."
                    },
                    {
                        "input": "nums = [4,5,4,7], k = 3",
                        "output": "90",
                        "explanation": "No operations are necessary. Choosing 7, 5, and 4 directly yields the maximum sum of squares: 7<sup>2</sup> + 5<sup>2</sup> + 4<sup>2</sup> = 49 + 25 + 16 = 90."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimize-or-of-remaining-elements-using-operations",
                "title": "Minimize OR of Remaining Elements Using Operations",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The operation described only transfers some bits from one element to another in their binary representation.",
            "To have a maximum sum of squares, it is optimal to greedily make each number as big as possible."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxSum(vector<int>& nums, int k) {\n    constexpr int kMod = 1'000'000'007;\n    constexpr int kMaxBit = 30;\n    int ans = 0;\n    // minIndices[i] := min index optimalNums that i-th bit should be moved to\n    vector<int> minIndices(kMaxBit);\n    vector<int> optimalNums(nums.size());\n\n    for (const int num : nums)\n      for (int i = 0; i < kMaxBit; ++i)\n        if (num >> i & 1)\n          optimalNums[minIndices[i]++] |= 1 << i;\n\n    for (int i = 0; i < k; ++i)\n      ans = (ans + static_cast<long>(optimalNums[i]) * optimalNums[i]) % kMod;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxSum(List<Integer> nums, int k) {\n    final int kMod = 1_000_000_007;\n    final int kMaxBit = 30;\n    int ans = 0;\n    // minIndices[i] := min index optimalNums that i-th bit should be moved to\n    int[] minIndices = new int[kMaxBit];\n    int[] optimalNums = new int[nums.size()];\n\n    for (final int num : nums)\n      for (int i = 0; i < kMaxBit; i++)\n        if ((num >> i & 1) == 1)\n          optimalNums[minIndices[i]++] |= 1 << i;\n\n    for (int i = 0; i < k; i++)\n      ans = (int) (((long) ans + (long) optimalNums[i] * optimalNums[i]) % kMod);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSum(self, nums: List[int], k: int) -> int:\n    kMod = 1_000_000_007\n    kMaxBit = 30\n    ans = 0\n    # minIndices[i] := min index optimalNums that i-th bit should be moved to\n    minIndices = [0] * kMaxBit\n    optimalNums = [0] * len(nums)\n\n    for num in nums:\n      for i in range(kMaxBit):\n        if num >> i & 1:\n          optimalNums[minIndices[i]] |= 1 << i\n          minIndices[i] += 1\n\n    for i in range(k):\n      ans += optimalNums[i]**2\n      ans %= kMod\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}