{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2772",
            "title": "Apply Operations to Make All Array Elements Equal to Zero",
            "titleSlug": "apply-operations-to-make-all-array-elements-equal-to-zero",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and a positive integer <code>k</code>.</p>\n\n<p>You can apply the following operation on the array <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose <strong>any</strong> subarray of size <code>k</code> from the array and <strong>decrease</strong> all its elements by <code>1</code>.</li>\n</ul>\n\n<p>Return <code>true</code><em> if you can make all the array elements equal to </em><code>0</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous non-empty part of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,3,1,1,0], k = 3\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can do the following operations:\n- Choose the subarray [2,2,3]. The resulting array will be nums = [<strong><u>1</u></strong>,<strong><u>1</u></strong>,<strong><u>2</u></strong>,1,1,0].\n- Choose the subarray [2,1,1]. The resulting array will be nums = [1,1,<strong><u>1</u></strong>,<strong><u>0</u></strong>,<strong><u>0</u></strong>,0].\n- Choose the subarray [1,1,1]. The resulting array will be nums = [<u><strong>0</strong></u>,<u><strong>0</strong></u>,<u><strong>0</strong></u>,0,0,0].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,1,1], k = 2\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is not possible to make all the array elements equal to 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 376,
            "dislikes": 22,
            "similarQuestions": "[{\"title\": \"Continuous Subarray Sum\", \"titleSlug\": \"continuous-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold\", \"titleSlug\": \"number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.4K\", \"totalSubmission\": \"37.7K\", \"totalAcceptedRaw\": 12391, \"totalSubmissionRaw\": 37688, \"acRate\": \"32.9%\"}",
            "hints": [
                "In case it is possible, then how can you do the operations? which subarrays do you choose and in what order?",
                "The order of the chosen subarrays should be from the left to the right of the array"
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` and a positive integer `k`, determine if it's possible to make all elements of the array equal to 0. You can perform the following operation any number of times: Choose any subarray of size `k` from the array and decrease all its elements by 1.",
                "constraints": [
                    "1 <= k <= nums.length <= 10^5",
                    "0 <= nums[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,2,3,1,1,0], k = 3",
                        "output": "true",
                        "explanation": "It is possible to make all elements 0. One possible sequence of operations: reduce [2, 2, 3] to [1, 1, 2], then reduce [2, 1, 1] to [1, 1, 1, 0, 0, 0], and finally reduce [1, 1, 1] to [0, 0, 0, 0, 0, 0]."
                    },
                    {
                        "input": "nums = [1,3,1,1], k = 2",
                        "output": "false",
                        "explanation": "It is not possible to make all elements equal to 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "continuous-subarray-sum",
                "title": "Continuous Subarray Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
                "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "In case it is possible, then how can you do the operations? which subarrays do you choose and in what order?",
            "The order of the chosen subarrays should be from the left to the right of the array"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool checkArray(vector<int>& nums, int k) {\n    if (k == 1)\n      return true;\n\n    int needDecrease = 0;\n    // Store nums[i - k + 1..i] with decreasing nums[i - k + 1].\n    deque<int> dq;\n\n    for (int i = 0; i < nums.size(); ++i) {\n      if (i >= k) {\n        needDecrease -= dq.front();\n        dq.pop_front();\n      }\n      if (nums[i] < needDecrease)\n        return false;\n      const int decreasedNum = nums[i] - needDecrease;\n      dq.push_back(decreasedNum);\n      needDecrease += decreasedNum;\n    }\n\n    return dq.back() == 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean checkArray(int[] nums, int k) {\n    if (k == 1)\n      return true;\n\n    int needDecrease = 0;\n    // Store nums[i - k + 1..i] with decreasing nums[i - k + 1].\n    Deque<Integer> dq = new ArrayDeque<>();\n\n    for (int i = 0; i < nums.length; ++i) {\n      if (i >= k)\n        needDecrease -= dq.pollFirst();\n      if (nums[i] < needDecrease)\n        return false;\n      final int decreasedNum = nums[i] - needDecrease;\n      dq.offerLast(decreasedNum);\n      needDecrease += decreasedNum;\n    }\n\n    return dq.getLast() == 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def checkArray(self, nums: List[int], k: int) -> bool:\n    if k == 1:\n      return True\n\n    needDecrease = 0\n    # Store nums[i - k + 1..i] with decreasing nums[i - k + 1].\n    dq = collections.deque()\n\n    for i, num in enumerate(nums):\n      if i >= k:\n        needDecrease -= dq.popleft()\n      if nums[i] < needDecrease:\n        return False\n      decreasedNum = nums[i] - needDecrease\n      dq.append(decreasedNum)\n      needDecrease += decreasedNum\n\n    return dq[-1] == 0\n",
                "lang_text": "py"
            }
        }
    }
}