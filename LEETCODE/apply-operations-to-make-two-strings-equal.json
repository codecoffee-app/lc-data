{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2896",
            "title": "Apply Operations to Make Two Strings Equal",
            "titleSlug": "apply-operations-to-make-two-strings-equal",
            "content": "<p>You are given two <strong>0-indexed</strong> binary strings <code>s1</code> and <code>s2</code>, both of length <code>n</code>, and a positive integer <code>x</code>.</p>\n\n<p>You can perform any of the following operations on the string <code>s1</code> <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose two indices <code>i</code> and <code>j</code>, and flip both <code>s1[i]</code> and <code>s1[j]</code>. The cost of this operation is <code>x</code>.</li>\n\t<li>Choose an index <code>i</code> such that <code>i &lt; n - 1</code> and flip both <code>s1[i]</code> and <code>s1[i + 1]</code>. The cost of this operation is <code>1</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> cost needed to make the strings </em><code>s1</code><em> and </em><code>s2</code><em> equal, or return </em><code>-1</code><em> if it is impossible.</em></p>\n\n<p><strong>Note</strong> that flipping a character means changing it from <code>0</code> to <code>1</code> or vice-versa.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;1100011000&quot;, s2 = &quot;0101001010&quot;, x = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We can do the following operations:\n- Choose i = 3 and apply the second operation. The resulting string is s1 = &quot;110<u><strong>11</strong></u>11000&quot;.\n- Choose i = 4 and apply the second operation. The resulting string is s1 = &quot;1101<strong><u>00</u></strong>1000&quot;.\n- Choose i = 0 and j = 8 and apply the first operation. The resulting string is s1 = &quot;<u><strong>0</strong></u>1010010<u><strong>1</strong></u>0&quot; = s2.\nThe total cost is 1 + 1 + 2 = 4. It can be shown that it is the minimum cost possible.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;10110&quot;, s2 = &quot;00011&quot;, x = 4\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is not possible to make the two strings equal.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == s1.length == s2.length</code></li>\n\t<li><code>1 &lt;= n, x &lt;= 500</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist only of the characters <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 341,
            "dislikes": 67,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.1K\", \"totalSubmission\": \"45.5K\", \"totalAcceptedRaw\": 12140, \"totalSubmissionRaw\": 45520, \"acRate\": \"26.7%\"}",
            "hints": [
                "Save all the indices that have different characters on <code>s1</code> and <code>s2</code> into a list, and work only with this list.",
                "Try to use dynamic programming on this list to solve the problem. What will be the states and transitions of this dp?"
            ],
            "rephrased": {
                "body": "Given two 0-indexed binary strings, `s1` and `s2`, of length `n`, and a positive integer `x`. You can perform the following operations on `s1` any number of times:\n\n1.  Flip two bits at indices `i` and `j` in `s1`. The cost is `x`.\n2.  Flip two adjacent bits at indices `i` and `i + 1` in `s1` (where `i < n - 1`). The cost is `1`.\n\nDetermine the minimum cost to make `s1` equal to `s2`. If it's impossible, return `-1`.",
                "constraints": [
                    "`n == s1.length == s2.length`",
                    "`1 <= n, x <= 500`",
                    "`s1` and `s2` consist only of the characters `'0'` and `'1'`."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"1100011000\", s2 = \"0101001010\", x = 2",
                        "output": "4",
                        "explanation": "One optimal solution is to flip s1[3] and s1[4] at cost 1, then s1[0] and s1[8] at cost x=2. The total cost is 1 + 1+2 = 4."
                    },
                    {
                        "input": "s1 = \"10110\", s2 = \"00011\", x = 4",
                        "output": "-1",
                        "explanation": "It is not possible to make the two strings equal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Save all the indices that have different characters on <code>s1</code> and <code>s2</code> into a list, and work only with this list.",
            "Try to use dynamic programming on this list to solve the problem. What will be the states and transitions of this dp?"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(string s1, string s2, int x) {\n    const vector<int> diffIndices = getDiffIndices(s1, s2);\n    if (diffIndices.empty())\n      return 0;\n    // It's impossible to make two strings equal if there are an odd number of\n    // differences.\n    if (diffIndices.size() % 2 == 1)\n      return -1;\n    dp.resize(diffIndices.size(), -1.0);\n    return minOperations(diffIndices, 0, x);\n  }\n\n private:\n  vector<double> dp;\n\n  double minOperations(const vector<int>& diffIndices, int i, double x) {\n    if (i == diffIndices.size())\n      return 0;\n    if (i == diffIndices.size() - 1)\n      return x / 2;\n    if (dp[i] != -1.0)\n      return dp[i];\n    return dp[i] = min(minOperations(diffIndices, i + 1, x) + x / 2,\n                       minOperations(diffIndices, i + 2, x) +\n                           diffIndices[i + 1] - diffIndices[i]);\n  }\n\n  vector<int> getDiffIndices(const string& s1, const string& s2) {\n    vector<int> diffIndices;\n    for (int i = 0; i < s1.length(); ++i)\n      if (s1[i] != s2[i])\n        diffIndices.push_back(i);\n    return diffIndices;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(String s1, String s2, int x) {\n    List<Integer> diffIndices = getDiffIndices(s1, s2);\n    if (diffIndices.isEmpty())\n      return 0;\n    // It's impossible to make two strings equal if there are odd number of\n    // differences.\n    if (diffIndices.size() % 2 == 1)\n      return -1;\n    dp = new Double[diffIndices.size()];\n    return (int) minOperations(diffIndices, 0, x);\n  }\n\n  private Double[] dp;\n\n  private double minOperations(List<Integer> diffIndices, int i, double x) {\n    if (i == diffIndices.size())\n      return 0;\n    if (i == diffIndices.size() - 1)\n      return x / 2;\n    if (dp[i] != null)\n      return dp[i];\n    return dp[i] = Math.min(minOperations(diffIndices, i + 1, x) + x / 2,\n                            minOperations(diffIndices, i + 2, x) + diffIndices.get(i + 1) -\n                                diffIndices.get(i));\n  }\n\n  private List<Integer> getDiffIndices(final String s1, final String s2) {\n    List<Integer> diffIndices = new ArrayList<>();\n    for (int i = 0; i < s1.length(); ++i)\n      if (s1.charAt(i) != s2.charAt(i))\n        diffIndices.add(i);\n    return diffIndices;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, s1: str, s2: str, x: int) -> int:\n    diffIndices = [i for i, (a, b) in enumerate(zip(s1, s2))\n                   if a != b]\n    if not diffIndices:\n      return 0\n    # It's impossible to make two strings equal if there are odd number of\n    # differences.\n    if len(diffIndices) & 1:\n      return -1\n\n    # dp(i) := min cost to correct diffIndices[i:]\n    @functools.lru_cache(None)\n    def dp(i: int) -> int:\n      if i == len(diffIndices):\n        return 0\n      if i == len(diffIndices) - 1:\n        return x / 2\n      return min(dp(i + 1) + x / 2,\n                 dp(i + 2) + diffIndices[i + 1] - diffIndices[i])\n\n    return int(dp(0))\n",
                "lang_text": "py"
            }
        }
    }
}