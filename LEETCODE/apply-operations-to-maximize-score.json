{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2818",
            "title": "Apply Operations to Maximize Score",
            "titleSlug": "apply-operations-to-maximize-score",
            "content": "<p>You are given an array <code>nums</code> of <code>n</code> positive integers and an integer <code>k</code>.</p>\n\n<p>Initially, you start with a score of <code>1</code>. You have to maximize your score by applying the following operation at most <code>k</code> times:</p>\n\n<ul>\n\t<li>Choose any <strong>non-empty</strong> subarray <code>nums[l, ..., r]</code> that you haven&#39;t chosen previously.</li>\n\t<li>Choose an element <code>x</code> of <code>nums[l, ..., r]</code> with the highest <strong>prime score</strong>. If multiple such elements exist, choose the one with the smallest index.</li>\n\t<li>Multiply your score by <code>x</code>.</li>\n</ul>\n\n<p>Here, <code>nums[l, ..., r]</code> denotes the subarray of <code>nums</code> starting at index <code>l</code> and ending at the index <code>r</code>, both ends being inclusive.</p>\n\n<p>The <strong>prime score</strong> of an integer <code>x</code> is equal to the number of distinct prime factors of <code>x</code>. For example, the prime score of <code>300</code> is <code>3</code> since <code>300 = 2 * 2 * 3 * 5 * 5</code>.</p>\n\n<p>Return <em>the <strong>maximum possible score</strong> after applying at most </em><code>k</code><em> operations</em>.</p>\n\n<p>Since the answer may be large, return it modulo <code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [8,3,9,3,8], k = 2\n<strong>Output:</strong> 81\n<strong>Explanation:</strong> To get a score of 81, we can apply the following operations:\n- Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.\nIt can be proven that 81 is the highest score one can obtain.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [19,12,14,6,10,18], k = 3\n<strong>Output:</strong> 4788\n<strong>Explanation:</strong> To get a score of 4788, we can apply the following operations: \n- Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.\n- Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.\nIt can be proven that 4788 is the highest score one can obtain.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length == n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= min(n * (n + 1) / 2, 10<sup>9</sup>)</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 322,
            "dislikes": 10,
            "similarQuestions": "[{\"title\": \"Next Greater Element IV\", \"titleSlug\": \"next-greater-element-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.7K\", \"totalSubmission\": \"20.4K\", \"totalAcceptedRaw\": 6671, \"totalSubmissionRaw\": 20358, \"acRate\": \"32.8%\"}",
            "hints": [
                "<div class=\"_1l1MA\">Calculate <code>nums[i]</code>'s prime score <code>s[i]</code>\u00a0by factoring in <code>O(sqrt(nums[i]))</code> time.</div>",
                "<div class=\"_1l1MA\">For each <code>nums[i]</code>, find the nearest index <code>left[i]</code> on the left (if any) such that <code>s[left[i]] >= s[i]</code>.\u00a0if none is\u00a0found,\u00a0set <code>left[i]</code> to <code>-1</code>. Similarly, find the nearest index <code>right[i]</code> on the right (if any) such that <code>s[right[i]] > s[i]</code>. If none is found, set <code>right[i]</code> to <code>n</code>.</div>",
                "<div class=\"_1l1MA\">Use a monotonic stack to compute <code>right[i]</code> and <code>left[i]</code>.</div>",
                "<div class=\"_1l1MA\">For each index <code>i</code>, if <code>left[i] + 1 <= l\u00a0<= i <= r\u00a0<= right[i] - 1</code>, then <code>s[i]</code> is the maximum value in the range <code>[l, r]</code>. For this particular <code>i</code>, there are\u00a0<code>ranges[i] =\u00a0(i - left[i]) * (right[i] - i)</code> ranges where index <code>i</code> will be chosen.</div>",
                "<div class=\"_1l1MA\">Loop over all elements of <code>nums</code>\u00a0by non-increasing\u00a0prime score, each element will be chosen <code>min(ranges[i], remainingK)</code>\u00a0times, where <code>reaminingK</code>\u00a0denotes the number of remaining operations. Therefore, the score will be multiplied by <code>s[i]^min(ranges[i],remainingK)</code>.</div>",
                "<div class=\"_1l1MA\">Use fast exponentiation to quickly calculate <code>A^B mod C</code>.</div>"
            ],
            "rephrased": {
                "body": "Given an array `nums` of `n` positive integers and an integer `k`, you start with a score of 1. The goal is to maximize your score by applying the following operation at most `k` times:\n\n1.  Choose any non-empty subarray `nums[l, ..., r]` that hasn't been chosen previously.\n2.  Select an element `x` from `nums[l, ..., r]` with the highest prime score. If multiple elements have the same highest prime score, choose the one with the smallest index.\n3.  Multiply your current score by `x`.\n\nThe prime score of an integer `x` is the number of distinct prime factors of `x`. Return the maximum possible score after applying at most `k` operations, modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= nums.length == n <= 10<sup>5</sup>",
                    "1 <= nums[i] <= 10<sup>5</sup>",
                    "1 <= k <= min(n * (n + 1) / 2, 10<sup>9</sup>)"
                ],
                "testcases": [
                    {
                        "input": "nums = [8,3,9,3,8], k = 2",
                        "output": "81",
                        "explanation": "One optimal strategy is to first choose the subarray [9] which results in a score of 9. Then choose the subarray [9,3]. Both 9 and 3 have prime score of 1 but since 9 appears earlier, we pick 9 again. The final score is 9*9 = 81."
                    },
                    {
                        "input": "nums = [19,12,14,6,10,18], k = 3",
                        "output": "4788",
                        "explanation": "One optimal strategy is to first choose the subarray [19] which results in a score of 19. Then choose subarray [18] which results in a score of 19*18 = 342. Finally, choose the subarray [14, 6]. The prime scores for 14 and 6 are the same (2), but 14 appears before 6. Hence, multiply score by 14 which leads to 342*14 = 4788."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "next-greater-element-iv",
                "title": "Next Greater Element IV",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "<div class=\"_1l1MA\">Calculate <code>nums[i]</code>'s prime score <code>s[i]</code>\u00a0by factoring in <code>O(sqrt(nums[i]))</code> time.</div>",
            "<div class=\"_1l1MA\">For each <code>nums[i]</code>, find the nearest index <code>left[i]</code> on the left (if any) such that <code>s[left[i]] >= s[i]</code>.\u00a0if none is\u00a0found,\u00a0set <code>left[i]</code> to <code>-1</code>. Similarly, find the nearest index <code>right[i]</code> on the right (if any) such that <code>s[right[i]] > s[i]</code>. If none is found, set <code>right[i]</code> to <code>n</code>.</div>",
            "<div class=\"_1l1MA\">Use a monotonic stack to compute <code>right[i]</code> and <code>left[i]</code>.</div>",
            "<div class=\"_1l1MA\">For each index <code>i</code>, if <code>left[i] + 1 <= l\u00a0<= i <= r\u00a0<= right[i] - 1</code>, then <code>s[i]</code> is the maximum value in the range <code>[l, r]</code>. For this particular <code>i</code>, there are\u00a0<code>ranges[i] =\u00a0(i - left[i]) * (right[i] - i)</code> ranges where index <code>i</code> will be chosen.</div>",
            "<div class=\"_1l1MA\">Loop over all elements of <code>nums</code>\u00a0by non-increasing\u00a0prime score, each element will be chosen <code>min(ranges[i], remainingK)</code>\u00a0times, where <code>reaminingK</code>\u00a0denotes the number of remaining operations. Therefore, the score will be multiplied by <code>s[i]^min(ranges[i],remainingK)</code>.</div>",
            "<div class=\"_1l1MA\">Use fast exponentiation to quickly calculate <code>A^B mod C</code>.</div>"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumScore(vector<int>& nums, int k) {\n    const int n = nums.size();\n    const int maxNum = *max_element(nums.begin(), nums.end());\n    const vector<int> minPrimeFactors = sieveEratosthenes(maxNum + 1);\n    const vector<int> primeScores = getPrimeScores(nums, minPrimeFactors);\n    int ans = 1;\n    // left[i] := next index on the left(if any)\n    //            s.t.primeScores[left[i]] >= primeScores[i]\n    vector<int> left(n, -1);\n    // right[i] := next index on the right (if any)\n    //             s.t. primeScores[right[i]] > primeScores[i]\n    vector<int> right(n, n);\n    stack<int> stack;\n\n    // Find next indices on the left where `primeScores` are greater or equal.\n    for (int i = n - 1; i >= 0; --i) {\n      while (!stack.empty() && primeScores[stack.top()] <= primeScores[i])\n        left[stack.top()] = i, stack.pop();\n      stack.push(i);\n    }\n\n    stack = std::stack<int>();\n\n    // Find next indices on the right where `primeScores` are greater.\n    for (int i = 0; i < n; ++i) {\n      while (!stack.empty() && primeScores[stack.top()] < primeScores[i])\n        right[stack.top()] = i, stack.pop();\n      stack.push(i);\n    }\n\n    vector<pair<int, int>> numAndIndexes;\n\n    for (int i = 0; i < n; ++i)\n      numAndIndexes.emplace_back(nums[i], i);\n\n    sort(numAndIndexes.begin(), numAndIndexes.end(),\n         [&](const pair<int, int>& a, const pair<int, int>& b) {\n      return a.first == b.first ? a.second < b.second : a.first > b.first;\n    });\n\n    for (const auto& [num, i] : numAndIndexes) {\n      // nums[i] is the maximum value in the range [left[i] + 1, right[i] - 1]\n      // So, there are (i - left[i]) * (right[i] - 1) ranges where nums[i] will\n      // be chosen.\n      const int rangeCount = (i - left[i]) * (right[i] - i);\n      const int actualCount = min(rangeCount, k);\n      k -= actualCount;\n      ans = (1LL * ans * modPow(num, actualCount)) % kMod;\n    }\n\n    return ans;\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n\n  int modPow(long x, int n) {\n    if (n == 0)\n      return 1;\n    if (n & 1)\n      return x * modPow(x, n - 1) % kMod;\n    return modPow(x * x % kMod, n / 2);\n  }\n\n  // Gets the minimum prime factor of i, where 1 < i <= n.\n  vector<int> sieveEratosthenes(int n) {\n    vector<int> minPrimeFactors(n + 1);\n    iota(minPrimeFactors.begin() + 2, minPrimeFactors.end(), 2);\n    for (int i = 2; i * i < n; ++i)\n      if (minPrimeFactors[i] == i)  // `i` is prime.\n        for (int j = i * i; j < n; j += i)\n          minPrimeFactors[j] = min(minPrimeFactors[j], i);\n    return minPrimeFactors;\n  }\n\n  vector<int> getPrimeScores(const vector<int>& nums,\n                             const vector<int>& minPrimeFactors) {\n    vector<int> primeScores;\n    for (const int num : nums)\n      primeScores.push_back(getPrimeScore(num, minPrimeFactors));\n    return primeScores;\n  }\n\n  int getPrimeScore(int num, const vector<int>& minPrimeFactors) {\n    unordered_set<int> primeFactors;\n    while (num > 1) {\n      const int divisor = minPrimeFactors[num];\n      primeFactors.insert(divisor);\n      while (num % divisor == 0)\n        num /= divisor;\n    }\n    return primeFactors.size();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumScore(List<Integer> nums, int k) {\n    final int n = nums.size();\n    final int maxNum = Collections.max(nums);\n    final int[] minPrimeFactors = sieveEratosthenes(maxNum + 1);\n    final int[] primeScores = getPrimeScores(nums, minPrimeFactors);\n    int ans = 1;\n    // left[i] := next index on the left(if any)\n    //            s.t.primeScores[left[i]] >= primeScores[i]\n    int[] left = new int[n];\n    Arrays.fill(left, -1);\n    // right[i] := next index on the right (if any)\n    //             s.t. primeScores[right[i]] > primeScores[i]\n    int[] right = new int[n];\n    Arrays.fill(right, n);\n    Deque<Integer> stack = new ArrayDeque<>();\n\n    // Find next indices on the left where `primeScores` are greater or equal.\n    for (int i = n - 1; i >= 0; --i) {\n      while (!stack.isEmpty() && primeScores[stack.peek()] <= primeScores[i])\n        left[stack.pop()] = i;\n      stack.push(i);\n    }\n\n    stack.clear();\n\n    // Find next indices on the right where `primeScores` are greater.\n    for (int i = 0; i < n; ++i) {\n      while (!stack.isEmpty() && primeScores[stack.peek()] < primeScores[i])\n        right[stack.pop()] = i;\n      stack.push(i);\n    }\n\n    Pair<Integer, Integer>[] numAndIndexes = new Pair[n];\n\n    for (int i = 0; i < n; ++i)\n      numAndIndexes[i] = new Pair<>(nums.get(i), i);\n\n    Arrays.sort(numAndIndexes,\n                (a, b)\n                    -> a.getKey().equals(b.getKey()) ? a.getValue() - b.getValue()\n                                                     : b.getKey() - a.getKey());\n\n    for (Pair<Integer, Integer> numAndIndex : numAndIndexes) {\n      final int num = numAndIndex.getKey();\n      final int i = numAndIndex.getValue();\n      // nums[i] is the maximum value in the range [left[i] + 1, right[i] - 1]\n      // So, there are (i - left[i]) * (right[i] - 1) ranges where nums[i] will\n      // be chosen.\n      final int rangeCount = (i - left[i]) * (right[i] - i);\n      final int actualCount = Math.min(rangeCount, k);\n      k -= actualCount;\n      ans = (int) ((1L * ans * modPow(num, actualCount)) % kMod);\n    }\n\n    return ans;\n  }\n\n  private static final int kMod = 1_000_000_007;\n\n  private long modPow(long x, int n) {\n    if (n == 0)\n      return 1;\n    if (n % 2 == 1)\n      return x * modPow(x, n - 1) % kMod;\n    return modPow(x * x % kMod, n / 2);\n  }\n\n  // Gets the minimum prime factor of i, where 1 < i <= n.\n  private int[] sieveEratosthenes(int n) {\n    int[] minPrimeFactors = new int[n + 1];\n    for (int i = 2; i <= n; ++i)\n      minPrimeFactors[i] = i;\n    for (int i = 2; i * i < n; ++i)\n      if (minPrimeFactors[i] == i) // `i` is prime.\n        for (int j = i * i; j < n; j += i)\n          minPrimeFactors[j] = Math.min(minPrimeFactors[j], i);\n    return minPrimeFactors;\n  }\n\n  private int[] getPrimeScores(List<Integer> nums, int[] minPrimeFactors) {\n    int[] primeScores = new int[nums.size()];\n    for (int i = 0; i < nums.size(); ++i)\n      primeScores[i] = getPrimeScore(nums.get(i), minPrimeFactors);\n    return primeScores;\n  }\n\n  private int getPrimeScore(int num, int[] minPrimeFactors) {\n    Set<Integer> primeFactors = new HashSet<>();\n    while (num > 1) {\n      final int divisor = minPrimeFactors[num];\n      primeFactors.add(divisor);\n      while (num % divisor == 0)\n        num /= divisor;\n    }\n    return primeFactors.size();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumScore(self, nums: List[int], k: int) -> int:\n    kMod = 1_000_000_007\n    n = len(nums)\n    ans = 1\n    minPrimeFactors = self._sieveEratosthenes(max(nums) + 1)\n    primeScores = [self._getPrimeScore(num, minPrimeFactors) for num in nums]\n    # left[i] := next index on the left (if any)\n    #            s.t. primeScores[left[i]] >= primeScores[i]\n    left = [-1] * n\n    # right[i] := next index on the right (if any)\n    #             s.t. primeScores[right[i]] > primeScores[i]\n    right = [n] * n\n    stack = []\n\n    # Find next indices on the left where `primeScores` are greater or equal.\n    for i in reversed(range(n)):\n      while stack and primeScores[stack[-1]] <= primeScores[i]:\n        left[stack.pop()] = i\n      stack.append(i)\n\n    stack = []\n\n    # Find next indices on the right where `primeScores` are greater.\n    for i in range(n):\n      while stack and primeScores[stack[-1]] < primeScores[i]:\n        right[stack.pop()] = i\n      stack.append(i)\n\n    numAndIndexes = [(num, i) for i, num in enumerate(nums)]\n\n    def modPow(x: int, n: int) -> int:\n      if n == 0:\n        return 1\n      if n & 1:\n        return x * modPow(x, n - 1) % kMod\n      return modPow(x * x % kMod, n // 2)\n\n    for num, i in sorted(numAndIndexes, key=lambda x: (-x[0], x[1])):\n      # nums[i] is the maximum value in the range [left[i] + 1, right[i] - 1]\n      # So, there are (i - left[i]) * (right[i] - 1) ranges where nums[i] will\n      # be chosen.\n      rangeCount = (i - left[i]) * (right[i] - i)\n      actualCount = min(rangeCount, k)\n      k -= actualCount\n      ans *= modPow(num, actualCount)\n      ans %= kMod\n\n    return ans\n\n  def _sieveEratosthenes(self, n: int) -> List[int]:\n    \"\"\"Gets the minimum prime factor of i, where 2 <= i <= n.\"\"\"\n    minPrimeFactors = [i for i in range(n + 1)]\n    for i in range(2, int(n**0.5) + 1):\n      if minPrimeFactors[i] == i:  # `i` is prime.\n        for j in range(i * i, n, i):\n          minPrimeFactors[j] = min(minPrimeFactors[j], i)\n    return minPrimeFactors\n\n  def _getPrimeScore(self, num: int, minPrimeFactors: List[int]) -> int:\n    primeFactors = set()\n    while num > 1:\n      divisor = minPrimeFactors[num]\n      primeFactors.add(divisor)\n      while num % divisor == 0:\n        num //= divisor\n    return len(primeFactors)\n",
                "lang_text": "py"
            }
        }
    }
}