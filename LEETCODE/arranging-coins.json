{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "441",
            "title": "Arranging Coins",
            "titleSlug": "arranging-coins",
            "content": "<p>You have <code>n</code> coins and you want to build a staircase with these coins. The staircase consists of <code>k</code> rows where the <code>i<sup>th</sup></code> row has exactly <code>i</code> coins. The last row of the staircase <strong>may be</strong> incomplete.</p>\n\n<p>Given the integer <code>n</code>, return <em>the number of <strong>complete rows</strong> of the staircase you will build</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/arrangecoins1-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Because the 3<sup>rd</sup> row is incomplete, we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/arrangecoins2-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> n = 8\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Because the 4<sup>th</sup> row is incomplete, we return 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3719,
            "dislikes": 1294,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"406.8K\", \"totalSubmission\": \"876.2K\", \"totalAcceptedRaw\": 406837, \"totalSubmissionRaw\": 876239, \"acRate\": \"46.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given 'n' coins and need to construct a staircase. The staircase has 'k' rows, where the i-th row contains exactly 'i' coins. The last row might be incomplete.  Determine the number of complete rows that can be built with the given coins.",
                "constraints": [
                    "1 <= n <= 2<sup>31</sup> - 1"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "2",
                        "explanation": "With 5 coins, you can build a staircase with 1 coin in the first row and 2 coins in the second row. The third row would require 3 coins, but you only have 2 remaining. Therefore, only 2 complete rows can be built."
                    },
                    {
                        "input": "8",
                        "output": "3",
                        "explanation": "With 8 coins, you can build a staircase with 1 coin in the first row, 2 coins in the second row, and 3 coins in the third row. The fourth row would require 4 coins, but you only have 2 remaining. Therefore, only 3 complete rows can be built."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int arrangeCoins(long n) {\n    return (-1 + sqrt(8 * n + 1)) / 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int arrangeCoins(long n) {\n    return (int) (-1 + Math.sqrt(8 * n + 1)) / 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def arrangeCoins(self, n: int) -> int:\n    return int((-1 + sqrt(8 * n + 1)) // 2)\n",
                "lang_text": "py"
            }
        }
    }
}