{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "735",
            "title": "Asteroid Collision",
            "titleSlug": "asteroid-collision",
            "content": "<p>We are given an array <code>asteroids</code> of integers representing asteroids in a row.</p>\n\n<p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p>\n\n<p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [5,10,-5]\n<strong>Output:</strong> [5,10]\n<strong>Explanation:</strong> The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [8,-8]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The 8 and -8 collide exploding each other.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [10,2,-5]\n<strong>Output:</strong> [10]\n<strong>Explanation:</strong> The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= asteroids.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li>\n\t<li><code>asteroids[i] != 0</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7412,
            "dislikes": 896,
            "similarQuestions": "[{\"title\": \"Can Place Flowers\", \"titleSlug\": \"can-place-flowers\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Destroying Asteroids\", \"titleSlug\": \"destroying-asteroids\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Collisions on a Road\", \"titleSlug\": \"count-collisions-on-a-road\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Robot Collisions\", \"titleSlug\": \"robot-collisions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"432K\", \"totalSubmission\": \"962.7K\", \"totalAcceptedRaw\": 432043, \"totalSubmissionRaw\": 962665, \"acRate\": \"44.9%\"}",
            "hints": [
                "Say a row of asteroids is stable.  What happens when a new asteroid is added on the right?"
            ],
            "rephrased": {
                "body": "Given an array `asteroids` of integers, where each value represents an asteroid's size (absolute value) and direction (sign: positive = right, negative = left). Asteroids move at the same speed. Determine the final state of the asteroids after all collisions.",
                "constraints": [
                    "2 <= asteroids.length <= 10^4",
                    "-1000 <= asteroids[i] <= 1000",
                    "asteroids[i] != 0"
                ],
                "testcases": [
                    {
                        "input": "[5,10,-5]",
                        "output": "[5,10]",
                        "explanation": "The asteroid with size 10 and the asteroid with size -5 collide. The -5 asteroid is destroyed, leaving the 10. The 5 and 10 do not collide."
                    },
                    {
                        "input": "[8,-8]",
                        "output": "[]",
                        "explanation": "The 8 and -8 collide and both are destroyed because they have the same size."
                    },
                    {
                        "input": "[10,2,-5]",
                        "output": "[10]",
                        "explanation": "The 2 and -5 collide resulting in -5 (2 is destroyed). The 10 and -5 collide resulting in 10 (-5 is destroyed)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "can-place-flowers",
                "title": "Can Place Flowers",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "destroying-asteroids",
                "title": "Destroying Asteroids",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-collisions-on-a-road",
                "title": "Count Collisions on a Road",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "robot-collisions",
                "title": "Robot Collisions",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Say a row of asteroids is stable.  What happens when a new asteroid is added on the right?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> asteroidCollision(vector<int>& asteroids) {\n    vector<int> stack;\n\n    for (const int a : asteroids)\n      if (a > 0) {\n        stack.push_back(a);\n      } else {  // a < 0\n        // Destroy previous positive one(s).\n        while (!stack.empty() && stack.back() > 0 && stack.back() < -a)\n          stack.pop_back();\n        if (stack.empty() || stack.back() < 0)\n          stack.push_back(a);\n        else if (stack.back() == -a)\n          stack.pop_back();  // Both explode\n        else                 // stack.back() > current\n          ;                  // Destroy current, so do nothing\n      }\n\n    return stack;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] asteroidCollision(int[] asteroids) {\n    Stack<Integer> stack = new Stack<>();\n\n    for (final int a : asteroids)\n      if (a > 0) {\n        stack.push(a);\n      } else { // a < 0\n        // Destroy previous positive one(s).\n        while (!stack.isEmpty() && stack.peek() > 0 && stack.peek() < -a)\n          stack.pop();\n        if (stack.isEmpty() || stack.peek() < 0)\n          stack.push(a);\n        else if (stack.peek() == -a)\n          stack.pop(); // Both explode.\n        else           // stack.back() > current\n          ;            // Destroy current, so do nothing.\n      }\n\n    return stack.stream().mapToInt(Integer::intValue).toArray();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n    stack = []\n\n    for a in asteroids:\n      if a > 0:\n        stack.append(a)\n      else:  # a < 0\n        # Destroy previous positive one(s).\n        while stack and stack[-1] > 0 and stack[-1] < -a:\n          stack.pop()\n        if not stack or stack[-1] < 0:\n          stack.append(a)\n        elif stack[-1] == -a:\n          stack.pop()  # Both explode.\n        else:  # stack[-1] > current\n          pass  # Destroy current, so do nothing.\n\n    return stack\n",
                "lang_text": "py"
            }
        }
    }
}