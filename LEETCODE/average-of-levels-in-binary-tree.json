{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "637",
            "title": "Average of Levels in Binary Tree",
            "titleSlug": "average-of-levels-in-binary-tree",
            "content": "Given the <code>root</code> of a binary tree, return <em>the average value of the nodes on each level in the form of an array</em>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/09/avg1-tree.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [3.00000,14.50000,11.00000]\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\nHence return [3, 14.5, 11].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/09/avg2-tree.jpg\" style=\"width: 292px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,15,7]\n<strong>Output:</strong> [3.00000,14.50000,11.00000]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5091,
            "dislikes": 313,
            "similarQuestions": "[{\"title\": \"Binary Tree Level Order Traversal\", \"titleSlug\": \"binary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Level Order Traversal II\", \"titleSlug\": \"binary-tree-level-order-traversal-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"455K\", \"totalSubmission\": \"630.6K\", \"totalAcceptedRaw\": 455045, \"totalSubmissionRaw\": 630590, \"acRate\": \"72.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the `root` of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within `10^-5` of the actual answer will be accepted.",
                "constraints": [
                    "The number of nodes in the tree is in the range `[1, 10^4]`.",
                    "`-2^31 <= Node.val <= 2^31 - 1`"
                ],
                "testcases": [
                    {
                        "input": "[3,9,20,null,null,15,7]",
                        "output": "[3.00000,14.50000,11.00000]",
                        "explanation": "The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11. Therefore, the expected output is [3, 14.5, 11]."
                    },
                    {
                        "input": "[3,9,20,15,7]",
                        "output": "[3.00000,14.50000,11.00000]",
                        "explanation": "The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11. Therefore, the expected output is [3, 14.5, 11]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "binary-tree-level-order-traversal",
                "title": "Binary Tree Level Order Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "binary-tree-level-order-traversal-ii",
                "title": "Binary Tree Level Order Traversal II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<double> averageOfLevels(TreeNode* root) {\n    vector<double> ans;\n    queue<TreeNode*> q{{root}};\n\n    while (!q.empty()) {\n      long sum = 0;\n      const int size = q.size();\n      for (int i = 0; i < size; ++i) {\n        TreeNode* node = q.front();\n        q.pop();\n        sum += node->val;\n        if (node->left)\n          q.push(node->left);\n        if (node->right)\n          q.push(node->right);\n      }\n      ans.push_back(sum / (double)size);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Double> averageOfLevels(TreeNode root) {\n    List<Double> ans = new ArrayList<>();\n    Queue<TreeNode> q = new ArrayDeque<>(Arrays.asList(root));\n\n    while (!q.isEmpty()) {\n      long sum = 0;\n      final int size = q.size();\n      for (int i = 0; i < size; ++i) {\n        TreeNode node = q.poll();\n        sum += node.val;\n        if (node.left != null)\n          q.offer(node.left);\n        if (node.right != null)\n          q.offer(node.right);\n      }\n      ans.add(sum / (double) size);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}