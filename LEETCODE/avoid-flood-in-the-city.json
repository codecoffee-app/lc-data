{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1488",
            "title": "Avoid Flood in The City",
            "titleSlug": "avoid-flood-in-the-city",
            "content": "<p>Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the <code>nth</code> lake, the <code>nth</code> lake becomes full of water. If it rains over a lake that is <strong>full of water</strong>, there will be a <strong>flood</strong>. Your goal is to avoid floods in any lake.</p>\n\n<p>Given an integer array <code>rains</code> where:</p>\n\n<ul>\n\t<li><code>rains[i] &gt; 0</code> means there will be rains over the <code>rains[i]</code> lake.</li>\n\t<li><code>rains[i] == 0</code> means there are no rains this day and you can choose <strong>one lake</strong> this day and <strong>dry it</strong>.</li>\n</ul>\n\n<p>Return <em>an array <code>ans</code></em> where:</p>\n\n<ul>\n\t<li><code>ans.length == rains.length</code></li>\n\t<li><code>ans[i] == -1</code> if <code>rains[i] &gt; 0</code>.</li>\n\t<li><code>ans[i]</code> is the lake you choose to dry in the <code>ith</code> day if <code>rains[i] == 0</code>.</li>\n</ul>\n\n<p>If there are multiple valid answers return <strong>any</strong> of them. If it is impossible to avoid flood return <strong>an empty array</strong>.</p>\n\n<p>Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> rains = [1,2,3,4]\n<strong>Output:</strong> [-1,-1,-1,-1]\n<strong>Explanation:</strong> After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day full lakes are [1,2,3]\nAfter the fourth day full lakes are [1,2,3,4]\nThere&#39;s no day to dry any lake and there is no flood in any lake.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rains = [1,2,0,0,2,1]\n<strong>Output:</strong> [-1,-1,2,1,-1,-1]\n<strong>Explanation:</strong> After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day, we dry lake 2. Full lakes are [1]\nAfter the fourth day, we dry lake 1. There is no full lakes.\nAfter the fifth day, full lakes are [2].\nAfter the sixth day, full lakes are [1,2].\nIt is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> rains = [1,2,0,1,2]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.\nAfter that, it will rain over lakes [1,2]. It&#39;s easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rains.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= rains[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1473,
            "dislikes": 277,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"34.2K\", \"totalSubmission\": \"127.8K\", \"totalAcceptedRaw\": 34234, \"totalSubmissionRaw\": 127774, \"acRate\": \"26.8%\"}",
            "hints": [
                "Keep An array of the last day there was rains over each city.",
                "Keep an array of the days you can dry a lake when you face one.",
                "When it rains over a lake, check the first possible day you can dry this lake and assign this day to this lake."
            ],
            "rephrased": {
                "body": "You are given an array `rains` representing rainfall in a country with infinitely many lakes.  `rains[i] > 0` indicates rain in lake `rains[i]`, filling it.  `rains[i] == 0` indicates a day with no rain, allowing you to dry one lake.  If it rains on a full lake, a flood occurs.  Return an array `ans` of the same length as `rains`, where `ans[i] == -1` if it rained on day `i`. If `rains[i] == 0`, `ans[i]` should be the lake you choose to dry on day `i`. Return an empty array if a flood is unavoidable.",
                "constraints": [
                    "1 <= rains.length <= 10^5",
                    "0 <= rains[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4]",
                        "output": "[-1,-1,-1,-1]",
                        "explanation": "Each day it rains, filling lakes 1, 2, 3, and 4 respectively. There are no dry days to manage the water, but no floods occur either."
                    },
                    {
                        "input": "[1,2,0,0,2,1]",
                        "output": "[-1,-1,2,1,-1,-1]",
                        "explanation": "On days 1 and 2, lakes 1 and 2 fill. On day 3, we dry lake 2. On day 4, we dry lake 1. On days 5 and 6, lakes 2 and 1 fill, respectively. Other valid solutions include drying lakes in a different order. For example, [-1,-1,1,2,-1,-1] is also an acceptable solution."
                    },
                    {
                        "input": "[1,2,0,1,2]",
                        "output": "[]",
                        "explanation": "After days 1 and 2, lakes 1 and 2 are full. On day 3, we must dry either lake 1 or 2. Regardless of which lake we dry, a subsequent rain on the other lake will cause a flood. Therefore, no solution is possible."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Keep An array of the last day there was rains over each city.",
            "Keep an array of the days you can dry a lake when you face one.",
            "When it rains over a lake, check the first possible day you can dry this lake and assign this day to this lake."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> avoidFlood(vector<int>& rains) {\n    vector<int> ans(rains.size(), -1);\n    unordered_map<int, int> lakeIdToFullDay;\n    set<int> emptyDays;  // indices of rains[i] == 0\n\n    for (int i = 0; i < rains.size(); ++i) {\n      const int lakeId = rains[i];\n      if (lakeId == 0) {\n        emptyDays.insert(i);\n        continue;\n      }\n      if (const auto itFullDay = lakeIdToFullDay.find(lakeId);\n          itFullDay != lakeIdToFullDay.cend()) {\n        // The lake was full in a previous day. Greedily find the closest day\n        // to make the lake empty.\n        const auto itEmptyDay = emptyDays.upper_bound(itFullDay->second);\n        if (itEmptyDay == emptyDays.cend())  // Not found.\n          return {};\n        // Empty the lake at this day.\n        ans[*itEmptyDay] = lakeId;\n        emptyDays.erase(itEmptyDay);\n      }\n      // Lake with `lakeId` becomes full at day i.\n      lakeIdToFullDay[lakeId] = i;\n    }\n\n    // Pick a arbitrary lake to empty if there are remaining empty days.\n    for (const int emptyDay : emptyDays)\n      ans[emptyDay] = 1;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] avoidFlood(int[] rains) {\n    int[] ans = new int[rains.length];\n    Arrays.fill(ans, -1);\n    Map<Integer, Integer> lakeIdToFullDay = new HashMap<>();\n    TreeSet<Integer> emptyDays = new TreeSet<>(); // indices of rains[i] == 0\n\n    for (int i = 0; i < rains.length; ++i) {\n      final int lakeId = rains[i];\n      if (lakeId == 0) {\n        emptyDays.add(i);\n        continue;\n      }\n      if (lakeIdToFullDay.containsKey(lakeId)) {\n        final int fullDay = lakeIdToFullDay.get(lakeId);\n        // The lake was full in a previous day. Greedily find the closest day\n        // to make the lake empty.\n        Integer emptyDay = emptyDays.higher(fullDay);\n        if (emptyDay == null) // Not found.\n          return new int[] {};\n        // Empty the lake at this day.\n        ans[emptyDay] = lakeId;\n        emptyDays.remove(emptyDay);\n      }\n      // Lake with `lakeId` becomes full at day i.\n      lakeIdToFullDay.put(lakeId, i);\n    }\n\n    // Pick a arbitrary lake to empty if there are remaining empty days.\n    for (final int emptyDay : emptyDays)\n      ans[emptyDay] = 1;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from sortedcontainers import SortedSet\n\n\nclass Solution:\n  def avoidFlood(self, rains: List[int]) -> List[int]:\n    ans = [-1] * len(rains)\n    lakeIdToFullDay = {}\n    emptyDays = SortedSet()  # indices of rains[i] == 0\n\n    for i, lakeId in enumerate(rains):\n      if lakeId == 0:\n        emptyDays.add(i)\n        continue\n        # The lake was full in a previous day. Greedily find the closest day\n        # to make the lake empty.\n      if lakeId in lakeIdToFullDay:\n        fullDay = lakeIdToFullDay[lakeId]\n        emptyDayIndex = emptyDays.bisect_right(fullDay)\n        if emptyDayIndex == len(emptyDays):  # Not found.\n          return []\n        # Empty the lake at this day.\n        emptyDay = emptyDays[emptyDayIndex]\n        ans[emptyDay] = lakeId\n        emptyDays.discard(emptyDay)\n      # Lake with `lakeId` becomes full at day i.\n      lakeIdToFullDay[lakeId] = i\n\n    # Pick a arbitrary lake to empty if there are remaining empty days.\n    for emptyDay in emptyDays:\n      ans[emptyDay] = 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}