{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1382",
            "title": "Balance a Binary Search Tree",
            "titleSlug": "balance-a-binary-search-tree",
            "content": "<p>Given the <code>root</code> of a binary search tree, return <em>a <strong>balanced</strong> binary search tree with the same node values</em>. If there is more than one answer, return <strong>any of them</strong>.</p>\n\n<p>A binary search tree is <strong>balanced</strong> if the depth of the two subtrees of every node never differs by more than <code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/10/balance1-tree.jpg\" style=\"width: 500px; height: 319px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,2,null,3,null,4,null,null]\n<strong>Output:</strong> [2,1,3,null,null,null,4]\n<b>Explanation:</b> This is not the only correct answer, [3,1,4,null,2] is also correct.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/10/balanced2-tree.jpg\" style=\"width: 224px; height: 145px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> [2,1,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2964,
            "dislikes": 69,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"136.7K\", \"totalSubmission\": \"168.4K\", \"totalAcceptedRaw\": 136710, \"totalSubmissionRaw\": 168400, \"acRate\": \"81.2%\"}",
            "hints": [
                "Convert the tree to a sorted array using an in-order traversal.",
                "Construct a new balanced tree from the sorted array recursively."
            ],
            "rephrased": {
                "body": "Given the root of a binary search tree (BST), transform it into a balanced binary search tree with the same node values.  A balanced BST is defined as one where the depth of the two subtrees of every node never differs by more than 1. Return any valid balanced BST.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 10<sup>4</sup>].",
                    "1 <= Node.val <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "[1,null,2,null,3,null,4,null,null]",
                        "output": "[2,1,3,null,null,null,4]",
                        "explanation": "One possible balanced BST is [2,1,3,null,null,null,4]. Another valid solution is [3,1,4,null,2]."
                    },
                    {
                        "input": "[2,1,3]",
                        "output": "[2,1,3]",
                        "explanation": "The input tree is already balanced, so the output is the same."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Convert the tree to a sorted array using an in-order traversal.",
            "Construct a new balanced tree from the sorted array recursively."
        ],
        "relatedTopics": [
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* balanceBST(TreeNode* root) {\n    vector<int> nums;\n    inorder(root, nums);\n    return build(nums, 0, nums.size() - 1);\n  }\n\n private:\n  void inorder(TreeNode* root, vector<int>& nums) {\n    if (root == nullptr)\n      return;\n    inorder(root->left, nums);\n    nums.push_back(root->val);\n    inorder(root->right, nums);\n  }\n\n  // Same as 108. Convert Sorted Array to Binary Search Tree\n  TreeNode* build(const vector<int>& nums, int l, int r) {\n    if (l > r)\n      return nullptr;\n    const int m = (l + r) / 2;\n    return new TreeNode(nums[m], build(nums, l, m - 1), build(nums, m + 1, r));\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode balanceBST(TreeNode root) {\n    List<Integer> nums = new ArrayList<>();\n    inorder(root, nums);\n    return build(nums, 0, nums.size() - 1);\n  }\n\n  private void inorder(TreeNode root, List<Integer> nums) {\n    if (root == null)\n      return;\n    inorder(root.left, nums);\n    nums.add(root.val);\n    inorder(root.right, nums);\n  }\n\n  // Same as 108. Convert Sorted Array to Binary Search Tree\n  private TreeNode build(List<Integer> nums, int l, int r) {\n    if (l > r)\n      return null;\n    final int m = (l + r) / 2;\n    return new TreeNode(nums.get(m), build(nums, l, m - 1), build(nums, m + 1, r));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def balanceBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n    nums = []\n\n    def inorder(root: Optional[TreeNode]) -> None:\n      if not root:\n        return\n      inorder(root.left)\n      nums.append(root.val)\n      inorder(root.right)\n\n    inorder(root)\n\n    # Same as 108. Convert Sorted Array to Binary Search Tree\n    def build(l: int, r: int) -> Optional[TreeNode]:\n      if l > r:\n        return None\n      m = (l + r) // 2\n      return TreeNode(nums[m],\n                      build(l, m - 1),\n                      build(m + 1, r))\n\n    return build(0, len(nums) - 1)\n",
                "lang_text": "py"
            }
        }
    }
}