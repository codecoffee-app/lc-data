{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "110",
            "title": "Balanced Binary Tree",
            "titleSlug": "balanced-binary-tree",
            "content": "<p>Given a binary tree, determine if it is <span data-keyword=\"height-balanced\"><strong>height-balanced</strong></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg\" style=\"width: 342px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg\" style=\"width: 452px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,2,3,3,null,null,4,4]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 10235,
            "dislikes": 611,
            "similarQuestions": "[{\"title\": \"Maximum Depth of Binary Tree\", \"titleSlug\": \"maximum-depth-of-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 1331853, \"totalSubmissionRaw\": 2607273, \"acRate\": \"51.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a binary tree, determine if it is height-balanced. A height-balanced binary tree is defined as a tree where the depth of the two subtrees of every node never differ by more than 1.",
                "constraints": [
                    "The number of nodes in the tree is in the range [0, 5000].",
                    "-10<sup>4</sup> <= Node.val <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "[3,9,20,null,null,15,7]",
                        "output": "true",
                        "explanation": "The given binary tree is height-balanced because for each node, the difference in heights between its left and right subtrees is at most 1."
                    },
                    {
                        "input": "[1,2,2,3,3,null,null,4,4]",
                        "output": "false",
                        "explanation": "The given binary tree is not height-balanced because at least one node has subtrees that differ in height by more than 1. For example, the left subtree of node 1 has a height difference greater than 1."
                    },
                    {
                        "input": "[]",
                        "output": "true",
                        "explanation": "An empty tree is considered height-balanced."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-depth-of-binary-tree",
                "title": "Maximum Depth of Binary Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isBalanced(TreeNode* root) {\n    if (root == nullptr)\n      return true;\n    return abs(maxDepth(root->left) - maxDepth(root->right)) <= 1 &&\n           isBalanced(root->left) && isBalanced(root->right);\n  }\n\n private:\n  int maxDepth(TreeNode* root) {\n    if (root == nullptr)\n      return 0;\n    return 1 + max(maxDepth(root->left), maxDepth(root->right));\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isBalanced(TreeNode root) {\n    if (root == null)\n      return true;\n    return Math.abs(maxDepth(root.left) - maxDepth(root.right)) <= 1 && //\n        isBalanced(root.left) &&                                        //\n        isBalanced(root.right);\n  }\n\n  private int maxDepth(TreeNode root) {\n    if (root == null)\n      return 0;\n    return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isBalanced(self, root: Optional[TreeNode]) -> bool:\n    if not root:\n      return True\n\n    def maxDepth(root: Optional[TreeNode]) -> int:\n      if not root:\n        return 0\n      return 1 + max(maxDepth(root.left), maxDepth(root.right))\n\n    return abs(maxDepth(root.left) - maxDepth(root.right)) <= 1 and \\\n        self.isBalanced(root.left) and self.isBalanced(root.right)\n",
                "lang_text": "py"
            }
        }
    }
}