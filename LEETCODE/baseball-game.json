{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "682",
            "title": "Baseball Game",
            "titleSlug": "baseball-game",
            "content": "<p>You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.</p>\n\n<p>You are given a list of strings <code>operations</code>, where <code>operations[i]</code> is the <code>i<sup>th</sup></code> operation you must apply to the record and is one of the following:</p>\n\n<ul>\n\t<li>An integer <code>x</code>.\n\n\t<ul>\n\t\t<li>Record a new score of <code>x</code>.</li>\n\t</ul>\n\t</li>\n\t<li><code>&#39;+&#39;</code>.\n\t<ul>\n\t\t<li>Record a new score that is the sum of the previous two scores.</li>\n\t</ul>\n\t</li>\n\t<li><code>&#39;D&#39;</code>.\n\t<ul>\n\t\t<li>Record a new score that is the double of the previous score.</li>\n\t</ul>\n\t</li>\n\t<li><code>&#39;C&#39;</code>.\n\t<ul>\n\t\t<li>Invalidate the previous score, removing it from the record.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the sum of all the scores on the record after applying all the operations</em>.</p>\n\n<p>The test cases are generated such that the answer and all intermediate calculations fit in a <strong>32-bit</strong> integer and that all operations are valid.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ops = [&quot;5&quot;,&quot;2&quot;,&quot;C&quot;,&quot;D&quot;,&quot;+&quot;]\n<strong>Output:</strong> 30\n<strong>Explanation:</strong>\n&quot;5&quot; - Add 5 to the record, record is now [5].\n&quot;2&quot; - Add 2 to the record, record is now [5, 2].\n&quot;C&quot; - Invalidate and remove the previous score, record is now [5].\n&quot;D&quot; - Add 2 * 5 = 10 to the record, record is now [5, 10].\n&quot;+&quot; - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ops = [&quot;5&quot;,&quot;-2&quot;,&quot;4&quot;,&quot;C&quot;,&quot;D&quot;,&quot;9&quot;,&quot;+&quot;,&quot;+&quot;]\n<strong>Output:</strong> 27\n<strong>Explanation:</strong>\n&quot;5&quot; - Add 5 to the record, record is now [5].\n&quot;-2&quot; - Add -2 to the record, record is now [5, -2].\n&quot;4&quot; - Add 4 to the record, record is now [5, -2, 4].\n&quot;C&quot; - Invalidate and remove the previous score, record is now [5, -2].\n&quot;D&quot; - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n&quot;9&quot; - Add 9 to the record, record is now [5, -2, -4, 9].\n&quot;+&quot; - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n&quot;+&quot; - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> ops = [&quot;1&quot;,&quot;C&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\n&quot;1&quot; - Add 1 to the record, record is now [1].\n&quot;C&quot; - Invalidate and remove the previous score, record is now [].\nSince the record is empty, the total sum is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= operations.length &lt;= 1000</code></li>\n\t<li><code>operations[i]</code> is <code>&quot;C&quot;</code>, <code>&quot;D&quot;</code>, <code>&quot;+&quot;</code>, or a string representing an integer in the range <code>[-3 * 10<sup>4</sup>, 3 * 10<sup>4</sup>]</code>.</li>\n\t<li>For operation <code>&quot;+&quot;</code>, there will always be at least two previous scores on the record.</li>\n\t<li>For operations <code>&quot;C&quot;</code> and <code>&quot;D&quot;</code>, there will always be at least one previous score on the record.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2674,
            "dislikes": 1866,
            "similarQuestions": "[{\"title\": \"Crawler Log Folder\", \"titleSlug\": \"crawler-log-folder\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"309.1K\", \"totalSubmission\": \"409.7K\", \"totalAcceptedRaw\": 309128, \"totalSubmissionRaw\": 409667, \"acRate\": \"75.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are tasked with keeping track of scores for a baseball game with unusual rules. You begin with an empty record. Given a list of strings representing operations, apply each operation to the record and return the sum of all scores in the record after applying all operations. The operations are as follows:\n\n- **Integer x:** Record a new score of x.\n- **'+':** Record a new score that is the sum of the previous two scores.\n- **'D':** Record a new score that is double the previous score.\n- **'C':** Invalidate (remove) the previous score from the record.",
                "constraints": [
                    "1 <= operations.length <= 1000",
                    "operations[i] is \"C\", \"D\", \"+\", or a string representing an integer in the range [-3 * 10^4, 3 * 10^4]",
                    "For operation '+', there will always be at least two previous scores on the record.",
                    "For operations 'C' and 'D', there will always be at least one previous score on the record."
                ],
                "testcases": [
                    {
                        "input": "ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]",
                        "output": "30",
                        "explanation": "Initially, the record is empty. '5' adds 5 to the record [5]. '2' adds 2 to the record [5, 2]. 'C' removes the last score, resulting in [5]. 'D' doubles the last score (5), adding 10 to the record [5, 10]. '+' adds the sum of the last two scores (5 + 10 = 15) to the record [5, 10, 15]. The total sum is 5 + 10 + 15 = 30."
                    },
                    {
                        "input": "ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]",
                        "output": "27",
                        "explanation": "Initially, the record is empty. '5' adds 5 to the record [5]. '-2' adds -2 to the record [5, -2]. '4' adds 4 to the record [5, -2, 4]. 'C' removes the last score, resulting in [5, -2]. 'D' doubles the last score (-2), adding -4 to the record [5, -2, -4]. '9' adds 9 to the record [5, -2, -4, 9]. '+' adds the sum of the last two scores (-4 + 9 = 5) to the record [5, -2, -4, 9, 5]. '+' adds the sum of the last two scores (9 + 5 = 14) to the record [5, -2, -4, 9, 5, 14]. The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27."
                    },
                    {
                        "input": "ops = [\"1\",\"C\"]",
                        "output": "0",
                        "explanation": "Initially, the record is empty. '1' adds 1 to the record [1]. 'C' removes the last score, resulting in []. The total sum is 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "crawler-log-folder",
                "title": "Crawler Log Folder",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int calPoints(vector<string>& operations) {\n    vector<int> scores;\n\n    for (const string& operation : operations)\n      if (operation == \"+\")\n        scores.push_back(scores.back() + scores[scores.size() - 2]);\n      else if (operation == \"D\")\n        scores.push_back(scores.back() * 2);\n      else if (operation == \"C\")\n        scores.pop_back();\n      else\n        scores.push_back(stoi(operation));\n\n    return accumulate(scores.begin(), scores.end(), 0);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int calPoints(String[] operations) {\n    Deque<Integer> scores = new ArrayDeque<>();\n\n    for (final String operation : operations) {\n      switch (operation) {\n        case \"+\":\n          final int lastScore = scores.pop();\n          final int secondLastScore = scores.peek();\n          scores.push(lastScore);\n          scores.push(lastScore + secondLastScore);\n          break;\n        case \"D\":\n          scores.push(scores.peek() * 2);\n          break;\n        case \"C\":\n          scores.pop();\n          break;\n        default:\n          scores.push(Integer.parseInt(operation));\n      }\n    }\n\n    return scores.stream().mapToInt(Integer::intValue).sum();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def calPoints(self, operations: List[str]) -> int:\n    scores = []\n\n    for operation in operations:\n      match operation:\n        case '+':\n          scores.append(scores[-1] + scores[-2])\n        case 'D':\n          scores.append(scores[-1] * 2)\n        case 'C':\n          scores.pop()\n        case default:\n          scores.append(int(operation))\n\n    return sum(scores)\n",
                "lang_text": "py"
            }
        }
    }
}