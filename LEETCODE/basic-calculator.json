{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "224",
            "title": "Basic Calculator",
            "titleSlug": "basic-calculator",
            "content": "<p>Given a string <code>s</code> representing a valid expression, implement a basic calculator to evaluate it, and return <em>the result of the evaluation</em>.</p>\n\n<p><strong>Note:</strong> You are <strong>not</strong> allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1 + 1&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot; 2-1 + 2 &quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(1+(4+5+2)-3)+(6+8)&quot;\n<strong>Output:</strong> 23\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of digits, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, and <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> represents a valid expression.</li>\n\t<li><code>&#39;+&#39;</code> is <strong>not</strong> used as a unary operation (i.e., <code>&quot;+1&quot;</code> and <code>&quot;+(2 + 3)&quot;</code> is invalid).</li>\n\t<li><code>&#39;-&#39;</code> could be used as a unary operation (i.e., <code>&quot;-1&quot;</code> and <code>&quot;-(2 + 3)&quot;</code> is valid).</li>\n\t<li>There will be no two consecutive operators in the input.</li>\n\t<li>Every number and running calculation will fit in a signed 32-bit integer.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6029,
            "dislikes": 444,
            "similarQuestions": "[{\"title\": \"Evaluate Reverse Polish Notation\", \"titleSlug\": \"evaluate-reverse-polish-notation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator II\", \"titleSlug\": \"basic-calculator-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Different Ways to Add Parentheses\", \"titleSlug\": \"different-ways-to-add-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Expression Add Operators\", \"titleSlug\": \"expression-add-operators\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator III\", \"titleSlug\": \"basic-calculator-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"The Score of Students Solving Math Expression\", \"titleSlug\": \"the-score-of-students-solving-math-expression\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimize Result by Adding Parentheses to Expression\", \"titleSlug\": \"minimize-result-by-adding-parentheses-to-expression\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"426.5K\", \"totalSubmission\": \"993.4K\", \"totalAcceptedRaw\": 426543, \"totalSubmissionRaw\": 993410, \"acRate\": \"42.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation. You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.",
                "constraints": [
                    "1 <= s.length <= 3 * 10^5",
                    "s consists of digits, '+', '-', '(', ')', and ' '.",
                    "s represents a valid expression.",
                    "'+' is not used as a unary operation (i.e., '+1' and '+(2 + 3)' is invalid).",
                    "'-' could be used as a unary operation (i.e., '-1' and '-(2 + 3)' is valid).",
                    "There will be no two consecutive operators in the input.",
                    "Every number and running calculation will fit in a signed 32-bit integer."
                ],
                "testcases": [
                    {
                        "input": "1 + 1",
                        "output": "2",
                        "explanation": null
                    },
                    {
                        "input": " 2-1 + 2 ",
                        "output": "3",
                        "explanation": null
                    },
                    {
                        "input": "(1+(4+5+2)-3)+(6+8)",
                        "output": "23",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "evaluate-reverse-polish-notation",
                "title": "Evaluate Reverse Polish Notation",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "basic-calculator-ii",
                "title": "Basic Calculator II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "different-ways-to-add-parentheses",
                "title": "Different Ways to Add Parentheses",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "expression-add-operators",
                "title": "Expression Add Operators",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "basic-calculator-iii",
                "title": "Basic Calculator III",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "the-score-of-students-solving-math-expression",
                "title": "The Score of Students Solving Math Expression",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimize-result-by-adding-parentheses-to-expression",
                "title": "Minimize Result by Adding Parentheses to Expression",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int calculate(string s) {\n    int ans = 0;\n    int num = 0;\n    int sign = 1;\n    stack<int> stack{{sign}};  // Stack.top(): current env's sign\n\n    for (const char c : s)\n      if (isdigit(c))\n        num = num * 10 + (c - '0');\n      else if (c == '(')\n        stack.push(sign);\n      else if (c == ')')\n        stack.pop();\n      else if (c == '+' || c == '-') {\n        ans += sign * num;\n        sign = (c == '+' ? 1 : -1) * stack.top();\n        num = 0;\n      }\n\n    return ans + sign * num;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int calculate(String s) {\n    int ans = 0;\n    int num = 0;\n    int sign = 1;\n    Deque<Integer> stack = new ArrayDeque<>(); // Stack.peek(): current env's sign\n    stack.push(sign);\n\n    for (final char c : s.toCharArray())\n      if (Character.isDigit(c))\n        num = num * 10 + (c - '0');\n      else if (c == '(')\n        stack.push(sign);\n      else if (c == ')')\n        stack.pop();\n      else if (c == '+' || c == '-') {\n        ans += sign * num;\n        sign = (c == '+' ? 1 : -1) * stack.peek();\n        num = 0;\n      }\n\n    return ans + sign * num;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def calculate(self, s: str) -> int:\n    ans = 0\n    num = 0\n    sign = 1\n    stack = [sign]  # stack[-1]: current env's sign\n\n    for c in s:\n      if c.isdigit():\n        num = num * 10 + (ord(c) - ord('0'))\n      elif c == '(':\n        stack.append(sign)\n      elif c == ')':\n        stack.pop()\n      elif c == '+' or c == '-':\n        ans += sign * num\n        sign = (1 if c == '+' else -1) * stack[-1]\n        num = 0\n\n    return ans + sign * num\n",
                "lang_text": "py"
            }
        }
    }
}