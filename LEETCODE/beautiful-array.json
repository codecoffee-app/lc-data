{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "932",
            "title": "Beautiful Array",
            "titleSlug": "beautiful-array",
            "content": "<p>An array <code>nums</code> of length <code>n</code> is <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li><code>nums</code> is a permutation of the integers in the range <code>[1, n]</code>.</li>\n\t<li>For every <code>0 &lt;= i &lt; j &lt; n</code>, there is no index <code>k</code> with <code>i &lt; k &lt; j</code> where <code>2 * nums[k] == nums[i] + nums[j]</code>.</li>\n</ul>\n\n<p>Given the integer <code>n</code>, return <em>any <strong>beautiful</strong> array </em><code>nums</code><em> of length </em><code>n</code>. There will be at least one valid answer for the given <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 4\n<strong>Output:</strong> [2,1,4,3]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 5\n<strong>Output:</strong> [3,1,2,5,4]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1021,
            "dislikes": 1483,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                }
            ],
            "stats": "{\"totalAccepted\": \"42.5K\", \"totalSubmission\": \"64.9K\", \"totalAcceptedRaw\": 42529, \"totalSubmissionRaw\": 64908, \"acRate\": \"65.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "A beautiful array `nums` of length `n` satisfies the following conditions:\n\n1.  `nums` is a permutation of the integers from 1 to `n`.\n2.  For every `0 <= i < j < n`, there is no index `k` such that `i < k < j` and `2 * nums[k] == nums[i] + nums[j]`.\n\nGiven an integer `n`, construct and return any beautiful array `nums` of length `n`.  It is guaranteed that at least one valid beautiful array exists for the given `n`.",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 4",
                        "output": "[2,1,4,3]",
                        "explanation": null
                    },
                    {
                        "input": "n = 5",
                        "output": "[3,1,2,5,4]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> beautifulArray(int n) {\n    vector<int> A(n);\n    iota(A.begin(), A.end(), 1);\n    divide(A, 0, n - 1, 1);\n    return A;\n  }\n\n private:\n  void divide(vector<int>& A, int l, int r, int mask) {\n    if (l >= r)\n      return;\n    const int m = partition(A, l, r, mask);\n    divide(A, l, m, mask << 1);\n    divide(A, m + 1, r, mask << 1);\n  }\n\n  int partition(vector<int>& A, int l, int r, int mask) {\n    int nextSwapped = l;\n    for (int i = l; i <= r; ++i)\n      if (A[i] & mask)\n        swap(A[i], A[nextSwapped++]);\n    return nextSwapped - 1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] beautifulArray(int n) {\n    int[] A = new int[n];\n    for (int i = 0; i < n; ++i)\n      A[i] = i + 1;\n    divide(A, 0, n - 1, 1);\n    return A;\n  }\n\n  private void divide(int[] A, int l, int r, int mask) {\n    if (l >= r)\n      return;\n    final int m = partition(A, l, r, mask);\n    divide(A, l, m, mask << 1);\n    divide(A, m + 1, r, mask << 1);\n  }\n\n  private int partition(int[] A, int l, int r, int mask) {\n    int nextSwapped = l;\n    for (int i = l; i <= r; ++i)\n      if ((A[i] & mask) > 0)\n        swap(A, i, nextSwapped++);\n    return nextSwapped - 1;\n  }\n\n  private void swap(int[] A, int i, int j) {\n    final int temp = A[i];\n    A[i] = A[j];\n    A[j] = temp;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def beautifulArray(self, n: int) -> List[int]:\n    A = [i for i in range(1, n + 1)]\n\n    def partition(l: int, r: int, mask: int) -> int:\n      nextSwapped = l\n      for i in range(l, r + 1):\n        if A[i] & mask:\n          A[i], A[nextSwapped] = A[nextSwapped], A[i]\n          nextSwapped += 1\n      return nextSwapped - 1\n\n    def divide(l: int, r: int, mask: int) -> None:\n      if l >= r:\n        return\n      m = partition(l, r, mask)\n      divide(l, m, mask << 1)\n      divide(m + 1, r, mask << 1)\n\n    divide(0, n - 1, 1)\n    return A\n",
                "lang_text": "py"
            }
        }
    }
}