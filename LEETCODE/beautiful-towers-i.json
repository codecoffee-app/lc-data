{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2865",
            "title": "Beautiful Towers I",
            "titleSlug": "beautiful-towers-i",
            "content": "<p>You are given an array <code>heights</code> of <code>n</code> integers representing the number of bricks in <code>n</code> consecutive towers. Your task is to remove some bricks to form a <strong>mountain-shaped</strong> tower arrangement. In this arrangement, the tower heights are non-decreasing, reaching a maximum peak value with one or multiple consecutive towers and then non-increasing.</p>\n\n<p>Return the <strong>maximum possible sum</strong> of heights of a mountain-shaped tower arrangement.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">heights = [5,3,4,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">13</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We remove some bricks to make <code>heights =&nbsp;[5,3,3,1,1]</code>, the peak is at index 0.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">heights = [6,5,3,9,2,7]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">22</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We remove some bricks to make <code>heights =&nbsp;[3,3,3,9,2,2]</code>, the peak is at index 3.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">heights = [3,2,5,5,2,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">18</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We remove some bricks to make <code>heights = [2,2,5,5,2,2]</code>, the peak is at index 2 or 3.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == heights &lt;= 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= heights[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 266,
            "dislikes": 46,
            "similarQuestions": "[{\"title\": \"Valid Mountain Array\", \"titleSlug\": \"valid-mountain-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Removals to Make Mountain Array\", \"titleSlug\": \"minimum-number-of-removals-to-make-mountain-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Books You Can Take\", \"titleSlug\": \"maximum-number-of-books-you-can-take\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.2K\", \"totalSubmission\": \"53.4K\", \"totalAcceptedRaw\": 23239, \"totalSubmissionRaw\": 53369, \"acRate\": \"43.5%\"}",
            "hints": [
                "Try all the possible indices <code>i</code> as the peak.",
                "If <code>i</code> is the peak, <code>i-1<sup>th</sup></code> element, and <code>heights[j] = min(heights[j], heights[j + 1])</code> for <code>0 <= j < i </code>",
                "If <code>i</code> is the peak, start from <code>i+1<sup>th</sup></code> element, heights[j] = min(heights[j], heights[j - 1]) for <code>i < j < heights.size()</code>"
            ],
            "rephrased": {
                "body": "Given an array `heights` of `n` integers representing the number of bricks in `n` consecutive towers, determine the maximum possible sum of heights achievable by removing some bricks to form a mountain-shaped tower arrangement. A mountain-shaped arrangement has tower heights that are non-decreasing up to a peak (one or more consecutive towers of the same height) and then non-increasing after the peak.",
                "constraints": [
                    "1 <= n == heights.length <= 10^3",
                    "1 <= heights[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[5,3,4,1,1]",
                        "output": "13",
                        "explanation": "By removing some bricks, we can obtain the array [5, 3, 3, 1, 1], where the peak is at index 0. The sum of the elements in this array is 13."
                    },
                    {
                        "input": "[6,5,3,9,2,7]",
                        "output": "22",
                        "explanation": "By removing some bricks, we can obtain the array [3, 3, 3, 9, 2, 2], where the peak is at index 3. The sum of the elements in this array is 22."
                    },
                    {
                        "input": "[3,2,5,5,2,3]",
                        "output": "18",
                        "explanation": "By removing some bricks, we can obtain the array [2, 2, 5, 5, 2, 2], where the peak is at index 2 or 3. The sum of the elements in this array is 18."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "valid-mountain-array",
                "title": "Valid Mountain Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-removals-to-make-mountain-array",
                "title": "Minimum Number of Removals to Make Mountain Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-books-you-can-take",
                "title": "Maximum Number of Books You Can Take",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Try all the possible indices <code>i</code> as the peak.",
            "If <code>i</code> is the peak, <code>i-1<sup>th</sup></code> element, and <code>heights[j] = min(heights[j], heights[j + 1])</code> for <code>0 <= j < i </code>",
            "If <code>i</code> is the peak, start from <code>i+1<sup>th</sup></code> element, heights[j] = min(heights[j], heights[j - 1]) for <code>i < j < heights.size()</code>"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maximumSumOfHeights(vector<int>& maxHeights) {\n    const int n = maxHeights.size();\n    vector<long> maxSum(n);  // maxSum[i] := max sum with peak i\n\n    stack<int> stack{{-1}};\n    long summ = 0;\n\n    for (int i = 0; i < n; ++i) {\n      summ = process(stack, maxHeights, i, summ);\n      maxSum[i] = summ;\n    }\n\n    stack = std::stack<int>{{n}};\n    summ = 0;\n\n    for (int i = n - 1; i >= 0; --i) {\n      summ = process(stack, maxHeights, i, summ);\n      maxSum[i] += summ - maxHeights[i];\n    }\n\n    return *max_element(maxSum.begin(), maxSum.end());\n  }\n\n private:\n  long process(stack<int>& stack, vector<int>& maxHeights, int i, long summ) {\n    while (stack.size() > 1 && maxHeights[stack.top()] > maxHeights[i]) {\n      int j = stack.top();\n      stack.pop();\n      // The last abs(j - stack.top()) heights are maxHeights[j].\n      summ -= abs(j - stack.top()) * static_cast<long>(maxHeights[j]);\n    }\n    // Put abs(i - stack.top()) * maxHeights[i] in heights.\n    summ += abs(i - stack.top()) * static_cast<long>(maxHeights[i]);\n    stack.push(i);\n    return summ;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maximumSumOfHeights(List<Integer> maxHeights) {\n    final int n = maxHeights.size();\n    long[] maxSum = new long[n]; // maxSum[i] := max sum with peak i\n\n    Deque<Integer> stack = new ArrayDeque<>(Arrays.asList(-1));\n    stack.push(-1);\n    long summ = 0;\n\n    for (int i = 0; i < n; ++i) {\n      summ = process(stack, maxHeights, i, summ);\n      maxSum[i] = summ;\n    }\n\n    stack = new ArrayDeque<>(Arrays.asList(n));\n    summ = 0;\n\n    for (int i = n - 1; i >= 0; --i) {\n      summ = process(stack, maxHeights, i, summ);\n      maxSum[i] += summ - maxHeights.get(i);\n    }\n\n    return Arrays.stream(maxSum).max().getAsLong();\n  }\n\n  private long process(Deque<Integer> stack, List<Integer> maxHeights, int i, long summ) {\n    while (stack.size() > 1 && maxHeights.get(stack.peek()) > maxHeights.get(i)) {\n      final int j = stack.pop();\n      // The last abs(j - stack.peek()) heights are maxHeights.get(j).\n      summ -= Math.abs(j - stack.peek()) * (long) maxHeights.get(j);\n    }\n    // Put abs(i - stack.peek()) `maxHeights.get(i)` in heights.\n    summ += Math.abs(i - stack.peek()) * (long) maxHeights.get(i);\n    stack.push(i);\n    return summ;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n    n = len(maxHeights)\n    maxSum = [0] * n  # maxSum[i] := max sum with peak i\n\n    def process(stack: List[int], i: int, summ: int) -> int:\n      while len(stack) > 1 and maxHeights[stack[-1]] > maxHeights[i]:\n        j = stack.pop()\n        # The last abs(j - stack[-1]) heights are maxHeights[j].\n        summ -= abs(j - stack[-1]) * maxHeights[j]\n      # Put abs(i - stack[-1]) `maxHeight` in heights.\n      summ += abs(i - stack[-1]) * maxHeights[i]\n      stack.append(i)\n      return summ\n\n    stack = [-1]\n    summ = 0\n    for i in range(len(maxHeights)):\n      summ = process(stack, i, summ)\n      maxSum[i] = summ\n\n    stack = [n]\n    summ = 0\n    for i in range(n - 1, -1, -1):\n      summ = process(stack, i, summ)\n      maxSum[i] += summ - maxHeights[i]\n\n    return max(maxSum)\n",
                "lang_text": "py"
            }
        }
    }
}