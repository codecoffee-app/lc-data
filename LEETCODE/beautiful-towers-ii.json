{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2866",
            "title": "Beautiful Towers II",
            "titleSlug": "beautiful-towers-ii",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>maxHeights</code> of <code>n</code> integers.</p>\n\n<p>You are tasked with building <code>n</code> towers in the coordinate line. The <code>i<sup>th</sup></code> tower is built at coordinate <code>i</code> and has a height of <code>heights[i]</code>.</p>\n\n<p>A configuration of towers is <strong>beautiful</strong> if the following conditions hold:</p>\n\n<ol>\n\t<li><code>1 &lt;= heights[i] &lt;= maxHeights[i]</code></li>\n\t<li><code>heights</code> is a <strong>mountain</strong> array.</li>\n</ol>\n\n<p>Array <code>heights</code> is a <strong>mountain</strong> if there exists an index <code>i</code> such that:</p>\n\n<ul>\n\t<li>For all <code>0 &lt; j &lt;= i</code>, <code>heights[j - 1] &lt;= heights[j]</code></li>\n\t<li>For all <code>i &lt;= k &lt; n - 1</code>, <code>heights[k + 1] &lt;= heights[k]</code></li>\n</ul>\n\n<p>Return <em>the <strong>maximum possible sum of heights</strong> of a beautiful configuration of towers</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxHeights = [5,3,4,1,1]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n- 1 &lt;= heights[i] &lt;= maxHeights[i]  \n- heights is a mountain of peak i = 0.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 13.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxHeights = [6,5,3,9,2,7]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n- 1 &lt;= heights[i] &lt;= maxHeights[i]\n- heights is a mountain of peak i = 3.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 22.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxHeights = [3,2,5,5,2,3]\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n- 1 &lt;= heights[i] &lt;= maxHeights[i]\n- heights is a mountain of peak i = 2. \nNote that, for this configuration, i = 3 can also be considered a peak.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 18.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == maxHeights&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= maxHeights[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 393,
            "dislikes": 24,
            "similarQuestions": "[{\"title\": \"Minimum Number of Removals to Make Mountain Array\", \"titleSlug\": \"minimum-number-of-removals-to-make-mountain-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Books You Can Take\", \"titleSlug\": \"maximum-number-of-books-you-can-take\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.7K\", \"totalSubmission\": \"36.6K\", \"totalAcceptedRaw\": 12661, \"totalSubmissionRaw\": 36558, \"acRate\": \"34.6%\"}",
            "hints": [
                "Try all the possible indices <code>i</code> as the peak.",
                "Let <code>left[i]</code> be the maximum sum of heights for the prefix <code>0, \u2026, i</code> when index <code>i</code> is the peak.",
                "Let <code>right[i]</code> be the maximum sum of heights for suffix <code>i, \u2026, (n - 1)</code> when <code>i</code> is the peak",
                "Compute values of <code>left[i]</code> from left to right using DP.\r\nFor each <code>i</code> from <code>0</code> to <code>n - 1</code>, <code>left[i] = maxHeights * (i - j) + answer[j]</code>, where <code>j</code> is the rightmost index to the left of <code>i</code> such that <code>maxHeights[j] < maxHeights[i] </code>.",
                "For each <code>i</code> from <code>n - 1</code> to <code>0</code>, <code>right[i] = maxHeights * (j - i) + answer[j]</code>, where <code>j</code> is the leftmost index to the right of <code>i</code> such that <code>maxHeights[j] < maxHeights[i] </code>."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed array `maxHeights` of `n` integers.  Your task is to build `n` towers in the coordinate line. The i<sup>th</sup> tower is built at coordinate `i` and has a height of `heights[i]`. A configuration of towers is considered beautiful if the following conditions hold:\n\n1.  `1 <= heights[i] <= maxHeights[i]`\n2.  `heights` is a mountain array.\n\nArray `heights` is a mountain if there exists an index `i` such that:\n\n*   For all `0 < j <= i`, `heights[j - 1] <= heights[j]`\n*   For all `i <= k < n - 1`, `heights[k + 1] <= heights[k]`\n\nReturn the maximum possible sum of heights of a beautiful configuration of towers.",
                "constraints": [
                    "1 <= n == maxHeights <= 10<sup>5</sup>",
                    "1 <= maxHeights[i] <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "[5,3,4,1,1]",
                        "output": "13",
                        "explanation": "One possible beautiful configuration with the maximum sum is heights = [5,3,3,1,1]. This configuration satisfies the conditions of a beautiful configuration because: 1 <= heights[i] <= maxHeights[i] and heights is a mountain with peak i = 0. No other beautiful configuration yields a sum greater than 13."
                    },
                    {
                        "input": "[6,5,3,9,2,7]",
                        "output": "22",
                        "explanation": "One possible beautiful configuration with the maximum sum is heights = [3,3,3,9,2,2]. This configuration satisfies the conditions of a beautiful configuration because: 1 <= heights[i] <= maxHeights[i] and heights is a mountain with peak i = 3. No other beautiful configuration yields a sum greater than 22."
                    },
                    {
                        "input": "[3,2,5,5,2,3]",
                        "output": "18",
                        "explanation": "One possible beautiful configuration with the maximum sum is heights = [2,2,5,5,2,2]. This configuration satisfies the conditions of a beautiful configuration because: 1 <= heights[i] <= maxHeights[i] and heights is a mountain with peak i = 2 (or i = 3). No other beautiful configuration yields a sum greater than 18."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-removals-to-make-mountain-array",
                "title": "Minimum Number of Removals to Make Mountain Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-books-you-can-take",
                "title": "Maximum Number of Books You Can Take",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Try all the possible indices <code>i</code> as the peak.",
            "Let <code>left[i]</code> be the maximum sum of heights for the prefix <code>0, \u2026, i</code> when index <code>i</code> is the peak.",
            "Let <code>right[i]</code> be the maximum sum of heights for suffix <code>i, \u2026, (n - 1)</code> when <code>i</code> is the peak",
            "Compute values of <code>left[i]</code> from left to right using DP.\r\nFor each <code>i</code> from <code>0</code> to <code>n - 1</code>, <code>left[i] = maxHeights * (i - j) + answer[j]</code>, where <code>j</code> is the rightmost index to the left of <code>i</code> such that <code>maxHeights[j] < maxHeights[i] </code>.",
            "For each <code>i</code> from <code>n - 1</code> to <code>0</code>, <code>right[i] = maxHeights * (j - i) + answer[j]</code>, where <code>j</code> is the leftmost index to the right of <code>i</code> such that <code>maxHeights[j] < maxHeights[i] </code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Same as 2865. Beautiful Towers I\n  long long maximumSumOfHeights(vector<int>& maxHeights) {\n    const int n = maxHeights.size();\n    vector<long> maxSum(n);  // maxSum[i] := max sum with peak i\n\n    stack<int> stack{{-1}};\n    long summ = 0;\n\n    for (int i = 0; i < n; ++i) {\n      summ = process(stack, maxHeights, i, summ);\n      maxSum[i] = summ;\n    }\n\n    stack = std::stack<int>{{n}};\n    summ = 0;\n\n    for (int i = n - 1; i >= 0; --i) {\n      summ = process(stack, maxHeights, i, summ);\n      maxSum[i] += summ - maxHeights[i];\n    }\n\n    return *max_element(maxSum.begin(), maxSum.end());\n  }\n\n private:\n  long process(stack<int>& stack, vector<int>& maxHeights, int i, long summ) {\n    while (stack.size() > 1 && maxHeights[stack.top()] > maxHeights[i]) {\n      int j = stack.top();\n      stack.pop();\n      // The last abs(j - stack.top()) heights are maxHeights[j].\n      summ -= abs(j - stack.top()) * static_cast<long>(maxHeights[j]);\n    }\n    // Put abs(i - stack.top()) * maxHeights[i] in heights.\n    summ += abs(i - stack.top()) * static_cast<long>(maxHeights[i]);\n    stack.push(i);\n    return summ;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Same as 2865. Beautiful Towers I\n  public long maximumSumOfHeights(List<Integer> maxHeights) {\n    final int n = maxHeights.size();\n    long[] maxSum = new long[n]; // maxSum[i] := max sum with peak i\n\n    Deque<Integer> stack = new ArrayDeque<>(Arrays.asList(-1));\n    stack.push(-1);\n    long summ = 0;\n\n    for (int i = 0; i < n; ++i) {\n      summ = process(stack, maxHeights, i, summ);\n      maxSum[i] = summ;\n    }\n\n    stack = new ArrayDeque<>(Arrays.asList(n));\n    summ = 0;\n\n    for (int i = n - 1; i >= 0; --i) {\n      summ = process(stack, maxHeights, i, summ);\n      maxSum[i] += summ - maxHeights.get(i);\n    }\n\n    return Arrays.stream(maxSum).max().getAsLong();\n  }\n\n  private long process(Deque<Integer> stack, List<Integer> maxHeights, int i, long summ) {\n    while (stack.size() > 1 && maxHeights.get(stack.peek()) > maxHeights.get(i)) {\n      final int j = stack.pop();\n      // The last abs(j - stack.peek()) heights are maxHeights.get(j).\n      summ -= Math.abs(j - stack.peek()) * (long) maxHeights.get(j);\n    }\n    // Put abs(i - stack.peek()) `maxHeights.get(i)` in heights.\n    summ += Math.abs(i - stack.peek()) * (long) maxHeights.get(i);\n    stack.push(i);\n    return summ;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Same as 2865. Beautiful Towers I\n  def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n    n = len(maxHeights)\n    maxSum = [0] * n  # maxSum[i] := max sum with peak i\n\n    def process(stack: List[int], i: int, summ: int) -> int:\n      while len(stack) > 1 and maxHeights[stack[-1]] > maxHeights[i]:\n        j = stack.pop()\n        # The last abs(j - stack[-1]) heights are maxHeights[j].\n        summ -= abs(j - stack[-1]) * maxHeights[j]\n      # Put abs(i - stack[-1]) `maxHeight` in heights.\n      summ += abs(i - stack[-1]) * maxHeights[i]\n      stack.append(i)\n      return summ\n\n    stack = [-1]\n    summ = 0\n    for i in range(len(maxHeights)):\n      summ = process(stack, i, summ)\n      maxSum[i] = summ\n\n    stack = [n]\n    summ = 0\n    for i in range(n - 1, -1, -1):\n      summ = process(stack, i, summ)\n      maxSum[i] += summ - maxHeights[i]\n\n    return max(maxSum)\n",
                "lang_text": "py"
            }
        }
    }
}