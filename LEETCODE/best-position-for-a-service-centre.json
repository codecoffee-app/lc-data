{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1515",
            "title": "Best Position for a Service Centre",
            "titleSlug": "best-position-for-a-service-centre",
            "content": "<p>A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new center in a position such that <strong>the sum of the euclidean distances to all customers is minimum</strong>.</p>\n\n<p>Given an array <code>positions</code> where <code>positions[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> is the position of the <code>ith</code> customer on the map, return <em>the minimum sum of the euclidean distances</em> to all customers.</p>\n\n<p>In other words, you need to choose the position of the service center <code>[x<sub>centre</sub>, y<sub>centre</sub>]</code> such that the following formula is minimized:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/25/q4_edited.jpg\" />\n<p>Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/25/q4_e1.jpg\" style=\"width: 377px; height: 362px;\" />\n<pre>\n<strong>Input:</strong> positions = [[0,1],[1,0],[1,2],[2,1]]\n<strong>Output:</strong> 4.00000\n<strong>Explanation:</strong> As shown, you can see that choosing [x<sub>centre</sub>, y<sub>centre</sub>] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/25/q4_e3.jpg\" style=\"width: 419px; height: 419px;\" />\n<pre>\n<strong>Input:</strong> positions = [[1,1],[3,3]]\n<strong>Output:</strong> 2.82843\n<strong>Explanation:</strong> The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= positions.length &lt;= 50</code></li>\n\t<li><code>positions[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 224,
            "dislikes": 257,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Geometry",
                    "slug": "geometry"
                },
                {
                    "name": "Randomized",
                    "slug": "randomized"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.3K\", \"totalSubmission\": \"36.9K\", \"totalAcceptedRaw\": 13344, \"totalSubmissionRaw\": 36942, \"acRate\": \"36.1%\"}",
            "hints": [
                "The problem can be reworded as, giving a set of points on a 2d-plane, return the geometric median.",
                "Loop over each triplet of points (positions[i], positions[j], positions[k]) where i < j < k, get the centre of the circle which goes throw the 3 points, check if all other points lie in this circle."
            ],
            "rephrased": {
                "body": "A delivery company aims to minimize the total Euclidean distance from a new service center to all its customers in a city. Given the 2D coordinates of each customer, determine the optimal location for the service center that achieves this minimum total distance.",
                "constraints": [
                    "1 <= positions.length <= 50",
                    "positions[i].length == 2",
                    "0 <= x<sub>i</sub>, y<sub>i</sub> <= 100"
                ],
                "testcases": [
                    {
                        "input": "[[0,1],[1,0],[1,2],[2,1]]",
                        "output": "4.00000",
                        "explanation": "Choosing the service center location at [1, 1] results in a distance of 1 to each customer, yielding a minimum total distance of 4."
                    },
                    {
                        "input": "[[1,1],[3,3]]",
                        "output": "2.82843",
                        "explanation": "The minimum possible sum of distances is sqrt(2) + sqrt(2) = 2.82843."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The problem can be reworded as, giving a set of points on a 2d-plane, return the geometric median.",
            "Loop over each triplet of points (positions[i], positions[j], positions[k]) where i < j < k, get the centre of the circle which goes throw the 3 points, check if all other points lie in this circle."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Geometry",
                "slug": "geometry"
            },
            {
                "name": "Randomized",
                "slug": "randomized"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  double getMinDistSum(vector<vector<int>>& positions) {\n    constexpr double kErr = 1e-6;\n    double currX = 50;\n    double currY = 50;\n    double ans = distSum(positions, currX, currY);\n    double step = 1;\n\n    while (step > kErr) {\n      bool shouldDecreaseStep = true;\n      for (const auto& [dx, dy] : vector<pair<double, double>>{\n               {0, step}, {0, -step}, {step, 0}, {-step, 0}}) {\n        const double x = currX + dx;\n        const double y = currY + dy;\n        const double newDistSum = distSum(positions, x, y);\n        if (newDistSum < ans) {\n          ans = newDistSum;\n          currX = x;\n          currY = y;\n          shouldDecreaseStep = false;\n        }\n      }\n      if (shouldDecreaseStep)\n        step /= 10;\n    }\n\n    return ans;\n  }\n\n private:\n  double distSum(const vector<vector<int>>& positions, double a, double b) {\n    double sum = 0;\n    for (const vector<int>& p : positions)\n      sum += sqrt(pow(a - p[0], 2) + pow(b - p[1], 2));\n    return sum;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public double getMinDistSum(int[][] positions) {\n    final double kErr = 1e-6;\n    double currX = 50;\n    double currY = 50;\n    double ans = distSum(positions, currX, currY);\n    double step = 1;\n\n    while (step > kErr) {\n      boolean shouldDecreaseStep = true;\n      for (double[] dirs : new double[][] {{0, step}, {0, -step}, {step, 0}, {-step, 0}}) {\n        final double x = currX + dirs[0];\n        final double y = currY + dirs[1];\n        final double newDistSum = distSum(positions, x, y);\n        if (newDistSum < ans) {\n          ans = newDistSum;\n          currX = x;\n          currY = y;\n          shouldDecreaseStep = false;\n        }\n      }\n      if (shouldDecreaseStep)\n        step /= 10;\n    }\n\n    return ans;\n  }\n\n  private double distSum(int[][] positions, double a, double b) {\n    double sum = 0;\n    for (int[] p : positions)\n      sum += Math.sqrt(Math.pow(a - p[0], 2) + Math.pow(b - p[1], 2));\n    return sum;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getMinDistSum(self, positions: List[List[int]]) -> float:\n    def distSum(a: float, b: float) -> float:\n      return sum(math.sqrt((a - x)**2 + (b - y)**2)\n                 for x, y in positions)\n\n    kErr = 1e-6\n    currX = 50\n    currY = 50\n    ans = distSum(currX, currY)\n    step = 1\n\n    while step > kErr:\n      shouldDecreaseStep = True\n      for dx, dy in [(0, step), (0, -step), (step, 0), (-step, 0)]:\n        x = currX + dx\n        y = currY + dy\n        newDistSum = distSum(x, y)\n        if newDistSum < ans:\n          ans = newDistSum\n          currX = x\n          currY = y\n          shouldDecreaseStep = False\n      if shouldDecreaseStep:\n        step /= 10\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}