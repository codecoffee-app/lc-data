{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1014",
            "title": "Best Sightseeing Pair",
            "titleSlug": "best-sightseeing-pair",
            "content": "<p>You are given an integer array <code>values</code> where values[i] represents the value of the <code>i<sup>th</sup></code> sightseeing spot. Two sightseeing spots <code>i</code> and <code>j</code> have a <strong>distance</strong> <code>j - i</code> between them.</p>\n\n<p>The score of a pair (<code>i &lt; j</code>) of sightseeing spots is <code>values[i] + values[j] + i - j</code>: the sum of the values of the sightseeing spots, minus the distance between them.</p>\n\n<p>Return <em>the maximum score of a pair of sightseeing spots</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> values = [8,1,5,2,6]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> values = [1,2]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= values.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= values[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2445,
            "dislikes": 58,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"89.5K\", \"totalSubmission\": \"150.8K\", \"totalAcceptedRaw\": 89472, \"totalSubmissionRaw\": 150810, \"acRate\": \"59.3%\"}",
            "hints": [
                "Can you tell the best sightseeing spot in one pass (ie. as you iterate over the input?)  What should we store or keep track of as we iterate to do this?"
            ],
            "rephrased": {
                "body": "Given an array `values` representing the value of sightseeing spots, where `values[i]` is the value of the i-th spot, and the distance between spots `i` and `j` is `j - i`. The score of a pair (i < j) of sightseeing spots is calculated as `values[i] + values[j] + i - j`.  Find the maximum score among all possible pairs of sightseeing spots.",
                "constraints": [
                    "2 <= values.length <= 5 * 10^4",
                    "1 <= values[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[8,1,5,2,6]",
                        "output": "11",
                        "explanation": "The maximum score is achieved with i = 0 and j = 2. The score is calculated as values[0] + values[2] + 0 - 2 = 8 + 5 - 2 = 11."
                    },
                    {
                        "input": "[1,2]",
                        "output": "2",
                        "explanation": "The maximum score is achieved with i = 0 and j = 1. The score is calculated as values[0] + values[1] + 0 - 1 = 1 + 2 - 1 = 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Can you tell the best sightseeing spot in one pass (ie. as you iterate over the input?)  What should we store or keep track of as we iterate to do this?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxScoreSightseeingPair(vector<int>& values) {\n    int ans = 0;\n    int bestPrev = 0;\n\n    for (const int value : values) {\n      ans = max(ans, value + bestPrev);\n      bestPrev = max(bestPrev, value) - 1;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxScoreSightseeingPair(int[] values) {\n    int ans = 0;\n    int bestPrev = 0;\n\n    for (final int value : values) {\n      ans = Math.max(ans, value + bestPrev);\n      bestPrev = Math.max(bestPrev, value) - 1;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxScoreSightseeingPair(self, values: List[int]) -> int:\n    ans = 0\n    bestPrev = 0\n\n    for value in values:\n      ans = max(ans, value + bestPrev)\n      bestPrev = max(bestPrev, value) - 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}