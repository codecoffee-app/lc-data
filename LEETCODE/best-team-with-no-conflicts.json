{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1626",
            "title": "Best Team With No Conflicts",
            "titleSlug": "best-team-with-no-conflicts",
            "content": "<p>You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the <strong>sum</strong> of scores of all the players in the team.</p>\n\n<p>However, the basketball team is not allowed to have <strong>conflicts</strong>. A <strong>conflict</strong> exists if a younger player has a <strong>strictly higher</strong> score than an older player. A conflict does <strong>not</strong> occur between players of the same age.</p>\n\n<p>Given two lists, <code>scores</code> and <code>ages</code>, where each <code>scores[i]</code> and <code>ages[i]</code> represents the score and age of the <code>i<sup>th</sup></code> player, respectively, return <em>the highest overall score of all possible basketball teams</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> scores = [1,3,5,10,15], ages = [1,2,3,4,5]\n<strong>Output:</strong> 34\n<strong>Explanation:</strong>&nbsp;You can choose all the players.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> scores = [4,5,6,5], ages = [2,1,2,1]\n<strong>Output:</strong> 16\n<strong>Explanation:</strong>&nbsp;It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> scores = [1,2,3,5], ages = [8,9,10,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>&nbsp;It is best to choose the first 3 players. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= scores.length, ages.length &lt;= 1000</code></li>\n\t<li><code>scores.length == ages.length</code></li>\n\t<li><code>1 &lt;= scores[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= ages[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2872,
            "dislikes": 93,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"78.9K\", \"totalSubmission\": \"156.3K\", \"totalAcceptedRaw\": 78947, \"totalSubmissionRaw\": 156323, \"acRate\": \"50.5%\"}",
            "hints": [
                "First, sort players by age and break ties by their score. You can now consider the players from left to right.",
                "If you choose to include a player, you must only choose players with at least that score later on."
            ],
            "rephrased": {
                "body": "You are managing a basketball team and want to select a team with the highest possible overall score for an upcoming tournament. The team's score is the sum of the scores of all the players you choose.\n\nHowever, the team must not have any conflicts. A conflict arises if a younger player has a strictly higher score than an older player. Players of the same age do not cause conflicts.\n\nGiven two lists, `scores` and `ages`, where `scores[i]` and `ages[i]` represent the score and age of the i-th player, respectively, determine the highest possible overall score of a basketball team with no conflicts.",
                "constraints": [
                    "1 <= scores.length, ages.length <= 1000",
                    "scores.length == ages.length",
                    "1 <= scores[i] <= 10^6",
                    "1 <= ages[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "scores = [1,3,5,10,15], ages = [1,2,3,4,5]",
                        "output": "34",
                        "explanation": "The optimal solution is to select all players, resulting in a total score of 1 + 3 + 5 + 10 + 15 = 34. Since the ages are in increasing order with increasing scores, there are no conflicts."
                    },
                    {
                        "input": "scores = [4,5,6,5], ages = [2,1,2,1]",
                        "output": "16",
                        "explanation": "The best team to choose consists of the last three players. Their scores are 5, 6, and 5, and their ages are 1, 2, and 1, respectively. This selection avoids conflicts, and the total score is 5 + 6 + 5 = 16."
                    },
                    {
                        "input": "scores = [1,2,3,5], ages = [8,9,10,1]",
                        "output": "6",
                        "explanation": "The optimal selection is the first three players with scores 1, 2, and 3 and ages 8, 9, and 10. This selection results in a total score of 1 + 2 + 3 = 6, while avoiding the youngest player, whose higher score would cause conflicts."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "First, sort players by age and break ties by their score. You can now consider the players from left to right.",
            "If you choose to include a player, you must only choose players with at least that score later on."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ]
    }
}