{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "188",
            "title": "Best Time to Buy and Sell Stock IV",
            "titleSlug": "best-time-to-buy-and-sell-stock-iv",
            "content": "<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day, and an integer <code>k</code>.</p>\n\n<p>Find the maximum profit you can achieve. You may complete at most <code>k</code> transactions: i.e. you may buy at most <code>k</code> times and sell at most <code>k</code> times.</p>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, prices = [2,4,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, prices = [3,2,6,5,0,3]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n\t<li><code>1 &lt;= prices.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 7186,
            "dislikes": 204,
            "similarQuestions": "[{\"title\": \"Best Time to Buy and Sell Stock\", \"titleSlug\": \"best-time-to-buy-and-sell-stock\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock II\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock III\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Profit From Trading Stocks\", \"titleSlug\": \"maximum-profit-from-trading-stocks\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"418.5K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 418471, \"totalSubmissionRaw\": 1005021, \"acRate\": \"41.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array `prices` representing the price of a stock on each day, and an integer `k`, determine the maximum profit achievable by completing at most `k` transactions.  Each transaction consists of buying a stock and selling it. You cannot engage in multiple transactions simultaneously; you must sell the stock before buying again.",
                "constraints": [
                    "1 <= k <= 100",
                    "1 <= prices.length <= 1000",
                    "0 <= prices[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "k = 2, prices = [2,4,1]",
                        "output": "2",
                        "explanation": "Buy on day 1 (price = 2) and sell on day 2 (price = 4), resulting in a profit of 4 - 2 = 2."
                    },
                    {
                        "input": "k = 2, prices = [3,2,6,5,0,3]",
                        "output": "7",
                        "explanation": "Buy on day 2 (price = 2) and sell on day 3 (price = 6), resulting in a profit of 6 - 2 = 4. Then, buy on day 5 (price = 0) and sell on day 6 (price = 3), resulting in a profit of 3 - 0 = 3. The total profit is 4 + 3 = 7."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "best-time-to-buy-and-sell-stock",
                "title": "Best Time to Buy and Sell Stock",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "best-time-to-buy-and-sell-stock-ii",
                "title": "Best Time to Buy and Sell Stock II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "best-time-to-buy-and-sell-stock-iii",
                "title": "Best Time to Buy and Sell Stock III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-profit-from-trading-stocks",
                "title": "Maximum Profit From Trading Stocks",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxProfit(int k, vector<int>& prices) {\n    if (k >= prices.size() / 2) {\n      int sell = 0;\n      int hold = INT_MIN;\n\n      for (const int price : prices) {\n        sell = max(sell, hold + price);\n        hold = max(hold, sell - price);\n      }\n\n      return sell;\n    }\n\n    vector<int> sell(k + 1);\n    vector<int> hold(k + 1, INT_MIN);\n\n    for (const int price : prices)\n      for (int i = k; i > 0; --i) {\n        sell[i] = max(sell[i], hold[i] + price);\n        hold[i] = max(hold[i], sell[i - 1] - price);\n      }\n\n    return sell[k];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxProfit(int k, int[] prices) {\n    if (k >= prices.length / 2) {\n      int sell = 0;\n      int hold = Integer.MIN_VALUE;\n\n      for (final int price : prices) {\n        sell = Math.max(sell, hold + price);\n        hold = Math.max(hold, sell - price);\n      }\n\n      return sell;\n    }\n\n    int[] sell = new int[k + 1];\n    int[] hold = new int[k + 1];\n    Arrays.fill(hold, Integer.MIN_VALUE);\n\n    for (final int price : prices)\n      for (int i = k; i > 0; --i) {\n        sell[i] = Math.max(sell[i], hold[i] + price);\n        hold[i] = Math.max(hold[i], sell[i - 1] - price);\n      }\n\n    return sell[k];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxProfit(self, k: int, prices: List[int]) -> int:\n    if k >= len(prices) // 2:\n      sell = 0\n      hold = -math.inf\n\n      for price in prices:\n        sell = max(sell, hold + price)\n        hold = max(hold, sell - price)\n\n      return sell\n\n    sell = [0] * (k + 1)\n    hold = [-math.inf] * (k + 1)\n\n    for price in prices:\n      for i in range(k, 0, -1):\n        sell[i] = max(sell[i], hold[i] + price)\n        hold[i] = max(hold[i], sell[i - 1] - price)\n\n    return sell[k]\n",
                "lang_text": "py"
            }
        }
    }
}