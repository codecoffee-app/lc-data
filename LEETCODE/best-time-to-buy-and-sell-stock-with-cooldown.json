{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "309",
            "title": "Best Time to Buy and Sell Stock with Cooldown",
            "titleSlug": "best-time-to-buy-and-sell-stock-with-cooldown",
            "content": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:</p>\n\n<ul>\n\t<li>After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).</li>\n</ul>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,2,3,0,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> transactions = [buy, sell, cooldown, buy, sell]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9103,
            "dislikes": 304,
            "similarQuestions": "[{\"title\": \"Best Time to Buy and Sell Stock\", \"titleSlug\": \"best-time-to-buy-and-sell-stock\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock II\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"469.7K\", \"totalSubmission\": \"815.2K\", \"totalAcceptedRaw\": 469688, \"totalSubmissionRaw\": 815237, \"acRate\": \"57.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array `prices` where `prices[i]` represents the price of a stock on the i-th day, determine the maximum profit you can achieve by buying and selling the stock multiple times. You have a cooldown period of one day after selling a stock, meaning you cannot buy on the day immediately following a sell.  You cannot engage in multiple transactions simultaneously (you must sell before you buy again).",
                "constraints": [
                    "1 <= prices.length <= 5000",
                    "0 <= prices[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,0,2]",
                        "output": "3",
                        "explanation": "The optimal transactions are: buy on day 1, sell on day 2 (profit 1), cooldown on day 3, buy on day 4, and sell on day 5 (profit 2). Total profit: 1 + 2 = 3."
                    },
                    {
                        "input": "[1]",
                        "output": "0",
                        "explanation": "No transactions can be made with only one day, resulting in zero profit."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "best-time-to-buy-and-sell-stock",
                "title": "Best Time to Buy and Sell Stock",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "best-time-to-buy-and-sell-stock-ii",
                "title": "Best Time to Buy and Sell Stock II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxProfit(vector<int>& prices) {\n    int sell = 0;\n    int hold = INT_MIN;\n    int prev = 0;\n\n    for (const int price : prices) {\n      const int cache = sell;\n      sell = max(sell, hold + price);\n      hold = max(hold, prev - price);\n      prev = cache;\n    }\n\n    return sell;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxProfit(int[] prices) {\n    int sell = 0;\n    int hold = Integer.MIN_VALUE;\n    int prev = 0;\n\n    for (final int price : prices) {\n      final int cache = sell;\n      sell = Math.max(sell, hold + price);\n      hold = Math.max(hold, prev - price);\n      prev = cache;\n    }\n\n    return sell;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxProfit(self, prices: List[int]) -> int:\n    sell = 0\n    hold = -math.inf\n    prev = 0\n\n    for price in prices:\n      cache = sell\n      sell = max(sell, hold + price)\n      hold = max(hold, prev - price)\n      prev = cache\n\n    return sell\n",
                "lang_text": "py"
            }
        }
    }
}