{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "693",
            "title": "Binary Number with Alternating Bits",
            "titleSlug": "binary-number-with-alternating-bits",
            "content": "<p>Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The binary representation of 5 is: 101\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 7\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The binary representation of 7 is: 111.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 11\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The binary representation of 11 is: 1011.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1313,
            "dislikes": 110,
            "similarQuestions": "[{\"title\": \"Number of 1 Bits\", \"titleSlug\": \"number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"126.1K\", \"totalSubmission\": \"203.2K\", \"totalAcceptedRaw\": 126079, \"totalSubmissionRaw\": 203238, \"acRate\": \"62.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a positive integer, determine if its binary representation has alternating bits. This means that any two adjacent bits in the binary representation must have different values.",
                "constraints": [
                    "1 <= n <= 2<sup>31</sup> - 1"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "true",
                        "explanation": "The binary representation of 5 is 101, where adjacent bits alternate."
                    },
                    {
                        "input": "7",
                        "output": "false",
                        "explanation": "The binary representation of 7 is 111, where adjacent bits do not alternate."
                    },
                    {
                        "input": "11",
                        "output": "false",
                        "explanation": "The binary representation of 11 is 1011, where adjacent bits do not alternate."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "number-of-1-bits",
                "title": "Number of 1 Bits",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool hasAlternatingBits(int n) {\n    //            n = (010101)2\n    //       n >> 2 = (000101)2\n    // n ^ (n >> 2) = (010000)2 = a\n    //        a - 1 = (001111)2\n    //  a & (a - 1) = 0\n    const int a = n ^ (n >> 2);\n    return (a & (a - 1)) == 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean hasAlternatingBits(int n) {\n    //            n = (010101)2\n    //       n >> 2 = (000101)2\n    // n ^ (n >> 2) = (010000)2 = a\n    //        a - 1 = (001111)2\n    //  a & (a - 1) = 0\n    final int a = n ^ (n >> 2);\n    return (a & (a - 1)) == 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def hasAlternatingBits(self, n: int) -> bool:\n    #            n = (010101)2\n    #       n >> 2 = (000101)2\n    # n ^ (n >> 2) = (010000)2 = a\n    #        a - 1 = (001111)2\n    #  a & (a - 1) = 0\n    a = n ^ (n >> 2)\n    return (a & (a - 1)) == 0\n",
                "lang_text": "py"
            }
        }
    }
}