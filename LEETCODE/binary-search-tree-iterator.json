{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "173",
            "title": "Binary Search Tree Iterator",
            "titleSlug": "binary-search-tree-iterator",
            "content": "<p>Implement the <code>BSTIterator</code> class that represents an iterator over the <strong><a href=\"https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR)\" target=\"_blank\">in-order traversal</a></strong> of a binary search tree (BST):</p>\n\n<ul>\n\t<li><code>BSTIterator(TreeNode root)</code> Initializes an object of the <code>BSTIterator</code> class. The <code>root</code> of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.</li>\n\t<li><code>boolean hasNext()</code> Returns <code>true</code> if there exists a number in the traversal to the right of the pointer, otherwise returns <code>false</code>.</li>\n\t<li><code>int next()</code> Moves the pointer to the right, then returns the number at the pointer.</li>\n</ul>\n\n<p>Notice that by initializing the pointer to a non-existent smallest number, the first call to <code>next()</code> will return the smallest element in the BST.</p>\n\n<p>You may assume that <code>next()</code> calls will always be valid. That is, there will be at least a next number in the in-order traversal when <code>next()</code> is called.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png\" style=\"width: 189px; height: 178px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;BSTIterator&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\n<strong>Output</strong>\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\n<strong>Explanation</strong>\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>6</sup></code></li>\n\t<li>At most <code>10<sup>5</sup></code> calls will be made to <code>hasNext</code>, and <code>next</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Could you implement <code>next()</code> and <code>hasNext()</code> to run in average <code>O(1)</code> time and use&nbsp;<code>O(h)</code> memory, where <code>h</code> is the height of the tree?</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8258,
            "dislikes": 479,
            "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Flatten 2D Vector\", \"titleSlug\": \"flatten-2d-vector\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Zigzag Iterator\", \"titleSlug\": \"zigzag-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Peeking Iterator\", \"titleSlug\": \"peeking-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Inorder Successor in BST\", \"titleSlug\": \"inorder-successor-in-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Search Tree Iterator II\", \"titleSlug\": \"binary-search-tree-iterator-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                },
                {
                    "name": "Iterator",
                    "slug": "iterator"
                }
            ],
            "stats": "{\"totalAccepted\": \"736.8K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 736774, \"totalSubmissionRaw\": 1034346, \"acRate\": \"71.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design and implement a `BSTIterator` class that iterates through a binary search tree (BST) in in-order traversal. The class should support the following methods:\n\n*   `BSTIterator(TreeNode root)`: Initializes the iterator with the root of the BST. The iterator starts conceptually before the smallest element in the tree.\n*   `hasNext()`: Returns `true` if there are more elements in the in-order traversal, and `false` otherwise.\n*   `next()`: Moves the iterator to the next element in the in-order traversal and returns that element's value.\n\nThe `next()` method will only be called when `hasNext()` returns `true`.",
                "constraints": [
                    "The number of nodes in the tree is in the range `[1, 10^5]`.",
                    "`0 <= Node.val <= 10^6`",
                    "At most `10^5` calls will be made to `hasNext` and `next`."
                ],
                "testcases": [
                    {
                        "input": "[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]",
                        "output": "[null, 3, 7, true, 9, true, 15, true, 20, false]",
                        "explanation": "First, a BSTIterator is initialized with the root node representing the BST [7, 3, 15, null, null, 9, 20]. The in-order traversal of this tree is [3, 7, 9, 15, 20].\n\n- next(): Returns 3 (the smallest element).\n- next(): Returns 7.\n- hasNext(): Returns true.\n- next(): Returns 9.\n- hasNext(): Returns true.\n- next(): Returns 15.\n- hasNext(): Returns true.\n- next(): Returns 20.\n- hasNext(): Returns false (no more elements in the in-order traversal)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "binary-tree-inorder-traversal",
                "title": "Binary Tree Inorder Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "flatten-2d-vector",
                "title": "Flatten 2D Vector",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "zigzag-iterator",
                "title": "Zigzag Iterator",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "peeking-iterator",
                "title": "Peeking Iterator",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "inorder-successor-in-bst",
                "title": "Inorder Successor in BST",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "binary-search-tree-iterator-ii",
                "title": "Binary Search Tree Iterator II",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            },
            {
                "name": "Iterator",
                "slug": "iterator"
            }
        ]
    }
}