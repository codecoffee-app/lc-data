{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "704",
            "title": "Binary Search",
            "titleSlug": "binary-search",
            "content": "<p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.</p>\n\n<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,3,5,9,12], target = 9\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 9 exists in nums and its index is 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,3,5,9,12], target = 2\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> 2 does not exist in nums so return -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt; nums[i], target &lt; 10<sup>4</sup></code></li>\n\t<li>All the integers in <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is sorted in ascending order.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 11286,
            "dislikes": 231,
            "similarQuestions": "[{\"title\": \"Search in a Sorted Array of Unknown Size\", \"titleSlug\": \"search-in-a-sorted-array-of-unknown-size\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Count of Positive Integer and Negative Integer\", \"titleSlug\": \"maximum-count-of-positive-integer-and-negative-integer\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"2.2M\", \"totalSubmission\": \"3.8M\", \"totalAcceptedRaw\": 2152036, \"totalSubmissionRaw\": 3780142, \"acRate\": \"56.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a sorted array of integers `nums` and an integer `target`, implement a binary search algorithm to find the index of `target` in `nums`. If `target` is found, return its index; otherwise, return -1. The algorithm must have O(log n) runtime complexity.",
                "constraints": [
                    "1 <= nums.length <= 10^4",
                    "-10^4 < nums[i], target < 10^4",
                    "All integers in `nums` are unique.",
                    "`nums` is sorted in ascending order."
                ],
                "testcases": [
                    {
                        "input": "nums = [-1,0,3,5,9,12], target = 9",
                        "output": "4",
                        "explanation": "The target 9 exists in the array at index 4."
                    },
                    {
                        "input": "nums = [-1,0,3,5,9,12], target = 2",
                        "output": "-1",
                        "explanation": "The target 2 does not exist in the array, so -1 is returned."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "search-in-a-sorted-array-of-unknown-size",
                "title": "Search in a Sorted Array of Unknown Size",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-count-of-positive-integer-and-negative-integer",
                "title": "Maximum Count of Positive Integer and Negative Integer",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int search(vector<int>& nums, int target) {\n    const auto it = lower_bound(nums.begin(), nums.end(), target);\n    return (it == nums.cend() || *it != target) ? -1\n                                                : distance(nums.begin(), it);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int search(int[] nums, int target) {\n    final int i = Arrays.binarySearch(nums, target);\n    return i < 0 ? -1 : i;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def search(self, nums: List[int], target: int) -> int:\n    i = bisect.bisect_left(nums, target)\n    return -1 if i == len(nums) or nums[i] != target else i\n",
                "lang_text": "py"
            }
        }
    }
}