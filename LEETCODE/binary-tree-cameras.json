{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "968",
            "title": "Binary Tree Cameras",
            "titleSlug": "binary-tree-cameras",
            "content": "<p>You are given the <code>root</code> of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.</p>\n\n<p>Return <em>the minimum number of cameras needed to monitor all nodes of the tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_01.png\" style=\"width: 138px; height: 163px;\" />\n<pre>\n<strong>Input:</strong> root = [0,0,null,0,0]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> One camera is enough to monitor all nodes if placed as shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_02.png\" style=\"width: 139px; height: 312px;\" />\n<pre>\n<strong>Input:</strong> root = [0,0,null,0,null,0,null,null,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>\n\t<li><code>Node.val == 0</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5161,
            "dislikes": 68,
            "similarQuestions": "[{\"title\": \"Distribute Coins in Binary Tree\", \"titleSlug\": \"distribute-coins-in-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Choose Edges to Maximize Score in a Tree\", \"titleSlug\": \"choose-edges-to-maximize-score-in-a-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"130.6K\", \"totalSubmission\": \"281.2K\", \"totalAcceptedRaw\": 130633, \"totalSubmissionRaw\": 281225, \"acRate\": \"46.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, determine the minimum number of cameras needed to monitor all nodes. A camera placed at a node can monitor its parent, itself, and its immediate children.  Find the smallest number of cameras required to cover the entire tree.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 1000].",
                    "Node.val == 0"
                ],
                "testcases": [
                    {
                        "input": "[0,0,null,0,0]",
                        "output": "1",
                        "explanation": "One camera is sufficient to monitor all nodes when positioned as shown in the original problem description."
                    },
                    {
                        "input": "[0,0,null,0,null,0,null,null,0]",
                        "output": "2",
                        "explanation": "A minimum of two cameras is necessary to monitor all nodes in the tree. An example of a valid camera placement is shown in the original problem description."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "distribute-coins-in-binary-tree",
                "title": "Distribute Coins in Binary Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "choose-edges-to-maximize-score-in-a-tree",
                "title": "Choose Edges to Maximize Score in a Tree",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minCameraCover(TreeNode* root) {\n    vector<int> ans = dfs(root);\n    return min(ans[1], ans[2]);\n  }\n\n private:\n  // 0 := all nodes below root are covered except root\n  // 1 := all nodes below and including root are covered w/o camera here\n  // 2 := all nodes below and including root are covered w/ camera here\n  vector<int> dfs(TreeNode* root) {\n    if (root == nullptr)\n      return {0, 0, 1000};\n\n    vector<int> l = dfs(root->left);\n    vector<int> r = dfs(root->right);\n\n    const int s0 = l[1] + r[1];\n    const int s1 = min(l[2] + min(r[1], r[2]),  //\n                       r[2] + min(l[1], l[2]));\n    const int s2 = min({l[0], l[1], l[2]}) +  //\n                   min({r[0], r[1], r[2]}) + 1;\n    return {s0, s1, s2};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minCameraCover(TreeNode root) {\n    int[] ans = dfs(root);\n    return Math.min(ans[1], ans[2]);\n  }\n\n  // 0 := all nodes below root are covered except root\n  // 1 := all nodes below and including root are covered w/o camera here\n  // 2 := all nodes below and including root are covered w/ camera here\n  private int[] dfs(TreeNode root) {\n    if (root == null)\n      return new int[] {0, 0, 1000};\n\n    int[] l = dfs(root.left);\n    int[] r = dfs(root.right);\n\n    final int s0 = l[1] + r[1];\n    final int s1 = Math.min(l[2] + Math.min(r[1], r[2]), //\n                            r[2] + Math.min(l[1], l[2]));\n    final int s2 = Math.min(l[0], Math.min(l[1], l[2])) + //\n                   Math.min(r[0], Math.min(r[1], r[2])) + 1;\n\n    return new int[] {s0, s1, s2};\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}