{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1145",
            "title": "Binary Tree Coloring Game",
            "titleSlug": "binary-tree-coloring-game",
            "content": "<p>Two players play a turn based game on a binary tree. We are given the <code>root</code> of this binary tree, and the number of nodes <code>n</code> in the tree. <code>n</code> is odd, and each node has a distinct value from <code>1</code> to <code>n</code>.</p>\n\n<p>Initially, the first player names a value <code>x</code> with <code>1 &lt;= x &lt;= n</code>, and the second player names a value <code>y</code> with <code>1 &lt;= y &lt;= n</code> and <code>y != x</code>. The first player colors the node with value <code>x</code> red, and the second player colors the node with value <code>y</code> blue.</p>\n\n<p>Then, the players take turns starting with the first player. In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an <strong>uncolored</strong> neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)</p>\n\n<p>If (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends, and the winner is the player that colored more nodes.</p>\n\n<p>You are the second player. If it is possible to choose such a <code>y</code> to ensure you win the game, return <code>true</code>. If it is not possible, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/08/01/1480-binary-tree-coloring-game.png\" style=\"width: 500px; height: 310px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3\n<strong>Output:</strong> true\n<strong>Explanation: </strong>The second player can choose the node with value 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2,3], n = 3, x = 1\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is <code>n</code>.</li>\n\t<li><code>1 &lt;= x &lt;= n &lt;= 100</code></li>\n\t<li><code>n</code> is odd.</li>\n\t<li>1 &lt;= Node.val &lt;= n</li>\n\t<li>All the values of the tree are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1316,
            "dislikes": 206,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"44K\", \"totalSubmission\": \"84.8K\", \"totalAcceptedRaw\": 43979, \"totalSubmissionRaw\": 84758, \"acRate\": \"51.9%\"}",
            "hints": [
                "The best move y must be immediately adjacent to x, since it locks out that subtree.",
                "Can you count each of (up to) 3 different subtrees neighboring x?"
            ],
            "rephrased": {
                "body": "Two players are engaged in a turn-based game played on a binary tree.  The tree's root is provided, along with the total number of nodes, `n`. Crucially, `n` is odd, and each node holds a distinct value ranging from 1 to `n`. The game commences with the first player selecting a value `x` (1 <= x <= n), followed by the second player choosing a value `y` (1 <= y <= n, y != x). The first player colors node `x` red, while the second player colors node `y` blue. Players alternate turns, starting with the first player.  During a turn, a player selects a node of their color (red for player 1, blue for player 2) and colors an *uncolored* neighbor of that node. Neighbors are the left child, right child, or parent. A player must pass their turn if they cannot select a valid node to color. If both players pass consecutively, the game ends, and the player with the most colored nodes wins. As the second player, determine if there exists a value `y` that guarantees your victory. Return `true` if such a `y` exists; otherwise, return `false`.",
                "constraints": [
                    "The number of nodes in the tree is `n`.",
                    "1 <= x <= n <= 100",
                    "`n` is odd.",
                    "1 <= Node.val <= n",
                    "All the values of the tree are **unique**."
                ],
                "testcases": [
                    {
                        "input": "root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3",
                        "output": "true",
                        "explanation": "The second player can choose the node with value 2. By choosing node 2, the second player can control a larger portion of the tree, guaranteeing a win."
                    },
                    {
                        "input": "root = [1,2,3], n = 3, x = 1",
                        "output": "false",
                        "explanation": "In this scenario, regardless of the second player's choice for 'y', the first player will always be able to color more nodes and win the game."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The best move y must be immediately adjacent to x, since it locks out that subtree.",
            "Can you count each of (up to) 3 different subtrees neighboring x?"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ]
    }
}