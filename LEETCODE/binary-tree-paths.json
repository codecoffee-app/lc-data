{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "257",
            "title": "Binary Tree Paths",
            "titleSlug": "binary-tree-paths",
            "content": "<p>Given the <code>root</code> of a binary tree, return <em>all root-to-leaf paths in <strong>any order</strong></em>.</p>\n\n<p>A <strong>leaf</strong> is a node with no children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg\" style=\"width: 207px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,5]\n<strong>Output:</strong> [&quot;1-&gt;2-&gt;5&quot;,&quot;1-&gt;3&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [&quot;1&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6331,
            "dislikes": 275,
            "similarQuestions": "[{\"title\": \"Path Sum II\", \"titleSlug\": \"path-sum-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest String Starting From Leaf\", \"titleSlug\": \"smallest-string-starting-from-leaf\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Step-By-Step Directions From a Binary Tree Node to Another\", \"titleSlug\": \"step-by-step-directions-from-a-binary-tree-node-to-another\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"680.9K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 680923, \"totalSubmissionRaw\": 1082004, \"acRate\": \"62.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, find and return all root-to-leaf paths. A leaf node is defined as a node with no children. The order of the paths in the output does not matter.",
                "constraints": [
                    "The number of nodes in the tree is between 1 and 100, inclusive.",
                    "The value of each node is between -100 and 100, inclusive."
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,null,5]",
                        "output": "[\"1->2->5\",\"1->3\"]",
                        "explanation": "The binary tree has two root-to-leaf paths: 1->2->5 and 1->3."
                    },
                    {
                        "input": "[1]",
                        "output": "[\"1\"]",
                        "explanation": "The binary tree has one node, which is also a leaf, so the only path is 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "path-sum-ii",
                "title": "Path Sum II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "smallest-string-starting-from-leaf",
                "title": "Smallest String Starting From Leaf",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "step-by-step-directions-from-a-binary-tree-node-to-another",
                "title": "Step-By-Step Directions From a Binary Tree Node to Another",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> binaryTreePaths(TreeNode* root) {\n    vector<string> ans;\n    dfs(root, {}, ans);\n    return ans;\n  }\n\n private:\n  void dfs(TreeNode* root, vector<string>&& path, vector<string>& ans) {\n    if (root == nullptr)\n      return;\n    if (root->left == nullptr && root->right == nullptr) {\n      ans.push_back(join(path) + to_string(root->val));\n      return;\n    }\n\n    path.push_back(to_string(root->val) + \"->\");\n    dfs(root->left, move(path), ans);\n    dfs(root->right, move(path), ans);\n    path.pop_back();\n  }\n\n  string join(const vector<string>& path) {\n    string joined;\n    for (const string& s : path)\n      joined += s;\n    return joined;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> binaryTreePaths(TreeNode root) {\n    List<String> ans = new ArrayList<>();\n    dfs(root, new StringBuilder(), ans);\n    return ans;\n  }\n\n  private void dfs(TreeNode root, StringBuilder sb, List<String> ans) {\n    if (root == null)\n      return;\n    if (root.left == null && root.right == null) {\n      ans.add(sb.append(root.val).toString());\n      return;\n    }\n\n    final int length = sb.length();\n    dfs(root.left, sb.append(root.val).append(\"->\"), ans);\n    sb.setLength(length);\n    dfs(root.right, sb.append(root.val).append(\"->\"), ans);\n    sb.setLength(length);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:\n    ans = []\n\n    def dfs(root: Optional[TreeNode], path: List[str]) -> None:\n      if not root:\n        return\n      if not root.left and not root.right:\n        ans.append(''.join(path) + str(root.val))\n        return\n\n      path.append(str(root.val) + '->')\n      dfs(root.left, path)\n      dfs(root.right, path)\n      path.pop()\n\n    dfs(root, [])\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}