{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "145",
            "title": "Binary Tree Postorder Traversal",
            "titleSlug": "binary-tree-postorder-traversal",
            "content": "<p>Given the <code>root</code> of a&nbsp;binary tree, return <em>the postorder traversal of its nodes&#39; values</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/pre1.jpg\" style=\"width: 127px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,2,3]\n<strong>Output:</strong> [3,2,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6641,
            "dislikes": 183,
            "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Postorder Traversal\", \"titleSlug\": \"n-ary-tree-postorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Fuel Cost to Report to the Capital\", \"titleSlug\": \"minimum-fuel-cost-to-report-to-the-capital\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 1097107, \"totalSubmissionRaw\": 1565883, \"acRate\": \"70.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, return the postorder traversal of its nodes' values.",
                "constraints": [
                    "The number of nodes in the tree is in the range [0, 100].",
                    "-100 <= Node.val <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1,null,2,3]",
                        "output": "[3,2,1]",
                        "explanation": "Traverse the left subtree (null), then the right subtree (2,3 which traverses as 3,2), and finally the root (1). Thus, the postorder traversal is [3,2,1]."
                    },
                    {
                        "input": "[]",
                        "output": "[]",
                        "explanation": "An empty tree has an empty postorder traversal."
                    },
                    {
                        "input": "[1]",
                        "output": "[1]",
                        "explanation": "A single-node tree has a postorder traversal equal to the node's value."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "binary-tree-inorder-traversal",
                "title": "Binary Tree Inorder Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "n-ary-tree-postorder-traversal",
                "title": "N-ary Tree Postorder Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-fuel-cost-to-report-to-the-capital",
                "title": "Minimum Fuel Cost to Report to the Capital",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> postorderTraversal(TreeNode* root) {\n    vector<int> ans;\n    postorder(root, ans);\n    return ans;\n  }\n\n private:\n  void postorder(TreeNode* root, vector<int>& ans) {\n    if (root == nullptr)\n      return;\n\n    postorder(root->left, ans);\n    postorder(root->right, ans);\n    ans.push_back(root->val);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> postorderTraversal(TreeNode root) {\n    List<Integer> ans = new ArrayList<>();\n    postorder(root, ans);\n    return ans;\n  }\n\n  private void postorder(TreeNode root, List<Integer> ans) {\n    if (root == null)\n      return;\n\n    postorder(root.left, ans);\n    postorder(root.right, ans);\n    ans.add(root.val);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n    ans = []\n\n    def postorder(root: Optional[TreeNode]) -> None:\n      if not root:\n        return\n\n      postorder(root.left)\n      postorder(root.right)\n      ans.append(root.val)\n\n    postorder(root)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}