{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "199",
            "title": "Binary Tree Right Side View",
            "titleSlug": "binary-tree-right-side-view",
            "content": "<p>Given the <code>root</code> of a binary tree, imagine yourself standing on the <strong>right side</strong> of it, return <em>the values of the nodes you can see ordered from top to bottom</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/14/tree.jpg\" style=\"width: 401px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,5,null,4]\n<strong>Output:</strong> [1,3,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3]\n<strong>Output:</strong> [1,3]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 11443,
            "dislikes": 804,
            "similarQuestions": "[{\"title\": \"Populating Next Right Pointers in Each Node\", \"titleSlug\": \"populating-next-right-pointers-in-each-node\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Boundary of Binary Tree\", \"titleSlug\": \"boundary-of-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 1150327, \"totalSubmissionRaw\": 1838429, \"acRate\": \"62.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, return an array containing the values of the nodes visible from the right side of the tree, ordered from top to bottom. Imagine yourself standing on the right side of the tree.",
                "constraints": [
                    "The number of nodes in the tree is in the range [0, 100].",
                    "-100 <= Node.val <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,null,5,null,4]",
                        "output": "[1,3,4]",
                        "explanation": "Starting from the root, the rightmost node at each level is added to the result. At the root level it is 1, next level it is 3 and the last level it is 4."
                    },
                    {
                        "input": "[1,null,3]",
                        "output": "[1,3]",
                        "explanation": "Starting from the root, the rightmost node at each level is added to the result. At the root level it is 1, next level it is 3."
                    },
                    {
                        "input": "[]",
                        "output": "[]",
                        "explanation": "The tree is empty, so the result is an empty array."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "populating-next-right-pointers-in-each-node",
                "title": "Populating Next Right Pointers in Each Node",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "boundary-of-binary-tree",
                "title": "Boundary of Binary Tree",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> rightSideView(TreeNode* root) {\n    if (root == nullptr)\n      return {};\n\n    vector<int> ans;\n    queue<TreeNode*> q{{root}};\n\n    while (!q.empty()) {\n      const int size = q.size();\n      for (int i = 0; i < size; ++i) {\n        TreeNode* node = q.front();\n        q.pop();\n        if (i == size - 1)\n          ans.push_back(node->val);\n        if (node->left)\n          q.push(node->left);\n        if (node->right)\n          q.push(node->right);\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> rightSideView(TreeNode root) {\n    if (root == null)\n      return new ArrayList<>();\n\n    List<Integer> ans = new ArrayList<>();\n    Queue<TreeNode> q = new ArrayDeque<>(Arrays.asList(root));\n\n    while (!q.isEmpty()) {\n      final int size = q.size();\n      for (int i = 0; i < size; ++i) {\n        TreeNode node = q.poll();\n        if (i == size - 1)\n          ans.add(node.val);\n        if (node.left != null)\n          q.offer(node.left);\n        if (node.right != null)\n          q.offer(node.right);\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n    if not root:\n      return []\n\n    ans = []\n    q = collections.deque([root])\n\n    while q:\n      size = len(q)\n      for i in range(size):\n        root = q.popleft()\n        if i == size - 1:\n          ans.append(root.val)\n        if root.left:\n          q.append(root.left)\n        if root.right:\n          q.append(root.right)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}