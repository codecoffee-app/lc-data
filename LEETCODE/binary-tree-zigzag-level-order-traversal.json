{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "103",
            "title": "Binary Tree Zigzag Level Order Traversal",
            "titleSlug": "binary-tree-zigzag-level-order-traversal",
            "content": "<p>Given the <code>root</code> of a binary tree, return <em>the zigzag level order traversal of its nodes&#39; values</em>. (i.e., from left to right, then right to left for the next level and alternate between).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [[3],[20,9],[15,7]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10371,
            "dislikes": 273,
            "similarQuestions": "[{\"title\": \"Binary Tree Level Order Traversal\", \"titleSlug\": \"binary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.9M\", \"totalAcceptedRaw\": 1080008, \"totalSubmissionRaw\": 1852935, \"acRate\": \"58.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, traverse the tree in a zigzag level order. This means visiting nodes level by level, alternating between left-to-right and right-to-left directions for each level. Return a list of lists, where each inner list represents a level and contains the node values in the appropriate order.",
                "constraints": [
                    "The number of nodes in the tree is in the range [0, 2000].",
                    "-100 <= Node.val <= 100"
                ],
                "testcases": [
                    {
                        "input": "[3,9,20,null,null,15,7]",
                        "output": "[[3],[20,9],[15,7]]",
                        "explanation": "The tree is traversed level by level. Level 0: [3], Level 1: [20, 9] (right to left), Level 2: [15, 7] (left to right)."
                    },
                    {
                        "input": "[1]",
                        "output": "[[1]]",
                        "explanation": "A single node tree has only one level."
                    },
                    {
                        "input": "[]",
                        "output": "[]",
                        "explanation": "An empty tree returns an empty list."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "binary-tree-level-order-traversal",
                "title": "Binary Tree Level Order Traversal",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> zigzagLevelOrder(TreeNode* root) {\n    if (root == nullptr)\n      return {};\n\n    vector<vector<int>> ans;\n    deque<TreeNode*> dq{{root}};\n    bool isLeftToRight = true;\n\n    while (!dq.empty()) {\n      vector<int> currLevel;\n      for (int sz = dq.size(); sz > 0; --sz)\n        if (isLeftToRight) {\n          TreeNode* node = dq.front();\n          dq.pop_front();\n          currLevel.push_back(node->val);\n          if (node->left)\n            dq.push_back(node->left);\n          if (node->right)\n            dq.push_back(node->right);\n        } else {\n          TreeNode* node = dq.back();\n          dq.pop_back();\n          currLevel.push_back(node->val);\n          if (node->right)\n            dq.push_front(node->right);\n          if (node->left)\n            dq.push_front(node->left);\n        }\n      ans.push_back(currLevel);\n      isLeftToRight = !isLeftToRight;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n    if (root == null)\n      return new ArrayList<>();\n\n    List<List<Integer>> ans = new ArrayList<>();\n    Deque<TreeNode> dq = new ArrayDeque<>(Arrays.asList(root));\n    boolean isLeftToRight = true;\n\n    while (!dq.isEmpty()) {\n      List<Integer> currLevel = new ArrayList<>();\n      for (int sz = dq.size(); sz > 0; --sz)\n        if (isLeftToRight) {\n          TreeNode node = dq.pollFirst();\n          currLevel.add(node.val);\n          if (node.left != null)\n            dq.addLast(node.left);\n          if (node.right != null)\n            dq.addLast(node.right);\n        } else {\n          TreeNode node = dq.pollLast();\n          currLevel.add(node.val);\n          if (node.right != null)\n            dq.addFirst(node.right);\n          if (node.left != null)\n            dq.addFirst(node.left);\n        }\n      ans.add(currLevel);\n      isLeftToRight = !isLeftToRight;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n    if not root:\n      return []\n\n    ans = []\n    dq = collections.deque([root])\n    isLeftToRight = True\n\n    while dq:\n      currLevel = []\n      for _ in range(len(q)):\n        if isLeftToRight:\n          node = dq.popleft()\n          currLevel.append(node.val)\n          if node.left:\n            dq.append(node.left)\n          if node.right:\n            dq.append(node.right)\n        else:\n          node = dq.pop()\n          currLevel.append(node.val)\n          if node.right:\n            dq.appendleft(node.right)\n          if node.left:\n            dq.appendleft(node.left)\n      ans.append(currLevel)\n      isLeftToRight = not isLeftToRight\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}