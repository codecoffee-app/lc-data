{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "401",
            "title": "Binary Watch",
            "titleSlug": "binary-watch",
            "content": "<p>A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent&nbsp;the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.</p>\n\n<ul>\n\t<li>For example, the below binary watch reads <code>&quot;4:51&quot;</code>.</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/binarywatch.jpg\" style=\"width: 500px; height: 500px;\" /></p>\n\n<p>Given an integer <code>turnedOn</code> which represents the number of LEDs that are currently on (ignoring the PM), return <em>all possible times the watch could represent</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>The hour must not contain a leading zero.</p>\n\n<ul>\n\t<li>For example, <code>&quot;01:00&quot;</code> is not valid. It should be <code>&quot;1:00&quot;</code>.</li>\n</ul>\n\n<p>The minute must&nbsp;consist of two digits and may contain a leading zero.</p>\n\n<ul>\n\t<li>For example, <code>&quot;10:2&quot;</code> is not valid. It should be <code>&quot;10:02&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> turnedOn = 1\n<strong>Output:</strong> [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> turnedOn = 9\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= turnedOn &lt;= 10</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1309,
            "dislikes": 2431,
            "similarQuestions": "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of 1 Bits\", \"titleSlug\": \"number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"135.2K\", \"totalSubmission\": \"252.7K\", \"totalAcceptedRaw\": 135176, \"totalSubmissionRaw\": 252665, \"acRate\": \"53.5%\"}",
            "hints": [
                "Simplify by seeking for solutions that involve comparing bit counts.",
                "Consider calculating all possible times for comparison purposes."
            ],
            "rephrased": {
                "body": "A binary watch has 4 LEDs to represent the hours (0-11) and 6 LEDs for the minutes (0-59). Each LED represents a bit (0 or 1), with the least significant bit on the right. Given an integer `turnedOn`, representing the number of LEDs currently on, return all possible times the watch could represent.  The hour must not have a leading zero (e.g., \"01:00\" should be \"1:00\"), and the minute must consist of two digits, potentially with a leading zero (e.g., \"10:2\" should be \"10:02\"). Return the times in any order.",
                "constraints": [
                    "0 <= turnedOn <= 10"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "[\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]",
                        "explanation": null
                    },
                    {
                        "input": "9",
                        "output": "[]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "letter-combinations-of-a-phone-number",
                "title": "Letter Combinations of a Phone Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "number-of-1-bits",
                "title": "Number of 1 Bits",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Simplify by seeking for solutions that involve comparing bit counts.",
            "Consider calculating all possible times for comparison purposes."
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> readBinaryWatch(int num) {\n    vector<string> ans;\n    dfs(num, 0, 0, 0, ans);\n    return ans;\n  }\n\n private:\n  const vector<int> hours{1, 2, 4, 8};\n  const vector<int> minutes{1, 2, 4, 8, 16, 32};\n\n  void dfs(int n, int s, int h, int m, vector<string>& ans) {\n    if (n == 0) {\n      string time = to_string(h) + \":\" + (m < 10 ? \"0\" : \"\") + to_string(m);\n      ans.push_back(time);\n      return;\n    }\n\n    for (int i = s; i < hours.size() + minutes.size(); ++i)\n      if (i < 4 && h + hours[i] < 12)\n        dfs(n - 1, i + 1, h + hours[i], m, ans);\n      else if (i >= 4 && m + minutes[i - 4] < 60)\n        dfs(n - 1, i + 1, h, m + minutes[i - 4], ans);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> readBinaryWatch(int num) {\n    List<String> ans = new ArrayList<>();\n    dfs(num, 0, 0, 0, ans);\n    return ans;\n  }\n\n  private int[] hours = new int[] {1, 2, 4, 8};\n  private int[] minutes = new int[] {1, 2, 4, 8, 16, 32};\n\n  private void dfs(int n, int s, int h, int m, List<String> ans) {\n    if (n == 0) {\n      final String time = String.valueOf(h) + \":\" + (m < 10 ? \"0\" : \"\") + String.valueOf(m);\n      ans.add(time);\n      return;\n    }\n\n    for (int i = s; i < hours.length + minutes.length; ++i)\n      if (i < 4 && h + hours[i] < 12)\n        dfs(n - 1, i + 1, h + hours[i], m, ans);\n      else if (i >= 4 && m + minutes[i - 4] < 60)\n        dfs(n - 1, i + 1, h, m + minutes[i - 4], ans);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}