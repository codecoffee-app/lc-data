{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "201",
            "title": "Bitwise AND of Numbers Range",
            "titleSlug": "bitwise-and-of-numbers-range",
            "content": "<p>Given two integers <code>left</code> and <code>right</code> that represent the range <code>[left, right]</code>, return <em>the bitwise AND of all numbers in this range, inclusive</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 5, right = 7\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 0, right = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 1, right = 2147483647\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= left &lt;= right &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3172,
            "dislikes": 221,
            "similarQuestions": "[{\"title\": \"Longest Nice Subarray\", \"titleSlug\": \"longest-nice-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"265K\", \"totalSubmission\": \"617.9K\", \"totalAcceptedRaw\": 265046, \"totalSubmissionRaw\": 617851, \"acRate\": \"42.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two integers, `left` and `right`, representing a closed range `[left, right]`, determine the bitwise AND of all numbers within that range, inclusive.",
                "constraints": [
                    "0 <= left <= right <= 2<sup>31</sup> - 1"
                ],
                "testcases": [
                    {
                        "input": "left = 5, right = 7",
                        "output": "4",
                        "explanation": "The range [5, 7] includes 5, 6, and 7.  5 & 6 & 7 = 4"
                    },
                    {
                        "input": "left = 0, right = 0",
                        "output": "0",
                        "explanation": "The range [0, 0] only includes 0. The bitwise AND of 0 is 0."
                    },
                    {
                        "input": "left = 1, right = 2147483647",
                        "output": "0",
                        "explanation": "For a large range including vastly different binary representations, the result of a bitwise AND across all numbers will eventually be 0.  Since right is the maximum 32 bit integer value possible, eventually, the bits will change, and the result of the bitwise AND will result in 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-nice-subarray",
                "title": "Longest Nice Subarray",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int rangeBitwiseAnd(int m, int n) {\n    int shiftBits = 0;\n\n    while (m != n) {\n      m >>= 1;\n      n >>= 1;\n      ++shiftBits;\n    }\n\n    return m << shiftBits;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int rangeBitwiseAnd(int m, int n) {\n    int shiftBits = 0;\n\n    while (m != n) {\n      m >>= 1;\n      n >>= 1;\n      ++shiftBits;\n    }\n\n    return m << shiftBits;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def rangeBitwiseAnd(self, m: int, n: int) -> int:\n    return self.rangeBitwiseAnd(m >> 1, n >> 1) << 1 if m < n else m\n",
                "lang_text": "py"
            }
        }
    }
}