{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "898",
            "title": "Bitwise ORs of Subarrays",
            "titleSlug": "bitwise-ors-of-subarrays",
            "content": "<p>Given an integer array <code>arr</code>, return <em>the number of distinct bitwise ORs of all the non-empty subarrays of</em> <code>arr</code>.</p>\n\n<p>The bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.</p>\n\n<p>A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only one possible result: 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,1,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The possible results are 1, 2, 3, 4, 6, and 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1395,
            "dislikes": 201,
            "similarQuestions": "[{\"title\": \"Longest Nice Subarray\", \"titleSlug\": \"longest-nice-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Subarrays With Maximum Bitwise OR\", \"titleSlug\": \"smallest-subarrays-with-maximum-bitwise-or\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Bitwise OR of All Subsequence Sums\", \"titleSlug\": \"bitwise-or-of-all-subsequence-sums\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"33.9K\", \"totalSubmission\": \"88.3K\", \"totalAcceptedRaw\": 33853, \"totalSubmissionRaw\": 88331, \"acRate\": \"38.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `arr`, determine the number of distinct bitwise OR results obtainable from all non-empty subarrays of `arr`. The bitwise OR of a subarray is calculated by performing a bitwise OR operation on each integer within that subarray. A subarray is defined as a contiguous sequence of one or more elements within the array.",
                "constraints": [
                    "1 <= arr.length <= 5 * 10^4",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[0]",
                        "output": "1",
                        "explanation": "The only possible subarray is [0], which yields a bitwise OR result of 0. Therefore, there is 1 distinct value."
                    },
                    {
                        "input": "[1,1,2]",
                        "output": "3",
                        "explanation": "The possible subarrays are [1], [1], [2], [1, 1], [1, 2], and [1, 1, 2]. These subarrays produce bitwise OR results of 1, 1, 2, 1, 3, and 3, respectively.  There are 3 distinct values: 1, 2, and 3."
                    },
                    {
                        "input": "[1,2,4]",
                        "output": "6",
                        "explanation": "The possible subarrays and their bitwise OR results are: [1]->1, [2]->2, [4]->4, [1,2]->3, [2,4]->6, [1,2,4]->7. Therefore, the distinct bitwise ORs are 1, 2, 3, 4, 6, and 7, resulting in a count of 6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-nice-subarray",
                "title": "Longest Nice Subarray",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "smallest-subarrays-with-maximum-bitwise-or",
                "title": "Smallest Subarrays With Maximum Bitwise OR",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "bitwise-or-of-all-subsequence-sums",
                "title": "Bitwise OR of All Subsequence Sums",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ]
    }
}