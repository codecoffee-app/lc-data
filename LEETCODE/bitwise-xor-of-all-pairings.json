{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2425",
            "title": "Bitwise XOR of All Pairings",
            "titleSlug": "bitwise-xor-of-all-pairings",
            "content": "<p>You are given two <strong>0-indexed</strong> arrays, <code>nums1</code> and <code>nums2</code>, consisting of non-negative integers. There exists another array, <code>nums3</code>, which contains the bitwise XOR of <strong>all pairings</strong> of integers between <code>nums1</code> and <code>nums2</code> (every integer in <code>nums1</code> is paired with every integer in <code>nums2</code> <strong>exactly once</strong>).</p>\n\n<p>Return<em> the <strong>bitwise XOR</strong> of all integers in </em><code>nums3</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2,1,3], nums2 = [10,2,5,0]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong>\nA possible nums3 array is [8,0,7,2,11,3,4,1,9,1,6,3].\nThe bitwise XOR of all these numbers is 13, so we return 13.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [3,4]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nAll possible pairs of bitwise XORs are nums1[0] ^ nums2[0], nums1[0] ^ nums2[1], nums1[1] ^ nums2[0],\nand nums1[1] ^ nums2[1].\nThus, one possible nums3 array is [2,5,1,6].\n2 ^ 5 ^ 1 ^ 6 = 0, so we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 375,
            "dislikes": 13,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Brainteaser",
                    "slug": "brainteaser"
                }
            ],
            "stats": "{\"totalAccepted\": \"18K\", \"totalSubmission\": \"31K\", \"totalAcceptedRaw\": 17996, \"totalSubmissionRaw\": 30957, \"acRate\": \"58.1%\"}",
            "hints": [
                "Think how the count of each individual integer affects the final answer.",
                "If the length of nums1 is m and the length of nums2 is n, then each number in nums1 is repeated n times and each number in nums2 is repeated m times."
            ],
            "rephrased": {
                "body": "Given two 0-indexed arrays, `nums1` and `nums2`, containing non-negative integers, create a `nums3` array.  `nums3` is formed by taking the bitwise XOR of every possible pair of integers, one from `nums1` and one from `nums2`.  Each number in `nums1` is paired with each number in `nums2` exactly once.  Return the bitwise XOR of all the integers in `nums3`.",
                "constraints": [
                    "1 <= nums1.length, nums2.length <= 10^5",
                    "0 <= nums1[i], nums2[j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [2,1,3], nums2 = [10,2,5,0]",
                        "output": "13",
                        "explanation": "The nums3 array would contain the bitwise XOR of all pairings: [2^10, 2^2, 2^5, 2^0, 1^10, 1^2, 1^5, 1^0, 3^10, 3^2, 3^5, 3^0] which simplifies to [8, 0, 7, 2, 11, 3, 4, 1, 9, 1, 6, 3]. The bitwise XOR of all these numbers is 13."
                    },
                    {
                        "input": "nums1 = [1,2], nums2 = [3,4]",
                        "output": "0",
                        "explanation": "The nums3 array contains [1^3, 1^4, 2^3, 2^4] which simplifies to [2, 5, 1, 6]. The bitwise XOR of these values, 2 ^ 5 ^ 1 ^ 6, is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Think how the count of each individual integer affects the final answer.",
            "If the length of nums1 is m and the length of nums2 is n, then each number in nums1 is repeated n times and each number in nums2 is repeated m times."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Brainteaser",
                "slug": "brainteaser"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int xorAllNums(vector<int>& nums1, vector<int>& nums2) {\n    // If the size of nums1 is m and the size of nums2 is n, then each number in\n    // nums1 is repeated n times and each number in nums2 is repeated m times.\n    const int xors1 = accumulate(nums1.begin(), nums1.end(), 0, bit_xor<>());\n    const int xors2 = accumulate(nums2.begin(), nums2.end(), 0, bit_xor<>());\n    return (nums1.size() % 2 * xors2) ^ (nums2.size() % 2 * xors1);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int xorAllNums(int[] nums1, int[] nums2) {\n    // If the size of nums1 is m and the size of nums2 is n, then each number in\n    // nums1 is repeated n times and each number in nums2 is repeated m times.\n    final int xors1 = Arrays.stream(nums1).reduce((a, b) -> a ^ b).getAsInt();\n    final int xors2 = Arrays.stream(nums2).reduce((a, b) -> a ^ b).getAsInt();\n    return (nums1.length % 2 * xors2) ^ (nums2.length % 2 * xors1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def xorAllNums(self, nums1: List[int], nums2: List[int]) -> int:\n    xors1 = functools.reduce(operator.xor, nums1)\n    xors2 = functools.reduce(operator.xor, nums2)\n    # If the size of nums1 is m and the size of nums2 is n, then each number in\n    # nums1 is repeated n times and each number in nums2 is repeated m times.\n    return (len(nums1) % 2 * xors2) ^ (len(nums2) % 2 * xors1)\n",
                "lang_text": "py"
            }
        }
    }
}