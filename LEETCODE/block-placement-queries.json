{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3161",
            "title": "Block Placement Queries",
            "titleSlug": "block-placement-queries",
            "content": "<p>There exists an infinite number line, with its origin at 0 and extending towards the <strong>positive</strong> x-axis.</p>\n\n<p>You are given a 2D array <code>queries</code>, which contains two types of queries:</p>\n\n<ol>\n\t<li>For a query of type 1, <code>queries[i] = [1, x]</code>. Build an obstacle at distance <code>x</code> from the origin. It is guaranteed that there is <strong>no</strong> obstacle at distance <code>x</code> when the query is asked.</li>\n\t<li>For a query of type 2, <code>queries[i] = [2, x, sz]</code>. Check if it is possible to place a block of size <code>sz</code> <em>anywhere</em> in the range <code>[0, x]</code> on the line, such that the block <strong>entirely</strong> lies in the range <code>[0, x]</code>. A block <strong>cannot </strong>be placed if it intersects with any obstacle, but it may touch it. Note that you do<strong> not</strong> actually place the block. Queries are separate.</li>\n</ol>\n\n<p>Return a boolean array <code>results</code>, where <code>results[i]</code> is <code>true</code> if you can place the block specified in the <code>i<sup>th</sup></code> query of type 2, and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">queries = [[1,2],[2,3,3],[2,3,1],[2,2,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[false,true,true]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/22/example0block.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 309px; height: 129px;\" /></strong></p>\n\n<p>For query 0, place an obstacle at <code>x = 2</code>. A block of size at most 2 can be placed before <code>x = 3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">queries = </span>[[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]<!-- notionvc: 4a471445-5af1-4d72-b11b-94d351a2c8e9 --></p>\n\n<p><strong>Output:</strong> [true,true,false]</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/22/example1block.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 310px; height: 130px;\" /></strong></p>\n\n<ul>\n\t<li>Place an obstacle at <code>x = 7</code> for query 0. A block of size at most 7 can be placed before <code>x = 7</code>.</li>\n\t<li>Place an obstacle at <code>x = 2</code> for query 2. Now, a block of size at most 5 can be placed before <code>x = 7</code>, and a block of size at most 2 before <code>x = 2</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length &lt;= 15 * 10<sup>4</sup></code></li>\n\t<li><code>2 &lt;= queries[i].length &lt;= 3</code></li>\n\t<li><code>1 &lt;= queries[i][0] &lt;= 2</code></li>\n\t<li><code>1 &lt;= x, sz &lt;= min(5 * 10<sup>4</sup>, 3 * queries.length)</code></li>\n\t<li>The input is generated such that for queries of type 1, no obstacle exists at distance <code>x</code> when the query is asked.</li>\n\t<li>The input is generated such that there is at least one query of type 2.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 84,
            "dislikes": 8,
            "similarQuestions": "[{\"title\": \"Building Boxes\", \"titleSlug\": \"building-boxes\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.6K\", \"totalSubmission\": \"27.9K\", \"totalAcceptedRaw\": 3617, \"totalSubmissionRaw\": 27882, \"acRate\": \"13.0%\"}",
            "hints": [
                "Let <code>d[x]</code> be the distance of the next obstacle after <code>x</code>.",
                "For each query of type 2, we just need to check if <code>max(d[0], d[1], d[2], \u2026d[x - sz]) > sz</code>.",
                "Use segment tree to maintain <code>d[x]</code>."
            ],
            "rephrased": {
                "body": "You are given a series of queries to manage obstacles on an infinite number line extending from 0 towards positive infinity. The queries are of two types:\n\n1.  **Type 1 (Obstacle Placement):** `[1, x]` - Place an obstacle at position `x` on the number line. It is guaranteed that no obstacle exists at position `x` when this query is executed.\n2.  **Type 2 (Block Placement Check):** `[2, x, sz]` - Determine if it's possible to place a block of size `sz` anywhere within the range `[0, x]` (inclusive) such that the entire block lies within the range and does not intersect any existing obstacles.  The block can touch obstacles but cannot overlap them.  The check is independent for each query of type 2 (the block is not actually placed).\n\nReturn a boolean array indicating whether it's possible to place the block for each query of type 2.",
                "constraints": [
                    "1 <= queries.length <= 15 * 10^4",
                    "2 <= queries[i].length <= 3",
                    "1 <= queries[i][0] <= 2",
                    "1 <= x, sz <= min(5 * 10^4, 3 * queries.length)",
                    "The input ensures that for queries of type 1, no obstacle exists at position x when the query is asked.",
                    "The input ensures there's at least one query of type 2."
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[2,3,3],[2,3,1],[2,2,2]]",
                        "output": "[false,true,true]",
                        "explanation": "After placing an obstacle at x = 2, a block of size 3 cannot be placed within [0, 3] due to the obstacle at 2 (it can't start before 0). A block of size 1 can be placed, for instance at x=0. A block of size 2 cannot be placed within [0,2] as it would intersect the obstacle at x=2. In other words, there is no space available to place a block of size 2 within the given range [0,2]."
                    },
                    {
                        "input": "[[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]",
                        "output": "[true,true,false]",
                        "explanation": "Initially, with only an obstacle at x = 7, a block of size 6 can be placed within [0, 7] (e.g., at x=0). After placing an obstacle at x = 2, a block of size 5 can still be placed within [0, 7] (e.g., between x=3 and x=7). However, a block of size 6 can no longer be placed within [0, 7] because the obstacle at x=2 restricts the maximum continuous space to less than 6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "building-boxes",
                "title": "Building Boxes",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let <code>d[x]</code> be the distance of the next obstacle after <code>x</code>.",
            "For each query of type 2, we just need to check if <code>max(d[0], d[1], d[2], \u2026d[x - sz]) > sz</code>.",
            "Use segment tree to maintain <code>d[x]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ]
    }
}