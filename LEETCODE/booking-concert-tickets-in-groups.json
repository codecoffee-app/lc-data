{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2286",
            "title": "Booking Concert Tickets in Groups",
            "titleSlug": "booking-concert-tickets-in-groups",
            "content": "<p>A concert hall has <code>n</code> rows numbered from <code>0</code> to <code>n - 1</code>, each with <code>m</code> seats, numbered from <code>0</code> to <code>m - 1</code>. You need to design a ticketing system that can allocate seats in the following cases:</p>\n\n<ul>\n\t<li>If a group of <code>k</code> spectators can sit <strong>together</strong> in a row.</li>\n\t<li>If <strong>every</strong> member of a group of <code>k</code> spectators can get a seat. They may or <strong>may not</strong> sit together.</li>\n</ul>\n\n<p>Note that the spectators are very picky. Hence:</p>\n\n<ul>\n\t<li>They will book seats only if each member of their group can get a seat with row number <strong>less than or equal</strong> to <code>maxRow</code>. <code>maxRow</code> can <strong>vary</strong> from group to group.</li>\n\t<li>In case there are multiple rows to choose from, the row with the <strong>smallest</strong> number is chosen. If there are multiple seats to choose in the same row, the seat with the <strong>smallest</strong> number is chosen.</li>\n</ul>\n\n<p>Implement the <code>BookMyShow</code> class:</p>\n\n<ul>\n\t<li><code>BookMyShow(int n, int m)</code> Initializes the object with <code>n</code> as number of rows and <code>m</code> as number of seats per row.</li>\n\t<li><code>int[] gather(int k, int maxRow)</code> Returns an array of length <code>2</code> denoting the row and seat number (respectively) of the <strong>first seat</strong> being allocated to the <code>k</code> members of the group, who must sit <strong>together</strong>. In other words, it returns the smallest possible <code>r</code> and <code>c</code> such that all <code>[c, c + k - 1]</code> seats are valid and empty in row <code>r</code>, and <code>r &lt;= maxRow</code>. Returns <code>[]</code> in case it is <strong>not possible</strong> to allocate seats to the group.</li>\n\t<li><code>boolean scatter(int k, int maxRow)</code> Returns <code>true</code> if all <code>k</code> members of the group can be allocated seats in rows <code>0</code> to <code>maxRow</code>, who may or <strong>may not</strong> sit together. If the seats can be allocated, it allocates <code>k</code> seats to the group with the <strong>smallest</strong> row numbers, and the smallest possible seat numbers in each row. Otherwise, returns <code>false</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;BookMyShow&quot;, &quot;gather&quot;, &quot;gather&quot;, &quot;scatter&quot;, &quot;scatter&quot;]\n[[2, 5], [4, 0], [2, 0], [5, 1], [5, 1]]\n<strong>Output</strong>\n[null, [0, 0], [], true, false]\n\n<strong>Explanation</strong>\nBookMyShow bms = new BookMyShow(2, 5); // There are 2 rows with 5 seats each \nbms.gather(4, 0); // return [0, 0]\n                  // The group books seats [0, 3] of row 0. \nbms.gather(2, 0); // return []\n                  // There is only 1 seat left in row 0,\n                  // so it is not possible to book 2 consecutive seats. \nbms.scatter(5, 1); // return True\n                   // The group books seat 4 of row 0 and seats [0, 3] of row 1. \nbms.scatter(5, 1); // return False\n                   // There is only one seat left in the hall.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m, k &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= maxRow &lt;= n - 1</code></li>\n\t<li>At most <code>5 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>gather</code> and <code>scatter</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 307,
            "dislikes": 54,
            "similarQuestions": "[{\"title\": \"Cinema Seat Allocation\", \"titleSlug\": \"cinema-seat-allocation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Increasing Subsequence II\", \"titleSlug\": \"longest-increasing-subsequence-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.7K\", \"totalSubmission\": \"35.6K\", \"totalAcceptedRaw\": 5653, \"totalSubmissionRaw\": 35589, \"acRate\": \"15.9%\"}",
            "hints": [
                "Since seats are allocated by smallest row and then by smallest seat numbers, how can we keep a record of the smallest seat number vacant in each row?",
                "How can range max query help us to check if contiguous seats can be allocated in a range?",
                "Similarly, can range sum query help us to check if enough seats are available in a range?",
                "Which data structure can be used to implement the above?"
            ],
            "rephrased": {
                "body": "Design a ticketing system for a concert hall with `n` rows and `m` seats per row. Implement the `BookMyShow` class with the following methods:\n\n*   `BookMyShow(int n, int m)`: Initializes the object with `n` rows and `m` seats per row.\n*   `int[] gather(int k, int maxRow)`: Allocates `k` consecutive seats in a row with index less than or equal to `maxRow`. Returns an array `[row, seat]` representing the first seat allocated, or `[]` if not possible.\n*   `boolean scatter(int k, int maxRow)`: Allocates `k` seats (not necessarily consecutive) across rows with indices less than or equal to `maxRow`. Returns `true` if possible, and `false` otherwise.",
                "constraints": [
                    "1 <= n <= 5 * 10^4",
                    "1 <= m, k <= 10^9",
                    "0 <= maxRow <= n - 1",
                    "At most 5 * 10^4 calls in total will be made to gather and scatter."
                ],
                "testcases": [
                    {
                        "input": "[\"BookMyShow\", \"gather\", \"gather\", \"scatter\", \"scatter\"]\n[[2, 5], [4, 0], [2, 0], [5, 1], [5, 1]]",
                        "output": "[null, [0, 0], [], true, false]",
                        "explanation": "A `BookMyShow` object is initialized with 2 rows and 5 seats per row.  `gather(4, 0)` attempts to allocate 4 consecutive seats in row 0, succeeding and returning `[0, 0]`.  `gather(2, 0)` then fails, as only one seat remains in row 0. `scatter(5, 1)` allocates the remaining seat in row 0 and 4 seats in row 1, returning `true`.  Finally, `scatter(5, 1)` fails, as only one seat is left."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "cinema-seat-allocation",
                "title": "Cinema Seat Allocation",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-increasing-subsequence-ii",
                "title": "Longest Increasing Subsequence II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Since seats are allocated by smallest row and then by smallest seat numbers, how can we keep a record of the smallest seat number vacant in each row?",
            "How can range max query help us to check if contiguous seats can be allocated in a range?",
            "Similarly, can range sum query help us to check if enough seats are available in a range?",
            "Which data structure can be used to implement the above?"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct SegmentTreeNode {\n  int lo;\n  int hi;\n  unique_ptr<SegmentTreeNode> left;\n  unique_ptr<SegmentTreeNode> right;\n  int max;\n  long sum;\n  SegmentTreeNode(int lo, int hi, unique_ptr<SegmentTreeNode>&& left,\n                  unique_ptr<SegmentTreeNode>&& right, int max, long sum)\n      : lo(lo),\n        hi(hi),\n        left(move(left)),\n        right(move(right)),\n        max(max),\n        sum(sum) {}\n};\n\nclass SegmentTree {\n public:\n  explicit SegmentTree(int n, int m) : m(m), root(move(build(0, n - 1))) {}\n\n  vector<int> maxRange(int k, int maxRow) {\n    return maxRange(root, k, maxRow);\n  }\n\n  long sumRange(int maxRow) {\n    return sumRange(root, 0, maxRow);\n  }\n\n  // Minus k max and sum from seats row\n  void minus(int row, int k) {\n    minus(root, row, k);\n  }\n\n private:\n  const int m;\n  unique_ptr<SegmentTreeNode> root;\n\n  unique_ptr<SegmentTreeNode> build(int l, int r) {\n    if (l == r)\n      return make_unique<SegmentTreeNode>(l, r, nullptr, nullptr, m, m);\n    const int mid = (l + r) / 2;\n    unique_ptr<SegmentTreeNode> left = build(l, mid);\n    unique_ptr<SegmentTreeNode> right = build(mid + 1, r);\n    return make_unique<SegmentTreeNode>(l, r, move(left), move(right),\n                                        max(left->max, right->max),\n                                        left->sum + right->sum);\n  }\n\n  vector<int> maxRange(unique_ptr<SegmentTreeNode>& root, int k, int maxRow) {\n    if (root->lo == root->hi) {\n      if (root->sum < k || root->lo > maxRow)\n        return {};\n      return {root->lo, m - static_cast<int>(root->sum)};  // {row, col}\n    }\n    // Greedily search the left subtree\n    if (root->left->max >= k)\n      return maxRange(root->left, k, maxRow);\n    return maxRange(root->right, k, maxRow);\n  }\n\n  long sumRange(unique_ptr<SegmentTreeNode>& root, int i, int j) {\n    if (root->lo == i && root->hi == j)\n      return root->sum;\n    const int mid = (root->lo + root->hi) / 2;\n    if (j <= mid)\n      return sumRange(root->left, i, j);\n    if (i > mid)\n      return sumRange(root->right, i, j);\n    return sumRange(root->left, i, mid) + sumRange(root->right, mid + 1, j);\n  }\n\n  void minus(unique_ptr<SegmentTreeNode>& root, int row, int k) {\n    if (root == nullptr)\n      return;\n    if (root->lo == root->hi && root->hi == row) {\n      root->max -= k;\n      root->sum -= k;\n      return;\n    }\n    const int mid = (root->lo + root->hi) / 2;\n    if (row <= mid)\n      minus(root->left, row, k);\n    else\n      minus(root->right, row, k);\n    root->max = max(root->left->max, root->right->max);\n    root->sum = root->left->sum + root->right->sum;\n  }\n};\n\nclass BookMyShow {\n public:\n  BookMyShow(int n, int m) : tree(n, m), seats(n, m) {}\n\n  vector<int> gather(int k, int maxRow) {\n    const vector<int> res = tree.maxRange(k, maxRow);\n    if (res.size() == 2) {\n      const int row = res[0];\n      tree.minus(row, k);\n      seats[row] -= k;\n    }\n    return res;\n  }\n\n  bool scatter(int k, int maxRow) {\n    if (tree.sumRange(maxRow) < k)\n      return false;\n\n    while (k > 0)\n      if (seats[minVacantRow] >= k) {\n        tree.minus(minVacantRow, k);\n        seats[minVacantRow] -= k;\n        k = 0;\n      } else {\n        tree.minus(minVacantRow, seats[minVacantRow]);\n        k -= seats[minVacantRow];\n        seats[minVacantRow] = 0;\n        ++minVacantRow;\n      }\n\n    return true;\n  }\n\n private:\n  SegmentTree tree;\n  vector<int> seats;  // Remain seats at each row\n  int minVacantRow = 0;\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}