{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "554",
            "title": "Brick Wall",
            "titleSlug": "brick-wall",
            "content": "<p>There is a rectangular brick wall in front of you with <code>n</code> rows of bricks. The <code>i<sup>th</sup></code> row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.</p>\n\n<p>Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.</p>\n\n<p>Given the 2D array <code>wall</code> that contains the information about the wall, return <em>the minimum number of crossed bricks after drawing such a vertical line</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/cutwall-grid.jpg\" style=\"width: 493px; height: 577px;\" />\n<pre>\n<strong>Input:</strong> wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> wall = [[1],[1],[1]]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == wall.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= wall[i].length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= sum(wall[i].length) &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>sum(wall[i])</code> is the same for each row <code>i</code>.</li>\n\t<li><code>1 &lt;= wall[i][j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2436,
            "dislikes": 148,
            "similarQuestions": "[{\"title\": \"Number of Ways to Build Sturdy Brick Wall\", \"titleSlug\": \"number-of-ways-to-build-sturdy-brick-wall\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                }
            ],
            "stats": "{\"totalAccepted\": \"130.7K\", \"totalSubmission\": \"240.2K\", \"totalAcceptedRaw\": 130664, \"totalSubmissionRaw\": 240189, \"acRate\": \"54.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given a rectangular brick wall represented by a 2D array `wall`, where `wall[i]` is a row of bricks. Each brick has a height of 1 unit, but the widths of the bricks can vary. The total width of each row is the same.\n\nYour goal is to draw a vertical line from the top to the bottom of the wall such that it crosses the fewest number of bricks.  The line cannot be drawn along either of the vertical edges of the wall. A brick is considered 'crossed' only if the line passes through its interior, not along its edge.\n\nReturn the minimum number of bricks crossed by the vertical line.",
                "constraints": [
                    "n == wall.length",
                    "1 <= n <= 10^4",
                    "1 <= wall[i].length <= 10^4",
                    "1 <= sum(wall[i].length) <= 2 * 10^4",
                    "sum(wall[i]) is the same for each row i.",
                    "1 <= wall[i][j] <= 2^31 - 1"
                ],
                "testcases": [
                    {
                        "input": "[[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]",
                        "output": "2",
                        "explanation": "null"
                    },
                    {
                        "input": "[[1],[1],[1]]",
                        "output": "3",
                        "explanation": "null"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-ways-to-build-sturdy-brick-wall",
                "title": "Number of Ways to Build Sturdy Brick Wall",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int leastBricks(vector<vector<int>>& wall) {\n    int maxCount = 0;\n    unordered_map<int, int> count;\n\n    for (const vector<int>& row : wall) {\n      int prefix = 0;\n      for (int i = 0; i < row.size() - 1; ++i) {\n        prefix += row[i];\n        maxCount = max(maxCount, ++count[prefix]);\n      }\n    }\n\n    return wall.size() - maxCount;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int leastBricks(List<List<Integer>> wall) {\n    int maxFreq = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (List<Integer> row : wall) {\n      int prefix = 0;\n      for (int i = 0; i < row.size() - 1; ++i) {\n        prefix += row.get(i);\n        maxFreq = Math.max(maxFreq, count.merge(prefix, 1, Integer::sum));\n      }\n    }\n\n    return wall.size() - maxFreq;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def leastBricks(self, wall: List[List[int]]) -> int:\n    maxFreq = 0\n    count = collections.defaultdict(int)\n\n    for row in wall:\n      prefix = 0\n      for i in range(len(row) - 1):\n        prefix += row[i]\n        count[prefix] += 1\n        maxFreq = max(maxFreq, count[prefix])\n\n    return len(wall) - maxFreq\n",
                "lang_text": "py"
            }
        }
    }
}