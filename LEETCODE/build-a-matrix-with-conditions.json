{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2392",
            "title": "Build a Matrix With Conditions",
            "titleSlug": "build-a-matrix-with-conditions",
            "content": "<p>You are given a <strong>positive</strong> integer <code>k</code>. You are also given:</p>\n\n<ul>\n\t<li>a 2D integer array <code>rowConditions</code> of size <code>n</code> where <code>rowConditions[i] = [above<sub>i</sub>, below<sub>i</sub>]</code>, and</li>\n\t<li>a 2D integer array <code>colConditions</code> of size <code>m</code> where <code>colConditions[i] = [left<sub>i</sub>, right<sub>i</sub>]</code>.</li>\n</ul>\n\n<p>The two arrays contain integers from <code>1</code> to <code>k</code>.</p>\n\n<p>You have to build a <code>k x k</code> matrix that contains each of the numbers from <code>1</code> to <code>k</code> <strong>exactly once</strong>. The remaining cells should have the value <code>0</code>.</p>\n\n<p>The matrix should also satisfy the following conditions:</p>\n\n<ul>\n\t<li>The number <code>above<sub>i</sub></code> should appear in a <strong>row</strong> that is strictly <strong>above</strong> the row at which the number <code>below<sub>i</sub></code> appears for all <code>i</code> from <code>0</code> to <code>n - 1</code>.</li>\n\t<li>The number <code>left<sub>i</sub></code> should appear in a <strong>column</strong> that is strictly <strong>left</strong> of the column at which the number <code>right<sub>i</sub></code> appears for all <code>i</code> from <code>0</code> to <code>m - 1</code>.</li>\n</ul>\n\n<p>Return <em><strong>any</strong> matrix that satisfies the conditions</em>. If no answer exists, return an empty matrix.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/07/06/gridosdrawio.png\" style=\"width: 211px; height: 211px;\" />\n<pre>\n<strong>Input:</strong> k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]]\n<strong>Output:</strong> [[3,0,0],[0,0,1],[0,2,0]]\n<strong>Explanation:</strong> The diagram above shows a valid example of a matrix that satisfies all the conditions.\nThe row conditions are the following:\n- Number 1 is in row <u>1</u>, and number 2 is in row <u>2</u>, so 1 is above 2 in the matrix.\n- Number 3 is in row <u>0</u>, and number 2 is in row <u>2</u>, so 3 is above 2 in the matrix.\nThe column conditions are the following:\n- Number 2 is in column <u>1</u>, and number 1 is in column <u>2</u>, so 2 is left of 1 in the matrix.\n- Number 3 is in column <u>0</u>, and number 2 is in column <u>1</u>, so 3 is left of 2 in the matrix.\nNote that there may be multiple correct answers.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, rowConditions = [[1,2],[2,3],[3,1],[2,3]], colConditions = [[2,1]]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> From the first two conditions, 3 has to be below 1 but the third conditions needs 3 to be above 1 to be satisfied.\nNo matrix can satisfy all the conditions, so we return the empty matrix.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= k &lt;= 400</code></li>\n\t<li><code>1 &lt;= rowConditions.length, colConditions.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>rowConditions[i].length == colConditions[i].length == 2</code></li>\n\t<li><code>1 &lt;= above<sub>i</sub>, below<sub>i</sub>, left<sub>i</sub>, right<sub>i</sub> &lt;= k</code></li>\n\t<li><code>above<sub>i</sub> != below<sub>i</sub></code></li>\n\t<li><code>left<sub>i</sub> != right<sub>i</sub></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 734,
            "dislikes": 8,
            "similarQuestions": "[{\"title\": \"Course Schedule\", \"titleSlug\": \"course-schedule\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Course Schedule II\", \"titleSlug\": \"course-schedule-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Eventual Safe States\", \"titleSlug\": \"find-eventual-safe-states\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Loud and Rich\", \"titleSlug\": \"loud-and-rich\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.4K\", \"totalSubmission\": \"22K\", \"totalAcceptedRaw\": 13374, \"totalSubmissionRaw\": 22013, \"acRate\": \"60.8%\"}",
            "hints": [
                "Can you think of the problem in terms of graphs?",
                "What algorithm allows you to find the order of nodes in a graph?"
            ],
            "rephrased": {
                "body": "Given a positive integer `k`, construct a `k x k` matrix containing each number from 1 to `k` exactly once, with the remaining cells filled with 0.  The matrix must satisfy two conditions:\n\n1.  **Row Conditions:** For each pair `[above_i, below_i]` in `rowConditions`, the row containing `above_i` must be strictly above the row containing `below_i`.\n2.  **Column Conditions:** For each pair `[left_i, right_i]` in `colConditions`, the column containing `left_i` must be strictly to the left of the column containing `right_i`.\n\nIf a matrix satisfying these conditions can be built, return any valid matrix. Otherwise, return an empty matrix.",
                "constraints": [
                    "2 <= k <= 400",
                    "1 <= rowConditions.length, colConditions.length <= 10^4",
                    "rowConditions[i].length == colConditions[i].length == 2",
                    "1 <= above_i, below_i, left_i, right_i <= k",
                    "above_i != below_i",
                    "left_i != right_i"
                ],
                "testcases": [
                    {
                        "input": "k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]]",
                        "output": "[[3,0,0],[0,0,1],[0,2,0]]",
                        "explanation": "In this example, the matrix [[3,0,0],[0,0,1],[0,2,0]] satisfies both row and column conditions.  Number 1 is above 2, and 3 is above 2.  Number 2 is left of 1, and 3 is left of 2.  Other valid solutions are also possible."
                    },
                    {
                        "input": "k = 3, rowConditions = [[1,2],[2,3],[3,1],[2,3]], colConditions = [[2,1]]",
                        "output": "[]",
                        "explanation": "The given conditions create a conflict. The row conditions specify that 3 must be below 1, but also above 1, which is impossible. Therefore, no valid matrix can be constructed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "course-schedule",
                "title": "Course Schedule",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "course-schedule-ii",
                "title": "Course Schedule II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-eventual-safe-states",
                "title": "Find Eventual Safe States",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "loud-and-rich",
                "title": "Loud and Rich",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can you think of the problem in terms of graphs?",
            "What algorithm allows you to find the order of nodes in a graph?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> buildMatrix(int k, vector<vector<int>>& rowConditions,\n                                  vector<vector<int>>& colConditions) {\n    const vector<int> rowOrder = topologicalSort(rowConditions, k);\n    if (rowOrder.empty())\n      return {};\n\n    const vector<int> colOrder = topologicalSort(colConditions, k);\n    if (colOrder.empty())\n      return {};\n\n    vector<vector<int>> ans(k, vector<int>(k));\n    vector<int> nodeToRowIndex(k + 1);\n\n    for (int i = 0; i < k; ++i)\n      nodeToRowIndex[rowOrder[i]] = i;\n\n    for (int j = 0; j < k; ++j) {\n      const int node = colOrder[j];\n      const int i = nodeToRowIndex[node];\n      ans[i][j] = node;\n    }\n\n    return ans;\n  }\n\n private:\n  vector<int> topologicalSort(const vector<vector<int>>& conditions, int n) {\n    vector<int> order;\n    vector<vector<int>> graph(n + 1);\n    vector<int> inDegree(n + 1);\n    queue<int> q;\n\n    // Build graph.\n    for (const vector<int>& condition : conditions) {\n      const int u = condition[0];\n      const int v = condition[1];\n      graph[u].push_back(v);\n      ++inDegree[v];\n    }\n\n    // Topology\n    for (int i = 1; i <= n; ++i)\n      if (inDegree[i] == 0)\n        q.push(i);\n\n    while (!q.empty()) {\n      const int u = q.front();\n      q.pop();\n      order.push_back(u);\n      for (const int v : graph[u])\n        if (--inDegree[v] == 0)\n          q.push(v);\n    }\n\n    return order.size() == n ? order : vector<int>();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] buildMatrix(int k, int[][] rowConditions, int[][] colConditions) {\n    List<Integer> rowOrder = topologicalSort(rowConditions, k);\n    if (rowOrder.isEmpty())\n      return new int[][] {};\n\n    List<Integer> colOrder = topologicalSort(colConditions, k);\n    if (colOrder.isEmpty())\n      return new int[][] {};\n\n    int[][] ans = new int[k][k];\n    int[] nodeToRowIndex = new int[k + 1];\n\n    for (int i = 0; i < k; ++i)\n      nodeToRowIndex[rowOrder.get(i)] = i;\n\n    for (int j = 0; j < k; ++j) {\n      final int node = colOrder[j];\n      final int i = nodeToRowIndex[node];\n      ans[i][j] = node;\n    }\n\n    return ans;\n  }\n\n  private List<Integer> topologicalSort(int[][] conditions, int n) {\n    List<Integer> order = new ArrayList<>();\n    List<Integer>[] graph = new List[n + 1];\n    int[] inDegree = new int[n + 1];\n    Queue<Integer> q = new ArrayDeque<>();\n\n    for (int i = 1; i <= n; ++i)\n      graph[i] = new ArrayList<>();\n\n    // Build graph.\n    for (int[] condition : conditions) {\n      final int u = condition[0];\n      final int v = condition[1];\n      graph[u].add(v);\n      ++inDegree[v];\n    }\n\n    // Topology\n    for (int i = 1; i <= n; ++i)\n      if (inDegree[i] == 0)\n        q.offer(i);\n\n    while (!q.isEmpty()) {\n      final int u = q.poll();\n      order.add(u);\n      for (final int v : graph[u])\n        if (--inDegree[v] == 0)\n          q.offer(v);\n    }\n\n    return order.size() == n ? order : new ArrayList<>();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def buildMatrix(self, k: int, rowConditions: List[List[int]], colConditions: List[List[int]]) -> List[List[int]]:\n    rowOrder = self._topologicalSort(rowConditions, k)\n    if not rowOrder:\n      return []\n\n    colOrder = self._topologicalSort(colConditions, k)\n    if not colOrder:\n      return []\n\n    ans = [[0] * k for _ in range(k)]\n    nodeToRowIndex = [0] * (k + 1)\n\n    for i, node in enumerate(rowOrder):\n      nodeToRowIndex[node] = i\n\n    for j, node in enumerate(colOrder):\n      i = nodeToRowIndex[node]\n      ans[i][j] = node\n\n    return ans\n\n  def _topologicalSort(self, conditions: List[List[int]], n: int) -> List[int]:\n    order = []\n    graph = [[] for _ in range(n + 1)]\n    inDegree = [0] * (n + 1)\n\n    # Build graph.\n    for u, v in conditions:\n      graph[u].append(v)\n      inDegree[v] += 1\n\n    # Topology\n    q = collections.deque([i for i in range(1, n + 1) if inDegree[i] == 0])\n\n    while q:\n      u = q.popleft()\n      order.append(u)\n      for v in graph[u]:\n        inDegree[v] -= 1\n        if inDegree[v] == 0:\n          q.append(v)\n\n    return order if len(order) == n else []\n",
                "lang_text": "py"
            }
        }
    }
}