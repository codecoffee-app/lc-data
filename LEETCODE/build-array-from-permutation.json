{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1920",
            "title": "Build Array from Permutation",
            "titleSlug": "build-array-from-permutation",
            "content": "<p>Given a <strong>zero-based permutation</strong> <code>nums</code> (<strong>0-indexed</strong>), build an array <code>ans</code> of the <strong>same length</strong> where <code>ans[i] = nums[nums[i]]</code> for each <code>0 &lt;= i &lt; nums.length</code> and return it.</p>\n\n<p>A <strong>zero-based permutation</strong> <code>nums</code> is an array of <strong>distinct</strong> integers from <code>0</code> to <code>nums.length - 1</code> (<strong>inclusive</strong>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,2,1,5,3,4]\n<strong>Output:</strong> [0,1,2,4,5,3]<strong>\nExplanation:</strong> The array ans is built as follows: \nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]\n    = [0,1,2,4,5,3]</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,0,1,2,3,4]\n<strong>Output:</strong> [4,5,0,1,2,3]\n<strong>Explanation:</strong> The array ans is built as follows:\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]\n    = [4,5,0,1,2,3]</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt; nums.length</code></li>\n\t<li>The elements in <code>nums</code> are <strong>distinct</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Can you solve it without using an extra space (i.e., <code>O(1)</code> memory)?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3152,
            "dislikes": 352,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"442.5K\", \"totalSubmission\": \"494.7K\", \"totalAcceptedRaw\": 442543, \"totalSubmissionRaw\": 494659, \"acRate\": \"89.5%\"}",
            "hints": [
                "Just apply what's said in the statement.",
                "Notice that you can't apply it on the same array directly since some elements will change after application"
            ],
            "rephrased": {
                "body": "Given a zero-based permutation `nums`, construct an array `ans` of the same length where `ans[i]` is equal to `nums[nums[i]]` for each index `i`. Return the `ans` array.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "0 <= nums[i] < nums.length",
                    "The elements in `nums` are distinct."
                ],
                "testcases": [
                    {
                        "input": "[0,2,1,5,3,4]",
                        "output": "[0,1,2,4,5,3]",
                        "explanation": "For each index i in the input array nums, the corresponding value in the output array ans is nums[nums[i]]. For example, at index 0, ans[0] = nums[nums[0]] = nums[0] = 0. At index 1, ans[1] = nums[nums[1]] = nums[2] = 1, and so on."
                    },
                    {
                        "input": "[5,0,1,2,3,4]",
                        "output": "[4,5,0,1,2,3]",
                        "explanation": "For each index i in the input array nums, the corresponding value in the output array ans is nums[nums[i]]. For example, at index 0, ans[0] = nums[nums[0]] = nums[5] = 4. At index 1, ans[1] = nums[nums[1]] = nums[0] = 5, and so on."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Just apply what's said in the statement.",
            "Notice that you can't apply it on the same array directly since some elements will change after application"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> buildArray(vector<int>& nums) {\n    const int n = nums.size();\n\n    for (int i = 0; i < n; ++i)\n      nums[i] += n * (nums[nums[i]] % n);\n\n    for (int i = 0; i < n; ++i)\n      nums[i] /= n;\n\n    return nums;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] buildArray(int[] nums) {\n    final int n = nums.length;\n\n    for (int i = 0; i < n; ++i)\n      nums[i] += n * (nums[nums[i]] % n);\n\n    for (int i = 0; i < n; ++i)\n      nums[i] /= n;\n\n    return nums;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def buildArray(self, nums: List[int]) -> List[int]:\n    n = len(nums)\n\n    for i, num in enumerate(nums):\n      nums[i] += n * (nums[num] % n)\n\n    for i in range(n):\n      nums[i] //= n\n\n    return nums\n",
                "lang_text": "py"
            }
        }
    }
}