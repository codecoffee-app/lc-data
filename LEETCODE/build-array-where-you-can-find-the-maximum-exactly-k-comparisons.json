{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1420",
            "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
            "titleSlug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
            "content": "<p>You are given three integers <code>n</code>, <code>m</code> and <code>k</code>. Consider the following algorithm to find the maximum element of an array of positive integers:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/04/02/e.png\" style=\"width: 424px; height: 372px;\" />\n<p>You should build the array arr which has the following properties:</p>\n\n<ul>\n\t<li><code>arr</code> has exactly <code>n</code> integers.</li>\n\t<li><code>1 &lt;= arr[i] &lt;= m</code> where <code>(0 &lt;= i &lt; n)</code>.</li>\n\t<li>After applying the mentioned algorithm to <code>arr</code>, the value <code>search_cost</code> is equal to <code>k</code>.</li>\n</ul>\n\n<p>Return <em>the number of ways</em> to build the array <code>arr</code> under the mentioned conditions. As the answer may grow large, the answer <strong>must be</strong> computed modulo <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, m = 3, k = 1\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, m = 2, k = 3\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no possible arrays that satisfy the mentioned conditions.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 9, m = 1, k = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= m &lt;= 100</code></li>\n\t<li><code>0 &lt;= k &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1300,
            "dislikes": 86,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"61.3K\", \"totalSubmission\": \"88.2K\", \"totalAcceptedRaw\": 61321, \"totalSubmissionRaw\": 88159, \"acRate\": \"69.6%\"}",
            "hints": [
                "Use dynamic programming approach. Build dp table where dp[a][b][c] is the number of ways you can start building the array starting from index a where the search_cost = c and the maximum used integer was b.",
                "Recursively, solve the small sub-problems first. Optimize your answer by stopping the search if you exceeded k changes."
            ],
            "rephrased": {
                "body": "Given three integers `n`, `m`, and `k`, determine the number of ways to construct an array `arr` with the following properties, modulo `10^9 + 7`:\n\n*   `arr` has exactly `n` integers.\n*   Each element `arr[i]` is within the range `1 <= arr[i] <= m` for `0 <= i < n`.\n*   When applying the provided algorithm to find the maximum element in `arr`, the variable `search_cost` is equal to `k`. (The algorithm increments `search_cost` each time a new maximum is found).\n",
                "constraints": [
                    "1 <= n <= 50",
                    "1 <= m <= 100",
                    "0 <= k <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 2, m = 3, k = 1",
                        "output": "6",
                        "explanation": "The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2], [3, 3]. Applying the algorithm:\n* [1, 1]: max = 1, search_cost = 0 -> 1\n* [2, 1]: max = 2, search_cost = 0 -> 1\n* [2, 2]: max = 2, search_cost = 0 -> 1\n* [3, 1]: max = 3, search_cost = 0 -> 1\n* [3, 2]: max = 3, search_cost = 0 -> 1\n* [3, 3]: max = 3, search_cost = 0 -> 1"
                    },
                    {
                        "input": "n = 5, m = 2, k = 3",
                        "output": "0",
                        "explanation": "There are no possible arrays that satisfy the mentioned conditions."
                    },
                    {
                        "input": "n = 9, m = 1, k = 1",
                        "output": "1",
                        "explanation": "The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use dynamic programming approach. Build dp table where dp[a][b][c] is the number of ways you can start building the array starting from index a where the search_cost = c and the maximum used integer was b.",
            "Recursively, solve the small sub-problems first. Optimize your answer by stopping the search if you exceeded k changes."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numOfArrays(int n, int m, int k) {\n    constexpr int kMod = 1'000'000'007;\n    // dp[i][j][k] := # of ways to build an array of length i, where j is the\n    // Max used num and k is the search_cost\n    vector<vector<vector<int>>> dp(\n        n + 1, vector<vector<int>>(m + 1, vector<int>(k + 1)));\n\n    for (int j = 1; j <= m; ++j)\n      dp[1][j][1] = 1;\n\n    for (int i = 2; i <= n; ++i)                 // For each length\n      for (int j = 1; j <= m; ++j)               // For each max value\n        for (int cost = 1; cost <= k; ++cost) {  // For each cost\n          // 1. appending any of [1, j] in i-th position\n          //    doesn't change the max and cost\n          dp[i][j][cost] = static_cast<long>(j) * dp[i - 1][j][cost] % kMod;\n          // 2. appending j in i-th position\n          //    make j the new max and cost 1\n          for (int prevMax = 1; prevMax < j; ++prevMax) {\n            dp[i][j][cost] += dp[i - 1][prevMax][cost - 1];\n            dp[i][j][cost] %= kMod;\n          }\n        }\n\n    int ans = 0;\n    for (int j = 1; j <= m; ++j) {\n      ans += dp[n][j][k];\n      ans %= kMod;\n    }\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numOfArrays(int n, int m, int k) {\n    final int kMod = 1_000_000_007;\n    // dp[i][j][k] := # of ways to build an array of length i, where j is the\n    // Max num and k is the `search_cost`\n    int[][][] dp = new int[n + 1][m + 1][k + 1];\n\n    for (int j = 1; j <= m; ++j)\n      dp[1][j][1] = 1;\n\n    for (int i = 2; i <= n; ++i)                // For each length\n      for (int j = 1; j <= m; ++j)              // For each max value\n        for (int cost = 1; cost <= k; ++cost) { // For each cost\n          // 1. appending any of [1, j] in i-th position\n          //    doesn't change the max and cost\n          dp[i][j][cost] = (int) ((long) j * dp[i - 1][j][cost] % kMod);\n          // 2. appending j in i-th position\n          //    make j the new max and cost 1\n          for (int prevMax = 1; prevMax < j; ++prevMax) {\n            dp[i][j][cost] += dp[i - 1][prevMax][cost - 1];\n            dp[i][j][cost] %= kMod;\n          }\n        }\n\n    int ans = 0;\n    for (int j = 1; j <= m; ++j) {\n      ans += dp[n][j][k];\n      ans %= kMod;\n    }\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numOfArrays(self, n: int, m: int, k: int) -> int:\n    kMod = 1_000_000_007\n    # dp[i][j][k] := # of ways to build an array of length i, where j is the\n    # Max used num and k is the search_cost\n    dp = [[[0] * (k + 1) for j in range(m + 1)] for _ in range(n + 1)]\n\n    for j in range(1, m + 1):\n      dp[1][j][1] = 1\n\n    for i in range(2, n + 1):  # For each length\n      for j in range(1, m + 1):  # For each max value\n        for cost in range(1, k + 1):  # For each cost\n          # 1. appending any of [1, j] in i-th position\n          #    doesn't change the max and cost\n          dp[i][j][cost] = j * dp[i - 1][j][cost] % kMod\n          # 2. appending j in i-th position\n          #    make j the new max and cost 1\n          for prevMax in range(1, j):\n            dp[i][j][cost] += dp[i - 1][prevMax][cost - 1]\n            dp[i][j][cost] %= kMod\n\n    return sum(dp[n][j][k] for j in range(1, m + 1)) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}