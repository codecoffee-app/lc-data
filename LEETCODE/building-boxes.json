{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1739",
            "title": "Building Boxes",
            "titleSlug": "building-boxes",
            "content": "<p>You have a cubic storeroom where the width, length, and height of the room are all equal to <code>n</code> units. You are asked to place <code>n</code> boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:</p>\n\n<ul>\n\t<li>You can place the boxes anywhere on the floor.</li>\n\t<li>If box <code>x</code> is placed on top of the box <code>y</code>, then each side of the four vertical sides of the box <code>y</code> <strong>must</strong> either be adjacent to another box or to a wall.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return<em> the <strong>minimum</strong> possible number of boxes touching the floor.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/3-boxes.png\" style=\"width: 135px; height: 143px;\" /></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The figure above is for the placement of the three boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/4-boxes.png\" style=\"width: 135px; height: 179px;\" /></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The figure above is for the placement of the four boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/10-boxes.png\" style=\"width: 271px; height: 257px;\" /></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The figure above is for the placement of the ten boxes.\nThese boxes are placed in the corner of the room, where the corner is on the back side.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 291,
            "dislikes": 44,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.7K\", \"totalSubmission\": \"12.9K\", \"totalAcceptedRaw\": 6737, \"totalSubmissionRaw\": 12867, \"acRate\": \"52.4%\"}",
            "hints": [
                "Suppose We can put m boxes on the floor, within all the ways to put the boxes, what\u2019s the maximum number of boxes we can put in?",
                "The first box should always start in the corner"
            ],
            "rephrased": {
                "body": "You have a cubic storeroom with dimensions n x n x n. Your task is to place 'n' unit cube boxes within this room, adhering to the following rules:\n\n*   Boxes can only be placed on the floor.\n*   If box 'x' is stacked on top of box 'y', all four vertical sides of box 'y' must be adjacent to either another box or a wall.",
                "constraints": [
                    "1 <= n <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "3",
                        "explanation": "Consider placing the boxes in a corner of the room. One box on the floor, then another on top, and a third on top, supported by the wall. This arrangement uses 3 boxes touching the floor."
                    },
                    {
                        "input": "4",
                        "output": "3",
                        "explanation": "Again, consider placing the boxes in a corner. Place one box on the floor. Then another on top. Then a third box placed beside the first on the floor is enough to support the 4th box."
                    },
                    {
                        "input": "10",
                        "output": "6",
                        "explanation": "Boxes can be placed in a pyramidal fashion in the corner of the room. The minimum number of boxes touching the floor that can support 10 boxes in this way is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Suppose We can put m boxes on the floor, within all the ways to put the boxes, what\u2019s the maximum number of boxes we can put in?",
            "The first box should always start in the corner"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumBoxes(int n) {\n    int nBoxes = 0;\n    int nextTouchings = 0;   // J\n    int currLevelBoxes = 0;  // 1 + 2 + ... + j\n\n    // Find min j s.t. nBoxes = 1 + (1 + 2) + ... + (1 + 2 + ... + j) >= n\n    while (nBoxes < n) {\n      ++nextTouchings;\n      currLevelBoxes += nextTouchings;\n      nBoxes += currLevelBoxes;\n    }\n\n    // If nBoxes = n, the answer is currLevelBoxes = 1 + 2 + ... + j\n    if (nBoxes == n)\n      return currLevelBoxes;\n\n    // Otherwise we need to remove boxes in current level and rebuild it\n    nBoxes -= currLevelBoxes;\n    currLevelBoxes -= nextTouchings;\n    nextTouchings = 0;\n\n    while (nBoxes < n) {\n      ++nextTouchings;\n      nBoxes += nextTouchings;\n    }\n\n    return currLevelBoxes + nextTouchings;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumBoxes(int n) {\n    int nBoxes = 0;\n    int nextTouchings = 0;  // J\n    int currLevelBoxes = 0; // 1 + 2 + ... + j\n\n    // Find min j s.t. nBoxes = 1 + (1 + 2) + ... + (1 + 2 + ... + j) >= n\n    while (nBoxes < n) {\n      ++nextTouchings;\n      currLevelBoxes += nextTouchings;\n      nBoxes += currLevelBoxes;\n    }\n\n    // If nBoxes = n, the answer is currLevelBoxes = 1 + 2 + ... + j\n    if (nBoxes == n)\n      return currLevelBoxes;\n\n    // Otherwise we need to remove boxes in current level and rebuild it\n    nBoxes -= currLevelBoxes;\n    currLevelBoxes -= nextTouchings;\n    nextTouchings = 0;\n\n    while (nBoxes < n) {\n      ++nextTouchings;\n      nBoxes += nextTouchings;\n    }\n\n    return currLevelBoxes + nextTouchings;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumBoxes(self, n: int) -> int:\n    nBoxes = 0\n    nextTouchings = 0   # J\n    currLevelBoxes = 0  # 1 + 2 + ... + j\n\n    # Find min j s.t. nBoxes = 1 + (1 + 2) + ... + (1 + 2 + ... + j) >= n\n    while nBoxes < n:\n      nextTouchings += 1\n      currLevelBoxes += nextTouchings\n      nBoxes += currLevelBoxes\n\n    # If nBoxes = n, the answer is currLevelBoxes = 1 + 2 + ... + j\n    if nBoxes == n:\n      return currLevelBoxes\n\n    # Otherwise we need to remove boxes in current level and rebuild it\n    nBoxes -= currLevelBoxes\n    currLevelBoxes -= nextTouchings\n    nextTouchings = 0\n\n    while nBoxes < n:\n      nextTouchings += 1\n      nBoxes += nextTouchings\n\n    return currLevelBoxes + nextTouchings\n",
                "lang_text": "py"
            }
        }
    }
}