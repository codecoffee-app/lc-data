{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "312",
            "title": "Burst Balloons",
            "titleSlug": "burst-balloons",
            "content": "<p>You are given <code>n</code> balloons, indexed from <code>0</code> to <code>n - 1</code>. Each balloon is painted with a number on it represented by an array <code>nums</code>. You are asked to burst all the balloons.</p>\n\n<p>If you burst the <code>i<sup>th</sup></code> balloon, you will get <code>nums[i - 1] * nums[i] * nums[i + 1]</code> coins. If <code>i - 1</code> or <code>i + 1</code> goes out of bounds of the array, then treat it as if there is a balloon with a <code>1</code> painted on it.</p>\n\n<p>Return <em>the maximum coins you can collect by bursting the balloons wisely</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,5,8]\n<strong>Output:</strong> 167\n<strong>Explanation:</strong>\nnums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5]\n<strong>Output:</strong> 10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 300</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 8683,
            "dislikes": 224,
            "similarQuestions": "[{\"title\": \"Minimum Cost to Merge Stones\", \"titleSlug\": \"minimum-cost-to-merge-stones\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"263K\", \"totalSubmission\": \"451K\", \"totalAcceptedRaw\": 263031, \"totalSubmissionRaw\": 450997, \"acRate\": \"58.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given `n` balloons, indexed from `0` to `n - 1`. Each balloon has a number written on it, represented by the array `nums`. Your task is to burst all the balloons. When you burst the `i`-th balloon, you earn coins equal to `nums[i - 1] * nums[i] * nums[i + 1]`. If `i - 1` or `i + 1` is out of bounds, consider it as a balloon with a value of `1`.  Determine the maximum number of coins you can collect by bursting the balloons in an optimal order.",
                "constraints": [
                    "`n == nums.length`",
                    "`1 <= n <= 300`",
                    "`0 <= nums[i] <= 100`"
                ],
                "testcases": [
                    {
                        "input": "[3,1,5,8]",
                        "output": "167",
                        "explanation": "The optimal bursting order results in the following: First, burst the balloon with value 1 (earning 3*1*5 = 15 coins). Then, burst the balloon with value 5 (earning 3*5*8 = 120 coins).  Next, burst the balloon with value 3 (earning 1*3*8 = 24 coins). Finally, burst the balloon with value 8 (earning 1*8*1 = 8 coins). The total coins collected are 15 + 120 + 24 + 8 = 167."
                    },
                    {
                        "input": "[1,5]",
                        "output": "10",
                        "explanation": "Bursting the 1st balloon earns 1 * 1 * 5 = 5, then bursting the balloon 5 earns 1 * 5 * 1 = 5. Sum is 10."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-merge-stones",
                "title": "Minimum Cost to Merge Stones",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxCoins(vector<int>& nums) {\n    const int n = nums.size();\n\n    nums.insert(nums.begin(), 1);\n    nums.insert(nums.end(), 1);\n\n    // dp[i][j] := maxCoins(nums[i..j])\n    dp.resize(n + 2, vector<int>(n + 2));\n    return maxCoins(nums, 1, n);\n  }\n\n private:\n  vector<vector<int>> dp;\n\n  int maxCoins(vector<int>& nums, int i, int j) {\n    if (i > j)\n      return 0;\n    if (dp[i][j] > 0)\n      return dp[i][j];\n\n    for (int k = i; k <= j; ++k)\n      dp[i][j] = max(dp[i][j],                                              //\n                     maxCoins(nums, i, k - 1) + maxCoins(nums, k + 1, j) +  //\n                         nums[i - 1] * nums[k] * nums[j + 1]);\n\n    return dp[i][j];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxCoins(int[] nums) {\n    final int n = nums.length;\n\n    A = new int[n + 2];\n\n    System.arraycopy(nums, 0, A, 1, n);\n    A[0] = 1;\n    A[n + 1] = 1;\n\n    // dp[i][j] := maxCoins(A[i..j])\n    dp = new int[n + 2][n + 2];\n    return maxCoins(1, n);\n  }\n\n  private int[][] dp;\n  private int[] A;\n\n  private int maxCoins(int i, int j) {\n    if (i > j)\n      return 0;\n    if (dp[i][j] > 0)\n      return dp[i][j];\n\n    for (int k = i; k <= j; ++k)\n      dp[i][j] = Math.max(dp[i][j],                                 //\n                          maxCoins(i, k - 1) + maxCoins(k + 1, j) + //\n                              A[i - 1] * A[k] * A[j + 1]);\n\n    return dp[i][j];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxCoins(self, nums: List[int]) -> int:\n    A = [1] + nums + [1]\n\n    @functools.lru_cache(None)\n    def dp(i: int, j: int) -> int:\n      if i > j:\n        return 0\n\n      return max(dp(i, k - 1) + dp(k + 1, j) + A[i - 1] * A[k] * A[j + 1]\n                 for k in range(i, j + 1))\n\n    return dp(1, len(nums))\n",
                "lang_text": "py"
            }
        }
    }
}