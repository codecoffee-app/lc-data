{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2706",
            "title": "Buy Two Chocolates",
            "titleSlug": "buy-two-chocolates",
            "content": "<p>You are given an integer array <code>prices</code> representing the prices of various chocolates in a store. You are also given a single integer <code>money</code>, which represents your initial amount of money.</p>\n\n<p>You must buy <strong>exactly</strong> two chocolates in such a way that you still have some <strong>non-negative</strong> leftover money. You would like to minimize the sum of the prices of the two chocolates you buy.</p>\n\n<p>Return <em>the amount of money you will have leftover after buying the two chocolates</em>. If there is no way for you to buy two chocolates without ending up in debt, return <code>money</code>. Note that the leftover must be non-negative.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,2,2], money = 3\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Purchase the chocolates priced at 1 and 2 units respectively. You will have 3 - 3 = 0 units of money afterwards. Thus, we return 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [3,2,3], money = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> You cannot buy 2 chocolates without going in debt, so we return 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= prices.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= prices[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= money &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 923,
            "dislikes": 63,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"156.7K\", \"totalSubmission\": \"223.2K\", \"totalAcceptedRaw\": 156703, \"totalSubmissionRaw\": 223215, \"acRate\": \"70.2%\"}",
            "hints": [
                "Sort the array and check if the money is more than or equal to the sum of the two cheapest elements."
            ],
            "rephrased": {
                "body": "Given an array `prices` representing chocolate prices and an integer `money` representing your initial amount, you must buy exactly two chocolates. Your goal is to minimize the total cost of the two chocolates while ensuring you have non-negative leftover money. Return the amount of money left after buying the two chocolates. If you cannot buy two chocolates without going into debt, return the original amount of `money`.",
                "constraints": [
                    "2 <= prices.length <= 50",
                    "1 <= prices[i] <= 100",
                    "1 <= money <= 100"
                ],
                "testcases": [
                    {
                        "input": "prices = [1,2,2], money = 3",
                        "output": "0",
                        "explanation": "The cheapest two chocolates cost 1 and 2, for a total of 3.  3 - 3 = 0. The leftover money is 0."
                    },
                    {
                        "input": "prices = [3,2,3], money = 3",
                        "output": "3",
                        "explanation": "It's impossible to buy two chocolates without exceeding the available money. Therefore, the original amount of money, 3, is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Sort the array and check if the money is more than or equal to the sum of the two cheapest elements."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int buyChoco(vector<int>& prices, int money) {\n    int min1 = INT_MAX;\n    int min2 = INT_MAX;\n\n    for (const int price : prices)\n      if (price <= min1) {\n        min2 = min1;\n        min1 = price;\n      } else if (price < min2) {\n        min2 = price;\n      }\n\n    const int minCost = min1 + min2;\n    return minCost > money ? money : money - minCost;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int buyChoco(int[] prices, int money) {\n    int min1 = Integer.MAX_VALUE;\n    int min2 = Integer.MAX_VALUE;\n\n    for (final int price : prices)\n      if (price <= min1) {\n        min2 = min1;\n        min1 = price;\n      } else if (price < min2) {\n        min2 = price;\n      }\n\n    final int minCost = min1 + min2;\n    return minCost > money ? money : money - minCost;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def buyChoco(self, prices: List[int], money: int) -> int:\n    min1 = math.inf\n    min2 = math.inf\n\n    for price in prices:\n      if price <= min1:\n        min2 = min1\n        min1 = price\n      elif price < min2:\n        min2 = price\n\n    minCost = min1 + min2\n    return money if minCost > money else money - minCost\n",
                "lang_text": "py"
            }
        }
    }
}