{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2622",
            "title": "Cache With Time Limit",
            "titleSlug": "cache-with-time-limit",
            "content": "<p>Write a class that allows getting and setting&nbsp;key-value pairs, however a&nbsp;<strong>time until expiration</strong>&nbsp;is associated with each key.</p>\n\n<p>The class has three public methods:</p>\n\n<p><code>set(key, value, duration)</code>:&nbsp;accepts an integer&nbsp;<code>key</code>, an&nbsp;integer&nbsp;<code>value</code>, and a <code>duration</code> in milliseconds. Once the&nbsp;<code>duration</code>&nbsp;has elapsed, the key should be inaccessible. The method should return&nbsp;<code>true</code>&nbsp;if the same&nbsp;un-expired key already exists and <code>false</code> otherwise. Both the value and duration should be overwritten if the key already exists.</p>\n\n<p><code>get(key)</code>: if an un-expired key exists, it should return the associated value. Otherwise it should return&nbsp;<code>-1</code>.</p>\n\n<p><code>count()</code>: returns the count of un-expired keys.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nactions = [&quot;TimeLimitedCache&quot;, &quot;set&quot;, &quot;get&quot;, &quot;count&quot;, &quot;get&quot;]\nvalues = [[], [1, 42, 100], [1], [], [1]]\ntimeDelays = [0, 0, 50, 50, 150]\n<strong>Output:</strong> [null, false, 42, 1, -1]\n<strong>Explanation:</strong>\nAt t=0, the cache is constructed.\nAt t=0, a key-value pair (1: 42) is added with a time limit of 100ms. The value doesn&#39;t exist so false is returned.\nAt t=50, key=1 is requested and the value of 42 is returned.\nAt t=50, count() is called and there is one active key in the cache.\nAt t=100, key=1 expires.\nAt t=150, get(1) is called but -1 is returned because the cache is empty.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nactions = [&quot;TimeLimitedCache&quot;, &quot;set&quot;, &quot;set&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;, &quot;count&quot;]\nvalues = [[], [1, 42, 50], [1, 50, 100], [1], [1], [1], []]\ntimeDelays = [0, 0, 40, 50, 120, 200, 250]\n<strong>Output:</strong> [null, false, true, 50, 50, -1, 0]\n<strong>Explanation:</strong>\nAt t=0, the cache is constructed.\nAt t=0, a key-value pair (1: 42) is added with a time limit of 50ms. The value doesn&#39;t exist so false is returned.\nAt t=40, a key-value pair (1: 50) is added with a time limit of 100ms. A non-expired value already existed so true is returned and the old value was overwritten.\nAt t=50, get(1) is called which returned 50.\nAt t=120, get(1) is called which returned 50.\nAt t=140, key=1 expires.\nAt t=200, get(1) is called but the cache is empty so -1 is returned.\nAt t=250, count() returns 0 because the cache is empty.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= key, value &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= duration &lt;= 1000</code></li>\n\t<li><code>1 &lt;= actions.length &lt;= 100</code></li>\n\t<li><code>actions.length === values.length</code></li>\n\t<li><code>actions.length === timeDelays.length</code></li>\n\t<li><code>0 &lt;= timeDelays[i] &lt;= 1450</code></li>\n\t<li><code>actions[i]</code>&nbsp;is one of &quot;TimeLimitedCache&quot;, &quot;set&quot;, &quot;get&quot; and&nbsp;&quot;count&quot;</li>\n\t<li>First action is always &quot;TimeLimitedCache&quot; and must be executed immediately, with a 0-millisecond delay</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 362,
            "dislikes": 27,
            "similarQuestions": "[{\"title\": \"Debounce\", \"titleSlug\": \"debounce\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Promise Time Limit\", \"titleSlug\": \"promise-time-limit\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Promise Pool\", \"titleSlug\": \"promise-pool\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [],
            "stats": "{\"totalAccepted\": \"27K\", \"totalSubmission\": \"36.3K\", \"totalAcceptedRaw\": 27022, \"totalSubmissionRaw\": 36295, \"acRate\": \"74.5%\"}",
            "hints": [
                "You can delay execution of code with \"ref = setTimeout(fn, delay)\". You can abort the execution with \"clearTimeout(ref)\"",
                "When storing the values in the cache, also store a reference to the timeout. The timeout should clear the key from the cache after the expiration has elapsed.",
                "When you set a key that already exists, clear the existing timeout."
            ],
            "rephrased": {
                "body": "Implement a `TimeLimitedCache` class that stores key-value pairs with an expiration time for each key. The class should have the following methods:\n\n*   `set(key, value, duration)`: Associates the given `key` with the given `value` and sets an expiration time of `duration` milliseconds. If the key already exists and has not expired, the existing value and duration should be overwritten. Returns `true` if the key already existed and was not expired, and `false` otherwise.\n*   `get(key)`: Returns the value associated with the given `key` if the key exists and has not expired. Otherwise, returns `-1`.\n*   `count()`: Returns the number of unexpired keys in the cache.",
                "constraints": [
                    "0 <= key, value <= 10^9",
                    "0 <= duration <= 1000",
                    "1 <= actions.length <= 100",
                    "actions.length === values.length",
                    "actions.length === timeDelays.length",
                    "0 <= timeDelays[i] <= 1450",
                    "actions[i] is one of 'TimeLimitedCache', 'set', 'get' and 'count'",
                    "First action is always 'TimeLimitedCache' and must be executed immediately, with a 0-millisecond delay"
                ],
                "testcases": [
                    {
                        "input": "actions = [\"TimeLimitedCache\", \"set\", \"get\", \"count\", \"get\"]\nvalues = [[], [1, 42, 100], [1], [], [1]]\ntimeDelays = [0, 0, 50, 50, 150]",
                        "output": "[null, false, 42, 1, -1]",
                        "explanation": "The cache is initialized. Key 1 is set with a value of 42 and a duration of 100ms. Since the key is new, set returns false.  After 50ms, get(1) returns 42. count() returns 1 since the key is active. After 150ms (duration expired), get(1) returns -1 because the key has expired."
                    },
                    {
                        "input": "actions = [\"TimeLimitedCache\", \"set\", \"set\", \"get\", \"get\", \"get\", \"count\"]\nvalues = [[], [1, 42, 50], [1, 50, 100], [1], [1], [1], []]\ntimeDelays = [0, 0, 40, 50, 120, 200, 250]",
                        "output": "[null, false, true, 50, 50, -1, 0]",
                        "explanation": "The cache is initialized. Key 1 is set with value 42 and duration 50ms (returns false). After 40ms, key 1 is set again with value 50 and duration 100ms (returns true since key existed). At 50ms, get(1) returns 50. At 120ms, get(1) still returns 50 (duration not elapsed yet). At 200ms, get(1) returns -1 (key expired at 140ms). At 250ms, count() returns 0 as the cache is empty."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "debounce",
                "title": "Debounce",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "promise-time-limit",
                "title": "Promise Time Limit",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "promise-pool",
                "title": "Promise Pool",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "You can delay execution of code with \"ref = setTimeout(fn, delay)\". You can abort the execution with \"clearTimeout(ref)\"",
            "When storing the values in the cache, also store a reference to the timeout. The timeout should clear the key from the cache after the expiration has elapsed.",
            "When you set a key that already exists, clear the existing timeout."
        ],
        "relatedTopics": []
    }
}