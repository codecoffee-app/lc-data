{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1023",
            "title": "Camelcase Matching",
            "titleSlug": "camelcase-matching",
            "content": "<p>Given an array of strings <code>queries</code> and a string <code>pattern</code>, return a boolean array <code>answer</code> where <code>answer[i]</code> is <code>true</code> if <code>queries[i]</code> matches <code>pattern</code>, and <code>false</code> otherwise.</p>\n\n<p>A query word <code>queries[i]</code> matches <code>pattern</code> if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [&quot;FooBar&quot;,&quot;FooBarTest&quot;,&quot;FootBall&quot;,&quot;FrameBuffer&quot;,&quot;ForceFeedBack&quot;], pattern = &quot;FB&quot;\n<strong>Output:</strong> [true,false,true,true,false]\n<strong>Explanation:</strong> &quot;FooBar&quot; can be generated like this &quot;F&quot; + &quot;oo&quot; + &quot;B&quot; + &quot;ar&quot;.\n&quot;FootBall&quot; can be generated like this &quot;F&quot; + &quot;oot&quot; + &quot;B&quot; + &quot;all&quot;.\n&quot;FrameBuffer&quot; can be generated like this &quot;F&quot; + &quot;rame&quot; + &quot;B&quot; + &quot;uffer&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [&quot;FooBar&quot;,&quot;FooBarTest&quot;,&quot;FootBall&quot;,&quot;FrameBuffer&quot;,&quot;ForceFeedBack&quot;], pattern = &quot;FoBa&quot;\n<strong>Output:</strong> [true,false,true,false,false]\n<strong>Explanation:</strong> &quot;FooBar&quot; can be generated like this &quot;Fo&quot; + &quot;o&quot; + &quot;Ba&quot; + &quot;r&quot;.\n&quot;FootBall&quot; can be generated like this &quot;Fo&quot; + &quot;ot&quot; + &quot;Ba&quot; + &quot;ll&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [&quot;FooBar&quot;,&quot;FooBarTest&quot;,&quot;FootBall&quot;,&quot;FrameBuffer&quot;,&quot;ForceFeedBack&quot;], pattern = &quot;FoBaT&quot;\n<strong>Output:</strong> [false,true,false,false,false]\n<strong>Explanation:</strong> &quot;FooBarTest&quot; can be generated like this &quot;Fo&quot; + &quot;o&quot; + &quot;Ba&quot; + &quot;r&quot; + &quot;T&quot; + &quot;est&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length, queries.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= queries[i].length &lt;= 100</code></li>\n\t<li><code>queries[i]</code> and <code>pattern</code> consist of English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 853,
            "dislikes": 310,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                }
            ],
            "stats": "{\"totalAccepted\": \"44.5K\", \"totalSubmission\": \"72.3K\", \"totalAcceptedRaw\": 44492, \"totalSubmissionRaw\": 72296, \"acRate\": \"61.5%\"}",
            "hints": [
                "Given a single pattern and word, how can we solve it?",
                "One way to do it is using a DP (pos1, pos2) where pos1 is a pointer to the word and pos2 to the pattern and returns true if we can match the pattern with the given word.",
                "We have two scenarios: The first one is when `word[pos1] == pattern[pos2]`, then the transition will be just DP(pos1 + 1, pos2 + 1). The second scenario is when `word[pos1]` is lowercase then we can add this character to the pattern so that the transition is just DP(pos1 + 1, pos2)\r\nThe case base is `if (pos1 == n && pos2 == m) return true;` Where n and m are the sizes of the strings word and pattern respectively."
            ],
            "rephrased": {
                "body": "Given an array of strings `queries` and a string `pattern`, determine which queries match the pattern. A query word `queries[i]` matches `pattern` if it's possible to insert lowercase English letters into the pattern such that it becomes the query. The insertion can occur at any position, and no pattern characters can be removed.",
                "constraints": [
                    "1 <= pattern.length, queries.length <= 100",
                    "1 <= queries[i].length <= 100",
                    "queries[i] and pattern consist of English letters."
                ],
                "testcases": [
                    {
                        "input": "queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"",
                        "output": "[true,false,true,true,false]",
                        "explanation": "\"FooBar\" matches because it can be formed by inserting lowercase letters into \"FB\" as: \"F\" + \"oo\" + \"B\" + \"ar\". \"FootBall\" matches: \"F\" + \"oot\" + \"B\" + \"all\". \"FrameBuffer\" matches: \"F\" + \"rame\" + \"B\" + \"uffer\"."
                    },
                    {
                        "input": "queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"",
                        "output": "[true,false,true,false,false]",
                        "explanation": "\"FooBar\" matches because it can be formed by inserting lowercase letters into \"FoBa\" as: \"Fo\" + \"o\" + \"Ba\" + \"r\". \"FootBall\" matches: \"Fo\" + \"ot\" + \"Ba\" + \"ll\"."
                    },
                    {
                        "input": "queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"",
                        "output": "[false,true,false,false,false]",
                        "explanation": "\"FooBarTest\" matches because it can be formed by inserting lowercase letters into \"FoBaT\" as: \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Given a single pattern and word, how can we solve it?",
            "One way to do it is using a DP (pos1, pos2) where pos1 is a pointer to the word and pos2 to the pattern and returns true if we can match the pattern with the given word.",
            "We have two scenarios: The first one is when `word[pos1] == pattern[pos2]`, then the transition will be just DP(pos1 + 1, pos2 + 1). The second scenario is when `word[pos1]` is lowercase then we can add this character to the pattern so that the transition is just DP(pos1 + 1, pos2)\r\nThe case base is `if (pos1 == n && pos2 == m) return true;` Where n and m are the sizes of the strings word and pattern respectively."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<bool> camelMatch(vector<string>& queries, string pattern) {\n    vector<bool> ans;\n    for (const string& query : queries)\n      ans.push_back(isMatch(query, pattern));\n    return ans;\n  }\n\n private:\n  bool isMatch(const string& query, const string& pattern) {\n    int j = 0;\n    for (const char c : query)\n      if (j < pattern.length() && c == pattern[j])\n        ++j;\n      else if (isupper(c))\n        return false;\n    return j == pattern.length();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Boolean> camelMatch(String[] queries, String pattern) {\n    List<Boolean> ans = new ArrayList<>();\n    for (final String q : queries)\n      ans.add(isMatch(q, pattern));\n    return ans;\n  }\n\n  private boolean isMatch(final String query, final String pattern) {\n    int j = 0;\n    for (final char c : query.toCharArray())\n      if (j < pattern.length() && c == pattern.charAt(j))\n        ++j;\n      else if (Character.isUpperCase(c))\n        return false;\n    return j == pattern.length();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def camelMatch(self, queries: List[str], pattern: str) -> List[bool]:\n    def isMatch(query: str) -> bool:\n      j = 0\n      for c in query:\n        if j < len(pattern) and c == pattern[j]:\n          j += 1\n        elif c.isupper():\n          return False\n      return j == len(pattern)\n\n    return [isMatch(query) for query in queries]\n",
                "lang_text": "py"
            }
        }
    }
}