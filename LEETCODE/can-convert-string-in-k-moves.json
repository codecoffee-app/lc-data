{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1540",
            "title": "Can Convert String in K Moves",
            "titleSlug": "can-convert-string-in-k-moves",
            "content": "<p>Given two strings&nbsp;<code>s</code>&nbsp;and&nbsp;<code>t</code>, your goal is to convert&nbsp;<code>s</code>&nbsp;into&nbsp;<code>t</code>&nbsp;in&nbsp;<code>k</code><strong>&nbsp;</strong>moves or less.</p>\n\n<p>During the&nbsp;<code>i<sup>th</sup></code>&nbsp;(<font face=\"monospace\"><code>1 &lt;= i &lt;= k</code>)&nbsp;</font>move you can:</p>\n\n<ul>\n\t<li>Choose any index&nbsp;<code>j</code>&nbsp;(1-indexed) from&nbsp;<code>s</code>, such that&nbsp;<code>1 &lt;= j &lt;= s.length</code>&nbsp;and <code>j</code>&nbsp;has not been chosen in any previous move,&nbsp;and shift the character at that index&nbsp;<code>i</code>&nbsp;times.</li>\n\t<li>Do nothing.</li>\n</ul>\n\n<p>Shifting a character means replacing it by the next letter in the alphabet&nbsp;(wrapping around so that&nbsp;<code>&#39;z&#39;</code>&nbsp;becomes&nbsp;<code>&#39;a&#39;</code>). Shifting a character by&nbsp;<code>i</code>&nbsp;means applying the shift operations&nbsp;<code>i</code>&nbsp;times.</p>\n\n<p>Remember that any index&nbsp;<code>j</code>&nbsp;can be picked at most once.</p>\n\n<p>Return&nbsp;<code>true</code>&nbsp;if it&#39;s possible to convert&nbsp;<code>s</code>&nbsp;into&nbsp;<code>t</code>&nbsp;in no more than&nbsp;<code>k</code>&nbsp;moves, otherwise return&nbsp;<code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;input&quot;, t = &quot;ouput&quot;, k = 9\n<strong>Output:</strong> true\n<b>Explanation: </b>In the 6th move, we shift &#39;i&#39; 6 times to get &#39;o&#39;. And in the 7th move we shift &#39;n&#39; to get &#39;u&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;, t = &quot;bcd&quot;, k = 10\n<strong>Output:</strong> false\n<strong>Explanation: </strong>We need to shift each character in s one time to convert it into t. We can shift &#39;a&#39; to &#39;b&#39; during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aab&quot;, t = &quot;bbb&quot;, k = 27\n<strong>Output:</strong> true\n<b>Explanation: </b>In the 1st move, we shift the first &#39;a&#39; 1 time to get &#39;b&#39;. In the 27th move, we shift the second &#39;a&#39; 27 times to get &#39;b&#39;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 10^5</code></li>\n\t<li><code>0 &lt;= k &lt;= 10^9</code></li>\n\t<li><code>s</code>, <code>t</code> contain&nbsp;only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 370,
            "dislikes": 305,
            "similarQuestions": "[{\"title\": \"Minimum Cost to Convert String I\", \"titleSlug\": \"minimum-cost-to-convert-string-i\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Convert String II\", \"titleSlug\": \"minimum-cost-to-convert-string-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"18K\", \"totalSubmission\": \"52.4K\", \"totalAcceptedRaw\": 18047, \"totalSubmissionRaw\": 52425, \"acRate\": \"34.4%\"}",
            "hints": [
                "Observe that shifting a letter x times has the same effect of shifting the letter x + 26 times.",
                "You need to check whether k is large enough to cover all shifts with the same remainder after modulo 26."
            ],
            "rephrased": {
                "body": "Given two strings `s` and `t`, determine if it's possible to transform `s` into `t` using at most `k` moves. In each move `i` (from 1 to `k`), you can either shift a character at an unchosen index in `s` by `i` positions in the alphabet (wrapping around 'z' to 'a'), or do nothing. Each index in `s` can be chosen at most once.",
                "constraints": [
                    "1 <= s.length, t.length <= 10^5",
                    "0 <= k <= 10^9",
                    "s and t contain only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"input\", t = \"ouput\", k = 9",
                        "output": "true",
                        "explanation": "We can shift 'i' in the 6th move by 6 positions to get 'o', and shift 'n' in the 7th move by 7 positions to get 'u'."
                    },
                    {
                        "input": "s = \"abc\", t = \"bcd\", k = 10",
                        "output": "false",
                        "explanation": "To convert 'abc' to 'bcd', we need to shift each character by 1. However, we can only perform one shift in the first move and have no way of shifting the other characters in the remaining moves."
                    },
                    {
                        "input": "s = \"aab\", t = \"bbb\", k = 27",
                        "output": "true",
                        "explanation": "We can shift the first 'a' by 1 in the first move to get 'b', and shift the second 'a' by 27 in the 27th move to get 'b'."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-cost-to-convert-string-i",
                "title": "Minimum Cost to Convert String I",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-convert-string-ii",
                "title": "Minimum Cost to Convert String II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Observe that shifting a letter x times has the same effect of shifting the letter x + 26 times.",
            "You need to check whether k is large enough to cover all shifts with the same remainder after modulo 26."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canConvertString(string s, string t, int k) {\n    if (s.length() != t.length())\n      return false;\n\n    // E.g. s = \"aab\", t = \"bbc\", so shiftCount[1] = 3\n    // For a -> b, need 1 move\n    //     a -> b, need 1 + 26 moves\n    //     b -> c, need 1 + 26 * 2 moves\n    vector<int> shiftCount(26);\n\n    for (int i = 0; i < s.length(); ++i)\n      ++shiftCount[(t[i] - s[i] + 26) % 26];\n\n    for (int shift = 1; shift < 26; ++shift)\n      if (shift + 26 * (shiftCount[shift] - 1) > k)\n        return false;\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canConvertString(String s, String t, int k) {\n    if (s.length() != t.length())\n      return false;\n\n    // E.g. s = \"aab\", t = \"bbc\", so shiftCount[1] = 3\n    // For a -> b, need 1 move\n    //     a -> b, need 1 + 26 moves\n    //     b -> c, need 1 + 26 * 2 moves\n    int[] shiftCount = new int[26];\n\n    for (int i = 0; i < s.length(); ++i)\n      ++shiftCount[(t.charAt(i) - s.charAt(i) + 26) % 26];\n\n    for (int shift = 1; shift < 26; ++shift)\n      if (shift + 26 * (shiftCount[shift] - 1) > k)\n        return false;\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canConvertString(self, s: str, t: str, k: int) -> bool:\n    if len(s) != len(t):\n      return False\n\n    # E.g. s = 'aab', t = 'bbc', so shiftCount[1] = 3\n    # For a . b, need 1 move\n    #     a . b, need 1 + 26 moves\n    #     b . c, need 1 + 26 * 2 moves\n    shiftCount = [0] * 26\n\n    for a, b in zip(s, t):\n      shiftCount[(ord(b) - ord(a) + 26) % 26] += 1\n\n    for shift in range(1, 26):\n      if shift + 26 * (shiftCount[shift] - 1) > k:\n        return False\n\n    return True\n",
                "lang_text": "py"
            }
        }
    }
}