{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "464",
            "title": "Can I Win",
            "titleSlug": "can-i-win",
            "content": "<p>In the &quot;100 game&quot; two players take turns adding, to a running total, any integer from <code>1</code> to <code>10</code>. The player who first causes the running total to <strong>reach or exceed</strong> 100 wins.</p>\n\n<p>What if we change the game so that players <strong>cannot</strong> re-use integers?</p>\n\n<p>For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total &gt;= 100.</p>\n\n<p>Given two integers <code>maxChoosableInteger</code> and <code>desiredTotal</code>, return <code>true</code> if the first player to move can force a win, otherwise, return <code>false</code>. Assume both players play <strong>optimally</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxChoosableInteger = 10, desiredTotal = 11\n<strong>Output:</strong> false\n<strong>Explanation:</strong>\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is &gt;= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxChoosableInteger = 10, desiredTotal = 0\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxChoosableInteger = 10, desiredTotal = 1\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= maxChoosableInteger &lt;= 20</code></li>\n\t<li><code>0 &lt;= desiredTotal &lt;= 300</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2584,
            "dislikes": 377,
            "similarQuestions": "[{\"title\": \"Flip Game II\", \"titleSlug\": \"flip-game-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower II\", \"titleSlug\": \"guess-number-higher-or-lower-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Predict the Winner\", \"titleSlug\": \"predict-the-winner\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"91K\", \"totalSubmission\": \"307.9K\", \"totalAcceptedRaw\": 91036, \"totalSubmissionRaw\": 307897, \"acRate\": \"29.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Two players play a game. They take turns choosing integers from 1 to `maxChoosableInteger` without replacement. The player who first causes the running total to reach or exceed `desiredTotal` wins. Determine if the first player can force a win, assuming both players play optimally.",
                "constraints": [
                    "1 <= maxChoosableInteger <= 20",
                    "0 <= desiredTotal <= 300"
                ],
                "testcases": [
                    {
                        "input": "maxChoosableInteger = 10, desiredTotal = 11",
                        "output": "false",
                        "explanation": "No matter which integer the first player chooses, the second player can always make a move to reach or exceed the desired total."
                    },
                    {
                        "input": "maxChoosableInteger = 10, desiredTotal = 0",
                        "output": "true",
                        "explanation": "The desired total is already met at the beginning of the game, so the first player wins immediately."
                    },
                    {
                        "input": "maxChoosableInteger = 10, desiredTotal = 1",
                        "output": "true",
                        "explanation": "The first player can simply choose 1 and win immediately."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "flip-game-ii",
                "title": "Flip Game II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "guess-number-higher-or-lower-ii",
                "title": "Guess Number Higher or Lower II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "predict-the-winner",
                "title": "Predict the Winner",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canIWin(int maxChoosableInteger, int desiredTotal) {\n    if (desiredTotal <= 0)\n      return true;\n\n    const int sum = maxChoosableInteger * (maxChoosableInteger + 1) / 2;\n    if (sum < desiredTotal)\n      return false;\n\n    return dp(desiredTotal, 0, maxChoosableInteger);\n  }\n\n private:\n  unordered_map<int, bool> memo;  // true: can win, false: can't win\n\n  // state: record integers that have been chosen\n  bool dp(int total, int state, int n) {\n    if (total <= 0)\n      return false;\n    if (const auto it = memo.find(state); it != memo.cend())\n      return it->second;\n\n    for (int i = 1; i <= n; ++i) {\n      if (state & 1 << i)  // Integer i is used\n        continue;\n      if (!dp(total - i, state | 1 << i, n))\n        return true;\n    }\n\n    return memo[state] = false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canIWin(int maxChoosableInteger, int desiredTotal) {\n    if (desiredTotal <= 0)\n      return true;\n\n    final int sum = maxChoosableInteger * (maxChoosableInteger + 1) / 2;\n    if (sum < desiredTotal)\n      return false;\n\n    return dp(desiredTotal, 0, maxChoosableInteger);\n  }\n\n  // true: can win, false: can't win\n  private Map<Integer, Boolean> memo = new HashMap<>();\n\n  // state: record integers that have been chosen\n  private boolean dp(int total, int state, int n) {\n    if (total <= 0)\n      return false;\n    if (memo.containsKey(state))\n      return memo.get(state);\n\n    for (int i = 1; i <= n; ++i) {\n      if ((state & 1 << i) == 1) // Integer i is used\n        continue;\n      if (!dp(total - i, state | 1 << i, n))\n        return true;\n    }\n\n    memo.put(state, false);\n    return false;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}