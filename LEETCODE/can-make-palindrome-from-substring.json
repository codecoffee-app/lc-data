{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1177",
            "title": "Can Make Palindrome from Substring",
            "titleSlug": "can-make-palindrome-from-substring",
            "content": "<p>You are given a string <code>s</code> and array <code>queries</code> where <code>queries[i] = [left<sub>i</sub>, right<sub>i</sub>, k<sub>i</sub>]</code>. We may rearrange the substring <code>s[left<sub>i</sub>...right<sub>i</sub>]</code> for each query and then choose up to <code>k<sub>i</sub></code> of them to replace with any lowercase English letter.</p>\n\n<p>If the substring is possible to be a palindrome string after the operations above, the result of the query is <code>true</code>. Otherwise, the result is <code>false</code>.</p>\n\n<p>Return a boolean array <code>answer</code> where <code>answer[i]</code> is the result of the <code>i<sup>th</sup></code> query <code>queries[i]</code>.</p>\n\n<p>Note that each letter is counted individually for replacement, so if, for example <code>s[left<sub>i</sub>...right<sub>i</sub>] = &quot;aaa&quot;</code>, and <code>k<sub>i</sub> = 2</code>, we can only replace two of the letters. Also, note that no query modifies the initial string <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example :</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcda&quot;, queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]\n<strong>Output:</strong> [true,false,false,true,true]\n<strong>Explanation:</strong>\nqueries[0]: substring = &quot;d&quot;, is palidrome.\nqueries[1]: substring = &quot;bc&quot;, is not palidrome.\nqueries[2]: substring = &quot;abcd&quot;, is not palidrome after replacing only 1 character.\nqueries[3]: substring = &quot;abcd&quot;, could be changed to &quot;abba&quot; which is palidrome. Also this can be changed to &quot;baab&quot; first rearrange it &quot;bacd&quot; then replace &quot;cd&quot; with &quot;ab&quot;.\nqueries[4]: substring = &quot;abcda&quot;, could be changed to &quot;abcba&quot; which is palidrome.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;lyb&quot;, queries = [[0,1,0],[2,2,1]]\n<strong>Output:</strong> [false,true]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt; s.length</code></li>\n\t<li><code>0 &lt;= k<sub>i</sub> &lt;= s.length</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 771,
            "dislikes": 269,
            "similarQuestions": "[{\"title\": \"Plates Between Candles\", \"titleSlug\": \"plates-between-candles\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"26.1K\", \"totalSubmission\": \"67.5K\", \"totalAcceptedRaw\": 26096, \"totalSubmissionRaw\": 67508, \"acRate\": \"38.7%\"}",
            "hints": [
                "Since we can rearrange the substring, all we care about is the frequency of each character in that substring.",
                "How to find the character frequencies efficiently ?",
                "As a preprocess, calculate the accumulate frequency of all characters for all prefixes of the string.",
                "How to check if a substring can be changed to a palindrome given its characters frequency ?",
                "Count the number of odd frequencies, there can be at most one odd frequency in a palindrome."
            ],
            "rephrased": {
                "body": "Given a string `s` and an array `queries` where `queries[i] = [left<sub>i</sub>, right<sub>i</sub>, k<sub>i</sub>]`, determine if the substring `s[left<sub>i</sub>...right<sub>i</sub>]` can be rearranged into a palindrome after replacing at most `k<sub>i</sub>` characters with any lowercase English letter.\n\nReturn a boolean array `answer` where `answer[i]` is `true` if the `i<sup>th</sup>` query's substring can be made a palindrome with the given constraints, and `false` otherwise.\n\nNote: Each character replacement is counted individually, and the initial string `s` remains unchanged by the queries.",
                "constraints": [
                    "1 <= s.length, queries.length <= 10<sup>5</sup>",
                    "0 <= left<sub>i</sub> <= right<sub>i</sub> < s.length",
                    "0 <= k<sub>i</sub> <= s.length",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"abcda\", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]",
                        "output": "[true,false,false,true,true]",
                        "explanation": "Query 0: Substring is \"d\", which is already a palindrome.\nQuery 1: Substring is \"bc\", which cannot be made a palindrome with 0 replacements.\nQuery 2: Substring is \"abcd\". After replacing one character, it's not guaranteed to be a palindrome.\nQuery 3: Substring is \"abcd\". After replacing two characters, it can be transformed into a palindrome like \"abba\".\nQuery 4: Substring is \"abcda\". After replacing one character, it can be transformed into a palindrome like \"abcba\"."
                    },
                    {
                        "input": "s = \"lyb\", queries = [[0,1,0],[2,2,1]]",
                        "output": "[false,true]",
                        "explanation": "Query 0: Substring is \"ly\", which cannot be made a palindrome with 0 replacements.\nQuery 1: Substring is \"b\", which is already a palindrome."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "plates-between-candles",
                "title": "Plates Between Candles",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Since we can rearrange the substring, all we care about is the frequency of each character in that substring.",
            "How to find the character frequencies efficiently ?",
            "As a preprocess, calculate the accumulate frequency of all characters for all prefixes of the string.",
            "How to check if a substring can be changed to a palindrome given its characters frequency ?",
            "Count the number of odd frequencies, there can be at most one odd frequency in a palindrome."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<bool> canMakePaliQueries(string s, vector<vector<int>>& queries) {\n    vector<bool> ans;\n    vector<int> dp(s.length() + 1);\n\n    for (int i = 1; i <= s.length(); ++i)\n      dp[i] = dp[i - 1] ^ 1 << s[i - 1] - 'a';\n\n    for (const vector<int>& query : queries) {\n      const int odds = __builtin_popcount(dp[query[1] + 1] ^ dp[query[0]]);\n      ans.push_back(odds / 2 <= query[2]);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Boolean> canMakePaliQueries(String s, int[][] queries) {\n    List<Boolean> ans = new ArrayList<>();\n    int[] dp = new int[s.length() + 1];\n\n    for (int i = 1; i <= s.length(); ++i)\n      dp[i] = dp[i - 1] ^ 1 << s.charAt(i - 1) - 'a';\n\n    for (int[] query : queries) {\n      int odds = Integer.bitCount(dp[query[1] + 1] ^ dp[query[0]]);\n      ans.add(odds / 2 <= query[2]);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canMakePaliQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n    def ones(x):\n      return bin(x).count('1')\n\n    dp = [0] * (len(s) + 1)\n\n    for i in range(1, len(s) + 1):\n      dp[i] = dp[i - 1] ^ 1 << ord(s[i - 1]) - ord('a')\n\n    return [\n        ones(dp[right + 1] ^ dp[left]) // 2 <= k\n        for left, right, k in queries\n    ]\n",
                "lang_text": "py"
            }
        }
    }
}