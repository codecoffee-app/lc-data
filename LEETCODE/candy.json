{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "135",
            "title": "Candy",
            "titleSlug": "candy",
            "content": "<p>There are <code>n</code> children standing in a line. Each child is assigned a rating value given in the integer array <code>ratings</code>.</p>\n\n<p>You are giving candies to these children subjected to the following requirements:</p>\n\n<ul>\n\t<li>Each child must have at least one candy.</li>\n\t<li>Children with a higher rating get more candies than their neighbors.</li>\n</ul>\n\n<p>Return <em>the minimum number of candies you need to have to distribute the candies to the children</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ratings = [1,0,2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ratings = [1,2,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == ratings.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= ratings[i] &lt;= 2 * 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 7396,
            "dislikes": 576,
            "similarQuestions": "[{\"title\": \"Minimize Maximum Value in a Grid\", \"titleSlug\": \"minimize-maximum-value-in-a-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"453.5K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 453462, \"totalSubmissionRaw\": 1048209, \"acRate\": \"43.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array `ratings` representing the rating of `n` children standing in a line, determine the minimum number of candies needed to distribute to the children such that:\n\n*   Each child receives at least one candy.\n*   Children with higher ratings than their neighbors receive more candies than their neighbors.",
                "constraints": [
                    "n == ratings.length",
                    "1 <= n <= 2 * 10^4",
                    "0 <= ratings[i] <= 2 * 10^4"
                ],
                "testcases": [
                    {
                        "input": "[1,0,2]",
                        "output": "5",
                        "explanation": "The optimal distribution is [2, 1, 2], totaling 5 candies. The first child gets 2 because their rating (1) is greater than their right neighbor's rating (0). The second child gets 1 as it is the minimum. The third child gets 2 because their rating (2) is greater than their left neighbor's rating (0)."
                    },
                    {
                        "input": "[1,2,2]",
                        "output": "4",
                        "explanation": "The optimal distribution is [1, 2, 1], totaling 4 candies. While the second and third children have the same rating, only the second child's rating is greater than their *left* neighbor, necessitating a higher candy count. The third child can have only 1 candy as their rating is not greater than their left neighbour"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimize-maximum-value-in-a-grid",
                "title": "Minimize Maximum Value in a Grid",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int candy(vector<int>& ratings) {\n    const int n = ratings.size();\n    int ans = 0;\n    vector<int> l(n, 1);\n    vector<int> r(n, 1);\n\n    for (int i = 1; i < n; ++i)\n      if (ratings[i] > ratings[i - 1])\n        l[i] = l[i - 1] + 1;\n\n    for (int i = n - 2; i >= 0; --i)\n      if (ratings[i] > ratings[i + 1])\n        r[i] = r[i + 1] + 1;\n\n    for (int i = 0; i < n; ++i)\n      ans += max(l[i], r[i]);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int candy(int[] ratings) {\n    final int n = ratings.length;\n\n    int ans = 0;\n    int[] l = new int[n];\n    int[] r = new int[n];\n    Arrays.fill(l, 1);\n    Arrays.fill(r, 1);\n\n    for (int i = 1; i < n; ++i)\n      if (ratings[i] > ratings[i - 1])\n        l[i] = l[i - 1] + 1;\n\n    for (int i = n - 2; i >= 0; --i)\n      if (ratings[i] > ratings[i + 1])\n        r[i] = r[i + 1] + 1;\n\n    for (int i = 0; i < n; ++i)\n      ans += Math.max(l[i], r[i]);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def candy(self, ratings: List[int]) -> int:\n    n = len(ratings)\n\n    ans = 0\n    l = [1] * n\n    r = [1] * n\n\n    for i in range(1, n):\n      if ratings[i] > ratings[i - 1]:\n        l[i] = l[i - 1] + 1\n\n    for i in range(n - 2, -1, -1):\n      if ratings[i] > ratings[i + 1]:\n        r[i] = r[i + 1] + 1\n\n    for a, b in zip(l, r):\n      ans += max(a, b)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}