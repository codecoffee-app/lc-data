{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "853",
            "title": "Car Fleet",
            "titleSlug": "car-fleet",
            "content": "<p>There are <code>n</code> cars going to the same destination along a one-lane road. The destination is <code>target</code> miles away.</p>\n\n<p>You are given two integer array <code>position</code> and <code>speed</code>, both of length <code>n</code>, where <code>position[i]</code> is the position of the <code>i<sup>th</sup></code> car and <code>speed[i]</code> is the speed of the <code>i<sup>th</sup></code> car (in miles per hour).</p>\n\n<p>A car can never pass another car ahead of it, but it can catch up to it&nbsp;and drive bumper to bumper <strong>at the same speed</strong>. The faster car will <strong>slow down</strong> to match the slower car&#39;s speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).</p>\n\n<p>A <strong>car fleet</strong> is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.</p>\n\n<p>If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.</p>\n\n<p>Return <em>the <strong>number of car fleets</strong> that will arrive at the destination</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nThe cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.\nThe car starting at 0 does not catch up to any other car, so it is a fleet by itself.\nThe cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\nNote that no other cars meet these fleets before the destination, so the answer is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 10, position = [3], speed = [3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only one car, hence there is only one fleet.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 100, position = [0,2,4], speed = [4,2,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nThe cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.\nThen, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == position.length == speed.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt; target &lt;= 10<sup>6</sup></code></li>\n\t<li><code>0 &lt;= position[i] &lt; target</code></li>\n\t<li>All the values of <code>position</code> are <strong>unique</strong>.</li>\n\t<li><code>0 &lt; speed[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3230,
            "dislikes": 809,
            "similarQuestions": "[{\"title\": \"Car Fleet II\", \"titleSlug\": \"car-fleet-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Collisions on a Road\", \"titleSlug\": \"count-collisions-on-a-road\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"207.6K\", \"totalSubmission\": \"411.1K\", \"totalAcceptedRaw\": 207630, \"totalSubmissionRaw\": 411066, \"acRate\": \"50.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "N cars are heading to a destination 'target' miles away on a single-lane road. Given arrays 'position' and 'speed' (both of length N), where position[i] is the initial position and speed[i] is the speed of the i-th car. Cars cannot overtake each other, but can form a fleet by matching the speed of the slower car ahead. A car fleet is a group of cars at the same position and speed. Determine the number of car fleets that will arrive at the destination.",
                "constraints": [
                    "n == position.length == speed.length",
                    "1 <= n <= 10^5",
                    "0 < target <= 10^6",
                    "0 <= position[i] < target",
                    "All the values of position are unique.",
                    "0 < speed[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]",
                        "output": "3",
                        "explanation": "Cars starting at positions 10 (speed 2) and 8 (speed 4) form a fleet, meeting at the target 12. The car starting at 0 does not join any fleet. Cars starting at 5 (speed 1) and 3 (speed 3) form a fleet, meeting at position 6. Therefore, there are 3 fleets in total."
                    },
                    {
                        "input": "target = 10, position = [3], speed = [3]",
                        "output": "1",
                        "explanation": "There is only one car, therefore there is one fleet."
                    },
                    {
                        "input": "target = 100, position = [0,2,4], speed = [4,2,1]",
                        "output": "1",
                        "explanation": "The cars starting at 0 (speed 4) and 2 (speed 2) form a fleet at position 4. Then, this fleet (now at speed 2) merges with the car starting at 4 (speed 1) at position 6. Thus, only one fleet reaches the destination."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "car-fleet-ii",
                "title": "Car Fleet II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-collisions-on-a-road",
                "title": "Count Collisions on a Road",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct Car {\n  int pos;\n  double time;  // Time to reach the target\n};\n\nclass Solution {\n public:\n  int carFleet(int target, vector<int>& position, vector<int>& speed) {\n    int ans = 0;\n    vector<Car> cars(position.size());\n\n    for (int i = 0; i < position.size(); ++i)\n      cars[i] = {position[i], (double)(target - position[i]) / speed[i]};\n\n    sort(cars.begin(), cars.end(),\n         [](const auto& a, const auto& b) { return a.pos > b.pos; });\n\n    double maxTime = 0;  // The time of the slowest car to reach the target\n\n    for (const Car& car : cars)\n      // A car needs more time to reach the target, so it becomes slowest\n      if (car.time > maxTime) {\n        maxTime = car.time;\n        ++ans;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Car {\n  public int pos;\n  public double time;\n\n  public Car(int pos, double time) {\n    this.pos = pos;\n    this.time = time;\n  }\n}\n\nclass Solution {\n  public int carFleet(int target, int[] position, int[] speed) {\n    int ans = 0;\n    Car[] cars = new Car[position.length];\n\n    for (int i = 0; i < position.length; ++i)\n      cars[i] = new Car(position[i], (double) (target - position[i]) / speed[i]);\n\n    Arrays.sort(cars, (a, b) -> b.pos - a.pos);\n\n    double maxTime = 0; // The time of the slowest car to reach the target\n\n    for (Car car : cars)\n      // A car needs more time to reach the target, so it becomes slowest\n      if (car.time > maxTime) {\n        maxTime = car.time;\n        ++ans;\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:\n    ans = 0\n    times = [\n        float(target - p) / s for p, s in sorted(zip(position, speed),\n                                                 reverse=True)]\n    maxTime = 0  # The time of the slowest car to reach the target\n\n    for time in times:\n      # A car needs more time to reach the target, so it becomes slowest\n      if time > maxTime:\n        maxTime = time\n        ans += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}