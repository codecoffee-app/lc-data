{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1728",
            "title": "Cat and Mouse II",
            "titleSlug": "cat-and-mouse-ii",
            "content": "<p>A game is played by a cat and a mouse named Cat and Mouse.</p>\n\n<p>The environment is represented by a <code>grid</code> of size <code>rows x cols</code>, where each element is a wall, floor, player (Cat, Mouse), or food.</p>\n\n<ul>\n\t<li>Players are represented by the characters <code>&#39;C&#39;</code>(Cat)<code>,&#39;M&#39;</code>(Mouse).</li>\n\t<li>Floors are represented by the character <code>&#39;.&#39;</code> and can be walked on.</li>\n\t<li>Walls are represented by the character <code>&#39;#&#39;</code> and cannot be walked on.</li>\n\t<li>Food is represented by the character <code>&#39;F&#39;</code> and can be walked on.</li>\n\t<li>There is only one of each character <code>&#39;C&#39;</code>, <code>&#39;M&#39;</code>, and <code>&#39;F&#39;</code> in <code>grid</code>.</li>\n</ul>\n\n<p>Mouse and Cat play according to the following rules:</p>\n\n<ul>\n\t<li>Mouse <strong>moves first</strong>, then they take turns to move.</li>\n\t<li>During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the <code>grid</code>.</li>\n\t<li><code>catJump, mouseJump</code> are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.</li>\n\t<li>Staying in the same position is allowed.</li>\n\t<li>Mouse can jump over Cat.</li>\n</ul>\n\n<p>The game can end in 4 ways:</p>\n\n<ul>\n\t<li>If Cat occupies the same position as Mouse, Cat wins.</li>\n\t<li>If Cat reaches the food first, Cat wins.</li>\n\t<li>If Mouse reaches the food first, Mouse wins.</li>\n\t<li>If Mouse cannot get to the food within 1000 turns, Cat wins.</li>\n</ul>\n\n<p>Given a <code>rows x cols</code> matrix <code>grid</code> and two integers <code>catJump</code> and <code>mouseJump</code>, return <code>true</code><em> if Mouse can win the game if both Cat and Mouse play optimally, otherwise return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/12/sample_111_1955.png\" style=\"width: 580px; height: 239px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;####F&quot;,&quot;#C...&quot;,&quot;M....&quot;], catJump = 1, mouseJump = 2\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Cat cannot catch Mouse on its turn nor can it get the food before Mouse.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/12/sample_2_1955.png\" style=\"width: 580px; height: 175px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;M.C...F&quot;], catJump = 1, mouseJump = 4\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [&quot;M.C...F&quot;], catJump = 1, mouseJump = 3\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>rows == grid.length</code></li>\n\t<li><code>cols = grid[i].length</code></li>\n\t<li><code>1 &lt;= rows, cols &lt;= 8</code></li>\n\t<li><code>grid[i][j]</code> consist only of characters <code>&#39;C&#39;</code>, <code>&#39;M&#39;</code>, <code>&#39;F&#39;</code>, <code>&#39;.&#39;</code>, and <code>&#39;#&#39;</code>.</li>\n\t<li>There is only one of each character <code>&#39;C&#39;</code>, <code>&#39;M&#39;</code>, and <code>&#39;F&#39;</code> in <code>grid</code>.</li>\n\t<li><code>1 &lt;= catJump, mouseJump &lt;= 8</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 260,
            "dislikes": 41,
            "similarQuestions": "[{\"title\": \"Escape The Ghosts\", \"titleSlug\": \"escape-the-ghosts\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Cat and Mouse\", \"titleSlug\": \"cat-and-mouse\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.6K\", \"totalSubmission\": \"16.8K\", \"totalAcceptedRaw\": 6648, \"totalSubmissionRaw\": 16772, \"acRate\": \"39.6%\"}",
            "hints": [
                "Try working backward: consider all trivial states you know to be winning or losing, and work backward to determine which other states can be labeled as winning or losing."
            ],
            "rephrased": {
                "body": "A game is played between a cat and a mouse on a grid. The grid contains walls, floors, the cat, the mouse, and food. The mouse moves first, and they take turns moving. Each player can jump up to a specified maximum distance in one of the four cardinal directions (left, right, up, down). They cannot jump over walls or outside the grid boundaries but can remain in the same position. The mouse can jump over the cat. The mouse wins if it reaches the food before the cat or the cat catches the mouse. The cat wins if it catches the mouse, reaches the food first, or if the mouse cannot reach the food within 1000 turns. Determine if the mouse can win the game if both players play optimally.",
                "constraints": [
                    "rows == grid.length",
                    "cols = grid[i].length",
                    "1 <= rows, cols <= 8",
                    "grid[i][j] consist only of characters 'C', 'M', 'F', '.', and '#'.",
                    "There is only one of each character 'C', 'M', and 'F' in grid.",
                    "1 <= catJump, mouseJump <= 8"
                ],
                "testcases": [
                    {
                        "input": "grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2",
                        "output": "true",
                        "explanation": "The cat cannot catch the mouse or reach the food before the mouse."
                    },
                    {
                        "input": "grid = [\"M.C...F\"], catJump = 1, mouseJump = 4",
                        "output": "true",
                        "explanation": null
                    },
                    {
                        "input": "grid = [\"M.C...F\"], catJump = 1, mouseJump = 3",
                        "output": "false",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "escape-the-ghosts",
                "title": "Escape The Ghosts",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "cat-and-mouse",
                "title": "Cat and Mouse",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try working backward: consider all trivial states you know to be winning or losing, and work backward to determine which other states can be labeled as winning or losing."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canMouseWin(vector<string>& grid, int catJump, int mouseJump) {\n    m = grid.size();\n    n = grid[0].size();\n    int cat;    // cat's position\n    int mouse;  // mouse's position\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        if (grid[i][j] != '#')\n          ++nFloors;\n        if (grid[i][j] == 'C')\n          cat = hash(i, j);\n        else if (grid[i][j] == 'M')\n          mouse = hash(i, j);\n      }\n\n    // dp[i][j][k] := true if mouse can win w/\n    // Cat on (i / 8, i % 8), mouse on (j / 8, j % 8), and turns = k\n    dp.resize(m * n, vector<vector<int>>(m * n, vector<int>(nFloors * 2, -1)));\n    return canMouseWin(grid, cat, mouse, 0, catJump, mouseJump);\n  }\n\n private:\n  const vector<int> dirs{0, 1, 0, -1, 0};\n  int m;\n  int n;\n  int nFloors = 0;\n  vector<vector<vector<int>>> dp;\n\n  bool canMouseWin(const vector<string>& grid, int cat, int mouse, int turn,\n                   const int& catJump, const int& mouseJump) {\n    // We already search whole touchable grid\n    if (turn == nFloors * 2)\n      return false;\n    if (dp[cat][mouse][turn] != -1)\n      return dp[cat][mouse][turn];\n\n    if (turn % 2 == 0) {\n      // mouse's turn\n      const int i = mouse / n;\n      const int j = mouse % n;\n      for (int k = 0; k < 4; ++k) {\n        for (int jump = 0; jump <= mouseJump; ++jump) {\n          const int x = i + dirs[k] * jump;\n          const int y = j + dirs[k + 1] * jump;\n          if (x < 0 || x == m || y < 0 || y == n)\n            break;\n          if (grid[x][y] == '#')\n            break;\n          if (grid[x][y] == 'F')  // Mouse eats the food, so mouse win\n            return dp[cat][mouse][turn] = true;\n          if (canMouseWin(grid, cat, hash(x, y), turn + 1, catJump, mouseJump))\n            return dp[cat][mouse][turn] = true;\n        }\n      }\n      // Mouse can't win, so mouse lose\n      return dp[cat][mouse][turn] = false;\n    } else {\n      // cat's turn\n      const int i = cat / n;\n      const int j = cat % n;\n      for (int k = 0; k < 4; ++k) {\n        for (int jump = 0; jump <= catJump; ++jump) {\n          const int x = i + dirs[k] * jump;\n          const int y = j + dirs[k + 1] * jump;\n          if (x < 0 || x == m || y < 0 || y == n)\n            break;\n          if (grid[x][y] == '#')\n            break;\n          if (grid[x][y] == 'F')  // Cat eats the food, so mouse lose\n            return dp[cat][mouse][turn] = false;\n          const int nextCat = hash(x, y);\n          if (nextCat == mouse)  // Cat catches mouse, so mouse lose\n            return dp[cat][mouse][turn] = false;\n          if (!canMouseWin(grid, nextCat, mouse, turn + 1, catJump, mouseJump))\n            return dp[cat][mouse][turn] = false;\n        }\n      }\n      // Cat can't win, so mouse win\n      return dp[cat][mouse][turn] = true;\n    }\n  }\n\n  int hash(int i, int j) {\n    return i * n + j;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canMouseWin(String[] grid, int catJump, int mouseJump) {\n    m = grid.length;\n    n = grid[0].length();\n    int cat = 0;   // cat's position\n    int mouse = 0; // mouse's position\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        if (grid[i].charAt(j) != '#')\n          ++nFloors;\n        if (grid[i].charAt(j) == 'C')\n          cat = hash(i, j);\n        else if (grid[i].charAt(j) == 'M')\n          mouse = hash(i, j);\n      }\n\n    // dp[i][j][k] := true if mouse can win w/\n    // Cat on (i / 8, i % 8), mouse on (j / 8, j % 8), and turns = k\n    dp = new Boolean[m * n][m * n][nFloors * 2];\n    return canMouseWin(grid, cat, mouse, 0, catJump, mouseJump);\n  }\n\n  private static final int[] dirs = {0, 1, 0, -1, 0};\n  private int m;\n  private int n;\n  private int nFloors = 0;\n  private Boolean[][][] dp;\n\n  private boolean canMouseWin(final String[] grid, int cat, int mouse, int turn, int catJump,\n                              int mouseJump) {\n    // We already search whole touchable grid\n    if (turn == nFloors * 2)\n      return false;\n    if (dp[cat][mouse][turn] != null)\n      return dp[cat][mouse][turn];\n\n    if (turn % 2 == 0) {\n      // mouse's turn\n      final int i = mouse / n;\n      final int j = mouse % n;\n      for (int k = 0; k < 4; ++k) {\n        for (int jump = 0; jump <= mouseJump; ++jump) {\n          final int x = i + dirs[k] * jump;\n          final int y = j + dirs[k + 1] * jump;\n          if (x < 0 || x == m || y < 0 || y == n)\n            break;\n          if (grid[x].charAt(y) == '#')\n            break;\n          if (grid[x].charAt(y) == 'F') // Mouse eats the food, so mouse win\n            return dp[cat][mouse][turn] = true;\n          if (canMouseWin(grid, cat, hash(x, y), turn + 1, catJump, mouseJump))\n            return dp[cat][mouse][turn] = true;\n        }\n      }\n      // Mouse can't win, so mouse lose\n      return dp[cat][mouse][turn] = false;\n    } else {\n      // cat's turn\n      final int i = cat / n;\n      final int j = cat % n;\n      for (int k = 0; k < 4; ++k) {\n        for (int jump = 0; jump <= catJump; ++jump) {\n          final int x = i + dirs[k] * jump;\n          final int y = j + dirs[k + 1] * jump;\n          if (x < 0 || x == m || y < 0 || y == n)\n            break;\n          if (grid[x].charAt(y) == '#')\n            break;\n          if (grid[x].charAt(y) == 'F') // Cat eats the food, so mouse lose\n            return dp[cat][mouse][turn] = false;\n          final int nextCat = hash(x, y);\n          if (nextCat == mouse) // Cat catches mouse, so mouse lose\n            return dp[cat][mouse][turn] = false;\n          if (!canMouseWin(grid, nextCat, mouse, turn + 1, catJump, mouseJump))\n            return dp[cat][mouse][turn] = false;\n        }\n      }\n      // Cat can't win, so mouse win\n      return dp[cat][mouse][turn] = true;\n    }\n  }\n\n  private int hash(int i, int j) {\n    return i * n + j;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canMouseWin(self, grid: List[str], catJump: int, mouseJump: int) -> bool:\n    dirs = [0, 1, 0, -1, 0]\n    m = len(grid)\n    n = len(grid[0])\n    nFloors = 0\n    cat = 0  # cat's position\n    mouse = 0  # mouse's position\n\n    def hash(i: int, j: int) -> int:\n      return i * n + j\n\n    for i in range(m):\n      for j in range(n):\n        if grid[i][j] != '#':\n          nFloors += 1\n        if grid[i][j] == 'C':\n          cat = hash(i, j)\n        elif grid[i][j] == 'M':\n          mouse = hash(i, j)\n\n    # dp(i, j, k) := True if mouse can win w//\n    # Cat on (i // 8, i % 8), mouse on (j // 8, j % 8), and turns = k\n    @functools.lru_cache(None)\n    def dp(cat: int, mouse: int, turn: int) -> bool:\n      # We already search whole touchable grid\n      if turn == nFloors * 2:\n        return False\n\n      if turn % 2 == 0:\n        # mouse's turn\n        i = mouse // n\n        j = mouse % n\n        for k in range(4):\n          for jump in range(mouseJump + 1):\n            x = i + dirs[k] * jump\n            y = j + dirs[k + 1] * jump\n            if x < 0 or x == m or y < 0 or y == n:\n              break\n            if grid[x][y] == '#':\n              break\n            if grid[x][y] == 'F':  # Mouse eats the food, so mouse win\n              return True\n            if dp(cat, hash(x, y), turn + 1):\n              return True\n        # Mouse can't win, so mouse lose\n        return False\n      else:\n        # cat's turn\n        i = cat // n\n        j = cat % n\n        for k in range(4):\n          for jump in range(catJump + 1):\n            x = i + dirs[k] * jump\n            y = j + dirs[k + 1] * jump\n            if x < 0 or x == m or y < 0 or y == n:\n              break\n            if grid[x][y] == '#':\n              break\n            if grid[x][y] == 'F':  # Cat eats the food, so mouse lose\n              return False\n            nextCat = hash(x, y)\n            if nextCat == mouse:  # Cat catches mouse, so mouse lose\n              return False\n            if not dp(nextCat, mouse, turn + 1):\n              return False\n        # Cat can't win, so mouse win\n        return True\n\n    return dp(cat, mouse, 0)\n",
                "lang_text": "py"
            }
        }
    }
}