{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "913",
            "title": "Cat and Mouse",
            "titleSlug": "cat-and-mouse",
            "content": "<p>A game on an <strong>undirected</strong> graph is played by two players, Mouse and Cat, who alternate turns.</p>\n\n<p>The graph is given as follows: <code>graph[a]</code> is a list of all nodes <code>b</code> such that <code>ab</code> is an edge of the graph.</p>\n\n<p>The mouse starts at node <code>1</code> and goes first, the cat starts at node <code>2</code> and goes second, and there is a hole at node <code>0</code>.</p>\n\n<p>During each player&#39;s turn, they <strong>must</strong> travel along one&nbsp;edge of the graph that meets where they are.&nbsp; For example, if the Mouse is at node 1, it <strong>must</strong> travel to any node in <code>graph[1]</code>.</p>\n\n<p>Additionally, it is not allowed for the Cat to travel to the Hole (node 0.)</p>\n\n<p>Then, the game can end in three&nbsp;ways:</p>\n\n<ul>\n\t<li>If ever the Cat occupies the same node as the Mouse, the Cat wins.</li>\n\t<li>If ever the Mouse reaches the Hole, the Mouse wins.</li>\n\t<li>If ever a position is repeated (i.e., the players are in the same position as a previous turn, and&nbsp;it is the same player&#39;s turn to move), the game is a draw.</li>\n</ul>\n\n<p>Given a <code>graph</code>, and assuming both players play optimally, return</p>\n\n<ul>\n\t<li><code>1</code>&nbsp;if the mouse wins the game,</li>\n\t<li><code>2</code>&nbsp;if the cat wins the game, or</li>\n\t<li><code>0</code>&nbsp;if the game is a draw.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/cat1.jpg\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/cat2.jpg\" style=\"width: 200px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,3],[0],[3],[0,2]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= graph.length &lt;= 50</code></li>\n\t<li><code>1&nbsp;&lt;= graph[i].length &lt; graph.length</code></li>\n\t<li><code>0 &lt;= graph[i][j] &lt; graph.length</code></li>\n\t<li><code>graph[i][j] != i</code></li>\n\t<li><code>graph[i]</code> is unique.</li>\n\t<li>The mouse and the cat can always move.&nbsp;</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 886,
            "dislikes": 152,
            "similarQuestions": "[{\"title\": \"Cat and Mouse II\", \"titleSlug\": \"cat-and-mouse-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.6K\", \"totalSubmission\": \"54.6K\", \"totalAcceptedRaw\": 18601, \"totalSubmissionRaw\": 54621, \"acRate\": \"34.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Two players, Mouse and Cat, play a game on an undirected graph. The graph is represented as an adjacency list, where `graph[a]` contains all nodes `b` such that `a` and `b` are connected by an edge.  The mouse starts at node 1 and moves first. The cat starts at node 2 and moves second. The hole is located at node 0.  Each player must move along an edge of the graph from their current position. The cat cannot move to the hole (node 0). The game ends in one of three ways:\n\n1.  The Cat wins if it occupies the same node as the Mouse.\n2.  The Mouse wins if it reaches the Hole.\n3.  The game is a draw if a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move).\n\nAssuming both players play optimally, determine the outcome of the game. Return 1 if the mouse wins, 2 if the cat wins, or 0 if the game results in a draw.",
                "constraints": [
                    "3 <= graph.length <= 50",
                    "1 <= graph[i].length < graph.length",
                    "0 <= graph[i][j] < graph.length",
                    "graph[i][j] != i",
                    "graph[i] is unique.",
                    "The mouse and the cat can always move."
                ],
                "testcases": [
                    {
                        "input": "graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]",
                        "output": "0",
                        "explanation": null
                    },
                    {
                        "input": "graph = [[1,3],[0],[3],[0,2]]",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "cat-and-mouse-ii",
                "title": "Cat and Mouse II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ]
    }
}