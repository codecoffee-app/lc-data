{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1252",
            "title": "Cells with Odd Values in a Matrix",
            "titleSlug": "cells-with-odd-values-in-a-matrix",
            "content": "<p>There is an <code>m x n</code> matrix that is initialized to all <code>0</code>&#39;s. There is also a 2D array <code>indices</code> where each <code>indices[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> represents a <strong>0-indexed location</strong> to perform some increment operations on the matrix.</p>\n\n<p>For each location <code>indices[i]</code>, do <strong>both</strong> of the following:</p>\n\n<ol>\n\t<li>Increment <strong>all</strong> the cells on row <code>r<sub>i</sub></code>.</li>\n\t<li>Increment <strong>all</strong> the cells on column <code>c<sub>i</sub></code>.</li>\n</ol>\n\n<p>Given <code>m</code>, <code>n</code>, and <code>indices</code>, return <em>the <strong>number of odd-valued cells</strong> in the matrix after applying the increment to all locations in </em><code>indices</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/30/e1.png\" style=\"width: 600px; height: 118px;\" />\n<pre>\n<strong>Input:</strong> m = 2, n = 3, indices = [[0,1],[1,1]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Initial matrix = [[0,0,0],[0,0,0]].\nAfter applying first increment it becomes [[1,2,1],[0,1,0]].\nThe final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/30/e2.png\" style=\"width: 600px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> m = 2, n = 2, indices = [[1,1],[0,0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>1 &lt;= indices.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= r<sub>i</sub> &lt; m</code></li>\n\t<li><code>0 &lt;= c<sub>i</sub> &lt; n</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve this in <code>O(n + m + indices.length)</code> time with only <code>O(n + m)</code> extra space?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1159,
            "dislikes": 1476,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"105.9K\", \"totalSubmission\": \"134.9K\", \"totalAcceptedRaw\": 105915, \"totalSubmissionRaw\": 134867, \"acRate\": \"78.5%\"}",
            "hints": [
                "Simulation : With small constraints, it is possible to apply changes to each row and column and count odd cells after applying it.",
                "You can accumulate the number you should add to each row and column and then you can count the number of odd cells."
            ],
            "rephrased": {
                "body": "Given an `m x n` matrix initialized with all zeros, and a 2D array `indices` where each `indices[i] = [r_i, c_i]` represents a 0-indexed location, perform increment operations. For each location in `indices`, increment all cells in row `r_i` and all cells in column `c_i`. Return the number of odd-valued cells in the matrix after applying all increments.",
                "constraints": [
                    "1 <= m, n <= 50",
                    "1 <= indices.length <= 100",
                    "0 <= r_i < m",
                    "0 <= c_i < n"
                ],
                "testcases": [
                    {
                        "input": "m = 2, n = 3, indices = [[0,1],[1,1]]",
                        "output": "6",
                        "explanation": "Starting with a 2x3 matrix of zeros, the first increment operation adds 1 to all elements in row 0 and column 1. The matrix becomes [[1, 2, 1], [0, 1, 0]].  The second increment operation adds 1 to all elements in row 1 and column 1. The final matrix is [[1, 3, 1], [1, 3, 1]].  There are 6 odd numbers (1, 3, 1, 1, 3, 1) in the final matrix."
                    },
                    {
                        "input": "m = 2, n = 2, indices = [[1,1],[0,0]]",
                        "output": "0",
                        "explanation": "Starting with a 2x2 matrix of zeros, the first increment operation adds 1 to all elements in row 1 and column 1. The matrix becomes [[0, 1], [1, 2]]. The second increment operation adds 1 to all elements in row 0 and column 0. The final matrix is [[2, 2], [2, 2]]. There are no odd numbers in the final matrix."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Simulation : With small constraints, it is possible to apply changes to each row and column and count odd cells after applying it.",
            "You can accumulate the number you should add to each row and column and then you can count the number of odd cells."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ]
    }
}