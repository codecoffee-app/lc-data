{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1433",
            "title": "Check If a String Can Break Another String",
            "titleSlug": "check-if-a-string-can-break-another-string",
            "content": "<p>Given two strings: <code>s1</code> and <code>s2</code> with the same&nbsp;size, check if some&nbsp;permutation of string <code>s1</code> can break&nbsp;some&nbsp;permutation of string <code>s2</code> or vice-versa. In other words <code>s2</code> can break <code>s1</code>&nbsp;or vice-versa.</p>\n\n<p>A string <code>x</code>&nbsp;can break&nbsp;string <code>y</code>&nbsp;(both of size <code>n</code>) if <code>x[i] &gt;= y[i]</code>&nbsp;(in alphabetical order)&nbsp;for all <code>i</code>&nbsp;between <code>0</code> and <code>n-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abc&quot;, s2 = &quot;xya&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;ayx&quot; is a permutation of s2=&quot;xya&quot; which can break to string &quot;abc&quot; which is a permutation of s1=&quot;abc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abe&quot;, s2 = &quot;acd&quot;\n<strong>Output:</strong> false \n<strong>Explanation:</strong> All permutations for s1=&quot;abe&quot; are: &quot;abe&quot;, &quot;aeb&quot;, &quot;bae&quot;, &quot;bea&quot;, &quot;eab&quot; and &quot;eba&quot; and all permutation for s2=&quot;acd&quot; are: &quot;acd&quot;, &quot;adc&quot;, &quot;cad&quot;, &quot;cda&quot;, &quot;dac&quot; and &quot;dca&quot;. However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;leetcodee&quot;, s2 = &quot;interview&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s1.length == n</code></li>\n\t<li><code>s2.length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 10^5</code></li>\n\t<li>All strings consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 735,
            "dislikes": 137,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"40.3K\", \"totalSubmission\": \"58.1K\", \"totalAcceptedRaw\": 40308, \"totalSubmissionRaw\": 58142, \"acRate\": \"69.3%\"}",
            "hints": [
                "Sort both strings and then check if one of them can break the other."
            ],
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, of equal length, determine if a permutation of `s1` can break a permutation of `s2`, or if a permutation of `s2` can break a permutation of `s1`.  A string `x` can break a string `y` (both of length `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` from 0 to `n-1`.",
                "constraints": [
                    "s1.length == n",
                    "s2.length == n",
                    "1 <= n <= 10^5",
                    "All strings consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"abc\", s2 = \"xya\"",
                        "output": "true",
                        "explanation": "The permutation \"ayx\" of s2 can break the permutation \"abc\" of s1 because 'a' >= 'a', 'y' >= 'b', and 'x' >= 'c'."
                    },
                    {
                        "input": "s1 = \"abe\", s2 = \"acd\"",
                        "output": "false",
                        "explanation": "No permutation of s1 can break any permutation of s2, and vice-versa."
                    },
                    {
                        "input": "s1 = \"leetcodee\", s2 = \"interview\"",
                        "output": "true",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Sort both strings and then check if one of them can break the other."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool checkIfCanBreak(string s1, string s2) {\n    vector<int> count1(26);\n    vector<int> count2(26);\n\n    for (const char c : s1)\n      ++count1[c - 'a'];\n\n    for (const char c : s2)\n      ++count2[c - 'a'];\n\n    return canBreak(count1, count2) || canBreak(count2, count1);\n  }\n\n private:\n  // Returns True if count1 can break count2.\n  bool canBreak(const vector<int>& count1, const vector<int>& count2) {\n    int diff = 0;\n    for (int i = 0; i < 26; ++i) {\n      diff += count2[i] - count1[i];\n      // count2 is alphabetically greater than count1.\n      if (diff < 0)\n        return false;\n    }\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean checkIfCanBreak(String s1, String s2) {\n    int[] count1 = new int[26];\n    int[] count2 = new int[26];\n\n    for (final char c : s1.toCharArray())\n      ++count1[c - 'a'];\n\n    for (final char c : s2.toCharArray())\n      ++count2[c - 'a'];\n\n    return canBreak(count1, count2) || canBreak(count2, count1);\n  }\n\n  // Returns True if count1 can break count2.\n  private boolean canBreak(int[] count1, int[] count2) {\n    int diff = 0;\n    for (int i = 0; i < 26; ++i) {\n      diff += count2[i] - count1[i];\n      // count2 is alphabetically greater than count1.\n      if (diff < 0)\n        return false;\n    }\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def checkIfCanBreak(self, s1: str, s2: str) -> bool:\n    count1 = collections.Counter(s1)\n    count2 = collections.Counter(s2)\n\n    # Returns True if count1 can break count2.\n    def canBreak(count1: Dict[str, int], count2: Dict[str, int]) -> bool:\n      diff = 0\n      for c in string.ascii_lowercase:\n        diff += count2[c] - count1[c]\n        # count2 is alphabetically greater than count1.\n        if diff < 0:\n          return False\n      return True\n\n    return canBreak(count1, count2) or canBreak(count2, count1)\n",
                "lang_text": "py"
            }
        }
    }
}