{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1893",
            "title": "Check if All the Integers in a Range Are Covered",
            "titleSlug": "check-if-all-the-integers-in-a-range-are-covered",
            "content": "<p>You are given a 2D integer array <code>ranges</code> and two integers <code>left</code> and <code>right</code>. Each <code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> represents an <strong>inclusive</strong> interval between <code>start<sub>i</sub></code> and <code>end<sub>i</sub></code>.</p>\n\n<p>Return <code>true</code> <em>if each integer in the inclusive range</em> <code>[left, right]</code> <em>is covered by <strong>at least one</strong> interval in</em> <code>ranges</code>. Return <code>false</code> <em>otherwise</em>.</p>\n\n<p>An integer <code>x</code> is covered by an interval <code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> if <code>start<sub>i</sub> &lt;= x &lt;= end<sub>i</sub></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Every integer between 2 and 5 is covered:\n- 2 is covered by the first range.\n- 3 and 4 are covered by the second range.\n- 5 is covered by the third range.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranges = [[1,10],[10,20]], left = 21, right = 21\n<strong>Output:</strong> false\n<strong>Explanation:</strong> 21 is not covered by any range.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ranges.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 50</code></li>\n\t<li><code>1 &lt;= left &lt;= right &lt;= 50</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 555,
            "dislikes": 103,
            "similarQuestions": "[{\"title\": \"Find Maximal Uncovered Ranges\", \"titleSlug\": \"find-maximal-uncovered-ranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"38.6K\", \"totalSubmission\": \"77.6K\", \"totalAcceptedRaw\": 38586, \"totalSubmissionRaw\": 77552, \"acRate\": \"49.8%\"}",
            "hints": [
                "Iterate over every integer point in the range [left, right].",
                "For each of these points check if it is included in one of the ranges."
            ],
            "rephrased": {
                "body": "You are given a 2D integer array `ranges` where each `ranges[i] = [start_i, end_i]` represents a closed interval from `start_i` to `end_i`. You are also given two integers `left` and `right`. Determine if every integer within the inclusive range `[left, right]` is covered by at least one interval in `ranges`. An integer `x` is covered by `ranges[i]` if `start_i <= x <= end_i`.",
                "constraints": [
                    "1 <= ranges.length <= 50",
                    "1 <= start_i <= end_i <= 50",
                    "1 <= left <= right <= 50"
                ],
                "testcases": [
                    {
                        "input": "ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5",
                        "output": "true",
                        "explanation": "The range [2, 5] is fully covered. 2 is in [1,2], 3 is in [3,4], 4 is in [3,4], and 5 is in [5,6]."
                    },
                    {
                        "input": "ranges = [[1,10],[10,20]], left = 21, right = 21",
                        "output": "false",
                        "explanation": "The value 21 is not within any of the provided ranges."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-maximal-uncovered-ranges",
                "title": "Find Maximal Uncovered Ranges",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Iterate over every integer point in the range [left, right].",
            "For each of these points check if it is included in one of the ranges."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isCovered(vector<vector<int>>& ranges, int left, int right) {\n    for (int i = left; i <= right; ++i) {\n      bool seen = false;\n      for (const vector<int>& range : ranges)\n        if (i >= range[0] && i <= range[1]) {\n          seen = true;\n          break;\n        }\n      if (!seen)\n        return false;\n    }\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isCovered(int[][] ranges, int left, int right) {\n    for (int i = left; i <= right; ++i) {\n      boolean seen = false;\n      for (int[] range : ranges)\n        if (i >= range[0] && i <= range[1]) {\n          seen = true;\n          break;\n        }\n      if (!seen)\n        return false;\n    }\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isCovered(self, ranges: List[List[int]], left: int, right: int) -> bool:\n    return all(any(l <= i <= r for l, r in ranges) for i in range(\n        left, right + 1))\n",
                "lang_text": "py"
            }
        }
    }
}