{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2060",
            "title": "Check if an Original String Exists Given Two Encoded Strings",
            "titleSlug": "check-if-an-original-string-exists-given-two-encoded-strings",
            "content": "<p>An original string, consisting of lowercase English letters, can be encoded by the following steps:</p>\n\n<ul>\n\t<li>Arbitrarily <strong>split</strong> it into a <strong>sequence</strong> of some number of <strong>non-empty</strong> substrings.</li>\n\t<li>Arbitrarily choose some elements (possibly none) of the sequence, and <strong>replace</strong> each with <strong>its length</strong> (as a numeric string).</li>\n\t<li><strong>Concatenate</strong> the sequence as the encoded string.</li>\n</ul>\n\n<p>For example, <strong>one way</strong> to encode an original string <code>&quot;abcdefghijklmnop&quot;</code> might be:</p>\n\n<ul>\n\t<li>Split it as a sequence: <code>[&quot;ab&quot;, &quot;cdefghijklmn&quot;, &quot;o&quot;, &quot;p&quot;]</code>.</li>\n\t<li>Choose the second and third elements to be replaced by their lengths, respectively. The sequence becomes <code>[&quot;ab&quot;, &quot;12&quot;, &quot;1&quot;, &quot;p&quot;]</code>.</li>\n\t<li>Concatenate the elements of the sequence to get the encoded string: <code>&quot;ab121p&quot;</code>.</li>\n</ul>\n\n<p>Given two encoded strings <code>s1</code> and <code>s2</code>, consisting of lowercase English letters and digits <code>1-9</code> (inclusive), return <code>true</code><em> if there exists an original string that could be encoded as <strong>both</strong> </em><code>s1</code><em> and </em><code>s2</code><em>. Otherwise, return </em><code>false</code>.</p>\n\n<p><strong>Note</strong>: The test cases are generated such that the number of consecutive digits in <code>s1</code> and <code>s2</code> does not exceed <code>3</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;internationalization&quot;, s2 = &quot;i18n&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> It is possible that &quot;internationalization&quot; was the original string.\n- &quot;internationalization&quot; \n  -&gt; Split:       [&quot;internationalization&quot;]\n  -&gt; Do not replace any element\n  -&gt; Concatenate:  &quot;internationalization&quot;, which is s1.\n- &quot;internationalization&quot;\n  -&gt; Split:       [&quot;i&quot;, &quot;nternationalizatio&quot;, &quot;n&quot;]\n  -&gt; Replace:     [&quot;i&quot;, &quot;18&quot;,                 &quot;n&quot;]\n  -&gt; Concatenate:  &quot;i18n&quot;, which is s2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;l123e&quot;, s2 = &quot;44&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> It is possible that &quot;leetcode&quot; was the original string.\n- &quot;leetcode&quot; \n  -&gt; Split:      [&quot;l&quot;, &quot;e&quot;, &quot;et&quot;, &quot;cod&quot;, &quot;e&quot;]\n  -&gt; Replace:    [&quot;l&quot;, &quot;1&quot;, &quot;2&quot;,  &quot;3&quot;,   &quot;e&quot;]\n  -&gt; Concatenate: &quot;l123e&quot;, which is s1.\n- &quot;leetcode&quot; \n  -&gt; Split:      [&quot;leet&quot;, &quot;code&quot;]\n  -&gt; Replace:    [&quot;4&quot;,    &quot;4&quot;]\n  -&gt; Concatenate: &quot;44&quot;, which is s2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;a5b&quot;, s2 = &quot;c5b&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible.\n- The original string encoded as s1 must start with the letter &#39;a&#39;.\n- The original string encoded as s2 must start with the letter &#39;c&#39;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 40</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of digits <code>1-9</code> (inclusive), and lowercase English letters only.</li>\n\t<li>The number of consecutive digits in <code>s1</code> and <code>s2</code> does not exceed <code>3</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 288,
            "dislikes": 136,
            "similarQuestions": "[{\"title\": \"Valid Word Abbreviation\", \"titleSlug\": \"valid-word-abbreviation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Check If Two String Arrays are Equivalent\", \"titleSlug\": \"check-if-two-string-arrays-are-equivalent\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.4K\", \"totalSubmission\": \"27.6K\", \"totalAcceptedRaw\": 11449, \"totalSubmissionRaw\": 27582, \"acRate\": \"41.5%\"}",
            "hints": [
                "For s1 and s2, divide each into a sequence of single alphabet strings and digital strings. The problem now becomes comparing if two sequences are equal.",
                "A single alphabet string has no variation, but a digital string has variations. For example: \"124\" can be interpreted as 1+2+4, 12+4, 1+24, and 124 wildcard characters.",
                "There are four kinds of comparisons: a single alphabet vs another; a single alphabet vs a number, a number vs a single alphabet, and a number vs another number. In the case of a number vs another (a single alphabet or a number), can you decrease the number by the min length of both?",
                "There is a recurrence relation in the search which ends when either a single alphabet != another, or one sequence ran out, or both sequences ran out."
            ],
            "rephrased": {
                "body": "Given two encoded strings `s1` and `s2`, determine if there exists an original string that could be encoded as both `s1` and `s2`. Encoding involves splitting an original string into substrings, replacing some substrings with their lengths (as numeric strings), and concatenating the result. Strings `s1` and `s2` consist of lowercase English letters and digits 1-9.",
                "constraints": [
                    "1 <= s1.length, s2.length <= 40",
                    "s1 and s2 consist of digits 1-9 (inclusive) and lowercase English letters only.",
                    "The number of consecutive digits in s1 and s2 does not exceed 3."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"internationalization\", s2 = \"i18n\"",
                        "output": "true",
                        "explanation": "The original string could be \"internationalization\".  s1 is achieved by not replacing any substrings. s2 is achieved by splitting into [\"i\", \"nternationalizatio\", \"n\"] and replacing the middle substring with its length, 18."
                    },
                    {
                        "input": "s1 = \"l123e\", s2 = \"44\"",
                        "output": "true",
                        "explanation": "The original string could be \"leetcode\". s1 is achieved by splitting into [\"l\", \"e\", \"et\", \"cod\", \"e\"] and replacing the middle three with their lengths: 1, 2, and 3, respectively. s2 is achieved by splitting into [\"leet\", \"code\"] and replacing both with their lengths."
                    },
                    {
                        "input": "s1 = \"a5b\", s2 = \"c5b\"",
                        "output": "false",
                        "explanation": "The original string encoded as s1 must start with the letter 'a'. The original string encoded as s2 must start with the letter 'c'. Therefore, no such original string exists."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "valid-word-abbreviation",
                "title": "Valid Word Abbreviation",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "check-if-two-string-arrays-are-equivalent",
                "title": "Check If Two String Arrays are Equivalent",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For s1 and s2, divide each into a sequence of single alphabet strings and digital strings. The problem now becomes comparing if two sequences are equal.",
            "A single alphabet string has no variation, but a digital string has variations. For example: \"124\" can be interpreted as 1+2+4, 12+4, 1+24, and 124 wildcard characters.",
            "There are four kinds of comparisons: a single alphabet vs another; a single alphabet vs a number, a number vs a single alphabet, and a number vs another number. In the case of a number vs another (a single alphabet or a number), can you decrease the number by the min length of both?",
            "There is a recurrence relation in the search which ends when either a single alphabet != another, or one sequence ran out, or both sequences ran out."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool possiblyEquals(string s1, string s2) {\n    dp.resize(s1.length() + 1,\n              vector<unordered_map<int, bool>>(s2.length() + 1));\n    return f(s1, s2, 0, 0, 0);\n  }\n\n private:\n  vector<vector<unordered_map<int, bool>>> dp;\n\n  // Returns true if s1[i:] matches s2[j:] with given padding difference\n  //           i := s1's index\n  //           j := s2's index\n  // paddingDiff := signed padding, if positive, s1 has a positive number of\n  //                offset bytes relative to s2\n  bool f(const string& s1, const string& s2, int i, int j, int paddingDiff) {\n    if (const auto it = dp[i][j].find(paddingDiff); it != dp[i][j].cend())\n      return it->second;\n    if (i == s1.length() && j == s2.length())\n      return paddingDiff == 0;\n    if (i < s1.length() && isdigit(s1[i])) {\n      // Add padding on s1\n      const int nextLetterIndex = getNextLetterIndex(s1, i);\n      for (const int num : getNums(s1.substr(i, nextLetterIndex - i)))\n        if (f(s1, s2, nextLetterIndex, j, paddingDiff + num))\n          return true;\n    } else if (j < s2.length() && isdigit(s2[j])) {\n      // Add padding on s2\n      const int nextLetterIndex = getNextLetterIndex(s2, j);\n      for (const int num : getNums(s2.substr(j, nextLetterIndex - j)))\n        if (f(s1, s2, i, nextLetterIndex, paddingDiff - num))\n          return true;\n    } else if (paddingDiff > 0) {\n      // S1 has more padding, j needs to catch up\n      if (j < s2.length())\n        return f(s1, s2, i, j + 1, paddingDiff - 1);\n    } else if (paddingDiff < 0) {\n      // S2 has more padding, i needs to catch up\n      if (i < s1.length())\n        return f(s1, s2, i + 1, j, paddingDiff + 1);\n    } else {  // PaddingDiff == 0\n      // No padding difference, consue the next letter\n      if (i < s1.length() && j < s2.length() && s1[i] == s2[j])\n        return f(s1, s2, i + 1, j + 1, 0);\n    }\n    return dp[i][j][paddingDiff] = false;\n  }\n\n  int getNextLetterIndex(const string& s, int i) {\n    int j = i;\n    while (i < s.length() && isdigit(s[j]))\n      ++j;\n    return j;\n  }\n\n  vector<int> getNums(const string& s) {\n    vector<int> nums{stoi(s)};\n    if (s.length() == 2) {\n      nums.push_back(stoi(s.substr(0, 1)) + stoi(s.substr(1, 1)));\n    } else if (s.length() == 3) {\n      nums.push_back(stoi(s.substr(0, 1)) + stoi(s.substr(1, 2)));\n      nums.push_back(stoi(s.substr(0, 2)) + stoi(s.substr(2, 1)));\n      nums.push_back(stoi(s.substr(0, 1)) + stoi(s.substr(1, 1)) +\n                     stoi(s.substr(2, 1)));\n    }\n    return nums;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean possiblyEquals(String s1, String s2) {\n    dp = new Map[s1.length() + 1][s2.length() + 1];\n    for (int i = 0; i <= s1.length(); ++i)\n      for (int j = 0; j <= s2.length(); ++j)\n        dp[i][j] = new HashMap<>();\n    return f(s1, s2, 0, 0, 0);\n  }\n\n  private Map<Integer, Boolean>[][] dp;\n\n  // Returns true if s1[i:] matches s2[j:] with given padding difference\n  //           i := s1's index\n  //           j := s2's index\n  // paddingDiff := signed padding, if positive, s1 has a positive number of\n  //                offset bytes relative to s2\n  private boolean f(final String s1, final String s2, int i, int j, int paddingDiff) {\n    if (dp[i][j].containsKey(paddingDiff))\n      return dp[i][j].get(paddingDiff);\n    if (i == s1.length() && j == s2.length())\n      return paddingDiff == 0;\n    if (i < s1.length() && Character.isDigit(s1.charAt(i))) {\n      // Add padding on s1\n      final int nextLetterIndex = getNextLetterIndex(s1, i);\n      for (final int num : getNums(s1.substring(i, nextLetterIndex)))\n        if (f(s1, s2, nextLetterIndex, j, paddingDiff + num))\n          return true;\n    } else if (j < s2.length() && Character.isDigit(s2.charAt(j))) {\n      // Add padding on s2\n      final int nextLetterIndex = getNextLetterIndex(s2, j);\n      for (final int num : getNums(s2.substring(j, nextLetterIndex)))\n        if (f(s1, s2, i, nextLetterIndex, paddingDiff - num))\n          return true;\n    } else if (paddingDiff > 0) {\n      // S1 has more padding, j needs to catch up\n      if (j < s2.length())\n        return f(s1, s2, i, j + 1, paddingDiff - 1);\n    } else if (paddingDiff < 0) {\n      // S2 has more padding, i needs to catch up\n      if (i < s1.length())\n        return f(s1, s2, i + 1, j, paddingDiff + 1);\n    } else { // PaddingDiff == 0\n      // No padding difference, consue the next letter\n      if (i < s1.length() && j < s2.length() && s1.charAt(i) == s2.charAt(j))\n        return f(s1, s2, i + 1, j + 1, 0);\n    }\n    dp[i][j].put(paddingDiff, false);\n    return false;\n  }\n\n  private int getNextLetterIndex(final String s, int i) {\n    int j = i;\n    while (j < s.length() && Character.isDigit(s.charAt(j)))\n      ++j;\n    return j;\n  }\n\n  private List<Integer> getNums(final String s) {\n    List<Integer> nums = new ArrayList<>(Arrays.asList(Integer.parseInt(s)));\n    if (s.length() == 2) {\n      nums.add(Integer.parseInt(s.substring(0, 1)) + Integer.parseInt(s.substring(1, 2)));\n    } else if (s.length() == 3) {\n      nums.add(Integer.parseInt(s.substring(0, 1)) + Integer.parseInt(s.substring(1, 3)));\n      nums.add(Integer.parseInt(s.substring(0, 2)) + Integer.parseInt(s.substring(2, 3)));\n      nums.add(Integer.parseInt(s.substring(0, 1)) + Integer.parseInt(s.substring(1, 2)) +\n               Integer.parseInt(s.substring(2, 3)));\n    }\n    return nums;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def possiblyEquals(self, s1: str, s2: str) -> bool:\n    def getNums(s: str) -> Set[int]:\n      nums = {int(s)}\n      for i in range(1, len(s)):\n        nums |= {x + y for x in getNums(s[:i]) for y in getNums(s[i:])}\n      return nums\n\n    def getNextLetterIndex(s: str, i: int) -> int:\n      j = i\n      while j < len(s) and s[j].isdigit():\n        j += 1\n      return j\n\n    \"\"\"\n    Return True if s1[i:] matches s2[j:] with given padding difference\n              i := s1's index\n              j := s2's index\n    paddingDiff := signed padding, if positive, s1 has a positive number of\n                    offset bytes relative to s2\n    \"\"\"\n    @functools.lru_cache(None)\n    def dp(i: int, j: int, paddingDiff: int) -> bool:\n      if i == len(s1) and j == len(s2):\n        return paddingDiff == 0\n      # Add padding on s1\n      if i < len(s1) and s1[i].isdigit():\n        nextLetterIndex = getNextLetterIndex(s1, i)\n        for num in getNums(s1[i:nextLetterIndex]):\n          if dp(nextLetterIndex, j, paddingDiff + num):\n            return True\n      # Add padding on s2\n      elif j < len(s2) and s2[j].isdigit():\n        nextLetterIndex = getNextLetterIndex(s2, j)\n        for num in getNums(s2[j:nextLetterIndex]):\n          if dp(i, nextLetterIndex, paddingDiff - num):\n            return True\n      # S1 has more padding, j needs to catch up\n      elif paddingDiff > 0:\n        if j < len(s2):\n          return dp(i, j + 1, paddingDiff - 1)\n      # S2 has more padding, i needs to catch up\n      elif paddingDiff < 0:\n        if i < len(s1):\n          return dp(i + 1, j, paddingDiff + 1)\n      # No padding difference, consume the next letter\n      else:  # PaddingDiff == 0\n        if i < len(s1) and j < len(s2) and s1[i] == s2[j]:\n          return dp(i + 1, j + 1, 0)\n      return False\n\n    return dp(0, 0, 0)\n",
                "lang_text": "py"
            }
        }
    }
}