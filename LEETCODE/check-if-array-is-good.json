{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2784",
            "title": "Check if Array is Good",
            "titleSlug": "check-if-array-is-good",
            "content": "<p>You are given an integer array <code>nums</code>. We consider an array <strong>good </strong>if it is a permutation of an array <code>base[n]</code>.</p>\n\n<p><code>base[n] = [1, 2, ..., n - 1, n, n] </code>(in other words, it is an array of length <code>n + 1</code> which contains <code>1</code> to <code>n - 1 </code>exactly once, plus two occurrences of <code>n</code>). For example, <code>base[1] = [1, 1]</code> and<code> base[3] = [1, 2, 3, 3]</code>.</p>\n\n<p>Return <code>true</code> <em>if the given array is good, otherwise return</em><em> </em><code>false</code>.</p>\n\n<p><strong>Note: </strong>A permutation of integers represents an arrangement of these numbers.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2, 1, 3]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1, 3, 3, 2]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1, 1]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true.</pre>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3, 4, 4, 1, 2, 1]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= num[i] &lt;= 200</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 266,
            "dislikes": 50,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"47.9K\", \"totalSubmission\": \"97.1K\", \"totalAcceptedRaw\": 47903, \"totalSubmissionRaw\": 97056, \"acRate\": \"49.4%\"}",
            "hints": [
                "Find the maximum element of the array."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, determine if it is a 'good' array. An array is considered 'good' if it's a permutation of an array `base[n]`, where `base[n] = [1, 2, ..., n - 1, n, n]`. In other words, `base[n]` is an array of length `n + 1` containing numbers from 1 to `n-1` exactly once, and the number `n` appearing twice.",
                "constraints": [
                    "1 <= nums.length <= 100",
                    "1 <= num[i] <= 200"
                ],
                "testcases": [
                    {
                        "input": "[2, 1, 3]",
                        "output": "false",
                        "explanation": "The maximum element is 3, so n = 3. However, nums has length 3, while base[3] = [1, 2, 3, 3] has length 4. Therefore, nums cannot be a permutation of base[3]."
                    },
                    {
                        "input": "[1, 3, 3, 2]",
                        "output": "true",
                        "explanation": "The maximum element is 3, so n = 3. nums is a permutation of base[3] = [1, 2, 3, 3]."
                    },
                    {
                        "input": "[1, 1]",
                        "output": "true",
                        "explanation": "The maximum element is 1, so n = 1. nums is a permutation of base[1] = [1, 1]."
                    },
                    {
                        "input": "[3, 4, 4, 1, 2, 1]",
                        "output": "false",
                        "explanation": "The maximum element is 4, so n = 4. However, nums has length 6, while base[4] = [1, 2, 3, 4, 4] has length 5. Therefore, nums cannot be a permutation of base[4]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Find the maximum element of the array."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isGood(vector<int>& nums) {\n    constexpr int kMax = 200;\n    const int n = nums.size() - 1;\n    vector<int> count(kMax + 1);\n\n    for (const int num : nums)\n      ++count[num];\n\n    return all_of(count.begin() + 1, count.begin() + n,\n                  [](int c) { return c == 1; }) &&\n           count[n] == 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public boolean isGood(int[] nums) {\n    final int kMax = 200;\n    final int n = nums.length - 1;\n    int[] count = new int[kMax + 1];\n\n    for (final int num : nums)\n      ++count[num];\n\n    return (n == 0 || Arrays.stream(count, 1, n).allMatch(c -> c == 1)) && count[n] == 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isGood(self, nums: List[int]) -> bool:\n    n = len(nums) - 1\n    count = collections.Counter(nums)\n    return all(count[i] == 1 for i in range(1, n)) and count[n] == 2\n",
                "lang_text": "py"
            }
        }
    }
}