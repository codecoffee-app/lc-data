{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3142",
            "title": "Check if Grid Satisfies Conditions",
            "titleSlug": "check-if-grid-satisfies-conditions",
            "content": "<p>You are given a 2D matrix <code>grid</code> of size <code>m x n</code>. You need to check if each cell <code>grid[i][j]</code> is:</p>\n\n<ul>\n\t<li>Equal to the cell below it, i.e. <code>grid[i][j] == grid[i + 1][j]</code> (if it exists).</li>\n\t<li>Different from the cell to its right, i.e. <code>grid[i][j] != grid[i][j + 1]</code> (if it exists).</li>\n</ul>\n\n<p>Return <code>true</code> if <strong>all</strong> the cells satisfy these conditions, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,0,2],[1,0,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png\" style=\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n\n<p>All the cells in the grid satisfy the conditions.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,1,1],[0,0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/27/example21.png\" style=\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n\n<p>All cells in the first row are equal.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1],[2],[3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/31/changed.png\" style=\"width: 86px; height: 277px;padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n\n<p>Cells in the first column have different values.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 10</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 9</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 55,
            "dislikes": 0,
            "similarQuestions": "[{\"title\": \"Candy\", \"titleSlug\": \"candy\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Distribute Candies\", \"titleSlug\": \"distribute-candies\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost of Buying Candies With Discount\", \"titleSlug\": \"minimum-cost-of-buying-candies-with-discount\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"29K\", \"totalSubmission\": \"67.4K\", \"totalAcceptedRaw\": 28967, \"totalSubmissionRaw\": 67448, \"acRate\": \"42.9%\"}",
            "hints": [
                "Check if each column has same value in each cell.",
                "If the previous condition is satisfied, we can simply check the first cells in adjacent columns."
            ],
            "rephrased": {
                "body": "Given a 2D matrix `grid` of size `m x n`, determine if each cell `grid[i][j]` satisfies the following conditions:\n\n1.  It is equal to the cell below it, i.e., `grid[i][j] == grid[i + 1][j]` (if the cell below exists).\n2.  It is different from the cell to its right, i.e., `grid[i][j] != grid[i][j + 1]` (if the cell to the right exists).\n\nReturn `true` if all cells satisfy these conditions; otherwise, return `false`.",
                "constraints": [
                    "1 <= n, m <= 10",
                    "0 <= grid[i][j] <= 9"
                ],
                "testcases": [
                    {
                        "input": "[[1,0,2],[1,0,2]]",
                        "output": "true",
                        "explanation": "All cells in the grid satisfy the given conditions. For example, grid[0][0] == grid[1][0] (1 == 1) and grid[0][0] != grid[0][1] (1 != 0)."
                    },
                    {
                        "input": "[[1,1,1],[0,0,0]]",
                        "output": "false",
                        "explanation": "The cells in the first row are all equal, violating the condition that a cell should be different from the cell to its right. For example, grid[0][0] == grid[0][1] (1 == 1), so the condition grid[i][j] != grid[i][j + 1] is not met."
                    },
                    {
                        "input": "[[1],[2],[3]]",
                        "output": "false",
                        "explanation": "The cells in the first column have different values, violating the condition that a cell should be equal to the cell below it. For example, grid[0][0] != grid[1][0] (1 != 2), so the condition grid[i][j] == grid[i + 1][j] is not met."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "candy",
                "title": "Candy",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "distribute-candies",
                "title": "Distribute Candies",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "minimum-cost-of-buying-candies-with-discount",
                "title": "Minimum Cost of Buying Candies With Discount",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Check if each column has same value in each cell.",
            "If the previous condition is satisfied, we can simply check the first cells in adjacent columns."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool satisfiesConditions(vector<vector<int>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n\n    for (int i = 0; i + 1 < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (grid[i][j] != grid[i + 1][j])\n          return false;\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j + 1 < n; ++j)\n        if (grid[i][j] == grid[i][j + 1])\n          return false;\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean satisfiesConditions(int[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n\n    for (int i = 0; i + 1 < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (grid[i][j] != grid[i + 1][j])\n          return false;\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j + 1 < n; ++j)\n        if (grid[i][j] == grid[i][j + 1])\n          return false;\n\n    return true;\n  }\n};\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def satisfiesConditions(self, grid: List[List[int]]) -> bool:\n    m = len(grid)\n    n = len(grid[0])\n    return all(grid[i][j] == grid[i + 1][j]\n               for i in range(m - 1)\n               for j in range(n)) and \\\n        all(grid[i][j] != grid[i][j + 1]\n            for i in range(m)\n            for j in range(n - 1))\n",
                "lang_text": "py"
            }
        }
    }
}