{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2811",
            "title": "Check if it is Possible to Split Array",
            "titleSlug": "check-if-it-is-possible-to-split-array",
            "content": "<p>You are given an array <code>nums</code> of length <code>n</code> and an integer <code>m</code>. You need to determine if it is possible to split the array into <code>n</code> <strong>non-empty</strong> arrays by performing a series of steps.</p>\n\n<p>In each step, you can select an existing array (which may be the result of previous steps) with a length of <strong>at least two</strong> and split it into <strong>two </strong>subarrays, if, <strong>for each </strong>resulting subarray, <strong>at least</strong> one of the following holds:</p>\n\n<ul>\n\t<li>The length of the subarray is one, or</li>\n\t<li>The sum of elements of the subarray is <strong>greater than or equal</strong> to <code>m</code>.</li>\n</ul>\n\n<p>Return <code>true</code><em> if you can split the given array into </em><code>n</code><em> arrays, otherwise return</em> <code>false</code>.</p>\n\n<p><strong>Note:</strong> A subarray is <em>a contiguous non-empty sequence of elements within an array</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2, 2, 1], m = 4\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can split the array into [2, 2] and [1] in the first step. Then, in the second step, we can split [2, 2] into [2] and [2]. As a result, the answer is true.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2, 1, 3], m = 5 \n<strong>Output:</strong> false\n<strong>Explanation: </strong>We can try splitting the array in two different ways: the first way is to have [2, 1] and [3], and the second way is to have [2] and [1, 3]. However, both of these ways are not valid. So, the answer is false.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2, 3, 3, 2, 3], m = 6\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can split the array into [2, 3, 3, 2] and [3] in the first step. Then, in the second step, we can split [2, 3, 3, 2] into [2, 3, 3] and [2]. Then, in the third step, we can split [2, 3, 3] into [2] and [3, 3]. And in the last step we can split [3, 3] into [3] and [3]. As a result, the answer is true.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= m &lt;= 200</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 453,
            "dislikes": 89,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"28.7K\", \"totalSubmission\": \"85.2K\", \"totalAcceptedRaw\": 28654, \"totalSubmissionRaw\": 85233, \"acRate\": \"33.6%\"}",
            "hints": [
                "It can be proven that if you can split more than one element as a subarray, then you can split exactly one element."
            ],
            "rephrased": {
                "body": "Given an array `nums` of length `n` and an integer `m`, determine if it's possible to split the array into `n` non-empty subarrays. In each step, you can select an existing array (resulting from previous splits) with a length of at least two and split it into two subarrays. The split is valid if, for each resulting subarray, either the subarray's length is one, or the sum of its elements is greater than or equal to `m`. Return `true` if the array can be split into `n` subarrays, otherwise return `false`.",
                "constraints": [
                    "1 <= n == nums.length <= 100",
                    "1 <= nums[i] <= 100",
                    "1 <= m <= 200"
                ],
                "testcases": [
                    {
                        "input": "nums = [2, 2, 1], m = 4",
                        "output": "true",
                        "explanation": "The array can be split into [2, 2] and [1]. Then, [2, 2] can be split into [2] and [2], resulting in three subarrays."
                    },
                    {
                        "input": "nums = [2, 1, 3], m = 5",
                        "output": "false",
                        "explanation": "Splitting into [2, 1] and [3] or [2] and [1, 3] does not satisfy the conditions."
                    },
                    {
                        "input": "nums = [2, 3, 3, 2, 3], m = 6",
                        "output": "true",
                        "explanation": "The array can be split into [2, 3, 3, 2] and [3]. Then, [2, 3, 3, 2] into [2, 3, 3] and [2]. Then, [2, 3, 3] into [2] and [3, 3]. And finally, [3, 3] into [3] and [3], resulting in five subarrays."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "It can be proven that if you can split more than one element as a subarray, then you can split exactly one element."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canSplitArray(vector<int>& nums, int m) {\n    if (nums.size() < 3)\n      return true;\n\n    for (int i = 1; i < nums.size(); ++i)\n      if (nums[i] + nums[i - 1] >= m)\n        return true;\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canSplitArray(List<Integer> nums, int m) {\n    if (nums.size() < 3)\n      return true;\n\n    for (int i = 1; i < nums.size(); ++i)\n      if (nums.get(i) + nums.get(i - 1) >= m)\n        return true;\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canSplitArray(self, nums: List[int], m: int) -> bool:\n    return len(nums) < 3 or any(a + b >= m for a, b in itertools.pairwise(nums))\n",
                "lang_text": "py"
            }
        }
    }
}