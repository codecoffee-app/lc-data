{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1958",
            "title": "Check if Move is Legal",
            "titleSlug": "check-if-move-is-legal",
            "content": "<p>You are given a <strong>0-indexed</strong> <code>8 x 8</code> grid <code>board</code>, where <code>board[r][c]</code> represents the cell <code>(r, c)</code> on a game board. On the board, free cells are represented by <code>&#39;.&#39;</code>, white cells are represented by <code>&#39;W&#39;</code>, and black cells are represented by <code>&#39;B&#39;</code>.</p>\n\n<p>Each move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). However, a move is only <strong>legal</strong> if, after changing it, the cell becomes the <strong>endpoint of a good line</strong> (horizontal, vertical, or diagonal).</p>\n\n<p>A <strong>good line</strong> is a line of <strong>three or more cells (including the endpoints)</strong> where the endpoints of the line are <strong>one color</strong>, and the remaining cells in the middle are the <strong>opposite color</strong> (no cells in the line are free). You can find examples for good lines in the figure below:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/22/goodlines5.png\" style=\"width: 500px; height: 312px;\" />\n<p>Given two integers <code>rMove</code> and <code>cMove</code> and a character <code>color</code> representing the color you are playing as (white or black), return <code>true</code> <em>if changing cell </em><code>(rMove, cMove)</code> <em>to color</em> <code>color</code> <em>is a <strong>legal</strong> move, or </em><code>false</code><em> if it is not legal</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/10/grid11.png\" style=\"width: 350px; height: 350px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;W&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;W&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;W&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;W&quot;,&quot;B&quot;,&quot;B&quot;,&quot;.&quot;,&quot;W&quot;,&quot;W&quot;,&quot;W&quot;,&quot;B&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;W&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]], rMove = 4, cMove = 3, color = &quot;B&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &#39;.&#39;, &#39;W&#39;, and &#39;B&#39; are represented by the colors blue, white, and black respectively, and cell (rMove, cMove) is marked with an &#39;X&#39;.\nThe two good lines with the chosen cell as an endpoint are annotated above with the red rectangles.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/10/grid2.png\" style=\"width: 350px; height: 351px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;.&quot;,&quot;W&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;W&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;W&quot;,&quot;B&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;W&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;W&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;]], rMove = 4, cMove = 4, color = &quot;W&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> While there are good lines with the chosen cell as a middle cell, there are no good lines with the chosen cell as an endpoint.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == board[r].length == 8</code></li>\n\t<li><code>0 &lt;= rMove, cMove &lt; 8</code></li>\n\t<li><code>board[rMove][cMove] == &#39;.&#39;</code></li>\n\t<li><code>color</code> is either <code>&#39;B&#39;</code> or <code>&#39;W&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 136,
            "dislikes": 260,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.4K\", \"totalSubmission\": \"24.4K\", \"totalAcceptedRaw\": 11414, \"totalSubmissionRaw\": 24419, \"acRate\": \"46.7%\"}",
            "hints": [
                "For each line starting at the given cell check if it's a good line",
                "To do that iterate over all directions horizontal, vertical, and diagonals then check good lines naively"
            ],
            "rephrased": {
                "body": "Given an 8x8 game board represented by a 2D array `board`, determine if a move is legal. A legal move involves placing a piece of color `color` (either 'W' for white or 'B' for black) at a free cell `(rMove, cMove)`. The move is legal if, after placing the piece, the cell becomes an endpoint of a 'good line'. A good line consists of three or more cells where the endpoints are of the same color, and the cells in between are of the opposite color and not free ('.'). Return `true` if the move is legal, and `false` otherwise.",
                "constraints": [
                    "board.length == board[r].length == 8",
                    "0 <= rMove, cMove < 8",
                    "board[rMove][cMove] == '.'",
                    "color is either 'B' or 'W'."
                ],
                "testcases": [
                    {
                        "input": "board = [['.','.','.','B','.','.','.','.'],['.','.','.','W','.','.','.','.'],['.','.','.','W','.','.','.','.'],['.','.','.','W','.','.','.','.'],['W','B','B','.','W','W','W','B'],['.','.','.','B','.','.','.','.'],['.','.','.','B','.','.','.','.'],['.','.','.','W','.','.','.','.']], rMove = 4, cMove = 3, color = 'B'",
                        "output": "true",
                        "explanation": "Placing a black piece at (4, 3) creates good lines horizontally and vertically.  The horizontal line is (4,0) - Black, (4,1) - Black, (4,2) - Black, (4,3) - Black, (4,4) - White, (4,5) - White, (4,6) - White, (4,7) - Black. The vertical line is (0,3) - Black, (1,3) - White, (2,3) - White, (3,3) - White, (4,3) - Black, (5,3) - Black, (6,3) - Black, (7,3) - White. Thus, the move is legal."
                    },
                    {
                        "input": "board = [['.','.','.','.','.','.','.','.'],['.','B','.','.','W','.','.','.'],['.','.','W','.','.','.','.','.'],['.','.','.','W','B','.','.','.'],['.','.','.','.','.','.','.','.'],['.','.','.','.','B','W','.','.'],['.','.','.','.','.','.','W','.'],['.','.','.','.','.','.','.','B']], rMove = 4, cMove = 4, color = 'W'",
                        "output": "false",
                        "explanation": "While there are cells of opposite color adjacent to (4, 4) after placing a white piece, there are no good lines with (4, 4) as an endpoint. All potential lines formed have the chosen cell as a middle cell, which does not satisfy the condition."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For each line starting at the given cell check if it's a good line",
            "To do that iterate over all directions horizontal, vertical, and diagonals then check good lines naively"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool checkMove(vector<vector<char>>& board, int rMove, int cMove,\n                 char color) {\n    const vector<pair<int, int>> dirs{{-1, -1}, {-1, 0}, {-1, 1}, {0, -1},\n                                      {0, 1},   {1, -1}, {1, 0},  {1, 1}};\n\n    for (const auto& [dx, dy] : dirs) {\n      int cellsCount = 2;\n      int i = rMove + dx;\n      int j = cMove + dy;\n      while (0 <= i && i < 8 && 0 <= j && j < 8) {\n        // No free cells in between.\n        if (board[i][j] == '.')\n          break;\n        // Need >= 3 cells.\n        if (cellsCount == 2 && board[i][j] == color)\n          break;\n        // >= 3 cells.\n        if (board[i][j] == color)\n          return true;\n        i += dx;\n        j += dy;\n        ++cellsCount;\n      }\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean checkMove(char[][] board, int rMove, int cMove, char color) {\n    final int[][] dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};\n\n    for (int k = 0; k < 8; ++k) {\n      final int dx = dirs[k][0];\n      final int dy = dirs[k][1];\n      int cellsCount = 2;\n      int i = rMove + dx;\n      int j = cMove + dy;\n      while (0 <= i && i < 8 && 0 <= j && j < 8) {\n        // No free cells in between.\n        if (board[i][j] == '.')\n          break;\n        // Need >= 3 cells.\n        if (cellsCount == 2 && board[i][j] == color)\n          break;\n        // >= 3 cells.\n        if (board[i][j] == color)\n          return true;\n        i += dx;\n        j += dy;\n        ++cellsCount;\n      }\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def checkMove(self, board: List[List[str]], rMove: int, cMove: int, color: str) -> bool:\n    dirs = [(-1, -1), (-1, 0), (-1, 1), (0, -1),\n            (0, 1), (1, -1), (1, 0), (1, 1)]\n\n    for dx, dy in dirs:\n      cellsCount = 2\n      i = rMove + dx\n      j = cMove + dy\n      while 0 <= i < 8 and 0 <= j < 8:\n        # No free cells in between.\n        if board[i][j] == '.':\n          break\n        # Need >= 3 cells.\n        if cellsCount == 2 and board[i][j] == color:\n          break\n        # >= 3 cells.\n        if board[i][j] == color:\n          return True\n        i += dx\n        j += dy\n        cellsCount += 1\n\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}