{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1585",
            "title": "Check If String Is Transformable With Substring Sort Operations",
            "titleSlug": "check-if-string-is-transformable-with-substring-sort-operations",
            "content": "<p>Given two strings <code>s</code> and <code>t</code>, transform string <code>s</code> into string <code>t</code> using the following operation any number of times:</p>\n\n<ul>\n\t<li>Choose a <strong>non-empty</strong> substring in <code>s</code> and sort it in place so the characters are in <strong>ascending order</strong>.\n\n\t<ul>\n\t\t<li>For example, applying the operation on the underlined substring in <code>&quot;1<u>4234</u>&quot;</code> results in <code>&quot;1<u>2344</u>&quot;</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <code>true</code> if <em>it is possible to transform <code>s</code> into <code>t</code></em>. Otherwise, return <code>false</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;84532&quot;, t = &quot;34852&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can transform s into t using the following sort operations:\n&quot;84<u>53</u>2&quot; (from index 2 to 3) -&gt; &quot;84<u>35</u>2&quot;\n&quot;<u>843</u>52&quot; (from index 0 to 2) -&gt; &quot;<u>348</u>52&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;34521&quot;, t = &quot;23415&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can transform s into t using the following sort operations:\n&quot;<u>3452</u>1&quot; -&gt; &quot;<u>2345</u>1&quot;\n&quot;234<u>51</u>&quot; -&gt; &quot;234<u>15</u>&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;12345&quot;, t = &quot;12435&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s.length == t.length</code></li>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of only digits.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 429,
            "dislikes": 7,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.8K\", \"totalSubmission\": \"16.2K\", \"totalAcceptedRaw\": 7819, \"totalSubmissionRaw\": 16212, \"acRate\": \"48.2%\"}",
            "hints": [
                "Suppose the first digit you need is 'd'. How can you determine if it's possible to get that digit there?",
                "Consider swapping adjacent characters to maintain relative ordering."
            ],
            "rephrased": {
                "body": "Given two strings `s` and `t` of equal length, determine if it's possible to transform string `s` into string `t`.  You can perform the following operation any number of times:\n\n*   Select a non-empty substring of `s` and sort it in ascending order (in place).\n\nReturn `true` if the transformation is possible; otherwise, return `false`.",
                "constraints": [
                    "s.length == t.length",
                    "1 <= s.length <= 10^5",
                    "s and t consist of only digits."
                ],
                "testcases": [
                    {
                        "input": "s = \"84532\", t = \"34852\"",
                        "output": "true",
                        "explanation": "String `s` can be transformed into `t`. First, sort the substring \"53\" of `s` to get \"84352\". Then sort the substring \"843\" to get \"34852\", which is equal to `t`."
                    },
                    {
                        "input": "s = \"34521\", t = \"23415\"",
                        "output": "true",
                        "explanation": "String `s` can be transformed into `t`. First, sort the substring \"3452\" of `s` to get \"23451\". Then sort the substring \"51\" of `s` to get \"23415\", which is equal to `t`."
                    },
                    {
                        "input": "s = \"12345\", t = \"12435\"",
                        "output": "false",
                        "explanation": "It's not possible to transform \"12345\" into \"12435\" using the allowed operation. Sorting substrings only arranges characters in ascending order, and the frequency of each digit must remain the same. In this case, it is not possible to change the order such that string `t` can be obtained."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Suppose the first digit you need is 'd'. How can you determine if it's possible to get that digit there?",
            "Consider swapping adjacent characters to maintain relative ordering."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isTransformable(string s, string t) {\n    if (getCount(s) != getCount(t))\n      return false;\n\n    vector<queue<int>> positions(10);\n\n    for (int i = 0; i < s.length(); ++i)\n      positions[s[i] - '0'].push(i);\n\n    // For each digit in t, check if we can put this digit in s at the same\n    // position as t. Ensure that all the left digits are equal to or greater\n    // than it. This is because the only operation we can perform is sorting in\n    // ascending order. If there is a digit to the left that is smaller than it,\n    // we can never move it to the same position as in t. However, if all the\n    // digits to its left are equal to or greater than it, we can move it one\n    // position to the left until it reaches the same position as in t.\n    for (const char c : t) {\n      const int d = c - '0';\n      const int front = positions[d].front();\n      positions[d].pop();\n      for (int smaller = 0; smaller < d; ++smaller)\n        if (!positions[smaller].empty() && positions[smaller].front() < front)\n          return false;\n    }\n    return true;\n  }\n\n private:\n  vector<int> getCount(const string& s) {\n    vector<int> count(10);\n    for (const char c : s)\n      ++count[c - '0'];\n    return count;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isTransformable(String s, String t) {\n    if (!Arrays.equals(getCount(s), getCount(t)))\n      return false;\n\n    Queue<Integer>[] positions = new Queue[10];\n    for (int i = 0; i < 10; i++)\n      positions[i] = new LinkedList<>();\n\n    for (int i = 0; i < s.length(); i++)\n      positions[s.charAt(i) - '0'].offer(i);\n\n    for (final char c : t.toCharArray()) {\n      final int d = c - '0';\n      final int front = positions[d].poll();\n      for (int smaller = 0; smaller < d; ++smaller)\n        if (!positions[smaller].isEmpty() && positions[smaller].peek() < front)\n          return false;\n    }\n\n    return true;\n  }\n\n  private int[] getCount(String s) {\n    int[] count = new int[10];\n    for (char c : s.toCharArray())\n      count[c - '0']++;\n    return count;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isTransformable(self, s: str, t: str) -> bool:\n    if collections.Counter(s) != collections.Counter(t):\n      return False\n\n    positions = [collections.deque() for _ in range(10)]\n\n    for i, c in enumerate(s):\n      positions[int(c)].append(i)\n\n    for c in t:\n      d = int(c)\n      front = positions[d].popleft()\n      for smaller in range(d):\n        if positions[smaller] and positions[smaller][0] < front:\n          return False\n\n    return True\n",
                "lang_text": "py"
            }
        }
    }
}