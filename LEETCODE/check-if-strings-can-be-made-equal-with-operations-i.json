{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2839",
            "title": "Check if Strings Can be Made Equal With Operations I",
            "titleSlug": "check-if-strings-can-be-made-equal-with-operations-i",
            "content": "<p>You are given two strings <code>s1</code> and <code>s2</code>, both of length <code>4</code>, consisting of <strong>lowercase</strong> English letters.</p>\n\n<p>You can apply the following operation on any of the two strings <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose any two indices <code>i</code> and <code>j</code> such that <code>j - i = 2</code>, then <strong>swap</strong> the two characters at those indices in the string.</li>\n</ul>\n\n<p>Return <code>true</code><em> if you can make the strings </em><code>s1</code><em> and </em><code>s2</code><em> equal, and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abcd&quot;, s2 = &quot;cdab&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can do the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = &quot;cbad&quot;.\n- Choose the indices i = 1, j = 3. The resulting string is s1 = &quot;cdab&quot; = s2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abcd&quot;, s2 = &quot;dacb&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is not possible to make the two strings equal.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s1.length == s2.length == 4</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 178,
            "dislikes": 24,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"37K\", \"totalSubmission\": \"78.8K\", \"totalAcceptedRaw\": 37019, \"totalSubmissionRaw\": 78790, \"acRate\": \"47.0%\"}",
            "hints": [
                "<div class=\"_1l1MA\">Since the strings are very small you can try a brute-force approach.</div>",
                "<div class=\"_1l1MA\">There are only <code>2</code> different swaps that are possible in a string.</div>"
            ],
            "rephrased": {
                "body": "Given two strings `s1` and `s2`, both of length 4 and consisting of lowercase English letters, determine if it's possible to make them equal using a specific swap operation.  The allowed operation is to swap characters at indices `i` and `j` where `j - i = 2`. Return `true` if `s1` can be transformed into `s2` via any number of these swaps, and `false` otherwise.",
                "constraints": [
                    "`s1.length == s2.length == 4`",
                    "`s1` and `s2` consist only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"abcd\", s2 = \"cdab\"",
                        "output": "true",
                        "explanation": "The string \"abcd\" can be transformed into \"cdab\" by swapping indices 0 and 2 to get \"cbad\", and then swapping indices 1 and 3 to get \"cdab\"."
                    },
                    {
                        "input": "s1 = \"abcd\", s2 = \"dacb\"",
                        "output": "false",
                        "explanation": "It is not possible to transform \"abcd\" into \"dacb\" using the allowed swap operation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<div class=\"_1l1MA\">Since the strings are very small you can try a brute-force approach.</div>",
            "<div class=\"_1l1MA\">There are only <code>2</code> different swaps that are possible in a string.</div>"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canBeEqual(string s1, string s2) {\n    for (const string& a : swappedStrings(s1))\n      for (const string& b : swappedStrings(s2))\n        if (a == b)\n          return true;\n    return false;\n  }\n\n private:\n  vector<string> swappedStrings(const string& s) {\n    vector<char> chars(s.begin(), s.end());\n    return {s, string({chars[2], chars[1], chars[0], chars[3]}),\n            string({chars[0], chars[3], chars[2], chars[1]}),\n            string({chars[2], chars[3], chars[0], chars[1]})};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canBeEqual(String s1, String s2) {\n    for (final String a : swappedStrings(s1))\n      for (final String b : swappedStrings(s2))\n        if (a.equals(b))\n          return true;\n    return false;\n  }\n\n  private List<String> swappedStrings(final String s) {\n    List<String> res = new ArrayList<>();\n    char[] chars = s.toCharArray();\n    res.add(s);\n    res.add(new String(new char[] {chars[2], chars[1], chars[0], chars[3]}));\n    res.add(new String(new char[] {chars[0], chars[3], chars[2], chars[1]}));\n    res.add(new String(new char[] {chars[2], chars[3], chars[0], chars[1]}));\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canBeEqual(self, s1: str, s2: str) -> bool:\n    def swappedStrings(s: str) -> List[str]:\n      chars = list(s)\n      return [chars,\n              ''.join([chars[2], chars[1], chars[0], chars[3]]),\n              ''.join([chars[0], chars[3], chars[2], chars[1]]),\n              ''.join([chars[2], chars[3], chars[0], chars[1]])]\n\n    return any(a == b\n               for a in swappedStrings(s1)\n               for b in swappedStrings(s2))\n",
                "lang_text": "py"
            }
        }
    }
}