{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2840",
            "title": "Check if Strings Can be Made Equal With Operations II",
            "titleSlug": "check-if-strings-can-be-made-equal-with-operations-ii",
            "content": "<p>You are given two strings <code>s1</code> and <code>s2</code>, both of length <code>n</code>, consisting of <strong>lowercase</strong> English letters.</p>\n\n<p>You can apply the following operation on <strong>any</strong> of the two strings <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose any two indices <code>i</code> and <code>j</code> such that <code>i &lt; j</code> and the difference <code>j - i</code> is <strong>even</strong>, then <strong>swap</strong> the two characters at those indices in the string.</li>\n</ul>\n\n<p>Return <code>true</code><em> if you can make the strings </em><code>s1</code><em> and </em><code>s2</code><em> equal, and&nbsp;</em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abcdba&quot;, s2 = &quot;cabdab&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can apply the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = &quot;cbadba&quot;.\n- Choose the indices i = 2, j = 4. The resulting string is s1 = &quot;cbbdaa&quot;.\n- Choose the indices i = 1, j = 5. The resulting string is s1 = &quot;cabdab&quot; = s2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abe&quot;, s2 = &quot;bea&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is not possible to make the two strings equal.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == s1.length == s2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s1</code> and <code>s2</code> consist only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 249,
            "dislikes": 3,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"26.2K\", \"totalSubmission\": \"47.1K\", \"totalAcceptedRaw\": 26188, \"totalSubmissionRaw\": 47090, \"acRate\": \"55.6%\"}",
            "hints": [
                "<div class=\"_1l1MA\">Characters in two positions can be swapped if and only if the two positions have the same parity.</div>",
                "<div class=\"_1l1MA\">To be able to make the two strings equal, the characters at even and odd positions in the strings should be the same.</div>"
            ],
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, of equal length `n`, determine if it's possible to make them equal by performing a series of swaps.  A swap involves selecting two indices `i` and `j` within a string, where `i < j` and `j - i` is even, and exchanging the characters at those indices. Return `true` if `s1` can be transformed into `s2` using these swaps, and `false` otherwise.",
                "constraints": [
                    "n == s1.length == s2.length",
                    "1 <= n <= 10^5",
                    "s1 and s2 consist only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"abcdba\", s2 = \"cabdab\"",
                        "output": "true",
                        "explanation": "The string 'abcdba' can be transformed into 'cabdab' through a series of swaps with even index differences. One possible sequence is: 'abcdba' -> 'cbadba' (swap i=0, j=2) -> 'cbbdaa' (swap i=2, j=4) -> 'cabdab' (swap i=1, j=5)."
                    },
                    {
                        "input": "s1 = \"abe\", s2 = \"bea\"",
                        "output": "false",
                        "explanation": "It is not possible to make the two strings equal using the given constraints."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<div class=\"_1l1MA\">Characters in two positions can be swapped if and only if the two positions have the same parity.</div>",
            "<div class=\"_1l1MA\">To be able to make the two strings equal, the characters at even and odd positions in the strings should be the same.</div>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool checkStrings(string s1, string s2) {\n    vector<vector<int>> count(2, vector<int>(26));\n\n    for (int i = 0; i < s1.length(); ++i) {\n      ++count[i % 2][s1[i] - 'a'];\n      --count[i % 2][s2[i] - 'a'];\n    }\n\n    for (int i = 0; i < 26; ++i)\n      if (count[0][i] > 0 || count[1][i] > 0)\n        return false;\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean checkStrings(String s1, String s2) {\n    int[][] count = new int[2][26];\n\n    for (int i = 0; i < s1.length(); ++i) {\n      ++count[i % 2][s1.charAt(i) - 'a'];\n      --count[i % 2][s2.charAt(i) - 'a'];\n    }\n\n    for (int i = 0; i < 26; ++i)\n      if (count[0][i] > 0 || count[1][i] > 0)\n        return false;\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def checkStrings(self, s1: str, s2: str) -> bool:\n    count = [collections.Counter() for _ in range(2)]\n\n    for i, (a, b) in enumerate(zip(s1, s2)):\n      count[i % 2][a] += 1\n      count[i % 2][b] -= 1\n\n    return all(freq == 0 for freq in count[0].values()) \\\n        and all(freq == 0 for freq in count[1].values())\n",
                "lang_text": "py"
            }
        }
    }
}