{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3235",
            "title": "Check if the Rectangle Corner Is Reachable",
            "titleSlug": "check-if-the-rectangle-corner-is-reachable",
            "content": "<p>You are given two positive integers <code>X</code> and <code>Y</code>, and a 2D array <code>circles</code>, where <code>circles[i] = [x<sub>i</sub>, y<sub>i</sub>, r<sub>i</sub>]</code> denotes a circle with center at <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and radius <code>r<sub>i</sub></code>.</p>\n\n<p>There is a rectangle in the coordinate plane with its bottom left corner at the origin and top right corner at the coordinate <code>(X, Y)</code>. You need to check whether there is a path from the bottom left corner to the top right corner such that the <strong>entire path</strong> lies inside the rectangle, <strong>does not</strong> touch or lie inside <strong>any</strong> circle, and touches the rectangle <strong>only</strong> at the two corners.</p>\n\n<p>Return <code>true</code> if such a path exists, and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">X = 3, Y = 4, circles = [[2,1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/18/example2circle1.png\" style=\"width: 346px; height: 264px;\" /></p>\n\n<p>The black curve shows a possible path between <code>(0, 0)</code> and <code>(3, 4)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">X = 3, Y = 3, circles = [[1,1,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/18/example1circle.png\" style=\"width: 346px; height: 264px;\" /></p>\n\n<p>No path exists from <code>(0, 0)</code> to <code>(3, 3)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">X = 3, Y = 3, circles = [[2,1,1],[1,2,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/18/example0circle.png\" style=\"width: 346px; height: 264px;\" /></p>\n\n<p>No path exists from <code>(0, 0)</code> to <code>(3, 3)</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= X, Y &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= circles.length &lt;= 1000</code></li>\n\t<li><code>circles[i].length == 3</code></li>\n\t<li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub>, r<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 64,
            "dislikes": 14,
            "similarQuestions": "[{\"title\": \"Queries on Number of Points Inside a Circle\", \"titleSlug\": \"queries-on-number-of-points-inside-a-circle\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check if Point Is Reachable\", \"titleSlug\": \"check-if-point-is-reachable\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Geometry",
                    "slug": "geometry"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.4K\", \"totalSubmission\": \"16.1K\", \"totalAcceptedRaw\": 4377, \"totalSubmissionRaw\": 16110, \"acRate\": \"27.2%\"}",
            "hints": [
                "Create a graph with <code>n + 4</code> vertices.",
                "Vertices 0 to <code>n - 1</code> represent the circles, vertex <code>n</code> represents upper edge, vertex <code>n + 1</code> represents right edge, vertex <code>n + 2</code> represents lower edge, and vertex <code>n + 3</code> represents left edge.",
                "Add an edge between these vertices if they intersect or touch.",
                "Answer will be <code>false</code> when any of two sides left-right, left-bottom, right-top or top-bottom are reachable using the edges."
            ],
            "rephrased": {
                "body": "Given two positive integers `X` and `Y`, representing the top-right corner (X, Y) of a rectangle with the bottom-left corner at the origin (0, 0), and a 2D array `circles`, where `circles[i] = [x_i, y_i, r_i]` denotes a circle centered at `(x_i, y_i)` with radius `r_i`, determine if there exists a path from (0, 0) to (X, Y) such that the path remains entirely within the rectangle, avoids touching or entering any circle, and only touches the rectangle's corners.",
                "constraints": [
                    "3 <= X, Y <= 10^9",
                    "1 <= circles.length <= 1000",
                    "circles[i].length == 3",
                    "1 <= x_i, y_i, r_i <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "X = 3, Y = 4, circles = [[2,1,1]]",
                        "output": "true",
                        "explanation": "A path exists from (0, 0) to (3, 4) that avoids the circle centered at (2, 1) with radius 1, remaining within the bounds of the rectangle."
                    },
                    {
                        "input": "X = 3, Y = 3, circles = [[1,1,2]]",
                        "output": "false",
                        "explanation": "No path exists from (0, 0) to (3, 3) that avoids the circle centered at (1, 1) with radius 2, while staying within the rectangle's boundaries."
                    },
                    {
                        "input": "X = 3, Y = 3, circles = [[2,1,1],[1,2,1]]",
                        "output": "false",
                        "explanation": "No path exists from (0, 0) to (3, 3) that avoids both circles centered at (2, 1) and (1, 2), each with radius 1, without intersecting them or leaving the rectangle."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "queries-on-number-of-points-inside-a-circle",
                "title": "Queries on Number of Points Inside a Circle",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "check-if-point-is-reachable",
                "title": "Check if Point Is Reachable",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Create a graph with <code>n + 4</code> vertices.",
            "Vertices 0 to <code>n - 1</code> represent the circles, vertex <code>n</code> represents upper edge, vertex <code>n + 1</code> represents right edge, vertex <code>n + 2</code> represents lower edge, and vertex <code>n + 3</code> represents left edge.",
            "Add an edge between these vertices if they intersect or touch.",
            "Answer will be <code>false</code> when any of two sides left-right, left-bottom, right-top or top-bottom are reachable using the edges."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Geometry",
                "slug": "geometry"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n};\n\nclass Solution {\n public:\n  bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n    const int n = circles.size();\n    // Add two virtual nodes, where node n represents (0, 0) and node n + 1\n    // represents (X, Y).\n    UnionFind uf(n + 2);\n\n    // Iterate through each circle.\n    for (int i = 0; i < n; ++i) {\n      const int x = circles[i][0];\n      const int y = circles[i][1];\n      const int r = circles[i][2];\n      // Union the current circle with the node (0, 0) if the circle overlaps\n      // with the left or top edges.\n      if (x - r <= 0 || y + r >= Y)\n        uf.unionByRank(i, n);\n      // Union the current circle with the node (X, Y) if the circle overlaps\n      // with the right or bottom edges.\n      if (x + r >= X || y - r <= 0)\n        uf.unionByRank(i, n + 1);\n      // Union the current circle with previous circles if they overlap.\n      for (int j = 0; j < i; ++j) {\n        const int x2 = circles[j][0];\n        const int y2 = circles[j][1];\n        const int r2 = circles[j][2];\n        if (static_cast<long>(x - x2) * (x - x2) +\n                static_cast<long>(y - y2) * (y - y2) <=\n            static_cast<long>(r + r2) * (r + r2))\n          uf.unionByRank(i, j);\n      }\n    }\n\n    // If nodes (0, 0) and (X, Y) are in the same union set, that means there's\n    // a path of overlapping circles that connects the left or top edges to the\n    // right or bottom edges, implying that (0, 0) cannot reach (X, Y).\n    return uf.find(n) != uf.find(n + 1);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public void unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  public int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n\n  private int[] id;\n  private int[] rank;\n}\n\nclass Solution {\n  public boolean canReachCorner(int X, int Y, int[][] circles) {\n    final int n = circles.length;\n    // Add two virtual nodes, where node n represents (0, 0) and node n + 1\n    // represents (X, Y).\n    UnionFind uf = new UnionFind(n + 2);\n\n    // Iterate through each circle.\n    for (int i = 0; i < n; ++i) {\n      final int x = circles[i][0];\n      final int y = circles[i][1];\n      final int r = circles[i][2];\n      // Union the current circle with the node (0, 0) if the circle overlaps\n      // with the left or top edges.\n      if (x - r <= 0 || y + r >= Y)\n        uf.unionByRank(i, n);\n      // Union the current circle with the node (X, Y) if the circle overlaps\n      // with the right or bottom edges.\n      if (x + r >= X || y - r <= 0)\n        uf.unionByRank(i, n + 1);\n      // Union the current circle with previous circles if they overlap.\n      for (int j = 0; j < i; j++) {\n        final int x2 = circles[j][0];\n        final int y2 = circles[j][1];\n        final int r2 = circles[j][2];\n        if ((long) (x - x2) * (x - x2) + (long) (y - y2) * (y - y2) <= (long) (r + r2) * (r + r2))\n          uf.unionByRank(i, j);\n      }\n    }\n\n    // If nodes (0, 0) and (X, Y) are in the same union set, that means there's\n    // a path of overlapping circles that connects the left or top edges to the\n    // right or bottom edges, implying that (0, 0) cannot reach (X, Y).\n    return uf.find(n) != uf.find(n + 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def canReachCorner(self, X: int, Y: int, circles: list[list[int]]) -> bool:\n    n = len(circles)\n    # Add two virtual nodes, where node n represents (0, 0) and node n + 1\n    # represents (X, Y).\n    uf = UnionFind(n + 2)\n\n    # Iterate through each circle.\n    for i, (x, y, r) in enumerate(circles):\n      # Union the current circle with the node (0, 0) if the circle overlaps\n      # with the left or top edges.\n      if x - r <= 0 or y + r >= Y:\n        uf.unionByRank(i, n)\n      # Union the current circle with the node (X, Y) if the circle overlaps\n      # with the right or bottom edges.\n      if x + r >= X or y - r <= 0:\n        uf.unionByRank(i, n + 1)\n      # Union the current circle with previous circles if they overlap.\n      for j in range(i):\n        x2, y2, r2 = circles[j]\n        if (x - x2)**2 + (y - y2)**2 <= (r + r2)**2:\n          uf.unionByRank(i, j)\n\n    # If nodes (0, 0) and (X, Y) are in the same union set, that means there's\n    # a path of overlapping circles that connects the left or top edges to the\n    # right or bottom edges, implying that (0, 0) cannot reach (X, Y).\n    return uf.find(n) != uf.find(n + 1)\n",
                "lang_text": "py"
            }
        }
    }
}