{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1391",
            "title": "Check if There is a Valid Path in a Grid",
            "titleSlug": "check-if-there-is-a-valid-path-in-a-grid",
            "content": "<p>You are given an <code>m x n</code> <code>grid</code>. Each cell of <code>grid</code> represents a street. The street of <code>grid[i][j]</code> can be:</p>\n\n<ul>\n\t<li><code>1</code> which means a street connecting the left cell and the right cell.</li>\n\t<li><code>2</code> which means a street connecting the upper cell and the lower cell.</li>\n\t<li><code>3</code> which means a street connecting the left cell and the lower cell.</li>\n\t<li><code>4</code> which means a street connecting the right cell and the lower cell.</li>\n\t<li><code>5</code> which means a street connecting the left cell and the upper cell.</li>\n\t<li><code>6</code> which means a street connecting the right cell and the upper cell.</li>\n</ul>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/03/05/main.png\" style=\"width: 450px; height: 708px;\" />\n<p>You will initially start at the street of the upper-left cell <code>(0, 0)</code>. A valid path in the grid is a path that starts from the upper left cell <code>(0, 0)</code> and ends at the bottom-right cell <code>(m - 1, n - 1)</code>. <strong>The path should only follow the streets</strong>.</p>\n\n<p><strong>Notice</strong> that you are <strong>not allowed</strong> to change any street.</p>\n\n<p>Return <code>true</code><em> if there is a valid path in the grid or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/03/05/e1.png\" style=\"width: 455px; height: 311px;\" />\n<pre>\n<strong>Input:</strong> grid = [[2,4,3],[6,5,2]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/03/05/e2.png\" style=\"width: 455px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2,1],[1,2,1]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,2]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 6</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 791,
            "dislikes": 309,
            "similarQuestions": "[{\"title\": \" Check if There Is a Valid Parentheses String Path\", \"titleSlug\": \"check-if-there-is-a-valid-parentheses-string-path\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"27K\", \"totalSubmission\": \"56.7K\", \"totalAcceptedRaw\": 26999, \"totalSubmissionRaw\": 56651, \"acRate\": \"47.7%\"}",
            "hints": [
                "Start DFS from the node (0, 0) and follow the path till you stop.",
                "When you reach a cell and cannot move anymore check that this cell is (m - 1, n - 1) or not."
            ],
            "rephrased": {
                "body": "Given an m x n grid where each cell represents a street. The value in each cell indicates the type of street:\n\n*   1: Connects the left and right cells.\n*   2: Connects the upper and lower cells.\n*   3: Connects the left and lower cells.\n*   4: Connects the right and lower cells.\n*   5: Connects the left and upper cells.\n*   6: Connects the right and upper cells.\n\nYou start at the top-left cell (0, 0). Determine if there is a valid path from (0, 0) to the bottom-right cell (m - 1, n - 1) by following the streets. You cannot change any streets.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 300",
                    "1 <= grid[i][j] <= 6"
                ],
                "testcases": [
                    {
                        "input": "[[2,4,3],[6,5,2]]",
                        "output": "true",
                        "explanation": "A valid path exists from (0, 0) to (m - 1, n - 1) following the street connections."
                    },
                    {
                        "input": "[[1,2,1],[1,2,1]]",
                        "output": "false",
                        "explanation": "No valid path exists. The street at (0, 0) is not connected to any neighboring street."
                    },
                    {
                        "input": "[[1,1,2]]",
                        "output": "false",
                        "explanation": "No valid path exists. The path gets stuck at (0, 1) and cannot reach (0, 2)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "check-if-there-is-a-valid-parentheses-string-path",
                "title": " Check if There Is a Valid Parentheses String Path",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Start DFS from the node (0, 0) and follow the path till you stop.",
            "When you reach a cell and cannot move anymore check that this cell is (m - 1, n - 1) or not."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool hasValidPath(vector<vector<int>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    // G := upscaled grid\n    vector<vector<bool>> g(m * 3, vector<bool>(n * 3));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        switch (grid[i][j]) {\n          case 1:\n            g[i * 3 + 1][j * 3 + 0] = true;\n            g[i * 3 + 1][j * 3 + 1] = true;\n            g[i * 3 + 1][j * 3 + 2] = true;\n            break;\n          case 2:\n            g[i * 3 + 0][j * 3 + 1] = true;\n            g[i * 3 + 1][j * 3 + 1] = true;\n            g[i * 3 + 2][j * 3 + 1] = true;\n            break;\n          case 3:\n            g[i * 3 + 1][j * 3 + 0] = true;\n            g[i * 3 + 1][j * 3 + 1] = true;\n            g[i * 3 + 2][j * 3 + 1] = true;\n            break;\n          case 4:\n            g[i * 3 + 1][j * 3 + 1] = true;\n            g[i * 3 + 1][j * 3 + 2] = true;\n            g[i * 3 + 2][j * 3 + 1] = true;\n            break;\n          case 5:\n            g[i * 3 + 0][j * 3 + 1] = true;\n            g[i * 3 + 1][j * 3 + 0] = true;\n            g[i * 3 + 1][j * 3 + 1] = true;\n            break;\n          case 6:\n            g[i * 3 + 0][j * 3 + 1] = true;\n            g[i * 3 + 1][j * 3 + 1] = true;\n            g[i * 3 + 1][j * 3 + 2] = true;\n            break;\n        }\n\n    return dfs(g, 1, 1);\n  }\n\n private:\n  bool dfs(vector<vector<bool>>& g, int i, int j) {\n    if (i < 0 || i == g.size() || j < 0 || j == g[0].size())\n      return false;\n    if (!g[i][j])  // No path here\n      return false;\n    if (i == g.size() - 2 && j == g[0].size() - 2)\n      return true;\n\n    g[i][j] = false;  // Mark as visited\n    return dfs(g, i + 1, j) || dfs(g, i - 1, j) || dfs(g, i, j + 1) ||\n           dfs(g, i, j - 1);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean hasValidPath(int[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    // G := upscaled grid\n    boolean[][] g = new boolean[m * 3][n * 3];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        switch (grid[i][j]) {\n          case 1:\n            g[i * 3 + 1][j * 3 + 0] = true;\n            g[i * 3 + 1][j * 3 + 1] = true;\n            g[i * 3 + 1][j * 3 + 2] = true;\n            break;\n          case 2:\n            g[i * 3 + 0][j * 3 + 1] = true;\n            g[i * 3 + 1][j * 3 + 1] = true;\n            g[i * 3 + 2][j * 3 + 1] = true;\n            break;\n          case 3:\n            g[i * 3 + 1][j * 3 + 0] = true;\n            g[i * 3 + 1][j * 3 + 1] = true;\n            g[i * 3 + 2][j * 3 + 1] = true;\n            break;\n          case 4:\n            g[i * 3 + 1][j * 3 + 1] = true;\n            g[i * 3 + 1][j * 3 + 2] = true;\n            g[i * 3 + 2][j * 3 + 1] = true;\n            break;\n          case 5:\n            g[i * 3 + 0][j * 3 + 1] = true;\n            g[i * 3 + 1][j * 3 + 0] = true;\n            g[i * 3 + 1][j * 3 + 1] = true;\n            break;\n          case 6:\n            g[i * 3 + 0][j * 3 + 1] = true;\n            g[i * 3 + 1][j * 3 + 1] = true;\n            g[i * 3 + 1][j * 3 + 2] = true;\n            break;\n        }\n\n    return dfs(g, 1, 1);\n  }\n\n  private boolean dfs(boolean[][] g, int i, int j) {\n    if (i < 0 || i == g.length || j < 0 || j == g[0].length)\n      return false;\n    if (!g[i][j]) // No path here\n      return false;\n    if (i == g.length - 2 && j == g[0].length - 2)\n      return true;\n\n    g[i][j] = false; // Mark as visited\n    return dfs(g, i + 1, j) || dfs(g, i - 1, j) || dfs(g, i, j + 1) || dfs(g, i, j - 1);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}