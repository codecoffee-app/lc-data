{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2018",
            "title": "Check if Word Can Be Placed In Crossword",
            "titleSlug": "check-if-word-can-be-placed-in-crossword",
            "content": "<p>You are given an <code>m x n</code> matrix <code>board</code>, representing the<strong> current </strong>state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), <code>&#39; &#39;</code> to represent any <strong>empty </strong>cells, and <code>&#39;#&#39;</code> to represent any <strong>blocked</strong> cells.</p>\n\n<p>A word can be placed<strong> horizontally</strong> (left to right <strong>or</strong> right to left) or <strong>vertically</strong> (top to bottom <strong>or</strong> bottom to top) in the board if:</p>\n\n<ul>\n\t<li>It does not occupy a cell containing the character <code>&#39;#&#39;</code>.</li>\n\t<li>The cell each letter is placed in must either be <code>&#39; &#39;</code> (empty) or <strong>match</strong> the letter already on the <code>board</code>.</li>\n\t<li>There must not be any empty cells <code>&#39; &#39;</code> or other lowercase letters <strong>directly left or right</strong><strong> </strong>of the word if the word was placed <strong>horizontally</strong>.</li>\n\t<li>There must not be any empty cells <code>&#39; &#39;</code> or other lowercase letters <strong>directly above or below</strong> the word if the word was placed <strong>vertically</strong>.</li>\n</ul>\n\n<p>Given a string <code>word</code>, return <code>true</code><em> if </em><code>word</code><em> can be placed in </em><code>board</code><em>, or </em><code>false</code><em> <strong>otherwise</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/04/crossword-ex1-1.png\" style=\"width: 478px; height: 180px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;#&quot;, &quot; &quot;, &quot;#&quot;], [&quot; &quot;, &quot; &quot;, &quot;#&quot;], [&quot;#&quot;, &quot;c&quot;, &quot; &quot;]], word = &quot;abc&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The word &quot;abc&quot; can be placed as shown above (top to bottom).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/04/crossword-ex2-1.png\" style=\"width: 180px; height: 180px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot; &quot;, &quot;#&quot;, &quot;a&quot;], [&quot; &quot;, &quot;#&quot;, &quot;c&quot;], [&quot; &quot;, &quot;#&quot;, &quot;a&quot;]], word = &quot;ac&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to place the word because there will always be a space/letter above or below it.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/04/crossword-ex3-1.png\" style=\"width: 478px; height: 180px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;#&quot;, &quot; &quot;, &quot;#&quot;], [&quot; &quot;, &quot; &quot;, &quot;#&quot;], [&quot;#&quot;, &quot; &quot;, &quot;c&quot;]], word = &quot;ca&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The word &quot;ca&quot; can be placed as shown above (right to left). \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>board[i][j]</code> will be <code>&#39; &#39;</code>, <code>&#39;#&#39;</code>, or a lowercase English letter.</li>\n\t<li><code>1 &lt;= word.length &lt;= max(m, n)</code></li>\n\t<li><code>word</code> will contain only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 273,
            "dislikes": 287,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.8K\", \"totalSubmission\": \"38.3K\", \"totalAcceptedRaw\": 18832, \"totalSubmissionRaw\": 38279, \"acRate\": \"49.2%\"}",
            "hints": [
                "Check all possible placements for the word.",
                "There is a limited number of places where a word can start."
            ],
            "rephrased": {
                "body": "Given an `m x n` matrix `board` representing a crossword puzzle's current state, determine if a given string `word` can be placed within the board. The board contains lowercase English letters, empty cells represented by `' '`, and blocked cells represented by `'#'`. A word can be placed horizontally or vertically if it satisfies the following conditions:\n\n1.  It does not occupy a cell containing the character `'#'`.\n2.  The cell each letter is placed in must either be `' '` (empty) or match the letter already on the `board`.\n3.  If placed horizontally, there must be no empty cells or lowercase letters directly to the left or right of the word.\n4.  If placed vertically, there must be no empty cells or lowercase letters directly above or below the word.\n\nReturn `true` if `word` can be placed in `board`, `false` otherwise.",
                "constraints": [
                    "m == board.length",
                    "n == board[i].length",
                    "1 <= m * n <= 2 * 10^5",
                    "board[i][j] will be ' ', '#', or a lowercase English letter.",
                    "1 <= word.length <= max(m, n)",
                    "word will contain only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \"c\", \" \"]], word = \"abc\"",
                        "output": "true",
                        "explanation": "The word \"abc\" can be placed vertically from top to bottom in the board."
                    },
                    {
                        "input": "board = [[\" \", \"#\", \"a\"], [\" \", \"#\", \"c\"], [\" \", \"#\", \"a\"]], word = \"ac\"",
                        "output": "false",
                        "explanation": "It is impossible to place the word because there will always be a space or letter above or below it."
                    },
                    {
                        "input": "board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \" \", \"c\"]], word = \"ca\"",
                        "output": "true",
                        "explanation": "The word \"ca\" can be placed horizontally from right to left in the board."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Check all possible placements for the word.",
            "There is a limited number of places where a word can start."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool placeWordInCrossword(vector<vector<char>>& board, string word) {\n    for (const vector<vector<char>>& state : {board, getRotated(board)})\n      for (const vector<char>& chars : state)\n        for (const string& token : getTokens(join(chars)))\n          for (const string& letters :\n               {word, string(word.rbegin(), word.rend())})\n            if (letters.length() == token.length())\n              if (canFit(letters, token))\n                return true;\n    return false;\n  }\n\n private:\n  vector<vector<char>> getRotated(const vector<vector<char>>& board) {\n    const int m = board.size();\n    const int n = board[0].size();\n    vector<vector<char>> rotated(n, vector<char>(m));\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        rotated[j][i] = board[i][j];\n    return rotated;\n  }\n\n  vector<string> getTokens(const string& row) {\n    vector<string> tokens;\n    int start = 0;\n    int end;\n    string token;\n    do {\n      end = row.find('#', start);\n      token = row.substr(start, end - start);\n      if (!token.empty())\n        tokens.push_back(token);\n      start = end + 1;\n    } while (end != string::npos);\n    return tokens;\n  }\n\n  string join(const vector<char>& chars) {\n    string joined;\n    for (const char c : chars)\n      joined += c;\n    return joined;\n  }\n\n  bool canFit(const string& letters, const string& token) {\n    for (int i = 0; i < letters.length(); ++i)\n      if (token[i] != ' ' && token[i] != letters[i])\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean placeWordInCrossword(char[][] board, String word) {\n    for (char[][] state : new char[][][] {board, getRotated(board)})\n      for (char[] chars : state)\n        for (final String token : String.valueOf(chars).split(\"#\"))\n          for (final String letters :\n               new String[] {word, new StringBuilder(word).reverse().toString()})\n            if (letters.length() == token.length())\n              if (canFit(letters, token))\n                return true;\n    return false;\n  }\n\n  private char[][] getRotated(char[][] board) {\n    final int m = board.length;\n    final int n = board[0].length;\n    char[][] rotated = new char[n][m];\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        rotated[j][i] = board[i][j];\n    return rotated;\n  }\n\n  private boolean canFit(final String letters, final String token) {\n    for (int i = 0; i < letters.length(); ++i)\n      if (token.charAt(i) != ' ' && token.charAt(i) != letters.charAt(i))\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def placeWordInCrossword(self, board: List[List[str]], word: str) -> bool:\n    for x in board, zip(*board):\n      for row in x:\n        for token in ''.join(row).split('#'):\n          for letters in word, word[::-1]:\n            if len(token) == len(letters):\n              if all(c in (' ', letter) for c, letter in zip(token, letters)):\n                return True\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}