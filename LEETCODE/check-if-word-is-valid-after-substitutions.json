{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1003",
            "title": "Check If Word Is Valid After Substitutions",
            "titleSlug": "check-if-word-is-valid-after-substitutions",
            "content": "<p>Given a string <code>s</code>, determine if it is <strong>valid</strong>.</p>\n\n<p>A string <code>s</code> is <strong>valid</strong> if, starting with an empty string <code>t = &quot;&quot;</code>, you can <strong>transform </strong><code>t</code><strong> into </strong><code>s</code> after performing the following operation <strong>any number of times</strong>:</p>\n\n<ul>\n\t<li>Insert string <code>&quot;abc&quot;</code> into any position in <code>t</code>. More formally, <code>t</code> becomes <code>t<sub>left</sub> + &quot;abc&quot; + t<sub>right</sub></code>, where <code>t == t<sub>left</sub> + t<sub>right</sub></code>. Note that <code>t<sub>left</sub></code> and <code>t<sub>right</sub></code> may be <strong>empty</strong>.</li>\n</ul>\n\n<p>Return <code>true</code> <em>if </em><code>s</code><em> is a <strong>valid</strong> string, otherwise, return</em> <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabcbc&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\n&quot;&quot; -&gt; &quot;<u>abc</u>&quot; -&gt; &quot;a<u>abc</u>bc&quot;\nThus, &quot;aabcbc&quot; is valid.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcababcc&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\n&quot;&quot; -&gt; &quot;<u>abc</u>&quot; -&gt; &quot;abc<u>abc</u>&quot; -&gt; &quot;abcabc<u>abc</u>&quot; -&gt; &quot;abcabcab<u>abc</u>c&quot;\nThus, &quot;abcabcababcc&quot; is valid.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abccba&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to get &quot;abccba&quot; using the operation.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of letters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 942,
            "dislikes": 467,
            "similarQuestions": "[{\"title\": \"Valid Parentheses\", \"titleSlug\": \"valid-parentheses\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"56.9K\", \"totalSubmission\": \"96.4K\", \"totalAcceptedRaw\": 56861, \"totalSubmissionRaw\": 96365, \"acRate\": \"59.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` consisting of only the characters 'a', 'b', and 'c', determine if it's a valid string. A string is considered valid if it can be constructed by repeatedly inserting \"abc\" at any position within an initially empty string. Return `true` if `s` is valid, and `false` otherwise.",
                "constraints": [
                    "1 <= s.length <= 2 * 10^4",
                    "s consists of letters 'a', 'b', and 'c'"
                ],
                "testcases": [
                    {
                        "input": "aabcbc",
                        "output": true,
                        "explanation": "The string can be constructed as follows: \"\" -> \"abc\" -> \"aabcbc\""
                    },
                    {
                        "input": "abcabcababcc",
                        "output": true,
                        "explanation": "The string can be constructed as follows: \"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababc\"c"
                    },
                    {
                        "input": "abccba",
                        "output": false,
                        "explanation": "It is impossible to construct \"abccba\" by inserting \"abc\" into any position."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "valid-parentheses",
                "title": "Valid Parentheses",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isValid(string s) {\n    stack<char> stack;\n\n    for (const char c : s)\n      if (c == 'c') {\n        if (stack.size() < 2)\n          return false;\n        if (stack.top() != 'b')\n          return false;\n        stack.pop();\n        if (stack.top() != 'a')\n          return false;\n        stack.pop();\n      } else {\n        stack.push(c);\n      }\n\n    return stack.empty();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isValid(String s) {\n    Deque<Character> stack = new ArrayDeque<>();\n\n    for (final char c : s.toCharArray())\n      if (c == 'c') {\n        if (stack.size() < 2)\n          return false;\n        if (stack.peek() != 'b')\n          return false;\n        stack.pop();\n        if (stack.peek() != 'a')\n          return false;\n        stack.pop();\n      } else {\n        stack.push(c);\n      }\n\n    return stack.isEmpty();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isValid(self, s: str) -> bool:\n    stack = []\n\n    for c in s:\n      if c == 'c':\n        if len(stack) < 2 or stack[-2] != 'a' or stack[-1] != 'b':\n          return False\n        stack.pop()\n        stack.pop()\n      else:\n        stack.append(c)\n\n    return not stack\n",
                "lang_text": "py"
            }
        }
    }
}