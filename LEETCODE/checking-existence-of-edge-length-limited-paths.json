{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1697",
            "title": "Checking Existence of Edge Length Limited Paths",
            "titleSlug": "checking-existence-of-edge-length-limited-paths",
            "content": "<p>An undirected graph of <code>n</code> nodes is defined by <code>edgeList</code>, where <code>edgeList[i] = [u<sub>i</sub>, v<sub>i</sub>, dis<sub>i</sub>]</code> denotes an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> with distance <code>dis<sub>i</sub></code>. Note that there may be <strong>multiple</strong> edges between two nodes.</p>\n\n<p>Given an array <code>queries</code>, where <code>queries[j] = [p<sub>j</sub>, q<sub>j</sub>, limit<sub>j</sub>]</code>, your task is to determine for each <code>queries[j]</code> whether there is a path between <code>p<sub>j</sub></code> and <code>q<sub>j</sub></code><sub> </sub>such that each edge on the path has a distance <strong>strictly less than</strong> <code>limit<sub>j</sub></code> .</p>\n\n<p>Return <em>a <strong>boolean array</strong> </em><code>answer</code><em>, where </em><code>answer.length == queries.length</code> <em>and the </em><code>j<sup>th</sup></code> <em>value of </em><code>answer</code> <em>is </em><code>true</code><em> if there is a path for </em><code>queries[j]</code><em> is </em><code>true</code><em>, and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/08/h.png\" style=\"width: 267px; height: 262px;\" />\n<pre>\n<strong>Input:</strong> n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]\n<strong>Output:</strong> [false,true]\n<strong>Explanation:</strong> The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\nFor the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\nFor the second query, there is a path (0 -&gt; 1 -&gt; 2) of two edges with distances less than 5, thus we return true for this query.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/08/q.png\" style=\"width: 390px; height: 358px;\" />\n<pre>\n<strong>Input:</strong> n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]\n<strong>Output:</strong> [true,false]\n<strong>Explanation:</strong> The above figure shows the given graph.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= edgeList.length, queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edgeList[i].length == 3</code></li>\n\t<li><code>queries[j].length == 3</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub>, p<sub>j</sub>, q<sub>j</sub> &lt;= n - 1</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li><code>p<sub>j</sub> != q<sub>j</sub></code></li>\n\t<li><code>1 &lt;= dis<sub>i</sub>, limit<sub>j</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li>There may be <strong>multiple</strong> edges between two nodes.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1901,
            "dislikes": 45,
            "similarQuestions": "[{\"title\": \"Checking Existence of Edge Length Limited Paths II\", \"titleSlug\": \"checking-existence-of-edge-length-limited-paths-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Good Paths\", \"titleSlug\": \"number-of-good-paths\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Score of a Path Between Two Cities\", \"titleSlug\": \"minimum-score-of-a-path-between-two-cities\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"48.7K\", \"totalSubmission\": \"78K\", \"totalAcceptedRaw\": 48744, \"totalSubmissionRaw\": 78036, \"acRate\": \"62.5%\"}",
            "hints": [
                "All the queries are given in advance. Is there a way you can reorder the queries to avoid repeated computations?"
            ],
            "rephrased": {
                "body": "Given an undirected graph of `n` nodes represented by `edgeList`, where `edgeList[i] = [u_i, v_i, dis_i]` denotes an edge between nodes `u_i` and `v_i` with distance `dis_i`. There may be multiple edges between two nodes.\n\nYou are also given an array `queries`, where `queries[j] = [p_j, q_j, limit_j]`. For each query, determine if there exists a path between nodes `p_j` and `q_j` such that every edge on the path has a distance strictly less than `limit_j`.\n\nReturn a boolean array `answer`, where `answer.length == queries.length` and `answer[j]` is `true` if a suitable path exists for `queries[j]`, and `false` otherwise.",
                "constraints": [
                    "2 <= n <= 10^5",
                    "1 <= edgeList.length, queries.length <= 10^5",
                    "edgeList[i].length == 3",
                    "queries[j].length == 3",
                    "0 <= u_i, v_i, p_j, q_j <= n - 1",
                    "u_i != v_i",
                    "p_j != q_j",
                    "1 <= dis_i, limit_j <= 10^9",
                    "There may be multiple edges between two nodes."
                ],
                "testcases": [
                    {
                        "input": "n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]",
                        "output": "[false,true]",
                        "explanation": "For the first query (0, 1, 2), there is no path between nodes 0 and 1 where all edge distances are strictly less than 2. For the second query (0, 2, 5), there is a path (0 -> 1 -> 2) with edge distances less than 5."
                    },
                    {
                        "input": "n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]",
                        "output": "[true,false]",
                        "explanation": "For the first query (0, 4, 14), there exists path 0->1->2->3->4 with each edge having a distance strictly less than 14. For the second query (1, 4, 13), there is no path from node 1 to node 4 where all edges have distance less than 13."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "checking-existence-of-edge-length-limited-paths-ii",
                "title": "Checking Existence of Edge Length Limited Paths II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-good-paths",
                "title": "Number of Good Paths",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-score-of-a-path-between-two-cities",
                "title": "Minimum Score of a Path Between Two Cities",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "All the queries are given in advance. Is there a way you can reorder the queries to avoid repeated computations?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ]
    }
}