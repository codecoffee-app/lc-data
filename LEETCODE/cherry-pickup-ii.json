{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1463",
            "title": "Cherry Pickup II",
            "titleSlug": "cherry-pickup-ii",
            "content": "<p>You are given a <code>rows x cols</code> matrix <code>grid</code> representing a field of cherries where <code>grid[i][j]</code> represents the number of cherries that you can collect from the <code>(i, j)</code> cell.</p>\n\n<p>You have two robots that can collect cherries for you:</p>\n\n<ul>\n\t<li><strong>Robot #1</strong> is located at the <strong>top-left corner</strong> <code>(0, 0)</code>, and</li>\n\t<li><strong>Robot #2</strong> is located at the <strong>top-right corner</strong> <code>(0, cols - 1)</code>.</li>\n</ul>\n\n<p>Return <em>the maximum number of cherries collection using both robots by following the rules below</em>:</p>\n\n<ul>\n\t<li>From a cell <code>(i, j)</code>, robots can move to cell <code>(i + 1, j - 1)</code>, <code>(i + 1, j)</code>, or <code>(i + 1, j + 1)</code>.</li>\n\t<li>When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.</li>\n\t<li>When both robots stay in the same cell, only one takes the cherries.</li>\n\t<li>Both robots cannot move outside of the grid at any moment.</li>\n\t<li>Both robots should reach the bottom row in <code>grid</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/04/29/sample_1_1802.png\" style=\"width: 374px; height: 501px;\" />\n<pre>\n<strong>Input:</strong> grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.\nCherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.\nTotal of cherries: 12 + 12 = 24.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/04/23/sample_2_1802.png\" style=\"width: 500px; height: 452px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]\n<strong>Output:</strong> 28\n<strong>Explanation:</strong> Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.\nCherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.\nTotal of cherries: 17 + 11 = 28.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>rows == grid.length</code></li>\n\t<li><code>cols == grid[i].length</code></li>\n\t<li><code>2 &lt;= rows, cols &lt;= 70</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3356,
            "dislikes": 34,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"93.8K\", \"totalSubmission\": \"135K\", \"totalAcceptedRaw\": 93782, \"totalSubmissionRaw\": 135004, \"acRate\": \"69.5%\"}",
            "hints": [
                "Use dynammic programming, define DP[i][j][k]: The maximum cherries that both robots can take  starting on the ith row, and column j and k of Robot 1 and 2 respectively."
            ],
            "rephrased": {
                "body": "You are given a `rows x cols` matrix `grid` representing a field of cherries where `grid[i][j]` represents the number of cherries that you can collect from the `(i, j)` cell.\n\nYou have two robots that can collect cherries for you:\n\n*   **Robot #1** is located at the **top-left corner** `(0, 0)`, and\n*   **Robot #2** is located at the **top-right corner** `(0, cols - 1)`.\n\nReturn the maximum number of cherries collection using both robots by following the rules below:\n\n*   From a cell `(i, j)`, robots can move to cell `(i + 1, j - 1)`, `(i + 1, j)`, or `(i + 1, j + 1)`. \n*   When any robot passes through a cell, it picks up all cherries, and the cell becomes an empty cell.\n*   When both robots stay in the same cell, only one takes the cherries.\n*   Both robots cannot move outside of the grid at any moment.\n*   Both robots should reach the bottom row in `grid`.",
                "constraints": [
                    "rows == grid.length",
                    "cols == grid[i].length",
                    "2 <= rows, cols <= 70",
                    "0 <= grid[i][j] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[[3,1,1],[2,5,1],[1,5,5],[2,1,1]]",
                        "output": "24",
                        "explanation": "Robot 1 collects cherries along the path (0,0) -> (1,0) -> (2,1) -> (3,0) for a total of 3 + 2 + 5 + 2 = 12 cherries. Robot 2 collects cherries along the path (0,2) -> (1,2) -> (2,2) -> (3,2) for a total of 1 + 1 + 5 + 5 + 1 = 12 cherries. The total cherries collected is 12 + 12 = 24."
                    },
                    {
                        "input": "[[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]",
                        "output": "28",
                        "explanation": "Robot 1 path contributes (1 + 2 + 9 + 5 + 2) = 19 cherries. Robot 2 contributes (1 + 3 + 0 + 4 + 1) = 9 cherries. In row 3 robot 1 visits [2,0,9,0,0,0,0] , it pick 9 cherries. In row 4 robot 2 visits [0,3,0,5,4,0,0] , it pick 4 cherries. Total cherry picked are 19+9=28"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use dynammic programming, define DP[i][j][k]: The maximum cherries that both robots can take  starting on the ith row, and column j and k of Robot 1 and 2 respectively."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int cherryPickup(vector<vector<int>>& grid) {\n    this->m = grid.size();\n    this->n = grid[0].size();\n    // dp[x][y1][y2] := max cherries we can collect w/\n    // Robot #1 on (x, y1) and Robot #2 on (x, y2) first\n    dp.resize(m, vector<vector<int>>(n, vector<int>(n, -1)));\n    return cherryPick(grid, 0, 0, n - 1);\n  }\n\n private:\n  int m;\n  int n;\n  vector<vector<vector<int>>> dp;\n\n  int cherryPick(const vector<vector<int>>& grid, int x, int y1, int y2) {\n    if (x == m)\n      return 0;\n    if (y1 < 0 || y1 == n || y2 < 0 || y2 == n)\n      return 0;\n    if (dp[x][y1][y2] != -1)\n      return dp[x][y1][y2];\n\n    const int currRow = grid[x][y1] + (y1 != y2) * grid[x][y2];\n\n    for (int d1 = -1; d1 <= 1; ++d1)\n      for (int d2 = -1; d2 <= 1; ++d2)\n        dp[x][y1][y2] = max(\n            dp[x][y1][y2], currRow + cherryPick(grid, x + 1, y1 + d1, y2 + d2));\n\n    return dp[x][y1][y2];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int cherryPickup(int[][] grid) {\n    this.m = grid.length;\n    this.n = grid[0].length;\n    // dp[x][y1][y2] := max cherries we can collect w/\n    // Robot #1 on (x, y1) and Robot #2 on (x, y2) first\n    dp = new int[m][n][n];\n    for (int[][] A : dp)\n      Arrays.stream(A).forEach(a -> Arrays.fill(a, -1));\n    return cherryPick(grid, 0, 0, n - 1);\n  }\n\n  private int m;\n  private int n;\n  private int[][][] dp;\n\n  private int cherryPick(int[][] grid, int x, int y1, int y2) {\n    if (x == m)\n      return 0;\n    if (y1 < 0 || y1 == n || y2 < 0 || y2 == n)\n      return 0;\n    if (dp[x][y1][y2] != -1)\n      return dp[x][y1][y2];\n\n    final int currRow = grid[x][y1] + (y1 == y2 ? 0 : 1) * grid[x][y2];\n\n    for (int d1 = -1; d1 <= 1; ++d1)\n      for (int d2 = -1; d2 <= 1; ++d2)\n        dp[x][y1][y2] =\n            Math.max(dp[x][y1][y2], currRow + cherryPick(grid, x + 1, y1 + d1, y2 + d2));\n\n    return dp[x][y1][y2];\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}