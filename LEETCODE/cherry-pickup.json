{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "741",
            "title": "Cherry Pickup",
            "titleSlug": "cherry-pickup",
            "content": "<p>You are given an <code>n x n</code> <code>grid</code> representing a field of cherries, each cell is one of three possible integers.</p>\n\n<ul>\n\t<li><code>0</code> means the cell is empty, so you can pass through,</li>\n\t<li><code>1</code> means the cell contains a cherry that you can pick up and pass through, or</li>\n\t<li><code>-1</code> means the cell contains a thorn that blocks your way.</li>\n</ul>\n\n<p>Return <em>the maximum number of cherries you can collect by following the rules below</em>:</p>\n\n<ul>\n\t<li>Starting at the position <code>(0, 0)</code> and reaching <code>(n - 1, n - 1)</code> by moving right or down through valid path cells (cells with value <code>0</code> or <code>1</code>).</li>\n\t<li>After reaching <code>(n - 1, n - 1)</code>, returning to <code>(0, 0)</code> by moving left or up through valid path cells.</li>\n\t<li>When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell <code>0</code>.</li>\n\t<li>If there is no valid path between <code>(0, 0)</code> and <code>(n - 1, n - 1)</code>, then no cherries can be collected.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/14/grid.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,-1],[1,0,-1],[1,1,1]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The player started at (0, 0) and went down, down, right right to reach (2, 2).\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\nThen, the player went left, up, up, left to return home, picking up one more cherry.\nThe total number of cherries picked up is 5, and this is the maximum possible.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,-1],[1,-1,1],[-1,1,1]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>grid[i][j]</code> is <code>-1</code>, <code>0</code>, or <code>1</code>.</li>\n\t<li><code>grid[0][0] != -1</code></li>\n\t<li><code>grid[n - 1][n - 1] != -1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4087,
            "dislikes": 148,
            "similarQuestions": "[{\"title\": \"Minimum Path Sum\", \"titleSlug\": \"minimum-path-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Dungeon Game\", \"titleSlug\": \"dungeon-game\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Path Quality of a Graph\", \"titleSlug\": \"maximum-path-quality-of-a-graph\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Paths in Matrix Whose Sum Is Divisible by K\", \"titleSlug\": \"paths-in-matrix-whose-sum-is-divisible-by-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"74K\", \"totalSubmission\": \"202.1K\", \"totalAcceptedRaw\": 74039, \"totalSubmissionRaw\": 202082, \"acRate\": \"36.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given an `n x n` `grid` representing a field of cherries. Each cell contains one of three possible integers:\n\n*   `0`: The cell is empty and traversable.\n*   `1`: The cell contains a cherry that can be picked up, and the cell becomes empty after picking.\n*   `-1`: The cell contains a thorn and blocks the path.\n\nDetermine the maximum number of cherries you can collect by following these rules:\n\n1.  Start at `(0, 0)` and reach `(n - 1, n - 1)` by moving only right or down through valid cells (0 or 1).\n2.  Return from `(n - 1, n - 1)` back to `(0, 0)` by moving only left or up through valid cells.\n3.  When passing through a cell containing a cherry, pick it up, changing the cell value to `0`.\n4.  If no valid path exists between `(0, 0)` and `(n - 1, n - 1)`, no cherries can be collected, so return 0.",
                "constraints": [
                    "`n == grid.length`",
                    "`n == grid[i].length`",
                    "`1 <= n <= 50`",
                    "`grid[i][j]` is `-1`, `0`, or `1`.",
                    "`grid[0][0] != -1`",
                    "`grid[n - 1][n - 1] != -1`"
                ],
                "testcases": [
                    {
                        "input": "[[0,1,-1],[1,0,-1],[1,1,1]]",
                        "output": "5",
                        "explanation": "The player travels from (0, 0) to (2, 2) picking up cherries and changing the grid. Then the player returns to (0,0) picking up the maximum possible cherries."
                    },
                    {
                        "input": "[[1,1,-1],[1,-1,1],[-1,1,1]]",
                        "output": "0",
                        "explanation": "There's no possible path to reach (2,2) and return to (0,0), so no cherries can be collected."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-path-sum",
                "title": "Minimum Path Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "dungeon-game",
                "title": "Dungeon Game",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-path-quality-of-a-graph",
                "title": "Maximum Path Quality of a Graph",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "paths-in-matrix-whose-sum-is-divisible-by-k",
                "title": "Paths in Matrix Whose Sum Is Divisible by K",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int cherryPickup(vector<vector<int>>& grid) {\n    // The problem is identical as two people start picking cherries\n    // From grid[0][0] simultaneously\n    n = grid.size();\n    // dp[x1][y1][x2] := max cherries we could pick from\n    // g[0][0] -> g[x1 - 1][y1 - 1] + g[0][0] -> g[x2 - 1][y2 - 1],\n    // Where y2 = x1 + y1 - x2 (reduce states from 4 to 3)\n    dp.resize(n + 1, vector<vector<int>>(n + 1, vector<int>(n + 1, INT_MIN)));\n    return max(0, cherryPickup(grid, 0, 0, 0));\n  }\n\n private:\n  int n;\n  vector<vector<vector<int>>> dp;\n\n  int cherryPickup(const vector<vector<int>>& grid, int x1, int y1, int x2) {\n    const int y2 = x1 + y1 - x2;\n    if (x1 == n || y1 == n || x2 == n || y2 == n)\n      return -1;\n    if (x1 == n - 1 && y1 == n - 1)\n      return grid[x1][y1];\n    if (grid[x1][y1] == -1 || grid[x2][y2] == -1)\n      return -1;\n    int& ans = dp[x1][y1][x2];\n    if (ans > INT_MIN)\n      return ans;\n\n    ans = max({cherryPickup(grid, x1 + 1, y1, x2),\n               cherryPickup(grid, x1 + 1, y1, x2 + 1),\n               cherryPickup(grid, x1, y1 + 1, x2),\n               cherryPickup(grid, x1, y1 + 1, x2 + 1)});\n    if (ans == -1)\n      return ans;\n\n    ans += grid[x1][y1];  // Do pick some cherries\n    if (x1 != x2)         // Two people are on different grids\n      ans += grid[x2][y2];\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int cherryPickup(int[][] grid) {\n    // The problem is identical as two people start picking cherries\n    // From grid[0][0] simultaneously\n    n = grid.length;\n    dp = new Integer[n][n][n];\n    return Math.max(0, cherryPickup(grid, 0, 0, 0));\n  }\n\n  private int n;\n\n  // dp[x1][y1][x2] := max cherries we could pick from\n  // g[0][0] -> g[x1 - 1][y1 - 1] + g[0][0] -> g[x2 - 1][y2 - 1],\n  // Where y2 = x1 + y1 - x2 (reduce states from 4 to 3)\n  private Integer[][][] dp;\n\n  private int cherryPickup(int[][] grid, int x1, int y1, int x2) {\n    final int y2 = x1 + y1 - x2;\n    if (x1 == n || y1 == n || x2 == n || y2 == n)\n      return -1;\n    if (x1 == n - 1 && y1 == n - 1)\n      return grid[x1][y1];\n    if (grid[x1][y1] == -1 || grid[x2][y2] == -1)\n      return -1;\n    if (dp[x1][y1][x2] != null)\n      return dp[x1][y1][x2];\n\n    dp[x1][y1][x2] = Math.max(\n        Math.max(cherryPickup(grid, x1 + 1, y1, x2), cherryPickup(grid, x1 + 1, y1, x2 + 1)),\n        Math.max(cherryPickup(grid, x1, y1 + 1, x2), cherryPickup(grid, x1, y1 + 1, x2 + 1)));\n    if (dp[x1][y1][x2] == -1)\n      return dp[x1][y1][x2];\n\n    dp[x1][y1][x2] += grid[x1][y1]; // Do pick some cherries\n    if (x1 != x2)                   // Two people are on different grids\n      dp[x1][y1][x2] += grid[x2][y2];\n\n    return dp[x1][y1][x2];\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}