{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1386",
            "title": "Cinema Seat Allocation",
            "titleSlug": "cinema-seat-allocation",
            "content": "<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/14/cinema_seats_1.png\" style=\"width: 400px; height: 149px;\" /></p>\n\n<p>A cinema&nbsp;has <code>n</code>&nbsp;rows of seats, numbered from 1 to <code>n</code>&nbsp;and there are ten&nbsp;seats in each row, labelled from 1&nbsp;to 10&nbsp;as shown in the figure above.</p>\n\n<p>Given the array <code>reservedSeats</code> containing the numbers of seats already reserved, for example, <code>reservedSeats[i] = [3,8]</code>&nbsp;means the seat located in row <strong>3</strong> and labelled with <b>8</b>&nbsp;is already reserved.</p>\n\n<p><em>Return the maximum number of four-person groups&nbsp;you can assign on the cinema&nbsp;seats.</em> A four-person group&nbsp;occupies four&nbsp;adjacent seats <strong>in one single row</strong>. Seats across an aisle (such as [3,3]&nbsp;and [3,4]) are not considered to be adjacent, but there is an exceptional case&nbsp;on which an aisle split&nbsp;a four-person group, in that case, the aisle split&nbsp;a four-person group in the middle,&nbsp;which means to have two people on each side.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/14/cinema_seats_3.png\" style=\"width: 400px; height: 96px;\" /></p>\n\n<pre>\n<strong>Input:</strong> n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10^9</code></li>\n\t<li><code>1 &lt;=&nbsp;reservedSeats.length &lt;= min(10*n, 10^4)</code></li>\n\t<li><code>reservedSeats[i].length == 2</code></li>\n\t<li><code>1&nbsp;&lt;=&nbsp;reservedSeats[i][0] &lt;= n</code></li>\n\t<li><code>1 &lt;=&nbsp;reservedSeats[i][1] &lt;= 10</code></li>\n\t<li>All <code>reservedSeats[i]</code> are distinct.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 835,
            "dislikes": 384,
            "similarQuestions": "[{\"title\": \"Booking Concert Tickets in Groups\", \"titleSlug\": \"booking-concert-tickets-in-groups\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"43.7K\", \"totalSubmission\": \"105.2K\", \"totalAcceptedRaw\": 43682, \"totalSubmissionRaw\": 105243, \"acRate\": \"41.5%\"}",
            "hints": [
                "Note you can allocate at most two families in one row.",
                "Greedily check if you can allocate seats for two families, one family or none.",
                "Process only rows that appear in the input, for other rows you can always allocate seats for two families."
            ],
            "rephrased": {
                "body": "A cinema has `n` rows of seats, numbered from 1 to `n`. Each row has ten seats, labeled from 1 to 10.  Given an array `reservedSeats` where `reservedSeats[i] = [row, seat]` indicates that the seat in the specified row and seat number is reserved, determine the maximum number of four-person groups you can assign to the cinema seats.\n\nA four-person group occupies four adjacent seats in a single row. Seats across an aisle (e.g., seats 3 and 4) are not considered adjacent, except when the aisle splits a group in the middle (two people on each side of the aisle).",
                "constraints": [
                    "1 <= n <= 10^9",
                    "1 <= reservedSeats.length <= min(10*n, 10^4)",
                    "reservedSeats[i].length == 2",
                    "1 <= reservedSeats[i][0] <= n",
                    "1 <= reservedSeats[i][1] <= 10",
                    "All reservedSeats[i] are distinct."
                ],
                "testcases": [
                    {
                        "input": "n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]",
                        "output": "4",
                        "explanation": "The optimal allocation allows for four groups. Reserved seats are marked as unavailable, and contiguous groups of four are formed in each row, where possible."
                    },
                    {
                        "input": "n = 2, reservedSeats = [[2,1],[1,8],[2,6]]",
                        "output": "2",
                        "explanation": null
                    },
                    {
                        "input": "n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "booking-concert-tickets-in-groups",
                "title": "Booking Concert Tickets in Groups",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Note you can allocate at most two families in one row.",
            "Greedily check if you can allocate seats for two families, one family or none.",
            "Process only rows that appear in the input, for other rows you can always allocate seats for two families."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxNumberOfFamilies(int n, vector<vector<int>>& reservedSeats) {\n    int ans = 0;\n    unordered_map<int, int> rowToSeats;\n\n    for (const vector<int>& reservedSeat : reservedSeats) {\n      const int row = reservedSeat[0];\n      const int seat = reservedSeat[1];\n      rowToSeats[row] |= 1 << (seat - 1);\n    }\n\n    for (const auto& [_, seats] : rowToSeats)\n      if ((seats & 0b0111111110) == 0)\n        // Can fit 2 four-person groups.\n        ans += 2;\n      else if ((seats & 0b0111100000) == 0 ||  // Left not occupied.\n               (seats & 0b0001111000) == 0 ||  // Mid not occupied.\n               (seats & 0b0000011110) == 0)    // Right not occupied.\n        // Can fit 1 four-person group.\n        ans += 1;\n\n    // Any empty rows can fit 2 four-person groups.\n    return ans + (n - rowToSeats.size()) * 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxNumberOfFamilies(int n, int[][] reservedSeats) {\n    int ans = 0;\n    Map<Integer, Integer> rowToSeats = new HashMap<>();\n\n    for (int[] reservedSeat : reservedSeats) {\n      final int row = reservedSeat[0];\n      final int seat = reservedSeat[1];\n      rowToSeats.put(row, rowToSeats.getOrDefault(row, 0) | 1 << (seat - 1));\n    }\n\n    for (final int seats : rowToSeats.values())\n      if ((seats & 0b0111111110) == 0)\n        // Can fit 2 four-person groups.\n        ans += 2;\n      else if ((seats & 0b0111100000) == 0 || // Left not occupied.\n               (seats & 0b0001111000) == 0 || // Mid not occupied.\n               (seats & 0b0000011110) == 0)   // Right not occupied.\n        // Can fit 1 four-person group.\n        ans += 1;\n\n    // Any empty rows can fit 2 four-person groups.\n    return ans + (n - rowToSeats.size()) * 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:\n    ans = 0\n    rowToSeats = collections.Counter()\n\n    for row, seat in reservedSeats:\n      rowToSeats[row] |= 1 << (seat - 1)\n\n    for seats in rowToSeats.values():\n      if (seats & 0b0111111110) == 0:\n        # Can fit 2 four-person groups.\n        ans += 2\n      elif (seats & 0b0111100000) == 0 \\\n              or (seats & 0b0001111000) == 0 \\\n              or (seats & 0b0000011110) == 0:\n        # Can fit 1 four-person group.\n        ans += 1\n\n    # Any empty rows can fit 2 four-person groups.\n    return ans + (n - len(rowToSeats)) * 2\n",
                "lang_text": "py"
            }
        }
    }
}