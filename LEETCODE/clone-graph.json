{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "133",
            "title": "Clone Graph",
            "titleSlug": "clone-graph",
            "content": "<p>Given a reference of a node in a <strong><a href=\"https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph\" target=\"_blank\">connected</a></strong> undirected graph.</p>\n\n<p>Return a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> (clone) of the graph.</p>\n\n<p>Each node in the graph contains a value (<code>int</code>) and a list (<code>List[Node]</code>) of its neighbors.</p>\n\n<pre>\nclass Node {\n    public int val;\n    public List&lt;Node&gt; neighbors;\n}\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Test case format:</strong></p>\n\n<p>For simplicity, each node&#39;s value is the same as the node&#39;s index (1-indexed). For example, the first node with <code>val == 1</code>, the second node with <code>val == 2</code>, and so on. The graph is represented in the test case using an adjacency list.</p>\n\n<p><b>An adjacency list</b> is a collection of unordered <b>lists</b> used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</p>\n\n<p>The given node will always be the first node with <code>val = 1</code>. You must return the <strong>copy of the given node</strong> as a reference to the cloned graph.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png\" style=\"width: 454px; height: 500px;\" />\n<pre>\n<strong>Input:</strong> adjList = [[2,4],[1,3],[2,4],[1,3]]\n<strong>Output:</strong> [[2,4],[1,3],[2,4],[1,3]]\n<strong>Explanation:</strong> There are 4 nodes in the graph.\n1st node (val = 1)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/07/graph.png\" style=\"width: 163px; height: 148px;\" />\n<pre>\n<strong>Input:</strong> adjList = [[]]\n<strong>Output:</strong> [[]]\n<strong>Explanation:</strong> Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> adjList = []\n<strong>Output:</strong> []\n<strong>Explanation:</strong> This an empty graph, it does not have any nodes.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the graph is in the range <code>[0, 100]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>Node.val</code> is unique for each node.</li>\n\t<li>There are no repeated edges and no self-loops in the graph.</li>\n\t<li>The Graph is connected and all nodes can be visited starting from the given node.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9065,
            "dislikes": 3620,
            "similarQuestions": "[{\"title\": \"Copy List with Random Pointer\", \"titleSlug\": \"copy-list-with-random-pointer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Clone Binary Tree With Random Pointer\", \"titleSlug\": \"clone-binary-tree-with-random-pointer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Clone N-ary Tree\", \"titleSlug\": \"clone-n-ary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 1128160, \"totalSubmissionRaw\": 2021685, \"acRate\": \"55.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a node in a connected, undirected graph, create and return a deep copy (clone) of the entire graph. Each node in the graph has a unique integer value (1-indexed) and a list of its neighbor nodes.\n\nThe graph is represented using an adjacency list where the index + 1 corresponds to the node's value.  The starting node for cloning will always be the node with value 1. Your task is to return the cloned graph, starting from the cloned node corresponding to the original node with value 1.",
                "constraints": [
                    "The number of nodes in the graph is in the range [0, 100].",
                    "1 <= Node.val <= 100",
                    "Node.val is unique for each node.",
                    "There are no repeated edges and no self-loops in the graph.",
                    "The Graph is connected and all nodes can be visited starting from the given node."
                ],
                "testcases": [
                    {
                        "input": "[[2,4],[1,3],[2,4],[1,3]]",
                        "output": "[[2,4],[1,3],[2,4],[1,3]]",
                        "explanation": "There are 4 nodes in the graph. Node 1's neighbors are nodes 2 and 4. Node 2's neighbors are nodes 1 and 3. Node 3's neighbors are nodes 2 and 4. Node 4's neighbors are nodes 1 and 3."
                    },
                    {
                        "input": "[[]]",
                        "output": "[[]]",
                        "explanation": "The graph consists of only one node with val = 1 and it does not have any neighbors."
                    },
                    {
                        "input": "[]",
                        "output": "[]",
                        "explanation": "This is an empty graph; it does not have any nodes."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "copy-list-with-random-pointer",
                "title": "Copy List with Random Pointer",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "clone-binary-tree-with-random-pointer",
                "title": "Clone Binary Tree With Random Pointer",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "clone-n-ary-tree",
                "title": "Clone N-ary Tree",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  Node* cloneGraph(Node* node) {\n    if (node == nullptr)\n      return nullptr;\n\n    queue<Node*> q{{node}};\n    unordered_map<Node*, Node*> map{{node, new Node(node->val)}};\n\n    while (!q.empty()) {\n      Node* u = q.front();\n      q.pop();\n      for (Node* v : u->neighbors) {\n        if (!map.count(v)) {\n          map[v] = new Node(v->val);\n          q.push(v);\n        }\n        map[u]->neighbors.push_back(map[v]);\n      }\n    }\n\n    return map[node];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public Node cloneGraph(Node node) {\n    if (node == null)\n      return null;\n\n    Queue<Node> q = new ArrayDeque<>(Arrays.asList(node));\n    Map<Node, Node> map = new HashMap<>();\n    map.put(node, new Node(node.val));\n\n    while (!q.isEmpty()) {\n      Node u = q.poll();\n      for (Node v : u.neighbors) {\n        if (!map.containsKey(v)) {\n          map.put(v, new Node(v.val));\n          q.offer(v);\n        }\n        map.get(u).neighbors.add(map.get(v));\n      }\n    }\n\n    return map.get(node);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def cloneGraph(self, node: 'Node') -> 'Node':\n    if not node:\n      return None\n\n    q = collections.deque([node])\n    map = {node: Node(node.val)}\n\n    while q:\n      u = q.popleft()\n      for v in u.neighbors:\n        if v not in map:\n          map[v] = Node(v.val)\n          q.append(v)\n        map[u].neighbors.append(map[v])\n\n    return map[node]\n",
                "lang_text": "py"
            }
        }
    }
}