{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1774",
            "title": "Closest Dessert Cost",
            "titleSlug": "closest-dessert-cost",
            "content": "<p>You would like to make dessert and are preparing to buy the ingredients. You have <code>n</code> ice cream base flavors and <code>m</code> types of toppings to choose from. You must follow these rules when making your dessert:</p>\n\n<ul>\n\t<li>There must be <strong>exactly one</strong> ice cream base.</li>\n\t<li>You can add <strong>one or more</strong> types of topping or have no toppings at all.</li>\n\t<li>There are <strong>at most two</strong> of <strong>each type</strong> of topping.</li>\n</ul>\n\n<p>You are given three inputs:</p>\n\n<ul>\n\t<li><code>baseCosts</code>, an integer array of length <code>n</code>, where each <code>baseCosts[i]</code> represents the price of the <code>i<sup>th</sup></code> ice cream base flavor.</li>\n\t<li><code>toppingCosts</code>, an integer array of length <code>m</code>, where each <code>toppingCosts[i]</code> is the price of <strong>one</strong> of the <code>i<sup>th</sup></code> topping.</li>\n\t<li><code>target</code>, an integer representing your target price for dessert.</li>\n</ul>\n\n<p>You want to make a dessert with a total cost as close to <code>target</code> as possible.</p>\n\n<p>Return <em>the closest possible cost of the dessert to </em><code>target</code>. If there are multiple, return <em>the <strong>lower</strong> one.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> baseCosts = [1,7], toppingCosts = [3,4], target = 10\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Consider the following combination (all 0-indexed):\n- Choose base 1: cost 7\n- Take 1 of topping 0: cost 1 x 3 = 3\n- Take 0 of topping 1: cost 0 x 4 = 0\nTotal: 7 + 3 + 0 = 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> baseCosts = [2,3], toppingCosts = [4,5,100], target = 18\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> Consider the following combination (all 0-indexed):\n- Choose base 1: cost 3\n- Take 1 of topping 0: cost 1 x 4 = 4\n- Take 2 of topping 1: cost 2 x 5 = 10\n- Take 0 of topping 2: cost 0 x 100 = 0\nTotal: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> baseCosts = [3,10], toppingCosts = [2,5], target = 9\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == baseCosts.length</code></li>\n\t<li><code>m == toppingCosts.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 10</code></li>\n\t<li><code>1 &lt;= baseCosts[i], toppingCosts[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 681,
            "dislikes": 82,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"28.4K\", \"totalSubmission\": \"59.8K\", \"totalAcceptedRaw\": 28406, \"totalSubmissionRaw\": 59805, \"acRate\": \"47.5%\"}",
            "hints": [
                "As the constraints are not large, you can brute force and enumerate all the possibilities."
            ],
            "rephrased": {
                "body": "You're tasked with creating a dessert as close as possible to a target price. You have 'n' ice cream base flavors and 'm' topping types. You must select exactly one base flavor and can add any number of toppings (including none), with a maximum of two of each topping type. The goal is to find the dessert cost that's closest to the target. If multiple costs are equally close, return the lower cost.",
                "constraints": [
                    "n == baseCosts.length",
                    "m == toppingCosts.length",
                    "1 <= n, m <= 10",
                    "1 <= baseCosts[i], toppingCosts[i] <= 10^4",
                    "1 <= target <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "baseCosts = [1,7], toppingCosts = [3,4], target = 10",
                        "output": "10",
                        "explanation": "Choosing base 1 (cost 7) and one of topping 0 (cost 3) results in a total cost of 10, which is the target."
                    },
                    {
                        "input": "baseCosts = [2,3], toppingCosts = [4,5,100], target = 18",
                        "output": "17",
                        "explanation": "Choosing base 1 (cost 3), one of topping 0 (cost 4), and two of topping 1 (cost 10) gives a total of 17, the closest possible cost without exceeding the target significantly."
                    },
                    {
                        "input": "baseCosts = [3,10], toppingCosts = [2,5], target = 9",
                        "output": "8",
                        "explanation": "It is possible to make desserts with cost 8 and 10. 8 is returned as it is the lower cost. This could be achieved by picking a base with cost 3, and two of topping with cost 2 i.e. 3+ 2*2 = 7, however a better solution is to choose no toppings, pick base with cost 3 and one topping with cost 5 i.e. 3 + 5 = 8.  There is no combination that gives the target, and 8 and 10 are the same distance from the target.  The lower value is selected."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "As the constraints are not large, you can brute force and enumerate all the possibilities."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int closestCost(vector<int>& baseCosts, vector<int>& toppingCosts,\n                  int target) {\n    int ans = INT_MAX;\n\n    for (const int baseCost : baseCosts)\n      dfs(toppingCosts, 0, target, baseCost, ans);\n\n    return ans;\n  }\n\n private:\n  void dfs(const vector<int>& toppingCosts, int i, int target, int currCost,\n           int& ans) {\n    if (abs(currCost - target) < abs(ans - target))\n      ans = currCost;\n    if (i == toppingCosts.size() || currCost >= target)\n      return;\n\n    for (int k = 0; k < 3; ++k)\n      dfs(toppingCosts, i + 1, target, currCost + k * toppingCosts[i], ans);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int closestCost(int[] baseCosts, int[] toppingCosts, int target) {\n    for (final int baseCost : baseCosts)\n      dfs(toppingCosts, 0, target, baseCost);\n    return ans;\n  }\n\n  private int ans = Integer.MAX_VALUE;\n\n  private void dfs(int[] toppingCosts, int i, int target, int currCost) {\n    if (Math.abs(currCost - target) < Math.abs(ans - target))\n      ans = currCost;\n    if (i == toppingCosts.length || currCost >= target)\n      return;\n\n    for (int k = 0; k < 3; ++k)\n      dfs(toppingCosts, i + 1, target, currCost + k * toppingCosts[i]);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}