{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2476",
            "title": "Closest Nodes Queries in a Binary Search Tree",
            "titleSlug": "closest-nodes-queries-in-a-binary-search-tree",
            "content": "<p>You are given the <code>root</code> of a <strong>binary search tree </strong>and an array <code>queries</code> of size <code>n</code> consisting of positive integers.</p>\n\n<p>Find a <strong>2D</strong> array <code>answer</code> of size <code>n</code> where <code>answer[i] = [min<sub>i</sub>, max<sub>i</sub>]</code>:</p>\n\n<ul>\n\t<li><code>min<sub>i</sub></code> is the <strong>largest</strong> value in the tree that is smaller than or equal to <code>queries[i]</code>. If a such value does not exist, add <code>-1</code> instead.</li>\n\t<li><code>max<sub>i</sub></code> is the <strong>smallest</strong> value in the tree that is greater than or equal to <code>queries[i]</code>. If a such value does not exist, add <code>-1</code> instead.</li>\n</ul>\n\n<p>Return <em>the array</em> <code>answer</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/28/bstreeedrawioo.png\" style=\"width: 261px; height: 281px;\" />\n<pre>\n<strong>Input:</strong> root = [6,2,13,1,4,9,15,null,null,null,null,null,null,14], queries = [2,5,16]\n<strong>Output:</strong> [[2,2],[4,6],[15,-1]]\n<strong>Explanation:</strong> We answer the queries in the following way:\n- The largest number that is smaller or equal than 2 in the tree is 2, and the smallest number that is greater or equal than 2 is still 2. So the answer for the first query is [2,2].\n- The largest number that is smaller or equal than 5 in the tree is 4, and the smallest number that is greater or equal than 5 is 6. So the answer for the second query is [4,6].\n- The largest number that is smaller or equal than 16 in the tree is 15, and the smallest number that is greater or equal than 16 does not exist. So the answer for the third query is [15,-1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/28/bstttreee.png\" style=\"width: 101px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> root = [4,null,9], queries = [3]\n<strong>Output:</strong> [[-1,4]]\n<strong>Explanation:</strong> The largest number that is smaller or equal to 3 in the tree does not exist, and the smallest number that is greater or equal to 3 is 4. So the answer for the query is [-1,4].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>6</sup></code></li>\n\t<li><code>n == queries.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 396,
            "dislikes": 106,
            "similarQuestions": "[{\"title\": \"Closest Binary Search Tree Value\", \"titleSlug\": \"closest-binary-search-tree-value\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Closest Binary Search Tree Value II\", \"titleSlug\": \"closest-binary-search-tree-value-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Search in a Binary Search Tree\", \"titleSlug\": \"search-in-a-binary-search-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.9K\", \"totalSubmission\": \"45.9K\", \"totalAcceptedRaw\": 18939, \"totalSubmissionRaw\": 45938, \"acRate\": \"41.2%\"}",
            "hints": [
                "Try to first convert the tree into a sorted array.",
                "How do you solve each query in O(log(n)) time using the array of the tree?"
            ],
            "rephrased": {
                "body": "Given the root of a binary search tree and an array of integer queries, find, for each query, the largest value in the tree that is less than or equal to the query and the smallest value in the tree that is greater than or equal to the query. Return a 2D array where each element contains the [min, max] pair for each query.",
                "constraints": [
                    "The number of nodes in the tree is in the range [2, 10<sup>5</sup>].",
                    "1 <= Node.val <= 10<sup>6</sup>",
                    "n == queries.length",
                    "1 <= n <= 10<sup>5</sup>",
                    "1 <= queries[i] <= 10<sup>6</sup>"
                ],
                "testcases": [
                    {
                        "input": {
                            "root": "[6,2,13,1,4,9,15,null,null,null,null,null,null,14]",
                            "queries": "[2,5,16]"
                        },
                        "output": "[[2,2],[4,6],[15,-1]]",
                        "explanation": "For the query 2, the largest value less than or equal to 2 is 2, and the smallest value greater than or equal to 2 is 2. For the query 5, the largest value less than or equal to 5 is 4, and the smallest value greater than or equal to 5 is 6. For the query 16, the largest value less than or equal to 16 is 15, and there is no value greater than or equal to 16, so -1."
                    },
                    {
                        "input": {
                            "root": "[4,null,9]",
                            "queries": "[3]"
                        },
                        "output": "[[-1,4]]",
                        "explanation": "For the query 3, there is no value less than or equal to 3, so -1, and the smallest value greater than or equal to 3 is 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "closest-binary-search-tree-value",
                "title": "Closest Binary Search Tree Value",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "closest-binary-search-tree-value-ii",
                "title": "Closest Binary Search Tree Value II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "search-in-a-binary-search-tree",
                "title": "Search in a Binary Search Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try to first convert the tree into a sorted array.",
            "How do you solve each query in O(log(n)) time using the array of the tree?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {\n    vector<vector<int>> ans;\n    vector<int> sortedVals;\n\n    inorder(root, sortedVals);\n\n    for (const int query : queries) {\n      const auto it = lower_bound(sortedVals.begin(), sortedVals.end(), query);\n      // query is presented in the tree, so just use {query, query}.\n      if (it != sortedVals.cend() && *it == query)\n        ans.push_back({query, query});\n      // query isn't presented in the tree, so find the cloest one is possible.\n      else\n        ans.push_back({it == sortedVals.cbegin() ? -1 : *prev(it),\n                       it == sortedVals.cend() ? -1 : *it});\n    }\n\n    return ans;\n  }\n\n private:\n  // Inorder walk the BST to collect sorted numbers.\n  void inorder(TreeNode* root, vector<int>& sortedVals) {\n    if (root == nullptr)\n      return;\n    inorder(root->left, sortedVals);\n    sortedVals.push_back(root->val);\n    inorder(root->right, sortedVals);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {\n    List<List<Integer>> ans = new ArrayList<>();\n    List<Integer> sortedVals = new ArrayList<>();\n\n    inorder(root, sortedVals);\n\n    for (final int query : queries) {\n      final int i = firstGreaterEqual(sortedVals, query);\n      // query is presented in the tree, so just use {query, query}.\n      if (i != sortedVals.size() && sortedVals.get(i) == query)\n        ans.add(Arrays.asList(query, query));\n      // query isn't presented in the tree, so find the cloest one is possible.\n      else\n        ans.add(Arrays.asList(i == 0 ? -1 : sortedVals.get(i - 1),\n                              i == sortedVals.size() ? -1 : sortedVals.get(i)));\n    }\n\n    return ans;\n  }\n\n  // Inorder walk the BST to collect sorted numbers.\n  private void inorder(TreeNode root, List<Integer> sortedVals) {\n    if (root == null)\n      return;\n    inorder(root.left, sortedVals);\n    sortedVals.add(root.val);\n    inorder(root.right, sortedVals);\n  }\n\n  private int firstGreaterEqual(List<Integer> A, int target) {\n    int l = 0;\n    int r = A.size();\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) >= target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def closestNodes(self, root: Optional[TreeNode], queries: List[int]) -> List[List[int]]:\n    sortedVals = []\n    self._inorder(root, sortedVals)\n\n    def getClosestPair(query: int) -> List[int]:\n      i = bisect_left(sortedVals, query)\n      # query is presented in the tree, so just use [query, query].\n      if i != len(sortedVals) and sortedVals[i] == query:\n        return [query, query]\n      # query isn't presented in the tree, so find the cloest one is possible.\n      return [-1 if i == 0 else sortedVals[i - 1],\n              -1 if i == len(sortedVals) else sortedVals[i]]\n\n    return [getClosestPair(query) for query in queries]\n\n  # Inorder walk the BST to collect sorted numbers.\n  def _inorder(self, root: Optional[TreeNode], sortedVals: List[int]) -> None:\n    if root == None:\n      return\n    self._inorder(root.left, sortedVals)\n    sortedVals.append(root.val)\n    self._inorder(root.right, sortedVals)\n",
                "lang_text": "py"
            }
        }
    }
}