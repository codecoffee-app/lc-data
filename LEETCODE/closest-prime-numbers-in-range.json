{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2523",
            "title": "Closest Prime Numbers in Range",
            "titleSlug": "closest-prime-numbers-in-range",
            "content": "<p>Given two positive integers <code>left</code> and <code>right</code>, find the two integers <code>num1</code> and <code>num2</code> such that:</p>\n\n<ul>\n\t<li><code>left &lt;= num1 &lt; num2 &lt;= right </code>.</li>\n\t<li><code>num1</code> and <code>num2</code> are both <strong>prime</strong> numbers.</li>\n\t<li><code>num2 - num1</code> is the <strong>minimum</strong> amongst all other pairs satisfying the above conditions.</li>\n</ul>\n\n<p>Return <em>the positive integer array</em> <code>ans = [num1, num2]</code>. <em>If there are multiple pairs satisfying these conditions, return the one with the minimum</em> <code>num1</code> <em>value or</em> <code>[-1, -1]</code> <em>if such numbers do not exist.</em></p>\n\n<p>A number greater than <code>1</code> is called <b>prime</b> if it is only divisible by <code>1</code> and itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 10, right = 19\n<strong>Output:</strong> [11,13]\n<strong>Explanation:</strong> The prime numbers between 10 and 19 are 11, 13, 17, and 19.\nThe closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].\nSince 11 is smaller than 17, we return the first pair.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 4, right = 6\n<strong>Output:</strong> [-1,-1]\n<strong>Explanation:</strong> There exists only one prime number in the given range, so the conditions cannot be satisfied.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= left &lt;= right &lt;= 10<sup>6</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<style type=\"text/css\">.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0;\u00a0\n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n</style>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 346,
            "dislikes": 28,
            "similarQuestions": "[{\"title\": \"Count Ways to Make Array With Product\", \"titleSlug\": \"count-ways-to-make-array-with-product\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.2K\", \"totalSubmission\": \"54.8K\", \"totalAcceptedRaw\": 20210, \"totalSubmissionRaw\": 54809, \"acRate\": \"36.9%\"}",
            "hints": [
                "Use Sieve of Eratosthenes to mark numbers that are primes.",
                "Iterate from right to left and find pair with the minimum distance between marked numbers."
            ],
            "rephrased": {
                "body": "Given two positive integers `left` and `right`, find the two integers `num1` and `num2` such that:\n\n*   `left <= num1 < num2 <= right`.\n*   `num1` and `num2` are both **prime** numbers.\n*   `num2 - num1` is the **minimum** amongst all other pairs satisfying the above conditions.\n\nReturn *the positive integer array* `ans = [num1, num2]`. *If there are multiple pairs satisfying these conditions, return the one with the minimum* `num1` *value or* `[-1, -1]` *if such numbers do not exist.*\n\nA number greater than `1` is called **prime** if it is only divisible by `1` and itself.\n\n**In simpler terms:**\nFind the two closest prime numbers `num1` and `num2` within the range `[left, right]`. Return them as `[num1, num2]`. If no such pair exists, return `[-1, -1]`.",
                "constraints": [
                    "1 <= left <= right <= 10<sup>6</sup>"
                ],
                "testcases": [
                    {
                        "input": "left = 10, right = 19",
                        "output": "[11,13]",
                        "explanation": "The prime numbers between 10 and 19 are 11, 13, 17, and 19. The closest gap between any pair is 2, which can be achieved by [11,13] or [17,19]. Since 11 is smaller than 17, we return the first pair."
                    },
                    {
                        "input": "left = 4, right = 6",
                        "output": "[-1,-1]",
                        "explanation": "There exists only one prime number in the given range, so the conditions cannot be satisfied."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-ways-to-make-array-with-product",
                "title": "Count Ways to Make Array With Product",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use Sieve of Eratosthenes to mark numbers that are primes.",
            "Iterate from right to left and find pair with the minimum distance between marked numbers."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> closestPrimes(int left, int right) {\n    const vector<bool> isPrime = sieveEratosthenes(right + 1);\n    vector<int> primes;\n\n    for (int i = left; i <= right; ++i)\n      if (isPrime[i])\n        primes.push_back(i);\n\n    if (primes.size() < 2)\n      return {-1, -1};\n\n    int minDiff = INT_MAX;\n    int num1 = -1;\n    int num2 = -1;\n\n    for (int i = 1; i < primes.size(); ++i) {\n      const int diff = primes[i] - primes[i - 1];\n      if (diff < minDiff) {\n        minDiff = diff;\n        num1 = primes[i - 1];\n        num2 = primes[i];\n      }\n    }\n\n    return {num1, num2};\n  }\n\n private:\n  vector<bool> sieveEratosthenes(int n) {\n    vector<bool> isPrime(n, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i)\n      if (isPrime[i])\n        for (int j = i * i; j < n; j += i)\n          isPrime[j] = false;\n    return isPrime;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] closestPrimes(int left, int right) {\n    final boolean[] isPrime = sieveEratosthenes(right + 1);\n    List<Integer> primes = new ArrayList<>();\n\n    for (int i = left; i <= right; ++i)\n      if (isPrime[i])\n        primes.add(i);\n\n    if (primes.size() < 2)\n      return new int[] {-1, -1};\n\n    int minDiff = Integer.MAX_VALUE;\n    int num1 = -1;\n    int num2 = -1;\n\n    for (int i = 1; i < primes.size(); ++i) {\n      final int diff = prime.get(i) - prime.get(i - 1);\n      if (diff < minDiff) {\n        minDiff = diff;\n        num1 = prime.get(i - 1);\n        num2 = prime.get(i);\n      }\n    }\n\n    return new int[] {num1, num2};\n  }\n\n  private boolean[] sieveEratosthenes(int n) {\n    boolean[] isPrime = new boolean[n];\n    Arrays.fill(isPrime, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i)\n      if (isPrime[i])\n        for (int j = i * i; j < n; j += i)\n          isPrime[j] = false;\n    return isPrime;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def closestPrimes(self, left: int, right: int) -> List[int]:\n    isPrime = self._sieveEratosthenes(right + 1)\n    primes = [i for i in range(left, right + 1) if isPrime[i]]\n\n    if len(primes) < 2:\n      return [-1, -1]\n\n    minDiff = math.inf\n    num1 = -1\n    num2 = -1\n\n    for a, b in zip(primes, primes[1:]):\n      diff = b - a\n      if diff < minDiff:\n        minDiff = diff\n        num1 = a\n        num2 = b\n\n    return [num1, num2]\n\n  def _sieveEratosthenes(self, n: int) -> List[bool]:\n    isPrime = [True] * n\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n      if isPrime[i]:\n        for j in range(i * i, n, i):\n          isPrime[j] = False\n    return isPrime\n",
                "lang_text": "py"
            }
        }
    }
}