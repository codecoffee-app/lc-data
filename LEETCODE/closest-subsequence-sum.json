{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1755",
            "title": "Closest Subsequence Sum",
            "titleSlug": "closest-subsequence-sum",
            "content": "<p>You are given an integer array <code>nums</code> and an integer <code>goal</code>.</p>\n\n<p>You want to choose a subsequence of <code>nums</code> such that the sum of its elements is the closest possible to <code>goal</code>. That is, if the sum of the subsequence&#39;s elements is <code>sum</code>, then you want to <strong>minimize the absolute difference</strong> <code>abs(sum - goal)</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible value of</em> <code>abs(sum - goal)</code>.</p>\n\n<p>Note that a subsequence of an array is an array formed by removing some elements <strong>(possibly all or none)</strong> of the original array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,-7,3,5], goal = 6\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Choose the whole array as a subsequence, with a sum of 6.\nThis is equal to the goal, so the absolute difference is 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,-9,15,-2], goal = -5\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Choose the subsequence [7,-9,-2], with a sum of -4.\nThe absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], goal = -7\n<strong>Output:</strong> 7\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 40</code></li>\n\t<li><code>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= goal &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 841,
            "dislikes": 65,
            "similarQuestions": "[{\"title\": \"Minimize the Difference Between Target and Chosen Elements\", \"titleSlug\": \"minimize-the-difference-between-target-and-chosen-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Partition Array Into Two Arrays to Minimize Sum Difference\", \"titleSlug\": \"partition-array-into-two-arrays-to-minimize-sum-difference\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Form Subsequence With Target Sum\", \"titleSlug\": \"minimum-operations-to-form-subsequence-with-target-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.5K\", \"totalSubmission\": \"40.3K\", \"totalAcceptedRaw\": 15491, \"totalSubmissionRaw\": 40342, \"acRate\": \"38.4%\"}",
            "hints": [
                "The naive solution is to check all possible subsequences. This works in O(2^n).",
                "Divide the array into two parts of nearly is equal size.",
                "Consider all subsets of one part and make a list of all possible subset sums and sort this list.",
                "Consider all subsets of the other part, and for each one, let its sum = x, do binary search to get the nearest possible value to goal - x in the first part."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `goal`, find a subsequence of `nums` whose sum is closest to `goal`. Return the minimum absolute difference between the sum of the subsequence and the `goal`. A subsequence is formed by removing some (possibly none or all) elements from the original array.",
                "constraints": [
                    "1 <= nums.length <= 40",
                    "-10<sup>7</sup> <= nums[i] <= 10<sup>7</sup>",
                    "-10<sup>9</sup> <= goal <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums = [5,-7,3,5], goal = 6",
                        "output": "0",
                        "explanation": "Choosing the entire array as a subsequence results in a sum of 6, which exactly matches the goal. Therefore, the absolute difference is 0."
                    },
                    {
                        "input": "nums = [7,-9,15,-2], goal = -5",
                        "output": "1",
                        "explanation": "The subsequence [7, -9, -2] sums to -4. The absolute difference between -4 and -5 is abs(-4 - (-5)) = abs(1) = 1, which is the minimum possible."
                    },
                    {
                        "input": "nums = [1,2,3], goal = -7",
                        "output": "7",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimize-the-difference-between-target-and-chosen-elements",
                "title": "Minimize the Difference Between Target and Chosen Elements",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "partition-array-into-two-arrays-to-minimize-sum-difference",
                "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-operations-to-form-subsequence-with-target-sum",
                "title": "Minimum Operations to Form Subsequence With Target Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The naive solution is to check all possible subsequences. This works in O(2^n).",
            "Divide the array into two parts of nearly is equal size.",
            "Consider all subsets of one part and make a list of all possible subset sums and sort this list.",
            "Consider all subsets of the other part, and for each one, let its sum = x, do binary search to get the nearest possible value to goal - x in the first part."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minAbsDifference(vector<int>& nums, int goal) {\n    const int n = nums.size() / 2;\n    const vector<int> lNums(nums.begin(), nums.begin() + n);\n    const vector<int> rNums(nums.begin() + n, nums.end());\n    int ans = INT_MAX;\n    vector<int> lSums;\n    vector<int> rSums;\n\n    dfs(lNums, 0, 0, lSums);\n    dfs(rNums, 0, 0, rSums);\n    std::ranges::sort(rSums);\n\n    for (const int lSum : lSums) {\n      const int i = firstGreaterEqual(rSums, goal - lSum);\n      if (i < rSums.size())  // 2^n\n        ans = min(ans, abs(goal - lSum - rSums[i]));\n      if (i > 0)\n        ans = min(ans, abs(goal - lSum - rSums[i - 1]));\n    }\n\n    return ans;\n  }\n\n private:\n  void dfs(const vector<int>& A, int i, int path, vector<int>& sums) {\n    if (i == A.size()) {\n      sums.push_back(path);\n      return;\n    }\n    dfs(A, i + 1, path + A[i], sums);\n    dfs(A, i + 1, path, sums);\n  }\n\n  int firstGreaterEqual(const vector<int>& A, int target) {\n    return lower_bound(A.begin(), A.end(), target) - A.begin();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minAbsDifference(int[] nums, int goal) {\n    final int n = nums.length / 2;\n    final int[] lNums = Arrays.copyOfRange(nums, 0, n);\n    final int[] rNums = Arrays.copyOfRange(nums, n, nums.length);\n    int ans = Integer.MAX_VALUE;\n    List<Integer> lSums = new ArrayList<>();\n    List<Integer> rSums = new ArrayList<>();\n\n    dfs(lNums, 0, 0, lSums);\n    dfs(rNums, 0, 0, rSums);\n    Collections.sort(rSums);\n\n    for (final int lSum : lSums) {\n      final int i = firstGreaterEqual(rSums, goal - lSum);\n      if (i < rSums.size()) // 2^n\n        ans = Math.min(ans, Math.abs(goal - lSum - rSums.get(i)));\n      if (i > 0)\n        ans = Math.min(ans, Math.abs(goal - lSum - rSums.get(i - 1)));\n    }\n\n    return ans;\n  }\n\n  private void dfs(int[] A, int i, int path, List<Integer> sums) {\n    if (i == A.length) {\n      sums.add(path);\n      return;\n    }\n    dfs(A, i + 1, path + A[i], sums);\n    dfs(A, i + 1, path, sums);\n  }\n\n  private int firstGreaterEqual(List<Integer> A, int target) {\n    int l = 0;\n    int r = A.size();\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) >= target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minAbsDifference(self, nums: List[int], goal: int) -> int:\n    n = len(nums) // 2\n    ans = math.inf\n    lSums = []\n    rSums = []\n\n    def dfs(A: List[int], i: int, path: int, sums: List[int]) -> None:\n      if i == len(A):\n        sums.append(path)\n        return\n      dfs(A, i + 1, path + A[i], sums)\n      dfs(A, i + 1, path, sums)\n\n    dfs(nums[:n], 0, 0, lSums)\n    dfs(nums[n:], 0, 0, rSums)\n    rSums.sort()\n\n    for lSum in lSums:\n      i = bisect_left(rSums, goal - lSum)\n      if i < len(rSums):  # 2^n\n        ans = min(ans, abs(goal - lSum - rSums[i]))\n      if i > 0:\n        ans = min(ans, abs(goal - lSum - rSums[i - 1]))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}