{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2603",
            "title": "Collect Coins in a Tree",
            "titleSlug": "collect-coins-in-a-tree",
            "content": "<p>There exists an undirected and unrooted tree with <code>n</code> nodes indexed from <code>0</code> to <code>n - 1</code>. You are given an integer <code>n</code> and a 2D integer array edges of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree. You are also given&nbsp;an array <code>coins</code> of size <code>n</code> where <code>coins[i]</code> can be either <code>0</code> or <code>1</code>, where <code>1</code> indicates the presence of a coin in the vertex <code>i</code>.</p>\n\n<p>Initially, you choose to start at any vertex in&nbsp;the tree.&nbsp;Then, you can perform&nbsp;the following operations any number of times:&nbsp;</p>\n\n<ul>\n\t<li>Collect all the coins that are at a distance of at most <code>2</code> from the current vertex, or</li>\n\t<li>Move to any adjacent vertex in the tree.</li>\n</ul>\n\n<p>Find <em>the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex</em>.</p>\n\n<p>Note that if you pass an edge several times, you need to count it into the answer several times.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/03/01/graph-2.png\" style=\"width: 522px; height: 522px;\" />\n<pre>\n<strong>Input:</strong> coins = [1,0,0,0,0,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Start at vertex 2, collect the coin at vertex 0, move to vertex 3, collect the coin at vertex 5 then move back to vertex 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/03/02/graph-4.png\" style=\"width: 522px; height: 522px;\" />\n<pre>\n<strong>Input:</strong> coins = [0,0,0,1,1,0,0,1], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Start at vertex 0, collect the coins at vertices 4 and 3, move to vertex 2,  collect the coin at vertex 7, then move back to vertex 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == coins.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= coins[i] &lt;= 1</code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 378,
            "dislikes": 8,
            "similarQuestions": "[{\"title\": \"Minimum Height Trees\", \"titleSlug\": \"minimum-height-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Distances in Tree\", \"titleSlug\": \"sum-of-distances-in-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Score After Applying Operations on a Tree\", \"titleSlug\": \"maximum-score-after-applying-operations-on-a-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Number of Coins to Place in Tree Nodes\", \"titleSlug\": \"find-number-of-coins-to-place-in-tree-nodes\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.7K\", \"totalSubmission\": \"15.5K\", \"totalAcceptedRaw\": 5664, \"totalSubmissionRaw\": 15465, \"acRate\": \"36.6%\"}",
            "hints": [
                "All leaves that do not have a coin are redundant and can be deleted from the tree.",
                "Remove the leaves that do not have coins on them, so that the resulting tree will have a coin on every leaf.",
                "In the remaining tree, remove each leaf node and its parent from the tree. The remaining nodes in the tree are the ones that must be visited. Hence, the answer is equal to (# remaining nodes -1) * 2"
            ],
            "rephrased": {
                "body": "Given an undirected and unrooted tree with 'n' nodes (indexed 0 to n-1) and edges representing connections between nodes, along with an array 'coins' indicating the presence of a coin at each node, determine the minimum number of edges traversed to collect all coins and return to the starting vertex. You can start at any vertex. Operations include collecting coins within a distance of 2 from the current vertex and moving to adjacent vertices. Each edge traversal counts towards the total.",
                "constraints": [
                    "n == coins.length",
                    "1 <= n <= 3 * 10^4",
                    "0 <= coins[i] <= 1",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "0 <= a_i, b_i < n",
                    "a_i != b_i",
                    "edges represents a valid tree."
                ],
                "testcases": [
                    {
                        "input": "coins = [1,0,0,0,0,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
                        "output": "2",
                        "explanation": "An optimal strategy is to start at vertex 2, collect the coin at vertex 0, move to vertex 3, collect the coin at vertex 5, and then move back to vertex 2.  The path involves traversing two edges."
                    },
                    {
                        "input": "coins = [0,0,0,1,1,0,0,1], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]",
                        "output": "2",
                        "explanation": "An efficient approach involves starting at vertex 0, collecting the coins at vertices 4 and 3 (reachable from 1 which is adjacent to 0), move to vertex 2, collecting the coin at vertex 7 (reachable from 5 which is adjacent to 2), then move back to vertex 0. This route also involves traversing two edges."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-height-trees",
                "title": "Minimum Height Trees",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "sum-of-distances-in-tree",
                "title": "Sum of Distances in Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-score-after-applying-operations-on-a-tree",
                "title": "Maximum Score After Applying Operations on a Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-number-of-coins-to-place-in-tree-nodes",
                "title": "Find Number of Coins to Place in Tree Nodes",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "All leaves that do not have a coin are redundant and can be deleted from the tree.",
            "Remove the leaves that do not have coins on them, so that the resulting tree will have a coin on every leaf.",
            "In the remaining tree, remove each leaf node and its parent from the tree. The remaining nodes in the tree are the ones that must be visited. Hence, the answer is equal to (# remaining nodes -1) * 2"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int collectTheCoins(vector<int>& coins, vector<vector<int>>& edges) {\n    const int n = coins.size();\n    vector<unordered_set<int>> tree(n);\n    queue<int> leavesToBeRemoved;\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      tree[u].insert(v);\n      tree[v].insert(u);\n    }\n\n    for (int i = 0; i < n; ++i) {\n      int u = i;\n      // Remove the leaves that don't have coins.\n      while (tree[u].size() == 1 && coins[u] == 0) {\n        const int v = *tree[u].begin();\n        tree[u].clear();\n        tree[v].erase(u);\n        u = v;  // Walk up to its parent.\n      }\n      // After trimming leaves without coins, leaves with coins may satisfy\n      // `leavesToBeRemoved`.\n      if (tree[u].size() == 1)\n        leavesToBeRemoved.push(u);\n    }\n\n    // Remove each remaining leaf node and its parent. The remaining nodes are\n    // the ones that must be visited.\n    for (int i = 0; i < 2; ++i)\n      for (int sz = leavesToBeRemoved.size(); sz > 0; --sz) {\n        const int u = leavesToBeRemoved.front();\n        leavesToBeRemoved.pop();\n        if (!tree[u].empty()) {\n          const int v = *tree[u].begin();\n          tree[u].clear();\n          tree[v].erase(u);\n          if (tree[v].size() == 1)\n            leavesToBeRemoved.push(v);\n        }\n      }\n\n    return accumulate(tree.begin(), tree.end(), 0,\n                      [](int subtotal, const unordered_set<int>& children) {\n      return subtotal + children.size();\n    });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int collectTheCoins(int[] coins, int[][] edges) {\n    final int n = coins.length;\n    Set<Integer>[] tree = new Set[n];\n    Deque<Integer> leavesToBeRemoved = new ArrayDeque<>();\n\n    for (int i = 0; i < n; ++i)\n      tree[i] = new HashSet<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      tree[u].add(v);\n      tree[v].add(u);\n    }\n\n    for (int i = 0; i < n; ++i) {\n      int u = i;\n      // Remove the leaves that don't have coins.\n      while (tree[u].size() == 1 && coins[u] == 0) {\n        final int v = tree[u].iterator().next();\n        tree[u].clear();\n        tree[v].remove(u);\n        u = v; // Walk up to its parent.\n      }\n      // After trimming leaves without coins, leaves with coins may satisfy\n      // `leavesToBeRemoved`.\n      if (tree[u].size() == 1)\n        leavesToBeRemoved.offer(u);\n    }\n\n    // Remove each remaining leaf node and its parent. The remaining nodes are\n    // the ones that must be visited.\n    for (int i = 0; i < 2; ++i)\n      for (int sz = leavesToBeRemoved.size(); sz > 0; --sz) {\n        final int u = leavesToBeRemoved.poll();\n        if (!tree[u].isEmpty()) {\n          final int v = tree[u].iterator().next();\n          tree[u].clear();\n          tree[v].remove(u);\n          if (tree[v].size() == 1)\n            leavesToBeRemoved.offer(v);\n        }\n      }\n\n    return Arrays.stream(tree).mapToInt(children -> children.size()).sum();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def collectTheCoins(self, coins: List[int], edges: List[List[int]]) -> int:\n    n = len(coins)\n    tree = [set() for _ in range(n)]\n    leavesToBeRemoved = collections.deque()\n\n    for u, v in edges:\n      tree[u].add(v)\n      tree[v].add(u)\n\n    for u in range(n):\n      # Remove the leaves that don't have coins.\n      while len(tree[u]) == 1 and coins[u] == 0:\n        v = tree[u].pop()\n        tree[v].remove(u)\n        u = v  # Walk up to its parent.\n      # After trimming leaves without coins, leaves with coins may satisfy\n      # `leavesToBeRemoved`.\n      if len(tree[u]) == 1:  # coins[u] must be 1.\n        leavesToBeRemoved.append(u)\n\n    # Remove each remaining leaf node and its parent. The remaining nodes are\n    # the ones that must be visited.\n    for _ in range(2):\n      for _ in range(len(leavesToBeRemoved)):\n        u = leavesToBeRemoved.popleft()\n        if tree[u]:\n          v = tree[u].pop()\n          tree[v].remove(u)\n          if len(tree[v]) == 1:  # It's a leaf.\n            leavesToBeRemoved.append(v)\n\n    return sum(len(children) for children in tree)\n",
                "lang_text": "py"
            }
        }
    }
}