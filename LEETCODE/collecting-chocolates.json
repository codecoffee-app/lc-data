{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2735",
            "title": "Collecting Chocolates",
            "titleSlug": "collecting-chocolates",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>n</code> representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index <code>i</code>&nbsp;is <code>nums[i]</code>. Each chocolate is of a different type, and initially, the chocolate at the index&nbsp;<code>i</code>&nbsp;is of <code>i<sup>th</sup></code> type.</p>\n\n<p>In one operation, you can do the following with an incurred <strong>cost</strong> of <code>x</code>:</p>\n\n<ul>\n\t<li>Simultaneously change the chocolate of <code>i<sup>th</sup></code> type to <code>((i + 1) mod n)<sup>th</sup></code> type for all chocolates.</li>\n</ul>\n\n<p>Return <em>the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [20,1,15], x = 5\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> Initially, the chocolate types are [0,1,2]. We will buy the 1<sup>st</sup>&nbsp;type of chocolate at a cost of 1.\nNow, we will perform the operation at a cost of 5, and the types of chocolates will become [1,2,0]. We will buy the 2<sup>nd</sup><sup> </sup>type of chocolate at a cost of 1.\nNow, we will again perform the operation at a cost of 5, and the chocolate types will become [2,0,1]. We will buy the 0<sup>th </sup>type of chocolate at a cost of 1. \nThus, the total cost will become (1 + 5 + 1 + 5 + 1) = 13. We can prove that this is optimal.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], x = 4\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> We will collect all three types of chocolates at their own price without performing any operations. Therefore, the total cost is 1 + 2 + 3 = 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= x &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 273,
            "dislikes": 525,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.7K\", \"totalSubmission\": \"33K\", \"totalAcceptedRaw\": 10668, \"totalSubmissionRaw\": 32969, \"acRate\": \"32.4%\"}",
            "hints": [
                "How many maximum rotations will be needed?",
                "The array will be rotated for a max of N times, so try all possibilities as N = 1000."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed integer array `nums` of size `n`, where `nums[i]` represents the cost of collecting the chocolate of type `i`.  You can perform an operation that simultaneously changes the type of chocolate at index `i` to `((i + 1) mod n)` at a cost of `x`. Determine the minimum cost to collect chocolates of all types, allowing you to perform the operation as many times as needed.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "1 <= nums[i] <= 10^9",
                    "1 <= x <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [20,1,15], x = 5",
                        "output": "13",
                        "explanation": "Initially, the chocolate types are [0,1,2].  The optimal strategy is to buy chocolate type 1 at a cost of 1.  Then, perform the operation (costing 5), changing the types to [1,2,0].  Buy chocolate type 2 at a cost of 1. Perform the operation again (costing 5), changing the types to [2,0,1].  Finally, buy chocolate type 0 at a cost of 1.  The total cost is 1 + 5 + 1 + 5 + 1 = 13."
                    },
                    {
                        "input": "nums = [1,2,3], x = 4",
                        "output": "6",
                        "explanation": "The optimal solution is to collect all chocolates at their initial prices without performing any operations. The total cost is 1 + 2 + 3 = 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "How many maximum rotations will be needed?",
            "The array will be rotated for a max of N times, so try all possibilities as N = 1000."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minCost(vector<int>& nums, long long x) {\n    const int n = nums.size();\n    long long ans = LLONG_MAX;\n    // minCost[i] := min cost to collect i-th type\n    vector<int> minCost(n, INT_MAX);\n\n    for (int rotate = 0; rotate < n; ++rotate) {\n      for (int i = 0; i < n; ++i)\n        minCost[i] = min(minCost[i], nums[(i - rotate + n) % n]);\n      ans = min(ans,\n                accumulate(minCost.begin(), minCost.end(), 0LL) + rotate * x);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public long minCost(int[] nums, long x) {\n    int n = nums.length;\n    long ans = Long.MAX_VALUE;\n    // minCost[i] := min cost to collect i-th type\n    int[] minCost = new int[n];\n    Arrays.fill(minCost, Integer.MAX_VALUE);\n\n    for (int rotate = 0; rotate < n; ++rotate) {\n      for (int i = 0; i < n; ++i)\n        minCost[i] = Math.min(minCost[i], nums[(i - rotate + n) % n]);\n      ans = Math.min(ans, Arrays.stream(minCost).asLongStream().sum() + rotate * x);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minCost(self, nums: List[int], x: int) -> int:\n    n = len(nums)\n    ans = math.inf\n    # minCost[i] := min cost to collect i-th type\n    minCost = [math.inf] * n\n\n    for rotate in range(n):\n      for i in range(n):\n        minCost[i] = min(minCost[i], nums[(i - rotate + n) % n])\n      ans = min(ans, sum(minCost) + rotate * x)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}