{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1034",
            "title": "Coloring A Border",
            "titleSlug": "coloring-a-border",
            "content": "<p>You are given an <code>m x n</code> integer matrix <code>grid</code>, and three integers <code>row</code>, <code>col</code>, and <code>color</code>. Each value in the grid represents the color of the grid square at that location.</p>\n\n<p>Two squares are called <strong>adjacent</strong> if they are next to each other in any of the 4 directions.</p>\n\n<p>Two squares belong to the same <strong>connected component</strong> if they have the same color and they are adjacent.</p>\n\n<p>The <strong>border of a connected component</strong> is all the squares in the connected component that are either adjacent to (at least) a square not in the component, or on the boundary of the grid (the first or last row or column).</p>\n\n<p>You should color the <strong>border</strong> of the <strong>connected component</strong> that contains the square <code>grid[row][col]</code> with <code>color</code>.</p>\n\n<p>Return <em>the final grid</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> grid = [[1,1],[1,2]], row = 0, col = 0, color = 3\n<strong>Output:</strong> [[3,3],[3,2]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3\n<strong>Output:</strong> [[1,3,3],[2,3,3]]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2\n<strong>Output:</strong> [[2,2,2],[2,1,2],[2,2,2]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>1 &lt;= grid[i][j], color &lt;= 1000</code></li>\n\t<li><code>0 &lt;= row &lt; m</code></li>\n\t<li><code>0 &lt;= col &lt; n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 683,
            "dislikes": 856,
            "similarQuestions": "[{\"title\": \"Island Perimeter\", \"titleSlug\": \"island-perimeter\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"32.7K\", \"totalSubmission\": \"66.7K\", \"totalAcceptedRaw\": 32665, \"totalSubmissionRaw\": 66676, \"acRate\": \"49.0%\"}",
            "hints": [
                "Use a DFS to find every square in the component.  Then for each square, color it if it has a neighbor that is outside the grid or a different color."
            ],
            "rephrased": {
                "body": "Given an `m x n` integer matrix `grid` representing a grid of colors, and starting coordinates `row` and `col`, identify the connected component containing `grid[row][col]`.  A connected component consists of squares with the same color that are adjacent (up, down, left, or right). Color the border of this connected component with the given `color`. The border of a connected component consists of squares within the component that are adjacent to squares of a different color or that lie on the boundary of the grid. Return the modified `grid` after coloring the border.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 50",
                    "1 <= grid[i][j], color <= 1000",
                    "0 <= row < m",
                    "0 <= col < n"
                ],
                "testcases": [
                    {
                        "input": "grid = [[1,1],[1,2]], row = 0, col = 0, color = 3",
                        "output": "[[3,3],[3,2]]",
                        "explanation": null
                    },
                    {
                        "input": "grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3",
                        "output": "[[1,3,3],[2,3,3]]",
                        "explanation": null
                    },
                    {
                        "input": "grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2",
                        "output": "[[2,2,2],[2,1,2],[2,2,2]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "island-perimeter",
                "title": "Island Perimeter",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use a DFS to find every square in the component.  Then for each square, color it if it has a neighbor that is outside the grid or a different color."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> colorBorder(vector<vector<int>>& grid, int r0, int c0,\n                                  int color) {\n    dfs(grid, r0, c0, grid[r0][c0]);\n\n    for (int i = 0; i < grid.size(); ++i)\n      for (int j = 0; j < grid[0].size(); ++j)\n        if (grid[i][j] < 0)\n          grid[i][j] = color;\n\n    return grid;\n  }\n\n private:\n  void dfs(vector<vector<int>>& grid, int i, int j, int startColor) {\n    if (i < 0 || i == grid.size() || j < 0 || j == grid[0].size())\n      return;\n    if (grid[i][j] != startColor)\n      return;\n\n    grid[i][j] = -startColor;  // Mark\n    dfs(grid, i + 1, j, startColor);\n    dfs(grid, i - 1, j, startColor);\n    dfs(grid, i, j + 1, startColor);\n    dfs(grid, i, j - 1, startColor);\n\n    // If this cell already on the boarder, it must be painted later\n    if (i == 0 || i == grid.size() - 1 || j == 0 || j == grid[0].size() - 1)\n      return;\n\n    if (abs(grid[i + 1][j]) == startColor &&  //\n        abs(grid[i - 1][j]) == startColor &&  //\n        abs(grid[i][j + 1]) == startColor &&  //\n        abs(grid[i][j - 1]) == startColor)\n      grid[i][j] = startColor;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] colorBorder(int[][] grid, int r0, int c0, int color) {\n    dfs(grid, r0, c0, grid[r0][c0]);\n\n    for (int i = 0; i < grid.length; ++i)\n      for (int j = 0; j < grid[0].length; ++j)\n        if (grid[i][j] < 0)\n          grid[i][j] = color;\n\n    return grid;\n  }\n\n  private void dfs(int[][] grid, int i, int j, int startColor) {\n    if (i < 0 || i == grid.length || j < 0 || j == grid[0].length)\n      return;\n    if (grid[i][j] != startColor)\n      return;\n\n    grid[i][j] = -startColor; // Mark\n    dfs(grid, i + 1, j, startColor);\n    dfs(grid, i - 1, j, startColor);\n    dfs(grid, i, j + 1, startColor);\n    dfs(grid, i, j - 1, startColor);\n\n    // If this cell already on the boarder, it must be painted later\n    if (i == 0 || i == grid.length - 1 || j == 0 || j == grid[0].length - 1)\n      return;\n\n    if (Math.abs(grid[i + 1][j]) == startColor && //\n        Math.abs(grid[i - 1][j]) == startColor && //\n        Math.abs(grid[i][j + 1]) == startColor && //\n        Math.abs(grid[i][j - 1]) == startColor)\n      grid[i][j] = startColor;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def colorBorder(self, grid: List[List[int]], r0: int, c0: int, color: int) -> List[List[int]]:\n    def dfs(i: int, j: int, originalColor: int) -> None:\n      if not 0 <= i < len(grid) or not 0 <= j < len(grid[0]) or grid[i][j] != originalColor:\n        return\n\n      grid[i][j] = -originalColor\n      dfs(i + 1, j, originalColor)\n      dfs(i - 1, j, originalColor)\n      dfs(i, j + 1, originalColor)\n      dfs(i, j - 1, originalColor)\n\n      if 0 < i < len(grid) - 1 and 0 < j < len(grid[0]) - 1 and \\\n              abs(grid[i + 1][j]) == originalColor and \\\n              abs(grid[i - 1][j]) == originalColor and \\\n              abs(grid[i][j + 1]) == originalColor and \\\n              abs(grid[i][j - 1]) == originalColor:\n        grid[i][j] = originalColor\n\n    dfs(r0, c0, grid[r0][c0])\n\n    for i in range(len(grid)):\n      for j in range(len(grid[0])):\n        if grid[i][j] < 0:\n          grid[i][j] = color\n\n    return grid\n",
                "lang_text": "py"
            }
        }
    }
}