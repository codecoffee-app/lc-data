{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "216",
            "title": "Combination Sum III",
            "titleSlug": "combination-sum-iii",
            "content": "<p>Find all valid combinations of <code>k</code> numbers that sum up to <code>n</code> such that the following conditions are true:</p>\n\n<ul>\n\t<li>Only numbers <code>1</code> through <code>9</code> are used.</li>\n\t<li>Each number is used <strong>at most once</strong>.</li>\n</ul>\n\n<p>Return <em>a list of all possible valid combinations</em>. The list must not contain the same combination twice, and the combinations may be returned in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 7\n<strong>Output:</strong> [[1,2,4]]\n<strong>Explanation:</strong>\n1 + 2 + 4 = 7\nThere are no other valid combinations.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 9\n<strong>Output:</strong> [[1,2,6],[1,3,5],[2,3,4]]\n<strong>Explanation:</strong>\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 4, n = 1\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 &gt; 1, there are no valid combination.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= k &lt;= 9</code></li>\n\t<li><code>1 &lt;= n &lt;= 60</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5677,
            "dislikes": 102,
            "similarQuestions": "[{\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"464.5K\", \"totalSubmission\": \"673.5K\", \"totalAcceptedRaw\": 464516, \"totalSubmissionRaw\": 673543, \"acRate\": \"69.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Find all distinct combinations of `k` numbers that sum up to `n`.  The numbers used must be in the range of 1 to 9 (inclusive), and each number can be used at most once.",
                "constraints": [
                    "2 <= k <= 9",
                    "1 <= n <= 60"
                ],
                "testcases": [
                    {
                        "input": "k = 3, n = 7",
                        "output": "[[1,2,4]]",
                        "explanation": "The combination [1, 2, 4] sums to 7. There are no other valid combinations using 3 distinct numbers from 1 to 9."
                    },
                    {
                        "input": "k = 3, n = 9",
                        "output": "[[1,2,6],[1,3,5],[2,3,4]]",
                        "explanation": "The combinations [1, 2, 6], [1, 3, 5], and [2, 3, 4] each sum to 9. There are no other valid combinations using 3 distinct numbers from 1 to 9."
                    },
                    {
                        "input": "k = 4, n = 1",
                        "output": "[]",
                        "explanation": "No valid combinations exist. The smallest possible sum using 4 distinct numbers from 1 to 9 is 1 + 2 + 3 + 4 = 10, which is greater than 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "combination-sum",
                "title": "Combination Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> combinationSum3(int k, int n) {\n    vector<vector<int>> ans;\n    dfs(k, n, 1, {}, ans);\n    return ans;\n  }\n\n private:\n  void dfs(int k, int n, int s, vector<int>&& path, vector<vector<int>>& ans) {\n    if (k == 0 && n == 0) {\n      ans.push_back(path);\n      return;\n    }\n    if (k == 0 || n <= 0)\n      return;\n\n    for (int i = s; i <= 9; ++i) {\n      path.push_back(i);\n      dfs(k - 1, n - i, i + 1, move(path), ans);\n      path.pop_back();\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> combinationSum3(int k, int n) {\n    List<List<Integer>> ans = new ArrayList<>();\n    dfs(k, n, 1, new ArrayList<>(), ans);\n    return ans;\n  }\n\n  private void dfs(int k, int n, int s, List<Integer> path, List<List<Integer>> ans) {\n    if (k == 0 && n == 0) {\n      ans.add(new ArrayList<>(path));\n      return;\n    }\n    if (k == 0 || n < 0)\n      return;\n\n    for (int i = s; i <= 9; ++i) {\n      path.add(i);\n      dfs(k - 1, n - i, i + 1, path, ans);\n      path.remove(path.size() - 1);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n    ans = []\n\n    def dfs(k: int, n: int, s: int, path: List[int]) -> None:\n      if k == 0 and n == 0:\n        ans.append(path)\n        return\n      if k == 0 or n < 0:\n        return\n\n      for i in range(s, 10):\n        dfs(k - 1, n - i, i + 1, path + [i])\n\n    dfs(k, n, 1, [])\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}