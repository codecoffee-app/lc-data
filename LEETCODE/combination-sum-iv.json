{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "377",
            "title": "Combination Sum IV",
            "titleSlug": "combination-sum-iv",
            "content": "<p>Given an array of <strong>distinct</strong> integers <code>nums</code> and a target integer <code>target</code>, return <em>the number of possible combinations that add up to</em>&nbsp;<code>target</code>.</p>\n\n<p>The test cases are generated so that the answer can fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], target = 4\n<strong>Output:</strong> 7\n<strong>Explanation:</strong>\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [9], target = 3\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li>All the elements of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= target &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7218,
            "dislikes": 644,
            "similarQuestions": "[{\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ways to Express an Integer as Sum of Powers\", \"titleSlug\": \"ways-to-express-an-integer-as-sum-of-powers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"460K\", \"totalSubmission\": \"851.6K\", \"totalAcceptedRaw\": 459963, \"totalSubmissionRaw\": 851577, \"acRate\": \"54.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of distinct integers `nums` and a target integer `target`, determine the number of unique combinations of elements from `nums` that sum up to `target`. The order of elements in a combination matters (e.g., (1, 2, 1) is different from (1, 1, 2)).",
                "constraints": [
                    "1 <= nums.length <= 200",
                    "1 <= nums[i] <= 1000",
                    "All the elements of nums are unique.",
                    "1 <= target <= 1000"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3], target = 4",
                        "output": "7",
                        "explanation": "The possible combinations are (1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 3), (2, 1, 1), (2, 2), and (3, 1).  Note that the order matters."
                    },
                    {
                        "input": "nums = [9], target = 3",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "combination-sum",
                "title": "Combination Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "ways-to-express-an-integer-as-sum-of-powers",
                "title": "Ways to Express an Integer as Sum of Powers",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int combinationSum4(vector<int>& nums, int target) {\n    vector<unsigned long long> dp(target + 1);\n    dp[0] = 1;\n\n    for (int i = 1; i <= target; ++i)\n      for (const int num : nums)\n        if (i >= num)\n          dp[i] += dp[i - num];\n\n    return dp[target];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int combinationSum4(int[] nums, int target) {\n    // dp[i] := # of combinations that add up to i\n    int[] dp = new int[target + 1];\n    dp[0] = 1;\n\n    for (int i = 0; i <= target; ++i)\n      for (final int num : nums)\n        if (i >= num)\n          dp[i] += dp[i - num];\n\n    return dp[target];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def combinationSum4(self, nums: List[int], target: int) -> int:\n    dp = [1] + [-1] * target\n\n    def dfs(target: int) -> int:\n      if target < 0:\n        return 0\n      if dp[target] != -1:\n        return dp[target]\n\n      dp[target] = sum(dfs(target - num) for num in nums)\n      return dp[target]\n\n    return dfs(target)\n",
                "lang_text": "py"
            }
        }
    }
}