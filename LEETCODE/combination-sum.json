{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "39",
            "title": "Combination Sum",
            "titleSlug": "combination-sum",
            "content": "<p>Given an array of <strong>distinct</strong> integers <code>candidates</code> and a target integer <code>target</code>, return <em>a list of all <strong>unique combinations</strong> of </em><code>candidates</code><em> where the chosen numbers sum to </em><code>target</code><em>.</em> You may return the combinations in <strong>any order</strong>.</p>\n\n<p>The <strong>same</strong> number may be chosen from <code>candidates</code> an <strong>unlimited number of times</strong>. Two combinations are unique if the <span data-keyword=\"frequency-array\">frequency</span> of at least one of the chosen numbers is different.</p>\n\n<p>The test cases are generated such that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,3,6,7], target = 7\n<strong>Output:</strong> [[2,2,3],[7]]\n<strong>Explanation:</strong>\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,3,5], target = 8\n<strong>Output:</strong> [[2,2,2,2],[2,3,3],[3,5]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2], target = 1\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candidates.length &lt;= 30</code></li>\n\t<li><code>2 &lt;= candidates[i] &lt;= 40</code></li>\n\t<li>All elements of <code>candidates</code> are <strong>distinct</strong>.</li>\n\t<li><code>1 &lt;= target &lt;= 40</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 18063,
            "dislikes": 373,
            "similarQuestions": "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Combination Sum II\", \"titleSlug\": \"combination-sum-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Combinations\", \"titleSlug\": \"combinations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Combination Sum III\", \"titleSlug\": \"combination-sum-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Factor Combinations\", \"titleSlug\": \"factor-combinations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Combination Sum IV\", \"titleSlug\": \"combination-sum-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.7M\", \"totalSubmission\": \"2.5M\", \"totalAcceptedRaw\": 1739766, \"totalSubmissionRaw\": 2466324, \"acRate\": \"70.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of distinct integers `candidates` and a target integer `target`, find all unique combinations of `candidates` where the chosen numbers sum to `target`. The same number may be chosen from `candidates` an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different. Return the combinations in any order.",
                "constraints": [
                    "1 <= candidates.length <= 30",
                    "2 <= candidates[i] <= 40",
                    "All elements of candidates are distinct.",
                    "1 <= target <= 40"
                ],
                "testcases": [
                    {
                        "input": "candidates = [2,3,6,7], target = 7",
                        "output": "[[2,2,3],[7]]",
                        "explanation": "Find combinations of [2,3,6,7] that sum to 7. The combinations [2,2,3] (2 + 2 + 3 = 7) and [7] (7 = 7) are the only unique combinations that satisfy the condition, where 2 can be used multiple times."
                    },
                    {
                        "input": "candidates = [2,3,5], target = 8",
                        "output": "[[2,2,2,2],[2,3,3],[3,5]]",
                        "explanation": "Find combinations of [2,3,5] that sum to 8. The combinations [2,2,2,2], [2,3,3], and [3,5] are the unique combinations that satisfy the condition."
                    },
                    {
                        "input": "candidates = [2], target = 1",
                        "output": "[]",
                        "explanation": "There are no combinations using the candidate [2] that sum to a target of 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "letter-combinations-of-a-phone-number",
                "title": "Letter Combinations of a Phone Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "combination-sum-ii",
                "title": "Combination Sum II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "combinations",
                "title": "Combinations",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "combination-sum-iii",
                "title": "Combination Sum III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "factor-combinations",
                "title": "Factor Combinations",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "combination-sum-iv",
                "title": "Combination Sum IV",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n    vector<vector<int>> ans;\n    std::ranges::sort(candidates);\n    dfs(candidates, 0, target, {}, ans);\n    return ans;\n  }\n\n private:\n  void dfs(const vector<int>& A, int s, int target, vector<int>&& path,\n           vector<vector<int>>& ans) {\n    if (target < 0)\n      return;\n    if (target == 0) {\n      ans.push_back(path);\n      return;\n    }\n\n    for (int i = s; i < A.size(); ++i) {\n      path.push_back(A[i]);\n      dfs(A, i, target - A[i], move(path), ans);\n      path.pop_back();\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> combinationSum(int[] candidates, int target) {\n    List<List<Integer>> ans = new ArrayList<>();\n    Arrays.sort(candidates);\n    dfs(0, candidates, target, new ArrayList<>(), ans);\n    return ans;\n  }\n\n  private void dfs(int s, int[] candidates, int target, List<Integer> path,\n                   List<List<Integer>> ans) {\n    if (target < 0)\n      return;\n    if (target == 0) {\n      ans.add(new ArrayList<>(path));\n      return;\n    }\n\n    for (int i = s; i < candidates.length; ++i) {\n      path.add(candidates[i]);\n      dfs(i, candidates, target - candidates[i], path, ans);\n      path.remove(path.size() - 1);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n    ans = []\n\n    def dfs(s: int, target: int, path: List[int]) -> None:\n      if target < 0:\n        return\n      if target == 0:\n        ans.append(path.clone())\n        return\n\n      for i in range(s, len(candidates)):\n        path.append(candidates[i])\n        dfs(i, target - candidates[i], path)\n        path.pop()\n\n    candidates.sort()\n    dfs(0, target, [])\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}