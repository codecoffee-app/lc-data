{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "77",
            "title": "Combinations",
            "titleSlug": "combinations",
            "content": "<p>Given two integers <code>n</code> and <code>k</code>, return <em>all possible combinations of</em> <code>k</code> <em>numbers chosen from the range</em> <code>[1, n]</code>.</p>\n\n<p>You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, k = 2\n<strong>Output:</strong> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n<strong>Explanation:</strong> There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 1\n<strong>Output:</strong> [[1]]\n<strong>Explanation:</strong> There is 1 choose 1 = 1 total combination.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7939,
            "dislikes": 207,
            "similarQuestions": "[{\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Permutations\", \"titleSlug\": \"permutations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"833.5K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 833490, \"totalSubmissionRaw\": 1195338, \"acRate\": \"69.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two integers `n` and `k`, find all possible combinations of `k` numbers chosen from the range `[1, n]`. The combinations can be returned in any order.",
                "constraints": [
                    "1 <= n <= 20",
                    "1 <= k <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 4, k = 2",
                        "output": "[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]",
                        "explanation": "All possible combinations of 2 numbers from the range [1, 4] are: [1,2], [1,3], [1,4], [2,3], [2,4], and [3,4]."
                    },
                    {
                        "input": "n = 1, k = 1",
                        "output": "[[1]]",
                        "explanation": "The only possible combination of 1 number from the range [1, 1] is [1]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "combination-sum",
                "title": "Combination Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "permutations",
                "title": "Permutations",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> combine(int n, int k) {\n    vector<vector<int>> ans;\n    dfs(n, k, 1, {}, ans);\n    return ans;\n  }\n\n private:\n  void dfs(int n, int k, int s, vector<int>&& path, vector<vector<int>>& ans) {\n    if (path.size() == k) {\n      ans.push_back(path);\n      return;\n    }\n\n    for (int i = s; i <= n; ++i) {\n      path.push_back(i);\n      dfs(n, k, i + 1, move(path), ans);\n      path.pop_back();\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> combine(int n, int k) {\n    List<List<Integer>> ans = new ArrayList<>();\n    dfs(n, k, 1, new ArrayList<>(), ans);\n    return ans;\n  }\n\n  private void dfs(int n, int k, int s, List<Integer> path, List<List<Integer>> ans) {\n    if (path.size() == k) {\n      ans.add(new ArrayList<>(path));\n      return;\n    }\n\n    for (int i = s; i <= n; ++i) {\n      path.add(i);\n      dfs(n, k, i + 1, path, ans);\n      path.remove(path.size() - 1);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def combine(self, n: int, k: int) -> List[List[int]]:\n    ans = []\n\n    def dfs(s: int, path: List[int]) -> None:\n      if len(path) == k:\n        ans.append(path.copy())\n        return\n\n      for i in range(s, n + 1):\n        path.append(i)\n        dfs(i + 1, path)\n        path.pop()\n\n    dfs(1, [])\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}