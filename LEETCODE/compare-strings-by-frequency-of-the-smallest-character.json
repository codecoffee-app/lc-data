{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1170",
            "title": "Compare Strings by Frequency of the Smallest Character",
            "titleSlug": "compare-strings-by-frequency-of-the-smallest-character",
            "content": "<p>Let the function <code>f(s)</code> be the <strong>frequency of the lexicographically smallest character</strong> in a non-empty string <code>s</code>. For example, if <code>s = &quot;dcce&quot;</code> then <code>f(s) = 2</code> because the lexicographically smallest character is <code>&#39;c&#39;</code>, which has a frequency of 2.</p>\n\n<p>You are given an array of strings <code>words</code> and another array of query strings <code>queries</code>. For each query <code>queries[i]</code>, count the <strong>number of words</strong> in <code>words</code> such that <code>f(queries[i])</code> &lt; <code>f(W)</code> for each <code>W</code> in <code>words</code>.</p>\n\n<p>Return <em>an integer array </em><code>answer</code><em>, where each </em><code>answer[i]</code><em> is the answer to the </em><code>i<sup>th</sup></code><em> query</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [&quot;cbd&quot;], words = [&quot;zaaaz&quot;]\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> On the first query we have f(&quot;cbd&quot;) = 1, f(&quot;zaaaz&quot;) = 3 so f(&quot;cbd&quot;) &lt; f(&quot;zaaaz&quot;).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [&quot;bbb&quot;,&quot;cc&quot;], words = [&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> On the first query only f(&quot;bbb&quot;) &lt; f(&quot;aaaa&quot;). On the second query both f(&quot;aaa&quot;) and f(&quot;aaaa&quot;) are both &gt; f(&quot;cc&quot;).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= words.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= queries[i].length, words[i].length &lt;= 10</code></li>\n\t<li><code>queries[i][j]</code>, <code>words[i][j]</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 676,
            "dislikes": 973,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"77K\", \"totalSubmission\": \"124.7K\", \"totalAcceptedRaw\": 77046, \"totalSubmissionRaw\": 124659, \"acRate\": \"61.8%\"}",
            "hints": [
                "For each string from words calculate the leading count and store it in an array, then sort the integer array.",
                "For each string from queries calculate the leading count \"p\" and in base of the sorted array calculated on the step 1 do a binary search to count the number of items greater than \"p\"."
            ],
            "rephrased": {
                "body": "Define a function `f(s)` that returns the frequency of the lexicographically smallest character in a string `s`. Given an array of query strings `queries` and an array of strings `words`, for each query string `queries[i]`, determine the number of words `W` in `words` such that `f(queries[i]) < f(W)`. Return an integer array `answer` where `answer[i]` is the result for the i-th query.",
                "constraints": [
                    "1 <= queries.length <= 2000",
                    "1 <= words.length <= 2000",
                    "1 <= queries[i].length, words[i].length <= 10",
                    "queries[i][j], words[i][j] consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "queries = [\"cbd\"], words = [\"zaaaz\"]",
                        "output": "[1]",
                        "explanation": "f(\"cbd\") = 1, and f(\"zaaaz\") = 3.  Since 1 < 3, there is 1 word in `words` that satisfies the condition."
                    },
                    {
                        "input": "queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]",
                        "output": "[1,2]",
                        "explanation": "For the first query, f(\"bbb\") = 1, and only f(\"aaaa\") = 4 is greater. For the second query, f(\"cc\") = 2, and f(\"aaa\") = 3 and f(\"aaaa\") = 4 are greater."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For each string from words calculate the leading count and store it in an array, then sort the integer array.",
            "For each string from queries calculate the leading count \"p\" and in base of the sorted array calculated on the step 1 do a binary search to count the number of items greater than \"p\"."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> numSmallerByFrequency(vector<string>& queries,\n                                    vector<string>& words) {\n    vector<int> ans;\n    vector<int> wordsFreq;\n\n    for (const string& word : words)\n      wordsFreq.push_back(f(word));\n    std::ranges::sort(wordsFreq);\n\n    for (const string& query : queries) {\n      const int freq = f(query);\n      ans.push_back(wordsFreq.end() -\n                    upper_bound(wordsFreq.begin(), wordsFreq.end(), freq));\n    }\n\n    return ans;\n  }\n\n private:\n  int f(const string& word) {\n    int count = 0;\n    char currentChar = 'z' + 1;\n\n    for (const char c : word)\n      if (c < currentChar) {\n        currentChar = c;\n        count = 1;\n      } else if (c == currentChar) {\n        ++count;\n      }\n\n    return count;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] numSmallerByFrequency(String[] queries, String[] words) {\n    int[] ans = new int[queries.length];\n    int[] wordsFreq = new int[words.length];\n\n    for (int i = 0; i < words.length; ++i)\n      wordsFreq[i] = f(words[i]);\n    Arrays.sort(wordsFreq);\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int freq = f(queries[i]);\n      ans[i] = words.length - firstGreater(wordsFreq, 0, wordsFreq.length, freq);\n    }\n\n    return ans;\n  }\n\n  private int f(final String word) {\n    int count = 0;\n    char currentChar = 'z' + 1;\n\n    for (final char c : word.toCharArray())\n      if (c < currentChar) {\n        currentChar = c;\n        count = 1;\n      } else if (c == currentChar) {\n        ++count;\n      }\n\n    return count;\n  }\n\n  private int firstGreater(int[] nums, int l, int r, int value) {\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (nums[m] > value)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numSmallerByFrequency(self, queries: List[str], words: List[str]) -> List[int]:\n    ans = []\n    wordsFreq = sorted([word.count(min(word)) for word in words])\n\n    for q in queries:\n      count = q.count(min(q))\n      index = bisect.bisect(wordsFreq, count)\n      ans.append(len(words) - index)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}