{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "165",
            "title": "Compare Version Numbers",
            "titleSlug": "compare-version-numbers",
            "content": "<p>Given two version numbers,&nbsp;<code>version1</code> and <code>version2</code>, compare them.</p>\n\n<ul>\n</ul>\n\n<p>Version numbers consist of <strong>one or more revisions</strong> joined by a dot&nbsp;<code>&#39;.&#39;</code>. Each revision&nbsp;consists of <strong>digits</strong>&nbsp;and may contain leading <strong>zeros</strong>. Every revision contains <strong>at least one character</strong>. Revisions are <strong>0-indexed from left to right</strong>, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example&nbsp;<code>2.5.33</code>&nbsp;and&nbsp;<code>0.1</code>&nbsp;are valid version numbers.</p>\n\n<p>To compare version numbers, compare their revisions in <strong>left-to-right order</strong>. Revisions are compared using their&nbsp;<strong>integer value ignoring any leading zeros</strong>. This means that revisions&nbsp;<code>1</code>&nbsp;and&nbsp;<code>001</code>&nbsp;are considered&nbsp;<strong>equal</strong>. If a version number does not specify a revision at an index, then&nbsp;<strong>treat the revision as&nbsp;<code>0</code></strong>. For example, version&nbsp;<code>1.0</code> is less than version&nbsp;<code>1.1</code>&nbsp;because their revision 0s are the same, but their revision 1s are&nbsp;<code>0</code>&nbsp;and&nbsp;<code>1</code>&nbsp;respectively, and&nbsp;<code>0 &lt; 1</code>.</p>\n\n<p><em>Return the following:</em></p>\n\n<ul>\n\t<li>If <code>version1 &lt; version2</code>, return <code>-1</code>.</li>\n\t<li>If <code>version1 &gt; version2</code>, return <code>1</code>.</li>\n\t<li>Otherwise, return <code>0</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Ignoring leading zeroes, both &quot;01&quot; and &quot;001&quot; represent the same integer &quot;1&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> version1 = &quot;1.0&quot;, version2 = &quot;1.0.0&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> version1 does not specify revision 2, which means it is treated as &quot;0&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> version1 = &quot;0.1&quot;, version2 = &quot;1.1&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> version1&#39;s revision 0 is &quot;0&quot;, while version2&#39;s revision 0 is &quot;1&quot;. 0 &lt; 1, so version1 &lt; version2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li>\n\t<li><code>version1</code> and <code>version2</code>&nbsp;only contain digits and <code>&#39;.&#39;</code>.</li>\n\t<li><code>version1</code> and <code>version2</code>&nbsp;<strong>are valid version numbers</strong>.</li>\n\t<li>All the given revisions in&nbsp;<code>version1</code> and <code>version2</code>&nbsp;can be stored in&nbsp;a&nbsp;<strong>32-bit integer</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2065,
            "dislikes": 2545,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"369.6K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 369561, \"totalSubmissionRaw\": 1012865, \"acRate\": \"36.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two version numbers, `version1` and `version2`, compare them. Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right.  To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. If a version number does not specify a revision at an index, then treat the revision as 0.",
                "constraints": [
                    "1 <= version1.length, version2.length <= 500",
                    "version1 and version2 only contain digits and '.'",
                    "version1 and version2 are valid version numbers.",
                    "All the given revisions in version1 and version2 can be stored in a 32-bit integer."
                ],
                "testcases": [
                    {
                        "input": "version1 = \"1.01\", version2 = \"1.001\"",
                        "output": "0",
                        "explanation": "Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\"."
                    },
                    {
                        "input": "version1 = \"1.0\", version2 = \"1.0.0\"",
                        "output": "0",
                        "explanation": "version1 does not specify revision 2, which means it is treated as \"0\"."
                    },
                    {
                        "input": "version1 = \"0.1\", version2 = \"1.1\"",
                        "output": "-1",
                        "explanation": "version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int compareVersion(string version1, string version2) {\n    istringstream iss1(version1);\n    istringstream iss2(version2);\n    int v1;\n    int v2;\n    char dotChar;\n\n    while (bool(iss1 >> v1) + bool(iss2 >> v2)) {\n      if (v1 < v2)\n        return -1;\n      if (v1 > v2)\n        return 1;\n      iss1 >> dotChar;\n      iss2 >> dotChar;\n      v1 = 0;\n      v2 = 0;\n    }\n\n    return 0;\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int compareVersion(String version1, String version2) {\n    final String[] levels1 = version1.split(\"\\\\.\");\n    final String[] levels2 = version2.split(\"\\\\.\");\n    final int length = Math.max(levels1.length, levels2.length);\n\n    for (int i = 0; i < length; ++i) {\n      final Integer v1 = i < levels1.length ? Integer.parseInt(levels1[i]) : 0;\n      final Integer v2 = i < levels2.length ? Integer.parseInt(levels2[i]) : 0;\n      final int compare = v1.compareTo(v2);\n      if (compare != 0)\n        return compare;\n    }\n\n    return 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def compareVersion(self, version1: str, version2: str) -> int:\n    levels1 = version1.split('.')\n    levels2 = version2.split('.')\n    length = max(len(levels1), len(levels2))\n\n    for i in range(length):\n      v1 = int(levels1[i]) if i < len(levels1) else 0\n      v2 = int(levels2[i]) if i < len(levels2) else 0\n      if v1 < v2:\n        return -1\n      if v1 > v2:\n        return 1\n\n    return 0\n",
                "lang_text": "py"
            }
        }
    }
}