{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "919",
            "title": "Complete Binary Tree Inserter",
            "titleSlug": "complete-binary-tree-inserter",
            "content": "<p>A <strong>complete binary tree</strong> is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.</p>\n\n<p>Design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.</p>\n\n<p>Implement the <code>CBTInserter</code> class:</p>\n\n<ul>\n\t<li><code>CBTInserter(TreeNode root)</code> Initializes the data structure with the <code>root</code> of the complete binary tree.</li>\n\t<li><code>int insert(int v)</code> Inserts a <code>TreeNode</code> into the tree with value <code>Node.val == val</code> so that the tree remains complete, and returns the value of the parent of the inserted <code>TreeNode</code>.</li>\n\t<li><code>TreeNode get_root()</code> Returns the root node of the tree.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/03/lc-treeinsert.jpg\" style=\"width: 500px; height: 143px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;CBTInserter&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;get_root&quot;]\n[[[1, 2]], [3], [4], []]\n<strong>Output</strong>\n[null, 1, 2, [1, 2, 3, 4]]\n\n<strong>Explanation</strong>\nCBTInserter cBTInserter = new CBTInserter([1, 2]);\ncBTInserter.insert(3);  // return 1\ncBTInserter.insert(4);  // return 2\ncBTInserter.get_root(); // return [1, 2, 3, 4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree will be in the range <code>[1, 1000]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 5000</code></li>\n\t<li><code>root</code> is a complete binary tree.</li>\n\t<li><code>0 &lt;= val &lt;= 5000</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>insert</code> and <code>get_root</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1052,
            "dislikes": 109,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"49K\", \"totalSubmission\": \"75.5K\", \"totalAcceptedRaw\": 48953, \"totalSubmissionRaw\": 75505, \"acRate\": \"64.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a `CBTInserter` class to insert new nodes into a complete binary tree while maintaining its completeness. A complete binary tree is a binary tree where every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\n\nImplement the `CBTInserter` class with the following methods:\n\n*   `CBTInserter(TreeNode root)`: Initializes the data structure with the root of the complete binary tree.\n*   `int insert(int v)`: Inserts a TreeNode with value `v` into the tree so that the tree remains complete and returns the value of the parent of the inserted TreeNode.\n*   `TreeNode get_root()`: Returns the root node of the tree.",
                "constraints": [
                    "The number of nodes in the tree will be in the range [1, 1000].",
                    "0 <= Node.val <= 5000",
                    "root is a complete binary tree.",
                    "0 <= val <= 5000",
                    "At most 10<sup>4</sup> calls will be made to insert and get_root."
                ],
                "testcases": [
                    {
                        "input": "[\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]\n[[[1, 2]], [3], [4], []]",
                        "output": "[null, 1, 2, [1, 2, 3, 4]]",
                        "explanation": "1.  Initialize CBTInserter with root [1, 2].\n2.  Insert 3:  Returns 1 (parent of 3).\n3.  Insert 4:  Returns 2 (parent of 4).\n4.  get_root(): Returns the root node [1, 2, 3, 4]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class CBTInserter {\n public:\n  CBTInserter(TreeNode* root) {\n    tree.push_back(root);\n    for (int i = 0; i < tree.size(); ++i) {\n      TreeNode* node = tree[i];\n      if (node->left)\n        tree.push_back(node->left);\n      if (node->right)\n        tree.push_back(node->right);\n    }\n  }\n\n  int insert(int v) {\n    const int n = tree.size();\n    tree.push_back(new TreeNode(v));\n    auto& parent = tree[(n - 1) / 2];\n    if (n & 1)\n      parent->left = tree.back();\n    else\n      parent->right = tree.back();\n    return parent->val;\n  }\n\n  TreeNode* get_root() {\n    return tree[0];\n  }\n\n private:\n  vector<TreeNode*> tree;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class CBTInserter {\n  public CBTInserter(TreeNode root) {\n    tree.add(root);\n    for (int i = 0; i < tree.size(); ++i) {\n      TreeNode node = tree.get(i);\n      if (node.left != null)\n        tree.add(node.left);\n      if (node.right != null)\n        tree.add(node.right);\n    }\n  }\n\n  public int insert(int v) {\n    final int n = tree.size();\n    TreeNode node = new TreeNode(v);\n    TreeNode parent = tree.get((n - 1) / 2);\n    tree.add(node);\n    if (n % 2 == 1)\n      parent.left = node;\n    else\n      parent.right = node;\n    return parent.val;\n  }\n\n  public TreeNode get_root() {\n    return tree.get(0);\n  }\n\n  private List<TreeNode> tree = new ArrayList<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class CBTInserter:\n  def __init__(self, root: Optional[TreeNode]):\n    self.tree = [root]\n    for node in self.tree:\n      if node.left:\n        self.tree.append(node.left)\n      if node.right:\n        self.tree.append(node.right)\n\n  def insert(self, v: int) -> int:\n    n = len(self.tree)\n    self.tree.append(TreeNode(v))\n    parent = self.tree[(n - 1) // 2]\n    if n & 1:\n      parent.left = self.tree[-1]\n    else:\n      parent.right = self.tree[-1]\n    return parent.val\n\n  def get_root(self) -> Optional[TreeNode]:\n    return self.tree[0]\n",
                "lang_text": "py"
            }
        }
    }
}