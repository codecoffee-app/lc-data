{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "472",
            "title": "Concatenated Words",
            "titleSlug": "concatenated-words",
            "content": "<p>Given an array of strings <code>words</code> (<strong>without duplicates</strong>), return <em>all the <strong>concatenated words</strong> in the given list of</em> <code>words</code>.</p>\n\n<p>A <strong>concatenated word</strong> is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct)&nbsp;in the given array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;cat&quot;,&quot;cats&quot;,&quot;catsdogcats&quot;,&quot;dog&quot;,&quot;dogcatsdog&quot;,&quot;hippopotamuses&quot;,&quot;rat&quot;,&quot;ratcatdogcat&quot;]\n<strong>Output:</strong> [&quot;catsdogcats&quot;,&quot;dogcatsdog&quot;,&quot;ratcatdogcat&quot;]\n<strong>Explanation:</strong> &quot;catsdogcats&quot; can be concatenated by &quot;cats&quot;, &quot;dog&quot; and &quot;cats&quot;; \n&quot;dogcatsdog&quot; can be concatenated by &quot;dog&quot;, &quot;cats&quot; and &quot;dog&quot;; \n&quot;ratcatdogcat&quot; can be concatenated by &quot;rat&quot;, &quot;cat&quot;, &quot;dog&quot; and &quot;cat&quot;.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;cat&quot;,&quot;dog&quot;,&quot;catdog&quot;]\n<strong>Output:</strong> [&quot;catdog&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>words[i]</code> consists of only lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= sum(words[i].length) &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3773,
            "dislikes": 276,
            "similarQuestions": "[{\"title\": \"Word Break II\", \"titleSlug\": \"word-break-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"216K\", \"totalSubmission\": \"435K\", \"totalAcceptedRaw\": 216005, \"totalSubmissionRaw\": 434953, \"acRate\": \"49.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of unique strings `words`, identify and return all concatenated words within the array. A concatenated word is defined as a string that can be formed by combining at least two shorter words from the same array.",
                "constraints": [
                    "1 <= words.length <= 10^4",
                    "1 <= words[i].length <= 30",
                    "words[i] consists of only lowercase English letters.",
                    "All the strings of words are unique.",
                    "1 <= sum(words[i].length) <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]",
                        "output": "[\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]",
                        "explanation": "\"catsdogcats\" can be formed by concatenating \"cats\", \"dog\", and \"cats\". \"dogcatsdog\" can be formed by concatenating \"dog\", \"cats\", and \"dog\". \"ratcatdogcat\" can be formed by concatenating \"rat\", \"cat\", \"dog\", and \"cat\"."
                    },
                    {
                        "input": "[\"cat\",\"dog\",\"catdog\"]",
                        "output": "[\"catdog\"]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "word-break-ii",
                "title": "Word Break II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {\n    vector<string> ans;\n    unordered_set<string> wordSet{words.begin(), words.end()};\n    unordered_map<string, bool> memo;\n\n    for (const string& word : words)\n      if (isConcat(word, wordSet, memo))\n        ans.push_back(word);\n\n    return ans;\n  }\n\n private:\n  bool isConcat(const string& s, const unordered_set<string>& wordSet,\n                unordered_map<string, bool>& memo) {\n    if (const auto it = memo.find(s); it != memo.cend())\n      return it->second;\n\n    for (int i = 1; i < s.length(); ++i) {\n      const string prefix = s.substr(0, i);\n      const string suffix = s.substr(i);\n      if (wordSet.count(prefix) &&\n          (wordSet.count(suffix) || isConcat(suffix, wordSet, memo)))\n        return memo[s] = true;\n    }\n\n    return memo[s] = false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> findAllConcatenatedWordsInADict(String[] words) {\n    List<String> ans = new ArrayList<>();\n    Set<String> wordSet = new HashSet<>(Arrays.asList(words));\n    Map<String, Boolean> memo = new HashMap<>();\n\n    for (final String word : words)\n      if (wordBreak(word, wordSet, memo))\n        ans.add(word);\n\n    return ans;\n  }\n\n  private boolean wordBreak(final String word, Set<String> wordSet, Map<String, Boolean> memo) {\n    if (memo.containsKey(word))\n      return memo.get(word);\n\n    for (int i = 1; i < word.length(); ++i) {\n      final String prefix = word.substring(0, i);\n      final String suffix = word.substring(i);\n      if (wordSet.contains(prefix) &&\n          (wordSet.contains(suffix) || wordBreak(suffix, wordSet, memo))) {\n        memo.put(word, true);\n        return true;\n      }\n    }\n\n    memo.put(word, false);\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:\n    wordSet = set(words)\n\n    @functools.lru_cache(None)\n    def isConcat(word: str) -> bool:\n      for i in range(1, len(word)):\n        prefix = word[:i]\n        suffix = word[i:]\n        if prefix in wordSet and (suffix in wordSet or isConcat(suffix)):\n          return True\n\n      return False\n\n    return [word for word in words if isConcat(word)]\n",
                "lang_text": "py"
            }
        }
    }
}