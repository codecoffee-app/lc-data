{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "106",
            "title": "Construct Binary Tree from Inorder and Postorder Traversal",
            "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "content": "<p>Given two integer arrays <code>inorder</code> and <code>postorder</code> where <code>inorder</code> is the inorder traversal of a binary tree and <code>postorder</code> is the postorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n<strong>Output:</strong> [3,9,20,null,null,15,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> inorder = [-1], postorder = [-1]\n<strong>Output:</strong> [-1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= inorder.length &lt;= 3000</code></li>\n\t<li><code>postorder.length == inorder.length</code></li>\n\t<li><code>-3000 &lt;= inorder[i], postorder[i] &lt;= 3000</code></li>\n\t<li><code>inorder</code> and <code>postorder</code> consist of <strong>unique</strong> values.</li>\n\t<li>Each value of <code>postorder</code> also appears in <code>inorder</code>.</li>\n\t<li><code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li>\n\t<li><code>postorder</code> is <strong>guaranteed</strong> to be the postorder traversal of the tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7750,
            "dislikes": 123,
            "similarQuestions": "[{\"title\": \"Construct Binary Tree from Preorder and Inorder Traversal\", \"titleSlug\": \"construct-binary-tree-from-preorder-and-inorder-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"592.4K\", \"totalSubmission\": \"957.4K\", \"totalAcceptedRaw\": 592387, \"totalSubmissionRaw\": 957378, \"acRate\": \"61.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the inorder and postorder traversals of a binary tree, construct and return the binary tree.\n\nSpecifically, you are given two integer arrays, `inorder` and `postorder`, where `inorder` represents the inorder traversal and `postorder` represents the postorder traversal of the same binary tree. Your task is to reconstruct the original binary tree from these traversals.",
                "constraints": [
                    "1 <= inorder.length <= 3000",
                    "postorder.length == inorder.length",
                    "-3000 <= inorder[i], postorder[i] <= 3000",
                    "inorder and postorder consist of unique values.",
                    "Each value of postorder also appears in inorder.",
                    "inorder is guaranteed to be the inorder traversal of the tree.",
                    "postorder is guaranteed to be the postorder traversal of the tree."
                ],
                "testcases": [
                    {
                        "input": "inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]",
                        "output": "[3,9,20,null,null,15,7]",
                        "explanation": "The inorder traversal is [9,3,15,20,7] and the postorder traversal is [9,15,7,20,3]. This corresponds to a tree where 3 is the root, 9 is the left child of 3, 20 is the right child of 3, 15 is the left child of 20, and 7 is the right child of 20."
                    },
                    {
                        "input": "inorder = [-1], postorder = [-1]",
                        "output": "[-1]",
                        "explanation": "The inorder and postorder traversal is [-1]. This represents a simple tree with only the root node having the value -1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
                "title": "Construct Binary Tree from Preorder and Inorder Traversal",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n    unordered_map<int, int> inToIndex;\n\n    for (int i = 0; i < inorder.size(); ++i)\n      inToIndex[inorder[i]] = i;\n\n    return build(inorder, 0, inorder.size() - 1, postorder, 0,\n                 postorder.size() - 1, inToIndex);\n  }\n\n private:\n  TreeNode* build(const vector<int>& inorder, int inStart, int inEnd,\n                  const vector<int>& postorder, int postStart, int postEnd,\n                  const unordered_map<int, int>& inToIndex) {\n    if (inStart > inEnd)\n      return nullptr;\n\n    const int rootVal = postorder[postEnd];\n    const int rootInIndex = inToIndex.at(rootVal);\n    const int leftSize = rootInIndex - inStart;\n\n    TreeNode* root = new TreeNode(rootVal);\n    root->left = build(inorder, inStart, rootInIndex - 1, postorder, postStart,\n                       postStart + leftSize - 1, inToIndex);\n    root->right = build(inorder, rootInIndex + 1, inEnd, postorder,\n                        postStart + leftSize, postEnd - 1, inToIndex);\n    return root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode buildTree(int[] inorder, int[] postorder) {\n    Map<Integer, Integer> inToIndex = new HashMap<>();\n\n    for (int i = 0; i < inorder.length; ++i)\n      inToIndex.put(inorder[i], i);\n\n    return build(inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1, inToIndex);\n  }\n\n  TreeNode build(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart, int postEnd,\n                 Map<Integer, Integer> inToIndex) {\n    if (inStart > inEnd)\n      return null;\n\n    final int rootVal = postorder[postEnd];\n    final int rootInIndex = inToIndex.get(rootVal);\n    final int leftSize = rootInIndex - inStart;\n\n    TreeNode root = new TreeNode(rootVal);\n    root.left = build(inorder, inStart, rootInIndex - 1, postorder, postStart,\n                      postStart + leftSize - 1, inToIndex);\n    root.right = build(inorder, rootInIndex + 1, inEnd, postorder, postStart + leftSize,\n                       postEnd - 1, inToIndex);\n    return root;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n    inToIndex = {num: i for i, num in enumerate(inorder)}\n\n    def build(inStart: int, inEnd: int, postStart: int, postEnd: int) -> Optional[TreeNode]:\n      if inStart > inEnd:\n        return None\n\n      rootVal = postorder[postEnd]\n      rootInIndex = inToIndex[rootVal]\n      leftSize = rootInIndex - inStart\n\n      root = TreeNode(rootVal)\n      root.left = build(inStart, rootInIndex - 1,  postStart,\n                        postStart + leftSize - 1)\n      root.right = build(rootInIndex + 1, inEnd,  postStart + leftSize,\n                         postEnd - 1)\n      return root\n\n    return build(0, len(inorder) - 1, 0, len(postorder) - 1)\n",
                "lang_text": "py"
            }
        }
    }
}