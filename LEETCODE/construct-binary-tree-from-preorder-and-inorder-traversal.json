{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "105",
            "title": "Construct Binary Tree from Preorder and Inorder Traversal",
            "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "content": "<p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n<strong>Output:</strong> [3,9,20,null,null,15,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> preorder = [-1], inorder = [-1]\n<strong>Output:</strong> [-1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= preorder.length &lt;= 3000</code></li>\n\t<li><code>inorder.length == preorder.length</code></li>\n\t<li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li>\n\t<li><code>preorder</code> and <code>inorder</code> consist of <strong>unique</strong> values.</li>\n\t<li>Each value of <code>inorder</code> also appears in <code>preorder</code>.</li>\n\t<li><code>preorder</code> is <strong>guaranteed</strong> to be the preorder traversal of the tree.</li>\n\t<li><code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 14351,
            "dislikes": 449,
            "similarQuestions": "[{\"title\": \"Construct Binary Tree from Inorder and Postorder Traversal\", \"titleSlug\": \"construct-binary-tree-from-inorder-and-postorder-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 1121019, \"totalSubmissionRaw\": 1776034, \"acRate\": \"63.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the preorder and inorder traversals of a binary tree, construct and return the binary tree. The `preorder` array represents the preorder traversal, and the `inorder` array represents the inorder traversal of the same tree. You must build the tree based on these traversals.",
                "constraints": [
                    "1 <= preorder.length <= 3000",
                    "inorder.length == preorder.length",
                    "-3000 <= preorder[i], inorder[i] <= 3000",
                    "preorder and inorder consist of unique values.",
                    "Each value of inorder also appears in preorder.",
                    "preorder is guaranteed to be the preorder traversal of the tree.",
                    "inorder is guaranteed to be the inorder traversal of the tree."
                ],
                "testcases": [
                    {
                        "input": {
                            "preorder": "[3,9,20,15,7]",
                            "inorder": "[9,3,15,20,7]"
                        },
                        "output": "[3,9,20,null,null,15,7]",
                        "explanation": "The binary tree constructed from the given preorder and inorder traversals is represented by the output array."
                    },
                    {
                        "input": {
                            "preorder": "[-1]",
                            "inorder": "[-1]"
                        },
                        "output": "[-1]",
                        "explanation": "A single node tree with value -1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal",
                "title": "Construct Binary Tree from Inorder and Postorder Traversal",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n    unordered_map<int, int> inToIndex;\n\n    for (int i = 0; i < inorder.size(); ++i)\n      inToIndex[inorder[i]] = i;\n\n    return build(preorder, 0, preorder.size() - 1, inorder, 0,\n                 inorder.size() - 1, inToIndex);\n  }\n\n private:\n  TreeNode* build(const vector<int>& preorder, int preStart, int preEnd,\n                  const vector<int>& inorder, int inStart, int inEnd,\n                  const unordered_map<int, int>& inToIndex) {\n    if (preStart > preEnd)\n      return nullptr;\n\n    const int rootVal = preorder[preStart];\n    const int rootInIndex = inToIndex.at(rootVal);\n    const int leftSize = rootInIndex - inStart;\n\n    TreeNode* root = new TreeNode(rootVal);\n    root->left = build(preorder, preStart + 1, preStart + leftSize, inorder,\n                       inStart, rootInIndex - 1, inToIndex);\n    root->right = build(preorder, preStart + leftSize + 1, preEnd, inorder,\n                        rootInIndex + 1, inEnd, inToIndex);\n    return root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode buildTree(int[] preorder, int[] inorder) {\n    Map<Integer, Integer> inToIndex = new HashMap<>();\n\n    for (int i = 0; i < inorder.length; ++i)\n      inToIndex.put(inorder[i], i);\n\n    return build(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1, inToIndex);\n  }\n\n  private TreeNode build(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart,\n                         int inEnd, Map<Integer, Integer> inToIndex) {\n    if (preStart > preEnd)\n      return null;\n\n    final int rootVal = preorder[preStart];\n    final int rootInIndex = inToIndex.get(rootVal);\n    final int leftSize = rootInIndex - inStart;\n\n    TreeNode root = new TreeNode(rootVal);\n    root.left = build(preorder, preStart + 1, preStart + leftSize, inorder, inStart,\n                      rootInIndex - 1, inToIndex);\n    root.right = build(preorder, preStart + leftSize + 1, preEnd, inorder, rootInIndex + 1, inEnd,\n                       inToIndex);\n\n    return root;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n    inToIndex = {num: i for i, num in enumerate(inorder)}\n\n    def build(preStart: int, preEnd: int, inStart: int, inEnd: int) -> Optional[TreeNode]:\n      if preStart > preEnd:\n        return None\n\n      rootVal = preorder[preStart]\n      rootInIndex = inToIndex[rootVal]\n      leftSize = rootInIndex - inStart\n\n      root = TreeNode(rootVal)\n      root.left = build(preStart + 1, preStart + leftSize,\n                        inStart, rootInIndex - 1)\n      root.right = build(preStart + leftSize + 1,\n                         preEnd, rootInIndex + 1, inEnd)\n      return root\n\n    return build(0, len(preorder) - 1, 0, len(inorder) - 1)\n",
                "lang_text": "py"
            }
        }
    }
}