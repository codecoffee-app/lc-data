{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "889",
            "title": "Construct Binary Tree from Preorder and Postorder Traversal",
            "titleSlug": "construct-binary-tree-from-preorder-and-postorder-traversal",
            "content": "<p>Given two integer arrays, <code>preorder</code> and <code>postorder</code> where <code>preorder</code> is the preorder traversal of a binary tree of <strong>distinct</strong> values and <code>postorder</code> is the postorder traversal of the same tree, reconstruct and return <em>the binary tree</em>.</p>\n\n<p>If there exist multiple answers, you can <strong>return any</strong> of them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/24/lc-prepost.jpg\" style=\"width: 304px; height: 265px;\" />\n<pre>\n<strong>Input:</strong> preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]\n<strong>Output:</strong> [1,2,3,4,5,6,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> preorder = [1], postorder = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= preorder.length &lt;= 30</code></li>\n\t<li><code>1 &lt;= preorder[i] &lt;= preorder.length</code></li>\n\t<li>All the values of <code>preorder</code> are <strong>unique</strong>.</li>\n\t<li><code>postorder.length == preorder.length</code></li>\n\t<li><code>1 &lt;= postorder[i] &lt;= postorder.length</code></li>\n\t<li>All the values of <code>postorder</code> are <strong>unique</strong>.</li>\n\t<li>It is guaranteed that <code>preorder</code> and <code>postorder</code> are the preorder traversal and postorder traversal of the same binary tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2676,
            "dislikes": 109,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"96.9K\", \"totalSubmission\": \"135.9K\", \"totalAcceptedRaw\": 96863, \"totalSubmissionRaw\": 135901, \"acRate\": \"71.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two integer arrays, `preorder` and `postorder`, representing the preorder and postorder traversals of a binary tree with distinct values, reconstruct the binary tree and return its root. Note that multiple valid trees may exist; you can return any one of them.",
                "constraints": [
                    "1 <= preorder.length <= 30",
                    "1 <= preorder[i] <= preorder.length",
                    "All values in `preorder` are unique.",
                    "postorder.length == preorder.length",
                    "1 <= postorder[i] <= postorder.length",
                    "All values in `postorder` are unique.",
                    "`preorder` and `postorder` are guaranteed to be the preorder and postorder traversals of the same binary tree."
                ],
                "testcases": [
                    {
                        "input": "preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]",
                        "output": "[1,2,3,4,5,6,7]",
                        "explanation": null
                    },
                    {
                        "input": "preorder = [1], postorder = [1]",
                        "output": "[1]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* constructFromPrePost(vector<int>& pre, vector<int>& post) {\n    unordered_map<int, int> postToIndex;\n\n    for (int i = 0; i < post.size(); ++i)\n      postToIndex[post[i]] = i;\n\n    return build(pre, 0, pre.size() - 1, post, 0, post.size() - 1, postToIndex);\n  }\n\n private:\n  TreeNode* build(const vector<int>& pre, int preStart, int preEnd,\n                  const vector<int>& post, int postStart, int postEnd,\n                  const unordered_map<int, int>& postToIndex) {\n    if (preStart > preEnd)\n      return nullptr;\n    if (preStart == preEnd)\n      return new TreeNode(pre[preStart]);\n\n    const int rootVal = pre[preStart];\n    const int leftRootVal = pre[preStart + 1];\n    const int leftRootPostIndex = postToIndex.at(leftRootVal);\n    const int leftSize = leftRootPostIndex - postStart + 1;\n\n    TreeNode* root = new TreeNode(rootVal);\n    root->left = build(pre, preStart + 1, preStart + leftSize, post, postStart,\n                       leftRootPostIndex, postToIndex);\n    root->right = build(pre, preStart + leftSize + 1, preEnd, post,\n                        leftRootPostIndex + 1, postEnd - 1, postToIndex);\n    return root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode constructFromPrePost(int[] pre, int[] post) {\n    Map<Integer, Integer> postToIndex = new HashMap<>();\n\n    for (int i = 0; i < post.length; ++i)\n      postToIndex.put(post[i], i);\n\n    return build(pre, 0, pre.length - 1, post, 0, post.length - 1, postToIndex);\n  }\n\n  private TreeNode build(int[] pre, int preStart, int preEnd, int[] post, int postStart,\n                         int postEnd, Map<Integer, Integer> postToIndex) {\n    if (preStart > preEnd)\n      return null;\n    if (preStart == preEnd)\n      return new TreeNode(pre[preStart]);\n\n    final int rootVal = pre[preStart];\n    final int leftRootVal = pre[preStart + 1];\n    final int leftRootPostIndex = postToIndex.get(leftRootVal);\n    final int leftSize = leftRootPostIndex - postStart + 1;\n\n    TreeNode root = new TreeNode(rootVal);\n    root.left = build(pre, preStart + 1, preStart + leftSize, post, postStart, leftRootPostIndex,\n                      postToIndex);\n    root.right = build(pre, preStart + leftSize + 1, preEnd, post, leftRootPostIndex + 1,\n                       postEnd - 1, postToIndex);\n    return root;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def constructFromPrePost(self, pre: List[int], post: List[int]) -> Optional[TreeNode]:\n    postToIndex = {num: i for i, num in enumerate(post)}\n\n    def build(preStart: int, preEnd: int, postStart: int, postEnd: int) -> Optional[TreeNode]:\n      if preStart > preEnd:\n        return None\n      if preStart == preEnd:\n        return TreeNode(pre[preStart])\n\n      rootVal = pre[preStart]\n      leftRootVal = pre[preStart + 1]\n      leftRootPostIndex = postToIndex[leftRootVal]\n      leftSize = leftRootPostIndex - postStart + 1\n\n      root = TreeNode(rootVal)\n      root.left = build(preStart + 1, preStart + leftSize,\n                        postStart, leftRootPostIndex)\n      root.right = build(preStart + leftSize + 1, preEnd,\n                         leftRootPostIndex + 1, postEnd - 1)\n      return root\n\n    return build(0, len(pre) - 1, 0, len(post) - 1)\n",
                "lang_text": "py"
            }
        }
    }
}