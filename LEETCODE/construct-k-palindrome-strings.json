{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1400",
            "title": "Construct K Palindrome Strings",
            "titleSlug": "construct-k-palindrome-strings",
            "content": "<p>Given a string <code>s</code> and an integer <code>k</code>, return <code>true</code> <em>if you can use all the characters in </em><code>s</code><em> to construct </em><code>k</code><em> palindrome strings or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;annabelle&quot;, k = 2\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can construct two palindromes using all characters in s.\nSome possible constructions &quot;anna&quot; + &quot;elble&quot;, &quot;anbna&quot; + &quot;elle&quot;, &quot;anellena&quot; + &quot;b&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leetcode&quot;, k = 3\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to construct 3 palindromes using all the characters of s.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;true&quot;, k = 4\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The only possible solution is to put each character in a separate string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1016,
            "dislikes": 88,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"49.4K\", \"totalSubmission\": \"79.3K\", \"totalAcceptedRaw\": 49443, \"totalSubmissionRaw\": 79324, \"acRate\": \"62.3%\"}",
            "hints": [
                "If the s.length < k we cannot construct k strings from s and answer is false.",
                "If the number of characters that have odd counts is > k then the minimum number of palindrome strings we can construct is > k and answer is false.",
                "Otherwise you can construct exactly k palindrome strings and answer is true (why ?)."
            ],
            "rephrased": {
                "body": "Given a string `s` and an integer `k`, determine if it is possible to construct `k` palindrome strings using all the characters in `s`. Return `true` if possible; otherwise, return `false`.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists of lowercase English letters.",
                    "1 <= k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "s = \"annabelle\", k = 2",
                        "output": "true",
                        "explanation": "It is possible to construct two palindromes using all characters in 'annabelle'. For example, \"anna\" and \"elble\"."
                    },
                    {
                        "input": "s = \"leetcode\", k = 3",
                        "output": "false",
                        "explanation": "It is impossible to construct 3 palindromes using all the characters of 'leetcode'."
                    },
                    {
                        "input": "s = \"true\", k = 4",
                        "output": "true",
                        "explanation": "The only possible solution is to have each character in 'true' as a separate palindrome."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "If the s.length < k we cannot construct k strings from s and answer is false.",
            "If the number of characters that have odd counts is > k then the minimum number of palindrome strings we can construct is > k and answer is false.",
            "Otherwise you can construct exactly k palindrome strings and answer is true (why ?)."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canConstruct(string s, int k) {\n    // If the s.length() < k, we cannot construct k strings from s.\n    if (s.length() < k)\n      return false;\n\n    bitset<26> odd;\n\n    for (const char c : s)\n      odd.flip(c - 'a');\n\n    // If the # of characters that have odd counts is > k, the min # of\n    // palindrome strings we can construct is > k.\n    return odd.count() <= k;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canConstruct(String s, int k) {\n    // If the s.length() < k, we cannot finalruct k strings from s.\n    if (s.length() < k)\n      return false;\n\n    int[] count = new int[26];\n\n    for (final char c : s.toCharArray())\n      count[c - 'a'] ^= 1;\n\n    // If the # of characters that have odd counts is > k, the min # of\n    // palindrome strings we can finalruct is > k.\n    return Arrays.stream(count).filter(c -> c % 2 == 1).count() <= k;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canConstruct(self, s: str, k: int) -> bool:\n    # If the len(s) < k, we cannot construct k strings from s.\n    # If the # of characters that have odd counts is > k, the min # of\n    # palindrome strings we can construct is > k.\n    return sum(freq & 1 for freq in collections.Counter(s).values()) <= k <= len(s)\n",
                "lang_text": "py"
            }
        }
    }
}