{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2906",
            "title": "Construct Product Matrix",
            "titleSlug": "construct-product-matrix",
            "content": "<p>Given a <strong>0-indexed</strong> 2D integer matrix <code><font face=\"monospace\">grid</font></code><font face=\"monospace\"> </font>of size <code>n * m</code>, we define a <strong>0-indexed</strong> 2D matrix <code>p</code> of size <code>n * m</code> as the <strong>product</strong> matrix of <code>grid</code> if the following condition is met:</p>\n\n<ul>\n\t<li>Each element <code>p[i][j]</code> is calculated as the product of all elements in <code>grid</code> except for the element <code>grid[i][j]</code>. This product is then taken modulo <code><font face=\"monospace\">12345</font></code>.</li>\n</ul>\n\n<p>Return <em>the product matrix of</em> <code><font face=\"monospace\">grid</font></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,2],[3,4]]\n<strong>Output:</strong> [[24,12],[8,6]]\n<strong>Explanation:</strong> p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24\np[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12\np[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8\np[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6\nSo the answer is [[24,12],[8,6]].</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[12345],[2],[1]]\n<strong>Output:</strong> [[2],[0],[0]]\n<strong>Explanation:</strong> p[0][0] = grid[0][1] * grid[0][2] = 2 * 1 = 2.\np[0][1] = grid[0][0] * grid[0][2] = 12345 * 1 = 12345. 12345 % 12345 = 0. So p[0][1] = 0.\np[0][2] = grid[0][0] * grid[0][1] = 12345 * 2 = 24690. 24690 % 12345 = 0. So p[0][2] = 0.\nSo the answer is [[2],[0],[0]].</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == grid.length&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m == grid[i].length&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= n * m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 218,
            "dislikes": 17,
            "similarQuestions": "[{\"title\": \"Product of Array Except Self\", \"titleSlug\": \"product-of-array-except-self\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.6K\", \"totalSubmission\": \"37.8K\", \"totalAcceptedRaw\": 11639, \"totalSubmissionRaw\": 37750, \"acRate\": \"30.8%\"}",
            "hints": [
                "Try to solve this without using the <code>'/'</code> (division operation).",
                "Create two 2D arrays for <b>suffix</b> and <b>prefix</b> product, and use them to find the product for each position."
            ],
            "rephrased": {
                "body": "Given a 0-indexed 2D integer matrix `grid` of size `n * m`, compute the product matrix `p` of the same size. Each element `p[i][j]` is calculated as the product of all elements in `grid` except `grid[i][j]`, taken modulo 12345. Return the product matrix `p`.",
                "constraints": [
                    "1 <= n == grid.length <= 10^5",
                    "1 <= m == grid[i].length <= 10^5",
                    "2 <= n * m <= 10^5",
                    "1 <= grid[i][j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[3,4]]",
                        "output": "[[24,12],[8,6]]",
                        "explanation": "p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24\np[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12\np[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8\np[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6"
                    },
                    {
                        "input": "[[12345],[2],[1]]",
                        "output": "[[2],[0],[0]]",
                        "explanation": "p[0][0] = grid[1][0] * grid[2][0] = 2 * 1 = 2.\np[1][0] = grid[0][0] * grid[2][0] = 12345 * 1 = 12345. 12345 % 12345 = 0.\np[2][0] = grid[0][0] * grid[1][0] = 12345 * 2 = 24690. 24690 % 12345 = 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "product-of-array-except-self",
                "title": "Product of Array Except Self",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try to solve this without using the <code>'/'</code> (division operation).",
            "Create two 2D arrays for <b>suffix</b> and <b>prefix</b> product, and use them to find the product for each position."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> constructProductMatrix(vector<vector<int>>& grid) {\n    constexpr int kMod = 12345;\n    const int m = grid.size();\n    const int n = grid[0].size();\n    vector<vector<int>> ans(m, vector<int>(n));\n    vector<int> prefix{1};\n    int suffix = 1;\n\n    for (const vector<int>& row : grid)\n      for (const int cell : row)\n        prefix.push_back(static_cast<long>(prefix.back()) * cell % kMod);\n\n    for (int i = m - 1; i >= 0; --i)\n      for (int j = n - 1; j >= 0; --j) {\n        ans[i][j] = prefix[i * n + j] * suffix % kMod;\n        suffix = static_cast<long>(suffix) * grid[i][j] % kMod;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] constructProductMatrix(int[][] grid) {\n    final int kMod = 12345;\n    final int m = grid.length;\n    final int n = grid[0].length;\n    int[][] ans = new int[m][n];\n    List<Integer> prefix = new ArrayList<>(Arrays.asList(1));\n    int suffix = 1;\n\n    for (int[] row : grid)\n      for (int cell : row)\n        prefix.add((int) ((long) prefix.get(prefix.size() - 1) * cell % kMod));\n\n    for (int i = m - 1; i >= 0; i--)\n      for (int j = n - 1; j >= 0; j--) {\n        ans[i][j] = (int) ((long) prefix.get(i * n + j) * suffix % kMod);\n        suffix = (int) ((long) suffix * grid[i][j] % kMod);\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def constructProductMatrix(self, grid: List[List[int]]) -> List[List[int]]:\n    kMod = 12345\n    m = len(grid)\n    n = len(grid[0])\n    ans = [[0] * n for _ in range(m)]\n    prefix = [1]\n    suffix = 1\n\n    for row in grid:\n      for cell in row:\n        prefix.append(prefix[-1] * cell % kMod)\n\n    for i in reversed(range(m)):\n      for j in reversed(range(n)):\n        ans[i][j] = prefix[i * n + j] * suffix % kMod\n        suffix = suffix * grid[i][j] % kMod\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}