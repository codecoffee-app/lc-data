{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2375",
            "title": "Construct Smallest Number From DI String",
            "titleSlug": "construct-smallest-number-from-di-string",
            "content": "<p>You are given a <strong>0-indexed</strong> string <code>pattern</code> of length <code>n</code> consisting of the characters <code>&#39;I&#39;</code> meaning <strong>increasing</strong> and <code>&#39;D&#39;</code> meaning <strong>decreasing</strong>.</p>\n\n<p>A <strong>0-indexed</strong> string <code>num</code> of length <code>n + 1</code> is created using the following conditions:</p>\n\n<ul>\n\t<li><code>num</code> consists of the digits <code>&#39;1&#39;</code> to <code>&#39;9&#39;</code>, where each digit is used <strong>at most</strong> once.</li>\n\t<li>If <code>pattern[i] == &#39;I&#39;</code>, then <code>num[i] &lt; num[i + 1]</code>.</li>\n\t<li>If <code>pattern[i] == &#39;D&#39;</code>, then <code>num[i] &gt; num[i + 1]</code>.</li>\n</ul>\n\n<p>Return <em>the lexicographically <strong>smallest</strong> possible string </em><code>num</code><em> that meets the conditions.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;IIIDIDDD&quot;\n<strong>Output:</strong> &quot;123549876&quot;\n<strong>Explanation:\n</strong>At indices 0, 1, 2, and 4 we must have that num[i] &lt; num[i+1].\nAt indices 3, 5, 6, and 7 we must have that num[i] &gt; num[i+1].\nSome possible values of num are &quot;245639871&quot;, &quot;135749862&quot;, and &quot;123849765&quot;.\nIt can be proven that &quot;123549876&quot; is the smallest possible num that meets the conditions.\nNote that &quot;123414321&quot; is not possible because the digit &#39;1&#39; is used more than once.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;DDD&quot;\n<strong>Output:</strong> &quot;4321&quot;\n<strong>Explanation:</strong>\nSome possible values of num are &quot;9876&quot;, &quot;7321&quot;, and &quot;8742&quot;.\nIt can be proven that &quot;4321&quot; is the smallest possible num that meets the conditions.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 8</code></li>\n\t<li><code>pattern</code> consists of only the letters <code>&#39;I&#39;</code> and <code>&#39;D&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 864,
            "dislikes": 34,
            "similarQuestions": "[{\"title\": \"DI String Match\", \"titleSlug\": \"di-string-match\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"28.3K\", \"totalSubmission\": \"37.6K\", \"totalAcceptedRaw\": 28266, \"totalSubmissionRaw\": 37636, \"acRate\": \"75.1%\"}",
            "hints": [
                "With the constraints, could we generate every possible string?",
                "Yes we can. Now we just need to check if the string meets all the conditions."
            ],
            "rephrased": {
                "body": "Given a 0-indexed string `pattern` of length `n` consisting of the characters 'I' (increasing) and 'D' (decreasing), construct a 0-indexed string `num` of length `n + 1` using digits '1' to '9', each used at most once. If `pattern[i] == 'I'`, then `num[i] < num[i + 1]`. If `pattern[i] == 'D'`, then `num[i] > num[i + 1]`.  Return the lexicographically smallest possible string `num` that meets these conditions.",
                "constraints": [
                    "1 <= pattern.length <= 8",
                    "pattern consists of only the letters 'I' and 'D'."
                ],
                "testcases": [
                    {
                        "input": "IIIDIDDD",
                        "output": "123549876",
                        "explanation": "The string \"123549876\" satisfies the given pattern \"IIIDIDDD\". The indices 0, 1, 2, and 4 have increasing digits.  The indices 3, 5, 6, and 7 have decreasing digits.  This is the smallest possible number that satisfies the pattern."
                    },
                    {
                        "input": "DDD",
                        "output": "4321",
                        "explanation": "The string \"4321\" satisfies the given pattern \"DDD\". All adjacent indices have decreasing digits. This is the smallest possible number that satisfies the pattern."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "di-string-match",
                "title": "DI String Match",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "With the constraints, could we generate every possible string?",
            "Yes we can. Now we just need to check if the string meets all the conditions."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string smallestNumber(string pattern) {\n    string ans;\n    stack<char> stack{{'1'}};\n\n    for (const char c : pattern) {\n      char maxSorFar = stack.top();\n      if (c == 'I')\n        while (!stack.empty()) {\n          maxSorFar = max(maxSorFar, stack.top());\n          ans += stack.top(), stack.pop();\n        }\n      stack.push(maxSorFar + 1);\n    }\n\n    while (!stack.empty())\n      ans += stack.top(), stack.pop();\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String smallestNumber(String pattern) {\n    StringBuilder sb = new StringBuilder();\n    Deque<Character> stack = new ArrayDeque<>(Arrays.asList('1'));\n\n    for (final char c : pattern.toCharArray()) {\n      char maxSorFar = stack.peek();\n      if (c == 'I')\n        while (!stack.isEmpty()) {\n          maxSorFar = (char) Math.max(maxSorFar, stack.peek());\n          sb.append(stack.pop());\n        }\n      stack.push((char) (maxSorFar + 1));\n    }\n\n    while (!stack.isEmpty())\n      sb.append(stack.pop());\n\n    return sb.toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def smallestNumber(self, pattern: str) -> str:\n    ans = []\n    stack = ['1']\n\n    for c in pattern:\n      maxSorFar = stack[-1]\n      if c == 'I':\n        while stack:\n          maxSorFar = max(maxSorFar, stack[-1])\n          ans.append(stack.pop())\n      stack.append(chr(ord(maxSorFar) + 1))\n\n    while stack:\n      ans.append(stack.pop())\n\n    return ''.join(ans)\n",
                "lang_text": "py"
            }
        }
    }
}