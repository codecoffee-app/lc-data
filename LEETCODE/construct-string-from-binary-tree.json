{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "606",
            "title": "Construct String from Binary Tree",
            "titleSlug": "construct-string-from-binary-tree",
            "content": "<p>Given the <code>root</code> of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.</p>\n\n<p>Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/cons1-tree.jpg\" style=\"width: 292px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4]\n<strong>Output:</strong> &quot;1(2(4))(3)&quot;\n<strong>Explanation:</strong> Originally, it needs to be &quot;1(2(4)())(3()())&quot;, but you need to omit all the unnecessary empty parenthesis pairs. And it will be &quot;1(2(4))(3)&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/cons2-tree.jpg\" style=\"width: 207px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,4]\n<strong>Output:</strong> &quot;1(2()(4))(3)&quot;\n<strong>Explanation:</strong> Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3251,
            "dislikes": 3737,
            "similarQuestions": "[{\"title\": \"Construct Binary Tree from String\", \"titleSlug\": \"construct-binary-tree-from-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Duplicate Subtrees\", \"titleSlug\": \"find-duplicate-subtrees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"307.1K\", \"totalSubmission\": \"445.8K\", \"totalAcceptedRaw\": 307105, \"totalSubmissionRaw\": 445844, \"acRate\": \"68.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, construct a string representation of the tree using a preorder traversal. The string should consist of parenthesis and integers. Return the constructed string, omitting any unnecessary empty parenthesis pairs that do not affect the one-to-one mapping between the string and the original binary tree.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 10<sup>4</sup>].",
                    "-1000 <= Node.val <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4]",
                        "output": "\"1(2(4))(3)\"",
                        "explanation": "The original string would be \"1(2(4)())(3()())\". We can omit the unnecessary empty parenthesis pairs to get \"1(2(4))(3)\" while maintaining the tree's structure."
                    },
                    {
                        "input": "[1,2,3,null,4]",
                        "output": "\"1(2()(4))(3)\"",
                        "explanation": "In this case, we cannot omit the first parenthesis pair after '2' because removing it would break the one-to-one mapping. Therefore, the output is \"1(2()(4))(3)\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "construct-binary-tree-from-string",
                "title": "Construct Binary Tree from String",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-duplicate-subtrees",
                "title": "Find Duplicate Subtrees",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string tree2str(TreeNode* t) {\n    return dfs(t);\n  }\n\n private:\n  string dfs(TreeNode* root) {\n    if (root == nullptr)\n      return \"\";\n\n    const string& rootStr = to_string(root->val);\n    if (root->right)\n      return rootStr + \"(\" + dfs(root->left) + \")(\" + dfs(root->right) + \")\";\n    if (root->left)\n      return rootStr + \"(\" + dfs(root->left) + \")\";\n    return rootStr + \"\";\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String tree2str(TreeNode t) {\n    return dfs(t);\n  }\n\n  private String dfs(TreeNode root) {\n    if (root == null)\n      return \"\";\n    if (root.right != null)\n      return root.val + \"(\" + dfs(root.left) + \")(\" + dfs(root.right) + \")\";\n    if (root.left != null)\n      return root.val + \"(\" + dfs(root.left) + \")\";\n    return root.val + \"\";\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def tree2str(self, t: Optional[TreeNode]) -> str:\n    def dfs(root: Optional[TreeNode]) -> str:\n      if not root:\n        return ''\n      if root.right:\n        return str(root.val) + '(' + dfs(root.left) + ')(' + dfs(root.right) + ')'\n      if root.left:\n        return str(root.val) + '(' + dfs(root.left) + ')'\n      return str(root.val)\n    return dfs(t)\n",
                "lang_text": "py"
            }
        }
    }
}