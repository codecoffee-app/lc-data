{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3213",
            "title": "Construct String with Minimum Cost",
            "titleSlug": "construct-string-with-minimum-cost",
            "content": "<p>You are given a string <code>target</code>, an array of strings <code>words</code>, and an integer array <code>costs</code>, both arrays of the same length.</p>\n\n<p>Imagine an empty string <code>s</code>.</p>\n\n<p>You can perform the following operation any number of times (including <strong>zero</strong>):</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> in the range <code>[0, words.length - 1]</code>.</li>\n\t<li>Append <code>words[i]</code> to <code>s</code>.</li>\n\t<li>The cost of operation is <code>costs[i]</code>.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> cost to make <code>s</code> equal to <code>target</code>. If it&#39;s not possible, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">target = &quot;abcdef&quot;, words = [&quot;abdef&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;def&quot;,&quot;ef&quot;], costs = [100,1,1,10,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">7</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The minimum cost can be achieved by performing the following operations:</p>\n\n<ul>\n\t<li>Select index 1 and append <code>&quot;abc&quot;</code> to <code>s</code> at a cost of 1, resulting in <code>s = &quot;abc&quot;</code>.</li>\n\t<li>Select index 2 and append <code>&quot;d&quot;</code> to <code>s</code> at a cost of 1, resulting in <code>s = &quot;abcd&quot;</code>.</li>\n\t<li>Select index 4 and append <code>&quot;ef&quot;</code> to <code>s</code> at a cost of 5, resulting in <code>s = &quot;abcdef&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">target = &quot;aaaa&quot;, words = [&quot;z&quot;,&quot;zz&quot;,&quot;zzz&quot;], costs = [1,10,100]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>It is impossible to make <code>s</code> equal to <code>target</code>, so we return -1.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words.length == costs.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= target.length</code></li>\n\t<li>The total sum of <code>words[i].length</code> is less than or equal to <code>5 * 10<sup>4</sup></code>.</li>\n\t<li><code>target</code> and <code>words[i]</code> consist only of lowercase English letters.</li>\n\t<li><code>1 &lt;= costs[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 129,
            "dislikes": 26,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Suffix Array",
                    "slug": "suffix-array"
                }
            ],
            "stats": "{\"totalAccepted\": \"11K\", \"totalSubmission\": \"53.2K\", \"totalAcceptedRaw\": 10990, \"totalSubmissionRaw\": 53160, \"acRate\": \"20.7%\"}",
            "hints": [
                "Use Dynamic Programming along with Aho-Corasick or Hashing."
            ],
            "rephrased": {
                "body": "Given a string `target`, an array of strings `words`, and an integer array `costs` (all arrays of the same length), find the minimum cost to construct the `target` string by appending words from the `words` array.  You can append any word from `words` as many times as you like. The cost of appending `words[i]` is `costs[i]`. Return -1 if it's impossible to construct the `target` string.",
                "constraints": [
                    "1 <= target.length <= 5 * 10^4",
                    "1 <= words.length == costs.length <= 5 * 10^4",
                    "1 <= words[i].length <= target.length",
                    "The total sum of words[i].length is less than or equal to 5 * 10^4",
                    "target and words[i] consist only of lowercase English letters.",
                    "1 <= costs[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "target = \"abcdef\", words = [\"abdef\",\"abc\",\"d\",\"def\",\"ef\"], costs = [100,1,1,10,5]",
                        "output": "7",
                        "explanation": "The optimal solution is to append \"abc\" (cost 1), then \"d\" (cost 1), and finally \"ef\" (cost 5), resulting in a total cost of 7."
                    },
                    {
                        "input": "target = \"aaaa\", words = [\"z\",\"zz\",\"zzz\"], costs = [1,10,100]",
                        "output": "-1",
                        "explanation": "It is not possible to create the target string \"aaaa\" using any combination of the given words."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use Dynamic Programming along with Aho-Corasick or Hashing."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Suffix Array",
                "slug": "suffix-array"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class TrieNode {\n public:\n  vector<shared_ptr<TrieNode>> children;\n  int cost = INT_MAX;\n  TrieNode() : children(26) {}\n};\n\nclass Trie {\n public:\n  // Inserts a word with a cost.\n  void insert(const string& word, int cost) {\n    shared_ptr<TrieNode> node = root;\n    for (const char c : word) {\n      const int i = c - 'a';\n      if (node->children[i] == nullptr)\n        node->children[i] = make_shared<TrieNode>();\n      node = node->children[i];\n    }\n    node->cost = min(node->cost, cost);\n  }\n\n  // Returns the minimum cost to construct s[i:].\n  int search(const string& word, int i, vector<int>& mem) {\n    if (i == word.size())\n      return 0;\n    if (mem[i] != INT_MAX)\n      return mem[i];\n    int cost = INT_MAX;\n    shared_ptr<TrieNode> node = root;\n    for (int j = i; j < word.length(); ++j) {\n      const int index = word[j] - 'a';\n      if (node->children[index] == nullptr)\n        break;\n      node = node->children[index];\n      if (node->cost != INT_MAX) {\n        const int childCost = search(word, j + 1, mem);\n        if (childCost != INT_MAX)\n          cost = min(cost, node->cost + childCost);\n      }\n    }\n    return mem[i] = cost;\n  }\n\n private:\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n};\n\nclass Solution {\n public:\n  int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    Trie trie;\n\n    for (int i = 0; i < words.size(); ++i)\n      trie.insert(words[i], costs[i]);\n\n    vector<int> mem(target.size(), INT_MAX);\n    const int ans = trie.search(target, 0, mem);\n    return ans == INT_MAX ? -1 : ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[26];\n  public int cost = Integer.MAX_VALUE;\n}\n\nclass Trie {\n  // Inserts a word with a cost.\n  public void insert(String word, int cost) {\n    TrieNode node = root;\n    for (final char c : word.toCharArray()) {\n      final int i = c - 'a';\n      if (node.children[i] == null)\n        node.children[i] = new TrieNode();\n      node = node.children[i];\n    }\n    node.cost = Math.min(node.cost, cost);\n  }\n\n  // Returns the minimum cost to construct s[i:].\n  public int search(final String word, int i, Integer[] mem) {\n    if (i == word.length())\n      return 0;\n    if (mem[i] != null)\n      return mem[i];\n    int cost = Integer.MAX_VALUE;\n    TrieNode node = root;\n    for (int j = i; j < word.length(); ++j) {\n      final int index = word.charAt(j) - 'a';\n      if (node.children[index] == null)\n        break;\n      node = node.children[index];\n      if (node.cost != Integer.MAX_VALUE) {\n        final int childCost = search(word, j + 1, mem);\n        if (childCost != Integer.MAX_VALUE)\n          cost = Math.min(cost, node.cost + childCost);\n      }\n    }\n    return mem[i] = cost;\n  }\n\n  private TrieNode root = new TrieNode();\n}\n\nclass Solution {\n  public int minimumCost(String target, String[] words, int[] costs) {\n    Trie trie = new Trie();\n\n    for (int i = 0; i < words.length; ++i)\n      trie.insert(words[i], costs[i]);\n\n    final int ans = trie.search(target, 0, new Integer[target.length()]);\n    return ans == Integer.MAX_VALUE ? -1 : ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TrieNode:\n  def __init__(self):\n    self.children: dict[str, TrieNode] = {}\n    self.cost = math.inf\n\n\nclass Trie:\n  def __init__(self):\n    self.root = TrieNode()\n\n  def insert(self, word: str, cost: int) -> None:\n    \"\"\"Inserts a word with a cost.\"\"\"\n    node: TrieNode = self.root\n    for c in word:\n      node = node.children.setdefault(c, TrieNode())\n    node.cost = min(node.cost, cost)\n\n  @functools.lru_cache(None)\n  def search(self, word: str, i: int) -> int:\n    \"\"\"Returns the minimum cost to construct s[i:].\"\"\"\n    if i == len(word):\n      return 0\n    cost = math.inf\n    node = self.root\n    for i in range(i, len(word)):\n      if word[i] not in node.children:\n        break\n      node = node.children[word[i]]\n      if node.cost != math.inf:\n        childCost = self.search(word, i + 1)\n        if childCost != math.inf:\n          cost = min(cost, node.cost + childCost)\n    return cost\n\n\nclass Solution:\n  def minimumCost(self, target: str, words: list[str], costs: list[int]) -> int:\n    trie = Trie()\n\n    for word, cost in zip(words, costs):\n      trie.insert(word, cost)\n\n    ans = trie.search(target, 0)\n    return -1 if ans == math.inf else ans\n",
                "lang_text": "py"
            }
        }
    }
}