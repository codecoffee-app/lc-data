{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2182",
            "title": "Construct String With Repeat Limit",
            "titleSlug": "construct-string-with-repeat-limit",
            "content": "<p>You are given a string <code>s</code> and an integer <code>repeatLimit</code>. Construct a new string <code>repeatLimitedString</code> using the characters of <code>s</code> such that no letter appears <strong>more than</strong> <code>repeatLimit</code> times <strong>in a row</strong>. You do <strong>not</strong> have to use all characters from <code>s</code>.</p>\n\n<p>Return <em>the <strong>lexicographically largest</strong> </em><code>repeatLimitedString</code> <em>possible</em>.</p>\n\n<p>A string <code>a</code> is <strong>lexicographically larger</strong> than a string <code>b</code> if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears later in the alphabet than the corresponding letter in <code>b</code>. If the first <code>min(a.length, b.length)</code> characters do not differ, then the longer string is the lexicographically larger one.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cczazcc&quot;, repeatLimit = 3\n<strong>Output:</strong> &quot;zzcccac&quot;\n<strong>Explanation:</strong> We use all of the characters from s to construct the repeatLimitedString &quot;zzcccac&quot;.\nThe letter &#39;a&#39; appears at most 1 time in a row.\nThe letter &#39;c&#39; appears at most 3 times in a row.\nThe letter &#39;z&#39; appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return &quot;zzcccac&quot;.\nNote that the string &quot;zzcccca&quot; is lexicographically larger but the letter &#39;c&#39; appears more than 3 times in a row, so it is not a valid repeatLimitedString.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aababab&quot;, repeatLimit = 2\n<strong>Output:</strong> &quot;bbabaa&quot;\n<strong>Explanation:</strong> We use only some of the characters from s to construct the repeatLimitedString &quot;bbabaa&quot;. \nThe letter &#39;a&#39; appears at most 2 times in a row.\nThe letter &#39;b&#39; appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return &quot;bbabaa&quot;.\nNote that the string &quot;bbabaaa&quot; is lexicographically larger but the letter &#39;a&#39; appears more than 2 times in a row, so it is not a valid repeatLimitedString.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= repeatLimit &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 606,
            "dislikes": 36,
            "similarQuestions": "[{\"title\": \"Rearrange String k Distance Apart\", \"titleSlug\": \"rearrange-string-k-distance-apart\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"19.7K\", \"totalSubmission\": \"37K\", \"totalAcceptedRaw\": 19702, \"totalSubmissionRaw\": 36965, \"acRate\": \"53.3%\"}",
            "hints": [
                "Start constructing the string in descending order of characters.",
                "When repeatLimit is reached, pick the next largest character."
            ],
            "rephrased": {
                "body": "Given a string `s` and an integer `repeatLimit`, construct a new string `repeatLimitedString` using the characters of `s`. The `repeatLimitedString` must satisfy the condition that no letter appears more than `repeatLimit` times consecutively.  You don't have to use all the characters from `s`. Return the lexicographically largest possible `repeatLimitedString`.",
                "constraints": [
                    "1 <= repeatLimit <= s.length <= 10^5",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"cczazcc\", repeatLimit = 3",
                        "output": "\"zzcccac\"",
                        "explanation": "The string \"zzcccac\" is constructed using all characters from `s`.  No letter appears more than `repeatLimit` times in a row. The string is the lexicographically largest possible valid `repeatLimitedString`. For example, \"zzcccca\" is lexicographically larger, but the letter 'c' appears more than 3 times consecutively, making it invalid."
                    },
                    {
                        "input": "s = \"aababab\", repeatLimit = 2",
                        "output": "\"bbabaa\"",
                        "explanation": "The string \"bbabaa\" is constructed using some of the characters from `s`. No letter appears more than `repeatLimit` times in a row. The string is the lexicographically largest possible valid `repeatLimitedString`. For example, \"bbabaaa\" is lexicographically larger, but the letter 'a' appears more than 2 times consecutively, making it invalid."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "rearrange-string-k-distance-apart",
                "title": "Rearrange String k Distance Apart",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Start constructing the string in descending order of characters.",
            "When repeatLimit is reached, pick the next largest character."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string repeatLimitedString(string s, int repeatLimit) {\n    string ans;\n    vector<int> count(26);\n\n    for (const char c : s)\n      ++count[c - 'a'];\n\n    while (true) {\n      const bool addOne = !ans.empty() && shouldAddOne(ans, count);\n      const int i = getLargestChar(ans, count);\n      if (i == -1)\n        break;\n      const int repeats = addOne ? 1 : min(count[i], repeatLimit);\n      ans += string(repeats, 'a' + i);\n      count[i] -= repeats;\n    }\n\n    return ans;\n  }\n\n private:\n  bool shouldAddOne(const string& ans, const vector<int>& count) {\n    for (int i = 25; i >= 0; --i)\n      if (count[i])\n        return ans.back() == 'a' + i;\n    return false;\n  }\n\n  int getLargestChar(const string& ans, const vector<int>& count) {\n    for (int i = 25; i >= 0; --i)\n      if (count[i] && (ans.empty() || ans.back() != 'a' + i))\n        return i;\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String repeatLimitedString(String s, int repeatLimit) {\n    StringBuilder sb = new StringBuilder();\n    int[] count = new int[26];\n\n    for (final char c : s.toCharArray())\n      ++count[c - 'a'];\n\n    while (true) {\n      final boolean addOne = !sb.isEmpty() && shouldAddOne(sb, count);\n      final int i = getLargestChar(sb, count);\n      if (i == -1)\n        break;\n      final int repeats = addOne ? 1 : Math.min(count[i], repeatLimit);\n      sb.append(String.valueOf((char) ('a' + i)).repeat(repeats));\n      count[i] -= repeats;\n    }\n\n    return sb.toString();\n  }\n\n  private boolean shouldAddOne(StringBuilder sb, int[] count) {\n    for (int i = 25; i >= 0; --i)\n      if (count[i] > 0)\n        return sb.charAt(sb.length() - 1) == 'a' + i;\n    return false;\n  }\n\n  private int getLargestChar(StringBuilder sb, int[] count) {\n    for (int i = 25; i >= 0; --i)\n      if (count[i] > 0 && (sb.isEmpty() || sb.charAt(sb.length() - 1) != 'a' + i))\n        return i;\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def repeatLimitedString(self, s: str, repeatLimit: int) -> str:\n    ans = ''\n    count = collections.Counter(s)\n\n    while True:\n      addOne = ans and self._shouldAddOne(ans, count)\n      c = self._getLargestChar(ans, count)\n      if c == ' ':\n        break\n      repeats = 1 if addOne else min(count[c], repeatLimit)\n      ans += c * repeats\n      count[c] -= repeats\n\n    return ans\n\n  def _shouldAddOne(self, ans: str, count: collections.Counter) -> bool:\n    for c in reversed(string.ascii_lowercase):\n      if count[c]:\n        return ans[-1] == c\n    return False\n\n  def _getLargestChar(self, ans: str, count: collections.Counter) -> int:\n    for c in reversed(string.ascii_lowercase):\n      if count[c] and (not ans or ans[-1] != c):\n        return c\n    return ' '\n",
                "lang_text": "py"
            }
        }
    }
}