{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1718",
            "title": "Construct the Lexicographically Largest Valid Sequence",
            "titleSlug": "construct-the-lexicographically-largest-valid-sequence",
            "content": "<p>Given an integer <code>n</code>, find a sequence that satisfies all of the following:</p>\n\n<ul>\n\t<li>The integer <code>1</code> occurs once in the sequence.</li>\n\t<li>Each integer between <code>2</code> and <code>n</code> occurs twice in the sequence.</li>\n\t<li>For every integer <code>i</code> between <code>2</code> and <code>n</code>, the <strong>distance</strong> between the two occurrences of <code>i</code> is exactly <code>i</code>.</li>\n</ul>\n\n<p>The <strong>distance</strong> between two numbers on the sequence, <code>a[i]</code> and <code>a[j]</code>, is the absolute difference of their indices, <code>|j - i|</code>.</p>\n\n<p>Return <em>the <strong>lexicographically largest</strong> sequence</em><em>. It is guaranteed that under the given constraints, there is always a solution. </em></p>\n\n<p>A sequence <code>a</code> is lexicographically larger than a sequence <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, sequence <code>a</code> has a number greater than the corresponding number in <code>b</code>. For example, <code>[0,1,9,0]</code> is lexicographically larger than <code>[0,1,5,6]</code> because the first position they differ is at the third number, and <code>9</code> is greater than <code>5</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> [3,1,2,3,2]\n<strong>Explanation:</strong> [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> [5,3,1,4,3,5,2,4,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 535,
            "dislikes": 48,
            "similarQuestions": "[{\"title\": \"The Number of Beautiful Subsets\", \"titleSlug\": \"the-number-of-beautiful-subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.7K\", \"totalSubmission\": \"23.9K\", \"totalAcceptedRaw\": 12690, \"totalSubmissionRaw\": 23858, \"acRate\": \"53.2%\"}",
            "hints": [
                "Heuristic algorithm may work."
            ],
            "rephrased": {
                "body": "Given an integer `n`, construct a sequence that satisfies the following conditions:\n\n*   The integer `1` appears exactly once in the sequence.\n*   Each integer from `2` to `n` appears exactly twice in the sequence.\n*   For each integer `i` from `2` to `n`, the distance between its two occurrences in the sequence is exactly `i` (where distance is the absolute difference of their indices).\n\nReturn the lexicographically largest such sequence. It is guaranteed that a solution always exists under the given constraints.",
                "constraints": [
                    "1 <= n <= 20"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "[3,1,2,3,2]",
                        "explanation": "The sequence [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is lexicographically larger."
                    },
                    {
                        "input": "5",
                        "output": "[5,3,1,4,3,5,2,4,2]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "the-number-of-beautiful-subsets",
                "title": "The Number of Beautiful Subsets",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Heuristic algorithm may work."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> constructDistancedSequence(int n) {\n    vector<int> ans(2 * n - 1);\n    dfs(n, 0, 0, ans);\n    return ans;\n  }\n\n private:\n  bool dfs(int n, int i, int mask, vector<int>& ans) {\n    if (i == ans.size())\n      return true;\n    if (ans[i] > 0)\n      return dfs(n, i + 1, mask, ans);\n\n    // Greedily fill in descendingly.\n    for (int num = n; num >= 1; --num) {\n      if ((mask >> num & 1) == 1)\n        continue;\n      if (num == 1) {\n        ans[i] = num;\n        if (dfs(n, i + 1, mask | 1 << num, ans))\n          return true;\n        ans[i] = 0;\n      } else {  // num in [2, n]\n        if (i + num >= ans.size() || ans[i + num] > 0)\n          continue;\n        ans[i] = num;\n        ans[i + num] = num;\n        if (dfs(n, i + 1, mask | 1 << num, ans))\n          return true;\n        ans[i + num] = 0;\n        ans[i] = 0;\n      }\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] constructDistancedSequence(int n) {\n    int[] ans = new int[2 * n - 1];\n    dfs(n, 0, 0, ans);\n    return ans;\n  }\n\n  private boolean dfs(int n, int i, int mask, int[] ans) {\n    if (i == ans.length)\n      return true;\n    if (ans[i] > 0)\n      return dfs(n, i + 1, mask, ans);\n\n    // Greedily fill in descendingly.\n    for (int num = n; num >= 1; --num) {\n      if ((mask >> num & 1) == 1)\n        continue;\n      if (num == 1) {\n        ans[i] = num;\n        if (dfs(n, i + 1, mask | 1 << num, ans))\n          return true;\n        ans[i] = 0;\n      } else { // num in [2, n]\n        if (i + num >= ans.length || ans[i + num] > 0)\n          continue;\n        ans[i] = num;\n        ans[i + num] = num;\n        if (dfs(n, i + 1, mask | 1 << num, ans))\n          return true;\n        ans[i + num] = 0;\n        ans[i] = 0;\n      }\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def constructDistancedSequence(self, n: int) -> List[int]:\n    ans = [0] * (2 * n - 1)\n\n    def dfs(i: int, mask: int) -> bool:\n      if i == len(ans):\n        return True\n      if ans[i] > 0:\n        return dfs(i + 1, mask)\n\n      # Greedily fill in descendingly.\n      for num in range(n, 0, -1):\n        if (mask >> num & 1) == 1:\n          continue\n        if num == 1:\n          ans[i] = num\n          if dfs(i + 1, mask | 1 << num):\n            return True\n          ans[i] = 0\n        else:  # num in [2, n]\n          if i + num >= len(ans) or ans[i + num] > 0:\n            continue\n          ans[i] = num\n          ans[i + num] = num\n          if dfs(i + 1, mask | 1 << num):\n            return True\n          ans[i + num] = 0\n          ans[i] = 0\n\n      return False\n\n    dfs(0, 0)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}