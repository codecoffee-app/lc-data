{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2745",
            "title": "Construct the Longest New String",
            "titleSlug": "construct-the-longest-new-string",
            "content": "<p>You are given three integers <code>x</code>, <code>y</code>, and <code>z</code>.</p>\n\n<p>You have <code>x</code> strings equal to <code>&quot;AA&quot;</code>, <code>y</code> strings equal to <code>&quot;BB&quot;</code>, and <code>z</code> strings equal to <code>&quot;AB&quot;</code>. You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain <code>&quot;AAA&quot;</code> or <code>&quot;BBB&quot;</code> as a substring.</p>\n\n<p>Return <em>the maximum possible length of the new string</em>.</p>\n\n<p>A <b>substring</b> is a contiguous <strong>non-empty</strong> sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2, y = 5, z = 1\n<strong>Output:</strong> 12\n<strong>Explanation: </strong>We can concactenate the strings &quot;BB&quot;, &quot;AA&quot;, &quot;BB&quot;, &quot;AA&quot;, &quot;BB&quot;, and &quot;AB&quot; in that order. Then, our new string is &quot;BBAABBAABBAB&quot;. \nThat string has length 12, and we can show that it is impossible to construct a string of longer length.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 3, y = 2, z = 2\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> We can concactenate the strings &quot;AB&quot;, &quot;AB&quot;, &quot;AA&quot;, &quot;BB&quot;, &quot;AA&quot;, &quot;BB&quot;, and &quot;AA&quot; in that order. Then, our new string is &quot;ABABAABBAABBAA&quot;. \nThat string has length 14, and we can show that it is impossible to construct a string of longer length.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x, y, z &lt;= 50</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 264,
            "dislikes": 20,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Brainteaser",
                    "slug": "brainteaser"
                }
            ],
            "stats": "{\"totalAccepted\": \"16K\", \"totalSubmission\": \"30.7K\", \"totalAcceptedRaw\": 15971, \"totalSubmissionRaw\": 30686, \"acRate\": \"52.0%\"}",
            "hints": [
                "It can be proved that ALL \u201cAB\u201ds can be used in the optimal solution.\r\n(1) If the final string starts with 'A', we can put all unused \u201cAB\u201ds at the very beginning.\r\n(2) If the final string starts with 'B' (meaning) it starts with \u201cBB\u201d, we can put all unused \u201cAB\u201ds after the 2nd 'B'.",
                "Using \u201cAB\u201d doesn\u2019t increase the number of \u201cAA\u201ds or \u201cBB\u201ds we can use.\r\nIf we put an \u201cAB\u201d after \u201cBB\u201d, then we still need to append \u201cAA\u201d as before, so it doesn\u2019t change the state.",
                "We only need to consider strings \u201cAA\u201d and \u201cBB\u201d; we can either use the pattern \u201cAABBAABB\u2026\u201d or the pattern \u201cBBAABBAA\u2026\u201d, depending on which one of x and y is larger."
            ],
            "rephrased": {
                "body": "Given three integers `x`, `y`, and `z` representing the number of \"AA\", \"BB\", and \"AB\" strings respectively, determine the maximum possible length of a concatenated string formed by selecting some or all of these strings. The resulting string must not contain \"AAA\" or \"BBB\" as a substring.",
                "constraints": [
                    "1 <= x, y, z <= 50"
                ],
                "testcases": [
                    {
                        "input": "x = 2, y = 5, z = 1",
                        "output": "12",
                        "explanation": "An optimal string can be formed by concatenating \"BB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AB\" in that order, resulting in \"BBAABBAABBAB\" of length 12.  No longer string without \"AAA\" or \"BBB\" can be created."
                    },
                    {
                        "input": "x = 3, y = 2, z = 2",
                        "output": "14",
                        "explanation": "An optimal string can be formed by concatenating \"AB\", \"AB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AA\" in that order, resulting in \"ABABAABBAABBAA\" of length 14.  No longer string without \"AAA\" or \"BBB\" can be created."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "It can be proved that ALL \u201cAB\u201ds can be used in the optimal solution.\r\n(1) If the final string starts with 'A', we can put all unused \u201cAB\u201ds at the very beginning.\r\n(2) If the final string starts with 'B' (meaning) it starts with \u201cBB\u201d, we can put all unused \u201cAB\u201ds after the 2nd 'B'.",
            "Using \u201cAB\u201d doesn\u2019t increase the number of \u201cAA\u201ds or \u201cBB\u201ds we can use.\r\nIf we put an \u201cAB\u201d after \u201cBB\u201d, then we still need to append \u201cAA\u201d as before, so it doesn\u2019t change the state.",
            "We only need to consider strings \u201cAA\u201d and \u201cBB\u201d; we can either use the pattern \u201cAABBAABB\u2026\u201d or the pattern \u201cBBAABBAA\u2026\u201d, depending on which one of x and y is larger."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Brainteaser",
                "slug": "brainteaser"
            }
        ]
    }
}