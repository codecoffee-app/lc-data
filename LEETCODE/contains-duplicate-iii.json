{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "220",
            "title": "Contains Duplicate III",
            "titleSlug": "contains-duplicate-iii",
            "content": "<p>You are given an integer array <code>nums</code> and two integers <code>indexDiff</code> and <code>valueDiff</code>.</p>\n\n<p>Find a pair of indices <code>(i, j)</code> such that:</p>\n\n<ul>\n\t<li><code>i != j</code>,</li>\n\t<li><code>abs(i - j) &lt;= indexDiff</code>.</li>\n\t<li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code>, and</li>\n</ul>\n\n<p>Return <code>true</code><em> if such pair exists or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --&gt; 0 != 3\nabs(i - j) &lt;= indexDiff --&gt; abs(0 - 3) &lt;= 3\nabs(nums[i] - nums[j]) &lt;= valueDiff --&gt; abs(1 - 1) &lt;= 0\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\n<strong>Output:</strong> false\n<strong>Explanation:</strong> After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= indexDiff &lt;= nums.length</code></li>\n\t<li><code>0 &lt;= valueDiff &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 881,
            "dislikes": 57,
            "similarQuestions": "[{\"title\": \"Contains Duplicate\", \"titleSlug\": \"contains-duplicate\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Contains Duplicate II\", \"titleSlug\": \"contains-duplicate-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Bucket Sort",
                    "slug": "bucket-sort"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"243.5K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 243496, \"totalSubmissionRaw\": 1079382, \"acRate\": \"22.6%\"}",
            "hints": [
                "Time complexity O(n logk)  - This will give an indication that sorting is involved for k elements.",
                "Use already existing state to evaluate next state  -  Like, a set of k sorted numbers are only needed to be tracked. When we are processing the next number in array, then we can utilize the existing sorted state and it is not necessary to sort next overlapping set of k numbers again."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and two integers `indexDiff` and `valueDiff`, determine if there exists a pair of indices `(i, j)` such that:\n\n*   `i != j`\n*   `abs(i - j) <= indexDiff`\n*   `abs(nums[i] - nums[j]) <= valueDiff`\n\nReturn `true` if such a pair exists; otherwise, return `false`.",
                "constraints": [
                    "2 <= nums.length <= 10^5",
                    "-10^9 <= nums[i] <= 10^9",
                    "1 <= indexDiff <= nums.length",
                    "0 <= valueDiff <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3,1], indexDiff = 3, valueDiff = 0",
                        "output": "true",
                        "explanation": "The pair (0, 3) satisfies all the conditions: 0 != 3, abs(0 - 3) <= 3, and abs(1 - 1) <= 0."
                    },
                    {
                        "input": "nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3",
                        "output": "false",
                        "explanation": "No pair of indices satisfies all given conditions."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "contains-duplicate",
                "title": "Contains Duplicate",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "contains-duplicate-ii",
                "title": "Contains Duplicate II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Time complexity O(n logk)  - This will give an indication that sorting is involved for k elements.",
            "Use already existing state to evaluate next state  -  Like, a set of k sorted numbers are only needed to be tracked. When we are processing the next number in array, then we can utilize the existing sorted state and it is not necessary to sort next overlapping set of k numbers again."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Bucket Sort",
                "slug": "bucket-sort"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool containsNearbyAlmostDuplicate(vector<int>& nums, int indexDiff,\n                                     int valueDiff) {\n    set<long> window;\n\n    for (int i = 0; i < nums.size(); ++i) {\n      if (const auto it =\n              window.lower_bound(static_cast<long>(nums[i]) - valueDiff);\n          it != window.cend() && *it - nums[i] <= valueDiff)\n        return true;\n      window.insert(nums[i]);\n      if (i >= indexDiff)\n        window.erase(nums[i - indexDiff]);\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {\n    TreeSet<Long> set = new TreeSet<>();\n\n    for (int i = 0; i < nums.length; ++i) {\n      final long num = (long) nums[i];\n      final Long ceiling = set.ceiling(num); // The smallest num >= nums[i]\n      if (ceiling != null && ceiling - num <= valueDiff)\n        return true;\n      final Long floor = set.floor(num); // The largest num <= nums[i]\n      if (floor != null && num - floor <= valueDiff)\n        return true;\n      set.add(num);\n      if (i >= indexDiff)\n        set.remove((long) nums[i - indexDiff]);\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}