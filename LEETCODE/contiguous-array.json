{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "525",
            "title": "Contiguous Array",
            "titleSlug": "contiguous-array",
            "content": "<p>Given a binary array <code>nums</code>, return <em>the maximum length of a contiguous subarray with an equal number of </em><code>0</code><em> and </em><code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6876,
            "dislikes": 278,
            "similarQuestions": "[{\"title\": \"Maximum Size Subarray Sum Equals k\", \"titleSlug\": \"maximum-size-subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"319.9K\", \"totalSubmission\": \"681.7K\", \"totalAcceptedRaw\": 319918, \"totalSubmissionRaw\": 681689, \"acRate\": \"46.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a binary array `nums`, find the maximum length of a contiguous subarray with an equal number of 0s and 1s.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "nums[i] is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "[0,1]",
                        "output": "2",
                        "explanation": "The subarray [0, 1] is the longest contiguous subarray containing an equal number of 0s and 1s."
                    },
                    {
                        "input": "[0,1,0]",
                        "output": "2",
                        "explanation": "The subarray [0, 1] or [1, 0] is the longest contiguous subarray containing an equal number of 0s and 1s."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-size-subarray-sum-equals-k",
                "title": "Maximum Size Subarray Sum Equals k",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findMaxLength(vector<int>& nums) {\n    int ans = 0;\n    int prefix = 0;\n    unordered_map<int, int> prefixToIndex{{0, -1}};\n\n    for (int i = 0; i < nums.size(); ++i) {\n      prefix += nums[i] ? 1 : -1;\n      if (const auto it = prefixToIndex.find(prefix);\n          it != prefixToIndex.cend())\n        ans = max(ans, i - it->second);\n      else\n        prefixToIndex[prefix] = i;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findMaxLength(int[] nums) {\n    int ans = 0;\n    int prefix = 0;\n    Map<Integer, Integer> prefixToIndex = new HashMap<>();\n    prefixToIndex.put(0, -1);\n\n    for (int i = 0; i < nums.length; ++i) {\n      prefix += nums[i] == 1 ? 1 : -1;\n      if (prefixToIndex.containsKey(prefix))\n        ans = Math.max(ans, i - prefixToIndex.get(prefix));\n      else\n        prefixToIndex.put(prefix, i);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMaxLength(self, nums: List[int]) -> int:\n    ans = 0\n    prefix = 0\n    prefixToIndex = {0: -1}\n\n    for i, num in enumerate(nums):\n      prefix += 1 if num else -1\n      ans = max(ans, i - prefixToIndex.setdefault(prefix, i))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}