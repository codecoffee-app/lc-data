{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "523",
            "title": "Continuous Subarray Sum",
            "titleSlug": "continuous-subarray-sum",
            "content": "<p>Given an integer array nums and an integer k, return <code>true</code> <em>if </em><code>nums</code><em> has a <strong>good subarray</strong> or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>A <strong>good subarray</strong> is a subarray where:</p>\n\n<ul>\n\t<li>its length is <strong>at least two</strong>, and</li>\n\t<li>the sum of the elements of the subarray is a multiple of <code>k</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>A <strong>subarray</strong> is a contiguous part of the array.</li>\n\t<li>An integer <code>x</code> is a multiple of <code>k</code> if there exists an integer <code>n</code> such that <code>x = n * k</code>. <code>0</code> is <strong>always</strong> a multiple of <code>k</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [23,<u>2,4</u>,6,7], k = 6\n<strong>Output:</strong> true\n<strong>Explanation:</strong> [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [<u>23,2,6,4,7</u>], k = 6\n<strong>Output:</strong> true\n<strong>Explanation:</strong> [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [23,2,6,4,7], k = 13\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= sum(nums[i]) &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= k &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5308,
            "dislikes": 518,
            "similarQuestions": "[{\"title\": \"Subarray Sum Equals K\", \"titleSlug\": \"subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Operations to Make Array Continuous\", \"titleSlug\": \"minimum-number-of-operations-to-make-array-continuous\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Intervals Between Identical Elements\", \"titleSlug\": \"intervals-between-identical-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Apply Operations to Make All Array Elements Equal to Zero\", \"titleSlug\": \"apply-operations-to-make-all-array-elements-equal-to-zero\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"428K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 427985, \"totalSubmissionRaw\": 1491529, \"acRate\": \"28.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `k`, determine if there exists a \"good subarray\". A \"good subarray\" is defined as a contiguous subarray of length at least two whose elements sum up to a multiple of `k`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "0 <= nums[i] <= 10^9",
                    "0 <= sum(nums[i]) <= 2^31 - 1",
                    "1 <= k <= 2^31 - 1"
                ],
                "testcases": [
                    {
                        "input": "nums = [23,2,4,6,7], k = 6",
                        "output": "true",
                        "explanation": "The subarray [2, 4] has a length of 2 and its sum (6) is a multiple of 6."
                    },
                    {
                        "input": "nums = [23,2,6,4,7], k = 6",
                        "output": "true",
                        "explanation": "The subarray [23, 2, 6, 4, 7] has a length of 5 and its sum (42) is a multiple of 6 (42 = 7 * 6)."
                    },
                    {
                        "input": "nums = [23,2,6,4,7], k = 13",
                        "output": "false",
                        "explanation": "No subarray of length at least two sums to a multiple of 13."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "subarray-sum-equals-k",
                "title": "Subarray Sum Equals K",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-operations-to-make-array-continuous",
                "title": "Minimum Number of Operations to Make Array Continuous",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "intervals-between-identical-elements",
                "title": "Intervals Between Identical Elements",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "apply-operations-to-make-all-array-elements-equal-to-zero",
                "title": "Apply Operations to Make All Array Elements Equal to Zero",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool checkSubarraySum(vector<int>& nums, int k) {\n    int prefix = 0;\n    unordered_map<int, int> prefixToIndex{{0, -1}};\n\n    for (int i = 0; i < nums.size(); ++i) {\n      prefix += nums[i];\n      if (k != 0)\n        prefix %= k;\n      if (const auto it = prefixToIndex.find(prefix);\n          it != prefixToIndex.cend()) {\n        if (i - it->second > 1)\n          return true;\n      } else {\n        // Only add if absent, because the previous index is better\n        prefixToIndex[prefix] = i;\n      }\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean checkSubarraySum(int[] nums, int k) {\n    int prefix = 0;\n    Map<Integer, Integer> prefixToIndex = new HashMap<>();\n    prefixToIndex.put(0, -1);\n\n    for (int i = 0; i < nums.length; ++i) {\n      prefix += nums[i];\n      if (k != 0)\n        prefix %= k;\n      if (prefixToIndex.containsKey(prefix)) {\n        if (i - prefixToIndex.get(prefix) > 1)\n          return true;\n      } else {\n        // Only add if absent, because the previous index is better\n        prefixToIndex.put(prefix, i);\n      }\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def checkSubarraySum(self, nums: List[int], k: int) -> bool:\n    prefix = 0\n    prefixToIndex = {0: -1}\n\n    for i, num in enumerate(nums):\n      prefix += num\n      if k != 0:\n        prefix %= k\n      if prefix in prefixToIndex:\n        if i - prefixToIndex[prefix] > 1:\n          return True\n      else:\n        prefixToIndex[prefix] = i\n\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}