{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2762",
            "title": "Continuous Subarrays",
            "titleSlug": "continuous-subarrays",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. A subarray of <code>nums</code> is called <strong>continuous</strong> if:</p>\n\n<ul>\n\t<li>Let <code>i</code>, <code>i + 1</code>, ..., <code>j</code><sub> </sub>be the indices in the subarray. Then, for each pair of indices <code>i &lt;= i<sub>1</sub>, i<sub>2</sub> &lt;= j</code>, <code><font face=\"monospace\">0 &lt;=</font> |nums[i<sub>1</sub>] - nums[i<sub>2</sub>]| &lt;= 2</code>.</li>\n</ul>\n\n<p>Return <em>the total number of <strong>continuous</strong> subarrays.</em></p>\n\n<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,2,4]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> \nContinuous subarray of size 1: [5], [4], [2], [4].\nContinuous subarray of size 2: [5,4], [4,2], [2,4].\nContinuous subarray of size 3: [4,2,4].\nThereare no subarrys of size 4.\nTotal continuous subarrays = 4 + 3 + 1 = 8.\nIt can be shown that there are no more continuous subarrays.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> \nContinuous subarray of size 1: [1], [2], [3].\nContinuous subarray of size 2: [1,2], [2,3].\nContinuous subarray of size 3: [1,2,3].\nTotal continuous subarrays = 3 + 2 + 1 = 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 620,
            "dislikes": 17,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                },
                {
                    "name": "Monotonic Queue",
                    "slug": "monotonic-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.3K\", \"totalSubmission\": \"40.3K\", \"totalAcceptedRaw\": 16348, \"totalSubmissionRaw\": 40307, \"acRate\": \"40.6%\"}",
            "hints": [
                "Try using the sliding window technique.",
                "Use a set or map to keep track of the maximum and minimum of subarrays."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed integer array `nums`. A subarray of `nums` is considered continuous if, for all pairs of indices i1 and i2 within the subarray (i <= i1, i2 <= j), the absolute difference between nums[i1] and nums[i2] is no more than 2 (i.e., 0 <= |nums[i1] - nums[i2]| <= 2).\n\nReturn the total number of continuous subarrays.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[5,4,2,4]",
                        "output": "8",
                        "explanation": "The continuous subarrays are: [5], [4], [2], [4], [5,4], [4,2], [2,4], [4,2,4]. Therefore the answer is 8."
                    },
                    {
                        "input": "[1,2,3]",
                        "output": "6",
                        "explanation": "The continuous subarrays are: [1], [2], [3], [1,2], [2,3], [1,2,3]. Therefore, the answer is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Try using the sliding window technique.",
            "Use a set or map to keep track of the maximum and minimum of subarrays."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            },
            {
                "name": "Monotonic Queue",
                "slug": "monotonic-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long continuousSubarrays(vector<int>& nums) {\n    long long ans = 1;  // [nums[0]]\n    int left = nums[0] - 2;\n    int right = nums[0] + 2;\n    int l = 0;\n\n    // nums[l..r] is a valid window with range in [left, right].\n    for (int r = 1; r < nums.size(); r++) {\n      if (left <= nums[r] && nums[r] <= right) {\n        left = max(left, nums[r] - 2);\n        right = min(right, nums[r] + 2);\n      } else {\n        // nums[r] is out of bound, so reconstruct the window.\n        left = nums[r] - 2;\n        right = nums[r] + 2;\n        l = r;\n        // If we consistently move leftward in each iteration, it implies that\n        // the entire left subarray satisfies the given condition. For every\n        // subarray with l in the range [0, r], the condition is met, preventing\n        // the code from reaching the final \"else\" condition. Instead, it stops\n        // at the \"if\" condition.\n        while (nums[r] - 2 <= nums[l] && nums[l] <= nums[r] + 2) {\n          left = max(left, nums[l] - 2);\n          right = min(right, nums[l] + 2);\n          --l;\n        }\n        ++l;\n      }\n      // nums[l..r], nums[l + 1..r], ..., nums[r]\n      ans += r - l + 1;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long continuousSubarrays(int[] nums) {\n    long ans = 1; // [nums[0]]\n    int left = nums[0] - 2;\n    int right = nums[0] + 2;\n    int l = 0;\n\n    // nums[l..r] is a valid window with range in [left, right].\n    for (int r = 1; r < nums.length; r++) {\n      if (left <= nums[r] && nums[r] <= right) {\n        left = Math.max(left, nums[r] - 2);\n        right = Math.min(right, nums[r] + 2);\n      } else {\n        // nums[r] is out of bound, so reconstruct the window.\n        left = nums[r] - 2;\n        right = nums[r] + 2;\n        l = r;\n        // If we consistently move leftward in each iteration, it implies that\n        // the entire left subarray satisfies the given condition. For every\n        // subarray with l in the range [0, r], the condition is met, preventing\n        // the code from reaching the final \"else\" condition. Instead, it stops\n        // at the \"if\" condition.\n        while (nums[r] - 2 <= nums[l] && nums[l] <= nums[r] + 2) {\n          left = Math.max(left, nums[l] - 2);\n          right = Math.min(right, nums[l] + 2);\n          --l;\n        }\n        ++l;\n      }\n      // nums[l..r], nums[l + 1..r], ..., nums[r]\n      ans += r - l + 1;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def continuousSubarrays(self, nums: List[int]) -> int:\n    ans = 1  # [nums[0]]\n    left = nums[0] - 2\n    right = nums[0] + 2\n    l = 0\n\n    # nums[l..r] is a valid window.\n    for r in range(1, len(nums)):\n      if left <= nums[r] <= right:\n        left = max(left, nums[r] - 2)\n        right = min(right, nums[r] + 2)\n      else:\n        # nums[r] is out of bound, so reconstruct the window.\n        left = nums[r] - 2\n        right = nums[r] + 2\n        l = r\n        # If we consistently move leftward in each iteration, it implies that\n        # the entire left subarray satisfies the given condition. For every\n        # subarray with l in the range [0, r], the condition is met, preventing\n        # the code from reaching the final \"else\" condition. Instead, it stops\n        # at the \"if\" condition.\n        while nums[r] - 2 <= nums[l] <= nums[r] + 2:\n          left = max(left, nums[l] - 2)\n          right = min(right, nums[l] + 2)\n          l -= 1\n        l += 1\n      # nums[l..r], num[l + 1..r], ..., nums[r]\n      ans += r - l + 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}