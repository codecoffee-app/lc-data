{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "405",
            "title": "Convert a Number to Hexadecimal",
            "titleSlug": "convert-a-number-to-hexadecimal",
            "content": "<p>Given an integer <code>num</code>, return <em>a string representing its hexadecimal representation</em>. For negative integers, <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">two&rsquo;s complement</a> method is used.</p>\n\n<p>All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.</p>\n\n<p><strong>Note:&nbsp;</strong>You are not allowed to use any built-in library method to directly solve this problem.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> num = 26\n<strong>Output:</strong> \"1a\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> num = -1\n<strong>Output:</strong> \"ffffffff\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1280,
            "dislikes": 207,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"135.6K\", \"totalSubmission\": \"283.8K\", \"totalAcceptedRaw\": 135644, \"totalSubmissionRaw\": 283756, \"acRate\": \"47.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer `num`, convert it to its hexadecimal representation. For negative integers, use the two's complement method. The output string should consist of lowercase letters, and should not have leading zeros, except when the number is zero itself. Do not use built-in library methods for this task.",
                "constraints": [
                    "-2<sup>31</sup> <= num <= 2<sup>31</sup> - 1"
                ],
                "testcases": [
                    {
                        "input": "26",
                        "output": "1a",
                        "explanation": "The hexadecimal representation of 26 is 1a."
                    },
                    {
                        "input": "-1",
                        "output": "ffffffff",
                        "explanation": "The two's complement representation of -1 as a 32-bit hexadecimal number is ffffffff."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string toHex(unsigned num) {\n    const vector<char> hex{'0', '1', '2', '3', '4', '5', '6', '7',\n                           '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n    string ans;\n\n    while (num) {\n      ans += hex[num & 0xf];\n      num >>= 4;\n    }\n\n    reverse(ans.begin(), ans.end());\n    return ans.empty() ? \"0\" : ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String toHex(int num) {\n    final char[] hex = {'0', '1', '2', '3', '4', '5', '6', '7',\n                        '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n    StringBuilder sb = new StringBuilder();\n\n    while (num != 0) {\n      sb.append(hex[num & 0xf]);\n      num >>>= 4;\n    }\n\n    return sb.length() == 0 ? \"0\" : sb.reverse().toString();\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}