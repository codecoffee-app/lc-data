{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2610",
            "title": "Convert an Array Into a 2D Array With Conditions",
            "titleSlug": "convert-an-array-into-a-2d-array-with-conditions",
            "content": "<p>You are given an integer array <code>nums</code>. You need to create a 2D array from <code>nums</code> satisfying the following conditions:</p>\n\n<ul>\n\t<li>The 2D array should contain <strong>only</strong> the elements of the array <code>nums</code>.</li>\n\t<li>Each row in the 2D array contains <strong>distinct</strong> integers.</li>\n\t<li>The number of rows in the 2D array should be <strong>minimal</strong>.</li>\n</ul>\n\n<p>Return <em>the resulting array</em>. If there are multiple answers, return any of them.</p>\n\n<p><strong>Note</strong> that the 2D array can have a different number of elements on each row.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,4,1,2,3,1]\n<strong>Output:</strong> [[1,3,4,2],[1,3],[1]]\n<strong>Explanation:</strong> We can create a 2D array that contains the following rows:\n- 1,3,4,2\n- 1,3\n- 1\nAll elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer.\nIt can be shown that we cannot have less than 3 rows in a valid array.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> [[4,3,2,1]]\n<strong>Explanation:</strong> All elements of the array are distinct, so we can keep all of them in the first row of the 2D array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= nums.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 479,
            "dislikes": 13,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                }
            ],
            "stats": "{\"totalAccepted\": \"36.3K\", \"totalSubmission\": \"43.5K\", \"totalAcceptedRaw\": 36300, \"totalSubmissionRaw\": 43489, \"acRate\": \"83.5%\"}",
            "hints": [
                "Process the elements in the array one by one in any order and only create a new row in the matrix when we cannot put it into the existing rows",
                "We can simply iterate over the existing rows of the matrix to see if we can place each element."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, construct a 2D array that satisfies the following conditions:\n\n*   The 2D array must contain all elements from `nums`.\n*   Each row in the 2D array must contain only distinct integers.\n*   The number of rows in the 2D array must be minimized.\n\nReturn the resulting 2D array.  Multiple valid solutions may exist; return any one of them.\n\nNote that rows in the 2D array can have varying lengths.",
                "constraints": [
                    "1 <= nums.length <= 200",
                    "1 <= nums[i] <= nums.length"
                ],
                "testcases": [
                    {
                        "input": "[1,3,4,1,2,3,1]",
                        "output": "[[1,3,4,2],[1,3],[1]]",
                        "explanation": "One possible 2D array is [[1,3,4,2],[1,3],[1]]. All elements from the input array are present, each row contains distinct integers, and it can be demonstrated that constructing the 2D array requires a minimum of 3 rows."
                    },
                    {
                        "input": "[1,2,3,4]",
                        "output": "[[4,3,2,1]]",
                        "explanation": "The input array contains distinct elements. Therefore, a single row containing all elements satisfies the requirements."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Process the elements in the array one by one in any order and only create a new row in the matrix when we cannot put it into the existing rows",
            "We can simply iterate over the existing rows of the matrix to see if we can place each element."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> findMatrix(vector<int>& nums) {\n    // The # of rows we need equals the max frequency.\n    vector<vector<int>> ans;\n    vector<int> count(nums.size() + 1);\n\n    for (const int num : nums) {\n      // Construct the `ans` on demand.\n      if (++count[num] > ans.size())\n        ans.push_back({});\n      ans[count[num] - 1].push_back(num);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> findMatrix(int[] nums) {\n    // The # of rows we need equals the max frequency.\n    List<List<Integer>> ans = new ArrayList<>();\n    int[] count = new int[nums.length + 1];\n\n    for (final int num : nums) {\n      // Construct the `ans` on demand.\n      if (++count[num] > ans.size())\n        ans.add(new ArrayList<>());\n      ans.get(count[num] - 1).add(num);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMatrix(self, nums: List[int]) -> List[List[int]]:\n    # The # of rows we need equals the max frequency.\n    ans = []\n    count = [0] * (len(nums) + 1)\n\n    for num in nums:\n      count[num] += 1\n      # Construct the `ans` on demand.\n      if count[num] > len(ans):\n        ans.append([])\n      ans[count[num] - 1].append(num)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}