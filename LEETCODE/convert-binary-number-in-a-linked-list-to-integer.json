{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1290",
            "title": "Convert Binary Number in a Linked List to Integer",
            "titleSlug": "convert-binary-number-in-a-linked-list-to-integer",
            "content": "<p>Given <code>head</code> which is a reference node to a singly-linked list. The value of each node in the linked list is either <code>0</code> or <code>1</code>. The linked list holds the binary representation of a number.</p>\n\n<p>Return the <em>decimal value</em> of the number in the linked list.</p>\n\n<p>The <strong>most significant bit</strong> is at the head of the linked list.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/05/graph-1.png\" style=\"width: 426px; height: 108px;\" />\n<pre>\n<strong>Input:</strong> head = [1,0,1]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> (101) in base 2 = (5) in base 10\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [0]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The Linked List is not empty.</li>\n\t<li>Number of nodes will not exceed <code>30</code>.</li>\n\t<li>Each node&#39;s value is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4039,
            "dislikes": 150,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Math",
                    "slug": "math"
                }
            ],
            "stats": "{\"totalAccepted\": \"436.6K\", \"totalSubmission\": \"536.9K\", \"totalAcceptedRaw\": 436616, \"totalSubmissionRaw\": 536917, \"acRate\": \"81.3%\"}",
            "hints": [
                "Traverse the linked list and store all values in a string or array. convert the values obtained to decimal value.",
                "You can solve the problem in O(1) memory using bits operation. use shift left operation ( << ) and or operation ( | ) to get the decimal value in one operation."
            ],
            "rephrased": {
                "body": "You are given the head of a singly-linked list where each node's value is either 0 or 1.  This linked list represents the binary representation of a number, with the most significant bit at the head. Convert this binary representation into its decimal equivalent.",
                "constraints": [
                    "The Linked List is not empty.",
                    "Number of nodes will not exceed 30.",
                    "Each node's value is either 0 or 1."
                ],
                "testcases": [
                    {
                        "input": "[1,0,1]",
                        "output": "5",
                        "explanation": "The binary number 101 is equal to 5 in decimal (1 * 2^2 + 0 * 2^1 + 1 * 2^0 = 4 + 0 + 1 = 5)."
                    },
                    {
                        "input": "[0]",
                        "output": "0",
                        "explanation": "The binary number 0 is equal to 0 in decimal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Traverse the linked list and store all values in a string or array. convert the values obtained to decimal value.",
            "You can solve the problem in O(1) memory using bits operation. use shift left operation ( << ) and or operation ( | ) to get the decimal value in one operation."
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int getDecimalValue(ListNode* head) {\n    int ans = 0;\n\n    for (; head; head = head->next)\n      ans = ans * 2 + head->val;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int getDecimalValue(ListNode head) {\n    int ans = 0;\n\n    for (; head != null; head = head.next)\n      ans = ans * 2 + head.val;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getDecimalValue(self, head: ListNode) -> int:\n    ans = 0\n\n    while head:\n      ans = ans * 2 + head.val\n      head = head.next\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}