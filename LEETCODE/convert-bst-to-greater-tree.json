{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "538",
            "title": "Convert BST to Greater Tree",
            "titleSlug": "convert-bst-to-greater-tree",
            "content": "<p>Given the <code>root</code> of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.</p>\n\n<p>As a reminder, a <em>binary search tree</em> is a tree that satisfies these constraints:</p>\n\n<ul>\n\t<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/05/02/tree.png\" style=\"width: 500px; height: 341px;\" />\n<pre>\n<strong>Input:</strong> root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n<strong>Output:</strong> [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [0,null,1]\n<strong>Output:</strong> [1,null,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>All the values in the tree are <strong>unique</strong>.</li>\n\t<li><code>root</code> is guaranteed to be a valid binary search tree.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 1038: <a href=\"https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/\" target=\"_blank\">https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/</a></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5084,
            "dislikes": 172,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"284.3K\", \"totalSubmission\": \"414.1K\", \"totalAcceptedRaw\": 284300, \"totalSubmissionRaw\": 414142, \"acRate\": \"68.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a Binary Search Tree (BST), modify the tree so that each node's value is replaced with the sum of all values greater than or equal to its original value in the BST.  This transformation converts the BST into a Greater Tree.",
                "constraints": [
                    "The number of nodes in the tree is in the range [0, 10<sup>4</sup>].",
                    "-10<sup>4</sup> <= Node.val <= 10<sup>4</sup>",
                    "All the values in the tree are unique.",
                    "root is guaranteed to be a valid binary search tree."
                ],
                "testcases": [
                    {
                        "input": "[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
                        "output": "[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
                        "explanation": "The original BST is transformed such that each node's value is replaced by the sum of itself and all greater values. For example, the node with value 4 is updated to 30 (4 + 6 + 7 + 8 + 5)."
                    },
                    {
                        "input": "[0,null,1]",
                        "output": "[1,null,1]",
                        "explanation": "The original BST is transformed such that each node's value is replaced by the sum of itself and all greater values. The node with value 0 is updated to 1 (0 + 1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* convertBST(TreeNode* root) {\n    int prefix = 0;\n    reversedInorder(root, prefix);\n    return root;\n  }\n\n private:\n  void reversedInorder(TreeNode* root, int& prefix) {\n    if (root == nullptr)\n      return;\n\n    reversedInorder(root->right, prefix);\n    prefix += root->val;\n    root->val = prefix;\n    reversedInorder(root->left, prefix);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode convertBST(TreeNode root) {\n    reversedInorder(root);\n    return root;\n  }\n\n  private int prefix = 0;\n\n  private void reversedInorder(TreeNode root) {\n    if (root == null)\n      return;\n\n    reversedInorder(root.right);\n    prefix += root.val;\n    root.val = prefix;\n    reversedInorder(root.left);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def convertBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n    prefix = 0\n\n    def reversedInorder(root: Optional[TreeNode]) -> None:\n      nonlocal prefix\n      if not root:\n        return\n\n      reversedInorder(root.right)\n      prefix += root.val\n      root.val = prefix\n      reversedInorder(root.left)\n\n    reversedInorder(root)\n    return root\n",
                "lang_text": "py"
            }
        }
    }
}