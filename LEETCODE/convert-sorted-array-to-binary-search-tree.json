{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "108",
            "title": "Convert Sorted Array to Binary Search Tree",
            "titleSlug": "convert-sorted-array-to-binary-search-tree",
            "content": "<p>Given an integer array <code>nums</code> where the elements are sorted in <strong>ascending order</strong>, convert <em>it to a </em><span data-keyword=\"height-balanced\"><strong><em>height-balanced</em></strong></span> <em>binary search tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg\" style=\"width: 302px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> nums = [-10,-3,0,5,9]\n<strong>Output:</strong> [0,-3,9,-10,null,5]\n<strong>Explanation:</strong> [0,-10,5,null,-3,null,9] is also accepted:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg\" style=\"width: 302px; height: 222px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/18/btree.jpg\" style=\"width: 342px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> nums = [1,3]\n<strong>Output:</strong> [3,1]\n<strong>Explanation:</strong> [1,null,3] and [3,1] are both height-balanced BSTs.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is sorted in a <strong>strictly increasing</strong> order.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 10582,
            "dislikes": 531,
            "similarQuestions": "[{\"title\": \"Convert Sorted List to Binary Search Tree\", \"titleSlug\": \"convert-sorted-list-to-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 1116591, \"totalSubmissionRaw\": 1570892, \"acRate\": \"71.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a sorted integer array `nums` in ascending order, construct a height-balanced binary search tree (BST). A height-balanced BST is a binary tree where the depth of the two subtrees of every node never differs by more than one.",
                "constraints": [
                    "1 <= nums.length <= 10^4",
                    "-10^4 <= nums[i] <= 10^4",
                    "`nums` is sorted in strictly increasing order."
                ],
                "testcases": [
                    {
                        "input": "[-10,-3,0,5,9]",
                        "output": "[0,-3,9,-10,null,5]",
                        "explanation": "Another valid output is [0,-10,5,null,-3,null,9]. The root node is 0, left child is -3 and right child is 9. The left child's left child is -10 and right child is null. The right child's left child is 5 and right child is null."
                    },
                    {
                        "input": "[1,3]",
                        "output": "[3,1]",
                        "explanation": "Other valid outputs include [1,null,3]. The tree should be height balanced"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "convert-sorted-list-to-binary-search-tree",
                "title": "Convert Sorted List to Binary Search Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* sortedArrayToBST(vector<int>& nums) {\n    return build(nums, 0, nums.size() - 1);\n  }\n\n private:\n  TreeNode* build(const vector<int>& nums, int l, int r) {\n    if (l > r)\n      return nullptr;\n    const int m = (l + r) / 2;\n    return new TreeNode(nums[m], build(nums, l, m - 1), build(nums, m + 1, r));\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode sortedArrayToBST(int[] nums) {\n    return build(nums, 0, nums.length - 1);\n  }\n\n  private TreeNode build(int[] nums, int l, int r) {\n    if (l > r)\n      return null;\n    final int m = (l + r) / 2;\n    return new TreeNode(nums[m], build(nums, l, m - 1), build(nums, m + 1, r));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n    def build(l: int, r: int) -> Optional[TreeNode]:\n      if l > r:\n        return None\n      m = (l + r) // 2\n      return TreeNode(nums[m],\n                      build(l, m - 1),\n                      build(m + 1, r))\n\n    return build(0, len(nums) - 1)\n",
                "lang_text": "py"
            }
        }
    }
}