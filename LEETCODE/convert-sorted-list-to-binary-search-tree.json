{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "109",
            "title": "Convert Sorted List to Binary Search Tree",
            "titleSlug": "convert-sorted-list-to-binary-search-tree",
            "content": "<p>Given the <code>head</code> of a singly linked list where elements are sorted in <strong>ascending order</strong>, convert <em>it to a </em><span data-keyword=\"height-balanced\"><strong><em>height-balanced</em></strong></span> <em>binary search tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/17/linked.jpg\" style=\"width: 500px; height: 388px;\" />\n<pre>\n<strong>Input:</strong> head = [-10,-3,0,5,9]\n<strong>Output:</strong> [0,-3,9,-10,null,5]\n<strong>Explanation:</strong> One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in <code>head</code> is in the range <code>[0, 2 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7265,
            "dislikes": 157,
            "similarQuestions": "[{\"title\": \"Convert Sorted Array to Binary Search Tree\", \"titleSlug\": \"convert-sorted-array-to-binary-search-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Create Binary Tree From Descriptions\", \"titleSlug\": \"create-binary-tree-from-descriptions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"504.4K\", \"totalSubmission\": \"822.8K\", \"totalAcceptedRaw\": 504373, \"totalSubmissionRaw\": 822835, \"acRate\": \"61.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.",
                "constraints": [
                    "The number of nodes in `head` is in the range `[0, 2 * 10^4]`.",
                    "`-10^5 <= Node.val <= 10^5`"
                ],
                "testcases": [
                    {
                        "input": "head = [-10,-3,0,5,9]",
                        "output": "[0,-3,9,-10,null,5]",
                        "explanation": "One possible answer is [0,-3,9,-10,null,5], which represents a height-balanced BST."
                    },
                    {
                        "input": "head = []",
                        "output": "[]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "convert-sorted-array-to-binary-search-tree",
                "title": "Convert Sorted Array to Binary Search Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "create-binary-tree-from-descriptions",
                "title": "Create Binary Tree From Descriptions",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* sortedListToBST(ListNode* head) {\n    if (head == nullptr)\n      return nullptr;\n    if (!head->next)\n      return new TreeNode(head->val);\n\n    ListNode* mid = findMid(head);\n    TreeNode* root = new TreeNode(mid->val);\n    root->left = sortedListToBST(head);\n    root->right = sortedListToBST(mid->next);\n\n    return root;\n  }\n\n private:\n  ListNode* findMid(ListNode* head) {\n    ListNode* prev = nullptr;\n    ListNode* slow = head;\n    ListNode* fast = head;\n\n    while (fast && fast->next) {\n      prev = slow;\n      slow = slow->next;\n      fast = fast->next->next;\n    }\n    prev->next = nullptr;\n\n    return slow;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode sortedListToBST(ListNode head) {\n    if (head == null)\n      return null;\n    if (head.next == null)\n      return new TreeNode(head.val);\n\n    ListNode mid = findMid(head);\n    TreeNode root = new TreeNode(mid.val);\n    root.left = sortedListToBST(head);\n    root.right = sortedListToBST(mid.next);\n\n    return root;\n  }\n\n  private ListNode findMid(ListNode head) {\n    ListNode prev = null;\n    ListNode slow = head;\n    ListNode fast = head;\n\n    while (fast != null && fast.next != null) {\n      prev = slow;\n      slow = slow.next;\n      fast = fast.next.next;\n    }\n    prev.next = null;\n\n    return slow;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sortedListToBST(self, head: ListNode) -> TreeNode:\n    def findMid(head: ListNode) -> ListNode:\n      prev = None\n      slow = head\n      fast = head\n\n      while fast and fast.next:\n        prev = slow\n        slow = slow.next\n        fast = fast.next.next\n      prev.next = None\n\n      return slow\n\n    if not head:\n      return None\n    if not head.next:\n      return TreeNode(head.val)\n\n    mid = findMid(head)\n    root = TreeNode(mid.val)\n    root.left = self.sortedListToBST(head)\n    root.right = self.sortedListToBST(mid.next)\n\n    return root\n",
                "lang_text": "py"
            }
        }
    }
}