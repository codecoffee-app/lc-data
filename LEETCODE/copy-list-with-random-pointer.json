{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "138",
            "title": "Copy List with Random Pointer",
            "titleSlug": "copy-list-with-random-pointer",
            "content": "<p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p>\n\n<p>Construct a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> of the list. The deep copy should consist of exactly <code>n</code> <strong>brand new</strong> nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. <strong>None of the pointers in the new list should point to nodes in the original list</strong>.</p>\n\n<p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p>\n\n<p>Return <em>the head of the copied linked list</em>.</p>\n\n<p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p>\n\n<ul>\n\t<li><code>val</code>: an integer representing <code>Node.val</code></li>\n\t<li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li>\n</ul>\n\n<p>Your code will <strong>only</strong> be given the <code>head</code> of the original linked list.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e1.png\" style=\"width: 700px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n<strong>Output:</strong> [[7,null],[13,0],[11,4],[10,2],[1,0]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e2.png\" style=\"width: 700px; height: 114px;\" />\n<pre>\n<strong>Input:</strong> head = [[1,1],[2,1]]\n<strong>Output:</strong> [[1,1],[2,1]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e3.png\" style=\"width: 700px; height: 122px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> head = [[3,null],[3,0],[3,null]]\n<strong>Output:</strong> [[3,null],[3,0],[3,null]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 13298,
            "dislikes": 1375,
            "similarQuestions": "[{\"title\": \"Clone Graph\", \"titleSlug\": \"clone-graph\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Clone Binary Tree With Random Pointer\", \"titleSlug\": \"clone-binary-tree-with-random-pointer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Clone N-ary Tree\", \"titleSlug\": \"clone-n-ary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 1146666, \"totalSubmissionRaw\": 2088690, \"acRate\": \"54.9%\"}",
            "hints": [
                "Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due to the random pointers, ensure you are not making multiple copies of the same node.",
                "You may want to use extra space to keep old_node ---> new_node mapping to prevent creating multiple copies of the same node.",
                "We can avoid using extra space for old_node ---> new_node mapping by tweaking the original linked list. Simply interweave the nodes of the old and copied list. For example:\r\nOld List: A --> B --> C --> D\r\nInterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'",
                "The interweaving is done using next</b> pointers and we can make use of interweaved structure to get the correct reference nodes for random</b> pointers."
            ],
            "rephrased": {
                "body": "Given a linked list of length 'n' where each node contains a value and a random pointer (which can be null or point to any node in the list), create a deep copy of the list.  The deep copy should consist of 'n' new nodes with the same values as the original. The 'next' and 'random' pointers of the new nodes should mirror the structure of the original list, but point to nodes within the copied list, not the original.  Return the head of the newly created copied list.",
                "constraints": [
                    "0 <= n <= 1000",
                    "-10^4 <= Node.val <= 10^4",
                    "Node.random is null or points to a node in the linked list."
                ],
                "testcases": [
                    {
                        "input": "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
                        "output": "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
                        "explanation": "The copied list should mirror the original, with the random pointers correctly mapped to the corresponding new nodes. For example, node with value 13 has a random pointer to node with value 7"
                    },
                    {
                        "input": "[[1,1],[2,1]]",
                        "output": "[[1,1],[2,1]]",
                        "explanation": "The copied list should mirror the original, with the random pointers correctly mapped to the corresponding new nodes. For example, node with value 1 has a random pointer to node with value 2"
                    },
                    {
                        "input": "[[3,null],[3,0],[3,null]]",
                        "output": "[[3,null],[3,0],[3,null]]",
                        "explanation": "The copied list should mirror the original, with the random pointers correctly mapped to the corresponding new nodes.  Note how the random pointer can be null."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "clone-graph",
                "title": "Clone Graph",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "clone-binary-tree-with-random-pointer",
                "title": "Clone Binary Tree With Random Pointer",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "clone-n-ary-tree",
                "title": "Clone N-ary Tree",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due to the random pointers, ensure you are not making multiple copies of the same node.",
            "You may want to use extra space to keep old_node ---> new_node mapping to prevent creating multiple copies of the same node.",
            "We can avoid using extra space for old_node ---> new_node mapping by tweaking the original linked list. Simply interweave the nodes of the old and copied list. For example:\r\nOld List: A --> B --> C --> D\r\nInterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'",
            "The interweaving is done using next</b> pointers and we can make use of interweaved structure to get the correct reference nodes for random</b> pointers."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  Node* copyRandomList(Node* head) {\n    if (head == nullptr)\n      return nullptr;\n    if (const auto it = map.find(head); it != map.cend())\n      return it->second;\n\n    Node* newNode = new Node(head->val);\n    map[head] = newNode;\n    newNode->next = copyRandomList(head->next);\n    newNode->random = copyRandomList(head->random);\n    return newNode;\n  }\n\n private:\n  unordered_map<Node*, Node*> map;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public Node copyRandomList(Node head) {\n    if (head == null)\n      return null;\n    if (map.containsKey(head))\n      return map.get(head);\n\n    Node newNode = new Node(head.val);\n    map.put(head, newNode);\n    newNode.next = copyRandomList(head.next);\n    newNode.random = copyRandomList(head.random);\n    return newNode;\n  }\n\n  private Map<Node, Node> map = new HashMap<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def copyRandomList(self, head: 'Node') -> 'Node':\n    if not head:\n      return None\n    if head in self.map:\n      return self.map[head]\n\n    newNode = Node(head.val)\n    self.map[head] = newNode\n    newNode.next = self.copyRandomList(head.next)\n    newNode.random = self.copyRandomList(head.random)\n    return newNode\n\n  map = {}\n",
                "lang_text": "py"
            }
        }
    }
}