{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1359",
            "title": "Count All Valid Pickup and Delivery Options",
            "titleSlug": "count-all-valid-pickup-and-delivery-options",
            "content": "<p>Given <code>n</code> orders, each order consists of a pickup and a delivery service.</p>\n\n<p>Count all valid pickup/delivery possible sequences such that delivery(i) is always after of&nbsp;pickup(i).&nbsp;</p>\n\n<p>Since the answer&nbsp;may be too large,&nbsp;return it modulo&nbsp;10^9 + 7.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Unique order (P1, D1), Delivery 1 always is after of Pickup 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> All possible orders: \n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 90\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2971,
            "dislikes": 219,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                }
            ],
            "stats": "{\"totalAccepted\": \"117.7K\", \"totalSubmission\": \"180.2K\", \"totalAcceptedRaw\": 117748, \"totalSubmissionRaw\": 180203, \"acRate\": \"65.3%\"}",
            "hints": [
                "Use the permutation and combination theory to add one (P, D) pair each time until n pairs."
            ],
            "rephrased": {
                "body": "Given `n` orders, where each order consists of a pickup and a delivery service, determine the number of valid pickup/delivery sequences such that the delivery of each order `i` always occurs after the pickup of that order `i`. Return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= n <= 500"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "With one order (P1, D1), the only valid sequence is where Delivery 1 follows Pickup 1."
                    },
                    {
                        "input": "2",
                        "output": "6",
                        "explanation": "With two orders, the valid sequences are (P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1), and (P2,D2,P1,D1). For example, (P1,D2,P2,D1) is invalid because Pickup 2 occurs after Delivery 2."
                    },
                    {
                        "input": "3",
                        "output": "90",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use the permutation and combination theory to add one (P, D) pair each time until n pairs."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countOrders(int n) {\n    constexpr int kMod = 1'000'000'007;\n    long ans = 1;\n\n    for (int i = 1; i <= n; ++i)\n      ans = ans * i * (i * 2 - 1) % kMod;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countOrders(int n) {\n    final int kMod = 1_000_000_007;\n    long ans = 1;\n\n    for (int i = 1; i <= n; ++i)\n      ans = ans * i * (i * 2 - 1) % kMod;\n\n    return (int) ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countOrders(self, n: int) -> int:\n    kMod = 1_000_000_007\n    ans = 1\n\n    for i in range(1, n + 1):\n      ans = ans * i * (i * 2 - 1) % kMod\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}