{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3267",
            "title": "Count Almost Equal Pairs II",
            "titleSlug": "count-almost-equal-pairs-ii",
            "content": "<p><strong>Attention</strong>: In this version, the number of operations that can be performed, has been increased to <strong>twice</strong>.<!-- notionvc: 278e7cb2-3b05-42fa-8ae9-65f5fd6f7585 --></p>\n\n<p>You are given an array <code>nums</code> consisting of positive integers.</p>\n\n<p>We call two integers <code>x</code> and <code>y</code> <strong>almost equal</strong> if both integers can become equal after performing the following operation <strong>at most <u>twice</u></strong>:</p>\n\n<ul>\n\t<li>Choose <strong>either</strong> <code>x</code> or <code>y</code> and swap any two digits within the chosen number.</li>\n</ul>\n\n<p>Return the number of indices <code>i</code> and <code>j</code> in <code>nums</code> where <code>i &lt; j</code> such that <code>nums[i]</code> and <code>nums[j]</code> are <strong>almost equal</strong>.</p>\n\n<p><strong>Note</strong> that it is allowed for an integer to have leading zeros after performing an operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1023,2310,2130,213]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The almost equal pairs of elements are:</p>\n\n<ul>\n\t<li>1023 and 2310. By swapping the digits 1 and 2, and then the digits 0 and 3 in 1023, you get 2310.</li>\n\t<li>1023 and 213. By swapping the digits 1 and 0, and then the digits 1 and 2 in 1023, you get 0213, which is 213.</li>\n\t<li>2310 and 213. By swapping the digits 2 and 0, and then the digits 3 and 2 in 2310, you get 0213, which is 213.</li>\n\t<li>2310 and 2130. By swapping the digits 3 and 1 in 2310, you get 2130.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,10,100]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The almost equal pairs of elements are:</p>\n\n<ul>\n\t<li>1 and 10. By swapping the digits 1 and 0 in 10, you get 01 which is 1.</li>\n\t<li>1 and 100. By swapping the second 0 with the digit 1 in 100, you get 001, which is 1.</li>\n\t<li>10 and 100. By swapping the first 0 with the digit 1 in 100, you get 010, which is 10.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt; 10<sup>7</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 67,
            "dislikes": 21,
            "similarQuestions": "[{\"title\": \"Find the Occurrence of First Almost Equal Substring\", \"titleSlug\": \"find-the-occurrence-of-first-almost-equal-substring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.2K\", \"totalSubmission\": \"25K\", \"totalAcceptedRaw\": 5164, \"totalSubmissionRaw\": 24970, \"acRate\": \"20.7%\"}",
            "hints": [
                "For each element, find all possible integers we can get by applying the operations.",
                "Store the frequencies of all the integers in a hashmap."
            ],
            "rephrased": {
                "body": "Given an array `nums` of positive integers, determine the number of pairs (i, j) where i < j and `nums[i]` and `nums[j]` are 'almost equal'. Two integers, x and y, are considered 'almost equal' if they can be made identical by performing at most two digit swaps on either x or y. Leading zeros are permitted after a swap.",
                "constraints": [
                    "2 <= nums.length <= 5000",
                    "1 <= nums[i] < 10^7"
                ],
                "testcases": [
                    {
                        "input": "[1023,2310,2130,213]",
                        "output": "4",
                        "explanation": "The almost equal pairs are:\n- 1023 and 2310: Two swaps on 1023 (1<->2, 0<->3) result in 2310.\n- 1023 and 213: Two swaps on 1023 (1<->0, 1<->2) result in 0213 (213).\n- 2310 and 213: Two swaps on 2310 (2<->0, 3<->2) result in 0213 (213).\n- 2310 and 2130: One swap on 2310 (3<->1) results in 2130."
                    },
                    {
                        "input": "[1,10,100]",
                        "output": "3",
                        "explanation": "The almost equal pairs are:\n- 1 and 10: One swap on 10 (1<->0) results in 01 (1).\n- 1 and 100: One swap on 100 (1<->second 0) results in 001 (1).\n- 10 and 100: One swap on 100 (1<->first 0) results in 010 (10)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "find-the-occurrence-of-first-almost-equal-substring",
                "title": "Find the Occurrence of First Almost Equal Substring",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each element, find all possible integers we can get by applying the operations.",
            "Store the frequencies of all the integers in a hashmap."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Counting",
                "slug": "counting"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Similar to 3265. Count Almost Equal Pairs I\n  int countPairs(vector<int>& nums) {\n    int ans = 0;\n    unordered_map<int, int> count;\n    const int maxLen = to_string(ranges::max(nums)).length();\n\n    for (const int num : nums) {\n      const string digits =\n          string(maxLen - to_string(num).length(), '0') + to_string(num);\n      for (const int swap : getSwaps(digits))\n        ans += count[swap];\n      ++count[num];\n    }\n\n    return ans;\n  }\n\n private:\n  // Returns all possible numbers after 1 or 2 swaps.\n  unordered_set<int> getSwaps(const string& digits) {\n    const int n = digits.length();\n    unordered_set<int> swaps{{stoi(digits)}};\n\n    // Add all numbers after 1 swap.\n    for (int i = 0; i < n; ++i)\n      for (int j = i + 1; j < n; ++j) {\n        string newDigits = digits;\n        swap(newDigits[i], newDigits[j]);\n        swaps.insert(stoi(newDigits));\n      }\n\n    // Add all numbers after 2 swaps.\n    for (int i1 = 0; i1 < n; ++i1)\n      for (int j1 = i1 + 1; j1 < n; ++j1)\n        for (int i2 = 0; i2 < n; ++i2)\n          for (int j2 = i2 + 1; j2 < n; ++j2) {\n            string newDigits = digits;\n            swap(newDigits[i1], newDigits[j1]);\n            swap(newDigits[i2], newDigits[j2]);\n            swaps.insert(stoi(newDigits));\n          }\n\n    return swaps;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 3265. Count Almost Equal Pairs I\n  public int countPairs(int[] nums) {\n    int ans = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n    final int maxLen = String.valueOf(Arrays.stream(nums).max().getAsInt()).length();\n\n    for (final int num : nums) {\n      final String digits = String.format(\"%0\" + maxLen + \"d\", num);\n      for (final int swap : getSwaps(digits))\n        ans += count.getOrDefault(swap, 0);\n      count.merge(num, 1, Integer::sum);\n    }\n\n    return ans;\n  }\n\n  // Returns all possible numbers after 1 or 2 swaps.\n  private Set<Integer> getSwaps(final String digits) {\n    final int n = digits.length();\n    Set<Integer> swaps = new HashSet<>(Arrays.asList(Integer.parseInt(digits)));\n\n    // Add all numbers after 1 swap.\n    for (int i = 0; i < n; ++i)\n      for (int j = i + 1; j < n; ++j) {\n        char[] newDigits = digits.toCharArray();\n        char temp = newDigits[i];\n        newDigits[i] = newDigits[j];\n        newDigits[j] = temp;\n        swaps.add(Integer.parseInt(new String(newDigits)));\n      }\n\n    // Add all numbers after 2 swaps.\n    for (int i1 = 0; i1 < n; ++i1)\n      for (int j1 = i1 + 1; j1 < n; ++j1)\n        for (int i2 = 0; i2 < n; ++i2)\n          for (int j2 = i2 + 1; j2 < n; ++j2) {\n            char[] newDigits = digits.toCharArray();\n            char temp = newDigits[i1];\n            newDigits[i1] = newDigits[j1];\n            newDigits[j1] = temp;\n            temp = newDigits[i2];\n            newDigits[i2] = newDigits[j2];\n            newDigits[j2] = temp;\n            swaps.add(Integer.parseInt(new String(newDigits)));\n          }\n\n    return swaps;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Similar to 3265. Count Almost Equal Pairs I\n  def countPairs(self, nums: list[int]) -> int:\n    ans = 0\n    count = collections.Counter()\n    maxLen = len(str(max(nums)))\n\n    for num in nums:\n      digits = list(str(num).zfill(maxLen))\n      for swap in self._getSwaps(digits):\n        ans += count[swap]\n      count[num] += 1\n\n    return ans\n\n  def _getSwaps(self, digits: str) -> set[int]:\n    \"\"\"Returns all possible numbers after 1 or 2 swaps.\"\"\"\n    n = len(digits)\n    swaps = set([int(''.join(digits))])\n\n    # Add all numbers after 1 swap.\n    for i, j in itertools.combinations(range(n), 2):\n      newDigits = digits[:]\n      newDigits[i], newDigits[j] = newDigits[j], newDigits[i]\n      swaps.add(int(''.join(newDigits)))\n\n    # Add all numbers after 2 swaps.\n    for (i1, j1), (i2, j2) in itertools.combinations(\n            itertools.combinations(range(n), 2), 2):\n      newDigits = digits[:]\n      newDigits[i1], newDigits[j1] = newDigits[j1], newDigits[i1]\n      newDigits[i2], newDigits[j2] = newDigits[j2], newDigits[i2]\n      swaps.add(int(''.join(newDigits)))\n\n    return swaps\n",
                "lang_text": "py"
            }
        }
    }
}