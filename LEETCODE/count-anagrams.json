{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2514",
            "title": "Count Anagrams",
            "titleSlug": "count-anagrams",
            "content": "<p>You are given a string <code>s</code> containing one or more words. Every consecutive pair of words is separated by a single space <code>&#39; &#39;</code>.</p>\n\n<p>A string <code>t</code> is an <strong>anagram</strong> of string <code>s</code> if the <code>i<sup>th</sup></code> word of <code>t</code> is a <strong>permutation</strong> of the <code>i<sup>th</sup></code> word of <code>s</code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;acb dfe&quot;</code> is an anagram of <code>&quot;abc def&quot;</code>, but <code>&quot;def cab&quot;</code>&nbsp;and <code>&quot;adc bef&quot;</code> are not.</li>\n</ul>\n\n<p>Return <em>the number of <strong>distinct anagrams</strong> of </em><code>s</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;too hot&quot;\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> Some of the anagrams of the given string are &quot;too hot&quot;, &quot;oot hot&quot;, &quot;oto toh&quot;, &quot;too toh&quot;, and &quot;too oht&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only one anagram possible for the given string.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li>There is single space between consecutive words.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 365,
            "dislikes": 29,
            "similarQuestions": "[{\"title\": \"Group Anagrams\", \"titleSlug\": \"group-anagrams\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Ways to Build Rooms in an Ant Colony\", \"titleSlug\": \"count-ways-to-build-rooms-in-an-ant-colony\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"9K\", \"totalSubmission\": \"27.8K\", \"totalAcceptedRaw\": 9007, \"totalSubmissionRaw\": 27784, \"acRate\": \"32.4%\"}",
            "hints": [
                "For each word, can you count the number of permutations possible if all characters are distinct?",
                "How to reduce overcounting when letters are repeated?",
                "The product of the counts of distinct permutations of all words will give the final answer."
            ],
            "rephrased": {
                "body": "Given a string `s` containing one or more words separated by single spaces, determine the number of distinct anagrams of `s`. A string `t` is an anagram of `s` if the i-th word of `t` is a permutation of the i-th word of `s`. Return the number of distinct anagrams modulo 10^9 + 7.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists of lowercase English letters and spaces ' '.",
                    "There is a single space between consecutive words."
                ],
                "testcases": [
                    {
                        "input": "too hot",
                        "output": 18,
                        "explanation": "Some anagrams of the given string are \"too hot\", \"oot hot\", \"oto toh\", \"too toh\", and \"too oht\"."
                    },
                    {
                        "input": "aa",
                        "output": 1,
                        "explanation": "There is only one anagram possible for the given string."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "group-anagrams",
                "title": "Group Anagrams",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-ways-to-build-rooms-in-an-ant-colony",
                "title": "Count Ways to Build Rooms in an Ant Colony",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each word, can you count the number of permutations possible if all characters are distinct?",
            "How to reduce overcounting when letters are repeated?",
            "The product of the counts of distinct permutations of all words will give the final answer."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countAnagrams(string s) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = s.length();\n    const auto [fact, invFact] = getFactAndInvFact(n, kMod);\n    int ans = 1;\n    istringstream iss(s);\n\n    for (string word; iss >> word;) {\n      ans = ans * fact[word.length()] % kMod;\n      vector<int> count(26);\n      for (const char c : word)\n        ++count[c - 'a'];\n      for (const int freq : count)\n        ans = ans * invFact[freq] % kMod;\n    }\n\n    return ans;\n  }\n\n private:\n  pair<vector<long>, vector<long>> getFactAndInvFact(int n, int kMod) {\n    vector<long> fact(n + 1);\n    vector<long> invFact(n + 1);\n    vector<long> inv(n + 1);\n    fact[0] = invFact[0] = 1;\n    inv[0] = inv[1] = 1;\n    for (int i = 1; i <= n; ++i) {\n      if (i >= 2)\n        inv[i] = kMod - kMod / i * inv[kMod % i] % kMod;\n      fact[i] = fact[i - 1] * i % kMod;\n      invFact[i] = invFact[i - 1] * inv[i] % kMod;\n    }\n    return {fact, invFact};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countAnagrams(String s) {\n    final int kMod = 1_000_000_007;\n    final int n = s.length();\n    final long[][] factAndInvFact = getFactAndInvFact(n, kMod);\n    final long[] fact = factAndInvFact[0];\n    final long[] invFact = factAndInvFact[1];\n    long ans = 1;\n\n    for (final String word : s.split(\" \")) {\n      ans = ans * fact[word.length()] % kMod;\n      int[] count = new int[26];\n      for (final char c : word.toCharArray())\n        ++count[c - 'a'];\n      for (final int freq : count)\n        ans = ans * invFact[freq] % kMod;\n    }\n\n    return (int) ans;\n  }\n\n  private long[][] getFactAndInvFact(int n, int kMod) {\n    long[] fact = new long[n + 1];\n    long[] invFact = new long[n + 1];\n    long[] inv = new long[n + 1];\n    fact[0] = invFact[0] = 1;\n    inv[0] = inv[1] = 1;\n    for (int i = 1; i <= n; ++i) {\n      if (i >= 2)\n        inv[i] = kMod - kMod / i * inv[kMod % i] % kMod;\n      fact[i] = fact[i - 1] * i % kMod;\n      invFact[i] = invFact[i - 1] * inv[i] % kMod;\n    }\n    return new long[][] {fact, invFact};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countAnagrams(self, s: str) -> int:\n    ans = 1\n\n    for word in s.split():\n      ans = ans * math.factorial(len(word))\n      count = collections.Counter(word)\n      for freq in count.values():\n        ans //= math.factorial(freq)\n\n    return ans % 1_000_000_007\n",
                "lang_text": "py"
            }
        }
    }
}