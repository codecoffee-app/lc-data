{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2201",
            "title": "Count Artifacts That Can Be Extracted",
            "titleSlug": "count-artifacts-that-can-be-extracted",
            "content": "<p>There is an <code>n x n</code> <strong>0-indexed</strong> grid with some artifacts buried in it. You are given the integer <code>n</code> and a <strong>0-indexed </strong>2D integer array <code>artifacts</code> describing the positions of the rectangular artifacts where <code>artifacts[i] = [r1<sub>i</sub>, c1<sub>i</sub>, r2<sub>i</sub>, c2<sub>i</sub>]</code> denotes that the <code>i<sup>th</sup></code> artifact is buried in the subgrid where:</p>\n\n<ul>\n\t<li><code>(r1<sub>i</sub>, c1<sub>i</sub>)</code> is the coordinate of the <strong>top-left</strong> cell of the <code>i<sup>th</sup></code> artifact and</li>\n\t<li><code>(r2<sub>i</sub>, c2<sub>i</sub>)</code> is the coordinate of the <strong>bottom-right</strong> cell of the <code>i<sup>th</sup></code> artifact.</li>\n</ul>\n\n<p>You will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. If all the parts of an artifact are uncovered, you can extract it.</p>\n\n<p>Given a <strong>0-indexed</strong> 2D integer array <code>dig</code> where <code>dig[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> indicates that you will excavate the cell <code>(r<sub>i</sub>, c<sub>i</sub>)</code>, return <em>the number of artifacts that you can extract</em>.</p>\n\n<p>The test cases are generated such that:</p>\n\n<ul>\n\t<li>No two artifacts overlap.</li>\n\t<li>Each artifact only covers at most <code>4</code> cells.</li>\n\t<li>The entries of <code>dig</code> are unique.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/16/untitled-diagram.jpg\" style=\"width: 216px; height: 216px;\" />\n<pre>\n<strong>Input:</strong> n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nThe different colors represent different artifacts. Excavated cells are labeled with a &#39;D&#39; in the grid.\nThere is 1 artifact that can be extracted, namely the red artifact.\nThe blue artifact has one part in cell (1,1) which remains uncovered, so we cannot extract it.\nThus, we return 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/16/untitled-diagram-1.jpg\" style=\"width: 216px; height: 216px;\" />\n<pre>\n<strong>Input:</strong> n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1],[1,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Both the red and blue artifacts have all parts uncovered (labeled with a &#39;D&#39;) and can be extracted, so we return 2. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= artifacts.length, dig.length &lt;= min(n<sup>2</sup>, 10<sup>5</sup>)</code></li>\n\t<li><code>artifacts[i].length == 4</code></li>\n\t<li><code>dig[i].length == 2</code></li>\n\t<li><code>0 &lt;= r1<sub>i</sub>, c1<sub>i</sub>, r2<sub>i</sub>, c2<sub>i</sub>, r<sub>i</sub>, c<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>r1<sub>i</sub> &lt;= r2<sub>i</sub></code></li>\n\t<li><code>c1<sub>i</sub> &lt;= c2<sub>i</sub></code></li>\n\t<li>No two artifacts will overlap.</li>\n\t<li>The number of cells covered by an artifact is <strong>at most</strong> <code>4</code>.</li>\n\t<li>The entries of <code>dig</code> are unique.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 198,
            "dislikes": 191,
            "similarQuestions": "[{\"title\": \"Maximal Square\", \"titleSlug\": \"maximal-square\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.5K\", \"totalSubmission\": \"33.1K\", \"totalAcceptedRaw\": 18504, \"totalSubmissionRaw\": 33098, \"acRate\": \"55.9%\"}",
            "hints": [
                "Check if each coordinate of each artifact has been excavated. How can we do this quickly without iterating over the dig array every time?",
                "Consider marking all excavated cells in a 2D boolean array."
            ],
            "rephrased": {
                "body": "Given an n x n grid with buried artifacts, represented by their top-left and bottom-right coordinates in the `artifacts` array, determine how many artifacts can be extracted after excavating cells specified in the `dig` array. An artifact can be extracted if all its cells are excavated. No two artifacts overlap, each artifact covers at most 4 cells, and the dig coordinates are unique.",
                "constraints": [
                    "1 <= n <= 1000",
                    "1 <= artifacts.length, dig.length <= min(n^2, 10^5)",
                    "artifacts[i].length == 4",
                    "dig[i].length == 2",
                    "0 <= r1_i, c1_i, r2_i, c2_i, r_i, c_i <= n - 1",
                    "r1_i <= r2_i",
                    "c1_i <= c2_i",
                    "No two artifacts will overlap.",
                    "The number of cells covered by an artifact is at most 4.",
                    "The entries of `dig` are unique."
                ],
                "testcases": [
                    {
                        "input": "n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1]]",
                        "output": "1",
                        "explanation": "One artifact (the one at [0,0,0,0]) can be extracted because both its cells are dug. The other artifact at [0,1,1,1] cannot be fully extracted because the cell (1,1) is not dug."
                    },
                    {
                        "input": "n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1],[1,1]]",
                        "output": "2",
                        "explanation": "Both artifacts are fully extracted because all cells covered by both artifacts are dug."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximal-square",
                "title": "Maximal Square",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Check if each coordinate of each artifact has been excavated. How can we do this quickly without iterating over the dig array every time?",
            "Consider marking all excavated cells in a 2D boolean array."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int digArtifacts(int n, vector<vector<int>>& artifacts,\n                   vector<vector<int>>& dig) {\n    unordered_set<int> digged;\n\n    for (const vector<int>& d : dig)\n      digged.insert(hash(d[0], d[1]));\n\n    return count_if(artifacts.begin(), artifacts.end(),\n                    [&](const auto& a) { return canExtract(a, digged); });\n  }\n\n private:\n  int hash(int i, int j) {\n    return i << 16 | j;\n  }\n\n  bool canExtract(const vector<int>& a, const unordered_set<int>& digged) {\n    for (int i = a[0]; i <= a[2]; ++i)\n      for (int j = a[1]; j <= a[3]; ++j)\n        if (!digged.count(hash(i, j)))\n          return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int digArtifacts(int n, int[][] artifacts, int[][] dig) {\n    Set<Integer> digged = new HashSet<>();\n\n    for (int[] d : dig)\n      digged.add(hash(d[0], d[1]));\n\n    return (int) Arrays.stream(artifacts).filter(a -> canExtract(a, digged)).count();\n  }\n\n  private int hash(int i, int j) {\n    return i << 16 | j;\n  }\n\n  private boolean canExtract(int[] a, Set<Integer> digged) {\n    for (int i = a[0]; i <= a[2]; ++i)\n      for (int j = a[1]; j <= a[3]; ++j)\n        if (!digged.contains(hash(i, j)))\n          return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def digArtifacts(self, n: int, artifacts: List[List[int]], dig: List[List[int]]) -> int:\n    digged = set((r, c) for r, c in dig)\n\n    def canExtract(a: List[int]) -> bool:\n      for i in range(a[0], a[2] + 1):\n        for j in range(a[1], a[3] + 1):\n          if (i, j) not in digged:\n            return False\n      return True\n\n    return sum(canExtract(a) for a in artifacts)\n",
                "lang_text": "py"
            }
        }
    }
}