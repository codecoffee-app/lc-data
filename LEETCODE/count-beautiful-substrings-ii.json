{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2949",
            "title": "Count Beautiful Substrings II",
            "titleSlug": "count-beautiful-substrings-ii",
            "content": "<p>You are given a string <code>s</code> and a positive integer <code>k</code>.</p>\n\n<p>Let <code>vowels</code> and <code>consonants</code> be the number of vowels and consonants in a string.</p>\n\n<p>A string is <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li><code>vowels == consonants</code>.</li>\n\t<li><code>(vowels * consonants) % k == 0</code>, in other terms the multiplication of <code>vowels</code> and <code>consonants</code> is divisible by <code>k</code>.</li>\n</ul>\n\n<p>Return <em>the number of <strong>non-empty beautiful substrings</strong> in the given string</em> <code>s</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>\n\n<p><strong>Vowel letters</strong> in English are <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>.</p>\n\n<p><strong>Consonant letters</strong> in English are every letter except vowels.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;baeyh&quot;, k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 beautiful substrings in the given string.\n- Substring &quot;b<u>aeyh</u>&quot;, vowels = 2 ([&quot;a&quot;,e&quot;]), consonants = 2 ([&quot;y&quot;,&quot;h&quot;]).\nYou can see that string &quot;aeyh&quot; is beautiful as vowels == consonants and vowels * consonants % k == 0.\n- Substring &quot;<u>baey</u>h&quot;, vowels = 2 ([&quot;a&quot;,e&quot;]), consonants = 2 ([&quot;b&quot;,&quot;y&quot;]).\nYou can see that string &quot;baey&quot; is beautiful as vowels == consonants and vowels * consonants % k == 0.\nIt can be shown that there are only 2 beautiful substrings in the given string.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abba&quot;, k = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 beautiful substrings in the given string.\n- Substring &quot;<u>ab</u>ba&quot;, vowels = 1 ([&quot;a&quot;]), consonants = 1 ([&quot;b&quot;]).\n- Substring &quot;ab<u>ba</u>&quot;, vowels = 1 ([&quot;a&quot;]), consonants = 1 ([&quot;b&quot;]).\n- Substring &quot;<u>abba</u>&quot;, vowels = 2 ([&quot;a&quot;,&quot;a&quot;]), consonants = 2 ([&quot;b&quot;,&quot;b&quot;]).\nIt can be shown that there are only 3 beautiful substrings in the given string.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bcdf&quot;, k = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no beautiful substrings in the given string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 1000</code></li>\n\t<li><code>s</code> consists of only English lowercase letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 166,
            "dislikes": 6,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.8K\", \"totalSubmission\": \"19.1K\", \"totalAcceptedRaw\": 4756, \"totalSubmissionRaw\": 19121, \"acRate\": \"24.9%\"}",
            "hints": [
                "For the given <code>k</code> find all the <code>x</code> integers such that <code>x^2 % k == 0</code>. Notice, that there aren\u2019t many such candidates.",
                "We can iterate over all such <code>x</codes> values and count the number of substrings such that <code>vowels == consonants == x</code>.",
                "This can be done with prefix sums and hash map."
            ],
            "rephrased": {
                "body": "Given a string `s` and a positive integer `k`, find the number of non-empty beautiful substrings in `s`. A string is considered beautiful if the number of vowels equals the number of consonants, and the product of the number of vowels and consonants is divisible by `k`. Vowels are 'a', 'e', 'i', 'o', and 'u', and consonants are all other lowercase English letters. A substring is a contiguous sequence of characters within a string.",
                "constraints": [
                    "1 <= s.length <= 5 * 10^4",
                    "1 <= k <= 1000",
                    "s consists of only English lowercase letters."
                ],
                "testcases": [
                    {
                        "input": "{\"s\": \"baeyh\", \"k\": 2}",
                        "output": "2",
                        "explanation": "The beautiful substrings are \"aeyh\" (2 vowels, 2 consonants, 2*2 % 2 == 0) and \"baey\" (2 vowels, 2 consonants, 2*2 % 2 == 0)."
                    },
                    {
                        "input": "{\"s\": \"abba\", \"k\": 1}",
                        "output": "3",
                        "explanation": "The beautiful substrings are \"ab\" (1 vowel, 1 consonant, 1*1 % 1 == 0), \"ba\" (1 vowel, 1 consonant, 1*1 % 1 == 0), and \"abba\" (2 vowels, 2 consonants, 2*2 % 1 == 0)."
                    },
                    {
                        "input": "{\"s\": \"bcdf\", \"k\": 1}",
                        "output": "0",
                        "explanation": "There are no substrings where the number of vowels equals the number of consonants."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For the given <code>k</code> find all the <code>x</code> integers such that <code>x^2 % k == 0</code>. Notice, that there aren\u2019t many such candidates.",
            "We can iterate over all such <code>x</codes> values and count the number of substrings such that <code>vowels == consonants == x</code>.",
            "This can be done with prefix sums and hash map."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Same as 2947. Count Beautiful Substrings I\n  int beautifulSubstrings(string s, int k) {\n    const int root = getRoot(k);\n    int ans = 0;\n    int vowels = 0;\n    int vowelsMinusConsonants = 0;\n    // {(vowels, vowelsMinusConsonants): count}\n    unordered_map<pair<int, int>, int, PairHash> prefixCount{{{0, 0}, 1}};\n\n    for (const char c : s) {\n      if (isVowel(c)) {\n        vowels = (vowels + 1) % root;\n        ++vowelsMinusConsonants;\n      } else {\n        --vowelsMinusConsonants;\n      }\n      const pair<int, int> prefix{vowels, vowelsMinusConsonants};\n      ans += prefixCount[prefix]++;\n    }\n\n    return ans;\n  }\n\n private:\n  bool isVowel(char c) {\n    static constexpr string_view kVowels = \"aeiouAEIOU\";\n    return kVowels.find(c) != string_view::npos;\n  }\n\n  int getRoot(int k) {\n    for (int i = 1; i <= k; ++i)\n      if (i * i % k == 0)\n        return i;\n    throw;\n  }\n\n  struct PairHash {\n    size_t operator()(const pair<int, int>& p) const {\n      return p.first ^ p.second;\n    }\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Same as 2947. Count Beautiful Substrings I\n  public int beautifulSubstrings(String s, int k) {\n    final int root = getRoot(k);\n    int ans = 0;\n    int vowels = 0;\n    int vowelsMinusConsonants = 0;\n    // {(vowels, vowelsMinusConsonants): count}\n    Map<Pair<Integer, Integer>, Integer> prefixCount = new HashMap<>();\n    prefixCount.put(new Pair<>(0, 0), 1);\n\n    for (final char c : s.toCharArray()) {\n      if (isVowel(c)) {\n        vowels = (vowels + 1) % root;\n        ++vowelsMinusConsonants;\n      } else {\n        --vowelsMinusConsonants;\n      }\n      Pair<Integer, Integer> prefix = new Pair<>(vowels, vowelsMinusConsonants);\n      ans += prefixCount.getOrDefault(prefix, 0);\n      prefixCount.merge(prefix, 1, Integer::sum);\n    }\n\n    return ans;\n  }\n\n  private boolean isVowel(char c) {\n    return \"aeiou\".indexOf(c) != -1;\n  }\n\n  private int getRoot(int k) {\n    for (int i = 1; i <= k; ++i)\n      if (i * i % k == 0)\n        return i;\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Same as 2947. Count Beautiful Substrings I\n  def beautifulSubstrings(self, s: str, k: int) -> int:\n    kVowels = 'aeiou'\n    root = self._getRoot(k)\n    ans = 0\n    vowels = 0\n    vowelsMinusConsonants = 0\n    # {(vowels, vowelsMinusConsonants): count}\n    prefixCount = collections.Counter({(0, 0): 1})\n\n    for c in s:\n      if c in kVowels:\n        vowelsMinusConsonants += 1\n        vowels = (vowels + 1) % root\n      else:\n        vowelsMinusConsonants -= 1\n      ans += prefixCount[(vowels, vowelsMinusConsonants)]\n      prefixCount[(vowels, vowelsMinusConsonants)] += 1\n\n    return ans\n\n  def _getRoot(self, k: int) -> int:\n    for i in range(1, k + 1):\n      if i * i % k == 0:\n        return i\n",
                "lang_text": "py"
            }
        }
    }
}