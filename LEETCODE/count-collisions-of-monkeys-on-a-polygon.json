{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2550",
            "title": "Count Collisions of Monkeys on a Polygon",
            "titleSlug": "count-collisions-of-monkeys-on-a-polygon",
            "content": "<p>There is a regular convex polygon with <code>n</code> vertices. The vertices are labeled from <code>0</code> to <code>n - 1</code> in a clockwise direction, and each vertex has <strong>exactly one monkey</strong>. The following figure shows a convex polygon of <code>6</code> vertices.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/22/hexagon.jpg\" style=\"width: 300px; height: 293px;\" />\n<p>Each monkey moves simultaneously to a neighboring vertex. A neighboring vertex for a vertex <code>i</code> can be:</p>\n\n<ul>\n\t<li>the vertex <code>(i + 1) % n</code> in the clockwise direction, or</li>\n\t<li>the vertex <code>(i - 1 + n) % n</code> in the counter-clockwise direction.</li>\n</ul>\n\n<p>A <strong>collision</strong> happens if at least two monkeys reside on the same vertex after the movement or intersect&nbsp;on an edge.</p>\n\n<p>Return <em>the number of ways the monkeys can move so that at least <strong>one collision</strong></em> <em> happens</em>. Since the answer may be very large, return it modulo <code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p><strong>Note</strong> that each monkey can only move once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 8 total possible movements.\nTwo ways such that they collide at some point are:\n- Monkey 1 moves in a clockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. Monkeys 1 and 2 collide.\n- Monkey 1 moves in an anticlockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. Monkeys 1 and 3 collide.\nIt can be shown 6 total movements result in a collision.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> It can be shown that there are 14 ways for the monkeys to collide.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 172,
            "dislikes": 480,
            "similarQuestions": "[{\"title\": \"Pow(x, n)\", \"titleSlug\": \"powx-n\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"18K\", \"totalSubmission\": \"66.3K\", \"totalAcceptedRaw\": 17952, \"totalSubmissionRaw\": 66344, \"acRate\": \"27.1%\"}",
            "hints": [
                "Try counting the number of ways in which the monkeys will not collide."
            ],
            "rephrased": {
                "body": "N monkeys are positioned on the vertices of a regular n-sided convex polygon, labeled from 0 to n-1 in clockwise order. Each monkey simultaneously moves to an adjacent vertex, either clockwise or counter-clockwise. A collision occurs if two or more monkeys end up on the same vertex or cross paths on an edge during their move. Determine the number of ways the monkeys can move such that at least one collision happens. Return the result modulo 10^9 + 7.",
                "constraints": [
                    "3 <= n <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 3",
                        "output": "6",
                        "explanation": "There are 2^3 = 8 total possible movements.  The only two collision-free scenarios are when all monkeys move clockwise or all monkeys move counter-clockwise. Therefore, 8 - 2 = 6 ways result in a collision."
                    },
                    {
                        "input": "n = 4",
                        "output": "14",
                        "explanation": "There are 2^4 = 16 total possible movements. Only two movements lead to no collision: all monkeys move clockwise or all monkeys move counter-clockwise.  Thus, 16 - 2 = 14 ways result in a collision."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "powx-n",
                "title": "Pow(x, n)",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try counting the number of ways in which the monkeys will not collide."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int monkeyMove(int n) {\n    const int res = modPow(2, n) - 2;\n    return res < 0 ? res + kMod : res;\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n\n  int modPow(long x, int n) {\n    if (n == 0)\n      return 1;\n    if (n & 1)\n      return x * modPow(x, n - 1) % kMod;\n    return modPow(x * x % kMod, n / 2);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int monkeyMove(int n) {\n    final int res = (int) modPow(2, n) - 2;\n    return res < 0 ? res + kMod : res;\n  }\n\n  private static final int kMod = 1_000_000_007;\n\n  private long modPow(long x, int n) {\n    if (n == 0)\n      return 1;\n    if (n % 2 == 1)\n      return x * modPow(x, n - 1) % kMod;\n    return modPow(x * x % kMod, n / 2);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def monkeyMove(self, n: int) -> int:\n    kMod = 1_000_000_007\n    res = pow(2, n, kMod) - 2\n    return res + kMod if res < 0 else res\n",
                "lang_text": "py"
            }
        }
    }
}