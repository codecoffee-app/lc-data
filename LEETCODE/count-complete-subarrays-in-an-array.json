{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2799",
            "title": "Count Complete Subarrays in an Array",
            "titleSlug": "count-complete-subarrays-in-an-array",
            "content": "<p>You are given an array <code>nums</code> consisting of <strong>positive</strong> integers.</p>\n\n<p>We call a subarray of an array <strong>complete</strong> if the following condition is satisfied:</p>\n\n<ul>\n\t<li>The number of <strong>distinct</strong> elements in the subarray is equal to the number of distinct elements in the whole array.</li>\n</ul>\n\n<p>Return <em>the number of <strong>complete</strong> subarrays</em>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous non-empty part of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,1,2,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,5,5,5]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 2000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 545,
            "dislikes": 13,
            "similarQuestions": "[{\"title\": \"Longest Substring Without Repeating Characters\", \"titleSlug\": \"longest-substring-without-repeating-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subarrays with K Different Integers\", \"titleSlug\": \"subarrays-with-k-different-integers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"38.6K\", \"totalSubmission\": \"59.5K\", \"totalAcceptedRaw\": 38564, \"totalSubmissionRaw\": 59452, \"acRate\": \"64.9%\"}",
            "hints": [
                "Let\u2019s say k is the number of distinct elements in the array. Our goal is to find the number of subarrays with k distinct elements.",
                "Since the constraints are small, you can check every subarray."
            ],
            "rephrased": {
                "body": "Given an array `nums` of positive integers, a subarray is considered **complete** if the number of distinct elements in the subarray is equal to the number of distinct elements in the entire array `nums`.  Return the number of **complete** subarrays.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "1 <= nums[i] <= 2000"
                ],
                "testcases": [
                    {
                        "input": "[1,3,1,2,2]",
                        "output": "4",
                        "explanation": "The complete subarrays are: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].  Each of these subarrays contains the same distinct elements (1, 2, and 3) as the entire input array."
                    },
                    {
                        "input": "[5,5,5,5]",
                        "output": "10",
                        "explanation": "The array consists only of the integer 5. Since any subarray will contain only the distinct element 5, every subarray is complete. The total number of possible subarrays is 10."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-substring-without-repeating-characters",
                "title": "Longest Substring Without Repeating Characters",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "subarrays-with-k-different-integers",
                "title": "Subarrays with K Different Integers",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let\u2019s say k is the number of distinct elements in the array. Our goal is to find the number of subarrays with k distinct elements.",
            "Since the constraints are small, you can check every subarray."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countCompleteSubarrays(vector<int>& nums) {\n    constexpr int kMax = 2000;\n    const int totalDistinct =\n        unordered_set<int>(nums.begin(), nums.end()).size();\n    int ans = 0;\n    int distinct = 0;\n    vector<int> count(kMax + 1);\n\n    int l = 0;\n    for (const int num : nums) {\n      if (++count[num] == 1)\n        ++distinct;\n      while (distinct == totalDistinct)\n        if (--count[nums[l++]] == 0)\n          --distinct;\n      // Assume nums[r] = num,\n      // nums[0..r], nums[1..r], ..., nums[l - 1..r] have k different values\n      ans += l;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countCompleteSubarrays(int[] nums) {\n    final int kMax = 2000;\n    final int totalDistinct = Arrays.stream(nums).boxed().collect(Collectors.toSet()).size();\n    int ans = 0;\n    int distinct = 0;\n    int[] count = new int[kMax + 1];\n\n    int l = 0;\n    for (final int num : nums) {\n      if (++count[num] == 1)\n        ++distinct;\n      while (distinct == totalDistinct)\n        if (--count[nums[l++]] == 0)\n          --distinct;\n      // Assume nums[r] = num,\n      // nums[0..r], nums[1..r], ..., nums[l - 1..r] have k different values\n      ans += l;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countCompleteSubarrays(self, nums: List[int]) -> int:\n    ans = 0\n    distinct = len(set(nums))\n    count = collections.Counter()\n\n    l = 0\n    for num in nums:\n      count[num] += 1\n      while len(count) == distinct:\n        count[nums[l]] -= 1\n        if count[nums[l]] == 0:\n          del count[nums[l]]\n        l += 1\n      # Assume nums[r] = num,\n      # nums[0..r], nums[1..r], ..., nums[l - 1..r] have k different values\n      ans += l\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}