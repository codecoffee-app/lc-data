{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2953",
            "title": "Count Complete Substrings",
            "titleSlug": "count-complete-substrings",
            "content": "<p>You are given a string <code>word</code> and an integer <code>k</code>.</p>\n\n<p>A substring <code>s</code> of <code>word</code> is <strong>complete</strong> if:</p>\n\n<ul>\n\t<li>Each character in <code>s</code> occurs <strong>exactly</strong> <code>k</code> times.</li>\n\t<li>The difference between two adjacent characters is <strong>at most</strong> <code>2</code>. That is, for any two adjacent characters <code>c1</code> and <code>c2</code> in <code>s</code>, the absolute difference in their positions in the alphabet is <strong>at most</strong> <code>2</code>.</li>\n</ul>\n\n<p>Return <em>the number of <strong>complete </strong>substrings of</em> <code>word</code>.</p>\n\n<p>A <strong>substring</strong> is a <strong>non-empty</strong> contiguous sequence of characters in a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;igigee&quot;, k = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The complete substrings where each character appears exactly twice and the difference between adjacent characters is at most 2 are: <u><strong>igig</strong></u>ee, igig<u><strong>ee</strong></u>, <u><strong>igigee</strong></u>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;aaabbbccc&quot;, k = 3\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The complete substrings where each character appears exactly three times and the difference between adjacent characters is at most 2 are: <strong><u>aaa</u></strong>bbbccc, aaa<u><strong>bbb</strong></u>ccc, aaabbb<u><strong>ccc</strong></u>, <strong><u>aaabbb</u></strong>ccc, aaa<u><strong>bbbccc</strong></u>, <u><strong>aaabbbccc</strong></u>.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n\t<li><code>1 &lt;= k &lt;= word.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 186,
            "dislikes": 32,
            "similarQuestions": "[{\"title\": \"Number of Substrings Containing All Three Characters\", \"titleSlug\": \"number-of-substrings-containing-all-three-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Substrings Without Repeating Character\", \"titleSlug\": \"count-substrings-without-repeating-character\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.3K\", \"totalSubmission\": \"23.6K\", \"totalAcceptedRaw\": 6328, \"totalSubmissionRaw\": 23552, \"acRate\": \"26.9%\"}",
            "hints": [
                "There are at most 26 different lengths of the complete substrings: <code>k *1, k * 2, \u2026 k * 26</code>.****",
                "For each length, we can use sliding window to count the frequency of each letter in the window.",
                "We still need to check for all characters in the window that <code>abs(word[i] - word[i - 1]) <= 2</code>. We do this by maintaining the values of <code>abs(word[i] - word[i - 1])</code> in the sliding window dynamically in an ordered multiset or priority queue, so that we know the maximum value at each iteration."
            ],
            "rephrased": {
                "body": "Given a string `word` and an integer `k`, find the number of complete substrings of `word`. A substring `s` is considered complete if each character in `s` appears exactly `k` times and the absolute difference between the positions in the alphabet of any two adjacent characters in `s` is at most 2.",
                "constraints": [
                    "1 <= word.length <= 10^5",
                    "word consists only of lowercase English letters.",
                    "1 <= k <= word.length"
                ],
                "testcases": [
                    {
                        "input": "{\"word\": \"igigee\", \"k\": 2}",
                        "output": "3",
                        "explanation": "The complete substrings are \"igig\", \"ee\", and \"igigee\".  Each of these substrings contains only characters that appear exactly twice.  The difference in alphabet position between adjacent characters in each substring is also at most 2."
                    },
                    {
                        "input": "{\"word\": \"aaabbbccc\", \"k\": 3}",
                        "output": "6",
                        "explanation": "The complete substrings are \"aaa\", \"bbb\", \"ccc\", \"aaabbb\", \"bbbccc\", and \"aaabbbccc\". Each of these substrings contains only characters that appear exactly three times. The difference in alphabet position between adjacent characters in each substring is also at most 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-substrings-containing-all-three-characters",
                "title": "Number of Substrings Containing All Three Characters",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-substrings-without-repeating-character",
                "title": "Count Substrings Without Repeating Character",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "There are at most 26 different lengths of the complete substrings: <code>k *1, k * 2, \u2026 k * 26</code>.****",
            "For each length, we can use sliding window to count the frequency of each letter in the window.",
            "We still need to check for all characters in the window that <code>abs(word[i] - word[i - 1]) <= 2</code>. We do this by maintaining the values of <code>abs(word[i] - word[i - 1])</code> in the sliding window dynamically in an ordered multiset or priority queue, so that we know the maximum value at each iteration."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countCompleteSubstrings(string word, int k) {\n    const int uniqueLetters =\n        unordered_set<char>{word.begin(), word.end()}.size();\n    int ans = 0;\n\n    for (int windowSize = k;\n         windowSize <= k * uniqueLetters && windowSize <= word.length();\n         windowSize += k)\n      ans += countCompleteStrings(word, k, windowSize);\n\n    return ans;\n  }\n\n private:\n  // Returns the number of complete substrings of `windowSize` of `word`.\n  int countCompleteStrings(const string& word, int k, int windowSize) {\n    int res = 0;\n    int countLetters = 0;  // the number of letters in the running substring\n    vector<int> count(26);\n\n    for (int i = 0; i < word.length(); ++i) {\n      ++count[word[i] - 'a'];\n      ++countLetters;\n      if (i > 0 && abs(word[i] - word[i - 1]) > 2) {\n        count = vector<int>(26);\n        // Start a new substring starting at word[i].\n        ++count[word[i] - 'a'];\n        countLetters = 1;\n      }\n      if (countLetters == windowSize + 1) {\n        --count[word[i - windowSize] - 'a'];\n        --countLetters;\n      }\n      if (countLetters == windowSize)\n        res += ranges::all_of(count,\n                              [k](int freq) { return freq == 0 || freq == k; })\n                   ? 1\n                   : 0;\n    }\n\n    return res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countCompleteSubstrings(String word, int k) {\n    final int uniqueLetters = word.chars().boxed().collect(Collectors.toSet()).size();\n    int ans = 0;\n\n    for (int windowSize = k; windowSize <= k * uniqueLetters && windowSize <= word.length();\n         windowSize += k) {\n      ans += countCompleteStrings(word, k, windowSize);\n    }\n\n    return ans;\n  }\n\n  // Returns the number of complete substrings of `windowSize` of `word`.\n  private int countCompleteStrings(final String word, int k, int windowSize) {\n    int res = 0;\n    int countLetters = 0; // the number of letters in the running substring\n    int[] count = new int[26];\n\n    for (int i = 0; i < word.length(); ++i) {\n      ++count[word.charAt(i) - 'a'];\n      ++countLetters;\n      if (i > 0 && Math.abs(word.charAt(i) - word.charAt(i - 1)) > 2) {\n        count = new int[26];\n        // Start a new substring starting at word[i].\n        ++count[word.charAt(i) - 'a'];\n        countLetters = 1;\n      }\n      if (countLetters == windowSize + 1) {\n        --count[word.charAt(i - windowSize) - 'a'];\n        --countLetters;\n      }\n      if (countLetters == windowSize)\n        res += Arrays.stream(count).allMatch(freq -> freq == 0 || freq == k) ? 1 : 0;\n    }\n\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countCompleteSubstrings(self, word: str, k: int) -> int:\n    uniqueLetters = len(set(word))\n    return sum(self._countCompleteStrings(word, k, windowSize)\n               for windowSize in range(k, k * uniqueLetters + 1, k))\n\n  def _countCompleteStrings(self, word: str, k: int, windowSize: int) -> int:\n    \"\"\"\n    Returns the number of complete substrings of `windowSize` of `word`.\n    \"\"\"\n    res = 0\n    countLetters = 0  # the number of letters in the running substring\n    count = collections.Counter()\n\n    for i, c in enumerate(word):\n      count[c] += 1\n      countLetters += 1\n      if i > 0 and abs(ord(c) - ord(word[i - 1])) > 2:\n        count = collections.Counter()\n        # Start a new substring starting at word[i].\n        count[c] += 1\n        countLetters = 1\n      if countLetters == windowSize + 1:\n        count[word[i - windowSize]] -= 1\n        countLetters -= 1\n      if countLetters == windowSize:\n        res += all(freq == 0 or freq == k for freq in count.values())\n\n    return res\n",
                "lang_text": "py"
            }
        }
    }
}