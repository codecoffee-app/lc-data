{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3169",
            "title": "Count Days Without Meetings",
            "titleSlug": "count-days-without-meetings",
            "content": "<p>You are given a positive integer <code>days</code> representing the total number of days an employee is available for work (starting from day 1). You are also given a 2D array <code>meetings</code> of size <code>n</code> where, <code>meetings[i] = [start_i, end_i]</code> represents the starting and ending days of meeting <code>i</code> (inclusive).</p>\n\n<p>Return the count of days when the employee is available for work but no meetings are scheduled.</p>\n\n<p><strong>Note: </strong>The meetings may overlap.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">days = 10, meetings = [[5,7],[1,3],[9,10]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no meeting scheduled on the 4<sup>th</sup> and 8<sup>th</sup> days.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">days = 5, meetings = [[2,4],[1,3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no meeting scheduled on the 5<sup>th </sup>day.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">days = 6, meetings = [[1,6]]</span></p>\n\n<p><strong>Output:</strong> 0</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Meetings are scheduled for all working days.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= days &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= meetings.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>meetings[i].length == 2</code></li>\n\t<li><code><font face=\"monospace\">1 &lt;= meetings[i][0] &lt;= meetings[i][1] &lt;= days</font></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 177,
            "dislikes": 5,
            "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"34K\", \"totalSubmission\": \"102.1K\", \"totalAcceptedRaw\": 34037, \"totalSubmissionRaw\": 102107, \"acRate\": \"33.3%\"}",
            "hints": [
                "Merge the overlapping meetings and sort the new meetings timings.",
                "Return the sum of difference between the end time of a meeting and the start time of the next meeting for all adjacent pairs."
            ],
            "rephrased": {
                "body": "Given a positive integer `days` representing the total number of days an employee is available for work (starting from day 1), and a 2D array `meetings` where `meetings[i] = [start_i, end_i]` represents the start and end days of meeting `i` (inclusive), determine the number of days the employee is available for work but has no meetings scheduled. Note that meetings may overlap.",
                "constraints": [
                    "1 <= days <= 10^9",
                    "1 <= meetings.length <= 10^5",
                    "meetings[i].length == 2",
                    "1 <= meetings[i][0] <= meetings[i][1] <= days"
                ],
                "testcases": [
                    {
                        "input": "days = 10, meetings = [[5,7],[1,3],[9,10]]",
                        "output": "2",
                        "explanation": "The employee is free on days 4 and 8."
                    },
                    {
                        "input": "days = 5, meetings = [[2,4],[1,3]]",
                        "output": "1",
                        "explanation": "The employee is free only on day 5."
                    },
                    {
                        "input": "days = 6, meetings = [[1,6]]",
                        "output": "0",
                        "explanation": "The employee is occupied on all days."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "merge-intervals",
                "title": "Merge Intervals",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Merge the overlapping meetings and sort the new meetings timings.",
            "Return the sum of difference between the end time of a meeting and the start time of the next meeting for all adjacent pairs."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countDays(int days, vector<vector<int>>& meetings) {\n    int freeDays = 0;\n    int prevEnd = 0;\n\n    ranges::sort(meetings);\n\n    for (const vector<int>& meeting : meetings) {\n      const int start = meeting[0];\n      const int end = meeting[1];\n      if (start > prevEnd)\n        freeDays += start - prevEnd - 1;\n      prevEnd = max(prevEnd, end);\n    }\n\n    return freeDays + max(0, days - prevEnd);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countDays(int days, int[][] meetings) {\n    int freeDays = 0;\n    int prevEnd = 0;\n\n    Arrays.sort(meetings, (a, b) -> a[0] - b[0]);\n\n    for (int[] meeting : meetings) {\n      final int start = meeting[0];\n      final int end = meeting[1];\n      if (start > prevEnd)\n        freeDays += start - prevEnd - 1;\n      prevEnd = Math.max(prevEnd, end);\n    }\n\n    return freeDays + Math.max(0, days - prevEnd);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countDays(self, days: int, meetings: List[List[int]]) -> int:\n    freeDays = 0\n    prevEnd = 0\n\n    for start, end in sorted(meetings):\n      if start > prevEnd:\n        freeDays += start - prevEnd - 1\n      prevEnd = max(prevEnd, end)\n\n    return freeDays + max(0, days - prevEnd)\n",
                "lang_text": "py"
            }
        }
    }
}