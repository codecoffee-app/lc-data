{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1711",
            "title": "Count Good Meals",
            "titleSlug": "count-good-meals",
            "content": "<p>A <strong>good meal</strong> is a meal that contains <strong>exactly two different food items</strong> with a sum of deliciousness equal to a power of two.</p>\n\n<p>You can pick <strong>any</strong> two different foods to make a good meal.</p>\n\n<p>Given an array of integers <code>deliciousness</code> where <code>deliciousness[i]</code> is the deliciousness of the <code>i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup>\u200b\u200b\u200b\u200b</code>\u200b\u200b\u200b\u200b item of food, return <em>the number of different <strong>good meals</strong> you can make from this list modulo</em> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Note that items with different indices are considered different even if they have the same deliciousness value.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> deliciousness = [1,3,5,7,9]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>The good meals are (1,3), (1,7), (3,5) and, (7,9).\nTheir respective sums are 4, 8, 8, and 16, all of which are powers of 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> deliciousness = [1,1,1,3,3,3,7]\n<strong>Output:</strong> 15\n<strong>Explanation: </strong>The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= deliciousness.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= deliciousness[i] &lt;= 2<sup>20</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 989,
            "dislikes": 232,
            "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Max Number of K-Sum Pairs\", \"titleSlug\": \"max-number-of-k-sum-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find All Possible Recipes from Given Supplies\", \"titleSlug\": \"find-all-possible-recipes-from-given-supplies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                }
            ],
            "stats": "{\"totalAccepted\": \"36.2K\", \"totalSubmission\": \"120.9K\", \"totalAcceptedRaw\": 36152, \"totalSubmissionRaw\": 120934, \"acRate\": \"29.9%\"}",
            "hints": [
                "Note that the number of powers of 2 is at most 21 so this turns the problem to a classic find the number of pairs that sum to a certain value but for 21 values",
                "You need to use something fasters than the NlogN approach since there is already the log of iterating over the powers so one idea is two pointers"
            ],
            "rephrased": {
                "body": "Given an array `deliciousness` where `deliciousness[i]` represents the deliciousness of the i-th food item, determine the number of different 'good meals' that can be made. A 'good meal' consists of exactly two different food items whose sum of deliciousness values is a power of two. Return the number of good meals modulo 10^9 + 7. Note that items with different indices are considered different, even if their deliciousness values are the same.",
                "constraints": [
                    "1 <= deliciousness.length <= 10^5",
                    "0 <= deliciousness[i] <= 2^20"
                ],
                "testcases": [
                    {
                        "input": "[1,3,5,7,9]",
                        "output": "4",
                        "explanation": "The good meals are (1,3), (1,7), (3,5), and (7,9). Their respective sums are 4, 8, 8, and 16, all of which are powers of 2."
                    },
                    {
                        "input": "[1,1,1,3,3,3,7]",
                        "output": "15",
                        "explanation": "The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "two-sum",
                "title": "Two Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "max-number-of-k-sum-pairs",
                "title": "Max Number of K-Sum Pairs",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-all-possible-recipes-from-given-supplies",
                "title": "Find All Possible Recipes from Given Supplies",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Note that the number of powers of 2 is at most 21 so this turns the problem to a classic find the number of pairs that sum to a certain value but for 21 values",
            "You need to use something fasters than the NlogN approach since there is already the log of iterating over the powers so one idea is two pointers"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countPairs(vector<int>& deliciousness) {\n    constexpr int kMod = 1'000'000'007;\n    constexpr int kMaxBit = 20 + 1;\n    const int kMaxPower = pow(2, kMaxBit);\n    int ans = 0;\n    unordered_map<int, int> count;\n\n    for (const int d : deliciousness) {\n      for (int power = 1; power <= kMaxPower; power *= 2)\n        if (const auto it = count.find(power - d); it != count.cend()) {\n          ans += it->second;\n          ans %= kMod;\n        }\n      ++count[d];\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countPairs(int[] deliciousness) {\n    final int kMod = 1_000_000_007;\n    final int kMaxBit = 20 + 1;\n    final int kMaxPower = (int) Math.pow(2, kMaxBit);\n    int ans = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (final int d : deliciousness) {\n      for (int power = 1; power <= kMaxPower; power *= 2) {\n        ans += count.getOrDefault(power - d, 0);\n        ans %= kMod;\n      }\n      count.merge(d, 1, Integer::sum);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countPairs(self, deliciousness: List[int]) -> int:\n    kMod = 10**9 + 7\n    kMaxBit = 20 + 1\n    ans = 0\n    count = collections.Counter()\n\n    for d in deliciousness:\n      for i in range(kMaxBit + 1):\n        power = 1 << i\n        ans += count[power - d]\n        ans %= kMod\n      count[d] += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}