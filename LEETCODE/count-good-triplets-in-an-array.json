{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2179",
            "title": "Count Good Triplets in an Array",
            "titleSlug": "count-good-triplets-in-an-array",
            "content": "<p>You are given two <strong>0-indexed</strong> arrays <code>nums1</code> and <code>nums2</code> of length <code>n</code>, both of which are <strong>permutations</strong> of <code>[0, 1, ..., n - 1]</code>.</p>\n\n<p>A <strong>good triplet</strong> is a set of <code>3</code> <strong>distinct</strong> values which are present in <strong>increasing order</strong> by position both in <code>nums1</code> and <code>nums2</code>. In other words, if we consider <code>pos1<sub>v</sub></code> as the index of the value <code>v</code> in <code>nums1</code> and <code>pos2<sub>v</sub></code> as the index of the value <code>v</code> in <code>nums2</code>, then a good triplet will be a set <code>(x, y, z)</code> where <code>0 &lt;= x, y, z &lt;= n - 1</code>, such that <code>pos1<sub>x</sub> &lt; pos1<sub>y</sub> &lt; pos1<sub>z</sub></code> and <code>pos2<sub>x</sub> &lt; pos2<sub>y</sub> &lt; pos2<sub>z</sub></code>.</p>\n\n<p>Return <em>the <strong>total number</strong> of good triplets</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2,0,1,3], nums2 = [0,1,2,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nThere are 4 triplets (x,y,z) such that pos1<sub>x</sub> &lt; pos1<sub>y</sub> &lt; pos1<sub>z</sub>. They are (2,0,1), (2,0,3), (2,1,3), and (0,1,3). \nOut of those triplets, only the triplet (0,1,3) satisfies pos2<sub>x</sub> &lt; pos2<sub>y</sub> &lt; pos2<sub>z</sub>. Hence, there is only 1 good triplet.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= n - 1</code></li>\n\t<li><code>nums1</code> and <code>nums2</code> are permutations of <code>[0, 1, ..., n - 1]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 589,
            "dislikes": 24,
            "similarQuestions": "[{\"title\": \"Count of Smaller Numbers After Self\", \"titleSlug\": \"count-of-smaller-numbers-after-self\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Increasing Triplet Subsequence\", \"titleSlug\": \"increasing-triplet-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Create Sorted Array through Instructions\", \"titleSlug\": \"create-sorted-array-through-instructions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Good Paths\", \"titleSlug\": \"number-of-good-paths\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Increasing Quadruplets\", \"titleSlug\": \"count-increasing-quadruplets\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Merge Sort",
                    "slug": "merge-sort"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.4K\", \"totalSubmission\": \"18.3K\", \"totalAcceptedRaw\": 7426, \"totalSubmissionRaw\": 18270, \"acRate\": \"40.6%\"}",
            "hints": [
                "For every value y, how can you find the number of values x  (0 \u2264 x, y \u2264 n - 1) such that x appears before y in both of the arrays?",
                "Similarly, for every value y, try finding the number of values z (0 \u2264 y, z \u2264 n - 1) such that z appears after y in both of the arrays.",
                "Now, for every value y, count the number of good triplets that can be formed if y is considered as the middle element."
            ],
            "rephrased": {
                "body": "Given two 0-indexed arrays, `nums1` and `nums2`, of length `n`, both representing permutations of the numbers from 0 to `n-1`. A good triplet (x, y, z) is defined as a set of three distinct values that appear in increasing order by their positions in both arrays. Specifically, if `pos1[v]` is the index of value `v` in `nums1` and `pos2[v]` is the index of value `v` in `nums2`, then (x, y, z) forms a good triplet if `pos1[x] < pos1[y] < pos1[z]` and `pos2[x] < pos2[y] < pos2[z]`. Determine the total number of good triplets.",
                "constraints": [
                    "n == nums1.length == nums2.length",
                    "3 <= n <= 10^5",
                    "0 <= nums1[i], nums2[i] <= n - 1",
                    "`nums1` and `nums2` are permutations of `[0, 1, ..., n - 1]`"
                ],
                "testcases": [
                    {
                        "input": {
                            "nums1": [
                                2,
                                0,
                                1,
                                3
                            ],
                            "nums2": [
                                0,
                                1,
                                2,
                                3
                            ]
                        },
                        "output": 1,
                        "explanation": "The possible triplets based on `nums1` order are (2,0,1), (2,0,3), (2,1,3), and (0,1,3). Only (0, 1, 3) satisfies the increasing order condition in `nums2` as well. Therefore, the count of good triplets is 1."
                    },
                    {
                        "input": {
                            "nums1": [
                                4,
                                0,
                                1,
                                3,
                                2
                            ],
                            "nums2": [
                                4,
                                1,
                                0,
                                2,
                                3
                            ]
                        },
                        "output": 4,
                        "explanation": "The good triplets in this case are (4,0,3), (4,0,2), (4,1,3), and (4,1,2)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-of-smaller-numbers-after-self",
                "title": "Count of Smaller Numbers After Self",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "increasing-triplet-subsequence",
                "title": "Increasing Triplet Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "create-sorted-array-through-instructions",
                "title": "Create Sorted Array through Instructions",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-good-paths",
                "title": "Number of Good Paths",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-increasing-quadruplets",
                "title": "Count Increasing Quadruplets",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For every value y, how can you find the number of values x  (0 \u2264 x, y \u2264 n - 1) such that x appears before y in both of the arrays?",
            "Similarly, for every value y, try finding the number of values z (0 \u2264 y, z \u2264 n - 1) such that z appears after y in both of the arrays.",
            "Now, for every value y, count the number of good triplets that can be formed if y is considered as the middle element."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class FenwickTree {\n public:\n  FenwickTree(int n) : sums(n + 1) {}\n\n  void update(int i, int delta) {\n    while (i < sums.size()) {\n      sums[i] += delta;\n      i += lowbit(i);\n    }\n  }\n\n  int get(int i) const {\n    int sum = 0;\n    while (i > 0) {\n      sum += sums[i];\n      i -= lowbit(i);\n    }\n    return sum;\n  }\n\n private:\n  vector<int> sums;\n\n  static inline int lowbit(int i) {\n    return i & -i;\n  }\n};\n\nclass Solution {\n public:\n  long long goodTriplets(vector<int>& nums1, vector<int>& nums2) {\n    const int n = nums1.size();\n    long long ans = 0;\n    unordered_map<int, int> numToIndex;\n    vector<int> A;\n    // leftSmaller[i] := # of A[j] < A[i], where 0 <= j < i\n    vector<int> leftSmaller(n);\n    // rightLarger[i] := # of A[j] > A[i], where i < j < n\n    vector<int> rightLarger(n);\n    FenwickTree tree1(n);  // To calculate leftSmaller\n    FenwickTree tree2(n);  // To calculate rightLarger\n\n    for (int i = 0; i < n; ++i)\n      numToIndex[nums1[i]] = i;\n\n    // Remap each num in nums2 to the according index in nums1 as A\n    // Then, rephrase the problem as finding increasing tripets in A\n    for (const int num : nums2)\n      A.push_back(numToIndex[num]);\n\n    for (int i = 0; i < n; ++i) {\n      leftSmaller[i] = tree1.get(A[i]);\n      tree1.update(A[i] + 1, 1);\n    }\n\n    for (int i = n - 1; i >= 0; --i) {\n      rightLarger[i] = tree2.get(n) - tree2.get(A[i]);\n      tree2.update(A[i] + 1, 1);\n    }\n\n    for (int i = 0; i < n; ++i)\n      ans += static_cast<long>(leftSmaller[i]) * rightLarger[i];\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class FenwickTree {\n  public FenwickTree(int n) {\n    sums = new int[n + 1];\n  }\n\n  public void update(int i, int delta) {\n    while (i < sums.length) {\n      sums[i] += delta;\n      i += lowbit(i);\n    }\n  }\n\n  public int get(int i) {\n    int sum = 0;\n    while (i > 0) {\n      sum += sums[i];\n      i -= lowbit(i);\n    }\n    return sum;\n  }\n\n  private int[] sums;\n\n  private static int lowbit(int i) {\n    return i & -i;\n  }\n}\n\nclass Solution {\n  public long goodTriplets(int[] nums1, int[] nums2) {\n    final int n = nums1.length;\n    long ans = 0;\n    Map<Integer, Integer> numToIndex = new HashMap<>();\n    int[] A = new int[n];\n    // leftSmaller[i] := # of A[j] < A[i], where 0 <= j < i\n    int[] leftSmaller = new int[n];\n    // rightLarger[i] := # of A[j] > A[i], where i < j < n\n    int[] rightLarger = new int[n];\n    FenwickTree tree1 = new FenwickTree(n); // To calculate leftSmaller\n    FenwickTree tree2 = new FenwickTree(n); // To calculate rightLarger\n\n    for (int i = 0; i < n; ++i)\n      numToIndex.put(nums1[i], i);\n\n    // Remap each num in nums2 to the according index in nums1 as A\n    // Then, rephrase the problem as finding increasing tripets in A\n    for (int i = 0; i < n; ++i)\n      A[i] = numToIndex.get(nums2[i]);\n\n    for (int i = 0; i < n; ++i) {\n      leftSmaller[i] = tree1.get(A[i]);\n      tree1.update(A[i] + 1, 1);\n    }\n\n    for (int i = n - 1; i >= 0; --i) {\n      rightLarger[i] = tree2.get(n) - tree2.get(A[i]);\n      tree2.update(A[i] + 1, 1);\n    }\n\n    for (int i = 0; i < n; ++i)\n      ans += (long) leftSmaller[i] * rightLarger[i];\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class FenwickTree:\n  def __init__(self, n: int):\n    self.sums = [0] * (n + 1)\n\n  def update(self, i: int, delta: int) -> None:\n    while i < len(self.sums):\n      self.sums[i] += delta\n      i += FenwickTree.lowbit(i)\n\n  def get(self, i: int) -> int:\n    summ = 0\n    while i > 0:\n      summ += self.sums[i]\n      i -= FenwickTree.lowbit(i)\n    return summ\n\n  @staticmethod\n  def lowbit(i: int) -> int:\n    return i & -i\n\n\nclass Solution:\n  def goodTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    numToIndex = {num: i for i, num in enumerate(nums1)}\n    # Remap each num in nums2 to the according index in nums1 as A\n    # Then, rephrase the problem as finding increasing tripets in A\n    A = [numToIndex[num] for num in nums2]\n    # leftSmaller[i] := # of A[j] < A[i], where 0 <= j < i\n    leftSmaller = [0] * n\n    # rightLarger[i] := # of A[j] > A[i], where i < j < n\n    rightLarger = [0] * n\n    tree1 = FenwickTree(n)  # To calculate leftSmaller\n    tree2 = FenwickTree(n)  # To calculate rightLarger\n\n    for i, a in enumerate(A):\n      leftSmaller[i] = tree1.get(a)\n      tree1.update(a + 1, 1)\n\n    for i, a in reversed(list(enumerate(A))):\n      rightLarger[i] = tree2.get(n) - tree2.get(a)\n      tree2.update(a + 1, 1)\n\n    return sum(a * b for a, b in zip(leftSmaller, rightLarger))\n",
                "lang_text": "py"
            }
        }
    }
}