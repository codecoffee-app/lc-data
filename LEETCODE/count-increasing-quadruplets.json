{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2552",
            "title": "Count Increasing Quadruplets",
            "titleSlug": "count-increasing-quadruplets",
            "content": "<p>Given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>n</code> containing all numbers from <code>1</code> to <code>n</code>, return <em>the number of increasing quadruplets</em>.</p>\n\n<p>A quadruplet <code>(i, j, k, l)</code> is increasing if:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt; k &lt; l &lt; n</code>, and</li>\n\t<li><code>nums[i] &lt; nums[k] &lt; nums[j] &lt; nums[l]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,4,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \n- When i = 0, j = 1, k = 2, and l = 3, nums[i] &lt; nums[k] &lt; nums[j] &lt; nums[l].\n- When i = 0, j = 1, k = 2, and l = 4, nums[i] &lt; nums[k] &lt; nums[j] &lt; nums[l]. \nThere are no other quadruplets, so we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There exists only one quadruplet with i = 0, j = 1, k = 2, l = 3, but since nums[j] &lt; nums[k], we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>4 &lt;= nums.length &lt;= 4000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= nums.length</code></li>\n\t<li>All the integers of <code>nums</code> are <strong>unique</strong>. <code>nums</code> is a permutation.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 352,
            "dislikes": 62,
            "similarQuestions": "[{\"title\": \"Increasing Triplet Subsequence\", \"titleSlug\": \"increasing-triplet-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Special Quadruplets\", \"titleSlug\": \"count-special-quadruplets\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Good Triplets in an Array\", \"titleSlug\": \"count-good-triplets-in-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.3K\", \"totalSubmission\": \"25.2K\", \"totalAcceptedRaw\": 8312, \"totalSubmissionRaw\": 25232, \"acRate\": \"32.9%\"}",
            "hints": [
                "Can you loop over all possible (j, k) and find the answer?",
                "We can pre-compute all possible (i, j) and (k, l) and store them in 2 matrices.",
                "The answer will the sum of prefix[j][k] * suffix[k][j]."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` of size `n` containing all numbers from 1 to `n`, return the number of increasing quadruplets. A quadruplet `(i, j, k, l)` is increasing if: 0 <= i < j < k < l < n, and `nums[i] < nums[k] < nums[j] < nums[l]`.",
                "constraints": [
                    "4 <= nums.length <= 4000",
                    "1 <= nums[i] <= nums.length",
                    "All the integers of `nums` are unique. `nums` is a permutation."
                ],
                "testcases": [
                    {
                        "input": "[1,3,2,4,5]",
                        "output": "2",
                        "explanation": "There are two increasing quadruplets in the input: (0, 1, 2, 3) where 1 < 2 < 3 < 4, and (0, 1, 2, 4) where 1 < 2 < 3 < 5."
                    },
                    {
                        "input": "[1,2,3,4]",
                        "output": "0",
                        "explanation": "There are no increasing quadruplets in the input because for the only possible quadruplet (0, 1, 2, 3), the condition nums[i] < nums[k] < nums[j] < nums[l] is not met (specifically, nums[j] < nums[k] is false)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "increasing-triplet-subsequence",
                "title": "Increasing Triplet Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "count-special-quadruplets",
                "title": "Count Special Quadruplets",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-good-triplets-in-an-array",
                "title": "Count Good Triplets in an Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can you loop over all possible (j, k) and find the answer?",
            "We can pre-compute all possible (i, j) and (k, l) and store them in 2 matrices.",
            "The answer will the sum of prefix[j][k] * suffix[k][j]."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long countQuadruplets(vector<int>& nums) {\n    long long ans = 0;\n    // dp[j] := # of triplets (i, j, k) where i < j < k and nums[i] < nums[k] <\n    // nums[j]. Keep this information for l to use later.\n    vector<int> dp(nums.size());\n\n    // k can be treated as l.\n    for (int k = 2; k < nums.size(); ++k)\n      // j can be treated as i.\n      for (int j = 0, numLessThanK = 0; j < k; ++j)\n        if (nums[j] < nums[k]) {\n          ++numLessThanK;  // nums[i] < nums[k]\n          ans += dp[j];    // nums[j] < nums[l], so we should add dp[j] since we\n                           // find a new quadruplets for (i, j, k, l).\n        } else if (nums[j] > nums[k]) {\n          dp[j] += numLessThanK;\n        }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long countQuadruplets(int[] nums) {\n    long ans = 0;\n    // dp[j] := # of triplets (i, j, k) where i < j < k and nums[i] < nums[k] <\n    // nums[j]. Keep this information for l to use later.\n    int[] dp = new int[nums.size()];\n\n    // k can be treated as l.\n    for (int k = 2; k < nums.length; ++k)\n      // j can be treated as i.\n      for (int j = 0, numLessThanK = 0; j < k; ++j)\n        if (nums[j] < nums[k]) {\n          ++numLessThanK; // nums[i] < nums[k]\n          ans += dp[j];   // nums[j] < nums[l], so we should add dp[j] since we\n                          // find a new quadruplets for (i, j, k, l).\n        } else if (nums[j] > nums[k]) {\n          dp[j] += numLessThanK;\n        }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countQuadruplets(self, nums: List[int]) -> int:\n    ans = 0\n    # dp[j] := # of triplets (i, j, k) where i < j < k and nums[i] < nums[k] <\n    # nums[j]. Keep this information for l to use later.\n    dp = [0] * len(nums)\n\n    # k can be treated as l.\n    for k in range(2, len(nums)):\n      numLessThanK = 0\n      # j can be treated as i.\n      for j in range(k):\n        if nums[j] < nums[k]:\n          numLessThanK += 1  # nums[i] < nums[k]\n          # nums[j] < nums[l], so we should add dp[j] since we find a new\n          # quadruplets for (i, j, k, l).\n          ans += dp[j]\n        elif nums[j] > nums[k]:\n          dp[j] += numLessThanK\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}