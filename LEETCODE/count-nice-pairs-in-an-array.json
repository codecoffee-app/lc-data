{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1814",
            "title": "Count Nice Pairs in an Array",
            "titleSlug": "count-nice-pairs-in-an-array",
            "content": "<p>You are given an array <code>nums</code> that consists of non-negative integers. Let us define <code>rev(x)</code> as the reverse of the non-negative integer <code>x</code>. For example, <code>rev(123) = 321</code>, and <code>rev(120) = 21</code>. A pair of indices <code>(i, j)</code> is <strong>nice</strong> if it satisfies all of the following conditions:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt; nums.length</code></li>\n\t<li><code>nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])</code></li>\n</ul>\n\n<p>Return <em>the number of nice pairs of indices</em>. Since that number can be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [42,11,1,97]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The two pairs are:\n - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.\n - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [13,10,35,24,76]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1726,
            "dislikes": 76,
            "similarQuestions": "[{\"title\": \"Number of Pairs of Interchangeable Rectangles\", \"titleSlug\": \"number-of-pairs-of-interchangeable-rectangles\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Number of Bad Pairs\", \"titleSlug\": \"count-number-of-bad-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Pairs Satisfying Inequality\", \"titleSlug\": \"number-of-pairs-satisfying-inequality\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"101.2K\", \"totalSubmission\": \"205.1K\", \"totalAcceptedRaw\": 101238, \"totalSubmissionRaw\": 205121, \"acRate\": \"49.4%\"}",
            "hints": [
                "The condition can be rearranged to (nums[i] - rev(nums[i])) == (nums[j] - rev(nums[j])).",
                "Transform each nums[i] into (nums[i] - rev(nums[i])). Then, count the number of (i, j) pairs that have equal values.",
                "Keep a map storing the frequencies of values that you have seen so far. For each i, check if nums[i] is in the map. If it is, then add that count to the overall count. Then, increment the frequency of nums[i]."
            ],
            "rephrased": {
                "body": "Given an array `nums` of non-negative integers, a pair of indices `(i, j)` is considered 'nice' if `0 <= i < j < nums.length` and `nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`, where `rev(x)` is the reverse of the non-negative integer `x`.  The reverse of a number means writing the digits in reverse order (e.g., `rev(123) = 321`, and `rev(120) = 21`). Determine the number of 'nice' pairs of indices in the given array.  Return the count modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= nums.length <= 10<sup>5</sup>",
                    "0 <= nums[i] <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "[42,11,1,97]",
                        "output": "2",
                        "explanation": "The nice pairs are (0,3) and (1,2). For (0,3): 42 + rev(97) = 42 + 79 = 121, and 97 + rev(42) = 97 + 24 = 121. For (1,2): 11 + rev(1) = 11 + 1 = 12, and 1 + rev(11) = 1 + 11 = 12."
                    },
                    {
                        "input": "[13,10,35,24,76]",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-pairs-of-interchangeable-rectangles",
                "title": "Number of Pairs of Interchangeable Rectangles",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-number-of-bad-pairs",
                "title": "Count Number of Bad Pairs",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-pairs-satisfying-inequality",
                "title": "Number of Pairs Satisfying Inequality",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The condition can be rearranged to (nums[i] - rev(nums[i])) == (nums[j] - rev(nums[j])).",
            "Transform each nums[i] into (nums[i] - rev(nums[i])). Then, count the number of (i, j) pairs that have equal values.",
            "Keep a map storing the frequencies of values that you have seen so far. For each i, check if nums[i] is in the map. If it is, then add that count to the overall count. Then, increment the frequency of nums[i]."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countNicePairs(vector<int>& nums) {\n    constexpr int kMod = 1'000'000'007;\n    long ans = 0;\n    unordered_map<int, long> count;\n\n    for (const int num : nums)\n      ++count[num - rev(num)];\n\n    for (const auto& [_, freq] : count) {\n      ans += freq * (freq - 1) / 2;\n      ans %= kMod;\n    }\n\n    return ans;\n  }\n\n private:\n  int rev(int n) {\n    int x = 0;\n    while (n) {\n      x = x * 10 + (n % 10);\n      n /= 10;\n    }\n    return x;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countNicePairs(int[] nums) {\n    final int kMod = 1_000_000_007;\n    long ans = 0;\n    Map<Integer, Long> count = new HashMap<>();\n\n    for (final int num : nums)\n      count.merge(num - rev(num), 1L, Long::sum);\n\n    for (final long freq : count.values()) {\n      ans += freq * (freq - 1) / 2;\n      ans %= kMod;\n    }\n\n    return (int) ans;\n  }\n\n  private int rev(int n) {\n    int x = 0;\n    while (n > 0) {\n      x = x * 10 + (n % 10);\n      n /= 10;\n    }\n    return x;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countNicePairs(self, nums: List[int]) -> int:\n    freqs = collections.Counter(num - int(str(num)[::-1]) for num in nums)\n    return sum(freq * (freq - 1) // 2 for freq in freqs.values()) % 1000000007\n",
                "lang_text": "py"
            }
        }
    }
}