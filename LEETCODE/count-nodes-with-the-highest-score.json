{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2049",
            "title": "Count Nodes With the Highest Score",
            "titleSlug": "count-nodes-with-the-highest-score",
            "content": "<p>There is a <strong>binary</strong> tree rooted at <code>0</code> consisting of <code>n</code> nodes. The nodes are labeled from <code>0</code> to <code>n - 1</code>. You are given a <strong>0-indexed</strong> integer array <code>parents</code> representing the tree, where <code>parents[i]</code> is the parent of node <code>i</code>. Since node <code>0</code> is the root, <code>parents[0] == -1</code>.</p>\n\n<p>Each node has a <strong>score</strong>. To find the score of a node, consider if the node and the edges connected to it were <strong>removed</strong>. The tree would become one or more <strong>non-empty</strong> subtrees. The <strong>size</strong> of a subtree is the number of the nodes in it. The <strong>score</strong> of the node is the <strong>product of the sizes</strong> of all those subtrees.</p>\n\n<p>Return <em>the <strong>number</strong> of nodes that have the <strong>highest score</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"example-1\" src=\"https://assets.leetcode.com/uploads/2021/10/03/example-1.png\" style=\"width: 604px; height: 266px;\" />\n<pre>\n<strong>Input:</strong> parents = [-1,2,0,2,0]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n- The score of node 0 is: 3 * 1 = 3\n- The score of node 1 is: 4 = 4\n- The score of node 2 is: 1 * 1 * 2 = 2\n- The score of node 3 is: 4 = 4\n- The score of node 4 is: 4 = 4\nThe highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"example-2\" src=\"https://assets.leetcode.com/uploads/2021/10/03/example-2.png\" style=\"width: 95px; height: 143px;\" />\n<pre>\n<strong>Input:</strong> parents = [-1,2,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n- The score of node 0 is: 2 = 2\n- The score of node 1 is: 2 = 2\n- The score of node 2 is: 1 * 1 = 1\nThe highest score is 2, and two nodes (node 0 and node 1) have the highest score.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == parents.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>parents[0] == -1</code></li>\n\t<li><code>0 &lt;= parents[i] &lt;= n - 1</code> for <code>i != 0</code></li>\n\t<li><code>parents</code> represents a valid binary tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 945,
            "dislikes": 61,
            "similarQuestions": "[{\"title\": \"Sum of Distances in Tree\", \"titleSlug\": \"sum-of-distances-in-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Delete Nodes And Return Forest\", \"titleSlug\": \"delete-nodes-and-return-forest\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Product of Splitted Binary Tree\", \"titleSlug\": \"maximum-product-of-splitted-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.5K\", \"totalSubmission\": \"42.7K\", \"totalAcceptedRaw\": 20505, \"totalSubmissionRaw\": 42707, \"acRate\": \"48.0%\"}",
            "hints": [
                "For each node, you need to find the sizes of the subtrees rooted in each of its children. Maybe DFS?",
                "How to determine the number of nodes in the rest of the tree? Can you subtract the size of the subtree rooted at the node from the total number of nodes of the tree?",
                "Use these values to compute the score of the node. Track the maximum score, and how many nodes achieve such score."
            ],
            "rephrased": {
                "body": "Given a binary tree rooted at node 0, consisting of 'n' nodes labeled from 0 to n-1.  The tree structure is represented by a 0-indexed integer array 'parents', where parents[i] is the parent of node i. Since node 0 is the root, parents[0] == -1.\n\nEach node has a score. To calculate a node's score, imagine removing the node and its connecting edges. This would divide the tree into one or more non-empty subtrees. The score of the node is the product of the sizes of these resulting subtrees.\n\nDetermine the number of nodes that have the highest score.",
                "constraints": [
                    "n == parents.length",
                    "2 <= n <= 10^5",
                    "parents[0] == -1",
                    "0 <= parents[i] <= n - 1 for i != 0",
                    "parents represents a valid binary tree."
                ],
                "testcases": [
                    {
                        "input": "parents = [-1,2,0,2,0]",
                        "output": "3",
                        "explanation": "The node scores are: Node 0: 3 * 1 = 3, Node 1: 4, Node 2: 1 * 1 * 2 = 2, Node 3: 4, Node 4: 4.  The highest score is 4, and three nodes (1, 3, and 4) achieve this score."
                    },
                    {
                        "input": "parents = [-1,2,0]",
                        "output": "2",
                        "explanation": "The node scores are: Node 0: 2, Node 1: 2, Node 2: 1 * 1 = 1.  The highest score is 2, and two nodes (0 and 1) achieve this score."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "sum-of-distances-in-tree",
                "title": "Sum of Distances in Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "delete-nodes-and-return-forest",
                "title": "Delete Nodes And Return Forest",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-product-of-splitted-binary-tree",
                "title": "Maximum Product of Splitted Binary Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each node, you need to find the sizes of the subtrees rooted in each of its children. Maybe DFS?",
            "How to determine the number of nodes in the rest of the tree? Can you subtract the size of the subtree rooted at the node from the total number of nodes of the tree?",
            "Use these values to compute the score of the node. Track the maximum score, and how many nodes achieve such score."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countHighestScoreNodes(vector<int>& parents) {\n    int ans = 0;\n    vector<vector<int>> tree(parents.size());\n\n    for (int i = 0; i < parents.size(); ++i) {\n      if (parents[i] == -1)\n        continue;\n      tree[parents[i]].push_back(i);\n    }\n\n    dfs(tree, 0, 0, ans);\n    return ans;\n  }\n\n private:\n  int dfs(const vector<vector<int>>& tree, int u, long&& maxScore, int& ans) {\n    int count = 1;\n    long score = 1;\n    for (const int v : tree[u]) {\n      const int childCount = dfs(tree, v, move(maxScore), ans);\n      count += childCount;\n      score *= childCount;\n    }\n    const int aboveCount = tree.size() - count;\n    score *= max(aboveCount, 1);\n    if (score > maxScore) {\n      maxScore = score;\n      ans = 1;\n    } else if (score == maxScore) {\n      ++ans;\n    }\n    return count;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countHighestScoreNodes(int[] parents) {\n    List<Integer>[] tree = new List[parents.length];\n\n    for (int i = 0; i < tree.length; ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int i = 0; i < parents.length; ++i) {\n      if (parents[i] == -1)\n        continue;\n      tree[parents[i]].add(i);\n    }\n\n    dfs(tree, 0);\n    return ans;\n  }\n\n  private int ans = 0;\n  private long maxScore = 0;\n\n  private int dfs(List<Integer>[] tree, int u) {\n    int count = 1;\n    long score = 1;\n    for (final int v : tree[u]) {\n      final int childCount = dfs(tree, v);\n      count += childCount;\n      score *= childCount;\n    }\n    final int aboveCount = tree.length - count;\n    score *= Math.max(aboveCount, 1);\n    if (score > maxScore) {\n      maxScore = score;\n      ans = 1;\n    } else if (score == maxScore) {\n      ++ans;\n    }\n    return count;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countHighestScoreNodes(self, parents: List[int]) -> int:\n    tree = [[] for _ in range(len(parents))]\n\n    for i, parent in enumerate(parents):\n      if parent == -1:\n        continue\n      tree[parent].append(i)\n\n    ans = 0\n    maxScore = 0\n\n    def dfs(u: int) -> int:  # Returns node count\n      nonlocal ans\n      nonlocal maxScore\n      count = 1\n      score = 1\n      for v in tree[u]:\n        childCount = dfs(v)\n        count += childCount\n        score *= childCount\n      score *= len(parents) - count or 1\n      if score > maxScore:\n        maxScore = score\n        ans = 1\n      elif score == maxScore:\n        ans += 1\n      return count\n\n    dfs(0)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}