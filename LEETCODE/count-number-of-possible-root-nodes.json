{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2581",
            "title": "Count Number of Possible Root Nodes",
            "titleSlug": "count-number-of-possible-root-nodes",
            "content": "<p>Alice has an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. The tree is represented as a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>Alice wants Bob to find the root of the tree. She allows Bob to make several <strong>guesses</strong> about her tree. In one guess, he does the following:</p>\n\n<ul>\n\t<li>Chooses two <strong>distinct</strong> integers <code>u</code> and <code>v</code> such that there exists an edge <code>[u, v]</code> in the tree.</li>\n\t<li>He tells Alice that <code>u</code> is the <strong>parent</strong> of <code>v</code> in the tree.</li>\n</ul>\n\n<p>Bob&#39;s guesses are represented by a 2D integer array <code>guesses</code> where <code>guesses[j] = [u<sub>j</sub>, v<sub>j</sub>]</code> indicates Bob guessed <code>u<sub>j</sub></code> to be the parent of <code>v<sub>j</sub></code>.</p>\n\n<p>Alice being lazy, does not reply to each of Bob&#39;s guesses, but just says that <strong>at least</strong> <code>k</code> of his guesses are <code>true</code>.</p>\n\n<p>Given the 2D integer arrays <code>edges</code>, <code>guesses</code> and the integer <code>k</code>, return <em>the <strong>number of possible nodes</strong> that can be the root of Alice&#39;s tree</em>. If there is no such tree, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/19/ex-1.png\" style=\"width: 727px; height: 250px;\" /></p>\n\n<pre>\n<strong>Input:</strong> edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nRoot = 0, correct guesses = [1,3], [0,1], [2,4]\nRoot = 1, correct guesses = [1,3], [1,0], [2,4]\nRoot = 2, correct guesses = [1,3], [1,0], [2,4]\nRoot = 3, correct guesses = [1,0], [2,4]\nRoot = 4, correct guesses = [1,3], [1,0]\nConsidering 0, 1, or 2 as root node leads to 3 correct guesses.\n\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/19/ex-2.png\" style=\"width: 600px; height: 303px;\" /></p>\n\n<pre>\n<strong>Input:</strong> edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nRoot = 0, correct guesses = [3,4]\nRoot = 1, correct guesses = [1,0], [3,4]\nRoot = 2, correct guesses = [1,0], [2,1], [3,4]\nRoot = 3, correct guesses = [1,0], [2,1], [3,2], [3,4]\nRoot = 4, correct guesses = [1,0], [2,1], [3,2]\nConsidering any node as root will give at least 1 correct guess. \n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= guesses.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub>, u<sub>j</sub>, v<sub>j</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>u<sub>j</sub> != v<sub>j</sub></code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n\t<li><code>guesses[j]</code> is an edge of the tree.</li>\n\t<li><code>guesses</code> is unique.</li>\n\t<li><code>0 &lt;= k &lt;= guesses.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 282,
            "dislikes": 7,
            "similarQuestions": "[{\"title\": \"Closest Node to Path in Tree\", \"titleSlug\": \"closest-node-to-path-in-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"5K\", \"totalSubmission\": \"11.1K\", \"totalAcceptedRaw\": 5033, \"totalSubmissionRaw\": 11120, \"acRate\": \"45.3%\"}",
            "hints": [
                "How can we check if any node can be the root?",
                "Can we use this information to check its neighboring nodes?",
                "When we traverse from current node to a neighboring node, how will we update our answer?"
            ],
            "rephrased": {
                "body": "Given an undirected tree with 'n' nodes (labeled 0 to n-1) represented by 'edges', and a set of 'guesses' about parent-child relationships in the tree, determine how many nodes could be the root of the tree if at least 'k' of the guesses are correct. Each guess consists of two distinct nodes 'u' and 'v', where 'u' is guessed to be the parent of 'v'.",
                "constraints": [
                    "edges.length == n - 1",
                    "2 <= n <= 10^5",
                    "1 <= guesses.length <= 10^5",
                    "0 <= a_i, b_i, u_j, v_j <= n - 1",
                    "a_i != b_i",
                    "u_j != v_j",
                    "edges represents a valid tree.",
                    "guesses[j] is an edge of the tree.",
                    "guesses is unique.",
                    "0 <= k <= guesses.length"
                ],
                "testcases": [
                    {
                        "input": "edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3",
                        "output": "3",
                        "explanation": "If node 0 is the root, the correct guesses are [1,3], [0,1], [2,4]. If node 1 is the root, the correct guesses are [1,3], [1,0], [2,4]. If node 2 is the root, the correct guesses are [1,3], [1,0], [2,4]. The roots 0, 1, and 2 satisfy the condition of having at least 3 correct guesses."
                    },
                    {
                        "input": "edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1",
                        "output": "5",
                        "explanation": "If node 0 is the root, the correct guess is [3,4]. If node 1 is the root, the correct guesses are [1,0], [3,4]. If node 2 is the root, the correct guesses are [1,0], [2,1], [3,4]. If node 3 is the root, the correct guesses are [1,0], [2,1], [3,2], [3,4]. If node 4 is the root, the correct guesses are [1,0], [2,1], [3,2]. Every node satisfies the condition of having at least 1 correct guess."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "closest-node-to-path-in-tree",
                "title": "Closest Node to Path in Tree",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "How can we check if any node can be the root?",
            "Can we use this information to check its neighboring nodes?",
            "When we traverse from current node to a neighboring node, how will we update our answer?"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses,\n                int k) {\n    int ans = 0;\n    const int n = edges.size() + 1;\n    vector<vector<int>> graph(n);\n    vector<unordered_set<int>> guessGraph(n);\n    vector<int> parent(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].push_back(v);\n      graph[v].push_back(u);\n    }\n\n    for (const vector<int>& guess : guesses) {\n      const int u = guess[0];\n      const int v = guess[1];\n      guessGraph[u].insert(v);\n    }\n\n    // Precalculate `parent`.\n    dfs(graph, 0, /*prev=*/-1, parent);\n\n    // Calculate `correctGuess` for tree rooted at 0.\n    int correctGuess = 0;\n    for (int i = 1; i < n; ++i)\n      if (guessGraph[parent[i]].count(i))\n        ++correctGuess;\n\n    reroot(graph, 0, /*prev=*/-1, correctGuess, guessGraph, k, ans);\n    return ans;\n  }\n\n private:\n  void dfs(const vector<vector<int>>& graph, int u, int prev,\n           vector<int>& parent) {\n    parent[u] = prev;\n    for (const int v : graph[u])\n      if (v != prev)\n        dfs(graph, v, u, parent);\n  }\n\n  void reroot(const vector<vector<int>>& graph, int u, int prev,\n              int correctGuess, const vector<unordered_set<int>>& guessGraph,\n              const int& k, int& ans) {\n    if (u != 0) {\n      // The tree is rooted at u, so a guess edge (u, prev) will match the new\n      // `parent` relationship.\n      if (guessGraph[u].count(prev))\n        ++correctGuess;\n      // A guess edge (prev, u) matching the old `parent` relationship will no\n      // longer be true.\n      if (guessGraph[prev].count(u))\n        --correctGuess;\n    }\n    if (correctGuess >= k)\n      ++ans;\n    for (const int v : graph[u])\n      if (v != prev)\n        reroot(graph, v, u, correctGuess, guessGraph, k, ans);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int rootCount(int[][] edges, int[][] guesses, int k) {\n    final int n = edges.length + 1;\n    List<Integer>[] graph = new List[n];\n    Set<Integer>[] guessGraph = new Set[n];\n    int[] parent = new int[n];\n\n    for (int i = 0; i < n; ++i) {\n      graph[i] = new ArrayList<>();\n      guessGraph[i] = new HashSet<>();\n    }\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph[u].add(v);\n      graph[v].add(u);\n    }\n\n    for (int[] guess : guesses) {\n      final int u = guess[0];\n      final int v = guess[1];\n      guessGraph[u].add(v);\n    }\n\n    // Precalculate `parent`.\n    dfs(graph, 0, /*prev=*/-1, parent);\n\n    // Calculate `correctGuess` for tree rooted at 0.\n    int correctGuess = 0;\n    for (int i = 1; i < n; ++i)\n      if (guessGraph[parent[i]].contains(i))\n        ++correctGuess;\n\n    reroot(graph, 0, /*prev=*/-1, correctGuess, guessGraph, k);\n    return ans;\n  }\n\n  private int ans = 0;\n\n  private void dfs(List<Integer>[] graph, int u, int prev, int[] parent) {\n    parent[u] = prev;\n    for (final int v : graph[u])\n      if (v != prev)\n        dfs(graph, v, u, parent);\n  }\n\n  private void reroot(List<Integer>[] graph, int u, int prev, int correctGuess,\n                      Set<Integer>[] guessGraph, int k) {\n    if (u != 0) {\n      // The tree is rooted at u, so a guess edge (u, prev) will match the new\n      // `parent` relationship.\n      if (guessGraph[u].contains(prev))\n        ++correctGuess;\n      // A guess edge (prev, u) matching the old `parent` relationship will no\n      // longer be true.\n      if (guessGraph[prev].contains(u))\n        --correctGuess;\n    }\n    if (correctGuess >= k)\n      ++ans;\n    for (final int v : graph[u])\n      if (v != prev)\n        reroot(graph, v, u, correctGuess, guessGraph, k);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def rootCount(self, edges: List[List[int]], guesses: List[List[int]], k: int) -> int:\n    ans = 0\n    n = len(edges) + 1\n    graph = [[] for _ in range(n)]\n    guessGraph = [set() for _ in range(n)]\n    parent = [0] * n\n\n    for u, v in edges:\n      graph[u].append(v)\n      graph[v].append(u)\n\n    for u, v in guesses:\n      guessGraph[u].add(v)\n\n    def dfs(u: int, prev: int) -> None:\n      parent[u] = prev\n      for v in graph[u]:\n        if v != prev:\n          dfs(v, u)\n\n    # Precalculate `parent`.\n    dfs(0, -1)\n\n    # Calculate `correctGuess` for tree rooted at 0.\n    correctGuess = sum(i in guessGraph[parent[i]] for i in range(1, n))\n\n    def reroot(u: int, prev: int, correctGuess: int) -> None:\n      nonlocal ans\n      if u != 0:\n        # The tree is rooted at u, so a guess edge (u, prev) will match the new\n        # `parent` relationship.\n        if prev in guessGraph[u]:\n          correctGuess += 1\n        # A guess edge (prev, u) matching the old `parent` relationship will no\n        # longer be True.\n        if u in guessGraph[prev]:\n          correctGuess -= 1\n      if correctGuess >= k:\n        ans += 1\n      for v in graph[u]:\n        if v != prev:\n          reroot(v, u, correctGuess)\n\n    reroot(0, -1, correctGuess)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}