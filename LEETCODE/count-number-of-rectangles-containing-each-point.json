{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2250",
            "title": "Count Number of Rectangles Containing Each Point",
            "titleSlug": "count-number-of-rectangles-containing-each-point",
            "content": "<p>You are given a 2D integer array <code>rectangles</code> where <code>rectangles[i] = [l<sub>i</sub>, h<sub>i</sub>]</code> indicates that <code>i<sup>th</sup></code> rectangle has a length of <code>l<sub>i</sub></code> and a height of <code>h<sub>i</sub></code>. You are also given a 2D integer array <code>points</code> where <code>points[j] = [x<sub>j</sub>, y<sub>j</sub>]</code> is a point with coordinates <code>(x<sub>j</sub>, y<sub>j</sub>)</code>.</p>\n\n<p>The <code>i<sup>th</sup></code> rectangle has its <strong>bottom-left corner</strong> point at the coordinates <code>(0, 0)</code> and its <strong>top-right corner</strong> point at <code>(l<sub>i</sub>, h<sub>i</sub>)</code>.</p>\n\n<p>Return<em> an integer array </em><code>count</code><em> of length </em><code>points.length</code><em> where </em><code>count[j]</code><em> is the number of rectangles that <strong>contain</strong> the </em><code>j<sup>th</sup></code><em> point.</em></p>\n\n<p>The <code>i<sup>th</sup></code> rectangle <strong>contains</strong> the <code>j<sup>th</sup></code> point if <code>0 &lt;= x<sub>j</sub> &lt;= l<sub>i</sub></code> and <code>0 &lt;= y<sub>j</sub> &lt;= h<sub>i</sub></code>. Note that points that lie on the <strong>edges</strong> of a rectangle are also considered to be contained by that rectangle.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/02/example1.png\" style=\"width: 300px; height: 509px;\" />\n<pre>\n<strong>Input:</strong> rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]]\n<strong>Output:</strong> [2,1]\n<strong>Explanation:</strong> \nThe first rectangle contains no points.\nThe second rectangle contains only the point (2, 1).\nThe third rectangle contains the points (2, 1) and (1, 4).\nThe number of rectangles that contain the point (2, 1) is 2.\nThe number of rectangles that contain the point (1, 4) is 1.\nTherefore, we return [2, 1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/02/example2.png\" style=\"width: 300px; height: 312px;\" />\n<pre>\n<strong>Input:</strong> rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]]\n<strong>Output:</strong> [1,3]\n<strong>Explanation:\n</strong>The first rectangle contains only the point (1, 1).\nThe second rectangle contains only the point (1, 1).\nThe third rectangle contains the points (1, 3) and (1, 1).\nThe number of rectangles that contain the point (1, 3) is 1.\nThe number of rectangles that contain the point (1, 1) is 3.\nTherefore, we return [1, 3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rectangles.length, points.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>rectangles[i].length == points[j].length == 2</code></li>\n\t<li><code>1 &lt;= l<sub>i</sub>, x<sub>j</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= h<sub>i</sub>, y<sub>j</sub> &lt;= 100</code></li>\n\t<li>All the <code>rectangles</code> are <strong>unique</strong>.</li>\n\t<li>All the <code>points</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 473,
            "dislikes": 134,
            "similarQuestions": "[{\"title\": \"Queries on Number of Points Inside a Circle\", \"titleSlug\": \"queries-on-number-of-points-inside-a-circle\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.3K\", \"totalSubmission\": \"41.6K\", \"totalAcceptedRaw\": 14284, \"totalSubmissionRaw\": 41582, \"acRate\": \"34.4%\"}",
            "hints": [
                "The heights of the rectangles and the y-coordinates of the points are only at most 100, so for each point, we can iterate over the possible heights of the rectangles that contain a given point.",
                "For a given point and height, can we efficiently count how many rectangles with that height contain our point?",
                "Sort the rectangles at each height and use binary search."
            ],
            "rephrased": {
                "body": "Given a list of rectangles, where each rectangle is defined by its length and height (bottom-left corner at (0, 0) and top-right corner at (length, height)), and a list of points, determine how many rectangles contain each point. A rectangle contains a point if the point's x-coordinate is between 0 and the rectangle's length (inclusive), and the point's y-coordinate is between 0 and the rectangle's height (inclusive). Return an array where each element represents the number of rectangles containing the corresponding point.",
                "constraints": [
                    "1 <= rectangles.length, points.length <= 5 * 10^4",
                    "rectangles[i].length == points[j].length == 2",
                    "1 <= l_i, x_j <= 10^9",
                    "1 <= h_i, y_j <= 100",
                    "All the rectangles are unique.",
                    "All the points are unique."
                ],
                "testcases": [
                    {
                        "input": "rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]]",
                        "output": "[2,1]",
                        "explanation": "The point (2,1) is contained by the rectangles [2,3] and [2,5]. The point (1,4) is contained by the rectangle [2,5]."
                    },
                    {
                        "input": "rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]]",
                        "output": "[1,3]",
                        "explanation": "The point (1,3) is contained by rectangle [3,3]. The point (1,1) is contained by rectangles [1,1], [2,2] and [3,3]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "queries-on-number-of-points-inside-a-circle",
                "title": "Queries on Number of Points Inside a Circle",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The heights of the rectangles and the y-coordinates of the points are only at most 100, so for each point, we can iterate over the possible heights of the rectangles that contain a given point.",
            "For a given point and height, can we efficiently count how many rectangles with that height contain our point?",
            "Sort the rectangles at each height and use binary search."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> countRectangles(vector<vector<int>>& rectangles,\n                              vector<vector<int>>& points) {\n    vector<int> ans;\n    vector<vector<int>> yToXs(101);\n\n    for (const vector<int>& r : rectangles)\n      yToXs[r[1]].push_back(r[0]);\n\n    for (auto& xs : yToXs)\n      std::ranges::sort(xs);\n\n    for (const vector<int>& p : points) {\n      int count = 0;\n      for (int y = p[1]; y < 101; ++y) {\n        const vector<int>& xs = yToXs[y];\n        count += xs.end() - lower_bound(xs.begin(), xs.end(), p[0]);\n      }\n      ans.push_back(count);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] countRectangles(int[][] rectangles, int[][] points) {\n    int[] ans = new int[points.length];\n    List<Integer>[] yToXs = new List[101];\n\n    for (int i = 0; i < 101; ++i)\n      yToXs[i] = new ArrayList<>();\n\n    for (int[] r : rectangles)\n      yToXs[r[1]].add(r[0]);\n\n    for (List<Integer> xs : yToXs)\n      Collections.sort(xs);\n\n    for (int i = 0; i < points.length; ++i) {\n      int count = 0;\n      for (int y = points[i][1]; y < 101; ++y) {\n        List<Integer> xs = yToXs[y];\n        count += xs.size() - firstGreaterEqual(xs, points[i][0]);\n      }\n      ans[i] = count;\n    }\n\n    return ans;\n  }\n\n  // Find the first index l s.t A.get(l) >= target\n  // Returns A.size() if can't find\n  private int firstGreaterEqual(List<Integer> A, int target) {\n    int l = 0;\n    int r = A.size();\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) >= target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countRectangles(self, rectangles: List[List[int]], points: List[List[int]]) -> List[int]:\n    ans = []\n    yToXs = [[] for _ in range(101)]\n\n    for l, h in rectangles:\n      yToXs[h].append(l)\n\n    for xs in yToXs:\n      xs.sort()\n\n    for xi, yi in points:\n      count = 0\n      for y in range(yi, 101):\n        xs = yToXs[y]\n        count += len(xs) - bisect_left(xs, xi)\n      ans.append(count)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}