{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1955",
            "title": "Count Number of Special Subsequences",
            "titleSlug": "count-number-of-special-subsequences",
            "content": "<p>A sequence is <strong>special</strong> if it consists of a <strong>positive</strong> number of <code>0</code>s, followed by a <strong>positive</strong> number of <code>1</code>s, then a <strong>positive</strong> number of <code>2</code>s.</p>\n\n<ul>\n\t<li>For example, <code>[0,1,2]</code> and <code>[0,0,1,1,1,2]</code> are special.</li>\n\t<li>In contrast, <code>[2,1,0]</code>, <code>[1]</code>, and <code>[0,1,2,0]</code> are not special.</li>\n</ul>\n\n<p>Given an array <code>nums</code> (consisting of <strong>only</strong> integers <code>0</code>, <code>1</code>, and <code>2</code>), return<em> the <strong>number of different subsequences</strong> that are special</em>. Since the answer may be very large, <strong>return it modulo </strong><code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A <strong>subsequence</strong> of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are <strong>different</strong> if the <strong>set of indices</strong> chosen are different.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The special subsequences are bolded [<strong><u>0</u></strong>,<strong><u>1</u></strong>,<strong><u>2</u></strong>,2], [<strong><u>0</u></strong>,<strong><u>1</u></strong>,2,<strong><u>2</u></strong>], and [<strong><u>0</u></strong>,<strong><u>1</u></strong>,<strong><u>2</u></strong>,<strong><u>2</u></strong>].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,0,0]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no special subsequences in [2,2,0,0].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,0,1,2]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The special subsequences are bolded:\n- [<strong><u>0</u></strong>,<strong><u>1</u></strong>,<strong><u>2</u></strong>,0,1,2]\n- [<strong><u>0</u></strong>,<strong><u>1</u></strong>,2,0,1,<strong><u>2</u></strong>]\n- [<strong><u>0</u></strong>,<strong><u>1</u></strong>,<strong><u>2</u></strong>,0,1,<strong><u>2</u></strong>]\n- [<strong><u>0</u></strong>,<strong><u>1</u></strong>,2,0,<strong><u>1</u></strong>,<strong><u>2</u></strong>]\n- [<strong><u>0</u></strong>,1,2,<strong><u>0</u></strong>,<strong><u>1</u></strong>,<strong><u>2</u></strong>]\n- [<strong><u>0</u></strong>,1,2,0,<strong><u>1</u></strong>,<strong><u>2</u></strong>]\n- [0,1,2,<strong><u>0</u></strong>,<strong><u>1</u></strong>,<strong><u>2</u></strong>]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 2</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 497,
            "dislikes": 9,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.8K\", \"totalSubmission\": \"21K\", \"totalAcceptedRaw\": 10775, \"totalSubmissionRaw\": 21027, \"acRate\": \"51.2%\"}",
            "hints": [
                "Can we first solve a simpler problem? Counting the number of subsequences with 1s followed by 0s.",
                "How can we keep track of the partially matched subsequences to help us find the answer?"
            ],
            "rephrased": {
                "body": "A special sequence consists of a positive number of 0s, followed by a positive number of 1s, and then a positive number of 2s.  Given an array `nums` containing only the integers 0, 1, and 2, determine the number of different special subsequences.  Return the result modulo 10<sup>9</sup> + 7. A subsequence is derived by deleting some or no elements without changing the order. Two subsequences are different if the set of indices chosen are different.",
                "constraints": [
                    "1 <= nums.length <= 10<sup>5</sup>",
                    "0 <= nums[i] <= 2"
                ],
                "testcases": [
                    {
                        "input": "[0,1,2,2]",
                        "output": "3",
                        "explanation": "The special subsequences are [0,1,2], [0,1,2], and [0,1,2,2]. Note that the indices forming these subsequences are distinct."
                    },
                    {
                        "input": "[2,2,0,0]",
                        "output": "0",
                        "explanation": "There are no special subsequences in [2,2,0,0] because a special sequence must start with 0."
                    },
                    {
                        "input": "[0,1,2,0,1,2]",
                        "output": "7",
                        "explanation": "Several special subsequences exist, including [0,1,2], [0,1,2], [0,1,2], [0,1,2], [0,1,2], [0,1,2], and [0,1,2]. Each uses a different combination of indices."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Can we first solve a simpler problem? Counting the number of subsequences with 1s followed by 0s.",
            "How can we keep track of the partially matched subsequences to help us find the answer?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countSpecialSubsequences(vector<int>& nums) {\n    // dp[i][j] := # of special subseqs of nums[i:] and prev + 1 = j\n    dp.resize(nums.size(), vector<int>(4, -1));\n    return countSpecialSubsequences(nums, 0, -1);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  vector<vector<int>> dp;\n\n  int countSpecialSubsequences(const vector<int>& nums, int i, int prev) {\n    if (i == nums.size())\n      return prev == 2;\n    if (dp[i][prev + 1] != -1)\n      return dp[i][prev + 1];\n\n    long ans = 0;\n\n    // Not include nums[i]\n    ans += countSpecialSubsequences(nums, i + 1, prev);\n\n    // Include nums[i]\n    if (nums[i] == prev)\n      ans += countSpecialSubsequences(nums, i + 1, prev);\n    if (prev == -1 && nums[i] == 0)\n      ans += countSpecialSubsequences(nums, i + 1, 0);\n    if (prev == 0 && nums[i] == 1)\n      ans += countSpecialSubsequences(nums, i + 1, 1);\n    if (prev == 1 && nums[i] == 2)\n      ans += countSpecialSubsequences(nums, i + 1, 2);\n\n    ans %= kMod;\n    return dp[i][prev + 1] = ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countSpecialSubsequences(int[] nums) {\n    // dp[i][j] := # of special subseqs of nums[i:] and prev + 1 = j\n    dp = new int[nums.length][4];\n    Arrays.stream(dp).forEach(row -> Arrays.fill(row, -1));\n    return countSpecialSubsequences(nums, 0, -1);\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private int[][] dp;\n\n  int countSpecialSubsequences(int[] nums, int i, int prev) {\n    if (i == nums.length)\n      return prev == 2 ? 1 : 0;\n    if (dp[i][prev + 1] != -1)\n      return dp[i][prev + 1];\n\n    long ans = 0;\n\n    // Not include nums[i]\n    ans += countSpecialSubsequences(nums, i + 1, prev);\n\n    // Include nums[i]\n    if (nums[i] == prev)\n      ans += countSpecialSubsequences(nums, i + 1, prev);\n    if (prev == -1 && nums[i] == 0)\n      ans += countSpecialSubsequences(nums, i + 1, 0);\n    if (prev == 0 && nums[i] == 1)\n      ans += countSpecialSubsequences(nums, i + 1, 1);\n    if (prev == 1 && nums[i] == 2)\n      ans += countSpecialSubsequences(nums, i + 1, 2);\n\n    ans %= kMod;\n    return dp[i][prev + 1] = (int) ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countSpecialSubsequences(self, nums: List[int]) -> int:\n    kMod = 1_000_000_007\n\n    # dp(i, j) := # of special subseqs of nums[i:] and prev + 1 = j\n    @functools.lru_cache(None)\n    def dp(i: int, prev: int) -> int:\n      if i == len(nums):\n        return prev == 2\n\n      ans = 0\n\n      # Not include nums[i]\n      ans += dp(i + 1, prev)\n\n      # Include nums[i]\n      if nums[i] == prev:\n        ans += dp(i + 1, prev)\n      if prev == -1 and nums[i] == 0:\n        ans += dp(i + 1, 0)\n      if prev == 0 and nums[i] == 1:\n        ans += dp(i + 1, 1)\n      if prev == 1 and nums[i] == 2:\n        ans += dp(i + 1, 2)\n\n      ans %= kMod\n      return ans\n\n    return dp(0, -1)\n",
                "lang_text": "py"
            }
        }
    }
}