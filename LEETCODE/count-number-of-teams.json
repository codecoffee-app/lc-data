{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1395",
            "title": "Count Number of Teams",
            "titleSlug": "count-number-of-teams",
            "content": "<p>There are <code>n</code> soldiers standing in a line. Each soldier is assigned a <strong>unique</strong> <code>rating</code> value.</p>\n\n<p>You have to form a team of 3 soldiers amongst them under the following rules:</p>\n\n<ul>\n\t<li>Choose 3 soldiers with index (<code>i</code>, <code>j</code>, <code>k</code>) with rating (<code>rating[i]</code>, <code>rating[j]</code>, <code>rating[k]</code>).</li>\n\t<li>A team is valid if: (<code>rating[i] &lt; rating[j] &lt; rating[k]</code>) or (<code>rating[i] &gt; rating[j] &gt; rating[k]</code>) where (<code>0 &lt;= i &lt; j &lt; k &lt; n</code>).</li>\n</ul>\n\n<p>Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> rating = [2,5,3,4,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rating = [2,1,3]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> We can&#39;t form any team given the conditions.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> rating = [1,2,3,4]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == rating.length</code></li>\n\t<li><code>3 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= rating[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>All the integers in <code>rating</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2637,
            "dislikes": 184,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"107.1K\", \"totalSubmission\": \"161.9K\", \"totalAcceptedRaw\": 107120, \"totalSubmissionRaw\": 161888, \"acRate\": \"66.2%\"}",
            "hints": [
                "BruteForce, check all possibilities."
            ],
            "rephrased": {
                "body": "Given an array `rating` representing the unique rating values of `n` soldiers standing in a line, determine the number of possible teams of 3 soldiers that can be formed. A valid team consists of soldiers at indices `i`, `j`, and `k` such that `0 <= i < j < k < n` and either `rating[i] < rating[j] < rating[k]` or `rating[i] > rating[j] > rating[k]`.",
                "constraints": [
                    "n == rating.length",
                    "3 <= n <= 1000",
                    "1 <= rating[i] <= 10^5",
                    "All the integers in rating are unique."
                ],
                "testcases": [
                    {
                        "input": "[2,5,3,4,1]",
                        "output": "3",
                        "explanation": "The valid teams are (2,3,4), (5,4,1), and (5,3,1)."
                    },
                    {
                        "input": "[2,1,3]",
                        "output": "0",
                        "explanation": "No valid team can be formed."
                    },
                    {
                        "input": "[1,2,3,4]",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "BruteForce, check all possibilities."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numTeams(vector<int>& rating) {\n    int ans = 0;\n\n    for (int i = 1; i < rating.size() - 1; ++i) {\n      // Calculate soldiers on the left with less/greater ratings.\n      int leftLess = 0;\n      int leftGreater = 0;\n      for (int j = 0; j < i; ++j)\n        if (rating[j] < rating[i])\n          ++leftLess;\n        else if (rating[j] > rating[i])\n          ++leftGreater;\n      // Calculate soldiers on the right with less/greater ratings.\n      int rightLess = 0;\n      int rightGreater = 0;\n      for (int j = i + 1; j < rating.size(); ++j)\n        if (rating[j] < rating[i])\n          ++rightLess;\n        else if (rating[j] > rating[i])\n          ++rightGreater;\n      ans += leftLess * rightGreater + leftGreater * rightLess;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numTeams(int[] rating) {\n    int ans = 0;\n\n    for (int i = 1; i < rating.length - 1; ++i) {\n      // Calculate soldiers on the left with less/greater ratings.\n      int leftLess = 0;\n      int leftGreater = 0;\n      for (int j = 0; j < i; ++j)\n        if (rating[j] < rating[i])\n          ++leftLess;\n        else if (rating[j] > rating[i])\n          ++leftGreater;\n      // Calculate soldiers on the right with less/greater ratings.\n      int rightLess = 0;\n      int rightGreater = 0;\n      for (int j = i + 1; j < rating.length; ++j)\n        if (rating[j] < rating[i])\n          ++rightLess;\n        else if (rating[j] > rating[i])\n          ++rightGreater;\n      ans += leftLess * rightGreater + leftGreater * rightLess;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numTeams(self, rating: List[int]) -> int:\n    ans = 0\n\n    for i in range(1, len(rating) - 1):\n      # Calculate soldiers on the left with less//greater ratings.\n      leftLess = 0\n      leftGreater = 0\n      for j in range(i):\n        if rating[j] < rating[i]:\n          leftLess += 1\n        elif rating[j] > rating[i]:\n          leftGreater += 1\n      # Calculate soldiers on the right with less//greater ratings.\n      rightLess = 0\n      rightGreater = 0\n      for j in range(i + 1, len(rating)):\n        if rating[j] < rating[i]:\n          rightLess += 1\n        elif rating[j] > rating[i]:\n          rightGreater += 1\n      ans += leftLess * rightGreater + leftGreater * rightLess\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}