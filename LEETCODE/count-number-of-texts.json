{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2266",
            "title": "Count Number of Texts",
            "titleSlug": "count-number-of-texts",
            "content": "<p>Alice is texting Bob using her phone. The <strong>mapping</strong> of digits to letters is shown in the figure below.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png\" style=\"width: 200px; height: 162px;\" />\n<p>In order to <strong>add</strong> a letter, Alice has to <strong>press</strong> the key of the corresponding digit <code>i</code> times, where <code>i</code> is the position of the letter in the key.</p>\n\n<ul>\n\t<li>For example, to add the letter <code>&#39;s&#39;</code>, Alice has to press <code>&#39;7&#39;</code> four times. Similarly, to add the letter <code>&#39;k&#39;</code>, Alice has to press <code>&#39;5&#39;</code> twice.</li>\n\t<li>Note that the digits <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code> do not map to any letters, so Alice <strong>does not</strong> use them.</li>\n</ul>\n\n<p>However, due to an error in transmission, Bob did not receive Alice&#39;s text message but received a <strong>string of pressed keys</strong> instead.</p>\n\n<ul>\n\t<li>For example, when Alice sent the message <code>&quot;bob&quot;</code>, Bob received the string <code>&quot;2266622&quot;</code>.</li>\n</ul>\n\n<p>Given a string <code>pressedKeys</code> representing the string received by Bob, return <em>the <strong>total number of possible text messages</strong> Alice could have sent</em>.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pressedKeys = &quot;22233&quot;\n<strong>Output:</strong> 8\n<strong>Explanation:</strong>\nThe possible text messages Alice could have sent are:\n&quot;aaadd&quot;, &quot;abdd&quot;, &quot;badd&quot;, &quot;cdd&quot;, &quot;aaae&quot;, &quot;abe&quot;, &quot;bae&quot;, and &quot;ce&quot;.\nSince there are 8 possible messages, we return 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pressedKeys = &quot;222222222222222222222222222222222222&quot;\n<strong>Output:</strong> 82876089\n<strong>Explanation:</strong>\nThere are 2082876103 possible text messages Alice could have sent.\nSince we need to return the answer modulo 10<sup>9</sup> + 7, we return 2082876103 % (10<sup>9</sup> + 7) = 82876089.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pressedKeys.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pressedKeys</code> only consists of digits from <code>&#39;2&#39;</code> - <code>&#39;9&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 831,
            "dislikes": 26,
            "similarQuestions": "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Decode Ways\", \"titleSlug\": \"decode-ways\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.5K\", \"totalSubmission\": \"38.8K\", \"totalAcceptedRaw\": 18461, \"totalSubmissionRaw\": 38827, \"acRate\": \"47.5%\"}",
            "hints": [
                "For a substring consisting of the same digit, how can we count the number of texts it could have originally represented?",
                "How can dynamic programming help us calculate the required answer?"
            ],
            "rephrased": {
                "body": "Alice is texting Bob using a phone where digits map to letters as on a standard phone keypad (2-abc, 3-def, 4-ghi, 5-jkl, 6-mno, 7-pqrs, 8-tuv, 9-wxyz). To enter a letter, Alice presses the corresponding digit key a number of times equal to the letter's position on that key. For instance, 's' requires four presses of '7', and 'k' requires two presses of '5'.  Digits '0' and '1' are not used.\n\nDue to a transmission error, Bob receives only a string of pressed keys (`pressedKeys`). Given `pressedKeys`, determine the number of possible text messages Alice could have sent. Return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= pressedKeys.length <= 10^5",
                    "pressedKeys only consists of digits from '2' - '9'."
                ],
                "testcases": [
                    {
                        "input": "22233",
                        "output": 8,
                        "explanation": "The possible text messages are \"aaadd\", \"abdd\", \"badd\", \"cdd\", \"aaae\", \"abe\", \"bae\", and \"ce\". There are 8 possible messages."
                    },
                    {
                        "input": "222222222222222222222222222222222222",
                        "output": 82876089,
                        "explanation": "There are 2082876103 possible text messages. The result modulo 10^9 + 7 is 2082876103 % (10^9 + 7) = 82876089."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "letter-combinations-of-a-phone-number",
                "title": "Letter Combinations of a Phone Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "decode-ways",
                "title": "Decode Ways",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For a substring consisting of the same digit, how can we count the number of texts it could have originally represented?",
            "How can dynamic programming help us calculate the required answer?"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countTexts(string pressedKeys) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = pressedKeys.length();\n    // dp[i] := # of possible text messages of s[i:]\n    vector<long> dp(n + 1);\n    dp[n] = 1;  // \"\"\n\n    for (int i = n - 1; i >= 0; --i) {\n      dp[i] = dp[i + 1];\n      if (isSame(pressedKeys, i, 2))\n        dp[i] += dp[i + 2];\n      if (isSame(pressedKeys, i, 3))\n        dp[i] += dp[i + 3];\n      if ((pressedKeys[i] == '7' || pressedKeys[i] == '9') &&\n          isSame(pressedKeys, i, 4))\n        dp[i] += dp[i + 4];\n      dp[i] %= kMod;\n    }\n\n    return dp[0];\n  }\n\n private:\n  // Returns true if s[i:i + k] are same chars\n  bool isSame(const string& s, int i, int k) {\n    if (i + k > s.length())\n      return false;\n    for (int j = i + 1; j < i + k; ++j)\n      if (s[j] != s[i])\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countTexts(String pressedKeys) {\n    final int kMod = 1_000_000_007;\n    final int n = pressedKeys.length();\n    // dp[i] := # of possible text messages of s[i:]\n    long[] dp = new long[n + 1];\n    dp[n] = 1; // \"\"\n\n    for (int i = n - 1; i >= 0; --i) {\n      dp[i] = dp[i + 1];\n      if (isSame(pressedKeys, i, 2))\n        dp[i] += dp[i + 2];\n      if (isSame(pressedKeys, i, 3))\n        dp[i] += dp[i + 3];\n      if ((pressedKeys.charAt(i) == '7' || pressedKeys.charAt(i) == '9') &&\n          isSame(pressedKeys, i, 4))\n        dp[i] += dp[i + 4];\n      dp[i] %= kMod;\n    }\n\n    return (int) dp[0];\n  }\n\n  // Returns true if s[i:i + k] are same chars\n  private boolean isSame(final String s, int i, int k) {\n    if (i + k > s.length())\n      return false;\n    for (int j = i + 1; j < i + k; ++j)\n      if (s.charAt(j) != s.charAt(i))\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countTexts(self, pressedKeys: str) -> int:\n    kMod = 1_000_000_007\n    n = len(pressedKeys)\n    # dp[i] := # of possible text messages of s[i:]\n    dp = [0] * n + [1]\n\n    # Returns True if s[i:i + k] are same chars\n    def isSame(s: str, i: int, k: int) -> bool:\n      if i + k > len(s):\n        return False\n      for j in range(i + 1, i + k):\n        if s[j] != s[i]:\n          return False\n      return True\n\n    for i in reversed(range(n)):\n      dp[i] = dp[i + 1]\n      if isSame(pressedKeys, i, 2):\n        dp[i] += dp[i + 2]\n      if isSame(pressedKeys, i, 3):\n        dp[i] += dp[i + 3]\n      if (pressedKeys[i] == '7' or pressedKeys[i] == '9') and \\\n              isSame(pressedKeys, i, 4):\n        dp[i] += dp[i + 4]\n      dp[i] %= kMod\n\n    return dp[0]\n",
                "lang_text": "py"
            }
        }
    }
}