{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2719",
            "title": "Count of Integers",
            "titleSlug": "count-of-integers",
            "content": "<p>You are given two numeric strings <code>num1</code> and <code>num2</code> and two integers <code>max_sum</code> and <code>min_sum</code>. We denote an integer <code>x</code> to be <em>good</em> if:</p>\n\n<ul>\n\t<li><code>num1 &lt;= x &lt;= num2</code></li>\n\t<li><code>min_sum &lt;= digit_sum(x) &lt;= max_sum</code>.</li>\n</ul>\n\n<p>Return <em>the number of good integers</em>. Since the answer may be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Note that <code>digit_sum(x)</code> denotes the sum of the digits of <code>x</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;1&quot;, num2 = &quot;12&quot;, <code>min_sum</code> = 1, max_sum = 8\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> There are 11 integers whose sum of digits lies between 1 and 8 are 1,2,3,4,5,6,7,8,10,11, and 12. Thus, we return 11.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;1&quot;, num2 = &quot;5&quot;, <code>min_sum</code> = 1, max_sum = 5\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The 5 integers whose sum of digits lies between 1 and 5 are 1,2,3,4, and 5. Thus, we return 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1 &lt;= num2 &lt;= 10<sup>22</sup></code></li>\n\t<li><code>1 &lt;= min_sum &lt;= max_sum &lt;= 400</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 485,
            "dislikes": 11,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.2K\", \"totalSubmission\": \"27.5K\", \"totalAcceptedRaw\": 9217, \"totalSubmissionRaw\": 27478, \"acRate\": \"33.5%\"}",
            "hints": [
                "Let f(n, l, r) denotes the number of integers from 1 to n with the sum of digits between l and r.",
                "The answer is f(num2, min_sum, max_sum) - f(num-1, min_sum, max_sum).",
                "You can calculate f(n, l, r) using digit dp."
            ],
            "rephrased": {
                "body": "Given two numeric strings `num1` and `num2`, and two integers `min_sum` and `max_sum`, find the number of integers `x` that satisfy the following conditions:\n\n1.  `num1 <= x <= num2`\n2.  `min_sum <= digit_sum(x) <= max_sum`, where `digit_sum(x)` is the sum of the digits of `x`.\n\nReturn the number of such integers modulo `10^9 + 7`.  Essentially, count the integers between num1 and num2 (inclusive) whose digits sum falls between min_sum and max_sum (inclusive).",
                "constraints": [
                    "1 <= num1 <= num2 <= 10^22",
                    "1 <= min_sum <= max_sum <= 400"
                ],
                "testcases": [
                    {
                        "input": "num1 = \"1\", num2 = \"12\", min_sum = 1, max_sum = 8",
                        "output": "11",
                        "explanation": "The integers between 1 and 12 (inclusive) whose digit sums are between 1 and 8 (inclusive) are: 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, and 12.  There are 11 such numbers."
                    },
                    {
                        "input": "num1 = \"1\", num2 = \"5\", min_sum = 1, max_sum = 5",
                        "output": "5",
                        "explanation": "The integers between 1 and 5 (inclusive) whose digit sums are between 1 and 5 (inclusive) are: 1, 2, 3, 4, and 5. There are 5 such numbers."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Let f(n, l, r) denotes the number of integers from 1 to n with the sum of digits between l and r.",
            "The answer is f(num2, min_sum, max_sum) - f(num-1, min_sum, max_sum).",
            "You can calculate f(n, l, r) using digit dp."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int count(string num1, string num2, int min_sum, int max_sum) {\n    const string num1WithLeadingZeros =\n        string(num2.length() - num1.length(), '0') + num1;\n    // dp[i][j][k1][k2] := # of valid integers with size i and at most sum of j.\n    // The variables k1 and k2 indicate tight constraints (0/1) for `num1` and\n    // `num2` respectively.\n    dp.resize(num2.length(),\n              vector<vector<vector<int>>>(\n                  max_sum + 1, vector<vector<int>>(2, vector<int>(2, -1))));\n    return count(num1WithLeadingZeros, num2, 0, max_sum, true, true) -\n           count(num1WithLeadingZeros, num2, 0, min_sum - 1, true, true);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  vector<vector<vector<vector<int>>>> dp;\n\n  int count(const string& num1, const string& num2, int i, int sum,\n            bool isTight1, bool isTight2) {\n    if (sum < 0)\n      return 0;\n    if (i == num2.length())\n      return 1;\n    if (dp[i][sum][isTight1][isTight2] != -1)\n      return dp[i][sum][isTight1][isTight2];\n\n    int res = 0;\n\n    const int minDigit = isTight1 ? num1[i] - '0' : 0;\n    const int maxDigit = isTight2 ? num2[i] - '0' : 9;\n    for (int d = minDigit; d <= maxDigit; ++d) {\n      const bool nextIsTight1 = isTight1 && (d == minDigit);\n      const bool nextIsTight2 = isTight2 && (d == maxDigit);\n      res += count(num1, num2, i + 1, sum - d, nextIsTight1, nextIsTight2);\n      res %= kMod;\n    }\n\n    return dp[i][sum][isTight1][isTight2] = res;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}