{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2845",
            "title": "Count of Interesting Subarrays",
            "titleSlug": "count-of-interesting-subarrays",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>, an integer <code>modulo</code>, and an integer <code>k</code>.</p>\n\n<p>Your task is to find the count of subarrays that are <strong>interesting</strong>.</p>\n\n<p>A <strong>subarray</strong> <code>nums[l..r]</code> is <strong>interesting</strong> if the following condition holds:</p>\n\n<ul>\n\t<li>Let <code>cnt</code> be the number of indices <code>i</code> in the range <code>[l, r]</code> such that <code>nums[i] % modulo == k</code>. Then, <code>cnt % modulo == k</code>.</li>\n</ul>\n\n<p>Return <em>an integer denoting the count of interesting subarrays. </em></p>\n\n<p><span><strong>Note:</strong> A subarray is <em>a contiguous non-empty sequence of elements within an array</em>.</span></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], modulo = 2, k = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> In this example the interesting subarrays are: \nThe subarray nums[0..0] which is [3]. \n- There is only one index, i = 0, in the range [0, 0] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 1 and cnt % modulo == k.  \nThe subarray nums[0..1] which is [3,2].\n- There is only one index, i = 0, in the range [0, 1] that satisfies nums[i] % modulo == k.  \n- Hence, cnt = 1 and cnt % modulo == k.\nThe subarray nums[0..2] which is [3,2,4]. \n- There is only one index, i = 0, in the range [0, 2] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 1 and cnt % modulo == k. \nIt can be shown that there are no other interesting subarrays. So, the answer is 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,9,6], modulo = 3, k = 0\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>In this example the interesting subarrays are: \nThe subarray nums[0..3] which is [3,1,9,6]. \n- There are three indices, i = 0, 2, 3, in the range [0, 3] that satisfy nums[i] % modulo == k. \n- Hence, cnt = 3 and cnt % modulo == k. \nThe subarray nums[1..1] which is [1]. \n- There is no index, i, in the range [1, 1] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 0 and cnt % modulo == k. \nIt can be shown that there are no other interesting subarrays. So, the answer is 2.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5 </sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= modulo &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= k &lt; modulo</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 490,
            "dislikes": 68,
            "similarQuestions": "[{\"title\": \"Subarray Sums Divisible by K\", \"titleSlug\": \"subarray-sums-divisible-by-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Number of Nice Subarrays\", \"titleSlug\": \"count-number-of-nice-subarrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.7K\", \"totalSubmission\": \"39K\", \"totalAcceptedRaw\": 13707, \"totalSubmissionRaw\": 39032, \"acRate\": \"35.1%\"}",
            "hints": [
                "The problem can be solved using prefix sums.",
                "Let <code>count[i]</code> be the number of indices where <code>nums[i] % modulo == k</code> among the first <code>i</code> indices.",
                "<code>count[0] = 0</code> and <code>count[i] = count[i - 1] + (nums[i - 1] % modulo == k ? 1 : 0)</code> for <code>i = 1, 2, ..., n</code>.",
                "Now we want to calculate for each <code>i = 1, 2, ..., n</code>, how many indices <code>j < i</code> such that <code>(count[i] - count[j]) % modulo == k</code>.",
                "Rewriting <code>(count[i] - count[j]) % modulo == k</code> becomes <code>count[j] = (count[i] + modulo - k) % modulo</code>.",
                "Using a map data structure, for each <code>i = 0, 1, 2, ..., n</code>, we just sum up all <code>map[(count[i] + modulo - k) % modulo]</code> before increasing <code>map[count[i] % modulo]</code>, and the total sum is the final answer."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums`, an integer `modulo`, and an integer `k`, find the number of 'interesting' subarrays.  A subarray `nums[l..r]` is considered 'interesting' if the count (`cnt`) of indices `i` in the range `[l, r]` where `nums[i] % modulo == k` satisfies the condition `cnt % modulo == k`.  A subarray must be a contiguous non-empty sequence of elements within the array.",
                "constraints": [
                    "1 <= nums.length <= 10<sup>5</sup>",
                    "1 <= nums[i] <= 10<sup>9</sup>",
                    "1 <= modulo <= 10<sup>9</sup>",
                    "0 <= k < modulo"
                ],
                "testcases": [
                    {
                        "input": "nums = [3,2,4], modulo = 2, k = 1",
                        "output": "3",
                        "explanation": "The interesting subarrays are: [3], [3,2], and [3,2,4].\n- [3]: cnt = 1, 1 % 2 == 1.\n- [3,2]: cnt = 1, 1 % 2 == 1.\n- [3,2,4]: cnt = 1, 1 % 2 == 1."
                    },
                    {
                        "input": "nums = [3,1,9,6], modulo = 3, k = 0",
                        "output": "2",
                        "explanation": "The interesting subarrays are: [3,1,9,6] and [1].\n- [3,1,9,6]: cnt = 3, 3 % 3 == 0.\n- [1]: cnt = 0, 0 % 3 == 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "subarray-sums-divisible-by-k",
                "title": "Subarray Sums Divisible by K",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-number-of-nice-subarrays",
                "title": "Count Number of Nice Subarrays",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The problem can be solved using prefix sums.",
            "Let <code>count[i]</code> be the number of indices where <code>nums[i] % modulo == k</code> among the first <code>i</code> indices.",
            "<code>count[0] = 0</code> and <code>count[i] = count[i - 1] + (nums[i - 1] % modulo == k ? 1 : 0)</code> for <code>i = 1, 2, ..., n</code>.",
            "Now we want to calculate for each <code>i = 1, 2, ..., n</code>, how many indices <code>j < i</code> such that <code>(count[i] - count[j]) % modulo == k</code>.",
            "Rewriting <code>(count[i] - count[j]) % modulo == k</code> becomes <code>count[j] = (count[i] + modulo - k) % modulo</code>.",
            "Using a map data structure, for each <code>i = 0, 1, 2, ..., n</code>, we just sum up all <code>map[(count[i] + modulo - k) % modulo]</code> before increasing <code>map[count[i] % modulo]</code>, and the total sum is the final answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long countInterestingSubarrays(vector<int>& nums, int modulo, int k) {\n    long ans = 0;\n    int prefix = 0;  // (number of nums[i] % modulo == k so far) % modulo\n    unordered_map<int, int> prefixCount{{0, 1}};\n\n    for (const int num : nums) {\n      if (num % modulo == k)\n        prefix = (prefix + 1) % modulo;\n      ans += prefixCount[(prefix - k + modulo) % modulo];\n      ++prefixCount[prefix];\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long countInterestingSubarrays(List<Integer> nums, int modulo, int k) {\n    long ans = 0;\n    int prefix = 0; // (number of nums[i] % modulo == k so far) % modulo\n    Map<Integer, Integer> prefixCount = new HashMap<>();\n    prefixCount.put(0, 1);\n\n    for (final int num : nums) {\n      if (num % modulo == k)\n        prefix = (prefix + 1) % modulo;\n      ans += prefixCount.getOrDefault((prefix - k + modulo) % modulo, 0);\n      prefixCount.merge(prefix, 1, Integer::sum);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countInterestingSubarrays(self, nums: List[int], modulo: int, k: int) -> int:\n    ans = 0\n    prefix = 0  # (number of nums[i] % modulo == k so far) % modulo\n    prefixCount = collections.Counter({0: 1})\n\n    for num in nums:\n      if num % modulo == k:\n        prefix = (prefix + 1) % modulo\n      ans += prefixCount[(prefix - k + modulo) % modulo]\n      prefixCount[prefix] += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}