{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "327",
            "title": "Count of Range Sum",
            "titleSlug": "count-of-range-sum",
            "content": "<p>Given an integer array <code>nums</code> and two integers <code>lower</code> and <code>upper</code>, return <em>the number of range sums that lie in</em> <code>[lower, upper]</code> <em>inclusive</em>.</p>\n\n<p>Range sum <code>S(i, j)</code> is defined as the sum of the elements in <code>nums</code> between indices <code>i</code> and <code>j</code> inclusive, where <code>i &lt;= j</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,5,-1], lower = -2, upper = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0], lower = 0, upper = 0\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= lower &lt;= upper &lt;= 10<sup>5</sup></code></li>\n\t<li>The answer is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2225,
            "dislikes": 227,
            "similarQuestions": "[{\"title\": \"Count of Smaller Numbers After Self\", \"titleSlug\": \"count-of-smaller-numbers-after-self\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Reverse Pairs\", \"titleSlug\": \"reverse-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count the Number of Fair Pairs\", \"titleSlug\": \"count-the-number-of-fair-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Merge Sort",
                    "slug": "merge-sort"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"73.3K\", \"totalSubmission\": \"205.2K\", \"totalAcceptedRaw\": 73274, \"totalSubmissionRaw\": 205180, \"acRate\": \"35.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums` and two integers `lower` and `upper`, determine the number of range sums that fall within the inclusive range of `[lower, upper]`. A range sum `S(i, j)` is defined as the sum of elements within `nums` from index `i` to index `j` (inclusive), where `i <= j`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "-2^31 <= nums[i] <= 2^31 - 1",
                    "-10^5 <= lower <= upper <= 10^5",
                    "The answer is guaranteed to fit in a 32-bit integer."
                ],
                "testcases": [
                    {
                        "input": "nums = [-2,5,-1], lower = -2, upper = 2",
                        "output": "3",
                        "explanation": "The ranges [0,0], [2,2], and [0,2] have sums -2, -1, and 2 respectively, all falling within the range [-2, 2]. Therefore, there are 3 such ranges."
                    },
                    {
                        "input": "nums = [0], lower = 0, upper = 0",
                        "output": "1",
                        "explanation": "The range [0,0] has a sum of 0, which falls within the range [0, 0]. Therefore, there is 1 such range."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-of-smaller-numbers-after-self",
                "title": "Count of Smaller Numbers After Self",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "reverse-pairs",
                "title": "Reverse Pairs",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-the-number-of-fair-pairs",
                "title": "Count the Number of Fair Pairs",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countRangeSum(vector<int>& nums, int lower, int upper) {\n    const int n = nums.size();\n    int ans = 0;\n    vector<long> prefix{0};\n\n    for (int i = 0; i < n; ++i)\n      prefix.push_back(prefix.back() + nums[i]);\n\n    mergeSort(prefix, 0, n, lower, upper, ans);\n    return ans;\n  }\n\n private:\n  void mergeSort(vector<long>& prefix, int l, int r, int lower, int upper,\n                 int& ans) {\n    if (l >= r)\n      return;\n\n    const int m = (l + r) / 2;\n    mergeSort(prefix, l, m, lower, upper, ans);\n    mergeSort(prefix, m + 1, r, lower, upper, ans);\n    merge(prefix, l, m, r, lower, upper, ans);\n  }\n\n  void merge(vector<long>& prefix, int l, int m, int r, int lower, int upper,\n             int& ans) {\n    int lo = m + 1;  // 1st index s.t. prefix[lo] - prefix[i] >= lower\n    int hi = m + 1;  // 1st index s.t. prefix[hi] - prefix[i] > upper\n\n    // For each index i in range [l, m], add hi - lo to ans\n    for (int i = l; i <= m; ++i) {\n      while (lo <= r && prefix[lo] - prefix[i] < lower)\n        ++lo;\n      while (hi <= r && prefix[hi] - prefix[i] <= upper)\n        ++hi;\n      ans += hi - lo;\n    }\n\n    vector<long> sorted(r - l + 1);\n    int k = 0;      // sorted's index\n    int i = l;      // left's index\n    int j = m + 1;  // right's index\n\n    while (i <= m && j <= r)\n      if (prefix[i] < prefix[j])\n        sorted[k++] = prefix[i++];\n      else\n        sorted[k++] = prefix[j++];\n\n    // Put the possible remaining left part into the sorted array.\n    while (i <= m)\n      sorted[k++] = prefix[i++];\n\n    // Put the possible remaining right part into the sorted array.\n    while (j <= r)\n      sorted[k++] = prefix[j++];\n\n    copy(sorted.begin(), sorted.end(), prefix.begin() + l);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countRangeSum(int[] nums, int lower, int upper) {\n    final int n = nums.length;\n    long[] prefix = new long[n + 1];\n\n    for (int i = 0; i < n; ++i)\n      prefix[i + 1] = (long) nums[i] + prefix[i];\n\n    mergeSort(prefix, 0, n, lower, upper);\n    return ans;\n  }\n\n  private int ans = 0;\n\n  private void mergeSort(long[] prefix, int l, int r, int lower, int upper) {\n    if (l >= r)\n      return;\n\n    final int m = (l + r) / 2;\n    mergeSort(prefix, l, m, lower, upper);\n    mergeSort(prefix, m + 1, r, lower, upper);\n    merge(prefix, l, m, r, lower, upper);\n  }\n\n  private void merge(long[] prefix, int l, int m, int r, int lower, int upper) {\n    int lo = m + 1; // 1st index s.t. prefix[lo] - prefix[i] >= lower\n    int hi = m + 1; // 1st index s.t. prefix[hi] - prefix[i] > upper\n\n    // For each index i in range [l, m], add hi - lo to ans\n    for (int i = l; i <= m; ++i) {\n      while (lo <= r && prefix[lo] - prefix[i] < lower)\n        ++lo;\n      while (hi <= r && prefix[hi] - prefix[i] <= upper)\n        ++hi;\n      ans += hi - lo;\n    }\n\n    long[] sorted = new long[r - l + 1];\n    int k = 0;     // sorted's index\n    int i = l;     // left's index\n    int j = m + 1; // right's index\n\n    while (i <= m && j <= r)\n      if (prefix[i] < prefix[j])\n        sorted[k++] = prefix[i++];\n      else\n        sorted[k++] = prefix[j++];\n\n    // Put the possible remaining left part into the sorted array.\n    while (i <= m)\n      sorted[k++] = prefix[i++];\n\n    // Put the possible remaining right part into the sorted array.\n    while (j <= r)\n      sorted[k++] = prefix[j++];\n\n    System.arraycopy(sorted, 0, prefix, l, sorted.length);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:\n    n = len(nums)\n    self.ans = 0\n    prefix = [0] + list(itertools.accumulate(nums))\n\n    self._mergeSort(prefix, 0, n, lower, upper)\n    return self.ans\n\n  def _mergeSort(self, prefix: List[int], l: int, r: int, lower: int, upper: int) -> None:\n    if l >= r:\n      return\n\n    m = (l + r) // 2\n    self._mergeSort(prefix, l, m, lower, upper)\n    self._mergeSort(prefix, m + 1, r, lower, upper)\n    self._merge(prefix, l, m, r, lower, upper)\n\n  def _merge(self, prefix: List[int], l: int, m: int, r: int, lower: int, upper: int) -> None:\n    lo = m + 1  # 1st index s.t. prefix[lo] - prefix[i] >= lower\n    hi = m + 1  # 1st index s.t. prefix[hi] - prefix[i] > upper\n\n    # For each index i in range [l, m], add hi - lo to ans\n    for i in range(l, m + 1):\n      while lo <= r and prefix[lo] - prefix[i] < lower:\n        lo += 1\n      while hi <= r and prefix[hi] - prefix[i] <= upper:\n        hi += 1\n      self.ans += hi - lo\n\n    sorted = [0] * (r - l + 1)\n    k = 0      # sorted's index\n    i = l      # left's index\n    j = m + 1  # right's index\n\n    while i <= m and j <= r:\n      if prefix[i] < prefix[j]:\n        sorted[k] = prefix[i]\n        k += 1\n        i += 1\n      else:\n        sorted[k] = prefix[j]\n        k += 1\n        j += 1\n\n    # Put the possible remaining left part into the sorted array.\n    while i <= m:\n      sorted[k] = prefix[i]\n      k += 1\n      i += 1\n\n    # Put the possible remaining right part into the sorted array.\n    while j <= r:\n      sorted[k] = prefix[j]\n      k += 1\n      j += 1\n\n    prefix[l:l + len(sorted)] = sorted\n",
                "lang_text": "py"
            }
        }
    }
}