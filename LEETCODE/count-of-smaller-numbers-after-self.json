{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "315",
            "title": "Count of Smaller Numbers After Self",
            "titleSlug": "count-of-smaller-numbers-after-self",
            "content": "<p>Given an integer array <code>nums</code>, return<em> an integer array </em><code>counts</code><em> where </em><code>counts[i]</code><em> is the number of smaller elements to the right of </em><code>nums[i]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,6,1]\n<strong>Output:</strong> [2,1,1,0]\n<strong>Explanation:</strong>\nTo the right of 5 there are <b>2</b> smaller elements (2 and 1).\nTo the right of 2 there is only <b>1</b> smaller element (1).\nTo the right of 6 there is <b>1</b> smaller element (1).\nTo the right of 1 there is <b>0</b> smaller element.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1]\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-1]\n<strong>Output:</strong> [0,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 8631,
            "dislikes": 233,
            "similarQuestions": "[{\"title\": \"Count of Range Sum\", \"titleSlug\": \"count-of-range-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Queue Reconstruction by Height\", \"titleSlug\": \"queue-reconstruction-by-height\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Reverse Pairs\", \"titleSlug\": \"reverse-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"How Many Numbers Are Smaller Than the Current Number\", \"titleSlug\": \"how-many-numbers-are-smaller-than-the-current-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Good Triplets in an Array\", \"titleSlug\": \"count-good-triplets-in-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count the Number of K-Big Indices\", \"titleSlug\": \"count-the-number-of-k-big-indices\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Merge Sort",
                    "slug": "merge-sort"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"308.4K\", \"totalSubmission\": \"727.3K\", \"totalAcceptedRaw\": 308396, \"totalSubmissionRaw\": 727257, \"acRate\": \"42.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, return an integer array `counts` where `counts[i]` is the number of smaller elements to the right of `nums[i]`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "-10^4 <= nums[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[5,2,6,1]",
                        "output": "[2,1,1,0]",
                        "explanation": "For nums[0] = 5, there are 2 smaller elements (2 and 1) to the right. For nums[1] = 2, there is 1 smaller element (1) to the right. For nums[2] = 6, there is 1 smaller element (1) to the right. For nums[3] = 1, there are 0 smaller elements to the right."
                    },
                    {
                        "input": "[-1]",
                        "output": "[0]",
                        "explanation": "There are no elements to the right of -1, so the count is 0."
                    },
                    {
                        "input": "[-1,-1]",
                        "output": "[0,0]",
                        "explanation": "For nums[0] = -1, there are no smaller elements to the right. For nums[1] = -1, there are no elements to the right."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-of-range-sum",
                "title": "Count of Range Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "queue-reconstruction-by-height",
                "title": "Queue Reconstruction by Height",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "reverse-pairs",
                "title": "Reverse Pairs",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "how-many-numbers-are-smaller-than-the-current-number",
                "title": "How Many Numbers Are Smaller Than the Current Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-good-triplets-in-an-array",
                "title": "Count Good Triplets in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-the-number-of-k-big-indices",
                "title": "Count the Number of K-Big Indices",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class FenwickTree {\n public:\n  FenwickTree(int n) : sums(n + 1) {}\n\n  void update(int i, int delta) {\n    while (i < sums.size()) {\n      sums[i] += delta;\n      i += lowbit(i);\n    }\n  }\n\n  int get(int i) const {\n    int sum = 0;\n    while (i > 0) {\n      sum += sums[i];\n      i -= lowbit(i);\n    }\n    return sum;\n  }\n\n private:\n  vector<int> sums;\n\n  static inline int lowbit(int i) {\n    return i & -i;\n  }\n};\n\nclass Solution {\n public:\n  vector<int> countSmaller(vector<int>& nums) {\n    vector<int> ans(nums.size());\n    unordered_map<int, int> ranks;\n    getRanks(nums, ranks);\n    FenwickTree tree(ranks.size());\n\n    for (int i = nums.size() - 1; i >= 0; --i) {\n      const int num = nums[i];\n      ans[i] = tree.get(ranks[num] - 1);\n      tree.update(ranks[num], 1);\n    }\n\n    return ans;\n  }\n\n private:\n  void getRanks(const vector<int>& nums, unordered_map<int, int>& ranks) {\n    set<int> sorted(nums.begin(), nums.end());\n    int rank = 0;\n    for (const int num : sorted)\n      ranks[num] = ++rank;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class FenwickTree {\n  public FenwickTree(int n) {\n    sums = new int[n + 1];\n  }\n\n  public void update(int i, int delta) {\n    while (i < sums.length) {\n      sums[i] += delta;\n      i += lowbit(i);\n    }\n  }\n\n  public int get(int i) {\n    int sum = 0;\n    while (i > 0) {\n      sum += sums[i];\n      i -= lowbit(i);\n    }\n    return sum;\n  }\n\n  private int[] sums;\n\n  private static int lowbit(int i) {\n    return i & -i;\n  }\n}\n\nclass Solution {\n  public List<Integer> countSmaller(int[] nums) {\n    List<Integer> ans = new ArrayList<>();\n    Map<Integer, Integer> ranks = new HashMap<>();\n    getRanks(nums, ranks);\n    FenwickTree tree = new FenwickTree(ranks.size());\n\n    for (int i = nums.length - 1; i >= 0; --i) {\n      final int num = nums[i];\n      ans.add(tree.get(ranks.get(num) - 1));\n      tree.update(ranks.get(num), 1);\n    }\n\n    Collections.reverse(ans);\n    return ans;\n  }\n\n  private void getRanks(int[] nums, Map<Integer, Integer> ranks) {\n    SortedSet<Integer> sorted = new TreeSet<>();\n    for (final int num : nums)\n      sorted.add(num);\n    int rank = 0;\n    for (Iterator<Integer> it = sorted.iterator(); it.hasNext();)\n      ranks.put(it.next(), ++rank);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class FenwickTree:\n  def __init__(self, n: int):\n    self.sums = [0] * (n + 1)\n\n  def update(self, i: int, delta: int) -> None:\n    while i < len(self.sums):\n      self.sums[i] += delta\n      i += FenwickTree.lowbit(i)\n\n  def get(self, i: int) -> int:\n    summ = 0\n    while i > 0:\n      summ += self.sums[i]\n      i -= FenwickTree.lowbit(i)\n    return summ\n\n  @staticmethod\n  def lowbit(i: int) -> int:\n    return i & -i\n\n\nclass Solution:\n  def countSmaller(self, nums: List[int]) -> List[int]:\n    ans = []\n    ranks = collections.Counter()\n    self._getRanks(nums, ranks)\n    tree = FenwickTree(len(ranks))\n\n    for num in reversed(nums):\n      ans.append(tree.get(ranks[num] - 1))\n      tree.update(ranks[num], 1)\n\n    return ans[::-1]\n\n  def _getRanks(self, nums: List[int], ranks: Dict[int, int]) -> None:\n    rank = 0\n    for num in sorted(set(nums)):\n      rank += 1\n      ranks[num] = rank\n",
                "lang_text": "py"
            }
        }
    }
}