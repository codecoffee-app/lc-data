{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2902",
            "title": "Count of Sub-Multisets With Bounded Sum",
            "titleSlug": "count-of-sub-multisets-with-bounded-sum",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> of non-negative integers, and two integers <code>l</code> and <code>r</code>.</p>\n\n<p>Return <em>the <strong>count of sub-multisets</strong> within</em> <code>nums</code> <em>where the sum of elements in each subset falls within the inclusive range of</em> <code>[l, r]</code>.</p>\n\n<p>Since the answer may be large, return it modulo <code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p>A <strong>sub-multiset</strong> is an <strong>unordered</strong> collection of elements of the array in which a given value <code>x</code> can occur <code>0, 1, ..., occ[x]</code> times, where <code>occ[x]</code> is the number of occurrences of <code>x</code> in the array.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>Two <strong>sub-multisets</strong> are the same if sorting both sub-multisets results in identical multisets.</li>\n\t<li>The sum of an <strong>empty</strong> multiset is <code>0</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,3], l = 6, r = 6\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The only subset of nums that has a sum of 6 is {1, 2, 3}.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,4,2,7], l = 1, r = 5\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The subsets of nums that have a sum within the range [1, 5] are {1}, {2}, {4}, {2, 2}, {1, 2}, {1, 4}, and {1, 2, 2}.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,3,5,2], l = 3, r = 5\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The subsets of nums that have a sum within the range [3, 5] are {3}, {5}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1, 2}, {1, 1, 3}, and {1, 2, 2}.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li>Sum of <code>nums</code> does not exceed <code>2 * 10<sup>4</sup></code>.</li>\n\t<li><code>0 &lt;= l &lt;= r &lt;= 2 * 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 139,
            "dislikes": 22,
            "similarQuestions": "[{\"title\": \"Coin Change\", \"titleSlug\": \"coin-change\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Coin Change II\", \"titleSlug\": \"coin-change-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"4K\", \"totalSubmission\": \"19.1K\", \"totalAcceptedRaw\": 3950, \"totalSubmissionRaw\": 19061, \"acRate\": \"20.7%\"}",
            "hints": [
                "Since the sum of\u00a0<code>nums</code>is at most\u00a0<code>20000</code>, the number of distinct elements of nums is <code>200</code>.",
                "Let <code>dp[x]</code> be the number of submultisets of <code>nums</code> with sum <code>x</code>.",
                "The answer to the problem is <code>dp[l] + dp[l+1] + \u2026 + dp[r]</code>.",
                "Use coin change dp to transition between states."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` of non-negative integers, and two integers `l` and `r`, determine the number of sub-multisets within `nums` whose element sum falls within the inclusive range of `[l, r]`. A sub-multiset is an unordered collection of elements where a value `x` can occur `0, 1, ..., occ[x]` times, where `occ[x]` is the frequency of `x` in the array.  Remember that two sub-multisets are considered the same if sorting them results in identical multisets, and the sum of an empty multiset is 0.  Return the count modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= nums.length <= 2 * 10<sup>4</sup>",
                    "0 <= nums[i] <= 2 * 10<sup>4</sup>",
                    "Sum of nums does not exceed 2 * 10<sup>4</sup>.",
                    "0 <= l <= r <= 2 * 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,2,3], l = 6, r = 6",
                        "output": "1",
                        "explanation": "The only sub-multiset of nums that has a sum of 6 is {1, 2, 3}."
                    },
                    {
                        "input": "nums = [2,1,4,2,7], l = 1, r = 5",
                        "output": "7",
                        "explanation": "The sub-multisets of nums that have a sum within the range [1, 5] are {1}, {2}, {4}, {2, 2}, {1, 2}, {1, 4}, and {1, 2, 2}."
                    },
                    {
                        "input": "nums = [1,2,1,3,5,2], l = 3, r = 5",
                        "output": "9",
                        "explanation": "The sub-multisets of nums that have a sum within the range [3, 5] are {3}, {5}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1, 2}, {1, 1, 3}, and {1, 2, 2}."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "coin-change",
                "title": "Coin Change",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "coin-change-ii",
                "title": "Coin Change II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Since the sum of\u00a0<code>nums</code>is at most\u00a0<code>20000</code>, the number of distinct elements of nums is <code>200</code>.",
            "Let <code>dp[x]</code> be the number of submultisets of <code>nums</code> with sum <code>x</code>.",
            "The answer to the problem is <code>dp[l] + dp[l+1] + \u2026 + dp[r]</code>.",
            "Use coin change dp to transition between states."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countSubMultisets(vector<int>& nums, int l, int r) {\n    constexpr int kMod = 1'000'000'007;\n    // dp[i] := the number of submultisets of `nums` with sum i\n    vector<long> dp(r + 1);\n    dp[0] = 1;\n    unordered_map<int, int> count;\n\n    for (const int num : nums)\n      ++count[num];\n\n    const int zeros = count[0];\n    count.erase(0);\n\n    for (const auto& [num, freq] : count) {\n      // stride[i] := dp[i] + dp[i - num] + dp[i - 2 * num] + ...\n      vector<long> stride = dp;\n      for (int i = num; i <= r; ++i)\n        stride[i] += stride[i - num];\n      for (int i = r; i > 0; --i)\n        if (i >= num * (freq + 1))\n          // dp[i] + dp[i - num] + dp[i - freq * num]\n          dp[i] = (stride[i] - stride[i - num * (freq + 1)]) % kMod;\n        else\n          dp[i] = stride[i] % kMod;\n    }\n\n    long ans = 0;\n    for (int i = l; i <= r; ++i)\n      ans = (ans + dp[i]) % kMod;\n    return ((zeros + 1) * ans) % kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countSubMultisets(List<Integer> nums, int l, int r) {\n    final int kMod = 1_000_000_007;\n    // dp[i] := the number of submultisets of `nums` with sum i\n    long[] dp = new long[r + 1];\n    dp[0] = 1;\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (final int num : nums)\n      count.merge(num, 1, Integer::sum);\n\n    final int zeros = count.containsKey(0) ? count.remove(0) : 0;\n\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n      final int num = entry.getKey();\n      final int freq = entry.getValue();\n      // stride[i] := dp[i] + dp[i - num] + dp[i - 2 * num] + ...\n      long[] stride = dp.clone();\n      for (int i = num; i <= r; ++i)\n        stride[i] += stride[i - num];\n      for (int i = r; i > 0; --i)\n        if (i >= num * (freq + 1))\n          // dp[i] + dp[i - num] + dp[i - freq * num]\n          dp[i] = (stride[i] - stride[i - num * (freq + 1)]) % kMod;\n        else\n          dp[i] = stride[i] % kMod;\n    }\n\n    long ans = 0;\n    for (int i = l; i <= r; ++i)\n      ans = (ans + dp[i]) % kMod;\n    return (int) (((zeros + 1) * ans) % kMod);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countSubMultisets(self, nums: List[int], l: int, r: int) -> int:\n    kMod = 1_000_000_007\n    # dp[i] := the number of submultisets of `nums` with sum i\n    dp = [1] + [0] * r\n    count = collections.Counter(nums)\n    zeros = count.pop(0, 0)\n\n    for num, freq in count.items():\n      # stride[i] := dp[i] + dp[i - num] + dp[i - 2 * num] + ...\n      stride = dp.copy()\n      for i in range(num, r + 1):\n        stride[i] += stride[i - num]\n      for i in range(r, 0, -1):\n        if i >= num * (freq + 1):\n          # dp[i] + dp[i - num] + dp[i - freq * num]\n          dp[i] = stride[i] - stride[i - num * (freq + 1)]\n        else:\n          dp[i] = stride[i]\n\n    return (zeros + 1) * sum(dp[l:r + 1]) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}