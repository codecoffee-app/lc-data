{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3067",
            "title": "Count Pairs of Connectable Servers in a Weighted Tree Network",
            "titleSlug": "count-pairs-of-connectable-servers-in-a-weighted-tree-network",
            "content": "<p>You are given an unrooted weighted tree with <code>n</code> vertices representing servers numbered from <code>0</code> to <code>n - 1</code>, an array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]</code> represents a bidirectional edge between vertices <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> of weight <code>weight<sub>i</sub></code>. You are also given an integer <code>signalSpeed</code>.</p>\n\n<p>Two servers <code>a</code> and <code>b</code> are <strong>connectable</strong> through a server <code>c</code> if:</p>\n\n<ul>\n\t<li><code>a &lt; b</code>, <code>a != c</code> and <code>b != c</code>.</li>\n\t<li>The distance from <code>c</code> to <code>a</code> is divisible by <code>signalSpeed</code>.</li>\n\t<li>The distance from <code>c</code> to <code>b</code> is divisible by <code>signalSpeed</code>.</li>\n\t<li>The path from <code>c</code> to <code>b</code> and the path from <code>c</code> to <code>a</code> do not share any edges.</li>\n</ul>\n\n<p>Return <em>an integer array</em> <code>count</code> <em>of length</em> <code>n</code> <em>where</em> <code>count[i]</code> <em>is the <strong>number</strong> of server pairs that are <strong>connectable</strong> through</em> <em>the server</em> <code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/21/example22.png\" style=\"width: 438px; height: 243px; padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]], signalSpeed = 1\n<strong>Output:</strong> [0,4,6,6,4,0]\n<strong>Explanation:</strong> Since signalSpeed is 1, count[c] is equal to the number of pairs of paths that start at c and do not share any edges.\nIn the case of the given path graph, count[c] is equal to the number of servers to the left of c multiplied by the servers to the right of c.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/21/example11.png\" style=\"width: 495px; height: 484px; padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]], signalSpeed = 3\n<strong>Output:</strong> [2,0,0,0,0,0,2]\n<strong>Explanation:</strong> Through server 0, there are 2 pairs of connectable servers: (4, 5) and (4, 6).\nThrough server 6, there are 2 pairs of connectable servers: (4, 5) and (0, 5).\nIt can be shown that no two servers are connectable through servers other than 0 and 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]</code><!-- notionvc: a2623897-1bb1-4c07-84b6-917ffdcd83ec --></li>\n\t<li><code>1 &lt;= weight<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= signalSpeed &lt;= 10<sup>6</sup></code></li>\n\t<li>The input is generated such that <code>edges</code> represents a valid tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 176,
            "dislikes": 22,
            "similarQuestions": "[{\"title\": \"Minimum Height Trees\", \"titleSlug\": \"minimum-height-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Distances in Tree\", \"titleSlug\": \"sum-of-distances-in-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.4K\", \"totalSubmission\": \"19.8K\", \"totalAcceptedRaw\": 11407, \"totalSubmissionRaw\": 19816, \"acRate\": \"57.6%\"}",
            "hints": [
                "Take each node as the root of the tree, run DFS, and save for each node <code>i</code>, the number of nodes in the subtree rooted at <code>i</code> whose distance to the root is divisible by <code>signalSpeed</code>.",
                "If the root has <code>m</code> children named <code>c<sub>1</sub>, c<sub>2</sub>, \u2026, c<sub>m</sub></code> that respectively have <code>num[c<sub>1</sub>], num[c<sub>2</sub>], \u2026, num[c<sub>m</sub>]</code> nodes in their subtrees whose distance is divisible by signalSpeed. Then, there are <code>((S - num[c<sub>i</sub>]) * num[c<sub>i</sub>]) / 2</code>that are connectable through the root that we have fixed, where <code>S</code> is the sum of <code>num[c<sub>i</sub>]</code>."
            ],
            "rephrased": {
                "body": "Given an unrooted weighted tree with `n` vertices (servers numbered from 0 to n-1) represented by an array `edges` where `edges[i] = [a_i, b_i, weight_i]` signifies a bidirectional edge between vertices `a_i` and `b_i` with weight `weight_i`, and a signal speed `signalSpeed`. Two servers `a` and `b` are considered connectable through server `c` if `a < b`, `a != c`, `b != c`, the distance from `c` to `a` and `c` to `b` are both divisible by `signalSpeed`, and the paths from `c` to `a` and `c` to `b` do not share any edges.  The task is to return an integer array `count` of length `n` where `count[i]` represents the number of server pairs connectable through server `i`.",
                "constraints": [
                    "2 <= n <= 1000",
                    "edges.length == n - 1",
                    "edges[i].length == 3",
                    "0 <= a_i, b_i < n",
                    "1 <= weight_i <= 10^6",
                    "1 <= signalSpeed <= 10^6",
                    "The input is generated such that `edges` represents a valid tree."
                ],
                "testcases": [
                    {
                        "input": "edges = [[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]], signalSpeed = 1",
                        "output": "[0,4,6,6,4,0]",
                        "explanation": "With a signalSpeed of 1, `count[c]` corresponds to the number of pairs of paths originating from `c` that have no shared edges.  For the given linear tree, it equals the product of the number of servers to the left and right of `c`."
                    },
                    {
                        "input": "edges = [[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]], signalSpeed = 3",
                        "output": "[2,0,0,0,0,0,2]",
                        "explanation": "Server 0 has two connectable pairs: (4, 5) and (4, 6). Server 6 also has two: (4, 5) and (0, 5). No other servers have any connectable pairs."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-height-trees",
                "title": "Minimum Height Trees",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "sum-of-distances-in-tree",
                "title": "Sum of Distances in Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Take each node as the root of the tree, run DFS, and save for each node <code>i</code>, the number of nodes in the subtree rooted at <code>i</code> whose distance to the root is divisible by <code>signalSpeed</code>.",
            "If the root has <code>m</code> children named <code>c<sub>1</sub>, c<sub>2</sub>, \u2026, c<sub>m</sub></code> that respectively have <code>num[c<sub>1</sub>], num[c<sub>2</sub>], \u2026, num[c<sub>m</sub>]</code> nodes in their subtrees whose distance is divisible by signalSpeed. Then, there are <code>((S - num[c<sub>i</sub>]) * num[c<sub>i</sub>]) / 2</code>that are connectable through the root that we have fixed, where <code>S</code> is the sum of <code>num[c<sub>i</sub>]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> countPairsOfConnectableServers(vector<vector<int>>& edges,\n                                             int signalSpeed) {\n    const int n = edges.size() + 1;\n    vector<int> ans;\n    vector<vector<pair<int, int>>> tree(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int w = edge[2];\n      tree[u].emplace_back(v, w);\n      tree[v].emplace_back(u, w);\n    }\n\n    for (int i = 0; i < n; ++i)\n      ans.push_back(connectablePairsRootedAt(tree, i, signalSpeed));\n\n    return ans;\n  }\n\n private:\n  // Returns the number of server pairs that are connectable through the server\n  // `u`.\n  int connectablePairsRootedAt(const vector<vector<pair<int, int>>>& tree,\n                               int u, int signalSpeed) {\n    int pairs = 0;\n    int count = 0;\n    for (const auto& [v, w] : tree[u]) {\n      const int childCount = dfs(tree, v, u, w, signalSpeed);\n      pairs += count * childCount;\n      count += childCount;\n    }\n    return pairs;\n  }\n\n  // Returns the number of servers that are connectable throught the server `u`\n  // (dist % signalSpeed == 0).\n  int dfs(const vector<vector<pair<int, int>>>& tree, int u, int prev, int dist,\n          int signalSpeed) {\n    int count = 0;\n    for (const auto& [v, w] : tree[u]) {\n      if (v == prev)\n        continue;\n      count += dfs(tree, v, u, dist + w, signalSpeed);\n    }\n    return (dist % signalSpeed == 0 ? 1 : 0) + count;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] countPairsOfConnectableServers(int[][] edges, int signalSpeed) {\n    final int n = edges.length + 1;\n    int[] ans = new int[n];\n    List<Pair<Integer, Integer>>[] graph = new List[n];\n\n    for (int i = 0; i < n; i++)\n      graph[i] = new ArrayList<>();\n\n    for (final int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      final int w = edge[2];\n      graph[u].add(new Pair<>(v, w));\n      graph[v].add(new Pair<>(u, w));\n    }\n\n    for (int i = 0; i < n; ++i)\n      ans[i] = connectablePairsRootedAt(graph, i, signalSpeed);\n\n    return ans;\n  }\n\n  // Returns the number of server pairs that are connectable through the server\n  // `u`.\n  private int connectablePairsRootedAt(List<Pair<Integer, Integer>>[] graph, int u,\n                                       int signalSpeed) {\n    int pairs = 0;\n    int count = 0;\n    for (Pair<Integer, Integer> pair : graph[u]) {\n      final int v = pair.getKey();\n      final int w = pair.getValue();\n      final int childCount = dfs(graph, v, u, w, signalSpeed);\n      pairs += count * childCount;\n      count += childCount;\n    }\n    return pairs;\n  }\n\n  // Returns the number of servers that are connectable throught the server `u`\n  // (dist % signalSpeed == 0).\n  private int dfs(List<Pair<Integer, Integer>>[] graph, int u, int prev, int dist,\n                  int signalSpeed) {\n    int count = 0;\n    for (Pair<Integer, Integer> pair : graph[u]) {\n      final int v = pair.getKey();\n      final int w = pair.getValue();\n      if (v == prev)\n        continue;\n      count += dfs(graph, v, u, dist + w, signalSpeed);\n    }\n    return (dist % signalSpeed == 0 ? 1 : 0) + count;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countPairsOfConnectableServers(self, edges: List[List[int]], signalSpeed: int) -> List[int]:\n    n = len(edges) + 1\n    tree = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      tree[u].append((v, w))\n      tree[v].append((u, w))\n\n    def connectablePairsRootedAt(u: int) -> int:\n      pairs = 0\n      count = 0\n      for v, w in tree[u]:\n        childCount = dfs(v, u, w)\n        pairs += count * childCount\n        count += childCount\n      return pairs\n\n    def dfs(u: int, prev: int, dist: int) -> int:\n      return int(dist % signalSpeed == 0) + \\\n          sum(dfs(v, u, dist + w)\n              for v, w in tree[u]\n              if v != prev)\n\n    return [connectablePairsRootedAt(i) for i in range(n)]\n",
                "lang_text": "py"
            }
        }
    }
}