{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1782",
            "title": "Count Pairs Of Nodes",
            "titleSlug": "count-pairs-of-nodes",
            "content": "<p>You are given an undirected graph defined by an integer <code>n</code>, the number of nodes, and a 2D integer array <code>edges</code>, the edges in the graph, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an <strong>undirected</strong> edge between <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>. You are also given an integer array <code>queries</code>.</p>\n\n<p>Let <code>incident(a, b)</code> be defined as the <strong>number of edges</strong> that are connected to <strong>either</strong> node <code>a</code> or <code>b</code>.</p>\n\n<p>The answer to the <code>j<sup>th</sup></code> query is the <strong>number of pairs</strong> of nodes <code>(a, b)</code> that satisfy <strong>both</strong> of the following conditions:</p>\n\n<ul>\n\t<li><code>a &lt; b</code></li>\n\t<li><code>incident(a, b) &gt; queries[j]</code></li>\n</ul>\n\n<p>Return <em>an array </em><code>answers</code><em> such that </em><code>answers.length == queries.length</code><em> and </em><code>answers[j]</code><em> is the answer of the </em><code>j<sup>th</sup></code><em> query</em>.</p>\n\n<p>Note that there can be <strong>multiple edges</strong> between the same two nodes.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/08/winword_2021-06-08_00-58-39.png\" style=\"width: 529px; height: 305px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]\n<strong>Output:</strong> [6,5]\n<strong>Explanation:</strong> The calculations for incident(a, b) are shown in the table above.\nThe answers for each of the queries are as follows:\n- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.\n- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]\n<strong>Output:</strong> [10,10,9,8,6]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= edges.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\n\t<li><code>u<sub>i </sub>!= v<sub>i</sub></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 20</code></li>\n\t<li><code>0 &lt;= queries[j] &lt; edges.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 304,
            "dislikes": 159,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.3K\", \"totalSubmission\": \"15.8K\", \"totalAcceptedRaw\": 6289, \"totalSubmissionRaw\": 15822, \"acRate\": \"39.7%\"}",
            "hints": [
                "We want to count pairs (x,y) such that degree[x] + degree[y] - occurrences(x,y) > k",
                "Think about iterating on x, and counting the number of valid y to pair with x.",
                "You can consider at first that the (- occurrences(x,y)) isn't there, or it is 0 at first for all y. Count the valid y this way.",
                "Then you can iterate on the neighbors of x, let that neighbor be y, and update occurrences(x,y).",
                "When you update occurrences(x,y), the left-hand side decreases. Once it reaches k, then y is not valid for x anymore, so you should decrease the answer by 1."
            ],
            "rephrased": {
                "body": "You are given an undirected graph with `n` nodes and a list of edges. Each edge connects two nodes `u` and `v`.  You are also given a list of queries. For each query, determine the number of pairs of nodes (a, b) such that `a < b` and `incident(a, b) > queries[j]`.  `incident(a, b)` is defined as the number of edges connected to either node `a` or node `b`.  Return an array containing the answers for each query.",
                "constraints": [
                    "2 <= n <= 2 * 10^4",
                    "1 <= edges.length <= 10^5",
                    "1 <= u_i, v_i <= n",
                    "u_i != v_i",
                    "1 <= queries.length <= 20",
                    "0 <= queries[j] < edges.length"
                ],
                "testcases": [
                    {
                        "input": "n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]",
                        "output": "[6,5]",
                        "explanation": "For query 2, all pairs (a, b) have incident(a, b) > 2. For query 3, all pairs except (3, 4) have incident(a, b) > 3."
                    },
                    {
                        "input": "n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]",
                        "output": "[10,10,9,8,6]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "We want to count pairs (x,y) such that degree[x] + degree[y] - occurrences(x,y) > k",
            "Think about iterating on x, and counting the number of valid y to pair with x.",
            "You can consider at first that the (- occurrences(x,y)) isn't there, or it is 0 at first for all y. Count the valid y this way.",
            "Then you can iterate on the neighbors of x, let that neighbor be y, and update occurrences(x,y).",
            "When you update occurrences(x,y), the left-hand side decreases. Once it reaches k, then y is not valid for x anymore, so you should decrease the answer by 1."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> countPairs(int n, vector<vector<int>>& edges,\n                         vector<int>& queries) {\n    vector<int> ans(queries.size());\n\n    // count[i] := # of edges of node i\n    vector<int> count(n + 1);\n\n    // shared[i][j] := # of edges incident to i or j, where i < j\n    vector<unordered_map<int, int>> shared(n + 1);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      ++count[u];\n      ++count[v];\n      ++shared[min(u, v)][max(u, v)];\n    }\n\n    vector<int> sortedCount(count);\n    std::ranges::sort(sortedCount);\n\n    int k = 0;\n    for (const int query : queries) {\n      for (int i = 1, j = n; i < j;)\n        if (sortedCount[i] + sortedCount[j] > query)\n          // sortedCount[i] + sortedCount[j] > query\n          // sortedCount[i + 1] + sortedCount[j] > query\n          // ...\n          // sortedCount[j - 1] + sortedCount[j] > query\n          // So, there are (j - 1) - i + 1 = j - i pairs > query\n          ans[k] += (j--) - i;\n        else\n          ++i;\n      for (int i = 1; i <= n; ++i)\n        for (const auto& [j, sh] : shared[i])\n          if (count[i] + count[j] > query && count[i] + count[j] - sh <= query)\n            --ans[k];\n      ++k;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] countPairs(int n, int[][] edges, int[] queries) {\n    int[] ans = new int[queries.length];\n\n    // count[i] := # of edges of node i\n    int[] count = new int[n + 1];\n\n    // shared[i][j] := # of edges incident to i or j, where i < j\n    Map<Integer, Integer>[] shared = new Map[n + 1];\n\n    for (int i = 1; i <= n; ++i)\n      shared[i] = new HashMap<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      ++count[u];\n      ++count[v];\n      shared[Math.min(u, v)].merge(Math.max(u, v), 1, Integer::sum);\n    }\n\n    int[] sortedCount = count.clone();\n    Arrays.sort(sortedCount);\n\n    int k = 0;\n    for (final int query : queries) {\n      for (int i = 1, j = n; i < j;)\n        if (sortedCount[i] + sortedCount[j] > query)\n          // sortedCount[i] + sortedCount[j] > query\n          // sortedCount[i + 1] + sortedCount[j] > query\n          // ...\n          // sortedCount[j - 1] + sortedCount[j] > query\n          // So, there are (j - 1) - i + 1 = j - i pairs > query\n          ans[k] += (j--) - i;\n        else\n          ++i;\n      for (int i = 1; i <= n; ++i)\n        for (Map.Entry<Integer, Integer> p : shared[i].entrySet()) {\n          final int j = p.getKey();\n          final int sh = p.getValue();\n          if (count[i] + count[j] > query && count[i] + count[j] - sh <= query)\n            --ans[k];\n        }\n      ++k;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countPairs(self, n: int, edges: List[List[int]], queries: List[int]) -> List[int]:\n    ans = [0] * len(queries)\n\n    # count[i] := # of edges of node i\n    count = [0] * (n + 1)\n\n    # shared[i][j] := # of edges incident to i or j, where i < j\n    shared = [collections.Counter() for _ in range(n + 1)]\n\n    for u, v in edges:\n      count[u] += 1\n      count[v] += 1\n      shared[min(u, v)][max(u, v)] += 1\n\n    sortedCount = sorted(count)\n\n    for k, query in enumerate(queries):\n      i = 1\n      j = n\n      while i < j:\n        if sortedCount[i] + sortedCount[j] > query:\n          # sortedCount[i] + sortedCount[j] > query\n          # sortedCount[i + 1] + sortedCount[j] > query\n          # ...\n          # sortedCount[j - 1] + sortedCount[j] > query\n          # So, there are (j - 1) - i + 1 = j - i pairs > query\n          ans[k] += j - i\n          j -= 1\n        else:\n          i += 1\n      for i in range(1, n + 1):\n        for j, sh in shared[i].items():\n          if count[i] + count[j] > query and count[i] + count[j] - sh <= query:\n            ans[k] -= 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}