{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2506",
            "title": "Count Pairs Of Similar Strings",
            "titleSlug": "count-pairs-of-similar-strings",
            "content": "<p>You are given a <strong>0-indexed</strong> string array <code>words</code>.</p>\n\n<p>Two strings are <strong>similar</strong> if they consist of the same characters.</p>\n\n<ul>\n\t<li>For example, <code>&quot;abca&quot;</code> and <code>&quot;cba&quot;</code> are similar since both consist of characters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code>.</li>\n\t<li>However, <code>&quot;abacba&quot;</code> and <code>&quot;bcfd&quot;</code> are not similar since they do not consist of the same characters.</li>\n</ul>\n\n<p>Return <em>the number of pairs </em><code>(i, j)</code><em> such that </em><code>0 &lt;= i &lt; j &lt;= word.length - 1</code><em> and the two strings </em><code>words[i]</code><em> and </em><code>words[j]</code><em> are similar</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;aba&quot;,&quot;aabb&quot;,&quot;abcd&quot;,&quot;bac&quot;,&quot;aabc&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 pairs that satisfy the conditions:\n- i = 0 and j = 1 : both words[0] and words[1] only consist of characters &#39;a&#39; and &#39;b&#39;. \n- i = 3 and j = 4 : both words[3] and words[4] only consist of characters &#39;a&#39;, &#39;b&#39;, and &#39;c&#39;. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;aabb&quot;,&quot;ab&quot;,&quot;ba&quot;]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 pairs that satisfy the conditions:\n- i = 0 and j = 1 : both words[0] and words[1] only consist of characters &#39;a&#39; and &#39;b&#39;. \n- i = 0 and j = 2 : both words[0] and words[2] only consist of characters &#39;a&#39; and &#39;b&#39;.\n- i = 1 and j = 2 : both words[1] and words[2] only consist of characters &#39;a&#39; and &#39;b&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;nba&quot;,&quot;cba&quot;,&quot;dba&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Since there does not exist any pair that satisfies the conditions, we return 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 100</code></li>\n\t<li><code>words[i]</code> consist of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 469,
            "dislikes": 32,
            "similarQuestions": "[{\"title\": \"Sort Characters By Frequency\", \"titleSlug\": \"sort-characters-by-frequency\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count the Number of Consistent Strings\", \"titleSlug\": \"count-the-number-of-consistent-strings\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Number of Good Paths\", \"titleSlug\": \"number-of-good-paths\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"36.8K\", \"totalSubmission\": \"53.4K\", \"totalAcceptedRaw\": 36756, \"totalSubmissionRaw\": 53447, \"acRate\": \"68.8%\"}",
            "hints": [
                "How can you check if two strings are similar?",
                "Use a hashSet to store the character of each string."
            ],
            "rephrased": {
                "body": "Given a 0-indexed string array `words`, determine the number of pairs `(i, j)` such that `0 <= i < j <= words.length - 1` and the two strings `words[i]` and `words[j]` are similar. Two strings are considered similar if they consist of the exact same set of characters, regardless of the frequency of each character.",
                "constraints": [
                    "1 <= words.length <= 100",
                    "1 <= words[i].length <= 100",
                    "words[i] consist of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "[\"aba\",\"aabb\",\"abcd\",\"bac\",\"aabc\"]",
                        "output": "2",
                        "explanation": "The pairs (0, 1) and (3, 4) are similar. `words[0]` and `words[1]` both contain only 'a' and 'b'. `words[3]` and `words[4]` both contain only 'a', 'b', and 'c'."
                    },
                    {
                        "input": "[\"aabb\",\"ab\",\"ba\"]",
                        "output": "3",
                        "explanation": "The pairs (0, 1), (0, 2), and (1, 2) are similar. All three words contain only 'a' and 'b'."
                    },
                    {
                        "input": "[\"nba\",\"cba\",\"dba\"]",
                        "output": "0",
                        "explanation": "No pairs are similar in this example."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "sort-characters-by-frequency",
                "title": "Sort Characters By Frequency",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "count-the-number-of-consistent-strings",
                "title": "Count the Number of Consistent Strings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-good-paths",
                "title": "Number of Good Paths",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How can you check if two strings are similar?",
            "Use a hashSet to store the character of each string."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int similarPairs(vector<string>& words) {\n    int ans = 0;\n    vector<int> masks;\n\n    for (const string& word : words)\n      masks.push_back(getMask(word));\n\n    for (int i = 0; i < masks.size(); ++i)\n      for (int j = i + 1; j < masks.size(); ++j)\n        if (masks[i] == masks[j])\n          ++ans;\n\n    return ans;\n  }\n\n private:\n  int getMask(const string& word) {\n    int mask = 0;\n    for (const char c : word)\n      mask |= 1 << c - 'a';\n    return mask;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int similarPairs(String[] words) {\n    int ans = 0;\n    int[] masks = new int[words.length];\n\n    for (int i = 0; i < words.length; ++i)\n      masks[i] = getMask(words[i]);\n\n    for (int i = 0; i < masks.length; ++i)\n      for (int j = i + 1; j < masks.length; ++j)\n        if (masks[i] == masks[j])\n          ++ans;\n\n    return ans;\n  }\n\n  private int getMask(final String word) {\n    int mask = 0;\n    for (const char c : word.toCharArray())\n      mask |= 1 << c - 'a';\n    return mask;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def similarPairs(self, words: List[str]) -> int:\n    ans = 0\n\n    def getMask(word: str) -> int:\n      mask = 0\n      for c in word:\n        mask |= 1 << ord(c) - ord('a')\n      return mask\n\n    masks = [getMask(word) for word in words]\n\n    for i in range(len(masks)):\n      for j in range(i + 1, len(masks)):\n        if masks[i] == masks[j]:\n          ans += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}