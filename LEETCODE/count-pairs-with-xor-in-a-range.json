{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1803",
            "title": "Count Pairs With XOR in a Range",
            "titleSlug": "count-pairs-with-xor-in-a-range",
            "content": "<p>Given a <strong>(0-indexed)</strong> integer array <code>nums</code> and two integers <code>low</code> and <code>high</code>, return <em>the number of <strong>nice pairs</strong></em>.</p>\r\n\r\n<p>A <strong>nice pair</strong> is a pair <code>(i, j)</code> where <code>0 &lt;= i &lt; j &lt; nums.length</code> and <code>low &lt;= (nums[i] XOR nums[j]) &lt;= high</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1,4,2,7], low = 2, high = 6\r\n<strong>Output:</strong> 6\r\n<strong>Explanation:</strong> All nice pairs (i, j) are as follows:\r\n    - (0, 1): nums[0] XOR nums[1] = 5 \r\n    - (0, 2): nums[0] XOR nums[2] = 3\r\n    - (0, 3): nums[0] XOR nums[3] = 6\r\n    - (1, 2): nums[1] XOR nums[2] = 6\r\n    - (1, 3): nums[1] XOR nums[3] = 3\r\n    - (2, 3): nums[2] XOR nums[3] = 5\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [9,8,4,2,1], low = 5, high = 14\r\n<strong>Output:</strong> 8\r\n<strong>Explanation:</strong> All nice pairs (i, j) are as follows:\r\n\u200b\u200b\u200b\u200b\u200b    - (0, 2): nums[0] XOR nums[2] = 13\r\n&nbsp;   - (0, 3): nums[0] XOR nums[3] = 11\r\n&nbsp;   - (0, 4): nums[0] XOR nums[4] = 8\r\n&nbsp;   - (1, 2): nums[1] XOR nums[2] = 12\r\n&nbsp;   - (1, 3): nums[1] XOR nums[3] = 10\r\n&nbsp;   - (1, 4): nums[1] XOR nums[4] = 9\r\n&nbsp;   - (2, 3): nums[2] XOR nums[3] = 6\r\n&nbsp;   - (2, 4): nums[2] XOR nums[4] = 5</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\r\n\t<li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></code></li>\r\n\t<li><code>1 &lt;= low &lt;= high &lt;= 2 * 10<sup>4</sup></code></li>\r\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 503,
            "dislikes": 19,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.4K\", \"totalSubmission\": \"17.4K\", \"totalAcceptedRaw\": 8427, \"totalSubmissionRaw\": 17425, \"acRate\": \"48.4%\"}",
            "hints": [
                "Let's note that we can count all pairs with XOR \u2264 K, so the answer would be to subtract the number of pairs withs XOR < low from the number of pairs with XOR \u2264 high.",
                "For each value, find out the number of values when you XOR it with the result is  \u2264 K using a trie."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` and two integers `low` and `high`, determine the number of nice pairs.\n\nA nice pair is defined as a pair `(i, j)` where `0 <= i < j < nums.length` and `low <= (nums[i] XOR nums[j]) <= high`.",
                "constraints": [
                    "1 <= nums.length <= 2 * 10^4",
                    "1 <= nums[i] <= 2 * 10^4",
                    "1 <= low <= high <= 2 * 10^4"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,4,2,7], low = 2, high = 6",
                        "output": "6",
                        "explanation": "The nice pairs are:\n- (0, 1): nums[0] XOR nums[1] = 5\n- (0, 2): nums[0] XOR nums[2] = 3\n- (0, 3): nums[0] XOR nums[3] = 6\n- (1, 2): nums[1] XOR nums[2] = 6\n- (1, 3): nums[1] XOR nums[3] = 3\n- (2, 3): nums[2] XOR nums[3] = 5"
                    },
                    {
                        "input": "nums = [9,8,4,2,1], low = 5, high = 14",
                        "output": "8",
                        "explanation": "The nice pairs are:\n- (0, 2): nums[0] XOR nums[2] = 13\n- (0, 3): nums[0] XOR nums[3] = 11\n- (0, 4): nums[0] XOR nums[4] = 8\n- (1, 2): nums[1] XOR nums[2] = 12\n- (1, 3): nums[1] XOR nums[3] = 10\n- (1, 4): nums[1] XOR nums[4] = 9\n- (2, 3): nums[2] XOR nums[3] = 6\n- (2, 4): nums[2] XOR nums[4] = 5"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Let's note that we can count all pairs with XOR \u2264 K, so the answer would be to subtract the number of pairs withs XOR < low from the number of pairs with XOR \u2264 high.",
            "For each value, find out the number of values when you XOR it with the result is  \u2264 K using a trie."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  int count = 0;\n  TrieNode() : children(2) {}\n};\n\nclass Solution {\n public:\n  int countPairs(vector<int>& nums, int low, int high) {\n    int ans = 0;\n\n    for (const int num : nums) {\n      ans += getCount(num, high + 1) - getCount(num, low);\n      insert(num);\n    }\n\n    return ans;\n  }\n\n private:\n  static constexpr int kHeight = 14;\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n\n  void insert(int num) {\n    shared_ptr<TrieNode> node = root;\n    for (int i = kHeight; i >= 0; --i) {\n      const int bit = num >> i & 1;\n      if (node->children[bit] == nullptr)\n        node->children[bit] = make_shared<TrieNode>();\n      node = node->children[bit];\n      ++node->count;\n    }\n  }\n\n  // # of nums < limit\n  int getCount(int num, int limit) {\n    int count = 0;\n    shared_ptr<TrieNode> node = root;\n    for (int i = kHeight; i >= 0; --i) {\n      const int bit = num >> i & 1;\n      const int bitLimit = limit >> i & 1;\n      if (bitLimit == 1) {\n        if (node->children[bit] != nullptr)\n          count += node->children[bit]->count;\n        node = node->children[bit ^ 1];\n      } else {\n        node = node->children[bit];\n      }\n      if (node == nullptr)\n        break;\n    }\n    return count;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[2];\n  public int count = 0;\n}\n\nclass Solution {\n  public int countPairs(int[] nums, int low, int high) {\n    int ans = 0;\n\n    for (final int num : nums) {\n      ans += getCount(num, high + 1) - getCount(num, low);\n      insert(num);\n    }\n\n    return ans;\n  }\n\n  private final int kHeight = 14;\n  private TrieNode root = new TrieNode();\n\n  private void insert(int num) {\n    TrieNode node = root;\n    for (int i = kHeight; i >= 0; --i) {\n      final int bit = num >> i & 1;\n      if (node.children[bit] == null)\n        node.children[bit] = new TrieNode();\n      node = node.children[bit];\n      ++node.count;\n    }\n  }\n\n  // # of nums < limit\n  private int getCount(int num, int limit) {\n    int count = 0;\n    TrieNode node = root;\n    for (int i = kHeight; i >= 0; --i) {\n      final int bit = num >> i & 1;\n      final int bitLimit = ((limit >> i) & 1);\n      if (bitLimit == 1) {\n        if (node.children[bit] != null)\n          count += node.children[bit].count;\n        node = node.children[bit ^ 1];\n      } else {\n        node = node.children[bit];\n      }\n      if (node == null)\n        break;\n    }\n    return count;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}