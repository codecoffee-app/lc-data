{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2484",
            "title": "Count Palindromic Subsequences",
            "titleSlug": "count-palindromic-subsequences",
            "content": "<p>Given a string of digits <code>s</code>, return <em>the number of <strong>palindromic subsequences</strong> of</em> <code>s</code><em> having length </em><code>5</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A string is <strong>palindromic</strong> if it reads the same forward and backward.</li>\n\t<li>A <strong>subsequence</strong> is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;103301&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThere are 6 possible subsequences of length 5: &quot;10330&quot;,&quot;10331&quot;,&quot;10301&quot;,&quot;10301&quot;,&quot;13301&quot;,&quot;03301&quot;. \nTwo of them (both equal to &quot;10301&quot;) are palindromic.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0000000&quot;\n<strong>Output:</strong> 21\n<strong>Explanation:</strong> All 21 subsequences are &quot;00000&quot;, which is palindromic.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;9999900000&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The only two palindromic subsequences are &quot;99999&quot; and &quot;00000&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of digits.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 457,
            "dislikes": 21,
            "similarQuestions": "[{\"title\": \"Arithmetic Slices II - Subsequence\", \"titleSlug\": \"arithmetic-slices-ii-subsequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Different Palindromic Subsequences\", \"titleSlug\": \"count-different-palindromic-subsequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Unique Length-3 Palindromic Subsequences\", \"titleSlug\": \"unique-length-3-palindromic-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.2K\", \"totalSubmission\": \"22.6K\", \"totalAcceptedRaw\": 8179, \"totalSubmissionRaw\": 22550, \"acRate\": \"36.3%\"}",
            "hints": [
                "There are 100 possibilities for the first two characters of the palindrome.",
                "Iterate over all characters, letting the current character be the center of the palindrome."
            ],
            "rephrased": {
                "body": "Given a string of digits `s`, determine the count of palindromic subsequences within `s` that have a length of 5.  Return this count modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= s.length <= 10<sup>4</sup>",
                    "s consists of digits."
                ],
                "testcases": [
                    {
                        "input": "103301",
                        "output": "2",
                        "explanation": "The palindromic subsequences of length 5 are \"10301\", which appears twice."
                    },
                    {
                        "input": "0000000",
                        "output": "21",
                        "explanation": "All subsequences of length 5 are \"00000\", which is a palindrome. The number of ways to choose 5 elements from 7 is 7C5 = 7! / (5! * 2!) = (7*6) / 2 = 21."
                    },
                    {
                        "input": "9999900000",
                        "output": "2",
                        "explanation": "The only two palindromic subsequences of length 5 are \"99999\" and \"00000\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "arithmetic-slices-ii-subsequence",
                "title": "Arithmetic Slices II - Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-different-palindromic-subsequences",
                "title": "Count Different Palindromic Subsequences",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "unique-length-3-palindromic-subsequences",
                "title": "Unique Length-3 Palindromic Subsequences",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "There are 100 possibilities for the first two characters of the palindrome.",
            "Iterate over all characters, letting the current character be the center of the palindrome."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countPalindromes(string s) {\n    constexpr int kMod = 1'000'000'007;\n    constexpr int kPatternSize = 5;\n    long ans = 0;\n\n    for (char a = '0'; a <= '9'; ++a)\n      for (char b = '0'; b <= '9'; ++b) {\n        const vector<char> pattern{a, b, '.', b, a};\n        // dp[i] := # of subseqs of pattern[i:] in s\n        // pattern[2] can be any character.\n        vector<long> dp(kPatternSize + 1);\n        dp.back() = 1;\n        for (const char c : s)\n          for (int i = 0; i < kPatternSize; ++i)\n            if (pattern[i] == '.' || pattern[i] == c)\n              dp[i] += dp[i + 1];\n        ans += dp[0];\n        ans %= kMod;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countPalindromes(String s) {\n    final int kMod = 1_000_000_007;\n    final int kPatternSize = 5;\n    long ans = 0;\n\n    for (char a = '0'; a <= '9'; ++a)\n      for (char b = '0'; b <= '9'; ++b) {\n        char[] pattern = {a, b, '.', b, a};\n        // dp[i] := # of subseqs of pattern[i:] in s\n        // pattern[2] can be any character.\n        long[] dp = new long[kPatternSize + 1];\n        dp[kPatternSize] = 1;\n        for (final char c : s.toCharArray())\n          for (int i = 0; i < kPatternSize; ++i)\n            if (pattern[i] == '.' || pattern[i] == c)\n              dp[i] += dp[i + 1];\n        ans += dp[0];\n        ans %= kMod;\n      }\n\n    return (int) ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countPalindromes(self, s: str) -> int:\n    kMod = 1_000_000_007\n    ans = 0\n\n    for a in range(10):\n      for b in range(10):\n        pattern = f'{a}{b}.{b}{a}'\n        # dp[i] := # of subseqs of pattern[i:] in s\n        # pattern[2] can be any character.\n        dp = [0] * 5 + [1]\n        for c in s:\n          for i, p in enumerate(pattern):\n            if p == '.' or p == c:\n              dp[i] += dp[i + 1]\n        ans += dp[0]\n        ans %= kMod\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}