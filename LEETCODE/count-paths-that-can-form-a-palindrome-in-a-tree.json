{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2791",
            "title": "Count Paths That Can Form a Palindrome in a Tree",
            "titleSlug": "count-paths-that-can-form-a-palindrome-in-a-tree",
            "content": "<p>You are given a <strong>tree</strong> (i.e. a connected, undirected graph that has no cycles) <strong>rooted</strong> at node <code>0</code> consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. The tree is represented by a <strong>0-indexed</strong> array <code>parent</code> of size <code>n</code>, where <code>parent[i]</code> is the parent of node <code>i</code>. Since node <code>0</code> is the root, <code>parent[0] == -1</code>.</p>\n\n<p>You are also given a string <code>s</code> of length <code>n</code>, where <code>s[i]</code> is the character assigned to the edge between <code>i</code> and <code>parent[i]</code>. <code>s[0]</code> can be ignored.</p>\n\n<p>Return <em>the number of pairs of nodes </em><code>(u, v)</code><em> such that </em><code>u &lt; v</code><em> and the characters assigned to edges on the path from </em><code>u</code><em> to </em><code>v</code><em> can be <strong>rearranged</strong> to form a <strong>palindrome</strong></em>.</p>\n\n<p>A string is a <strong>palindrome</strong> when it reads the same backwards as forwards.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/07/15/treedrawio-8drawio.png\" style=\"width: 281px; height: 181px;\" /></p>\n\n<pre>\n<strong>Input:</strong> parent = [-1,0,0,1,1,2], s = &quot;acaabc&quot;\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The valid pairs are:\n- All the pairs (0,1), (0,2), (1,3), (1,4) and (2,5) result in one character which is always a palindrome.\n- The pair (2,3) result in the string &quot;aca&quot; which is a palindrome.\n- The pair (1,5) result in the string &quot;cac&quot; which is a palindrome.\n- The pair (3,5) result in the string &quot;acac&quot; which can be rearranged into the palindrome &quot;acca&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> parent = [-1,0,0,0,0], s = &quot;aaaaa&quot;\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Any pair of nodes (u,v) where u &lt; v is valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == parent.length == s.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= parent[i] &lt;= n - 1</code> for all <code>i &gt;= 1</code></li>\n\t<li><code>parent[0] == -1</code></li>\n\t<li><code>parent</code> represents a valid tree.</li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 374,
            "dislikes": 11,
            "similarQuestions": "[{\"title\": \"Count Valid Paths in a Tree\", \"titleSlug\": \"count-valid-paths-in-a-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.1K\", \"totalSubmission\": \"12.7K\", \"totalAcceptedRaw\": 6054, \"totalSubmissionRaw\": 12661, \"acRate\": \"47.8%\"}",
            "hints": [
                "A string is a palindrome if the number of characters with an odd frequency is either 0 or 1.",
                "Let mask[v] be a mask of 26 bits that represent the parity of each character in the alphabet on the path from node 0 to v. How can you use this array to solve the problem?"
            ],
            "rephrased": {
                "body": "Given a tree rooted at node 0, represented by a 0-indexed array `parent` where `parent[i]` is the parent of node `i` (and `parent[0] == -1`), and a string `s` where `s[i]` is the character assigned to the edge between `i` and `parent[i]` (ignoring `s[0]`), find the number of node pairs `(u, v)` such that `u < v` and the characters on the path from `u` to `v` can be rearranged to form a palindrome.",
                "constraints": [
                    "n == parent.length == s.length",
                    "1 <= n <= 10^5",
                    "0 <= parent[i] <= n - 1 for all i >= 1",
                    "parent[0] == -1",
                    "parent represents a valid tree.",
                    "s consists of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "parent = [-1,0,0,1,1,2], s = \"acaabc\"",
                        "output": "8",
                        "explanation": "The valid pairs are:\n- (0,1), (0,2), (1,3), (1,4), and (2,5): Each results in a single character, which is always a palindrome.\n- (2,3): Path is \"aca\", a palindrome.\n- (1,5): Path is \"cac\", a palindrome.\n- (3,5): Path is \"acac\", which can be rearranged to \"acca\", a palindrome."
                    },
                    {
                        "input": "parent = [-1,0,0,0,0], s = \"aaaaa\"",
                        "output": "10",
                        "explanation": "Any pair of nodes (u,v) where u < v is valid, as the path between any two nodes will contain only the character 'a', forming a palindrome."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-valid-paths-in-a-tree",
                "title": "Count Valid Paths in a Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "A string is a palindrome if the number of characters with an odd frequency is either 0 or 1.",
            "Let mask[v] be a mask of 26 bits that represent the parity of each character in the alphabet on the path from node 0 to v. How can you use this array to solve the problem?"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long countPalindromePaths(vector<int>& parent, string s) {\n    // Valid (u, v) has at most 1 letter with odd frequency on its path. The\n    // frequency of a letter on the u-v path is equal to the sum of its\n    // frequencies on the root-u and root-v paths minus twice its frequency on\n    // the root-LCA(u, v) path. Considering only the parity (even/odd), the part\n    // involving root-LCA(u, v) can be ignored, making it possible to calculate\n    // both parts easily using a simple DFS.\n    vector<vector<int>> tree(parent.size());\n\n    for (int i = 1; i < parent.size(); ++i)\n      tree[parent[i]].push_back(i);\n\n    return dfs(tree, 0, 0, s, {{0, 1}});\n  }\n\n private:\n  // mask := 26 bits that represent the parity of each character in the alphabet\n  // on the path from node 0 to u\n  long long dfs(const vector<vector<int>>& tree, int u, int mask,\n                const string& s, unordered_map<int, int>&& maskToCount) {\n    long long res = 0;\n    if (u > 0) {\n      mask ^= 1 << (s[u] - 'a');\n      // Consider any u-v path with 1 bit set.\n      for (int i = 0; i < 26; ++i)\n        if (const auto it = maskToCount.find(mask ^ (1 << i));\n            it != maskToCount.cend())\n          res += it->second;\n      // Consider u-v path with 0 bit set.\n      res += maskToCount[mask ^ 0]++;\n    }\n    for (const int v : tree[u])\n      res += dfs(tree, v, mask, s, move(maskToCount));\n    return res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long countPalindromePaths(List<Integer> parent, String s) {\n    // Valid (u, v) has at most 1 letter with odd frequency on its path. The\n    // frequency of a letter on the u-v path is equal to the sum of its\n    // frequencies on the root-u and root-v paths minus twice its frequency on\n    // the root-LCA(u, v) path. Considering only the parity (even/odd), the part\n    // involving root-LCA(u, v) can be ignored, making it possible to calculate\n    // both parts easily using a simple DFS.\n    List<Integer>[] tree = new List[parent.size()];\n\n    for (int i = 0; i < parent.size(); ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int i = 1; i < parent.size(); ++i)\n      tree[parent.get(i)].add(i);\n\n    return dfs(tree, 0, 0, s, new HashMap<>(Map.of(0, 1)));\n  }\n\n  // mask := 26 bits that represent the parity of each character in the alphabet\n  // on the path from node 0 to u\n  private long dfs(List<Integer>[] tree, int u, int mask, String s,\n                   Map<Integer, Integer> maskToCount) {\n    long res = 0;\n    if (u > 0) {\n      mask ^= 1 << (s.charAt(u) - 'a');\n      // Consider any u-v path with 1 bit set.\n      for (int i = 0; i < 26; ++i)\n        if (maskToCount.containsKey(mask ^ (1 << i)))\n          res += maskToCount.get(mask ^ (1 << i));\n      // Consider u-v path with 0 bit set.\n      res += maskToCount.getOrDefault(mask ^ 0, 0);\n      maskToCount.merge(mask, 1, Integer::sum);\n    }\n    for (final int v : tree[u])\n      res += dfs(tree, v, mask, s, maskToCount);\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countPalindromePaths(self, parent: List[int], s: str) -> int:\n    # Valid (u, v) has at most 1 letter with odd frequency on its path. The\n    # frequency of a letter on the u-v path is equal to the sum of its\n    # frequencies on the root-u and root-v paths minus twice its frequency on\n    # the root-LCA(u, v) path. Considering only the parity (even/odd), the part\n    # involving root-LCA(u, v) can be ignored, making it possible to calculate\n    # both parts easily using a simple DFS.\n    tree = collections.defaultdict(list)\n    maskToCount = collections.Counter({0: 1})\n\n    for i in range(1, len(parent)):\n      tree[parent[i]].append(i)\n\n    # mask := 26 bits that represent the parity of each character in the alphabet\n    # on the path from node 0 to u\n    def dfs(u: int, mask: int) -> int:\n      res = 0\n      if u > 0:\n        mask ^= 1 << (ord(s[u]) - ord('a'))\n        # Consider any u-v path with 1 bit set.\n        for i in range(26):\n          res += maskToCount[mask ^ (1 << i)]\n        # Consider u-v path with 0 bit set.\n        res += maskToCount[mask ^ 0]\n        maskToCount[mask] += 1\n      for v in tree[u]:\n        res += dfs(v, mask)\n      return res\n\n    return dfs(0, 0)\n",
                "lang_text": "py"
            }
        }
    }
}