{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3045",
            "title": "Count Prefix and Suffix Pairs II",
            "titleSlug": "count-prefix-and-suffix-pairs-ii",
            "content": "<p>You are given a <strong>0-indexed</strong> string array <code>words</code>.</p>\n\n<p>Let&#39;s define a <strong>boolean</strong> function <code>isPrefixAndSuffix</code> that takes two strings, <code>str1</code> and <code>str2</code>:</p>\n\n<ul>\n\t<li><code>isPrefixAndSuffix(str1, str2)</code> returns <code>true</code> if <code>str1</code> is <strong>both</strong> a <span data-keyword=\"string-prefix\">prefix</span> and a <span data-keyword=\"string-suffix\">suffix</span> of <code>str2</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n<p>For example, <code>isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;)</code> is <code>true</code> because <code>&quot;aba&quot;</code> is a prefix of <code>&quot;ababa&quot;</code> and also a suffix, but <code>isPrefixAndSuffix(&quot;abc&quot;, &quot;abcd&quot;)</code> is <code>false</code>.</p>\n\n<p>Return <em>an integer denoting the <strong>number</strong> of index pairs </em><code>(i<em>, </em>j)</code><em> such that </em><code>i &lt; j</code><em>, and </em><code>isPrefixAndSuffix(words[i], words[j])</code><em> is </em><code>true</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;aba&quot;,&quot;ababa&quot;,&quot;aa&quot;]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(&quot;a&quot;, &quot;aba&quot;) is true.\ni = 0 and j = 2 because isPrefixAndSuffix(&quot;a&quot;, &quot;ababa&quot;) is true.\ni = 0 and j = 3 because isPrefixAndSuffix(&quot;a&quot;, &quot;aa&quot;) is true.\ni = 1 and j = 2 because isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;) is true.\nTherefore, the answer is 4.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;pa&quot;,&quot;papa&quot;,&quot;ma&quot;,&quot;mama&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(&quot;pa&quot;, &quot;papa&quot;) is true.\ni = 2 and j = 3 because isPrefixAndSuffix(&quot;ma&quot;, &quot;mama&quot;) is true.\nTherefore, the answer is 2.  </pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abab&quot;,&quot;ab&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(&quot;abab&quot;, &quot;ab&quot;) is false.\nTherefore, the answer is 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n\t<li>The sum of the lengths of all <code>words[i]</code> does not exceed <code>5 * 10<sup>5</sup></code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 138,
            "dislikes": 7,
            "similarQuestions": "[{\"title\": \"Implement Trie (Prefix Tree)\", \"titleSlug\": \"implement-trie-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design Add and Search Words Data Structure\", \"titleSlug\": \"design-add-and-search-words-data-structure\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.7K\", \"totalSubmission\": \"31.7K\", \"totalAcceptedRaw\": 7665, \"totalSubmissionRaw\": 31735, \"acRate\": \"24.2%\"}",
            "hints": [
                "We can use a trie to solve it.",
                "Process all <code>words[i]</code> from left to right. The trie stores the pair <code>(words[i][j], words[i][words[i].length - j - 1])</code> as a single character; we process all the words in this way.",
                "During insertion, keep a counter in each trie node, as in a normal trie. If the current node is the end of a word (namely, the pair on that node is <code>(words[i][words[i].length - 1], words[i][0])</code>), increase the node's counter by <code>1</code>.",
                "From left to right, insert each word into the trie, and increase our final result by each node's counter when going down the trie during insertion. This means there was at least one word that is both a prefix and a suffix of the current word before."
            ],
            "rephrased": {
                "body": "Given a 0-indexed string array `words`, determine the number of index pairs `(i, j)` such that `i < j` and `words[i]` is both a prefix and a suffix of `words[j]`.  Return the count of such pairs.",
                "constraints": [
                    "1 <= words.length <= 10^5",
                    "1 <= words[i].length <= 10^5",
                    "words[i] consists only of lowercase English letters.",
                    "The sum of the lengths of all words[i] does not exceed 5 * 10^5."
                ],
                "testcases": [
                    {
                        "input": "[\"a\",\"aba\",\"ababa\",\"aa\"]",
                        "output": "4",
                        "explanation": "The valid pairs are (0, 1) because \"a\" is a prefix and suffix of \"aba\"; (0, 2) because \"a\" is a prefix and suffix of \"ababa\"; (0, 3) because \"a\" is a prefix and suffix of \"aa\"; and (1, 2) because \"aba\" is a prefix and suffix of \"ababa\"."
                    },
                    {
                        "input": "[\"pa\",\"papa\",\"ma\",\"mama\"]",
                        "output": "2",
                        "explanation": "The valid pairs are (0, 1) because \"pa\" is a prefix and suffix of \"papa\"; and (2, 3) because \"ma\" is a prefix and suffix of \"mama\"."
                    },
                    {
                        "input": "[\"abab\",\"ab\"]",
                        "output": "0",
                        "explanation": "The only possible pair is (0, 1), but \"abab\" is not a prefix and suffix of \"ab\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "implement-trie-prefix-tree",
                "title": "Implement Trie (Prefix Tree)",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "design-add-and-search-words-data-structure",
                "title": "Design Add and Search Words Data Structure",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We can use a trie to solve it.",
            "Process all <code>words[i]</code> from left to right. The trie stores the pair <code>(words[i][j], words[i][words[i].length - j - 1])</code> as a single character; we process all the words in this way.",
            "During insertion, keep a counter in each trie node, as in a normal trie. If the current node is the end of a word (namely, the pair on that node is <code>(words[i][words[i].length - 1], words[i][0])</code>), increase the node's counter by <code>1</code>.",
            "From left to right, insert each word into the trie, and increase our final result by each node's counter when going down the trie during insertion. This means there was at least one word that is both a prefix and a suffix of the current word before."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  unordered_map<int, shared_ptr<TrieNode>> children;\n  int count = 0;\n};\n\nclass Trie {\n public:\n  int insert(const string& word) {\n    const int n = word.length();\n    int count = 0;\n    shared_ptr<TrieNode> node = root;\n    for (int i = 0; i < n; ++i) {\n      const int j = hash(word[i], word[n - 1 - i]);\n      if (node->children[j] == nullptr)\n        node->children[j] = make_shared<TrieNode>();\n      node = node->children[j];\n      count += node->count;\n    }\n    ++node->count;\n    return count;\n  }\n\n private:\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n\n  static int hash(char prefix, char suffix) {\n    return 26 * (prefix - 'a') + (suffix - 'a');\n  }\n};\n\nclass Solution {\n public:\n  // Same as 3042. Count Prefix and Suffix Pairs I\n  long long countPrefixSuffixPairs(vector<string>& words) {\n    long long ans = 0;\n    Trie trie;\n\n    for (const string& word : words)\n      ans += trie.insert(word);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  Map<Integer, TrieNode> children = new HashMap<>();\n  int count = 0;\n}\n\nclass Trie {\n  public int insert(final String word) {\n    final int n = word.length();\n    int count = 0;\n    TrieNode node = root;\n    for (int i = 0; i < n; ++i) {\n      final char prefix = word.charAt(i);\n      final char suffix = word.charAt(n - 1 - i);\n      final int key = (prefix - 'a') * 26 + (suffix - 'a');\n      node.children.putIfAbsent(key, new TrieNode());\n      node = node.children.get(key);\n      count += node.count;\n    }\n    ++node.count;\n    return count;\n  }\n\n  private TrieNode root = new TrieNode();\n}\n\nclass Solution {\n  // Same as 3045. Count Prefix and Suffix Pairs II\n  public long countPrefixSuffixPairs(String[] words) {\n    long ans = 0;\n    Trie trie = new Trie();\n\n    for (final String word : words)\n      ans += trie.insert(word);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TrieNode:\n  def __init__(self):\n    self.children: Dict[Tuple[str, str], TrieNode] = {}\n    self.count = 0\n\n\nclass Trie:\n  def __init__(self):\n    self.root = TrieNode()\n\n  def insert(self, word: str) -> int:\n    node = self.root\n    count = 0\n    for i, prefix in enumerate(word):\n      suffix = word[-i - 1]\n      node = node.children.setdefault((prefix, suffix), TrieNode())\n      count += node.count\n    node.count += 1\n    return count\n\n\nclass Solution:\n  # Same as 3045. Count Prefix and Suffix Pairs II\n  def countPrefixSuffixPairs(self, words: List[str]) -> int:\n    trie = Trie()\n    return sum(trie.insert(word) for word in words)\n",
                "lang_text": "py"
            }
        }
    }
}