{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1641",
            "title": "Count Sorted Vowel Strings",
            "titleSlug": "count-sorted-vowel-strings",
            "content": "<p>Given an integer <code>n</code>, return <em>the number of strings of length </em><code>n</code><em> that consist only of vowels (</em><code>a</code><em>, </em><code>e</code><em>, </em><code>i</code><em>, </em><code>o</code><em>, </em><code>u</code><em>) and are <strong>lexicographically sorted</strong>.</em></p>\n\n<p>A string <code>s</code> is <strong>lexicographically sorted</strong> if for all valid <code>i</code>, <code>s[i]</code> is the same as or comes before <code>s[i+1]</code> in the alphabet.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The 5 sorted strings that consist of vowels only are <code>[&quot;a&quot;,&quot;e&quot;,&quot;i&quot;,&quot;o&quot;,&quot;u&quot;].</code>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The 15 sorted strings that consist of vowels only are\n[&quot;aa&quot;,&quot;ae&quot;,&quot;ai&quot;,&quot;ao&quot;,&quot;au&quot;,&quot;ee&quot;,&quot;ei&quot;,&quot;eo&quot;,&quot;eu&quot;,&quot;ii&quot;,&quot;io&quot;,&quot;iu&quot;,&quot;oo&quot;,&quot;ou&quot;,&quot;uu&quot;].\nNote that &quot;ea&quot; is not a valid string since &#39;e&#39; comes after &#39;a&#39; in the alphabet.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 33\n<strong>Output:</strong> 66045\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 50</code>&nbsp;</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3766,
            "dislikes": 81,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                }
            ],
            "stats": "{\"totalAccepted\": \"174.3K\", \"totalSubmission\": \"223.2K\", \"totalAcceptedRaw\": 174327, \"totalSubmissionRaw\": 223184, \"acRate\": \"78.1%\"}",
            "hints": [
                "For each character, its possible values will depend on the value of its previous character, because it needs to be not smaller than it.",
                "Think backtracking. Build a recursive function count(n, last_character) that counts the number of valid strings of length n and whose first characters are not less than last_character.",
                "In this recursive function, iterate on the possible characters for the first character, which will be all the vowels not less than last_character, and for each possible value c, increase the answer by count(n-1, c)."
            ],
            "rephrased": {
                "body": "Given an integer `n`, determine the number of lexicographically sorted strings of length `n` that can be formed using only the vowels (a, e, i, o, u). A string is lexicographically sorted if each character is the same as or precedes the next character in alphabetical order.",
                "constraints": [
                    "1 <= n <= 50"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "5",
                        "explanation": "The 5 sorted strings of length 1 are [\"a\",\"e\",\"i\",\"o\",\"u\"]."
                    },
                    {
                        "input": "2",
                        "output": "15",
                        "explanation": "The 15 sorted strings of length 2 are [\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"]. Note that \"ea\" is not a valid string because 'e' comes after 'a'."
                    },
                    {
                        "input": "33",
                        "output": "66045",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For each character, its possible values will depend on the value of its previous character, because it needs to be not smaller than it.",
            "Think backtracking. Build a recursive function count(n, last_character) that counts the number of valid strings of length n and whose first characters are not less than last_character.",
            "In this recursive function, iterate on the possible characters for the first character, which will be all the vowels not less than last_character, and for each possible value c, increase the answer by count(n-1, c)."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countVowelStrings(int n) {\n    // dp[0] := # of lexicographically sorted strings ends with 'a'\n    // dp[1] := # of lexicographically sorted strings ends with 'e'\n    // dp[2] := # of lexicographically sorted strings ends with 'i'\n    // dp[3] := # of lexicographically sorted strings ends with 'o'\n    // dp[4] := # of lexicographically sorted strings ends with 'u'\n    vector<int> dp(5, 1);\n\n    for (int i = 2; i <= n; ++i) {\n      vector<int> newDp(5);\n      for (int j = 0; j < 5; ++j)\n        for (int k = 0; k <= j; ++k)\n          newDp[j] += dp[k];\n      dp = move(newDp);\n    }\n\n    return accumulate(dp.begin(), dp.end(), 0);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countVowelStrings(int n) {\n    // dp[0] := # of lexicographically sorted strings ends with 'a'\n    // dp[1] := # of lexicographically sorted strings ends with 'e'\n    // dp[2] := # of lexicographically sorted strings ends with 'i'\n    // dp[3] := # of lexicographically sorted strings ends with 'o'\n    // dp[4] := # of lexicographically sorted strings ends with 'u'\n    int[] dp = new int[5];\n    Arrays.fill(dp, 1);\n\n    for (int i = 2; i <= n; ++i) {\n      int[] newDp = new int[5];\n      for (int j = 0; j < 5; ++j)\n        for (int k = 0; k <= j; ++k)\n          newDp[j] += dp[k];\n      dp = newDp;\n    }\n\n    return Arrays.stream(dp).sum();\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}