{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2376",
            "title": "Count Special Integers",
            "titleSlug": "count-special-integers",
            "content": "<p>We call a positive integer <strong>special</strong> if all of its digits are <strong>distinct</strong>.</p>\n\n<p>Given a <strong>positive</strong> integer <code>n</code>, return <em>the number of special integers that belong to the interval </em><code>[1, n]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 20\n<strong>Output:</strong> 19\n<strong>Explanation:</strong> All the integers from 1 to 20, except 11, are special. Thus, there are 19 special integers.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> All the integers from 1 to 5 are special.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 135\n<strong>Output:</strong> 110\n<strong>Explanation:</strong> There are 110 integers from 1 to 135 that are special.\nSome of the integers that are not special are: 22, 114, and 131.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 544,
            "dislikes": 30,
            "similarQuestions": "[{\"title\": \"Count Numbers with Unique Digits\", \"titleSlug\": \"count-numbers-with-unique-digits\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K-th Smallest in Lexicographical Order\", \"titleSlug\": \"k-th-smallest-in-lexicographical-order\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.8K\", \"totalSubmission\": \"28.4K\", \"totalAcceptedRaw\": 10755, \"totalSubmissionRaw\": 28428, \"acRate\": \"37.8%\"}",
            "hints": [
                "Try to think of dynamic programming.",
                "Use the idea of digit dynamic programming to build the numbers, in addition to a bitmask that will tell which digits you have used so far on the number that you are building."
            ],
            "rephrased": {
                "body": "A positive integer is considered **special** if all its digits are distinct. Given a positive integer `n`, determine the count of special integers within the inclusive range of `[1, n]`.",
                "constraints": [
                    "1 <= n <= 2 * 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "20",
                        "output": "19",
                        "explanation": "All integers from 1 to 20 are special, except for 11.  Therefore, there are 19 special integers."
                    },
                    {
                        "input": "5",
                        "output": "5",
                        "explanation": "All integers from 1 to 5 are special."
                    },
                    {
                        "input": "135",
                        "output": "110",
                        "explanation": "There are 110 special integers between 1 and 135. Examples of non-special integers in this range include 22, 114, and 131."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "count-numbers-with-unique-digits",
                "title": "Count Numbers with Unique Digits",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "k-th-smallest-in-lexicographical-order",
                "title": "K-th Smallest in Lexicographical Order",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try to think of dynamic programming.",
            "Use the idea of digit dynamic programming to build the numbers, in addition to a bitmask that will tell which digits you have used so far on the number that you are building."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Same as 1012. Numbers With Repeated Digits\n  int countSpecialNumbers(int n) {\n    const int digitSize = log10(n) + 1;\n    // dp[i][j][k] := # of special integers with current digit i and `usedMask`\n    // j, where k is 0/1 tight constraint\n    dp.resize(digitSize + 1, vector<vector<int>>(1 << 10, vector<int>(2, -1)));\n    return count(to_string(n), 0, 0, true) - 1;  // - 0;\n  }\n\n private:\n  vector<vector<vector<int>>> dp;\n\n  int count(const string& s, int i, int usedMask, bool isTight) {\n    if (i == s.length())\n      return 1;\n    if (dp[i][usedMask][isTight] != -1)\n      return dp[i][usedMask][isTight];\n\n    int res = 0;\n\n    const int maxDigit = isTight ? s[i] - '0' : 9;\n    for (int d = 0; d <= maxDigit; ++d) {\n      // `d` is used.\n      if (usedMask >> d & 1)\n        continue;\n      // Use `d` now.\n      const bool nextIsTight = isTight && (d == maxDigit);\n      if (usedMask == 0 && d == 0)  // Don't count leading 0s as used.\n        res += count(s, i + 1, usedMask, nextIsTight);\n      else\n        res += count(s, i + 1, usedMask | 1 << d, nextIsTight);\n    }\n\n    return dp[i][usedMask][isTight] = res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Same as 1012. Numbers With Repeated Digits\n  public int countSpecialNumbers(int n) {\n    final int digitSize = (int) Math.log10(n) + 1;\n    // dp[i][j][k] := # of special integers with current d i and `usedMask`\n    // j, where k is 0/1 tight constraint\n    dp = new Integer[digitSize + 1][1 << 10][2];\n    return count(String.valueOf(n), 0, 0, true) - 1; // - 0;\n  }\n\n  private Integer[][][] dp;\n\n  private int count(final String s, int i, int usedMask, boolean isTight) {\n    if (i == s.length())\n      return 1;\n    if (dp[i][usedMask][isTight ? 1 : 0] != null)\n      return dp[i][usedMask][isTight ? 1 : 0];\n\n    int res = 0;\n\n    final int maxDigit = isTight ? s.charAt(i) - '0' : 9;\n    for (int d = 0; d <= maxDigit; ++d) {\n      // `d` is used.\n      if ((usedMask >> d & 1) == 1)\n        continue;\n      // Use `d` now.\n      final boolean nextIsTight = isTight && (d == maxDigit);\n      if (usedMask == 0 && d == 0) // Don't count leading 0s as used.\n        res += count(s, i + 1, usedMask, nextIsTight);\n      else\n        res += count(s, i + 1, usedMask | 1 << d, nextIsTight);\n    }\n\n    return dp[i][usedMask][isTight ? 1 : 0] = res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Same as 1012. Numbers With Repeated Digits\n  def countSpecialNumbers(self, n: int) -> int:\n    s = str(n)\n\n    # dp(i, j, k) := # of special integers with current digit i and `usedMask`\n    # j, where k is 0/1 tight constraint\n    @functools.lru_cache(None)\n    def dp(i: int, usedMask: int, isTight: bool) -> int:\n      if i == len(s):\n        return 1\n\n      res = 0\n\n      maxDigit = int(s[i]) if isTight else 9\n      for d in range(maxDigit + 1):\n        # `d` is used.\n        if usedMask >> d & 1:\n          continue\n        # Use `d` now.\n        nextIsTight = isTight and (d == maxDigit)\n        if usedMask == 0 and d == 0:  # Don't count leading 0s as used.\n          res += dp(i + 1, usedMask, nextIsTight)\n        else:\n          res += dp(i + 1, usedMask | 1 << d, nextIsTight)\n\n      return res\n\n    return dp(0, 0, True) - 1  # - 0\n",
                "lang_text": "py"
            }
        }
    }
}