{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1277",
            "title": "Count Square Submatrices with All Ones",
            "titleSlug": "count-square-submatrices-with-all-ones",
            "content": "<p>Given a <code>m * n</code> matrix of ones and zeros, return how many <strong>square</strong> submatrices have all ones.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix =\n[\n&nbsp; [0,1,1,1],\n&nbsp; [1,1,1,1],\n&nbsp; [0,1,1,1]\n]\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> \nThere are <strong>10</strong> squares of side 1.\nThere are <strong>4</strong> squares of side 2.\nThere is  <strong>1</strong> square of side 3.\nTotal number of squares = 10 + 4 + 1 = <strong>15</strong>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = \n[\n  [1,0,1],\n  [1,1,0],\n  [1,1,0]\n]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> \nThere are <b>6</b> squares of side 1.  \nThere is <strong>1</strong> square of side 2. \nTotal number of squares = 6 + 1 = <b>7</b>.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length&nbsp;&lt;= 300</code></li>\n\t<li><code>1 &lt;= arr[0].length&nbsp;&lt;= 300</code></li>\n\t<li><code>0 &lt;= arr[i][j] &lt;= 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4735,
            "dislikes": 75,
            "similarQuestions": "[{\"title\": \"Minimum Cost Homecoming of a Robot in a Grid\", \"titleSlug\": \"minimum-cost-homecoming-of-a-robot-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Fertile Pyramids in a Land\", \"titleSlug\": \"count-fertile-pyramids-in-a-land\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"212.4K\", \"totalSubmission\": \"283.4K\", \"totalAcceptedRaw\": 212361, \"totalSubmissionRaw\": 283393, \"acRate\": \"74.9%\"}",
            "hints": [
                "Create an additive table that counts the sum of elements of submatrix with the superior corner at (0,0).",
                "Loop over all subsquares in O(n^3) and check if the sum make the whole array to be ones, if it checks then add 1 to the answer."
            ],
            "rephrased": {
                "body": "Given a m * n matrix of ones and zeros, determine the total number of square submatrices consisting entirely of ones.",
                "constraints": [
                    "1 <= arr.length <= 300",
                    "1 <= arr[0].length <= 300",
                    "0 <= arr[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[[0,1,1,1],[1,1,1,1],[0,1,1,1]]",
                        "output": "15",
                        "explanation": "The matrix contains 10 squares of side 1, 4 squares of side 2, and 1 square of side 3.  Therefore, the total number of squares is 10 + 4 + 1 = 15."
                    },
                    {
                        "input": "[[1,0,1],[1,1,0],[1,1,0]]",
                        "output": "7",
                        "explanation": "The matrix contains 6 squares of side 1, and 1 square of side 2. Therefore, the total number of squares is 6 + 1 = 7."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
                "title": "Minimum Cost Homecoming of a Robot in a Grid",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-fertile-pyramids-in-a-land",
                "title": "Count Fertile Pyramids in a Land",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Create an additive table that counts the sum of elements of submatrix with the superior corner at (0,0).",
            "Loop over all subsquares in O(n^3) and check if the sum make the whole array to be ones, if it checks then add 1 to the answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countSquares(vector<vector<int>>& matrix) {\n    for (int i = 0; i < matrix.size(); ++i)\n      for (int j = 0; j < matrix[0].size(); ++j)\n        if (matrix[i][j] == 1 && i > 0 && j > 0)\n          matrix[i][j] +=\n              min({matrix[i - 1][j - 1], matrix[i - 1][j], matrix[i][j - 1]});\n    return accumulate(matrix.begin(), matrix.end(), 0,\n                      [](int a, const auto& A) {\n      return a + accumulate(A.begin(), A.end(), 0);\n    });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countSquares(int[][] matrix) {\n    int ans = 0;\n\n    for (int i = 0; i < matrix.length; ++i)\n      for (int j = 0; j < matrix[0].length; ++j) {\n        if (matrix[i][j] == 1 && i > 0 && j > 0)\n          matrix[i][j] +=\n              Math.min(matrix[i - 1][j - 1], Math.min(matrix[i - 1][j], matrix[i][j - 1]));\n        ans += matrix[i][j];\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countSquares(self, matrix: List[List[int]]) -> int:\n    for i in range(len(matrix)):\n      for j in range(len(matrix[0])):\n        if matrix[i][j] == 1 and i > 0 and j > 0:\n          matrix[i][j] += min(matrix[i - 1][j - 1],\n                              matrix[i - 1][j], matrix[i][j - 1])\n    return sum(sum(row) for row in matrix)\n",
                "lang_text": "py"
            }
        }
    }
}