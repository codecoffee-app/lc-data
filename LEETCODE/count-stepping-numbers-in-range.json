{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2801",
            "title": "Count Stepping Numbers in Range",
            "titleSlug": "count-stepping-numbers-in-range",
            "content": "<p>Given two positive integers <code>low</code> and <code>high</code> represented as strings, find the count of <strong>stepping numbers</strong> in the inclusive range <code>[low, high]</code>.</p>\n\n<p>A <strong>stepping number</strong> is an integer such that all of its adjacent digits have an absolute difference of <strong>exactly</strong> <code>1</code>.</p>\n\n<p>Return <em>an integer denoting the count of stepping numbers in the inclusive range</em> <code>[low, high]</code><em>. </em></p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p><strong>Note:</strong> A stepping number should not have a leading zero.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> low = &quot;1&quot;, high = &quot;11&quot;\n<strong>Output:</strong> 10\n<strong>Explanation: </strong>The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> low = &quot;90&quot;, high = &quot;101&quot;\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2. </pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= int(low) &lt;= int(high) &lt; 10<sup>100</sup></code></li>\n\t<li><code>1 &lt;= low.length, high.length &lt;= 100</code></li>\n\t<li><code>low</code> and <code>high</code> consist of only digits.</li>\n\t<li><code>low</code> and <code>high</code> don&#39;t have any leading zeros.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 327,
            "dislikes": 11,
            "similarQuestions": "[{\"title\": \"Stepping Numbers\", \"titleSlug\": \"stepping-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.6K\", \"totalSubmission\": \"27.4K\", \"totalAcceptedRaw\": 7573, \"totalSubmissionRaw\": 27364, \"acRate\": \"27.7%\"}",
            "hints": [
                "Calculate the number of stepping numbers in the range [1, high] and subtract the number of stepping numbers in the range [1, low - 1].",
                "The main problem is calculating the number of stepping numbers in the range [1, x].",
                "First, calculate the number of stepping numbers shorter than x in length, which can be done using dynamic programming. (dp[i][j] is the number of i-digit stepping numbers ending with digit j).",
                "Finally, calculate the number of stepping numbers that have the same length as x similarly. However, this time we need to maintain whether the prefix (in string) is smaller than or equal to x in the DP state."
            ],
            "rephrased": {
                "body": "Given two positive integers `low` and `high` represented as strings, determine the number of stepping numbers within the inclusive range `[low, high]`. A stepping number is defined as an integer where the absolute difference between any two adjacent digits is exactly 1.  Return the count of stepping numbers in the specified range, modulo 10<sup>9</sup> + 7.  Stepping numbers should not have leading zeros.",
                "constraints": [
                    "1 <= int(low) <= int(high) < 10<sup>100</sup>",
                    "1 <= low.length, high.length <= 100",
                    "`low` and `high` consist of only digits.",
                    "`low` and `high` don't have any leading zeros."
                ],
                "testcases": [
                    {
                        "input": "low = \"1\", high = \"11\"",
                        "output": "10",
                        "explanation": "The stepping numbers in the range [1, 11] are 1, 2, 3, 4, 5, 6, 7, 8, 9, and 10. There are a total of 10 stepping numbers in the range."
                    },
                    {
                        "input": "low = \"90\", high = \"101\"",
                        "output": "2",
                        "explanation": "The stepping numbers in the range [90, 101] are 98 and 101. There are a total of 2 stepping numbers in the range."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "stepping-numbers",
                "title": "Stepping Numbers",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Calculate the number of stepping numbers in the range [1, high] and subtract the number of stepping numbers in the range [1, low - 1].",
            "The main problem is calculating the number of stepping numbers in the range [1, x].",
            "First, calculate the number of stepping numbers shorter than x in length, which can be done using dynamic programming. (dp[i][j] is the number of i-digit stepping numbers ending with digit j).",
            "Finally, calculate the number of stepping numbers that have the same length as x similarly. However, this time we need to maintain whether the prefix (in string) is smaller than or equal to x in the DP state."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countSteppingNumbers(string low, string high) {\n    const string lowWithLeadingZeros =\n        string(high.length() - low.length(), '0') + low;\n    // dp[i][j][k1][k2] := # of valid integers with size i and the previous\n    // digit j. The variables k1 and k2 indicate\n    // tight constraints (0/1) for `low` and `high` respectively.\n    dp.resize(high.length(),\n              vector<vector<vector<int>>>(\n                  11, vector<vector<int>>(2, vector<int>(2, -1))));\n    return count(lowWithLeadingZeros, high, 0, 10, /*isLeadingZero=*/true, true,\n                 true);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  vector<vector<vector<vector<int>>>> dp;\n\n  int count(const string& low, const string& high, int i, int prevDigit,\n            bool isLeadingZero, bool isTight1, bool isTight2) {\n    if (i == high.length())\n      return 1;\n    if (dp[i][prevDigit][isTight1][isTight2] != -1)\n      return dp[i][prevDigit][isTight1][isTight2];\n\n    int res = 0;\n    const int minDigit = isTight1 ? low[i] - '0' : 0;\n    const int maxDigit = isTight2 ? high[i] - '0' : 9;\n\n    for (int d = minDigit; d <= maxDigit; ++d) {\n      const bool nextIsTight1 = isTight1 && (d == minDigit);\n      const bool nextIsTight2 = isTight2 && (d == maxDigit);\n      if (isLeadingZero)\n        // Can place any digit in [minDigit, maxDigit].\n        res += count(low, high, i + 1, d, isLeadingZero && d == 0, nextIsTight1,\n                     nextIsTight2);\n      else if (abs(d - prevDigit) == 1)\n        // Can only place prevDigit - 1 or prevDigit + 1.\n        res += count(low, high, i + 1, d, false, nextIsTight1, nextIsTight2);\n      res %= kMod;\n    }\n\n    return dp[i][prevDigit][isTight1][isTight2] = res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countSteppingNumbers(String low, String high) {\n    final String lowWithLeadingZeros =\n        String.valueOf('0').repeat(high.length() - low.length()) + low;\n    dp = new Integer[high.length()][11][2][2];\n    return count(lowWithLeadingZeros, high, 0, 10, /*isLeadingZero=*/true, true, true);\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private Integer[][][][] dp;\n\n  private int count(final String low, final String high, int i, int prevDigit,\n                    boolean isLeadingZero, boolean isTight1, boolean isTight2) {\n    if (i == high.length())\n      return 1;\n    if (dp[i][prevDigit][isTight1 ? 1 : 0][isTight2 ? 1 : 0] != null)\n      return dp[i][prevDigit][isTight1 ? 1 : 0][isTight2 ? 1 : 0];\n\n    int res = 0;\n    final int minDigit = isTight1 ? low.charAt(i) - '0' : 0;\n    final int maxDigit = isTight2 ? high.charAt(i) - '0' : 9;\n\n    for (int d = minDigit; d <= maxDigit; ++d) {\n      final boolean nextIsTight1 = isTight1 && (d == minDigit);\n      final boolean nextIsTight2 = isTight2 && (d == maxDigit);\n      if (isLeadingZero)\n        // Can place any digit in [minDigit, maxDigit].\n        res += count(low, high, i + 1, d, isLeadingZero && d == 0, nextIsTight1, nextIsTight2);\n      else if (Math.abs(d - prevDigit) == 1)\n        // Can only place prevDigit - 1 or prevDigit + 1.\n        res += count(low, high, i + 1, d, false, nextIsTight1, nextIsTight2);\n      res %= kMod;\n    }\n\n    return dp[i][prevDigit][isTight1 ? 1 : 0][isTight2 ? 1 : 0] = res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countSteppingNumbers(self, low: str, high: str) -> int:\n    kMod = 1_000_000_007\n    low = '0' * (len(high) - len(low)) + low\n\n    @functools.lru_cache(None)\n    def dp(i: int, prevDigit: int, isLeadingZero: bool, isTight1: bool, isTight2: bool) -> int:\n      if i == len(high):\n        return 1\n\n      res = 0\n      minDigit = int(low[i]) if isTight1 else 0\n      maxDigit = int(high[i]) if isTight2 else 9\n\n      for d in range(minDigit, maxDigit + 1):\n        nextIsTight1 = isTight1 and (d == minDigit)\n        nextIsTight2 = isTight2 and (d == maxDigit)\n        if isLeadingZero:\n          # Can place any digit in [minDigit, maxDigit].\n          res += dp(i + 1, d, isLeadingZero and d ==\n                    0, nextIsTight1, nextIsTight2)\n        elif abs(d - prevDigit) == 1:\n          res += dp(i + 1, d, False, nextIsTight1, nextIsTight2)\n        res %= kMod\n\n      return res\n\n    return dp(0, -1, True, True, True)\n",
                "lang_text": "py"
            }
        }
    }
}