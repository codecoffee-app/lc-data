{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1905",
            "title": "Count Sub Islands",
            "titleSlug": "count-sub-islands",
            "content": "<p>You are given two <code>m x n</code> binary matrices <code>grid1</code> and <code>grid2</code> containing only <code>0</code>&#39;s (representing water) and <code>1</code>&#39;s (representing land). An <strong>island</strong> is a group of <code>1</code>&#39;s connected <strong>4-directionally</strong> (horizontal or vertical). Any cells outside of the grid are considered water cells.</p>\n\n<p>An island in <code>grid2</code> is considered a <strong>sub-island </strong>if there is an island in <code>grid1</code> that contains <strong>all</strong> the cells that make up <strong>this</strong> island in <code>grid2</code>.</p>\n\n<p>Return the <em><strong>number</strong> of islands in </em><code>grid2</code> <em>that are considered <strong>sub-islands</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/10/test1.png\" style=\"width: 493px; height: 205px;\" />\n<pre>\n<strong>Input:</strong> grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/03/testcasex2.png\" style=\"width: 491px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]\n<strong>Output:</strong> 2 \n<strong>Explanation: </strong>In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid1.length == grid2.length</code></li>\n\t<li><code>n == grid1[i].length == grid2[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 500</code></li>\n\t<li><code>grid1[i][j]</code> and <code>grid2[i][j]</code> are either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1963,
            "dislikes": 57,
            "similarQuestions": "[{\"title\": \"Number of Islands\", \"titleSlug\": \"number-of-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Distinct Islands\", \"titleSlug\": \"number-of-distinct-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find All Groups of Farmland\", \"titleSlug\": \"find-all-groups-of-farmland\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"79.7K\", \"totalSubmission\": \"118.4K\", \"totalAcceptedRaw\": 79699, \"totalSubmissionRaw\": 118373, \"acRate\": \"67.3%\"}",
            "hints": [
                "Let's use floodfill to iterate over the islands of the second grid",
                "Let's note that if all the cells in an island in the second grid if they are represented by land in the first grid then they are connected hence making that island a sub-island"
            ],
            "rephrased": {
                "body": "Given two `m x n` binary matrices `grid1` and `grid2` containing only 0s (water) and 1s (land). An island is a group of 1s connected 4-directionally (horizontal or vertical). Any cells outside of the grid are considered water cells.\n\nAn island in `grid2` is a sub-island if there is an island in `grid1` that contains all the cells that make up this island in `grid2`.\n\nReturn the number of islands in `grid2` that are sub-islands.",
                "constraints": [
                    "m == grid1.length == grid2.length",
                    "n == grid1[i].length == grid2[i].length",
                    "1 <= m, n <= 500",
                    "grid1[i][j] and grid2[i][j] are either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]",
                        "output": "3",
                        "explanation": "The goal is to find islands in grid2 that are completely contained within islands in grid1. In this case, there are three such sub-islands in grid2."
                    },
                    {
                        "input": "grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]",
                        "output": "2",
                        "explanation": "Similar to the previous example, identify islands in grid2 and check if they are sub-islands of grid1. Here, there are two sub-islands."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-islands",
                "title": "Number of Islands",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-distinct-islands",
                "title": "Number of Distinct Islands",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-all-groups-of-farmland",
                "title": "Find All Groups of Farmland",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let's use floodfill to iterate over the islands of the second grid",
            "Let's note that if all the cells in an island in the second grid if they are represented by land in the first grid then they are connected hence making that island a sub-island"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {\n    int ans = 0;\n\n    for (int i = 0; i < grid2.size(); ++i)\n      for (int j = 0; j < grid2[0].size(); ++j)\n        if (grid2[i][j] == 1)\n          ans += dfs(grid1, grid2, i, j);\n\n    return ans;\n  }\n\n private:\n  int dfs(const vector<vector<int>>& grid1, vector<vector<int>>& grid2, int i,\n          int j) {\n    if (i < 0 || i == grid1.size() || j < 0 || j == grid2[0].size())\n      return 1;\n    if (grid2[i][j] != 1)\n      return 1;\n\n    grid2[i][j] = 2;  // Mark 2 as visited\n\n    return dfs(grid1, grid2, i + 1, j) & dfs(grid1, grid2, i - 1, j) &\n           dfs(grid1, grid2, i, j + 1) & dfs(grid1, grid2, i, j - 1) &\n           grid1[i][j];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countSubIslands(int[][] grid1, int[][] grid2) {\n    int ans = 0;\n\n    for (int i = 0; i < grid2.length; ++i)\n      for (int j = 0; j < grid2[0].length; ++j)\n        if (grid2[i][j] == 1)\n          ans += dfs(grid1, grid2, i, j);\n\n    return ans;\n  }\n\n  private int dfs(int[][] grid1, int[][] grid2, int i, int j) {\n    if (i < 0 || i == grid1.length || j < 0 || j == grid2[0].length)\n      return 1;\n    if (grid2[i][j] != 1)\n      return 1;\n\n    grid2[i][j] = 2; // Mark 2 as visited\n\n    return                                                          //\n        dfs(grid1, grid2, i + 1, j) & dfs(grid1, grid2, i - 1, j) & //\n        dfs(grid1, grid2, i, j + 1) & dfs(grid1, grid2, i, j - 1) & grid1[i][j];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:\n    m = len(grid2)\n    n = len(grid2[0])\n\n    def dfs(i: int, j: int) -> int:\n      if i < 0 or i == m or j < 0 or j == n:\n        return 1\n      if grid2[i][j] != 1:\n        return 1\n\n      grid2[i][j] = 2  # Mark 2 as visited\n\n      return dfs(i + 1, j) & dfs(i - 1, j) & \\\n          dfs(i, j + 1) & dfs(i, j - 1) & grid1[i][j]\n\n    ans = 0\n\n    for i in range(m):\n      for j in range(n):\n        if grid2[i][j] == 1:\n          ans += dfs(i, j)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}