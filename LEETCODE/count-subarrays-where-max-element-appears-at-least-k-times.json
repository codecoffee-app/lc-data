{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2962",
            "title": "Count Subarrays Where Max Element Appears at Least K Times",
            "titleSlug": "count-subarrays-where-max-element-appears-at-least-k-times",
            "content": "<p>You are given an integer array <code>nums</code> and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>Return <em>the number of subarrays where the <strong>maximum</strong> element of </em><code>nums</code><em> appears <strong>at least</strong> </em><code>k</code><em> times in that subarray.</em></p>\n\n<p>A <strong>subarray</strong> is a contiguous sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,3,3], k = 2\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,2,1], k = 3\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No subarray contains the element 4 at least 3 times.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1185,
            "dislikes": 56,
            "similarQuestions": "[{\"title\": \"Find the Number of Subarrays Where Boundary Elements Are Maximum\", \"titleSlug\": \"find-the-number-of-subarrays-where-boundary-elements-are-maximum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"127.7K\", \"totalSubmission\": \"216.1K\", \"totalAcceptedRaw\": 127700, \"totalSubmissionRaw\": 216128, \"acRate\": \"59.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums` and a positive integer `k`, determine the number of subarrays within `nums` where the maximum element of the subarray appears at least `k` times.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^6",
                    "1 <= k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,3,2,3,3], k = 2",
                        "output": "6",
                        "explanation": "The subarrays containing the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3], and [3,3]."
                    },
                    {
                        "input": "nums = [1,4,2,1], k = 3",
                        "output": "0",
                        "explanation": "No subarray exists where the element 4 appears at least 3 times."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "find-the-number-of-subarrays-where-boundary-elements-are-maximum",
                "title": "Find the Number of Subarrays Where Boundary Elements Are Maximum",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long countSubarrays(vector<int>& nums, int k) {\n    const int maxNum = ranges::max(nums);\n    long long ans = 0;\n    int count = 0;\n\n    for (int l = 0, r = 0; r < nums.size(); ++r) {\n      if (nums[r] == maxNum)\n        ++count;\n      // Keep the window to include k - 1 times of the maximum number.\n      while (count == k)\n        if (nums[l++] == maxNum)\n          --count;\n      // If l > 0, nums[l..r] has k - 1 times of the maximum number. For any\n      // subarray nums[i..r], where i < l, it will have at least k times of the\n      // maximum number, since nums[l - 1] equals the maximum number.\n      ans += l;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long countSubarrays(int[] nums, int k) {\n    final int maxNum = Arrays.stream(nums).max().getAsInt();\n    long ans = 0;\n    int count = 0;\n\n    for (int l = 0, r = 0; r < nums.length; ++r) {\n      if (nums[r] == maxNum)\n        ++count;\n      // Keep the window to include k - 1 times of the maximum number.\n      while (count == k)\n        if (nums[l++] == maxNum)\n          --count;\n      // If l > 0, nums[l..r] has k - 1 times of the maximum number. For any\n      // subarray nums[i..r], where i < l, it will have at least k times of the\n      // maximum number, since nums[l - 1] equals the maximum number.\n      ans += l;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countSubarrays(self, nums: List[int], k: int) -> int:\n    maxNum = max(nums)\n    ans = 0\n    count = 0\n\n    l = 0\n    for r, num in enumerate(nums):\n      if num == maxNum:\n        count += 1\n      # Keep the window to include k - 1 times of the maxNummum number.\n      while count == k:\n        if nums[l] == maxNum:\n          count -= 1\n        l += 1\n      # If l > 0, nums[l:r+1] has k - 1 times of the maxNummum number. For any\n      # subarray nums[i:r+1], where i < l, it will have at least k times of the\n      # maxNummum number, since nums[l - 1] equals the maxNummum number.\n      ans += l\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}