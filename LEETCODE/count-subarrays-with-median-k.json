{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2488",
            "title": "Count Subarrays With Median K",
            "titleSlug": "count-subarrays-with-median-k",
            "content": "<p>You are given an array <code>nums</code> of size <code>n</code> consisting of <strong>distinct </strong>integers from <code>1</code> to <code>n</code> and a positive integer <code>k</code>.</p>\n\n<p>Return <em>the number of non-empty subarrays in </em><code>nums</code><em> that have a <strong>median</strong> equal to </em><code>k</code>.</p>\n\n<p><strong>Note</strong>:</p>\n\n<ul>\n\t<li>The median of an array is the <strong>middle </strong>element after sorting the array in <strong>ascending </strong>order. If the array is of even length, the median is the <strong>left </strong>middle element.\n\n\t<ul>\n\t\t<li>For example, the median of <code>[2,3,1,4]</code> is <code>2</code>, and the median of <code>[8,4,3,5,1]</code> is <code>4</code>.</li>\n\t</ul>\n\t</li>\n\t<li>A subarray is a contiguous part of an array.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,4,5], k = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The subarrays that have a median equal to 4 are: [4], [4,5] and [1,4,5].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1], k = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> [3] is the only subarray that has a median equal to 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], k &lt;= n</code></li>\n\t<li>The integers in <code>nums</code> are distinct.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 539,
            "dislikes": 10,
            "similarQuestions": "[{\"title\": \"Number of Subarrays with Bounded Maximum\", \"titleSlug\": \"number-of-subarrays-with-bounded-maximum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold\", \"titleSlug\": \"number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Imbalance Numbers of All Subarrays\", \"titleSlug\": \"sum-of-imbalance-numbers-of-all-subarrays\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.9K\", \"totalSubmission\": \"24.7K\", \"totalAcceptedRaw\": 10889, \"totalSubmissionRaw\": 24733, \"acRate\": \"44.0%\"}",
            "hints": [
                "Consider changing the numbers that are strictly greater than k in the array to 1, the numbers that are strictly smaller than k to -1, and k to 0.",
                "After the change, what property does a subarray with median k have in the new array?",
                "An array with median k should have a sum equal to either 0 or 1 in the new array and should contain the element k. How do you count such subarrays?"
            ],
            "rephrased": {
                "body": "Given an array `nums` of size `n` containing distinct integers from 1 to `n`, and a positive integer `k`, find the number of non-empty subarrays in `nums` whose median is equal to `k`. The median of an array is defined as the middle element after sorting the array in ascending order. If the array has an even length, the median is the left middle element.",
                "constraints": [
                    "`n == nums.length`",
                    "`1 <= n <= 10^5`",
                    "`1 <= nums[i], k <= n`",
                    "The integers in `nums` are distinct."
                ],
                "testcases": [
                    {
                        "input": "nums = [3,2,1,4,5], k = 4",
                        "output": "3",
                        "explanation": "The subarrays with a median of 4 are [4], [4,5], and [1,4,5]."
                    },
                    {
                        "input": "nums = [2,3,1], k = 3",
                        "output": "1",
                        "explanation": "The only subarray with a median of 3 is [3]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-subarrays-with-bounded-maximum",
                "title": "Number of Subarrays with Bounded Maximum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
                "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "sum-of-imbalance-numbers-of-all-subarrays",
                "title": "Sum of Imbalance Numbers of All Subarrays",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Consider changing the numbers that are strictly greater than k in the array to 1, the numbers that are strictly smaller than k to -1, and k to 0.",
            "After the change, what property does a subarray with median k have in the new array?",
            "An array with median k should have a sum equal to either 0 or 1 in the new array and should contain the element k. How do you count such subarrays?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countSubarrays(vector<int>& nums, int k) {\n    const int kIndex = find(nums.begin(), nums.end(), k) - nums.begin();\n    int ans = 0;\n    unordered_map<int, int> count;\n\n    for (int i = kIndex, balance = 0; i >= 0; --i) {\n      if (nums[i] < k)\n        --balance;\n      else if (nums[i] > k)\n        ++balance;\n      ++count[balance];\n    }\n\n    for (int i = kIndex, balance = 0; i < nums.size(); ++i) {\n      if (nums[i] < k)\n        --balance;\n      else if (nums[i] > k)\n        ++balance;\n      // The subarray that has balance == 0 or 1 have a median equal to k.\n      // So, we should add count[0 - balance] and count[1 - balance] to the ans.\n      ans += count[-balance] + count[1 - balance];\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countSubarrays(int[] nums, int k) {\n    final int kIndex = find(nums, k);\n    int ans = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (int i = kIndex, balance = 0; i >= 0; --i) {\n      if (nums[i] < k)\n        --balance;\n      else if (nums[i] > k)\n        ++balance;\n      count.merge(balance, 1, Integer::sum);\n    }\n\n    for (int i = kIndex, balance = 0; i < nums.length; ++i) {\n      if (nums[i] < k)\n        --balance;\n      else if (nums[i] > k)\n        ++balance;\n      // The subarray that has balance == 0 or 1 have a median equal to k.\n      // So, we should add count[0 - balance] and count[1 - balance] to the ans.\n      ans += count.getOrDefault(-balance, 0) + count.getOrDefault(1 - balance, 0);\n    }\n\n    return ans;\n  }\n\n  private int find(int[] nums, int k) {\n    for (int i = 0; i < nums.length; ++i)\n      if (nums[i] == k)\n        return i;\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countSubarrays(self, nums: List[int], k: int) -> int:\n    kIndex = nums.index(k)\n    ans = 0\n    count = collections.Counter()\n\n    balance = 0\n    for i in range(kIndex, -1, -1):\n      if nums[i] < k:\n        balance -= 1\n      elif nums[i] > k:\n        balance += 1\n      count[balance] += 1\n\n    balance = 0\n    for i in range(kIndex, len(nums)):\n      if nums[i] < k:\n        balance -= 1\n      elif nums[i] > k:\n        balance += 1\n      # The subarray that has balance == 0 or 1 have a median equal to k.\n      # So, we should add count[0 - balance] and count[1 - balance] to the ans.\n      ans += count[-balance] + count[1 - balance]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}