{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3297",
            "title": "Count Substrings That Can Be Rearranged to Contain a String I",
            "titleSlug": "count-substrings-that-can-be-rearranged-to-contain-a-string-i",
            "content": "<p>You are given two strings <code>word1</code> and <code>word2</code>.</p>\n\n<p>A string <code>x</code> is called <strong>valid</strong> if <code>x</code> can be rearranged to have <code>word2</code> as a <span data-keyword=\"string-prefix\">prefix</span>.</p>\n\n<p>Return the total number of <strong>valid</strong> <span data-keyword=\"substring-nonempty\">substrings</span> of <code>word1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word1 = &quot;bcca&quot;, word2 = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only valid substring is <code>&quot;bcca&quot;</code> which can be rearranged to <code>&quot;abcc&quot;</code> having <code>&quot;abc&quot;</code> as a prefix.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word1 = &quot;abcabc&quot;, word2 = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">10</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All the substrings except substrings of size 1 and size 2 are valid.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word1 = &quot;abcabc&quot;, word2 = &quot;aaabc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= word2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>word1</code> and <code>word2</code> consist only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 91,
            "dislikes": 18,
            "similarQuestions": "[{\"title\": \"Minimum Window Substring\", \"titleSlug\": \"minimum-window-substring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.4K\", \"totalSubmission\": \"35.3K\", \"totalAcceptedRaw\": 14441, \"totalSubmissionRaw\": 35284, \"acRate\": \"40.9%\"}",
            "hints": [
                "Store the frequency of each character for all prefixes.",
                "Use Binary Search."
            ],
            "rephrased": {
                "body": "Given two strings, `word1` and `word2`, determine the number of substrings in `word1` that can be rearranged to have `word2` as a prefix. A substring is considered valid if it can be rearranged to form a string starting with `word2`.",
                "constraints": [
                    "1 <= word1.length <= 10^5",
                    "1 <= word2.length <= 10^4",
                    "word1 and word2 consist only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "word1 = \"bcca\", word2 = \"abc\"",
                        "output": "1",
                        "explanation": "The substring \"bcca\" can be rearranged to \"abcc\", which has \"abc\" as a prefix."
                    },
                    {
                        "input": "word1 = \"abcabc\", word2 = \"abc\"",
                        "output": "10",
                        "explanation": "All substrings of word1, except those of length 1 and 2, can be rearranged such that 'abc' is a prefix.  For example, 'abca' can become 'abc...'."
                    },
                    {
                        "input": "word1 = \"abcabc\", word2 = \"aaabc\"",
                        "output": "0",
                        "explanation": "No substring of `word1` can be rearranged to have `word2` (aaabc) as a prefix since no substrings contain 2 'a' characters."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-window-substring",
                "title": "Minimum Window Substring",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Store the frequency of each character for all prefixes.",
            "Use Binary Search."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long validSubstringCount(string word1, string word2) {\n    long ans = 0;\n    int required = word2.length();\n    vector<int> count(26);\n\n    for (const char c : word2)\n      ++count[c - 'a'];\n\n    for (int l = 0, r = 0; r < word1.length(); ++r) {\n      if (--count[word1[r] - 'a'] >= 0)\n        --required;\n      while (required == 0) {\n        // Add valid substrings containing word1[l..r] to the answer. They are\n        // word1[l..r], word1[l..r + 1], ..., word1[l..n - 1].\n        ans += word1.length() - r;\n        if (++count[word1[l++] - 'a'] > 0)\n          ++required;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long validSubstringCount(String word1, String word2) {\n    long ans = 0;\n    int required = word2.length();\n    int[] count = new int[26];\n\n    for (final char c : word2.toCharArray())\n      ++count[c - 'a'];\n\n    for (int l = 0, r = 0; r < word1.length(); ++r) {\n      if (--count[word1.charAt(r) - 'a'] >= 0)\n        --required;\n      while (required == 0) {\n        // Add valid substrings containing word1[l..r] to the answer. They are\n        // word1[l..r], word1[l..r + 1], ..., word1[l..n - 1].\n        ans += word1.length() - r;\n        if (++count[word1.charAt(l++) - 'a'] > 0)\n          ++required;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def validSubstringCount(self, word1: str, word2: str) -> int:\n    ans = 0\n    count = collections.Counter(word2)\n    required = len(word2)\n\n    l = 0\n    for r, c in enumerate(word1):\n      count[c] -= 1\n      if count[c] >= 0:\n        required -= 1\n      while required == 0:\n        # Add valid substrings containing word1[l..r] to the answer. They are\n        # word1[l..r], word1[l..r + 1], ..., word1[l..n - 1].\n        ans += len(word1) - r\n        count[word1[l]] += 1\n        if count[word1[l]] > 0:\n          required += 1\n        l += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}