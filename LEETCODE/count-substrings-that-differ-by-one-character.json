{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1638",
            "title": "Count Substrings That Differ by One Character",
            "titleSlug": "count-substrings-that-differ-by-one-character",
            "content": "<p>Given two strings <code>s</code> and <code>t</code>, find the number of ways you can choose a non-empty substring of <code>s</code> and replace a <strong>single character</strong> by a different character such that the resulting substring is a substring of <code>t</code>. In other words, find the number of substrings in <code>s</code> that differ from some substring in <code>t</code> by <strong>exactly</strong> one character.</p>\n\n<p>For example, the underlined substrings in <code>&quot;<u>compute</u>r&quot;</code> and <code>&quot;<u>computa</u>tion&quot;</code> only differ by the <code>&#39;e&#39;</code>/<code>&#39;a&#39;</code>, so this is a valid way.</p>\n\n<p>Return <em>the number of substrings that satisfy the condition above.</em></p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aba&quot;, t = &quot;baba&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The following are the pairs of substrings from s and t that differ by exactly 1 character:\n(&quot;<u>a</u>ba&quot;, &quot;<u>b</u>aba&quot;)\n(&quot;<u>a</u>ba&quot;, &quot;ba<u>b</u>a&quot;)\n(&quot;ab<u>a</u>&quot;, &quot;<u>b</u>aba&quot;)\n(&quot;ab<u>a</u>&quot;, &quot;ba<u>b</u>a&quot;)\n(&quot;a<u>b</u>a&quot;, &quot;b<u>a</u>ba&quot;)\n(&quot;a<u>b</u>a&quot;, &quot;bab<u>a</u>&quot;)\nThe underlined portions are the substrings that are chosen from s and t.\n</pre>\n\u200b\u200b<strong class=\"example\">Example 2:</strong>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, t = &quot;bb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The following are the pairs of substrings from s and t that differ by 1 character:\n(&quot;<u>a</u>b&quot;, &quot;<u>b</u>b&quot;)\n(&quot;<u>a</u>b&quot;, &quot;b<u>b</u>&quot;)\n(&quot;<u>ab</u>&quot;, &quot;<u>bb</u>&quot;)\n\u200b\u200b\u200b\u200bThe underlined portions are the substrings that are chosen from s and t.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 100</code></li>\n\t<li><code>s</code> and <code>t</code> consist of lowercase English letters only.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1102,
            "dislikes": 335,
            "similarQuestions": "[{\"title\": \"Count Words Obtained After Adding a Letter\", \"titleSlug\": \"count-words-obtained-after-adding-a-letter\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.8K\", \"totalSubmission\": \"39.1K\", \"totalAcceptedRaw\": 27815, \"totalSubmissionRaw\": 39099, \"acRate\": \"71.1%\"}",
            "hints": [
                "Take every substring of s, change a character, and see how many substrings of t match that substring.",
                "Use a Trie to store all substrings of t as a dictionary."
            ],
            "rephrased": {
                "body": "Given two strings `s` and `t`, determine the number of ways to select a non-empty substring from `s` and replace a single character within that substring with a different character, such that the modified substring becomes a substring of `t`. In essence, count the substrings of `s` that differ from some substring of `t` by exactly one character.",
                "constraints": [
                    "1 <= s.length, t.length <= 100",
                    "s and t consist of lowercase English letters only."
                ],
                "testcases": [
                    {
                        "input": "s = \"aba\", t = \"baba\"",
                        "output": "6",
                        "explanation": "The following pairs of substrings from s and t differ by exactly 1 character:\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\nThe underlined portions represent the chosen substrings from s and t."
                    },
                    {
                        "input": "s = \"ab\", t = \"bb\"",
                        "output": "3",
                        "explanation": "The following pairs of substrings from s and t differ by 1 character:\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\nThe underlined portions represent the chosen substrings from s and t."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "count-words-obtained-after-adding-a-letter",
                "title": "Count Words Obtained After Adding a Letter",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Take every substring of s, change a character, and see how many substrings of t match that substring.",
            "Use a Trie to store all substrings of t as a dictionary."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countSubstrings(string s, string t) {\n    int ans = 0;\n\n    for (int i = 0; i < s.length(); ++i)\n      ans += count(s, t, i, 0);\n\n    for (int j = 1; j < t.length(); ++j)\n      ans += count(s, t, 0, j);\n\n    return ans;\n  }\n\n private:\n  // Returns the # of substrings of s[i:] and t[j:] that differ by one char.\n  int count(const string& s, const string& t, int i, int j) {\n    int res = 0;\n    // # of substrings starting at s[i] and t[j] ending at the current index\n    // with zero different chars.\n    int dp0 = 0;\n    // # of substrings starting at s[i] and t[j] ending at the current index\n    // with one different char.\n    int dp1 = 0;\n\n    for (; i < s.length() && j < t.length(); ++i, ++j) {\n      if (s[i] == t[j]) {\n        ++dp0;\n      } else {\n        dp1 = dp0 + 1;\n        dp0 = 0;\n      }\n      res += dp1;\n    }\n\n    return res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countSubstrings(String s, String t) {\n    int ans = 0;\n\n    for (int i = 0; i < s.length(); ++i)\n      ans += count(s, t, i, 0);\n\n    for (int j = 1; j < t.length(); ++j)\n      ans += count(s, t, 0, j);\n\n    return ans;\n  }\n\n  // Returns the # of substrings of s[i:] and t[j:] that differ by one char.\n  private int count(final String s, final String t, int i, int j) {\n    int res = 0;\n    // # of substrings starting at s[i] and t[j] ending at the current index\n    // with zero different chars.\n    int dp0 = 0;\n    // # of substrings starting at s[i] and t[j] ending at the current index\n    // with one different char.\n    int dp1 = 0;\n\n    for (; i < s.length() && j < t.length(); ++i, ++j) {\n      if (s.charAt(i) == t.charAt(j)) {\n        ++dp0;\n      } else {\n        dp1 = dp0 + 1;\n        dp0 = 0;\n      }\n      res += dp1;\n    }\n\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countSubstrings(self, s: str, t: str) -> int:\n    ans = 0\n\n    for i in range(len(s)):\n      ans += self._count(s, t, i, 0)\n\n    for j in range(1, len(t)):\n      ans += self._count(s, t, 0, j)\n\n    return ans\n\n  def _count(self, s: str, t: str, i: int, j: int) -> int:\n    \"\"\"Returns the # of substrings of s[i:] and t[j:] that differ by one char.\"\"\"\n    res = 0\n    # number of substrings starting at s[i] and t[j] ending at the current index\n    # with zero different chars.\n    dp0 = 0\n    # number of substrings starting at s[i] and t[j] ending at the current index\n    # with one different char.\n    dp1 = 0\n\n    while i < len(s) and j < len(t):\n      if s[i] == t[j]:\n        dp0 += 1\n      else:\n        dp0, dp1 = 0, dp0 + 1\n      res += dp1\n      i += 1\n      j += 1\n\n    return res\n",
                "lang_text": "py"
            }
        }
    }
}