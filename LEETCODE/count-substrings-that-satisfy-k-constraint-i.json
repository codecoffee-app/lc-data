{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3258",
            "title": "Count Substrings That Satisfy K-Constraint I",
            "titleSlug": "count-substrings-that-satisfy-k-constraint-i",
            "content": "<p>You are given a <strong>binary</strong> string <code>s</code> and an integer <code>k</code>.</p>\n\n<p>A <strong>binary string</strong> satisfies the <strong>k-constraint</strong> if <strong>either</strong> of the following conditions holds:</p>\n\n<ul>\n\t<li>The number of <code>0</code>&#39;s in the string is at most <code>k</code>.</li>\n\t<li>The number of <code>1</code>&#39;s in the string is at most <code>k</code>.</li>\n</ul>\n\n<p>Return an integer denoting the number of <span data-keyword=\"substring-nonempty\">substrings</span> of <code>s</code> that satisfy the <strong>k-constraint</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;10101&quot;, k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">12</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Every substring of <code>s</code> except the substrings <code>&quot;1010&quot;</code>, <code>&quot;10101&quot;</code>, and <code>&quot;0101&quot;</code> satisfies the k-constraint.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;1010101&quot;, k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">25</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Every substring of <code>s</code> except the substrings with a length greater than 5 satisfies the k-constraint.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;11111&quot;, k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All substrings of <code>s</code> satisfy the k-constraint.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 50 </code></li>\n\t<li><code>1 &lt;= k &lt;= s.length</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 93,
            "dislikes": 15,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"38.9K\", \"totalSubmission\": \"48.6K\", \"totalAcceptedRaw\": 38945, \"totalSubmissionRaw\": 48614, \"acRate\": \"80.1%\"}",
            "hints": [
                "Using a brute force approach, check each index until a substring satisfying the k-constraint is found, then increment."
            ],
            "rephrased": {
                "body": "Given a binary string `s` and an integer `k`, determine the number of substrings of `s` that satisfy the k-constraint. A binary string satisfies the k-constraint if the number of 0s in the string is at most `k` or the number of 1s in the string is at most `k`.",
                "constraints": [
                    "1 <= s.length <= 50",
                    "1 <= k <= s.length",
                    "s[i] is either '0' or '1'."
                ],
                "testcases": [
                    {
                        "input": "s = \"10101\", k = 1",
                        "output": "12",
                        "explanation": "All substrings of `s` satisfy the k-constraint except for \"1010\", \"10101\", and \"0101\". These substrings have more than `k` (which is 1) number of both zeros and ones. For example, in 1010, number of zeros is 2 and number of ones is 2 which are both greater than 1."
                    },
                    {
                        "input": "s = \"1010101\", k = 2",
                        "output": "25",
                        "explanation": "All substrings of `s` satisfy the k-constraint except those with a length greater than 5. For example, \"101010\" has 3 zeros and 3 ones, both of which exceed k = 2."
                    },
                    {
                        "input": "s = \"11111\", k = 1",
                        "output": "15",
                        "explanation": "All substrings of `s` satisfy the k-constraint because the number of zeros in each substring is 0, which is less than or equal to k = 1. Or because the number of ones are less than or equal to the length of the substring."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Using a brute force approach, check each index until a substring satisfying the k-constraint is found, then increment."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countKConstraintSubstrings(string s, int k) {\n    int ans = 0;\n    vector<int> count(2);\n\n    for (int l = 0, r = 0; r < s.length(); ++r) {\n      ++count[s[r] - '0'];\n      while (count[0] > k && count[1] > k)\n        --count[s[l++] - '0'];\n      ans += r - l + 1;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countKConstraintSubstrings(String s, int k) {\n    int ans = 0;\n    int[] count = new int[2];\n\n    int l = 0;\n    for (int r = 0; r < s.length(); ++r) {\n      ++count[s.charAt(r) - '0'];\n      while (count[0] > k && count[1] > k)\n        --count[s.charAt(l++) - '0'];\n      ans += r - l + 1;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countKConstraintSubstrings(self, s: str, k: int) -> int:\n    ans = 0\n    count = [0, 0]\n\n    l = 0\n    for r, c in enumerate(s):\n      count[int(c)] += 1\n      while min(count) > k:\n        count[int(s[l])] -= 1\n        l += 1\n      ans += r - l + 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}