{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3261",
            "title": "Count Substrings That Satisfy K-Constraint II",
            "titleSlug": "count-substrings-that-satisfy-k-constraint-ii",
            "content": "<p>You are given a <strong>binary</strong> string <code>s</code> and an integer <code>k</code>.</p>\n\n<p>You are also given a 2D integer array <code>queries</code>, where <code>queries[i] = [l<sub>i</sub>, r<sub>i</sub>]</code>.</p>\n\n<p>A <strong>binary string</strong> satisfies the <strong>k-constraint</strong> if <strong>either</strong> of the following conditions holds:</p>\n\n<ul>\n\t<li>The number of <code>0</code>&#39;s in the string is at most <code>k</code>.</li>\n\t<li>The number of <code>1</code>&#39;s in the string is at most <code>k</code>.</li>\n</ul>\n\n<p>Return an integer array <code>answer</code>, where <code>answer[i]</code> is the number of <span data-keyword=\"substring-nonempty\">substrings</span> of <code>s[l<sub>i</sub>..r<sub>i</sub>]</code> that satisfy the <strong>k-constraint</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;0001111&quot;, k = 2, queries = [[0,6]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[26]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>For the query <code>[0, 6]</code>, all substrings of <code>s[0..6] = &quot;0001111&quot;</code> satisfy the k-constraint except for the substrings <code>s[0..5] = &quot;000111&quot;</code> and <code>s[0..6] = &quot;0001111&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;010101&quot;, k = 1, queries = [[0,5],[1,4],[2,3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[15,9,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The substrings of <code>s</code> with a length greater than 3 do not satisfy the k-constraint.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li><code>1 &lt;= k &lt;= s.length</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i] == [l<sub>i</sub>, r<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= l<sub>i</sub> &lt;= r<sub>i</sub> &lt; s.length</code></li>\n\t<li>All queries are distinct.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 113,
            "dislikes": 9,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"4K\", \"totalSubmission\": \"19K\", \"totalAcceptedRaw\": 4038, \"totalSubmissionRaw\": 19011, \"acRate\": \"21.2%\"}",
            "hints": [
                "Answering online queries is tough. Try to answer them offline since the queries are known beforehand.",
                "For each index, how do you calculate the left boundary so that the given condition is satisfied?",
                "Using the precomputed left boundaries and a range data structure, you can now answer the queries optimally."
            ],
            "rephrased": {
                "body": "Given a binary string `s` and an integer `k`, determine the number of substrings within specified ranges that satisfy the k-constraint. A binary string satisfies the k-constraint if the number of 0s is at most `k` or the number of 1s is at most `k`. You are also given a 2D integer array `queries`, where `queries[i] = [l_i, r_i]`. For each query `[l_i, r_i]`, find the number of substrings of `s[l_i..r_i]` that meet the k-constraint. Return an integer array `answer`, where `answer[i]` is the answer for the `i`th query.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s[i] is either '0' or '1'.",
                    "1 <= k <= s.length",
                    "1 <= queries.length <= 10^5",
                    "queries[i] == [l_i, r_i]",
                    "0 <= l_i <= r_i < s.length",
                    "All queries are distinct."
                ],
                "testcases": [
                    {
                        "input": "s = \"0001111\", k = 2, queries = [[0,6]]",
                        "output": "[26]",
                        "explanation": "For the query [0, 6], consider the substring \"0001111\". All substrings except \"000111\" and \"0001111\" satisfy the k-constraint (at most 2 zeros or 2 ones). Therefore, the answer is 26."
                    },
                    {
                        "input": "s = \"010101\", k = 1, queries = [[0,5],[1,4],[2,3]]",
                        "output": "[15,9,3]",
                        "explanation": "For the query [0, 5], we consider the substring \"010101\".  The substrings that satisfy the k-constraint include \"0\", \"1\", \"01\", \"10\", \"010\", etc. The strings of length > 3 do not satisfy the constraint.  The total number of satisfying substrings is 15.\n\nFor the query [1,4], we consider the substring \"1010\".  The number of satisfying substrings is 9.\n\nFor the query [2,3], we consider the substring \"01\". The number of satisfying substrings is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Answering online queries is tough. Try to answer them offline since the queries are known beforehand.",
            "For each index, how do you calculate the left boundary so that the given condition is satisfied?",
            "Using the precomputed left boundaries and a range data structure, you can now answer the queries optimally."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<long long> countKConstraintSubstrings(string s, int k,\n                                               vector<vector<int>>& queries) {\n    const int n = s.size();\n    vector<long long> ans;\n    vector<int> count(2);\n    // leftToRight[l] : = the maximum right index r s.t.s[l..r] is valid\n    vector<int> leftToRight(n);\n    // rightToLeft[r] := the minimum left index l s.t. s[l..r] is valid\n    vector<int> rightToLeft(n);\n    // prefix[i] := the number of valid substrings ending in [0..i - 1].\n    vector<long> prefix{0};\n\n    for (int l = 0, r = 0; r < n; ++r) {\n      ++count[s[r] - '0'];\n      while (count[0] > k && count[1] > k)\n        --count[s[l++] - '0'];\n      rightToLeft[r] = l;\n    }\n\n    count = vector<int>(2);\n\n    for (int l = n - 1, r = n - 1; l >= 0; --l) {\n      ++count[s[l] - '0'];\n      while (count[0] > k && count[1] > k)\n        --count[s[r--] - '0'];\n      leftToRight[l] = r;\n    }\n\n    for (int r = 0; r < n; ++r)\n      prefix.push_back(prefix.back() + r - rightToLeft[r] + 1);\n\n    for (const vector<int>& query : queries) {\n      const int l = query[0];\n      const int r = query[1];\n      long numValidSubstrings = 0;\n      if (r > leftToRight[l]) {\n        // If r is beyond leftToRight[l], compute the number of valid substrings\n        // from l to leftToRight[l] and add the number of valid substrings\n        // ending in [leftToRight[l] + 1..r].\n        //\n        // prefix[r + 1] := the number of valid substrings ending in [0..r].\n        // prefix[leftToRight[l] + 1] := the number of valid substrings ending\n        // in [0..leftToRight].\n        // => prefix[r + 1] - prefix[leftToRight[l] + 1] := the number of valid\n        // substrings ending in [leftToRight[l] + 1..r].\n        const int sz = leftToRight[l] - l + 1;\n        numValidSubstrings =\n            (sz * (sz + 1)) / 2 + (prefix[r + 1] - prefix[leftToRight[l] + 1]);\n      } else {\n        // If r is within the range of leftToRight[l], compute the number of\n        // valid substrings directly from l to r.\n        const int sz = r - l + 1;\n        numValidSubstrings = (sz * static_cast<long>(sz + 1)) / 2;\n      }\n      ans.push_back(numValidSubstrings);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long[] countKConstraintSubstrings(String s, int k, int[][] queries) {\n    final int n = s.length();\n    long[] ans = new long[queries.length];\n    int[] count = new int[2];\n    // leftToRight[l] : = the maximum right index r s.t.s[l..r] is valid\n    int[] leftToRight = new int[n];\n    // rightToLeft[r] := the minimum left index l s.t. s[l..r] is valid\n    int[] rightToLeft = new int[n];\n    // prefix[i] := the number of valid substrings ending in [0..i - 1].\n    long[] prefix = new long[n + 1];\n\n    for (int l = 0, r = 0; r < n; ++r) {\n      ++count[s.charAt(r) - '0'];\n      while (count[0] > k && count[1] > k)\n        --count[s.charAt(l++) - '0'];\n      rightToLeft[r] = l;\n    }\n\n    Arrays.fill(count, 0);\n\n    for (int l = n - 1, r = n - 1; l >= 0; --l) {\n      ++count[s.charAt(l) - '0'];\n      while (count[0] > k && count[1] > k)\n        --count[s.charAt(r--) - '0'];\n      leftToRight[l] = r;\n    }\n\n    for (int r = 0; r < n; ++r)\n      prefix[r + 1] = prefix[r] + r - rightToLeft[r] + 1;\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int l = queries[i][0];\n      final int r = queries[i][1];\n      long numValidSubstrings = 0;\n      if (r > leftToRight[l]) {\n        // If r is beyond leftToRight[l], compute the number of valid substrings\n        // from l to leftToRight[l] and add the number of valid substrings\n        // ending in [leftToRight[l] + 1..r].\n        //\n        // prefix[r + 1] := the number of valid substrings ending in [0..r].\n        // prefix[leftToRight[l] + 1] := the number of valid substrings ending\n        // in [0..leftToRight].\n        // => prefix[r + 1] - prefix[leftToRight[l] + 1] := the number of valid\n        // substrings ending in [leftToRight[l] + 1..r].\n        final int sz = leftToRight[l] - l + 1;\n        numValidSubstrings = (sz * (sz + 1)) / 2 + (prefix[r + 1] - prefix[leftToRight[l] + 1]);\n      } else {\n        final int sz = r - l + 1;\n        numValidSubstrings = (sz * (long) (sz + 1)) / 2;\n      }\n      ans[i] = numValidSubstrings;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countKConstraintSubstrings(\n      self,\n      s: str,\n      k: int,\n      queries: list[list[int]]\n  ) -> list[int]:\n    n = len(s)\n    ans = []\n    count = [0, 0]\n    # leftToRight[l] := the maximum right index r s.t. s[l..r] is valid\n    leftToRight = [0] * n\n    # rightToLeft[r] := the minimum left index l s.t. s[l..r] is valid\n    rightToLeft = [0] * n\n\n    l = 0\n    for r in range(n):\n      count[int(s[r])] += 1\n      while min(count) > k:\n        count[int(s[l])] -= 1\n        l += 1\n      rightToLeft[r] = l\n\n    count = [0, 0]\n    r = n - 1\n    for l in reversed(range(n)):\n      count[int(s[l])] += 1\n      while min(count) > k:\n        count[int(s[r])] -= 1\n        r -= 1\n      leftToRight[l] = r\n\n    # prefix[i] := the number of valid substrings ending in [0..i - 1].\n    prefix = list(itertools.accumulate((r - l + 1\n                                       for r, l in enumerate(rightToLeft)),\n                                       initial=0))\n\n    for l, r in queries:\n      if r > leftToRight[l]:\n        # If r is beyond leftToRight[l], compute the number of valid substrings\n        # from l to leftToRight[l] and add the number of valid substrings\n        # ending in [leftToRight[l] + 1..r].\n        #\n        # prefix[r + 1] := the number of valid substrings ending in [0..r].\n        # prefix[leftToRight[l] + 1] := the number of valid substrings ending\n        # in [0..leftToRight].\n        # => prefix[r + 1] - prefix[leftToRight[l] + 1] := the number of valid\n        # substrings ending in [leftToRight[l] + 1..r].\n        sz = leftToRight[l] - l + 1\n        numValidSubstrings = sz * (sz + 1) // 2 + (\n            prefix[r + 1] - prefix[leftToRight[l] + 1])\n      else:\n        # If r is within the range of leftToRight[l], compute the number of\n        # valid substrings directly from l to r.\n        sz = r - l + 1\n        numValidSubstrings = sz * (sz + 1) // 2\n      ans.append(numValidSubstrings)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}