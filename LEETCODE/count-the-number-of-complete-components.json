{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2685",
            "title": "Count the Number of Complete Components",
            "titleSlug": "count-the-number-of-complete-components",
            "content": "<p>You are given an integer <code>n</code>. There is an <strong>undirected</strong> graph with <code>n</code> vertices, numbered from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an <strong>undirected</strong> edge connecting vertices <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p>\n\n<p>Return <em>the number of <strong>complete connected components</strong> of the graph</em>.</p>\n\n<p>A <strong>connected component</strong> is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.</p>\n\n<p>A connected component is said to be <b>complete</b> if there exists an edge between every pair of its vertices.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/04/11/screenshot-from-2023-04-11-23-31-23.png\" style=\"width: 671px; height: 270px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, edges = [[0,1],[0,2],[1,2],[3,4]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> From the picture above, one can see that all of the components of this graph are complete.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/04/11/screenshot-from-2023-04-11-23-32-00.png\" style=\"width: 671px; height: 270px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, edges = [[0,1],[0,2],[1,2],[3,4],[3,5]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The component containing vertices 0, 1, and 2 is complete since there is an edge between every pair of two vertices. On the other hand, the component containing vertices 3, 4, and 5 is not complete since there is no edge between vertices 4 and 5. Thus, the number of complete components in this graph is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>0 &lt;= edges.length &lt;= n * (n - 1) / 2</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>There are no repeated edges.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 557,
            "dislikes": 13,
            "similarQuestions": "[{\"title\": \"Number of Connected Components in an Undirected Graph\", \"titleSlug\": \"number-of-connected-components-in-an-undirected-graph\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.8K\", \"totalSubmission\": \"32K\", \"totalAcceptedRaw\": 20790, \"totalSubmissionRaw\": 31962, \"acRate\": \"65.0%\"}",
            "hints": [
                "Find the connected components of an undirected graph using depth-first search (DFS) or breadth-first search (BFS).",
                "For each connected component, count the number of nodes and edges in the component.",
                "A connected component is complete if and only if the number of edges in the component is equal to m*(m-1)/2, where m is the number of nodes in the component."
            ],
            "rephrased": {
                "body": "Given an undirected graph with `n` vertices, numbered from 0 to `n - 1`, and a 2D integer array `edges` where `edges[i] = [a<sub>i</sub>, b<sub>i</sub>]` represents an undirected edge between vertices `a<sub>i</sub>` and `b<sub>i</sub>`, determine the number of complete connected components in the graph.\n\nA connected component is a subgraph where any two vertices are connected by a path, and no vertex shares an edge with vertices outside the subgraph. A connected component is considered complete if there exists an edge between every pair of vertices within it.",
                "constraints": [
                    "1 <= n <= 50",
                    "0 <= edges.length <= n * (n - 1) / 2",
                    "edges[i].length == 2",
                    "0 <= a<sub>i</sub>, b<sub>i</sub> <= n - 1",
                    "a<sub>i</sub> != b<sub>i</sub>",
                    "There are no repeated edges."
                ],
                "testcases": [
                    {
                        "input": "n = 6, edges = [[0,1],[0,2],[1,2],[3,4]]",
                        "output": "3",
                        "explanation": "The graph has three connected components: {0, 1, 2}, {3, 4}, and {5}. Each of these components is complete because there's an edge between every pair of vertices within each component."
                    },
                    {
                        "input": "n = 6, edges = [[0,1],[0,2],[1,2],[3,4],[3,5]]",
                        "output": "1",
                        "explanation": "The connected component {0, 1, 2} is complete. However, the connected component {3, 4, 5} is not complete because there's no edge between vertices 4 and 5. Therefore, only one complete connected component exists."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-connected-components-in-an-undirected-graph",
                "title": "Number of Connected Components in an Undirected Graph",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Find the connected components of an undirected graph using depth-first search (DFS) or breadth-first search (BFS).",
            "For each connected component, count the number of nodes and edges in the component.",
            "A connected component is complete if and only if the number of edges in the component is equal to m*(m-1)/2, where m is the number of nodes in the component."
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), rank(n), nodeCount(n, 1), edgeCount(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    ++edgeCount[i];\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n      edgeCount[j] += edgeCount[i];\n      nodeCount[j] += nodeCount[i];\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n      edgeCount[i] += edgeCount[j];\n      nodeCount[i] += nodeCount[j];\n    } else {\n      id[i] = j;\n      edgeCount[j] += edgeCount[i];\n      nodeCount[j] += nodeCount[i];\n      ++rank[j];\n    }\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n  bool isComplete(int u) {\n    return nodeCount[u] * (nodeCount[u] - 1) / 2 == edgeCount[u];\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n  vector<int> nodeCount;\n  vector<int> edgeCount;\n};\n\nclass Solution {\n public:\n  int countCompleteComponents(int n, vector<vector<int>>& edges) {\n    int ans = 0;\n    UnionFind uf(n);\n    unordered_set<int> parents;\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      uf.unionByRank(u, v);\n    }\n\n    for (int i = 0; i < n; ++i) {\n      const int parent = uf.find(i);\n      if (parents.insert(parent).second && uf.isComplete(parent))\n        ++ans;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    nodeCount = new int[n];\n    edgeCount = new int[n];\n    for (int i = 0; i < n; ++i) {\n      id[i] = i;\n      nodeCount[i] = 1;\n    }\n  }\n\n  public void unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    ++edgeCount[i];\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n      edgeCount[j] += edgeCount[i];\n      nodeCount[j] += nodeCount[i];\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n      edgeCount[i] += edgeCount[j];\n      nodeCount[i] += nodeCount[j];\n    } else {\n      id[i] = j;\n      edgeCount[j] += edgeCount[i];\n      nodeCount[j] += nodeCount[i];\n      ++rank[j];\n    }\n  }\n\n  public int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n\n  public boolean isComplete(int u) {\n    return nodeCount[u] * (nodeCount[u] - 1) / 2 == edgeCount[u];\n  }\n\n  private int[] id;\n  private int[] rank;\n  private int[] nodeCount;\n  private int[] edgeCount;\n}\n\nclass Solution {\n  public int countCompleteComponents(int n, int[][] edges) {\n    int ans = 0;\n    UnionFind uf = new UnionFind(n);\n    Set<Integer> parents = new HashSet<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      uf.unionByRank(u, v);\n    }\n\n    for (int i = 0; i < n; ++i) {\n      final int parent = uf.find(i);\n      if (parents.add(parent) && uf.isComplete(parent))\n        ++ans;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n    self.nodeCount = [1] * n\n    self.edgeCount = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    self.edgeCount[i] += 1\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n      self.edgeCount[j] += self.edgeCount[i]\n      self.nodeCount[j] += self.nodeCount[i]\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n      self.edgeCount[i] += self.edgeCount[j]\n      self.nodeCount[i] += self.nodeCount[j]\n    else:\n      self.id[i] = j\n      self.edgeCount[j] += self.edgeCount[i]\n      self.nodeCount[j] += self.nodeCount[i]\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n  def isComplete(self, u):\n    return self.nodeCount[u] * (self.nodeCount[u] - 1) // 2 == self.edgeCount[u]\n\n\nclass Solution:\n  def countCompleteComponents(self, n: int, edges: List[List[int]]) -> int:\n    ans = 0\n    uf = UnionFind(n)\n    parents = set()\n\n    for u, v in edges:\n      uf.unionByRank(u, v)\n\n    for i in range(n):\n      parent = uf.find(i)\n      if parent not in parents and uf.isComplete(parent):\n        ans += 1\n        parents.add(parent)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}