{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2563",
            "title": "Count the Number of Fair Pairs",
            "titleSlug": "count-the-number-of-fair-pairs",
            "content": "<p>Given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>n</code> and two integers <code>lower</code> and <code>upper</code>, return <em>the number of fair pairs</em>.</p>\n\n<p>A pair <code>(i, j)</code> is <b>fair </b>if:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt; n</code>, and</li>\n\t<li><code>lower &lt;= nums[i] + nums[j] &lt;= upper</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,7,4,4,5], lower = 3, upper = 6\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,7,9,2,5], lower = 11, upper = 11\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is a single fair pair: (2,3).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums.length == n</code></li>\n\t<li><code><font face=\"monospace\">-10<sup>9</sup></font>&nbsp;&lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code><font face=\"monospace\">-10<sup>9</sup>&nbsp;&lt;= lower &lt;= upper &lt;= 10<sup>9</sup></font></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 735,
            "dislikes": 35,
            "similarQuestions": "[{\"title\": \"Count of Range Sum\", \"titleSlug\": \"count-of-range-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Finding Pairs With a Certain Sum\", \"titleSlug\": \"finding-pairs-with-a-certain-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Number of Pairs With Absolute Difference K\", \"titleSlug\": \"count-number-of-pairs-with-absolute-difference-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Pairs Whose Sum is Less than Target\", \"titleSlug\": \"count-pairs-whose-sum-is-less-than-target\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.3K\", \"totalSubmission\": \"68.5K\", \"totalAcceptedRaw\": 22334, \"totalSubmissionRaw\": 68515, \"acRate\": \"32.6%\"}",
            "hints": [
                "Sort the array in ascending order.",
                "For each number in the array, keep track of the smallest and largest numbers in the array that can form a fair pair with this number.",
                "As you move to larger number, both boundaries move down."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` of size `n` and two integers `lower` and `upper`, determine the number of 'fair pairs'. A pair `(i, j)` is considered fair if the following conditions are met:\n\n1.  `0 <= i < j < n`\n2.  `lower <= nums[i] + nums[j] <= upper`\n\nIn essence, count the number of pairs in the array where the sum of the elements at indices `i` and `j` falls within the specified range [lower, upper], and `i` is strictly less than `j`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "nums.length == n",
                    "-10^9 <= nums[i] <= 10^9",
                    "-10^9 <= lower <= upper <= 10^9"
                ],
                "testcases": [
                    {
                        "input": {
                            "nums": [
                                0,
                                1,
                                7,
                                4,
                                4,
                                5
                            ],
                            "lower": 3,
                            "upper": 6
                        },
                        "output": 6,
                        "explanation": "The fair pairs are (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5). For example, for pair (0,3): nums[0] + nums[3] = 0 + 4 = 4, which falls within the range [3, 6]."
                    },
                    {
                        "input": {
                            "nums": [
                                1,
                                7,
                                9,
                                2,
                                5
                            ],
                            "lower": 11,
                            "upper": 11
                        },
                        "output": 1,
                        "explanation": "The fair pair is (2,3). Because nums[2] + nums[3] == 9+2 == 11 which is equal to the lower and upper bond"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-of-range-sum",
                "title": "Count of Range Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "finding-pairs-with-a-certain-sum",
                "title": "Finding Pairs With a Certain Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "count-number-of-pairs-with-absolute-difference-k",
                "title": "Count Number of Pairs With Absolute Difference K",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "count-pairs-whose-sum-is-less-than-target",
                "title": "Count Pairs Whose Sum is Less than Target",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort the array in ascending order.",
            "For each number in the array, keep track of the smallest and largest numbers in the array that can form a fair pair with this number.",
            "As you move to larger number, both boundaries move down."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long countFairPairs(vector<int>& nums, int lower, int upper) {\n    // nums[i] + nums[j] == nums[j] + nums[i], so the condition that i < j\n    // degrades to i != j and we can sort the array.\n    std::ranges::sort(nums);\n    return countLess(nums, upper) - countLess(nums, lower - 1);\n  }\n\n private:\n  long long countLess(const vector<int>& nums, int sum) {\n    long long res = 0;\n    for (int i = 0, j = nums.size() - 1; i < j; ++i) {\n      while (i < j && nums[i] + nums[j] > sum)\n        --j;\n      res += j - i;\n    }\n    return res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long countFairPairs(int[] nums, int lower, int upper) {\n    // nums[i] + nums[j] == nums[j] + nums[i], so the condition that i < j\n    // degrades to i != j and we can sort the array.\n    Arrays.sort(nums);\n    return countLess(nums, upper) - countLess(nums, lower - 1);\n  }\n\n  private long countLess(int[] nums, int sum) {\n    long res = 0;\n    for (int i = 0, j = nums.length - 1; i < j; ++i) {\n      while (i < j && nums[i] + nums[j] > sum)\n        --j;\n      res += j - i;\n    }\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n    # nums[i] + nums[j] == nums[j] + nums[i], so the condition that i < j\n    # degrades to i != j and we can sort the array.\n    nums.sort()\n\n    def countLess(summ: int) -> int:\n      res = 0\n      i = 0\n      j = len(nums) - 1\n      while i < j:\n        while i < j and nums[i] + nums[j] > summ:\n          j -= 1\n        res += j - i\n        i += 1\n      return res\n\n    return countLess(upper) - countLess(lower - 1)\n",
                "lang_text": "py"
            }
        }
    }
}