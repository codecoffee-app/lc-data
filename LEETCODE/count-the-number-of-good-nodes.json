{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3249",
            "title": "Count the Number of Good Nodes",
            "titleSlug": "count-the-number-of-good-nodes",
            "content": "<p>There is an <strong>undirected</strong> tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, and rooted at node <code>0</code>. You are given a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>A node is <strong>good</strong> if all the <span data-keyword=\"subtree\">subtrees</span> rooted at its children have the same size.</p>\n\n<p>Return the number of <strong>good</strong> nodes in the given tree.</p>\n\n<p>A <strong>subtree</strong> of <code>treeName</code> is a tree consisting of a node in <code>treeName</code> and all of its descendants.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">7</span></p>\n\n<p><strong>Explanation:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/26/tree1.png\" style=\"width: 360px; height: 158px;\" />\n<p>All of the nodes of the given tree are good.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges = [[0,1],[1,2],[2,3],[3,4],[0,5],[1,6],[2,7],[3,8]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/03/screenshot-2024-06-03-193552.png\" style=\"width: 360px; height: 303px;\" />\n<p>There are 6 good nodes in the given tree. They are colored in the image above.</p>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges = [[0,1],[1,2],[1,3],[1,4],[0,5],[5,6],[6,7],[7,8],[0,9],[9,10],[9,12],[10,11]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">12</span></p>\n\n<p><strong>Explanation:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/08/rob.jpg\" style=\"width: 450px; height: 277px;\" />\n<p>All nodes except node 9 are good.</p>\n</div>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li>The input is generated such that <code>edges</code> represents a valid tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 147,
            "dislikes": 38,
            "similarQuestions": "[{\"title\": \"Maximum Depth of N-ary Tree\", \"titleSlug\": \"maximum-depth-of-n-ary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.9K\", \"totalSubmission\": \"46.5K\", \"totalAcceptedRaw\": 25921, \"totalSubmissionRaw\": 46529, \"acRate\": \"55.7%\"}",
            "hints": [
                "Use DFS."
            ],
            "rephrased": {
                "body": "Given an undirected tree with `n` nodes labeled from 0 to `n - 1`, rooted at node 0. You are given a 2D integer array `edges` of length `n - 1`, where `edges[i] = [a<sub>i</sub>, b<sub>i</sub>]` indicates an edge between nodes `a<sub>i</sub>` and `b<sub>i</sub>`. A node is considered 'good' if all subtrees rooted at its children have the same size.  Return the number of 'good' nodes in the tree.",
                "constraints": [
                    "2 <= n <= 10<sup>5</sup>",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "0 <= a<sub>i</sub>, b<sub>i</sub> < n",
                    "The input is generated such that edges represents a valid tree."
                ],
                "testcases": [
                    {
                        "input": "[[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]",
                        "output": "7",
                        "explanation": "In this example, every node in the tree is a good node. Each node either has no children (leaf nodes, all having subtree size 1), or all its children have subtrees of the same size."
                    },
                    {
                        "input": "[[0,1],[1,2],[2,3],[3,4],[0,5],[1,6],[2,7],[3,8]]",
                        "output": "6",
                        "explanation": "There are 6 good nodes in the given tree."
                    },
                    {
                        "input": "[[0,1],[1,2],[1,3],[1,4],[0,5],[5,6],[6,7],[7,8],[0,9],[9,10],[9,12],[10,11]]",
                        "output": "12",
                        "explanation": "All nodes except node 9 are good. Node 9 has children whose subtrees have different sizes."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-depth-of-n-ary-tree",
                "title": "Maximum Depth of N-ary Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use DFS."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countGoodNodes(vector<vector<int>>& edges) {\n    const int n = edges.size() + 1;\n    int ans = 0;\n    vector<vector<int>> graph(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].push_back(v);\n      graph[v].push_back(u);\n    }\n\n    dfs(graph, 0, /*prev=*/-1, ans);\n    return ans;\n  }\n\n private:\n  int ans = 0;\n\n  // Returns the size of the subtree rooted at u.\n  int dfs(const vector<vector<int>>& graph, int u, int prev, int& ans) {\n    int size = 1;\n    vector<int> childrenSizes;\n\n    for (const int v : graph[u]) {\n      if (v == prev)\n        continue;\n      const int childSize = dfs(graph, v, u, ans);\n      size += childSize;\n      childrenSizes.push_back(childSize);\n    }\n\n    if (childrenSizes.empty() || allSameSizes(childrenSizes))\n      ++ans;\n\n    return size;\n  }\n\n private:\n  bool allSameSizes(const vector<int>& childrenSizes) {\n    for (int i = 1; i < childrenSizes.size(); ++i)\n      if (childrenSizes[i] != childrenSizes[0])\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countGoodNodes(int[][] edges) {\n    final int n = edges.length + 1;\n    List<Integer>[] graph = new ArrayList<>(n);\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph[u].add(v);\n      graph[v].add(u);\n    }\n\n    dfs(graph, 0, -1);\n    return ans;\n  }\n\n  private int ans = 0;\n\n  // Returns the size of the subtree rooted at u.\n  private int dfs(List<Integer>[] graph, int u, int prev) {\n    int size = 1;\n    List<Integer> childrenSizes = new ArrayList<>();\n\n    for (final int v : graph[u]) {\n      if (v == prev)\n        continue;\n      final int childSize = dfs(graph, v, u);\n      size += childSize;\n      childrenSizes.add(childSize);\n    }\n\n    if (childrenSizes.isEmpty() || allSameSizes(childrenSizes))\n      ++ans;\n\n    return size;\n  }\n\n  private boolean allSameSizes(List<Integer> childrenSizes) {\n    for (int i = 1; i < childrenSizes.size(); ++i)\n      if (!childrenSizes.get(i).equals(childrenSizes.get(0)))\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countGoodNodes(self, edges: list[list[int]]) -> int:\n    n = len(edges) + 1\n    graph = [[] for _ in range(n)]\n\n    for u, v in edges:\n      graph[u].append(v)\n      graph[v].append(u)\n\n    ans = 0\n\n    def dfs(u: int, prev: int) -> int:\n      \"\"\"Returns the size of the subtree rooted at u.\"\"\"\n      nonlocal ans\n      size = 1\n      childrenSizes = []\n      for v in graph[u]:\n        if v == prev:\n          continue\n        child_size = dfs(v, u)\n        size += child_size\n        childrenSizes.append(child_size)\n\n      if not childrenSizes or all(s == childrenSizes[0]\n                                  for s in childrenSizes):\n        ans += 1\n\n      return size\n\n    dfs(0, -1)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}