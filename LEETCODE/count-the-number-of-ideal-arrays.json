{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2338",
            "title": "Count the Number of Ideal Arrays",
            "titleSlug": "count-the-number-of-ideal-arrays",
            "content": "<p>You are given two integers <code>n</code> and <code>maxValue</code>, which are used to describe an <strong>ideal</strong> array.</p>\n\n<p>A <strong>0-indexed</strong> integer array <code>arr</code> of length <code>n</code> is considered <strong>ideal</strong> if the following conditions hold:</p>\n\n<ul>\n\t<li>Every <code>arr[i]</code> is a value from <code>1</code> to <code>maxValue</code>, for <code>0 &lt;= i &lt; n</code>.</li>\n\t<li>Every <code>arr[i]</code> is divisible by <code>arr[i - 1]</code>, for <code>0 &lt; i &lt; n</code>.</li>\n</ul>\n\n<p>Return <em>the number of <strong>distinct</strong> ideal arrays of length </em><code>n</code>. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, maxValue = 5\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The following are the possible ideal arrays:\n- Arrays starting with the value 1 (5 arrays): [1,1], [1,2], [1,3], [1,4], [1,5]\n- Arrays starting with the value 2 (2 arrays): [2,2], [2,4]\n- Arrays starting with the value 3 (1 array): [3,3]\n- Arrays starting with the value 4 (1 array): [4,4]\n- Arrays starting with the value 5 (1 array): [5,5]\nThere are a total of 5 + 2 + 1 + 1 + 1 = 10 distinct ideal arrays.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, maxValue = 3\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The following are the possible ideal arrays:\n- Arrays starting with the value 1 (9 arrays): \n   - With no other distinct values (1 array): [1,1,1,1,1] \n   - With 2<sup>nd</sup> distinct value 2 (4 arrays): [1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2]\n   - With 2<sup>nd</sup> distinct value 3 (4 arrays): [1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3]\n- Arrays starting with the value 2 (1 array): [2,2,2,2,2]\n- Arrays starting with the value 3 (1 array): [3,3,3,3,3]\nThere are a total of 9 + 1 + 1 = 11 distinct ideal arrays.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= maxValue &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 464,
            "dislikes": 26,
            "similarQuestions": "[{\"title\": \"Count Ways to Make Array With Product\", \"titleSlug\": \"count-ways-to-make-array-with-product\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count the Number of Beautiful Subarrays\", \"titleSlug\": \"count-the-number-of-beautiful-subarrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.7K\", \"totalSubmission\": \"21.5K\", \"totalAcceptedRaw\": 5695, \"totalSubmissionRaw\": 21511, \"acRate\": \"26.5%\"}",
            "hints": [
                "Notice that an ideal array is non-decreasing.",
                "Consider an alternative problem: where an ideal array must also be strictly increasing. Can you use DP to solve it?",
                "Will combinatorics help to get an answer from the alternative problem to the actual problem?"
            ],
            "rephrased": {
                "body": "Given two integers, `n` and `maxValue`, an ideal array of length `n` is a 0-indexed array `arr` that satisfies the following conditions:\n\n1.  Each element `arr[i]` is an integer between 1 and `maxValue` (inclusive).\n2.  Each element `arr[i]` is divisible by the previous element `arr[i-1]` for `0 < i < n`.\n\nDetermine the number of distinct ideal arrays of length `n`.  Since the result can be very large, return the answer modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "2 <= n <= 10<sup>4</sup>",
                    "1 <= maxValue <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "n = 2, maxValue = 5",
                        "output": "10",
                        "explanation": "Possible ideal arrays:\n- Starting with 1: [1,1], [1,2], [1,3], [1,4], [1,5] (5 arrays)\n- Starting with 2: [2,2], [2,4] (2 arrays)\n- Starting with 3: [3,3] (1 array)\n- Starting with 4: [4,4] (1 array)\n- Starting with 5: [5,5] (1 array)\nTotal: 5 + 2 + 1 + 1 + 1 = 10"
                    },
                    {
                        "input": "n = 5, maxValue = 3",
                        "output": "11",
                        "explanation": "Possible ideal arrays:\n- Starting with 1:  [1,1,1,1,1], [1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2], [1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3] (9 arrays)\n- Starting with 2: [2,2,2,2,2] (1 array)\n- Starting with 3: [3,3,3,3,3] (1 array)\nTotal: 9 + 1 + 1 = 11"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-ways-to-make-array-with-product",
                "title": "Count Ways to Make Array With Product",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-the-number-of-beautiful-subarrays",
                "title": "Count the Number of Beautiful Subarrays",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Notice that an ideal array is non-decreasing.",
            "Consider an alternative problem: where an ideal array must also be strictly increasing. Can you use DP to solve it?",
            "Will combinatorics help to get an answer from the alternative problem to the actual problem?"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int idealArrays(int n, int maxValue) {\n    constexpr int kMod = 1'000'000'007;\n    // Since 2^14 > 10^4, the longest strictly increasing array is [1, 2, 4,\n    // ..., 2^13]\n    const int maxLength = min(14, n);\n    const vector<vector<int>> factors = getFactors(maxValue);\n    // dp[i][j] := # of strictly increasing ideal arrays of length i ending w/ j\n    // dp[i][j] := sum(dp[i - 1][k]) where j % k == 0\n    // dp[i][0] := sum(dp[i][j]) where 1 <= j <= maxValue\n    vector<vector<unsigned long long>> dp(\n        maxLength + 1, vector<unsigned long long>(maxValue + 1));\n    unsigned long long ans = 0;\n\n    for (int j = 1; j <= maxValue; ++j)\n      dp[1][j] = 1;\n\n    for (int i = 2; i <= maxLength; ++i)\n      for (int j = 1; j <= maxValue; ++j)\n        for (const int k : factors[j]) {\n          dp[i][j] += dp[i - 1][k];\n          dp[i][j] %= kMod;\n        }\n\n    for (int i = 1; i <= maxLength; ++i)\n      for (int j = 1; j <= maxValue; ++j) {\n        dp[i][0] += dp[i][j];\n        dp[i][0] %= kMod;\n      }\n\n    for (int i = 1; i <= maxLength; ++i) {\n      // NCk(n - 1, i - 1) := # of ways to create an ideal array of length n\n      // From a strictly increasing array of length i\n      ans += dp[i][0] * nCk(n - 1, i - 1);\n      ans %= kMod;\n    }\n\n    return ans;\n  }\n\n private:\n  vector<vector<int>> getFactors(int maxValue) {\n    vector<vector<int>> factors(maxValue + 1);\n    for (int i = 1; i <= maxValue; ++i)\n      // Start from i * 2 because of strictly increasing\n      for (int j = i * 2; j <= maxValue; j += i)\n        factors[j].push_back(i);\n    return factors;\n  }\n\n  unsigned long long nCk(int n, int k, int kMod = 1e9 + 7) {\n    unsigned long long ans = 1;\n    for (int i = 1; i <= k; ++i)\n      ans *= (n - i + 1);\n    for (int i = 1; i <= k; ++i)\n      ans /= i;\n    return ans % kMod;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}