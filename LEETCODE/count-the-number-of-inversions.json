{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3193",
            "title": "Count the Number of Inversions",
            "titleSlug": "count-the-number-of-inversions",
            "content": "<p>You are given an integer <code>n</code> and a 2D array <code>requirements</code>, where <code>requirements[i] = [end<sub>i</sub>, cnt<sub>i</sub>]</code> represents the end index and the <strong>inversion</strong> count of each requirement.</p>\n\n<p>A pair of indices <code>(i, j)</code> from an integer array <code>nums</code> is called an <strong>inversion</strong> if:</p>\n\n<ul>\n\t<li><code>i &lt; j</code> and <code>nums[i] &gt; nums[j]</code></li>\n</ul>\n\n<p>Return the number of <span data-keyword=\"permutation\">permutations</span> <code>perm</code> of <code>[0, 1, 2, ..., n - 1]</code> such that for <strong>all</strong> <code>requirements[i]</code>, <code>perm[0..end<sub>i</sub>]</code> has exactly <code>cnt<sub>i</sub></code> inversions.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, requirements = [[2,2],[0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The two permutations are:</p>\n\n<ul>\n\t<li><code>[2, 0, 1]</code>\n\n\t<ul>\n\t\t<li>Prefix <code>[2, 0, 1]</code> has inversions <code>(0, 1)</code> and <code>(0, 2)</code>.</li>\n\t\t<li>Prefix <code>[2]</code> has 0 inversions.</li>\n\t</ul>\n\t</li>\n\t<li><code>[1, 2, 0]</code>\n\t<ul>\n\t\t<li>Prefix <code>[1, 2, 0]</code> has inversions <code>(0, 2)</code> and <code>(1, 2)</code>.</li>\n\t\t<li>Prefix <code>[1]</code> has 0 inversions.</li>\n\t</ul>\n\t</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, requirements = [[2,2],[1,1],[0,0]]</span></p>\n\n<p><strong>Output:</strong> 1</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only satisfying permutation is <code>[2, 0, 1]</code>:</p>\n\n<ul>\n\t<li>Prefix <code>[2, 0, 1]</code> has inversions <code>(0, 1)</code> and <code>(0, 2)</code>.</li>\n\t<li>Prefix <code>[2, 0]</code> has an inversion <code>(0, 1)</code>.</li>\n\t<li>Prefix <code>[2]</code> has 0 inversions.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2, requirements = [[0,0],[1,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only satisfying permutation is <code>[0, 1]</code>:</p>\n\n<ul>\n\t<li>Prefix <code>[0]</code> has 0 inversions.</li>\n\t<li>Prefix <code>[0, 1]</code> has an inversion <code>(0, 1)</code>.</li>\n</ul>\n</div>\n\n<div id=\"gtx-trans\" style=\"position: absolute; left: 198px; top: 756px;\">\n<div class=\"gtx-trans-icon\">&nbsp;</div>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 300</code></li>\n\t<li><code>1 &lt;= requirements.length &lt;= n</code></li>\n\t<li><code>requirements[i] = [end<sub>i</sub>, cnt<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= end<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>0 &lt;= cnt<sub>i</sub> &lt;= 400</code></li>\n\t<li>The input is generated such that there is at least one <code>i</code> such that <code>end<sub>i</sub> == n - 1</code>.</li>\n\t<li>The input is generated such that all <code>end<sub>i</sub></code> are unique.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 40,
            "dislikes": 14,
            "similarQuestions": "[{\"title\": \"K Inverse Pairs Array\", \"titleSlug\": \"k-inverse-pairs-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [],
            "stats": "{\"totalAccepted\": \"3.7K\", \"totalSubmission\": \"13.1K\", \"totalAcceptedRaw\": 3707, \"totalSubmissionRaw\": 13106, \"acRate\": \"28.3%\"}",
            "hints": [
                "Let <code>dp[i][j]</code> denote the number of arrays of length <code>i</code> with <code>j</code> inversions.",
                "<code>dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + \u2026 + dp[i - 1][0]</code>.",
                "<code>dp[i][j] = 0</code> if for some <code>x</code>, <code>requirements[x][0] == i</code> and <code>requirements[x][1] != j</code>."
            ],
            "rephrased": {
                "body": "Given an integer `n` and a 2D array `requirements`, where `requirements[i] = [end_i, cnt_i]` represents the end index and the inversion count of each requirement.\n\nA pair of indices `(i, j)` from an integer array `nums` is called an inversion if: `i < j` and `nums[i] > nums[j]`. Return the number of permutations `perm` of `[0, 1, 2, ..., n - 1]` such that for all `requirements[i]`, `perm[0..end_i]` has exactly `cnt_i` inversions.  Return the answer modulo `10^9 + 7`.",
                "constraints": [
                    "2 <= n <= 300",
                    "1 <= requirements.length <= n",
                    "requirements[i] = [end_i, cnt_i]",
                    "0 <= end_i <= n - 1",
                    "0 <= cnt_i <= 400",
                    "The input is generated such that there is at least one i such that end_i == n - 1.",
                    "The input is generated such that all end_i are unique."
                ],
                "testcases": [
                    {
                        "input": "n = 3, requirements = [[2,2],[0,0]]",
                        "output": "2",
                        "explanation": "Two valid permutations are [2, 0, 1] and [1, 2, 0]. For [2, 0, 1], the prefix [2, 0, 1] has 2 inversions ((0, 1), (0, 2)), and the prefix [2] has 0 inversions. For [1, 2, 0], the prefix [1, 2, 0] has 2 inversions ((0, 2), (1, 2)), and the prefix [1] has 0 inversions."
                    },
                    {
                        "input": "n = 3, requirements = [[2,2],[1,1],[0,0]]",
                        "output": "1",
                        "explanation": "The only valid permutation is [2, 0, 1]. The prefix [2, 0, 1] has 2 inversions, the prefix [2, 0] has 1 inversion, and the prefix [2] has 0 inversions."
                    },
                    {
                        "input": "n = 2, requirements = [[0,0],[1,0]]",
                        "output": "1",
                        "explanation": "The only valid permutation is [0, 1]. The prefix [0] has 0 inversions, and the prefix [0, 1] has 0 inversions."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "k-inverse-pairs-array",
                "title": "K Inverse Pairs Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let <code>dp[i][j]</code> denote the number of arrays of length <code>i</code> with <code>j</code> inversions.",
            "<code>dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + \u2026 + dp[i - 1][0]</code>.",
            "<code>dp[i][j] = 0</code> if for some <code>x</code>, <code>requirements[x][0] == i</code> and <code>requirements[x][1] != j</code>."
        ],
        "relatedTopics": []
    }
}