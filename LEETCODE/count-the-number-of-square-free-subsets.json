{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2572",
            "title": "Count the Number of Square-Free Subsets",
            "titleSlug": "count-the-number-of-square-free-subsets",
            "content": "<p>You are given a positive integer <strong>0-indexed</strong>&nbsp;array <code>nums</code>.</p>\n\n<p>A subset of the array <code>nums</code> is <strong>square-free</strong> if the product of its elements is a <strong>square-free integer</strong>.</p>\n\n<p>A <strong>square-free integer</strong> is an integer that is divisible by no square number other than <code>1</code>.</p>\n\n<p>Return <em>the number of square-free non-empty subsets of the array</em> <strong>nums</strong>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A <strong>non-empty</strong>&nbsp;<strong>subset</strong> of <code>nums</code> is an array that can be obtained by deleting some (possibly none but not all) elements from <code>nums</code>. Two subsets are different if and only if the chosen indices to delete are different.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,4,5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 square-free subsets in this example:\n- The subset consisting of the 0<sup>th</sup> element [3]. The product of its elements is 3, which is a square-free integer.\n- The subset consisting of the 3<sup>rd</sup> element [5]. The product of its elements is 5, which is a square-free integer.\n- The subset consisting of 0<sup>th</sup> and 3<sup>rd</sup> elements [3,5]. The product of its elements is 15, which is a square-free integer.\nIt can be proven that there are no more than 3 square-free subsets in the given array.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is 1 square-free subset in this example:\n- The subset consisting of the 0<sup>th</sup> element [1]. The product of its elements is 1, which is a square-free integer.\nIt can be proven that there is no more than 1 square-free subset in the given array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 30</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 407,
            "dislikes": 108,
            "similarQuestions": "[{\"title\": \"Distinct Prime Factors of Product of Array\", \"titleSlug\": \"distinct-prime-factors-of-product-of-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.8K\", \"totalSubmission\": \"35.2K\", \"totalAcceptedRaw\": 7798, \"totalSubmissionRaw\": 35237, \"acRate\": \"22.1%\"}",
            "hints": [
                "There are 10 primes before number 30.",
                "Label primes from {2, 3, \u2026 29} with {0,1, \u2026 9} and let DP(i, mask) denote the number of subsets before index: i with the subset of taken primes: mask.",
                "If the mask and prime factorization of nums[i] have a common prime, then it is impossible to add to the current subset, otherwise, it is possible."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array of positive integers, `nums`, find the number of non-empty square-free subsets. A subset is considered square-free if the product of its elements is a square-free integer. A square-free integer is divisible by no perfect square other than 1. Return the count of square-free subsets modulo 10^9 + 7.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "1 <= nums[i] <= 30"
                ],
                "testcases": [
                    {
                        "input": "[3,4,4,5]",
                        "output": "3",
                        "explanation": "The square-free subsets are:\n- [3]: Product is 3 (square-free).\n- [5]: Product is 5 (square-free).\n- [3,5]: Product is 15 (square-free)."
                    },
                    {
                        "input": "[1]",
                        "output": "1",
                        "explanation": "The only square-free subset is:\n- [1]: Product is 1 (square-free)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "distinct-prime-factors-of-product-of-array",
                "title": "Distinct Prime Factors of Product of Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "There are 10 primes before number 30.",
            "Label primes from {2, 3, \u2026 29} with {0,1, \u2026 9} and let DP(i, mask) denote the number of subsets before index: i with the subset of taken primes: mask.",
            "If the mask and prime factorization of nums[i] have a common prime, then it is impossible to add to the current subset, otherwise, it is possible."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int squareFreeSubsets(vector<int>& nums) {\n    dp.resize(nums.size(), vector<int>(1 << (kPrimesCount + 1), -1));\n    vector<int> masks;\n\n    for (const int num : nums)\n      masks.push_back(getMask(num));\n\n    // -1 means that we take no number.\n    // `usedMask` is initialized to 1 so that -1 & 1 = 1 instead of 0.\n    return squareFreeSubsets(masks, 0, /*usedMask=*/1) - 1;\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  static constexpr int kPrimesCount = 10;\n  const vector<int> primes{2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n  vector<vector<int>> dp;\n\n  int squareFreeSubsets(const vector<int>& masks, int i, int usedMask) {\n    if (i == masks.size())\n      return 1;\n    if (dp[i][usedMask] != -1)\n      return dp[i][usedMask];\n    const int pick = masks[i] & usedMask == 0\n                         ? squareFreeSubsets(masks, i + 1, usedMask | masks[i])\n                         : 0;\n    const int skip = squareFreeSubsets(masks, i + 1, usedMask);\n    return dp[i][usedMask] = (pick + skip) % kMod;\n  }\n\n  // E.g. num = 10 = 2 * 5, so mask = (101)2 -> (1010)2 (append a 0)\n  //      num = 15 = 3 * 5, so mask = (110)2 -> (1100)2 (append a 0)\n  //      num = 25 = 5 * 5, so mask =  (-1)2 -> (1..1)2 (invalid)\n  int getMask(int num) {\n    int mask = 0;\n    for (int i = 0; i < primes.size(); ++i) {\n      int rootCount = 0;\n      while (num % primes[i] == 0) {\n        num /= primes[i];\n        ++rootCount;\n      }\n      if (rootCount >= 2)\n        return -1;\n      if (rootCount == 1)\n        mask |= 1 << i;\n    }\n    return mask << 1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int squareFreeSubsets(int[] nums) {\n    dp = new Integer[nums.length][1 << (kPrimesCount + 1)];\n    int[] masks = new int[nums.length];\n\n    for (int i = 0; i < nums.length; ++i)\n      masks[i] = getMask(nums[i]);\n\n    // -1 means that we take no number.\n    // `usedMask` is initialized to 1 so that -1 & 1 = 1 instead of 0.\n    return squareFreeSubsets(masks, 0, /*usedMask=*/1) - 1;\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private static final int kPrimesCount = 10;\n  private final int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n  private Integer[][] dp;\n\n  private int squareFreeSubsets(int[] masks, int i, int usedMask) {\n    if (i == masks.length)\n      return 1;\n    if (dp[i][usedMask] != null)\n      return dp[i][usedMask];\n    final int pick =\n        (masks[i] & usedMask) == 0 ? squareFreeSubsets(masks, i + 1, usedMask | masks[i]) : 0;\n    final int skip = squareFreeSubsets(masks, i + 1, usedMask);\n    return dp[i][usedMask] = (pick + skip) % kMod;\n  }\n\n  // E.g. num = 10 = 2 * 5, so mask = (101)2 -> (1010)2 (append a 0)\n  //      num = 15 = 3 * 5, so mask = (110)2 -> (1100)2 (append a 0)\n  //      num = 25 = 5 * 5, so mask =  (-1)2 -> (1..1)2 (invalid)\n  private int getMask(int num) {\n    int mask = 0;\n    for (int i = 0; i < primes.length; ++i) {\n      int rootCount = 0;\n      while (num % primes[i] == 0) {\n        num /= primes[i];\n        ++rootCount;\n      }\n      if (rootCount >= 2)\n        return -1;\n      if (rootCount == 1)\n        mask |= 1 << i;\n    }\n    return mask << 1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def squareFreeSubsets(self, nums: List[int]) -> int:\n    kMod = 1_000_000_007\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n    # E.g. num = 10 = 2 * 5, so mask = (101)2 . (1010)2 (append a 0)\n    #      num = 15 = 3 * 5, so mask = (110)2 . (1100)2 (append a 0)\n    #      num = 25 = 5 * 5, so mask =  (-1)2 . (1..1)2 (invalid)\n    def getMask(num: int) -> int:\n      mask = 0\n      for i, prime in enumerate(primes):\n        rootCount = 0\n        while num % prime == 0:\n          num //= prime\n          rootCount += 1\n        if rootCount >= 2:\n          return -1\n        if rootCount == 1:\n          mask |= 1 << i\n      return mask << 1\n\n    masks = [getMask(num) for num in nums]\n\n    @functools.lru_cache(None)\n    def dp(i: int, usedMask: int) -> int:\n      if i == len(masks):\n        return 1\n      pick = dp(i + 1, usedMask | masks[i]) \\\n          if (masks[i] & usedMask) == 0 else 0\n      skip = dp(i + 1, usedMask)\n      return (pick + skip) % kMod\n\n    # -1 means that we take no number.\n    # `usedMask` is initialized to 1 so that -1 & 1 = 1 instead of 0.\n    return dp(0, 1) - 1\n",
                "lang_text": "py"
            }
        }
    }
}