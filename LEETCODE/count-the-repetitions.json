{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "466",
            "title": "Count The Repetitions",
            "titleSlug": "count-the-repetitions",
            "content": "<p>We define <code>str = [s, n]</code> as the string <code>str</code> which consists of the string <code>s</code> concatenated <code>n</code> times.</p>\n\n<ul>\n\t<li>For example, <code>str == [&quot;abc&quot;, 3] ==&quot;abcabcabc&quot;</code>.</li>\n</ul>\n\n<p>We define that string <code>s1</code> can be obtained from string <code>s2</code> if we can remove some characters from <code>s2</code> such that it becomes <code>s1</code>.</p>\n\n<ul>\n\t<li>For example, <code>s1 = &quot;abc&quot;</code> can be obtained from <code>s2 = &quot;ab<strong><u>dbe</u></strong>c&quot;</code> based on our definition by removing the bolded underlined characters.</li>\n</ul>\n\n<p>You are given two strings <code>s1</code> and <code>s2</code> and two integers <code>n1</code> and <code>n2</code>. You have the two strings <code>str1 = [s1, n1]</code> and <code>str2 = [s2, n2]</code>.</p>\n\n<p>Return <em>the maximum integer </em><code>m</code><em> such that </em><code>str = [str2, m]</code><em> can be obtained from </em><code>str1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\n<strong>Output:</strong> 2\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 100</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n\t<li><code>1 &lt;= n1, n2 &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 391,
            "dislikes": 344,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"17.3K\", \"totalSubmission\": \"58.2K\", \"totalAcceptedRaw\": 17334, \"totalSubmissionRaw\": 58188, \"acRate\": \"29.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two strings `s1` and `s2`, and two integers `n1` and `n2`, we define `str1 = [s1, n1]` as the string `s1` repeated `n1` times and `str2 = [s2, n2]` as the string `s2` repeated `n2` times. We say string `a` can be obtained from string `b` if we can remove zero or more characters from `b` to form `a`. The goal is to find the maximum integer `m` such that `[str2, m]` can be obtained from `str1`.",
                "constraints": [
                    "1 <= s1.length, s2.length <= 100",
                    "s1 and s2 consist of lowercase English letters.",
                    "1 <= n1, n2 <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2",
                        "output": "2",
                        "explanation": null
                    },
                    {
                        "input": "s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct Record {\n  int count;\n  int nextIndex;\n  Record(int count, int nextIndex) : count(count), nextIndex(nextIndex) {}\n};\n\nclass Solution {\n public:\n  int getMaxRepetitions(string s1, int n1, string s2, int n2) {\n    vector<Record> records;  // [count(s1 matches s2[i:]), next index of s2[i:]]\n\n    for (int i = 0; i < s2.length(); ++i) {\n      int count = 0;\n      int nextIndex = i;\n      for (int j = 0; j < s1.length(); ++j)\n        if (s2[nextIndex] == s1[j])\n          if (++nextIndex == s2.length()) {  // Have a match\n            ++count;\n            nextIndex = 0;\n          }\n      records.emplace_back(count, nextIndex);\n    }\n\n    int matches = 0;  // S1 matches s2\n    int index = 0;\n\n    while (n1--) {\n      matches += records[index].count;\n      index = records[index].nextIndex;\n    }\n\n    return matches / n2;  // S1 matches S2\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Record {\n  public int count;\n  public int nextIndex;\n  public Record(int count, int nextIndex) {\n    this.count = count;\n    this.nextIndex = nextIndex;\n  }\n};\n\nclass Solution {\n  public int getMaxRepetitions(String s1, int n1, String s2, int n2) {\n    List<Record> records = new ArrayList<>(); // [count(s1 matches s2[i:]), next index of s2[i:]]\n\n    for (int i = 0; i < s2.length(); ++i) {\n      int count = 0;\n      int nextIndex = i;\n      for (int j = 0; j < s1.length(); ++j)\n        if (s2.charAt(nextIndex) == s1.charAt(j))\n          if (++nextIndex == s2.length()) { // Have a match\n            ++count;\n            nextIndex = 0;\n          }\n      records.add(new Record(count, nextIndex));\n    }\n\n    int matches = 0; // S1 matches s2\n    int index = 0;\n\n    while (n1-- > 0) {\n      matches += records.get(index).count;\n      index = records.get(index).nextIndex;\n    }\n\n    return matches / n2; // S1 matches S2\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}