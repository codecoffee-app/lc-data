{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2257",
            "title": "Count Unguarded Cells in the Grid",
            "titleSlug": "count-unguarded-cells-in-the-grid",
            "content": "<p>You are given two integers <code>m</code> and <code>n</code> representing a <strong>0-indexed</strong> <code>m x n</code> grid. You are also given two 2D integer arrays <code>guards</code> and <code>walls</code> where <code>guards[i] = [row<sub>i</sub>, col<sub>i</sub>]</code> and <code>walls[j] = [row<sub>j</sub>, col<sub>j</sub>]</code> represent the positions of the <code>i<sup>th</sup></code> guard and <code>j<sup>th</sup></code> wall respectively.</p>\n\n<p>A guard can see <b>every</b> cell in the four cardinal directions (north, east, south, or west) starting from their position unless <strong>obstructed</strong> by a wall or another guard. A cell is <strong>guarded</strong> if there is <strong>at least</strong> one guard that can see it.</p>\n\n<p>Return<em> the number of unoccupied cells that are <strong>not</strong> <strong>guarded</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/10/example1drawio2.png\" style=\"width: 300px; height: 204px;\" />\n<pre>\n<strong>Input:</strong> m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The guarded and unguarded cells are shown in red and green respectively in the above diagram.\nThere are a total of 7 unguarded cells, so we return 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/10/example2drawio.png\" style=\"width: 200px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The unguarded cells are shown in green in the above diagram.\nThere are a total of 4 unguarded cells, so we return 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= guards.length, walls.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>2 &lt;= guards.length + walls.length &lt;= m * n</code></li>\n\t<li><code>guards[i].length == walls[j].length == 2</code></li>\n\t<li><code>0 &lt;= row<sub>i</sub>, row<sub>j</sub> &lt; m</code></li>\n\t<li><code>0 &lt;= col<sub>i</sub>, col<sub>j</sub> &lt; n</code></li>\n\t<li>All the positions in <code>guards</code> and <code>walls</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 401,
            "dislikes": 34,
            "similarQuestions": "[{\"title\": \"Bomb Enemy\", \"titleSlug\": \"bomb-enemy\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Available Captures for Rook\", \"titleSlug\": \"available-captures-for-rook\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.3K\", \"totalSubmission\": \"29.3K\", \"totalAcceptedRaw\": 15300, \"totalSubmissionRaw\": 29333, \"acRate\": \"52.2%\"}",
            "hints": [
                "Create a 2D array to represent the grid. Can you mark the tiles that can be seen by a guard?",
                "Iterate over the guards, and for each of the 4 directions, advance the current tile and mark the tile. When should you stop advancing?"
            ],
            "rephrased": {
                "body": "Given a 0-indexed m x n grid represented by integers m and n, and two 2D integer arrays, 'guards' and 'walls', determine the number of unoccupied cells that are not guarded. Guards have positions denoted by guards[i] = [row_i, col_i], and walls have positions denoted by walls[j] = [row_j, col_j]. A guard can see every cell in the four cardinal directions (north, east, south, west) starting from their position until obstructed by a wall or another guard. A cell is guarded if at least one guard can see it. Return the count of unoccupied and unguarded cells.",
                "constraints": [
                    "1 <= m, n <= 10^5",
                    "2 <= m * n <= 10^5",
                    "1 <= guards.length, walls.length <= 5 * 10^4",
                    "2 <= guards.length + walls.length <= m * n",
                    "guards[i].length == walls[j].length == 2",
                    "0 <= row_i, row_j < m",
                    "0 <= col_i, col_j < n",
                    "All the positions in guards and walls are unique."
                ],
                "testcases": [
                    {
                        "input": "m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]]",
                        "output": "7",
                        "explanation": "Guarded cells are visually represented in red, while unguarded cells are in green. The problem asks for the number of green cells, which is 7 in this case."
                    },
                    {
                        "input": "m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]]",
                        "output": "4",
                        "explanation": "The unguarded cells are visually represented in green. The problem asks for the number of green cells, which is 4 in this case."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "bomb-enemy",
                "title": "Bomb Enemy",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "available-captures-for-rook",
                "title": "Available Captures for Rook",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Create a 2D array to represent the grid. Can you mark the tiles that can be seen by a guard?",
            "Iterate over the guards, and for each of the 4 directions, advance the current tile and mark the tile. When should you stop advancing?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countUnguarded(int m, int n, vector<vector<int>>& guards,\n                     vector<vector<int>>& walls) {\n    int ans = 0;\n    vector<vector<char>> grid(m, vector<char>(n));\n    vector<vector<char>> left(m, vector<char>(n));\n    vector<vector<char>> right(m, vector<char>(n));\n    vector<vector<char>> up(m, vector<char>(n));\n    vector<vector<char>> down(m, vector<char>(n));\n\n    for (const vector<int>& guard : guards)\n      grid[guard[0]][guard[1]] = 'G';\n\n    for (const vector<int>& wall : walls)\n      grid[wall[0]][wall[1]] = 'W';\n\n    for (int i = 0; i < m; ++i) {\n      char lastCell = 0;\n      for (int j = 0; j < n; ++j)\n        recordOrFill(grid[i][j], lastCell, left[i][j]);\n      lastCell = 0;\n      for (int j = n - 1; j >= 0; --j)\n        recordOrFill(grid[i][j], lastCell, right[i][j]);\n    }\n\n    for (int j = 0; j < n; ++j) {\n      char lastCell = 0;\n      for (int i = 0; i < m; ++i)\n        recordOrFill(grid[i][j], lastCell, up[i][j]);\n      lastCell = 0;\n      for (int i = m - 1; i >= 0; --i)\n        recordOrFill(grid[i][j], lastCell, down[i][j]);\n    }\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (grid[i][j] == 0 && left[i][j] != 'G' && right[i][j] != 'G' &&\n            up[i][j] != 'G' && down[i][j] != 'G')\n          ++ans;\n\n    return ans;\n  }\n\n private:\n  void recordOrFill(char currCell, char& lastCell, char& infoCell) {\n    if (currCell == 'G' || currCell == 'W')\n      lastCell = currCell;\n    else\n      infoCell = lastCell;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {\n    int ans = 0;\n    char[][] grid = new char[m][n];\n    char[][] left = new char[m][n];\n    char[][] right = new char[m][n];\n    char[][] up = new char[m][n];\n    char[][] down = new char[m][n];\n\n    for (int[] guard : guards)\n      grid[guard[0]][guard[1]] = 'G';\n\n    for (int[] wall : walls)\n      grid[wall[0]][wall[1]] = 'W';\n\n    for (int i = 0; i < m; ++i) {\n      char lastCell = 0;\n      for (int j = 0; j < n; ++j)\n        if (grid[i][j] == 'G' || grid[i][j] == 'W')\n          lastCell = grid[i][j];\n        else\n          left[i][j] = lastCell;\n      lastCell = 0;\n      for (int j = n - 1; j >= 0; --j)\n        if (grid[i][j] == 'G' || grid[i][j] == 'W')\n          lastCell = grid[i][j];\n        else\n          right[i][j] = lastCell;\n    }\n\n    for (int j = 0; j < n; ++j) {\n      char lastCell = 0;\n      for (int i = 0; i < m; ++i)\n        if (grid[i][j] == 'G' || grid[i][j] == 'W')\n          lastCell = grid[i][j];\n        else\n          up[i][j] = lastCell;\n      lastCell = 0;\n      for (int i = m - 1; i >= 0; --i)\n        if (grid[i][j] == 'G' || grid[i][j] == 'W')\n          lastCell = grid[i][j];\n        else\n          down[i][j] = lastCell;\n    }\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (grid[i][j] == 0 && left[i][j] != 'G' && right[i][j] != 'G' && up[i][j] != 'G' &&\n            down[i][j] != 'G')\n          ++ans;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countUnguarded(self, m: int, n: int, guards: List[List[int]], walls: List[List[int]]) -> int:\n    ans = 0\n    grid = [[0] * n for _ in range(m)]\n    left = [[0] * n for _ in range(m)]\n    right = [[0] * n for _ in range(m)]\n    up = [[0] * n for _ in range(m)]\n    down = [[0] * n for _ in range(m)]\n\n    for row, col in guards:\n      grid[row][col] = 'G'\n\n    for row, col in walls:\n      grid[row][col] = 'W'\n\n    for i in range(m):\n      lastCell = 0\n      for j in range(n):\n        if grid[i][j] == 'G' or grid[i][j] == 'W':\n          lastCell = grid[i][j]\n        else:\n          left[i][j] = lastCell\n      lastCell = 0\n      for j in range(n - 1, -1, -1):\n        if grid[i][j] == 'G' or grid[i][j] == 'W':\n          lastCell = grid[i][j]\n        else:\n          right[i][j] = lastCell\n\n    for j in range(n):\n      lastCell = 0\n      for i in range(m):\n        if grid[i][j] == 'G' or grid[i][j] == 'W':\n          lastCell = grid[i][j]\n        else:\n          up[i][j] = lastCell\n      lastCell = 0\n      for i in range(m - 1, -1, -1):\n        if grid[i][j] == 'G' or grid[i][j] == 'W':\n          lastCell = grid[i][j]\n        else:\n          down[i][j] = lastCell\n\n    for i in range(m):\n      for j in range(n):\n        if grid[i][j] == 0 and left[i][j] != 'G' and right[i][j] != 'G' and \\\n                up[i][j] != 'G' and down[i][j] != 'G':\n          ans += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}