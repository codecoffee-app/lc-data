{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2316",
            "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
            "titleSlug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph",
            "content": "<p>You are given an integer <code>n</code>. There is an <strong>undirected</strong> graph with <code>n</code> nodes, numbered from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an <strong>undirected</strong> edge connecting nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p>\n\n<p>Return <em>the <strong>number of pairs</strong> of different nodes that are <strong>unreachable</strong> from each other</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/05/05/tc-3.png\" style=\"width: 267px; height: 169px;\" />\n<pre>\n<strong>Input:</strong> n = 3, edges = [[0,1],[0,2],[1,2]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no pairs of nodes that are unreachable from each other. Therefore, we return 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/05/05/tc-2.png\" style=\"width: 295px; height: 269px;\" />\n<pre>\n<strong>Input:</strong> n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> There are 14 pairs of nodes that are unreachable from each other:\n[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].\nTherefore, we return 14.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>There are no repeated edges.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1927,
            "dislikes": 44,
            "similarQuestions": "[{\"title\": \"Number of Islands\", \"titleSlug\": \"number-of-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"80.4K\", \"totalSubmission\": \"161.3K\", \"totalAcceptedRaw\": 80427, \"totalSubmissionRaw\": 161323, \"acRate\": \"49.9%\"}",
            "hints": [
                "Find the connected components of the graph. To find connected components, you can use Union Find (Disjoint Sets), BFS, or DFS.",
                "For a node u, the number of nodes that are unreachable from u is the number of nodes that are not in the same connected component as u.",
                "The number of unreachable nodes from node u will be the same for the number of nodes that are unreachable from node v if nodes u and v belong to the same connected component."
            ],
            "rephrased": {
                "body": "Given an integer `n`, representing the number of nodes in an undirected graph numbered from 0 to n-1. You are also given a 2D integer array `edges`, where each `edges[i] = [a_i, b_i]` denotes an undirected edge connecting nodes `a_i` and `b_i`.  The task is to find the number of pairs of distinct nodes that are unreachable from each other.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= edges.length <= 2 * 10^5",
                    "edges[i].length == 2",
                    "0 <= a_i, b_i < n",
                    "a_i != b_i",
                    "There are no repeated edges."
                ],
                "testcases": [
                    {
                        "input": "n = 3, edges = [[0,1],[0,2],[1,2]]",
                        "output": "0",
                        "explanation": "All nodes are connected, so there are no unreachable pairs. Therefore, the result is 0."
                    },
                    {
                        "input": "n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]",
                        "output": "14",
                        "explanation": "The connected components are {0, 2, 4, 5} and {1, 6} and {3}. The unreachable pairs are: [0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]. The total number of such pairs is 14."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-islands",
                "title": "Number of Islands",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Find the connected components of the graph. To find connected components, you can use Union Find (Disjoint Sets), BFS, or DFS.",
            "For a node u, the number of nodes that are unreachable from u is the number of nodes that are not in the same connected component as u.",
            "The number of unreachable nodes from node u will be the same for the number of nodes that are unreachable from node v if nodes u and v belong to the same connected component."
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long countPairs(int n, vector<vector<int>>& edges) {\n    long long ans = 0;\n    vector<vector<int>> graph(n);\n    vector<bool> seen(n);\n    int unreached = n;\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].push_back(v);\n      graph[v].push_back(u);\n    }\n\n    for (int i = 0; i < n; ++i) {\n      const int reached = dfs(graph, i, seen);\n      unreached -= reached;\n      ans += static_cast<long long>(unreached) * reached;\n    }\n    return ans;\n  }\n\n private:\n  int dfs(const vector<vector<int>>& graph, int u, vector<bool>& seen) {\n    if (seen[u])\n      return 0;\n    seen[u] = true;\n    return accumulate(\n        graph[u].begin(), graph[u].end(), 1,\n        [&](int subtotal, int v) { return subtotal + dfs(graph, v, seen); });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long countPairs(int n, int[][] edges) {\n    long ans = 0;\n    List<Integer>[] graph = new List[n];\n    boolean[] seen = new boolean[n];\n    int unreached = n;\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph[u].add(v);\n      graph[v].add(u);\n    }\n\n    for (int i = 0; i < n; ++i) {\n      final int reached = dfs(graph, i, seen);\n      unreached -= reached;\n      ans += (long) unreached * reached;\n    }\n    return ans;\n  }\n\n  private int dfs(List<Integer>[] graph, int u, boolean[] seen) {\n    if (seen[u])\n      return 0;\n\n    seen[u] = true;\n    int ans = 1;\n    for (final int v : graph[u])\n      ans += dfs(graph, v, seen);\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countPairs(self, n: int, edges: List[List[int]]) -> int:\n    ans = 0\n    graph = [0] * n\n    seen = [0] * n\n    unreached = n\n\n    for e in edges:\n      u = e[0]\n      v = e[1]\n      graph[u].append(v)\n      graph[v].append(u)\n\n    for i in range(n):\n      reached = dfs(graph, i, seen)\n      unreached -= reached\n      ans += static_cast < long > (unreached) * reached\n\n    return ans\n\n  def dfs(self, graph: List[List[int]], u: int, seen: List[bool]) -> int:\n    if seen[u]:\n      return 0\n    seen[u] = True\n    return accumulate(\n        begin(graph[u]), end(graph[u]), 1,\n        [ & ](subtotal, v) [return subtotal + dfs(graph, v, seen)])\n",
                "lang_text": "py"
            }
        }
    }
}