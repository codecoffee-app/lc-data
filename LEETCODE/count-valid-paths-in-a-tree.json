{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2867",
            "title": "Count Valid Paths in a Tree",
            "titleSlug": "count-valid-paths-in-a-tree",
            "content": "<p>There is an undirected tree with <code>n</code> nodes labeled from <code>1</code> to <code>n</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the tree.</p>\n\n<p>Return <em>the <strong>number of valid paths</strong> in the tree</em>.</p>\n\n<p>A path <code>(a, b)</code> is <strong>valid</strong> if there exists <strong>exactly one</strong> prime number among the node labels in the path from <code>a</code> to <code>b</code>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>The path <code>(a, b)</code> is a sequence of <strong>distinct</strong> nodes starting with node <code>a</code> and ending with node <code>b</code> such that every two adjacent nodes in the sequence share an edge in the tree.</li>\n\t<li>Path <code>(a, b)</code> and path <code>(b, a)</code> are considered the <strong>same</strong> and counted only <strong>once</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/27/example1.png\" style=\"width: 440px; height: 357px;\" />\n<pre>\n<strong>Input:</strong> n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2. \n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\nIt can be shown that there are only 4 valid paths.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/27/example2.png\" style=\"width: 488px; height: 384px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2.\n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (1, 6) since the path from 1 to 6 contains prime number 3.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\n- (3, 6) since the path from 3 to 6 contains prime number 3.\nIt can be shown that there are only 6 valid paths.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\n\t<li>The input is generated such that <code>edges</code> represent a valid tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 242,
            "dislikes": 5,
            "similarQuestions": "[{\"title\": \"Count Paths That Can Form a Palindrome in a Tree\", \"titleSlug\": \"count-paths-that-can-form-a-palindrome-in-a-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.4K\", \"totalSubmission\": \"18.4K\", \"totalAcceptedRaw\": 6408, \"totalSubmissionRaw\": 18390, \"acRate\": \"34.8%\"}",
            "hints": [
                "Use the sieve of Eratosthenes to find all prime numbers in the range <code>[1, n]</code>.****",
                "Root the tree at any node.",
                "Let <code>dp[i][0] = the number of vertical paths starting from i containing no prime nodes </code>, and <code>dp[i][1] = the number of vertical paths starting from i containing one prime node </code>.",
                "If <code>i</code> is not prime, <code>dp[i][0] = sum(dp[child][0]) + 1</code>, and <code>dp[i][1] = sum(dp[child][1])</code> for each <code>child</code> of <code>i</code> in the rooted tree.",
                "If <code>i</code> is prime, <code>dp[i][0] = 0</code>, and <code>dp[i][1] = sum(dp[child][0]) + 1</code> for each <code>child</code> of <code>i</code> in the rooted tree.",
                "For each node <code>i</code>, and using the computed <code>dp</code> matrix, count the number of unordered pairs <code>(a,b)</code> such that <code>lca(a,b) = i</code>, and there exists exactly one prime number on the path from <code>a</code> to <code>b</code>."
            ],
            "rephrased": {
                "body": "Given an undirected tree with 'n' nodes labeled from 1 to 'n', and a 2D array 'edges' representing the tree's connections, determine the number of valid paths. A path (a, b) is considered valid if the nodes along the path from 'a' to 'b' contain exactly one prime number. Note that paths (a, b) and (b, a) are considered the same and counted only once.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "1 <= u_i, v_i <= n",
                    "The input is generated such that 'edges' represent a valid tree."
                ],
                "testcases": [
                    {
                        "input": "n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]",
                        "output": "4",
                        "explanation": "The valid paths are: (1, 2), (1, 3), (1, 4), and (2, 4). Each of these paths contains exactly one prime number (2 or 3)."
                    },
                    {
                        "input": "n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]",
                        "output": "6",
                        "explanation": "The valid paths are: (1, 2), (1, 3), (1, 4), (1, 6), (2, 4), and (3, 6). Each of these paths contains exactly one prime number (2 or 3)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-paths-that-can-form-a-palindrome-in-a-tree",
                "title": "Count Paths That Can Form a Palindrome in a Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use the sieve of Eratosthenes to find all prime numbers in the range <code>[1, n]</code>.****",
            "Root the tree at any node.",
            "Let <code>dp[i][0] = the number of vertical paths starting from i containing no prime nodes </code>, and <code>dp[i][1] = the number of vertical paths starting from i containing one prime node </code>.",
            "If <code>i</code> is not prime, <code>dp[i][0] = sum(dp[child][0]) + 1</code>, and <code>dp[i][1] = sum(dp[child][1])</code> for each <code>child</code> of <code>i</code> in the rooted tree.",
            "If <code>i</code> is prime, <code>dp[i][0] = 0</code>, and <code>dp[i][1] = sum(dp[child][0]) + 1</code> for each <code>child</code> of <code>i</code> in the rooted tree.",
            "For each node <code>i</code>, and using the computed <code>dp</code> matrix, count the number of unordered pairs <code>(a,b)</code> such that <code>lca(a,b) = i</code>, and there exists exactly one prime number on the path from <code>a</code> to <code>b</code>."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long countPaths(int n, vector<vector<int>>& edges) {\n    long long ans = 0;\n    const vector<bool> isPrime = sieveEratosthenes(n + 1);\n    vector<vector<int>> graph(n + 1);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].push_back(v);\n      graph[v].push_back(u);\n    }\n\n    dfs(graph, 1, /*prev=*/-1, isPrime, ans);\n    return ans;\n  }\n\n private:\n  pair<long, long> dfs(const vector<vector<int>>& graph, int u, int prev,\n                       const vector<bool>& isPrime, long long& ans) {\n    long countZeroPrimePath = !isPrime[u];\n    long countOnePrimePath = isPrime[u];\n\n    for (const int v : graph[u]) {\n      if (v == prev)\n        continue;\n      const auto& [countZeroPrimeChildPath, countOnePrimeChildPath] =\n          dfs(graph, v, u, isPrime, ans);\n      ans += countZeroPrimePath * countOnePrimeChildPath +\n             countOnePrimePath * countZeroPrimeChildPath;\n      if (isPrime[u]) {\n        countOnePrimePath += countZeroPrimeChildPath;\n      } else {\n        countZeroPrimePath += countZeroPrimeChildPath;\n        countOnePrimePath += countOnePrimeChildPath;\n      }\n    }\n\n    return {countZeroPrimePath, countOnePrimePath};\n  }\n\n  vector<bool> sieveEratosthenes(int n) {\n    vector<bool> isPrime(n, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i)\n      if (isPrime[i])\n        for (int j = i * i; j < n; j += i)\n          isPrime[j] = false;\n    return isPrime;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long countPaths(int n, int[][] edges) {\n    final boolean[] isPrime = sieveEratosthenes(n + 1);\n    List<Integer>[] graph = new List[n + 1];\n\n    for (int i = 1; i <= n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph[u].add(v);\n      graph[v].add(u);\n    }\n\n    dfs(graph, 1, /*prev=*/-1, isPrime);\n    return ans;\n  }\n\n  private long ans = 0;\n\n  private Pair<Long, Long> dfs(List<Integer>[] graph, int u, int prev, boolean[] isPrime) {\n    long countZeroPrimePath = isPrime[u] ? 0 : 1;\n    long countOnePrimePath = isPrime[u] ? 1 : 0;\n\n    for (final int v : graph[u]) {\n      if (v == prev)\n        continue;\n      Pair<Long, Long> pair = dfs(graph, v, u, isPrime);\n      final long countZeroPrimeChildPath = pair.getKey();\n      final long countOnePrimeChildPath = pair.getValue();\n      ans +=\n          countZeroPrimePath * countOnePrimeChildPath + countOnePrimePath * countZeroPrimeChildPath;\n      if (isPrime[u]) {\n        countOnePrimePath += countZeroPrimeChildPath;\n      } else {\n        countZeroPrimePath += countZeroPrimeChildPath;\n        countOnePrimePath += countOnePrimeChildPath;\n      }\n    }\n\n    return new Pair<>(countZeroPrimePath, countOnePrimePath);\n  }\n\n  private boolean[] sieveEratosthenes(int n) {\n    boolean[] isPrime = new boolean[n];\n    Arrays.fill(isPrime, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i)\n      if (isPrime[i])\n        for (int j = i * i; j < n; j += i)\n          isPrime[j] = false;\n    return isPrime;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countPaths(self, n: int, edges: List[List[int]]) -> int:\n    ans = 0\n    isPrime = self._sieveEratosthenes(n + 1)\n    graph = [[] for _ in range(n + 1)]\n\n    for u, v in edges:\n      graph[u].append(v)\n      graph[v].append(u)\n\n    def dfs(u: int, prev: int) -> Tuple[int, int]:\n      nonlocal ans\n      countZeroPrimePath = int(not isPrime[u])\n      countOnePrimePath = int(isPrime[u])\n\n      for v in graph[u]:\n        if v == prev:\n          continue\n        countZeroPrimeChildPath, countOnePrimeChildPath = dfs(v, u)\n        ans += countZeroPrimePath * countOnePrimeChildPath + \\\n            countOnePrimePath * countZeroPrimeChildPath\n        if isPrime[u]:\n          countOnePrimePath += countZeroPrimeChildPath\n        else:\n          countZeroPrimePath += countZeroPrimeChildPath\n          countOnePrimePath += countOnePrimeChildPath\n\n      return countZeroPrimePath, countOnePrimePath\n\n    dfs(1, -1)\n    return ans\n\n  def _sieveEratosthenes(self, n: int) -> List[bool]:\n    isPrime = [True] * n\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n      if isPrime[i]:\n        for j in range(i * i, n, i):\n          isPrime[j] = False\n    return isPrime\n",
                "lang_text": "py"
            }
        }
    }
}