{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2876",
            "title": "Count Visited Nodes in a Directed Graph",
            "titleSlug": "count-visited-nodes-in-a-directed-graph",
            "content": "<p>There is a <strong>directed</strong> graph consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> and <code>n</code> directed edges.</p>\n\n<p>You are given a <strong>0-indexed</strong> array <code>edges</code> where <code>edges[i]</code> indicates that there is an edge from node <code>i</code> to node <code>edges[i]</code>.</p>\n\n<p>Consider the following process on the graph:</p>\n\n<ul>\n\t<li>You start from a node <code>x</code> and keep visiting other nodes through edges until you reach a node that you have already visited before on this <strong>same</strong> process.</li>\n</ul>\n\n<p>Return <em>an array </em><code>answer</code><em> where </em><code>answer[i]</code><em> is the number of <strong>different</strong> nodes that you will visit if you perform the process starting from node </em><code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/31/graaphdrawio-1.png\" />\n<pre>\n<strong>Input:</strong> edges = [1,2,0,0]\n<strong>Output:</strong> [3,3,3,4]\n<strong>Explanation:</strong> We perform the process starting from each node in the following way:\n- Starting from node 0, we visit the nodes 0 -&gt; 1 -&gt; 2 -&gt; 0. The number of different nodes we visit is 3.\n- Starting from node 1, we visit the nodes 1 -&gt; 2 -&gt; 0 -&gt; 1. The number of different nodes we visit is 3.\n- Starting from node 2, we visit the nodes 2 -&gt; 0 -&gt; 1 -&gt; 2. The number of different nodes we visit is 3.\n- Starting from node 3, we visit the nodes 3 -&gt; 0 -&gt; 1 -&gt; 2 -&gt; 0. The number of different nodes we visit is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/31/graaph2drawio.png\" style=\"width: 191px; height: 251px;\" />\n<pre>\n<strong>Input:</strong> edges = [1,2,3,4,0]\n<strong>Output:</strong> [5,5,5,5,5]\n<strong>Explanation:</strong> Starting from any node we can visit every node in the graph in the process.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == edges.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= edges[i] &lt;= n - 1</code></li>\n\t<li><code>edges[i] != i</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 308,
            "dislikes": 5,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.8K\", \"totalSubmission\": \"29.9K\", \"totalAcceptedRaw\": 9797, \"totalSubmissionRaw\": 29903, \"acRate\": \"32.8%\"}",
            "hints": [
                "Consider if the graph was only one cycle, what will be the answer for each node?",
                "The actual graph will always consist of at least one cycle and some other nodes.",
                "Calculate the answer for nodes in cycles the same way as in hint 1. How do you calculate the answer for the remaining nodes?"
            ],
            "rephrased": {
                "body": "Given a directed graph with `n` nodes (numbered 0 to `n-1`) and `n` directed edges represented by a 0-indexed array `edges`, where `edges[i]` indicates an edge from node `i` to node `edges[i]`.  Simulate a process starting from each node `x`. In this process, you visit nodes following the directed edges until you revisit a node already seen in the *current* process.  Return an array `answer` where `answer[i]` is the number of *distinct* nodes visited during the process starting from node `i`.",
                "constraints": [
                    "n == edges.length",
                    "2 <= n <= 10^5",
                    "0 <= edges[i] <= n - 1",
                    "edges[i] != i"
                ],
                "testcases": [
                    {
                        "input": "[1,2,0,0]",
                        "output": "[3,3,3,4]",
                        "explanation": "Starting from node 0, the path is 0 -> 1 -> 2 -> 0. The distinct nodes visited are 0, 1, and 2, resulting in a count of 3.\nStarting from node 1, the path is 1 -> 2 -> 0 -> 1. The distinct nodes visited are 1, 2, and 0, resulting in a count of 3.\nStarting from node 2, the path is 2 -> 0 -> 1 -> 2. The distinct nodes visited are 2, 0, and 1, resulting in a count of 3.\nStarting from node 3, the path is 3 -> 0 -> 1 -> 2 -> 0. The distinct nodes visited are 3, 0, 1, and 2, resulting in a count of 4."
                    },
                    {
                        "input": "[1,2,3,4,0]",
                        "output": "[5,5,5,5,5]",
                        "explanation": "Starting from any node, it's possible to visit every node in the graph before returning to a previously visited node. Therefore, the count of distinct nodes visited from each starting node is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Consider if the graph was only one cycle, what will be the answer for each node?",
            "The actual graph will always consist of at least one cycle and some other nodes.",
            "Calculate the answer for nodes in cycles the same way as in hint 1. How do you calculate the answer for the remaining nodes?"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> countVisitedNodes(vector<int>& edges) {\n    const int n = edges.size();\n    vector<int> ans(n);\n    vector<int> inDegree(n);\n    vector<bool> seen(n);\n    queue<int> q;\n    stack<int> stack;\n\n    for (const int v : edges)\n      ++inDegree[v];\n\n    // Topology\n    for (int i = 0; i < n; ++i)\n      if (inDegree[i] == 0)\n        q.push(i);\n\n    // Push non-cyclic nodes to stack.\n    while (!q.empty()) {\n      const int u = q.front();\n      q.pop();\n      if (--inDegree[edges[u]] == 0)\n        q.push(edges[u]);\n      stack.push(u);\n      seen[u] = true;\n    }\n\n    // Fill the length of cyclic nodes.\n    for (int i = 0; i < n; ++i)\n      if (!seen[i])\n        fillCycle(edges, i, seen, ans);\n\n    // Fill the length of non-cyclic nodes.\n    while (!stack.empty()) {\n      const int u = stack.top();\n      stack.pop();\n      ans[u] = ans[edges[u]] + 1;\n    }\n\n    return ans;\n  }\n\n private:\n  void fillCycle(const vector<int>& edges, int start, vector<bool>& seen,\n                 vector<int>& ans) {\n    int cycleLength = 0;\n    for (int u = start; !seen[u]; u = edges[u]) {\n      ++cycleLength;\n      seen[u] = true;\n    }\n    ans[start] = cycleLength;\n    for (int u = edges[start]; u != start; u = edges[u])\n      ans[u] = cycleLength;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] countVisitedNodes(List<Integer> edges) {\n    final int n = edges.size();\n    int[] ans = new int[n];\n    int[] inDegree = new int[n];\n    boolean[] seen = new boolean[n];\n    Queue<Integer> q = new ArrayDeque<>();\n    Stack<Integer> stack = new Stack<>();\n\n    for (int v : edges)\n      ++inDegree[v];\n\n    // Topology\n    for (int i = 0; i < n; ++i)\n      if (inDegree[i] == 0)\n        q.add(i);\n\n    // Push non-cyclic nodes to stack.\n    while (!q.isEmpty()) {\n      int u = q.poll();\n      if (--inDegree[edges.get(u)] == 0)\n        q.add(edges.get(u));\n      stack.push(u);\n      seen[u] = true;\n    }\n\n    // Fill the length of cyclic nodes.\n    for (int i = 0; i < n; ++i)\n      if (!seen[i])\n        fillCycle(edges, i, seen, ans);\n\n    // Fill the length of non-cyclic nodes.\n    while (!stack.isEmpty()) {\n      int u = stack.pop();\n      ans[u] = ans[edges.get(u)] + 1;\n    }\n\n    return ans;\n  }\n\n  private void fillCycle(List<Integer> edges, int start, boolean[] seen, int[] ans) {\n    int cycleLength = 0;\n    for (int u = start; !seen[u]; u = edges.get(u)) {\n      ++cycleLength;\n      seen[u] = true;\n    }\n    ans[start] = cycleLength;\n    for (int u = edges.get(start); u != start; u = edges.get(u))\n      ans[u] = cycleLength;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countVisitedNodes(self, edges: List[int]) -> List[int]:\n    n = len(edges)\n    ans = [0] * n\n    inDegree = [0] * n\n    seen = [False] * n\n    stack = []\n\n    for v in edges:\n      inDegree[v] += 1\n\n    # Topology\n    q = collections.deque([i for i, d in enumerate(inDegree) if d == 0])\n\n    # Push non-cyclic nodes to stack.\n    while q:\n      u = q.popleft()\n      inDegree[edges[u]] -= 1\n      if inDegree[edges[u]] == 0:\n        q.append(edges[u])\n      stack.append(u)\n      seen[u] = True\n\n    # Fill the length of cyclic nodes.\n    for i in range(n):\n      if not seen[i]:\n        self._fillCycle(edges, i, seen, ans)\n\n    # Fill the length of non-cyclic nodes.\n    while stack:\n      u = stack.pop()\n      ans[u] = ans[edges[u]] + 1\n\n    return ans\n\n  def _fillCycle(self, edges: List[int], start: int, seen: List[bool], ans: List[int]) -> None:\n    cycleLength = 0\n    u = start\n    while not seen[u]:\n      cycleLength += 1\n      seen[u] = True\n      u = edges[u]\n    ans[start] = cycleLength\n    u = edges[start]\n    while u != start:\n      ans[u] = cycleLength\n      u = edges[u]\n",
                "lang_text": "py"
            }
        }
    }
}