{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2580",
            "title": "Count Ways to Group Overlapping Ranges",
            "titleSlug": "count-ways-to-group-overlapping-ranges",
            "content": "<p>You are given a 2D integer array <code>ranges</code> where <code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> denotes that all integers between <code>start<sub>i</sub></code> and <code>end<sub>i</sub></code> (both <strong>inclusive</strong>) are contained in the <code>i<sup>th</sup></code> range.</p>\n\n<p>You are to split <code>ranges</code> into <strong>two</strong> (possibly empty) groups such that:</p>\n\n<ul>\n\t<li>Each range belongs to exactly one group.</li>\n\t<li>Any two <strong>overlapping</strong> ranges must belong to the <strong>same</strong> group.</li>\n</ul>\n\n<p>Two ranges are said to be <strong>overlapping</strong>&nbsp;if there exists at least <strong>one</strong> integer that is present in both ranges.</p>\n\n<ul>\n\t<li>For example, <code>[1, 3]</code> and <code>[2, 5]</code> are overlapping because <code>2</code> and <code>3</code> occur in both ranges.</li>\n</ul>\n\n<p>Return <em>the <strong>total number</strong> of ways to split</em> <code>ranges</code> <em>into two groups</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranges = [[6,10],[5,15]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThe two ranges are overlapping, so they must be in the same group.\nThus, there are two possible ways:\n- Put both the ranges together in group 1.\n- Put both the ranges together in group 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranges = [[1,3],[10,20],[2,5],[4,8]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nRanges [1,3], and [2,5] are overlapping. So, they must be in the same group.\nAgain, ranges [2,5] and [4,8] are also overlapping. So, they must also be in the same group. \nThus, there are four possible ways to group them:\n- All the ranges in group 1.\n- All the ranges in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 1 and [10,20] in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 2 and [10,20] in group 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ranges.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>ranges[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 294,
            "dislikes": 18,
            "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.2K\", \"totalSubmission\": \"40.4K\", \"totalAcceptedRaw\": 14226, \"totalSubmissionRaw\": 40410, \"acRate\": \"35.2%\"}",
            "hints": [
                "Can we use sorting here?",
                "Sort the ranges and merge the overlapping ranges. Then count number of non-overlapping ranges.",
                "How many ways can we group these non-overlapping ranges?"
            ],
            "rephrased": {
                "body": "Given a 2D integer array `ranges`, where `ranges[i] = [start_i, end_i]` represents a range of integers from `start_i` to `end_i` (inclusive).  The task is to split these ranges into two groups, ensuring that any two overlapping ranges belong to the same group.  Overlapping ranges share at least one common integer. Determine the number of ways to split the ranges into two such groups. Return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= ranges.length <= 10^5",
                    "ranges[i].length == 2",
                    "0 <= start_i <= end_i <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[[6,10],[5,15]]",
                        "output": "2",
                        "explanation": "The ranges [6, 10] and [5, 15] overlap.  Therefore they must belong to the same group.  This leads to two possibilities: both ranges in group 1, or both ranges in group 2."
                    },
                    {
                        "input": "[[1,3],[10,20],[2,5],[4,8]]",
                        "output": "4",
                        "explanation": "Ranges [1, 3] and [2, 5] overlap. Ranges [2, 5] and [4, 8] overlap. Therefore, [1, 3], [2, 5] and [4, 8] must belong to the same group. This leads to four possible groupings: all ranges in group 1; all ranges in group 2; [1, 3], [2, 5], and [4, 8] in group 1 and [10, 20] in group 2; [1, 3], [2, 5], and [4, 8] in group 2 and [10, 20] in group 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "merge-intervals",
                "title": "Merge Intervals",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we use sorting here?",
            "Sort the ranges and merge the overlapping ranges. Then count number of non-overlapping ranges.",
            "How many ways can we group these non-overlapping ranges?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countWays(vector<vector<int>>& ranges) {\n    constexpr int kMod = 1'000'000'007;\n    int ans = 1;\n    int prevEnd = -1;\n\n    std::ranges::sort(ranges);\n\n    for (const vector<int>& range : ranges) {\n      const int start = range[0];\n      const int end = range[1];\n      if (start > prevEnd)\n        ans = ans * 2 % kMod;\n      prevEnd = max(prevEnd, end);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countWays(int[][] ranges) {\n    final int kMod = 1_000_000_007;\n    int ans = 1;\n    int prevEnd = -1;\n\n    Arrays.sort(ranges, (a, b) -> a[0] - b[0]);\n\n    for (int[] range : ranges) {\n      final int start = range[0];\n      final int end = range[1];\n      if (start > prevEnd)\n        ans = ans * 2 % kMod;\n      prevEnd = Math.max(prevEnd, end);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countWays(self, ranges: List[List[int]]) -> int:\n    kMod = 1_000_000_007\n    ans = 1\n    prevEnd = -1\n\n    for start, end in sorted(ranges):\n      if start > prevEnd:\n        ans = ans * 2 % kMod\n      prevEnd = max(prevEnd, end)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}