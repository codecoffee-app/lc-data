{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1735",
            "title": "Count Ways to Make Array With Product",
            "titleSlug": "count-ways-to-make-array-with-product",
            "content": "<p>You are given a 2D integer array, <code>queries</code>. For each <code>queries[i]</code>, where <code>queries[i] = [n<sub>i</sub>, k<sub>i</sub>]</code>, find the number of different ways you can place positive integers into an array of size <code>n<sub>i</sub></code> such that the product of the integers is <code>k<sub>i</sub></code>. As the number of ways may be too large, the answer to the <code>i<sup>th</sup></code> query is the number of ways <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Return <em>an integer array </em><code>answer</code><em> where </em><code>answer.length == queries.length</code><em>, and </em><code>answer[i]</code><em> is the answer to the </em><code>i<sup>th</sup></code><em> query.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [[2,6],[5,1],[73,660]]\n<strong>Output:</strong> [4,1,50734910]\n<strong>Explanation:</strong>&nbsp;Each query is independent.\n[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].\n[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].\n[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 10<sup>9</sup> + 7 = 50734910.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]\n<strong>Output:</strong> [1,2,3,10,5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>4</sup> </code></li>\n\t<li><code>1 &lt;= n<sub>i</sub>, k<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 274,
            "dislikes": 33,
            "similarQuestions": "[{\"title\": \"Count the Number of Ideal Arrays\", \"titleSlug\": \"count-the-number-of-ideal-arrays\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Smallest Value After Replacing With Sum of Prime Factors\", \"titleSlug\": \"smallest-value-after-replacing-with-sum-of-prime-factors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Closest Prime Numbers in Range\", \"titleSlug\": \"closest-prime-numbers-in-range\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.3K\", \"totalSubmission\": \"10.5K\", \"totalAcceptedRaw\": 5317, \"totalSubmissionRaw\": 10485, \"acRate\": \"50.7%\"}",
            "hints": [
                "Prime-factorize ki and count how many ways you can distribute the primes among the ni positions.",
                "After prime factorizing ki, suppose there are x amount of prime factor. There are (x + n - 1) choose (n - 1) ways to distribute the x prime factors into k positions, allowing repetitions."
            ],
            "rephrased": {
                "body": "Given a 2D integer array `queries`, where each `queries[i] = [n_i, k_i]`, determine the number of ways to populate an array of size `n_i` with positive integers such that their product equals `k_i`.  Since the number of ways can be very large, return the answer for each query modulo `10^9 + 7`. Return an integer array `answer` where `answer.length == queries.length`, and `answer[i]` is the answer to the `i-th` query.",
                "constraints": [
                    "1 <= queries.length <= 10^4",
                    "1 <= n_i, k_i <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[[2,6],[5,1],[73,660]]",
                        "output": "[4,1,50734910]",
                        "explanation": "For [2,6], the possible arrays are [1,6], [2,3], [3,2], and [6,1], totaling 4 ways. For [5,1], only [1,1,1,1,1] results in a product of 1. For [73,660], there are a large number of ways that, when taken modulo 10^9 + 7, results in 50734910."
                    },
                    {
                        "input": "[[1,1],[2,2],[3,3],[4,4],[5,5]]",
                        "output": "[1,2,3,10,5]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-the-number-of-ideal-arrays",
                "title": "Count the Number of Ideal Arrays",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "smallest-value-after-replacing-with-sum-of-prime-factors",
                "title": "Smallest Value After Replacing With Sum of Prime Factors",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "closest-prime-numbers-in-range",
                "title": "Closest Prime Numbers in Range",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Prime-factorize ki and count how many ways you can distribute the primes among the ni positions.",
            "After prime factorizing ki, suppose there are x amount of prime factor. There are (x + n - 1) choose (n - 1) ways to distribute the x prime factors into k positions, allowing repetitions."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> waysToFillArray(vector<vector<int>>& queries) {\n    constexpr int kMod = 1'000'000'007;\n    constexpr int kMax = 10000;\n    constexpr int kMaxFreq = 13;  // 2^13 = 8192 < kMax\n    const vector<int> minPrimeFactors = sieveEratosthenes(kMax + 1);\n    const auto [fact, invFact] = getFactAndInvFact(kMax + kMaxFreq - 1, kMod);\n    vector<int> ans;\n\n    for (const vector<int>& query : queries) {\n      const int n = query[0];\n      const int k = query[1];\n      int res = 1;\n      for (const auto& [_, freq] : getPrimeFactorsCount(k, minPrimeFactors))\n        res = static_cast<long>(res) *\n              nCk(n - 1 + freq, freq, fact, invFact, kMod) % kMod;\n      ans.push_back(res);\n    }\n\n    return ans;\n  }\n\n private:\n  // Gets the minimum prime factor of i, where 1 < i <= n.\n  vector<int> sieveEratosthenes(int n) {\n    vector<int> minPrimeFactors(n + 1);\n    iota(minPrimeFactors.begin() + 2, minPrimeFactors.end(), 2);\n    for (int i = 2; i * i < n; ++i)\n      if (minPrimeFactors[i] == i)  // `i` is prime.\n        for (int j = i * i; j < n; j += i)\n          minPrimeFactors[j] = min(minPrimeFactors[j], i);\n    return minPrimeFactors;\n  }\n\n  unordered_map<int, int> getPrimeFactorsCount(\n      int num, const vector<int>& minPrimeFactors) {\n    unordered_map<int, int> count;\n    while (num > 1) {\n      const int divisor = minPrimeFactors[num];\n      while (num % divisor == 0) {\n        num /= divisor;\n        ++count[divisor];\n      }\n    }\n    return count;\n  }\n\n  pair<vector<long>, vector<long>> getFactAndInvFact(int n, int kMod) {\n    vector<long> fact(n + 1);\n    vector<long> invFact(n + 1);\n    vector<long> inv(n + 1);\n    fact[0] = invFact[0] = 1;\n    inv[0] = inv[1] = 1;\n    for (int i = 1; i <= n; ++i) {\n      if (i >= 2)\n        inv[i] = kMod - kMod / i * inv[kMod % i] % kMod;\n      fact[i] = fact[i - 1] * i % kMod;\n      invFact[i] = invFact[i - 1] * inv[i] % kMod;\n    }\n    return {fact, invFact};\n  }\n\n  int nCk(int n, int k, const vector<long>& fact, const vector<long>& invFact,\n          int kMod) {\n    return fact[n] * invFact[k] % kMod * invFact[n - k] % kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] waysToFillArray(int[][] queries) {\n    final int kMod = 1_000_000_007;\n    final int kMax = 10_000;\n    final int kMaxFreq = 13; // 2^13 = 8192 < kMax\n    final int[] minPrimeFactors = sieveEratosthenes(kMax + 1);\n    final long[][] factAndInvFact = getFactAndInvFact(kMax + kMaxFreq - 1, kMod);\n    final long[] fact = factAndInvFact[0];\n    final long[] invFact = factAndInvFact[1];\n    int[] ans = new int[queries.length];\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int n = queries[i][0];\n      final int k = queries[i][1];\n      int res = 1;\n      for (final int freq : getPrimeFactorsCount(k, minPrimeFactors).values())\n        res = (int) ((long) res * nCk(n - 1 + freq, freq, fact, invFact, kMod) % kMod);\n      ans[i] = res;\n    }\n\n    return ans;\n  }\n\n  // Gets the minimum prime factor of i, where 1 < i <= n.\n  private int[] sieveEratosthenes(int n) {\n    int[] minPrimeFactors = new int[n + 1];\n    for (int i = 2; i <= n; ++i)\n      minPrimeFactors[i] = i;\n    for (int i = 2; i * i < n; ++i)\n      if (minPrimeFactors[i] == i) // `i` is prime.\n        for (int j = i * i; j < n; j += i)\n          minPrimeFactors[j] = Math.min(minPrimeFactors[j], i);\n    return minPrimeFactors;\n  }\n\n  private Map<Integer, Integer> getPrimeFactorsCount(int num, int[] minPrimeFactors) {\n    Map<Integer, Integer> count = new HashMap<>();\n    while (num > 1) {\n      final int divisor = minPrimeFactors[num];\n      while (num % divisor == 0) {\n        num /= divisor;\n        count.put(divisor, count.merge(divisor, 1, Integer::sum));\n      }\n    }\n    return count;\n  }\n\n  private long[][] getFactAndInvFact(int n, int kMod) {\n    long[] fact = new long[n + 1];\n    long[] invFact = new long[n + 1];\n    long[] inv = new long[n + 1];\n    fact[0] = invFact[0] = 1;\n    inv[0] = inv[1] = 1;\n    for (int i = 1; i <= n; ++i) {\n      if (i >= 2)\n        inv[i] = kMod - kMod / i * inv[kMod % i] % kMod;\n      fact[i] = fact[i - 1] * i % kMod;\n      invFact[i] = invFact[i - 1] * inv[i] % kMod;\n    }\n    return new long[][] {fact, invFact};\n  }\n\n  private int nCk(int n, int k, long[] fact, long[] invFact, int kMod) {\n    return (int) (fact[n] * invFact[k] % kMod * invFact[n - k] % kMod);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def waysToFillArray(self, queries: List[List[int]]) -> List[int]:\n    kMod = 1_000_000_007\n    kMax = 10_000\n    minPrimeFactors = self._sieveEratosthenes(kMax + 1)\n\n    @functools.lru_cache(None)\n    def fact(i: int) -> int:\n      return 1 if i <= 1 else i * fact(i - 1) % kMod\n\n    @functools.lru_cache(None)\n    def inv(i: int) -> int:\n      return pow(i, kMod - 2, kMod)\n\n    @functools.lru_cache(None)\n    def nCk(n: int, k: int) -> int:\n      return fact(n) * inv(fact(k)) * inv(fact(n - k)) % kMod\n\n    ans = []\n\n    for n, k in queries:\n      res = 1\n      for freq in self._getPrimeFactorsCount(k, minPrimeFactors).values():\n        res = res * nCk(n - 1 + freq, freq) % kMod\n      ans.append(res)\n\n    return ans\n\n  def _sieveEratosthenes(self, n: int) -> List[int]:\n    \"\"\"Gets the minimum prime factor of i, where 1 < i <= n.\"\"\"\n    minPrimeFactors = [i for i in range(n + 1)]\n    for i in range(2, int(n**0.5) + 1):\n      if minPrimeFactors[i] == i:  # `i` is prime.\n        for j in range(i * i, n, i):\n          minPrimeFactors[j] = min(minPrimeFactors[j], i)\n    return minPrimeFactors\n\n  def _getPrimeFactorsCount(self, num: int, minPrimeFactors: List[int]) -> Dict[int, int]:\n    count = collections.Counter()\n    while num > 1:\n      divisor = minPrimeFactors[num]\n      while num % divisor == 0:\n        num //= divisor\n        count[divisor] += 1\n    return count\n",
                "lang_text": "py"
            }
        }
    }
}