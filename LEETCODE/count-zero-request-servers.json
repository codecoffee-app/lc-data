{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2747",
            "title": "Count Zero Request Servers",
            "titleSlug": "count-zero-request-servers",
            "content": "<p>You are given an integer <code>n</code> denoting the total number of servers and a <strong>2D</strong> <strong>0-indexed </strong>integer array <code>logs</code>, where <code>logs[i] = [server_id, time]</code> denotes that the server with id <code>server_id</code> received a request at time <code>time</code>.</p>\n\n<p>You are also given an integer <code>x</code> and a <strong>0-indexed</strong> integer array <code>queries</code>.</p>\n\n<p>Return <em>a <strong>0-indexed</strong> integer array</em> <code>arr</code> <em>of length</em> <code>queries.length</code> <em>where</em> <code>arr[i]</code> <em>represents the number of servers that <strong>did not receive</strong> any requests during the time interval</em> <code>[queries[i] - x, queries[i]]</code>.</p>\n\n<p>Note that the time intervals are inclusive.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, logs = [[1,3],[2,6],[1,5]], x = 5, queries = [10,11]\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> \nFor queries[0]: The servers with ids 1 and 2 get requests in the duration of [5, 10]. Hence, only server 3 gets zero requests.\nFor queries[1]: Only the server with id 2 gets a request in duration of [6,11]. Hence, the servers with ids 1 and 3 are the only servers that do not receive any requests during that time period.\n\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, logs = [[2,4],[2,1],[1,2],[3,1]], x = 2, queries = [3,4]\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> \nFor queries[0]: All servers get at least one request in the duration of [1, 3].\nFor queries[1]: Only server with id 3 gets no request in the duration [2,4].\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= logs.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code><font face=\"monospace\">logs[i].length == 2</font></code></li>\n\t<li><code>1 &lt;= logs[i][0] &lt;= n</code></li>\n\t<li><code>1 &lt;= logs[i][1] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= x &lt;= 10<sup>5</sup></code></li>\n\t<li><code>x &lt;&nbsp;queries[i]&nbsp;&lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 301,
            "dislikes": 29,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.8K\", \"totalSubmission\": \"15.2K\", \"totalAcceptedRaw\": 4752, \"totalSubmissionRaw\": 15190, \"acRate\": \"31.3%\"}",
            "hints": [
                "Can we use sorting and two-pointer approach here?",
                "Sort the queries array and logs array based on time in increasing order.",
                "For every window of size x, use sliding window and two-pointer approach to find the answer to the queries."
            ],
            "rephrased": {
                "body": "Given an integer `n` representing the total number of servers, a 2D array `logs` where `logs[i] = [server_id, time]` indicates that server `server_id` received a request at time `time`, an integer `x`, and an array of query times `queries`. Determine for each query time the number of servers that did not receive any requests within the time interval `[query - x, query]` (inclusive). Return an array `arr` where `arr[i]` is the result for `queries[i]`.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= logs.length <= 10^5",
                    "1 <= queries.length <= 10^5",
                    "logs[i].length == 2",
                    "1 <= logs[i][0] <= n",
                    "1 <= logs[i][1] <= 10^6",
                    "1 <= x <= 10^5",
                    "x < queries[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": {
                            "n": 3,
                            "logs": [
                                [
                                    1,
                                    3
                                ],
                                [
                                    2,
                                    6
                                ],
                                [
                                    1,
                                    5
                                ]
                            ],
                            "x": 5,
                            "queries": [
                                10,
                                11
                            ]
                        },
                        "output": [
                            1,
                            2
                        ],
                        "explanation": "For query 10, servers 1 and 2 received requests during [5, 10]. Thus, only server 3 had no requests. For query 11, only server 2 received a request during [6, 11]. Servers 1 and 3 did not receive any requests."
                    },
                    {
                        "input": {
                            "n": 3,
                            "logs": [
                                [
                                    2,
                                    4
                                ],
                                [
                                    2,
                                    1
                                ],
                                [
                                    1,
                                    2
                                ],
                                [
                                    3,
                                    1
                                ]
                            ],
                            "x": 2,
                            "queries": [
                                3,
                                4
                            ]
                        },
                        "output": [
                            0,
                            1
                        ],
                        "explanation": "For query 3, all servers received at least one request during the interval [1, 3]. For query 4, only server 3 did not receive a request in the time interval [2, 4]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Can we use sorting and two-pointer approach here?",
            "Sort the queries array and logs array based on time in increasing order.",
            "For every window of size x, use sliding window and two-pointer approach to find the answer to the queries."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> countServers(int n, vector<vector<int>>& logs, int x,\n                           vector<int>& queries) {\n    vector<int> ans(queries.size());\n    vector<int> count(n + 1);\n    vector<pair<int, int>> queryAndIndexes;\n\n    for (int i = 0; i < queries.size(); ++i)\n      queryAndIndexes.emplace_back(queries[i], i);\n\n    sort(\n        logs.begin(), logs.end(),\n        [](const vector<int>& a, const vector<int>& b) { return a[1] < b[1]; });\n    std::ranges::sort(queryAndIndexes);\n\n    int i = 0;\n    int j = 0;\n    int servers = 0;\n\n    // For each query, we care about logs[i..j].\n    for (const auto& [query, index] : queryAndIndexes) {\n      for (; j < logs.size() && logs[j][1] <= query; ++j)\n        if (++count[logs[j][0]] == 1)\n          ++servers;\n      for (; i < logs.size() && logs[i][1] < query - x; ++i)\n        if (--count[logs[i][0]] == 0)\n          --servers;\n      ans[index] = n - servers;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] countServers(int n, int[][] logs, int x, int[] queries) {\n    int[] ans = new int[queries.length];\n    int[] count = new int[n + 1];\n    Pair<Integer, Integer>[] queryAndIndexes = new Pair[queries.length];\n\n    for (int i = 0; i < queries.length; ++i)\n      queryAndIndexes[i] = new Pair<>(queries[i], i);\n\n    Arrays.sort(logs, (a, b) -> Integer.compare(a[1], b[1]));\n    Arrays.sort(queryAndIndexes, Comparator.comparingInt(Pair::getKey));\n\n    int i = 0;\n    int j = 0;\n    int servers = 0;\n\n    // For each query, we care about logs[i..j].\n    for (Pair<Integer, Integer> queryAndIndex : queryAndIndexes) {\n      final int query = queryAndIndex.getKey();\n      final int index = queryAndIndex.getValue();\n      for (; j < logs.length && logs[j][1] <= query; ++j)\n        if (++count[logs[j][0]] == 1)\n          ++servers;\n      for (; i < logs.length && logs[i][1] < query - x; ++i)\n        if (--count[logs[i][0]] == 0)\n          --servers;\n      ans[index] = n - servers;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countServers(self, n: int, logs: List[List[int]], x: int, queries: List[int]) -> List[int]:\n    ans = [0] * len(queries)\n    count = [0] * (n + 1)\n    queryAndIndexes = sorted([(query, i) for i, query in enumerate(queries)])\n\n    logs.sort(key=lambda log: log[1])\n\n    i = 0\n    j = 0\n    servers = 0\n\n    # For each query, we care about logs[i..j].\n    for query, index in queryAndIndexes:\n      while j < len(logs) and logs[j][1] <= query:\n        count[logs[j][0]] += 1\n        if count[logs[j][0]] == 1:\n          servers += 1\n        j += 1\n      while i < len(logs) and logs[i][1] < query - x:\n        count[logs[i][0]] -= 1\n        if count[logs[i][0]] == 0:\n          servers -= 1\n        i += 1\n      ans[index] = n - servers\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}