{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "765",
            "title": "Couples Holding Hands",
            "titleSlug": "couples-holding-hands",
            "content": "<p>There are <code>n</code> couples sitting in <code>2n</code> seats arranged in a row and want to hold hands.</p>\n\n<p>The people and seats are represented by an integer array <code>row</code> where <code>row[i]</code> is the ID of the person sitting in the <code>i<sup>th</sup></code> seat. The couples are numbered in order, the first couple being <code>(0, 1)</code>, the second couple being <code>(2, 3)</code>, and so on with the last couple being <code>(2n - 2, 2n - 1)</code>.</p>\n\n<p>Return <em>the minimum number of swaps so that every couple is sitting side by side</em>. A swap consists of choosing any two people, then they stand up and switch seats.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> row = [0,2,1,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We only need to swap the second (row[1]) and third (row[2]) person.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> row = [3,2,0,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All couples are already seated side by side.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2n == row.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 30</code></li>\n\t<li><code>n</code> is even.</li>\n\t<li><code>0 &lt;= row[i] &lt; 2n</code></li>\n\t<li>All the elements of <code>row</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2261,
            "dislikes": 116,
            "similarQuestions": "[{\"title\": \"First Missing Positive\", \"titleSlug\": \"first-missing-positive\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Missing Number\", \"titleSlug\": \"missing-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"K-Similar Strings\", \"titleSlug\": \"k-similar-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"57.7K\", \"totalSubmission\": \"101.3K\", \"totalAcceptedRaw\": 57716, \"totalSubmissionRaw\": 101340, \"acRate\": \"57.0%\"}",
            "hints": [
                "Say there are N two-seat couches.  For each couple, draw an edge from the couch of one partner to the couch of the other partner."
            ],
            "rephrased": {
                "body": "Given an array `row` of length `2n` representing `n` couples sitting in a row of `2n` seats, where `row[i]` is the ID of the person in the `i`th seat. Couples are numbered (0, 1), (2, 3), ..., (2n - 2, 2n - 1). Determine the minimum number of swaps needed to have each couple sit side-by-side. A swap involves two people exchanging seats.",
                "constraints": [
                    "2n == row.length",
                    "2 <= n <= 30",
                    "n is even.",
                    "0 <= row[i] < 2n",
                    "All elements of row are unique."
                ],
                "testcases": [
                    {
                        "input": "[0,2,1,3]",
                        "output": "1",
                        "explanation": "To seat all couples together, we need to swap the person in the second seat (row[1]) and the person in the third seat (row[2])."
                    },
                    {
                        "input": "[3,2,0,1]",
                        "output": "0",
                        "explanation": "All couples are already seated side by side."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "first-missing-positive",
                "title": "First Missing Positive",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "missing-number",
                "title": "Missing Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "k-similar-strings",
                "title": "K-Similar Strings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Say there are N two-seat couches.  For each couple, draw an edge from the couch of one partner to the couch of the other partner."
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : count(n), id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n    --count;\n  }\n\n  int getCount() const {\n    return count;\n  }\n\n private:\n  int count;\n  vector<int> id;\n  vector<int> rank;\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n};\n\nclass Solution {\n public:\n  int minSwapsCouples(vector<int>& row) {\n    const int n = row.size() / 2;\n    UnionFind uf(n);\n\n    for (int i = 0; i < n; ++i) {\n      const int a = row[2 * i];\n      const int b = row[2 * i + 1];\n      uf.unionByRank(a / 2, b / 2);\n    }\n\n    return n - uf.getCount();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    count = n;\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public void unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n    --count;\n  }\n\n  public int getCount() {\n    return count;\n  }\n\n  private int count;\n  private int[] id;\n  private int[] rank;\n\n  private int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n}\n\nclass Solution {\n  public int minSwapsCouples(int[] row) {\n    final int n = row.length / 2;\n    UnionFind uf = new UnionFind(n);\n\n    for (int i = 0; i < n; ++i) {\n      final int a = row[2 * i];\n      final int b = row[2 * i + 1];\n      uf.unionByRank(a / 2, b / 2);\n    }\n\n    return n - uf.getCount();\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}