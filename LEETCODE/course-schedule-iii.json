{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "630",
            "title": "Course Schedule III",
            "titleSlug": "course-schedule-iii",
            "content": "<p>There are <code>n</code> different online courses numbered from <code>1</code> to <code>n</code>. You are given an array <code>courses</code> where <code>courses[i] = [duration<sub>i</sub>, lastDay<sub>i</sub>]</code> indicate that the <code>i<sup>th</sup></code> course should be taken <b>continuously</b> for <code>duration<sub>i</sub></code> days and must be finished before or on <code>lastDay<sub>i</sub></code>.</p>\n\n<p>You will start on the <code>1<sup>st</sup></code> day and you cannot take two or more courses simultaneously.</p>\n\n<p>Return <em>the maximum number of courses that you can take</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]\n<strong>Output:</strong> 3\nExplanation: \nThere are totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1<sup>st</sup> course, it costs 100 days so you will finish it on the 100<sup>th</sup> day, and ready to take the next course on the 101<sup>st</sup> day.\nSecond, take the 3<sup>rd</sup> course, it costs 1000 days so you will finish it on the 1100<sup>th</sup> day, and ready to take the next course on the 1101<sup>st</sup> day. \nThird, take the 2<sup>nd</sup> course, it costs 200 days so you will finish it on the 1300<sup>th</sup> day. \nThe 4<sup>th</sup> course cannot be taken now, since you will finish it on the 3300<sup>th</sup> day, which exceeds the closed date.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> courses = [[1,2]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> courses = [[3,2],[4,3]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= courses.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= duration<sub>i</sub>, lastDay<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3700,
            "dislikes": 96,
            "similarQuestions": "[{\"title\": \"Course Schedule\", \"titleSlug\": \"course-schedule\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Course Schedule II\", \"titleSlug\": \"course-schedule-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Parallel Courses III\", \"titleSlug\": \"parallel-courses-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"107.9K\", \"totalSubmission\": \"268.9K\", \"totalAcceptedRaw\": 107877, \"totalSubmissionRaw\": 268929, \"acRate\": \"40.1%\"}",
            "hints": [
                "During iteration, say I want to add the current course, currentTotalTime being total time of all courses taken till now, but adding the current course might exceed my deadline or it doesn\u2019t.</br></br>\r\n\r\n1. If it doesn\u2019t, then I have added one new course. Increment the currentTotalTime with duration of current course.",
                "2. If it exceeds deadline, I can swap current course with current courses that has biggest duration.</br>\r\n* No harm done and I might have just reduced the currentTotalTime, right? </br>\r\n* What preprocessing do I need to do on my course processing order so that this swap is always legal?"
            ],
            "rephrased": {
                "body": "You are given `n` online courses, each with a `duration` and a `lastDay` to finish.  You can only take one course at a time, starting on day 1.  Given `courses`, where `courses[i] = [duration_i, lastDay_i]`, determine the maximum number of courses you can complete.",
                "constraints": [
                    "1 <= courses.length <= 10^4",
                    "1 <= duration_i, lastDay_i <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[[100,200],[200,1300],[1000,1250],[2000,3200]]",
                        "output": "3",
                        "explanation": "Optimal course selection:  Take course 1 (duration 100, ends day 100).  Then take course 3 (duration 1000, ends day 1100). Finally, take course 2 (duration 200, ends day 1300). Course 4 cannot be taken because it would end on day 3300, exceeding its deadline."
                    },
                    {
                        "input": "[[1,2]]",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "[[3,2],[4,3]]",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "course-schedule",
                "title": "Course Schedule",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "course-schedule-ii",
                "title": "Course Schedule II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "parallel-courses-iii",
                "title": "Parallel Courses III",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "During iteration, say I want to add the current course, currentTotalTime being total time of all courses taken till now, but adding the current course might exceed my deadline or it doesn\u2019t.</br></br>\r\n\r\n1. If it doesn\u2019t, then I have added one new course. Increment the currentTotalTime with duration of current course.",
            "2. If it exceeds deadline, I can swap current course with current courses that has biggest duration.</br>\r\n* No harm done and I might have just reduced the currentTotalTime, right? </br>\r\n* What preprocessing do I need to do on my course processing order so that this swap is always legal?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int scheduleCourse(vector<vector<int>>& courses) {\n    int time = 0;\n    sort(courses.begin(), courses.end(),\n         [](const auto& a, const auto& b) { return a[1] < b[1]; });\n    priority_queue<int> maxHeap;\n\n    for (const vector<int>& course : courses) {\n      const int duration = course[0];\n      const int lastDay = course[1];\n      maxHeap.push(duration);\n      time += duration;\n      // If the current course cannot be taken, check if it can be swapped with\n      // a previously taken course that has a larger duration to increase the\n      // time available to take upcoming courses.\n      if (time > lastDay)\n        time -= maxHeap.top(), maxHeap.pop();\n    }\n\n    return maxHeap.size();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int scheduleCourse(int[][] courses) {\n    int time = 0;\n    Arrays.sort(courses, (a, b) -> (a[1] - b[1]));\n    Queue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n\n    for (int[] course : courses) {\n      final int duration = course[0];\n      final int lastDay = course[1];\n      maxHeap.offer(duration);\n      time += course;\n      // If the current course cannot be taken, check if it can be swapped with\n      // a previously taken course that has a larger duration to increase the\n      // time available to take upcoming courses.\n      if (time > lastDay)\n        time -= maxHeap.poll();\n    }\n\n    return maxHeap.size();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def scheduleCourse(self, courses: List[List[int]]) -> int:\n    time = 0\n    maxHeap = []\n\n    for duration, lastDay in sorted(courses, key=lambda x: x[1]):\n      heapq.heappush(maxHeap, -duration)\n      time += duration\n      # If the current course cannot be taken, check if it can be swapped with\n      # a previously taken course that has a larger duration to increase the\n      # time available to take upcoming courses.\n      if time > lastDay:\n        time += heapq.heappop(maxHeap)\n\n    return len(maxHeap)\n",
                "lang_text": "py"
            }
        }
    }
}