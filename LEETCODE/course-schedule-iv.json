{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1462",
            "title": "Course Schedule IV",
            "titleSlug": "course-schedule-iv",
            "content": "<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you <strong>must</strong> take course <code>a<sub>i</sub></code> first if you want to take course <code>b<sub>i</sub></code>.</p>\n\n<ul>\n\t<li>For example, the pair <code>[0, 1]</code> indicates that you have to take course <code>0</code> before you can take course <code>1</code>.</li>\n</ul>\n\n<p>Prerequisites can also be <strong>indirect</strong>. If course <code>a</code> is a prerequisite of course <code>b</code>, and course <code>b</code> is a prerequisite of course <code>c</code>, then course <code>a</code> is a prerequisite of course <code>c</code>.</p>\n\n<p>You are also given an array <code>queries</code> where <code>queries[j] = [u<sub>j</sub>, v<sub>j</sub>]</code>. For the <code>j<sup>th</sup></code> query, you should answer whether course <code>u<sub>j</sub></code> is a prerequisite of course <code>v<sub>j</sub></code> or not.</p>\n\n<p>Return <i>a boolean array </i><code>answer</code><i>, where </i><code>answer[j]</code><i> is the answer to the </i><code>j<sup>th</sup></code><i> query.</i></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/01/courses4-1-graph.jpg\" style=\"width: 222px; height: 62px;\" />\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]\n<strong>Output:</strong> [false,true]\n<strong>Explanation:</strong> The pair [1, 0] indicates that you have to take course 1 before you can take course 0.\nCourse 0 is not a prerequisite of course 1, but the opposite is true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]\n<strong>Output:</strong> [false,false]\n<strong>Explanation:</strong> There are no prerequisites, and each course is independent.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/01/courses4-3-graph.jpg\" style=\"width: 222px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]\n<strong>Output:</strong> [true,true]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= numCourses &lt;= 100</code></li>\n\t<li><code>0 &lt;= prerequisites.length &lt;= (numCourses * (numCourses - 1) / 2)</code></li>\n\t<li><code>prerequisites[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>All the pairs <code>[a<sub>i</sub>, b<sub>i</sub>]</code> are <strong>unique</strong>.</li>\n\t<li>The prerequisites graph has no cycles.</li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1375,
            "dislikes": 63,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                }
            ],
            "stats": "{\"totalAccepted\": \"53.1K\", \"totalSubmission\": \"107.2K\", \"totalAcceptedRaw\": 53131, \"totalSubmissionRaw\": 107164, \"acRate\": \"49.6%\"}",
            "hints": [
                "Imagine if the courses are nodes of a graph. We need to build an array isReachable[i][j].",
                "Start a bfs from each course i and assign for each course j you visit isReachable[i][j] = True.",
                "Answer the queries from the isReachable array."
            ],
            "rephrased": {
                "body": "Given `numCourses` courses labeled from `0` to `numCourses - 1`, and a list of prerequisites `prerequisites` where `prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]` indicates that course `a<sub>i</sub>` must be taken before course `b<sub>i</sub>`. Also given a list of queries `queries` where `queries[j] = [u<sub>j</sub>, v<sub>j</sub>]`. Determine for each query whether course `u<sub>j</sub>` is a prerequisite of course `v<sub>j</sub>`.  Return a boolean array `answer` where `answer[j]` is the answer to the `j<sup>th</sup>` query. Prerequisites can be indirect; if `a` is a prerequisite of `b`, and `b` is a prerequisite of `c`, then `a` is a prerequisite of `c`.",
                "constraints": [
                    "2 <= numCourses <= 100",
                    "0 <= prerequisites.length <= (numCourses * (numCourses - 1) / 2)",
                    "prerequisites[i].length == 2",
                    "0 <= a<sub>i</sub>, b<sub>i</sub> <= n - 1",
                    "a<sub>i</sub> != b<sub>i</sub>",
                    "All the pairs [a<sub>i</sub>, b<sub>i</sub>] are unique.",
                    "The prerequisites graph has no cycles.",
                    "1 <= queries.length <= 10<sup>4</sup>",
                    "0 <= u<sub>i</sub>, v<sub>i</sub> <= n - 1",
                    "u<sub>i</sub> != v<sub>i</sub>"
                ],
                "testcases": [
                    {
                        "input": "numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]",
                        "output": "[false,true]",
                        "explanation": "The pair [1, 0] indicates that you must take course 1 before you can take course 0. Course 0 is not a prerequisite of course 1, but the opposite is true."
                    },
                    {
                        "input": "numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]",
                        "output": "[false,false]",
                        "explanation": "There are no prerequisites, and each course is independent."
                    },
                    {
                        "input": "numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]",
                        "output": "[true,true]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Imagine if the courses are nodes of a graph. We need to build an array isReachable[i][j].",
            "Start a bfs from each course i and assign for each course j you visit isReachable[i][j] = True.",
            "Answer the queries from the isReachable array."
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<bool> checkIfPrerequisite(int numCourses,\n                                   vector<vector<int>>& prerequisites,\n                                   vector<vector<int>>& queries) {\n    vector<bool> ans;\n    vector<vector<int>> graph(numCourses);\n    // isPrerequisite[i][j] := true if course i is a prerequisite of course j.\n    vector<vector<bool>> isPrerequisite(numCourses, vector<bool>(numCourses));\n\n    for (const vector<int>& prerequisite : prerequisites) {\n      const int u = prerequisite[0];\n      const int v = prerequisite[1];\n      graph[u].push_back(v);\n    }\n\n    // DFS from every course.\n    for (int i = 0; i < numCourses; ++i)\n      dfs(graph, i, isPrerequisite[i]);\n\n    for (const vector<int>& query : queries) {\n      const int u = query[0];\n      const int v = query[1];\n      ans.push_back(isPrerequisite[u][v]);\n    }\n\n    return ans;\n  }\n\n  void dfs(const vector<vector<int>>& graph, int u, vector<bool>& used) {\n    for (const int v : graph[u]) {\n      if (used[v])\n        continue;\n      used[v] = true;\n      dfs(graph, v, used);\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean[] checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {\n    List<Boolean> ans = new ArrayList<>();\n    List<Integer>[] graph = new List[numCourses];\n    // isPrerequisite[i][j] := true if course i is a prerequisite of course j.\n    boolean[][] isPrerequisite = new boolean[numCourses][numCourses];\n\n    for (int i = 0; i < numCourses; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] prerequisite : prerequisites) {\n      final int u = prerequisite[0];\n      final int v = prerequisite[1];\n      graph[u].add(v);\n    }\n\n    // DFS from every course.\n    for (int i = 0; i < numCourses; ++i)\n      dfs(graph, i, isPrerequisite[i]);\n\n    for (int[] query : queries) {\n      final int u = query[0];\n      final int v = query[1];\n      ans.add(isPrerequisite[u][v]);\n    }\n\n    return ans;\n  }\n\n  public void dfs(const vector<vector<int>> &graph, int u, boolean[] used) {\n    for (final int v : graph[u]) {\n      if (used[v])\n        continue;\n      used[v] = true;\n      dfs(graph, v, used);\n    }\n  }\n}\nclass Solution {\n  public List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {\n    List<Boolean> ans = new ArrayList<>();\n    List<Integer>[] graph = new List[numCourses];\n\n    for (int i = 0; i < numCourses; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] prerequisite : prerequisites) {\n      final int u = prerequisite[0];\n      final int v = prerequisite[1];\n      graph[u].add(v);\n    }\n\n    // isPrerequisite[i][j] := true if course i is a prerequisite of course j.\n    boolean[][] isPrerequisite = new boolean[numCourses][numCourses];\n\n    // DFS from every course.\n    for (int i = 0; i < numCourses; ++i)\n      dfs(graph, i, isPrerequisite[i]);\n\n    for (int[] query : queries) {\n      final int u = query[0];\n      final int v = query[1];\n      ans.add(isPrerequisite[u][v]);\n    }\n\n    return ans;\n  }\n\n  public void dfs(List<Integer>[] graph, int u, boolean[] used) {\n    for (final int v : graph[u]) {\n      if (used[v])\n        continue;\n      used[v] = true;\n      dfs(graph, v, used);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def checkIfPrerequisite(self, numCourses: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:\n    graph = [[] for _ in range(numCourses)]\n    # isPrerequisite[i][j] := True if course i is a prerequisite of course j.\n    isPrerequisite = [[False] * numCourses for _ in range(numCourses)]\n\n    for u, v in prerequisites:\n      graph[u].append(v)\n\n    # DFS from every course.\n    for i in range(numCourses):\n      self._dfs(graph, i, isPrerequisite[i])\n\n    return [isPrerequisite[u][v] for u, v in queries]\n\n  def _dfs(self, graph: List[List[int]], u: int, used: List[bool]) -> None:\n    for v in graph[u]:\n      if used[v]:\n        continue\n      used[v] = True\n      self._dfs(graph, v, used)\n",
                "lang_text": "py"
            }
        }
    }
}