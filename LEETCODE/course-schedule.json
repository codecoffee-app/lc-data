{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "207",
            "title": "Course Schedule",
            "titleSlug": "course-schedule",
            "content": "<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you <strong>must</strong> take course <code>b<sub>i</sub></code> first if you want to take course <code>a<sub>i</sub></code>.</p>\n\n<ul>\n\t<li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li>\n</ul>\n\n<p>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0],[0,1]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numCourses &lt;= 2000</code></li>\n\t<li><code>0 &lt;= prerequisites.length &lt;= 5000</code></li>\n\t<li><code>prerequisites[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li>\n\t<li>All the pairs prerequisites[i] are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 15598,
            "dislikes": 636,
            "similarQuestions": "[{\"title\": \"Course Schedule II\", \"titleSlug\": \"course-schedule-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Graph Valid Tree\", \"titleSlug\": \"graph-valid-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Height Trees\", \"titleSlug\": \"minimum-height-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Course Schedule III\", \"titleSlug\": \"course-schedule-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Build a Matrix With Conditions\", \"titleSlug\": \"build-a-matrix-with-conditions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.4M\", \"totalSubmission\": \"3.1M\", \"totalAcceptedRaw\": 1419212, \"totalSubmissionRaw\": 3058405, \"acRate\": \"46.4%\"}",
            "hints": [
                "This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
                "<a href=\"https://www.cs.princeton.edu/~wayne/kleinberg-tardos/pdf/03Graphs.pdf\" target=\"_blank\">Topological Sort via DFS</a> - A great tutorial explaining the basic concepts of Topological Sort.",
                "Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>."
            ],
            "rephrased": {
                "body": "You are given `numCourses` courses, labeled from `0` to `numCourses - 1`.  You are also given an array `prerequisites` where `prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]` which means you must take course `b<sub>i</sub>` before taking course `a<sub>i</sub>`.\n\nDetermine if it is possible to finish all courses.",
                "constraints": [
                    "1 <= numCourses <= 2000",
                    "0 <= prerequisites.length <= 5000",
                    "prerequisites[i].length == 2",
                    "0 <= a<sub>i</sub>, b<sub>i</sub> < numCourses",
                    "All the pairs prerequisites[i] are unique."
                ],
                "testcases": [
                    {
                        "input": "numCourses = 2, prerequisites = [[1,0]]",
                        "output": "true",
                        "explanation": "There are two courses. Course 1 requires course 0 to be taken first. This is a valid ordering, so all courses can be finished."
                    },
                    {
                        "input": "numCourses = 2, prerequisites = [[1,0],[0,1]]",
                        "output": "false",
                        "explanation": "There are two courses. Course 1 requires course 0, and course 0 requires course 1. This creates a cycle, making it impossible to finish all courses."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "course-schedule-ii",
                "title": "Course Schedule II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "graph-valid-tree",
                "title": "Graph Valid Tree",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-height-trees",
                "title": "Minimum Height Trees",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "course-schedule-iii",
                "title": "Course Schedule III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "build-a-matrix-with-conditions",
                "title": "Build a Matrix With Conditions",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
            "<a href=\"https://www.cs.princeton.edu/~wayne/kleinberg-tardos/pdf/03Graphs.pdf\" target=\"_blank\">Topological Sort via DFS</a> - A great tutorial explaining the basic concepts of Topological Sort.",
            "Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>."
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "enum class State { kInit, kVisiting, kVisited };\n\nclass Solution {\n public:\n  bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n    vector<vector<int>> graph(numCourses);\n    vector<State> states(numCourses);\n\n    for (const vector<int>& prerequisite : prerequisites) {\n      const int u = prerequisite[1];\n      const int v = prerequisite[0];\n      graph[u].push_back(v);\n    }\n\n    for (int i = 0; i < numCourses; ++i)\n      if (hasCycle(graph, i, states))\n        return false;\n\n    return true;\n  }\n\n private:\n  bool hasCycle(const vector<vector<int>>& graph, int u,\n                vector<State>& states) {\n    if (states[u] == State::kVisiting)\n      return true;\n    if (states[u] == State::kVisited)\n      return false;\n\n    states[u] = State::kVisiting;\n    for (const int v : graph[u])\n      if (hasCycle(graph, v, states))\n        return true;\n    states[u] = State::kVisited;\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "enum State { kInit, kVisiting, kVisited }\n\nclass Solution {\n  public boolean canFinish(int numCourses, int[][] prerequisites) {\n    List<Integer>[] graph = new List[numCourses];\n    State[] states = new State[numCourses];\n\n    for (int i = 0; i < numCourses; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] prerequisite : prerequisites) {\n      final int u = prerequisite[1];\n      final int v = prerequisite[0];\n      graph[u].add(v);\n    }\n\n    for (int i = 0; i < numCourses; ++i)\n      if (hasCycle(graph, i, states))\n        return false;\n\n    return true;\n  }\n\n  private boolean hasCycle(List<Integer>[] graph, int u, State[] states) {\n    if (states[u] == State.kVisiting)\n      return true;\n    if (states[u] == State.kVisited)\n      return false;\n\n    states[u] = State.kVisiting;\n    for (final int v : graph[u])\n      if (hasCycle(graph, v, states))\n        return true;\n    states[u] = State.kVisited;\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from enum import Enum\n\n\nclass State(Enum):\n  kInit = 0\n  kVisiting = 1\n  kVisited = 2\n\n\nclass Solution:\n  def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n    graph = [[] for _ in range(numCourses)]\n    states = [State.kInit] * numCourses\n\n    for v, u in prerequisites:\n      graph[u].append(v)\n\n    def hasCycle(u: int) -> bool:\n      if states[u] == State.kVisiting:\n        return True\n      if states[u] == State.kVisited:\n        return False\n\n      states[u] = State.kVisiting\n      if any(hasCycle(v) for v in graph[u]):\n        return True\n      states[u] = State.kVisited\n\n      return False\n\n    return not any(hasCycle(i) for i in range(numCourses))\n",
                "lang_text": "py"
            }
        }
    }
}