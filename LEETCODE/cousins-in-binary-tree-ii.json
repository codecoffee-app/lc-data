{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2641",
            "title": "Cousins in Binary Tree II",
            "titleSlug": "cousins-in-binary-tree-ii",
            "content": "<p>Given the <code>root</code> of a binary tree, replace the value of each node in the tree with the <strong>sum of all its cousins&#39; values</strong>.</p>\n\n<p>Two nodes of a binary tree are <strong>cousins</strong> if they have the same depth with different parents.</p>\n\n<p>Return <em>the </em><code>root</code><em> of the modified tree</em>.</p>\n\n<p><strong>Note</strong> that the depth of a node is the number of edges in the path from the root node to it.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/11/example11.png\" style=\"width: 571px; height: 151px;\" />\n<pre>\n<strong>Input:</strong> root = [5,4,9,1,10,null,7]\n<strong>Output:</strong> [0,0,0,7,7,null,11]\n<strong>Explanation:</strong> The diagram above shows the initial binary tree and the binary tree after changing the value of each node.\n- Node with value 5 does not have any cousins so its sum is 0.\n- Node with value 4 does not have any cousins so its sum is 0.\n- Node with value 9 does not have any cousins so its sum is 0.\n- Node with value 1 has a cousin with value 7 so its sum is 7.\n- Node with value 10 has a cousin with value 7 so its sum is 7.\n- Node with value 7 has cousins with values 1 and 10 so its sum is 11.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/11/diagram33.png\" style=\"width: 481px; height: 91px;\" />\n<pre>\n<strong>Input:</strong> root = [3,1,2]\n<strong>Output:</strong> [0,0,0]\n<strong>Explanation:</strong> The diagram above shows the initial binary tree and the binary tree after changing the value of each node.\n- Node with value 3 does not have any cousins so its sum is 0.\n- Node with value 1 does not have any cousins so its sum is 0.\n- Node with value 2 does not have any cousins so its sum is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 513,
            "dislikes": 8,
            "similarQuestions": "[{\"title\": \"Cousins in Binary Tree\", \"titleSlug\": \"cousins-in-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Level Sum of a Binary Tree\", \"titleSlug\": \"maximum-level-sum-of-a-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.9K\", \"totalSubmission\": \"24.7K\", \"totalAcceptedRaw\": 16868, \"totalSubmissionRaw\": 24735, \"acRate\": \"68.2%\"}",
            "hints": [
                "Use DFS two times.",
                "For the first time, find the sum of values of all the levels of the binary tree.",
                "For the second time, update the value of the node with the sum of the values of the current level - sibling node\u2019s values."
            ],
            "rephrased": {
                "body": "Given the root of a binary tree, modify the tree such that each node's value is replaced by the sum of its cousins' values.  Two nodes are considered cousins if they are at the same depth but have different parents. Return the root of the modified tree.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 10<sup>5</sup>].",
                    "1 <= Node.val <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "[5,4,9,1,10,null,7]",
                        "output": "[0,0,0,7,7,null,11]",
                        "explanation": "The root and its immediate children (4 and 9) have no cousins, so their values become 0. The cousins of 1 and 10 is 7, thus values become 7. The cousins of 7 are 1 and 10, thus values become 11."
                    },
                    {
                        "input": "[3,1,2]",
                        "output": "[0,0,0]",
                        "explanation": "The root and its children (1 and 2) have no cousins, so their values are all 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "cousins-in-binary-tree",
                "title": "Cousins in Binary Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-level-sum-of-a-binary-tree",
                "title": "Maximum Level Sum of a Binary Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use DFS two times.",
            "For the first time, find the sum of values of all the levels of the binary tree.",
            "For the second time, update the value of the node with the sum of the values of the current level - sibling node\u2019s values."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* replaceValueInTree(TreeNode* root) {\n    vector<int> levelSums;\n    dfs(root, 0, levelSums);\n    return replace(root, 0, new TreeNode(0), levelSums);\n  }\n\n private:\n  void dfs(TreeNode* root, int level, vector<int>& levelSums) {\n    if (root == nullptr)\n      return;\n    if (levelSums.size() == level)\n      levelSums.push_back(0);\n    levelSums[level] += root->val;\n    dfs(root->left, level + 1, levelSums);\n    dfs(root->right, level + 1, levelSums);\n  }\n\n  TreeNode* replace(TreeNode* root, int level, TreeNode* curr,\n                    const vector<int>& levelSums) {\n    const int nextLevel = level + 1;\n    const int nextLevelCousinsSum =\n        nextLevel >= levelSums.size()\n            ? 0\n            : levelSums[nextLevel] -\n                  (root->left == nullptr ? 0 : root->left->val) -\n                  (root->right == nullptr ? 0 : root->right->val);\n    if (root->left != nullptr) {\n      curr->left = new TreeNode(nextLevelCousinsSum);\n      replace(root->left, level + 1, curr->left, levelSums);\n    }\n    if (root->right != nullptr) {\n      curr->right = new TreeNode(nextLevelCousinsSum);\n      replace(root->right, level + 1, curr->right, levelSums);\n    }\n    return curr;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode replaceValueInTree(TreeNode root) {\n    List<Integer> levelSums = new ArrayList<>();\n    dfs(root, 0, levelSums);\n    return replace(root, 0, new TreeNode(0), levelSums);\n  }\n\n  private void dfs(TreeNode root, int level, List<Integer> levelSums) {\n    if (root == null)\n      return;\n    if (levelSums.size() == level)\n      levelSums.add(0);\n    levelSums.set(level, levelSums.get(level) + root.val);\n    dfs(root.left, level + 1, levelSums);\n    dfs(root.right, level + 1, levelSums);\n  }\n\n  private TreeNode replace(TreeNode root, int level, TreeNode curr, List<Integer> levelSums) {\n    final int nextLevel = level + 1;\n    final int nextLevelCousinsSum = nextLevel >= levelSums.size()\n                                        ? 0\n                                        : levelSums.get(nextLevel) -\n                                              (root.left == null ? 0 : root.left.val) -\n                                              (root.right == null ? 0 : root.right.val);\n    if (root.left != null) {\n      curr.left = new TreeNode(nextLevelCousinsSum);\n      replace(root.left, level + 1, curr.left, levelSums);\n    }\n    if (root.right != null) {\n      curr.right = new TreeNode(nextLevelCousinsSum);\n      replace(root.right, level + 1, curr.right, levelSums);\n    }\n    return curr;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def replaceValueInTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n    levelSums = []\n\n    def dfs(root: Optional[TreeNode], level: int) -> None:\n      if not root:\n        return\n      if len(levelSums) == level:\n        levelSums.append(0)\n      levelSums[level] += root.val\n      dfs(root.left, level + 1)\n      dfs(root.right, level + 1)\n\n    def replace(root: Optional[TreeNode], level: int, curr: Optional[TreeNode]) -> Optional[TreeNode]:\n      nextLevel = level + 1\n      nextLevelCousinsSum = (levelSums[nextLevel] if nextLevel < len(levelSums) else 0) - \\\n          (root.left.val if root.left else 0) - \\\n          (root.right.val if root.right else 0)\n      if root.left:\n        curr.left = TreeNode(nextLevelCousinsSum)\n        replace(root.left, level + 1, curr.left)\n      if root.right:\n        curr.right = TreeNode(nextLevelCousinsSum)\n        replace(root.right, level + 1, curr.right)\n      return curr\n\n    dfs(root, 0)\n    return replace(root, 0, TreeNode(0))\n",
                "lang_text": "py"
            }
        }
    }
}