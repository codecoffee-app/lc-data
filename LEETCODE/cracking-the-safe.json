{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "753",
            "title": "Cracking the Safe",
            "titleSlug": "cracking-the-safe",
            "content": "<p>There is a safe protected by a password. The password is a sequence of <code>n</code> digits where each digit can be in the range <code>[0, k - 1]</code>.</p>\n\n<p>The safe has a peculiar way of checking the password. When you enter in a sequence, it checks the <strong>most recent </strong><code>n</code><strong> digits</strong> that were entered each time you type a digit.</p>\n\n<ul>\n\t<li>For example, the correct password is <code>&quot;345&quot;</code> and you enter in <code>&quot;012345&quot;</code>:\n\n\t<ul>\n\t\t<li>After typing <code>0</code>, the most recent <code>3</code> digits is <code>&quot;0&quot;</code>, which is incorrect.</li>\n\t\t<li>After typing <code>1</code>, the most recent <code>3</code> digits is <code>&quot;01&quot;</code>, which is incorrect.</li>\n\t\t<li>After typing <code>2</code>, the most recent <code>3</code> digits is <code>&quot;012&quot;</code>, which is incorrect.</li>\n\t\t<li>After typing <code>3</code>, the most recent <code>3</code> digits is <code>&quot;123&quot;</code>, which is incorrect.</li>\n\t\t<li>After typing <code>4</code>, the most recent <code>3</code> digits is <code>&quot;234&quot;</code>, which is incorrect.</li>\n\t\t<li>After typing <code>5</code>, the most recent <code>3</code> digits is <code>&quot;345&quot;</code>, which is correct and the safe unlocks.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>any string of <strong>minimum length</strong> that will unlock the safe <strong>at some point</strong> of entering it</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 2\n<strong>Output:</strong> &quot;10&quot;\n<strong>Explanation:</strong> The password is a single digit, so enter each digit. &quot;01&quot; would also unlock the safe.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, k = 2\n<strong>Output:</strong> &quot;01100&quot;\n<strong>Explanation:</strong> For each possible password:\n- &quot;00&quot; is typed in starting from the 4<sup>th</sup> digit.\n- &quot;01&quot; is typed in starting from the 1<sup>st</sup> digit.\n- &quot;10&quot; is typed in starting from the 3<sup>rd</sup> digit.\n- &quot;11&quot; is typed in starting from the 2<sup>nd</sup> digit.\nThus &quot;01100&quot; will unlock the safe. &quot;10011&quot;, and &quot;11001&quot; would also unlock the safe.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 4</code></li>\n\t<li><code>1 &lt;= k &lt;= 10</code></li>\n\t<li><code>1 &lt;= k<sup>n</sup> &lt;= 4096</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 517,
            "dislikes": 83,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Eulerian Circuit",
                    "slug": "eulerian-circuit"
                }
            ],
            "stats": "{\"totalAccepted\": \"56.3K\", \"totalSubmission\": \"99.7K\", \"totalAcceptedRaw\": 56327, \"totalSubmissionRaw\": 99741, \"acRate\": \"56.5%\"}",
            "hints": [
                "We can think of this problem as the problem of finding an Euler path (a path visiting every edge exactly once) on the following graph: there are $$k^{n-1}$$ nodes with each node having $$k$$ edges.  It turns out this graph always has an Eulerian circuit (path starting where it ends.)\r\n\r\nWe should visit each node in \"post-order\" so as to not get stuck in the graph prematurely."
            ],
            "rephrased": {
                "body": "You are trying to open a safe that requires a sequence of `n` digits as the password. Each digit can be a number from 0 to `k - 1`.  The safe checks the password by examining the *most recent* `n` digits entered. Find the shortest possible string of digits that, when entered, will unlock the safe at some point.",
                "constraints": [
                    "1 <= n <= 4",
                    "1 <= k <= 10",
                    "1 <= k<sup>n</sup> <= 4096"
                ],
                "testcases": [
                    {
                        "input": "n = 1, k = 2",
                        "output": "\"10\"",
                        "explanation": "The password is a single digit.  Entering \"10\" covers both possible passwords, '1' and '0'. \"01\" would also be a valid solution."
                    },
                    {
                        "input": "n = 2, k = 2",
                        "output": "\"01100\"",
                        "explanation": "This input sequence covers all possible 2-digit passwords (00, 01, 10, 11). Other valid outputs include \"10011\" and \"11001\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "We can think of this problem as the problem of finding an Euler path (a path visiting every edge exactly once) on the following graph: there are $$k^{n-1}$$ nodes with each node having $$k$$ edges.  It turns out this graph always has an Eulerian circuit (path starting where it ends.)\r\n\r\nWe should visit each node in \"post-order\" so as to not get stuck in the graph prematurely."
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Eulerian Circuit",
                "slug": "eulerian-circuit"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string crackSafe(int n, int k) {\n    string ans(n, '0');\n    dfs(pow(k, n), n, k, {ans}, ans);\n    return ans;\n  }\n\n private:\n  bool dfs(int passwordSize, int n, int k, unordered_set<string>&& seen,\n           string& path) {\n    if (seen.size() == passwordSize)\n      return true;\n\n    string prefix = path.substr(path.length() - n + 1);\n\n    for (char c = '0'; c < '0' + k; ++c) {\n      prefix.push_back(c);\n      if (!seen.count(prefix)) {\n        seen.insert(prefix);\n        path.push_back(c);\n        if (dfs(passwordSize, n, k, move(seen), path))\n          return true;\n        path.pop_back();\n        seen.erase(prefix);\n      }\n      prefix.pop_back();\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String crackSafe(int n, int k) {\n    final String allZeros = \"0\".repeat(n);\n    StringBuilder sb = new StringBuilder(allZeros);\n    dfs((int) Math.pow(k, n), n, k, new HashSet<>(Arrays.asList(allZeros)), sb);\n    return sb.toString();\n  }\n\n  private boolean dfs(int passwordSize, int n, int k, Set<String> seen, StringBuilder path) {\n    if (seen.size() == passwordSize)\n      return true;\n\n    StringBuilder prefix = new StringBuilder(path.substring(path.length() - n + 1));\n\n    for (char c = '0'; c < '0' + k; ++c) {\n      prefix.append(c);\n      final String prefixStr = prefix.toString();\n      if (!seen.contains(prefixStr)) {\n        seen.add(prefixStr);\n        path.append(c);\n        if (dfs(passwordSize, n, k, seen, path))\n          return true;\n        path.deleteCharAt(path.length() - 1);\n        seen.remove(prefixStr);\n      }\n      prefix.deleteCharAt(prefix.length() - 1);\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def crackSafe(self, n: int, k: int) -> str:\n    passwordSize = k**n\n    path = '0' * n\n    seen = set()\n    seen.add(path)\n\n    def dfs(path: str) -> str:\n      if len(seen) == passwordSize:\n        return path\n\n      for c in map(str, range(k)):\n        node = path[-n + 1:] + c if n > 1 else c\n        if node not in seen:\n          seen.add(node)\n          res = dfs(path + c)\n          if res:\n            return res\n          seen.remove(node)\n\n    return dfs(path)\n",
                "lang_text": "py"
            }
        }
    }
}