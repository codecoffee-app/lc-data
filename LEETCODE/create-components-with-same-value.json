{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2440",
            "title": "Create Components With Same Value",
            "titleSlug": "create-components-with-same-value",
            "content": "<p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code><font face=\"monospace\">nums</font></code> of length <code>n</code> where <code>nums[i]</code> represents the value of the <code>i<sup>th</sup></code> node. You are also given a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>You are allowed to <strong>delete</strong> some edges, splitting the tree into multiple connected components. Let the <strong>value</strong> of a component be the sum of <strong>all</strong> <code>nums[i]</code> for which node <code>i</code> is in the component.</p>\n\n<p>Return<em> the <strong>maximum</strong> number of edges you can delete, such that every connected component in the tree has the same value.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/26/diagramdrawio.png\" style=\"width: 441px; height: 351px;\" />\n<pre>\n<strong>Input:</strong> nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]] \n<strong>Output:</strong> 2 \n<strong>Explanation:</strong> The above figure shows how we can delete the edges [0,1] and [3,4]. The created components are nodes [0], [1,2,3] and [4]. The sum of the values in each component equals 6. It can be proven that no better deletion exists, so the answer is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2], edges = []\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no edges to be deleted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>nums.length == n</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 371,
            "dislikes": 6,
            "similarQuestions": "[{\"title\": \"Equal Tree Partition\", \"titleSlug\": \"equal-tree-partition\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of K-Divisible Components\", \"titleSlug\": \"maximum-number-of-k-divisible-components\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.8K\", \"totalSubmission\": \"10.8K\", \"totalAcceptedRaw\": 5829, \"totalSubmissionRaw\": 10834, \"acRate\": \"53.8%\"}",
            "hints": [
                "Consider all divisors of the sum of values."
            ],
            "rephrased": {
                "body": "Given an undirected tree with `n` nodes labeled from `0` to `n - 1`. You are given a 0-indexed integer array `nums` of length `n` where `nums[i]` represents the value of the `i<sup>th</sup>` node. You are also given a 2D integer array `edges` of length `n - 1` where `edges[i] = [a<sub>i</sub>, b<sub>i</sub>]` indicates that there is an edge between nodes `a<sub>i</sub>` and `b<sub>i</sub>` in the tree. You are allowed to delete some edges, splitting the tree into multiple connected components. The value of a component is defined as the sum of all `nums[i]` for which node `i` is in the component.  Return the maximum number of edges you can delete such that every connected component in the tree has the same value.",
                "constraints": [
                    "1 <= n <= 2 * 10<sup>4</sup>",
                    "nums.length == n",
                    "1 <= nums[i] <= 50",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "0 <= edges[i][0], edges[i][1] <= n - 1",
                    "edges represents a valid tree."
                ],
                "testcases": [
                    {
                        "input": "nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]]",
                        "output": "2",
                        "explanation": "Deleting the edges [0,1] and [3,4] results in components [0], [1,2,3], and [4]. The sum of values in each component is 6. No better deletion exists."
                    },
                    {
                        "input": "nums = [2], edges = []",
                        "output": "0",
                        "explanation": "There are no edges to be deleted."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "equal-tree-partition",
                "title": "Equal Tree Partition",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-k-divisible-components",
                "title": "Maximum Number of K-Divisible Components",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Consider all divisors of the sum of values."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int componentValue(vector<int>& nums, vector<vector<int>>& edges) {\n    const int n = nums.size();\n    const int sum = accumulate(nums.begin(), nums.end(), 0);\n    vector<vector<int>> tree(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      tree[u].push_back(v);\n      tree[v].push_back(u);\n    }\n\n    for (int i = n; i > 1; --i)\n      // split the tree into i parts, i.e., delete (i - 1) edges\n      if (sum % i == 0 && dfs(nums, tree, 0, sum / i, vector<bool>(n)) == 0)\n        return i - 1;\n\n    return 0;\n  }\n\n private:\n  static constexpr int kMax = 1'000'000'000;\n\n  // Returns the sum of the subtree rooted at u minus the sum of the deleted\n  // subtrees.\n  int dfs(const vector<int>& nums, const vector<vector<int>>& tree, int u,\n          int target, vector<bool>&& seen) {\n    int sum = nums[u];\n    seen[u] = true;\n\n    for (const int v : tree[u]) {\n      if (seen[v])\n        continue;\n      sum += dfs(nums, tree, v, target, move(seen));\n      if (sum > target)\n        return kMax;\n    }\n\n    // Delete the tree that has sum == target\n    if (sum == target)\n      return 0;\n    return sum;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int componentValue(int[] nums, int[][] edges) {\n    final int n = nums.length;\n    final int sum = Arrays.stream(nums).sum();\n    List<Integer>[] tree = new List[n];\n\n    for (int i = 0; i < tree.length; ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      tree[u].add(v);\n      tree[v].add(u);\n    }\n\n    for (int i = n; i > 1; --i)\n      // split the tree into i parts, i.e., delete (i - 1) edges\n      if (sum % i == 0 && dfs(nums, tree, 0, sum / i, new boolean[n]) == 0)\n        return i - 1;\n\n    return 0;\n  }\n\n  private static final int kMax = 1_000_000_000;\n\n  // Returns the sum of the subtree rooted at u minus the sum of the deleted subtrees.\n  private int dfs(int[] nums, List<Integer>[] tree, int u, int target, boolean[] seen) {\n    int sum = nums[u];\n    seen[u] = true;\n\n    for (final int v : tree[u]) {\n      if (seen[v])\n        continue;\n      sum += dfs(nums, tree, v, target, seen);\n      if (sum > target)\n        return kMax;\n    }\n\n    // Delete the tree that has sum == target\n    if (sum == target)\n      return 0;\n    return sum;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def componentValue(self, nums: List[int], edges: List[List[int]]) -> int:\n    kMax = 1_000_000_000\n    n = len(nums)\n    summ = sum(nums)\n    tree = [[] for _ in range(n)]\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    # Returns the sum of the subtree rooted at u minus the sum of the deleted subtrees.\n    def dfs(u: int, target: int, seen: Set[bool]) -> int:\n      summ = nums[u]\n      seen.add(u)\n\n      for v in tree[u]:\n        if v in seen:\n          continue\n        summ += dfs(v, target, seen)\n        if summ > target:\n          return kMax\n\n      # Delete the tree that has sum == target\n      if summ == target:\n        return 0\n      return summ\n\n    for i in range(n, 1, -1):\n      # split the tree into i parts, i.e., delete (i - 1) edges\n      if summ % i == 0 and dfs(0, summ // i, set()) == 0:\n        return i - 1\n\n    return 0\n",
                "lang_text": "py"
            }
        }
    }
}