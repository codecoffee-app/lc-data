{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "321",
            "title": "Create Maximum Number",
            "titleSlug": "create-maximum-number",
            "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> of lengths <code>m</code> and <code>n</code> respectively. <code>nums1</code> and <code>nums2</code> represent the digits of two numbers. You are also given an integer <code>k</code>.</p>\n\n<p>Create the maximum number of length <code>k &lt;= m + n</code> from digits of the two numbers. The relative order of the digits from the same array must be preserved.</p>\n\n<p>Return an array of the <code>k</code> digits representing the answer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\n<strong>Output:</strong> [9,8,6,5,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [6,7], nums2 = [6,0,4], k = 5\n<strong>Output:</strong> [6,7,6,0,4]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [3,9], nums2 = [8,9], k = 3\n<strong>Output:</strong> [9,8,9]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == nums1.length</code></li>\n\t<li><code>n == nums2.length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 500</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 9</code></li>\n\t<li><code>1 &lt;= k &lt;= m + n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1845,
            "dislikes": 342,
            "similarQuestions": "[{\"title\": \"Remove K Digits\", \"titleSlug\": \"remove-k-digits\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Swap\", \"titleSlug\": \"maximum-swap\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"58K\", \"totalSubmission\": \"195.6K\", \"totalAcceptedRaw\": 57963, \"totalSubmissionRaw\": 195568, \"acRate\": \"29.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two integer arrays, `nums1` of length `m` and `nums2` of length `n`, representing the digits of two numbers, and an integer `k` such that `k <= m + n`, create the maximum possible number of length `k` using digits from `nums1` and `nums2`.  The relative order of digits within each original array must be maintained. Return an array representing the `k` digits of the created maximum number.",
                "constraints": [
                    "m == nums1.length",
                    "n == nums2.length",
                    "1 <= m, n <= 500",
                    "0 <= nums1[i], nums2[i] <= 9",
                    "1 <= k <= m + n"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5",
                        "output": "[9,8,6,5,3]",
                        "explanation": null
                    },
                    {
                        "input": "nums1 = [6,7], nums2 = [6,0,4], k = 5",
                        "output": "[6,7,6,0,4]",
                        "explanation": null
                    },
                    {
                        "input": "nums1 = [3,9], nums2 = [8,9], k = 3",
                        "output": "[9,8,9]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "remove-k-digits",
                "title": "Remove K Digits",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-swap",
                "title": "Maximum Swap",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {\n    vector<int> ans;\n\n    for (int k1 = 0; k1 <= k; ++k1) {\n      const int k2 = k - k1;\n      if (k1 > nums1.size() || k2 > nums2.size())\n        continue;\n      ans = max(ans, maxNumber(maxNumber(nums1, k1), maxNumber(nums2, k2)));\n    }\n\n    return ans;\n  }\n\n private:\n  vector<int> maxNumber(const vector<int>& nums, int k) {\n    if (k == 0)\n      return {};\n\n    vector<int> ans;\n    int toPop = nums.size() - k;\n\n    for (const int num : nums) {\n      while (!ans.empty() && ans.back() < num && toPop-- > 0)\n        ans.pop_back();\n      ans.push_back(num);\n    }\n\n    return {ans.begin(), ans.begin() + k};\n  }\n\n private:\n  vector<int> maxNumber(const vector<int>& nums1, const vector<int>& nums2) {\n    vector<int> ans;\n\n    auto s1 = nums1.cbegin();\n    auto s2 = nums2.cbegin();\n\n    while (s1 != nums1.cend() || s2 != nums2.cend())\n      if (lexicographical_compare(s1, nums1.cend(), s2, nums2.cend()))\n        ans.push_back(*s2++);\n      else\n        ans.push_back(*s1++);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}