{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1649",
            "title": "Create Sorted Array through Instructions",
            "titleSlug": "create-sorted-array-through-instructions",
            "content": "<p>Given an integer array <code>instructions</code>, you are asked to create a sorted array from the elements in <code>instructions</code>. You start with an empty container <code>nums</code>. For each element from <strong>left to right</strong> in <code>instructions</code>, insert it into <code>nums</code>. The <strong>cost</strong> of each insertion is the <b>minimum</b> of the following:</p>\r\n\r\n<ul>\r\n\t<li>The number of elements currently in <code>nums</code> that are <strong>strictly less than</strong> <code>instructions[i]</code>.</li>\r\n\t<li>The number of elements currently in <code>nums</code> that are <strong>strictly greater than</strong> <code>instructions[i]</code>.</li>\r\n</ul>\r\n\r\n<p>For example, if inserting element <code>3</code> into <code>nums = [1,2,3,5]</code>, the <strong>cost</strong> of insertion is <code>min(2, 1)</code> (elements <code>1</code> and <code>2</code> are less than <code>3</code>, element <code>5</code> is greater than <code>3</code>) and <code>nums</code> will become <code>[1,2,3,3,5]</code>.</p>\r\n\r\n<p>Return <em>the <strong>total cost</strong> to insert all elements from </em><code>instructions</code><em> into </em><code>nums</code>. Since the answer may be large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code></p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> instructions = [1,5,6,2]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> Begin with nums = [].\r\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\r\nInsert 5 with cost min(1, 0) = 0, now nums = [1,5].\r\nInsert 6 with cost min(2, 0) = 0, now nums = [1,5,6].\r\nInsert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].\r\nThe total cost is 0 + 0 + 0 + 1 = 1.</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> instructions = [1,2,3,6,5,4]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> Begin with nums = [].\r\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\r\nInsert 2 with cost min(1, 0) = 0, now nums = [1,2].\r\nInsert 3 with cost min(2, 0) = 0, now nums = [1,2,3].\r\nInsert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].\r\nInsert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].\r\nInsert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].\r\nThe total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> instructions = [1,3,3,3,2,4,2,1,2]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> Begin with nums = [].\r\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\r\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3].\r\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3].\r\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].\r\nInsert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].\r\nInsert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].\r\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].\r\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].\r\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].\r\nThe total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= instructions.length &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>1 &lt;= instructions[i] &lt;= 10<sup>5</sup></code></li>\r\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 627,
            "dislikes": 77,
            "similarQuestions": "[{\"title\": \"Count Good Triplets in an Array\", \"titleSlug\": \"count-good-triplets-in-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Substring of One Repeating Character\", \"titleSlug\": \"longest-substring-of-one-repeating-character\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Sort Array by Moving Items to Empty Space\", \"titleSlug\": \"sort-array-by-moving-items-to-empty-space\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Merge Sort",
                    "slug": "merge-sort"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.5K\", \"totalSubmission\": \"64K\", \"totalAcceptedRaw\": 24465, \"totalSubmissionRaw\": 63987, \"acRate\": \"38.2%\"}",
            "hints": [
                "This problem is closely related to finding the number of inversions in an array",
                "if i know the position in which i will insert the i-th element in I can find the minimum cost to insert it"
            ],
            "rephrased": {
                "body": "Given an integer array `instructions`, create a sorted array from its elements. You start with an empty container `nums`.  For each element in `instructions` (from left to right), insert it into `nums`. The cost of each insertion is the minimum of the following:\n\n*   The number of elements currently in `nums` that are strictly less than `instructions[i]`. \n*   The number of elements currently in `nums` that are strictly greater than `instructions[i]`.\n\nReturn the total cost to insert all elements from `instructions` into `nums`. Since the answer may be large, return it modulo `10^9 + 7`.",
                "constraints": [
                    "1 <= instructions.length <= 10^5",
                    "1 <= instructions[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1,5,6,2]",
                        "output": "1",
                        "explanation": "Initially, nums = [].\nInsert 1: cost = min(0, 0) = 0, nums = [1].\nInsert 5: cost = min(1, 0) = 0, nums = [1, 5].\nInsert 6: cost = min(2, 0) = 0, nums = [1, 5, 6].\nInsert 2: cost = min(1, 2) = 1, nums = [1, 2, 5, 6].\nTotal cost = 0 + 0 + 0 + 1 = 1."
                    },
                    {
                        "input": "[1,2,3,6,5,4]",
                        "output": "3",
                        "explanation": "Initially, nums = [].\nInsert 1: cost = min(0, 0) = 0, nums = [1].\nInsert 2: cost = min(1, 0) = 0, nums = [1, 2].\nInsert 3: cost = min(2, 0) = 0, nums = [1, 2, 3].\nInsert 6: cost = min(3, 0) = 0, nums = [1, 2, 3, 6].\nInsert 5: cost = min(3, 1) = 1, nums = [1, 2, 3, 5, 6].\nInsert 4: cost = min(3, 2) = 2, nums = [1, 2, 3, 4, 5, 6].\nTotal cost = 0 + 0 + 0 + 0 + 1 + 2 = 3."
                    },
                    {
                        "input": "[1,3,3,3,2,4,2,1,2]",
                        "output": "4",
                        "explanation": "Initially, nums = [].\nInsert 1: cost = min(0, 0) = 0, nums = [1].\nInsert 3: cost = min(1, 0) = 0, nums = [1, 3].\nInsert 3: cost = min(1, 0) = 0, nums = [1, 3, 3].\nInsert 3: cost = min(1, 0) = 0, nums = [1, 3, 3, 3].\nInsert 2: cost = min(1, 3) = 1, nums = [1, 2, 3, 3, 3].\nInsert 4: cost = min(5, 0) = 0, nums = [1, 2, 3, 3, 3, 4].\nInsert 2: cost = min(1, 4) = 1, nums = [1, 2, 2, 3, 3, 3, 4].\nInsert 1: cost = min(0, 6) = 0, nums = [1, 1, 2, 2, 3, 3, 3, 4].\nInsert 2: cost = min(2, 4) = 2, nums = [1, 1, 2, 2, 2, 3, 3, 3, 4].\nTotal cost = 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-good-triplets-in-an-array",
                "title": "Count Good Triplets in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-substring-of-one-repeating-character",
                "title": "Longest Substring of One Repeating Character",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "sort-array-by-moving-items-to-empty-space",
                "title": "Sort Array by Moving Items to Empty Space",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "This problem is closely related to finding the number of inversions in an array",
            "if i know the position in which i will insert the i-th element in I can find the minimum cost to insert it"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ]
    }
}