{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1192",
            "title": "Critical Connections in a Network",
            "titleSlug": "critical-connections-in-a-network",
            "content": "<p>There are <code>n</code> servers numbered from <code>0</code> to <code>n - 1</code> connected by undirected server-to-server <code>connections</code> forming a network where <code>connections[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> represents a connection between servers <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>. Any server can reach other servers directly or indirectly through the network.</p>\n\n<p>A <em>critical connection</em> is a connection that, if removed, will make some servers unable to reach some other server.</p>\n\n<p>Return all critical connections in the network in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/03/1537_ex1_2.png\" style=\"width: 198px; height: 248px;\" />\n<pre>\n<strong>Input:</strong> n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]\n<strong>Output:</strong> [[1,3]]\n<strong>Explanation:</strong> [[3,1]] is also accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, connections = [[0,1]]\n<strong>Output:</strong> [[0,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>n - 1 &lt;= connections.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>There are no repeated connections.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6006,
            "dislikes": 175,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Biconnected Component",
                    "slug": "biconnected-component"
                }
            ],
            "stats": "{\"totalAccepted\": \"217.7K\", \"totalSubmission\": \"392.8K\", \"totalAcceptedRaw\": 217746, \"totalSubmissionRaw\": 392810, \"acRate\": \"55.4%\"}",
            "hints": [
                "Use Tarjan's algorithm."
            ],
            "rephrased": {
                "body": "Given a network of `n` servers (numbered 0 to `n-1`) connected by undirected server-to-server connections, where `connections[i] = [a_i, b_i]` represents a connection between servers `a_i` and `b_i`.  Any server can reach any other server in the network, either directly or indirectly.",
                "constraints": [
                    "2 <= n <= 10^5",
                    "n - 1 <= connections.length <= 10^5",
                    "0 <= a_i, b_i <= n - 1",
                    "a_i != b_i",
                    "There are no repeated connections."
                ],
                "testcases": [
                    {
                        "input": "n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]",
                        "output": "[[1,3]]",
                        "explanation": "The connection [1, 3] is critical because removing it would disconnect server 3 from the rest of the network.  The order of the connections in the output does not matter. For example [[3,1]] is also accepted."
                    },
                    {
                        "input": "n = 2, connections = [[0,1]]",
                        "output": "[[0,1]]",
                        "explanation": "The connection [0, 1] is critical because removing it would disconnect server 0 from server 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use Tarjan's algorithm."
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Biconnected Component",
                "slug": "biconnected-component"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> criticalConnections(int n,\n                                          vector<vector<int>>& connections) {\n    vector<vector<int>> ans;\n    vector<vector<int>> graph(n);\n\n    for (const vector<int>& connection : connections) {\n      const int u = connection[0];\n      const int v = connection[1];\n      graph[u].push_back(v);\n      graph[v].push_back(u);\n    }\n\n    // rank[i] := min node that node i can reach w/ forward edges\n    // Initialize w/ NO_RANK = -2 to indicate not visited.\n    getRank(graph, 0, 0, vector<int>(n, NO_RANK), ans);\n    return ans;\n  }\n\n private:\n  static constexpr int NO_RANK = -2;\n\n  // Gets the min rank that u can reach w/ forward edges.\n  int getRank(const vector<vector<int>>& graph, int u, int currRank,\n              vector<int>&& rank, vector<vector<int>>& ans) {\n    if (rank[u] != NO_RANK)  // The rank is already determined.\n      return rank[u];\n\n    rank[u] = currRank;\n    int minRank = currRank;\n\n    for (const int v : graph[u]) {\n      // visited || parent (that's why NO_RANK = -2 instead of -1)\n      if (rank[u] == rank.size() || rank[v] == currRank - 1)\n        continue;\n      const int nextRank = getRank(graph, v, currRank + 1, move(rank), ans);\n      // (u, v) is the only way for u go to v.\n      if (nextRank == currRank + 1)\n        ans.push_back({u, v});\n      minRank = min(minRank, nextRank);\n    }\n\n    rank[u] = rank.size();  // Mark as visited\n    return minRank;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {\n    List<List<Integer>> ans = new ArrayList<>();\n    List<Integer>[] graph = new List[n];\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (List<Integer> connection : connections) {\n      final int u = connection.get(0);\n      final int v = connection.get(1);\n      graph[u].add(v);\n      graph[v].add(u);\n    }\n\n    // rank[i] := min node that node i can reach w/ forward edges\n    // Initialize w/ NO_RANK = -2 to indicate not visited.\n    int[] rank = new int[n];\n    Arrays.fill(rank, NO_RANK);\n    getRank(graph, 0, 0, rank, ans);\n    return ans;\n  }\n\n  private static final int NO_RANK = -2;\n\n  // Gets the min rank that u can reach w/ forward edges.\n  private int getRank(List<Integer>[] graph, int u, int myRank, int[] rank,\n                      List<List<Integer>> ans) {\n    if (rank[u] != NO_RANK) // The rank is already been determined.\n      return rank[u];\n\n    rank[u] = myRank;\n    int minRank = myRank;\n\n    for (final int v : graph[u]) {\n      // visited || parent (that's why NO_RANK = -2 instead of -1)\n      if (rank[u] == rank.length || rank[v] == myRank - 1)\n        continue;\n      final int nextRank = getRank(graph, v, myRank + 1, rank, ans);\n      // (u, v) is the only way for u go to v.\n      if (nextRank == myRank + 1)\n        ans.add(Arrays.asList(u, v));\n      minRank = Math.min(minRank, nextRank);\n    }\n\n    rank[u] = rank.length; // Mark as visited\n    return minRank;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}