{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "791",
            "title": "Custom Sort String",
            "titleSlug": "custom-sort-string",
            "content": "<p>You are given two strings order and s. All the characters of <code>order</code> are <strong>unique</strong> and were sorted in some custom order previously.</p>\n\n<p>Permute the characters of <code>s</code> so that they match the order that <code>order</code> was sorted. More specifically, if a character <code>x</code> occurs before a character <code>y</code> in <code>order</code>, then <code>x</code> should occur before <code>y</code> in the permuted string.</p>\n\n<p>Return <em>any permutation of </em><code>s</code><em> that satisfies this property</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> order = &quot;cba&quot;, s = &quot;abcd&quot;\n<strong>Output:</strong> &quot;cbad&quot;\n<strong>Explanation:</strong> \n&quot;a&quot;, &quot;b&quot;, &quot;c&quot; appear in order, so the order of &quot;a&quot;, &quot;b&quot;, &quot;c&quot; should be &quot;c&quot;, &quot;b&quot;, and &quot;a&quot;. \nSince &quot;d&quot; does not appear in order, it can be at any position in the returned string. &quot;dcba&quot;, &quot;cdba&quot;, &quot;cbda&quot; are also valid outputs.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> order = &quot;cbafg&quot;, s = &quot;abcd&quot;\n<strong>Output:</strong> &quot;cbad&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= order.length &lt;= 26</code></li>\n\t<li><code>1 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>order</code> and <code>s</code> consist of lowercase English letters.</li>\n\t<li>All the characters of <code>order</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2774,
            "dislikes": 337,
            "similarQuestions": "[{\"title\": \"Sort the Students by Their Kth Score\", \"titleSlug\": \"sort-the-students-by-their-kth-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"247.1K\", \"totalSubmission\": \"355.9K\", \"totalAcceptedRaw\": 247071, \"totalSubmissionRaw\": 355860, \"acRate\": \"69.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two strings `order` and `s`, where all characters in `order` are unique and represent a custom sorted order. Rearrange the characters in `s` to match the order defined by `order`. Characters appearing earlier in `order` should also appear earlier in the rearranged string. Return any permutation of `s` that satisfies this ordering property.",
                "constraints": [
                    "1 <= order.length <= 26",
                    "1 <= s.length <= 200",
                    "`order` and `s` consist of lowercase English letters.",
                    "All characters of `order` are unique."
                ],
                "testcases": [
                    {
                        "input": "order = \"cba\", s = \"abcd\"",
                        "output": "\"cbad\"",
                        "explanation": "The characters 'a', 'b', and 'c' appear in `order`, so their order in the output should be 'c', 'b', and 'a'.  'd' is not present in `order`, so it can be placed anywhere. Other valid outputs include \"dcba\", \"cdba\", and \"cbda\"."
                    },
                    {
                        "input": "order = \"cbafg\", s = \"abcd\"",
                        "output": "\"cbad\"",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "sort-the-students-by-their-kth-score",
                "title": "Sort the Students by Their Kth Score",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string customSortString(string order, string s) {\n    string ans;\n    vector<int> count(128);\n\n    for (const char c : s)\n      ++count[c];\n\n    for (const char c : order)\n      while (count[c]-- > 0)\n        ans += c;\n\n    for (char c = 'a'; c <= 'z'; ++c)\n      while (count[c]-- > 0)\n        ans += c;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String customSortString(final String order, final String s) {\n    StringBuilder sb = new StringBuilder();\n    int[] count = new int[128];\n\n    for (final char c : s.toCharArray())\n      ++count[c];\n\n    for (final char c : order.toCharArray())\n      while (count[c]-- > 0)\n        sb.append(c);\n\n    for (char c = 'a'; c <= 'z'; ++c)\n      while (count[c]-- > 0)\n        sb.append(c);\n\n    return sb.toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def customSortString(self, order: str, s: str) -> str:\n    ans = \"\"\n    count = [0] * 26\n\n    for c in s:\n      count[ord(c) - ord('a')] += 1\n\n    for c in order:\n      while count[ord(c) - ord('a')] > 0:\n        ans += c\n        count[ord(c) - ord('a')] -= 1\n\n    for c in string.ascii_lowercase:\n      for _ in range(count[ord(c) - ord('a')]):\n        ans += c\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}