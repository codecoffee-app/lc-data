{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "675",
            "title": "Cut Off Trees for Golf Event",
            "titleSlug": "cut-off-trees-for-golf-event",
            "content": "<p>You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an <code>m x n</code> matrix. In this matrix:</p>\n\n<ul>\n\t<li><code>0</code> means the cell cannot be walked through.</li>\n\t<li><code>1</code> represents an empty cell that can be walked through.</li>\n\t<li>A number greater than <code>1</code> represents a tree in a cell that can be walked through, and this number is the tree&#39;s height.</li>\n</ul>\n\n<p>In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.</p>\n\n<p>You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes <code>1</code> (an empty cell).</p>\n\n<p>Starting from the point <code>(0, 0)</code>, return <em>the minimum steps you need to walk to cut off all the trees</em>. If you cannot cut off all the trees, return <code>-1</code>.</p>\n\n<p><strong>Note:</strong> The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/trees1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> forest = [[1,2,3],[0,0,4],[7,6,5]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/trees2.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> forest = [[1,2,3],[0,0,0],[7,6,5]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The trees in the bottom row cannot be accessed as the middle row is blocked.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> forest = [[2,3,4],[0,0,5],[8,7,6]]\n<strong>Output:</strong> 6\n<b>Explanation:</b> You can follow the same path as Example 1 to cut off all the trees.\nNote that you can cut off the first tree at (0, 0) before making any steps.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == forest.length</code></li>\n\t<li><code>n == forest[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>0 &lt;= forest[i][j] &lt;= 10<sup>9</sup></code></li>\n\t<li>Heights of all trees are <strong>distinct</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1186,
            "dislikes": 661,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"65.8K\", \"totalSubmission\": \"192.5K\", \"totalAcceptedRaw\": 65761, \"totalSubmissionRaw\": 192515, \"acRate\": \"34.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "A golf event requires cutting down all trees in a forest represented by an `m x n` matrix.  `0` represents an impassable cell, `1` an empty walkable cell, and a number greater than `1` the height of a tree in a walkable cell.  Trees must be cut down in order of increasing height. Cutting a tree changes its cell value to `1`. Starting from `(0, 0)`, find the minimum steps to cut down all trees. You can move north, east, south, or west in one step. Return `-1` if it's impossible to cut down all trees.",
                "constraints": [
                    "m == forest.length",
                    "n == forest[i].length",
                    "1 <= m, n <= 50",
                    "0 <= forest[i][j] <= 10^9",
                    "Heights of all trees are distinct."
                ],
                "testcases": [
                    {
                        "input": "[[1,2,3],[0,0,4],[7,6,5]]",
                        "output": "6",
                        "explanation": "The minimum steps to cut the trees in order from shortest to tallest is 6."
                    },
                    {
                        "input": "[[1,2,3],[0,0,0],[7,6,5]]",
                        "output": "-1",
                        "explanation": "The trees in the bottom row are inaccessible due to the blocked middle row."
                    },
                    {
                        "input": "[[2,3,4],[0,0,5],[8,7,6]]",
                        "output": "6",
                        "explanation": "The minimum steps to cut the trees in order from shortest to tallest is 6. The first tree at (0, 0) can be cut before making any steps."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  int i;\n  int j;\n  int height;\n  T(int i, int j, int height) : i(i), j(j), height(height) {}\n};\n\nclass Solution {\n public:\n  int cutOffTree(vector<vector<int>>& forest) {\n    auto compare = [&](const T& a, const T& b) { return a.height > b.height; };\n    priority_queue<T, vector<T>, decltype(compare)> minHeap(compare);\n\n    for (int i = 0; i < forest.size(); ++i)\n      for (int j = 0; j < forest[0].size(); ++j)\n        if (forest[i][j] > 1)\n          minHeap.emplace(i, j, forest[i][j]);\n\n    int ans = 0;\n    int x = 0;\n    int y = 0;\n\n    while (!minHeap.empty()) {\n      const auto [i, j, _] = minHeap.top();\n      minHeap.pop();\n      // Walk from (x, y) to (i, j).\n      const int steps = bfs(forest, x, y, i, j);\n      if (steps < 0)\n        return -1;\n      ans += steps;\n      x = i;\n      y = j;\n    }\n\n    return ans;\n  }\n\n private:\n  const vector<int> dirs{0, 1, 0, -1, 0};\n\n  int bfs(const vector<vector<int>>& forest, int si, int sj, int ei, int ej) {\n    const int m = forest.size();\n    const int n = forest[0].size();\n    int steps = 0;\n    queue<pair<int, int>> q{{{si, sj}}};\n    vector<vector<bool>> seen(m, vector<bool>(n));\n    seen[si][sj] = true;\n\n    while (!q.empty()) {\n      for (int s = q.size(); s > 0; --s) {\n        const auto [i, j] = q.front();\n        q.pop();\n        if (i == ei && j == ej)\n          return steps;\n        for (int k = 0; k < 4; ++k) {\n          const int x = i + dirs[k];\n          const int y = j + dirs[k + 1];\n          if (x < 0 || x == m || y < 0 || y == n)\n            continue;\n          if (seen[x][y] || forest[x][y] == 0)\n            continue;\n          q.emplace(x, y);\n          seen[x][y] = true;\n        }\n      }\n      ++steps;\n    }\n\n    return -1;\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public int i;\n  public int j;\n  public int height;\n  public T(int i, int j, int height) {\n    this.i = i;\n    this.j = j;\n    this.height = height;\n  }\n}\n\nclass Solution {\n  public int cutOffTree(List<List<Integer>> forest) {\n    Queue<T> minHeap = new PriorityQueue<>((a, b) -> a.height - b.height);\n\n    for (int i = 0; i < forest.size(); ++i)\n      for (int j = 0; j < forest.get(0).size(); ++j)\n        if (forest.get(i).get(j) > 1)\n          minHeap.offer(new T(i, j, forest.get(i).get(j)));\n\n    int ans = 0;\n    int x = 0;\n    int y = 0;\n\n    while (!minHeap.isEmpty()) {\n      final int i = minHeap.peek().i;\n      final int j = minHeap.poll().j;\n      // Walk from (x, y) to (i, j).\n      final int steps = bfs(forest, x, y, i, j);\n      if (steps < 0)\n        return -1;\n      ans += steps;\n      x = i;\n      y = j;\n    }\n\n    return ans;\n  }\n\n  private static final int[] dirs = {0, 1, 0, -1, 0};\n\n  private int bfs(List<List<Integer>> forest, int si, int sj, int ei, int ej) {\n    final int m = forest.size();\n    final int n = forest.get(0).size();\n    int steps = 0;\n    Queue<int[]> q = new ArrayDeque<>(Arrays.asList(new int[] {si, sj}));\n    boolean[][] seen = new boolean[m][n];\n    seen[si][sj] = true;\n\n    while (!q.isEmpty()) {\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int i = q.peek()[0];\n        final int j = q.poll()[1];\n        if (i == ei && j == ej)\n          return steps;\n        for (int k = 0; k < 4; ++k) {\n          final int x = i + dirs[k];\n          final int y = j + dirs[k + 1];\n          if (x < 0 || x == m || y < 0 || y == n)\n            continue;\n          if (seen[x][y] || forest.get(x).get(y) == 0)\n            continue;\n          q.offer(new int[] {x, y});\n          seen[x][y] = true;\n        }\n      }\n      ++steps;\n    }\n\n    return -1;\n  };\n}\n",
                "lang_text": "java"
            }
        }
    }
}