{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1914",
            "title": "Cyclically Rotating a Grid",
            "titleSlug": "cyclically-rotating-a-grid",
            "content": "<p>You are given an <code>m x n</code> integer matrix <code>grid</code>\u200b\u200b\u200b, where <code>m</code> and <code>n</code> are both <strong>even</strong> integers, and an integer <code>k</code>.</p>\r\n\r\n<p>The matrix is composed of several layers, which is shown in the below image, where each color is its own layer:</p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/10/ringofgrid.png\" style=\"width: 231px; height: 258px;\" /></p>\r\n\r\n<p>A cyclic rotation of the matrix is done by cyclically rotating <strong>each layer</strong> in the matrix. To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the <strong>counter-clockwise</strong> direction. An example rotation is shown below:</p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/22/explanation_grid.jpg\" style=\"width: 500px; height: 268px;\" />\r\n<p>Return <em>the matrix after applying </em><code>k</code> <em>cyclic rotations to it</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/19/rod2.png\" style=\"width: 421px; height: 191px;\" />\r\n<pre>\r\n<strong>Input:</strong> grid = [[40,10],[30,20]], k = 1\r\n<strong>Output:</strong> [[10,20],[40,30]]\r\n<strong>Explanation:</strong> The figures above represent the grid at every state.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n<strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/10/ringofgrid5.png\" style=\"width: 231px; height: 262px;\" /></strong> <strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/10/ringofgrid6.png\" style=\"width: 231px; height: 262px;\" /></strong> <strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/10/ringofgrid7.png\" style=\"width: 231px; height: 262px;\" /></strong>\r\n\r\n<pre>\r\n<strong>Input:</strong> grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2\r\n<strong>Output:</strong> [[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]\r\n<strong>Explanation:</strong> The figures above represent the grid at every state.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>m == grid.length</code></li>\r\n\t<li><code>n == grid[i].length</code></li>\r\n\t<li><code>2 &lt;= m, n &lt;= 50</code></li>\r\n\t<li>Both <code>m</code> and <code>n</code> are <strong>even</strong> integers.</li>\r\n\t<li><code>1 &lt;= grid[i][j] &lt;=<sup> </sup>5000</code></li>\r\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\r\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 225,
            "dislikes": 270,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.9K\", \"totalSubmission\": \"24.2K\", \"totalAcceptedRaw\": 11873, \"totalSubmissionRaw\": 24247, \"acRate\": \"49.0%\"}",
            "hints": [
                "First, you need to consider each layer separately as an array.",
                "Just cycle this array and then re-assign it."
            ],
            "rephrased": {
                "body": "You are given an `m x n` integer matrix `grid`, where `m` and `n` are both even integers, and an integer `k`. The matrix is composed of several layers. You need to cyclically rotate each layer in the matrix `k` times in the counter-clockwise direction.  Return the matrix after applying `k` cyclic rotations to it.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "2 <= m, n <= 50",
                    "Both m and n are even integers.",
                    "1 <= grid[i][j] <= 5000",
                    "1 <= k <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "grid = [[40,10],[30,20]], k = 1",
                        "output": "[[10,20],[40,30]]",
                        "explanation": "The grid is rotated once counter-clockwise.  The elements in the outer (and only) layer shift accordingly."
                    },
                    {
                        "input": "grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2",
                        "output": "[[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]",
                        "explanation": "The outer layer and the inner layer are each rotated twice counter-clockwise. The elements in each layer shift accordingly after each rotation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "First, you need to consider each layer separately as an array.",
            "Just cycle this array and then re-assign it."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> rotateGrid(vector<vector<int>>& grid, int k) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    int t = 0;      // Top\n    int l = 0;      // Left\n    int b = m - 1;  // Bottom\n    int r = n - 1;  // Right\n\n    while (t < b && l < r) {\n      const int elementInThisLayer = 2 * (b - t + 1) + 2 * (r - l + 1) - 4;\n      const int netRotations = k % elementInThisLayer;\n      for (int rotate = 0; rotate < netRotations; ++rotate) {\n        const int topLeft = grid[t][l];\n        for (int j = l; j < r; ++j)\n          grid[t][j] = grid[t][j + 1];\n        for (int i = t; i < b; ++i)\n          grid[i][r] = grid[i + 1][r];\n        for (int j = r; j > l; --j)\n          grid[b][j] = grid[b][j - 1];\n        for (int i = b; i > t; --i)\n          grid[i][l] = grid[i - 1][l];\n        grid[t + 1][l] = topLeft;\n      }\n      ++t;\n      ++l;\n      --b;\n      --r;\n    }\n\n    return grid;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] rotateGrid(int[][] grid, int k) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    int t = 0;     // Top\n    int l = 0;     // Left\n    int b = m - 1; // Bottom\n    int r = n - 1; // Right\n\n    while (t < b && l < r) {\n      final int elementInThisLayer = 2 * (b - t + 1) + 2 * (r - l + 1) - 4;\n      final int netRotations = k % elementInThisLayer;\n      for (int rotate = 0; rotate < netRotations; ++rotate) {\n        final int topLeft = grid[t][l];\n        for (int j = l; j < r; ++j)\n          grid[t][j] = grid[t][j + 1];\n        for (int i = t; i < b; ++i)\n          grid[i][r] = grid[i + 1][r];\n        for (int j = r; j > l; --j)\n          grid[b][j] = grid[b][j - 1];\n        for (int i = b; i > t; --i)\n          grid[i][l] = grid[i - 1][l];\n        grid[t + 1][l] = topLeft;\n      }\n      ++t;\n      ++l;\n      --b;\n      --r;\n    }\n\n    return grid;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def rotateGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n    m = len(grid)\n    n = len(grid[0])\n    t = 0  # Top\n    l = 0  # Left\n    b = m - 1  # Bottom\n    r = n - 1  # Right\n\n    while t < b and l < r:\n      elementInThisLayer = 2 * (b - t + 1) + 2 * (r - l + 1) - 4\n      netRotations = k % elementInThisLayer\n      for _ in range(netRotations):\n        topLeft = grid[t][l]\n        for j in range(l, r):\n          grid[t][j] = grid[t][j + 1]\n        for i in range(t, b):\n          grid[i][r] = grid[i + 1][r]\n        for j in range(r, l, - 1):\n          grid[b][j] = grid[b][j - 1]\n        for i in range(b, t, -1):\n          grid[i][l] = grid[i - 1][l]\n        grid[t + 1][l] = topLeft\n      t += 1\n      l += 1\n      b -= 1\n      r -= 1\n\n    return grid\n",
                "lang_text": "py"
            }
        }
    }
}