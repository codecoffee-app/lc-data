{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "739",
            "title": "Daily Temperatures",
            "titleSlug": "daily-temperatures",
            "content": "<p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is the number of days you have to wait after the</em> <code>i<sup>th</sup></code> <em>day to get a warmer temperature</em>. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> temperatures = [73,74,75,71,69,72,76,73]\n<strong>Output:</strong> [1,1,4,2,1,1,0,0]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,40,50,60]\n<strong>Output:</strong> [1,1,1,0]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,60,90]\n<strong>Output:</strong> [1,1,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;temperatures.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>30 &lt;=&nbsp;temperatures[i] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 12057,
            "dislikes": 272,
            "similarQuestions": "[{\"title\": \"Next Greater Element I\", \"titleSlug\": \"next-greater-element-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Online Stock Span\", \"titleSlug\": \"online-stock-span\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"765.8K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 765807, \"totalSubmissionRaw\": 1161761, \"acRate\": \"65.9%\"}",
            "hints": [
                "If the temperature is say, 70 today, then in the future a warmer temperature must be either 71, 72, 73, ..., 99, or 100.  We could remember when all of them occur next."
            ],
            "rephrased": {
                "body": "Given an array of daily temperatures, `temperatures`, find the number of days one must wait after each day to experience a warmer temperature. The result should be an array `answer` where `answer[i]` represents the number of days to wait after the i-th day for a warmer temperature. If no such future day exists, `answer[i]` should be 0.",
                "constraints": [
                    "1 <= temperatures.length <= 10^5",
                    "30 <= temperatures[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[73,74,75,71,69,72,76,73]",
                        "output": "[1,1,4,2,1,1,0,0]",
                        "explanation": "For the first day (73), the next warmer day is 74, which is 1 day away.  For the third day (75), we need to wait 4 days to reach 76, which is warmer."
                    },
                    {
                        "input": "[30,40,50,60]",
                        "output": "[1,1,1,0]",
                        "explanation": "Each day is warmer than the previous, except for the last day (60), for which there is no future day that is warmer."
                    },
                    {
                        "input": "[30,60,90]",
                        "output": "[1,1,0]",
                        "explanation": "Similar to the previous example, each day is warmer, except for the last day (90)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "next-greater-element-i",
                "title": "Next Greater Element I",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "online-stock-span",
                "title": "Online Stock Span",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If the temperature is say, 70 today, then in the future a warmer temperature must be either 71, 72, 73, ..., 99, or 100.  We could remember when all of them occur next."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> dailyTemperatures(vector<int>& temperatures) {\n    vector<int> ans(temperatures.size());\n    stack<int> stack;  // decreasing stack\n\n    for (int i = 0; i < temperatures.size(); ++i) {\n      while (!stack.empty() && temperatures[stack.top()] < temperatures[i]) {\n        const int index = stack.top();\n        stack.pop();\n        ans[index] = i - index;\n      }\n      stack.push(i);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] dailyTemperatures(int[] temperatures) {\n    int[] ans = new int[temperatures.length];\n    Deque<Integer> stack = new ArrayDeque<>(); // decreasing stack\n\n    for (int i = 0; i < temperatures.length; ++i) {\n      while (!stack.isEmpty() && temperatures[stack.peek()] < temperatures[i]) {\n        final int index = stack.pop();\n        ans[index] = i - index;\n      }\n      stack.push(i);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n    ans = [0] * len(temperatures)\n    stack = []  # decreasing stack\n\n    for i, temperature in enumerate(temperatures):\n      while stack and temperature > temperatures[stack[-1]]:\n        index = stack.pop()\n        ans[index] = i - index\n      stack.append(i)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}