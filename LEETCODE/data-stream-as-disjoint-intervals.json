{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "352",
            "title": "Data Stream as Disjoint Intervals",
            "titleSlug": "data-stream-as-disjoint-intervals",
            "content": "<p>Given a data stream input of non-negative integers <code>a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub></code>, summarize the numbers seen so far as a list of disjoint intervals.</p>\n\n<p>Implement the <code>SummaryRanges</code> class:</p>\n\n<ul>\n\t<li><code>SummaryRanges()</code> Initializes the object with an empty stream.</li>\n\t<li><code>void addNum(int value)</code> Adds the integer <code>value</code> to the stream.</li>\n\t<li><code>int[][] getIntervals()</code> Returns a summary of the integers in the stream currently as a list of disjoint intervals <code>[start<sub>i</sub>, end<sub>i</sub>]</code>. The answer should be sorted by <code>start<sub>i</sub></code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;SummaryRanges&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]\n<strong>Output</strong>\n[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\n\n<strong>Explanation</strong>\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= value &lt;= 10<sup>4</sup></code></li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>getIntervals</code>.</li>\n\t<li>At most <code>10<sup>2</sup></code>&nbsp;calls will be made to&nbsp;<code>getIntervals</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1697,
            "dislikes": 356,
            "similarQuestions": "[{\"title\": \"Summary Ranges\", \"titleSlug\": \"summary-ranges\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find Right Interval\", \"titleSlug\": \"find-right-interval\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Range Module\", \"titleSlug\": \"range-module\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Integers in Intervals\", \"titleSlug\": \"count-integers-in-intervals\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"104.1K\", \"totalSubmission\": \"173.8K\", \"totalAcceptedRaw\": 104061, \"totalSubmissionRaw\": 173807, \"acRate\": \"59.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a stream of non-negative integers, maintain a summary of the numbers seen so far as a list of disjoint intervals. Implement a `SummaryRanges` class with the following methods:\n\n*   `SummaryRanges()`: Initializes an empty stream.\n*   `void addNum(int value)`: Adds the integer `value` to the stream.\n*   `int[][] getIntervals()`: Returns a sorted list of disjoint intervals representing the numbers in the stream. Each interval is represented as `[start, end]`.",
                "constraints": [
                    "0 <= value <= 10^4",
                    "At most 3 * 10^4 calls will be made to addNum and getIntervals.",
                    "At most 10^2 calls will be made to getIntervals."
                ],
                "testcases": [
                    {
                        "input": "[\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]",
                        "output": "[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]",
                        "explanation": "Initially, the stream is empty. Adding 1 results in the interval [1, 1]. Adding 3 results in intervals [1, 1] and [3, 3]. Adding 7 results in intervals [1, 1], [3, 3], and [7, 7]. Adding 2 merges [1, 1] and [3, 3] into [1, 3], leaving [1, 3] and [7, 7]. Finally, adding 6 merges [6, 6] with [7, 7] to form [6, 7], resulting in [1, 3] and [6, 7]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "summary-ranges",
                "title": "Summary Ranges",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-right-interval",
                "title": "Find Right Interval",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "range-module",
                "title": "Range Module",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-integers-in-intervals",
                "title": "Count Integers in Intervals",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class SummaryRanges {\n public:\n  void addNum(int val) {\n    if (map.count(val))\n      return;\n\n    const int lo = lowerKey(val);\n    const int hi = higherKey(val);\n\n    // {lo, map[lo][1]} + val + {hi, map[hi][1]} = {lo, map[hi][1]}\n    if (lo >= 0 && hi >= 0 && map[lo][1] + 1 == val && val + 1 == hi) {\n      map[lo][1] = map[hi][1];\n      map.erase(hi);\n      // {lo, map[lo][1]} + val = {lo, val}\n      // (prevent adding duplicate entry by using '>=' instead of '==')\n    } else if (lo >= 0 && map[lo][1] + 1 >= val) {\n      map[lo][1] = max(map[lo][1], val);\n    } else if (hi >= 0 && val + 1 == hi) {\n      // Val + {hi, map[hi][1]} = {val, map[hi][1]}\n      map[val] = {val, map[hi][1]};\n      map.erase(hi);\n    } else {\n      map[val] = {val, val};\n    }\n  }\n\n  vector<vector<int>> getIntervals() {\n    vector<vector<int>> intervals;\n    for (const auto& [_, interval] : map)\n      intervals.push_back(interval);\n    return intervals;\n  }\n\n private:\n  map<int, vector<int>> map;  // {start: {start, end}}\n\n  // Maximum in map < key\n  int lowerKey(int key) {\n    auto it = map.lower_bound(key);  // Minimum in map >= key\n    if (it == map.begin())\n      return -1;\n    return (--it)->first;\n  }\n\n  // Minimum in map > key\n  int higherKey(int key) {\n    const auto it = map.upper_bound(key);  // Minimum in map > key\n    if (it == map.cend())\n      return -1;\n    return it->first;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class SummaryRanges {\n  public void addNum(int val) {\n    if (map.containsKey(val))\n      return;\n\n    final Integer lo = map.lowerKey(val);  // Maximum in map < key\n    final Integer hi = map.higherKey(val); // Minimum in map > key\n\n    // {lo, map.get(lo)[1]} + val + {hi, map.get(hi)[1]} = {lo, map.get(hi)[1]}\n    if (lo != null && hi != null && map.get(lo)[1] + 1 == val && val + 1 == hi) {\n      map.get(lo)[1] = map.get(hi)[1];\n      map.remove(hi);\n      // {lo, map.get(lo)[1]} + val = {lo, val}\n      // (prevent adding duplicate entry by using '>=' instead of '==')\n    } else if (lo != null && map.get(lo)[1] + 1 >= val) {\n      map.get(lo)[1] = Math.max(map.get(lo)[1], val);\n      // Val + {hi, map.get(hi)[1]} = {val, map.get(hi)[1]}\n    } else if (hi != null && val + 1 == hi) {\n      map.put(val, new int[] {val, map.get(hi)[1]});\n      map.remove(hi);\n    } else {\n      map.put(val, new int[] {val, val});\n    }\n  }\n\n  public int[][] getIntervals() {\n    return map.values().stream().toArray(int[][] ::new);\n  }\n\n  // {start: {start, end}}\n  private TreeMap<Integer, int[]> map = new TreeMap<>();\n}\n",
                "lang_text": "java"
            }
        }
    }
}