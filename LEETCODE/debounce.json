{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2627",
            "title": "Debounce",
            "titleSlug": "debounce",
            "content": "<p>Given a function&nbsp;<code>fn</code> and a time in milliseconds&nbsp;<code>t</code>, return&nbsp;a&nbsp;<strong>debounced</strong>&nbsp;version of that function.</p>\n\n<p>A&nbsp;<strong>debounced</strong>&nbsp;function is a function whose execution is delayed by&nbsp;<code>t</code>&nbsp;milliseconds and whose&nbsp;execution is cancelled if it is called again within that window of time. The debounced function should also receive the passed parameters.</p>\n\n<p>For example, let&#39;s say&nbsp;<code>t = 50ms</code>, and the function was called at&nbsp;<code>30ms</code>,&nbsp;<code>60ms</code>, and <code>100ms</code>. The first 2 function calls would be cancelled, and the 3rd function call would be executed at&nbsp;<code>150ms</code>. If instead&nbsp;<code>t = 35ms</code>, The 1st call would be cancelled, the 2nd would be executed at&nbsp;<code>95ms</code>, and the 3rd would be executed at&nbsp;<code>135ms</code>.</p>\n\n<p><img alt=\"Debounce Schematic\" src=\"https://assets.leetcode.com/uploads/2023/04/08/screen-shot-2023-04-08-at-11048-pm.png\" style=\"width: 800px; height: 242px;\" /></p>\n\n<p>The above diagram&nbsp;shows how debounce will transform&nbsp;events. Each rectangle represents 100ms and the debounce time is 400ms. Each color represents a different set of inputs.</p>\n\n<p>Please solve it without using lodash&#39;s&nbsp;<code>_.debounce()</code> function.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nt = 50\ncalls = [\n&nbsp; {&quot;t&quot;: 50, inputs: [1]},\n&nbsp; {&quot;t&quot;: 75, inputs: [2]}\n]\n<strong>Output:</strong> [{&quot;t&quot;: 125, inputs: [2]}]\n<strong>Explanation:</strong>\nlet start = Date.now();\nfunction log(...inputs) { \n&nbsp; console.log([Date.now() - start, inputs ])\n}\nconst dlog = debounce(log, 50);\nsetTimeout(() =&gt; dlog(1), 50);\nsetTimeout(() =&gt; dlog(2), 75);\n\nThe 1st call is cancelled by the 2nd call because the 2nd call occurred before 100ms\nThe 2nd call is delayed by 50ms and executed at 125ms. The inputs were (2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nt = 20\ncalls = [\n&nbsp; {&quot;t&quot;: 50, inputs: [1]},\n&nbsp; {&quot;t&quot;: 100, inputs: [2]}\n]\n<strong>Output:</strong> [{&quot;t&quot;: 70, inputs: [1]}, {&quot;t&quot;: 120, inputs: [2]}]\n<strong>Explanation:</strong>\nThe 1st call is delayed until 70ms. The inputs were (1).\nThe 2nd call is delayed until 120ms. The inputs were (2).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nt = 150\ncalls = [\n&nbsp; {&quot;t&quot;: 50, inputs: [1, 2]},\n&nbsp; {&quot;t&quot;: 300, inputs: [3, 4]},\n&nbsp; {&quot;t&quot;: 300, inputs: [5, 6]}\n]\n<strong>Output:</strong> [{&quot;t&quot;: 200, inputs: [1,2]}, {&quot;t&quot;: 450, inputs: [5, 6]}]\n<strong>Explanation:</strong>\nThe 1st call is delayed by 150ms and ran at 200ms. The inputs were (1, 2).\nThe 2nd call is cancelled by the 3rd call\nThe 3rd call is delayed by 150ms and ran at 450ms. The inputs were (5, 6).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= t &lt;= 1000</code></li>\n\t<li><code>1 &lt;= calls.length &lt;= 10</code></li>\n\t<li><code>0 &lt;= calls[i].t &lt;= 1000</code></li>\n\t<li><code>0 &lt;= calls[i].inputs.length &lt;= 10</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 328,
            "dislikes": 22,
            "similarQuestions": "[{\"title\": \"Promise Time Limit\", \"titleSlug\": \"promise-time-limit\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Cache With Time Limit\", \"titleSlug\": \"cache-with-time-limit\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Throttle\", \"titleSlug\": \"throttle\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [],
            "stats": "{\"totalAccepted\": \"28.1K\", \"totalSubmission\": \"31.3K\", \"totalAcceptedRaw\": 28117, \"totalSubmissionRaw\": 31267, \"acRate\": \"89.9%\"}",
            "hints": [
                "You execute code with a delay with \"ref = setTimeout(fn, delay)\". You can abort the execution of that code with \"clearTimeout(ref)\"",
                "Whenever you call the function, you should abort any existing scheduled code. Then, you should schedule code to be executed after some delay."
            ],
            "rephrased": {
                "body": "Given a function `fn` and a time in milliseconds `t`, return a **debounced** version of that function.\n\nA **debounced** function is a function whose execution is delayed by `t` milliseconds and whose execution is cancelled if it is called again within that window of time. The debounced function should also receive the passed parameters.\n\nFor example, if `t = 50ms`, and the function was called at `30ms`, `60ms`, and `100ms`, the first two calls are cancelled, and the third call is executed at `150ms`.  If instead `t = 35ms`, the first call is cancelled, the second is executed at `95ms`, and the third is executed at `135ms`.\n\nPlease solve it without using lodash's `_.debounce()` function.",
                "constraints": [
                    "0 <= t <= 1000",
                    "1 <= calls.length <= 10",
                    "0 <= calls[i].t <= 1000",
                    "0 <= calls[i].inputs.length <= 10"
                ],
                "testcases": [
                    {
                        "input": "t = 50\ncalls = [\n  {\"t\": 50, inputs: [1]},\n  {\"t\": 75, inputs: [2]}\n]",
                        "output": "[{\"t\": 125, inputs: [2]}]",
                        "explanation": "The first call is cancelled by the second call because the second call occurred before the debounce time (50ms) has elapsed since the first call.  The second call is delayed by 50ms and executed at 125ms with the input [2]."
                    },
                    {
                        "input": "t = 20\ncalls = [\n  {\"t\": 50, inputs: [1]},\n  {\"t\": 100, inputs: [2]}\n]",
                        "output": "[{\"t\": 70, inputs: [1]}, {\"t\": 120, inputs: [2]}]",
                        "explanation": "The first call is delayed until 70ms and executed with the input [1]. The second call is delayed until 120ms and executed with the input [2]."
                    },
                    {
                        "input": "t = 150\ncalls = [\n  {\"t\": 50, inputs: [1, 2]},\n  {\"t\": 300, inputs: [3, 4]},\n  {\"t\": 300, inputs: [5, 6]}\n]",
                        "output": "[{\"t\": 200, inputs: [1,2]}, {\"t\": 450, inputs: [5, 6]}]",
                        "explanation": "The first call is delayed by 150ms and runs at 200ms with inputs [1, 2]. The second call is cancelled by the third call since it occurs within 150ms of the second.  The third call is delayed by 150ms and runs at 450ms with inputs [5, 6]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "promise-time-limit",
                "title": "Promise Time Limit",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "cache-with-time-limit",
                "title": "Cache With Time Limit",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "throttle",
                "title": "Throttle",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "You execute code with a delay with \"ref = setTimeout(fn, delay)\". You can abort the execution of that code with \"clearTimeout(ref)\"",
            "Whenever you call the function, you should abort any existing scheduled code. Then, you should schedule code to be executed after some delay."
        ],
        "relatedTopics": [],
        "solutions": {}
    }
}