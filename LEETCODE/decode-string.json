{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "394",
            "title": "Decode String",
            "titleSlug": "decode-string",
            "content": "<p>Given an encoded string, return its decoded string.</p>\n\n<p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p>\n\n<p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p>\n\n<p>The test cases are generated so that the length of the output will never exceed <code>10<sup>5</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a]2[bc]&quot;\n<strong>Output:</strong> &quot;aaabcbc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a2[c]]&quot;\n<strong>Output:</strong> &quot;accaccacc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;2[abc]3[cd]ef&quot;\n<strong>Output:</strong> &quot;abcabccdcdcdef&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 30</code></li>\n\t<li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>&#39;[]&#39;</code>.</li>\n\t<li><code>s</code> is guaranteed to be <strong>a valid</strong> input.</li>\n\t<li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 12167,
            "dislikes": 561,
            "similarQuestions": "[{\"title\": \"Encode String with Shortest Length\", \"titleSlug\": \"encode-string-with-shortest-length\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Atoms\", \"titleSlug\": \"number-of-atoms\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Brace Expansion\", \"titleSlug\": \"brace-expansion\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"738.8K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 738835, \"totalSubmissionRaw\": 1257609, \"acRate\": \"58.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an encoded string, decode it according to the following rule: `k[encoded_string]` means the `encoded_string` inside the square brackets is repeated exactly `k` times, where `k` is a positive integer. The input string is guaranteed to be valid, containing only lowercase English letters, digits, and square brackets. Digits only represent repeat numbers and are in the range [1, 300].",
                "constraints": [
                    "1 <= s.length <= 30",
                    "s consists of lowercase English letters, digits, and square brackets '[]'.",
                    "s is guaranteed to be a valid input.",
                    "All integers in s are in the range [1, 300]."
                ],
                "testcases": [
                    {
                        "input": "3[a]2[bc]",
                        "output": "aaabcbc",
                        "explanation": "The string 'a' is repeated 3 times resulting in 'aaa'. The string 'bc' is repeated twice, resulting in 'bcbc'. Concatenating these gives 'aaabcbc'."
                    },
                    {
                        "input": "3[a2[c]]",
                        "output": "accaccacc",
                        "explanation": "First, '2[c]' is decoded to 'cc'. Then, 'a2[c]' becomes 'acc'. Finally, '3[acc]' results in 'accaccacc'."
                    },
                    {
                        "input": "2[abc]3[cd]ef",
                        "output": "abcabccdcdcdef",
                        "explanation": "The string 'abc' is repeated twice, resulting in 'abcabc'. The string 'cd' is repeated three times, resulting in 'cdcdcd'. Adding 'ef' to the end gives 'abcabccdcdcdef'."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "encode-string-with-shortest-length",
                "title": "Encode String with Shortest Length",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-atoms",
                "title": "Number of Atoms",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "brace-expansion",
                "title": "Brace Expansion",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string decodeString(string s) {\n    stack<pair<string, int>> stack;  // (prevStr, repeatCount)\n    string currStr;\n    int currNum = 0;\n\n    for (const char c : s)\n      if (isdigit(c)) {\n        currNum = currNum * 10 + (c - '0');\n      } else {\n        if (c == '[') {\n          stack.emplace(currStr, currNum);\n          currStr = \"\";\n          currNum = 0;\n        } else if (c == ']') {\n          const auto [prevStr, n] = stack.top();\n          stack.pop();\n          currStr = prevStr + getRepeatedStr(currStr, n);\n        } else {\n          currStr += c;\n        }\n      }\n\n    return currStr;\n  }\n\n private:\n  // Returns s * n.\n  string getRepeatedStr(const string& s, int n) {\n    string repeat;\n    while (n--)\n      repeat += s;\n    return repeat;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String decodeString(String s) {\n    Stack<Pair<StringBuilder, Integer>> stack = new Stack<>(); // (prevStr, repeatCount)\n    StringBuilder currStr = new StringBuilder();\n    int currNum = 0;\n\n    for (final char c : s.toCharArray())\n      if (Character.isDigit(c)) {\n        currNum = currNum * 10 + (c - '0');\n      } else {\n        if (c == '[') {\n          stack.push(new Pair<>(currStr, currNum));\n          currStr = new StringBuilder();\n          currNum = 0;\n        } else if (c == ']') {\n          final Pair<StringBuilder, Integer> pair = stack.pop();\n          final StringBuilder prevStr = pair.getKey();\n          final int n = pair.getValue();\n          currStr = prevStr.append(getRepeatedStr(currStr, n));\n        } else {\n          currStr.append(c);\n        }\n      }\n\n    return currStr.toString();\n  }\n\n  // Returns s * n.\n  private StringBuilder getRepeatedStr(StringBuilder s, int n) {\n    StringBuilder sb = new StringBuilder();\n    while (n-- > 0)\n      sb.append(s);\n    return sb;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def decodeString(self, s: str) -> str:\n    stack = []  # (prevStr, repeatCount)\n    currStr = ''\n    currNum = 0\n\n    for c in s:\n      if c.isdigit():\n        currNum = currNum * 10 + int(c)\n      else:\n        if c == '[':\n          stack.append((currStr, currNum))\n          currStr = ''\n          currNum = 0\n        elif c == ']':\n          prevStr, num = stack.pop()\n          currStr = prevStr + num * currStr\n        else:\n          currStr += c\n\n    return currStr\n",
                "lang_text": "py"
            }
        }
    }
}