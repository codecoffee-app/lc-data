{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2075",
            "title": "Decode the Slanted Ciphertext",
            "titleSlug": "decode-the-slanted-ciphertext",
            "content": "<p>A string <code>originalText</code> is encoded using a <strong>slanted transposition cipher</strong> to a string <code>encodedText</code> with the help of a matrix having a <strong>fixed number of rows</strong> <code>rows</code>.</p>\n\n<p><code>originalText</code> is placed first in a top-left to bottom-right manner.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/07/exa11.png\" style=\"width: 300px; height: 185px;\" />\n<p>The blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of <code>originalText</code>. The arrow indicates the order in which the cells are filled. All empty cells are filled with <code>&#39; &#39;</code>. The number of columns is chosen such that the rightmost column will <strong>not be empty</strong> after filling in <code>originalText</code>.</p>\n\n<p><code>encodedText</code> is then formed by appending all characters of the matrix in a row-wise fashion.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/07/exa12.png\" style=\"width: 300px; height: 200px;\" />\n<p>The characters in the blue cells are appended first to <code>encodedText</code>, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.</p>\n\n<p>For example, if <code>originalText = &quot;cipher&quot;</code> and <code>rows = 3</code>, then we encode it in the following manner:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/25/desc2.png\" style=\"width: 281px; height: 211px;\" />\n<p>The blue arrows depict how <code>originalText</code> is placed in the matrix, and the red arrows denote the order in which <code>encodedText</code> is formed. In the above example, <code>encodedText = &quot;ch ie pr&quot;</code>.</p>\n\n<p>Given the encoded string <code>encodedText</code> and number of rows <code>rows</code>, return <em>the original string</em> <code>originalText</code>.</p>\n\n<p><strong>Note:</strong> <code>originalText</code> <strong>does not</strong> have any trailing spaces <code>&#39; &#39;</code>. The test cases are generated such that there is only one possible <code>originalText</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> encodedText = &quot;ch   ie   pr&quot;, rows = 3\n<strong>Output:</strong> &quot;cipher&quot;\n<strong>Explanation:</strong> This is the same example described in the problem description.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/26/exam1.png\" style=\"width: 250px; height: 168px;\" />\n<pre>\n<strong>Input:</strong> encodedText = &quot;iveo    eed   l te   olc&quot;, rows = 4\n<strong>Output:</strong> &quot;i love leetcode&quot;\n<strong>Explanation:</strong> The figure above denotes the matrix that was used to encode originalText. \nThe blue arrows show how we can find originalText from encodedText.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/26/eg2.png\" style=\"width: 300px; height: 51px;\" />\n<pre>\n<strong>Input:</strong> encodedText = &quot;coding&quot;, rows = 1\n<strong>Output:</strong> &quot;coding&quot;\n<strong>Explanation:</strong> Since there is only 1 row, both originalText and encodedText are the same.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= encodedText.length &lt;= 10<sup>6</sup></code></li>\n\t<li><code>encodedText</code> consists of lowercase English letters and <code>&#39; &#39;</code> only.</li>\n\t<li><code>encodedText</code> is a valid encoding of some <code>originalText</code> that <strong>does not</strong> have trailing spaces.</li>\n\t<li><code>1 &lt;= rows &lt;= 1000</code></li>\n\t<li>The testcases are generated such that there is <strong>only one</strong> possible <code>originalText</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 236,
            "dislikes": 54,
            "similarQuestions": "[{\"title\": \"Diagonal Traverse\", \"titleSlug\": \"diagonal-traverse\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.5K\", \"totalSubmission\": \"25.3K\", \"totalAcceptedRaw\": 12456, \"totalSubmissionRaw\": 25330, \"acRate\": \"49.2%\"}",
            "hints": [
                "How can you use rows and encodedText to find the number of columns of the matrix?",
                "Once you have the number of rows and columns, you can create the matrix and place encodedText in it. How should you place it in the matrix?",
                "How should you traverse the matrix to \"decode\" originalText?"
            ],
            "rephrased": {
                "body": "A string `originalText` is encoded using a slanted transposition cipher to a string `encodedText` using a matrix with a fixed number of rows `rows`. The `originalText` is written into the matrix diagonally, from top-left to bottom-right, filling empty cells with spaces. The number of columns is chosen to ensure the rightmost column is not empty after filling the `originalText`. The `encodedText` is formed by reading the characters of the matrix row by row.\n\nGiven the `encodedText` and the number of rows `rows`, return the original string `originalText`. Note that `originalText` does not have any trailing spaces, and there's only one possible solution.",
                "constraints": [
                    "0 <= encodedText.length <= 10^6",
                    "encodedText consists of lowercase English letters and ' ' only.",
                    "encodedText is a valid encoding of some originalText that does not have trailing spaces.",
                    "1 <= rows <= 1000",
                    "The testcases are generated such that there is only one possible originalText."
                ],
                "testcases": [
                    {
                        "input": "encodedText = \"ch   ie   pr\", rows = 3",
                        "output": "\"cipher\"",
                        "explanation": "This is the example described in the problem description. The `originalText` cipher is encoded into 'ch ie pr' with 3 rows."
                    },
                    {
                        "input": "encodedText = \"iveo    eed   l te   olc\", rows = 4",
                        "output": "\"i love leetcode\"",
                        "explanation": "The original string 'i love leetcode' is encoded as 'iveo eed l te olc' using 4 rows."
                    },
                    {
                        "input": "encodedText = \"coding\", rows = 1",
                        "output": "\"coding\"",
                        "explanation": "With only one row, the encoded text is the same as the original text."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "diagonal-traverse",
                "title": "Diagonal Traverse",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How can you use rows and encodedText to find the number of columns of the matrix?",
            "Once you have the number of rows and columns, you can create the matrix and place encodedText in it. How should you place it in the matrix?",
            "How should you traverse the matrix to \"decode\" originalText?"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def decodeCiphertext(self, encodedText: str, rows: int) -> str:\n    n = len(encodedText)\n    cols = n // rows\n\n    ans = []\n    matrix = [[' '] * cols for _ in range(rows)]\n\n    for i in range(rows):\n      for j in range(cols):\n        matrix[i][j] = encodedText[i * cols + j]\n\n    for col in range(cols):\n      i = 0\n      j = col\n      while i < rows and j < cols:\n        ans.append(matrix[i][j])\n        i += 1\n        j += 1\n\n    return ''.join(ans).rstrip()\n",
                "lang_text": "py"
            }
        }
    }
}