{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1734",
            "title": "Decode XORed Permutation",
            "titleSlug": "decode-xored-permutation",
            "content": "<p>There is an integer array <code>perm</code> that is a permutation of the first <code>n</code> positive integers, where <code>n</code> is always <strong>odd</strong>.</p>\n\n<p>It was encoded into another integer array <code>encoded</code> of length <code>n - 1</code>, such that <code>encoded[i] = perm[i] XOR perm[i + 1]</code>. For example, if <code>perm = [1,3,2]</code>, then <code>encoded = [2,1]</code>.</p>\n\n<p>Given the <code>encoded</code> array, return <em>the original array</em> <code>perm</code>. It is guaranteed that the answer exists and is unique.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> encoded = [3,1]\n<strong>Output:</strong> [1,2,3]\n<strong>Explanation:</strong> If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> encoded = [6,5,4,6]\n<strong>Output:</strong> [2,4,1,5,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;&nbsp;10<sup>5</sup></code></li>\n\t<li><code>n</code>&nbsp;is odd.</li>\n\t<li><code>encoded.length == n - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 738,
            "dislikes": 24,
            "similarQuestions": "[{\"title\": \"Find Xor-Beauty of Array\", \"titleSlug\": \"find-xor-beauty-of-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.1K\", \"totalSubmission\": \"21.9K\", \"totalAcceptedRaw\": 14093, \"totalSubmissionRaw\": 21945, \"acRate\": \"64.2%\"}",
            "hints": [
                "Compute the XOR of the numbers between 1 and n, and think about how it can be used. Let it be x.",
                "Think why n is odd.",
                "perm[0] = x XOR encoded[1] XOR encoded[3] XOR encoded[5] ...",
                "perm[i] = perm[i-1] XOR encoded[i-1]"
            ],
            "rephrased": {
                "body": "You are given an integer array `encoded` which represents the XOR of consecutive elements of a hidden permutation `perm`. The permutation `perm` consists of the first `n` positive integers, where `n` is always odd. Given the `encoded` array, reconstruct and return the original `perm` array. It's guaranteed that a unique solution exists.",
                "constraints": [
                    "3 <= n < 10^5",
                    "n is odd.",
                    "encoded.length == n - 1"
                ],
                "testcases": [
                    {
                        "input": "[3,1]",
                        "output": "[1,2,3]",
                        "explanation": "The permutation [1, 2, 3] satisfies the condition because [1 XOR 2, 2 XOR 3] results in [3, 1]."
                    },
                    {
                        "input": "[6,5,4,6]",
                        "output": "[2,4,1,5,3]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-xor-beauty-of-array",
                "title": "Find Xor-Beauty of Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Compute the XOR of the numbers between 1 and n, and think about how it can be used. Let it be x.",
            "Think why n is odd.",
            "perm[0] = x XOR encoded[1] XOR encoded[3] XOR encoded[5] ...",
            "perm[i] = perm[i-1] XOR encoded[i-1]"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> decode(vector<int>& encoded) {\n    // Our goal is to find the value of a1, which will allow us to decode a2,\n    // a3, ..., an. This can be achieved by performing XOR operation between\n    // each element in the `encoded` and a1.\n    //\n    // E.g. n = 3, perm = [a1, a2, a3] is a permutation of [1, 2, 3]\n    //               encoded = [a1^a2, a2^a3]\n    //    accumulatedEncoded = [a1^a2, a1^a3]\n    //    a1 = (a1^a2)^(a1^a3)^(a1^a2^a3)\n    //    a2 = a1^(a1^a2)\n    //    a3 = a2^(a2^a3)\n    const int n = encoded.size() + 1;\n    int nXors = 0;\n    for (int i = 1; i <= n; i++)\n      nXors ^= i;\n\n    // Instead of constructing the array, we can track of the running XOR value\n    // of `accumulatedEncoded`.\n    int runningXors = 0;\n    int xors = 0;  // xors(accumulatedEncoded)\n\n    for (const int encode : encoded) {\n      runningXors ^= encode;\n      xors ^= runningXors;\n    }\n\n    vector<int> ans{xors ^ nXors};\n\n    for (const int encode : encoded)\n      ans.push_back(ans.back() ^ encode);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] decode(int[] encoded) {\n    // Our goal is to find the value of a1, which will allow us to decode a2,\n    // a3, ..., an. This can be achieved by performing XOR operation between\n    // each element in the `encoded` and a1.\n    //\n    // E.g. n = 3, perm = [a1, a2, a3] is a permutation of [1, 2, 3]\n    //               encoded = [a1^a2, a2^a3]\n    //    accumulatedEncoded = [a1^a2, a1^a3]\n    //    a1 = (a1^a2)^(a1^a3)^(a1^a2^a3)\n    //    a2 = a1^(a1^a2)\n    //    a3 = a2^(a2^a3)\n    final int n = encoded.length + 1;\n    int nXors = 0;\n    for (int i = 1; i <= n; i++)\n      nXors ^= i;\n\n    // Instead of constructing the array, we can track of the running XOR value\n    // of `accumulatedEncoded`.\n    int runningXors = 0;\n    int xors = 0; // xors(accumulatedEncoded)\n\n    for (final int encode : encoded) {\n      runningXors ^= encode;\n      xors ^= runningXors;\n    }\n\n    int[] ans = new int[encoded.length + 1];\n    ans[0] = xors ^ nXors;\n\n    for (int i = 0; i < encoded.length; i++)\n      ans[i + 1] = ans[i] ^ encoded[i];\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def decode(self, encoded: List[int]) -> List[int]:\n    # Our goal is to find the value of a1, which will allow us to decode a2, a3,\n    # ..., an. This can be achieved by performing XOR operation between each\n    # element in the `encoded` and a1.\n    #\n    # E.g. n = 3, perm = [a1, a2, a3] is a permutation of [1, 2, 3].\n    #               encoded = [a1^a2, a2^a3]\n    #    accumulatedEncoded = [a1^a2, a1^a3]\n    #    a1 = (a1^a2)^(a1^a3)^(a1^a2^a3)\n    #    a2 = a1^(a1^a2)\n    #    a3 = a2^(a2^a3)\n    n = len(encoded) + 1\n    nXors = functools.reduce(operator.xor, [i for i in range(1, n + 1)])\n\n    # Instead of constructing the array, we can track of the running XOR value\n    # of `accumulatedEncoded`.\n    xors = 0  # xors(accumulatedEncoded)\n\n    for encode in encoded:\n      runningXors ^= encode\n      xors ^= runningXors\n\n    ans = [xors ^ nXors]\n\n    for encode in encoded:\n      ans.append(ans[-1] ^ encode)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}