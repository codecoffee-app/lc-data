{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1144",
            "title": "Decrease Elements To Make Array Zigzag",
            "titleSlug": "decrease-elements-to-make-array-zigzag",
            "content": "<p>Given an array <code>nums</code> of integers, a <em>move</em>&nbsp;consists of choosing any element and <strong>decreasing it by 1</strong>.</p>\n\n<p>An array <code>A</code> is a&nbsp;<em>zigzag array</em>&nbsp;if either:</p>\n\n<ul>\n\t<li>Every even-indexed element is greater than adjacent elements, ie.&nbsp;<code>A[0] &gt; A[1] &lt; A[2] &gt; A[3] &lt; A[4] &gt; ...</code></li>\n\t<li>OR, every odd-indexed element is greater than adjacent elements, ie.&nbsp;<code>A[0] &lt; A[1] &gt; A[2] &lt; A[3] &gt; A[4] &lt; ...</code></li>\n</ul>\n\n<p>Return the minimum number of moves to transform the given array <code>nums</code> into a zigzag array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can decrease 2 to 0 or 3 to 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [9,6,1,6,2]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 411,
            "dislikes": 165,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"19.2K\", \"totalSubmission\": \"40.3K\", \"totalAcceptedRaw\": 19242, \"totalSubmissionRaw\": 40314, \"acRate\": \"47.7%\"}",
            "hints": [
                "Do each case (even indexed is greater, odd indexed is greater) separately. In say the even case, you should decrease each even-indexed element until it is lower than its immediate neighbors."
            ],
            "rephrased": {
                "body": "Given an array `nums` of integers, find the minimum number of moves required to transform the array into a zigzag array. A move consists of decreasing any element by 1. An array `A` is a zigzag array if either every even-indexed element is greater than its adjacent elements (A[0] > A[1] < A[2] > A[3] < ...), or every odd-indexed element is greater than its adjacent elements (A[0] < A[1] > A[2] < A[3] > ...).",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "1 <= nums[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3]",
                        "output": "2",
                        "explanation": "To make the array zigzag, we can decrease 2 to 0 or 3 to 1, requiring 2 moves."
                    },
                    {
                        "input": "[9,6,1,6,2]",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Do each case (even indexed is greater, odd indexed is greater) separately. In say the even case, you should decrease each even-indexed element until it is lower than its immediate neighbors."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int movesToMakeZigzag(vector<int>& nums) {\n    vector<int> decreasing(2);\n\n    for (int i = 0; i < nums.size(); ++i) {\n      int l = i > 0 ? nums[i - 1] : 1001;\n      int r = i + 1 < nums.size() ? nums[i + 1] : 1001;\n      decreasing[i % 2] += max(0, nums[i] - min(l, r) + 1);\n    }\n\n    return min(decreasing[0], decreasing[1]);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int movesToMakeZigzag(int[] nums) {\n    int[] decreasing = new int[2];\n\n    for (int i = 0; i < nums.length; ++i) {\n      int l = i > 0 ? nums[i - 1] : 1001;\n      int r = i + 1 < nums.length ? nums[i + 1] : 1001;\n      decreasing[i % 2] += Math.max(0, nums[i] - Math.min(l, r) + 1);\n    }\n\n    return Math.min(decreasing[0], decreasing[1]);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def movesToMakeZigzag(self, nums: List[int]) -> int:\n    decreasing = [0] * 2\n\n    for i, num in enumerate(nums):\n      l = nums[i - 1] if i > 0 else 1001\n      r = nums[i + 1] if i + 1 < len(nums) else 1001\n      decreasing[i % 2] += max(0, num - min(l, r) + 1)\n\n    return min(decreasing[0], decreasing[1])\n",
                "lang_text": "py"
            }
        }
    }
}