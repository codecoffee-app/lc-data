{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2746",
            "title": "Decremental String Concatenation",
            "titleSlug": "decremental-string-concatenation",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>words</code> containing <code>n</code> strings.</p>\n\n<p>Let&#39;s define a <strong>join</strong> operation <code>join(x, y)</code> between two strings <code>x</code> and <code>y</code> as concatenating them into <code>xy</code>. However, if the last character of <code>x</code> is equal to the first character of <code>y</code>, one of them is <strong>deleted</strong>.</p>\n\n<p>For example <code>join(&quot;ab&quot;, &quot;ba&quot;) = &quot;aba&quot;</code> and <code>join(&quot;ab&quot;, &quot;cde&quot;) = &quot;abcde&quot;</code>.</p>\n\n<p>You are to perform <code>n - 1</code> <strong>join</strong> operations. Let <code>str<sub>0</sub> = words[0]</code>. Starting from <code>i = 1</code> up to <code>i = n - 1</code>, for the <code>i<sup>th</sup></code> operation, you can do one of the following:</p>\n\n<ul>\n\t<li>Make <code>str<sub>i</sub> = join(str<sub>i - 1</sub>, words[i])</code></li>\n\t<li>Make <code>str<sub>i</sub> = join(words[i], str<sub>i - 1</sub>)</code></li>\n</ul>\n\n<p>Your task is to <strong>minimize</strong> the length of <code>str<sub>n - 1</sub></code>.</p>\n\n<p>Return <em>an integer denoting the minimum possible length of</em> <code>str<sub>n - 1</sub></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;aa&quot;,&quot;ab&quot;,&quot;bc&quot;]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>In this example, we can perform join operations in the following order to minimize the length of str<sub>2</sub>: \nstr<sub>0</sub> = &quot;aa&quot;\nstr<sub>1</sub> = join(str<sub>0</sub>, &quot;ab&quot;) = &quot;aab&quot;\nstr<sub>2</sub> = join(str<sub>1</sub>, &quot;bc&quot;) = &quot;aabc&quot; \nIt can be shown that the minimum possible length of str<sub>2</sub> is 4.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;ab&quot;,&quot;b&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example, str<sub>0</sub> = &quot;ab&quot;, there are two ways to get str<sub>1</sub>: \njoin(str<sub>0</sub>, &quot;b&quot;) = &quot;ab&quot; or join(&quot;b&quot;, str<sub>0</sub>) = &quot;bab&quot;. \nThe first string, &quot;ab&quot;, has the minimum length. Hence, the answer is 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;aaa&quot;,&quot;c&quot;,&quot;aba&quot;]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> In this example, we can perform join operations in the following order to minimize the length of str<sub>2</sub>: \nstr<sub>0</sub> = &quot;aaa&quot;\nstr<sub>1</sub> = join(str<sub>0</sub>, &quot;c&quot;) = &quot;aaac&quot;\nstr<sub>2</sub> = join(&quot;aba&quot;, str<sub>1</sub>) = &quot;abaaac&quot;\nIt can be shown that the minimum possible length of str<sub>2</sub> is 6.\n</pre>\n\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 50</code></li>\n\t<li>Each character in <code>words[i]</code> is an English lowercase letter</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 339,
            "dislikes": 30,
            "similarQuestions": "[{\"title\": \"Largest Merge Of Two Strings\", \"titleSlug\": \"largest-merge-of-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.9K\", \"totalSubmission\": \"26.9K\", \"totalAcceptedRaw\": 6897, \"totalSubmissionRaw\": 26888, \"acRate\": \"25.7%\"}",
            "hints": [
                "Use dynamic programming with memoization.",
                "Notice that the first and last characters of a string are sufficient to determine the length of its concatenation with any other string.",
                "Define dp[i][first][last] as the shortest concatenation length of the first i words starting with a character first and ending with a character last. Convert characters to their ASCII codes if your programming language cannot implicitly convert them to array indices."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `words` of strings, you need to perform `n - 1` join operations to minimize the length of the final string.  A join operation `join(x, y)` concatenates strings `x` and `y` into `xy`, but if the last character of `x` equals the first character of `y`, one of them is deleted. Starting with `str_0 = words[0]`, for each subsequent word `words[i]` (from `i = 1` to `n - 1`), you can either create `str_i = join(str_{i-1}, words[i])` or `str_i = join(words[i], str_{i-1})`. Return the minimum possible length of `str_{n-1}`.",
                "constraints": [
                    "1 <= words.length <= 1000",
                    "1 <= words[i].length <= 50",
                    "Each character in words[i] is an English lowercase letter"
                ],
                "testcases": [
                    {
                        "input": "[\"aa\",\"ab\",\"bc\"]",
                        "output": "4",
                        "explanation": "The optimal join operations are: str_0 = \"aa\", str_1 = join(str_0, \"ab\") = \"aab\", str_2 = join(str_1, \"bc\") = \"aabc\". The minimum possible length of str_2 is 4."
                    },
                    {
                        "input": "[\"ab\",\"b\"]",
                        "output": "2",
                        "explanation": "str_0 = \"ab\". There are two options: join(str_0, \"b\") = \"ab\" or join(\"b\", str_0) = \"bab\". \"ab\" has the minimum length, hence the answer is 2."
                    },
                    {
                        "input": "[\"aaa\",\"c\",\"aba\"]",
                        "output": "6",
                        "explanation": "The optimal join operations are: str_0 = \"aaa\", str_1 = join(str_0, \"c\") = \"aaac\", str_2 = join(\"aba\", str_1) = \"abaaac\".  The minimum possible length of str_2 is 6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "largest-merge-of-two-strings",
                "title": "Largest Merge Of Two Strings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use dynamic programming with memoization.",
            "Notice that the first and last characters of a string are sufficient to determine the length of its concatenation with any other string.",
            "Define dp[i][first][last] as the shortest concatenation length of the first i words starting with a character first and ending with a character last. Convert characters to their ASCII codes if your programming language cannot implicitly convert them to array indices."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ]
    }
}