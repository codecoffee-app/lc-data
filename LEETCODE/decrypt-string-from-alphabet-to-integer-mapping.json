{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1309",
            "title": "Decrypt String from Alphabet to Integer Mapping",
            "titleSlug": "decrypt-string-from-alphabet-to-integer-mapping",
            "content": "<p>You are given a string <code>s</code> formed by digits and <code>&#39;#&#39;</code>. We want to map <code>s</code> to English lowercase characters as follows:</p>\n\n<ul>\n\t<li>Characters (<code>&#39;a&#39;</code> to <code>&#39;i&#39;</code>) are represented by (<code>&#39;1&#39;</code> to <code>&#39;9&#39;</code>) respectively.</li>\n\t<li>Characters (<code>&#39;j&#39;</code> to <code>&#39;z&#39;</code>) are represented by (<code>&#39;10#&#39;</code> to <code>&#39;26#&#39;</code>) respectively.</li>\n</ul>\n\n<p>Return <em>the string formed after mapping</em>.</p>\n\n<p>The test cases are generated so that a unique mapping will always exist.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;10#11#12&quot;\n<strong>Output:</strong> &quot;jkab&quot;\n<strong>Explanation:</strong> &quot;j&quot; -&gt; &quot;10#&quot; , &quot;k&quot; -&gt; &quot;11#&quot; , &quot;a&quot; -&gt; &quot;1&quot; , &quot;b&quot; -&gt; &quot;2&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1326#&quot;\n<strong>Output:</strong> &quot;acz&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of digits and the <code>&#39;#&#39;</code> letter.</li>\n\t<li><code>s</code> will be a valid string such that mapping is always possible.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1497,
            "dislikes": 105,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"118K\", \"totalSubmission\": \"148.2K\", \"totalAcceptedRaw\": 117966, \"totalSubmissionRaw\": 148200, \"acRate\": \"79.6%\"}",
            "hints": [
                "Scan from right to left, in each step of the scanning check whether there is a trailing \"#\" 2 indexes away."
            ],
            "rephrased": {
                "body": "Given a string `s` consisting of digits and the '#' character, decode it into lowercase English characters.  Digits '1' to '9' map to letters 'a' to 'i', respectively.  The sequences '10#' to '26#' map to letters 'j' to 'z', respectively. Return the decoded string.",
                "constraints": [
                    "1 <= s.length <= 1000",
                    "s consists of digits and the '#' character.",
                    "s will be a valid string such that a unique mapping is always possible."
                ],
                "testcases": [
                    {
                        "input": "10#11#12",
                        "output": "jkab",
                        "explanation": "The mapping is: \"j\" -> \"10#\", \"k\" -> \"11#\", \"a\" -> \"1\", \"b\" -> \"2\"."
                    },
                    {
                        "input": "1326#",
                        "output": "acz",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Scan from right to left, in each step of the scanning check whether there is a trailing \"#\" 2 indexes away."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string freqAlphabets(string s) {\n    string ans;\n\n    for (int i = 0; i < s.length();) {\n      if (i + 2 < s.length() && s[i + 2] == '#') {\n        ans += stoi(s.substr(i, 2)) + 'a' - 1;\n        i += 3;\n      } else {\n        ans += (s[i] - '0') + 'a' - 1;\n        i += 1;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String freqAlphabets(String s) {\n    String ans = \"\";\n\n    for (int i = 0; i < s.length();) {\n      if (i + 2 < s.length() && s.charAt(i + 2) == '#') {\n        ans += (char) (Integer.valueOf(s.substring(i, i + 2)) + 'a' - 1);\n        i += 3;\n      } else {\n        ans += (char) ((s.charAt(i) - '0') + 'a' - 1);\n        i += 1;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def freqAlphabets(self, s: str) -> str:\n    ans = ''\n    i = 0\n\n    while i < len(s):\n      if i + 2 < len(s) and s[i + 2] == '#':\n        ans += chr(int(s[i:i + 2]) + ord('a') - 1)\n        i += 3\n      else:\n        ans += chr(int(s[i]) + ord('a') - 1)\n        i += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}