{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "697",
            "title": "Degree of an Array",
            "titleSlug": "degree-of-an-array",
            "content": "<p>Given a non-empty array of non-negative integers <code>nums</code>, the <b>degree</b> of this array is defined as the maximum frequency of any one of its elements.</p>\n\n<p>Your task is to find the smallest possible length of a (contiguous) subarray of <code>nums</code>, that has the same degree as <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,3,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,3,1,4,2]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> \nThe degree is 3 because the element 2 is repeated 3 times.\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length</code> will be between 1 and 50,000.</li>\n\t<li><code>nums[i]</code> will be an integer between 0 and 49,999.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2941,
            "dislikes": 1683,
            "similarQuestions": "[{\"title\": \"Maximum Subarray\", \"titleSlug\": \"maximum-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                }
            ],
            "stats": "{\"totalAccepted\": \"200.8K\", \"totalSubmission\": \"356.8K\", \"totalAcceptedRaw\": 200835, \"totalSubmissionRaw\": 356836, \"acRate\": \"56.3%\"}",
            "hints": [
                "Say 5 is the only element that occurs the most number of times - for example, nums = [1, 5, 2, 3, 5, 4, 5, 6].  What is the answer?"
            ],
            "rephrased": {
                "body": "Given a non-empty array of non-negative integers `nums`, find the smallest possible length of a contiguous subarray that has the same degree as `nums`. The degree of the array is defined as the maximum frequency of any one of its elements.",
                "constraints": [
                    "nums.length will be between 1 and 50,000.",
                    "nums[i] will be an integer between 0 and 49,999."
                ],
                "testcases": [
                    {
                        "input": "[1,2,2,3,1]",
                        "output": "2",
                        "explanation": "The array's degree is 2 (both 1 and 2 appear twice). The shortest subarray with degree 2 is [2, 2], which has length 2."
                    },
                    {
                        "input": "[1,2,2,3,1,4,2]",
                        "output": "6",
                        "explanation": "The array's degree is 3 (2 appears three times). The shortest subarray with degree 3 is [2,2,3,1,4,2], which has length 6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-subarray",
                "title": "Maximum Subarray",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Say 5 is the only element that occurs the most number of times - for example, nums = [1, 5, 2, 3, 5, 4, 5, 6].  What is the answer?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findShortestSubArray(vector<int>& nums) {\n    int ans = 0;\n    int degree = 0;\n    unordered_map<int, int> debut;\n    unordered_map<int, int> count;\n\n    for (int i = 0; i < nums.size(); ++i) {\n      const int num = nums[i];\n      if (!debut.count(num))\n        debut[num] = i;\n      if (++count[num] > degree) {\n        degree = count[num];\n        ans = i - debut[num] + 1;\n      } else if (count[num] == degree) {\n        ans = min(ans, i - debut[num] + 1);\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findShortestSubArray(int[] nums) {\n    int ans = 0;\n    int degree = 0;\n    Map<Integer, Integer> debut = new HashMap<>();\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (int i = 0; i < nums.length; ++i) {\n      final int num = nums[i];\n      debut.putIfAbsent(num, i);\n      if (count.merge(num, 1, Integer::sum) > degree) {\n        degree = count.get(num);\n        ans = i - debut.get(num) + 1;\n      } else if (count.get(num) == degree) {\n        ans = Math.min(ans, i - debut.get(num) + 1);\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findShortestSubArray(self, nums: List[int]) -> int:\n    ans = 0\n    degree = 0\n    debut = {}\n    count = collections.Counter()\n\n    for i, num in enumerate(nums):\n      debut.setdefault(num, i)\n      count[num] += 1\n      if count[num] > degree:\n        degree = count[num]\n        ans = i - debut[num] + 1\n      elif count[num] == degree:\n        ans = min(ans, i - debut[num] + 1)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}