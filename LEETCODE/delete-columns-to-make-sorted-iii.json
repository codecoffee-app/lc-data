{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "960",
            "title": "Delete Columns to Make Sorted III",
            "titleSlug": "delete-columns-to-make-sorted-iii",
            "content": "<p>You are given an array of <code>n</code> strings <code>strs</code>, all of the same length.</p>\n\n<p>We may choose any deletion indices, and we delete all the characters in those indices for each string.</p>\n\n<p>For example, if we have <code>strs = [&quot;abcdef&quot;,&quot;uvwxyz&quot;]</code> and deletion indices <code>{0, 2, 3}</code>, then the final array after deletions is <code>[&quot;bef&quot;, &quot;vyz&quot;]</code>.</p>\n\n<p>Suppose we chose a set of deletion indices <code>answer</code> such that after deletions, the final array has <strong>every string (row) in lexicographic</strong> order. (i.e., <code>(strs[0][0] &lt;= strs[0][1] &lt;= ... &lt;= strs[0][strs[0].length - 1])</code>, and <code>(strs[1][0] &lt;= strs[1][1] &lt;= ... &lt;= strs[1][strs[1].length - 1])</code>, and so on). Return <em>the minimum possible value of</em> <code>answer.length</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;babca&quot;,&quot;bbazb&quot;]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> After deleting columns 0, 1, and 4, the final array is strs = [&quot;bc&quot;, &quot;az&quot;].\nBoth these rows are individually in lexicographic order (ie. strs[0][0] &lt;= strs[0][1] and strs[1][0] &lt;= strs[1][1]).\nNote that strs[0] &gt; strs[1] - the array strs is not necessarily in lexicographic order.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;edcba&quot;]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> If we delete less than 4 columns, the only row will not be lexicographically sorted.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;ghi&quot;,&quot;def&quot;,&quot;abc&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All rows are already lexicographically sorted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == strs.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code> consists of lowercase English letters.</li>\n</ul>\n\n<ul>\n\t<li>&nbsp;</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 578,
            "dislikes": 13,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.7K\", \"totalSubmission\": \"23.7K\", \"totalAcceptedRaw\": 13676, \"totalSubmissionRaw\": 23709, \"acRate\": \"57.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array `strs` of `n` strings, all of the same length, determine the minimum number of columns that need to be deleted such that each remaining string (row) is in lexicographic order. You may choose any set of column indices to delete.",
                "constraints": [
                    "n == strs.length",
                    "1 <= n <= 100",
                    "1 <= strs[i].length <= 100",
                    "strs[i] consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "[\"babca\",\"bbazb\"]",
                        "output": "3",
                        "explanation": "Deleting columns 0, 1, and 4 results in strs = [\"bc\", \"az\"]. Both rows are now lexicographically sorted."
                    },
                    {
                        "input": "[\"edcba\"]",
                        "output": "4",
                        "explanation": "Deleting less than 4 columns will not result in a lexicographically sorted string."
                    },
                    {
                        "input": "[\"ghi\",\"def\",\"abc\"]",
                        "output": "0",
                        "explanation": "All rows are already lexicographically sorted, so no columns need to be deleted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minDeletionSize(vector<string>& A) {\n    const int n = A[0].length();\n    // dp[i] := LIS ending at A[*][i]\n    vector<int> dp(n, 1);\n\n    for (int i = 1; i < n; ++i)\n      for (int j = 0; j < i; ++j)\n        if (all_of(A.begin(), A.end(),\n                   [&](const string& a) { return a[j] <= a[i]; }))\n          dp[i] = max(dp[i], dp[j] + 1);\n\n    return n - *max_element(dp.begin(), dp.end());\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minDeletionSize(String[] A) {\n    final int n = A[0].length();\n    // dp[i] := LIS ending at A[*][i]\n    int[] dp = new int[n];\n    Arrays.fill(dp, 1);\n\n    for (int i = 1; i < n; ++i)\n      for (int j = 0; j < i; ++j)\n        if (isSorted(A, j, i))\n          dp[i] = Math.max(dp[i], dp[j] + 1);\n\n    return n - Arrays.stream(dp).max().getAsInt();\n  }\n\n  private boolean isSorted(String[] A, int j, int i) {\n    for (final String a : A)\n      if (a.charAt(j) > a.charAt(i))\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}