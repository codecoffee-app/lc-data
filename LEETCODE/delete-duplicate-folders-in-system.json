{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1948",
            "title": "Delete Duplicate Folders in System",
            "titleSlug": "delete-duplicate-folders-in-system",
            "content": "<p>Due to a bug, there are many duplicate folders in a file system. You are given a 2D array <code>paths</code>, where <code>paths[i]</code> is an array representing an absolute path to the <code>i<sup>th</sup></code> folder in the file system.</p>\n\n<ul>\n\t<li>For example, <code>[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</code> represents the path <code>&quot;/one/two/three&quot;</code>.</li>\n</ul>\n\n<p>Two folders (not necessarily on the same level) are <strong>identical</strong> if they contain the <strong>same non-empty</strong> set of identical subfolders and underlying subfolder structure. The folders <strong>do not</strong> need to be at the root level to be identical. If two or more folders are <strong>identical</strong>, then <strong>mark</strong> the folders as well as all their subfolders.</p>\n\n<ul>\n\t<li>For example, folders <code>&quot;/a&quot;</code> and <code>&quot;/b&quot;</code> in the file structure below are identical. They (as well as their subfolders) should <strong>all</strong> be marked:\n\n\t<ul>\n\t\t<li><code>/a</code></li>\n\t\t<li><code>/a/x</code></li>\n\t\t<li><code>/a/x/y</code></li>\n\t\t<li><code>/a/z</code></li>\n\t\t<li><code>/b</code></li>\n\t\t<li><code>/b/x</code></li>\n\t\t<li><code>/b/x/y</code></li>\n\t\t<li><code>/b/z</code></li>\n\t</ul>\n\t</li>\n\t<li>However, if the file structure also included the path <code>&quot;/b/w&quot;</code>, then the folders <code>&quot;/a&quot;</code> and <code>&quot;/b&quot;</code> would not be identical. Note that <code>&quot;/a/x&quot;</code> and <code>&quot;/b/x&quot;</code> would still be considered identical even with the added folder.</li>\n</ul>\n\n<p>Once all the identical folders and their subfolders have been marked, the file system will <strong>delete</strong> all of them. The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.</p>\n\n<p>Return <em>the 2D array </em><code>ans</code> <em>containing the paths of the <strong>remaining</strong> folders after deleting all the marked folders. The paths may be returned in <strong>any</strong> order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/19/lc-dupfolder1.jpg\" style=\"width: 200px; height: 218px;\" />\n<pre>\n<strong>Input:</strong> paths = [[&quot;a&quot;],[&quot;c&quot;],[&quot;d&quot;],[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;b&quot;],[&quot;d&quot;,&quot;a&quot;]]\n<strong>Output:</strong> [[&quot;d&quot;],[&quot;d&quot;,&quot;a&quot;]]\n<strong>Explanation:</strong> The file structure is as shown.\nFolders &quot;/a&quot; and &quot;/c&quot; (and their subfolders) are marked for deletion because they both contain an empty\nfolder named &quot;b&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/19/lc-dupfolder2.jpg\" style=\"width: 200px; height: 355px;\" />\n<pre>\n<strong>Input:</strong> paths = [[&quot;a&quot;],[&quot;c&quot;],[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;b&quot;],[&quot;a&quot;,&quot;b&quot;,&quot;x&quot;],[&quot;a&quot;,&quot;b&quot;,&quot;x&quot;,&quot;y&quot;],[&quot;w&quot;],[&quot;w&quot;,&quot;y&quot;]]\n<strong>Output:</strong> [[&quot;c&quot;],[&quot;c&quot;,&quot;b&quot;],[&quot;a&quot;],[&quot;a&quot;,&quot;b&quot;]]\n<strong>Explanation: </strong>The file structure is as shown. \nFolders &quot;/a/b/x&quot; and &quot;/w&quot; (and their subfolders) are marked for deletion because they both contain an empty folder named &quot;y&quot;.\nNote that folders &quot;/a&quot; and &quot;/c&quot; are identical after the deletion, but they are not deleted because they were not marked beforehand.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/19/lc-dupfolder3.jpg\" style=\"width: 200px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> paths = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;],[&quot;c&quot;],[&quot;a&quot;]]\n<strong>Output:</strong> [[&quot;c&quot;],[&quot;c&quot;,&quot;d&quot;],[&quot;a&quot;],[&quot;a&quot;,&quot;b&quot;]]\n<strong>Explanation:</strong> All folders are unique in the file system.\nNote that the returned array can be in a different order as the order does not matter.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= paths.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= paths[i].length &lt;= 500</code></li>\n\t<li><code>1 &lt;= paths[i][j].length &lt;= 10</code></li>\n\t<li><code>1 &lt;= sum(paths[i][j].length) &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>path[i][j]</code> consists of lowercase English letters.</li>\n\t<li>No two paths lead to the same folder.</li>\n\t<li>For any folder not at the root level, its parent folder will also be in the input.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 308,
            "dislikes": 66,
            "similarQuestions": "[{\"title\": \"Find Duplicate File in System\", \"titleSlug\": \"find-duplicate-file-in-system\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Duplicate Subtrees\", \"titleSlug\": \"find-duplicate-subtrees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.2K\", \"totalSubmission\": \"14.6K\", \"totalAcceptedRaw\": 8206, \"totalSubmissionRaw\": 14570, \"acRate\": \"56.3%\"}",
            "hints": [
                "Can we use a trie to build the folder structure?",
                "Can we utilize hashing to hash the folder structures?"
            ],
            "rephrased": {
                "body": "Given a 2D array `paths`, where `paths[i]` represents the absolute path to the i-th folder in a file system, identify and delete duplicate folders. Two folders are considered identical if they contain the same non-empty set of identical subfolders and underlying structure. Mark identical folders and their subfolders for deletion. After the deletion process (which happens only once), return a 2D array containing the paths of the remaining folders in any order.",
                "constraints": [
                    "1 <= paths.length <= 2 * 10^4",
                    "1 <= paths[i].length <= 500",
                    "1 <= paths[i][j].length <= 10",
                    "1 <= sum(paths[i][j].length) <= 2 * 10^5",
                    "path[i][j] consists of lowercase English letters.",
                    "No two paths lead to the same folder.",
                    "For any folder not at the root level, its parent folder will also be in the input."
                ],
                "testcases": [
                    {
                        "input": "[[\"a\"],[\"c\"],[\"d\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"d\",\"a\"]]",
                        "output": "[[\"d\"],[\"d\",\"a\"]]",
                        "explanation": "The folders \"/a\" and \"/c\" (and their subfolders) are marked for deletion because they both contain an empty folder named \"b\"."
                    },
                    {
                        "input": "[[\"a\"],[\"c\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"a\",\"b\",\"x\"],[\"a\",\"b\",\"x\",\"y\"],[\"w\"],[\"w\",\"y\"]]",
                        "output": "[[\"c\"],[\"c\",\"b\"],[\"a\"],[\"a\",\"b\"]]",
                        "explanation": "The folders \"/a/b/x\" and \"/w\" (and their subfolders) are marked for deletion because they both contain an empty folder named \"y\".  Folders \"/a\" and \"/c\" are identical after the deletion, but they are not deleted because they were not marked beforehand."
                    },
                    {
                        "input": "[[\"a\",\"b\"],[\"c\",\"d\"],[\"c\"],[\"a\"]]",
                        "output": "[[\"c\"],[\"c\",\"d\"],[\"a\"],[\"a\",\"b\"]]",
                        "explanation": "All folders are unique in the file system."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-duplicate-file-in-system",
                "title": "Find Duplicate File in System",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-duplicate-subtrees",
                "title": "Find Duplicate Subtrees",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we use a trie to build the folder structure?",
            "Can we utilize hashing to hash the folder structures?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  unordered_map<string, shared_ptr<TrieNode>> children;\n  bool deleted = false;\n};\n\nclass Solution {\n public:\n  vector<vector<string>> deleteDuplicateFolder(vector<vector<string>>& paths) {\n    vector<vector<string>> ans;\n    vector<string> path;\n    unordered_map<string, vector<shared_ptr<TrieNode>>> subtreeToNodes;\n\n    std::ranges::sort(paths);\n\n    for (const vector<string>& path : paths) {\n      shared_ptr<TrieNode> node = root;\n      for (const string& s : path) {\n        if (!node->children.count(s))\n          node->children[s] = make_shared<TrieNode>();\n        node = node->children[s];\n      }\n    }\n\n    buildSubtreeToRoots(root, subtreeToNodes);\n\n    for (const auto& [_, nodes] : subtreeToNodes)\n      if (nodes.size() > 1)\n        for (shared_ptr<TrieNode> node : nodes)\n          node->deleted = true;\n\n    constructPath(root, path, ans);\n    return ans;\n  }\n\n private:\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n\n  string buildSubtreeToRoots(\n      shared_ptr<TrieNode> node,\n      unordered_map<string, vector<shared_ptr<TrieNode>>>& subtreeToNodes) {\n    string subtree = \"(\";\n    for (const auto& [s, child] : node->children)\n      subtree += s + buildSubtreeToRoots(child, subtreeToNodes);\n    subtree += \")\";\n    if (subtree != \"()\")\n      subtreeToNodes[subtree].push_back(node);\n    return subtree;\n  }\n\n  void constructPath(shared_ptr<TrieNode> node, vector<string>& path,\n                     vector<vector<string>>& ans) {\n    for (const auto& [s, child] : node->children)\n      if (!child->deleted) {\n        path.push_back(s);\n        constructPath(child, path, ans);\n        path.pop_back();\n      }\n    if (!path.empty())\n      ans.push_back(path);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public Map<String, TrieNode> children = new HashMap<>();\n  public boolean deleted = false;\n}\n\nclass Solution {\n  public List<List<String>> deleteDuplicateFolder(List<List<String>> paths) {\n    List<List<String>> ans = new ArrayList<>();\n    Map<String, List<TrieNode>> subtreeToNodes = new HashMap<>();\n\n    Collections.sort(paths, (a, b) -> {\n      for (int i = 0; i < Math.min(a.size(), b.size()); ++i) {\n        final int c = a.get(i).compareTo(b.get(i));\n        if (c != 0)\n          return c;\n      }\n      return Integer.compare(a.size(), b.size());\n    });\n\n    for (List<String> path : paths) {\n      TrieNode node = root;\n      for (final String s : path) {\n        node.children.putIfAbsent(s, new TrieNode());\n        node = node.children.get(s);\n      }\n    }\n\n    buildSubtreeToRoots(root, subtreeToNodes);\n\n    for (List<TrieNode> nodes : subtreeToNodes.values())\n      if (nodes.size() > 1)\n        for (TrieNode node : nodes)\n          node.deleted = true;\n\n    constructPath(root, new ArrayList<>(), ans);\n    return ans;\n  }\n\n  private TrieNode root = new TrieNode();\n\n  private StringBuilder buildSubtreeToRoots(TrieNode node,\n                                            Map<String, List<TrieNode>> subtreeToNodes) {\n    StringBuilder sb = new StringBuilder(\"(\");\n    for (final String s : node.children.keySet()) {\n      TrieNode child = node.children.get(s);\n      sb.append(s).append(buildSubtreeToRoots(child, subtreeToNodes));\n    }\n    sb.append(\")\");\n    final String subtree = sb.toString();\n    if (!subtree.equals(\"()\")) {\n      subtreeToNodes.putIfAbsent(subtree, new ArrayList<>());\n      subtreeToNodes.get(subtree).add(node);\n    }\n    return sb;\n  }\n\n  private void constructPath(TrieNode node, List<String> path, List<List<String>> ans) {\n    for (final String s : node.children.keySet()) {\n      TrieNode child = node.children.get(s);\n      if (!child.deleted) {\n        path.add(s);\n        constructPath(child, path, ans);\n        path.remove(path.size() - 1);\n      }\n    }\n    if (!path.isEmpty())\n      ans.add(new ArrayList<>(path));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TrieNode:\n  def __init__(self):\n    self.children: Dict[str, TrieNode] = collections.defaultdict(TrieNode)\n    self.deleted = False\n\n\nclass Solution:\n  def deleteDuplicateFolder(self, paths: List[List[str]]) -> List[List[str]]:\n    ans = []\n    root = TrieNode()\n    subtreeToNodes: Dict[str, List[TrieNode]] = collections.defaultdict(list)\n\n    # Construct the Trie\n    for path in sorted(paths):\n      node = root\n      for s in path:\n        node = node.children[s]\n\n    # For each subtree, fill in the {subtree encoding: [root]} hash table\n    def buildSubtreeToRoots(node: TrieNode) -> str:\n      subtree = '(' + ''.join(s + buildSubtreeToRoots(node.children[s])\n                              for s in node.children) + ')'\n      if subtree != '()':\n        subtreeToNodes[subtree].append(node)\n      return subtree\n\n    buildSubtreeToRoots(root)\n\n    # Mark nodes that should be deleted\n    for nodes in subtreeToNodes.values():\n      if len(nodes) > 1:\n        for node in nodes:\n          node.deleted = True\n\n    # Construct the answer array for nodes that haven't been deleted\n    def constructPath(node: TrieNode, path: List[str]) -> None:\n      for s, child in node.children.items():\n        if not child.deleted:\n          constructPath(child, path + [s])\n      if path:\n        ans.append(path)\n\n    constructPath(root, [])\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}