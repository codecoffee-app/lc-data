{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2500",
            "title": "Delete Greatest Value in Each Row",
            "titleSlug": "delete-greatest-value-in-each-row",
            "content": "<p>You are given an <code>m x n</code> matrix <code>grid</code> consisting of positive integers.</p>\n\n<p>Perform the following operation until <code>grid</code> becomes empty:</p>\n\n<ul>\n\t<li>Delete the element with the greatest value from each row. If multiple such elements exist, delete any of them.</li>\n\t<li>Add the maximum of deleted elements to the answer.</li>\n</ul>\n\n<p><strong>Note</strong> that the number of columns decreases by one after each operation.</p>\n\n<p>Return <em>the answer after performing the operations described above</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/19/q1ex1.jpg\" style=\"width: 600px; height: 135px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2,4],[3,3,1]]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The diagram above shows the removed values in each step.\n- In the first operation, we remove 4 from the first row and 3 from the second row (notice that, there are two cells with value 3 and we can remove any of them). We add 4 to the answer.\n- In the second operation, we remove 2 from the first row and 3 from the second row. We add 3 to the answer.\n- In the third operation, we remove 1 from the first row and 1 from the second row. We add 1 to the answer.\nThe final answer = 4 + 3 + 1 = 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/19/q1ex2.jpg\" style=\"width: 83px; height: 83px;\" />\n<pre>\n<strong>Input:</strong> grid = [[10]]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The diagram above shows the removed values in each step.\n- In the first operation, we remove 10 from the first row. We add 10 to the answer.\nThe final answer = 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 587,
            "dislikes": 37,
            "similarQuestions": "[{\"title\": \"Equal Row and Column Pairs\", \"titleSlug\": \"equal-row-and-column-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"48.7K\", \"totalSubmission\": \"62.6K\", \"totalAcceptedRaw\": 48739, \"totalSubmissionRaw\": 62582, \"acRate\": \"77.9%\"}",
            "hints": [
                "Iterate from the first to the last row and if there exist some unmarked cells, take a maximum from them and mark that cell as visited.",
                "Add a maximum of newly marked cells to answer and repeat that operation until the whole matrix becomes marked."
            ],
            "rephrased": {
                "body": "Given an `m x n` matrix `grid` consisting of positive integers, perform the following operation until `grid` becomes empty:\n\n1.  Delete the element with the greatest value from each row. If multiple such elements exist, delete any of them.\n2.  Add the maximum of the deleted elements to the answer.\n\nReturn the answer after performing the operations described above.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 50",
                    "1 <= grid[i][j] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[[1,2,4],[3,3,1]]",
                        "output": "8",
                        "explanation": "In the first operation, the maximum value from each row is removed (4 from the first row and 3 from the second row). The maximum of these removed values (4) is added to the answer. In the second operation, 2 and 3 are removed, and 3 is added to the answer. In the third operation, 1 and 1 are removed, and 1 is added to the answer. The final answer is 4 + 3 + 1 = 8."
                    },
                    {
                        "input": "[[10]]",
                        "output": "10",
                        "explanation": "In the first operation, 10 is removed from the first row and added to the answer. The final answer is 10."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "equal-row-and-column-pairs",
                "title": "Equal Row and Column Pairs",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Iterate from the first to the last row and if there exist some unmarked cells, take a maximum from them and mark that cell as visited.",
            "Add a maximum of newly marked cells to answer and repeat that operation until the whole matrix becomes marked."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int deleteGreatestValue(vector<vector<int>>& grid) {\n    int ans = 0;\n\n    for (vector<int>& row : grid)\n      std::ranges::sort(row);\n\n    for (int j = 0; j < grid[0].size(); ++j) {\n      int maxOfColumn = 0;\n      for (int i = 0; i < grid.size(); ++i)\n        maxOfColumn = max(maxOfColumn, grid[i][j]);\n      ans += maxOfColumn;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int deleteGreatestValue(int[][] grid) {\n    int ans = 0;\n\n    for (int[] row : grid)\n      Arrays.sort(row);\n\n    for (int j = 0; j < grid[0].length; ++j) {\n      int maxOfColumn = 0;\n      for (int i = 0; i < grid.length; ++i)\n        maxOfColumn = Math.max(maxOfColumn, grid[i][j]);\n      ans += maxOfColumn;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def deleteGreatestValue(self, grid: List[List[int]]) -> int:\n    for row in grid:\n      row.sort()\n    return sum(max(col) for col in zip(*grid))\n",
                "lang_text": "py"
            }
        }
    }
}