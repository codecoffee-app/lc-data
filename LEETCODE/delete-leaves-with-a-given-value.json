{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1325",
            "title": "Delete Leaves With a Given Value",
            "titleSlug": "delete-leaves-with-a-given-value",
            "content": "<p>Given a binary tree <code>root</code> and an integer <code>target</code>, delete all the <strong>leaf nodes</strong> with value <code>target</code>.</p>\n\n<p>Note that once you delete a leaf node with value <code>target</code><strong>, </strong>if its parent node becomes a leaf node and has the value <code>target</code>, it should also be deleted (you need to continue doing that until you cannot).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/09/sample_1_1684.png\" style=\"width: 500px; height: 112px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2,3,2,null,2,4], target = 2\n<strong>Output:</strong> [1,null,3,null,4]\n<strong>Explanation:</strong> Leaf nodes in green with value (target = 2) are removed (Picture in left). \nAfter removing, new nodes become leaf nodes with value (target = 2) (Picture in center).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/09/sample_2_1684.png\" style=\"width: 400px; height: 154px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,3,3,3,2], target = 3\n<strong>Output:</strong> [1,3,null,null,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/15/sample_3_1684.png\" style=\"width: 500px; height: 166px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2,null,2,null,2], target = 2\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> Leaf nodes in green with value (target = 2) are removed at each step.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 3000]</code>.</li>\n\t<li><code>1 &lt;= Node.val, target &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2162,
            "dislikes": 39,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"97.6K\", \"totalSubmission\": \"131.4K\", \"totalAcceptedRaw\": 97630, \"totalSubmissionRaw\": 131382, \"acRate\": \"74.3%\"}",
            "hints": [
                "Use the DFS to reconstruct the tree such that no leaf node is equal to the target. If the leaf node is equal to the target, return an empty object instead."
            ],
            "rephrased": {
                "body": "Given the root of a binary tree and an integer target, remove all leaf nodes with a value equal to target.  After removing a leaf node, if its parent becomes a leaf node and also has a value equal to target, continue removing such parent nodes until no more leaf nodes with the target value exist.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 3000].",
                    "1 <= Node.val, target <= 1000"
                ],
                "testcases": [
                    {
                        "input": "root = [1,2,3,2,null,2,4], target = 2",
                        "output": "[1,null,3,null,4]",
                        "explanation": "Leaf nodes with value 2 are removed.  The node with value 2 at index 3 is removed initially. After that the leaf node with value 2 at index 5 is removed."
                    },
                    {
                        "input": "root = [1,3,3,3,2], target = 3",
                        "output": "[1,3,null,null,2]",
                        "explanation": "Leaf nodes with value 3 are removed. The node with value 3 at index 1 remains since it is not a leaf node."
                    },
                    {
                        "input": "root = [1,2,null,2,null,2], target = 2",
                        "output": "[1]",
                        "explanation": "Leaf nodes with value 2 are removed repeatedly until no leaf nodes with value 2 exist."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use the DFS to reconstruct the tree such that no leaf node is equal to the target. If the leaf node is equal to the target, return an empty object instead."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* removeLeafNodes(TreeNode* root, int target) {\n    if (root == nullptr)\n      return nullptr;\n    root->left = removeLeafNodes(root->left, target);\n    root->right = removeLeafNodes(root->right, target);\n    return isLeaf(root) && root->val == target ? nullptr : root;\n  }\n\n private:\n  bool isLeaf(TreeNode* root) {\n    return root->left == nullptr && root->right == nullptr;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode removeLeafNodes(TreeNode root, int target) {\n    if (root == null)\n      return null;\n    root.left = removeLeafNodes(root.left, target);\n    root.right = removeLeafNodes(root.right, target);\n    return isLeaf(root) && root.val == target ? null : root;\n  }\n\n  private boolean isLeaf(TreeNode root) {\n    return root.left == null && root.right == null;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def removeLeafNodes(self, root: Optional[TreeNode], target: int) -> Optional[TreeNode]:\n    if not root:\n      return None\n    root.left = self.removeLeafNodes(root.left, target)\n    root.right = self.removeLeafNodes(root.right, target)\n    return None if self._isLeaf(root) and root.val == target else root\n\n  def _isLeaf(self, root: Optional[TreeNode]) -> bool:\n    return not root.left and not root.right\n",
                "lang_text": "py"
            }
        }
    }
}