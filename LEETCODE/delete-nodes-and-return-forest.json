{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1110",
            "title": "Delete Nodes And Return Forest",
            "titleSlug": "delete-nodes-and-return-forest",
            "content": "<p>Given the <code>root</code> of a binary tree, each node in the tree has a distinct value.</p>\n\n<p>After deleting all nodes with a value in <code>to_delete</code>, we are left with a forest (a disjoint union of trees).</p>\n\n<p>Return the roots of the trees in the remaining forest. You may return the result in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/07/01/screen-shot-2019-07-01-at-53836-pm.png\" style=\"width: 237px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,6,7], to_delete = [3,5]\n<strong>Output:</strong> [[1,2,null,4],[6],[7]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2,4,null,3], to_delete = [3]\n<strong>Output:</strong> [[1,2,4]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the given tree is at most <code>1000</code>.</li>\n\t<li>Each node has a distinct value between <code>1</code> and <code>1000</code>.</li>\n\t<li><code>to_delete.length &lt;= 1000</code></li>\n\t<li><code>to_delete</code> contains distinct values between <code>1</code> and <code>1000</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3742,
            "dislikes": 105,
            "similarQuestions": "[{\"title\": \"Count Nodes With the Highest Score\", \"titleSlug\": \"count-nodes-with-the-highest-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"203.8K\", \"totalSubmission\": \"294.7K\", \"totalAcceptedRaw\": 203821, \"totalSubmissionRaw\": 294687, \"acRate\": \"69.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree where each node has a unique value, remove all nodes whose values are present in the `to_delete` array.  This will result in a forest (a collection of disjoint trees). Return a list containing the roots of the trees that remain in the forest. The order of the roots in the output doesn't matter.",
                "constraints": [
                    "The number of nodes in the given tree is at most 1000.",
                    "Each node has a distinct value between 1 and 1000.",
                    "to_delete.length <= 1000",
                    "to_delete contains distinct values between 1 and 1000."
                ],
                "testcases": [
                    {
                        "input": "root = [1,2,3,4,5,6,7], to_delete = [3,5]",
                        "output": "[[1,2,null,4],[6],[7]]",
                        "explanation": "After deleting nodes with values 3 and 5, the remaining trees have roots 1, 6, and 7."
                    },
                    {
                        "input": "root = [1,2,4,null,3], to_delete = [3]",
                        "output": "[[1,2,4]]",
                        "explanation": "After deleting the node with value 3, only one tree remains with root 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "count-nodes-with-the-highest-score",
                "title": "Count Nodes With the Highest Score",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {\n    vector<TreeNode*> ans;\n    dfs(root, {to_delete.begin(), to_delete.end()}, true, ans);\n    return ans;\n  }\n\n private:\n  TreeNode* dfs(TreeNode*& root, const unordered_set<int>&& toDeleteSet,\n                bool isRoot, vector<TreeNode*>& ans) {\n    if (root == nullptr)\n      return nullptr;\n\n    const bool deleted = toDeleteSet.count(root->val);\n    if (isRoot && !deleted)\n      ans.push_back(root);\n\n    // If root is deleted, both children have the possibility to be a new root\n    root->left = dfs(root->left, move(toDeleteSet), deleted, ans);\n    root->right = dfs(root->right, move(toDeleteSet), deleted, ans);\n    return deleted ? nullptr : root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {\n    List<TreeNode> ans = new ArrayList<>();\n    Set<Integer> toDeleteSet = Arrays.stream(to_delete).boxed().collect(Collectors.toSet());\n\n    dfs(root, toDeleteSet, true, ans);\n    return ans;\n  }\n\n  private TreeNode dfs(TreeNode root, Set<Integer> toDeleteSet, boolean isRoot,\n                       List<TreeNode> ans) {\n    if (root == null)\n      return null;\n\n    final boolean deleted = toDeleteSet.contains(root.val);\n    if (isRoot && !deleted)\n      ans.add(root);\n\n    // If root is deleted, both children have the possibility to be a new root\n    root.left = dfs(root.left, toDeleteSet, deleted, ans);\n    root.right = dfs(root.right, toDeleteSet, deleted, ans);\n    return deleted ? null : root;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def delNodes(self, root: TreeNode, to_delete: List[int]) -> List[TreeNode]:\n    ans = []\n    toDeleteSet = set(to_delete)\n\n    def dfs(root: TreeNode, isRoot: bool) -> TreeNode:\n      if not root:\n        return None\n\n      deleted = root.val in toDeleteSet\n      if isRoot and not deleted:\n        ans.append(root)\n\n      # If root is deleted, both children have the possibility to be a new root\n      root.left = dfs(root.left, deleted)\n      root.right = dfs(root.right, deleted)\n      return None if deleted else root\n\n    dfs(root, True)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}