{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3217",
            "title": "Delete Nodes From Linked List Present in Array",
            "titleSlug": "delete-nodes-from-linked-list-present-in-array",
            "content": "<p>You are given an array of integers <code>nums</code> and the <code>head</code> of a linked list. Return the <code>head</code> of the modified linked list after <strong>removing</strong> all nodes from the linked list that have a value that exists in <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3], head = [1,2,3,4,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[4,5]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample0.png\" style=\"width: 400px; height: 66px;\" /></strong></p>\n\n<p>Remove the nodes with values 1, 2, and 3.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1], head = [1,2,1,2,1,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,2,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample1.png\" style=\"height: 62px; width: 450px;\" /></p>\n\n<p>Remove the nodes with value 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [5], head = [1,2,3,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,2,3,4]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample2.png\" style=\"width: 400px; height: 83px;\" /></strong></p>\n\n<p>No node has value 5.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>All elements in <code>nums</code> are unique.</li>\n\t<li>The number of nodes in the given list is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li>The input is generated such that there is at least one node in the linked list that has a value not present in <code>nums</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 98,
            "dislikes": 3,
            "similarQuestions": "[{\"title\": \"Remove Linked List Elements\", \"titleSlug\": \"remove-linked-list-elements\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Delete Node in a Linked List\", \"titleSlug\": \"delete-node-in-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Remove Nodes From Linked List\", \"titleSlug\": \"remove-nodes-from-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                }
            ],
            "stats": "{\"totalAccepted\": \"38K\", \"totalSubmission\": \"61.9K\", \"totalAcceptedRaw\": 38040, \"totalSubmissionRaw\": 61877, \"acRate\": \"61.5%\"}",
            "hints": [
                "Add all elements of <code>nums</code> into a Set.",
                "Scan the list to check if the current element should be deleted by checking the Set."
            ],
            "rephrased": {
                "body": "Given an array of integers `nums` and the head of a linked list, return the head of the modified linked list after removing all nodes from the linked list that have a value that exists in `nums`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^5",
                    "All elements in `nums` are unique.",
                    "The number of nodes in the given list is in the range [1, 10^5]",
                    "1 <= Node.val <= 10^5",
                    "The input is generated such that there is at least one node in the linked list that has a value not present in `nums`."
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3], head = [1,2,3,4,5]",
                        "output": "[4,5]",
                        "explanation": "Remove the nodes with values 1, 2, and 3 from the linked list. The remaining list is [4, 5]."
                    },
                    {
                        "input": "nums = [1], head = [1,2,1,2,1,2]",
                        "output": "[2,2,2]",
                        "explanation": "Remove the nodes with value 1 from the linked list. The remaining list is [2, 2, 2]."
                    },
                    {
                        "input": "nums = [5], head = [1,2,3,4]",
                        "output": "[1,2,3,4]",
                        "explanation": "No node in the linked list has the value 5, so the list remains unchanged."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "remove-linked-list-elements",
                "title": "Remove Linked List Elements",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "delete-node-in-a-linked-list",
                "title": "Delete Node in a Linked List",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "remove-nodes-from-linked-list",
                "title": "Remove Nodes From Linked List",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Add all elements of <code>nums</code> into a Set.",
            "Scan the list to check if the current element should be deleted by checking the Set."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  ListNode* modifiedList(vector<int>& nums, ListNode* head) {\n    ListNode dummy(0, head);\n    unordered_set<int> numsSet{nums.begin(), nums.end()};\n\n    for (ListNode* curr = &dummy; curr->next != nullptr;)\n      if (numsSet.contains(curr->next->val))\n        curr->next = curr->next->next;\n      else\n        curr = curr->next;\n\n    return dummy.next;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public ListNode modifiedList(int[] nums, ListNode head) {\n    ListNode dummy = new ListNode(0, head);\n    Set<Integer> numsSet = Arrays.stream(nums).boxed().collect(Collectors.toSet());\n\n    for (ListNode curr = dummy; curr.next != null;)\n      if (numsSet.contains(curr.next.val))\n        curr.next = curr.next.next;\n      else\n        curr = curr.next;\n\n    return dummy.next;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def modifiedList(\n      self,\n      nums: list[int],\n      head: ListNode | None,\n  ) -> ListNode | None:\n    dummy = ListNode(0, head)\n    numsSet = set(nums)\n\n    curr = dummy\n    while curr.next:\n      if curr.next.val in numsSet:\n        curr.next = curr.next.next\n      else:\n        curr = curr.next\n\n    return dummy.next\n",
                "lang_text": "py"
            }
        }
    }
}