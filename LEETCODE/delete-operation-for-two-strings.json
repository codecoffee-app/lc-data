{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "583",
            "title": "Delete Operation for Two Strings",
            "titleSlug": "delete-operation-for-two-strings",
            "content": "<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of <strong>steps</strong> required to make</em> <code>word1</code> <em>and</em> <code>word2</code> <em>the same</em>.</p>\n\n<p>In one <strong>step</strong>, you can delete exactly one character in either string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;sea&quot;, word2 = &quot;eat&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You need one step to make &quot;sea&quot; to &quot;ea&quot; and another step to make &quot;eat&quot; to &quot;ea&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;leetcode&quot;, word2 = &quot;etco&quot;\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 500</code></li>\n\t<li><code>word1</code> and <code>word2</code> consist of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5582,
            "dislikes": 81,
            "similarQuestions": "[{\"title\": \"Edit Distance\", \"titleSlug\": \"edit-distance\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum ASCII Delete Sum for Two Strings\", \"titleSlug\": \"minimum-ascii-delete-sum-for-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Common Subsequence\", \"titleSlug\": \"longest-common-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Make Three Strings Equal\", \"titleSlug\": \"make-three-strings-equal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"232.9K\", \"totalSubmission\": \"381K\", \"totalAcceptedRaw\": 232871, \"totalSubmissionRaw\": 381039, \"acRate\": \"61.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Determine the fewest deletions required to transform two given strings, `word1` and `word2`, into identical strings. Each deletion removes a single character from either string.",
                "constraints": [
                    "1 <= word1.length, word2.length <= 500",
                    "word1 and word2 consist of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "word1 = \"sea\", word2 = \"eat\"",
                        "output": "2",
                        "explanation": "One deletion is needed to change \"sea\" to \"ea\", and another to change \"eat\" to \"ea\"."
                    },
                    {
                        "input": "word1 = \"leetcode\", word2 = \"etco\"",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "edit-distance",
                "title": "Edit Distance",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-ascii-delete-sum-for-two-strings",
                "title": "Minimum ASCII Delete Sum for Two Strings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-common-subsequence",
                "title": "Longest Common Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "make-three-strings-equal",
                "title": "Make Three Strings Equal",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minDistance(string word1, string word2) {\n    const int k = lcs(word1, word2);\n    return (word1.length() - k) + (word2.length() - k);\n  }\n\n private:\n  int lcs(const string& A, const string& B) {\n    const int m = A.length();\n    const int n = B.length();\n    // dp[i][j] := LCS's length of A[0..i) and B[0..j)\n    vector<vector<int>> dp(m + 1, vector<int>(n + 1));\n\n    for (int i = 1; i <= m; ++i)\n      for (int j = 1; j <= n; ++j)\n        if (A[i - 1] == B[j - 1])\n          dp[i][j] = 1 + dp[i - 1][j - 1];\n        else\n          dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n\n    return dp[m][n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minDistance(String word1, String word2) {\n    final int k = lcs(word1, word2);\n    return (word1.length() - k) + (word2.length() - k);\n  }\n\n  private int lcs(final String A, final String B) {\n    final int m = A.length();\n    final int n = B.length();\n    // dp[i][j] := LCS's length of A[0..i) and B[0..j)\n    int[][] dp = new int[m + 1][n + 1];\n\n    for (int i = 1; i <= m; ++i)\n      for (int j = 1; j <= n; ++j)\n        if (A.charAt(i - 1) == B.charAt(j - 1))\n          dp[i][j] = 1 + dp[i - 1][j - 1];\n        else\n          dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n\n    return dp[m][n];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minDistance(self, word1: str, word2: str) -> int:\n    m = len(word1)\n    n = len(word2)\n    dp = [0] * (n + 1)\n\n    for j in range(n + 1):\n      dp[j] = j\n\n    for i in range(1, m + 1):\n      newDp = [i] + [0] * n\n      for j in range(1, n + 1):\n        if word1[i - 1] == word2[j - 1]:\n          newDp[j] = dp[j - 1]\n        else:\n          newDp[j] = min(newDp[j - 1], dp[j]) + 1\n      dp = newDp\n\n    return dp[n]\n",
                "lang_text": "py"
            }
        }
    }
}