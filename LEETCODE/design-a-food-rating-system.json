{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2353",
            "title": "Design a Food Rating System",
            "titleSlug": "design-a-food-rating-system",
            "content": "<p>Design a food rating system that can do the following:</p>\n\n<ul>\n\t<li><strong>Modify</strong> the rating of a food item listed in the system.</li>\n\t<li>Return the highest-rated food item for a type of cuisine in the system.</li>\n</ul>\n\n<p>Implement the <code>FoodRatings</code> class:</p>\n\n<ul>\n\t<li><code>FoodRatings(String[] foods, String[] cuisines, int[] ratings)</code> Initializes the system. The food items are described by <code>foods</code>, <code>cuisines</code> and <code>ratings</code>, all of which have a length of <code>n</code>.\n\n\t<ul>\n\t\t<li><code>foods[i]</code> is the name of the <code>i<sup>th</sup></code> food,</li>\n\t\t<li><code>cuisines[i]</code> is the type of cuisine of the <code>i<sup>th</sup></code> food, and</li>\n\t\t<li><code>ratings[i]</code> is the initial rating of the <code>i<sup>th</sup></code> food.</li>\n\t</ul>\n\t</li>\n\t<li><code>void changeRating(String food, int newRating)</code> Changes the rating of the food item with the name <code>food</code>.</li>\n\t<li><code>String highestRated(String cuisine)</code> Returns the name of the food item that has the highest rating for the given type of <code>cuisine</code>. If there is a tie, return the item with the <strong>lexicographically smaller</strong> name.</li>\n</ul>\n\n<p>Note that a string <code>x</code> is lexicographically smaller than string <code>y</code> if <code>x</code> comes before <code>y</code> in dictionary order, that is, either <code>x</code> is a prefix of <code>y</code>, or if <code>i</code> is the first position such that <code>x[i] != y[i]</code>, then <code>x[i]</code> comes before <code>y[i]</code> in alphabetic order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;FoodRatings&quot;, &quot;highestRated&quot;, &quot;highestRated&quot;, &quot;changeRating&quot;, &quot;highestRated&quot;, &quot;changeRating&quot;, &quot;highestRated&quot;]\n[[[&quot;kimchi&quot;, &quot;miso&quot;, &quot;sushi&quot;, &quot;moussaka&quot;, &quot;ramen&quot;, &quot;bulgogi&quot;], [&quot;korean&quot;, &quot;japanese&quot;, &quot;japanese&quot;, &quot;greek&quot;, &quot;japanese&quot;, &quot;korean&quot;], [9, 12, 8, 15, 14, 7]], [&quot;korean&quot;], [&quot;japanese&quot;], [&quot;sushi&quot;, 16], [&quot;japanese&quot;], [&quot;ramen&quot;, 16], [&quot;japanese&quot;]]\n<strong>Output</strong>\n[null, &quot;kimchi&quot;, &quot;ramen&quot;, null, &quot;sushi&quot;, null, &quot;ramen&quot;]\n\n<strong>Explanation</strong>\nFoodRatings foodRatings = new FoodRatings([&quot;kimchi&quot;, &quot;miso&quot;, &quot;sushi&quot;, &quot;moussaka&quot;, &quot;ramen&quot;, &quot;bulgogi&quot;], [&quot;korean&quot;, &quot;japanese&quot;, &quot;japanese&quot;, &quot;greek&quot;, &quot;japanese&quot;, &quot;korean&quot;], [9, 12, 8, 15, 14, 7]);\nfoodRatings.highestRated(&quot;korean&quot;); // return &quot;kimchi&quot;\n                                    // &quot;kimchi&quot; is the highest rated korean food with a rating of 9.\nfoodRatings.highestRated(&quot;japanese&quot;); // return &quot;ramen&quot;\n                                      // &quot;ramen&quot; is the highest rated japanese food with a rating of 14.\nfoodRatings.changeRating(&quot;sushi&quot;, 16); // &quot;sushi&quot; now has a rating of 16.\nfoodRatings.highestRated(&quot;japanese&quot;); // return &quot;sushi&quot;\n                                      // &quot;sushi&quot; is the highest rated japanese food with a rating of 16.\nfoodRatings.changeRating(&quot;ramen&quot;, 16); // &quot;ramen&quot; now has a rating of 16.\nfoodRatings.highestRated(&quot;japanese&quot;); // return &quot;ramen&quot;\n                                      // Both &quot;sushi&quot; and &quot;ramen&quot; have a rating of 16.\n                                      // However, &quot;ramen&quot; is lexicographically smaller than &quot;sushi&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>n == foods.length == cuisines.length == ratings.length</code></li>\n\t<li><code>1 &lt;= foods[i].length, cuisines[i].length &lt;= 10</code></li>\n\t<li><code>foods[i]</code>, <code>cuisines[i]</code> consist of lowercase English letters.</li>\n\t<li><code>1 &lt;= ratings[i] &lt;= 10<sup>8</sup></code></li>\n\t<li>All the strings in <code>foods</code> are <strong>distinct</strong>.</li>\n\t<li><code>food</code> will be the name of a food item in the system across all calls to <code>changeRating</code>.</li>\n\t<li><code>cuisine</code> will be a type of cuisine of <strong>at least one</strong> food item in the system across all calls to <code>highestRated</code>.</li>\n\t<li>At most <code>2 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>changeRating</code> and <code>highestRated</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1431,
            "dislikes": 286,
            "similarQuestions": "[{\"title\": \"Design a Number Container System\", \"titleSlug\": \"design-a-number-container-system\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Most Popular Video Creator\", \"titleSlug\": \"most-popular-video-creator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"79.6K\", \"totalSubmission\": \"173.8K\", \"totalAcceptedRaw\": 79594, \"totalSubmissionRaw\": 173758, \"acRate\": \"45.8%\"}",
            "hints": [
                "The key to solving this problem is to properly store the data using the right data structures.",
                "Firstly, a hash table is needed to efficiently map each food item to its cuisine and current rating.",
                "In addition, another hash table is needed to map cuisines to foods within each cuisine stored in an ordered set according to their ratings."
            ],
            "rephrased": {
                "body": "Design a food rating system that allows for modification of food item ratings and retrieval of the highest-rated food item for a given cuisine. Implement the `FoodRatings` class with the following methods:\n\n*   `FoodRatings(String[] foods, String[] cuisines, int[] ratings)`: Initializes the system with food names, their corresponding cuisines, and initial ratings.\n*   `void changeRating(String food, int newRating)`: Updates the rating of a specified food item.\n*   `String highestRated(String cuisine)`: Returns the name of the highest-rated food item for a given cuisine. In case of a tie, return the lexicographically smaller name.",
                "constraints": [
                    "1 <= n <= 2 * 10^4 (where n is the length of foods, cuisines, and ratings)",
                    "n == foods.length == cuisines.length == ratings.length",
                    "1 <= foods[i].length, cuisines[i].length <= 10",
                    "foods[i], cuisines[i] consist of lowercase English letters.",
                    "1 <= ratings[i] <= 10^8",
                    "All strings in foods are distinct.",
                    "food will be the name of a food item in the system across all calls to changeRating.",
                    "cuisine will be a type of cuisine of at least one food item in the system across all calls to highestRated.",
                    "At most 2 * 10^4 calls in total will be made to changeRating and highestRated."
                ],
                "testcases": [
                    {
                        "input": "[\"FoodRatings\", \"highestRated\", \"highestRated\", \"changeRating\", \"highestRated\", \"changeRating\", \"highestRated\"]\n[[[\"kimchi\", \"miso\", \"sushi\", \"moussaka\", \"ramen\", \"bulgogi\"], [\"korean\", \"japanese\", \"japanese\", \"greek\", \"japanese\", \"korean\"], [9, 12, 8, 15, 14, 7]], [\"korean\"], [\"japanese\"], [\"sushi\", 16], [\"japanese\"], [\"ramen\", 16], [\"japanese\"]]",
                        "output": "[null, \"kimchi\", \"ramen\", null, \"sushi\", null, \"ramen\"]",
                        "explanation": "Initial ratings: kimchi(korean, 9), miso(japanese, 12), sushi(japanese, 8), moussaka(greek, 15), ramen(japanese, 14), bulgogi(korean, 7).\n1. highestRated(\"korean\") returns \"kimchi\" (highest rated Korean food).\n2. highestRated(\"japanese\") returns \"ramen\" (highest rated Japanese food).\n3. changeRating(\"sushi\", 16) updates sushi's rating to 16.\n4. highestRated(\"japanese\") returns \"sushi\" (sushi is now the highest rated Japanese food).\n5. changeRating(\"ramen\", 16) updates ramen's rating to 16.\n6. highestRated(\"japanese\") returns \"ramen\" (both sushi and ramen have rating 16, but ramen is lexicographically smaller)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "design-a-number-container-system",
                "title": "Design a Number Container System",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "most-popular-video-creator",
                "title": "Most Popular Video Creator",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The key to solving this problem is to properly store the data using the right data structures.",
            "Firstly, a hash table is needed to efficiently map each food item to its cuisine and current rating.",
            "In addition, another hash table is needed to map cuisines to foods within each cuisine stored in an ordered set according to their ratings."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class FoodRatings {\n public:\n  FoodRatings(vector<string>& foods, vector<string>& cuisines,\n              vector<int>& ratings) {\n    for (int i = 0; i < foods.size(); ++i) {\n      cuisineToRatingAndFoods[cuisines[i]].insert({-ratings[i], foods[i]});\n      foodToCuisine[foods[i]] = cuisines[i];\n      foodToRating[foods[i]] = ratings[i];\n    }\n  }\n\n  void changeRating(string food, int newRating) {\n    const string cuisine = foodToCuisine[food];\n    const int oldRating = foodToRating[food];\n    auto& ratingAndFoods = cuisineToRatingAndFoods[cuisine];\n    ratingAndFoods.erase({-oldRating, food});\n    ratingAndFoods.insert({-newRating, food});\n    foodToRating[food] = newRating;\n  }\n\n  string highestRated(string cuisine) {\n    return cuisineToRatingAndFoods[cuisine].begin()->second;\n  }\n\n private:\n  // {cuisine: {(-rating, food)}} stores negative rating for smarter comparison\n  unordered_map<string, set<pair<int, string>>> cuisineToRatingAndFoods;\n  unordered_map<string, string> foodToCuisine;\n  unordered_map<string, int> foodToRating;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class FoodRatings {\n  public FoodRatings(String[] foods, String[] cuisines, int[] ratings) {\n    for (int i = 0; i < foods.length; ++i) {\n      cuisineToRatingAndFoods.putIfAbsent(\n          cuisines[i],\n          new TreeSet<>((a, b)\n                            -> a.getKey().equals(b.getKey()) ? a.getValue().compareTo(b.getValue())\n                                                             : b.getKey() - a.getKey()));\n      cuisineToRatingAndFoods.get(cuisines[i]).add(new Pair<>(ratings[i], foods[i]));\n      foodToCuisine.put(foods[i], cuisines[i]);\n      foodToRating.put(foods[i], ratings[i]);\n    }\n  }\n\n  public void changeRating(String food, int newRating) {\n    final String cuisine = foodToCuisine.get(food);\n    final int oldRating = foodToRating.get(food);\n    TreeSet<Pair<Integer, String>> ratingAndFoods = cuisineToRatingAndFoods.get(cuisine);\n    ratingAndFoods.remove(new Pair<>(oldRating, food));\n    ratingAndFoods.add(new Pair<>(newRating, food));\n    foodToRating.put(food, newRating);\n  }\n\n  public String highestRated(String cuisine) {\n    return cuisineToRatingAndFoods.get(cuisine).first().getValue();\n  }\n\n  // {cuisine: {(rating, food)}}\n  Map<String, TreeSet<Pair<Integer, String>>> cuisineToRatingAndFoods = new HashMap<>();\n  Map<String, String> foodToCuisine = new HashMap<>();\n  Map<String, Integer> foodToRating = new HashMap<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from sortedcontainers import SortedSet\n\n\nclass FoodRatings:\n  def __init__(self, foods: List[str], cuisines: List[str], ratings: List[int]):\n    self.cuisineToRatingAndFoods = collections.defaultdict(\n        lambda: SortedSet(key=lambda x: (-x[0], x[1])))\n    self.foodToCuisine = {}\n    self.foodToRating = {}\n\n    for food, cuisine, rating in zip(foods, cuisines, ratings):\n      self.cuisineToRatingAndFoods[cuisine].add((rating, food))\n      self.foodToCuisine[food] = cuisine\n      self.foodToRating[food] = rating\n\n  def changeRating(self, food: str, newRating: int) -> None:\n    cuisine = self.foodToCuisine[food]\n    oldRating = self.foodToRating[food]\n    ratingAndFoods = self.cuisineToRatingAndFoods[cuisine]\n    ratingAndFoods.remove((oldRating, food))\n    ratingAndFoods.add((newRating, food))\n    self.foodToRating[food] = newRating\n\n  def highestRated(self, cuisine: str) -> str:\n    return self.cuisineToRatingAndFoods[cuisine][0][1]\n",
                "lang_text": "py"
            }
        }
    }
}