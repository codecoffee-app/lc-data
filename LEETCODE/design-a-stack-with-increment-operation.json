{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1381",
            "title": "Design a Stack With Increment Operation",
            "titleSlug": "design-a-stack-with-increment-operation",
            "content": "<p>Design a stack that supports increment operations on its elements.</p>\n\n<p>Implement the <code>CustomStack</code> class:</p>\n\n<ul>\n\t<li><code>CustomStack(int maxSize)</code> Initializes the object with <code>maxSize</code> which is the maximum number of elements in the stack.</li>\n\t<li><code>void push(int x)</code> Adds <code>x</code> to the top of the stack if the stack has not reached the <code>maxSize</code>.</li>\n\t<li><code>int pop()</code> Pops and returns the top of the stack or <code>-1</code> if the stack is empty.</li>\n\t<li><code>void inc(int k, int val)</code> Increments the bottom <code>k</code> elements of the stack by <code>val</code>. If there are less than <code>k</code> elements in the stack, increment all the elements in the stack.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;CustomStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;increment&quot;,&quot;increment&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\n<strong>Output</strong>\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\n<strong>Explanation</strong>\nCustomStack stk = new CustomStack(3); // Stack is Empty []\nstk.push(1);                          // stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.pop();                            // return 2 --&gt; Return top of the stack 2, stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.push(3);                          // stack becomes [1, 2, 3]\nstk.push(4);                          // stack still [1, 2, 3], Do not add another elements as size is 4\nstk.increment(5, 100);                // stack becomes [101, 102, 103]\nstk.increment(2, 100);                // stack becomes [201, 202, 103]\nstk.pop();                            // return 103 --&gt; Return top of the stack 103, stack becomes [201, 202]\nstk.pop();                            // return 202 --&gt; Return top of the stack 202, stack becomes [201]\nstk.pop();                            // return 201 --&gt; Return top of the stack 201, stack becomes []\nstk.pop();                            // return -1 --&gt; Stack is empty return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= maxSize, x, k &lt;= 1000</code></li>\n\t<li><code>0 &lt;= val &lt;= 100</code></li>\n\t<li>At most <code>1000</code> calls will be made to each method of <code>increment</code>, <code>push</code> and <code>pop</code> each separately.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1752,
            "dislikes": 94,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Design",
                    "slug": "design"
                }
            ],
            "stats": "{\"totalAccepted\": \"104.8K\", \"totalSubmission\": \"135.9K\", \"totalAcceptedRaw\": 104777, \"totalSubmissionRaw\": 135933, \"acRate\": \"77.1%\"}",
            "hints": [
                "Use an array to represent the stack. Push will add new integer to the array. Pop removes the last element in the array and increment will add val to the first k elements of the array.",
                "This solution run in O(1) per push and pop and O(k) per increment."
            ],
            "rephrased": {
                "body": "Design a stack data structure that supports the standard push and pop operations, as well as an increment operation. The `CustomStack` class should be implemented with the following methods:",
                "constraints": [
                    "1 <= maxSize, x, k <= 1000",
                    "0 <= val <= 100",
                    "At most 1000 calls will be made to each method of `increment`, `push` and `pop` each separately."
                ],
                "testcases": [
                    {
                        "input": "[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]",
                        "output": "[null,null,null,2,null,null,null,null,null,103,202,201,-1]",
                        "explanation": "1. `CustomStack stk = new CustomStack(3)`: Initializes a stack with a maximum size of 3. The stack is initially empty [].\n2. `stk.push(1)`: Pushes 1 onto the stack. The stack becomes [1].\n3. `stk.push(2)`: Pushes 2 onto the stack. The stack becomes [1, 2].\n4. `stk.pop()`: Pops the top element (2) and returns it. The stack becomes [1].\n5. `stk.push(2)`: Pushes 2 onto the stack. The stack becomes [1, 2].\n6. `stk.push(3)`: Pushes 3 onto the stack. The stack becomes [1, 2, 3].\n7. `stk.push(4)`: Attempts to push 4 onto the stack, but the stack is full (maxSize = 3), so the element is not added. The stack remains [1, 2, 3].\n8. `stk.inc(5, 100)`: Increments the bottom 5 elements of the stack by 100. Since there are only 3 elements, all elements are incremented. The stack becomes [101, 102, 103].\n9. `stk.inc(2, 100)`: Increments the bottom 2 elements of the stack by 100. The stack becomes [201, 202, 103].\n10. `stk.pop()`: Pops the top element (103) and returns it. The stack becomes [201, 202].\n11. `stk.pop()`: Pops the top element (202) and returns it. The stack becomes [201].\n12. `stk.pop()`: Pops the top element (201) and returns it. The stack becomes [].\n13. `stk.pop()`: Attempts to pop an element from an empty stack, returns -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use an array to represent the stack. Push will add new integer to the array. Pop removes the last element in the array and increment will add val to the first k elements of the array.",
            "This solution run in O(1) per push and pop and O(k) per increment."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Design",
                "slug": "design"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class CustomStack {\n public:\n  CustomStack(int maxSize) : maxSize(maxSize) {}\n\n  void push(int x) {\n    if (stack.size() == maxSize)\n      return;\n    stack.push(x);\n    pendingIncrements.push_back(0);\n  }\n\n  int pop() {\n    if (stack.empty())\n      return -1;\n    const int i = stack.size() - 1;\n    if (i > 0)\n      pendingIncrements[i - 1] += pendingIncrements[i];\n    const int val = stack.top() + pendingIncrements[i];\n    stack.pop();\n    pendingIncrements.pop_back();\n    return val;\n  }\n\n  void increment(int k, int val) {\n    if (stack.empty())\n      return;\n    const int i = min(k - 1, static_cast<int>(stack.size()) - 1);\n    pendingIncrements[i] += val;\n  }\n\n private:\n  const int maxSize;\n  stack<int> stack;\n  // pendingIncrements[i] := pending increment for stack[0..i].\n  vector<int> pendingIncrements;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class CustomStack {\n  public CustomStack(int maxSize) {\n    this.maxSize = maxSize;\n  }\n\n  public void push(int x) {\n    if (stack.size() == maxSize)\n      return;\n    stack.push(x);\n    pendingIncrements.add(0);\n  }\n\n  public int pop() {\n    if (stack.isEmpty())\n      return -1;\n    final int i = stack.size() - 1;\n    final int pendingIncrement = pendingIncrements.get(i);\n    pendingIncrements.remove(i);\n    if (i > 0)\n      pendingIncrements.set(i - 1, pendingIncrements.get(i - 1) + pendingIncrement);\n    return stack.pop() + pendingIncrement;\n  }\n\n  public void increment(int k, int val) {\n    if (stack.isEmpty())\n      return;\n    final int i = Math.min(k - 1, stack.size() - 1);\n    pendingIncrements.set(i, pendingIncrements.get(i) + val);\n  }\n\n  private int maxSize;\n  private Deque<Integer> stack = new ArrayDeque<>();\n  // pendingIncrements[i] := pending increment for stack[0..i].\n  private List<Integer> pendingIncrements = new ArrayList<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class CustomStack:\n  def __init__(self, maxSize: int):\n    self.maxSize = maxSize\n    self.stack = []\n    # pendingIncrements[i] := pending increment for stack[0..i].\n    self.pendingIncrements = []\n\n  def push(self, x: int) -> None:\n    if len(self.stack) == self.maxSize:\n      return\n    self.stack.append(x)\n    self.pendingIncrements.append(0)\n\n  def pop(self) -> int:\n    if not self.stack:\n      return -1\n    if len(self.stack) > 1:\n      self.pendingIncrements[-2] += self.pendingIncrements[-1]\n    return self.stack.pop() + self.pendingIncrements.pop()\n\n  def increment(self, k: int, val: int) -> None:\n    if not self.stack:\n      return\n    i = min(k - 1, len(self.stack) - 1)\n    self.pendingIncrements[i] += val\n",
                "lang_text": "py"
            }
        }
    }
}