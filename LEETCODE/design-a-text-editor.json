{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2296",
            "title": "Design a Text Editor",
            "titleSlug": "design-a-text-editor",
            "content": "<p>Design a text editor with a cursor that can do the following:</p>\n\n<ul>\n\t<li><strong>Add</strong> text to where the cursor is.</li>\n\t<li><strong>Delete</strong> text from where the cursor is (simulating the backspace key).</li>\n\t<li><strong>Move</strong> the cursor either left or right.</li>\n</ul>\n\n<p>When deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. More formally, we have that <code>0 &lt;= cursor.position &lt;= currentText.length</code> always holds.</p>\n\n<p>Implement the <code>TextEditor</code> class:</p>\n\n<ul>\n\t<li><code>TextEditor()</code> Initializes the object with empty text.</li>\n\t<li><code>void addText(string text)</code> Appends <code>text</code> to where the cursor is. The cursor ends to the right of <code>text</code>.</li>\n\t<li><code>int deleteText(int k)</code> Deletes <code>k</code> characters to the left of the cursor. Returns the number of characters actually deleted.</li>\n\t<li><code>string cursorLeft(int k)</code> Moves the cursor to the left <code>k</code> times. Returns the last <code>min(10, len)</code> characters to the left of the cursor, where <code>len</code> is the number of characters to the left of the cursor.</li>\n\t<li><code>string cursorRight(int k)</code> Moves the cursor to the right <code>k</code> times. Returns the last <code>min(10, len)</code> characters to the left of the cursor, where <code>len</code> is the number of characters to the left of the cursor.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;TextEditor&quot;, &quot;addText&quot;, &quot;deleteText&quot;, &quot;addText&quot;, &quot;cursorRight&quot;, &quot;cursorLeft&quot;, &quot;deleteText&quot;, &quot;cursorLeft&quot;, &quot;cursorRight&quot;]\n[[], [&quot;leetcode&quot;], [4], [&quot;practice&quot;], [3], [8], [10], [2], [6]]\n<strong>Output</strong>\n[null, null, 4, null, &quot;etpractice&quot;, &quot;leet&quot;, 4, &quot;&quot;, &quot;practi&quot;]\n\n<strong>Explanation</strong>\nTextEditor textEditor = new TextEditor(); // The current text is &quot;|&quot;. (The &#39;|&#39; character represents the cursor)\ntextEditor.addText(&quot;leetcode&quot;); // The current text is &quot;leetcode|&quot;.\ntextEditor.deleteText(4); // return 4\n                          // The current text is &quot;leet|&quot;. \n                          // 4 characters were deleted.\ntextEditor.addText(&quot;practice&quot;); // The current text is &quot;leetpractice|&quot;. \ntextEditor.cursorRight(3); // return &quot;etpractice&quot;\n                           // The current text is &quot;leetpractice|&quot;. \n                           // The cursor cannot be moved beyond the actual text and thus did not move.\n                           // &quot;etpractice&quot; is the last 10 characters to the left of the cursor.\ntextEditor.cursorLeft(8); // return &quot;leet&quot;\n                          // The current text is &quot;leet|practice&quot;.\n                          // &quot;leet&quot; is the last min(10, 4) = 4 characters to the left of the cursor.\ntextEditor.deleteText(10); // return 4\n                           // The current text is &quot;|practice&quot;.\n                           // Only 4 characters were deleted.\ntextEditor.cursorLeft(2); // return &quot;&quot;\n                          // The current text is &quot;|practice&quot;.\n                          // The cursor cannot be moved beyond the actual text and thus did not move. \n                          // &quot;&quot; is the last min(10, 0) = 0 characters to the left of the cursor.\ntextEditor.cursorRight(6); // return &quot;practi&quot;\n                           // The current text is &quot;practi|ce&quot;.\n                           // &quot;practi&quot; is the last min(10, 6) = 6 characters to the left of the cursor.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length, k &lt;= 40</code></li>\n\t<li><code>text</code> consists of lowercase English letters.</li>\n\t<li>At most <code>2 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>addText</code>, <code>deleteText</code>, <code>cursorLeft</code> and <code>cursorRight</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Could you find a solution with time complexity of <code>O(k)</code> per call?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 516,
            "dislikes": 222,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                },
                {
                    "name": "Doubly-Linked List",
                    "slug": "doubly-linked-list"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.4K\", \"totalSubmission\": \"47.5K\", \"totalAcceptedRaw\": 20428, \"totalSubmissionRaw\": 47504, \"acRate\": \"43.0%\"}",
            "hints": [
                "Making changes in the middle of some data structures is generally harder than changing the front/back of the same data structure.",
                "Can you partition your data structure (text with cursor) into two parts, such that each part changes only near its ends?",
                "Can you think of a data structure that supports efficient removals/additions to the front/back?",
                "Try to solve the problem with two deques by maintaining the prefix and the suffix separately."
            ],
            "rephrased": {
                "body": "Design a text editor that simulates cursor movements and text manipulation. The editor should support adding text at the cursor position, deleting text to the left of the cursor (backspace), and moving the cursor left or right. The cursor must always remain within the bounds of the existing text (0 <= cursor position <= current text length).",
                "constraints": [
                    "1 <= text.length, k <= 40",
                    "text consists of lowercase English letters.",
                    "At most 2 * 10<sup>4</sup> calls in total will be made to addText, deleteText, cursorLeft and cursorRight."
                ],
                "testcases": [
                    {
                        "input": "[\"TextEditor\", \"addText\", \"deleteText\", \"addText\", \"cursorRight\", \"cursorLeft\", \"deleteText\", \"cursorLeft\", \"cursorRight\"]\n[[], [\"leetcode\"], [4], [\"practice\"], [3], [8], [10], [2], [6]]",
                        "output": "[null, null, 4, null, \"etpractice\", \"leet\", 4, \"\", \"practi\"]",
                        "explanation": "1. `TextEditor()`: Initializes the text editor with an empty text.\n2. `addText(\"leetcode\")`: The text becomes \"leetcode|\".\n3. `deleteText(4)`: Deletes 4 characters to the left of the cursor, resulting in \"leet|\". Returns 4.\n4. `addText(\"practice\")`: The text becomes \"leetpractice|\".\n5. `cursorRight(3)`: Attempts to move the cursor 3 positions to the right.  It remains at the end as it can't go further. Returns the last 10 characters to the left, which is \"etpractice\".\n6. `cursorLeft(8)`: Moves the cursor 8 positions to the left, resulting in \"leet|practice\". Returns the last 4 characters to the left, which is \"leet\".\n7. `deleteText(10)`: Attempts to delete 10 characters. Only 4 can be deleted as the cursor is at position 4, resulting in \"|practice\". Returns 4.\n8. `cursorLeft(2)`: Attempts to move the cursor 2 positions to the left. It stays at the beginning as it can't go further. Returns an empty string.\n9. `cursorRight(6)`: Moves the cursor 6 positions to the right, resulting in \"practi|ce\". Returns the last 6 characters, which is \"practi\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Making changes in the middle of some data structures is generally harder than changing the front/back of the same data structure.",
            "Can you partition your data structure (text with cursor) into two parts, such that each part changes only near its ends?",
            "Can you think of a data structure that supports efficient removals/additions to the front/back?",
            "Try to solve the problem with two deques by maintaining the prefix and the suffix separately."
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            },
            {
                "name": "Doubly-Linked List",
                "slug": "doubly-linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class TextEditor {\n public:\n  void addText(string text) {\n    s += text;\n  }\n\n  int deleteText(int k) {\n    const int numDeleted = min(k, static_cast<int>(s.length()));\n    for (int i = 0; i < numDeleted; ++i)\n      s.pop_back();\n    return numDeleted;\n  }\n\n  string cursorLeft(int k) {\n    while (!s.empty() && k--)\n      stack.push(s.back()), s.pop_back();\n    return getString();\n  }\n\n  string cursorRight(int k) {\n    while (!stack.empty() && k--)\n      s += stack.top(), stack.pop();\n    return getString();\n  }\n\n  string getString() {\n    if (s.length() < 10)\n      return s;\n    return s.substr(s.length() - 10);\n  }\n\n private:\n  string s;\n  stack<char> stack;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TextEditor {\n  public void addText(String text) {\n    sb.append(text);\n  }\n\n  public int deleteText(int k) {\n    final int numDeleted = Math.min(k, sb.length());\n    for (int i = 0; i < numDeleted; ++i)\n      sb.deleteCharAt(sb.length() - 1);\n    return numDeleted;\n  }\n\n  public String cursorLeft(int k) {\n    while (!sb.isEmpty() && k-- > 0) {\n      stack.push(sb.charAt(sb.length() - 1));\n      sb.deleteCharAt(sb.length() - 1);\n    }\n    return getString();\n  }\n\n  public String cursorRight(int k) {\n    while (!stack.isEmpty() && k-- > 0)\n      sb.append(stack.pop());\n    return getString();\n  }\n\n  private String getString() {\n    if (sb.length() < 10)\n      return sb.toString();\n    return sb.substring(sb.length() - 10).toString();\n  }\n\n  private StringBuilder sb = new StringBuilder();\n  private Deque<Character> stack = new ArrayDeque<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TextEditor:\n  def __init__(self):\n    self.s = []\n    self.stack = []\n\n  def addText(self, text: str) -> None:\n    for c in text:\n      self.s.append(c)\n\n  def deleteText(self, k: int) -> int:\n    numDeleted = min(k, len(self.s))\n    for _ in range(numDeleted):\n      self.s.pop()\n    return numDeleted\n\n  def cursorLeft(self, k: int) -> str:\n    while self.s and k > 0:\n      self.stack.append(self.s.pop())\n      k -= 1\n    return self._getString()\n\n  def cursorRight(self, k: int) -> str:\n    while self.stack and k > 0:\n      self.s.append(self.stack.pop())\n      k -= 1\n    return self._getString()\n\n  def _getString(self) -> str:\n    if len(self.s) < 10:\n      return ''.join(self.s)\n    return ''.join(self.s[-10:])\n",
                "lang_text": "py"
            }
        }
    }
}