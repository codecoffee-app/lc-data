{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1797",
            "title": "Design Authentication Manager",
            "titleSlug": "design-authentication-manager",
            "content": "<p>There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire <code>timeToLive</code> seconds after the <code>currentTime</code>. If the token is renewed, the expiry time will be <b>extended</b> to expire <code>timeToLive</code> seconds after the (potentially different) <code>currentTime</code>.</p>\n\n<p>Implement the <code>AuthenticationManager</code> class:</p>\n\n<ul>\n\t<li><code>AuthenticationManager(int timeToLive)</code> constructs the <code>AuthenticationManager</code> and sets the <code>timeToLive</code>.</li>\n\t<li><code>generate(string tokenId, int currentTime)</code> generates a new token with the given <code>tokenId</code> at the given <code>currentTime</code> in seconds.</li>\n\t<li><code>renew(string tokenId, int currentTime)</code> renews the <strong>unexpired</strong> token with the given <code>tokenId</code> at the given <code>currentTime</code> in seconds. If there are no unexpired tokens with the given <code>tokenId</code>, the request is ignored, and nothing happens.</li>\n\t<li><code>countUnexpiredTokens(int currentTime)</code> returns the number of <strong>unexpired</strong> tokens at the given currentTime.</li>\n</ul>\n\n<p>Note that if a token expires at time <code>t</code>, and another action happens on time <code>t</code> (<code>renew</code> or <code>countUnexpiredTokens</code>), the expiration takes place <strong>before</strong> the other actions.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/25/copy-of-pc68_q2.png\" style=\"width: 500px; height: 287px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;AuthenticationManager&quot;, &quot;<code>renew</code>&quot;, &quot;generate&quot;, &quot;<code>countUnexpiredTokens</code>&quot;, &quot;generate&quot;, &quot;<code>renew</code>&quot;, &quot;<code>renew</code>&quot;, &quot;<code>countUnexpiredTokens</code>&quot;]\n[[5], [&quot;aaa&quot;, 1], [&quot;aaa&quot;, 2], [6], [&quot;bbb&quot;, 7], [&quot;aaa&quot;, 8], [&quot;bbb&quot;, 10], [15]]\n<strong>Output</strong>\n[null, null, null, 1, null, null, null, 0]\n\n<strong>Explanation</strong>\nAuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with <code>timeToLive</code> = 5 seconds.\nauthenticationManager.<code>renew</code>(&quot;aaa&quot;, 1); // No token exists with tokenId &quot;aaa&quot; at time 1, so nothing happens.\nauthenticationManager.generate(&quot;aaa&quot;, 2); // Generates a new token with tokenId &quot;aaa&quot; at time 2.\nauthenticationManager.<code>countUnexpiredTokens</code>(6); // The token with tokenId &quot;aaa&quot; is the only unexpired one at time 6, so return 1.\nauthenticationManager.generate(&quot;bbb&quot;, 7); // Generates a new token with tokenId &quot;bbb&quot; at time 7.\nauthenticationManager.<code>renew</code>(&quot;aaa&quot;, 8); // The token with tokenId &quot;aaa&quot; expired at time 7, and 8 &gt;= 7, so at time 8 the <code>renew</code> request is ignored, and nothing happens.\nauthenticationManager.<code>renew</code>(&quot;bbb&quot;, 10); // The token with tokenId &quot;bbb&quot; is unexpired at time 10, so the <code>renew</code> request is fulfilled and now the token will expire at time 15.\nauthenticationManager.<code>countUnexpiredTokens</code>(15); // The token with tokenId &quot;bbb&quot; expires at time 15, and the token with tokenId &quot;aaa&quot; expired at time 7, so currently no token is unexpired, so return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= timeToLive &lt;= 10<sup>8</sup></code></li>\n\t<li><code>1 &lt;= currentTime &lt;= 10<sup>8</sup></code></li>\n\t<li><code>1 &lt;= tokenId.length &lt;= 5</code></li>\n\t<li><code>tokenId</code> consists only of lowercase letters.</li>\n\t<li>All calls to <code>generate</code> will contain unique values of <code>tokenId</code>.</li>\n\t<li>The values of <code>currentTime</code> across all the function calls will be <strong>strictly increasing</strong>.</li>\n\t<li>At most <code>2000</code> calls will be made to all functions combined.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 335,
            "dislikes": 45,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Design",
                    "slug": "design"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.2K\", \"totalSubmission\": \"39K\", \"totalAcceptedRaw\": 22172, \"totalSubmissionRaw\": 39016, \"acRate\": \"56.8%\"}",
            "hints": [
                "Using a map, track the expiry times of the tokens.",
                "When generating a new token, add it to the map with its expiry time.",
                "When renewing a token, check if it's on the map and has not expired yet. If so, update its expiry time.",
                "To count unexpired tokens, iterate on the map and check for each token if it's not expired yet."
            ],
            "rephrased": {
                "body": "Implement an authentication system using tokens. Each token has a `tokenId` and expires `timeToLive` seconds after its generation or renewal time.  The `AuthenticationManager` class provides the following functionality:\n\n*   **`AuthenticationManager(int timeToLive)`**: Initializes the `AuthenticationManager` with the given `timeToLive` value.\n*   **`generate(string tokenId, int currentTime)`**: Generates a new token with the given `tokenId` that expires at `currentTime + timeToLive`.\n*   **`renew(string tokenId, int currentTime)`**: Renews an existing, unexpired token with the given `tokenId`. If the token exists and is unexpired at `currentTime`, its expiration time is updated to `currentTime + timeToLive`. If the token doesn't exist or is already expired, this operation does nothing.\n*   **`countUnexpiredTokens(int currentTime)`**: Returns the number of tokens that are unexpired at the given `currentTime`.",
                "constraints": [
                    "1 <= timeToLive <= 10^8",
                    "1 <= currentTime <= 10^8",
                    "1 <= tokenId.length <= 5",
                    "`tokenId` consists only of lowercase letters.",
                    "All calls to `generate` will contain unique values of `tokenId`.",
                    "The values of `currentTime` across all the function calls will be strictly increasing.",
                    "At most 2000 calls will be made to all functions combined."
                ],
                "testcases": [
                    {
                        "input": "[\"AuthenticationManager\", \"renew\", \"generate\", \"countUnexpiredTokens\", \"generate\", \"renew\", \"renew\", \"countUnexpiredTokens\"]\n[[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]]",
                        "output": "[null, null, null, 1, null, null, null, 0]",
                        "explanation": "1. `AuthenticationManager(5)`: Initializes with timeToLive = 5.\n2. `renew(\"aaa\", 1)`: No token \"aaa\" exists, so nothing happens.\n3. `generate(\"aaa\", 2)`: Creates token \"aaa\" expiring at 2 + 5 = 7.\n4. `countUnexpiredTokens(6)`: Token \"aaa\" is unexpired (6 < 7), count = 1.\n5. `generate(\"bbb\", 7)`: Creates token \"bbb\" expiring at 7 + 5 = 12.\n6. `renew(\"aaa\", 8)`: Token \"aaa\" is expired (8 >= 7), so nothing happens.\n7. `renew(\"bbb\", 10)`: Token \"bbb\" is unexpired (10 < 12), renews, expiring at 10 + 5 = 15.\n8. `countUnexpiredTokens(15)`: Token \"aaa\" is expired (15 > 7). Token \"bbb\" is expired (15 = 15). Count = 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Using a map, track the expiry times of the tokens.",
            "When generating a new token, add it to the map with its expiry time.",
            "When renewing a token, check if it's on the map and has not expired yet. If so, update its expiry time.",
            "To count unexpired tokens, iterate on the map and check for each token if it's not expired yet."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Design",
                "slug": "design"
            }
        ]
    }
}