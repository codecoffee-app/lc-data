{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2166",
            "title": "Design Bitset",
            "titleSlug": "design-bitset",
            "content": "<p>A <strong>Bitset</strong> is a data structure that compactly stores bits.</p>\n\n<p>Implement the <code>Bitset</code> class:</p>\n\n<ul>\n\t<li><code>Bitset(int size)</code> Initializes the Bitset with <code>size</code> bits, all of which are <code>0</code>.</li>\n\t<li><code>void fix(int idx)</code> Updates the value of the bit at the index <code>idx</code> to <code>1</code>. If the value was already <code>1</code>, no change occurs.</li>\n\t<li><code>void unfix(int idx)</code> Updates the value of the bit at the index <code>idx</code> to <code>0</code>. If the value was already <code>0</code>, no change occurs.</li>\n\t<li><code>void flip()</code> Flips the values of each bit in the Bitset. In other words, all bits with value <code>0</code> will now have value <code>1</code> and vice versa.</li>\n\t<li><code>boolean all()</code> Checks if the value of <strong>each</strong> bit in the Bitset is <code>1</code>. Returns <code>true</code> if it satisfies the condition, <code>false</code> otherwise.</li>\n\t<li><code>boolean one()</code> Checks if there is <strong>at least one</strong> bit in the Bitset with value <code>1</code>. Returns <code>true</code> if it satisfies the condition, <code>false</code> otherwise.</li>\n\t<li><code>int count()</code> Returns the <strong>total number</strong> of bits in the Bitset which have value <code>1</code>.</li>\n\t<li><code>String toString()</code> Returns the current composition of the Bitset. Note that in the resultant string, the character at the <code>i<sup>th</sup></code> index should coincide with the value at the <code>i<sup>th</sup></code> bit of the Bitset.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Bitset&quot;, &quot;fix&quot;, &quot;fix&quot;, &quot;flip&quot;, &quot;all&quot;, &quot;unfix&quot;, &quot;flip&quot;, &quot;one&quot;, &quot;unfix&quot;, &quot;count&quot;, &quot;toString&quot;]\n[[5], [3], [1], [], [], [0], [], [], [0], [], []]\n<strong>Output</strong>\n[null, null, null, null, false, null, null, true, null, 2, &quot;01010&quot;]\n\n<strong>Explanation</strong>\nBitset bs = new Bitset(5); // bitset = &quot;00000&quot;.\nbs.fix(3);     // the value at idx = 3 is updated to 1, so bitset = &quot;00010&quot;.\nbs.fix(1);     // the value at idx = 1 is updated to 1, so bitset = &quot;01010&quot;. \nbs.flip();     // the value of each bit is flipped, so bitset = &quot;10101&quot;. \nbs.all();      // return False, as not all values of the bitset are 1.\nbs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = &quot;00101&quot;.\nbs.flip();     // the value of each bit is flipped, so bitset = &quot;11010&quot;. \nbs.one();      // return True, as there is at least 1 index with value 1.\nbs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = &quot;01010&quot;.\nbs.count();    // return 2, as there are 2 bits with value 1.\nbs.toString(); // return &quot;01010&quot;, which is the composition of bitset.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= size &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= idx &lt;= size - 1</code></li>\n\t<li>At most <code>10<sup>5</sup></code> calls will be made <strong>in total</strong> to <code>fix</code>, <code>unfix</code>, <code>flip</code>, <code>all</code>, <code>one</code>, <code>count</code>, and <code>toString</code>.</li>\n\t<li>At least one call will be made to <code>all</code>, <code>one</code>, <code>count</code>, or <code>toString</code>.</li>\n\t<li>At most <code>5</code> calls will be made to <code>toString</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 566,
            "dislikes": 47,
            "similarQuestions": "[{\"title\": \"Design Underground System\", \"titleSlug\": \"design-underground-system\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Design",
                    "slug": "design"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.3K\", \"totalSubmission\": \"66.2K\", \"totalAcceptedRaw\": 21265, \"totalSubmissionRaw\": 66233, \"acRate\": \"32.1%\"}",
            "hints": [
                "Note that flipping a bit twice does nothing.",
                "In order to determine the value of a bit, consider how you can efficiently count the number of flips made on the bit since its latest update."
            ],
            "rephrased": {
                "body": "Implement a `Bitset` class to compactly store bits. A Bitset is initialized with a given size, containing only 0s. You can fix (set to 1), unfix (set to 0), and flip the bits.  Additionally, check if all bits are 1, if at least one bit is 1, and get the count of bits set to 1.  The `toString` method returns the current bitset as a string of 0s and 1s.",
                "constraints": [
                    "1 <= size <= 10^5",
                    "0 <= idx <= size - 1",
                    "At most 10^5 calls will be made in total to fix, unfix, flip, all, one, count, and toString.",
                    "At least one call will be made to all, one, count, or toString.",
                    "At most 5 calls will be made to toString."
                ],
                "testcases": [
                    {
                        "input": "[\"Bitset\", \"fix\", \"fix\", \"flip\", \"all\", \"unfix\", \"flip\", \"one\", \"unfix\", \"count\", \"toString\"]\\n[[5], [3], [1], [], [], [0], [], [], [0], [], []]",
                        "output": "[null, null, null, null, false, null, null, true, null, 2, \"01010\"]",
                        "explanation": "Bitset of size 5 initialized to \"00000\".\n- fix(3) sets bit at index 3 to 1: \"00010\".\n- fix(1) sets bit at index 1 to 1: \"01010\".\n- flip() flips all bits: \"10101\".\n- all() returns false because not all bits are 1.\n- unfix(0) sets bit at index 0 to 0: \"00101\".\n- flip() flips all bits: \"11010\".\n- one() returns true because there's at least one 1.\n- unfix(0) sets bit at index 0 to 0: \"01010\".\n- count() returns 2 because there are two 1s.\n- toString() returns \"01010\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "design-underground-system",
                "title": "Design Underground System",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Note that flipping a bit twice does nothing.",
            "In order to determine the value of a bit, consider how you can efficiently count the number of flips made on the bit since its latest update."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Design",
                "slug": "design"
            }
        ]
    }
}