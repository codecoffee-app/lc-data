{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "641",
            "title": "Design Circular Deque",
            "titleSlug": "design-circular-deque",
            "content": "<p>Design your implementation of the circular double-ended queue (deque).</p>\n\n<p>Implement the <code>MyCircularDeque</code> class:</p>\n\n<ul>\n\t<li><code>MyCircularDeque(int k)</code> Initializes the deque with a maximum size of <code>k</code>.</li>\n\t<li><code>boolean insertFront()</code> Adds an item at the front of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li>\n\t<li><code>boolean insertLast()</code> Adds an item at the rear of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li>\n\t<li><code>boolean deleteFront()</code> Deletes an item from the front of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li>\n\t<li><code>boolean deleteLast()</code> Deletes an item from the rear of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li>\n\t<li><code>int getFront()</code> Returns the front item from the Deque. Returns <code>-1</code> if the deque is empty.</li>\n\t<li><code>int getRear()</code> Returns the last item from Deque. Returns <code>-1</code> if the deque is empty.</li>\n\t<li><code>boolean isEmpty()</code> Returns <code>true</code> if the deque is empty, or <code>false</code> otherwise.</li>\n\t<li><code>boolean isFull()</code> Returns <code>true</code> if the deque is full, or <code>false</code> otherwise.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyCircularDeque&quot;, &quot;insertLast&quot;, &quot;insertLast&quot;, &quot;insertFront&quot;, &quot;insertFront&quot;, &quot;getRear&quot;, &quot;isFull&quot;, &quot;deleteLast&quot;, &quot;insertFront&quot;, &quot;getFront&quot;]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\n<strong>Output</strong>\n[null, true, true, true, false, 2, true, true, true, 4]\n\n<strong>Explanation</strong>\nMyCircularDeque myCircularDeque = new MyCircularDeque(3);\nmyCircularDeque.insertLast(1);  // return True\nmyCircularDeque.insertLast(2);  // return True\nmyCircularDeque.insertFront(3); // return True\nmyCircularDeque.insertFront(4); // return False, the queue is full.\nmyCircularDeque.getRear();      // return 2\nmyCircularDeque.isFull();       // return True\nmyCircularDeque.deleteLast();   // return True\nmyCircularDeque.insertFront(4); // return True\nmyCircularDeque.getFront();     // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 1000</code></li>\n\t<li><code>0 &lt;= value &lt;= 1000</code></li>\n\t<li>At most <code>2000</code> calls will be made to <code>insertFront</code>, <code>insertLast</code>, <code>deleteFront</code>, <code>deleteLast</code>, <code>getFront</code>, <code>getRear</code>, <code>isEmpty</code>, <code>isFull</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1126,
            "dislikes": 74,
            "similarQuestions": "[{\"title\": \"Design Circular Queue\", \"titleSlug\": \"design-circular-queue\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design Front Middle Back Queue\", \"titleSlug\": \"design-front-middle-back-queue\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"64.4K\", \"totalSubmission\": \"113.5K\", \"totalAcceptedRaw\": 64397, \"totalSubmissionRaw\": 113543, \"acRate\": \"56.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a circular double-ended queue (deque) implementation. The deque should support adding and removing elements from both the front and the rear.",
                "constraints": [
                    "1 <= k <= 1000 (where k is the maximum size of the deque)",
                    "0 <= value <= 1000 (value to be inserted)",
                    "At most 2000 calls will be made to insertFront, insertLast, deleteFront, deleteLast, getFront, getRear, isEmpty, isFull."
                ],
                "testcases": [
                    {
                        "input": "[\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"] [[3], [1], [2], [3], [4], [], [], [], [4], []]",
                        "output": "[null, true, true, true, false, 2, true, true, true, 4]",
                        "explanation": "1. `MyCircularDeque(3)`: Initialize deque with capacity 3.\n2. `insertLast(1)`: Insert 1 at the rear. Returns true.\n3. `insertLast(2)`: Insert 2 at the rear. Returns true.\n4. `insertFront(3)`: Insert 3 at the front. Returns true.\n5. `insertFront(4)`: Attempt to insert 4 at the front. Returns false (deque is full).\n6. `getRear()`: Returns the last element (2).\n7. `isFull()`: Returns true (deque is full).\n8. `deleteLast()`: Delete the last element (2). Returns true.\n9. `insertFront(4)`: Insert 4 at the front. Returns true.\n10. `getFront()`: Returns the first element (4)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "design-circular-queue",
                "title": "Design Circular Queue",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "design-front-middle-back-queue",
                "title": "Design Front Middle Back Queue",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Queue",
                "slug": "queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class MyCircularDeque {\n public:\n  /** Initialize your data structure here. Set the size of the deque to be k. */\n  MyCircularDeque(int k) : k(k), q(k), rear(k - 1) {}\n\n  /** Adds an item at the front of Deque. Return true if the operation is\n   * successful. */\n  bool insertFront(int value) {\n    if (isFull())\n      return false;\n\n    front = (--front + k) % k;\n    q[front] = value;\n    ++size;\n    return true;\n  }\n\n  /** Adds an item at the rear of Deque. Return true if the operation is\n   * successful. */\n  bool insertLast(int value) {\n    if (isFull())\n      return false;\n\n    rear = ++rear % k;\n    q[rear] = value;\n    ++size;\n    return true;\n  }\n\n  /** Deletes an item from the front of Deque. Return true if the operation is\n   * successful. */\n  bool deleteFront() {\n    if (isEmpty())\n      return false;\n\n    front = ++front % k;\n    --size;\n    return true;\n  }\n\n  /** Deletes an item from the rear of Deque. Return true if the operation is\n   * successful. */\n  bool deleteLast() {\n    if (isEmpty())\n      return false;\n\n    rear = (--rear + k) % k;\n    --size;\n    return true;\n  }\n\n  /** Get the front item from the deque. */\n  int getFront() {\n    return isEmpty() ? -1 : q[front];\n  }\n\n  /** Get the last item from the deque. */\n  int getRear() {\n    return isEmpty() ? -1 : q[rear];\n  }\n\n  /** Checks whether the circular deque is empty or not. */\n  bool isEmpty() {\n    return size == 0;\n  }\n\n  /** Checks whether the circular deque is full or not. */\n  bool isFull() {\n    return size == k;\n  }\n\n private:\n  const int k;\n  vector<int> q;\n  int size = 0;\n  int front = 0;\n  int rear;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class MyCircularDeque {\n  /** Initialize your data structure here. Set the size of the deque to be k. */\n  public MyCircularDeque(int k) {\n    this.k = k;\n    this.q = new int[k];\n    this.rear = k - 1;\n  }\n\n  /** Adds an item at the front of Deque. Return true if the operation is successful. */\n  public boolean insertFront(int value) {\n    if (isFull())\n      return false;\n\n    front = (--front + k) % k;\n    q[front] = value;\n    ++size;\n    return true;\n  }\n\n  /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n  public boolean insertLast(int value) {\n    if (isFull())\n      return false;\n\n    rear = ++rear % k;\n    q[rear] = value;\n    ++size;\n    return true;\n  }\n\n  /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n  public boolean deleteFront() {\n    if (isEmpty())\n      return false;\n\n    front = ++front % k;\n    --size;\n    return true;\n  }\n\n  /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n  public boolean deleteLast() {\n    if (isEmpty())\n      return false;\n\n    rear = (--rear + k) % k;\n    --size;\n    return true;\n  }\n\n  /** Get the front item from the deque. */\n  public int getFront() {\n    return isEmpty() ? -1 : q[front];\n  }\n\n  /** Get the last item from the deque. */\n  public int getRear() {\n    return isEmpty() ? -1 : q[rear];\n  }\n\n  /** Checks whether the circular deque is empty or not. */\n  public boolean isEmpty() {\n    return size == 0;\n  }\n\n  /** Checks whether the circular deque is full or not. */\n  public boolean isFull() {\n    return size == k;\n  }\n\n  private final int k;\n  private int[] q;\n  private int size = 0;\n  private int front = 0;\n  private int rear;\n}\n",
                "lang_text": "java"
            }
        }
    }
}