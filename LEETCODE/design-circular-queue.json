{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "622",
            "title": "Design Circular Queue",
            "titleSlug": "design-circular-queue",
            "content": "<p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called &quot;Ring Buffer&quot;.</p>\n\n<p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p>\n\n<p>Implement the <code>MyCircularQueue</code> class:</p>\n\n<ul>\n\t<li><code>MyCircularQueue(k)</code> Initializes the object with the size of the queue to be <code>k</code>.</li>\n\t<li><code>int Front()</code> Gets the front item from the queue. If the queue is empty, return <code>-1</code>.</li>\n\t<li><code>int Rear()</code> Gets the last item from the queue. If the queue is empty, return <code>-1</code>.</li>\n\t<li><code>boolean enQueue(int value)</code> Inserts an element into the circular queue. Return <code>true</code> if the operation is successful.</li>\n\t<li><code>boolean deQueue()</code> Deletes an element from the circular queue. Return <code>true</code> if the operation is successful.</li>\n\t<li><code>boolean isEmpty()</code> Checks whether the circular queue is empty or not.</li>\n\t<li><code>boolean isFull()</code> Checks whether the circular queue is full or not.</li>\n</ul>\n\n<p>You must solve the problem without using the built-in queue data structure in your programming language.&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyCircularQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;Rear&quot;, &quot;isFull&quot;, &quot;deQueue&quot;, &quot;enQueue&quot;, &quot;Rear&quot;]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\n<strong>Output</strong>\n[null, true, true, true, false, 3, true, true, true, 4]\n\n<strong>Explanation</strong>\nMyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear();     // return 3\nmyCircularQueue.isFull();   // return True\nmyCircularQueue.deQueue();  // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear();     // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 1000</code></li>\n\t<li><code>0 &lt;= value &lt;= 1000</code></li>\n\t<li>At most <code>3000</code> calls will be made to&nbsp;<code>enQueue</code>, <code>deQueue</code>,&nbsp;<code>Front</code>,&nbsp;<code>Rear</code>,&nbsp;<code>isEmpty</code>, and&nbsp;<code>isFull</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3415,
            "dislikes": 267,
            "similarQuestions": "[{\"title\": \"Design Circular Deque\", \"titleSlug\": \"design-circular-deque\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design Front Middle Back Queue\", \"titleSlug\": \"design-front-middle-back-queue\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"294.3K\", \"totalSubmission\": \"573.4K\", \"totalAcceptedRaw\": 294332, \"totalSubmissionRaw\": 573418, \"acRate\": \"51.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a circular queue implementation. The circular queue, also known as a ring buffer, is a linear data structure operating on the FIFO (First In First Out) principle. Its key feature is connecting the last position back to the first, forming a circle.  This allows efficient utilization of space; when a regular queue is full, no new elements can be inserted even if there are empty spaces at the front. A circular queue can leverage these empty spaces.",
                "constraints": [
                    "1 <= k <= 1000 (k is the size of the queue)",
                    "0 <= value <= 1000 (value is the element to be enqueued)",
                    "At most 3000 calls will be made to enQueue, deQueue, Front, Rear, isEmpty, and isFull."
                ],
                "testcases": [
                    {
                        "input": "[\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]",
                        "output": "[null, true, true, true, false, 3, true, true, true, 4]",
                        "explanation": "MyCircularQueue is initialized with a size of 3.  1, 2, and 3 are enqueued successfully. Attempting to enqueue 4 fails because the queue is full. Rear returns the last element (3). isFull returns true.  Dequeuing removes the front element. Enqueueing 4 succeeds.  Rear now returns 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "design-circular-deque",
                "title": "Design Circular Deque",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "design-front-middle-back-queue",
                "title": "Design Front Middle Back Queue",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Queue",
                "slug": "queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class MyCircularQueue {\n public:\n  /** Initialize your data structure here. Set the size of the queue to be k. */\n  MyCircularQueue(int k) : k(k), q(k), rear(k - 1) {}\n\n  /** Insert an element into the circular queue. Return true if the operation is\n   * successful. */\n  bool enQueue(int value) {\n    if (isFull())\n      return false;\n\n    rear = ++rear % k;\n    q[rear] = value;\n    ++size;\n    return true;\n  }\n\n  /** Delete an element from the circular queue. Return true if the operation is\n   * successful. */\n  bool deQueue() {\n    if (isEmpty())\n      return false;\n\n    front = ++front % k;\n    --size;\n    return true;\n  }\n\n  /** Get the front item from the queue. */\n  int Front() {\n    return isEmpty() ? -1 : q[front];\n  }\n\n  /** Get the last item from the queue. */\n  int Rear() {\n    return isEmpty() ? -1 : q[rear];\n  }\n\n  /** Checks whether the circular queue is empty or not. */\n  bool isEmpty() {\n    return size == 0;\n  }\n\n  /** Checks whether the circular queue is full or not. */\n  bool isFull() {\n    return size == k;\n  }\n\n private:\n  const int k;\n  vector<int> q;\n  int size = 0;\n  int front = 0;\n  int rear;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class MyCircularQueue {\n  /** Initialize your data structure here. Set the size of the queue to be k. */\n  public MyCircularQueue(int k) {\n    this.k = k;\n    this.q = new int[k];\n    this.rear = k - 1;\n  }\n\n  /** Insert an element into the circular queue. Return true if the operation is successful. */\n  public boolean enQueue(int value) {\n    if (isFull())\n      return false;\n\n    rear = ++rear % k;\n    q[rear] = value;\n    ++size;\n    return true;\n  }\n\n  /** Delete an element from the circular queue. Return true if the operation is successful. */\n  public boolean deQueue() {\n    if (isEmpty())\n      return false;\n\n    front = ++front % k;\n    --size;\n    return true;\n  }\n\n  /** Get the front item from the queue. */\n  public int Front() {\n    return isEmpty() ? -1 : q[front];\n  }\n\n  /** Get the last item from the queue. */\n  public int Rear() {\n    return isEmpty() ? -1 : q[rear];\n  }\n\n  /** Checks whether the circular queue is empty or not. */\n  public boolean isEmpty() {\n    return size == 0;\n  }\n\n  /** Checks whether the circular queue is full or not. */\n  public boolean isFull() {\n    return size == k;\n  }\n\n  private final int k;\n  private int[] q;\n  private int size = 0;\n  private int front = 0;\n  private int rear;\n}\n",
                "lang_text": "java"
            }
        }
    }
}