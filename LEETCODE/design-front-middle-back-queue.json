{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1670",
            "title": "Design Front Middle Back Queue",
            "titleSlug": "design-front-middle-back-queue",
            "content": "<p>Design a queue that supports <code>push</code> and <code>pop</code> operations in the front, middle, and back.</p>\n\n<p>Implement the <code>FrontMiddleBack</code> class:</p>\n\n<ul>\n\t<li><code>FrontMiddleBack()</code> Initializes the queue.</li>\n\t<li><code>void pushFront(int val)</code> Adds <code>val</code> to the <strong>front</strong> of the queue.</li>\n\t<li><code>void pushMiddle(int val)</code> Adds <code>val</code> to the <strong>middle</strong> of the queue.</li>\n\t<li><code>void pushBack(int val)</code> Adds <code>val</code> to the <strong>back</strong> of the queue.</li>\n\t<li><code>int popFront()</code> Removes the <strong>front</strong> element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li>\n\t<li><code>int popMiddle()</code> Removes the <strong>middle</strong> element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li>\n\t<li><code>int popBack()</code> Removes the <strong>back</strong> element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li>\n</ul>\n\n<p><strong>Notice</strong> that when there are <b>two</b> middle position choices, the operation is performed on the <strong>frontmost</strong> middle position choice. For example:</p>\n\n<ul>\n\t<li>Pushing <code>6</code> into the middle of <code>[1, 2, 3, 4, 5]</code> results in <code>[1, 2, <u>6</u>, 3, 4, 5]</code>.</li>\n\t<li>Popping the middle from <code>[1, 2, <u>3</u>, 4, 5, 6]</code> returns <code>3</code> and results in <code>[1, 2, 4, 5, 6]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong>\n[&quot;FrontMiddleBackQueue&quot;, &quot;pushFront&quot;, &quot;pushBack&quot;, &quot;pushMiddle&quot;, &quot;pushMiddle&quot;, &quot;popFront&quot;, &quot;popMiddle&quot;, &quot;popMiddle&quot;, &quot;popBack&quot;, &quot;popFront&quot;]\n[[], [1], [2], [3], [4], [], [], [], [], []]\n<strong>Output:</strong>\n[null, null, null, null, null, 1, 3, 4, 2, -1]\n\n<strong>Explanation:</strong>\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1);   // [<u>1</u>]\nq.pushBack(2);    // [1, <u>2</u>]\nq.pushMiddle(3);  // [1, <u>3</u>, 2]\nq.pushMiddle(4);  // [1, <u>4</u>, 3, 2]\nq.popFront();     // return 1 -&gt; [4, 3, 2]\nq.popMiddle();    // return 3 -&gt; [4, 2]\nq.popMiddle();    // return 4 -&gt; [2]\nq.popBack();      // return 2 -&gt; []\nq.popFront();     // return -1 -&gt; [] (The queue is empty)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= val &lt;= 10<sup>9</sup></code></li>\n\t<li>At most&nbsp;<code>1000</code>&nbsp;calls will be made to&nbsp;<code>pushFront</code>,&nbsp;<code>pushMiddle</code>,&nbsp;<code>pushBack</code>, <code>popFront</code>, <code>popMiddle</code>, and <code>popBack</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 715,
            "dislikes": 99,
            "similarQuestions": "[{\"title\": \"Design Circular Deque\", \"titleSlug\": \"design-circular-deque\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design Circular Queue\", \"titleSlug\": \"design-circular-queue\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Data Stream",
                    "slug": "data-stream"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.9K\", \"totalSubmission\": \"43.9K\", \"totalAcceptedRaw\": 24908, \"totalSubmissionRaw\": 43940, \"acRate\": \"56.7%\"}",
            "hints": [
                "The constraints are low enough for a brute force, single array approach.",
                "For an O(1) per method approach, use 2 double-ended queues: one for the first half and one for the second half."
            ],
            "rephrased": {
                "body": "Design a queue data structure that allows insertion and deletion operations at the front, middle, and back. You need to implement a class called `FrontMiddleBack` with the following methods:\n\n*   `FrontMiddleBack()`: Initializes an empty queue.\n*   `pushFront(int val)`: Inserts `val` at the front of the queue.\n*   `pushMiddle(int val)`: Inserts `val` in the middle of the queue. If the queue has an even number of elements, insert `val` at the first middle position (left middle).\n*   `pushBack(int val)`: Inserts `val` at the back of the queue.\n*   `popFront()`: Removes and returns the element at the front of the queue. If the queue is empty, return -1.\n*   `popMiddle()`: Removes and returns the element at the middle of the queue. If the queue has an even number of elements, remove the first middle position (left middle). If the queue is empty, return -1.\n*   `popBack()`: Removes and returns the element at the back of the queue. If the queue is empty, return -1.",
                "constraints": [
                    "1 <= val <= 10<sup>9</sup>",
                    "At most 1000 calls will be made to `pushFront`, `pushMiddle`, `pushBack`, `popFront`, `popMiddle`, and `popBack`."
                ],
                "testcases": [
                    {
                        "input": "[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]\n[[], [1], [2], [3], [4], [], [], [], [], []]",
                        "output": "[null, null, null, null, null, 1, 3, 4, 2, -1]",
                        "explanation": "The sequence of operations demonstrates how elements are added and removed from the queue at different positions. Initially, the queue is empty. Then, 1 is added to the front, and 2 is added to the back.  Next, 3 and 4 are inserted in the middle.  Subsequent pop operations remove elements from the front, middle (twice), and back, resulting in the specified return values. The final popFront results in -1 since the queue is then empty."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "design-circular-deque",
                "title": "Design Circular Deque",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "design-circular-queue",
                "title": "Design Circular Queue",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The constraints are low enough for a brute force, single array approach.",
            "For an O(1) per method approach, use 2 double-ended queues: one for the first half and one for the second half."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Stream",
                "slug": "data-stream"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class FrontMiddleBackQueue {\n public:\n  void pushFront(int val) {\n    frontQueue.push_front(val);\n    moveFrontToBackIfNeeded();\n  }\n\n  void pushMiddle(int val) {\n    if (frontQueue.size() == backQueue.size())\n      backQueue.push_front(val);\n    else\n      frontQueue.push_back(val);\n  }\n\n  void pushBack(int val) {\n    backQueue.push_back(val);\n    moveBackToFrontIfNeeded();\n  }\n\n  int popFront() {\n    if (!frontQueue.empty()) {\n      const int x = frontQueue.front();\n      frontQueue.pop_front();\n      moveBackToFrontIfNeeded();\n      return x;\n    }\n    if (!backQueue.empty()) {\n      const int x = backQueue.front();\n      backQueue.pop_front();\n      moveFrontToBackIfNeeded();\n      return x;\n    }\n    return -1;\n  }\n\n  int popMiddle() {\n    if (frontQueue.empty() && backQueue.empty())\n      return -1;\n    if (frontQueue.size() + 1 == backQueue.size()) {\n      const int x = backQueue.front();\n      backQueue.pop_front();\n      return x;\n    } else {  // frontQueue.size() == backQueue.size()\n      const int x = frontQueue.back();\n      frontQueue.pop_back();\n      return x;\n    }\n  }\n\n  int popBack() {\n    if (backQueue.empty())\n      return -1;\n    const int x = backQueue.back();\n    backQueue.pop_back();\n    moveFrontToBackIfNeeded();\n    return x;\n  }\n\n private:\n  // |frontQueue| = |backQueue| or\n  // |frontQueue| = |backQueue| - 1\n  deque<int> frontQueue;\n  deque<int> backQueue;\n\n  void moveFrontToBackIfNeeded() {\n    if (frontQueue.size() - 1 == backQueue.size()) {\n      const int x = frontQueue.back();\n      frontQueue.pop_back();\n      backQueue.push_front(x);\n    }\n  }\n\n  void moveBackToFrontIfNeeded() {\n    if (frontQueue.size() + 2 == backQueue.size()) {\n      const int x = backQueue.front();\n      backQueue.pop_front();\n      frontQueue.push_back(x);\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class FrontMiddleBackQueue {\n  public void pushFront(int val) {\n    frontQueue.offerFirst(val);\n    moveFrontToBackIfNeeded();\n  }\n\n  public void pushMiddle(int val) {\n    if (frontQueue.size() == backQueue.size())\n      backQueue.offerFirst(val);\n    else\n      frontQueue.offerLast(val);\n  }\n\n  public void pushBack(int val) {\n    backQueue.offerLast(val);\n    moveBackToFrontIfNeeded();\n  }\n\n  public int popFront() {\n    if (!frontQueue.isEmpty()) {\n      final int x = frontQueue.removeFirst();\n      moveBackToFrontIfNeeded();\n      return x;\n    }\n    if (!backQueue.isEmpty())\n      return backQueue.pollFirst();\n    return -1;\n  }\n\n  public int popMiddle() {\n    if (frontQueue.isEmpty() && backQueue.isEmpty())\n      return -1;\n    if (frontQueue.size() + 1 == backQueue.size())\n      return backQueue.pollFirst();\n    // frontQueue.size() == backQueue.size()\n    return frontQueue.pollLast();\n  }\n\n  public int popBack() {\n    if (backQueue.isEmpty())\n      return -1;\n    final int x = backQueue.removeLast();\n    moveFrontToBackIfNeeded();\n    return x;\n  }\n\n  private void moveFrontToBackIfNeeded() {\n    if (frontQueue.size() - 1 == backQueue.size())\n      backQueue.offerFirst(frontQueue.pollLast());\n  }\n\n  private void moveBackToFrontIfNeeded() {\n    if (frontQueue.size() + 2 == backQueue.size())\n      frontQueue.offerLast(backQueue.pollFirst());\n  }\n\n  private Deque<Integer> frontQueue = new ArrayDeque<>();\n  private Deque<Integer> backQueue = new ArrayDeque<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class FrontMiddleBackQueue:\n  def __init__(self):\n    self.frontQueue = collections.deque()\n    self.backQueue = collections.deque()\n\n  def pushFront(self, val: int) -> None:\n    self.frontQueue.appendleft(val)\n    self._moveFrontToBackIfNeeded()\n\n  def pushMiddle(self, val: int) -> None:\n    if len(self.frontQueue) == len(self.backQueue):\n      self.backQueue.appendleft(val)\n    else:\n      self.frontQueue.append(val)\n\n  def pushBack(self, val: int) -> None:\n    self.backQueue.append(val)\n    self._moveBackToFrontIfNeeded()\n\n  def popFront(self) -> int:\n    if self.frontQueue:\n      x = self.frontQueue.popleft()\n      self._moveBackToFrontIfNeeded()\n      return x\n    if self.backQueue:\n      return self.backQueue.popleft()\n    return -1\n\n  def popMiddle(self) -> int:\n    if not self.frontQueue and not self.backQueue:\n      return -1\n    if len(self.frontQueue) + 1 == len(self.backQueue):\n      return self.backQueue.popleft()\n    return self.frontQueue.pop()\n\n  def popBack(self) -> int:\n    if self.backQueue:\n      x = self.backQueue.pop()\n      self._moveFrontToBackIfNeeded()\n      return x\n    return -1\n\n  def _moveFrontToBackIfNeeded(self) -> None:\n    if len(self.frontQueue) - 1 == len(self.backQueue):\n      self.backQueue.appendleft(self.frontQueue.pop())\n\n  def _moveBackToFrontIfNeeded(self) -> None:\n    if len(self.frontQueue) + 2 == len(self.backQueue):\n      self.frontQueue.append(self.backQueue.popleft())\n",
                "lang_text": "py"
            }
        }
    }
}