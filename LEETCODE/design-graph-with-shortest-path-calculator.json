{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2642",
            "title": "Design Graph With Shortest Path Calculator",
            "titleSlug": "design-graph-with-shortest-path-calculator",
            "content": "<p>There is a <strong>directed weighted</strong> graph that consists of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. The edges of the graph are initially represented by the given array <code>edges</code> where <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>, edgeCost<sub>i</sub>]</code> meaning that there is an edge from <code>from<sub>i</sub></code> to <code>to<sub>i</sub></code> with the cost <code>edgeCost<sub>i</sub></code>.</p>\n\n<p>Implement the <code>Graph</code> class:</p>\n\n<ul>\n\t<li><code>Graph(int n, int[][] edges)</code> initializes the object with <code>n</code> nodes and the given edges.</li>\n\t<li><code>addEdge(int[] edge)</code> adds an edge to the list of edges where <code>edge = [from, to, edgeCost]</code>. It is guaranteed that there is no edge between the two nodes before adding this one.</li>\n\t<li><code>int shortestPath(int node1, int node2)</code> returns the <strong>minimum</strong> cost of a path from <code>node1</code> to <code>node2</code>. If no path exists, return <code>-1</code>. The cost of a path is the sum of the costs of the edges in the path.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/11/graph3drawio-2.png\" style=\"width: 621px; height: 191px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;Graph&quot;, &quot;shortestPath&quot;, &quot;shortestPath&quot;, &quot;addEdge&quot;, &quot;shortestPath&quot;]\n[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]], [0, 3]]\n<strong>Output</strong>\n[null, 6, -1, null, 6]\n\n<strong>Explanation</strong>\nGraph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]);\ng.shortestPath(3, 2); // return 6. The shortest path from 3 to 2 in the first diagram above is 3 -&gt; 0 -&gt; 1 -&gt; 2 with a total cost of 3 + 2 + 1 = 6.\ng.shortestPath(0, 3); // return -1. There is no path from 0 to 3.\ng.addEdge([1, 3, 4]); // We add an edge from node 1 to node 3, and we get the second diagram above.\ng.shortestPath(0, 3); // return 6. The shortest path from 0 to 3 now is 0 -&gt; 1 -&gt; 3 with a total cost of 2 + 4 = 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>0 &lt;= edges.length &lt;= n * (n - 1)</code></li>\n\t<li><code>edges[i].length == edge.length == 3</code></li>\n\t<li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub>, from, to, node1, node2 &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= edgeCost<sub>i</sub>, edgeCost &lt;= 10<sup>6</sup></code></li>\n\t<li>There are no repeated edges and no self-loops in the graph at any point.</li>\n\t<li>At most <code>100</code> calls will be made for <code>addEdge</code>.</li>\n\t<li>At most <code>100</code> calls will be made for <code>shortestPath</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 762,
            "dislikes": 51,
            "similarQuestions": "[{\"title\": \"Number of Restricted Paths From First to Last Node\", \"titleSlug\": \"number-of-restricted-paths-from-first-to-last-node\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Closest Node to Path in Tree\", \"titleSlug\": \"closest-node-to-path-in-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"61.5K\", \"totalSubmission\": \"86.7K\", \"totalAcceptedRaw\": 61546, \"totalSubmissionRaw\": 86706, \"acRate\": \"71.0%\"}",
            "hints": [
                "After adding each edge, update your graph with the new edge, and you can calculate the shortest path in your graph each time the shortestPath method is called.",
                "Use dijkstra\u2019s algorithm to calculate the shortest paths."
            ],
            "rephrased": {
                "body": "Implement a `Graph` class for a directed weighted graph with `n` nodes (numbered 0 to n-1). The graph is initially represented by an array `edges` where `edges[i] = [from_i, to_i, edgeCost_i]` indicates an edge from `from_i` to `to_i` with cost `edgeCost_i`.\n\nThe `Graph` class should support the following methods:\n\n*   `Graph(int n, int[][] edges)`: Initializes the graph with `n` nodes and the given edges.\n*   `addEdge(int[] edge)`: Adds a new edge `edge = [from, to, edgeCost]` to the graph. It is guaranteed that no edge exists between these nodes before adding.\n*   `shortestPath(int node1, int node2)`: Finds the minimum cost path from `node1` to `node2`. If no path exists, return -1. The cost of a path is the sum of the costs of its edges.",
                "constraints": [
                    "1 <= n <= 100",
                    "0 <= edges.length <= n * (n - 1)",
                    "edges[i].length == edge.length == 3",
                    "0 <= from_i, to_i, from, to, node1, node2 <= n - 1",
                    "1 <= edgeCost_i, edgeCost <= 10^6",
                    "There are no repeated edges and no self-loops in the graph at any point.",
                    "At most 100 calls will be made for addEdge.",
                    "At most 100 calls will be made for shortestPath."
                ],
                "testcases": [
                    {
                        "input": "[&quot;Graph&quot;, &quot;shortestPath&quot;, &quot;shortestPath&quot;, &quot;addEdge&quot;, &quot;shortestPath&quot;]\n[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]], [0, 3]]",
                        "output": "[null, 6, -1, null, 6]",
                        "explanation": "Initially, the graph has 4 nodes and edges: (0 -> 2, cost 5), (0 -> 1, cost 2), (1 -> 2, cost 1), (3 -> 0, cost 3).\nshortestPath(3, 2): The shortest path is 3 -> 0 -> 1 -> 2 with a cost of 3 + 2 + 1 = 6.\nshortestPath(0, 3): There is no path from 0 to 3, so return -1.\naddEdge([1, 3, 4]): Adds an edge from 1 to 3 with cost 4.\nshortestPath(0, 3): The shortest path is now 0 -> 1 -> 3 with a cost of 2 + 4 = 6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-restricted-paths-from-first-to-last-node",
                "title": "Number of Restricted Paths From First to Last Node",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "closest-node-to-path-in-tree",
                "title": "Closest Node to Path in Tree",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "After adding each edge, update your graph with the new edge, and you can calculate the shortest path in your graph each time the shortestPath method is called.",
            "Use dijkstra\u2019s algorithm to calculate the shortest paths."
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Graph {\n public:\n  Graph(int n, vector<vector<int>>& edges) {\n    graph.resize(n);\n    for (const vector<int>& edge : edges)\n      addEdge(edge);\n  }\n\n  void addEdge(vector<int> edge) {\n    const int u = edge[0];\n    const int v = edge[1];\n    const int w = edge[2];\n    graph[u].emplace_back(v, w);\n  }\n\n  int shortestPath(int node1, int node2) {\n    vector<int> dist(graph.size(), INT_MAX);\n    using P = pair<int, int>;  // (d, u)\n    priority_queue<P, vector<P>, greater<>> minHeap;\n\n    dist[node1] = 0;\n    minHeap.emplace(dist[node1], node1);\n\n    while (!minHeap.empty()) {\n      const auto [d, u] = minHeap.top();\n      minHeap.pop();\n      if (u == node2)\n        return d;\n      for (const auto& [v, w] : graph[u])\n        if (d + w < dist[v]) {\n          dist[v] = d + w;\n          minHeap.emplace(dist[v], v);\n        }\n    }\n\n    return -1;\n  }\n\n private:\n  vector<vector<pair<int, int>>> graph;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Graph {\n  public Graph(int n, int[][] edges) {\n    graph = new List[n];\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n    for (int[] edge : edges)\n      addEdge(edge);\n  }\n\n  public void addEdge(int[] edge) {\n    final int u = edge[0];\n    final int v = edge[1];\n    final int w = edge[2];\n    graph[u].add(new Pair<>(v, w));\n  }\n\n  public int shortestPath(int node1, int node2) {\n    int[] dist = new int[graph.length];\n    Arrays.fill(dist, Integer.MAX_VALUE);\n    // (d, u)\n    Queue<Pair<Integer, Integer>> minHeap = new PriorityQueue<>(Comparator.comparing(Pair::getKey));\n\n    dist[node1] = 0;\n    minHeap.offer(new Pair<>(dist[node1], node1));\n\n    while (!minHeap.isEmpty()) {\n      final int d = minHeap.peek().getKey();\n      final int u = minHeap.poll().getValue();\n      if (u == node2)\n        return d;\n      for (Pair<Integer, Integer> pair : graph[u]) {\n        final int v = pair.getKey();\n        final int w = pair.getValue();\n        if (d + w < dist[v]) {\n          dist[v] = d + w;\n          minHeap.offer(new Pair<>(dist[v], v));\n        }\n      }\n    }\n\n    return -1;\n  }\n\n  private List<Pair<Integer, Integer>>[] graph;\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Graph:\n  def __init__(self, n: int, edges: List[List[int]]):\n    self.graph = [[] for _ in range(n)]\n    for edge in edges:\n      self.addEdge(edge)\n\n  def addEdge(self, edge: List[int]):\n    u, v, w = edge\n    self.graph[u].append((v, w))\n\n  def shortestPath(self, node1: int, node2: int) -> int:\n    dist = [math.inf] * len(self.graph)\n\n    dist[node1] = 0\n    minHeap = [(dist[node1], node1)]  # (d, u)\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if u == node2:\n        return d\n      for v, w in self.graph[u]:\n        if d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (dist[v], v))\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}