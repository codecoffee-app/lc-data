{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "706",
            "title": "Design HashMap",
            "titleSlug": "design-hashmap",
            "content": "<p>Design a HashMap without using any built-in hash table libraries.</p>\n\n<p>Implement the <code>MyHashMap</code> class:</p>\n\n<ul>\n\t<li><code>MyHashMap()</code> initializes the object with an empty map.</li>\n\t<li><code>void put(int key, int value)</code> inserts a <code>(key, value)</code> pair into the HashMap. If the <code>key</code> already exists in the map, update the corresponding <code>value</code>.</li>\n\t<li><code>int get(int key)</code> returns the <code>value</code> to which the specified <code>key</code> is mapped, or <code>-1</code> if this map contains no mapping for the <code>key</code>.</li>\n\t<li><code>void remove(key)</code> removes the <code>key</code> and its corresponding <code>value</code> if the map contains the mapping for the <code>key</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyHashMap&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;remove&quot;, &quot;get&quot;]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\n<strong>Output</strong>\n[null, null, null, 1, -1, null, 1, null, -1]\n\n<strong>Explanation</strong>\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= key, value &lt;= 10<sup>6</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>put</code>, <code>get</code>, and <code>remove</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4985,
            "dislikes": 447,
            "similarQuestions": "[{\"title\": \"Design HashSet\", \"titleSlug\": \"design-hashset\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Design Skiplist\", \"titleSlug\": \"design-skiplist\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"546.6K\", \"totalSubmission\": \"829.8K\", \"totalAcceptedRaw\": 546615, \"totalSubmissionRaw\": 829799, \"acRate\": \"65.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a HashMap without relying on built-in hash table libraries. Implement the `MyHashMap` class with the following methods:\n\n- `MyHashMap()`: Initializes an empty HashMap.\n- `void put(int key, int value)`: Inserts a `(key, value)` pair. If the `key` already exists, update its corresponding `value`.\n- `int get(int key)`: Returns the `value` associated with the specified `key`, or `-1` if the map doesn't contain the `key`.\n- `void remove(int key)`: Removes the `key` and its `value` if the map contains a mapping for the `key`.",
                "constraints": [
                    "0 <= key, value <= 10^6",
                    "At most 10^4 calls will be made to put, get, and remove."
                ],
                "testcases": [
                    {
                        "input": "[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]",
                        "output": "[null, null, null, 1, -1, null, 1, null, -1]",
                        "explanation": "Initializes a HashMap, puts (1,1), puts (2,2). Then get(1) returns 1, get(3) returns -1 (not found). put(2,1) updates existing key 2 to value 1. get(2) returns 1. remove(2) deletes key 2. get(2) now returns -1 (not found)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "design-hashset",
                "title": "Design HashSet",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "design-skiplist",
                "title": "Design Skiplist",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class MyHashMap {\n public:\n  /** Initialize your data structure here. */\n  MyHashMap() : lists(kSize) {}\n\n  /** value will always be non-negative. */\n  void put(int key, int value) {\n    auto& pairs = lists[key % kSize];\n    for (auto& [k, v] : pairs)\n      if (k == key) {\n        v = value;\n        return;\n      }\n    pairs.emplace_back(key, value);\n  }\n\n  /** Returns the value to which the specified key is mapped, or -1 if this map\n   * contains no mapping for the key */\n  int get(int key) {\n    const list<pair<int, int>>& pairs = lists[key % kSize];\n    for (const auto& [k, v] : pairs)\n      if (k == key)\n        return v;\n    return -1;\n  }\n\n  /** Removes the mapping of the specified value key if this map contains a\n   * mapping for the key */\n  void remove(int key) {\n    auto& pairs = lists[key % kSize];\n    for (auto it = pairs.begin(); it != pairs.end(); ++it)\n      if (it->first == key) {\n        pairs.erase(it);\n        return;\n      }\n  }\n\n private:\n  static constexpr int kSize = 10000;\n  vector<list<pair<int, int>>> lists;  // Each slot store (key, value) list\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class MyHashMap {\n  /** Initialize your data structure here. */\n  public MyHashMap() {\n    lists = new List[kSize];\n\n    for (int i = 0; i < kSize; ++i)\n      lists[i] = new ArrayList<>();\n  }\n\n  /** value will always be non-negative. */\n  public void put(int key, int value) {\n    for (int[] pair : lists[key % kSize])\n      if (pair[0] == key) {\n        pair[1] = value;\n        return;\n      }\n    lists[key % kSize].add(new int[] {key, value});\n  }\n\n  /**\n   * Returns the value to which the specified key is mapped, or -1 if this map\n   * contains no mapping for the key\n   */\n  public int get(int key) {\n    for (int[] pair : lists[key % kSize])\n      if (pair[0] == key)\n        return pair[1];\n    return -1;\n  }\n\n  /**\n   * Removes the mapping of the specified value key if this map contains a mapping\n   * for the key\n   */\n  public void remove(int key) {\n    for (int i = 0; i < lists[key % kSize].size(); ++i)\n      if (lists[key % kSize].get(i)[0] == key) {\n        lists[key % kSize].remove(i);\n        return;\n      }\n  }\n\n  private static final int kSize = 10000;\n  List<int[]>[] lists; // Each slot store (key, value) list\n}\n",
                "lang_text": "java"
            }
        }
    }
}