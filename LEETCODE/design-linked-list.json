{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "707",
            "title": "Design Linked List",
            "titleSlug": "design-linked-list",
            "content": "<p>Design your implementation of the linked list. You can choose to use a singly or doubly linked list.<br />\nA node in a singly linked list should have two attributes: <code>val</code> and <code>next</code>. <code>val</code> is the value of the current node, and <code>next</code> is a pointer/reference to the next node.<br />\nIf you want to use the doubly linked list, you will need one more attribute <code>prev</code> to indicate the previous node in the linked list. Assume all nodes in the linked list are <strong>0-indexed</strong>.</p>\n\n<p>Implement the <code>MyLinkedList</code> class:</p>\n\n<ul>\n\t<li><code>MyLinkedList()</code> Initializes the <code>MyLinkedList</code> object.</li>\n\t<li><code>int get(int index)</code> Get the value of the <code>index<sup>th</sup></code> node in the linked list. If the index is invalid, return <code>-1</code>.</li>\n\t<li><code>void addAtHead(int val)</code> Add a node of value <code>val</code> before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</li>\n\t<li><code>void addAtTail(int val)</code> Append a node of value <code>val</code> as the last element of the linked list.</li>\n\t<li><code>void addAtIndex(int index, int val)</code> Add a node of value <code>val</code> before the <code>index<sup>th</sup></code> node in the linked list. If <code>index</code> equals the length of the linked list, the node will be appended to the end of the linked list. If <code>index</code> is greater than the length, the node <strong>will not be inserted</strong>.</li>\n\t<li><code>void deleteAtIndex(int index)</code> Delete the <code>index<sup>th</sup></code> node in the linked list, if the index is valid.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]\n[[], [1], [3], [1, 2], [1], [1], [1]]\n<strong>Output</strong>\n[null, null, null, null, 2, null, 3]\n\n<strong>Explanation</strong>\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1-&gt;2-&gt;3\nmyLinkedList.get(1);              // return 2\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1-&gt;3\nmyLinkedList.get(1);              // return 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= index, val &lt;= 1000</code></li>\n\t<li>Please do not use the built-in LinkedList library.</li>\n\t<li>At most <code>2000</code> calls will be made to <code>get</code>, <code>addAtHead</code>, <code>addAtTail</code>, <code>addAtIndex</code> and <code>deleteAtIndex</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2505,
            "dislikes": 1562,
            "similarQuestions": "[{\"title\": \"Design Skiplist\", \"titleSlug\": \"design-skiplist\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Design",
                    "slug": "design"
                }
            ],
            "stats": "{\"totalAccepted\": \"300.1K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 300125, \"totalSubmissionRaw\": 1071746, \"acRate\": \"28.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design your own implementation of a linked list. You can choose to use a singly or doubly linked list.\n\nA singly linked list node should have two attributes: `val` (the node's value) and `next` (a pointer to the next node).\n\nFor a doubly linked list, you'll need an additional `prev` attribute to point to the previous node.  Assume all nodes are 0-indexed.\n\nImplement the `MyLinkedList` class with the following methods:\n\n*   `MyLinkedList()`: Initializes the linked list.\n*   `int get(int index)`: Returns the value of the node at the given index. Returns `-1` if the index is invalid.\n*   `void addAtHead(int val)`: Adds a new node with the given value before the first element.\n*   `void addAtTail(int val)`: Appends a new node with the given value to the end of the list.\n*   `void addAtIndex(int index, int val)`: Inserts a new node with the given value before the node at the given index. If `index` is equal to the length of the list, the node is appended. If `index` is greater than the length, the node is not inserted.\n*   `void deleteAtIndex(int index)`: Deletes the node at the given index if the index is valid.",
                "constraints": [
                    "0 <= index, val <= 1000",
                    "Do not use the built-in LinkedList library.",
                    "At most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex and deleteAtIndex."
                ],
                "testcases": [
                    {
                        "input": "[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\n[[], [1], [3], [1, 2], [1], [1], [1]]",
                        "output": "[null, null, null, null, 2, null, 3]",
                        "explanation": "MyLinkedList is initialized.  1 is added to the head. 3 is added to the tail. 2 is inserted at index 1 (between 1 and 3).  Getting the value at index 1 returns 2. The node at index 1 (value 2) is deleted. Getting the value at index 1 now returns 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "design-skiplist",
                "title": "Design Skiplist",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Design",
                "slug": "design"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class MyLinkedList {\n  struct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n  };\n\n public:\n  int get(int index) {\n    if (index < 0 || index >= length)\n      return -1;\n    ListNode* curr = dummy.next;\n    for (int i = 0; i < index; ++i)\n      curr = curr->next;\n    return curr->val;\n  }\n\n  void addAtHead(int val) {\n    ListNode* head = dummy.next;\n    ListNode* node = new ListNode(val);\n    node->next = head;\n    dummy.next = node;\n    ++length;\n  }\n\n  void addAtTail(int val) {\n    ListNode* curr = &dummy;\n    while (curr->next)\n      curr = curr->next;\n    curr->next = new ListNode(val);\n    ++length;\n  }\n\n  void addAtIndex(int index, int val) {\n    if (index > length)\n      return;\n    ListNode* curr = &dummy;\n    for (int i = 0; i < index; ++i)\n      curr = curr->next;\n    ListNode* cache = curr->next;\n    ListNode* node = new ListNode(val);\n    node->next = cache;\n    curr->next = node;\n    ++length;\n  }\n\n  void deleteAtIndex(int index) {\n    if (index < 0 || index >= length)\n      return;\n    ListNode* curr = &dummy;\n    for (int i = 0; i < index; ++i)\n      curr = curr->next;\n    ListNode* cache = curr->next;\n    curr->next = cache->next;\n    --length;\n    delete cache;\n  }\n\n private:\n  int length = 0;\n  ListNode dummy = ListNode(0);\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class MyLinkedList {\n  private class ListNode {\n    int val;\n    ListNode next;\n    public ListNode(int val) {\n      this.val = val;\n      this.next = null;\n    }\n  }\n\n  public int get(int index) {\n    if (index < 0 || index >= length)\n      return -1;\n    ListNode curr = dummy.next;\n    for (int i = 0; i < index; ++i)\n      curr = curr.next;\n    return curr.val;\n  }\n\n  public void addAtHead(int val) {\n    ListNode head = dummy.next;\n    ListNode node = new ListNode(val);\n    node.next = head;\n    dummy.next = node;\n    ++length;\n  }\n\n  public void addAtTail(int val) {\n    ListNode curr = dummy;\n    while (curr.next != null)\n      curr = curr.next;\n    curr.next = new ListNode(val);\n    ++length;\n  }\n\n  public void addAtIndex(int index, int val) {\n    if (index > length)\n      return;\n    ListNode curr = dummy;\n    for (int i = 0; i < index; ++i)\n      curr = curr.next;\n    ListNode cache = curr.next;\n    ListNode node = new ListNode(val);\n    node.next = cache;\n    curr.next = node;\n    ++length;\n  }\n\n  public void deleteAtIndex(int index) {\n    if (index < 0 || index >= length)\n      return;\n    ListNode curr = dummy;\n    for (int i = 0; i < index; ++i)\n      curr = curr.next;\n    ListNode cache = curr.next;\n    curr.next = cache.next;\n    --length;\n  }\n\n  int length = 0;\n  ListNode dummy = new ListNode(0);\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class ListNode:\n  def __init__(self, x):\n    self.val = x\n    self.next = None\n\n\nclass MyLinkedList:\n  def __init__(self):\n    self.length = 0\n    self.dummy = ListNode(0)\n\n  def get(self, index: int) -> int:\n    if index < 0 or index >= self.length:\n      return -1\n    curr = self.dummy.next\n    for _ in range(index):\n      curr = curr.next\n    return curr.val\n\n  def addAtHead(self, val: int) -> None:\n    curr = self.dummy.next\n    self.dummy.next = ListNode(val)\n    self.dummy.next.next = curr\n    self.length += 1\n\n  def addAtTail(self, val: int) -> None:\n    curr = self.dummy\n    while curr.next:\n      curr = curr.next\n    curr.next = ListNode(val)\n    self.length += 1\n\n  def addAtIndex(self, index: int, val: int) -> None:\n    if index > self.length:\n      return\n    curr = self.dummy\n    for _ in range(index):\n      curr = curr.next\n    temp = curr.next\n    curr.next = ListNode(val)\n    curr.next.next = temp\n    self.length += 1\n\n  def deleteAtIndex(self, index: int) -> None:\n    if index < 0 or index >= self.length:\n      return\n    curr = self.dummy\n    for _ in range(index):\n      curr = curr.next\n    temp = curr.next\n    curr.next = temp.next\n    self.length -= 1\n",
                "lang_text": "py"
            }
        }
    }
}