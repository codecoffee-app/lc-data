{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2502",
            "title": "Design Memory Allocator",
            "titleSlug": "design-memory-allocator",
            "content": "<p>You are given an integer <code>n</code> representing the size of a <strong>0-indexed</strong> memory array. All memory units are initially free.</p>\n\n<p>You have a memory allocator with the following functionalities:</p>\n\n<ol>\n\t<li><strong>Allocate </strong>a block of <code>size</code> consecutive free memory units and assign it the id <code>mID</code>.</li>\n\t<li><strong>Free</strong> all memory units with the given id <code>mID</code>.</li>\n</ol>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>Multiple blocks can be allocated to the same <code>mID</code>.</li>\n\t<li>You should free all the memory units with <code>mID</code>, even if they were allocated in different blocks.</li>\n</ul>\n\n<p>Implement the <code>Allocator</code> class:</p>\n\n<ul>\n\t<li><code>Allocator(int n)</code> Initializes an <code>Allocator</code> object with a memory array of size <code>n</code>.</li>\n\t<li><code>int allocate(int size, int mID)</code> Find the <strong>leftmost</strong> block of <code>size</code> <strong>consecutive</strong> free memory units and allocate it with the id <code>mID</code>. Return the block&#39;s first index. If such a block does not exist, return <code>-1</code>.</li>\n\t<li><code>int free(int mID)</code> Free all memory units with the id <code>mID</code>. Return the number of memory units you have freed.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Allocator&quot;, &quot;allocate&quot;, &quot;allocate&quot;, &quot;allocate&quot;, &quot;free&quot;, &quot;allocate&quot;, &quot;allocate&quot;, &quot;allocate&quot;, &quot;free&quot;, &quot;allocate&quot;, &quot;free&quot;]\n[[10], [1, 1], [1, 2], [1, 3], [2], [3, 4], [1, 1], [1, 1], [1], [10, 2], [7]]\n<strong>Output</strong>\n[null, 0, 1, 2, 1, 3, 1, 6, 3, -1, 0]\n\n<strong>Explanation</strong>\nAllocator loc = new Allocator(10); // Initialize a memory array of size 10. All memory units are initially free.\nloc.allocate(1, 1); // The leftmost block&#39;s first index is 0. The memory array becomes [<strong>1</strong>,_,_,_,_,_,_,_,_,_]. We return 0.\nloc.allocate(1, 2); // The leftmost block&#39;s first index is 1. The memory array becomes [1,<strong>2</strong>,_,_,_,_,_,_,_,_]. We return 1.\nloc.allocate(1, 3); // The leftmost block&#39;s first index is 2. The memory array becomes [1,2,<strong>3</strong>,_,_,_,_,_,_,_]. We return 2.\nloc.free(2); // Free all memory units with mID 2. The memory array becomes [1,_, 3,_,_,_,_,_,_,_]. We return 1 since there is only 1 unit with mID 2.\nloc.allocate(3, 4); // The leftmost block&#39;s first index is 3. The memory array becomes [1,_,3,<strong>4</strong>,<strong>4</strong>,<strong>4</strong>,_,_,_,_]. We return 3.\nloc.allocate(1, 1); // The leftmost block&#39;s first index is 1. The memory array becomes [1,<strong>1</strong>,3,4,4,4,_,_,_,_]. We return 1.\nloc.allocate(1, 1); // The leftmost block&#39;s first index is 6. The memory array becomes [1,1,3,4,4,4,<strong>1</strong>,_,_,_]. We return 6.\nloc.free(1); // Free all memory units with mID 1. The memory array becomes [_,_,3,4,4,4,_,_,_,_]. We return 3 since there are 3 units with mID 1.\nloc.allocate(10, 2); // We can not find any free block with 10 consecutive free memory units, so we return -1.\nloc.free(7); // Free all memory units with mID 7. The memory array remains the same since there is no memory unit with mID 7. We return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, size, mID &lt;= 1000</code></li>\n\t<li>At most <code>1000</code> calls will be made to <code>allocate</code> and <code>free</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 261,
            "dislikes": 78,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.3K\", \"totalSubmission\": \"27.2K\", \"totalAcceptedRaw\": 14263, \"totalSubmissionRaw\": 27188, \"acRate\": \"52.5%\"}",
            "hints": [
                "Can you simulate the process?",
                "Use brute force to find the leftmost free block and free each occupied memory unit"
            ],
            "rephrased": {
                "body": "Implement a memory allocator with the following functionalities:\n\n*   **Allocate:** Find the leftmost block of `size` consecutive free memory units in a 0-indexed memory array of size `n` and assign it the id `mID`. Return the block's first index. If such a block does not exist, return `-1`.\n*   **Free:** Free all memory units with the given id `mID`. Return the number of memory units freed.\n\nNote that multiple blocks can be allocated to the same `mID`, and you should free all memory units with `mID`, even if they were allocated in different blocks.\n\nImplement the `Allocator` class:\n\n*   `Allocator(int n)`: Initializes an `Allocator` object with a memory array of size `n`. All memory units are initially free.\n*   `int allocate(int size, int mID)`: Allocates a block of `size` consecutive free memory units with the id `mID`. Returns the block's first index, or `-1` if no such block exists.\n*   `int free(int mID)`: Frees all memory units with the id `mID`. Returns the number of memory units freed.",
                "constraints": [
                    "1 <= n, size, mID <= 1000",
                    "At most 1000 calls will be made to allocate and free."
                ],
                "testcases": [
                    {
                        "input": "[\"Allocator\", \"allocate\", \"allocate\", \"allocate\", \"free\", \"allocate\", \"allocate\", \"allocate\", \"free\", \"allocate\", \"free\"]\n[[10], [1, 1], [1, 2], [1, 3], [2], [3, 4], [1, 1], [1, 1], [1], [10, 2], [7]]",
                        "output": "[null, 0, 1, 2, 1, 3, 1, 6, 3, -1, 0]",
                        "explanation": "Initialize a memory array of size 10.\nallocate(1, 1): Returns 0. Memory: [1, _, _, _, _, _, _, _, _, _]\nallocate(1, 2): Returns 1. Memory: [1, 2, _, _, _, _, _, _, _, _]\nallocate(1, 3): Returns 2. Memory: [1, 2, 3, _, _, _, _, _, _, _]\nfree(2): Returns 1. Memory: [1, _, 3, _, _, _, _, _, _, _]\nallocate(3, 4): Returns 3. Memory: [1, _, 3, 4, 4, 4, _, _, _, _]\nallocate(1, 1): Returns 1. Memory: [1, 1, 3, 4, 4, 4, _, _, _, _]\nallocate(1, 1): Returns 6. Memory: [1, 1, 3, 4, 4, 4, 1, _, _, _]\nfree(1): Returns 3. Memory: [_, _, 3, 4, 4, 4, _, _, _, _]\nallocate(10, 2): Returns -1 (no block of size 10 available).\nfree(7): Returns 0 (no memory units with ID 7)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Can you simulate the process?",
            "Use brute force to find the leftmost free block and free each occupied memory unit"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ]
    }
}