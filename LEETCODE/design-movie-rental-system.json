{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1912",
            "title": "Design Movie Rental System",
            "titleSlug": "design-movie-rental-system",
            "content": "<p>You have a movie renting company consisting of <code>n</code> shops. You want to implement a renting system that supports searching for, booking, and returning movies. The system should also support generating a report of the currently rented movies.</p>\n\n<p>Each movie is given as a 2D integer array <code>entries</code> where <code>entries[i] = [shop<sub>i</sub>, movie<sub>i</sub>, price<sub>i</sub>]</code> indicates that there is a copy of movie <code>movie<sub>i</sub></code> at shop <code>shop<sub>i</sub></code> with a rental price of <code>price<sub>i</sub></code>. Each shop carries <strong>at most one</strong> copy of a movie <code>movie<sub>i</sub></code>.</p>\n\n<p>The system should support the following functions:</p>\n\n<ul>\n\t<li><strong>Search</strong>: Finds the <strong>cheapest 5 shops</strong> that have an <strong>unrented copy</strong> of a given movie. The shops should be sorted by <strong>price</strong> in ascending order, and in case of a tie, the one with the <strong>smaller </strong><code>shop<sub>i</sub></code> should appear first. If there are less than 5 matching shops, then all of them should be returned. If no shop has an unrented copy, then an empty list should be returned.</li>\n\t<li><strong>Rent</strong>: Rents an <strong>unrented copy</strong> of a given movie from a given shop.</li>\n\t<li><strong>Drop</strong>: Drops off a <strong>previously rented copy</strong> of a given movie at a given shop.</li>\n\t<li><strong>Report</strong>: Returns the <strong>cheapest 5 rented movies</strong> (possibly of the same movie ID) as a 2D list <code>res</code> where <code>res[j] = [shop<sub>j</sub>, movie<sub>j</sub>]</code> describes that the <code>j<sup>th</sup></code> cheapest rented movie <code>movie<sub>j</sub></code> was rented from the shop <code>shop<sub>j</sub></code>. The movies in <code>res</code> should be sorted by <strong>price </strong>in ascending order, and in case of a tie, the one with the <strong>smaller </strong><code>shop<sub>j</sub></code> should appear first, and if there is still tie, the one with the <strong>smaller </strong><code>movie<sub>j</sub></code> should appear first. If there are fewer than 5 rented movies, then all of them should be returned. If no movies are currently being rented, then an empty list should be returned.</li>\n</ul>\n\n<p>Implement the <code>MovieRentingSystem</code> class:</p>\n\n<ul>\n\t<li><code>MovieRentingSystem(int n, int[][] entries)</code> Initializes the <code>MovieRentingSystem</code> object with <code>n</code> shops and the movies in <code>entries</code>.</li>\n\t<li><code>List&lt;Integer&gt; search(int movie)</code> Returns a list of shops that have an <strong>unrented copy</strong> of the given <code>movie</code> as described above.</li>\n\t<li><code>void rent(int shop, int movie)</code> Rents the given <code>movie</code> from the given <code>shop</code>.</li>\n\t<li><code>void drop(int shop, int movie)</code> Drops off a previously rented <code>movie</code> at the given <code>shop</code>.</li>\n\t<li><code>List&lt;List&lt;Integer&gt;&gt; report()</code> Returns a list of cheapest <strong>rented</strong> movies as described above.</li>\n</ul>\n\n<p><strong>Note:</strong> The test cases will be generated such that <code>rent</code> will only be called if the shop has an <strong>unrented</strong> copy of the movie, and <code>drop</code> will only be called if the shop had <strong>previously rented</strong> out the movie.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MovieRentingSystem&quot;, &quot;search&quot;, &quot;rent&quot;, &quot;rent&quot;, &quot;report&quot;, &quot;drop&quot;, &quot;search&quot;]\n[[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]]\n<strong>Output</strong>\n[null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]\n\n<strong>Explanation</strong>\nMovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]);\nmovieRentingSystem.search(1);  // return [1, 0, 2], Movies of ID 1 are unrented at shops 1, 0, and 2. Shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number.\nmovieRentingSystem.rent(0, 1); // Rent movie 1 from shop 0. Unrented movies at shop 0 are now [2,3].\nmovieRentingSystem.rent(1, 2); // Rent movie 2 from shop 1. Unrented movies at shop 1 are now [1].\nmovieRentingSystem.report();   // return [[0, 1], [1, 2]]. Movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1.\nmovieRentingSystem.drop(1, 2); // Drop off movie 2 at shop 1. Unrented movies at shop 1 are now [1,2].\nmovieRentingSystem.search(2);  // return [0, 1]. Movies of ID 2 are unrented at shops 0 and 1. Shop 0 is cheapest, followed by shop 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= entries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= shop<sub>i</sub> &lt; n</code></li>\n\t<li><code>1 &lt;= movie<sub>i</sub>, price<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>Each shop carries <strong>at most one</strong> copy of a movie <code>movie<sub>i</sub></code>.</li>\n\t<li>At most <code>10<sup>5</sup></code> calls <strong>in total</strong> will be made to <code>search</code>, <code>rent</code>, <code>drop</code> and <code>report</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 231,
            "dislikes": 45,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.8K\", \"totalSubmission\": \"16.1K\", \"totalAcceptedRaw\": 5815, \"totalSubmissionRaw\": 16141, \"acRate\": \"36.0%\"}",
            "hints": [
                "You need to maintain a sorted list for each movie and a sorted list for rented movies",
                "When renting a movie remove it from its movies sorted list and added it to the rented list and vice versa in the case of dropping a movie"
            ],
            "rephrased": {
                "body": "Implement a movie renting system for `n` shops. The system should allow searching for the cheapest unrented copies of a movie, renting movies, dropping off rented movies, and generating a report of currently rented movies.  Each movie is represented by `entries[i] = [shop_i, movie_i, price_i]`, indicating a copy of `movie_i` at `shop_i` with rental price `price_i`.  Each shop carries at most one copy of a movie. The system needs to support the following operations:\n\n*   **Search(movie):** Find the cheapest 5 shops with unrented copies of the given movie. Sort by price (ascending), then shop number (ascending). Return all matching shops if fewer than 5 exist.  Return an empty list if no shop has an unrented copy.\n*   **Rent(shop, movie):** Rent the given movie from the given shop.\n*   **Drop(shop, movie):** Drop off a previously rented movie at the given shop.\n*   **Report():** Return the cheapest 5 rented movies as a list of `[shop_j, movie_j]` pairs. Sort by price (ascending), then shop number (ascending), then movie ID (ascending). Return all rented movies if fewer than 5 exist. Return an empty list if no movies are currently rented.\n\nImplement the `MovieRentingSystem` class with the following methods:\n\n*   `MovieRentingSystem(int n, int[][] entries)`: Initializes the object with `n` shops and the movies in `entries`.\n*   `List<Integer> search(int movie)`\n*   `void rent(int shop, int movie)`\n*   `void drop(int shop, int movie)`\n*   `List<List<Integer>> report()`",
                "constraints": [
                    "1 <= n <= 3 * 10^5",
                    "1 <= entries.length <= 10^5",
                    "0 <= shop_i < n",
                    "1 <= movie_i, price_i <= 10^4",
                    "Each shop carries at most one copy of a movie movie_i.",
                    "At most 10^5 calls in total will be made to search, rent, drop and report."
                ],
                "testcases": [
                    {
                        "input": "[\"MovieRentingSystem\", \"search\", \"rent\", \"rent\", \"report\", \"drop\", \"search\"]\n[[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]]",
                        "output": "[null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]",
                        "explanation": "First, we initialize the MovieRentingSystem with 3 shops and the given movie entries.  Then:\n* search(1): Movies of ID 1 are unrented at shops 1 (price 4), 0 (price 5), and 2 (price 5). Shop 1 is cheapest; shops 0 and 2 are the same price, so they are ordered by shop number.\n* rent(0, 1): Rent movie 1 from shop 0. Unrented movies at shop 0 are now [2, 3].\n* rent(1, 2): Rent movie 2 from shop 1. Unrented movies at shop 1 are now [1].\n* report(): Movie 1 from shop 0 (price 5) is the cheapest, followed by movie 2 from shop 1 (price 7).\n* drop(1, 2): Drop off movie 2 at shop 1. Unrented movies at shop 1 are now [1, 2].\n* search(2): Movies of ID 2 are unrented at shops 0 (price 6) and 1 (price 7). Shop 0 is cheaper."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "You need to maintain a sorted list for each movie and a sorted list for rented movies",
            "When renting a movie remove it from its movies sorted list and added it to the rented list and vice versa in the case of dropping a movie"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class MovieRentingSystem {\n public:\n  MovieRentingSystem(int n, vector<vector<int>>& entries) {\n    for (const vector<int>& e : entries) {\n      const int shop = e[0];\n      const int movie = e[1];\n      const int price = e[2];\n      unrented[movie].insert({price, shop});\n      shopAndMovieToPrice[{shop, movie}] = price;\n    }\n  }\n\n  vector<int> search(int movie) {\n    vector<int> ans;\n    int i = 0;\n\n    for (const auto& [price, shop] : unrented[movie]) {\n      ans.push_back(shop);\n      if (++i >= 5)\n        break;\n    }\n\n    return ans;\n  }\n\n  void rent(int shop, int movie) {\n    const int price = shopAndMovieToPrice[{shop, movie}];\n    unrented[movie].erase({price, shop});\n    rented.insert({price, {shop, movie}});\n  }\n\n  void drop(int shop, int movie) {\n    const int price = shopAndMovieToPrice[{shop, movie}];\n    unrented[movie].insert({price, shop});\n    rented.erase({price, {shop, movie}});\n  }\n\n  vector<vector<int>> report() {\n    vector<vector<int>> ans;\n    int i = 0;\n\n    for (const auto& [_, shopAndMovie] : rented) {\n      ans.push_back({shopAndMovie.first, shopAndMovie.second});\n      if (++i >= 5)\n        break;\n    }\n\n    return ans;\n  }\n\n private:\n  struct pairHash {\n    size_t operator()(const pair<int, int>& p) const {\n      return p.first ^ p.second;\n    }\n  };\n\n  // {movie: (price, shop)}\n  unordered_map<int, set<pair<int, int>>> unrented;\n\n  // {(shop, movie): price}\n  unordered_map<pair<int, int>, int, pairHash> shopAndMovieToPrice;\n\n  // (price, (shop, movie))\n  set<pair<int, pair<int, int>>> rented;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Entry {\n  public int price;\n  public int shop;\n  public int movie;\n\n  public Entry(int price, int shop, int movie) {\n    this.price = price;\n    this.shop = shop;\n    this.movie = movie;\n  }\n}\n\nclass MovieRentingSystem {\n  public MovieRentingSystem(int n, int[][] entries) {\n    for (int[] e : entries) {\n      final int shop = e[0];\n      final int movie = e[1];\n      final int price = e[2];\n      unrented.putIfAbsent(movie, new TreeSet<>(comparator));\n      unrented.get(movie).add(new Entry(price, shop, movie));\n      shopAndMovieToPrice.put(new Pair<>(shop, movie), price);\n    }\n  }\n\n  public List<Integer> search(int movie) {\n    return unrented.getOrDefault(movie, Collections.emptySet())\n        .stream()\n        .limit(5)\n        .map(e -> e.shop)\n        .collect(Collectors.toList());\n  }\n\n  public void rent(int shop, int movie) {\n    final int price = shopAndMovieToPrice.get(new Pair<>(shop, movie));\n    unrented.get(movie).remove(new Entry(price, shop, movie));\n    rented.add(new Entry(price, shop, movie));\n  }\n\n  public void drop(int shop, int movie) {\n    final int price = shopAndMovieToPrice.get(new Pair<>(shop, movie));\n    unrented.get(movie).add(new Entry(price, shop, movie));\n    rented.remove(new Entry(price, shop, movie));\n  }\n\n  public List<List<Integer>> report() {\n    return rented.stream().limit(5).map(e -> List.of(e.shop, e.movie)).collect(Collectors.toList());\n  }\n\n  private Comparator<Entry> comparator = (a, b) -> {\n    if (a.price != b.price)\n      return Integer.compare(a.price, b.price);\n    if (a.shop != b.shop)\n      return Integer.compare(a.shop, b.shop);\n    return Integer.compare(a.movie, b.movie);\n  };\n\n  // {movie: (price, shop)}\n  private Map<Integer, Set<Entry>> unrented = new HashMap<>();\n\n  // {(shop, movie): price}\n  private Map<Pair<Integer, Integer>, Integer> shopAndMovieToPrice = new HashMap<>();\n\n  // (price, shop, movie)\n  private Set<Entry> rented = new TreeSet<>(comparator);\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from sortedcontainers import SortedList\n\n\nclass MovieRentingSystem:\n  def __init__(self, n: int, entries: List[List[int]]):\n    self.unrented = collections.defaultdict(\n        SortedList)  # {movie: (price, shop)}\n    self.shopAndMovieToPrice = {}  # {(shop, movie): price}\n    self.rented = SortedList()  # (price, shop, movie)\n    for shop, movie, price in entries:\n      self.unrented[movie].add((price, shop))\n      self.shopAndMovieToPrice[(shop, movie)] = price\n\n  def search(self, movie: int) -> List[int]:\n    return [shop for _, shop in self.unrented[movie][:5]]\n\n  def rent(self, shop: int, movie: int) -> None:\n    price = self.shopAndMovieToPrice[(shop, movie)]\n    self.unrented[movie].remove((price, shop))\n    self.rented.add((price, shop, movie))\n\n  def drop(self, shop: int, movie: int) -> None:\n    price = self.shopAndMovieToPrice[(shop, movie)]\n    self.unrented[movie].add((price, shop))\n    self.rented.remove((price, shop, movie))\n\n  def report(self) -> List[List[int]]:\n    return [[shop, movie] for _, shop, movie in self.rented[:5]]\n",
                "lang_text": "py"
            }
        }
    }
}