{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "355",
            "title": "Design Twitter",
            "titleSlug": "design-twitter",
            "content": "<p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the <code>10</code> most recent tweets in the user&#39;s news feed.</p>\n\n<p>Implement the <code>Twitter</code> class:</p>\n\n<ul>\n\t<li><code>Twitter()</code> Initializes your twitter object.</li>\n\t<li><code>void postTweet(int userId, int tweetId)</code> Composes a new tweet with ID <code>tweetId</code> by the user <code>userId</code>. Each call to this function will be made with a unique <code>tweetId</code>.</li>\n\t<li><code>List&lt;Integer&gt; getNewsFeed(int userId)</code> Retrieves the <code>10</code> most recent tweet IDs in the user&#39;s news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be <strong>ordered from most recent to least recent</strong>.</li>\n\t<li><code>void follow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started following the user with ID <code>followeeId</code>.</li>\n\t<li><code>void unfollow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started unfollowing the user with ID <code>followeeId</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Twitter&quot;, &quot;postTweet&quot;, &quot;getNewsFeed&quot;, &quot;follow&quot;, &quot;postTweet&quot;, &quot;getNewsFeed&quot;, &quot;unfollow&quot;, &quot;getNewsFeed&quot;]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\n<strong>Output</strong>\n[null, null, [5], null, null, [6, 5], null, [5]]\n\n<strong>Explanation</strong>\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1&#39;s news feed should return a list with 1 tweet id -&gt; [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1&#39;s news feed should return a list with 2 tweet ids -&gt; [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1&#39;s news feed should return a list with 1 tweet id -&gt; [5], since user 1 is no longer following user 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= userId, followerId, followeeId &lt;= 500</code></li>\n\t<li><code>0 &lt;= tweetId &lt;= 10<sup>4</sup></code></li>\n\t<li>All the tweets have <strong>unique</strong> IDs.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>postTweet</code>, <code>getNewsFeed</code>, <code>follow</code>, and <code>unfollow</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3630,
            "dislikes": 471,
            "similarQuestions": "[{\"title\": \"Design a File Sharing System\", \"titleSlug\": \"design-a-file-sharing-system\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"155.9K\", \"totalSubmission\": \"401.8K\", \"totalAcceptedRaw\": 155857, \"totalSubmissionRaw\": 401783, \"acRate\": \"38.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and view the 10 most recent tweets in their news feed.\n\nImplement the `Twitter` class with the following functionalities:\n\n*   `Twitter()`: Initializes the Twitter object.\n*   `void postTweet(int userId, int tweetId)`: Posts a new tweet with ID `tweetId` by user `userId`. Each `tweetId` is unique.\n*   `List<Integer> getNewsFeed(int userId)`: Retrieves the 10 most recent tweet IDs in the user's news feed. The news feed should include tweets posted by the user and the users they follow, ordered from most recent to least recent.\n*   `void follow(int followerId, int followeeId)`: User `followerId` starts following user `followeeId`.\n*   `void unfollow(int followerId, int followeeId)`: User `followerId` unfollows user `followeeId`.",
                "constraints": [
                    "1 <= userId, followerId, followeeId <= 500",
                    "0 <= tweetId <= 10^4",
                    "All tweets have unique IDs.",
                    "At most 3 * 10^4 calls will be made to postTweet, getNewsFeed, follow, and unfollow."
                ],
                "testcases": [
                    {
                        "input": "[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]",
                        "output": "[null, null, [5], null, null, [6, 5], null, [5]]",
                        "explanation": "First, a Twitter object is initialized. User 1 posts tweet with id 5. The news feed of user 1 contains tweet 5. User 1 follows user 2. User 2 posts tweet with id 6. The news feed of user 1 now contains tweet 6 and 5, with tweet 6 being the most recent. User 1 unfollows user 2. The news feed of user 1 then contains tweet 5, since user 1 is no longer following user 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "design-a-file-sharing-system",
                "title": "Design a File Sharing System",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct Tweet {\n  int id;\n  int time;\n  Tweet* next = nullptr;\n  Tweet(int id, int time) : id(id), time(time) {}\n};\n\nstruct User {\n  int id;\n  unordered_set<int> followeeIds;\n  Tweet* tweetHead = nullptr;\n\n  User() {}\n\n  User(int id) : id(id) {\n    follow(id);  // Follow himself\n  }\n\n  void follow(int followeeId) {\n    followeeIds.insert(followeeId);\n  }\n\n  void unfollow(int followeeId) {\n    followeeIds.erase(followeeId);\n  }\n\n  void post(int tweetId, int time) {\n    Tweet* oldTweetHead = tweetHead;\n    tweetHead = new Tweet(tweetId, time);\n    tweetHead->next = oldTweetHead;\n  }\n};\n\nclass Twitter {\n public:\n  /** Compose a new tweet. */\n  void postTweet(int userId, int tweetId) {\n    if (!users.count(userId))\n      users[userId] = User(userId);\n    users[userId].post(tweetId, time++);\n  }\n\n  /**\n   * Retrieve the 10 most recent tweet ids in the user's news feed. Each item in\n   * the news feed must be posted by users who the user followed or by the user\n   * herself. Tweets must be ordered from most recent to least recent.\n   */\n  vector<int> getNewsFeed(int userId) {\n    if (!users.count(userId))\n      return {};\n\n    vector<int> newsFeed;\n\n    auto compare = [](const Tweet* a, const Tweet* b) {\n      return a->time < b->time;\n    };\n    priority_queue<Tweet*, vector<Tweet*>, decltype(compare)> maxHeap(compare);\n\n    for (const int followeeId : users[userId].followeeIds) {\n      Tweet* tweetHead = users[followeeId].tweetHead;\n      if (tweetHead != nullptr)\n        maxHeap.push(tweetHead);\n    }\n\n    int count = 0;\n    while (!maxHeap.empty() && count++ < 10) {\n      Tweet* tweet = maxHeap.top();\n      maxHeap.pop();\n      newsFeed.push_back(tweet->id);\n      if (tweet->next)\n        maxHeap.push(tweet->next);\n    }\n\n    return newsFeed;\n  }\n\n  /**\n   * Follower follows a followee.\n   * If the operation is invalid, it should be a no-op.\n   */\n  void follow(int followerId, int followeeId) {\n    if (followerId == followeeId)\n      return;\n    if (!users.count(followerId))\n      users[followerId] = User(followerId);\n    if (!users.count(followeeId))\n      users[followeeId] = User(followeeId);\n    users[followerId].follow(followeeId);\n  }\n\n  /**\n   * Follower unfollows a followee.\n   * If the operation is invalid, it should be a no-op.\n   */\n  void unfollow(int followerId, int followeeId) {\n    if (followerId == followeeId)\n      return;\n    if (const auto it = users.find(followerId);\n        it != users.cend() && users.count(followeeId))\n      it->second.unfollow(followeeId);\n  }\n\n private:\n  int time = 0;\n  unordered_map<int, User> users;  // {userId: User}\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Tweet {\n  public int id;\n  public int time;\n  public Tweet next = null;\n  public Tweet(int id, int time) {\n    this.id = id;\n    this.time = time;\n  }\n}\n\nclass User {\n  private int id;\n  public Set<Integer> followeeIds = new HashSet<>();\n  public Tweet tweetHead = null;\n\n  public User(int id) {\n    this.id = id;\n    follow(id); // Follow himself\n  }\n\n  public void follow(int followeeId) {\n    followeeIds.add(followeeId);\n  }\n\n  public void unfollow(int followeeId) {\n    followeeIds.remove(followeeId);\n  }\n\n  public void post(int tweetId, int time) {\n    final Tweet oldTweetHead = tweetHead;\n    tweetHead = new Tweet(tweetId, time);\n    tweetHead.next = oldTweetHead;\n  }\n}\n\nclass Twitter {\n  /** Compose a new tweet. */\n  public void postTweet(int userId, int tweetId) {\n    users.putIfAbsent(userId, new User(userId));\n    users.get(userId).post(tweetId, time++);\n  }\n\n  /**\n   * Retrieve the 10 most recent tweet ids in the user's news feed. Each item in\n   * the news feed must be posted by users who the user followed or by the user\n   * herself. Tweets must be ordered from most recent to least recent.\n   */\n  public List<Integer> getNewsFeed(int userId) {\n    if (!users.containsKey(userId))\n      return new ArrayList<>();\n\n    List<Integer> newsFeed = new ArrayList<>();\n    Queue<Tweet> maxHeap = new PriorityQueue<>((a, b) -> b.time - a.time);\n\n    for (final int followeeId : users.get(userId).followeeIds) {\n      Tweet tweetHead = users.get(followeeId).tweetHead;\n      if (tweetHead != null)\n        maxHeap.offer(tweetHead);\n    }\n\n    int count = 0;\n    while (!maxHeap.isEmpty() && count++ < 10) {\n      Tweet tweet = maxHeap.poll();\n      newsFeed.add(tweet.id);\n      if (tweet.next != null)\n        maxHeap.offer(tweet.next);\n    }\n\n    return newsFeed;\n  }\n\n  /**\n   * Follower follows a followee.\n   * If the operation is invalid, it should be a no-op.\n   */\n  public void follow(int followerId, int followeeId) {\n    if (followerId == followeeId)\n      return;\n    users.putIfAbsent(followerId, new User(followerId));\n    users.putIfAbsent(followeeId, new User(followeeId));\n    users.get(followerId).follow(followeeId);\n  }\n\n  /**\n   * Follower unfollows a followee.\n   * If the operation is invalid, it should be a no-op.\n   */\n  public void unfollow(int followerId, int followeeId) {\n    if (followerId == followeeId)\n      return;\n    if (users.containsKey(followerId) && users.containsKey(followeeId))\n      users.get(followerId).unfollow(followeeId);\n  }\n\n  private int time = 0;\n  private Map<Integer, User> users = new HashMap<>(); // {userId: User}\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Twitter:\n  def __init__(self):\n    self.timer = itertools.count(step=-1)\n    self.tweets = collections.defaultdict(deque)\n    self.followees = collections.defaultdict(set)\n\n  def postTweet(self, userId: int, tweetId: int) -> None:\n    self.tweets[userId].appendleft((next(self.timer), tweetId))\n    if len(self.tweets[userId]) > 10:\n      self.tweets[userId].pop()\n\n  def getNewsFeed(self, userId: int) -> List[int]:\n    tweets = list(heapq.merge(\n        *(self.tweets[followee] for followee in self.followees[userId] | {userId})))\n    return [tweetId for _, tweetId in tweets[:10]]\n\n  def follow(self, followerId: int, followeeId: int) -> None:\n    self.followees[followerId].add(followeeId)\n\n  def unfollow(self, followerId: int, followeeId: int) -> None:\n    self.followees[followerId].discard(followeeId)\n",
                "lang_text": "py"
            }
        }
    }
}