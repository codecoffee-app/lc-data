{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2453",
            "title": "Destroy Sequential Targets",
            "titleSlug": "destroy-sequential-targets",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of positive integers, representing targets on a number line. You are also given an integer <code>space</code>.</p>\n\n<p>You have a machine which can destroy targets. <strong>Seeding</strong> the machine with some <code>nums[i]</code> allows it to destroy all targets with values that can be represented as <code>nums[i] + c * space</code>, where <code>c</code> is any non-negative integer. You want to destroy the <strong>maximum</strong> number of targets in <code>nums</code>.</p>\n\n<p>Return<em> the <strong>minimum value</strong> of </em><code>nums[i]</code><em> you can seed the machine with to destroy the maximum number of targets.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,7,8,1,1,5], space = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> If we seed the machine with nums[3], then we destroy all targets equal to 1,3,5,7,9,... \nIn this case, we would destroy 5 total targets (all except for nums[2]). \nIt is impossible to destroy more than 5 targets, so we return nums[3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,2,4,6], space = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Seeding the machine with nums[0], or nums[3] destroys 3 targets. \nIt is not possible to destroy more than 3 targets.\nSince nums[0] is the minimal integer that can destroy 3 targets, we return 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,2,5], space = 100\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Whatever initial seed we select, we can only destroy 1 target. The minimal seed is nums[1].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= space &lt;=&nbsp;10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 537,
            "dislikes": 16,
            "similarQuestions": "[{\"title\": \"Arithmetic Slices II - Subsequence\", \"titleSlug\": \"arithmetic-slices-ii-subsequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Pairs of Songs With Total Durations Divisible by 60\", \"titleSlug\": \"pairs-of-songs-with-total-durations-divisible-by-60\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Arithmetic Subsequence\", \"titleSlug\": \"longest-arithmetic-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Arithmetic Subsequence of Given Difference\", \"titleSlug\": \"longest-arithmetic-subsequence-of-given-difference\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.7K\", \"totalSubmission\": \"40.5K\", \"totalAcceptedRaw\": 15686, \"totalSubmissionRaw\": 40489, \"acRate\": \"38.7%\"}",
            "hints": [
                "Keep track of nums[i] modulo k.",
                "Iterate over nums in sorted order."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` of positive integers representing targets on a number line, and an integer `space`, you have a machine that can destroy targets. Seeding the machine with `nums[i]` destroys all targets with values `nums[i] + c * space`, where `c` is any non-negative integer.  Find the minimum value of `nums[i]` that can be used to seed the machine to destroy the maximum number of targets.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^9",
                    "1 <= space <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [3,7,8,1,1,5], space = 2",
                        "output": "1",
                        "explanation": "Seeding the machine with 1 (nums[3]) destroys targets 1, 3, 5, 7, 9, etc. This destroys 5 targets (all except 8). It's impossible to destroy more than 5 targets. Therefore, the minimum seed value is 1."
                    },
                    {
                        "input": "nums = [1,3,5,2,4,6], space = 2",
                        "output": "1",
                        "explanation": "Seeding with 1 (nums[0]) or 2 (nums[3]) destroys 3 targets. It's not possible to destroy more than 3 targets. Since 1 is the minimal integer that can destroy 3 targets, we return 1."
                    },
                    {
                        "input": "nums = [6,2,5], space = 100",
                        "output": "2",
                        "explanation": "Regardless of the initial seed, only 1 target can be destroyed. The minimal seed value is 2 (nums[1])."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "arithmetic-slices-ii-subsequence",
                "title": "Arithmetic Slices II - Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "pairs-of-songs-with-total-durations-divisible-by-60",
                "title": "Pairs of Songs With Total Durations Divisible by 60",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-arithmetic-subsequence",
                "title": "Longest Arithmetic Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-arithmetic-subsequence-of-given-difference",
                "title": "Longest Arithmetic Subsequence of Given Difference",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Keep track of nums[i] modulo k.",
            "Iterate over nums in sorted order."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int destroyTargets(vector<int>& nums, int space) {\n    int ans = INT_MAX;\n    int maxCount = 0;\n    unordered_map<int, int> count;\n\n    for (const int num : nums)\n      maxCount = max(maxCount, ++count[num % space]);\n\n    for (const int num : nums)\n      if (count[num % space] == maxCount)\n        ans = min(ans, num);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int destroyTargets(int[] nums, int space) {\n    int ans = Integer.MAX_VALUE;\n    int maxCount = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (final int num : nums)\n      maxCount = Math.max(maxCount, count.merge(num % space, 1, Integer::sum));\n\n    for (final int num : nums)\n      if (count.get(num % space) == maxCount)\n        ans = Math.min(ans, num);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def destroyTargets(self, nums: List[int], space: int) -> int:\n    count = collections.Counter([num % space for num in nums])\n    maxCount = max(count.values())\n    return min(num for num in nums if count[num % space] == maxCount)\n",
                "lang_text": "py"
            }
        }
    }
}