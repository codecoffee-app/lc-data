{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1559",
            "title": "Detect Cycles in 2D Grid",
            "titleSlug": "detect-cycles-in-2d-grid",
            "content": "<p>Given a 2D array of characters <code>grid</code> of size <code>m x n</code>, you need to find if there exists any cycle consisting of the <strong>same value</strong> in <code>grid</code>.</p>\n\n<p>A cycle is a path of <strong>length 4 or more</strong> in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the <strong>same value</strong> of the current cell.</p>\n\n<p>Also, you cannot move to the cell that you visited in your last move. For example, the cycle <code>(1, 1) -&gt; (1, 2) -&gt; (1, 1)</code> is invalid because from <code>(1, 2)</code> we visited <code>(1, 1)</code> which was the last visited cell.</p>\n\n<p>Return <code>true</code> if any cycle of the same value exists in <code>grid</code>, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/15/1.png\" style=\"width: 231px; height: 152px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;]]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>There are two valid cycles shown in different colors in the image below:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/15/11.png\" style=\"width: 225px; height: 163px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/15/22.png\" style=\"width: 236px; height: 154px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[&quot;c&quot;,&quot;c&quot;,&quot;c&quot;,&quot;a&quot;],[&quot;c&quot;,&quot;d&quot;,&quot;c&quot;,&quot;c&quot;],[&quot;c&quot;,&quot;c&quot;,&quot;e&quot;,&quot;c&quot;],[&quot;f&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>There is only one valid cycle highlighted in the image below:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/15/2.png\" style=\"width: 229px; height: 157px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/15/3.png\" style=\"width: 183px; height: 120px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;z&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;b&quot;,&quot;a&quot;]]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 500</code></li>\n\t<li><code>grid</code> consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1113,
            "dislikes": 27,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"38.6K\", \"totalSubmission\": \"79.4K\", \"totalAcceptedRaw\": 38566, \"totalSubmissionRaw\": 79419, \"acRate\": \"48.6%\"}",
            "hints": [
                "Keep track of the parent (previous position) to avoid considering an invalid path.",
                "Use DFS or BFS and keep track of visited cells to see if there is a cycle."
            ],
            "rephrased": {
                "body": "Given a 2D array of characters `grid` of size `m x n`, determine if there exists any cycle consisting of the *same value* in `grid`. A cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, movement is allowed to adjacent cells (up, down, left, or right) only if the adjacent cell has the same value as the current cell.  It's invalid to move to the cell that was visited in the last move.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 500",
                    "grid consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "[[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]",
                        "output": "true",
                        "explanation": "There exists a cycle where the path starts and ends at the same cell using only the character 'a'.  Similarly, another cycle exists using only the character 'b'."
                    },
                    {
                        "input": "[[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]",
                        "output": "true",
                        "explanation": "There exists a cycle where the path starts and ends at the same cell using only the character 'c'."
                    },
                    {
                        "input": "[[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]",
                        "output": "false",
                        "explanation": "There are no cycles of length 4 or more consisting of the same value."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Keep track of the parent (previous position) to avoid considering an invalid path.",
            "Use DFS or BFS and keep track of visited cells to see if there is a cycle."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool containsCycle(vector<vector<char>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    vector<vector<bool>> seen(m, vector<bool>(n));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        if (seen[i][j])\n          continue;\n        if (dfs(grid, i, j, -1, -1, grid[i][j], seen))\n          return true;\n      }\n\n    return false;\n  }\n\n private:\n  const vector<int> dirs{0, 1, 0, -1, 0};\n\n  bool dfs(const vector<vector<char>>& grid, int i, int j, int prevI, int prevJ,\n           char c, vector<vector<bool>>& seen) {\n    seen[i][j] = true;\n\n    for (int k = 0; k < 4; ++k) {\n      const int x = i + dirs[k];\n      const int y = j + dirs[k + 1];\n      if (x < 0 || x == grid.size() || y < 0 || y == grid[0].size())\n        continue;\n      if (x == prevI && y == prevJ)\n        continue;\n      if (grid[x][y] != c)\n        continue;\n      if (seen[x][y])\n        return true;\n      if (dfs(grid, x, y, i, j, c, seen))\n        return true;\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean containsCycle(char[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    boolean[][] seen = new boolean[m][n];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        if (seen[i][j])\n          continue;\n        if (dfs(grid, i, j, -1, -1, grid[i][j], seen))\n          return true;\n      }\n\n    return false;\n  }\n\n  private static final int[] dirs = {0, 1, 0, -1, 0};\n\n  private boolean dfs(char[][] grid, int i, int j, int prevI, int prevJ, char c, boolean[][] seen) {\n    seen[i][j] = true;\n\n    for (int k = 0; k < 4; ++k) {\n      final int x = i + dirs[k];\n      final int y = j + dirs[k + 1];\n      if (x < 0 || x == grid.length || y < 0 || y == grid[0].length)\n        continue;\n      if (x == prevI && y == prevJ)\n        continue;\n      if (grid[x][y] != c)\n        continue;\n      if (seen[x][y])\n        return true;\n      if (dfs(grid, x, y, i, j, c, seen))\n        return true;\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}