{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2013",
            "title": "Detect Squares",
            "titleSlug": "detect-squares",
            "content": "<p>You are given a stream of points on the X-Y plane. Design an algorithm that:</p>\n\n<ul>\n\t<li><strong>Adds</strong> new points from the stream into a data structure. <strong>Duplicate</strong> points are allowed and should be treated as different points.</li>\n\t<li>Given a query point, <strong>counts</strong> the number of ways to choose three points from the data structure such that the three points and the query point form an <strong>axis-aligned square</strong> with <strong>positive area</strong>.</li>\n</ul>\n\n<p>An <strong>axis-aligned square</strong> is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.</p>\n\n<p>Implement the <code>DetectSquares</code> class:</p>\n\n<ul>\n\t<li><code>DetectSquares()</code> Initializes the object with an empty data structure.</li>\n\t<li><code>void add(int[] point)</code> Adds a new point <code>point = [x, y]</code> to the data structure.</li>\n\t<li><code>int count(int[] point)</code> Counts the number of ways to form <strong>axis-aligned squares</strong> with point <code>point = [x, y]</code> as described above.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/01/image.png\" style=\"width: 869px; height: 504px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;DetectSquares&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;count&quot;, &quot;count&quot;, &quot;add&quot;, &quot;count&quot;]\n[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]\n<strong>Output</strong>\n[null, null, null, null, 1, 0, null, 2]\n\n<strong>Explanation</strong>\nDetectSquares detectSquares = new DetectSquares();\ndetectSquares.add([3, 10]);\ndetectSquares.add([11, 2]);\ndetectSquares.add([3, 2]);\ndetectSquares.count([11, 10]); // return 1. You can choose:\n                               //   - The first, second, and third points\ndetectSquares.count([14, 8]);  // return 0. The query point cannot form a square with any points in the data structure.\ndetectSquares.add([11, 2]);    // Adding duplicate points is allowed.\ndetectSquares.count([11, 10]); // return 2. You can choose:\n                               //   - The first, second, and third points\n                               //   - The first, third, and fourth points\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>point.length == 2</code></li>\n\t<li><code>0 &lt;= x, y &lt;= 1000</code></li>\n\t<li>At most <code>3000</code> calls <strong>in total</strong> will be made to <code>add</code> and <code>count</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 785,
            "dislikes": 209,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"56.3K\", \"totalSubmission\": \"111.4K\", \"totalAcceptedRaw\": 56316, \"totalSubmissionRaw\": 111361, \"acRate\": \"50.6%\"}",
            "hints": [
                "Maintain the frequency of all the points in a hash map.",
                "Traverse the hash map and if any point has the same y-coordinate as the query point, consider this point and the query point to form one of the horizontal lines of the square."
            ],
            "rephrased": {
                "body": "You are given a stream of points on the X-Y plane. Design a data structure and algorithm that:\n\n*   **Adds** new points from the stream. Duplicate points are allowed and treated as distinct.\n*   Given a query point, **counts** the number of ways to choose three points from the data structure such that these three points, along with the query point, form an axis-aligned square with a positive area.  An axis-aligned square has edges of equal length parallel or perpendicular to the x and y axes.\n\nImplement the `DetectSquares` class:\n\n*   `DetectSquares()`: Initializes the object with an empty data structure.\n*   `void add(int[] point)`: Adds a new point `point = [x, y]` to the data structure.\n*   `int count(int[] point)`: Counts the number of axis-aligned squares that can be formed using the added points and the query point `point = [x, y]`.",
                "constraints": [
                    "point.length == 2",
                    "0 <= x, y <= 1000",
                    "At most 3000 calls in total will be made to add and count."
                ],
                "testcases": [
                    {
                        "input": "[\"DetectSquares\", \"add\", \"add\", \"add\", \"count\", \"count\", \"add\", \"count\"]\n[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]",
                        "output": "[null, null, null, null, 1, 0, null, 2]",
                        "explanation": "First point (3,10), Second point (11,2), Third Point (3,2).\nFor query (11,10), only one square can be formed. The first, second, and third points form a square with the query point.\nFor query (14,8), no squares can be formed.\nAfter adding (11,2) again, for query (11,10), two squares can be formed. One using the first, second, and third points, and another using the first, third and fourth points."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Maintain the frequency of all the points in a hash map.",
            "Traverse the hash map and if any point has the same y-coordinate as the query point, consider this point and the query point to form one of the horizontal lines of the square."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ]
    }
}