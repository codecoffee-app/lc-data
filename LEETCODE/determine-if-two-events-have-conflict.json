{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2446",
            "title": "Determine if Two Events Have Conflict",
            "titleSlug": "determine-if-two-events-have-conflict",
            "content": "<p>You are given two arrays of strings that represent two inclusive events that happened <strong>on the same day</strong>, <code>event1</code> and <code>event2</code>, where:</p>\n\n<ul>\n\t<li><code>event1 = [startTime<sub>1</sub>, endTime<sub>1</sub>]</code> and</li>\n\t<li><code>event2 = [startTime<sub>2</sub>, endTime<sub>2</sub>]</code>.</li>\n</ul>\n\n<p>Event times are valid 24 hours format in the form of <code>HH:MM</code>.</p>\n\n<p>A <strong>conflict</strong> happens when two events have some non-empty intersection (i.e., some moment is common to both events).</p>\n\n<p>Return <code>true</code><em> if there is a conflict between two events. Otherwise, return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> event1 = [&quot;01:15&quot;,&quot;02:00&quot;], event2 = [&quot;02:00&quot;,&quot;03:00&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The two events intersect at time 2:00.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> event1 = [&quot;01:00&quot;,&quot;02:00&quot;], event2 = [&quot;01:20&quot;,&quot;03:00&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The two events intersect starting from 01:20 to 02:00.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> event1 = [&quot;10:00&quot;,&quot;11:00&quot;], event2 = [&quot;14:00&quot;,&quot;15:00&quot;]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The two events do not intersect.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>evnet1.length == event2.length == 2.</code></li>\n\t<li><code>event1[i].length == event2[i].length == 5</code></li>\n\t<li><code>startTime<sub>1</sub> &lt;= endTime<sub>1</sub></code></li>\n\t<li><code>startTime<sub>2</sub> &lt;= endTime<sub>2</sub></code></li>\n\t<li>All the event times follow the <code>HH:MM</code> format.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 412,
            "dislikes": 59,
            "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Non-overlapping Intervals\", \"titleSlug\": \"non-overlapping-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"My Calendar I\", \"titleSlug\": \"my-calendar-i\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"38K\", \"totalSubmission\": \"75.5K\", \"totalAcceptedRaw\": 38047, \"totalSubmissionRaw\": 75505, \"acRate\": \"50.4%\"}",
            "hints": [
                "Parse time format to some integer interval first",
                "How would you determine if two intervals overlap?"
            ],
            "rephrased": {
                "body": "Given two arrays of strings, `event1` and `event2`, representing two inclusive events on the same day. `event1` is defined as `[startTime1, endTime1]` and `event2` as `[startTime2, endTime2]`.  Each event time is in 24-hour format (HH:MM). Determine if the two events have a conflict, meaning they share a common time interval. Return `true` if a conflict exists, and `false` otherwise.",
                "constraints": [
                    "event1.length == event2.length == 2",
                    "event1[i].length == event2[i].length == 5",
                    "startTime1 <= endTime1",
                    "startTime2 <= endTime2",
                    "All event times are in HH:MM format."
                ],
                "testcases": [
                    {
                        "input": "event1 = [\"01:15\",\"02:00\"], event2 = [\"02:00\",\"03:00\"]",
                        "output": "true",
                        "explanation": "The two events intersect at time 02:00."
                    },
                    {
                        "input": "event1 = [\"01:00\",\"02:00\"], event2 = [\"01:20\",\"03:00\"]",
                        "output": "true",
                        "explanation": "The two events intersect from 01:20 to 02:00."
                    },
                    {
                        "input": "event1 = [\"10:00\",\"11:00\"], event2 = [\"14:00\",\"15:00\"]",
                        "output": "false",
                        "explanation": "The two events do not intersect."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "merge-intervals",
                "title": "Merge Intervals",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "non-overlapping-intervals",
                "title": "Non-overlapping Intervals",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "my-calendar-i",
                "title": "My Calendar I",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Parse time format to some integer interval first",
            "How would you determine if two intervals overlap?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool haveConflict(vector<string>& event1, vector<string>& event2) {\n    return event1[0] <= event2[1] && event2[0] <= event1[1];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean haveConflict(String[] event1, String[] event2) {\n    return event1[0].compareTo(event2[1]) <= 0 && event2[0].compareTo(event1[1]) <= 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "",
                "lang_text": "py"
            }
        }
    }
}