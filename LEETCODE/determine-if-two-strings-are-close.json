{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1657",
            "title": "Determine if Two Strings Are Close",
            "titleSlug": "determine-if-two-strings-are-close",
            "content": "<p>Two strings are considered <strong>close</strong> if you can attain one from the other using the following operations:</p>\n\n<ul>\n\t<li>Operation 1: Swap any two <strong>existing</strong> characters.\n\n\t<ul>\n\t\t<li>For example, <code>a<u>b</u>cd<u>e</u> -&gt; a<u>e</u>cd<u>b</u></code></li>\n\t</ul>\n\t</li>\n\t<li>Operation 2: Transform <strong>every</strong> occurrence of one <strong>existing</strong> character into another <strong>existing</strong> character, and do the same with the other character.\n\t<ul>\n\t\t<li>For example, <code><u>aa</u>c<u>abb</u> -&gt; <u>bb</u>c<u>baa</u></code> (all <code>a</code>&#39;s turn into <code>b</code>&#39;s, and all <code>b</code>&#39;s turn into <code>a</code>&#39;s)</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>You can use the operations on either string as many times as necessary.</p>\n\n<p>Given two strings, <code>word1</code> and <code>word2</code>, return <code>true</code><em> if </em><code>word1</code><em> and </em><code>word2</code><em> are <strong>close</strong>, and </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;abc&quot;, word2 = &quot;bca&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can attain word2 from word1 in 2 operations.\nApply Operation 1: &quot;a<u>bc</u>&quot; -&gt; &quot;a<u>cb</u>&quot;\nApply Operation 1: &quot;<u>a</u>c<u>b</u>&quot; -&gt; &quot;<u>b</u>c<u>a</u>&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;a&quot;, word2 = &quot;aa&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>It is impossible to attain word2 from word1, or vice versa, in any number of operations.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;cabbba&quot;, word2 = &quot;abbccc&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can attain word2 from word1 in 3 operations.\nApply Operation 1: &quot;ca<u>b</u>bb<u>a</u>&quot; -&gt; &quot;ca<u>a</u>bb<u>b</u>&quot;\n<code>Apply Operation 2: &quot;</code><u>c</u>aa<u>bbb</u>&quot; -&gt; &quot;<u>b</u>aa<u>ccc</u>&quot;\nApply Operation 2: &quot;<u>baa</u>ccc&quot; -&gt; &quot;<u>abb</u>ccc&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word1</code> and <code>word2</code> contain only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2792,
            "dislikes": 167,
            "similarQuestions": "[{\"title\": \"Buddy Strings\", \"titleSlug\": \"buddy-strings\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Swaps to Make Strings Equal\", \"titleSlug\": \"minimum-swaps-to-make-strings-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Steps to Make Two Strings Anagram\", \"titleSlug\": \"minimum-number-of-steps-to-make-two-strings-anagram\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"172.4K\", \"totalSubmission\": \"322.4K\", \"totalAcceptedRaw\": 172369, \"totalSubmissionRaw\": 322436, \"acRate\": \"53.5%\"}",
            "hints": [
                "Operation 1 allows you to freely reorder the string.",
                "Operation 2 allows you to freely reassign the letters' frequencies."
            ],
            "rephrased": {
                "body": "Two strings, `word1` and `word2`, are considered 'close' if `word2` can be obtained from `word1` using the following operations any number of times:\n\n1. **Swap:** Swap any two existing characters within a string.\n2. **Transform:** Transform every occurrence of one existing character into another existing character, and vice versa. This operation affects all instances of the two characters involved.\n\nGiven `word1` and `word2`, determine if they are close strings.",
                "constraints": [
                    "1 <= word1.length, word2.length <= 10^5",
                    "word1 and word2 contain only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "word1 = \"abc\", word2 = \"bca\"",
                        "output": "true",
                        "explanation": "The transformation can be achieved in two swap operations:\n 1. \"abc\" -> \"acb\"\n 2. \"acb\" -> \"bca\""
                    },
                    {
                        "input": "word1 = \"a\", word2 = \"aa\"",
                        "output": "false",
                        "explanation": "It's impossible to make the strings close, as they don't have the same length and different character sets."
                    },
                    {
                        "input": "word1 = \"cabbba\", word2 = \"abbccc\"",
                        "output": "true",
                        "explanation": "The transformation can be achieved through the following steps:\n1. Swap: \"cabbba\" -> \"caabbb\"\n2. Transform: \"caabbb\" -> \"baaccc\" (c becomes b, b becomes c)\n3. Transform: \"baaccc\" -> \"abbccc\" (b becomes a, a becomes b)"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "buddy-strings",
                "title": "Buddy Strings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-swaps-to-make-strings-equal",
                "title": "Minimum Swaps to Make Strings Equal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-number-of-steps-to-make-two-strings-anagram",
                "title": "Minimum Number of Steps to Make Two Strings Anagram",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Operation 1 allows you to freely reorder the string.",
            "Operation 2 allows you to freely reassign the letters' frequencies."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool closeStrings(string word1, string word2) {\n    if (word1.length() != word2.length())\n      return false;\n\n    unordered_map<char, int> count1;\n    unordered_map<char, int> count2;\n    string s1;           // Unique chars in word1\n    string s2;           // Unique chars in word2\n    vector<int> freqs1;  // Freqs of unique chars in word1\n    vector<int> freqs2;  // Freqs of unique chars in word2\n\n    for (const char c : word1)\n      ++count1[c];\n\n    for (const char c : word2)\n      ++count2[c];\n\n    for (const auto& [c, freq] : count1) {\n      s1 += c;\n      freqs1.push_back(freq);\n    }\n\n    for (const auto& [c, freq] : count2) {\n      s2 += c;\n      freqs2.push_back(freq);\n    }\n\n    std::ranges::sort(s1);\n    std::ranges::sort(s2);\n\n    if (s1 != s2)\n      return false;\n\n    std::ranges::sort(freqs1);\n    std::ranges::sort(freqs2);\n    return freqs1 == freqs2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean closeStrings(String word1, String word2) {\n    if (word1.length() != word2.length())\n      return false;\n\n    Map<Character, Integer> count1 = new HashMap<>();\n    Map<Character, Integer> count2 = new HashMap<>();\n\n    for (final char c : word1.toCharArray())\n      count1.merge(c, 1, Integer::sum);\n\n    for (final char c : word2.toCharArray())\n      count2.merge(c, 1, Integer::sum);\n\n    if (!count1.keySet().equals(count2.keySet()))\n      return false;\n\n    List<Integer> freqs1 = new ArrayList<>(count1.values());\n    List<Integer> freqs2 = new ArrayList<>(count2.values());\n\n    Collections.sort(freqs1);\n    Collections.sort(freqs2);\n    return freqs1.equals(freqs2);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def closeStrings(self, word1: str, word2: str) -> bool:\n    if len(word1) != len(word2):\n      return False\n\n    count1 = collections.Counter(word1)\n    count2 = collections.Counter(word2)\n    if count1.keys() != count2.keys():\n      return False\n\n    return sorted(count1.values()) == sorted(count2.values())\n",
                "lang_text": "py"
            }
        }
    }
}