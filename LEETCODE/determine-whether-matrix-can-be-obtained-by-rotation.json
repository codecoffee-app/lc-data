{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1886",
            "title": "Determine Whether Matrix Can Be Obtained By Rotation",
            "titleSlug": "determine-whether-matrix-can-be-obtained-by-rotation",
            "content": "<p>Given two <code>n x n</code> binary matrices <code>mat</code> and <code>target</code>, return <code>true</code><em> if it is possible to make </em><code>mat</code><em> equal to </em><code>target</code><em> by <strong>rotating</strong> </em><code>mat</code><em> in <strong>90-degree increments</strong>, or </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/20/grid3.png\" style=\"width: 301px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> mat = [[0,1],[1,0]], target = [[1,0],[0,1]]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>We can rotate mat 90 degrees clockwise to make mat equal target.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/20/grid4.png\" style=\"width: 301px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> mat = [[0,1],[1,1]], target = [[1,0],[0,1]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to make mat equal to target by rotating mat.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/26/grid4.png\" style=\"width: 661px; height: 184px;\" />\n<pre>\n<strong>Input:</strong> mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>We can rotate mat 90 degrees clockwise two times to make mat equal target.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == mat.length == target.length</code></li>\n\t<li><code>n == mat[i].length == target[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10</code></li>\n\t<li><code>mat[i][j]</code> and <code>target[i][j]</code> are either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1379,
            "dislikes": 107,
            "similarQuestions": "[{\"title\": \"Rotate Image\", \"titleSlug\": \"rotate-image\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"62.6K\", \"totalSubmission\": \"110.9K\", \"totalAcceptedRaw\": 62624, \"totalSubmissionRaw\": 110927, \"acRate\": \"56.5%\"}",
            "hints": [
                "What is the maximum number of rotations you have to check?",
                "Is there a formula you can use to rotate a matrix 90 degrees?"
            ],
            "rephrased": {
                "body": "Given two n x n binary matrices, `mat` and `target`, determine if `mat` can be transformed into `target` by rotating it by 90-degree increments. Return `true` if possible, otherwise return `false`.",
                "constraints": [
                    "n == mat.length == target.length",
                    "n == mat[i].length == target[i].length",
                    "1 <= n <= 10",
                    "mat[i][j] and target[i][j] are either 0 or 1."
                ],
                "testcases": [
                    {
                        "input": "mat = [[0,1],[1,0]], target = [[1,0],[0,1]]",
                        "output": "true",
                        "explanation": "The matrix `mat` can be rotated 90 degrees clockwise to become equal to `target`."
                    },
                    {
                        "input": "mat = [[0,1],[1,1]], target = [[1,0],[0,1]]",
                        "output": "false",
                        "explanation": "It is impossible to transform `mat` into `target` through rotations."
                    },
                    {
                        "input": "mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]",
                        "output": "true",
                        "explanation": "Rotating `mat` 90 degrees clockwise twice results in a matrix equal to `target`."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "rotate-image",
                "title": "Rotate Image",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What is the maximum number of rotations you have to check?",
            "Is there a formula you can use to rotate a matrix 90 degrees?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool findRotation(vector<vector<int>>& mat, vector<vector<int>>& target) {\n    for (int i = 0; i < 4; ++i) {\n      if (mat == target)\n        return true;\n      rotate(mat);\n    }\n    return false;\n  }\n\n private:\n  void rotate(vector<vector<int>>& M) {\n    reverse(M.begin(), M.end());\n    for (int i = 0; i < M.size(); ++i)\n      for (int j = i + 1; j < M.size(); ++j)\n        swap(M[i][j], M[j][i]);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean findRotation(int[][] mat, int[][] target) {\n    for (int i = 0; i < 4; ++i) {\n      if (Arrays.deepEquals(mat, target))\n        return true;\n      rotate(mat);\n    }\n    return false;\n  }\n\n  private void rotate(int[][] M) {\n    for (int i = 0, j = M.length - 1; i < j; ++i, --j) {\n      int[] temp = M[i];\n      M[i] = M[j];\n      M[j] = temp;\n    }\n    for (int i = 0; i < M.length; ++i)\n      for (int j = i + 1; j < M.length; ++j) {\n        final int temp = M[i][j];\n        M[i][j] = M[j][i];\n        M[j][i] = temp;\n      }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findRotation(self, mat: List[List[int]], target: List[List[int]]) -> bool:\n    for _ in range(4):\n      if mat == target:\n        return True\n      mat = [list(x) for x in zip(*mat[::-1])]\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}