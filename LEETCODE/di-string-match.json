{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "942",
            "title": "DI String Match",
            "titleSlug": "di-string-match",
            "content": "<p>A permutation <code>perm</code> of <code>n + 1</code> integers of all the integers in the range <code>[0, n]</code> can be represented as a string <code>s</code> of length <code>n</code> where:</p>\n\n<ul>\n\t<li><code>s[i] == &#39;I&#39;</code> if <code>perm[i] &lt; perm[i + 1]</code>, and</li>\n\t<li><code>s[i] == &#39;D&#39;</code> if <code>perm[i] &gt; perm[i + 1]</code>.</li>\n</ul>\n\n<p>Given a string <code>s</code>, reconstruct the permutation <code>perm</code> and return it. If there are multiple valid permutations perm, return <strong>any of them</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"IDID\"\n<strong>Output:</strong> [0,4,1,3,2]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"III\"\n<strong>Output:</strong> [0,1,2,3]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \"DDI\"\n<strong>Output:</strong> [3,2,0,1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;I&#39;</code> or <code>&#39;D&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2396,
            "dislikes": 963,
            "similarQuestions": "[{\"title\": \"Construct Smallest Number From DI String\", \"titleSlug\": \"construct-smallest-number-from-di-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"146K\", \"totalSubmission\": \"186.8K\", \"totalAcceptedRaw\": 146047, \"totalSubmissionRaw\": 186824, \"acRate\": \"78.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` representing a permutation pattern, reconstruct a valid permutation `perm` of integers from 0 to n, where n is the length of `s`. The string `s` indicates the relationship between consecutive elements in `perm`:\n\n- If `s[i] == 'I'`, then `perm[i] < perm[i + 1]` (Increasing).\n- If `s[i] == 'D'`, then `perm[i] > perm[i + 1]` (Decreasing).\n\nReturn any valid permutation `perm` that satisfies the given pattern `s`.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s[i] is either 'I' or 'D'."
                ],
                "testcases": [
                    {
                        "input": "IDID",
                        "output": "[0,4,1,3,2]",
                        "explanation": null
                    },
                    {
                        "input": "III",
                        "output": "[0,1,2,3]",
                        "explanation": null
                    },
                    {
                        "input": "DDI",
                        "output": "[3,2,0,1]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "construct-smallest-number-from-di-string",
                "title": "Construct Smallest Number From DI String",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> diStringMatch(string s) {\n    vector<int> ans;\n    int min = 0;\n    int max = s.length();\n\n    for (const char c : s)\n      ans.push_back(c == 'I' ? min++ : max--);\n    ans.push_back(min);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] diStringMatch(String s) {\n    final int n = s.length();\n    int[] ans = new int[n + 1];\n    int min = 0;\n    int max = n;\n\n    for (int i = 0; i < n; ++i)\n      ans[i] = s.charAt(i) == 'I' ? min++ : max--;\n    ans[n] = min;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def diStringMatch(self, s: str) -> List[int]:\n    ans = []\n    mini = 0\n    maxi = len(s)\n\n    for c in s:\n      if c == 'I':\n        ans.append(mini)\n        mini += 1\n      else:\n        ans.append(maxi)\n        maxi -= 1\n\n    return ans + [mini]\n",
                "lang_text": "py"
            }
        }
    }
}