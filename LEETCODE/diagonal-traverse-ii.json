{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1424",
            "title": "Diagonal Traverse II",
            "titleSlug": "diagonal-traverse-ii",
            "content": "<p>Given a 2D integer array <code>nums</code>, return <em>all elements of </em><code>nums</code><em> in diagonal order as shown in the below images</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/04/08/sample_1_1784.png\" style=\"width: 158px; height: 143px;\" />\n<pre>\n<strong>Input:</strong> nums = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [1,4,2,7,5,3,8,6,9]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/04/08/sample_2_1784.png\" style=\"width: 230px; height: 177px;\" />\n<pre>\n<strong>Input:</strong> nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]\n<strong>Output:</strong> [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i].length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= sum(nums[i].length) &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2077,
            "dislikes": 149,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"121.6K\", \"totalSubmission\": \"215.2K\", \"totalAcceptedRaw\": 121640, \"totalSubmissionRaw\": 215172, \"acRate\": \"56.5%\"}",
            "hints": [
                "Notice that numbers with equal sums of row and column indexes belong to the same diagonal.",
                "Store them in tuples (sum, row, val), sort them, and then regroup the answer."
            ],
            "rephrased": {
                "body": "Given a 2D integer array `nums`, return all elements of `nums` in diagonal order. The diagonal order traversal starts from the top-left element and moves diagonally downwards and to the right, then changes direction and moves diagonally upwards and to the left, and so on, until all elements are visited.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i].length <= 10^5",
                    "1 <= sum(nums[i].length) <= 10^5",
                    "1 <= nums[i][j] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[[1,2,3],[4,5,6],[7,8,9]]",
                        "output": "[1,4,2,7,5,3,8,6,9]",
                        "explanation": null
                    },
                    {
                        "input": "[[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]",
                        "output": "[1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Notice that numbers with equal sums of row and column indexes belong to the same diagonal.",
            "Store them in tuples (sum, row, val), sort them, and then regroup the answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findDiagonalOrder(vector<vector<int>>& nums) {\n    vector<int> ans;\n    unordered_map<int, vector<int>> keyToNums;  // Key = row + col\n    int maxKey = 0;\n\n    for (int i = 0; i < nums.size(); ++i)\n      for (int j = 0; j < nums[i].size(); ++j) {\n        const int key = i + j;\n        keyToNums[key].push_back(nums[i][j]);\n        maxKey = max(maxKey, key);\n      }\n\n    for (int i = 0; i <= maxKey; ++i)\n      for (auto it = keyToNums[i].rbegin(); it != keyToNums[i].rend(); ++it)\n        ans.push_back(*it);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] findDiagonalOrder(List<List<Integer>> nums) {\n    List<Integer> ans = new ArrayList<>();\n    Map<Integer, List<Integer>> keyToNums = new HashMap<>(); // Key = row + col\n    int maxKey = 0;\n\n    for (int i = 0; i < nums.size(); ++i)\n      for (int j = 0; j < nums.get(i).size(); ++j) {\n        final int key = i + j;\n        keyToNums.putIfAbsent(key, new ArrayList<>());\n        keyToNums.get(key).add(nums.get(i).get(j));\n        maxKey = Math.max(key, maxKey);\n      }\n\n    for (int i = 0; i <= maxKey; ++i)\n      for (int j = keyToNums.get(i).size() - 1; j >= 0; --j)\n        ans.add(keyToNums.get(i).get(j));\n\n    return ans.stream().mapToInt(Integer::intValue).toArray();\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}