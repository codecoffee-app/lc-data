{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "498",
            "title": "Diagonal Traverse",
            "titleSlug": "diagonal-traverse",
            "content": "<p>Given an <code>m x n</code> matrix <code>mat</code>, return <em>an array of all the elements of the array in a diagonal order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/10/diag1-grid.jpg\" style=\"width: 334px; height: 334px;\" />\n<pre>\n<strong>Input:</strong> mat = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [1,2,4,7,5,3,6,8,9]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[1,2],[3,4]]\n<strong>Output:</strong> [1,2,3,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= mat[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3309,
            "dislikes": 656,
            "similarQuestions": "[{\"title\": \"Decode the Slanted Ciphertext\", \"titleSlug\": \"decode-the-slanted-ciphertext\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"272.3K\", \"totalSubmission\": \"459.2K\", \"totalAcceptedRaw\": 272288, \"totalSubmissionRaw\": 459187, \"acRate\": \"59.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an m x n matrix `mat`, return an array of all the elements of the array in a diagonal order. The diagonal order traversal starts from the top-left corner and processes diagonals in an alternating up-right and down-left direction.",
                "constraints": [
                    "m == mat.length",
                    "n == mat[i].length",
                    "1 <= m, n <= 10^4",
                    "1 <= m * n <= 10^4",
                    "-10^5 <= mat[i][j] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[[1,2,3],[4,5,6],[7,8,9]]",
                        "output": "[1,2,4,7,5,3,6,8,9]",
                        "explanation": "The matrix is traversed diagonally.  First element 1, then diagonal containing 2 and 4, then diagonal containing 7, 5, and 3, then diagonal containing 6 and 8, then the last element 9."
                    },
                    {
                        "input": "[[1,2],[3,4]]",
                        "output": "[1,2,3,4]",
                        "explanation": "The matrix is traversed diagonally. First element 1, then diagonal containing 2 and 3, then last element 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "decode-the-slanted-ciphertext",
                "title": "Decode the Slanted Ciphertext",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {\n    const int m = matrix.size();\n    const int n = matrix[0].size();\n    vector<int> ans(m * n);\n    int d = 1;  // Left-bottom -> right-top\n    int row = 0;\n    int col = 0;\n\n    for (int i = 0; i < m * n; ++i) {\n      ans[i] = matrix[row][col];\n      row -= d;\n      col += d;\n      // Out of bound\n      if (row == m)\n        row = m - 1, col += 2, d = -d;\n      if (col == n)\n        col = n - 1, row += 2, d = -d;\n      if (row < 0)\n        row = 0, d = -d;\n      if (col < 0)\n        col = 0, d = -d;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] findDiagonalOrder(int[][] matrix) {\n    final int m = matrix.length;\n    final int n = matrix[0].length;\n    int[] ans = new int[m * n];\n    int d = 1; // Left-bottom -> right-top\n    int row = 0;\n    int col = 0;\n\n    for (int i = 0; i < m * n; ++i) {\n      ans[i] = matrix[row][col];\n      row -= d;\n      col += d;\n      // Out of bound\n      if (row == m) {\n        row = m - 1;\n        col += 2;\n        d = -d;\n      }\n      if (col == n) {\n        col = n - 1;\n        row += 2;\n        d = -d;\n      }\n      if (row < 0) {\n        row = 0;\n        d = -d;\n      }\n      if (col < 0) {\n        col = 0;\n        d = -d;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}