{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1223",
            "title": "Dice Roll Simulation",
            "titleSlug": "dice-roll-simulation",
            "content": "<p>A die simulator generates a random number from <code>1</code> to <code>6</code> for each roll. You introduced a constraint to the generator such that it cannot roll the number <code>i</code> more than <code>rollMax[i]</code> (<strong>1-indexed</strong>) consecutive times.</p>\n\n<p>Given an array of integers <code>rollMax</code> and an integer <code>n</code>, return <em>the number of distinct sequences that can be obtained with exact </em><code>n</code><em> rolls</em>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Two sequences are considered different if at least one element differs from each other.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, rollMax = [1,1,2,2,2,3]\n<strong>Output:</strong> 34\n<strong>Explanation:</strong> There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, rollMax = [1,1,1,1,1,1]\n<strong>Output:</strong> 30\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, rollMax = [1,1,1,2,2,3]\n<strong>Output:</strong> 181\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 5000</code></li>\n\t<li><code>rollMax.length == 6</code></li>\n\t<li><code>1 &lt;= rollMax[i] &lt;= 15</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 906,
            "dislikes": 188,
            "similarQuestions": "[{\"title\": \"Find Missing Observations\", \"titleSlug\": \"find-missing-observations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Distinct Roll Sequences\", \"titleSlug\": \"number-of-distinct-roll-sequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"28.1K\", \"totalSubmission\": \"57.4K\", \"totalAcceptedRaw\": 28068, \"totalSubmissionRaw\": 57359, \"acRate\": \"48.9%\"}",
            "hints": [
                "Think on Dynamic Programming.",
                "DP(pos, last) which means we are at the position pos having as last the last character seen."
            ],
            "rephrased": {
                "body": "A die simulator generates random numbers from 1 to 6. A constraint is imposed: the number `i` (1-indexed) cannot be rolled more than `rollMax[i]` consecutive times.\n\nGiven an array `rollMax` representing the maximum consecutive rolls for each number and an integer `n` representing the number of rolls, determine the number of distinct sequences obtainable with exactly `n` rolls, modulo 10<sup>9</sup> + 7.\n\nTwo sequences are distinct if at least one element differs.",
                "constraints": [
                    "1 <= n <= 5000",
                    "rollMax.length == 6",
                    "1 <= rollMax[i] <= 15"
                ],
                "testcases": [
                    {
                        "input": "n = 2, rollMax = [1,1,2,2,2,3]",
                        "output": "34",
                        "explanation": "With 2 rolls, and without constraints, there are 6 * 6 = 36 possible combinations. The constraint limits consecutive occurrences of 1 to 1 and 2 to 1. The sequences (1,1) and (2,2) are invalid. Therefore, the final result is 36 - 2 = 34."
                    },
                    {
                        "input": "n = 2, rollMax = [1,1,1,1,1,1]",
                        "output": "30",
                        "explanation": null
                    },
                    {
                        "input": "n = 3, rollMax = [1,1,1,2,2,3]",
                        "output": "181",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-missing-observations",
                "title": "Find Missing Observations",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-distinct-roll-sequences",
                "title": "Number of Distinct Roll Sequences",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think on Dynamic Programming.",
            "DP(pos, last) which means we are at the position pos having as last the last character seen."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n    kMaxRolls = 15\n    kMod = 1_000_000_007\n\n    dp = [[[0] * (kMaxRolls + 1) for j in range(6)] for i in range(n + 1)]\n\n    for num in range(6):\n      dp[1][num][1] = 1\n\n    for i in range(2, n + 1):\n      for currNum in range(6):\n        for prevNum in range(6):\n          for k in range(1, 15 + 1):\n            if prevNum != currNum:\n              dp[i][currNum][1] = (\n                  dp[i][currNum][1] + dp[i - 1][prevNum][k]) % kMod\n            elif k < rollMax[currNum]:\n              dp[i][currNum][k + 1] = dp[i - 1][currNum][k]\n\n    ans = 0\n\n    for num in range(6):\n      for k in range(1, 15 + 1):\n        ans += dp[n][num][k]\n\n    return ans % kMod\n",
                "lang_text": "py"
            }
        }
    }
}