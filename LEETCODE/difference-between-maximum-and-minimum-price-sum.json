{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2538",
            "title": "Difference Between Maximum and Minimum Price Sum",
            "titleSlug": "difference-between-maximum-and-minimum-price-sum",
            "content": "<p>There exists an undirected and initially unrooted tree with <code>n</code> nodes indexed from <code>0</code> to <code>n - 1</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>Each node has an associated price. You are given an integer array <code>price</code>, where <code>price[i]</code> is the price of the <code>i<sup>th</sup></code> node.</p>\n\n<p>The <strong>price sum</strong> of a given path is the sum of the prices of all nodes lying on that path.</p>\n\n<p>The tree can be rooted at any node <code>root</code> of your choice. The incurred <strong>cost</strong> after choosing <code>root</code> is the difference between the maximum and minimum <strong>price sum</strong> amongst all paths starting at <code>root</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> possible <strong>cost</strong></em> <em>amongst all possible root choices</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/01/example14.png\" style=\"width: 556px; height: 231px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[0,1],[1,2],[1,3],[3,4],[3,5]], price = [9,8,7,6,10,5]\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> The diagram above denotes the tree after rooting it at node 2. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum.\n- The first path contains nodes [2,1,3,4]: the prices are [7,8,6,10], and the sum of the prices is 31.\n- The second path contains the node [2] with the price [7].\nThe difference between the maximum and minimum price sum is 24. It can be proved that 24 is the maximum cost.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/11/24/p1_example2.png\" style=\"width: 352px; height: 184px;\" />\n<pre>\n<strong>Input:</strong> n = 3, edges = [[0,1],[1,2]], price = [1,1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The diagram above denotes the tree after rooting it at node 0. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum.\n- The first path contains nodes [0,1,2]: the prices are [1,1,1], and the sum of the prices is 3.\n- The second path contains node [0] with a price [1].\nThe difference between the maximum and minimum price sum is 2. It can be proved that 2 is the maximum cost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n\t<li><code>price.length == n</code></li>\n\t<li><code>1 &lt;= price[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 400,
            "dislikes": 15,
            "similarQuestions": "[{\"title\": \"Binary Tree Maximum Path Sum\", \"titleSlug\": \"binary-tree-maximum-path-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.7K\", \"totalSubmission\": \"20.7K\", \"totalAcceptedRaw\": 6683, \"totalSubmissionRaw\": 20680, \"acRate\": \"32.3%\"}",
            "hints": [
                "The minimum price sum is always the price of a rooted node.",
                "Let\u2019s root the tree at vertex 0 and find the answer from this perspective.",
                "In the optimal answer maximum price is the sum of the prices of nodes on the path from \u201cu\u201d to \u201cv\u201d where either \u201cu\u201d or \u201cv\u201d is the parent of the second one or neither is a parent of the second one.",
                "The first case is easy to find. For the second case, notice that in the optimal path, \u201cu\u201d and \u201cv\u201d are both leaves. Then we can use dynamic programming to find such a path.",
                "Let DP(v,1) denote \u201cthe maximum price sum from node v to leaf, where v is a parent of that leaf\u201d and let DP(v,0) denote \u201cthe maximum price sum from node v to leaf, where v is a parent of that leaf - price[leaf]\u201d. Then the answer is maximum of DP(u,0) + DP(v,1) + price[parent] where u, v are directly connected to vertex \u201cparent\u201d."
            ],
            "rephrased": {
                "body": "Given an undirected, initially unrooted tree with `n` nodes indexed from 0 to `n - 1`, find the maximum possible cost amongst all possible root choices. The tree is represented by a 2D integer array `edges` of length `n - 1`, where `edges[i] = [a_i, b_i]` indicates an edge between nodes `a_i` and `b_i`. Each node has an associated price, given by the integer array `price`, where `price[i]` is the price of the `i`-th node. The price sum of a path is the sum of prices of all nodes on the path.  The cost after choosing a `root` is the difference between the maximum and minimum price sum amongst all paths starting at that `root`.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "edges.length == n - 1",
                    "0 <= a_i, b_i <= n - 1",
                    "edges represents a valid tree.",
                    "price.length == n",
                    "1 <= price[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 6, edges = [[0,1],[1,2],[1,3],[3,4],[3,5]], price = [9,8,7,6,10,5]",
                        "output": "24",
                        "explanation": "When rooting the tree at node 2, one path with the maximum price sum is [2, 1, 3, 4] with prices [7, 8, 6, 10] and a sum of 31. One path with the minimum price sum is [2] with price [7]. The difference is 31 - 7 = 24. This is the maximum cost achievable among all possible root choices."
                    },
                    {
                        "input": "n = 3, edges = [[0,1],[1,2]], price = [1,1,1]",
                        "output": "2",
                        "explanation": "When rooting the tree at node 0, one path with the maximum price sum is [0, 1, 2] with prices [1, 1, 1] and a sum of 3. One path with the minimum price sum is [0] with price [1]. The difference is 3 - 1 = 2. This is the maximum cost achievable among all possible root choices."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "binary-tree-maximum-path-sum",
                "title": "Binary Tree Maximum Path Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The minimum price sum is always the price of a rooted node.",
            "Let\u2019s root the tree at vertex 0 and find the answer from this perspective.",
            "In the optimal answer maximum price is the sum of the prices of nodes on the path from \u201cu\u201d to \u201cv\u201d where either \u201cu\u201d or \u201cv\u201d is the parent of the second one or neither is a parent of the second one.",
            "The first case is easy to find. For the second case, notice that in the optimal path, \u201cu\u201d and \u201cv\u201d are both leaves. Then we can use dynamic programming to find such a path.",
            "Let DP(v,1) denote \u201cthe maximum price sum from node v to leaf, where v is a parent of that leaf\u201d and let DP(v,0) denote \u201cthe maximum price sum from node v to leaf, where v is a parent of that leaf - price[leaf]\u201d. Then the answer is maximum of DP(u,0) + DP(v,1) + price[parent] where u, v are directly connected to vertex \u201cparent\u201d."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maxOutput(int n, vector<vector<int>>& edges, vector<int>& price) {\n    int ans = 0;\n    vector<vector<int>> tree(n);\n    vector<int> maxSums(n);  // maxSums[i] := max sum of path rooted at i.\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      tree[u].push_back(v);\n      tree[v].push_back(u);\n    }\n\n    // Precalculate `maxSums`.\n    maxSum(tree, 0, /*prev=*/-1, maxSums, price);\n    reroot(tree, 0, /*prev=*/-1, /*parentSum=*/0, maxSums, price, ans);\n    return ans;\n  }\n\n private:\n  int maxSum(const vector<vector<int>>& tree, int u, int prev,\n             vector<int>& maxSums, const vector<int>& price) {\n    int maxChildSum = 0;\n    for (const int v : tree[u])\n      if (prev != v)\n        maxChildSum = max(maxChildSum, maxSum(tree, v, u, maxSums, price));\n    return maxSums[u] = price[u] + maxChildSum;\n  }\n\n  void reroot(const vector<vector<int>>& tree, int u, int prev, int parentSum,\n              const vector<int>& maxSums, const vector<int>& price, int& ans) {\n    // Get top two subtree sums and top one node index.\n    int maxSubtreeSum1 = 0;\n    int maxSubtreeSum2 = 0;\n    int maxNode = -1;\n    for (const int v : tree[u]) {\n      if (v == prev)\n        continue;\n      if (maxSums[v] > maxSubtreeSum1) {\n        maxSubtreeSum2 = maxSubtreeSum1;\n        maxSubtreeSum1 = maxSums[v];\n        maxNode = v;\n      } else if (maxSums[v] > maxSubtreeSum2) {\n        maxSubtreeSum2 = maxSums[v];\n      }\n    }\n\n    if (tree[u].size() == 1)\n      ans = max({ans, parentSum, maxSubtreeSum1});\n\n    for (const int v : tree[u]) {\n      if (v == prev)\n        continue;\n      const int nextParentSum =\n          (v == maxNode ? price[u] + max(parentSum, maxSubtreeSum2)\n                        : price[u] + max(parentSum, maxSubtreeSum1));\n      reroot(tree, v, u, nextParentSum, maxSums, price, ans);\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maxOutput(int n, int[][] edges, int[] price) {\n    List<Integer>[] tree = new List[n];\n    int[] maxSums = new int[n]; // maxSums[i] := max sum of path rooted at i.\n\n    for (int i = 0; i < n; ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      tree[u].add(v);\n      tree[v].add(u);\n    }\n\n    // Precalculate `maxSums`.\n    maxSum(tree, 0, /*prev=*/-1, maxSums, price);\n    reroot(tree, 0, /*prev=*/-1, /*parentSum=*/0, maxSums, price);\n    return (long) ans;\n  }\n\n  private int ans = 0;\n\n  private int maxSum(List<Integer>[] tree, int u, int prev, int[] maxSums, int[] price) {\n    int maxChildSum = 0;\n    for (final int v : tree[u])\n      if (prev != v)\n        maxChildSum = Math.max(maxChildSum, maxSum(tree, v, u, maxSums, price));\n    return maxSums[u] = price[u] + maxChildSum;\n  }\n\n  private void reroot(List<Integer>[] tree, int u, int prev, int parentSum, int[] maxSums,\n                      int[] price) {\n    // Get top two sums and top one node index.\n    int maxSubtreeSum1 = 0;\n    int maxSubtreeSum2 = 0;\n    int maxNode = -1;\n    for (final int v : tree[u]) {\n      if (v == prev)\n        continue;\n      if (maxSums[v] > maxSubtreeSum1) {\n        maxSubtreeSum2 = maxSubtreeSum1;\n        maxSubtreeSum1 = maxSums[v];\n        maxNode = v;\n      } else if (maxSums[v] > maxSubtreeSum2) {\n        maxSubtreeSum2 = maxSums[v];\n      }\n    }\n\n    if (tree[u].size() == 1)\n      ans = Math.max(ans, Math.max(parentSum, maxSubtreeSum1));\n\n    for (final int v : tree[u]) {\n      if (v == prev)\n        continue;\n      final int nextParentSum = (v == maxNode ? price[u] + Math.max(parentSum, maxSubtreeSum2)\n                                              : price[u] + Math.max(parentSum, maxSubtreeSum1));\n      reroot(tree, v, u, nextParentSum, maxSums, price);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxOutput(self, n: int, edges: List[List[int]], price: List[int]) -> int:\n    ans = 0\n    tree = [[] for _ in range(n)]\n    maxSums = [0] * n  # maxSums[i] := max sum of path rooted at i.\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    def maxSum(u: int, prev: int) -> int:\n      maxChildSum = 0\n      for v in tree[u]:\n        if prev != v:\n          maxChildSum = max(maxChildSum, maxSum(v, u))\n      maxSums[u] = price[u] + maxChildSum\n      return maxSums[u]\n\n    # Precalculate `maxSums`.\n    maxSum(0, -1)\n\n    def reroot(u: int, prev: int, parentSum: int) -> None:\n      nonlocal ans\n      # Get top two subtree sums and top one node index.\n      maxSubtreeSum1 = 0\n      maxSubtreeSum2 = 0\n      maxNode = -1\n      for v in tree[u]:\n        if v == prev:\n          continue\n        if maxSums[v] > maxSubtreeSum1:\n          maxSubtreeSum2 = maxSubtreeSum1\n          maxSubtreeSum1 = maxSums[v]\n          maxNode = v\n        elif maxSums[v] > maxSubtreeSum2:\n          maxSubtreeSum2 = maxSums[v]\n\n      if len(tree[u]) == 1:\n        ans = max(ans, parentSum, maxSubtreeSum1)\n\n      for v in tree[u]:\n        if v == prev:\n          continue\n        nextParentSum = \\\n            price[u] + max(parentSum, maxSubtreeSum2) if v == maxNode else \\\n            price[u] + max(parentSum, maxSubtreeSum1)\n        reroot(v, u, nextParentSum)\n\n    reroot(0, -1, 0)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}