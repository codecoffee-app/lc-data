{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2711",
            "title": "Difference of Number of Distinct Values on Diagonals",
            "titleSlug": "difference-of-number-of-distinct-values-on-diagonals",
            "content": "<p>Given a <strong>0-indexed</strong> 2D <code>grid</code> of size <code>m x n</code>, you should find the matrix <code>answer</code> of size <code>m x n</code>.</p>\n\n<p>The value of each cell <code>(r, c)</code> of the matrix <code>answer</code> is calculated in the following way:</p>\n\n<ul>\n\t<li>Let <code>topLeft[r][c]</code> be the number of <strong>distinct</strong> values in the top-left diagonal of the cell <code>(r, c)</code> in the matrix <code>grid</code>.</li>\n\t<li>Let <code>bottomRight[r][c]</code> be the number of <strong>distinct</strong> values in the bottom-right diagonal of the cell <code>(r, c)</code> in the matrix <code>grid</code>.</li>\n</ul>\n\n<p>Then <code>answer[r][c] = |topLeft[r][c] - bottomRight[r][c]|</code>.</p>\n\n<p>Return <em>the matrix</em> <code>answer</code>.</p>\n\n<p>A <strong>matrix diagonal</strong> is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix&#39;s end.</p>\n\n<p>A cell <code>(r<sub>1</sub>, c<sub>1</sub>)</code> belongs to the top-left diagonal of the cell <code>(r, c)</code>, if both belong to the same diagonal and <code>r<sub>1</sub> &lt; r</code>. Similarly is defined bottom-right diagonal.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/04/19/ex2.png\" style=\"width: 786px; height: 121px;\" />\n<pre>\n<strong>\nInput:</strong> grid = [[1,2,3],[3,1,5],[3,2,1]]\n<strong>Output:</strong> [[1,1,0],[1,0,1],[0,1,1]]\n<strong>Explanation:</strong> The 1<sup>st</sup> diagram denotes the initial grid.&nbsp;\nThe 2<sup>nd</sup> diagram denotes a grid for cell (0,0), where blue-colored cells are cells on its bottom-right diagonal.\nThe 3<sup>rd</sup> diagram denotes a grid for cell (1,2), where red-colored cells are cells on its top-left diagonal.\nThe 4<sup>th</sup> diagram denotes a grid for cell (1,1), where blue-colored cells are cells on its bottom-right diagonal and red-colored cells are cells on its top-left diagonal.\n- The cell (0,0) contains [1,1] on its bottom-right diagonal and [] on its top-left diagonal. The answer is |1 - 0| = 1.\n- The cell (1,2) contains [] on its bottom-right diagonal and [2] on its top-left diagonal. The answer is |0 - 1| = 1.\n- The cell (1,1) contains [1] on its bottom-right diagonal and [1] on its top-left diagonal. The answer is |1 - 1| = 0.\nThe answers of other cells are similarly calculated.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1]]\n<strong>Output:</strong> [[0]]\n<strong>Explanation:</strong> - The cell (0,0) contains [] on its bottom-right diagonal and [] on its top-left diagonal. The answer is |0 - 0| = 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n, grid[i][j] &lt;= 50</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 113,
            "dislikes": 198,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.2K\", \"totalSubmission\": \"25.7K\", \"totalAcceptedRaw\": 18165, \"totalSubmissionRaw\": 25744, \"acRate\": \"70.6%\"}",
            "hints": [
                "Use the set to count the number of distinct elements on diagonals."
            ],
            "rephrased": {
                "body": "Given a 0-indexed 2D grid of size m x n, construct an answer matrix of the same size.  Each cell (r, c) in the answer matrix will contain the absolute difference between the number of distinct values on the top-left diagonal and the number of distinct values on the bottom-right diagonal of the corresponding cell in the input grid.  Return the answer matrix.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n, grid[i][j] <= 50"
                ],
                "testcases": [
                    {
                        "input": "[[1,2,3],[3,1,5],[3,2,1]]",
                        "output": "[[1,1,0],[1,0,1],[0,1,1]]",
                        "explanation": "For the cell (0,0), the bottom-right diagonal is [1,1] (1 distinct value), and the top-left diagonal is empty (0 distinct values).  |1 - 0| = 1.\nFor the cell (1,2), the bottom-right diagonal is empty (0 distinct values), and the top-left diagonal is [2] (1 distinct value).  |0 - 1| = 1.\nFor the cell (1,1), the bottom-right diagonal is [1] (1 distinct value), and the top-left diagonal is [1] (1 distinct value).  |1 - 1| = 0.\nThe remaining cells are calculated similarly."
                    },
                    {
                        "input": "[[1]]",
                        "output": "[[0]]",
                        "explanation": "For the cell (0,0), the bottom-right diagonal is empty (0 distinct values), and the top-left diagonal is empty (0 distinct values). |0 - 0| = 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use the set to count the number of distinct elements on diagonals."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> differenceOfDistinctValues(vector<vector<int>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    vector<vector<int>> ans(m, vector<int>(n));\n\n    for (int i = 0; i < m; ++i)\n      fillInDiagonal(grid, i, 0, ans);\n\n    for (int j = 1; j < n; ++j)\n      fillInDiagonal(grid, 0, j, ans);\n\n    return ans;\n  }\n\n private:\n  void fillInDiagonal(const vector<vector<int>>& grid, int i, int j,\n                      vector<vector<int>>& ans) {\n    unordered_set<int> topLeft;\n    unordered_set<int> bottomRight;\n\n    // Fill in the diagonal from top left to bottom right.\n    while (i < grid.size() && j < grid[0].size()) {\n      ans[i][j] = topLeft.size();\n      // Post-addition, so this information can be utilized in subsequent cells.\n      topLeft.insert(grid[i++][j++]);\n    }\n\n    --i;\n    --j;\n\n    // Fill in the diagonal from bottom right to top left.\n    while (i >= 0 && j >= 0) {\n      ans[i][j] = abs(ans[i][j] - static_cast<int>(bottomRight.size()));\n      // Post-addition, so this information can be utilized in subsequent cells.\n      bottomRight.insert(grid[i--][j--]);\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] differenceOfDistinctValues(int[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    int[][] ans = new int[m][n];\n\n    for (int i = 0; i < m; ++i)\n      fillInDiagonal(grid, i, 0, ans);\n\n    for (int j = 1; j < n; ++j)\n      fillInDiagonal(grid, 0, j, ans);\n\n    return ans;\n  }\n\n  private void fillInDiagonal(int[][] grid, int i, int j, int[][] ans) {\n    Set<Integer> topLeft = new HashSet<>();\n    Set<Integer> bottomRight = new HashSet<>();\n\n    // Fill in the diagonal from top left to bottom right.\n    while (i < grid.length && j < grid[0].length) {\n      ans[i][j] = topLeft.size();\n      // Post-addition, so this information can be utilized in subsequent cells.\n      topLeft.add(grid[i++][j++]);\n    }\n\n    --i;\n    --j;\n\n    // Fill in the diagonal from bottom right to top left.\n    while (i >= 0 && j >= 0) {\n      ans[i][j] = Math.abs(ans[i][j] - bottomRight.size());\n      // Post-addition, so this information can be utilized in subsequent cells.\n      bottomRight.add(grid[i--][j--]);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def differenceOfDistinctValues(self, grid: List[List[int]]) -> List[List[int]]:\n    m = len(grid)\n    n = len(grid[0])\n    ans = [[0] * n for _ in range(m)]\n\n    def fillInDiagonal(i: int, j: int) -> None:\n      topLeft = set()\n      bottomRight = set()\n\n      # Fill in the diagonal from top left to bottom right.\n      while i < len(grid) and j < len(grid[0]):\n        ans[i][j] = len(topLeft)\n        # Post-addition, so this information can be utilized in subsequent cells.\n        topLeft.add(grid[i][j])\n        i += 1\n        j += 1\n\n      i -= 1\n      j -= 1\n\n      # Fill in the diagonal from bottom right to top left.\n      while i >= 0 and j >= 0:\n        ans[i][j] = abs(ans[i][j] - len(bottomRight))\n        # Post-addition, so this information can be utilized in subsequent cells.\n        bottomRight.add(grid[i][j])\n        i -= 1\n        j -= 1\n\n    for i in range(m):\n      fillInDiagonal(i, 0)\n\n    for j in range(1, n):\n      fillInDiagonal(0, j)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}