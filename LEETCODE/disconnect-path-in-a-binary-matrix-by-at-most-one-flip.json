{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2556",
            "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
            "titleSlug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
            "content": "<p>You are given a <strong>0-indexed</strong> <code>m x n</code> <strong>binary</strong> matrix <code>grid</code>. You can move from a cell <code>(row, col)</code> to any of the cells <code>(row + 1, col)</code> or <code>(row, col + 1)</code> that has the value <code>1</code>.&nbsp;The matrix is <strong>disconnected</strong> if there is no path from <code>(0, 0)</code> to <code>(m - 1, n - 1)</code>.</p>\n\n<p>You can flip the value of <strong>at most one</strong> (possibly none) cell. You <strong>cannot flip</strong> the cells <code>(0, 0)</code> and <code>(m - 1, n - 1)</code>.</p>\n\n<p>Return <code>true</code> <em>if it is possible to make the matrix disconnect or </em><code>false</code><em> otherwise</em>.</p>\n\n<p><strong>Note</strong> that flipping a cell changes its value from <code>0</code> to <code>1</code> or from <code>1</code> to <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/07/yetgrid2drawio.png\" style=\"width: 441px; height: 151px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,1,1],[1,0,0],[1,1,1]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can change the cell shown in the diagram above. There is no path from (0, 0) to (2, 2) in the resulting grid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/07/yetgrid3drawio.png\" />\n<pre>\n<strong>Input:</strong> grid = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is not possible to change at most one cell such that there is not path from (0, 0) to (2, 2).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>grid[0][0] == grid[m - 1][n - 1] == 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 522,
            "dislikes": 25,
            "similarQuestions": "[{\"title\": \"Number of Submatrices That Sum to Target\", \"titleSlug\": \"number-of-submatrices-that-sum-to-target\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Make at Least One Valid Path in a Grid\", \"titleSlug\": \"minimum-cost-to-make-at-least-one-valid-path-in-a-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Days to Disconnect Island\", \"titleSlug\": \"minimum-number-of-days-to-disconnect-island\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Weighted Subgraph With the Required Paths\", \"titleSlug\": \"minimum-weighted-subgraph-with-the-required-paths\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.6K\", \"totalSubmission\": \"42.7K\", \"totalAcceptedRaw\": 11642, \"totalSubmissionRaw\": 42659, \"acRate\": \"27.3%\"}",
            "hints": [
                "We can consider the grid a graph with edges between adjacent cells.",
                "If you can find two non-intersecting paths from (0, 0) to (m - 1, n - 1) then the answer is false. Otherwise, it is always true."
            ],
            "rephrased": {
                "body": "Given a 0-indexed m x n binary matrix `grid`, where you can move from a cell (row, col) to (row + 1, col) or (row, col + 1) if the target cell has the value 1.  Determine if it's possible to disconnect the matrix (i.e., no path from (0, 0) to (m - 1, n - 1)) by flipping the value of at most one cell (excluding (0, 0) and (m - 1, n - 1)). Return `true` if possible, `false` otherwise.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 1000",
                    "1 <= m * n <= 10^5",
                    "grid[i][j] is either 0 or 1.",
                    "grid[0][0] == grid[m - 1][n - 1] == 1"
                ],
                "testcases": [
                    {
                        "input": "[[1,1,1],[1,0,0],[1,1,1]]",
                        "output": "true",
                        "explanation": "By flipping the value of the cell at (1, 1) from 0 to 1, there is no longer a path from (0, 0) to (2, 2)."
                    },
                    {
                        "input": "[[1,1,1],[1,0,1],[1,1,1]]",
                        "output": "false",
                        "explanation": "It is not possible to disconnect the matrix by flipping at most one cell."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-submatrices-that-sum-to-target",
                "title": "Number of Submatrices That Sum to Target",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
                "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-days-to-disconnect-island",
                "title": "Minimum Number of Days to Disconnect Island",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-weighted-subgraph-with-the-required-paths",
                "title": "Minimum Weighted Subgraph With the Required Paths",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We can consider the grid a graph with edges between adjacent cells.",
            "If you can find two non-intersecting paths from (0, 0) to (m - 1, n - 1) then the answer is false. Otherwise, it is always true."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isPossibleToCutPath(vector<vector<int>>& grid) {\n    if (!hasPath(grid, 0, 0))\n      return true;\n    // Reassign (0, 0) as 1.\n    grid[0][0] = 1;\n    return !hasPath(grid, 0, 0);\n  }\n\n private:\n  // Returns true is there's a path from (0, 0) to (m - 1, n - 1).\n  // Also mark the visited path as 0 except (m - 1, n - 1).\n  bool hasPath(vector<vector<int>>& grid, int i, int j) {\n    if (i == grid.size() || j == grid[0].size())\n      return false;\n    if (i == grid.size() - 1 && j == grid[0].size() - 1)\n      return true;\n    if (grid[i][j] == 0)\n      return false;\n\n    grid[i][j] = 0;\n    // Go down first. Since we use OR logic, we'll only mark one path.\n    return hasPath(grid, i + 1, j) || hasPath(grid, i, j + 1);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isPossibleToCutPath(int[][] grid) {\n    if (!hasPath(grid, 0, 0))\n      return true;\n    // Reassign (0, 0) as 1.\n    grid[0][0] = 1;\n    return !hasPath(grid, 0, 0);\n  }\n\n  // Returns true is there's a path from (0, 0) to (m - 1, n - 1).\n  // Also mark the visited path as 0 except (m - 1, n - 1).\n  private boolean hasPath(int[][] grid, int i, int j) {\n    if (i == grid.length || j == grid[0].length)\n      return false;\n    if (i == grid.length - 1 && j == grid[0].length - 1)\n      return true;\n    if (grid[i][j] == 0)\n      return false;\n\n    grid[i][j] = 0;\n    // Go down first. Since we use OR logic, we'll only mark one path.\n    return hasPath(grid, i + 1, j) || hasPath(grid, i, j + 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isPossibleToCutPath(self, grid: List[List[int]]) -> bool:\n    # Returns True is there's a path from (0, 0) to (m - 1, n - 1).\n    # Also mark the visited path as 0 except (m - 1, n - 1).\n    def hasPath(i: int, j: int) -> bool:\n      if i == len(grid) or j == len(grid[0]):\n        return False\n      if i == len(grid) - 1 and j == len(grid[0]) - 1:\n        return True\n      if grid[i][j] == 0:\n        return False\n\n      grid[i][j] = 0\n      # Go down first. Since we use OR logic, we'll only mark one path.\n      return hasPath(i + 1, j) or hasPath(i, j + 1)\n\n    if not hasPath(0, 0):\n      return True\n    # Reassign (0, 0) as 1.\n    grid[0][0] = 1\n    return not hasPath(0, 0)\n",
                "lang_text": "py"
            }
        }
    }
}