{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1054",
            "title": "Distant Barcodes",
            "titleSlug": "distant-barcodes",
            "content": "<p>In a warehouse, there is a row of barcodes, where the <code>i<sup>th</sup></code> barcode is <code>barcodes[i]</code>.</p>\n\n<p>Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> barcodes = [1,1,1,2,2,2]\n<strong>Output:</strong> [2,1,2,1,2,1]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> barcodes = [1,1,1,1,2,2,3,3]\n<strong>Output:</strong> [1,3,1,3,1,2,1,2]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= barcodes.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= barcodes[i] &lt;= 10000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1221,
            "dislikes": 49,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"40.3K\", \"totalSubmission\": \"87.3K\", \"totalAcceptedRaw\": 40334, \"totalSubmissionRaw\": 87346, \"acRate\": \"46.2%\"}",
            "hints": [
                "We want to always choose the most common or second most common element to write next.  What data structure allows us to query this effectively?"
            ],
            "rephrased": {
                "body": "Given a row of barcodes in a warehouse, where the i-th barcode is represented by barcodes[i], rearrange the barcodes such that no two adjacent barcodes are the same. You are guaranteed that a valid rearrangement exists. Return any valid rearrangement.",
                "constraints": [
                    "1 <= barcodes.length <= 10000",
                    "1 <= barcodes[i] <= 10000"
                ],
                "testcases": [
                    {
                        "input": "[1,1,1,2,2,2]",
                        "output": "[2,1,2,1,2,1]",
                        "explanation": "The output rearranges the input such that no adjacent barcodes are the same. Other valid outputs are possible."
                    },
                    {
                        "input": "[1,1,1,1,2,2,3,3]",
                        "output": "[1,3,1,3,1,2,1,2]",
                        "explanation": "The output rearranges the input such that no adjacent barcodes are the same. Other valid outputs are possible."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "We want to always choose the most common or second most common element to write next.  What data structure allows us to query this effectively?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> rearrangeBarcodes(vector<int>& barcodes) {\n    vector<int> ans(barcodes.size());\n    vector<int> count(10001);\n    int i = 0;  // ans' index\n\n    for (const int b : barcodes)\n      ++count[b];\n\n    const auto maxIt = max_element(count.begin(), count.end());\n    const int maxNum = maxIt - count.begin();\n\n    auto fillAns = [&](int num) {\n      while (count[num]-- > 0) {\n        ans[i] = num;\n        i = i + 2 < barcodes.size() ? i + 2 : 1;\n      }\n    };\n\n    fillAns(maxNum);\n    for (int num = 1; num < 10001; ++num)\n      fillAns(num);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] rearrangeBarcodes(int[] barcodes) {\n    int[] ans = new int[barcodes.length];\n    int[] count = new int[10001];\n    int maxCount = 0;\n    int maxNum = 0;\n\n    for (final int b : barcodes)\n      ++count[b];\n\n    for (int i = 1; i < 10001; ++i)\n      if (count[i] > maxCount) {\n        maxCount = count[i];\n        maxNum = i;\n      }\n\n    fillAns(ans, count, maxNum, barcodes.length);\n    for (int num = 1; num < 10001; ++num)\n      fillAns(ans, count, num, barcodes.length);\n\n    return ans;\n  }\n\n  private int i = 0; // ans' index\n\n  private void fillAns(int[] ans, int[] count, int num, int n) {\n    while (count[num]-- > 0) {\n      ans[i] = num;\n      i = i + 2 < n ? i + 2 : 1;\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def rearrangeBarcodes(self, barcodes: List[int]) -> List[int]:\n    ans = [0] * len(barcodes)\n    count = collections.Counter(barcodes)\n    i = 0  # ans' index\n    maxNum = max(count, key=count.get)\n\n    def fillAns(num: int) -> None:\n      nonlocal i\n      while count[num]:\n        ans[i] = num\n        i = i + 2 if i + 2 < len(barcodes) else 1\n        count[num] -= 1\n\n    fillAns(maxNum)\n    for num in count.keys():\n      fillAns(num)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}