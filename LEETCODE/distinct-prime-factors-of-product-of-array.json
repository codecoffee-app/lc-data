{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2521",
            "title": "Distinct Prime Factors of Product of Array",
            "titleSlug": "distinct-prime-factors-of-product-of-array",
            "content": "<p>Given an array of positive integers <code>nums</code>, return <em>the number of <strong>distinct prime factors</strong> in the product of the elements of</em> <code>nums</code>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>A number greater than <code>1</code> is called <strong>prime</strong> if it is divisible by only <code>1</code> and itself.</li>\n\t<li>An integer <code>val1</code> is a factor of another integer <code>val2</code> if <code>val2 / val1</code> is an integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,3,7,10,6]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nThe product of all the elements in nums is: 2 * 4 * 3 * 7 * 10 * 6 = 10080 = 2<sup>5</sup> * 3<sup>2</sup> * 5 * 7.\nThere are 4 distinct prime factors so we return 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,8,16]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nThe product of all the elements in nums is: 2 * 4 * 8 * 16 = 1024 = 2<sup>10</sup>.\nThere is 1 distinct prime factor so we return 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>2 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 425,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"2 Keys Keyboard\", \"titleSlug\": \"2-keys-keyboard\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Largest Component Size by Common Factor\", \"titleSlug\": \"largest-component-size-by-common-factor\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Closest Divisors\", \"titleSlug\": \"closest-divisors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Value After Replacing With Sum of Prime Factors\", \"titleSlug\": \"smallest-value-after-replacing-with-sum-of-prime-factors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count the Number of Square-Free Subsets\", \"titleSlug\": \"count-the-number-of-square-free-subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"26.5K\", \"totalSubmission\": \"52.5K\", \"totalAcceptedRaw\": 26471, \"totalSubmissionRaw\": 52517, \"acRate\": \"50.4%\"}",
            "hints": [
                "Do not multiply all the numbers together, as the product is too big to store.",
                "Think about how each individual number's prime factors contribute to the prime factors of the product of the entire array.",
                "Find the prime factors of each element in nums, and store all of them in a set to avoid duplicates."
            ],
            "rephrased": {
                "body": "Given an array of positive integers `nums`, determine the number of unique prime factors present in the product of all elements within the array.",
                "constraints": [
                    "1 <= nums.length <= 10^4",
                    "2 <= nums[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[2,4,3,7,10,6]",
                        "output": "4",
                        "explanation": "The product of the array elements is 2 * 4 * 3 * 7 * 10 * 6 = 10080. The prime factorization of 10080 is 2^5 * 3^2 * 5 * 7. Thus, the distinct prime factors are 2, 3, 5, and 7, resulting in a count of 4."
                    },
                    {
                        "input": "[2,4,8,16]",
                        "output": "1",
                        "explanation": "The product of the array elements is 2 * 4 * 8 * 16 = 1024. The prime factorization of 1024 is 2^10. Therefore, the only distinct prime factor is 2, and the count is 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "2-keys-keyboard",
                "title": "2 Keys Keyboard",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "largest-component-size-by-common-factor",
                "title": "Largest Component Size by Common Factor",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "closest-divisors",
                "title": "Closest Divisors",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "smallest-value-after-replacing-with-sum-of-prime-factors",
                "title": "Smallest Value After Replacing With Sum of Prime Factors",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-the-number-of-square-free-subsets",
                "title": "Count the Number of Square-Free Subsets",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Do not multiply all the numbers together, as the product is too big to store.",
            "Think about how each individual number's prime factors contribute to the prime factors of the product of the entire array.",
            "Find the prime factors of each element in nums, and store all of them in a set to avoid duplicates."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int distinctPrimeFactors(vector<int>& nums) {\n    unordered_set<int> primes;\n\n    for (const int num : nums)\n      addPrimeFactors(primes, num);\n\n    return primes.size();\n  }\n\n private:\n  void addPrimeFactors(unordered_set<int>& primes, int num) {\n    for (int divisor = 2; divisor <= num; ++divisor)\n      if (num % divisor == 0) {\n        primes.insert(divisor);\n        while (num % divisor == 0)\n          num /= divisor;\n      }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int distinctPrimeFactors(int[] nums) {\n    Set<Integer> primes = new HashSet<>();\n\n    for (final int num : nums)\n      addPrimeFactors(primes, num);\n\n    return primes.size();\n  }\n\n  private void addPrimeFactors(Set<Integer> primes, int num) {\n    for (int divisor = 2; divisor <= num; ++divisor)\n      if (num % divisor == 0) {\n        primes.add(divisor);\n        while (num % divisor == 0)\n          num /= divisor;\n      }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def distinctPrimeFactors(self, nums: List[int]) -> int:\n    primes = set()\n\n    for num in nums:\n      self._addPrimeFactors(primes, num)\n\n    return len(primes)\n\n  def _addPrimeFactors(self, primes: Set[int], num: int) -> None:\n    for divisor in range(2, num + 1):\n      if num % divisor == 0:\n        primes.add(divisor)\n        while num % divisor == 0:\n          num //= divisor\n",
                "lang_text": "py"
            }
        }
    }
}