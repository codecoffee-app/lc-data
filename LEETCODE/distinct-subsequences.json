{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "115",
            "title": "Distinct Subsequences",
            "titleSlug": "distinct-subsequences",
            "content": "<p>Given two strings s and t, return <i>the number of distinct</i> <b><i>subsequences</i></b><i> of </i>s<i> which equals </i>t.</p>\n\n<p>The test cases are generated so that the answer fits on a 32-bit signed integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;rabbbit&quot;, t = &quot;rabbit&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nAs shown below, there are 3 ways you can generate &quot;rabbit&quot; from s.\n<code><strong><u>rabb</u></strong>b<strong><u>it</u></strong></code>\n<code><strong><u>ra</u></strong>b<strong><u>bbit</u></strong></code>\n<code><strong><u>rab</u></strong>b<strong><u>bit</u></strong></code>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babgbag&quot;, t = &quot;bag&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nAs shown below, there are 5 ways you can generate &quot;bag&quot; from s.\n<code><strong><u>ba</u></strong>b<u><strong>g</strong></u>bag</code>\n<code><strong><u>ba</u></strong>bgba<strong><u>g</u></strong></code>\n<code><u><strong>b</strong></u>abgb<strong><u>ag</u></strong></code>\n<code>ba<u><strong>b</strong></u>gb<u><strong>ag</strong></u></code>\n<code>babg<strong><u>bag</u></strong></code></pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 1000</code></li>\n\t<li><code>s</code> and <code>t</code> consist of English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6367,
            "dislikes": 279,
            "similarQuestions": "[{\"title\": \"Number of Unique Good Subsequences\", \"titleSlug\": \"number-of-unique-good-subsequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"358.7K\", \"totalSubmission\": \"780.2K\", \"totalAcceptedRaw\": 358680, \"totalSubmissionRaw\": 780237, \"acRate\": \"46.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two strings `s` and `t`, determine the number of distinct subsequences of `s` that are equal to `t`.",
                "constraints": [
                    "1 <= s.length, t.length <= 1000",
                    "`s` and `t` consist of English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"rabbbit\", t = \"rabbit\"",
                        "output": "3",
                        "explanation": "The string \"rabbit\" can be formed from \"rabbbit\" in the following 3 distinct ways:\n1. `rabbbit` (underlined characters)\n2. `rabbbit` (underlined characters)\n3. `rabbbit` (underlined characters)"
                    },
                    {
                        "input": "s = \"babgbag\", t = \"bag\"",
                        "output": "5",
                        "explanation": "The string \"bag\" can be formed from \"babgbag\" in the following 5 distinct ways:\n1. `babgbag` (underlined characters)\n2. `babgbag` (underlined characters)\n3. `babgbag` (underlined characters)\n4. `babgbag` (underlined characters)\n5. `babgbag` (underlined characters)"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-unique-good-subsequences",
                "title": "Number of Unique Good Subsequences",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numDistinct(string s, string t) {\n    const int m = s.length();\n    const int n = t.length();\n    vector<vector<unsigned long>> dp(m + 1, vector<unsigned long>(n + 1));\n\n    for (int i = 0; i <= m; ++i)\n      dp[i][0] = 1;\n\n    for (int i = 1; i <= m; ++i)\n      for (int j = 1; j <= n; ++j)\n        if (s[i - 1] == t[j - 1])\n          dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];\n        else\n          dp[i][j] = dp[i - 1][j];\n\n    return dp[m][n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numDistinct(String s, String t) {\n    final int m = s.length();\n    final int n = t.length();\n    long[][] dp = new long[m + 1][n + 1];\n\n    for (int i = 0; i <= m; ++i)\n      dp[i][0] = 1;\n\n    for (int i = 1; i <= m; ++i)\n      for (int j = 1; j <= n; ++j)\n        if (s.charAt(i - 1) == t.charAt(j - 1))\n          dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];\n        else\n          dp[i][j] = dp[i - 1][j];\n\n    return (int) dp[m][n];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numDistinct(self, s: str, t: str) -> int:\n    m = len(s)\n    n = len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n      dp[i][0] = 1\n\n    for i in range(1, m + 1):\n      for j in range(1, n + 1):\n        if s[i - 1] == t[j - 1]:\n          dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n        else:\n          dp[i][j] = dp[i - 1][j]\n\n    return dp[m][n]\n",
                "lang_text": "py"
            }
        }
    }
}