{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2928",
            "title": "Distribute Candies Among Children I",
            "titleSlug": "distribute-candies-among-children-i",
            "content": "<p>You are given two positive integers <code>n</code> and <code>limit</code>.</p>\n\n<p>Return <em>the <strong>total number</strong> of ways to distribute </em><code>n</code> <em>candies among </em><code>3</code><em> children such that no child gets more than </em><code>limit</code><em> candies.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, limit = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, limit = 3\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= limit &lt;= 50</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 98,
            "dislikes": 46,
            "similarQuestions": "[{\"title\": \"Count Ways to Distribute Candies\", \"titleSlug\": \"count-ways-to-distribute-candies\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.1K\", \"totalSubmission\": \"31.9K\", \"totalAcceptedRaw\": 24094, \"totalSubmissionRaw\": 31859, \"acRate\": \"75.6%\"}",
            "hints": [
                "Use three nested for loops to check all the triplets."
            ],
            "rephrased": {
                "body": "Given two positive integers `n` and `limit`, determine the total number of ways to distribute `n` candies among 3 children such that no child receives more than `limit` candies.",
                "constraints": [
                    "1 <= n <= 50",
                    "1 <= limit <= 50"
                ],
                "testcases": [
                    {
                        "input": "n = 5, limit = 2",
                        "output": "3",
                        "explanation": "There are 3 valid distributions: (1, 2, 2), (2, 1, 2), and (2, 2, 1)."
                    },
                    {
                        "input": "n = 3, limit = 3",
                        "output": "10",
                        "explanation": "There are 10 valid distributions: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0), and (3, 0, 0)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-ways-to-distribute-candies",
                "title": "Count Ways to Distribute Candies",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Use three nested for loops to check all the triplets."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Same as 2927. Distribute Candies Among Children III\n  int distributeCandies(int n, int limit) {\n    const int limitPlusOne = limit + 1;\n    const int oneChildExceedsLimit = ways(n - limitPlusOne);\n    const int twoChildrenExceedLimit = ways(n - 2 * limitPlusOne);\n    const int threeChildrenExceedLimit = ways(n - 3 * limitPlusOne);\n    // Principle of Inclusion-Exclusion (PIE)\n    return ways(n) - 3 * oneChildExceedsLimit + 3 * twoChildrenExceedLimit -\n           threeChildrenExceedLimit;\n  }\n\n private:\n  // Returns the number of ways to distribute n candies to 3 children.\n  int ways(int n) {\n    if (n < 0)\n      return 0;\n    // Stars and bars method:\n    // e.g. '**|**|*' means to distribute 5 candies to 3 children, where\n    // stars (*) := candies and bars (|) := dividers between children.\n    return nCk(n + 2, 2);\n  }\n\n  int nCk(int n, int k) {\n    int ans = 1;\n    for (int i = 1; i <= k; ++i)\n      ans *= (n - i + 1);\n    for (int i = 1; i <= k; ++i)\n      ans /= i;\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Returns the number of ways to distribute n candies to 3 children.\n  public int distributeCandies(int n, int limit) {\n    final int limitPlusOne = limit + 1;\n    final int oneChildExceedsLimit = ways(n - limitPlusOne);\n    final int twoChildrenExceedLimit = ways(n - 2 * limitPlusOne);\n    final int threeChildrenExceedLimit = ways(n - 3 * limitPlusOne);\n    // Principle of Inclusion-Exclusion (PIE)\n    return ways(n) - 3 * oneChildExceedsLimit + 3 * twoChildrenExceedLimit -\n        threeChildrenExceedLimit;\n  }\n\n  private int ways(int n) {\n    if (n < 0)\n      return 0;\n    // Stars and bars method:\n    // e.g. '**|**|*' means to distribute 5 candies to 3 children, where\n    // stars (*) := candies and bars (|) := dividers between children.\n    return nCk(n + 2, 2);\n  }\n\n  private int nCk(int n, int k) {\n    int ans = 1;\n    for (int i = 1; i <= k; ++i)\n      ans *= (n - i + 1);\n    for (int i = 1; i <= k; ++i)\n      ans /= i;\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def distributeCandies(self, n: int, limit: int) -> int:\n    def ways(n: int) -> int:\n      \"\"\"Returns the number of ways to distribute n candies to 3 children.\"\"\"\n      if n < 0:\n        return 0\n      # Stars and bars method:\n      # e.g. '**|**|*' means to distribute 5 candies to 3 children, where\n      # stars (*) := candies and bars (|) := dividers between children.\n      return math.comb(n + 2, 2)\n\n    limitPlusOne = limit + 1\n    oneChildExceedsLimit = ways(n - limitPlusOne)\n    twoChildrenExceedLimit = ways(n - 2 * limitPlusOne)\n    threeChildrenExceedLimit = ways(n - 3 * limitPlusOne)\n    # Principle of Inclusion-Exclusion (PIE)\n    return ways(n) \\\n        - 3 * oneChildExceedsLimit \\\n        + 3 * twoChildrenExceedLimit \\\n        - threeChildrenExceedLimit\n",
                "lang_text": "py"
            }
        }
    }
}