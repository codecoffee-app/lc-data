{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "979",
            "title": "Distribute Coins in Binary Tree",
            "titleSlug": "distribute-coins-in-binary-tree",
            "content": "<p>You are given the <code>root</code> of a binary tree with <code>n</code> nodes where each <code>node</code> in the tree has <code>node.val</code> coins. There are <code>n</code> coins in total throughout the whole tree.</p>\n\n<p>In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of moves required to make every node have <strong>exactly</strong> one coin</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/18/tree1.png\" style=\"width: 250px; height: 236px;\" />\n<pre>\n<strong>Input:</strong> root = [3,0,0]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>From the root of the tree, we move one coin to its left child, and one coin to its right child.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/18/tree2.png\" style=\"width: 250px; height: 236px;\" />\n<pre>\n<strong>Input:</strong> root = [0,3,0]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is <code>n</code>.</li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= n</code></li>\n\t<li>The sum of all <code>Node.val</code> is <code>n</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4836,
            "dislikes": 166,
            "similarQuestions": "[{\"title\": \"Sum of Distances in Tree\", \"titleSlug\": \"sum-of-distances-in-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Cameras\", \"titleSlug\": \"binary-tree-cameras\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"108.9K\", \"totalSubmission\": \"150.4K\", \"totalAcceptedRaw\": 108902, \"totalSubmissionRaw\": 150377, \"acRate\": \"72.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree with *n* nodes, where each node has `node.val` coins and the total number of coins in the tree is *n*. Determine the minimum number of moves required to redistribute the coins such that each node has exactly one coin. A move consists of transferring a single coin between adjacent nodes (parent to child or child to parent).",
                "constraints": [
                    "The number of nodes in the tree is *n*.",
                    "1 <= *n* <= 100",
                    "0 <= Node.val <= *n*",
                    "The sum of all `Node.val` is *n*."
                ],
                "testcases": [
                    {
                        "input": "[3,0,0]",
                        "output": "2",
                        "explanation": "One coin is moved from the root to its left child, and another coin is moved from the root to its right child."
                    },
                    {
                        "input": "[0,3,0]",
                        "output": "3",
                        "explanation": "Two coins are moved from the left child to the root (two moves). Then, one coin is moved from the root to the right child."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "sum-of-distances-in-tree",
                "title": "Sum of Distances in Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "binary-tree-cameras",
                "title": "Binary Tree Cameras",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int distributeCoins(TreeNode* root) {\n    int ans = 0;\n    dfs(root, ans);\n    return ans;\n  }\n\n  // Returns how many coins I can give (positive) / take (negative)\n private:\n  int dfs(TreeNode* root, int& ans) {\n    if (root == nullptr)\n      return 0;\n\n    const int l = dfs(root->left, ans);\n    const int r = dfs(root->right, ans);\n    ans += abs(l) + abs(r);\n    return (root->val - 1) + l + r;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int distributeCoins(TreeNode root) {\n    dfs(root);\n    return ans;\n  }\n\n  private int ans = 0;\n\n  // Returns how many coins I can give (positive) / take (negative)\n  private int dfs(TreeNode root) {\n    if (root == null)\n      return 0;\n\n    final int l = dfs(root.left);\n    final int r = dfs(root.right);\n    ans += Math.abs(l) + Math.abs(r);\n\n    return (root.val - 1) + l + r;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}