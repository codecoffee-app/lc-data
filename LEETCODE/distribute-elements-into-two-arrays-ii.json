{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3072",
            "title": "Distribute Elements Into Two Arrays II",
            "titleSlug": "distribute-elements-into-two-arrays-ii",
            "content": "<p>You are given a <strong>1-indexed</strong> array of integers <code>nums</code> of length <code>n</code>.</p>\n\n<p>We define a function <code>greaterCount</code> such that <code>greaterCount(arr, val)</code> returns the number of elements in <code>arr</code> that are <strong>strictly greater</strong> than <code>val</code>.</p>\n\n<p>You need to distribute all the elements of <code>nums</code> between two arrays <code>arr1</code> and <code>arr2</code> using <code>n</code> operations. In the first operation, append <code>nums[1]</code> to <code>arr1</code>. In the second operation, append <code>nums[2]</code> to <code>arr2</code>. Afterwards, in the <code>i<sup>th</sup></code> operation:</p>\n\n<ul>\n\t<li>If <code>greaterCount(arr1, nums[i]) &gt; greaterCount(arr2, nums[i])</code>, append <code>nums[i]</code> to <code>arr1</code>.</li>\n\t<li>If <code>greaterCount(arr1, nums[i]) &lt; greaterCount(arr2, nums[i])</code>, append <code>nums[i]</code> to <code>arr2</code>.</li>\n\t<li>If <code>greaterCount(arr1, nums[i]) == greaterCount(arr2, nums[i])</code>, append <code>nums[i]</code> to the array with a <strong>lesser</strong> number of elements.</li>\n\t<li>If there is still a tie, append <code>nums[i]</code> to <code>arr1</code>.</li>\n</ul>\n\n<p>The array <code>result</code> is formed by concatenating the arrays <code>arr1</code> and <code>arr2</code>. For example, if <code>arr1 == [1,2,3]</code> and <code>arr2 == [4,5,6]</code>, then <code>result = [1,2,3,4,5,6]</code>.</p>\n\n<p>Return <em>the integer array</em> <code>result</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,3,3]\n<strong>Output:</strong> [2,3,1,3]\n<strong>Explanation:</strong> After the first 2 operations, arr1 = [2] and arr2 = [1].\nIn the 3<sup>rd</sup> operation, the number of elements greater than 3 is zero in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.\nIn the 4<sup>th</sup> operation, the number of elements greater than 3 is zero in both arrays. As the length of arr2 is lesser, hence, append nums[4] to arr2.\nAfter 4 operations, arr1 = [2,3] and arr2 = [1,3].\nHence, the array result formed by concatenation is [2,3,1,3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,14,3,1,2]\n<strong>Output:</strong> [5,3,1,2,14]\n<strong>Explanation:</strong> After the first 2 operations, arr1 = [5] and arr2 = [14].\nIn the 3<sup>rd</sup> operation, the number of elements greater than 3 is one in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.\nIn the 4<sup>th</sup> operation, the number of elements greater than 1 is greater in arr1 than arr2 (2 &gt; 1). Hence, append nums[4] to arr1.\nIn the 5<sup>th</sup> operation, the number of elements greater than 2 is greater in arr1 than arr2 (2 &gt; 1). Hence, append nums[5] to arr1.\nAfter 5 operations, arr1 = [5,3,1,2] and arr2 = [14].\nHence, the array result formed by concatenation is [5,3,1,2,14].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3,3,3]\n<strong>Output:</strong> [3,3,3,3]\n<strong>Explanation:</strong> At the end of 4 operations, arr1 = [3,3] and arr2 = [3,3].\nHence, the array result formed by concatenation is [3,3,3,3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 127,
            "dislikes": 13,
            "similarQuestions": "[{\"title\": \"Split Array Largest Sum\", \"titleSlug\": \"split-array-largest-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Divide Array Into Equal Pairs\", \"titleSlug\": \"divide-array-into-equal-pairs\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.6K\", \"totalSubmission\": \"35.5K\", \"totalAcceptedRaw\": 9631, \"totalSubmissionRaw\": 35468, \"acRate\": \"27.2%\"}",
            "hints": [
                "We need a data structure that counts the number of integers greater than a given value <code>x</code> and supports insertion.",
                "Use Segment Tree or Binary Indexed Tree by compressing the numbers to the range <code>[1,n]</code>."
            ],
            "rephrased": {
                "body": "Given a 1-indexed array of integers `nums` of length `n`, distribute all elements of `nums` between two arrays, `arr1` and `arr2`, over `n` operations. Initially, `nums[1]` is appended to `arr1` and `nums[2]` to `arr2`.  For each subsequent operation `i`:\n\n*   If `greaterCount(arr1, nums[i]) > greaterCount(arr2, nums[i])`, append `nums[i]` to `arr1`.\n*   If `greaterCount(arr1, nums[i]) < greaterCount(arr2, nums[i])`, append `nums[i]` to `arr2`.\n*   If `greaterCount(arr1, nums[i]) == greaterCount(arr2, nums[i])`, append `nums[i]` to the array with the smaller length. In the case of a tie in length, append to `arr1`.\n\nHere, `greaterCount(arr, val)` returns the number of elements in `arr` strictly greater than `val`.  Return the array `result` formed by concatenating `arr1` and `arr2`.",
                "constraints": [
                    "3 <= n <= 10^5",
                    "1 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[2,1,3,3]",
                        "output": "[2,3,1,3]",
                        "explanation": "Initially, arr1 = [2] and arr2 = [1]. For nums[3] = 3, greaterCount(arr1, 3) = 0 and greaterCount(arr2, 3) = 0. Lengths are equal, so append 3 to arr1. For nums[4] = 3, greaterCount(arr1, 3) = 0 and greaterCount(arr2, 3) = 0.  arr2 is shorter, so append 3 to arr2.  Result: [2,3,1,3]"
                    },
                    {
                        "input": "[5,14,3,1,2]",
                        "output": "[5,3,1,2,14]",
                        "explanation": "Initially, arr1 = [5] and arr2 = [14]. For nums[3] = 3, greaterCount(arr1, 3) = 1 and greaterCount(arr2, 3) = 1. Lengths are equal, so append 3 to arr1. For nums[4] = 1, greaterCount(arr1, 1) = 2 and greaterCount(arr2, 1) = 1. Append 1 to arr1. For nums[5] = 2, greaterCount(arr1, 2) = 2 and greaterCount(arr2, 2) = 1. Append 2 to arr1. Result: [5,3,1,2,14]"
                    },
                    {
                        "input": "[3,3,3,3]",
                        "output": "[3,3,3,3]",
                        "explanation": "Initially, arr1 = [3] and arr2 = [3].  Since all the numbers are same, the lengths are checked. Finally arr1=[3,3] and arr2=[3,3] and the final concatenated array is [3,3,3,3]"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "split-array-largest-sum",
                "title": "Split Array Largest Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "divide-array-into-equal-pairs",
                "title": "Divide Array Into Equal Pairs",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We need a data structure that counts the number of integers greater than a given value <code>x</code> and supports insertion.",
            "Use Segment Tree or Binary Indexed Tree by compressing the numbers to the range <code>[1,n]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class FenwickTree {\n public:\n  FenwickTree(int n) : sums(n + 1) {}\n\n  void update(int i, int delta) {\n    while (i < sums.size()) {\n      sums[i] += delta;\n      i += lowbit(i);\n    }\n  }\n\n  int get(int i) const {\n    int sum = 0;\n    while (i > 0) {\n      sum += sums[i];\n      i -= lowbit(i);\n    }\n    return sum;\n  }\n\n private:\n  vector<int> sums;\n\n  static inline int lowbit(int i) {\n    return i & -i;\n  }\n};\n\nclass Solution {\n public:\n  vector<int> resultArray(vector<int>& nums) {\n    vector<int> arr1;\n    vector<int> arr2;\n    const unordered_map<int, int> ranks = getRanks(nums);\n    FenwickTree tree1(ranks.size());\n    FenwickTree tree2(ranks.size());\n\n    add(nums[0], arr1, tree1, ranks);\n    add(nums[1], arr2, tree2, ranks);\n\n    for (int i = 2; i < nums.size(); ++i) {\n      const int greaterCount1 = arr1.size() - tree1.get(ranks.at(nums[i]));\n      const int greaterCount2 = arr2.size() - tree2.get(ranks.at(nums[i]));\n      if (greaterCount1 > greaterCount2)\n        add(nums[i], arr1, tree1, ranks);\n      else if (greaterCount1 < greaterCount2)\n        add(nums[i], arr2, tree2, ranks);\n      else if (arr1.size() > arr2.size())\n        add(nums[i], arr2, tree2, ranks);\n      else\n        add(nums[i], arr1, tree1, ranks);\n    }\n\n    arr1.insert(arr1.end(), arr2.begin(), arr2.end());\n    return arr1;\n  }\n\n private:\n  unordered_map<int, int> getRanks(const vector<int>& nums) {\n    unordered_map<int, int> ranks;\n    set<int> sorted(nums.begin(), nums.end());\n    int rank = 0;\n    for (const int num : sorted)\n      ranks[num] = ++rank;\n    return ranks;\n  }\n\n  void add(int num, vector<int>& arr, FenwickTree& tree,\n           const unordered_map<int, int>& ranks) {\n    arr.push_back(num);\n    tree.update(ranks.at(num), 1);\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class FenwickTree {\n  public FenwickTree(int n) {\n    sums = new int[n + 1];\n  }\n\n  public void update(int i, int delta) {\n    while (i < sums.length) {\n      sums[i] += delta;\n      i += lowbit(i);\n    }\n  }\n\n  public int get(int i) {\n    int sum = 0;\n    while (i > 0) {\n      sum += sums[i];\n      i -= lowbit(i);\n    }\n    return sum;\n  }\n\n  private int[] sums;\n\n  private static int lowbit(int i) {\n    return i & -i;\n  }\n}\n\nclass Solution {\n  public int[] resultArray(int[] nums) {\n    List<Integer> arr1 = new ArrayList<>();\n    List<Integer> arr2 = new ArrayList<>();\n    Map<Integer, Integer> ranks = getRanks(nums);\n    FenwickTree tree1 = new FenwickTree(ranks.size());\n    FenwickTree tree2 = new FenwickTree(ranks.size());\n\n    add(nums[0], arr1, tree1, ranks);\n    add(nums[1], arr2, tree2, ranks);\n\n    for (int i = 2; i < nums.length; ++i) {\n      final int greaterCount1 = arr1.size() - tree1.get(ranks.get(nums[i]));\n      final int greaterCount2 = arr2.size() - tree2.get(ranks.get(nums[i]));\n      if (greaterCount1 > greaterCount2)\n        add(nums[i], arr1, tree1, ranks);\n      else if (greaterCount1 < greaterCount2)\n        add(nums[i], arr2, tree2, ranks);\n      else if (arr1.size() > arr2.size())\n        add(nums[i], arr2, tree2, ranks);\n      else\n        add(nums[i], arr1, tree1, ranks);\n    }\n\n    arr1.addAll(arr2);\n    return arr1.stream().mapToInt(Integer::intValue).toArray();\n  }\n\n  private Map<Integer, Integer> getRanks(int[] nums) {\n    Map<Integer, Integer> ranks = new HashMap<>();\n    SortedSet<Integer> sorted = new TreeSet<>();\n    for (final int num : nums)\n      sorted.add(num);\n    int rank = 0;\n    for (Iterator<Integer> it = sorted.iterator(); it.hasNext();)\n      ranks.put(it.next(), ++rank);\n    return ranks;\n  }\n\n  private void add(int num, List<Integer> arr, FenwickTree tree, Map<Integer, Integer> ranks) {\n    arr.add(num);\n    tree.update(ranks.get(num), 1);\n  };\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class FenwickTree:\n  def __init__(self, n: int):\n    self.sums = [0] * (n + 1)\n\n  def update(self, i: int, delta: int) -> None:\n    while i < len(self.sums):\n      self.sums[i] += delta\n      i += FenwickTree.lowbit(i)\n\n  def get(self, i: int) -> int:\n    summ = 0\n    while i > 0:\n      summ += self.sums[i]\n      i -= FenwickTree.lowbit(i)\n    return summ\n\n  @staticmethod\n  def lowbit(i: int) -> int:\n    return i & -i\n\n\nclass Solution:\n  def resultArray(self, nums: List[int]) -> List[int]:\n    arr1 = []\n    arr2 = []\n    ranks = self._getRanks(nums)\n    tree1 = FenwickTree(len(ranks))\n    tree2 = FenwickTree(len(ranks))\n\n    def add(num: int, arr: List[int], tree: FenwickTree) -> None:\n      arr.append(num)\n      tree.update(ranks[num], 1)\n\n    add(nums[0], arr1, tree1)\n    add(nums[1], arr2, tree2)\n\n    for i in range(2, len(nums)):\n      greaterCount1 = len(arr1) - tree1.get(ranks[nums[i]])\n      greaterCount2 = len(arr2) - tree2.get(ranks[nums[i]])\n      if greaterCount1 > greaterCount2:\n        add(nums[i], arr1, tree1)\n      elif greaterCount1 < greaterCount2:\n        add(nums[i], arr2, tree2)\n      elif len(arr1) > len(arr2):\n        add(nums[i], arr2, tree2)\n      else:\n        add(nums[i], arr1, tree1)\n\n    return arr1 + arr2\n\n  def _getRanks(self, nums: List[int]) -> Dict[int, int]:\n    ranks = collections.Counter()\n    rank = 0\n    for num in sorted(set(nums)):\n      rank += 1\n      ranks[num] = rank\n    return ranks\n",
                "lang_text": "py"
            }
        }
    }
}