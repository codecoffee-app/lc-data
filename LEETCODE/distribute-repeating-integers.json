{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1655",
            "title": "Distribute Repeating Integers",
            "titleSlug": "distribute-repeating-integers",
            "content": "<p>You are given an array of <code>n</code> integers, <code>nums</code>, where there are at most <code>50</code> unique values in the array. You are also given an array of <code>m</code> customer order quantities, <code>quantity</code>, where <code>quantity[i]</code> is the amount of integers the <code>i<sup>th</sup></code> customer ordered. Determine if it is possible to distribute <code>nums</code> such that:</p>\n\n<ul>\n\t<li>The <code>i<sup>th</sup></code> customer gets <strong>exactly</strong> <code>quantity[i]</code> integers,</li>\n\t<li>The integers the <code>i<sup>th</sup></code> customer gets are <strong>all equal</strong>, and</li>\n\t<li>Every customer is satisfied.</li>\n</ul>\n\n<p>Return <code>true</code><em> if it is possible to distribute </em><code>nums</code><em> according to the above conditions</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4], quantity = [2]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The 0<sup>th</sup> customer cannot be given two different integers.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,3], quantity = [2]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The 0<sup>th</sup> customer is given [3,3]. The integers [1,2] are not used.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2,2], quantity = [2,2]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The 0<sup>th</sup> customer is given [1,1], and the 1st customer is given [2,2].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>m == quantity.length</code></li>\n\t<li><code>1 &lt;= m &lt;= 10</code></li>\n\t<li><code>1 &lt;= quantity[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>There are at most <code>50</code> unique values in <code>nums</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 392,
            "dislikes": 22,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.2K\", \"totalSubmission\": \"33.6K\", \"totalAcceptedRaw\": 13193, \"totalSubmissionRaw\": 33608, \"acRate\": \"39.3%\"}",
            "hints": [
                "Count the frequencies of each number. For example, if nums = [4,4,5,5,5], frequencies = [2,3].",
                "Each customer wants all of their numbers to be the same. This means that each customer will be assigned to one number.",
                "Use dynamic programming. Iterate through the numbers' frequencies, and choose some subset of customers to be assigned to this number."
            ],
            "rephrased": {
                "body": "Given an array `nums` of `n` integers, containing at most 50 unique values, and an array `quantity` of `m` customer order quantities, determine if it's possible to distribute the integers in `nums` such that each customer receives exactly their requested quantity of a single, identical integer.  Each customer must receive a set of the same integer repeated `quantity[i]` times, and all customer orders must be fulfilled.",
                "constraints": [
                    "n == nums.length",
                    "1 <= n <= 10^5",
                    "1 <= nums[i] <= 1000",
                    "m == quantity.length",
                    "1 <= m <= 10",
                    "1 <= quantity[i] <= 10^5",
                    "There are at most 50 unique values in nums."
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3,4], quantity = [2]",
                        "output": "false",
                        "explanation": "It's impossible to give the customer two integers that are the same because all integers in `nums` are unique. Therefore, the 0th customer cannot be satisfied."
                    },
                    {
                        "input": "nums = [1,2,3,3], quantity = [2]",
                        "output": "true",
                        "explanation": "The customer's order can be satisfied by giving them the integers [3,3]. The integers [1,2] are not used."
                    },
                    {
                        "input": "nums = [1,1,2,2], quantity = [2,2]",
                        "output": "true",
                        "explanation": "The 0th customer is given [1,1], and the 1st customer is given [2,2]. Both customer orders are fulfilled."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Count the frequencies of each number. For example, if nums = [4,4,5,5,5], frequencies = [2,3].",
            "Each customer wants all of their numbers to be the same. This means that each customer will be assigned to one number.",
            "Use dynamic programming. Iterate through the numbers' frequencies, and choose some subset of customers to be assigned to this number."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ]
    }
}