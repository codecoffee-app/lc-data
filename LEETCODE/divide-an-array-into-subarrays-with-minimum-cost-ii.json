{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3013",
            "title": "Divide an Array Into Subarrays With Minimum Cost II",
            "titleSlug": "divide-an-array-into-subarrays-with-minimum-cost-ii",
            "content": "<p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>, and two <strong>positive</strong> integers <code>k</code> and <code>dist</code>.</p>\n\n<p>The <strong>cost</strong> of an array is the value of its <strong>first</strong> element. For example, the cost of <code>[1,2,3]</code> is <code>1</code> while the cost of <code>[3,4,1]</code> is <code>3</code>.</p>\n\n<p>You need to divide <code>nums</code> into <code>k</code> <strong>disjoint contiguous </strong><span data-keyword=\"subarray-nonempty\">subarrays</span>, such that the difference between the starting index of the <strong>second</strong> subarray and the starting index of the <code>kth</code> subarray should be <strong>less than or equal to</strong> <code>dist</code>. In other words, if you divide <code>nums</code> into the subarrays <code>nums[0..(i<sub>1</sub> - 1)], nums[i<sub>1</sub>..(i<sub>2</sub> - 1)], ..., nums[i<sub>k-1</sub>..(n - 1)]</code>, then <code>i<sub>k-1</sub> - i<sub>1</sub> &lt;= dist</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible sum of the cost of these</em> <em>subarrays</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,6,4,2], k = 3, dist = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because i<sub>k-1</sub> - i<sub>1</sub> is 5 - 2 = 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,1,2,2,2,1], k = 4, dist = 3\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because i<sub>k-1</sub> - i<sub>1</sub> is 3 - 1 = 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 = 15.\nThe division [10], [1], [2,2,2], and [1] is not valid, because the difference between i<sub>k-1</sub> and i<sub>1</sub> is 5 - 1 = 4, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,8,18,9], k = 3, dist = 1\n<strong>Output:</strong> 36\n<strong>Explanation:</strong> The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because i<sub>k-1</sub> - i<sub>1</sub> is 2 - 1 = 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36.\nThe division [10], [8,18], and [9] is not valid, because the difference between i<sub>k-1</sub> and i<sub>1</sub> is 3 - 1 = 2, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>3 &lt;= k &lt;= n</code></li>\n\t<li><code>k - 2 &lt;= dist &lt;= n - 2</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 108,
            "dislikes": 15,
            "similarQuestions": "[{\"title\": \"Minimum Cost to Cut a Stick\", \"titleSlug\": \"minimum-cost-to-cut-a-stick\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Split an Array\", \"titleSlug\": \"minimum-cost-to-split-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.7K\", \"totalSubmission\": \"14.9K\", \"totalAcceptedRaw\": 4737, \"totalSubmissionRaw\": 14883, \"acRate\": \"31.8%\"}",
            "hints": [
                "For each <code>i > 0</code>, try each <code>nums[i]</code> as the first element of the second subarray. We need to find the sum of <code>k - 2</code> smallest values in the index range <code>[i + 1, min(i + dist, n - 1)]</code>.",
                "Typically, we use a max heap to maintain the top <code>k - 2</code> smallest values dynamically. Here we also have a sliding window, which is the index range <code>[i + 1, min(i + dist, n - 1)]</code>. We can use another min heap to put unselected values for future use.",
                "Update the two heaps when iteration over <code>i</code>. Ordered/Tree sets are also a good choice since we have to delete elements.",
                "If the max heap\u2019s size is less than <code>k - 2</code>, use the min heap\u2019s value to fill it. If the maximum value in the max heap is larger than the smallest value in the min heap, swap them in the two heaps."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` of integers with length `n`, and two positive integers `k` and `dist`, divide `nums` into `k` disjoint contiguous subarrays. The cost of an array is the value of its first element.  The difference between the starting index of the second subarray and the starting index of the `k`th subarray should be less than or equal to `dist`.  That is, if the division is `nums[0..(i1 - 1)], nums[i1..(i2 - 1)], ..., nums[ik-1..(n - 1)]`, then `ik-1 - i1 <= dist`.  Return the minimum possible sum of the costs of these subarrays.",
                "constraints": [
                    "3 <= n <= 10^5",
                    "1 <= nums[i] <= 10^9",
                    "3 <= k <= n",
                    "k - 2 <= dist <= n - 2"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,3,2,6,4,2], k = 3, dist = 3",
                        "output": "5",
                        "explanation": "The optimal division is [1,3], [2,6,4], and [2]. The difference between the start indices of the second and third subarrays is 5 - 2 = 3, which satisfies the condition. The total cost is 1 + 2 + 2 = 5."
                    },
                    {
                        "input": "nums = [10,1,2,2,2,1], k = 4, dist = 3",
                        "output": "15",
                        "explanation": "The optimal division is [10], [1], [2], and [2,2,1]. The difference between the start indices of the second and fourth subarrays is 3 - 1 = 2, which satisfies the condition. The total cost is 10 + 1 + 2 + 2 = 15."
                    },
                    {
                        "input": "nums = [10,8,18,9], k = 3, dist = 1",
                        "output": "36",
                        "explanation": "The optimal division is [10], [8], and [18,9]. The difference between the start indices of the second and third subarrays is 2 - 1 = 1, which satisfies the condition. The total cost is 10 + 8 + 18 = 36."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-cut-a-stick",
                "title": "Minimum Cost to Cut a Stick",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-split-an-array",
                "title": "Minimum Cost to Split an Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each <code>i > 0</code>, try each <code>nums[i]</code> as the first element of the second subarray. We need to find the sum of <code>k - 2</code> smallest values in the index range <code>[i + 1, min(i + dist, n - 1)]</code>.",
            "Typically, we use a max heap to maintain the top <code>k - 2</code> smallest values dynamically. Here we also have a sliding window, which is the index range <code>[i + 1, min(i + dist, n - 1)]</code>. We can use another min heap to put unselected values for future use.",
            "Update the two heaps when iteration over <code>i</code>. Ordered/Tree sets are also a good choice since we have to delete elements.",
            "If the max heap\u2019s size is less than <code>k - 2</code>, use the min heap\u2019s value to fill it. If the maximum value in the max heap is larger than the smallest value in the min heap, swap them in the two heaps."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ]
    }
}