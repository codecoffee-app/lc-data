{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2406",
            "title": "Divide Intervals Into Minimum Number of Groups",
            "titleSlug": "divide-intervals-into-minimum-number-of-groups",
            "content": "<p>You are given a 2D integer array <code>intervals</code> where <code>intervals[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> represents the <strong>inclusive</strong> interval <code>[left<sub>i</sub>, right<sub>i</sub>]</code>.</p>\n\n<p>You have to divide the intervals into one or more <strong>groups</strong> such that each interval is in <strong>exactly</strong> one group, and no two intervals that are in the same group <strong>intersect</strong> each other.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of groups you need to make</em>.</p>\n\n<p>Two intervals <strong>intersect</strong> if there is at least one common number between them. For example, the intervals <code>[1, 5]</code> and <code>[5, 8]</code> intersect.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can divide the intervals into the following groups:\n- Group 1: [1, 5], [6, 8].\n- Group 2: [2, 3], [5, 10].\n- Group 3: [1, 10].\nIt can be proven that it is not possible to divide the intervals into fewer than 3 groups.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[5,6],[8,10],[11,13]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> None of the intervals overlap, so we can put all of them in one group.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>1 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 740,
            "dislikes": 10,
            "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Frogs Croaking\", \"titleSlug\": \"minimum-number-of-frogs-croaking\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Average Height of Buildings in Each Segment\", \"titleSlug\": \"average-height-of-buildings-in-each-segment\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.5K\", \"totalSubmission\": \"52.5K\", \"totalAcceptedRaw\": 24460, \"totalSubmissionRaw\": 52495, \"acRate\": \"46.6%\"}",
            "hints": [
                "Can you find a different way to describe the question?",
                "The minimum number of groups we need is equivalent to the maximum number of intervals that overlap at some point. How can you find that?"
            ],
            "rephrased": {
                "body": "Given a 2D integer array `intervals`, where `intervals[i] = [left_i, right_i]` represents a closed interval `[left_i, right_i]`, you need to divide these intervals into one or more groups.  Each interval must belong to exactly one group, and no two intervals within the same group can overlap.  The goal is to determine the minimum number of groups required to satisfy these conditions.  Two intervals are considered to overlap if they share at least one common point.",
                "constraints": [
                    "1 <= intervals.length <= 10^5",
                    "intervals[i].length == 2",
                    "1 <= left_i <= right_i <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[[5,10],[6,8],[1,5],[2,3],[1,10]]",
                        "output": "3",
                        "explanation": "The intervals can be divided into three groups: Group 1: [1, 5], [6, 8]; Group 2: [2, 3], [5, 10]; Group 3: [1, 10]. It is impossible to divide them into fewer groups."
                    },
                    {
                        "input": "[[1,3],[5,6],[8,10],[11,13]]",
                        "output": "1",
                        "explanation": "Since none of the intervals overlap, all intervals can be placed in a single group."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "merge-intervals",
                "title": "Merge Intervals",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-number-of-frogs-croaking",
                "title": "Minimum Number of Frogs Croaking",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "average-height-of-buildings-in-each-segment",
                "title": "Average Height of Buildings in Each Segment",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Can you find a different way to describe the question?",
            "The minimum number of groups we need is equivalent to the maximum number of intervals that overlap at some point. How can you find that?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Similar to 253. Meeting Rooms II\n  int minGroups(vector<vector<int>>& intervals) {\n    // Store `right`s.\n    priority_queue<int, vector<int>, greater<>> minHeap;\n\n    std::ranges::sort(intervals);\n\n    for (const vector<int>& interval : intervals) {\n      if (!minHeap.empty() && interval[0] > minHeap.top())\n        minHeap.pop();  // No overlap, we can reuse the same group.\n      minHeap.push(interval[1]);\n    }\n\n    return minHeap.size();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 253. Meeting Rooms II\n  public int minGroups(int[][] intervals) {\n    // Store `right`s.\n    Queue<Integer> minHeap = new PriorityQueue<>((a, b) -> a - b);\n\n    Arrays.sort(intervals, (a, b) -> (a[0] - b[0]));\n\n    for (int[] interval : intervals) {\n      if (!minHeap.isEmpty() && interval[0] > minHeap.peek())\n        minHeap.poll(); // No overlap, we can reuse the same group.\n      minHeap.offer(interval[1]);\n    }\n\n    return minHeap.size();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Similar to 253. Meeting Rooms II\n  def minGroups(self, intervals: List[List[int]]) -> int:\n    minHeap = []  # Store `right`s.\n\n    for left, right in sorted(intervals):\n      if minHeap and left > minHeap[0]:\n        # No overlap, we can reuse the same group.\n        heapq.heappop(minHeap)\n      heapq.heappush(minHeap, right)\n\n    return len(minHeap)\n",
                "lang_text": "py"
            }
        }
    }
}