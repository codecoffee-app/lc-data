{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2493",
            "title": "Divide Nodes Into the Maximum Number of Groups",
            "titleSlug": "divide-nodes-into-the-maximum-number-of-groups",
            "content": "<p>You are given a positive integer <code>n</code> representing the number of nodes in an <strong>undirected</strong> graph. The nodes are labeled from <code>1</code> to <code>n</code>.</p>\n\n<p>You are also given a 2D integer array <code>edges</code>, where <code>edges[i] = [a<sub>i, </sub>b<sub>i</sub>]</code> indicates that there is a <strong>bidirectional</strong> edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>. <strong>Notice</strong> that the given graph may be disconnected.</p>\n\n<p>Divide the nodes of the graph into <code>m</code> groups (<strong>1-indexed</strong>) such that:</p>\n\n<ul>\n\t<li>Each node in the graph belongs to exactly one group.</li>\n\t<li>For every pair of nodes in the graph that are connected by an edge <code>[a<sub>i, </sub>b<sub>i</sub>]</code>, if <code>a<sub>i</sub></code> belongs to the group with index <code>x</code>, and <code>b<sub>i</sub></code> belongs to the group with index <code>y</code>, then <code>|y - x| = 1</code>.</li>\n</ul>\n\n<p>Return <em>the maximum number of groups (i.e., maximum </em><code>m</code><em>) into which you can divide the nodes</em>. Return <code>-1</code> <em>if it is impossible to group the nodes with the given conditions</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/13/example1.png\" style=\"width: 352px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> As shown in the image we:\n- Add node 5 to the first group.\n- Add node 1 to the second group.\n- Add nodes 2 and 4 to the third group.\n- Add nodes 3 and 6 to the fourth group.\nWe can see that every edge is satisfied.\nIt can be shown that that if we create a fifth group and move any node from the third or fourth group to it, at least on of the edges will not be satisfied.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, edges = [[1,2],[2,3],[3,1]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> If we add node 1 to the first group, node 2 to the second group, and node 3 to the third group to satisfy the first two edges, we can see that the third edge will not be satisfied.\nIt can be shown that no grouping is possible.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= edges.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>There is at most one edge between any pair of vertices.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 378,
            "dislikes": 19,
            "similarQuestions": "[{\"title\": \"Binary Tree Level Order Traversal\", \"titleSlug\": \"binary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Is Graph Bipartite?\", \"titleSlug\": \"is-graph-bipartite\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shortest Cycle in a Graph\", \"titleSlug\": \"shortest-cycle-in-a-graph\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.9K\", \"totalSubmission\": \"18.2K\", \"totalAcceptedRaw\": 6895, \"totalSubmissionRaw\": 18241, \"acRate\": \"37.8%\"}",
            "hints": [
                "If the graph is not bipartite, it is not possible to group the nodes.",
                "Notice that we can solve the problem for each connected component independently, and the final answer will be just the sum of the maximum number of groups in each component.",
                "Finally, to solve the problem for each connected component, we can notice that if for some node v we fix its position to be in the leftmost group, then we can also evaluate the position of every other node. That position is the depth of the node in a bfs tree after rooting at node v."
            ],
            "rephrased": {
                "body": "You are given a positive integer `n` representing the number of nodes in an undirected graph. The nodes are labeled from 1 to `n`. You are also given a 2D integer array `edges`, where `edges[i] = [a_i, b_i]` indicates that there is a bidirectional edge between nodes `a_i` and `b_i`.  Note that the given graph may be disconnected.  The goal is to divide the nodes of the graph into `m` groups (1-indexed) such that:  1. Each node in the graph belongs to exactly one group. 2. For every pair of nodes connected by an edge `[a_i, b_i]`, if `a_i` is in group `x` and `b_i` is in group `y`, then `|y - x| = 1`.  Return the maximum number of groups (`m`) possible. If it's impossible to group the nodes with the given conditions, return -1.",
                "constraints": [
                    "1 <= n <= 500",
                    "1 <= edges.length <= 10^4",
                    "edges[i].length == 2",
                    "1 <= a_i, b_i <= n",
                    "a_i != b_i",
                    "There is at most one edge between any pair of vertices."
                ],
                "testcases": [
                    {
                        "input": "n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]",
                        "output": "4",
                        "explanation": "The nodes can be divided into 4 groups. Node 5 in group 1, node 1 in group 2, nodes 2 and 4 in group 3, and nodes 3 and 6 in group 4.  This arrangement satisfies the condition that for any edge (a, b), the absolute difference between the groups of a and b is 1. No more than 4 groups can be formed while satisfying this constraint."
                    },
                    {
                        "input": "n = 3, edges = [[1,2],[2,3],[3,1]]",
                        "output": "-1",
                        "explanation": "It's impossible to group the nodes while satisfying the condition that for any edge (a, b), the absolute difference between the groups of a and b is 1. If node 1 is in group 1 and node 2 is in group 2 to satisfy the first edge, then node 3 must be in either group 1 or group 3 to satisfy the second edge. If node 3 is in group 1, the third edge between nodes 1 and 3 is not satisfied. If node 3 is in group 3, the third edge between nodes 1 and 3 is not satisfied either."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "binary-tree-level-order-traversal",
                "title": "Binary Tree Level Order Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "is-graph-bipartite",
                "title": "Is Graph Bipartite?",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "shortest-cycle-in-a-graph",
                "title": "Shortest Cycle in a Graph",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If the graph is not bipartite, it is not possible to group the nodes.",
            "Notice that we can solve the problem for each connected component independently, and the final answer will be just the sum of the maximum number of groups in each component.",
            "Finally, to solve the problem for each connected component, we can notice that if for some node v we fix its position to be in the leftmost group, then we can also evaluate the position of every other node. That position is the depth of the node in a bfs tree after rooting at node v."
        ],
        "relatedTopics": [
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n};\n\nclass Solution {\n public:\n  int magnificentSets(int n, vector<vector<int>>& edges) {\n    vector<vector<int>> graph(n);\n    UnionFind uf(n);\n    unordered_map<int, int> rootToGroupSize;\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0] - 1;\n      const int v = edge[1] - 1;\n      graph[u].push_back(v);\n      graph[v].push_back(u);\n      uf.unionByRank(u, v);\n    }\n\n    for (int i = 0; i < n; ++i) {\n      const int newGroupSize = bfs(graph, i);\n      if (newGroupSize == -1)\n        return -1;\n      const int root = uf.find(i);\n      auto& groupSize = rootToGroupSize[root];\n      groupSize = max(groupSize, newGroupSize);\n    }\n\n    int ans = 0;\n    for (const auto& [_, groupSize] : rootToGroupSize)\n      ans += groupSize;\n\n    return ans;\n  }\n\n private:\n  int bfs(const vector<vector<int>>& graph, int u) {\n    int step = 0;\n    queue<int> q{{u}};\n    unordered_map<int, int> nodeToStep{{u, 1}};\n\n    while (!q.empty()) {\n      ++step;\n      for (int sz = q.size(); sz > 0; --sz) {\n        const int u = q.front();\n        q.pop();\n        for (const int v : graph[u]) {\n          if (!nodeToStep.count(v)) {\n            q.push(v);\n            nodeToStep[v] = step + 1;\n          } else if (nodeToStep[v] == step) {\n            // There is a odd number edges cycle.\n            return -1;\n          }\n        }\n      }\n    }\n\n    return step;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}