{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2491",
            "title": "Divide Players Into Teams of Equal Skill",
            "titleSlug": "divide-players-into-teams-of-equal-skill",
            "content": "<p>You are given a positive integer array <code>skill</code> of <strong>even</strong> length <code>n</code> where <code>skill[i]</code> denotes the skill of the <code>i<sup>th</sup></code> player. Divide the players into <code>n / 2</code> teams of size <code>2</code> such that the total skill of each team is <strong>equal</strong>.</p>\n\n<p>The <strong>chemistry</strong> of a team is equal to the <strong>product</strong> of the skills of the players on that team.</p>\n\n<p>Return <em>the sum of the <strong>chemistry</strong> of all the teams, or return </em><code>-1</code><em> if there is no way to divide the players into teams such that the total skill of each team is equal.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> skill = [3,2,5,1,3,4]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> \nDivide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.\nThe sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> skill = [3,4]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> \nThe two players form a team with a total skill of 7.\nThe chemistry of the team is 3 * 4 = 12.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> skill = [1,1,2,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> \nThere is no way to divide the players into teams such that the total skill of each team is equal.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= skill.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>skill.length</code> is even.</li>\n\t<li><code>1 &lt;= skill[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 454,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"Minimum Moves to Equal Array Elements\", \"titleSlug\": \"minimum-moves-to-equal-array-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Max Number of K-Sum Pairs\", \"titleSlug\": \"max-number-of-k-sum-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"31.2K\", \"totalSubmission\": \"52.8K\", \"totalAcceptedRaw\": 31210, \"totalSubmissionRaw\": 52833, \"acRate\": \"59.1%\"}",
            "hints": [
                "Try sorting the skill array.",
                "It is always optimal to pair the weakest available player with the strongest available player."
            ],
            "rephrased": {
                "body": "Given an array `skill` of positive integers representing the skills of players, divide the players into teams of two such that the total skill of each team is equal. The chemistry of a team is the product of the skills of its members. Return the sum of the chemistries of all teams, or -1 if a valid division is impossible.",
                "constraints": [
                    "2 <= skill.length <= 10^5",
                    "skill.length is even.",
                    "1 <= skill[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[3,2,5,1,3,4]",
                        "output": "22",
                        "explanation": "One possible division into teams with equal skill sum is (1, 5), (2, 4), and (3, 3), each with a skill sum of 6. The sum of the team chemistries is (1 * 5) + (2 * 4) + (3 * 3) = 5 + 8 + 9 = 22."
                    },
                    {
                        "input": "[3,4]",
                        "output": "12",
                        "explanation": "The two players form a team with a total skill of 7. The team chemistry is 3 * 4 = 12."
                    },
                    {
                        "input": "[1,1,2,3]",
                        "output": "-1",
                        "explanation": "It is impossible to divide the players into teams such that the total skill of each team is equal."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-moves-to-equal-array-elements",
                "title": "Minimum Moves to Equal Array Elements",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "max-number-of-k-sum-pairs",
                "title": "Max Number of K-Sum Pairs",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try sorting the skill array.",
            "It is always optimal to pair the weakest available player with the strongest available player."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long dividePlayers(vector<int>& skill) {\n    const int n = skill.size();\n    const int teamSkill = accumulate(skill.begin(), skill.end(), 0) / (n / 2);\n    long long ans = 0;\n    unordered_map<int, int> count;\n\n    for (const int s : skill)\n      ++count[s];\n\n    for (const auto& [s, freq] : count) {\n      const int requiredSkill = teamSkill - s;\n      if (const auto it = count.find(requiredSkill);\n          it == count.cend() || it->second != freq)\n        return -1;\n      ans += static_cast<long long>(s) * requiredSkill * freq;\n    }\n\n    return ans / 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long dividePlayers(int[] skill) {\n    final int n = skill.length;\n    final int teamSkill = Arrays.stream(skill).sum() / (n / 2);\n    long ans = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (final int s : skill)\n      count.merge(s, 1, Integer::sum);\n\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n      final int s = entry.getKey();\n      final int freq = entry.getValue();\n      final int requiredSkill = teamSkill - s;\n      if (count.getOrDefault(requiredSkill, 0) != freq)\n        return -1;\n      ans += (long) s * requiredSkill * freq;\n    }\n\n    return ans / 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def dividePlayers(self, skill: List[int]) -> int:\n    n = len(skill)\n    teamSkill = sum(skill) // (n // 2)\n    ans = 0\n    count = collections.Counter(skill)\n\n    for s, freq in count.items():\n      requiredSkill = teamSkill - s\n      if count[requiredSkill] != freq:\n        return -1\n      ans += s * requiredSkill * freq\n\n    return ans // 2\n",
                "lang_text": "py"
            }
        }
    }
}