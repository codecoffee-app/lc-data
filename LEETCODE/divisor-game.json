{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1025",
            "title": "Divisor Game",
            "titleSlug": "divisor-game",
            "content": "<p>Alice and Bob take turns playing a game, with Alice starting first.</p>\n\n<p>Initially, there is a number <code>n</code> on the chalkboard. On each player&#39;s turn, that player makes a move consisting of:</p>\n\n<ul>\n\t<li>Choosing any <code>x</code> with <code>0 &lt; x &lt; n</code> and <code>n % x == 0</code>.</li>\n\t<li>Replacing the number <code>n</code> on the chalkboard with <code>n - x</code>.</li>\n</ul>\n\n<p>Also, if a player cannot make a move, they lose the game.</p>\n\n<p>Return <code>true</code> <em>if and only if Alice wins the game, assuming both players play optimally</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Alice chooses 1, and Bob has no more moves.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Alice chooses 1, Bob chooses 1, and Alice has no more moves.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2073,
            "dislikes": 4053,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Brainteaser",
                    "slug": "brainteaser"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"234.4K\", \"totalSubmission\": \"343.3K\", \"totalAcceptedRaw\": 234415, \"totalSubmissionRaw\": 343315, \"acRate\": \"68.3%\"}",
            "hints": [
                "If the current number is even, we can always subtract a 1 to make it odd.  If the current number is odd, we must subtract an odd number to make it even."
            ],
            "rephrased": {
                "body": "Alice and Bob are playing a game. Starting with a number 'n' on a chalkboard, players alternate turns. A player chooses a number 'x' such that 0 < x < n and n is divisible by x. They then replace 'n' with 'n - x'. A player loses if they cannot make a move. Determine if Alice wins, assuming optimal play.",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "true",
                        "explanation": "Alice chooses 1 (2 % 1 == 0 and 0 < 1 < 2). The board now has 2 - 1 = 1. Bob cannot make a move because there's no x such that 0 < x < 1. Alice wins."
                    },
                    {
                        "input": "3",
                        "output": "false",
                        "explanation": "Alice chooses 1 (3 % 1 == 0 and 0 < 1 < 3). The board now has 3 - 1 = 2. Bob chooses 1 (2 % 1 == 0 and 0 < 1 < 2). The board now has 2 - 1 = 1. Alice cannot make a move because there's no x such that 0 < x < 1. Bob wins."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "If the current number is even, we can always subtract a 1 to make it odd.  If the current number is odd, we must subtract an odd number to make it even."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Brainteaser",
                "slug": "brainteaser"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool divisorGame(int n) {\n    return n % 2 == 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean divisorGame(int n) {\n    return n % 2 == 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def divisorGame(self, n: int) -> bool:\n    return n % 2 == 0\n",
                "lang_text": "py"
            }
        }
    }
}