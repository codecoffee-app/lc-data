{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "790",
            "title": "Domino and Tromino Tiling",
            "titleSlug": "domino-and-tromino-tiling",
            "content": "<p>You have two types of tiles: a <code>2 x 1</code> domino shape and a tromino shape. You may rotate these shapes.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/15/lc-domino.jpg\" style=\"width: 362px; height: 195px;\" />\n<p>Given an integer n, return <em>the number of ways to tile an</em> <code>2 x n</code> <em>board</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/15/lc-domino1.jpg\" style=\"width: 500px; height: 226px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The five different ways are show above.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3266,
            "dislikes": 1044,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"117K\", \"totalSubmission\": \"228.6K\", \"totalAcceptedRaw\": 117020, \"totalSubmissionRaw\": 228571, \"acRate\": \"51.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given two types of tiles: a 2 x 1 domino and a tromino (L-shape). These shapes can be rotated. Determine the number of ways to completely tile a 2 x n board using these tiles. Return the answer modulo 10^9 + 7.",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "5",
                        "explanation": "There are 5 distinct ways to tile a 2x3 board using dominoes and trominoes."
                    },
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numTilings(int n) {\n    constexpr int kMod = 1'000'000'007;\n    vector<long> dp(1001, 0);\n    dp[1] = 1;\n    dp[2] = 2;\n    dp[3] = 5;\n\n    for (int i = 4; i <= n; ++i)\n      dp[i] = (2 * dp[i - 1] + dp[i - 3]) % kMod;\n\n    return dp[n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numTilings(int n) {\n    final int kMod = 1_000_000_007;\n    long[] dp = new long[1001];\n    dp[1] = 1;\n    dp[2] = 2;\n    dp[3] = 5;\n\n    for (int i = 4; i <= n; ++i)\n      dp[i] = (2 * dp[i - 1] + dp[i - 3]) % kMod;\n\n    return (int) dp[n];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numTilings(self, n: int) -> int:\n    kMod = 1_000_000_007\n    dp = [0, 1, 2, 5] + [0] * 997\n\n    for i in range(4, n + 1):\n      dp[i] = 2 * dp[i - 1] + dp[i - 3]\n\n    return dp[n] % kMod\n",
                "lang_text": "py"
            }
        }
    }
}