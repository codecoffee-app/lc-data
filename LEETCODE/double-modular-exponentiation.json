{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2961",
            "title": "Double Modular Exponentiation",
            "titleSlug": "double-modular-exponentiation",
            "content": "<p>You are given a <strong>0-indexed</strong> 2D array <code>variables</code> where <code>variables[i] = [a<sub>i</sub>, b<sub>i</sub>, c<sub>i,</sub> m<sub>i</sub>]</code>, and an integer <code>target</code>.</p>\n\n<p>An index <code>i</code> is <strong>good</strong> if the following formula holds:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; variables.length</code></li>\n\t<li><code>((a<sub>i</sub><sup>b<sub>i</sub></sup> % 10)<sup>c<sub>i</sub></sup>) % m<sub>i</sub> == target</code></li>\n</ul>\n\n<p>Return <em>an array consisting of <strong>good</strong> indices in <strong>any order</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> variables = [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target = 2\n<strong>Output:</strong> [0,2]\n<strong>Explanation:</strong> For each index i in the variables array:\n1) For the index 0, variables[0] = [2,3,3,10], (2<sup>3</sup> % 10)<sup>3</sup> % 10 = 2.\n2) For the index 1, variables[1] = [3,3,3,1], (3<sup>3</sup> % 10)<sup>3</sup> % 1 = 0.\n3) For the index 2, variables[2] = [6,1,1,4], (6<sup>1</sup> % 10)<sup>1</sup> % 4 = 2.\nTherefore we return [0,2] as the answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> variables = [[39,3,1000,1000]], target = 17\n<strong>Output:</strong> []\n<strong>Explanation:</strong> For each index i in the variables array:\n1) For the index 0, variables[0] = [39,3,1000,1000], (39<sup>3</sup> % 10)<sup>1000</sup> % 1000 = 1.\nTherefore we return [] as the answer.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= variables.length &lt;= 100</code></li>\n\t<li><code>variables[i] == [a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>, m<sub>i</sub>]</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>, m<sub>i</sub> &lt;= 10<sup>3</sup></code></li>\n\t<li><code><font face=\"monospace\">0 &lt;= target &lt;= 10<sup>3</sup></font></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 105,
            "dislikes": 16,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.3K\", \"totalSubmission\": \"42.5K\", \"totalAcceptedRaw\": 20275, \"totalSubmissionRaw\": 42539, \"acRate\": \"47.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given a 0-indexed 2D array `variables` where `variables[i] = [a_i, b_i, c_i, m_i]`, and an integer `target`.  An index `i` is considered 'good' if `((a_i^b_i % 10)^c_i) % m_i == target`.  Your task is to return a list of all good indices in any order.",
                "constraints": [
                    "1 <= variables.length <= 100",
                    "variables[i] == [a_i, b_i, c_i, m_i]",
                    "1 <= a_i, b_i, c_i, m_i <= 10^3",
                    "0 <= target <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "variables = [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target = 2",
                        "output": "[0,2]",
                        "explanation": "For the index 0, with variables[0] = [2,3,3,10], the calculation is (2^3 % 10)^3 % 10 = (8 % 10)^3 % 10 = 8^3 % 10 = 512 % 10 = 2, which matches the target. For the index 1, with variables[1] = [3,3,3,1], the calculation is (3^3 % 10)^3 % 1 = (27 % 10)^3 % 1 = 7^3 % 1 = 343 % 1 = 0, which does not match the target. For the index 2, with variables[2] = [6,1,1,4], the calculation is (6^1 % 10)^1 % 4 = (6 % 10)^1 % 4 = 6^1 % 4 = 6 % 4 = 2, which matches the target. Therefore, the good indices are 0 and 2."
                    },
                    {
                        "input": "variables = [[39,3,1000,1000]], target = 17",
                        "output": "[]",
                        "explanation": "For the index 0, with variables[0] = [39,3,1000,1000], the calculation is (39^3 % 10)^1000 % 1000 = (59319 % 10)^1000 % 1000 = 9^1000 % 1000 = 1, which does not match the target."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> getGoodIndices(vector<vector<int>>& variables, int target) {\n    vector<int> ans;\n    for (int i = 0; i < variables.size(); ++i) {\n      const int a = variables[i][0];\n      const int b = variables[i][1];\n      const int c = variables[i][2];\n      const int m = variables[i][3];\n      if (modPow(modPow(a, b, 10), c, m) == target)\n        ans.push_back(i);\n    }\n    return ans;\n  }\n\n private:\n  long modPow(long x, long n, int mod) {\n    if (n == 0)\n      return 1;\n    if (n % 2 == 1)\n      return x * modPow(x % mod, (n - 1), mod) % mod;\n    return modPow(x * x % mod, (n / 2), mod) % mod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> getGoodIndices(int[][] variables, int target) {\n    List<Integer> ans = new ArrayList<>();\n    for (int i = 0; i < variables.length; ++i) {\n      final int a = variables[i][0];\n      final int b = variables[i][1];\n      final int c = variables[i][2];\n      final int m = variables[i][3];\n      if (modPow(modPow(a, b, 10), c, m) == target)\n        ans.add(i);\n    }\n    return ans;\n  }\n\n  private long modPow(long x, long n, int mod) {\n    if (n == 0)\n      return 1;\n    if (n % 2 == 1)\n      return x * modPow(x % mod, (n - 1), mod) % mod;\n    return modPow(x * x % mod, (n / 2), mod) % mod;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getGoodIndices(self, variables: List[List[int]], target: int) -> List[int]:\n    return [i for i, (a, b, c, m) in enumerate(variables)\n            if pow(pow(a, b, 10), c, m) == target]\n",
                "lang_text": "py"
            }
        }
    }
}