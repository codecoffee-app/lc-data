{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3048",
            "title": "Earliest Second to Mark Indices I",
            "titleSlug": "earliest-second-to-mark-indices-i",
            "content": "<p>You are given two <strong>1-indexed</strong> integer arrays, <code>nums</code> and, <code>changeIndices</code>, having lengths <code>n</code> and <code>m</code>, respectively.</p>\n\n<p>Initially, all indices in <code>nums</code> are unmarked. Your task is to mark <strong>all</strong> indices in <code>nums</code>.</p>\n\n<p>In each second, <code>s</code>, in order from <code>1</code> to <code>m</code> (<strong>inclusive</strong>), you can perform <strong>one</strong> of the following operations:</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> in the range <code>[1, n]</code> and <strong>decrement</strong> <code>nums[i]</code> by <code>1</code>.</li>\n\t<li>If <code>nums[changeIndices[s]]</code> is <strong>equal</strong> to <code>0</code>, <strong>mark</strong> the index <code>changeIndices[s]</code>.</li>\n\t<li>Do nothing.</li>\n</ul>\n\n<p>Return <em>an integer denoting the <strong>earliest second</strong> in the range </em><code>[1, m]</code><em> when <strong>all</strong> indices in </em><code>nums</code><em> can be marked by choosing operations optimally, or </em><code>-1</code><em> if it is impossible.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,0], changeIndices = [2,2,2,2,3,2,2,1]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 1 and decrement nums[1] by one. nums becomes [1,2,0].\nSecond 2: Choose index 1 and decrement nums[1] by one. nums becomes [0,2,0].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [0,1,0].\nSecond 4: Choose index 2 and decrement nums[2] by one. nums becomes [0,0,0].\nSecond 5: Mark the index changeIndices[5], which is marking index 3, since nums[3] is equal to 0.\nSecond 6: Mark the index changeIndices[6], which is marking index 2, since nums[2] is equal to 0.\nSecond 7: Do nothing.\nSecond 8: Mark the index changeIndices[8], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 8th second.\nHence, the answer is 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3], changeIndices = [1,1,1,2,1,1,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 2 and decrement nums[2] by one. nums becomes [1,2].\nSecond 2: Choose index 2 and decrement nums[2] by one. nums becomes [1,1].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [1,0].\nSecond 4: Mark the index changeIndices[4], which is marking index 2, since nums[2] is equal to 0.\nSecond 5: Choose index 1 and decrement nums[1] by one. nums becomes [0,0].\nSecond 6: Mark the index changeIndices[6], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1], changeIndices = [2,2,2]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> In this example, it is impossible to mark all indices because index 1 isn&#39;t in changeIndices.\nHence, the answer is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= m == changeIndices.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= changeIndices[i] &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 169,
            "dislikes": 77,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.8K\", \"totalSubmission\": \"22.1K\", \"totalAcceptedRaw\": 7792, \"totalSubmissionRaw\": 22081, \"acRate\": \"35.3%\"}",
            "hints": [
                "Consider using binary search.",
                "Suppose the <code>answer <= x</code>; we can mark each index as late as possible. Namely, mark each index at the last occurrence in the array <code>changeIndices[1..x]</code>.",
                "When marking an index, which is the last occurrence at the second <code>i</code>, we check whether we have a sufficient number of decrement operations to mark all the previous indices whose last occurrences have already been marked, and the current index, i.e., <code>i - sum_of_marked_indices_values - cnt_of_marked_indices >= nums[changeIndices[i]]</code>.",
                "The answer is the earliest second when all indices can be marked after running the binary search or <code>-1</code> if there is no such second."
            ],
            "rephrased": {
                "body": "Given two 1-indexed integer arrays, `nums` and `changeIndices`, of lengths `n` and `m` respectively, the goal is to mark all indices in `nums`. Initially, all indices in `nums` are unmarked. In each second `s` from 1 to `m`, one of the following operations can be performed:\n\n1.  Decrement `nums[i]` by 1 for a chosen index `i` between 1 and `n`.\n2.  If `nums[changeIndices[s]]` is equal to 0, mark the index `changeIndices[s]`.\n3.  Do nothing.\n\nDetermine the earliest second when all indices in `nums` can be marked by choosing operations optimally. Return -1 if it is impossible.",
                "constraints": [
                    "1 <= n == nums.length <= 2000",
                    "0 <= nums[i] <= 10^9",
                    "1 <= m == changeIndices.length <= 2000",
                    "1 <= changeIndices[i] <= n"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,2,0], changeIndices = [2,2,2,2,3,2,2,1]",
                        "output": "8",
                        "explanation": "The earliest second to mark all indices is 8. Operations can be performed as follows:\n- Second 1: Decrement nums[1]. nums becomes [1,2,0].\n- Second 2: Decrement nums[1]. nums becomes [0,2,0].\n- Second 3: Decrement nums[2]. nums becomes [0,1,0].\n- Second 4: Decrement nums[2]. nums becomes [0,0,0].\n- Second 5: Mark index 3.\n- Second 6: Mark index 2.\n- Second 7: Do nothing.\n- Second 8: Mark index 1."
                    },
                    {
                        "input": "nums = [1,3], changeIndices = [1,1,1,2,1,1,1]",
                        "output": "6",
                        "explanation": "The earliest second to mark all indices is 6. Operations can be performed as follows:\n- Second 1: Decrement nums[2]. nums becomes [1,2].\n- Second 2: Decrement nums[2]. nums becomes [1,1].\n- Second 3: Decrement nums[2]. nums becomes [1,0].\n- Second 4: Mark index 2.\n- Second 5: Decrement nums[1]. nums becomes [0,0].\n- Second 6: Mark index 1."
                    },
                    {
                        "input": "nums = [0,1], changeIndices = [2,2,2]",
                        "output": "-1",
                        "explanation": "It is impossible to mark all indices because index 1 is not in changeIndices."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Consider using binary search.",
            "Suppose the <code>answer <= x</code>; we can mark each index as late as possible. Namely, mark each index at the last occurrence in the array <code>changeIndices[1..x]</code>.",
            "When marking an index, which is the last occurrence at the second <code>i</code>, we check whether we have a sufficient number of decrement operations to mark all the previous indices whose last occurrences have already been marked, and the current index, i.e., <code>i - sum_of_marked_indices_values - cnt_of_marked_indices >= nums[changeIndices[i]]</code>.",
            "The answer is the earliest second when all indices can be marked after running the binary search or <code>-1</code> if there is no such second."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int earliestSecondToMarkIndices(vector<int>& nums,\n                                  vector<int>& changeIndices) {\n    int l = 0;\n    int r = changeIndices.size() + 1;\n\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (canMark(nums, changeIndices, m))\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l <= changeIndices.size() ? l : -1;\n  }\n\n private:\n  // Returns true if all indices of `nums` can be marked within `second`.\n  bool canMark(const vector<int>& nums, const vector<int>& changeIndices,\n               int second) {\n    int numMarked = 0;\n    int decrement = 0;\n    // indexToLastSecond[i] := the last second to mark the index i\n    vector<int> indexToLastSecond(nums.size(), -1);\n\n    for (int i = 0; i < second; ++i)\n      indexToLastSecond[changeIndices[i] - 1] = i;\n\n    for (int i = 0; i < second; ++i) {\n      const int index = changeIndices[i] - 1;  // Convert to 0-indexed.\n      if (i == indexToLastSecond[index]) {\n        // Reach the last occurrence of the number.\n        // So, the current second will be used to mark the index.\n        if (nums[index] > decrement)\n          // The decrement is less than the number to be marked.\n          return false;\n        decrement -= nums[index];\n        ++numMarked;\n      } else {\n        ++decrement;\n      }\n    }\n\n    return numMarked == nums.size();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n    int l = 0;\n    int r = changeIndices.length + 1;\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (canMark(nums, changeIndices, m))\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l <= changeIndices.length ? l : -1;\n  }\n\n  // Returns true if all indices of `nums` can be marked within `second`.\n  private boolean canMark(int[] nums, int[] changeIndices, int second) {\n    int numMarked = 0;\n    int decrement = 0;\n    // indexToLastSecond[i] := the last second to mark the index i\n    int[] indexToLastSecond = new int[nums.length];\n    Arrays.fill(indexToLastSecond, -1);\n\n    for (int i = 0; i < second; ++i)\n      indexToLastSecond[changeIndices[i] - 1] = i;\n\n    for (int i = 0; i < second; ++i) {\n      final int index = changeIndices[i] - 1; // Convert to 0-indexed.\n      if (i == indexToLastSecond[index]) {\n        // Reach the last occurrence of the number.\n        // So, the current second will be used to mark the index.\n        if (nums[index] > decrement)\n          // The decrement is less than the number to be marked.\n          return false;\n        decrement -= nums[index];\n        ++numMarked;\n      } else {\n        ++decrement;\n      }\n    }\n\n    return numMarked == nums.length;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def earliestSecondToMarkIndices(self, nums: List[int], changeIndices: List[int]) -> int:\n    def canMark(second: int) -> bool:\n      \"\"\"\n      Returns True if all indices of `nums` can be marked within `second`.\n      \"\"\"\n      numMarked = 0\n      decrement = 0\n      indexToLastSecond = {}\n\n      for i in range(second):\n        indexToLastSecond[changeIndices[i] - 1] = i\n\n      for i in range(second):\n        index = changeIndices[i] - 1  # Convert to 0-indexed\n        if i == indexToLastSecond[index]:\n          # Reach the last occurrence of the number.\n          # So, the current second will be used to mark the index.\n          if nums[index] > decrement:\n            # The decrement is less than the number to be marked.\n            return False\n          decrement -= nums[index]\n          numMarked += 1\n        else:\n          decrement += 1\n\n      return numMarked == len(nums)\n\n    l = bisect.bisect_left(range(1, len(changeIndices) + 1), True,\n                           key=lambda m: canMark(m)) + 1\n    return l if l <= len(changeIndices) else -1\n",
                "lang_text": "py"
            }
        }
    }
}