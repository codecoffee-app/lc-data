{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3049",
            "title": "Earliest Second to Mark Indices II",
            "titleSlug": "earliest-second-to-mark-indices-ii",
            "content": "<p>You are given two <strong>1-indexed</strong> integer arrays, <code>nums</code> and, <code>changeIndices</code>, having lengths <code>n</code> and <code>m</code>, respectively.</p>\n\n<p>Initially, all indices in <code>nums</code> are unmarked. Your task is to mark <strong>all</strong> indices in <code>nums</code>.</p>\n\n<p>In each second, <code>s</code>, in order from <code>1</code> to <code>m</code> (<strong>inclusive</strong>), you can perform <strong>one</strong> of the following operations:</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> in the range <code>[1, n]</code> and <strong>decrement</strong> <code>nums[i]</code> by <code>1</code>.</li>\n\t<li>Set <code>nums[changeIndices[s]]</code> to any <strong>non-negative</strong> value.</li>\n\t<li>Choose an index <code>i</code> in the range <code>[1, n]</code>, where <code>nums[i]</code> is <strong>equal</strong> to <code>0</code>, and <strong>mark</strong> index <code>i</code>.</li>\n\t<li>Do nothing.</li>\n</ul>\n\n<p>Return <em>an integer denoting the <strong>earliest second</strong> in the range </em><code>[1, m]</code><em> when <strong>all</strong> indices in </em><code>nums</code><em> can be marked by choosing operations optimally, or </em><code>-1</code><em> if it is impossible.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,3], changeIndices = [1,3,2,2,2,2,3]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Set nums[changeIndices[1]] to 0. nums becomes [0,2,3].\nSecond 2: Set nums[changeIndices[2]] to 0. nums becomes [0,2,0].\nSecond 3: Set nums[changeIndices[3]] to 0. nums becomes [0,0,0].\nSecond 4: Mark index 1, since nums[1] is equal to 0.\nSecond 5: Mark index 2, since nums[2] is equal to 0.\nSecond 6: Mark index 3, since nums[3] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,2], changeIndices = [1,2,1,2,1,2,1,2]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Mark index 1, since nums[1] is equal to 0.\nSecond 2: Mark index 2, since nums[2] is equal to 0.\nSecond 3: Decrement index 4 by one. nums becomes [0,0,1,1].\nSecond 4: Decrement index 4 by one. nums becomes [0,0,1,0].\nSecond 5: Decrement index 3 by one. nums becomes [0,0,0,0].\nSecond 6: Mark index 3, since nums[3] is equal to 0.\nSecond 7: Mark index 4, since nums[4] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 7th second.\nHence, the answer is 7.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], changeIndices = [1,2,3]\n<strong>Output:</strong> -1\n<strong>Explanation: </strong>In this example, it can be shown that it is impossible to mark all indices, as we don&#39;t have enough seconds. \nHence, the answer is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= m == changeIndices.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= changeIndices[i] &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 72,
            "dislikes": 17,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"2.2K\", \"totalSubmission\": \"9.7K\", \"totalAcceptedRaw\": 2166, \"totalSubmissionRaw\": 9709, \"acRate\": \"22.3%\"}",
            "hints": [
                "We need at least <code>n</code> seconds, and at most <code>sum(nums[i]) + n</code> seconds.",
                "We can binary search the earliest second where all indices can be marked.",
                "If there is an operation where we change <code>nums[changeIndices[i]]</code> to a non-negative value, it is best for it to satisfy the following constraints:<ul>\r\n<li><code>nums[changeIndices[i]]</code> should not be equal to <code>0</code>.</li>\r\n<li><code>nums[changeIndices[i]]</code> should be changed to <code>0</code>.</li>\r\n<li>It should be the first position where <code>changeIndices[i]</code> occurs in <code>changeIndices</code>.</li>\r\n<li>There should be another second, <code>j</code>, where <code>changeIndices[i]</code> will be marked. <code>j</code> is in the range <code>[i + 1, m]</code>.</li>\r\n</ul>",
                "Let <code>time_needed = sum(nums[i]) + n</code>. To check if we can mark all indices at some second <code>x</code>, we need to make <code>time_needed <= x</code>, using non-negative change operations as described previously.",
                "Using a non-negative change operation on some <code>nums[changeIndices[i]]</code> that satisfies the constraints described previously reduces <code>time_needed</code> by <code>nums[changeIndices[i]] - 1</code>. So, we need to maximize the sum of <code>(nums[changeIndices[i]] - 1)</code> while ensuring that the non-negative change operations still satisfy the constraints.",
                "Maximizing the sum of <code>(nums[changeIndices[i]] - 1)</code> can be done greedily using a min-priority queue and going in reverse starting from second <code>x</code> to second <code>1</code>, maximizing the sum of the values in the priority queue and ensuring that for every non-negative change operation on <code>nums[changeIndices[i]]</code> chosen, there is another second <code>j</code> in the range <code>[i + 1, x]</code> where <code>changeIndices[i]</code> can be marked.",
                "The answer is the first value of <code>x</code> in the range <code>[1, m]</code> where it is possible to make <code>time_needed <= x</code>, or <code>-1</code> if there is no such second."
            ],
            "rephrased": {
                "body": "Given two 1-indexed integer arrays, `nums` and `changeIndices`, of lengths `n` and `m` respectively, the goal is to mark all indices in `nums`. Initially, all indices in `nums` are unmarked. For each second `s` from 1 to `m`, one of the following operations can be performed:\n\n1.  Decrement `nums[i]` by 1 for any `i` in the range `[1, n]`. \n2.  Set `nums[changeIndices[s]]` to any non-negative value.\n3.  Mark index `i` if `nums[i]` is equal to 0 for any `i` in the range `[1, n]`.\n4.  Do nothing.\n\nDetermine the earliest second within the range `[1, m]` at which all indices in `nums` can be marked using an optimal strategy. Return -1 if it's impossible to mark all indices.",
                "constraints": [
                    "1 <= n == nums.length <= 5000",
                    "0 <= nums[i] <= 10^9",
                    "1 <= m == changeIndices.length <= 5000",
                    "1 <= changeIndices[i] <= n"
                ],
                "testcases": [
                    {
                        "input": "nums = [3,2,3], changeIndices = [1,3,2,2,2,2,3]",
                        "output": "6",
                        "explanation": "The earliest second when all indices can be marked is 6. This can be achieved by strategically setting values in `nums` to 0 using `changeIndices` and then marking those indices."
                    },
                    {
                        "input": "nums = [0,0,1,2], changeIndices = [1,2,1,2,1,2,1,2]",
                        "output": "7",
                        "explanation": "The earliest second when all indices can be marked is 7.  Indices 1 and 2 are initially 0 and can be marked immediately. The remaining indices require decrementing and then marking."
                    },
                    {
                        "input": "nums = [1,2,3], changeIndices = [1,2,3]",
                        "output": "-1",
                        "explanation": "It is impossible to mark all indices because there are not enough seconds available to both reduce each `nums[i]` to 0 and mark them."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "We need at least <code>n</code> seconds, and at most <code>sum(nums[i]) + n</code> seconds.",
            "We can binary search the earliest second where all indices can be marked.",
            "If there is an operation where we change <code>nums[changeIndices[i]]</code> to a non-negative value, it is best for it to satisfy the following constraints:<ul>\r\n<li><code>nums[changeIndices[i]]</code> should not be equal to <code>0</code>.</li>\r\n<li><code>nums[changeIndices[i]]</code> should be changed to <code>0</code>.</li>\r\n<li>It should be the first position where <code>changeIndices[i]</code> occurs in <code>changeIndices</code>.</li>\r\n<li>There should be another second, <code>j</code>, where <code>changeIndices[i]</code> will be marked. <code>j</code> is in the range <code>[i + 1, m]</code>.</li>\r\n</ul>",
            "Let <code>time_needed = sum(nums[i]) + n</code>. To check if we can mark all indices at some second <code>x</code>, we need to make <code>time_needed <= x</code>, using non-negative change operations as described previously.",
            "Using a non-negative change operation on some <code>nums[changeIndices[i]]</code> that satisfies the constraints described previously reduces <code>time_needed</code> by <code>nums[changeIndices[i]] - 1</code>. So, we need to maximize the sum of <code>(nums[changeIndices[i]] - 1)</code> while ensuring that the non-negative change operations still satisfy the constraints.",
            "Maximizing the sum of <code>(nums[changeIndices[i]] - 1)</code> can be done greedily using a min-priority queue and going in reverse starting from second <code>x</code> to second <code>1</code>, maximizing the sum of the values in the priority queue and ensuring that for every non-negative change operation on <code>nums[changeIndices[i]]</code> chosen, there is another second <code>j</code> in the range <code>[i + 1, x]</code> where <code>changeIndices[i]</code> can be marked.",
            "The answer is the first value of <code>x</code> in the range <code>[1, m]</code> where it is possible to make <code>time_needed <= x</code>, or <code>-1</code> if there is no such second."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int earliestSecondToMarkIndices(vector<int>& nums,\n                                  vector<int>& changeIndices) {\n    const long long numsSum = accumulate(nums.begin(), nums.end(), 0LL);\n    // {the second: the index of nums can be zeroed at the current second}\n    const unordered_map<int, int> secondToIndex =\n        getSecondToIndex(nums, changeIndices);\n    int l = 0;\n    int r = changeIndices.size() + 1;\n\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (canMark(nums, secondToIndex, m, numsSum))\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l <= changeIndices.size() ? l : -1;\n  }\n\n private:\n  // Returns true if all indices of `nums` can be marked within `maxSecond`.\n  bool canMark(const vector<int>& nums,\n               const unordered_map<int, int>& secondToIndex, int maxSecond,\n               const long long numsSum) {\n    // Use a min-heap to greedily pop out the minimum number, which yields the\n    // least saving.\n    priority_queue<int, vector<int>, greater<int>> minHeap;\n    int marks = 0;\n\n    for (int second = maxSecond - 1; second >= 0; --second) {\n      if (const auto it = secondToIndex.find(second);\n          it != secondToIndex.end()) {\n        // The number mapped by the index is a candidate to be zeroed out.\n        const int index = it->second;\n        minHeap.push(nums[index]);\n        if (marks == 0) {\n          // Running out of marks, so need to pop out the minimum number.\n          // So, the current second will be used to mark an index.\n          minHeap.pop();\n          ++marks;\n        } else {\n          // There're enough marks.\n          // So, the current second will be used to zero out a number.\n          --marks;\n        }\n      } else {\n        // There's no candidate to be zeroed out.\n        // So, the current second will be used to mark an index.\n        ++marks;\n      }\n    }\n\n    const int heapSize = minHeap.size();\n    const long long decrementAndMarkCost =\n        numsSum - getHeapSum(minHeap) + (nums.size() - heapSize);\n    const long long zeroAndMarkCost = heapSize + heapSize;\n    return decrementAndMarkCost + zeroAndMarkCost <= maxSecond;\n  }\n\n  long long getHeapSum(priority_queue<int, vector<int>, greater<int>>& heap) {\n    long long heapSum = 0;\n    while (!heap.empty())\n      heapSum += heap.top(), heap.pop();\n    return heapSum;\n  }\n\n  unordered_map<int, int> getSecondToIndex(const vector<int>& nums,\n                                           const vector<int>& changeIndices) {\n    // {the `index` of nums: the earliest second to zero out nums[index]}\n    unordered_map<int, int> indexToFirstSecond;\n    unordered_map<int, int> secondToIndex;\n    for (int zeroIndexedSecond = 0; zeroIndexedSecond < changeIndices.size();\n         ++zeroIndexedSecond) {\n      // Convert to 0-indexed.\n      const int index = changeIndices[zeroIndexedSecond] - 1;\n      if (nums[index] > 0 && !indexToFirstSecond.count(index))\n        indexToFirstSecond[index] = zeroIndexedSecond;\n    }\n    for (const auto& [index, second] : indexToFirstSecond)\n      secondToIndex[second] = index;\n    return secondToIndex;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n    final long numsSum = Arrays.stream(nums).asLongStream().sum();\n    // {the second: the index of nums can be zeroed at the current second}\n    Map<Integer, Integer> secondToIndex = getSecondToIndex(nums, changeIndices);\n    int l = 0;\n    int r = changeIndices.length + 1;\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (canMark(nums, secondToIndex, m))\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l <= changeIndices.length ? l : -1;\n  }\n\n  // Returns true if all indices of `nums` can be marked within `maxSecond`.\n  private boolean canMark(int[] nums, Map<Integer, Integer> secondToIndex, int maxSecond,\n                          final long numsSum) {\n    // Use a min-heap to greedily pop out the minimum number, which yields the\n    // least saving.\n    Queue<Integer> minHeap = new PriorityQueue<>();\n    int marks = 0;\n\n    for (int second = maxSecond - 1; second >= 0; --second) {\n      if (secondToIndex.containsKey(second)) {\n        // The number mapped by the index is a candidate to be zeroed out.\n        final int index = secondToIndex.get(second);\n        minHeap.offer(nums[index]);\n        if (marks == 0) {\n          // Running out of marks, so need to pop out the minimum number.\n          // So, the current second will be used to mark an index.\n          minHeap.poll();\n          ++marks;\n        } else {\n          // There're enough marks.\n          // So, the current second will be used to zero out a number.\n          --marks;\n        }\n      } else {\n        // There's no candidate to be zeroed out.\n        // So, the current second will be used to mark an index.\n        ++marks;\n      }\n    }\n\n    final int heapSize = minHeap.size();\n    final long decrementAndMarkCost = numsSum - getHeapSum(minHeap) + (nums.length - heapSize);\n    final long zeroAndMarkCost = heapSize + heapSize;\n    return decrementAndMarkCost + zeroAndMarkCost <= maxSecond;\n  }\n\n  private long getHeapSum(Queue<Integer> minHeap) {\n    long sum = 0;\n    while (!minHeap.isEmpty())\n      sum += minHeap.poll();\n    return sum;\n  }\n\n  private Map<Integer, Integer> getSecondToIndex(int[] nums, int[] changeIndices) {\n    // {the `index` of nums: the earliest second to zero out nums[index]}\n    Map<Integer, Integer> indexToFirstSecond = new HashMap<>();\n    Map<Integer, Integer> secondToIndex = new HashMap<>();\n    for (int zeroIndexedSecond = 0; zeroIndexedSecond < changeIndices.length; ++zeroIndexedSecond) {\n      // Convert to 0-indexed.\n      final int index = changeIndices[zeroIndexedSecond] - 1;\n      if (nums[index] > 0)\n        indexToFirstSecond.putIfAbsent(index, zeroIndexedSecond);\n    }\n    for (Map.Entry<Integer, Integer> entry : indexToFirstSecond.entrySet()) {\n      final int index = entry.getKey();\n      final int second = entry.getValue();\n      secondToIndex.put(second, index);\n    }\n    return secondToIndex;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def earliestSecondToMarkIndices(self, nums: List[int], changeIndices: List[int]) -> int:\n    # {the second: the index of nums can be zeroed at the current second}\n    secondToIndex = self._getSecondToIndex(nums, changeIndices)\n    numsSum = sum(nums)\n\n    def canMark(maxSecond: int) -> bool:\n      \"\"\"\n      Returns True if all indices of `nums` can be marked within `maxSecond`.\n      \"\"\"\n      # Use a min-heap to greedily pop out the minimum number, which yields the\n      # least saving.\n      minHeap = []\n      marks = 0\n\n      for second in range(maxSecond - 1, -1, -1):\n        if second in secondToIndex:\n          # The number mapped by the index is a candidate to be zeroed out.\n          index = secondToIndex[second]\n          heapq.heappush(minHeap, nums[index])\n          if marks == 0:\n            # Running out of marks, so need to pop out the minimum number.\n            # So, the current second will be used to mark an index.\n            heapq.heappop(minHeap)\n            marks += 1\n          else:\n            # There're enough marks.\n            # So, the current second will be used to zero out a number.\n            marks -= 1\n        else:\n          # There's no candidate to be zeroed out.\n          # So, the current second will be used to mark an index.\n          marks += 1\n\n      decrementAndMarkCost = (numsSum - sum(minHeap)) + \\\n          (len(nums) - len(minHeap))\n      zeroAndMarkCost = len(minHeap) + len(minHeap)\n      return decrementAndMarkCost + zeroAndMarkCost <= maxSecond\n\n    l = bisect.bisect_left(range(1, len(changeIndices) + 1), True,\n                           key=lambda m: canMark(m)) + 1\n    return l if l <= len(changeIndices) else -1\n\n  def _getSecondToIndex(self, nums: List[int], changeIndices: List[int]) -> Dict[int, int]:\n    # {the `index` of nums: the earliest second to zero out nums[index]}\n    indexToFirstSecond = {}\n    for zeroIndexedSecond, oneIndexedIndex in enumerate(changeIndices):\n      index = oneIndexedIndex - 1  # Convert to 0-indexed.\n      if nums[index] > 0 and index not in indexToFirstSecond:\n        indexToFirstSecond[index] = zeroIndexedSecond\n    return {second: index for index, second in indexToFirstSecond.items()}\n",
                "lang_text": "py"
            }
        }
    }
}