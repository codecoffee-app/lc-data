{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1921",
            "title": "Eliminate Maximum Number of Monsters",
            "titleSlug": "eliminate-maximum-number-of-monsters",
            "content": "<p>You are playing a video game where you are defending your city from a group of <code>n</code> monsters. You are given a <strong>0-indexed</strong> integer array <code>dist</code> of size <code>n</code>, where <code>dist[i]</code> is the <strong>initial distance</strong> in kilometers of the <code>i<sup>th</sup></code> monster from the city.</p>\n\n<p>The monsters walk toward the city at a <strong>constant</strong> speed. The speed of each monster is given to you in an integer array <code>speed</code> of size <code>n</code>, where <code>speed[i]</code> is the speed of the <code>i<sup>th</sup></code> monster in kilometers per minute.</p>\n\n<p>You have a weapon that, once fully charged, can eliminate a <strong>single</strong> monster. However, the weapon takes <strong>one minute</strong> to charge. The weapon is fully charged at the very start.</p>\n\n<p>You lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a <strong>loss</strong>, and the game ends before you can use your weapon.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of monsters that you can eliminate before you lose, or </em><code>n</code><em> if you can eliminate all the monsters before they reach the city.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dist = [1,3,4], speed = [1,1,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nIn the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster.\nAfter a minute, the distances of the monsters are [X,X,2]. You eliminate the third monster.\nAll 3 monsters can be eliminated.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dist = [1,1,2,3], speed = [1,1,1,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nIn the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,1,2], so you lose.\nYou can only eliminate 1 monster.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> dist = [3,2,4], speed = [5,3,2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nIn the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,2], so you lose.\nYou can only eliminate 1 monster.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == dist.length == speed.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= dist[i], speed[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1469,
            "dislikes": 225,
            "similarQuestions": "[{\"title\": \"Minimum Health to Beat Game\", \"titleSlug\": \"minimum-health-to-beat-game\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Time to Kill All Monsters\", \"titleSlug\": \"minimum-time-to-kill-all-monsters\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"102.9K\", \"totalSubmission\": \"200.7K\", \"totalAcceptedRaw\": 102929, \"totalSubmissionRaw\": 200667, \"acRate\": \"51.3%\"}",
            "hints": [
                "Find the amount of time it takes each monster to arrive.",
                "Find the order in which the monsters will arrive."
            ],
            "rephrased": {
                "body": "You are defending your city from n monsters in a video game. Each monster has an initial distance (dist[i]) from the city and a speed (speed[i]). You have a weapon that eliminates one monster per minute and is fully charged at the start. You lose if any monster reaches the city at the exact moment the weapon is fully charged. Determine the maximum number of monsters you can eliminate before losing, or n if you can eliminate all monsters.",
                "constraints": [
                    "n == dist.length == speed.length",
                    "1 <= n <= 10^5",
                    "1 <= dist[i], speed[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "dist = [1,3,4], speed = [1,1,1]",
                        "output": "3",
                        "explanation": "Monsters arrive at times [1, 3, 4]. You eliminate the first monster. After 1 minute, remaining arrival times are [X, 2, 3]. You eliminate the second monster. After another minute, arrival times are [X, X, 2]. You eliminate the third monster. All monsters are eliminated."
                    },
                    {
                        "input": "dist = [1,1,2,3], speed = [1,1,1,1]",
                        "output": "1",
                        "explanation": "Monsters arrive at times [1, 1, 2, 3]. You eliminate the first monster. After 1 minute, one monster arrives at the city at the exact moment the weapon is fully charged, resulting in a loss."
                    },
                    {
                        "input": "dist = [3,2,4], speed = [5,3,2]",
                        "output": "1",
                        "explanation": "Monsters arrive at times [0.6, 0.666..., 2]. You eliminate the first monster. After 1 minute, one monster arrives at the city at the exact moment the weapon is fully charged, resulting in a loss."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-health-to-beat-game",
                "title": "Minimum Health to Beat Game",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-time-to-kill-all-monsters",
                "title": "Minimum Time to Kill All Monsters",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Find the amount of time it takes each monster to arrive.",
            "Find the order in which the monsters will arrive."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int eliminateMaximum(vector<int>& dist, vector<int>& speed) {\n    const int n = dist.size();\n    vector<int> arrivalTime(n);\n\n    for (int i = 0; i < n; ++i)\n      arrivalTime[i] = (dist[i] - 1) / speed[i];\n\n    std::ranges::sort(arrivalTime);\n\n    for (int i = 0; i < n; ++i)\n      if (i > arrivalTime[i])\n        return i;\n\n    return n;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int eliminateMaximum(int[] dist, int[] speed) {\n    final int n = dist.length;\n    int[] arrivalTime = new int[n];\n\n    for (int i = 0; i < n; ++i)\n      arrivalTime[i] = (dist[i] - 1) / speed[i];\n\n    Arrays.sort(arrivalTime);\n\n    for (int i = 0; i < n; ++i)\n      if (i > arrivalTime[i])\n        return i;\n\n    return n;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:\n    for i, arrivalTime in enumerate(sorted([(d - 1) // s for d, s in zip(dist, speed)])):\n      if i > arrivalTime:\n        return i\n    return len(dist)\n",
                "lang_text": "py"
            }
        }
    }
}