{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "535",
            "title": "Encode and Decode TinyURL",
            "titleSlug": "encode-and-decode-tinyurl",
            "content": "<blockquote>Note: This is a companion problem to the <a href=\"https://leetcode.com/discuss/interview-question/system-design/\" target=\"_blank\">System Design</a> problem: <a href=\"https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/\" target=\"_blank\">Design TinyURL</a>.</blockquote>\n\n<p>TinyURL is a URL shortening service where you enter a URL such as <code>https://leetcode.com/problems/design-tinyurl</code> and it returns a short URL such as <code>http://tinyurl.com/4e9iAk</code>. Design a class to encode a URL and decode a tiny URL.</p>\n\n<p>There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution()</code> Initializes the object of the system.</li>\n\t<li><code>String encode(String longUrl)</code> Returns a tiny URL for the given <code>longUrl</code>.</li>\n\t<li><code>String decode(String shortUrl)</code> Returns the original long URL for the given <code>shortUrl</code>. It is guaranteed that the given <code>shortUrl</code> was encoded by the same object.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> url = &quot;https://leetcode.com/problems/design-tinyurl&quot;\n<strong>Output:</strong> &quot;https://leetcode.com/problems/design-tinyurl&quot;\n\n<strong>Explanation:</strong>\nSolution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after decoding it.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= url.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>url</code> is guranteed to be a valid URL.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1955,
            "dislikes": 3728,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"247.2K\", \"totalSubmission\": \"286.8K\", \"totalAcceptedRaw\": 247250, \"totalSubmissionRaw\": 286765, \"acRate\": \"86.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "TinyURL is a URL shortening service. You provide a long URL, and it returns a shorter, 'tiny' URL.  Design a class to encode a long URL into a tiny URL and decode a tiny URL back to its original form.\n\nThe encoding/decoding algorithm has no restrictions, as long as it's consistent: a long URL must be encodable to a tiny URL, and that tiny URL must be decodable back to the original long URL.\n\nImplement the `Solution` class:\n\n*   `Solution()`: Initializes the TinyURL system.\n*   `String encode(String longUrl)`:  Encodes the given `longUrl` and returns its tiny URL representation.\n*   `String decode(String shortUrl)`: Decodes the given `shortUrl` (which was previously encoded by the same `Solution` object) and returns the original long URL.",
                "constraints": [
                    "1 <= url.length <= 10<sup>4</sup>",
                    "url is guaranteed to be a valid URL."
                ],
                "testcases": [
                    {
                        "input": "url = \"https://leetcode.com/problems/design-tinyurl\"",
                        "output": "\"https://leetcode.com/problems/design-tinyurl\"",
                        "explanation": "Solution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after decoding it."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string encode(string longUrl) {\n    while (!urlToCode.count(longUrl)) {\n      string code;\n      for (int i = 0; i < 6; ++i)\n        code += alphabets[rand() % alphabets.size()];\n      if (!codeToUrl.count(code)) {\n        codeToUrl[code] = longUrl;\n        urlToCode[longUrl] = code;\n        return \"http://tinyurl.com/\" + code;\n      }\n    }\n\n    throw;\n  }\n\n  string decode(string shortUrl) {\n    return codeToUrl[shortUrl.substr(19)];\n  }\n\n private:\n  const string alphabets =\n      \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  unordered_map<string, string> urlToCode;\n  unordered_map<string, string> codeToUrl;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Codec {\n  public String encode(String longUrl) {\n    while (!urlToCode.containsKey(longUrl)) {\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < 6; ++i) {\n        final char nextChar = alphabets.charAt(rand.nextInt(alphabets.length()));\n        sb.append(nextChar);\n      }\n      final String code = sb.toString();\n      if (!codeToUrl.containsKey(code)) {\n        codeToUrl.put(code, longUrl);\n        urlToCode.put(longUrl, code);\n        return \"http://tinyurl.com/\" + code;\n      }\n    }\n\n    throw new IllegalArgumentException();\n  }\n\n  public String decode(String shortUrl) {\n    return codeToUrl.get(shortUrl.substring(19));\n  }\n\n  private static final String alphabets =\n      \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  private Map<String, String> urlToCode = new HashMap<>();\n  private Map<String, String> codeToUrl = new HashMap<>();\n  private Random rand = new Random();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Codec:\n  alphabets = string.ascii_letters + '0123456789'\n  urlToCode = {}\n  codeToUrl = {}\n\n  def encode(self, longUrl: str) -> str:\n    while longUrl not in self.urlToCode:\n      code = ''.join(random.choice(self.alphabets) for _ in range(6))\n      if code not in self.codeToUrl:\n        self.codeToUrl[code] = longUrl\n        self.urlToCode[longUrl] = code\n    return 'http://tinyurl.com/' + self.urlToCode[longUrl]\n\n  def decode(self, shortUrl: str) -> str:\n    return self.codeToUrl[shortUrl[-6:]]\n",
                "lang_text": "py"
            }
        }
    }
}