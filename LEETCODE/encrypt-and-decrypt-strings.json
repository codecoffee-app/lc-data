{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2227",
            "title": "Encrypt and Decrypt Strings",
            "titleSlug": "encrypt-and-decrypt-strings",
            "content": "<p>You are given a character array <code>keys</code> containing <strong>unique</strong> characters and a string array <code>values</code> containing strings of length 2. You are also given another string array <code>dictionary</code> that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a <strong>0-indexed</strong> string.</p>\n\n<p>A string is <strong>encrypted</strong> with the following process:</p>\n\n<ol>\n\t<li>For each character <code>c</code> in the string, we find the index <code>i</code> satisfying <code>keys[i] == c</code> in <code>keys</code>.</li>\n\t<li>Replace <code>c</code> with <code>values[i]</code> in the string.</li>\n</ol>\n\n<p>Note that in case a character of the string is <strong>not present</strong> in <code>keys</code>, the encryption process cannot be carried out, and an empty string <code>&quot;&quot;</code> is returned.</p>\n\n<p>A string is <strong>decrypted</strong> with the following process:</p>\n\n<ol>\n\t<li>For each substring <code>s</code> of length 2 occurring at an even index in the string, we find an <code>i</code> such that <code>values[i] == s</code>. If there are multiple valid <code>i</code>, we choose <strong>any</strong> one of them. This means a string could have multiple possible strings it can decrypt to.</li>\n\t<li>Replace <code>s</code> with <code>keys[i]</code> in the string.</li>\n</ol>\n\n<p>Implement the <code>Encrypter</code> class:</p>\n\n<ul>\n\t<li><code>Encrypter(char[] keys, String[] values, String[] dictionary)</code> Initializes the <code>Encrypter</code> class with <code>keys, values</code>, and <code>dictionary</code>.</li>\n\t<li><code>String encrypt(String word1)</code> Encrypts <code>word1</code> with the encryption process described above and returns the encrypted string.</li>\n\t<li><code>int decrypt(String word2)</code> Returns the number of possible strings <code>word2</code> could decrypt to that also appear in <code>dictionary</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Encrypter&quot;, &quot;encrypt&quot;, &quot;decrypt&quot;]\n[[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], [&quot;ei&quot;, &quot;zf&quot;, &quot;ei&quot;, &quot;am&quot;], [&quot;abcd&quot;, &quot;acbd&quot;, &quot;adbc&quot;, &quot;badc&quot;, &quot;dacb&quot;, &quot;cadb&quot;, &quot;cbda&quot;, &quot;abad&quot;]], [&quot;abcd&quot;], [&quot;eizfeiam&quot;]]\n<strong>Output</strong>\n[null, &quot;eizfeiam&quot;, 2]\n\n<strong>Explanation</strong>\nEncrypter encrypter = new Encrypter([[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], [&quot;ei&quot;, &quot;zf&quot;, &quot;ei&quot;, &quot;am&quot;], [&quot;abcd&quot;, &quot;acbd&quot;, &quot;adbc&quot;, &quot;badc&quot;, &quot;dacb&quot;, &quot;cadb&quot;, &quot;cbda&quot;, &quot;abad&quot;]);\nencrypter.encrypt(&quot;abcd&quot;); // return &quot;eizfeiam&quot;. \n&nbsp;                          // &#39;a&#39; maps to &quot;ei&quot;, &#39;b&#39; maps to &quot;zf&quot;, &#39;c&#39; maps to &quot;ei&quot;, and &#39;d&#39; maps to &quot;am&quot;.\nencrypter.decrypt(&quot;eizfeiam&quot;); // return 2. \n                              // &quot;ei&quot; can map to &#39;a&#39; or &#39;c&#39;, &quot;zf&quot; maps to &#39;b&#39;, and &quot;am&quot; maps to &#39;d&#39;. \n                              // Thus, the possible strings after decryption are &quot;abad&quot;, &quot;cbad&quot;, &quot;abcd&quot;, and &quot;cbcd&quot;. \n                              // 2 of those strings, &quot;abad&quot; and &quot;abcd&quot;, appear in dictionary, so the answer is 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= keys.length == values.length &lt;= 26</code></li>\n\t<li><code>values[i].length == 2</code></li>\n\t<li><code>1 &lt;= dictionary.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li>\n\t<li>All <code>keys[i]</code> and <code>dictionary[i]</code> are <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= word1.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= word2.length &lt;= 200</code></li>\n\t<li>All <code>word1[i]</code> appear in <code>keys</code>.</li>\n\t<li><code>word2.length</code> is even.</li>\n\t<li><code>keys</code>, <code>values[i]</code>, <code>dictionary[i]</code>, <code>word1</code>, and <code>word2</code> only contain lowercase English letters.</li>\n\t<li>At most <code>200</code> calls will be made to <code>encrypt</code> and <code>decrypt</code> <strong>in total</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 317,
            "dislikes": 69,
            "similarQuestions": "[{\"title\": \"Implement Trie (Prefix Tree)\", \"titleSlug\": \"implement-trie-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Word Search II\", \"titleSlug\": \"word-search-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Implement Trie II (Prefix Tree)\", \"titleSlug\": \"implement-trie-ii-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.5K\", \"totalSubmission\": \"29K\", \"totalAcceptedRaw\": 11507, \"totalSubmissionRaw\": 28990, \"acRate\": \"39.7%\"}",
            "hints": [
                "For encryption, use hashmap to map each char of word1 to its value.",
                "For decryption, use trie to prune when necessary."
            ],
            "rephrased": {
                "body": "Design a data structure to encrypt and decrypt strings based on given mappings. You are provided with `keys` (unique characters), `values` (2-character strings), and a `dictionary` of valid decrypted strings.  The `Encrypter` class should:\n\n*   **Encrypt:** Replace each character in a given string with its corresponding 2-character value from `values`. Return an empty string if any character is not found in `keys`.\n*   **Decrypt:**  Reconstruct possible original strings from an encrypted string. For each 2-character substring at an even index, find matching characters in `keys` based on the corresponding `values`. If multiple matches exist, consider all possibilities. Return the count of decrypted strings that are present in the provided `dictionary`.",
                "constraints": [
                    "1 <= keys.length == values.length <= 26",
                    "values[i].length == 2",
                    "1 <= dictionary.length <= 100",
                    "1 <= dictionary[i].length <= 100",
                    "All keys[i] and dictionary[i] are unique.",
                    "1 <= word1.length <= 2000",
                    "1 <= word2.length <= 200",
                    "All word1[i] appear in keys.",
                    "word2.length is even.",
                    "keys, values[i], dictionary[i], word1, and word2 only contain lowercase English letters.",
                    "At most 200 calls will be made to encrypt and decrypt in total."
                ],
                "testcases": [
                    {
                        "input": "[\"Encrypter\", \"encrypt\", \"decrypt\"]\n[[['a', 'b', 'c', 'd'], [\"ei\", \"zf\", \"ei\", \"am\"], [\"abcd\", \"acbd\", \"adbc\", \"badc\", \"dacb\", \"cadb\", \"cbda\", \"abad\"]], [\"abcd\"], [\"eizfeiam\"]]",
                        "output": "[null, \"eizfeiam\", 2]",
                        "explanation": "First, the Encrypter class is initialized with the provided keys, values, and dictionary.  Calling encrypt(\"abcd\") maps 'a' to \"ei\", 'b' to \"zf\", 'c' to \"ei\", and 'd' to \"am\", resulting in \"eizfeiam\".  Calling decrypt(\"eizfeiam\") has multiple possible decryptions: \"ei\" can be 'a' or 'c', \"zf\" is 'b', and \"am\" is 'd'.  The possible decrypted strings are \"abad\", \"cbad\", \"abcd\", and \"cbcd\".  Of these, \"abad\" and \"abcd\" are in the dictionary, so the result is 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "implement-trie-prefix-tree",
                "title": "Implement Trie (Prefix Tree)",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "word-search-ii",
                "title": "Word Search II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "implement-trie-ii-prefix-tree",
                "title": "Implement Trie II (Prefix Tree)",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "For encryption, use hashmap to map each char of word1 to its value.",
            "For decryption, use trie to prune when necessary."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  bool isWord = false;\n  TrieNode() : children(26) {}\n};\n\nclass Encrypter {\n public:\n  Encrypter(vector<char>& keys, vector<string>& values,\n            vector<string>& dictionary) {\n    for (int i = 0; i < keys.size(); ++i) {\n      const char key = keys[i];\n      const string& value = values[i];\n      keyToValue[key] = value;\n      valueToKeys[value].push_back(key);\n    }\n    for (const string& word : dictionary)\n      insert(word);\n  }\n\n  string encrypt(string word1) {\n    string ans;\n    for (const char c : word1)\n      ans += keyToValue[c];\n    return ans;\n  }\n\n  int decrypt(string word2) {\n    return find(word2, 0, root);\n  }\n\n private:\n  unordered_map<char, string> keyToValue;\n  unordered_map<string, vector<char>> valueToKeys;\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n\n  void insert(const string& word) {\n    shared_ptr<TrieNode> node = root;\n    for (const char c : word) {\n      const int i = c - 'a';\n      if (node->children[i] == nullptr)\n        node->children[i] = make_shared<TrieNode>();\n      node = node->children[i];\n    }\n    node->isWord = true;\n  }\n\n  int find(const string& word, int i, shared_ptr<TrieNode> node) {\n    const string value = word.substr(i, 2);\n    if (!valueToKeys.count(value))\n      return 0;\n\n    int ans = 0;\n    if (i + 2 == word.length()) {\n      for (const char key : valueToKeys[value]) {\n        const auto& child = node->children[key - 'a'];\n        ans += child && child->isWord;\n      }\n      return ans;\n    }\n\n    for (const char key : valueToKeys[value]) {\n      if (!node->children[key - 'a'])\n        continue;\n      ans += find(word, i + 2, node->children[key - 'a']);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[26];\n  public boolean isWord = false;\n}\n\nclass Encrypter {\n  public Encrypter(char[] keys, String[] values, String[] dictionary) {\n    for (int i = 0; i < keys.length; ++i) {\n      final char key = keys[i];\n      final String value = values[i];\n      keyToValue.put(key, value);\n      valueToKeys.putIfAbsent(value, new ArrayList<>());\n      valueToKeys.get(value).add(key);\n    }\n    for (final String word : dictionary)\n      insert(word);\n  }\n\n  public String encrypt(String word1) {\n    StringBuilder sb = new StringBuilder();\n    for (final char c : word1.toCharArray())\n      sb.append(keyToValue.get(c));\n    return sb.toString();\n  }\n\n  public int decrypt(String word2) {\n    return find(word2, 0, root);\n  }\n\n  private Map<Character, String> keyToValue = new HashMap<>();\n  private Map<String, List<Character>> valueToKeys = new HashMap<>();\n  private TrieNode root = new TrieNode();\n\n  void insert(final String word) {\n    TrieNode node = root;\n    for (final char c : word.toCharArray()) {\n      final int i = c - 'a';\n      if (node.children[i] == null)\n        node.children[i] = new TrieNode();\n      node = node.children[i];\n    }\n    node.isWord = true;\n  }\n\n  int find(final String word, int i, TrieNode node) {\n    final String value = word.substring(i, i + 2);\n    if (!valueToKeys.containsKey(value))\n      return 0;\n\n    int ans = 0;\n    if (i + 2 == word.length()) {\n      for (final char key : valueToKeys.get(value)) {\n        TrieNode child = node.children[key - 'a'];\n        if (child != null && child.isWord)\n          ++ans;\n      }\n      return ans;\n    }\n\n    for (final char key : valueToKeys.get(value)) {\n      if (node.children[key - 'a'] == null)\n        continue;\n      ans += find(word, i + 2, node.children[key - 'a']);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TrieNode:\n  def __init__(self):\n    self.children: Dict[str, TrieNode] = collections.defaultdict(TrieNode)\n    self.isWord = False\n\n\nclass Encrypter:\n  def __init__(self, keys: List[str], values: List[str], dictionary: List[str]):\n    self.keyToValue = {k: v for k, v in zip(keys, values)}\n    self.valueToKeys = collections.defaultdict(list)\n    self.root = TrieNode()\n    for k, v in zip(keys, values):\n      self.valueToKeys[v].append(k)\n    for word in dictionary:\n      self._insert(word)\n\n  def encrypt(self, word1: str) -> str:\n    return ''.join(self.keyToValue[c] for c in word1)\n\n  def decrypt(self, word2: str) -> int:\n    return self._find(word2, 0, self.root)\n\n  def _insert(self, word: str) -> None:\n    node = self.root\n    for c in word:\n      node = node.children.setdefault(c, TrieNode())\n    node.isWord = True\n\n  def _find(self, word: str, i: int, node: TrieNode) -> int:\n    value = word[i:i + 2]\n    if value not in self.valueToKeys:\n      return 0\n\n    ans = 0\n    if i + 2 == len(word):\n      for key in self.valueToKeys[value]:\n        ans += node.children[key].isWord\n      return ans\n\n    for key in self.valueToKeys[value]:\n      if key not in node.children:\n        continue\n      ans += self._find(word, i + 2, node.children[key])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}