{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1775",
            "title": "Equal Sum Arrays With Minimum Number of Operations",
            "titleSlug": "equal-sum-arrays-with-minimum-number-of-operations",
            "content": "<p>You are given two arrays of integers <code>nums1</code> and <code><font face=\"monospace\">nums2</font></code>, possibly of different lengths. The values in the arrays are between <code>1</code> and <code>6</code>, inclusive.</p>\n\n<p>In one operation, you can change any integer&#39;s value in <strong>any </strong>of the arrays to <strong>any</strong> value between <code>1</code> and <code>6</code>, inclusive.</p>\n\n<p>Return <em>the minimum number of operations required to make the sum of values in </em><code>nums1</code><em> equal to the sum of values in </em><code>nums2</code><em>.</em> Return <code>-1</code>\u200b\u200b\u200b\u200b\u200b if it is not possible to make the sum of the two arrays equal.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [<u><strong>6</strong></u>,1,2,2,2,2].\n- Change nums1[5] to 1. nums1 = [1,2,3,4,5,<strong><u>1</u></strong>], nums2 = [6,1,2,2,2,2].\n- Change nums1[2] to 2. nums1 = [1,2,<strong><u>2</u></strong>,4,5,1], nums2 = [6,1,2,2,2,2].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,1,1,1,1,1,1], nums2 = [6]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [6,6], nums2 = [1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. \n- Change nums1[0] to 2. nums1 = [<strong><u>2</u></strong>,6], nums2 = [1].\n- Change nums1[1] to 2. nums1 = [2,<strong><u>2</u></strong>], nums2 = [1].\n- Change nums2[0] to 4. nums1 = [2,2], nums2 = [<strong><u>4</u></strong>].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 6</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 886,
            "dislikes": 39,
            "similarQuestions": "[{\"title\": \"Number of Dice Rolls With Target Sum\", \"titleSlug\": \"number-of-dice-rolls-with-target-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.7K\", \"totalSubmission\": \"51.7K\", \"totalAcceptedRaw\": 27659, \"totalSubmissionRaw\": 51734, \"acRate\": \"53.5%\"}",
            "hints": [
                "Let's note that we want to either decrease the sum of the array with a larger sum or increase the array's sum with the smaller sum.",
                "You can maintain the largest increase or decrease you can make in a binary search tree and each time get the maximum one."
            ],
            "rephrased": {
                "body": "Given two integer arrays, `nums1` and `nums2`, containing values between 1 and 6 inclusive. You can change any integer in either array to any value between 1 and 6 in a single operation. Find the minimum number of operations needed to make the sum of `nums1` equal to the sum of `nums2`. If it's impossible to make the sums equal, return -1.",
                "constraints": [
                    "1 <= nums1.length, nums2.length <= 10^5",
                    "1 <= nums1[i], nums2[i] <= 6"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]",
                        "output": "3",
                        "explanation": "To equalize the sums, we can perform the following operations:\n1. Change nums2[0] to 6.\n2. Change nums1[5] to 1.\n3. Change nums1[2] to 2."
                    },
                    {
                        "input": "nums1 = [1,1,1,1,1,1,1], nums2 = [6]",
                        "output": "-1",
                        "explanation": "It is impossible to equalize the sums because reducing the sum of nums1 or increasing the sum of nums2 sufficiently is not possible within the value constraints."
                    },
                    {
                        "input": "nums1 = [6,6], nums2 = [1]",
                        "output": "3",
                        "explanation": "To equalize the sums, we can perform the following operations:\n1. Change nums1[0] to 2.\n2. Change nums1[1] to 2.\n3. Change nums2[0] to 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-dice-rolls-with-target-sum",
                "title": "Number of Dice Rolls With Target Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let's note that we want to either decrease the sum of the array with a larger sum or increase the array's sum with the smaller sum.",
            "You can maintain the largest increase or decrease you can make in a binary search tree and each time get the maximum one."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<int>& nums1, vector<int>& nums2) {\n    if (nums1.size() * 6 < nums2.size() || nums2.size() * 6 < nums1.size())\n      return -1;\n\n    int sum1 = accumulate(nums1.begin(), nums1.end(), 0);\n    int sum2 = accumulate(nums2.begin(), nums2.end(), 0);\n    if (sum1 > sum2)\n      return minOperations(nums2, nums1);\n\n    int ans = 0;\n    // Increases in nums1 & decreases in nums2\n    vector<int> count(6);\n\n    for (const int num : nums1)\n      ++count[6 - num];\n\n    for (const int num : nums2)\n      ++count[num - 1];\n\n    for (int i = 5; sum2 > sum1;) {\n      while (count[i] == 0)\n        --i;\n      sum1 += i;\n      --count[i];\n      ++ans;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(int[] nums1, int[] nums2) {\n    if (nums1.length * 6 < nums2.length || nums2.length * 6 < nums1.length)\n      return -1;\n\n    int sum1 = Arrays.stream(nums1).sum();\n    int sum2 = Arrays.stream(nums2).sum();\n    if (sum1 > sum2)\n      return minOperations(nums2, nums1);\n\n    int ans = 0;\n    // Increases in nums1 & decreases in nums2\n    int[] count = new int[6];\n\n    Arrays.stream(nums1).forEach(num -> ++count[6 - num]);\n    Arrays.stream(nums2).forEach(num -> ++count[num - 1]);\n\n    for (int i = 5; sum2 > sum1;) {\n      while (count[i] == 0)\n        --i;\n      sum1 += i;\n      --count[i];\n      ++ans;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}