{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "587",
            "title": "Erect the Fence",
            "titleSlug": "erect-the-fence",
            "content": "<p>You are given an array <code>trees</code> where <code>trees[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents the location of a tree in the garden.</p>\n\n<p>Fence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if <strong>all the trees are enclosed</strong>.</p>\n\n<p>Return <em>the coordinates of trees that are exactly located on the fence perimeter</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/erect2-plane.jpg\" style=\"width: 400px; height: 393px;\" />\n<pre>\n<strong>Input:</strong> trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\n<strong>Output:</strong> [[1,1],[2,0],[4,2],[3,3],[2,4]]\n<strong>Explanation:</strong> All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/erect1-plane.jpg\" style=\"width: 400px; height: 393px;\" />\n<pre>\n<strong>Input:</strong> trees = [[1,2],[2,2],[4,2]]\n<strong>Output:</strong> [[4,2],[2,2],[1,2]]\n<strong>Explanation:</strong> The fence forms a line that passes through all the trees.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= trees.length &lt;= 3000</code></li>\n\t<li><code>trees[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li>\n\t<li>All the given positions are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1416,
            "dislikes": 640,
            "similarQuestions": "[{\"title\": \"Erect the Fence II\", \"titleSlug\": \"erect-the-fence-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Sort the Students by Their Kth Score\", \"titleSlug\": \"sort-the-students-by-their-kth-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Geometry",
                    "slug": "geometry"
                }
            ],
            "stats": "{\"totalAccepted\": \"55.7K\", \"totalSubmission\": \"107.5K\", \"totalAcceptedRaw\": 55747, \"totalSubmissionRaw\": 107496, \"acRate\": \"51.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array `trees` where `trees[i] = [x_i, y_i]` represents the location of a tree in a garden, determine the coordinates of the trees that lie exactly on the perimeter of the minimum-length fence enclosing all trees.  The garden is well-fenced only if **all the trees are enclosed**.",
                "constraints": [
                    "1 <= trees.length <= 3000",
                    "trees[i].length == 2",
                    "0 <= x_i, y_i <= 100",
                    "All the given positions are unique."
                ],
                "testcases": [
                    {
                        "input": "[[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]",
                        "output": "[[1,1],[2,0],[4,2],[3,3],[2,4]]",
                        "explanation": "The fence encompasses all trees, with the trees at coordinates (1,1), (2,0), (4,2), (3,3), and (2,4) forming the perimeter. The tree at (2,2) is inside the fence."
                    },
                    {
                        "input": "[[1,2],[2,2],[4,2]]",
                        "output": "[[4,2],[2,2],[1,2]]",
                        "explanation": "The fence forms a straight line passing through all the trees at coordinates (1,2), (2,2), and (4,2)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "erect-the-fence-ii",
                "title": "Erect the Fence II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "sort-the-students-by-their-kth-score",
                "title": "Sort the Students by Their Kth Score",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Geometry",
                "slug": "geometry"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Monotone Chain\nclass Solution {\n public:\n  vector<vector<int>> outerTrees(vector<vector<int>>& trees) {\n    vector<vector<int>> hull;\n\n    sort(trees.begin(), trees.end(), [](const auto& a, const auto& b) {\n      return a[0] == b[0] ? a[1] < b[1] : a[0] < b[0];\n    });\n\n    // Build lower hull: left-to-right scan\n    for (const auto& tree : trees) {\n      while (hull.size() > 1 &&\n             cross(hull.back(), hull[hull.size() - 2], tree) > 0)\n        hull.pop_back();\n      hull.push_back(tree);\n    }\n    hull.pop_back();\n\n    // Build upper hull: right-to-left scan\n    for (int i = trees.size() - 1; i >= 0; --i) {\n      while (hull.size() > 1 &&\n             cross(hull.back(), hull[hull.size() - 2], trees[i]) > 0)\n        hull.pop_back();\n      hull.push_back(trees[i]);\n    }\n\n    // Remove redundant elements from the stack\n    sort(hull.begin(), hull.end(), [](const auto& a, const auto& b) {\n      return a[0] == b[0] ? a[1] < b[1] : a[0] < b[0];\n    });\n    hull.erase(\n        unique(hull.begin(), hull.end(),\n               [](const auto& a,\n                  const auto& b) { return a[0] == b[0] && a[1] == b[1]; }),\n        hull.end());\n    return hull;\n  }\n\n private:\n  int cross(const vector<int>& p, const vector<int>& q, const vector<int>& r) {\n    return (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Monotone Chain\nclass Solution {\n  public int[][] outerTrees(int[][] trees) {\n    Stack<int[]> hull = new Stack<>();\n\n    Arrays.sort(trees, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);\n\n    // Build lower hull: left-to-right scan\n    for (int[] tree : trees) {\n      while (hull.size() > 1 && cross(hull.peek(), hull.get(hull.size() - 2), tree) > 0)\n        hull.pop();\n      hull.push(tree);\n    }\n    hull.pop();\n\n    // Build upper hull: right-to-left scan\n    for (int i = trees.length - 1; i >= 0; --i) {\n      while (hull.size() > 1 && cross(hull.peek(), hull.get(hull.size() - 2), trees[i]) > 0)\n        hull.pop();\n      hull.push(trees[i]);\n    }\n\n    // Remove redundant elements from the stack\n    return new HashSet<>(hull).stream().toArray(int[][] ::new);\n  }\n\n  private int cross(int[] p, int[] q, int[] r) {\n    return (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def outerTrees(self, trees: List[List[int]]) -> List[List[int]]:\n    hull = []\n\n    trees.sort(key=lambda x: (x[0], x[1]))\n\n    def cross(p: List[int], q: List[int], r: List[int]) -> int:\n      return (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n\n    # Build lower hull: left-to-right scan\n    for tree in trees:\n      while len(hull) > 1 and cross(hull[-1], hull[-2], tree) > 0:\n        hull.pop()\n      hull.append(tuple(tree))\n    hull.pop()\n\n    # Build upper hull: right-to-left scan\n    for tree in reversed(trees):\n      while len(hull) > 1 and cross(hull[-1], hull[-2], tree) > 0:\n        hull.pop()\n      hull.append(tuple(tree))\n\n    # Remove redundant elements from the stack\n    return list(set(hull))\n",
                "lang_text": "py"
            }
        }
    }
}