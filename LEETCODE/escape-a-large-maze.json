{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1036",
            "title": "Escape a Large Maze",
            "titleSlug": "escape-a-large-maze",
            "content": "<p>There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are <code>(x, y)</code>.</p>\n\n<p>We start at the <code>source = [s<sub>x</sub>, s<sub>y</sub>]</code> square and want to reach the <code>target = [t<sub>x</sub>, t<sub>y</sub>]</code> square. There is also an array of <code>blocked</code> squares, where each <code>blocked[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a blocked square with coordinates <code>(x<sub>i</sub>, y<sub>i</sub>)</code>.</p>\n\n<p>Each move, we can walk one square north, east, south, or west if the square is <strong>not</strong> in the array of <code>blocked</code> squares. We are also not allowed to walk outside of the grid.</p>\n\n<p>Return <code>true</code><em> if and only if it is possible to reach the </em><code>target</code><em> square from the </em><code>source</code><em> square through a sequence of valid moves</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The target square is inaccessible starting from the source square because we cannot move.\nWe cannot move north or east because those squares are blocked.\nWe cannot move south or west because we cannot go outside of the grid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> blocked = [], source = [0,0], target = [999999,999999]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Because there are no blocked cells, it is possible to reach the target square.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= blocked.length &lt;= 200</code></li>\n\t<li><code>blocked[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt; 10<sup>6</sup></code></li>\n\t<li><code>source.length == target.length == 2</code></li>\n\t<li><code>0 &lt;= s<sub>x</sub>, s<sub>y</sub>, t<sub>x</sub>, t<sub>y</sub> &lt; 10<sup>6</sup></code></li>\n\t<li><code>source != target</code></li>\n\t<li>It is guaranteed that <code>source</code> and <code>target</code> are not blocked.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 648,
            "dislikes": 166,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.4K\", \"totalSubmission\": \"58.6K\", \"totalAcceptedRaw\": 20397, \"totalSubmissionRaw\": 58644, \"acRate\": \"34.8%\"}",
            "hints": [
                "If we become stuck, there's either a loop around the source or around the target.",
                "If there is a loop around say, the source, what is the maximum number of squares it can have?"
            ],
            "rephrased": {
                "body": "Given a 1 million by 1 million grid, determine if it's possible to reach a target square from a source square, considering blocked squares. You can move one square north, east, south, or west, but cannot move to blocked squares or outside the grid boundaries. Return `true` if the target is reachable, and `false` otherwise.",
                "constraints": [
                    "0 <= blocked.length <= 200",
                    "blocked[i].length == 2",
                    "0 <= x<sub>i</sub>, y<sub>i</sub> < 10<sup>6</sup>",
                    "source.length == target.length == 2",
                    "0 <= s<sub>x</sub>, s<sub>y</sub>, t<sub>x</sub>, t<sub>y</sub> < 10<sup>6</sup>",
                    "source != target",
                    "It is guaranteed that source and target are not blocked."
                ],
                "testcases": [
                    {
                        "input": {
                            "blocked": [
                                [
                                    0,
                                    1
                                ],
                                [
                                    1,
                                    0
                                ]
                            ],
                            "source": [
                                0,
                                0
                            ],
                            "target": [
                                0,
                                2
                            ]
                        },
                        "output": false,
                        "explanation": "The target square is inaccessible because the source square is effectively blocked off by the given obstacles, preventing any movement towards the target."
                    },
                    {
                        "input": {
                            "blocked": [],
                            "source": [
                                0,
                                0
                            ],
                            "target": [
                                999999,
                                999999
                            ]
                        },
                        "output": true,
                        "explanation": "Since there are no blocked squares, a clear path exists to reach the target square."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "If we become stuck, there's either a loop around the source or around the target.",
            "If there is a loop around say, the source, what is the maximum number of squares it can have?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isEscapePossible(vector<vector<int>>& blocked, vector<int>& source,\n                        vector<int>& target) {\n    unordered_set<long> blockedSet;\n    for (const vector<int>& b : blocked)\n      blockedSet.insert(hash(b[0], b[1]));\n\n    return dfs(blockedSet, source[0], source[1], hash(target[0], target[1]),\n               {}) &&\n           dfs(blockedSet, target[0], target[1], hash(source[0], source[1]),\n               {});\n  }\n\n private:\n  bool dfs(unordered_set<long>& blockedSet, int i, int j, long target,\n           unordered_set<long>&& visited) {\n    if (i < 0 || i >= 1e6 || j < 0 || j >= 1e6 ||\n        blockedSet.count(hash(i, j)) || visited.count(hash(i, j)))\n      return false;\n\n    visited.insert(hash(i, j));\n    if (visited.size() > (1 + 199) * 199 / 2 || hash(i, j) == target)\n      return true;\n    return dfs(blockedSet, i + 1, j, target, move(visited)) ||\n           dfs(blockedSet, i - 1, j, target, move(visited)) ||\n           dfs(blockedSet, i, j + 1, target, move(visited)) ||\n           dfs(blockedSet, i, j - 1, target, move(visited));\n  }\n\n  long hash(int i, int j) {\n    return (static_cast<long>(i) << 16) + j;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isEscapePossible(int[][] blocked, int[] source, int[] target) {\n    Set<Long> blockedSet = new HashSet<>();\n    for (int[] b : blocked)\n      blockedSet.add(hash(b[0], b[1]));\n\n    return dfs(blockedSet, source[0], source[1], hash(target[0], target[1]), new HashSet<>()) &&\n        dfs(blockedSet, target[0], target[1], hash(source[0], source[1]), new HashSet<>());\n  }\n\n  private boolean dfs(Set<Long> blockedSet, int i, int j, long target, Set<Long> visited) {\n    if (i < 0 || i >= 1e6 || j < 0 || j >= 1e6 || blockedSet.contains(hash(i, j)) ||\n        visited.contains(hash(i, j)))\n      return false;\n\n    visited.add(hash(i, j));\n    if (visited.size() > (1 + 199) * 199 / 2 || hash(i, j) == target)\n      return true;\n\n    return                                            //\n        dfs(blockedSet, i + 1, j, target, visited) || //\n        dfs(blockedSet, i - 1, j, target, visited) || //\n        dfs(blockedSet, i, j + 1, target, visited) || //\n        dfs(blockedSet, i, j - 1, target, visited);\n  }\n\n  private long hash(int i, int j) {\n    return ((long) i << 16) + j;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isEscapePossible(self, blocked: List[List[int]], source: List[int], target: List[int]) -> bool:\n    def dfs(i: int, j: int, target: List[int], visited: set) -> bool:\n      if not 0 <= i < 10**6 or not 0 <= j < 10**6 or (i, j) in blocked or (i, j) in visited:\n        return False\n\n      visited.add((i, j))\n      if len(visited) > (1 + 199) * 199 // 2 or [i, j] == target:\n        return True\n      return dfs(i + 1, j, target, visited) or \\\n          dfs(i - 1, j, target, visited) or \\\n          dfs(i, j + 1, target, visited) or \\\n          dfs(i, j - 1, target, visited)\n\n    blocked = set(tuple(b) for b in blocked)\n    return dfs(source[0], source[1], target, set()) and dfs(target[0], target[1], source, set())\n",
                "lang_text": "py"
            }
        }
    }
}