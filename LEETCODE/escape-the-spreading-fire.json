{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2258",
            "title": "Escape the Spreading Fire",
            "titleSlug": "escape-the-spreading-fire",
            "content": "<p>You are given a <strong>0-indexed</strong> 2D integer array <code>grid</code> of size <code>m x n</code> which represents a field. Each cell has one of three values:</p>\n\n<ul>\n\t<li><code>0</code> represents grass,</li>\n\t<li><code>1</code> represents fire,</li>\n\t<li><code>2</code> represents a wall that you and fire cannot pass through.</li>\n</ul>\n\n<p>You are situated in the top-left cell, <code>(0, 0)</code>, and you want to travel to the safehouse at the bottom-right cell, <code>(m - 1, n - 1)</code>. Every minute, you may move to an <strong>adjacent</strong> grass cell. <strong>After</strong> your move, every fire cell will spread to all <strong>adjacent</strong> cells that are not walls.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse</em>. If this is impossible, return <code>-1</code>. If you can <strong>always</strong> reach the safehouse regardless of the minutes stayed, return <code>10<sup>9</sup></code>.</p>\n\n<p>Note that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse.</p>\n\n<p>A cell is <strong>adjacent</strong> to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/10/ex1new.jpg\" style=\"width: 650px; height: 404px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The figure above shows the scenario where you stay in the initial position for 3 minutes.\nYou will still be able to safely reach the safehouse.\nStaying for more than 3 minutes will not allow you to safely reach the safehouse.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/10/ex2new2.jpg\" style=\"width: 515px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The figure above shows the scenario where you immediately move towards the safehouse.\nFire will spread to any cell you move towards and it is impossible to safely reach the safehouse.\nThus, -1 is returned.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/10/ex3new.jpg\" style=\"width: 174px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0,0],[2,2,0],[1,2,0]]\n<strong>Output:</strong> 1000000000\n<strong>Explanation:</strong> The figure above shows the initial grid.\nNotice that the fire is contained by walls and you will always be able to safely reach the safehouse.\nThus, 10<sup>9</sup> is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>2 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>4 &lt;= m * n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code>, <code>1</code>, or <code>2</code>.</li>\n\t<li><code>grid[0][0] == grid[m - 1][n - 1] == 0</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 666,
            "dislikes": 26,
            "similarQuestions": "[{\"title\": \"Rotting Oranges\", \"titleSlug\": \"rotting-oranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Last Day Where You Can Still Cross\", \"titleSlug\": \"last-day-where-you-can-still-cross\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Weighted Subgraph With the Required Paths\", \"titleSlug\": \"minimum-weighted-subgraph-with-the-required-paths\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Points From Grid Queries\", \"titleSlug\": \"maximum-number-of-points-from-grid-queries\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.2K\", \"totalSubmission\": \"26.4K\", \"totalAcceptedRaw\": 9169, \"totalSubmissionRaw\": 26435, \"acRate\": \"34.7%\"}",
            "hints": [
                "For some tile (x, y), how can we determine when, if ever, the fire will reach it?",
                "We can use multi-source BFS to find the earliest time the fire will reach each cell.",
                "Then, starting with a given t minutes of staying in the initial position, we can check if there is a safe path to the safehouse using the obtained information about the fire.",
                "We can use binary search to efficiently find the maximum t that allows us to reach the safehouse."
            ],
            "rephrased": {
                "body": "Given a 0-indexed 2D integer array `grid` of size `m x n` representing a field, where:\n\n*   `0` represents grass,\n*   `1` represents fire,\n*   `2` represents a wall that neither you nor fire can pass through.\n\nYou start at the top-left cell `(0, 0)` and want to reach the safehouse at the bottom-right cell `(m - 1, n - 1)`. Each minute, you can move to an adjacent grass cell (north, east, south, or west). After your move, every fire cell spreads to all adjacent cells that are not walls.\n\nDetermine the maximum number of minutes you can wait at the initial position before moving and still safely reach the safehouse. Return -1 if it's impossible, or 10<sup>9</sup> if you can always reach the safehouse regardless of waiting time.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "2 <= m, n <= 300",
                    "4 <= m * n <= 2 * 10<sup>4</sup>",
                    "grid[i][j] is either 0, 1, or 2.",
                    "grid[0][0] == grid[m - 1][n - 1] == 0"
                ],
                "testcases": [
                    {
                        "input": "[[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]",
                        "output": "3",
                        "explanation": "By staying in the initial position for 3 minutes, you can still safely reach the safehouse. Staying longer than 3 minutes makes it impossible to reach the safehouse safely."
                    },
                    {
                        "input": "[[0,0,0,0],[0,1,2,0],[0,2,0,0]]",
                        "output": "-1",
                        "explanation": "Even if you move immediately, the fire spreads too quickly, making it impossible to reach the safehouse safely."
                    },
                    {
                        "input": "[[0,0,0],[2,2,0],[1,2,0]]",
                        "output": "1000000000",
                        "explanation": "The fire is contained by walls, so you can always safely reach the safehouse regardless of how long you wait."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "rotting-oranges",
                "title": "Rotting Oranges",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "last-day-where-you-can-still-cross",
                "title": "Last Day Where You Can Still Cross",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-weighted-subgraph-with-the-required-paths",
                "title": "Minimum Weighted Subgraph With the Required Paths",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-points-from-grid-queries",
                "title": "Maximum Number of Points From Grid Queries",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For some tile (x, y), how can we determine when, if ever, the fire will reach it?",
            "We can use multi-source BFS to find the earliest time the fire will reach each cell.",
            "Then, starting with a given t minutes of staying in the initial position, we can check if there is a safe path to the safehouse using the obtained information about the fire.",
            "We can use binary search to efficiently find the maximum t that allows us to reach the safehouse."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumMinutes(vector<vector<int>>& grid) {\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    const int kMax = grid.size() * grid[0].size();\n    vector<vector<int>> fireMinute(grid.size(),\n                                   vector<int>(grid[0].size(), -1));\n    buildFireGrid(grid, fireMinute, dirs);\n\n    int ans = -1;\n    int l = 0;\n    int r = kMax;\n\n    while (l <= r) {\n      const int m = (l + r) / 2;\n      if (canStayFor(grid, fireMinute, m, dirs)) {\n        ans = m;\n        l = m + 1;\n      } else {\n        r = m - 1;\n      }\n    }\n\n    return ans == kMax ? 1e9 : ans;\n  }\n\n private:\n  void buildFireGrid(const vector<vector<int>>& grid,\n                     vector<vector<int>>& fireMinute, const vector<int>& dirs) {\n    int minuteFromFire = 0;\n    queue<pair<int, int>> q;\n\n    for (int i = 0; i < grid.size(); ++i)\n      for (int j = 0; j < grid[0].size(); ++j)\n        if (grid[i][j] == 1) {  // fire\n          q.emplace(i, j);\n          fireMinute[i][j] = 0;\n        }\n\n    while (!q.empty()) {\n      ++minuteFromFire;\n      for (int sz = q.size(); sz > 0; --sz) {\n        const auto [i, j] = q.front();\n        q.pop();\n        for (int k = 0; k < 4; ++k) {\n          const int x = i + dirs[k];\n          const int y = j + dirs[k + 1];\n          if (x < 0 || x == grid.size() || y < 0 || y == grid[0].size())\n            continue;\n          if (grid[x][y] == 2)  // wall\n            continue;\n          if (fireMinute[x][y] != -1)\n            continue;\n          fireMinute[x][y] = minuteFromFire;\n          q.emplace(x, y);\n        }\n      }\n    }\n  }\n\n  bool canStayFor(const vector<vector<int>>& grid,\n                  const vector<vector<int>>& fireMinute, int minute,\n                  const vector<int>& dirs) {\n    queue<pair<int, int>> q{{{0, 0}}};  // start position\n    vector<vector<bool>> seen(grid.size(), vector<bool>(grid[0].size()));\n    seen[0][0] = true;\n\n    while (!q.empty()) {\n      ++minute;\n      for (int sz = q.size(); sz > 0; --sz) {\n        const auto [i, j] = q.front();\n        q.pop();\n        for (int k = 0; k < 4; ++k) {\n          const int x = i + dirs[k];\n          const int y = j + dirs[k + 1];\n          if (x < 0 || x == grid.size() || y < 0 || y == grid[0].size())\n            continue;\n          if (grid[x][y] == 2)  // wall\n            continue;\n          if (x == grid.size() - 1 && y == grid[0].size() - 1) {\n            if (fireMinute[x][y] != -1 && fireMinute[x][y] < minute)\n              continue;\n            return true;\n          }\n          if (fireMinute[x][y] != -1 && fireMinute[x][y] <= minute)\n            continue;\n          if (seen[x][y])\n            continue;\n          q.emplace(x, y);\n          seen[x][y] = true;\n        }\n      }\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumMinutes(int[][] grid) {\n    final int[] dirs = {0, 1, 0, -1, 0};\n    final int kMax = grid.length * grid[0].length;\n    int[][] fireMinute = new int[grid.length][grid[0].length];\n    Arrays.stream(fireMinute).forEach(A -> Arrays.fill(A, -1));\n    buildFireGrid(grid, fireMinute, dirs);\n\n    int ans = -1;\n    int l = 0;\n    int r = kMax;\n\n    while (l <= r) {\n      final int m = (l + r) / 2;\n      if (canStayFor(grid, fireMinute, m, dirs)) {\n        ans = m;\n        l = m + 1;\n      } else {\n        r = m - 1;\n      }\n    }\n\n    return ans == kMax ? (int) 1e9 : ans;\n  }\n\n  private void buildFireGrid(int[][] grid, int[][] fireMinute, final int[] dirs) {\n    int minuteFromFire = 0;\n    Queue<Pair<Integer, Integer>> q = new ArrayDeque<>();\n\n    for (int i = 0; i < grid.length; ++i)\n      for (int j = 0; j < grid[0].length; ++j)\n        if (grid[i][j] == 1) { // fire\n          q.offer(new Pair<>(i, j));\n          fireMinute[i][j] = 0;\n        }\n\n    while (!q.isEmpty()) {\n      ++minuteFromFire;\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int i = q.peek().getKey();\n        final int j = q.poll().getValue();\n        for (int k = 0; k < 4; ++k) {\n          final int x = i + dirs[k];\n          final int y = j + dirs[k + 1];\n          if (x < 0 || x == grid.length || y < 0 || y == grid[0].length)\n            continue;\n          if (grid[x][y] == 2) // wall\n            continue;\n          if (fireMinute[x][y] != -1)\n            continue;\n          fireMinute[x][y] = minuteFromFire;\n          q.offer(new Pair<>(x, y));\n        }\n      }\n    }\n  }\n\n  boolean canStayFor(int[][] grid, int[][] fireMinute, int minute, final int[] dirs) {\n    Queue<Pair<Integer, Integer>> q =\n        new ArrayDeque<>(Arrays.asList(new Pair<>(0, 0))); // start position\n    boolean[][] seen = new boolean[grid.length][grid[0].length];\n    seen[0][0] = true;\n\n    while (!q.isEmpty()) {\n      ++minute;\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int i = q.peek().getKey();\n        final int j = q.poll().getValue();\n        for (int k = 0; k < 4; ++k) {\n          final int x = i + dirs[k];\n          final int y = j + dirs[k + 1];\n          if (x < 0 || x == grid.length || y < 0 || y == grid[0].length)\n            continue;\n          if (grid[x][y] == 2) // wall\n            continue;\n          if (x == grid.length - 1 && y == grid[0].length - 1) {\n            if (fireMinute[x][y] != -1 && fireMinute[x][y] < minute)\n              continue;\n            return true;\n          }\n          if (fireMinute[x][y] != -1 && fireMinute[x][y] <= minute)\n            continue;\n          if (seen[x][y])\n            continue;\n          q.offer(new Pair<>(x, y));\n          seen[x][y] = true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumMinutes(self, grid: List[List[int]]) -> int:\n    dirs = [0, 1, 0, -1, 0]\n    kMax = len(grid) * len(grid[0])\n    fireGrid = [[-1] * len(grid[0]) for _ in range(len(grid[0]))]\n    self._buildFireGrid(grid, fireGrid, dirs)\n\n    ans = -1\n    l = 0\n    r = kMax\n\n    while l <= r:\n      m = (l + r) // 2\n      if self._canStayFor(grid, fireGrid, m, dirs):\n        ans = m\n        l = m + 1\n      else:\n        r = m - 1\n\n    return 1e9 if ans == kMax else ans\n\n  def _buildFireGrid(self, grid: List[List[int]], fireMinute: List[List[int]], dirs: List[int]) -> None:\n    minuteFromFire = 0\n    q = collections.deque()\n\n    for i in range(len(grid)):\n      for j in range(len(grid[0])):\n        if grid[i][j] == 1:  # fire\n          q.append((i, j))\n          fireMinute[i][j] = 0\n\n    while q:\n      minuteFromFire += 1\n      for _ in range(len(q)):\n        i, j = q.popleft()\n        for k in range(4):\n          x = i + dirs[k]\n          y = j + dirs[k + 1]\n          if x < 0 or x == len(grid) or y < 0 or y == len(grid[0]):\n            continue\n          if grid[x][y] == 2:  # wall\n            continue\n          if fireMinute[x][y] != -1:\n            continue\n          fireMinute[x][y] = minuteFromFire\n          q.append((x, y))\n\n  def _canStayFor(self, grid: List[List[int]], fireMinute: List[List[int]], minute: int, dirs: List[int]) -> bool:\n    q = collections.deque([(0, 0)])  # start position\n    seen = {(0, 0)}\n\n    while q:\n      minute += 1\n      for _ in range(len(q)):\n        i, j = q.popleft()\n        for k in range(4):\n          x = i + dirs[k]\n          y = j + dirs[k + 1]\n          if x < 0 or x == len(grid) or y < 0 or y == len(grid[0]):\n            continue\n          if grid[x][y] == 2:  # wall\n            continue\n          if x == len(grid) - 1 and y == len(grid[0]) - 1:\n            if fireMinute[x][y] != -1 and fireMinute[x][y] < minute:\n              continue\n            return True\n          if fireMinute[x][y] != -1 and fireMinute[x][y] <= minute:\n            continue\n          if seen[x][y]:\n            continue\n          q.append((x, y))\n          seen.add((x, y))\n\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}