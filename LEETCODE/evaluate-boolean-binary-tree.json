{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2331",
            "title": "Evaluate Boolean Binary Tree",
            "titleSlug": "evaluate-boolean-binary-tree",
            "content": "<p>You are given the <code>root</code> of a <strong>full binary tree</strong> with the following properties:</p>\n\n<ul>\n\t<li><strong>Leaf nodes</strong> have either the value <code>0</code> or <code>1</code>, where <code>0</code> represents <code>False</code> and <code>1</code> represents <code>True</code>.</li>\n\t<li><strong>Non-leaf nodes</strong> have either the value <code>2</code> or <code>3</code>, where <code>2</code> represents the boolean <code>OR</code> and <code>3</code> represents the boolean <code>AND</code>.</li>\n</ul>\n\n<p>The <strong>evaluation</strong> of a node is as follows:</p>\n\n<ul>\n\t<li>If the node is a leaf node, the evaluation is the <strong>value</strong> of the node, i.e. <code>True</code> or <code>False</code>.</li>\n\t<li>Otherwise, <strong>evaluate</strong> the node&#39;s two children and <strong>apply</strong> the boolean operation of its value with the children&#39;s evaluations.</li>\n</ul>\n\n<p>Return<em> the boolean result of <strong>evaluating</strong> the </em><code>root</code><em> node.</em></p>\n\n<p>A <strong>full binary tree</strong> is a binary tree where each node has either <code>0</code> or <code>2</code> children.</p>\n\n<p>A <strong>leaf node</strong> is a node that has zero children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/05/16/example1drawio1.png\" style=\"width: 700px; height: 252px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,3,null,null,0,1]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The above diagram illustrates the evaluation process.\nThe AND node evaluates to False AND True = False.\nThe OR node evaluates to True OR False = True.\nThe root node evaluates to True, so we return true.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [0]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The root node is a leaf node and it evaluates to false, so we return false.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 3</code></li>\n\t<li>Every node has either <code>0</code> or <code>2</code> children.</li>\n\t<li>Leaf nodes have a value of <code>0</code> or <code>1</code>.</li>\n\t<li>Non-leaf nodes have a value of <code>2</code> or <code>3</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 894,
            "dislikes": 26,
            "similarQuestions": "[{\"title\": \"Check If Two Expression Trees are Equivalent\", \"titleSlug\": \"check-if-two-expression-trees-are-equivalent\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design an Expression Tree With Evaluate Function\", \"titleSlug\": \"design-an-expression-tree-with-evaluate-function\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Flips in Binary Tree to Get Result\", \"titleSlug\": \"minimum-flips-in-binary-tree-to-get-result\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"62.2K\", \"totalSubmission\": \"79.9K\", \"totalAcceptedRaw\": 62191, \"totalSubmissionRaw\": 79894, \"acRate\": \"77.8%\"}",
            "hints": [
                "Traverse the tree using depth-first search in post-order.",
                "Can you use recursion to solve this easily?"
            ],
            "rephrased": {
                "body": "You are given the root of a full binary tree. Leaf nodes have values of 0 (False) or 1 (True). Non-leaf nodes have values of 2 (OR) or 3 (AND). Evaluate the tree and return the boolean result of the root node.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 1000].",
                    "0 <= Node.val <= 3",
                    "Every node has either 0 or 2 children.",
                    "Leaf nodes have a value of 0 or 1.",
                    "Non-leaf nodes have a value of 2 or 3."
                ],
                "testcases": [
                    {
                        "input": "[2,1,3,null,null,0,1]",
                        "output": "true",
                        "explanation": "The AND node evaluates to False AND True = False. The OR node evaluates to True OR False = True. The root node evaluates to True."
                    },
                    {
                        "input": "[0]",
                        "output": "false",
                        "explanation": "The root node is a leaf node and it evaluates to false."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "check-if-two-expression-trees-are-equivalent",
                "title": "Check If Two Expression Trees are Equivalent",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "design-an-expression-tree-with-evaluate-function",
                "title": "Design an Expression Tree With Evaluate Function",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-flips-in-binary-tree-to-get-result",
                "title": "Minimum Flips in Binary Tree to Get Result",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Traverse the tree using depth-first search in post-order.",
            "Can you use recursion to solve this easily?"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool evaluateTree(TreeNode* root) {\n    if (root->val < 2)\n      return root->val;\n    if (root->val == 2)  // OR\n      return evaluateTree(root->left) || evaluateTree(root->right);\n    // AND\n    return evaluateTree(root->left) && evaluateTree(root->right);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean evaluateTree(TreeNode root) {\n    if (root.val < 2)\n      return root.val == 1;\n    if (root.val == 2) // OR\n      return evaluateTree(root.left) || evaluateTree(root.right);\n    // AND\n    return evaluateTree(root.left) && evaluateTree(root.right);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def evaluateTree(self, root: Optional[TreeNode]) -> bool:\n    if root.val < 2:\n      return root.val\n    if root.val == 2:  # OR\n      return self.evaluateTree(root.left) or self.evaluateTree(root.right)\n    # AND\n    return self.evaluateTree(root.left) and self.evaluateTree(root.right)\n",
                "lang_text": "py"
            }
        }
    }
}