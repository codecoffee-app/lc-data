{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "399",
            "title": "Evaluate Division",
            "titleSlug": "evaluate-division",
            "content": "<p>You are given an array of variable pairs <code>equations</code> and an array of real numbers <code>values</code>, where <code>equations[i] = [A<sub>i</sub>, B<sub>i</sub>]</code> and <code>values[i]</code> represent the equation <code>A<sub>i</sub> / B<sub>i</sub> = values[i]</code>. Each <code>A<sub>i</sub></code> or <code>B<sub>i</sub></code> is a string that represents a single variable.</p>\n\n<p>You are also given some <code>queries</code>, where <code>queries[j] = [C<sub>j</sub>, D<sub>j</sub>]</code> represents the <code>j<sup>th</sup></code> query where you must find the answer for <code>C<sub>j</sub> / D<sub>j</sub> = ?</code>.</p>\n\n<p>Return <em>the answers to all queries</em>. If a single answer cannot be determined, return <code>-1.0</code>.</p>\n\n<p><strong>Note:</strong> The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.</p>\n\n<p><strong>Note:&nbsp;</strong>The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;]], values = [2.0,3.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;e&quot;],[&quot;a&quot;,&quot;a&quot;],[&quot;x&quot;,&quot;x&quot;]]\n<strong>Output:</strong> [6.00000,0.50000,-1.00000,1.00000,-1.00000]\n<strong>Explanation:</strong> \nGiven: <em>a / b = 2.0</em>, <em>b / c = 3.0</em>\nqueries are: <em>a / c = ?</em>, <em>b / a = ?</em>, <em>a / e = ?</em>, <em>a / a = ?</em>, <em>x / x = ? </em>\nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\nnote: x is undefined =&gt; -1.0</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;],[&quot;bc&quot;,&quot;cd&quot;]], values = [1.5,2.5,5.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;c&quot;,&quot;b&quot;],[&quot;bc&quot;,&quot;cd&quot;],[&quot;cd&quot;,&quot;bc&quot;]]\n<strong>Output:</strong> [3.75000,0.40000,5.00000,0.20000]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [[&quot;a&quot;,&quot;b&quot;]], values = [0.5], queries = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;c&quot;],[&quot;x&quot;,&quot;y&quot;]]\n<strong>Output:</strong> [0.50000,2.00000,-1.00000,-1.00000]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= equations.length &lt;= 20</code></li>\n\t<li><code>equations[i].length == 2</code></li>\n\t<li><code>1 &lt;= A<sub>i</sub>.length, B<sub>i</sub>.length &lt;= 5</code></li>\n\t<li><code>values.length == equations.length</code></li>\n\t<li><code>0.0 &lt; values[i] &lt;= 20.0</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 20</code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>1 &lt;= C<sub>j</sub>.length, D<sub>j</sub>.length &lt;= 5</code></li>\n\t<li><code>A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub>, D<sub>j</sub></code> consist of lower case English letters and digits.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8888,
            "dislikes": 839,
            "similarQuestions": "[{\"title\": \"Check for Contradictions in Equations\", \"titleSlug\": \"check-for-contradictions-in-equations\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"428.9K\", \"totalSubmission\": \"697.7K\", \"totalAcceptedRaw\": 428884, \"totalSubmissionRaw\": 697733, \"acRate\": \"61.5%\"}",
            "hints": [
                "Do you recognize this as a graph problem?"
            ],
            "rephrased": {
                "body": "You are given a list of variable pairs `equations` and their corresponding real number values `values`. `equations[i] = [A_i, B_i]` and `values[i]` represent the equation `A_i / B_i = values[i]`, where `A_i` and `B_i` are string representations of single variables.\n\nYou are also given a list of `queries`, where `queries[j] = [C_j, D_j]` represents the `j-th` query. For each query, you need to find the value of `C_j / D_j = ?`.\n\nReturn an array containing the answers to all queries. If a single answer cannot be determined, return `-1.0`. The input is always valid, meaning evaluating the queries won't result in division by zero, and there are no contradictions. Variables not in the equations list are considered undefined, and their corresponding query should return -1.0.",
                "constraints": [
                    "1 <= equations.length <= 20",
                    "equations[i].length == 2",
                    "1 <= A_i.length, B_i.length <= 5",
                    "values.length == equations.length",
                    "0.0 < values[i] <= 20.0",
                    "1 <= queries.length <= 20",
                    "queries[i].length == 2",
                    "1 <= C_j.length, D_j.length <= 5",
                    "A_i, B_i, C_j, D_j consist of lowercase English letters and digits."
                ],
                "testcases": [
                    {
                        "input": "equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]",
                        "output": "[6.00000,0.50000,-1.00000,1.00000,-1.00000]",
                        "explanation": "Given a / b = 2.0 and b / c = 3.0, the queries are a / c, b / a, a / e, a / a, and x / x.\na / c = (a / b) * (b / c) = 2.0 * 3.0 = 6.0\nb / a = 1 / (a / b) = 1 / 2.0 = 0.5\na / e is undefined as 'e' is not in the equations, so it's -1.0\na / a = 1.0\nx / x is undefined as 'x' is not in the equations, so it's -1.0"
                    },
                    {
                        "input": "equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]",
                        "output": "[3.75000,0.40000,5.00000,0.20000]",
                        "explanation": "null"
                    },
                    {
                        "input": "equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]",
                        "output": "[0.50000,2.00000,-1.00000,-1.00000]",
                        "explanation": "null"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "check-for-contradictions-in-equations",
                "title": "Check for Contradictions in Equations",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Do you recognize this as a graph problem?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<double> calcEquation(vector<vector<string>>& equations,\n                              vector<double>& values,\n                              vector<vector<string>>& queries) {\n    vector<double> ans;\n    // graph[A][B] := A / B\n    unordered_map<string, unordered_map<string, double>> graph;\n\n    for (int i = 0; i < equations.size(); ++i) {\n      const string& A = equations[i][0];\n      const string& B = equations[i][1];\n      graph[A][B] = values[i];\n      graph[B][A] = 1 / values[i];\n    }\n\n    for (const vector<string>& query : queries) {\n      const string& A = query[0];\n      const string& C = query[1];\n      if (!graph.count(A) || !graph.count(C))\n        ans.push_back(-1);\n      else\n        ans.push_back(divide(graph, A, C, unordered_set<string>()));\n    }\n\n    return ans;\n  }\n\n private:\n  // Returns A / C.\n  double divide(\n      const unordered_map<string, unordered_map<string, double>>& graph,\n      const string& A, const string& C, unordered_set<string>&& seen) {\n    if (A == C)\n      return 1.0;\n\n    seen.insert(A);\n\n    // value := A / B\n    for (const auto& [B, value] : graph.at(A)) {\n      if (seen.count(B))\n        continue;\n      const double res = divide(graph, B, C, move(seen));  // B / C\n      if (res > 0)                                         // valid result\n        return value * res;  // A / C = (A / B) * (B / C)\n    }\n\n    return -1;  // invalid result\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public double[] calcEquation(List<List<String>> equations, double[] values,\n                               List<List<String>> queries) {\n    double[] ans = new double[queries.size()];\n    // graph.get(A).get(B) := A / B\n    Map<String, Map<String, Double>> graph = new HashMap<>();\n\n    // Construct the graph.\n    for (int i = 0; i < equations.size(); ++i) {\n      final String A = equations.get(i).get(0);\n      final String B = equations.get(i).get(1);\n      graph.putIfAbsent(A, new HashMap<>());\n      graph.putIfAbsent(B, new HashMap<>());\n      graph.get(A).put(B, values[i]);\n      graph.get(B).put(A, 1.0 / values[i]);\n    }\n\n    for (int i = 0; i < queries.size(); ++i) {\n      final String A = queries.get(i).get(0);\n      final String C = queries.get(i).get(1);\n      if (!graph.containsKey(A) || !graph.containsKey(C))\n        ans[i] = -1.0;\n      else\n        ans[i] = divide(graph, A, C, new HashSet<>());\n    }\n\n    return ans;\n  }\n\n  // Returns A / C.\n  private double divide(Map<String, Map<String, Double>> graph, final String A, final String C,\n                        Set<String> seen) {\n    if (A.equals(C))\n      return 1.0;\n\n    seen.add(A);\n\n    for (final String B : graph.get(A).keySet()) {\n      if (seen.contains(B))\n        continue;\n      final double res = divide(graph, B, C, seen); // B / C\n      if (res > 0)                                  // valid result\n        return graph.get(A).get(B) * res;           // A / C = (A / B) * (B / C)\n    }\n\n    return -1.0; // invalid result\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n    ans = []\n    # graph[A][B] := A / B\n    graph = collections.defaultdict(dict)\n\n    for (A, B), value in zip(equations, values):\n      graph[A][B] = value\n      graph[B][A] = 1 / value\n\n    # Returns A / C.\n    def devide(A: str, C: str, seen: Set[str]) -> float:\n      if A == C:\n        return 1.0\n\n      seen.add(A)\n\n      # value := A / B\n      for B, value in graph[A].items():\n        if B in seen:\n          continue\n        res = devide(B, C, seen)  # B / C\n        if res > 0:  # valid result\n          return value * res  # (A / B) * (B / C) = A / C\n\n      return -1.0  # invalid result\n\n    for A, C in queries:\n      if A not in graph and C not in graph:\n        ans.append(-1.0)\n      else:\n        ans.append(devide(A, C, set()))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}