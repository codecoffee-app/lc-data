{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "150",
            "title": "Evaluate Reverse Polish Notation",
            "titleSlug": "evaluate-reverse-polish-notation",
            "content": "<p>You are given an array of strings <code>tokens</code> that represents an arithmetic expression in a <a href=\"http://en.wikipedia.org/wiki/Reverse_Polish_notation\" target=\"_blank\">Reverse Polish Notation</a>.</p>\n\n<p>Evaluate the expression. Return <em>an integer that represents the value of the expression</em>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>The valid operators are <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, and <code>&#39;/&#39;</code>.</li>\n\t<li>Each operand may be an integer or another expression.</li>\n\t<li>The division between two integers always <strong>truncates toward zero</strong>.</li>\n\t<li>There will not be any division by zero.</li>\n\t<li>The input represents a valid arithmetic expression in a reverse polish notation.</li>\n\t<li>The answer and all the intermediate calculations can be represented in a <strong>32-bit</strong> integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> ((2 + 1) * 3) = 9\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tokens = [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;/&quot;,&quot;+&quot;]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> (4 + (13 / 5)) = 6\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tokens = [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;/&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tokens.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>tokens[i]</code> is either an operator: <code>&quot;+&quot;</code>, <code>&quot;-&quot;</code>, <code>&quot;*&quot;</code>, or <code>&quot;/&quot;</code>, or an integer in the range <code>[-200, 200]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6811,
            "dislikes": 1001,
            "similarQuestions": "[{\"title\": \"Basic Calculator\", \"titleSlug\": \"basic-calculator\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Expression Add Operators\", \"titleSlug\": \"expression-add-operators\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"830.9K\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 830906, \"totalSubmissionRaw\": 1713441, \"acRate\": \"48.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Evaluate an arithmetic expression in Reverse Polish Notation (RPN) represented by an array of strings called `tokens`. Return the integer result of the expression.  The valid operators are '+', '-', '*', and '/'. Integer division truncates toward zero.",
                "constraints": [
                    "1 <= tokens.length <= 10^4",
                    "tokens[i] is either an operator ('+', '-', '*', '/') or an integer in the range [-200, 200]."
                ],
                "testcases": [
                    {
                        "input": "[\"2\",\"1\",\"+\",\"3\",\"*\"]",
                        "output": "9",
                        "explanation": "The expression (2 + 1) * 3 evaluates to 9."
                    },
                    {
                        "input": "[\"4\",\"13\",\"5\",\"/\",\"+\"]",
                        "output": "6",
                        "explanation": "The expression (4 + (13 / 5)) evaluates to 6 because 13 / 5 = 2 (truncating towards zero), so 4 + 2 = 6."
                    },
                    {
                        "input": "[\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]",
                        "output": "22",
                        "explanation": "The expression simplifies as follows: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = ((10 * (6 / (12 * -11))) + 17) + 5 = ((10 * (6 / -132)) + 17) + 5 = ((10 * 0) + 17) + 5 = (0 + 17) + 5 = 17 + 5 = 22."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "basic-calculator",
                "title": "Basic Calculator",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "expression-add-operators",
                "title": "Expression Add Operators",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Stack",
                "slug": "stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int evalRPN(vector<string>& tokens) {\n    stack<long> stack;\n    const unordered_map<string, function<long(long, long)>> op{\n        {\"+\", std::plus<long>()},\n        {\"-\", std::minus<long>()},\n        {\"*\", std::multiplies<long>()},\n        {\"/\", std::divides<long>()}};\n\n    for (const string& token : tokens)\n      if (op.count(token)) {\n        const long b = stack.top();\n        stack.pop();\n        const long a = stack.top();\n        stack.pop();\n        stack.push(op.at(token)(a, b));\n      } else {\n        stack.push(stoi(token));\n      }\n\n    return stack.top();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int evalRPN(String[] tokens) {\n    final Map<String, BinaryOperator<Long>> op = Map.of(\n        \"+\", (a, b) -> a + b, \"-\", (a, b) -> a - b, \"*\", (a, b) -> a * b, \"/\", (a, b) -> a / b);\n    Deque<Long> stack = new ArrayDeque<>();\n\n    for (final String token : tokens)\n      if (op.containsKey(token)) {\n        final long b = stack.pop();\n        final long a = stack.pop();\n        stack.push(op.get(token).apply(a, b));\n      } else {\n        stack.push(Long.parseLong(token));\n      }\n\n    return stack.pop().intValue();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def evalRPN(self, tokens: List[str]) -> int:\n    stack = []\n    op = {\n        '+': lambda a, b: a + b,\n        '-': lambda a, b: a - b,\n        '*': lambda a, b: a * b,\n        '/': lambda a, b: int(a / b),\n    }\n\n    for token in tokens:\n      if token in op:\n        b = stack.pop()\n        a = stack.pop()\n        stack.append(op[token](a, b))\n      else:\n        stack.append(int(token))\n\n    return stack.pop()\n",
                "lang_text": "py"
            }
        }
    }
}