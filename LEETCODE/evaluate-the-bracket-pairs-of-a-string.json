{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1807",
            "title": "Evaluate the Bracket Pairs of a String",
            "titleSlug": "evaluate-the-bracket-pairs-of-a-string",
            "content": "<p>You are given a string <code>s</code> that contains some bracket pairs, with each pair containing a <strong>non-empty</strong> key.</p>\n\n<ul>\n\t<li>For example, in the string <code>&quot;(name)is(age)yearsold&quot;</code>, there are <strong>two</strong> bracket pairs that contain the keys <code>&quot;name&quot;</code> and <code>&quot;age&quot;</code>.</li>\n</ul>\n\n<p>You know the values of a wide range of keys. This is represented by a 2D string array <code>knowledge</code> where each <code>knowledge[i] = [key<sub>i</sub>, value<sub>i</sub>]</code> indicates that key <code>key<sub>i</sub></code> has a value of <code>value<sub>i</sub></code>.</p>\n\n<p>You are tasked to evaluate <strong>all</strong> of the bracket pairs. When you evaluate a bracket pair that contains some key <code>key<sub>i</sub></code>, you will:</p>\n\n<ul>\n\t<li>Replace <code>key<sub>i</sub></code> and the bracket pair with the key&#39;s corresponding <code>value<sub>i</sub></code>.</li>\n\t<li>If you do not know the value of the key, you will replace <code>key<sub>i</sub></code> and the bracket pair with a question mark <code>&quot;?&quot;</code> (without the quotation marks).</li>\n</ul>\n\n<p>Each key will appear at most once in your <code>knowledge</code>. There will not be any nested brackets in <code>s</code>.</p>\n\n<p>Return <em>the resulting string after evaluating <strong>all</strong> of the bracket pairs.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(name)is(age)yearsold&quot;, knowledge = [[&quot;name&quot;,&quot;bob&quot;],[&quot;age&quot;,&quot;two&quot;]]\n<strong>Output:</strong> &quot;bobistwoyearsold&quot;\n<strong>Explanation:</strong>\nThe key &quot;name&quot; has a value of &quot;bob&quot;, so replace &quot;(name)&quot; with &quot;bob&quot;.\nThe key &quot;age&quot; has a value of &quot;two&quot;, so replace &quot;(age)&quot; with &quot;two&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;hi(name)&quot;, knowledge = [[&quot;a&quot;,&quot;b&quot;]]\n<strong>Output:</strong> &quot;hi?&quot;\n<strong>Explanation:</strong> As you do not know the value of the key &quot;name&quot;, replace &quot;(name)&quot; with &quot;?&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(a)(a)(a)aaa&quot;, knowledge = [[&quot;a&quot;,&quot;yes&quot;]]\n<strong>Output:</strong> &quot;yesyesyesaaa&quot;\n<strong>Explanation:</strong> The same key can appear multiple times.\nThe key &quot;a&quot; has a value of &quot;yes&quot;, so replace all occurrences of &quot;(a)&quot; with &quot;yes&quot;.\nNotice that the &quot;a&quot;s not in a bracket pair are not evaluated.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= knowledge.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>knowledge[i].length == 2</code></li>\n\t<li><code>1 &lt;= key<sub>i</sub>.length, value<sub>i</sub>.length &lt;= 10</code></li>\n\t<li><code>s</code> consists of lowercase English letters and round brackets <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>.</li>\n\t<li>Every open bracket <code>&#39;(&#39;</code> in <code>s</code> will have a corresponding close bracket <code>&#39;)&#39;</code>.</li>\n\t<li>The key in each bracket pair of <code>s</code> will be non-empty.</li>\n\t<li>There will not be any nested bracket pairs in <code>s</code>.</li>\n\t<li><code>key<sub>i</sub></code> and <code>value<sub>i</sub></code> consist of lowercase English letters.</li>\n\t<li>Each <code>key<sub>i</sub></code> in <code>knowledge</code> is unique.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 466,
            "dislikes": 40,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"28.2K\", \"totalSubmission\": \"42.2K\", \"totalAcceptedRaw\": 28168, \"totalSubmissionRaw\": 42246, \"acRate\": \"66.7%\"}",
            "hints": [
                "Process pairs from right to left to handle repeats",
                "Keep track of the current enclosed string using another string"
            ],
            "rephrased": {
                "body": "Given a string `s` containing bracket pairs with non-empty keys (e.g., `(name)is(age)yearsold`), and a 2D string array `knowledge` where each `knowledge[i] = [key_i, value_i]` represents a key-value mapping, evaluate the bracket pairs in `s`.  Replace each bracket pair and its key with its corresponding value from `knowledge`. If a key is not found in `knowledge`, replace it with a question mark `?`. Return the resulting string after evaluating all bracket pairs. Each key appears at most once in `knowledge`, and there are no nested brackets in `s`.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "0 <= knowledge.length <= 10^5",
                    "knowledge[i].length == 2",
                    "1 <= key_i.length, value_i.length <= 10",
                    "s consists of lowercase English letters and round brackets '(' and ')'.",
                    "Every open bracket '(' in s will have a corresponding close bracket ')'.",
                    "The key in each bracket pair of s will be non-empty.",
                    "There will not be any nested bracket pairs in s.",
                    "key_i and value_i consist of lowercase English letters.",
                    "Each key_i in knowledge is unique."
                ],
                "testcases": [
                    {
                        "input": {
                            "s": "(name)is(age)yearsold",
                            "knowledge": [
                                [
                                    "name",
                                    "bob"
                                ],
                                [
                                    "age",
                                    "two"
                                ]
                            ]
                        },
                        "output": "bobistwoyearsold",
                        "explanation": "The key 'name' is replaced with 'bob' and 'age' is replaced with 'two', resulting in 'bobistwoyearsold'."
                    },
                    {
                        "input": {
                            "s": "hi(name)",
                            "knowledge": [
                                [
                                    "a",
                                    "b"
                                ]
                            ]
                        },
                        "output": "hi?",
                        "explanation": "The key 'name' is not found in the knowledge base, so it is replaced with '?', resulting in 'hi?'."
                    },
                    {
                        "input": {
                            "s": "(a)(a)(a)aaa",
                            "knowledge": [
                                [
                                    "a",
                                    "yes"
                                ]
                            ]
                        },
                        "output": "yesyesyesaaa",
                        "explanation": "The key 'a' is replaced with 'yes' for each bracket pair occurrence, resulting in 'yesyesyesaaa'.  Note that the 'a's outside the brackets are not modified."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Process pairs from right to left to handle repeats",
            "Keep track of the current enclosed string using another string"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string evaluate(string s, vector<vector<string>>& knowledge) {\n    string ans;\n    unordered_map<string, string> map;\n\n    for (const vector<string>& list : knowledge)\n      map[\"(\" + list[0] + \")\"] = list[1];\n\n    for (int i = 0; i < s.length(); ++i) {\n      const char c = s[i];\n      if (c == '(') {\n        const int j = s.find_first_of(')', i);\n        const string& key = s.substr(i, j - i + 1);\n        ans += map.count(key) ? map[key] : \"?\";\n        i = j;\n      } else {\n        ans += c;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String evaluate(String s, List<List<String>> knowledge) {\n    StringBuilder sb = new StringBuilder();\n    Map<String, String> map = new HashMap<>();\n\n    for (List<String> list : knowledge)\n      map.put(\"(\" + list.get(0) + \")\", list.get(1));\n\n    for (int i = 0; i < s.length(); ++i) {\n      final char c = s.charAt(i);\n      if (c == '(') {\n        final int j = s.indexOf(')', i);\n        sb.append(map.getOrDefault(s.substring(i, j + 1), \"?\"));\n        i = j;\n      } else {\n        sb.append(c);\n      }\n    }\n\n    return sb.toString();\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}