{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "855",
            "title": "Exam Room",
            "titleSlug": "exam-room",
            "content": "<p>There is an exam room with <code>n</code> seats in a single row labeled from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number <code>0</code>.</p>\n\n<p>Design a class that simulates the mentioned exam room.</p>\n\n<p>Implement the <code>ExamRoom</code> class:</p>\n\n<ul>\n\t<li><code>ExamRoom(int n)</code> Initializes the object of the exam room with the number of the seats <code>n</code>.</li>\n\t<li><code>int seat()</code> Returns the label of the seat at which the next student will set.</li>\n\t<li><code>void leave(int p)</code> Indicates that the student sitting at seat <code>p</code> will leave the room. It is guaranteed that there will be a student sitting at seat <code>p</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;ExamRoom&quot;, &quot;seat&quot;, &quot;seat&quot;, &quot;seat&quot;, &quot;seat&quot;, &quot;leave&quot;, &quot;seat&quot;]\n[[10], [], [], [], [], [4], []]\n<strong>Output</strong>\n[null, 0, 9, 4, 2, null, 5]\n\n<strong>Explanation</strong>\nExamRoom examRoom = new ExamRoom(10);\nexamRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.\nexamRoom.seat(); // return 9, the student sits at the last seat number 9.\nexamRoom.seat(); // return 4, the student sits at the last seat number 4.\nexamRoom.seat(); // return 2, the student sits at the last seat number 2.\nexamRoom.leave(4);\nexamRoom.seat(); // return 5, the student sits at the last seat number 5.\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n\t<li>It is guaranteed that there is a student sitting at seat <code>p</code>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>seat</code> and <code>leave</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1271,
            "dislikes": 463,
            "similarQuestions": "[{\"title\": \"Maximize Distance to Closest Person\", \"titleSlug\": \"maximize-distance-to-closest-person\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"58.1K\", \"totalSubmission\": \"134.3K\", \"totalAcceptedRaw\": 58133, \"totalSubmissionRaw\": 134254, \"acRate\": \"43.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design an `ExamRoom` class to simulate an exam room with `n` seats in a single row, labeled from 0 to `n - 1`. Students entering the room must sit in the seat that maximizes the distance to the closest person. If multiple seats satisfy this condition, the student chooses the seat with the lowest number. If the room is empty, the student sits at seat 0.\n\nImplement the following methods:\n\n*   `ExamRoom(int n)`: Initializes the object with the number of seats `n`.\n*   `int seat()`: Returns the label of the seat chosen for the next student.\n*   `void leave(int p)`: Indicates that the student at seat `p` is leaving the room.  It is guaranteed that there is a student at seat `p`.",
                "constraints": [
                    "1 <= n <= 10^9",
                    "It is guaranteed that there is a student sitting at seat p.",
                    "At most 10^4 calls will be made to seat and leave."
                ],
                "testcases": [
                    {
                        "input": "[\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"]\n[[10], [], [], [], [], [4], []]",
                        "output": "[null, 0, 9, 4, 2, null, 5]",
                        "explanation": "First, the ExamRoom is initialized with 10 seats. The first student sits at seat 0 because the room is empty. The second student sits at seat 9 to maximize the distance from the first student. The third student sits at seat 4, which is the midpoint between 0 and 9. The fourth student sits at seat 2 to maximize the distance. The student at seat 4 leaves the room. Finally, the next student sits at seat 5, maximizing the distance to the remaining students."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximize-distance-to-closest-person",
                "title": "Maximize Distance to Closest Person",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class ExamRoom {\n public:\n  ExamRoom(int n) : n(n) {}\n\n  int seat() {\n    if (students.empty()) {\n      students.push_back(0);\n      map[0] = students.begin();\n      return 0;\n    }\n\n    int prevStudent = -1;\n    int maxDistToClosest = 0;\n    int val = 0;              // Inserted val\n    list<int>::iterator pos;  // Inserted position\n\n    for (auto it = students.begin(); it != students.end(); ++it) {\n      if (prevStudent == -1) {   // doesn't insert before\n        maxDistToClosest = *it;  // Distance between it and the begining\n        pos = it;\n      } else if ((*it - prevStudent) / 2 > maxDistToClosest) {\n        maxDistToClosest = (*it - prevStudent) / 2;\n        val = (*it + prevStudent) / 2;\n        pos = it;\n      }\n      prevStudent = *it;\n    }\n\n    if (n - 1 - students.back() > maxDistToClosest) {\n      pos = students.end();\n      val = n - 1;\n    }\n\n    map[val] = students.insert(pos, val);\n    return val;\n  }\n\n  void leave(int p) {\n    students.erase(map[p]);\n  }\n\n private:\n  const int n;\n  list<int> students;\n  unordered_map<int, list<int>::iterator> map;  // {p: student iterator}\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Node {\n  public Node prev;\n  public Node next;\n  public int value;\n\n  public Node(int value) {\n    this.value = value;\n  }\n}\n\nclass ExamRoom {\n  public ExamRoom(int n) {\n    this.n = n;\n    join(head, tail);\n  }\n\n  public int seat() {\n    if (head.next == tail) {\n      Node node = new Node(0);\n      join(head, node);\n      join(node, tail);\n      map.put(0, node);\n      return 0;\n    }\n\n    int prevStudent = -1;\n    int maxDistToClosest = 0;\n    int val = 0;     // Inserted val\n    Node pos = null; // Inserted position\n\n    for (Node node = head; node != tail; node = node.next) {\n      if (prevStudent == -1) {         // doesn't insert before\n        maxDistToClosest = node.value; // Distance between it and the begining\n        pos = node;\n      } else if ((node.value - prevStudent) / 2 > maxDistToClosest) {\n        maxDistToClosest = (node.value - prevStudent) / 2;\n        val = (node.value + prevStudent) / 2;\n        pos = node;\n      }\n      prevStudent = node.value;\n    }\n\n    if (n - 1 - tail.prev.value > maxDistToClosest) {\n      pos = tail;\n      val = n - 1;\n    }\n\n    Node insertedNode = new Node(val);\n    join(pos.prev, insertedNode);\n    join(insertedNode, pos);\n\n    map.put(val, insertedNode);\n    return val;\n  }\n\n  public void leave(int p) {\n    Node removedNode = map.get(p);\n    join(removedNode.prev, removedNode.next);\n  }\n\n  private int n;\n  private Node head = new Node(-1);\n  private Node tail = new Node(-1);\n  private Map<Integer, Node> map = new HashMap<>(); // {p: student iterator}\n\n  private void join(Node node1, Node node2) {\n    node1.next = node2;\n    node2.prev = node1;\n  }\n\n  private void remove(Node node) {\n    join(node.prev, node.next);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}