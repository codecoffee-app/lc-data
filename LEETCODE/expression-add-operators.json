{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "282",
            "title": "Expression Add Operators",
            "titleSlug": "expression-add-operators",
            "content": "<p>Given a string <code>num</code> that contains only digits and an integer <code>target</code>, return <em><strong>all possibilities</strong> to insert the binary operators </em><code>&#39;+&#39;</code><em>, </em><code>&#39;-&#39;</code><em>, and/or </em><code>&#39;*&#39;</code><em> between the digits of </em><code>num</code><em> so that the resultant expression evaluates to the </em><code>target</code><em> value</em>.</p>\n\n<p>Note that operands in the returned expressions <strong>should not</strong> contain leading zeros.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;123&quot;, target = 6\n<strong>Output:</strong> [&quot;1*2*3&quot;,&quot;1+2+3&quot;]\n<strong>Explanation:</strong> Both &quot;1*2*3&quot; and &quot;1+2+3&quot; evaluate to 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;232&quot;, target = 8\n<strong>Output:</strong> [&quot;2*3+2&quot;,&quot;2+3*2&quot;]\n<strong>Explanation:</strong> Both &quot;2*3+2&quot; and &quot;2+3*2&quot; evaluate to 8.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;3456237490&quot;, target = 9191\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no expressions that can be created from &quot;3456237490&quot; to evaluate to 9191.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 10</code></li>\n\t<li><code>num</code> consists of only digits.</li>\n\t<li><code>-2<sup>31</sup> &lt;= target &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3247,
            "dislikes": 584,
            "similarQuestions": "[{\"title\": \"Evaluate Reverse Polish Notation\", \"titleSlug\": \"evaluate-reverse-polish-notation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator\", \"titleSlug\": \"basic-calculator\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator II\", \"titleSlug\": \"basic-calculator-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Different Ways to Add Parentheses\", \"titleSlug\": \"different-ways-to-add-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Target Sum\", \"titleSlug\": \"target-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"213K\", \"totalSubmission\": \"538.6K\", \"totalAcceptedRaw\": 213003, \"totalSubmissionRaw\": 538604, \"acRate\": \"39.5%\"}",
            "hints": [
                "Note that a number can contain multiple digits.",
                "Since the question asks us to find <b>all</b> of the valid expressions, we need a way to iterate over all of them. (<b>Hint:</b> Recursion!)",
                "We can keep track of the expression string and evaluate it at the very end. But that would take a lot of time. Can we keep track of the expression's value as well so as to avoid the evaluation at the very end of recursion?",
                "Think carefully about the multiply operator. It has a higher precedence than the addition and subtraction operators. \r\n\r\n<br> 1 + 2 = 3  <br>\r\n1 + 2 - 4 --> 3 - 4 --> -1 <br>\r\n1 + 2 - 4 * 12 --> -1 * 12 --> -12 (WRONG!) <br>\r\n1 + 2 - 4 * 12 --> -1 - (-4) + (-4 * 12) --> 3 + (-48) --> -45 (CORRECT!)",
                "We simply need to keep track of the last operand in our expression and reverse it's effect on the expression's value while considering the multiply operator."
            ],
            "rephrased": {
                "body": "Given a string `num` consisting of digits and an integer `target`, find all possible expressions that can be formed by inserting binary operators '+', '-', and '*' between the digits of `num` such that the expression evaluates to `target`. Operands in the expressions should not have leading zeros.",
                "constraints": [
                    "1 <= num.length <= 10",
                    "num consists of only digits.",
                    "-2<sup>31</sup> <= target <= 2<sup>31</sup> - 1"
                ],
                "testcases": [
                    {
                        "input": "num = \"123\", target = 6",
                        "output": "[\"1*2*3\",\"1+2+3\"]",
                        "explanation": "Both \"1*2*3\" and \"1+2+3\" evaluate to 6."
                    },
                    {
                        "input": "num = \"232\", target = 8",
                        "output": "[\"2*3+2\",\"2+3*2\"]",
                        "explanation": "Both \"2*3+2\" and \"2+3*2\" evaluate to 8."
                    },
                    {
                        "input": "num = \"3456237490\", target = 9191",
                        "output": "[]",
                        "explanation": "There are no expressions that can be created from \"3456237490\" to evaluate to 9191."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "evaluate-reverse-polish-notation",
                "title": "Evaluate Reverse Polish Notation",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "basic-calculator",
                "title": "Basic Calculator",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "basic-calculator-ii",
                "title": "Basic Calculator II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "different-ways-to-add-parentheses",
                "title": "Different Ways to Add Parentheses",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "target-sum",
                "title": "Target Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Note that a number can contain multiple digits.",
            "Since the question asks us to find <b>all</b> of the valid expressions, we need a way to iterate over all of them. (<b>Hint:</b> Recursion!)",
            "We can keep track of the expression string and evaluate it at the very end. But that would take a lot of time. Can we keep track of the expression's value as well so as to avoid the evaluation at the very end of recursion?",
            "Think carefully about the multiply operator. It has a higher precedence than the addition and subtraction operators. \r\n\r\n<br> 1 + 2 = 3  <br>\r\n1 + 2 - 4 --> 3 - 4 --> -1 <br>\r\n1 + 2 - 4 * 12 --> -1 * 12 --> -12 (WRONG!) <br>\r\n1 + 2 - 4 * 12 --> -1 - (-4) + (-4 * 12) --> 3 + (-48) --> -45 (CORRECT!)",
            "We simply need to keep track of the last operand in our expression and reverse it's effect on the expression's value while considering the multiply operator."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> addOperators(string num, int target) {\n    vector<string> ans;\n    dfs(num, target, 0, 0, 0, {}, ans);\n    return ans;\n  }\n\n private:\n  string join(const vector<string>& path) {\n    string joined;\n    for (const string& s : path)\n      joined += s;\n    return joined;\n  }\n\n  // Start index, prev value, current evaluated value\n  void dfs(const string& num, int target, int start, long prev, long eval,\n           vector<string>&& path, vector<string>& ans) {\n    if (start == num.length()) {\n      if (eval == target)\n        ans.push_back(join(path));\n      return;\n    }\n\n    for (int i = start; i < num.length(); ++i) {\n      if (i > start && num[start] == '0')\n        return;\n      const string& s = num.substr(start, i - start + 1);\n      const long curr = stol(s);\n      if (start == 0) {\n        path.push_back(s);\n        dfs(num, target, i + 1, curr, curr, move(path), ans);\n        path.pop_back();\n      } else {\n        for (const string& op : {\"+\", \"-\", \"*\"}) {\n          path.push_back(op + s);\n          if (op == \"+\")\n            dfs(num, target, i + 1, curr, eval + curr, move(path), ans);\n          else if (op == \"-\")\n            dfs(num, target, i + 1, -curr, eval - curr, move(path), ans);\n          else\n            dfs(num, target, i + 1, prev * curr, eval - prev + prev * curr,\n                move(path), ans);\n          path.pop_back();\n        }\n      }\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> addOperators(String num, int target) {\n    List<String> ans = new ArrayList<>();\n    dfs(num, target, 0, 0, 0, new StringBuilder(), ans);\n    return ans;\n  }\n\n  private void dfs(String num, int target, int s, long prev, long eval, StringBuilder sb,\n                   List<String> ans) {\n    if (s == num.length()) {\n      if (eval == target)\n        ans.add(sb.toString());\n      return;\n    }\n\n    for (int i = s; i < num.length(); ++i) {\n      if (i > s && num.charAt(s) == '0')\n        return;\n      final long curr = Long.parseLong(num.substring(s, i + 1));\n      final int length = sb.length();\n      if (s == 0) { // First num\n        dfs(num, target, i + 1, curr, curr, sb.append(curr), ans);\n        sb.setLength(length);\n      } else {\n        dfs(num, target, i + 1, curr, eval + curr, sb.append(\"+\").append(curr), ans);\n        sb.setLength(length);\n        dfs(num, target, i + 1, -curr, eval - curr, sb.append(\"-\").append(curr), ans);\n        sb.setLength(length);\n        dfs(num, target, i + 1, prev * curr, eval - prev + prev * curr, sb.append(\"*\").append(curr),\n            ans);\n        sb.setLength(length);\n      }\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def addOperators(self, num: str, target: int) -> List[str]:\n    ans = []\n\n    # Start index, prev value, current evaluated value\n    def dfs(start: int, prev: int, eval: int, path: List[str]) -> None:\n      if start == len(num):\n        if eval == target:\n          ans.append(''.join(path))\n        return\n\n      for i in range(start, len(num)):\n        if i > start and num[start] == '0':\n          return\n        s = num[start:i + 1]\n        curr = int(s)\n        if start == 0:\n          path.append(s)\n          dfs(i + 1, curr, curr, path)\n          path.pop()\n        else:\n          for op in ['+', '-', '*']:\n            path.append(op + s)\n            if op == '+':\n              dfs(i + 1, curr, eval + curr, path)\n            elif op == '-':\n              dfs(i + 1, -curr, eval - curr, path)\n            else:\n              dfs(i + 1, prev * curr, eval - prev + prev * curr, path)\n            path.pop()\n\n    dfs(0, 0, 0, [])\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}