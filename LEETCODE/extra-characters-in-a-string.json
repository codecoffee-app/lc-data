{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2707",
            "title": "Extra Characters in a String",
            "titleSlug": "extra-characters-in-a-string",
            "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code> and a dictionary of words <code>dictionary</code>. You have to break <code>s</code> into one or more <strong>non-overlapping</strong> substrings such that each substring is present in <code>dictionary</code>. There may be some <strong>extra characters</strong> in <code>s</code> which are not present in any of the substrings.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of extra characters left over if you break up </em><code>s</code><em> optimally.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leetscode&quot;, dictionary = [&quot;leet&quot;,&quot;code&quot;,&quot;leetcode&quot;]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can break s in two substrings: &quot;leet&quot; from index 0 to 3 and &quot;code&quot; from index 5 to 8. There is only 1 unused character (at index 4), so we return 1.\n\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;sayhelloworld&quot;, dictionary = [&quot;hello&quot;,&quot;world&quot;]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can break s in two substrings: &quot;hello&quot; from index 3 to 7 and &quot;world&quot; from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= dictionary.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= dictionary[i].length &lt;= 50</code></li>\n\t<li><code>dictionary[i]</code>&nbsp;and <code>s</code> consists of only lowercase English letters</li>\n\t<li><code>dictionary</code> contains distinct words</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1978,
            "dislikes": 88,
            "similarQuestions": "[{\"title\": \"Word Break\", \"titleSlug\": \"word-break\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"79.3K\", \"totalSubmission\": \"150.5K\", \"totalAcceptedRaw\": 79346, \"totalSubmissionRaw\": 150513, \"acRate\": \"52.7%\"}",
            "hints": [
                "Can we use Dynamic Programming here?",
                "Define DP[i] as the min extra character if breaking up s[0:i] optimally."
            ],
            "rephrased": {
                "body": "Given a 0-indexed string `s` and a dictionary of words `dictionary`, the task is to break `s` into non-overlapping substrings, each of which is present in `dictionary`. Some characters in `s` might not be part of any substring. Determine the minimum number of extra characters remaining after optimally breaking up `s`.",
                "constraints": [
                    "1 <= s.length <= 50",
                    "1 <= dictionary.length <= 50",
                    "1 <= dictionary[i].length <= 50",
                    "`dictionary[i]` and `s` consist of only lowercase English letters",
                    "`dictionary` contains distinct words"
                ],
                "testcases": [
                    {
                        "input": "s = \"leetscode\", dictionary = [\"leet\",\"code\",\"leetcode\"]",
                        "output": "1",
                        "explanation": "The string `s` can be broken into \"leet\" and \"code\", using the dictionary words. The character at index 4, 's', is the only extra character that is not part of any substring, thus we return 1."
                    },
                    {
                        "input": "s = \"sayhelloworld\", dictionary = [\"hello\",\"world\"]",
                        "output": "3",
                        "explanation": "The string `s` can be broken into \"hello\" and \"world\", using the dictionary words. The characters at indices 0, 1, and 2, which are 's', 'a', and 'y' respectively, are not used in any substring and are considered extra characters. Therefore, we return 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "word-break",
                "title": "Word Break",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we use Dynamic Programming here?",
            "Define DP[i] as the min extra character if breaking up s[0:i] optimally."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Similar to 139. Word Break\n  int minExtraChar(string s, vector<string>& dictionary) {\n    const int n = s.length();\n    const unordered_set<string> dictionarySet{dictionary.begin(),\n                                              dictionary.end()};\n    // dp[i] := min extra characters if breaking up s[0:i] optimally\n    vector<int> dp(n + 1, n);\n    dp[0] = 0;\n\n    for (int i = 1; i <= n; ++i)\n      for (int j = 0; j < i; ++j)\n        // s[j..i) is in dictionarySet.\n        if (dictionarySet.count(s.substr(j, i - j)))\n          dp[i] = min(dp[i], dp[j]);\n        // s[j..i) are extra characters.\n        else\n          dp[i] = min(dp[i], dp[j] + i - j);\n\n    return dp[n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 139. Word Break\n  public int minExtraChar(String s, String[] dictionary) {\n    final int n = s.length();\n    Set<String> dictionarySet = new HashSet<>(Arrays.asList(dictionary));\n    // dp[i] := min extra characters if breaking up s[0:i] optimally\n    int[] dp = new int[n + 1];\n    Arrays.fill(dp, n);\n    dp[0] = 0;\n\n    for (int i = 1; i <= n; i++)\n      for (int j = 0; j < i; j++)\n        // s[j..i) is in dictionarySet.\n        if (dictionarySet.contains(s.substring(j, i)))\n          dp[i] = Math.min(dp[i], dp[j]);\n        // s[j..i) are extra characters.\n        else\n          dp[i] = Math.min(dp[i], dp[j] + i - j);\n\n    return dp[n];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Similar to 139. Word Break\n  def minExtraChar(self, s: str, dictionary: List[str]) -> int:\n    n = len(s)\n    dictionarySet = set(dictionary)\n    # dp[i] := min extra characters if breaking up s[0:i] optimally\n    dp = [0] + [n] * n\n\n    for i in range(1, n + 1):\n      for j in range(i):\n        if s[j:i] in dictionarySet:\n          dp[i] = min(dp[i], dp[j])\n        else:\n          dp[i] = min(dp[i], dp[j] + i - j)\n\n    return dp[n]\n",
                "lang_text": "py"
            }
        }
    }
}