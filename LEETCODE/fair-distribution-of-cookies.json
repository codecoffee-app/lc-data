{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2305",
            "title": "Fair Distribution of Cookies",
            "titleSlug": "fair-distribution-of-cookies",
            "content": "<p>You are given an integer array <code>cookies</code>, where <code>cookies[i]</code> denotes the number of cookies in the <code>i<sup>th</sup></code> bag. You are also given an integer <code>k</code> that denotes the number of children to distribute <strong>all</strong> the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up.</p>\n\n<p>The <strong>unfairness</strong> of a distribution is defined as the <strong>maximum</strong> <strong>total</strong> cookies obtained by a single child in the distribution.</p>\n\n<p>Return <em>the <strong>minimum</strong> unfairness of all distributions</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cookies = [8,15,10,20,8], k = 2\n<strong>Output:</strong> 31\n<strong>Explanation:</strong> One optimal distribution is [8,15,8] and [10,20]\n- The 1<sup>st</sup> child receives [8,15,8] which has a total of 8 + 15 + 8 = 31 cookies.\n- The 2<sup>nd</sup> child receives [10,20] which has a total of 10 + 20 = 30 cookies.\nThe unfairness of the distribution is max(31,30) = 31.\nIt can be shown that there is no distribution with an unfairness less than 31.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cookies = [6,1,3,2,2,4,1,2], k = 3\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> One optimal distribution is [6,1], [3,2,2], and [4,1,2]\n- The 1<sup>st</sup> child receives [6,1] which has a total of 6 + 1 = 7 cookies.\n- The 2<sup>nd</sup> child receives [3,2,2] which has a total of 3 + 2 + 2 = 7 cookies.\n- The 3<sup>rd</sup> child receives [4,1,2] which has a total of 4 + 1 + 2 = 7 cookies.\nThe unfairness of the distribution is max(7,7,7) = 7.\nIt can be shown that there is no distribution with an unfairness less than 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= cookies.length &lt;= 8</code></li>\n\t<li><code>1 &lt;= cookies[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= k &lt;= cookies.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2457,
            "dislikes": 110,
            "similarQuestions": "[{\"title\": \"Split Array Largest Sum\", \"titleSlug\": \"split-array-largest-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Split Array with Equal Sum\", \"titleSlug\": \"split-array-with-equal-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Partition to K Equal Sum Subsets\", \"titleSlug\": \"partition-to-k-equal-sum-subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum XOR Sum of Two Arrays\", \"titleSlug\": \"minimum-xor-sum-of-two-arrays\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"The Number of Good Subsets\", \"titleSlug\": \"the-number-of-good-subsets\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Work Sessions to Finish the Tasks\", \"titleSlug\": \"minimum-number-of-work-sessions-to-finish-the-tasks\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Partition Array Into Two Arrays to Minimize Sum Difference\", \"titleSlug\": \"partition-array-into-two-arrays-to-minimize-sum-difference\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Rows Covered by Columns\", \"titleSlug\": \"maximum-rows-covered-by-columns\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Distribute Money to Maximum Children\", \"titleSlug\": \"distribute-money-to-maximum-children\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"88.2K\", \"totalSubmission\": \"126.8K\", \"totalAcceptedRaw\": 88170, \"totalSubmissionRaw\": 126844, \"acRate\": \"69.5%\"}",
            "hints": [
                "We have to give each bag to one of the children. How can we enumerate all of the possibilities?",
                "Use recursion and keep track of the current number of cookies each child has. Once all the bags have been distributed, find the child with the most cookies."
            ],
            "rephrased": {
                "body": "Given an array `cookies` where `cookies[i]` represents the number of cookies in the i-th bag, and an integer `k` representing the number of children, distribute all cookie bags to the children. Each bag must be given entirely to one child.  The unfairness of a distribution is the maximum total cookies received by any single child. Find the minimum possible unfairness.",
                "constraints": [
                    "2 <= cookies.length <= 8",
                    "1 <= cookies[i] <= 10^5",
                    "2 <= k <= cookies.length"
                ],
                "testcases": [
                    {
                        "input": "cookies = [8,15,10,20,8], k = 2",
                        "output": "31",
                        "explanation": "One optimal distribution assigns bags [8, 15, 8] to the first child and [10, 20] to the second child.  The first child receives 8 + 15 + 8 = 31 cookies, and the second child receives 10 + 20 = 30 cookies. The unfairness is max(31, 30) = 31. No distribution achieves a lower unfairness."
                    },
                    {
                        "input": "cookies = [6,1,3,2,2,4,1,2], k = 3",
                        "output": "7",
                        "explanation": "One optimal distribution assigns bags [6, 1] to the first child, [3, 2, 2] to the second child, and [4, 1, 2] to the third child. Each child receives 7 cookies. The unfairness is max(7, 7, 7) = 7.  No distribution achieves a lower unfairness."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "split-array-largest-sum",
                "title": "Split Array Largest Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "split-array-with-equal-sum",
                "title": "Split Array with Equal Sum",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "partition-to-k-equal-sum-subsets",
                "title": "Partition to K Equal Sum Subsets",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-xor-sum-of-two-arrays",
                "title": "Minimum XOR Sum of Two Arrays",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "the-number-of-good-subsets",
                "title": "The Number of Good Subsets",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-number-of-work-sessions-to-finish-the-tasks",
                "title": "Minimum Number of Work Sessions to Finish the Tasks",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "partition-array-into-two-arrays-to-minimize-sum-difference",
                "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-rows-covered-by-columns",
                "title": "Maximum Rows Covered by Columns",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "distribute-money-to-maximum-children",
                "title": "Distribute Money to Maximum Children",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We have to give each bag to one of the children. How can we enumerate all of the possibilities?",
            "Use recursion and keep track of the current number of cookies each child has. Once all the bags have been distributed, find the child with the most cookies."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int distributeCookies(vector<int>& cookies, int k) {\n    int ans = INT_MAX;\n    dfs(cookies, 0, k, vector<int>(k), ans);\n    return ans;\n  }\n\n private:\n  void dfs(const vector<int>& cookies, int s, int k, vector<int>&& children,\n           int& ans) {\n    if (s == cookies.size()) {\n      ans = min(ans, *max_element(children.begin(), children.end()));\n      return;\n    }\n\n    for (int i = 0; i < k; ++i) {\n      children[i] += cookies[s];\n      dfs(cookies, s + 1, k, move(children), ans);\n      children[i] -= cookies[s];\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int distributeCookies(int[] cookies, int k) {\n    dfs(cookies, 0, k, new int[k]);\n    return ans;\n  }\n\n  private int ans = Integer.MAX_VALUE;\n\n  private void dfs(int[] cookies, int s, int k, int[] children) {\n    if (s == cookies.length) {\n      ans = Math.min(ans, Arrays.stream(children).max().getAsInt());\n      return;\n    }\n\n    for (int i = 0; i < k; ++i) {\n      children[i] += cookies[s];\n      dfs(cookies, s + 1, k, children);\n      children[i] -= cookies[s];\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def distributeCookies(self, cookies: List[int], k: int) -> int:\n    ans = math.inf\n\n    def dfs(s: int, children: List[int]) -> None:\n      nonlocal ans\n      if s == len(cookies):\n        ans = min(ans, max(children))\n        return\n\n      for i in range(k):\n        children[i] += cookies[s]\n        dfs(s + 1, children)\n        children[i] -= cookies[s]\n\n    dfs(0, [0] * k)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}