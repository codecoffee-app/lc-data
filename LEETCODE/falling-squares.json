{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "699",
            "title": "Falling Squares",
            "titleSlug": "falling-squares",
            "content": "<p>There are several squares being dropped onto the X-axis of a 2D plane.</p>\n\n<p>You are given a 2D integer array <code>positions</code> where <code>positions[i] = [left<sub>i</sub>, sideLength<sub>i</sub>]</code> represents the <code>i<sup>th</sup></code> square with a side length of <code>sideLength<sub>i</sub></code> that is dropped with its left edge aligned with X-coordinate <code>left<sub>i</sub></code>.</p>\n\n<p>Each square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands <strong>on the top side of another square</strong> or <strong>on the X-axis</strong>. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.</p>\n\n<p>After each square is dropped, you must record the <strong>height of the current tallest stack of squares</strong>.</p>\n\n<p>Return <em>an integer array </em><code>ans</code><em> where </em><code>ans[i]</code><em> represents the height described above after dropping the </em><code>i<sup>th</sup></code><em> square</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/28/fallingsq1-plane.jpg\" style=\"width: 500px; height: 505px;\" />\n<pre>\n<strong>Input:</strong> positions = [[1,2],[2,3],[6,1]]\n<strong>Output:</strong> [2,5,5]\n<strong>Explanation:</strong>\nAfter the first drop, the tallest stack is square 1 with a height of 2.\nAfter the second drop, the tallest stack is squares 1 and 2 with a height of 5.\nAfter the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\nThus, we return an answer of [2, 5, 5].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> positions = [[100,100],[200,100]]\n<strong>Output:</strong> [100,100]\n<strong>Explanation:</strong>\nAfter the first drop, the tallest stack is square 1 with a height of 100.\nAfter the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.\nThus, we return an answer of [100, 100].\nNote that square 2 only brushes the right side of square 1, which does not count as landing on it.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= positions.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= left<sub>i</sub> &lt;= 10<sup>8</sup></code></li>\n\t<li><code>1 &lt;= sideLength<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 616,
            "dislikes": 73,
            "similarQuestions": "[{\"title\": \"The Skyline Problem\", \"titleSlug\": \"the-skyline-problem\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.1K\", \"totalSubmission\": \"56K\", \"totalAcceptedRaw\": 25072, \"totalSubmissionRaw\": 56006, \"acRate\": \"44.8%\"}",
            "hints": [
                "If positions = [[10, 20], [20, 30]], this is the same as [[1, 2], [2, 3]].  Currently, the values of positions are very large.  Can you generalize this approach so as to make the values in positions manageable?"
            ],
            "rephrased": {
                "body": "Given a series of squares dropped onto the X-axis of a 2D plane, determine the height of the tallest stack after each square is dropped. Each square falls vertically until it lands on another square's top surface or the X-axis.  A square only lands if its bottom edge rests fully on the top edge of another square; brushing the sides does not count as landing. You are provided a 2D integer array `positions` where `positions[i] = [left<sub>i</sub>, sideLength<sub>i</sub>]` represents the i<sup>th</sup> square's left edge coordinate (`left<sub>i</sub>`) and its side length (`sideLength<sub>i</sub>`). Return an integer array `ans` where `ans[i]` is the height of the tallest stack after dropping the `i<sup>th</sup>` square.",
                "constraints": [
                    "1 <= positions.length <= 1000",
                    "1 <= left<sub>i</sub> <= 10<sup>8</sup>",
                    "1 <= sideLength<sub>i</sub> <= 10<sup>6</sup>"
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[2,3],[6,1]]",
                        "output": "[2,5,5]",
                        "explanation": "Initially, the first square of height 2 is dropped. Then, the second square of height 3 is dropped on top of the first one, resulting in a stack of height 5. Finally, the third square of height 1 is dropped, but it doesn't contribute to the tallest stack, so the tallest stack remains at height 5."
                    },
                    {
                        "input": "[[100,100],[200,100]]",
                        "output": "[100,100]",
                        "explanation": "First, a square with side length 100 is dropped.  Next, another square with side length 100 is dropped.  They do not land on each other because they are placed at different locations on the x axis."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "the-skyline-problem",
                "title": "The Skyline Problem",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If positions = [[10, 20], [20, 30]], this is the same as [[1, 2], [2, 3]].  Currently, the values of positions are very large.  Can you generalize this approach so as to make the values in positions manageable?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> fallingSquares(vector<vector<int>>& positions) {\n    vector<int> ans;\n    map<pair<int, int>, int> xsToHeight;  // {{xStart, xEnd}, height}\n    int maxHeight = INT_MIN;\n\n    for (const vector<int>& p : positions) {\n      const int left = p[0];\n      const int sideLength = p[1];\n      const int right = left + sideLength;\n      // First range intersect with [left, right)\n      auto it = xsToHeight.upper_bound({left, right});\n      if (it != xsToHeight.begin() && (--it)->first.second <= left)\n        ++it;\n      int maxHeightInRange = 0;\n      vector<tuple<int, int, int>> ranges;\n      while (it != xsToHeight.end() && it->first.first < right) {\n        const int l = it->first.first;\n        const int r = it->first.second;\n        const int h = it->second;\n        if (l < left)\n          ranges.emplace_back(l, left, h);\n        if (right < r)\n          ranges.emplace_back(right, r, h);\n        maxHeightInRange = max(maxHeightInRange, h);\n        it = xsToHeight.erase(it);\n      }\n      const int newHeight = maxHeightInRange + sideLength;\n      xsToHeight[{left, right}] = newHeight;\n      for (const auto& [l, r, h] : ranges)\n        xsToHeight[{l, r}] = h;\n      maxHeight = max(maxHeight, newHeight);\n      ans.push_back(maxHeight);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}