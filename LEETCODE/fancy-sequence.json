{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1622",
            "title": "Fancy Sequence",
            "titleSlug": "fancy-sequence",
            "content": "<p>Write an API that generates fancy sequences using the <code>append</code>, <code>addAll</code>, and <code>multAll</code> operations.</p>\n\n<p>Implement the <code>Fancy</code> class:</p>\n\n<ul>\n\t<li><code>Fancy()</code> Initializes the object with an empty sequence.</li>\n\t<li><code>void append(val)</code> Appends an integer <code>val</code> to the end of the sequence.</li>\n\t<li><code>void addAll(inc)</code> Increments all existing values in the sequence by an integer <code>inc</code>.</li>\n\t<li><code>void multAll(m)</code> Multiplies all existing values in the sequence by an integer <code>m</code>.</li>\n\t<li><code>int getIndex(idx)</code> Gets the current value at index <code>idx</code> (0-indexed) of the sequence <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>. If the index is greater or equal than the length of the sequence, return <code>-1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Fancy&quot;, &quot;append&quot;, &quot;addAll&quot;, &quot;append&quot;, &quot;multAll&quot;, &quot;getIndex&quot;, &quot;addAll&quot;, &quot;append&quot;, &quot;multAll&quot;, &quot;getIndex&quot;, &quot;getIndex&quot;, &quot;getIndex&quot;]\n[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]\n<strong>Output</strong>\n[null, null, null, null, null, 10, null, null, null, 26, 34, 20]\n\n<strong>Explanation</strong>\nFancy fancy = new Fancy();\nfancy.append(2);   // fancy sequence: [2]\nfancy.addAll(3);   // fancy sequence: [2+3] -&gt; [5]\nfancy.append(7);   // fancy sequence: [5, 7]\nfancy.multAll(2);  // fancy sequence: [5*2, 7*2] -&gt; [10, 14]\nfancy.getIndex(0); // return 10\nfancy.addAll(3);   // fancy sequence: [10+3, 14+3] -&gt; [13, 17]\nfancy.append(10);  // fancy sequence: [13, 17, 10]\nfancy.multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -&gt; [26, 34, 20]\nfancy.getIndex(0); // return 26\nfancy.getIndex(1); // return 34\nfancy.getIndex(2); // return 20\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= val, inc, m &lt;= 100</code></li>\n\t<li><code>0 &lt;= idx &lt;= 10<sup>5</sup></code></li>\n\t<li>At most <code>10<sup>5</sup></code> calls total will be made to <code>append</code>, <code>addAll</code>, <code>multAll</code>, and <code>getIndex</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 361,
            "dislikes": 136,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.1K\", \"totalSubmission\": \"66.1K\", \"totalAcceptedRaw\": 11123, \"totalSubmissionRaw\": 66087, \"acRate\": \"16.8%\"}",
            "hints": [
                "Use two arrays to save the cumulative multipliers at each time point and cumulative sums adjusted by the current multiplier.",
                "The function getIndex(idx) ask to the current value modulo 10^9+7. Use modular inverse and both arrays to calculate this value."
            ],
            "rephrased": {
                "body": "Design an API to generate sequences using `append`, `addAll`, and `multAll` operations. Implement the `Fancy` class with the following methods:\n\n*   `Fancy()`: Initializes an empty sequence.\n*   `void append(val)`: Adds the integer `val` to the end of the sequence.\n*   `void addAll(inc)`: Increments all existing elements in the sequence by the integer `inc`.\n*   `void multAll(m)`: Multiplies all existing elements in the sequence by the integer `m`.\n*   `int getIndex(idx)`: Returns the value at index `idx` (0-indexed) of the sequence modulo `10^9 + 7`. If `idx` is out of bounds (greater than or equal to the sequence length), return `-1`.",
                "constraints": [
                    "1 <= val, inc, m <= 100",
                    "0 <= idx <= 10^5",
                    "At most 10^5 calls total will be made to append, addAll, multAll, and getIndex."
                ],
                "testcases": [
                    {
                        "input": "[\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"]\n[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]",
                        "output": "[null, null, null, null, null, 10, null, null, null, 26, 34, 20]",
                        "explanation": "Initially, the sequence is empty. `append(2)` adds 2: [2]. `addAll(3)` adds 3 to each element: [5]. `append(7)` adds 7: [5, 7]. `multAll(2)` multiplies each element by 2: [10, 14]. `getIndex(0)` returns 10 (sequence[0]). `addAll(3)` adds 3: [13, 17]. `append(10)` adds 10: [13, 17, 10]. `multAll(2)` multiplies each element by 2: [26, 34, 20]. `getIndex(0)` returns 26, `getIndex(1)` returns 34, and `getIndex(2)` returns 20."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use two arrays to save the cumulative multipliers at each time point and cumulative sums adjusted by the current multiplier.",
            "The function getIndex(idx) ask to the current value modulo 10^9+7. Use modular inverse and both arrays to calculate this value."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ]
    }
}