{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "509",
            "title": "Fibonacci Number",
            "titleSlug": "fibonacci-number",
            "content": "<p>The <b>Fibonacci numbers</b>, commonly denoted <code>F(n)</code> form a sequence, called the <b>Fibonacci sequence</b>, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>\n\n<pre>\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n &gt; 1.\n</pre>\n\n<p>Given <code>n</code>, calculate <code>F(n)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> F(2) = F(1) + F(0) = 1 + 0 = 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> F(3) = F(2) + F(1) = 1 + 1 = 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> F(4) = F(3) + F(2) = 2 + 1 = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 30</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 7808,
            "dislikes": 341,
            "similarQuestions": "[{\"title\": \"Climbing Stairs\", \"titleSlug\": \"climbing-stairs\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Split Array into Fibonacci Sequence\", \"titleSlug\": \"split-array-into-fibonacci-sequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Length of Longest Fibonacci Subsequence\", \"titleSlug\": \"length-of-longest-fibonacci-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"N-th Tribonacci Number\", \"titleSlug\": \"n-th-tribonacci-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"2.3M\", \"totalAcceptedRaw\": 1601343, \"totalSubmissionRaw\": 2269850, \"acRate\": \"70.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Calculate the nth Fibonacci number, denoted as F(n). The Fibonacci sequence starts with F(0) = 0 and F(1) = 1.  For n > 1, F(n) is the sum of the two preceding Fibonacci numbers: F(n) = F(n - 1) + F(n - 2).",
                "constraints": [
                    "0 <= n <= 30"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "1",
                        "explanation": "F(2) = F(1) + F(0) = 1 + 0 = 1"
                    },
                    {
                        "input": "3",
                        "output": "2",
                        "explanation": "F(3) = F(2) + F(1) = 1 + 1 = 2"
                    },
                    {
                        "input": "4",
                        "output": "3",
                        "explanation": "F(4) = F(3) + F(2) = 2 + 1 = 3"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "climbing-stairs",
                "title": "Climbing Stairs",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "split-array-into-fibonacci-sequence",
                "title": "Split Array into Fibonacci Sequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "length-of-longest-fibonacci-subsequence",
                "title": "Length of Longest Fibonacci Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "n-th-tribonacci-number",
                "title": "N-th Tribonacci Number",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int fib(int n) {\n    if (n < 2)\n      return n;\n\n    vector<int> dp{0, 0, 1};\n\n    for (int i = 2; i <= n; ++i) {\n      dp[0] = dp[1];\n      dp[1] = dp[2];\n      dp[2] = dp[0] + dp[1];\n    }\n\n    return dp.back();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int fib(int n) {\n    if (n < 2)\n      return n;\n\n    int[] dp = {0, 0, 1};\n\n    for (int i = 2; i <= n; ++i) {\n      dp[0] = dp[1];\n      dp[1] = dp[2];\n      dp[2] = dp[0] + dp[1];\n    }\n\n    return dp[2];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def fib(self, n: int) -> int:\n    if n < 2:\n      return n\n\n    dp = [0, 0, 1]\n\n    for i in range(2, n + 1):\n      dp[0] = dp[1]\n      dp[1] = dp[2]\n      dp[2] = dp[0] + dp[1]\n\n    return dp[2]\n",
                "lang_text": "py"
            }
        }
    }
}