{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1105",
            "title": "Filling Bookcase Shelves",
            "titleSlug": "filling-bookcase-shelves",
            "content": "<p>You are given an array <code>books</code> where <code>books[i] = [thickness<sub>i</sub>, height<sub>i</sub>]</code> indicates the thickness and height of the <code>i<sup>th</sup></code> book. You are also given an integer <code>shelfWidth</code>.</p>\n\n<p>We want to place these books in order onto bookcase shelves that have a total width <code>shelfWidth</code>.</p>\n\n<p>We choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to <code>shelfWidth</code>, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place.</p>\n\n<p>Note that at each step of the above process, the order of the books we place is the same order as the given sequence of books.</p>\n\n<ul>\n\t<li>For example, if we have an ordered list of <code>5</code> books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.</li>\n</ul>\n\n<p>Return <em>the minimum possible height that the total bookshelf can be after placing shelves in this manner</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/06/24/shelves.png\" style=\"height: 500px; width: 337px;\" />\n<pre>\n<strong>Input:</strong> books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\nThe sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.\nNotice that book number 2 does not have to be on the first shelf.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> books = [[1,3],[2,4],[3,2]], shelfWidth = 6\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= books.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= thickness<sub>i</sub> &lt;= shelfWidth &lt;= 1000</code></li>\n\t<li><code>1 &lt;= height<sub>i</sub> &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1787,
            "dislikes": 121,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"51K\", \"totalSubmission\": \"85.8K\", \"totalAcceptedRaw\": 51019, \"totalSubmissionRaw\": 85777, \"acRate\": \"59.5%\"}",
            "hints": [
                "Use dynamic programming:  dp(i) will be the answer to the problem for books[i:]."
            ],
            "rephrased": {
                "body": "You are given an array `books` where `books[i] = [thickness_i, height_i]` represents the thickness and height of the i-th book.  You are also given an integer `shelfWidth`, representing the maximum width of a bookshelf.\n\nYou need to arrange the books in the given order onto bookshelves.  You can place some books on a shelf if the sum of their thicknesses is less than or equal to `shelfWidth`. Each shelf increases the total height of the bookcase by the maximum height of the books placed on it. Repeat this process until all books are placed.\n\nReturn the minimum possible total height of the bookshelf after placing all the books.",
                "constraints": [
                    "1 <= books.length <= 1000",
                    "1 <= thickness_i <= shelfWidth <= 1000",
                    "1 <= height_i <= 1000"
                ],
                "testcases": [
                    {
                        "input": "books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4",
                        "output": "6",
                        "explanation": "The sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.  Notice that book number 2 does not have to be on the first shelf. One optimal arrangement is:\n- Shelf 1: [1,1], [2,3] (width = 3, height = 3)\n- Shelf 2: [2,3] (width = 2, height = 3)\n- Shelf 3: [1,1], [1,1], [1,1], [1,2] (width = 4, height = 2)\nTotal Height = 3 + 3 + 2 = 8"
                    },
                    {
                        "input": "books = [[1,3],[2,4],[3,2]], shelfWidth = 6",
                        "output": "4",
                        "explanation": "One optimal arrangement is:\n- Shelf 1: [1,3],[2,4],[3,2] (width = 6, height = 4)\nTotal Height = 4"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use dynamic programming:  dp(i) will be the answer to the problem for books[i:]."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minHeightShelves(vector<vector<int>>& books, int shelfWidth) {\n    // dp[i] := min height to place the first i books\n    vector<int> dp(books.size() + 1, INT_MAX);\n    dp[0] = 0;\n\n    for (int i = 0; i < books.size(); ++i) {\n      int sumThickness = 0;\n      int maxHeight = 0;\n      // Place books[j..i] on a new shelf.\n      for (int j = i; j >= 0; --j) {\n        const int thickness = books[j][0];\n        const int height = books[j][1];\n        sumThickness += thickness;\n        if (sumThickness > shelfWidth)\n          break;\n        maxHeight = max(maxHeight, height);\n        dp[i + 1] = min(dp[i + 1], dp[j] + maxHeight);\n      }\n    }\n\n    return dp.back();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minHeightShelves(int[][] books, int shelfWidth) {\n    final int n = books.length;\n    // dp[i] := min height to place the first i books\n    int[] dp = new int[n + 1];\n    Arrays.fill(dp, Integer.MAX_VALUE);\n    dp[0] = 0;\n\n    for (int i = 0; i < books.length; ++i) {\n      int sumThickness = 0;\n      int maxHeight = 0;\n      // Place books[j..i] on a new shelf.\n      for (int j = i; j >= 0; --j) {\n        final int thickness = books[j][0];\n        final int height = books[j][1];\n        sumThickness += thickness;\n        if (sumThickness > shelfWidth)\n          break;\n        maxHeight = Math.max(maxHeight, height);\n        dp[i + 1] = Math.min(dp[i + 1], dp[j] + maxHeight);\n      }\n    }\n\n    return dp[n];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minHeightShelves(self, books: List[List[int]], shelfWidth: int) -> int:\n    # dp[i] := min height to place the first i books\n    dp = [0] + [math.inf] * len(books)\n\n    for i in range(len(books)):\n      sumThickness = 0\n      maxHeight = 0\n      # Place books[j..i] on a new shelf.\n      for j in range(i, -1, -1):\n        thickness, height = books[j]\n        sumThickness += thickness\n        if sumThickness > shelfWidth:\n          break\n        maxHeight = max(maxHeight, height)\n        dp[i + 1] = min(dp[i + 1], dp[j] + maxHeight)\n\n    return dp[-1]\n",
                "lang_text": "py"
            }
        }
    }
}