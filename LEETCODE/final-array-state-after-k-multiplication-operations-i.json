{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3264",
            "title": "Final Array State After K Multiplication Operations I",
            "titleSlug": "final-array-state-after-k-multiplication-operations-i",
            "content": "<p>You are given an integer array <code>nums</code>, an integer <code>k</code>, and an integer <code>multiplier</code>.</p>\n\n<p>You need to perform <code>k</code> operations on <code>nums</code>. In each operation:</p>\n\n<ul>\n\t<li>Find the <strong>minimum</strong> value <code>x</code> in <code>nums</code>. If there are multiple occurrences of the minimum value, select the one that appears <strong>first</strong>.</li>\n\t<li>Replace the selected minimum value <code>x</code> with <code>x * multiplier</code>.</li>\n</ul>\n\n<p>Return an integer array denoting the <em>final state</em> of <code>nums</code> after performing all <code>k</code> operations.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,1,3,5,6], k = 5, multiplier = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[8,4,6,5,6]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Operation</th>\n\t\t\t<th>Result</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 1</td>\n\t\t\t<td>[2, 2, 3, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 2</td>\n\t\t\t<td>[4, 2, 3, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 3</td>\n\t\t\t<td>[4, 4, 3, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 4</td>\n\t\t\t<td>[4, 4, 6, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 5</td>\n\t\t\t<td>[8, 4, 6, 5, 6]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2], k = 3, multiplier = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[16,8]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Operation</th>\n\t\t\t<th>Result</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 1</td>\n\t\t\t<td>[4, 2]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 2</td>\n\t\t\t<td>[4, 8]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 3</td>\n\t\t\t<td>[16, 8]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 10</code></li>\n\t<li><code>1 &lt;= multiplier &lt;= 5</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 93,
            "dislikes": 0,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"48.2K\", \"totalSubmission\": \"58.9K\", \"totalAcceptedRaw\": 48185, \"totalSubmissionRaw\": 58903, \"acRate\": \"81.8%\"}",
            "hints": [
                "Maintain sorted pairs <code>(nums[index], index)</code> in a priority queue.",
                "Simulate the operation <code>k</code> times."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, an integer `k`, and an integer `multiplier`, perform `k` operations on `nums`. In each operation, find the minimum value `x` in `nums`. If there are multiple occurrences of the minimum value, select the one that appears first. Replace the selected minimum value `x` with `x * multiplier`. Return an integer array representing the final state of `nums` after performing all `k` operations.",
                "constraints": [
                    "1 <= nums.length <= 100",
                    "1 <= nums[i] <= 100",
                    "1 <= k <= 10",
                    "1 <= multiplier <= 5"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,1,3,5,6], k = 5, multiplier = 2",
                        "output": "[8,4,6,5,6]",
                        "explanation": "Initially, nums = [2, 1, 3, 5, 6].\nOperation 1: The minimum is 1, so nums becomes [2, 2, 3, 5, 6].\nOperation 2: The minimum is 2 (first occurrence), so nums becomes [4, 2, 3, 5, 6].\nOperation 3: The minimum is 2, so nums becomes [4, 4, 3, 5, 6].\nOperation 4: The minimum is 3, so nums becomes [4, 4, 6, 5, 6].\nOperation 5: The minimum is 4 (first occurrence), so nums becomes [8, 4, 6, 5, 6]."
                    },
                    {
                        "input": "nums = [1,2], k = 3, multiplier = 4",
                        "output": "[16,8]",
                        "explanation": "Initially, nums = [1, 2].\nOperation 1: The minimum is 1, so nums becomes [4, 2].\nOperation 2: The minimum is 2, so nums becomes [4, 8].\nOperation 3: The minimum is 4, so nums becomes [16, 8]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Maintain sorted pairs <code>(nums[index], index)</code> in a priority queue.",
            "Simulate the operation <code>k</code> times."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> getFinalState(vector<int>& nums, int k, int multiplier) {\n    vector<int> ans(nums.size());\n    using P = pair<int, int>;  // (nums[i], i)\n    priority_queue<P, vector<P>, greater<>> minHeap;\n\n    for (int i = 0; i < nums.size(); ++i)\n      minHeap.emplace(nums[i], i);\n\n    while (k-- > 0) {\n      const auto [num, i] = minHeap.top();\n      minHeap.pop();\n      minHeap.emplace(num * multiplier, i);\n    }\n\n    while (!minHeap.empty()) {\n      const auto [num, i] = minHeap.top();\n      minHeap.pop();\n      ans[i] = num;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] getFinalState(int[] nums, int k, int multiplier) {\n    int[] ans = new int[nums.length];\n    // (nums[i], i)\n    Queue<Pair<Integer, Integer>> minHeap = new PriorityQueue<>(\n        (a, b)\n            -> a.getKey().equals(b.getKey()) ? a.getValue().compareTo(b.getValue())\n                                             : a.getKey().compareTo(b.getKey()));\n\n    for (int i = 0; i < nums.length; ++i)\n      minHeap.offer(new Pair<>(nums[i], i));\n\n    while (k-- > 0) {\n      final int num = minHeap.peek().getKey();\n      final int i = minHeap.poll().getValue();\n      minHeap.offer(new Pair<>(num * multiplier, i));\n    }\n\n    while (!minHeap.isEmpty()) {\n      final int num = minHeap.peek().getKey();\n      final int i = minHeap.poll().getValue();\n      ans[i] = num;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getFinalState(\n      self,\n      nums: list[int],\n      k: int,\n      multiplier: int\n  ) -> list[int]:\n    ans = [0] * len(nums)\n    minHeap = [(num, i) for i, num in enumerate(nums)]\n    heapq.heapify(minHeap)\n\n    for _ in range(k):\n      num, i = heapq.heappop(minHeap)\n      heapq.heappush(minHeap, (num * multiplier, i))\n\n    for num, i in minHeap:\n      ans[i] = num\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}