{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3266",
            "title": "Final Array State After K Multiplication Operations II",
            "titleSlug": "final-array-state-after-k-multiplication-operations-ii",
            "content": "<p>You are given an integer array <code>nums</code>, an integer <code>k</code>, and an integer <code>multiplier</code>.</p>\n\n<p>You need to perform <code>k</code> operations on <code>nums</code>. In each operation:</p>\n\n<ul>\n\t<li>Find the <strong>minimum</strong> value <code>x</code> in <code>nums</code>. If there are multiple occurrences of the minimum value, select the one that appears <strong>first</strong>.</li>\n\t<li>Replace the selected minimum value <code>x</code> with <code>x * multiplier</code>.</li>\n</ul>\n\n<p>After the <code>k</code> operations, apply <strong>modulo</strong> <code>10<sup>9</sup> + 7</code> to every value in <code>nums</code>.</p>\n\n<p>Return an integer array denoting the <em>final state</em> of <code>nums</code> after performing all <code>k</code> operations and then applying the modulo.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,1,3,5,6], k = 5, multiplier = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[8,4,6,5,6]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Operation</th>\n\t\t\t<th>Result</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 1</td>\n\t\t\t<td>[2, 2, 3, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 2</td>\n\t\t\t<td>[4, 2, 3, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 3</td>\n\t\t\t<td>[4, 4, 3, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 4</td>\n\t\t\t<td>[4, 4, 6, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 5</td>\n\t\t\t<td>[8, 4, 6, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After applying modulo</td>\n\t\t\t<td>[8, 4, 6, 5, 6]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [100000,2000], k = 2, multiplier = 1000000</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[999999307,999999993]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Operation</th>\n\t\t\t<th>Result</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 1</td>\n\t\t\t<td>[100000, 2000000000]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 2</td>\n\t\t\t<td>[100000000000, 2000000000]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After applying modulo</td>\n\t\t\t<td>[999999307, 999999993]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= multiplier &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 141,
            "dislikes": 20,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.7K\", \"totalSubmission\": \"66.7K\", \"totalAcceptedRaw\": 6720, \"totalSubmissionRaw\": 66733, \"acRate\": \"10.1%\"}",
            "hints": [
                "What happens when <code>min(nums) * multiplier > max(nums)</code>?",
                "A cycle of operations begins.",
                "Simulate until <code>min(nums) * multiplier > max(nums)</code>, then greedily distribute remaining multiplications."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, an integer `k`, and an integer `multiplier`, perform `k` operations on `nums`. In each operation, find the minimum value `x` in `nums`. If there are multiple occurrences of the minimum value, select the first one. Replace the selected minimum value `x` with `x * multiplier`. After the `k` operations, apply modulo `10^9 + 7` to every value in `nums`. Return the final state of `nums` after performing all operations and applying the modulo.",
                "constraints": [
                    "1 <= nums.length <= 10^4",
                    "1 <= nums[i] <= 10^9",
                    "1 <= k <= 10^9",
                    "1 <= multiplier <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,1,3,5,6], k = 5, multiplier = 2",
                        "output": "[8,4,6,5,6]",
                        "explanation": "Initially, nums = [2,1,3,5,6].  The minimum value is 1, which is replaced by 1*2 = 2. nums becomes [2,2,3,5,6]. This process repeats. The steps are as follows:\n1. [2, 2, 3, 5, 6]\n2. [4, 2, 3, 5, 6]\n3. [4, 4, 3, 5, 6]\n4. [4, 4, 6, 5, 6]\n5. [8, 4, 6, 5, 6]\nApplying modulo does not change the result in this case."
                    },
                    {
                        "input": "nums = [100000,2000], k = 2, multiplier = 1000000",
                        "output": "[999999307,999999993]",
                        "explanation": "Initially, nums = [100000, 2000]. The minimum value is 2000, which is replaced by 2000 * 1000000 = 2000000000. nums becomes [100000, 2000000000]. In the second operation, the minimum is 100000, replaced by 100000 * 1000000 = 100000000000. nums becomes [100000000000, 2000000000]. Finally, applying modulo 10^9 + 7 to each element gives [999999307, 999999993]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "What happens when <code>min(nums) * multiplier > max(nums)</code>?",
            "A cycle of operations begins.",
            "Simulate until <code>min(nums) * multiplier > max(nums)</code>, then greedily distribute remaining multiplications."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> getFinalState(vector<int>& nums, int k, int multiplier) {\n    if (multiplier == 1)\n      return nums;\n\n    const int n = nums.size();\n    const int maxNum = ranges::max(nums);\n    vector<int> ans(n);\n    using P = pair<int, int>;  // (nums[i], i)\n    priority_queue<P, vector<P>, greater<>> minHeap;\n\n    for (int i = 0; i < n; ++i)\n      minHeap.emplace(nums[i], i);\n\n    // Keep multiplying the minimum number as close as possible to the maximum\n    // number in the array. After that, stop multiplying the minimum number\n    // because it will be greater than the maximum number in the array and break\n    // the circularity.\n    while (k > 0 &&\n           static_cast<long>(minHeap.top().first) * multiplier <= maxNum) {\n      const auto [num, i] = minHeap.top();\n      minHeap.pop();\n      minHeap.emplace(num * multiplier, i);\n      --k;\n    }\n\n    vector<pair<int, int>> sortedIndexedNums;\n    while (!minHeap.empty())\n      sortedIndexedNums.push_back(minHeap.top()), minHeap.pop();\n\n    const int multipliesPerNum = k / n;\n    const int remainingK = k % n;\n\n    // Evenly distribute the remaining multiplications to each number by using\n    // fast exponentiation.\n    for (auto& [num, _] : sortedIndexedNums)\n      num = (num * modPow(multiplier, multipliesPerNum)) % kMod;\n\n    // Distribute the remaining multiplications to the minimum `remainingK`\n    // numbers.\n    for (int i = 0; i < remainingK; ++i)\n      sortedIndexedNums[i].first =\n          (static_cast<long>(sortedIndexedNums[i].first) * multiplier % kMod);\n\n    for (const auto& [num, i] : sortedIndexedNums)\n      ans[i] = num;\n\n    return ans;\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n\n  long modPow(long x, long n) {\n    if (n == 0)\n      return 1;\n    if (n % 2 == 1)\n      return x * modPow(x, n - 1) % kMod;\n    return modPow(x * x % kMod, n / 2);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] getFinalState(int[] nums, int k, int multiplier) {\n    if (multiplier == 1)\n      return nums;\n\n    final int n = nums.length;\n    final int maxNum = Arrays.stream(nums).max().getAsInt();\n    int[] ans = new int[n];\n    // (nums[i], i)\n    Queue<int[]> minHeap = new PriorityQueue<>(\n        (a, b) -> a[0] == b[0] ? Integer.compare(a[1], b[1]) : Integer.compare(a[0], b[0]));\n\n    for (int i = 0; i < n; ++i)\n      minHeap.offer(new int[] {nums[i], i});\n\n    // Keep multiplying the minimum number as close as possible to the maximum\n    // number in the array. After that, stop multiplying the minimum number\n    // because it will be greater than the maximum number in the array and break\n    // the circularity.\n    while (k > 0 && (long) minHeap.peek()[0] * multiplier <= maxNum) {\n      final int num = minHeap.peek()[0];\n      final int i = minHeap.poll()[1];\n      minHeap.offer(new int[] {num * multiplier, i});\n      --k;\n    }\n\n    List<int[]> sortedIndexedNums = new ArrayList<>(minHeap);\n    Collections.sort(\n        sortedIndexedNums,\n        (a, b) -> a[0] == b[0] ? Integer.compare(a[1], b[1]) : Integer.compare(a[0], b[0]));\n\n    final int multipliesPerNum = k / n;\n    final int remainingK = k % n;\n\n    // Evenly distribute the remaining multiplications to each number by using\n    // fast exponentiation.\n    for (int[] indexedNums : sortedIndexedNums)\n      indexedNums[0] = (int) ((long) indexedNums[0] * modPow(multiplier, multipliesPerNum) % kMod);\n\n    // Distribute the remaining multiplications to the minimum `remainingK`\n    // numbers.\n    for (int i = 0; i < remainingK; ++i)\n      sortedIndexedNums.get(i)[0] = (int) ((long) sortedIndexedNums.get(i)[0] * multiplier % kMod);\n\n    for (int[] indexedNums : sortedIndexedNums) {\n      final int num = indexedNums[0];\n      final int i = indexedNums[1];\n      ans[i] = num;\n    }\n\n    return ans;\n  }\n\n  private static final int kMod = 1_000_000_007;\n\n  private long modPow(long x, long n) {\n    if (n == 0)\n      return 1;\n    if (n % 2 == 1)\n      return x * modPow(x, n - 1) % kMod;\n    return modPow(x * x % kMod, n / 2);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getFinalState(\n      self,\n      nums: list[int],\n      k: int,\n      multiplier: int\n  ) -> list[int]:\n    if multiplier == 1:\n      return nums\n\n    kMod = 1_000_000_007\n    n = len(nums)\n    maxNum = max(nums)\n    ans = [0] * n\n    minHeap = [(num, i) for i, num in enumerate(nums)]\n\n    heapq.heapify(minHeap)\n\n    # Keep multiplying the minimum number as close as possible to the maximum\n    # number in the array. After that, stop multiplying the minimum number\n    # because it will be greater than the maximum number in the array and break\n    # the circularity.\n    while k > 0 and minHeap[0][0] * multiplier <= maxNum:\n      num, i = heapq.heappop(minHeap)\n      heapq.heappush(minHeap, (num * multiplier, i))\n      k -= 1\n\n    sortedIndexedNums = sorted(minHeap)\n    multipliesPerNum, remainingK = divmod(k, n)\n\n    # Evenly distribute the remaining multiplications to each number by using\n    # fast exponentiation.\n    for index, (num, i) in enumerate(sortedIndexedNums):\n      sortedIndexedNums[index] = (\n          sortedIndexedNums[index][0] *\n          pow(multiplier, multipliesPerNum, kMod) % kMod, i)\n\n    # Distribute the remaining multiplications to the minimum `remainingK`\n    # numbers.\n    for index in range(remainingK):\n      sortedIndexedNums[index] = (\n          sortedIndexedNums[index][0] * multiplier % kMod,\n          sortedIndexedNums[index][1])\n\n    for num, i in sortedIndexedNums:\n      ans[i] = num\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}