{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3286",
            "title": "Find a Safe Walk Through a Grid",
            "titleSlug": "find-a-safe-walk-through-a-grid",
            "content": "<p>You are given an <code>m x n</code> binary matrix <code>grid</code> and an integer <code>health</code>.</p>\n\n<p>You start on the upper-left corner <code>(0, 0)</code> and would like to get to the lower-right corner <code>(m - 1, n - 1)</code>.</p>\n\n<p>You can move up, down, left, or right from one cell to another adjacent cell as long as your health <em>remains</em> <strong>positive</strong>.</p>\n\n<p>Cells <code>(i, j)</code> with <code>grid[i][j] = 1</code> are considered <strong>unsafe</strong> and reduce your health by 1.</p>\n\n<p>Return <code>true</code> if you can reach the final cell with a health value of 1 or more, and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]], health = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The final cell can be reached safely by walking along the gray cells below.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/04/3868_examples_1drawio.png\" style=\"width: 301px; height: 121px;\" /></div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[0,1,1,0,0,0],[1,0,1,0,0,0],[0,1,1,1,0,1],[0,0,1,0,1,0]], health = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>A minimum of 4 health points is needed to reach the final cell safely.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/04/3868_examples_2drawio.png\" style=\"width: 361px; height: 161px;\" /></div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,1,1],[1,0,1],[1,1,1]], health = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The final cell can be reached safely by walking along the gray cells below.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/04/3868_examples_3drawio.png\" style=\"width: 181px; height: 121px;\" /></p>\n\n<p>Any path that does not go through the cell <code>(1, 1)</code> is unsafe since your health will drop to 0 when reaching the final cell.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code><font face=\"monospace\">2 &lt;= m * n</font></code></li>\n\t<li><code>1 &lt;= health &lt;= m + n</code></li>\n\t<li><code>grid[i][j]</code> is either 0 or 1.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 120,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"Shortest Path in a Grid with Obstacles Elimination\", \"titleSlug\": \"shortest-path-in-a-grid-with-obstacles-elimination\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.9K\", \"totalSubmission\": \"79.3K\", \"totalAcceptedRaw\": 21865, \"totalSubmissionRaw\": 79267, \"acRate\": \"27.6%\"}",
            "hints": [
                "Use 01 BFS."
            ],
            "rephrased": {
                "body": "Given an `m x n` binary matrix `grid` and an integer `health`, determine if you can reach the bottom-right corner `(m - 1, n - 1)` from the top-left corner `(0, 0)` with a health value of 1 or more. You start with the given `health` and can move up, down, left, or right to adjacent cells.  Cells with a value of 1 in the `grid` reduce your health by 1.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 50",
                    "2 <= m * n",
                    "1 <= health <= m + n",
                    "grid[i][j] is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]], health = 1",
                        "output": "true",
                        "explanation": "It's possible to reach the destination with a health of at least 1 by avoiding unsafe cells."
                    },
                    {
                        "input": "grid = [[0,1,1,0,0,0],[1,0,1,0,0,0],[0,1,1,1,0,1],[0,0,1,0,1,0]], health = 3",
                        "output": "false",
                        "explanation": "A minimum health of 4 is required to reach the destination safely."
                    },
                    {
                        "input": "grid = [[1,1,1],[1,0,1],[1,1,1]], health = 5",
                        "output": "true",
                        "explanation": "It is possible to reach the destination safely with a health of 5. A path avoiding the center cell (1,1) will result in the health dropping to 0 upon reaching the final cell."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "shortest-path-in-a-grid-with-obstacles-elimination",
                "title": "Shortest Path in a Grid with Obstacles Elimination",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use 01 BFS."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool findSafeWalk(vector<vector<int>>& grid, int health) {\n    constexpr int dirs[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    const int m = grid.size();\n    const int n = grid[0].size();\n    const int initialHealth = health - grid[0][0];\n    using T = tuple<int, int, int>;  // (i, j, h)\n    queue<T> q{{{0, 0, initialHealth}}};\n    vector<vector<vector<bool>>> seen(\n        m, vector<vector<bool>>(n, vector<bool>(health + 1)));\n    seen[0][0][initialHealth] = true;\n\n    while (!q.empty())\n      for (int sz = q.size(); sz > 0; --sz) {\n        const auto [i, j, h] = q.front();\n        q.pop();\n        if (i == m - 1 && j == n - 1 && h > 0)\n          return true;\n        for (const auto& [dx, dy] : dirs) {\n          const int x = i + dx;\n          const int y = j + dy;\n          if (x < 0 || x == m || y < 0 || y == n)\n            continue;\n          const int nextHealth = h - grid[x][y];\n          if (nextHealth <= 0 || seen[x][y][nextHealth])\n            continue;\n          q.emplace(x, y, nextHealth);\n          seen[x][y][nextHealth] = true;\n        }\n      }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean findSafeWalk(List<List<Integer>> grid, int health) {\n    record T(int i, int j, int h) {}\n    final int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    final int m = grid.size();\n    final int n = grid.get(0).size();\n    final int initialHealth = health - grid.get(0).get(0);\n    Queue<T> q = new ArrayDeque<>(List.of(new T(0, 0, initialHealth)));\n    boolean[][][] seen = new boolean[m][n][health + 1];\n    seen[0][0][initialHealth] = true;\n\n    while (!q.isEmpty())\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int i = q.peek().i;\n        final int j = q.peek().j;\n        final int h = q.poll().h;\n        if (i == m - 1 && j == n - 1 && h > 0)\n          return true;\n        for (int k = 0; k < 4; ++k) {\n          final int x = i + dirs[k][0];\n          final int y = j + dirs[k][1];\n          if (x < 0 || x == m || y < 0 || y == n)\n            continue;\n          final int nextHealth = h - grid.get(x).get(y);\n          if (nextHealth <= 0 || seen[x][y][nextHealth])\n            continue;\n          q.offer(new T(x, y, nextHealth));\n          seen[x][y][nextHealth] = true;\n        }\n      }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findSafeWalk(self, grid: list[list[int]], health: int) -> bool:\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(grid)\n    n = len(grid[0])\n    initialHealth = health - grid[0][0]\n    q = collections.deque([(0, 0, initialHealth)])\n    seen = {(0, 0, initialHealth)}\n\n    while q:\n      for _ in range(len(q)):\n        i, j, h = q.popleft()\n        if i == m - 1 and j == n - 1 and h > 0:\n          return True\n        for dx, dy in dirs:\n          x = i + dx\n          y = j + dy\n          if x < 0 or x == m or y < 0 or y == n:\n            continue\n          nextHealth = h - grid[x][y]\n          if nextHealth <= 0 or (x, y, nextHealth) in seen:\n            continue\n          q.append((x, y, nextHealth))\n          seen.add((x, y, nextHealth))\n\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}