{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "438",
            "title": "Find All Anagrams in a String",
            "titleSlug": "find-all-anagrams-in-a-string",
            "content": "<p>Given two strings <code>s</code> and <code>p</code>, return <em>an array of all the start indices of </em><code>p</code><em>&#39;s anagrams in </em><code>s</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;\n<strong>Output:</strong> [0,6]\n<strong>Explanation:</strong>\nThe substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.\nThe substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abab&quot;, p = &quot;ab&quot;\n<strong>Output:</strong> [0,1,2]\n<strong>Explanation:</strong>\nThe substring with start index = 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.\nThe substring with start index = 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.\nThe substring with start index = 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>p</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 12014,
            "dislikes": 330,
            "similarQuestions": "[{\"title\": \"Valid Anagram\", \"titleSlug\": \"valid-anagram\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Permutation in String\", \"titleSlug\": \"permutation-in-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"827.6K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 827609, \"totalSubmissionRaw\": 1635045, \"acRate\": \"50.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two strings `s` and `p`, find all starting indices in `s` where substrings are anagrams of `p`. Return an array containing these indices. The order of indices in the array does not matter.",
                "constraints": [
                    "1 <= s.length, p.length <= 3 * 10^4",
                    "s and p consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"cbaebabacd\", p = \"abc\"",
                        "output": "[0,6]",
                        "explanation": "The substring of 's' starting at index 0 is \"cba\", which is an anagram of \"abc\".  The substring of 's' starting at index 6 is \"bac\", which is an anagram of \"abc\"."
                    },
                    {
                        "input": "s = \"abab\", p = \"ab\"",
                        "output": "[0,1,2]",
                        "explanation": "The substring of 's' starting at index 0 is \"ab\", which is an anagram of \"ab\". The substring of 's' starting at index 1 is \"ba\", which is an anagram of \"ab\". The substring of 's' starting at index 2 is \"ab\", which is an anagram of \"ab\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "valid-anagram",
                "title": "Valid Anagram",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "permutation-in-string",
                "title": "Permutation in String",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findAnagrams(string s, string p) {\n    vector<int> ans;\n    vector<int> count(128);\n    int required = p.length();\n\n    for (const char c : p)\n      ++count[c];\n\n    for (int l = 0, r = 0; r < s.length(); ++r) {\n      if (--count[s[r]] >= 0)\n        --required;\n      while (required == 0) {\n        if (r - l + 1 == p.length())\n          ans.push_back(l);\n        if (++count[s[l++]] > 0)\n          ++required;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> findAnagrams(String s, String p) {\n    List<Integer> ans = new ArrayList<>();\n    int[] count = new int[128];\n    int required = p.length();\n\n    for (final char c : p.toCharArray())\n      ++count[c];\n\n    for (int l = 0, r = 0; r < s.length(); ++r) {\n      if (--count[s.charAt(r)] >= 0)\n        --required;\n      while (required == 0) {\n        if (r - l + 1 == p.length())\n          ans.add(l);\n        if (++count[s.charAt(l++)] > 0)\n          ++required;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findAnagrams(self, s: str, p: str) -> List[int]:\n    ans = []\n    count = collections.Counter(p)\n    required = len(p)\n\n    for r, c in enumerate(s):\n      count[c] -= 1\n      if count[c] >= 0:\n        required -= 1\n      if r >= len(p):\n        count[s[r - len(p)]] += 1\n        if count[s[r - len(p)]] > 0:\n          required += 1\n      if required == 0:\n        ans.append(r - len(p) + 1)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}