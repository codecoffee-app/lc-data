{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2420",
            "title": "Find All Good Indices",
            "titleSlug": "find-all-good-indices",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>n</code> and a positive integer <code>k</code>.</p>\n\n<p>We call an index <code>i</code> in the range <code>k &lt;= i &lt; n - k</code> <strong>good</strong> if the following conditions are satisfied:</p>\n\n<ul>\n\t<li>The <code>k</code> elements that are just <strong>before</strong> the index <code>i</code> are in <strong>non-increasing</strong> order.</li>\n\t<li>The <code>k</code> elements that are just <strong>after</strong> the index <code>i</code> are in <strong>non-decreasing</strong> order.</li>\n</ul>\n\n<p>Return <em>an array of all good indices sorted in <strong>increasing</strong> order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,1,1,3,4,1], k = 2\n<strong>Output:</strong> [2,3]\n<strong>Explanation:</strong> There are two good indices in the array:\n- Index 2. The subarray [2,1] is in non-increasing order, and the subarray [1,3] is in non-decreasing order.\n- Index 3. The subarray [1,1] is in non-increasing order, and the subarray [3,4] is in non-decreasing order.\nNote that the index 4 is not good because [4,1] is not non-decreasing.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,1,2], k = 2\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no good indices in this array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n / 2</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 599,
            "dislikes": 32,
            "similarQuestions": "[{\"title\": \"Find Good Days to Rob the Bank\", \"titleSlug\": \"find-good-days-to-rob-the-bank\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Abbreviating the Product of a Range\", \"titleSlug\": \"abbreviating-the-product-of-a-range\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count the Number of K-Big Indices\", \"titleSlug\": \"count-the-number-of-k-big-indices\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.4K\", \"totalSubmission\": \"55.9K\", \"totalAcceptedRaw\": 21363, \"totalSubmissionRaw\": 55876, \"acRate\": \"38.2%\"}",
            "hints": [
                "Iterate over all indices i. How do you quickly check the two conditions?",
                "Precompute for each index whether the conditions are satisfied on the left and the right of the index. You can do that with two iterations, from left to right and right to left."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` of size `n` and a positive integer `k`, find all 'good' indices. An index `i` in the range `k <= i < n - k` is considered 'good' if the `k` elements immediately before `i` are in non-increasing order, and the `k` elements immediately after `i` are in non-decreasing order. Return an array containing all good indices, sorted in increasing order.",
                "constraints": [
                    "n == nums.length",
                    "3 <= n <= 10^5",
                    "1 <= nums[i] <= 10^6",
                    "1 <= k <= n / 2"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,1,1,1,3,4,1], k = 2",
                        "output": "[2,3]",
                        "explanation": "Index 2 is good because [2,1] is non-increasing and [1,3] is non-decreasing. Index 3 is good because [1,1] is non-increasing and [3,4] is non-decreasing."
                    },
                    {
                        "input": "nums = [2,1,1,2], k = 2",
                        "output": "[]",
                        "explanation": "There are no good indices in this array."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-good-days-to-rob-the-bank",
                "title": "Find Good Days to Rob the Bank",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "abbreviating-the-product-of-a-range",
                "title": "Abbreviating the Product of a Range",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-the-number-of-k-big-indices",
                "title": "Count the Number of K-Big Indices",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Iterate over all indices i. How do you quickly check the two conditions?",
            "Precompute for each index whether the conditions are satisfied on the left and the right of the index. You can do that with two iterations, from left to right and right to left."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> goodIndices(vector<int>& nums, int k) {\n    const int n = nums.size();\n    vector<int> ans;\n    vector<int> dec(n, 1);  // dec[i] := continuous decreasing before i\n    vector<int> inc(n, 1);  // inc[i] := continuous increasing after i\n\n    for (int i = 1; i < n; ++i)\n      if (nums[i - 1] >= nums[i])\n        dec[i] = dec[i - 1] + 1;\n\n    for (int i = n - 2; i >= 0; --i)\n      if (nums[i] <= nums[i + 1])\n        inc[i] = inc[i + 1] + 1;\n\n    for (int i = k; i < n - k; ++i)\n      if (dec[i - 1] >= k && inc[i + 1] >= k)\n        ans.push_back(i);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> goodIndices(int[] nums, int k) {\n    final int n = nums.length;\n    List<Integer> ans = new ArrayList<>();\n    int[] dec = new int[n]; // dec[i] := continuous decreasing before i\n    int[] inc = new int[n]; // inc[i] := continuous increasing before i\n\n    Arrays.fill(dec, 1);\n    Arrays.fill(inc, 1);\n\n    for (int i = 1; i < n; ++i)\n      if (nums[i - 1] >= nums[i])\n        dec[i] = dec[i - 1] + 1;\n\n    for (int i = n - 2; i >= 0; --i)\n      if (nums[i] <= nums[i + 1])\n        inc[i] = inc[i + 1] + 1;\n\n    for (int i = k; i < n - k; ++i)\n      if (dec[i - 1] >= k && inc[i + 1] >= k)\n        ans.add(i);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def goodIndices(self, nums: List[int], k: int) -> List[int]:\n    n = len(nums)\n    dec = [1] * n  # dec[i] := continuous decreasing before i\n    inc = [1] * n  # inc[i] := continuous increasing after i\n\n    for i in range(1, n):\n      if nums[i - 1] >= nums[i]:\n        dec[i] = dec[i - 1] + 1\n\n    for i in range(n - 2, -1, -1):\n      if nums[i] <= nums[i + 1]:\n        inc[i] = inc[i + 1] + 1\n\n    return [i for i in range(k, n - k)\n            if dec[i - 1] >= k and inc[i + 1] >= k]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}