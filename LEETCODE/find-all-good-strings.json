{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1397",
            "title": "Find All Good Strings",
            "titleSlug": "find-all-good-strings",
            "content": "<p>Given the strings <code>s1</code> and <code>s2</code> of size <code>n</code> and the string <code>evil</code>, return <em>the number of <strong>good</strong> strings</em>.</p>\n\n<p>A <strong>good</strong> string has size <code>n</code>, it is alphabetically greater than or equal to <code>s1</code>, it is alphabetically smaller than or equal to <code>s2</code>, and it does not contain the string <code>evil</code> as a substring. Since the answer can be a huge number, return this <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, s1 = &quot;aa&quot;, s2 = &quot;da&quot;, evil = &quot;b&quot;\n<strong>Output:</strong> 51 \n<strong>Explanation:</strong> There are 25 good strings starting with &#39;a&#39;: &quot;aa&quot;,&quot;ac&quot;,&quot;ad&quot;,...,&quot;az&quot;. Then there are 25 good strings starting with &#39;c&#39;: &quot;ca&quot;,&quot;cc&quot;,&quot;cd&quot;,...,&quot;cz&quot; and finally there is one good string starting with &#39;d&#39;: &quot;da&quot;.&nbsp;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 8, s1 = &quot;leetcode&quot;, s2 = &quot;leetgoes&quot;, evil = &quot;leet&quot;\n<strong>Output:</strong> 0 \n<strong>Explanation:</strong> All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix &quot;leet&quot;, therefore, there is not any good string.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, s1 = &quot;gx&quot;, s2 = &quot;gz&quot;, evil = &quot;x&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s1.length == n</code></li>\n\t<li><code>s2.length == n</code></li>\n\t<li><code>s1 &lt;= s2</code></li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= evil.length &lt;= 50</code></li>\n\t<li>All strings consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 474,
            "dislikes": 127,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.1K\", \"totalSubmission\": \"14.4K\", \"totalAcceptedRaw\": 6068, \"totalSubmissionRaw\": 14391, \"acRate\": \"42.2%\"}",
            "hints": [
                "Use DP with 4 states (pos: Int, posEvil: Int, equalToS1: Bool, equalToS2: Bool) which compute the number of valid strings of size \"pos\" where the maximum common suffix with string \"evil\" has size \"posEvil\". When \"equalToS1\" is \"true\", the current valid string is equal to \"S1\" otherwise it is greater. In a similar way when equalToS2 is \"true\" the current valid string is equal to \"S2\" otherwise it is smaller.",
                "To update the maximum common suffix with string \"evil\" use KMP preprocessing."
            ],
            "rephrased": {
                "body": "Given two strings `s1` and `s2` of length `n`, and a string `evil`, determine the number of \"good\" strings. A \"good\" string has length `n`, is lexicographically greater than or equal to `s1`, lexicographically smaller than or equal to `s2`, and does not contain `evil` as a substring.  Return the count modulo 10^9 + 7.",
                "constraints": [
                    "s1.length == n",
                    "s2.length == n",
                    "s1 <= s2",
                    "1 <= n <= 500",
                    "1 <= evil.length <= 50",
                    "All strings consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"",
                        "output": "51",
                        "explanation": "There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\"."
                    },
                    {
                        "input": "n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"",
                        "output": "0",
                        "explanation": "All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string."
                    },
                    {
                        "input": "n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use DP with 4 states (pos: Int, posEvil: Int, equalToS1: Bool, equalToS2: Bool) which compute the number of valid strings of size \"pos\" where the maximum common suffix with string \"evil\" has size \"posEvil\". When \"equalToS1\" is \"true\", the current valid string is equal to \"S1\" otherwise it is greater. In a similar way when equalToS2 is \"true\" the current valid string is equal to \"S2\" otherwise it is smaller.",
            "To update the maximum common suffix with string \"evil\" use KMP preprocessing."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findGoodStrings(int n, string s1, string s2, string evil) {\n    // dp[i][j][k1][k2] := # of good strings for s[i:] and there're already j\n    // Matches with `evil`, where k1 is the 0/1 tight constraint for s1 and k2\n    // Is the 0/1 tight constraint for s2\n    dp.resize(n,\n              vector<vector<vector<int>>>(\n                  evil.length(), vector<vector<int>>(2, vector<int>(2, -1))));\n    // nextMatchedCount[i][j] := # next matched evil count given that there're\n    // Already i matches with `evil` and the current char is ('a' + j)\n    nextMatchedCount.resize(evil.length(), vector<int>(26, -1));\n    return find(s1, s2, evil, 0, 0, true, true, getLPS(evil));\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  vector<vector<vector<vector<int>>>> dp;\n  vector<vector<int>> nextMatchedCount;\n\n  int find(const string& s1, const string& s2, const string& evil, int i,\n           int matchedEvilCount, bool isS1Prefix, bool isS2Prefix,\n           const vector<int>& evilLPS) {\n    // s[:i] contains `evil`, so don't consider any ongoing strings\n    if (matchedEvilCount == evil.length())\n      return 0;\n    // Run out of string, contributes one\n    if (i == s1.length())\n      return 1;\n    int& ans = dp[i][matchedEvilCount][isS1Prefix][isS2Prefix];\n    if (ans != -1)\n      return ans;\n    ans = 0;\n    const char minChar = isS1Prefix ? s1[i] : 'a';\n    const char maxChar = isS2Prefix ? s2[i] : 'z';\n    for (char c = minChar; c <= maxChar; ++c) {\n      const int nextMatchedEvilCount =\n          getNextMatchedEvilCount(evil, matchedEvilCount, c, evilLPS);\n      ans += find(s1, s2, evil, i + 1, nextMatchedEvilCount,\n                  isS1Prefix && c == s1[i], isS2Prefix && c == s2[i], evilLPS);\n      ans %= kMod;\n    }\n    return ans;\n  }\n\n  // Get Longest Prefix also Suffix\n  vector<int> getLPS(const string& s) {\n    vector<int> lps(s.length());\n    for (int i = 1, j = 0; i < s.length(); ++i) {\n      while (j > 0 && s[j] != s[i])\n        j = lps[j - 1];\n      if (s[i] == s[j])\n        lps[i] = ++j;\n    }\n    return lps;\n  }\n\n  // J := the next index we're trying to match with `currChar`\n  int getNextMatchedEvilCount(const string& evil, int j, char currChar,\n                              const vector<int>& evilLPS) {\n    int& ans = nextMatchedCount[j][currChar - 'a'];\n    if (ans != -1)\n      return ans;\n    while (j > 0 && evil[j] != currChar)\n      j = evilLPS[j - 1];\n    return ans = (evil[j] == currChar ? j + 1 : j);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findGoodStrings(int n, String s1, String s2, String evil) {\n    // dp[i][j][k1][k2] := # of good strings for s[i:] and there're already j\n    // Matches with `evil`, where k1 is the 0/1 tight constraint for s1 and k2\n    // Is the 0/1 tight constraint for s2\n    dp = new Integer[n][evil.length()][2][2];\n    // nextMatchedCount[i][j] := # next matched evil count given that there're\n    // Already i matches with `evil` and the current char is ('a' + j)\n    nextMatchedCount = new Integer[evil.length()][26];\n    return find(s1, s2, evil, 0, 0, true, true, getLPS(evil));\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private Integer[][][][] dp;\n  private Integer[][] nextMatchedCount;\n\n  private int find(final String s1, final String s2, final String evil, int i, int matchedEvilCount,\n                   boolean isS1Prefix, boolean isS2Prefix, int[] evilLPS) {\n    // s[:i] contains `evil`, so don't consider any ongoing strings\n    if (matchedEvilCount == evil.length())\n      return 0;\n    // Run out of string, contributes one\n    if (i == s1.length())\n      return 1;\n    final int k1 = isS1Prefix ? 1 : 0;\n    final int k2 = isS2Prefix ? 1 : 0;\n    if (dp[i][matchedEvilCount][k1][k2] != null)\n      return dp[i][matchedEvilCount][k1][k2];\n    dp[i][matchedEvilCount][k1][k2] = 0;\n    final char minChar = isS1Prefix ? s1.charAt(i) : 'a';\n    final char maxChar = isS2Prefix ? s2.charAt(i) : 'z';\n    for (char c = minChar; c <= maxChar; ++c) {\n      final int nextMatchedEvilCount = getNextMatchedEvilCount(evil, matchedEvilCount, c, evilLPS);\n      dp[i][matchedEvilCount][k1][k2] +=\n          find(s1, s2, evil, i + 1, nextMatchedEvilCount, isS1Prefix && c == s1.charAt(i),\n               isS2Prefix && c == s2.charAt(i), evilLPS);\n      dp[i][matchedEvilCount][k1][k2] %= kMod;\n    }\n    return dp[i][matchedEvilCount][k1][k2];\n  }\n\n  // Get Longest Prefix also Suffix\n  private int[] getLPS(final String s) {\n    int[] lps = new int[s.length()];\n    for (int i = 1, j = 0; i < s.length(); ++i) {\n      while (j > 0 && s.charAt(j) != s.charAt(i))\n        j = lps[j - 1];\n      if (s.charAt(i) == s.charAt(j))\n        lps[i] = ++j;\n    }\n    return lps;\n  }\n\n  // J := the next index we're trying to match with `currChar`\n  private int getNextMatchedEvilCount(final String evil, int j, char currChar, int[] lps) {\n    if (nextMatchedCount[j][currChar - 'a'] != null)\n      return nextMatchedCount[j][currChar - 'a'];\n    while (j > 0 && evil.charAt(j) != currChar)\n      j = lps[j - 1];\n    return nextMatchedCount[j][currChar - 'a'] = (evil.charAt(j) == currChar ? j + 1 : j);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findGoodStrings(self, n: int, s1: str, s2: str, evil: str) -> int:\n    kMod = 1_000_000_007\n    evilLPS = self._getLPS(evil)\n\n    # NextMatchedCount(i, j) := # Next matched evil count given that there're\n    # Already i matches with `evil` and the current is ('a' + j)\n    # J := the next index we're trying to match with `currChar`\n    @functools.lru_cache(None)\n    def getNextMatchedEvilCount(j: int, currChar: str) -> int:\n      while j > 0 and evil[j] != currChar:\n        j = evilLPS[j - 1]\n      return j + 1 if evil[j] == currChar else j\n\n    # dp(i, j, k1, k2) := # of good strings for s[i:] and there're already j\n    # Matches with `evil`, where k1 is the 0//1 tight constraint for s1 and k2\n    # Is the 0//1 tight constraint for s2\n    @functools.lru_cache(None)\n    def dp(i: int, matchedEvilCount: int, isS1Prefix: bool, isS2Prefix: bool) -> int:\n      # s[:i] contains `evil`, so don't consider any ongoing strings\n      if matchedEvilCount == len(evil):\n        return 0\n      # Run out of string, contributes one\n      if i == n:\n        return 1\n      ans = 0\n      minCharIndex = ord(s1[i]) if isS1Prefix else ord('a')\n      maxCharIndex = ord(s2[i]) if isS2Prefix else ord('z')\n      for charIndex in range(minCharIndex, maxCharIndex + 1):\n        c = chr(charIndex)\n        nextMatchedEvilCount = getNextMatchedEvilCount(matchedEvilCount, c)\n        ans += dp(i + 1, nextMatchedEvilCount,\n                  isS1Prefix and c == s1[i],\n                  isS2Prefix and c == s2[i])\n        ans %= kMod\n      return ans\n\n    return dp(0, 0, True, True)\n\n  # Get Longest Prefix also Suffix\n  def _getLPS(self, s: str) -> List[int]:\n    lps = [0] * len(s)\n    j = 0\n    for i in range(1, len(s)):\n      while j > 0 and s[j] != s[i]:\n        j = lps[j - 1]\n      if s[i] == s[j]:\n        lps[i] = j + 1\n        j += 1\n    return lps\n",
                "lang_text": "py"
            }
        }
    }
}