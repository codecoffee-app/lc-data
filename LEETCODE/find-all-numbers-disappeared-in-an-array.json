{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "448",
            "title": "Find All Numbers Disappeared in an Array",
            "titleSlug": "find-all-numbers-disappeared-in-an-array",
            "content": "<p>Given an array <code>nums</code> of <code>n</code> integers where <code>nums[i]</code> is in the range <code>[1, n]</code>, return <em>an array of all the integers in the range</em> <code>[1, n]</code> <em>that do not appear in</em> <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [4,3,2,7,8,2,3,1]\n<strong>Output:</strong> [5,6]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1]\n<strong>Output:</strong> [2]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= n</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you do it without extra space and in <code>O(n)</code> runtime? You may assume the returned list does not count as extra space.</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 9135,
            "dislikes": 462,
            "similarQuestions": "[{\"title\": \"First Missing Positive\", \"titleSlug\": \"first-missing-positive\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find All Duplicates in an Array\", \"titleSlug\": \"find-all-duplicates-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Unique Binary String\", \"titleSlug\": \"find-unique-binary-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Append K Integers With Minimal Sum\", \"titleSlug\": \"append-k-integers-with-minimal-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Replace Elements in an Array\", \"titleSlug\": \"replace-elements-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Integers to Choose From a Range I\", \"titleSlug\": \"maximum-number-of-integers-to-choose-from-a-range-i\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Integers to Choose From a Range II\", \"titleSlug\": \"maximum-number-of-integers-to-choose-from-a-range-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                }
            ],
            "stats": "{\"totalAccepted\": \"820.6K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 820601, \"totalSubmissionRaw\": 1353887, \"acRate\": \"60.6%\"}",
            "hints": [
                "This is a really easy problem if you decide to use additional memory. For those trying to write an initial solution using additional memory, think <b>counters!</b>",
                "However, the trick really is to not use any additional space than what is already available to use. Sometimes, multiple passes over the input array help find the solution. However, there's an interesting piece of information in this problem that makes it easy to re-use the input array itself for the solution.",
                "The problem specifies that the numbers in the array will be in the range [1, n] where n is the number of elements in the array. Can we use this information and modify the array in-place somehow to find what we need?"
            ],
            "rephrased": {
                "body": "Given an array `nums` of `n` integers where each element `nums[i]` falls within the range `[1, n]`, identify and return a list of all integers within the range `[1, n]` that are absent from the input array `nums`.",
                "constraints": [
                    "n == nums.length",
                    "1 <= n <= 10^5",
                    "1 <= nums[i] <= n"
                ],
                "testcases": [
                    {
                        "input": "[4,3,2,7,8,2,3,1]",
                        "output": "[5,6]",
                        "explanation": "The numbers 5 and 6 are within the range [1, 8] but are not present in the input array."
                    },
                    {
                        "input": "[1,1]",
                        "output": "[2]",
                        "explanation": "The number 2 is within the range [1, 2] but is not present in the input array."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "first-missing-positive",
                "title": "First Missing Positive",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-all-duplicates-in-an-array",
                "title": "Find All Duplicates in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-unique-binary-string",
                "title": "Find Unique Binary String",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "append-k-integers-with-minimal-sum",
                "title": "Append K Integers With Minimal Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "replace-elements-in-an-array",
                "title": "Replace Elements in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-i",
                "title": "Maximum Number of Integers to Choose From a Range I",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-ii",
                "title": "Maximum Number of Integers to Choose From a Range II",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "This is a really easy problem if you decide to use additional memory. For those trying to write an initial solution using additional memory, think <b>counters!</b>",
            "However, the trick really is to not use any additional space than what is already available to use. Sometimes, multiple passes over the input array help find the solution. However, there's an interesting piece of information in this problem that makes it easy to re-use the input array itself for the solution.",
            "The problem specifies that the numbers in the array will be in the range [1, n] where n is the number of elements in the array. Can we use this information and modify the array in-place somehow to find what we need?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findDisappearedNumbers(vector<int>& nums) {\n    vector<int> ans;\n\n    for (const int num : nums) {\n      const int index = abs(num) - 1;\n      nums[index] = -abs(nums[index]);\n    }\n\n    for (int i = 0; i < nums.size(); ++i)\n      if (nums[i] > 0)\n        ans.push_back(i + 1);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> findDisappearedNumbers(int[] nums) {\n    List<Integer> ans = new ArrayList<>();\n\n    for (final int num : nums) {\n      final int index = Math.abs(num) - 1;\n      nums[index] = -Math.abs(nums[index]);\n    }\n\n    for (int i = 0; i < nums.length; ++i)\n      if (nums[i] > 0)\n        ans.add(i + 1);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n    for num in nums:\n      index = abs(num) - 1\n      nums[index] = -abs(nums[index])\n\n    return [i + 1 for i, num in enumerate(nums) if num > 0]\n",
                "lang_text": "py"
            }
        }
    }
}