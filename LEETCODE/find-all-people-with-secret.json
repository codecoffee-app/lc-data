{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2092",
            "title": "Find All People With Secret",
            "titleSlug": "find-all-people-with-secret",
            "content": "<p>You are given an integer <code>n</code> indicating there are <code>n</code> people numbered from <code>0</code> to <code>n - 1</code>. You are also given a <strong>0-indexed</strong> 2D integer array <code>meetings</code> where <code>meetings[i] = [x<sub>i</sub>, y<sub>i</sub>, time<sub>i</sub>]</code> indicates that person <code>x<sub>i</sub></code> and person <code>y<sub>i</sub></code> have a meeting at <code>time<sub>i</sub></code>. A person may attend <strong>multiple meetings</strong> at the same time. Finally, you are given an integer <code>firstPerson</code>.</p>\n\n<p>Person <code>0</code> has a <strong>secret</strong> and initially shares the secret with a person <code>firstPerson</code> at time <code>0</code>. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person <code>x<sub>i</sub></code> has the secret at <code>time<sub>i</sub></code>, then they will share the secret with person <code>y<sub>i</sub></code>, and vice versa.</p>\n\n<p>The secrets are shared <strong>instantaneously</strong>. That is, a person may receive the secret and share it with people in other meetings within the same time frame.</p>\n\n<p>Return <em>a list of all the people that have the secret after all the meetings have taken place. </em>You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1\n<strong>Output:</strong> [0,1,2,3,5]\n<strong>Explanation:\n</strong>At time 0, person 0 shares the secret with person 1.\nAt time 5, person 1 shares the secret with person 2.\nAt time 8, person 2 shares the secret with person 3.\nAt time 10, person 1 shares the secret with person 5.\u200b\u200b\u200b\u200b\nThus, people 0, 1, 2, 3, and 5 know the secret after all the meetings.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3\n<strong>Output:</strong> [0,1,3]\n<strong>Explanation:</strong>\nAt time 0, person 0 shares the secret with person 3.\nAt time 2, neither person 1 nor person 2 know the secret.\nAt time 3, person 3 shares the secret with person 0 and person 1.\nThus, people 0, 1, and 3 know the secret after all the meetings.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1\n<strong>Output:</strong> [0,1,2,3,4]\n<strong>Explanation:</strong>\nAt time 0, person 0 shares the secret with person 1.\nAt time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.\nNote that person 2 can share the secret at the same time as receiving it.\nAt time 2, person 3 shares the secret with person 4.\nThus, people 0, 1, 2, 3, and 4 know the secret after all the meetings.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= meetings.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>meetings[i].length == 3</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i </sub>&lt;= n - 1</code></li>\n\t<li><code>x<sub>i</sub> != y<sub>i</sub></code></li>\n\t<li><code>1 &lt;= time<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= firstPerson &lt;= n - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 792,
            "dislikes": 28,
            "similarQuestions": "[{\"title\": \"Reachable Nodes In Subdivided Graph\", \"titleSlug\": \"reachable-nodes-in-subdivided-graph\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.9K\", \"totalSubmission\": \"69.9K\", \"totalAcceptedRaw\": 23918, \"totalSubmissionRaw\": 69900, \"acRate\": \"34.2%\"}",
            "hints": [
                "Could you model all the meetings happening at the same time as a graph?",
                "What data structure can you use to efficiently share the secret?",
                "You can use the union-find data structure to quickly determine who knows the secret and share the secret."
            ],
            "rephrased": {
                "body": "Given `n` people numbered from 0 to `n - 1` and a list of meetings `meetings` where `meetings[i] = [x_i, y_i, time_i]` indicates that person `x_i` and person `y_i` have a meeting at `time_i`. Person 0 initially has a secret and shares it with `firstPerson` at time 0.  During each meeting, if a person knows the secret, they share it with the other person involved. Secrets are shared instantaneously.  Return a list of all people who know the secret after all meetings have occurred, in any order.",
                "constraints": [
                    "2 <= n <= 10^5",
                    "1 <= meetings.length <= 10^5",
                    "meetings[i].length == 3",
                    "0 <= x_i, y_i <= n - 1",
                    "x_i != y_i",
                    "1 <= time_i <= 10^5",
                    "1 <= firstPerson <= n - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1",
                        "output": "[0,1,2,3,5]",
                        "explanation": "Initially, person 0 shares the secret with person 1. At time 5, person 1 shares the secret with person 2. At time 8, person 2 shares the secret with person 3. At time 10, person 1 shares the secret with person 5.  Therefore, people 0, 1, 2, 3, and 5 know the secret."
                    },
                    {
                        "input": "n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3",
                        "output": "[0,1,3]",
                        "explanation": "Initially, person 0 shares the secret with person 3. At time 2, neither person 1 nor person 2 know the secret. At time 3, person 3 shares the secret with person 0 and person 1. Therefore, people 0, 1, and 3 know the secret."
                    },
                    {
                        "input": "n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1",
                        "output": "[0,1,2,3,4]",
                        "explanation": "Initially, person 0 shares the secret with person 1. At time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3. At time 2, person 3 shares the secret with person 4. Therefore, people 0, 1, 2, 3, and 4 know the secret."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "reachable-nodes-in-subdivided-graph",
                "title": "Reachable Nodes In Subdivided Graph",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Could you model all the meetings happening at the same time as a graph?",
            "What data structure can you use to efficiently share the secret?",
            "You can use the union-find data structure to quickly determine who knows the secret and share the secret."
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  bool connected(int u, int v) {\n    return find(u) == find(v);\n  }\n\n  void reset(int u) {\n    id[u] = u;\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n};\n\nclass Solution {\n public:\n  vector<int> findAllPeople(int n, vector<vector<int>>& meetings,\n                            int firstPerson) {\n    vector<int> ans;\n    UnionFind uf(n);\n    map<int, vector<pair<int, int>>> timeToPairs;\n\n    uf.unionByRank(0, firstPerson);\n\n    for (const vector<int>& m : meetings)\n      timeToPairs[m[2]].push_back({m[0], m[1]});\n\n    for (const auto& [_, pairs] : timeToPairs) {\n      unordered_set<int> peopleUnioned;\n      for (const auto& [x, y] : pairs) {\n        uf.unionByRank(x, y);\n        peopleUnioned.insert(x);\n        peopleUnioned.insert(y);\n      }\n      for (const int person : peopleUnioned)\n        if (!uf.connected(person, 0))\n          uf.reset(person);\n    }\n\n    for (int i = 0; i < n; ++i)\n      if (uf.connected(i, 0))\n        ans.push_back(i);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public void unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  public boolean connected(int u, int v) {\n    return find(u) == find(v);\n  }\n\n  public void reset(int u) {\n    id[u] = u;\n  }\n\n  private int[] id;\n  private int[] rank;\n\n  private int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n}\n\nclass Solution {\n  public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {\n    List<Integer> ans = new ArrayList<>();\n    UnionFind uf = new UnionFind(n);\n    TreeMap<Integer, List<Pair<Integer, Integer>>> timeToPairs = new TreeMap<>();\n\n    uf.unionByRank(0, firstPerson);\n\n    for (int[] m : meetings) {\n      timeToPairs.putIfAbsent(m[2], new ArrayList<>());\n      timeToPairs.get(m[2]).add(new Pair<>(m[0], m[1]));\n    }\n\n    for (List<Pair<Integer, Integer>> pairs : timeToPairs.values()) {\n      Set<Integer> peopleUnioned = new HashSet<>();\n      for (Pair<Integer, Integer> pair : pairs) {\n        final int x = pair.getKey();\n        final int y = pair.getValue();\n        uf.unionByRank(x, y);\n        peopleUnioned.add(x);\n        peopleUnioned.add(y);\n      }\n      for (final int person : peopleUnioned)\n        if (!uf.connected(person, 0))\n          uf.reset(person);\n    }\n\n    for (int i = 0; i < n; ++i)\n      if (uf.connected(i, 0))\n        ans.add(i);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self._find(u)\n    j = self._find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def connected(self, u: int, v: int) -> bool:\n    return self._find(self.id[u]) == self._find(self.id[v])\n\n  def reset(self, u: int) -> None:\n    self.id[u] = u\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:\n    uf = UnionFind(n)\n    timeToPairs = collections.defaultdict(list)\n\n    uf.unionByRank(0, firstPerson)\n\n    for x, y, time in meetings:\n      timeToPairs[time].append((x, y))\n\n    for _, pairs in sorted(timeToPairs.items(), key=lambda x: x[0]):\n      peopleUnioned = set()\n      for x, y in pairs:\n        uf.unionByRank(x, y)\n        peopleUnioned.add(x)\n        peopleUnioned.add(y)\n      for person in peopleUnioned:\n        if not uf.connected(person, 0):\n          uf.reset(person)\n\n    return [i for i in range(n) if uf.connected(i, 0)]\n",
                "lang_text": "py"
            }
        }
    }
}