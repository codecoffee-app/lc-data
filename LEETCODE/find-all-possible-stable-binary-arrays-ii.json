{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3130",
            "title": "Find All Possible Stable Binary Arrays II",
            "titleSlug": "find-all-possible-stable-binary-arrays-ii",
            "content": "<p>You are given 3 positive integers <code>zero</code>, <code>one</code>, and <code>limit</code>.</p>\n\n<p>A <span data-keyword=\"binary-array\">binary array</span> <code>arr</code> is called <strong>stable</strong> if:</p>\n\n<ul>\n\t<li>The number of occurrences of 0 in <code>arr</code> is <strong>exactly </strong><code>zero</code>.</li>\n\t<li>The number of occurrences of 1 in <code>arr</code> is <strong>exactly</strong> <code>one</code>.</li>\n\t<li>Each <span data-keyword=\"subarray-nonempty\">subarray</span> of <code>arr</code> with a size greater than <code>limit</code> must contain <strong>both </strong>0 and 1.</li>\n</ul>\n\n<p>Return the <em>total</em> number of <strong>stable</strong> binary arrays.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 1, one = 1, limit = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The two possible stable binary arrays are <code>[1,0]</code> and <code>[0,1]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 1, one = 2, limit = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only possible stable binary array is <code>[1,0,1]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 3, one = 3, limit = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">14</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All the possible stable binary arrays are <code>[0,0,1,0,1,1]</code>, <code>[0,0,1,1,0,1]</code>, <code>[0,1,0,0,1,1]</code>, <code>[0,1,0,1,0,1]</code>, <code>[0,1,0,1,1,0]</code>, <code>[0,1,1,0,0,1]</code>, <code>[0,1,1,0,1,0]</code>, <code>[1,0,0,1,0,1]</code>, <code>[1,0,0,1,1,0]</code>, <code>[1,0,1,0,0,1]</code>, <code>[1,0,1,0,1,0]</code>, <code>[1,0,1,1,0,0]</code>, <code>[1,1,0,0,1,0]</code>, and <code>[1,1,0,1,0,0]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= zero, one, limit &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 53,
            "dislikes": 11,
            "similarQuestions": "[{\"title\": \"Contiguous Array\", \"titleSlug\": \"contiguous-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Subarrays With Sum\", \"titleSlug\": \"binary-subarrays-with-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"2.6K\", \"totalSubmission\": \"9K\", \"totalAcceptedRaw\": 2634, \"totalSubmissionRaw\": 9031, \"acRate\": \"29.2%\"}",
            "hints": [
                "Let <code>dp[x][y][z = 0/1]</code> be the number of stable arrays with exactly <code>x</code> zeros, <code>y</code> ones, and the last element is <code>z</code>. (0 or 1).\r\n<code>dp[x][y][0] + dp[x][y][1]</code> is the answer for given <code>(x, y)</code>.",
                "If we have already placed <code>x</code> 1 and <code>y</code> 0, if we place a group of <code>k</code> 0, the number of ways is <code>dp[x-k][y][1]</code>. We can place a group with size <code>i</code>, where <code>i</code> varies from 1 to <code>min(limit, zero - x)</code>.\r\nSimilarly, we can solve by placing a group of ones.",
                "Speed up the calculation using prefix arrays to store the sum of <code>dp</code> states."
            ],
            "rephrased": {
                "body": "Given three positive integers `zero`, `one`, and `limit`, determine the number of \"stable\" binary arrays. A binary array is considered stable if it contains exactly `zero` number of 0s and exactly `one` number of 1s. Additionally, every subarray of the binary array with a length greater than `limit` must contain at least one 0 and one 1. Return the total number of stable binary arrays modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= zero, one, limit <= 1000"
                ],
                "testcases": [
                    {
                        "input": "zero = 1, one = 1, limit = 2",
                        "output": "2",
                        "explanation": "The possible stable binary arrays are [1,0] and [0,1]."
                    },
                    {
                        "input": "zero = 1, one = 2, limit = 1",
                        "output": "1",
                        "explanation": "The only possible stable binary array is [1,0,1]."
                    },
                    {
                        "input": "zero = 3, one = 3, limit = 2",
                        "output": "14",
                        "explanation": "The stable arrays are [0,0,1,0,1,1], [0,0,1,1,0,1], [0,1,0,0,1,1], [0,1,0,1,0,1], [0,1,0,1,1,0], [0,1,1,0,0,1], [0,1,1,0,1,0], [1,0,0,1,0,1], [1,0,0,1,1,0], [1,0,1,0,0,1], [1,0,1,0,1,0], [1,0,1,1,0,0], [1,1,0,0,1,0], and [1,1,0,1,0,0]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "contiguous-array",
                "title": "Contiguous Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "binary-subarrays-with-sum",
                "title": "Binary Subarrays With Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let <code>dp[x][y][z = 0/1]</code> be the number of stable arrays with exactly <code>x</code> zeros, <code>y</code> ones, and the last element is <code>z</code>. (0 or 1).\r\n<code>dp[x][y][0] + dp[x][y][1]</code> is the answer for given <code>(x, y)</code>.",
            "If we have already placed <code>x</code> 1 and <code>y</code> 0, if we place a group of <code>k</code> 0, the number of ways is <code>dp[x-k][y][1]</code>. We can place a group with size <code>i</code>, where <code>i</code> varies from 1 to <code>min(limit, zero - x)</code>.\r\nSimilarly, we can solve by placing a group of ones.",
            "Speed up the calculation using prefix arrays to store the sum of <code>dp</code> states."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Same as 3129. Find All Possible Stable Binary Arrays I\n  int numberOfStableArrays(int zero, int one, int limit) {\n    constexpr int kMod = 1'000'000'007;\n    // dp[i][j][k] := the number of stable arrays, where the number of\n    // ocurrences of 0 is i and the number of ocurrences of 1 is j and the last\n    // number is k (0/1)\n    vector<vector<vector<long>>> dp(\n        zero + 1, vector<vector<long>>(one + 1, vector<long>(2)));\n\n    for (int i = 0; i <= min(zero, limit); ++i)\n      dp[i][0][0] = 1;\n\n    for (int j = 0; j <= min(one, limit); ++j)\n      dp[0][j][1] = 1;\n\n    for (int i = 1; i <= zero; ++i)\n      for (int j = 1; j <= one; ++j) {\n        dp[i][j][0] = (dp[i - 1][j][0] + dp[i - 1][j][1] -\n                       (i - limit < 1 ? 0 : dp[i - limit - 1][j][1]) + kMod) %\n                      kMod;\n        dp[i][j][1] = (dp[i][j - 1][0] + dp[i][j - 1][1] -\n                       (j - limit < 1 ? 0 : dp[i][j - limit - 1][0]) + kMod) %\n                      kMod;\n      }\n\n    return (dp[zero][one][0] + dp[zero][one][1]) % kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Same as 3129. Find All Possible Stable Binary Arrays I\n  public int numberOfStableArrays(int zero, int one, int limit) {\n    final int kMod = 1_000_000_007;\n    // dp[i][j][k] := the number of stable arrays, where the number of\n    // occurrences of 0 is i and the number of occurrences of 1 is j and the last\n    // number is k (0/1)\n    long[][][] dp = new long[zero + 1][one + 1][2];\n\n    for (int i = 0; i <= Math.min(zero, limit); ++i)\n      dp[i][0][0] = 1;\n\n    for (int j = 0; j <= Math.min(one, limit); ++j)\n      dp[0][j][1] = 1;\n\n    for (int i = 1; i <= zero; ++i)\n      for (int j = 1; j <= one; ++j) {\n        dp[i][j][0] = (dp[i - 1][j][0] + dp[i - 1][j][1] -\n                       (i - limit < 1 ? 0 : dp[i - limit - 1][j][1]) + kMod) %\n                      kMod;\n        dp[i][j][1] = (dp[i][j - 1][0] + dp[i][j - 1][1] -\n                       (j - limit < 1 ? 0 : dp[i][j - limit - 1][0]) + kMod) %\n                      kMod;\n      }\n\n    return (int) ((dp[zero][one][0] + dp[zero][one][1]) % kMod);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Same as 3129. Find All Possible Stable Binary Arrays I\n  def numberOfStableArrays(self, zero: int, one: int, limit: int) -> int:\n    kMod = 1_000_000_007\n    # dp[i][j][k] := the number of stable arrays, where the number of\n    # occurrences of 0 is i and the number of occurrences of 1 is j and the last\n    # number is k (0/1)\n    dp = [[[0] * 2\n           for _ in range(one + 1)]\n          for _ in range(zero + 1)]\n\n    for i in range(min(zero, limit) + 1):\n      dp[i][0][0] = 1\n\n    for j in range(min(one, limit) + 1):\n      dp[0][j][1] = 1\n\n    for i in range(1, zero + 1):\n      for j in range(1, one + 1):\n        dp[i][j][0] = (dp[i - 1][j][0] + dp[i - 1][j][1] -\n                       (dp[i - limit - 1][j][1] if i - limit >= 1 else 0) + kMod) % kMod\n        dp[i][j][1] = (dp[i][j - 1][0] + dp[i][j - 1][1] -\n                       (dp[i][j - limit - 1][0] if j - limit >= 1 else 0) + kMod) % kMod\n\n    return (dp[zero][one][0] + dp[zero][one][1]) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}