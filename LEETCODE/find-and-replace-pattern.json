{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "890",
            "title": "Find and Replace Pattern",
            "titleSlug": "find-and-replace-pattern",
            "content": "<p>Given a list of strings <code>words</code> and a string <code>pattern</code>, return <em>a list of</em> <code>words[i]</code> <em>that match</em> <code>pattern</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>A word matches the pattern if there exists a permutation of letters <code>p</code> so that after replacing every letter <code>x</code> in the pattern with <code>p(x)</code>, we get the desired word.</p>\n\n<p>Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;], pattern = &quot;abb&quot;\n<strong>Output:</strong> [&quot;mee&quot;,&quot;aqq&quot;]\n<strong>Explanation:</strong> &quot;mee&quot; matches the pattern because there is a permutation {a -&gt; m, b -&gt; e, ...}. \n&quot;ccc&quot; does not match the pattern because {a -&gt; c, b -&gt; c, ...} is not a permutation, since a and b map to the same letter.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], pattern = &quot;a&quot;\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\n\t<li><code>words[i].length == pattern.length</code></li>\n\t<li><code>pattern</code> and <code>words[i]</code> are lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3843,
            "dislikes": 169,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"179.2K\", \"totalSubmission\": \"232.6K\", \"totalAcceptedRaw\": 179197, \"totalSubmissionRaw\": 232551, \"acRate\": \"77.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a list of strings `words` and a string `pattern`, identify and return the `words[i]` that match the given `pattern`. The order of the returned list is not important.\n\nA word matches the pattern if a permutation of letters `p` exists. Applying this permutation to the pattern (replacing each letter `x` in the pattern with `p(x)`) results in the word. A permutation is a one-to-one mapping of letters; each letter maps to another unique letter.",
                "constraints": [
                    "1 <= pattern.length <= 20",
                    "1 <= words.length <= 50",
                    "words[i].length == pattern.length",
                    "pattern and words[i] are lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"",
                        "output": "[\"mee\",\"aqq\"]",
                        "explanation": "\"mee\" matches the pattern because there is a permutation {a -> m, b -> e}. \"ccc\" does not match the pattern because {a -> c, b -> c} is not a valid permutation (a and b map to the same letter)."
                    },
                    {
                        "input": "words = [\"a\",\"b\",\"c\"], pattern = \"a\"",
                        "output": "[\"a\",\"b\",\"c\"]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> findAndReplacePattern(vector<string>& words, string pattern) {\n    vector<string> ans;\n\n    for (const string& word : words)\n      if (isIsomorphic(word, pattern))\n        ans.push_back(word);\n\n    return ans;\n  }\n\n private:\n  bool isIsomorphic(const string& w, const string& p) {\n    vector<int> map_w(128);\n    vector<int> map_p(128);\n\n    for (int i = 0; i < w.length(); ++i) {\n      if (map_w[w[i]] != map_p[p[i]])\n        return false;\n      map_w[w[i]] = i + 1;\n      map_p[p[i]] = i + 1;\n    }\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> findAndReplacePattern(String[] words, String pattern) {\n    List<String> ans = new ArrayList<>();\n\n    for (final String word : words)\n      if (isIsomorphic(word, pattern))\n        ans.add(word);\n\n    return ans;\n  }\n\n  private boolean isIsomorphic(final String w, final String p) {\n    Map<Character, Integer> map_w = new HashMap<>();\n    Map<Character, Integer> map_p = new HashMap<>();\n\n    for (Integer i = 0; i < w.length(); ++i)\n      if (map_w.put(w.charAt(i), i) != map_p.put(p.charAt(i), i))\n        return false;\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n    def isIsomorphic(w: str, p: str) -> bool:\n      return [*map(w.index, w)] == [*map(p.index, p)]\n    return [word for word in words if isIsomorphic(word, pattern)]\n",
                "lang_text": "py"
            }
        }
    }
}