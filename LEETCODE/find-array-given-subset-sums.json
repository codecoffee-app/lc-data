{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1982",
            "title": "Find Array Given Subset Sums",
            "titleSlug": "find-array-given-subset-sums",
            "content": "<p>You are given an integer <code>n</code> representing the length of an unknown array that you are trying to recover. You are also given an array <code>sums</code> containing the values of all <code>2<sup>n</sup></code> <strong>subset sums</strong> of the unknown array (in no particular order).</p>\n\n<p>Return <em>the array </em><code>ans</code><em> of length </em><code>n</code><em> representing the unknown array. If <strong>multiple</strong> answers exist, return <strong>any</strong> of them</em>.</p>\n\n<p>An array <code>sub</code> is a <strong>subset</strong> of an array <code>arr</code> if <code>sub</code> can be obtained from <code>arr</code> by deleting some (possibly zero or all) elements of <code>arr</code>. The sum of the elements in <code>sub</code> is one possible <strong>subset sum</strong> of <code>arr</code>. The sum of an empty array is considered to be <code>0</code>.</p>\n\n<p><strong>Note:</strong> Test cases are generated such that there will <strong>always</strong> be at least one correct answer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, sums = [-3,-2,-1,0,0,1,2,3]\n<strong>Output:</strong> [1,2,-3]\n<strong>Explanation: </strong>[1,2,-3] is able to achieve the given subset sums:\n- []: sum is 0\n- [1]: sum is 1\n- [2]: sum is 2\n- [1,2]: sum is 3\n- [-3]: sum is -3\n- [1,-3]: sum is -2\n- [2,-3]: sum is -1\n- [1,2,-3]: sum is 0\nNote that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, sums = [0,0,0,0]\n<strong>Output:</strong> [0,0]\n<strong>Explanation:</strong> The only correct answer is [0,0].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]\n<strong>Output:</strong> [0,-1,4,5]\n<strong>Explanation:</strong> [0,-1,4,5] is able to achieve the given subset sums.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 15</code></li>\n\t<li><code>sums.length == 2<sup>n</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= sums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 551,
            "dislikes": 35,
            "similarQuestions": "[{\"title\": \"Subsets\", \"titleSlug\": \"subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subsets II\", \"titleSlug\": \"subsets-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Recover the Original Array\", \"titleSlug\": \"recover-the-original-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.9K\", \"totalSubmission\": \"10.2K\", \"totalAcceptedRaw\": 4941, \"totalSubmissionRaw\": 10184, \"acRate\": \"48.5%\"}",
            "hints": [
                "What information do the two largest elements tell us?",
                "Can we use recursion to check all possible states?"
            ],
            "rephrased": {
                "body": "Given an integer `n` representing the length of an unknown array, and an array `sums` containing all `2^n` subset sums of the unknown array (in no particular order), return the array `ans` of length `n` representing the unknown array. If multiple answers exist, return any of them.",
                "constraints": [
                    "1 <= n <= 15",
                    "sums.length == 2^n",
                    "-10^4 <= sums[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 3, sums = [-3,-2,-1,0,0,1,2,3]",
                        "output": "[1,2,-3]",
                        "explanation": "The array [1, 2, -3] produces the given subset sums: (empty set) -> 0, [1] -> 1, [2] -> 2, [1, 2] -> 3, [-3] -> -3, [1, -3] -> -2, [2, -3] -> -1, [1, 2, -3] -> 0.  Note that permutations of [1, 2, -3] and [-1, -2, 3] are also valid solutions."
                    },
                    {
                        "input": "n = 2, sums = [0,0,0,0]",
                        "output": "[0,0]",
                        "explanation": "The only possible array that produces the given subset sums is [0, 0]."
                    },
                    {
                        "input": "n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]",
                        "output": "[0,-1,4,5]",
                        "explanation": "The array [0, -1, 4, 5] produces the given subset sums."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "subsets",
                "title": "Subsets",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "subsets-ii",
                "title": "Subsets II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "recover-the-original-array",
                "title": "Recover the Original Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What information do the two largest elements tell us?",
            "Can we use recursion to check all possible states?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> recoverArray(int n, vector<int>& sums) {\n    std::ranges::sort(sums);\n    return recover(sums);\n  }\n\n private:\n  vector<int> recover(const vector<int>& sums) {\n    if (sums.size() == 1)  // sums[0] must be 0.\n      return {};\n\n    // Either num or -num must be in the final array.\n    //  num + sumsExcludingNum = sumsIncludingNum\n    // -num + sumsIncludingNum = sumsExcludingNum\n    unordered_map<int, int> count;\n    for (const int sum : sums)\n      ++count[sum];\n\n    const int num = sums[1] - sums[0];\n    vector<int> sumsExcludingNum;\n    vector<int> sumsIncludingNum;\n    bool chooseSumsIncludingNum = false;\n\n    for (const int sum : sums) {\n      if (count[sum] == 0)\n        continue;\n      --count[sum];\n      --count[sum + num];\n      sumsExcludingNum.push_back(sum);\n      sumsIncludingNum.push_back(sum + num);\n      if (sum + num == 0)\n        chooseSumsIncludingNum = true;\n    }\n\n    // Choose `sumsExludingNum` by default since we want to gradually strip\n    // `num` from each sum in `sums` to have the final array. However, we should\n    // always choose the group of sums with 0 since it's a must-have.\n    vector<int> recovered =\n        recover(chooseSumsIncludingNum ? sumsIncludingNum : sumsExcludingNum);\n    recovered.push_back(chooseSumsIncludingNum ? -num : num);\n    return recovered;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] recoverArray(int n, int[] sums) {\n    Arrays.sort(sums);\n    return recover(sums).stream().mapToInt(Integer::intValue).toArray();\n  }\n\n  private List<Integer> recover(int[] sums) {\n    if (sums.length == 1) // sums[0] must be 0.\n      return new ArrayList<>();\n\n    Map<Integer, Long> count = Arrays.stream(sums).boxed().collect(\n        Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\n    // Either num or -num must be in the final array.\n    //  num + sumsExcludingNum = sumsIncludingNum\n    // -num + sumsIncludingNum = sumsExcludingNum\n    final int num = sums[1] - sums[0];\n    int i = 0; // sumsExcludingNum/sumsIncludingNum's index\n    int[] sumsExcludingNum = new int[sums.length / 2];\n    int[] sumsIncludingNum = new int[sums.length / 2];\n    boolean chooseSumsIncludingNum = false;\n\n    for (final int sum : sums) {\n      if (count.get(sum) == 0)\n        continue;\n      count.merge(sum, -1L, Long::sum);\n      count.merge(sum + num, -1L, Long::sum);\n      sumsExcludingNum[i] = sum;\n      sumsIncludingNum[i] = sum + num;\n      ++i;\n      if (sum + num == 0)\n        chooseSumsIncludingNum = true;\n    }\n\n    // Choose `sumsExludingNum` by default since we want to gradually strip\n    // `num` from each sum in `sums` to have the final array. However, we should\n    // always choose the group of sums with 0 since it's a must-have.\n    List<Integer> recovered = recover(chooseSumsIncludingNum ? sumsIncludingNum : sumsExcludingNum);\n    recovered.add(chooseSumsIncludingNum ? -num : num);\n    return recovered;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def recoverArray(self, n: int, sums: List[int]) -> List[int]:\n    def recover(sums: List[int]) -> List[int]:\n      if len(sums) == 1:\n        return []\n\n      count = collections.Counter(sums)\n      # Either num or -num must be in the final array.\n      #  num + sumsExcludingNum = sumsIncludingNum\n      # -num + sumsIncludingNum = sumsExcludingNum\n      num = sums[1] - sums[0]\n      sumsExcludingNum = []\n      sumsIncludingNum = []\n      chooseSumsExcludingNum = True\n\n      for summ in sums:\n        if count[summ] == 0:\n          continue\n        count[summ] -= 1\n        count[summ + num] -= 1\n        sumsExcludingNum.append(summ)\n        sumsIncludingNum.append(summ + num)\n        if summ + num == 0:\n          chooseSumsExcludingNum = False\n\n      # Choose `sumsExludingNum` by default since we want to gradually strip\n      # `num` from each sum in `sums` to have the final array. However, we should\n      # always choose the group of sums with 0 since it's a must-have.\n      return [num] + recover(sumsExcludingNum) if chooseSumsExcludingNum \\\n          else [-num] + recover(sumsIncludingNum)\n\n    return recover(sorted(sums))\n",
                "lang_text": "py"
            }
        }
    }
}