{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3006",
            "title": "Find Beautiful Indices in the Given Array I",
            "titleSlug": "find-beautiful-indices-in-the-given-array-i",
            "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code>, a string <code>a</code>, a string <code>b</code>, and an integer <code>k</code>.</p>\n\n<p>An index <code>i</code> is <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt;= s.length - a.length</code></li>\n\t<li><code>s[i..(i + a.length - 1)] == a</code></li>\n\t<li>There exists an index <code>j</code> such that:\n\t<ul>\n\t\t<li><code>0 &lt;= j &lt;= s.length - b.length</code></li>\n\t\t<li><code>s[j..(j + b.length - 1)] == b</code></li>\n\t\t<li><code>|j - i| &lt;= k</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the array that contains beautiful indices in <strong>sorted order from smallest to largest</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;isawsquirrelnearmysquirrelhouseohmy&quot;, a = &quot;my&quot;, b = &quot;squirrel&quot;, k = 15\n<strong>Output:</strong> [16,33]\n<strong>Explanation:</strong> There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == &quot;my&quot; and there exists an index 4 with s[4..11] == &quot;squirrel&quot; and |16 - 4| &lt;= 15.\n- The index 33 is beautiful as s[33..34] == &quot;my&quot; and there exists an index 18 with s[18..25] == &quot;squirrel&quot; and |33 - 18| &lt;= 15.\nThus we return [16,33] as the result.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, a = &quot;a&quot;, b = &quot;a&quot;, k = 4\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == &quot;a&quot; and there exists an index 0 with s[0..0] == &quot;a&quot; and |0 - 0| &lt;= 4.\nThus we return [0] as the result.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10</code></li>\n\t<li><code>s</code>, <code>a</code>, and <code>b</code> contain only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 144,
            "dislikes": 29,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.2K\", \"totalSubmission\": \"66.9K\", \"totalAcceptedRaw\": 24234, \"totalSubmissionRaw\": 66927, \"acRate\": \"36.2%\"}",
            "hints": [
                "For each <code>i</code>, you can iterate over all <code>j</code>s and determine if <code>i</code> is beautiful or not."
            ],
            "rephrased": {
                "body": "Given a 0-indexed string `s`, strings `a` and `b`, and an integer `k`, find all beautiful indices in `s`. An index `i` is considered beautiful if: \n\n1.  `0 <= i <= s.length - a.length`\n2.  The substring of `s` starting at `i` with length `a.length` is equal to `a` (i.e., `s[i..(i + a.length - 1)] == a`).\n3.  There exists an index `j` such that: \n    *   `0 <= j <= s.length - b.length`\n    *   The substring of `s` starting at `j` with length `b.length` is equal to `b` (i.e., `s[j..(j + b.length - 1)] == b`).\n    *   The absolute difference between `i` and `j` is less than or equal to `k` (i.e., `|j - i| <= k`).\n\nReturn a sorted array of all beautiful indices in ascending order.",
                "constraints": [
                    "1 <= k <= s.length <= 10^5",
                    "1 <= a.length, b.length <= 10",
                    "s, a, and b contain only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15",
                        "output": "[16,33]",
                        "explanation": "Index 16 is beautiful because s[16..17] == \"my\" and there exists an index 4 where s[4..11] == \"squirrel\", with |16 - 4| <= 15. Similarly, index 33 is beautiful because s[33..34] == \"my\" and there exists an index 18 where s[18..25] == \"squirrel\", with |33 - 18| <= 15."
                    },
                    {
                        "input": "s = \"abcd\", a = \"a\", b = \"a\", k = 4",
                        "output": "[0]",
                        "explanation": "Index 0 is beautiful because s[0..0] == \"a\" and there exists an index 0 where s[0..0] == \"a\", with |0 - 0| <= 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For each <code>i</code>, you can iterate over all <code>j</code>s and determine if <code>i</code> is beautiful or not."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> beautifulIndices(string s, string a, string b, int k) {\n    vector<int> ans;\n    const vector<int> indicesA = kmp(s, a);\n    const vector<int> indicesB = kmp(s, b);\n    int indicesBIndex = 0;  // indicesB's index\n\n    for (const int i : indicesA) {\n      // The constraint is: |j - i| <= k. So, -k <= j - i <= k. So, move\n      // `indicesBIndex` s.t. j - i >= -k, where j := indicesB[indicesBIndex].\n      while (indicesBIndex < indicesB.size() &&\n             indicesB[indicesBIndex] - i < -k)\n        ++indicesBIndex;\n      if (indicesBIndex < indicesB.size() && indicesB[indicesBIndex] - i <= k)\n        ans.push_back(i);\n    }\n\n    return ans;\n  }\n\n private:\n  // Returns the starting indices of all occurrences of the pattern in `s`.\n  vector<int> kmp(const string& s, const string& pattern) {\n    vector<int> res;\n    const vector<int> lps = getLPS(pattern);\n    int i = 0;  // s' index\n    int j = 0;  // pattern's index\n    while (i < s.length()) {\n      if (s[i] == pattern[j]) {\n        ++i;\n        ++j;\n        if (j == pattern.length()) {\n          res.push_back(i - j);\n          j = lps[j - 1];\n        }\n      }\n      // Mismatch after j matches.\n      else if (j > 0) {\n        // Don't match lps[0..lps[j - 1]] since they will match anyway.\n        j = lps[j - 1];\n      } else {\n        ++i;\n      }\n    }\n    return res;\n  }\n\n  // Returns the lps array, where lps[i] is the length of the longest prefix of\n  // pattern[0..i] which is also a suffix of this substring.\n  vector<int> getLPS(const string& pattern) {\n    vector<int> lps(pattern.length());\n    for (int i = 1, j = 0; i < pattern.length(); ++i) {\n      while (j > 0 && pattern[j] != pattern[i])\n        j = lps[j - 1];\n      if (pattern[i] == pattern[j])\n        lps[i] = ++j;\n    }\n    return lps;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> beautifulIndices(String s, String a, String b, int k) {\n    List<Integer> ans = new ArrayList<>();\n    List<Integer> indicesA = kmp(s, a);\n    List<Integer> indicesB = kmp(s, b);\n    int indicesBIndex = 0; // indicesB' index\n\n    for (final int i : indicesA) {\n      // The constraint is: |j - i| <= k. So, -k <= j - i <= k. So, move\n      // `indicesBIndex` s.t. j - i >= -k, where j := indicesB[indicesBIndex].\n      while (indicesBIndex < indicesB.size() && indicesB.get(indicesBIndex) - i < -k)\n        ++indicesBIndex;\n      if (indicesBIndex < indicesB.size() && indicesB.get(indicesBIndex) - i <= k)\n        ans.add(i);\n    }\n\n    return ans;\n  }\n\n  // Returns the starting indices of all occurrences of the pattern in `s`.\n  private List<Integer> kmp(final String s, final String pattern) {\n    List<Integer> res = new ArrayList<>();\n    int[] lps = getLPS(pattern);\n    int i = 0; // s' index\n    int j = 0; // pattern's index\n    while (i < s.length()) {\n      if (s.charAt(i) == pattern.charAt(j)) {\n        ++i;\n        ++j;\n        if (j == pattern.length()) {\n          res.add(i - j);\n          j = lps[j - 1];\n        }\n      }\n      // Mismatch after j matches.\n      else if (j != 0) {\n        // Don't match lps[0..lps[j - 1]] since they will match anyway.\n        j = lps[j - 1];\n      } else {\n        ++i;\n      }\n    }\n    return res;\n  }\n\n  // Returns the lps array, where lps[i] is the length of the longest prefix of\n  // pattern[0..i] which is also a suffix of this substring.\n  private int[] getLPS(final String pattern) {\n    int[] lps = new int[pattern.length()];\n    for (int i = 1, j = 0; i < pattern.length(); ++i) {\n      while (j > 0 && pattern.charAt(j) != pattern.charAt(i))\n        j = lps[j - 1];\n      if (pattern.charAt(i) == pattern.charAt(j))\n        lps[i] = ++j;\n    }\n    return lps;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n    ans = []\n    indicesA = self._kmp(s, a)\n    indicesB = self._kmp(s, b)\n    indicesBIndex = 0  # indicesB' index\n\n    for i in indicesA:\n      # The constraint is: |j - i| <= k. So, -k <= j - i <= k. So, move\n      # `indicesBIndex` s.t. j - i >= -k, where j := indicesB[indicesBIndex].\n      while indicesBIndex < len(indicesB) and indicesB[indicesBIndex] - i < -k:\n        indicesBIndex += 1\n      if indicesBIndex < len(indicesB) and indicesB[indicesBIndex] - i <= k:\n        ans.append(i)\n\n    return ans\n\n  def _kmp(self, s: str, pattern: str) -> List[int]:\n    \"\"\"Returns the starting indices of all occurrences of the pattern in `s`.\"\"\"\n\n    def getLPS(pattern: str) -> List[int]:\n      \"\"\"\n      Returns the lps array, where lps[i] is the length of the longest prefix of\n      pattern[0..i] which is also a suffix of this substring.\n      \"\"\"\n      lps = [0] * len(pattern)\n      j = 0\n      for i in range(1, len(pattern)):\n        while j > 0 and pattern[j] != pattern[i]:\n          j = lps[j - 1]\n        if pattern[i] == pattern[j]:\n          lps[i] = j + 1\n          j += 1\n      return lps\n\n    res = []\n    lps = getLPS(pattern)\n    i = 0  # s' index\n    j = 0  # pattern's index\n    while i < len(s):\n      if s[i] == pattern[j]:\n        i += 1\n        j += 1\n        if j == len(pattern):\n          res.append(i - j)\n          j = lps[j - 1]\n      # Mismatch after j matches.\n      elif j != 0:\n          # Don't match lps[0..lps[j - 1]] since they will match anyway.\n        j = lps[j - 1]\n      else:\n        i += 1\n    return res\n",
                "lang_text": "py"
            }
        }
    }
}