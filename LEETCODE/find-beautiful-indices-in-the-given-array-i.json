{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3006",
            "title": "Find Beautiful Indices in the Given Array I",
            "titleSlug": "find-beautiful-indices-in-the-given-array-i",
            "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code>, a string <code>a</code>, a string <code>b</code>, and an integer <code>k</code>.</p>\n\n<p>An index <code>i</code> is <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt;= s.length - a.length</code></li>\n\t<li><code>s[i..(i + a.length - 1)] == a</code></li>\n\t<li>There exists an index <code>j</code> such that:\n\t<ul>\n\t\t<li><code>0 &lt;= j &lt;= s.length - b.length</code></li>\n\t\t<li><code>s[j..(j + b.length - 1)] == b</code></li>\n\t\t<li><code>|j - i| &lt;= k</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the array that contains beautiful indices in <strong>sorted order from smallest to largest</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;isawsquirrelnearmysquirrelhouseohmy&quot;, a = &quot;my&quot;, b = &quot;squirrel&quot;, k = 15\n<strong>Output:</strong> [16,33]\n<strong>Explanation:</strong> There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == &quot;my&quot; and there exists an index 4 with s[4..11] == &quot;squirrel&quot; and |16 - 4| &lt;= 15.\n- The index 33 is beautiful as s[33..34] == &quot;my&quot; and there exists an index 18 with s[18..25] == &quot;squirrel&quot; and |33 - 18| &lt;= 15.\nThus we return [16,33] as the result.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, a = &quot;a&quot;, b = &quot;a&quot;, k = 4\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == &quot;a&quot; and there exists an index 0 with s[0..0] == &quot;a&quot; and |0 - 0| &lt;= 4.\nThus we return [0] as the result.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10</code></li>\n\t<li><code>s</code>, <code>a</code>, and <code>b</code> contain only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 144,
            "dislikes": 29,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.2K\", \"totalSubmission\": \"66.9K\", \"totalAcceptedRaw\": 24234, \"totalSubmissionRaw\": 66927, \"acRate\": \"36.2%\"}",
            "hints": [
                "For each <code>i</code>, you can iterate over all <code>j</code>s and determine if <code>i</code> is beautiful or not."
            ],
            "rephrased": {
                "body": "Given a 0-indexed string `s`, strings `a` and `b`, and an integer `k`, find all beautiful indices in `s`. An index `i` is considered beautiful if: \n\n1.  `0 <= i <= s.length - a.length`\n2.  The substring of `s` starting at `i` with length `a.length` is equal to `a` (i.e., `s[i..(i + a.length - 1)] == a`).\n3.  There exists an index `j` such that: \n    *   `0 <= j <= s.length - b.length`\n    *   The substring of `s` starting at `j` with length `b.length` is equal to `b` (i.e., `s[j..(j + b.length - 1)] == b`).\n    *   The absolute difference between `i` and `j` is less than or equal to `k` (i.e., `|j - i| <= k`).\n\nReturn a sorted array of all beautiful indices in ascending order.",
                "constraints": [
                    "1 <= k <= s.length <= 10^5",
                    "1 <= a.length, b.length <= 10",
                    "s, a, and b contain only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15",
                        "output": "[16,33]",
                        "explanation": "Index 16 is beautiful because s[16..17] == \"my\" and there exists an index 4 where s[4..11] == \"squirrel\", with |16 - 4| <= 15. Similarly, index 33 is beautiful because s[33..34] == \"my\" and there exists an index 18 where s[18..25] == \"squirrel\", with |33 - 18| <= 15."
                    },
                    {
                        "input": "s = \"abcd\", a = \"a\", b = \"a\", k = 4",
                        "output": "[0]",
                        "explanation": "Index 0 is beautiful because s[0..0] == \"a\" and there exists an index 0 where s[0..0] == \"a\", with |0 - 0| <= 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For each <code>i</code>, you can iterate over all <code>j</code>s and determine if <code>i</code> is beautiful or not."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ]
    }
}