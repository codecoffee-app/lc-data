{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2940",
            "title": "Find Building Where Alice and Bob Can Meet",
            "titleSlug": "find-building-where-alice-and-bob-can-meet",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>heights</code> of positive integers, where <code>heights[i]</code> represents the height of the <code>i<sup>th</sup></code> building.</p>\n\n<p>If a person is in building <code>i</code>, they can move to any other building <code>j</code> if and only if <code>i &lt; j</code> and <code>heights[i] &lt; heights[j]</code>.</p>\n\n<p>You are also given another array <code>queries</code> where <code>queries[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>. On the <code>i<sup>th</sup></code> query, Alice is in building <code>a<sub>i</sub></code> while Bob is in building <code>b<sub>i</sub></code>.</p>\n\n<p>Return <em>an array</em> <code>ans</code> <em>where</em> <code>ans[i]</code> <em>is <strong>the index of the leftmost building</strong> where Alice and Bob can meet on the</em> <code>i<sup>th</sup></code> <em>query</em>. <em>If Alice and Bob cannot move to a common building on query</em> <code>i</code>, <em>set</em> <code>ans[i]</code> <em>to</em> <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]\n<strong>Output:</strong> [2,5,-1,5,2]\n<strong>Explanation:</strong> In the first query, Alice and Bob can move to building 2 since heights[0] &lt; heights[2] and heights[1] &lt; heights[2]. \nIn the second query, Alice and Bob can move to building 5 since heights[0] &lt; heights[5] and heights[3] &lt; heights[5]. \nIn the third query, Alice cannot meet Bob since Alice cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 5 since heights[3] &lt; heights[5] and heights[4] &lt; heights[5].\nIn the fifth query, Alice and Bob are already in the same building.  \nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]\n<strong>Output:</strong> [7,6,-1,4,6]\n<strong>Explanation:</strong> In the first query, Alice can directly move to Bob&#39;s building since heights[0] &lt; heights[7].\nIn the second query, Alice and Bob can move to building 6 since heights[3] &lt; heights[6] and heights[5] &lt; heights[6].\nIn the third query, Alice cannot meet Bob since Bob cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 4 since heights[3] &lt; heights[4] and heights[0] &lt; heights[4].\nIn the fifth query, Alice can directly move to Bob&#39;s building since heights[1] &lt; heights[6].\nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= heights.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= heights[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>queries[i] = [a<sub>i</sub>, b<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= heights.length - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 225,
            "dislikes": 4,
            "similarQuestions": "[{\"title\": \"Number of Visible People in a Queue\", \"titleSlug\": \"number-of-visible-people-in-a-queue\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Furthest Building You Can Reach\", \"titleSlug\": \"furthest-building-you-can-reach\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.5K\", \"totalSubmission\": \"18.4K\", \"totalAcceptedRaw\": 6507, \"totalSubmissionRaw\": 18449, \"acRate\": \"35.3%\"}",
            "hints": [
                "For each query <code>[x, y]</code>, if <code>x > y</code>, swap <code>x</code> and <code>y</code>. Now, we can assume that <code>x <= y</code>.",
                "For each query <code>[x, y]</code>, if <code>x == y</code> or <code>heights[x] < heights[y]</code>, then the answer is <code>y</code> since <code>x \u2264 y</code>.",
                "Otherwise, we need to find the smallest index <code>t</code> such that <code>y < t</code> and <code>heights[x] < heights[t]</code>. Note that <code>heights[y] <= heights[x]</code>, so <code>heights[x] < heights[t]</code> is a sufficient condition.",
                "To find index <code>t</code> for each query, sort the queries in descending order of <code>y</code>. Iterate over the queries while maintaining a monotonic stack which we can binary search over to find index <code>t</code>."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `heights` representing building heights, a person in building `i` can move to building `j` if `i < j` and `heights[i] < heights[j]`. You're also given `queries`, where `queries[i] = [a_i, b_i]` represents Alice at building `a_i` and Bob at building `b_i`.  Return an array `ans` where `ans[i]` is the index of the leftmost building where Alice and Bob can meet for the `i`-th query. If they can't meet, set `ans[i]` to -1.",
                "constraints": [
                    "1 <= heights.length <= 5 * 10^4",
                    "1 <= heights[i] <= 10^9",
                    "1 <= queries.length <= 5 * 10^4",
                    "queries[i] = [a_i, b_i]",
                    "0 <= a_i, b_i <= heights.length - 1"
                ],
                "testcases": [
                    {
                        "input": "heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]",
                        "output": "[2,5,-1,5,2]",
                        "explanation": "Query 1: Alice (building 0) and Bob (building 1) can both reach building 2. Query 2: Alice (building 0) and Bob (building 3) can both reach building 5. Query 3: Alice (building 2) cannot move to any building greater than her. Query 4: Alice (building 3) and Bob (building 4) can both reach building 5. Query 5: Alice and Bob are already in the same building (2)."
                    },
                    {
                        "input": "heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]",
                        "output": "[7,6,-1,4,6]",
                        "explanation": "Query 1: Alice (building 0) can move directly to Bob's building (7). Query 2: Alice (building 3) and Bob (building 5) can both reach building 6. Query 3: Bob (building 2) cannot move to any building greater than him. Query 4: Alice (building 3) and Bob (building 0) can both reach building 4. Query 5: Alice (building 1) can move directly to Bob's building (6)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-visible-people-in-a-queue",
                "title": "Number of Visible People in a Queue",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "furthest-building-you-can-reach",
                "title": "Furthest Building You Can Reach",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each query <code>[x, y]</code>, if <code>x > y</code>, swap <code>x</code> and <code>y</code>. Now, we can assume that <code>x <= y</code>.",
            "For each query <code>[x, y]</code>, if <code>x == y</code> or <code>heights[x] < heights[y]</code>, then the answer is <code>y</code> since <code>x \u2264 y</code>.",
            "Otherwise, we need to find the smallest index <code>t</code> such that <code>y < t</code> and <code>heights[x] < heights[t]</code>. Note that <code>heights[y] <= heights[x]</code>, so <code>heights[x] < heights[t]</code> is a sufficient condition.",
            "To find index <code>t</code> for each query, sort the queries in descending order of <code>y</code>. Iterate over the queries while maintaining a monotonic stack which we can binary search over to find index <code>t</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct IndexedQuery {\n  int queryIndex;\n  int a;  // Alice's index\n  int b;  // Bob's index\n};\n\nclass Solution {\n public:\n  // Similar to 2736. Maximum Sum Queries\n  vector<int> leftmostBuildingQueries(vector<int>& heights,\n                                      vector<vector<int>>& queries) {\n    vector<int> ans(queries.size(), -1);\n    // Store indices (heightsIndex) of heights with heights[heightsIndex] in\n    // descending order.\n    vector<int> stack;\n\n    // Iterate through queries and heights simultaneously.\n    int heightsIndex = heights.size() - 1;\n    for (const auto& [queryIndex, a, b] : getIndexedQueries(queries)) {\n      if (a == b || heights[a] < heights[b]) {\n        // 1. Alice and Bob are already in the same index (a == b) or\n        // 2. Alice can jump from a -> b (heights[a] < heights[b]).\n        ans[queryIndex] = b;\n      } else {\n        // Now, a < b and heights[a] >= heights[b].\n        // Gradually add heights with an index > b to the monotonic stack.\n        while (heightsIndex > b) {\n          // heights[heightsIndex] is a better candidate, given that\n          // heightsIndex is smaller than the indices in the stack and\n          // heights[heightsIndex] is larger or equal to the heights mapped in\n          // the stack.\n          while (!stack.empty() &&\n                 heights[stack.back()] <= heights[heightsIndex])\n            stack.pop_back();\n          stack.push_back(heightsIndex--);\n        }\n        // Binary search to find the smallest index j such that j > b and\n        // heights[j] > heights[a], thereby ensuring heights[j] > heights[b].\n        if (const auto it = upper_bound(\n                stack.rbegin(), stack.rend(), a,\n                [&](int a, int b) { return heights[a] < heights[b]; });\n            it != stack.rend())\n          ans[queryIndex] = *it;\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  vector<IndexedQuery> getIndexedQueries(const vector<vector<int>>& queries) {\n    vector<IndexedQuery> indexedQueries;\n    for (int i = 0; i < queries.size(); ++i) {\n      // Make sure that a <= b.\n      const int a = min(queries[i][0], queries[i][1]);\n      const int b = max(queries[i][0], queries[i][1]);\n      indexedQueries.push_back({i, a, b});\n    }\n    ranges::sort(\n        indexedQueries,\n        [](const IndexedQuery& a, const IndexedQuery& b) { return a.b > b.b; });\n    return indexedQueries;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 2736. Maximum Sum Queries\n  public int[] leftmostBuildingQueries(int[] heights, int[][] queries) {\n    IndexedQuery[] indexedQueries = getIndexedQueries(queries);\n    int[] ans = new int[queries.length];\n    Arrays.fill(ans, -1);\n    // Store indices (heightsIndex) of heights with heights[heightsIndex] in\n    // descending order.\n    List<Integer> stack = new ArrayList<>();\n\n    // Iterate through queries and heights simultaneously.\n    int heightsIndex = heights.length - 1;\n    for (IndexedQuery indexedQuery : indexedQueries) {\n      final int queryIndex = indexedQuery.queryIndex;\n      final int a = indexedQuery.a;\n      final int b = indexedQuery.b;\n      if (a == b || heights[a] < heights[b]) {\n        // 1. Alice and Bob are already in the same index (a == b) or\n        // 2. Alice can jump from a -> b (heights[a] < heights[b]).\n        ans[queryIndex] = b;\n      } else {\n        // Now, a < b and heights[a] >= heights[b].\n        // Gradually add heights with an index > b to the monotonic stack.\n        while (heightsIndex > b) {\n          // heights[heightsIndex] is a better candidate, given that\n          // heightsIndex is smaller than the indices in the stack and\n          // heights[heightsIndex] is larger or equal to the heights mapped in\n          // the stack.\n          while (!stack.isEmpty() && heights[stack.get(stack.size() - 1)] <= heights[heightsIndex])\n            stack.remove(stack.size() - 1);\n          stack.add(heightsIndex--);\n        }\n        // Binary search to find the smallest index j such that j > b and\n        // heights[j] > heights[a], thereby ensuring heights[t] > heights[b].\n        final int j = lastGreater(stack, a, heights);\n        if (j != -1)\n          ans[queryIndex] = stack.get(j);\n      }\n    }\n\n    return ans;\n  }\n\n  private record IndexedQuery(int queryIndex, int a, int b){};\n\n  // Returns the last index i in A s.t. heights[A.get(i)] is > heights[target].\n  private int lastGreater(List<Integer> A, int target, int[] heights) {\n    int l = -1;\n    int r = A.size() - 1;\n    while (l < r) {\n      final int m = (l + r + 1) / 2;\n      if (heights[A.get(m)] > heights[target])\n        l = m;\n      else\n        r = m - 1;\n    }\n    return l;\n  }\n\n  private IndexedQuery[] getIndexedQueries(int[][] queries) {\n    IndexedQuery[] indexedQueries = new IndexedQuery[queries.length];\n    for (int i = 0; i < queries.length; ++i) {\n      // Make sure that a <= b.\n      final int a = Math.min(queries[i][0], queries[i][1]);\n      final int b = Math.max(queries[i][0], queries[i][1]);\n      indexedQueries[i] = new IndexedQuery(i, a, b);\n    }\n    Arrays.sort(indexedQueries, (a, b) -> b.b - a.b);\n    return indexedQueries;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class IndexedQuery:\n  def __init__(self, queryIndex: int, a: int, b: int):\n    self.queryIndex = queryIndex\n    self.a = a  # Alice's index\n    self.b = b  # Bob's index\n\n  def __iter__(self):\n    yield self.queryIndex\n    yield self.a\n    yield self.b\n\n\nclass Solution:\n  # Similar to 2736. Maximum Sum Queries\n  def leftmostBuildingQueries(self, heights: List[int], queries: List[List[int]]) -> List[int]:\n    ans = [-1] * len(queries)\n    # Store indices (heightsIndex) of heights with heights[heightsIndex] in\n    # descending order.\n    stack = []\n\n    # Iterate through queries and heights simultaneously.\n    heightsIndex = len(heights) - 1\n    for queryIndex, a, b in sorted([IndexedQuery(i, min(a, b), max(a, b))\n                                    for i, (a, b) in enumerate(queries)],\n                                   key=lambda iq: -iq.b):\n      if a == b or heights[a] < heights[b]:\n        # 1. Alice and Bob are already in the same index (a == b) or\n        # 2. Alice can jump from a -> b (heights[a] < heights[b]).\n        ans[queryIndex] = b\n      else:\n        # Now, a < b and heights[a] >= heights[b].\n        # Gradually add heights with an index > b to the monotonic stack.\n        while heightsIndex > b:\n          # heights[heightsIndex] is a better candidate, given that\n          # heightsIndex is smaller than the indices in the stack and\n          # heights[heightsIndex] is larger or equal to the heights mapped in\n          # the stack.\n          while stack and heights[stack[-1]] <= heights[heightsIndex]:\n            stack.pop()\n          stack.append(heightsIndex)\n          heightsIndex -= 1\n        # Binary search to find the smallest index j such that j > b and\n        # heights[j] > heights[a], thereby ensuring heights[j] > heights[b].\n        j = self._lastGreater(stack, a, heights)\n        if j != -1:\n          ans[queryIndex] = stack[j]\n\n    return ans\n\n  def _lastGreater(self, A: List[int], target: int, heights: List[int]):\n    \"\"\"\n    Returns the last index i in A s.t. heights[A.get(i)] is > heights[target].\n    \"\"\"\n    l = -1\n    r = len(A) - 1\n    while l < r:\n      m = (l + r + 1) // 2\n      if heights[A[m]] > heights[target]:\n        l = m\n      else:\n        r = m - 1\n    return l\n",
                "lang_text": "py"
            }
        }
    }
}