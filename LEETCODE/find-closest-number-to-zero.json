{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2239",
            "title": "Find Closest Number to Zero",
            "titleSlug": "find-closest-number-to-zero",
            "content": "<p>Given an integer array <code>nums</code> of size <code>n</code>, return <em>the number with the value <strong>closest</strong> to </em><code>0</code><em> in </em><code>nums</code>. If there are multiple answers, return <em>the number with the <strong>largest</strong> value</em>.</p>\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-4,-2,1,4,8]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nThe distance from -4 to 0 is |-4| = 4.\nThe distance from -2 to 0 is |-2| = 2.\nThe distance from 1 to 0 is |1| = 1.\nThe distance from 4 to 0 is |4| = 4.\nThe distance from 8 to 0 is |8| = 8.\nThus, the closest number to 0 in the array is 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,-1,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> 1 and -1 are both the closest numbers to 0, so 1 being larger is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 535,
            "dislikes": 32,
            "similarQuestions": "[{\"title\": \"Find K Closest Elements\", \"titleSlug\": \"find-k-closest-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                }
            ],
            "stats": "{\"totalAccepted\": \"50.1K\", \"totalSubmission\": \"112.4K\", \"totalAcceptedRaw\": 50105, \"totalSubmissionRaw\": 112386, \"acRate\": \"44.6%\"}",
            "hints": [
                "Keep track of the number closest to 0 as you iterate through the array.",
                "Ensure that if multiple numbers are closest to 0, you store the one with the largest value."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, find the number within `nums` that is closest to 0. If there are multiple numbers with the same minimum distance to 0, return the largest of those numbers.",
                "constraints": [
                    "1 <= n <= 1000",
                    "-10^5 <= nums[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[-4,-2,1,4,8]",
                        "output": "1",
                        "explanation": "1 is the element closest to 0 in the array."
                    },
                    {
                        "input": "[2,-1,1]",
                        "output": "1",
                        "explanation": "Both 1 and -1 are equally close to 0. Since 1 is larger than -1, the output is 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-k-closest-elements",
                "title": "Find K Closest Elements",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Keep track of the number closest to 0 as you iterate through the array.",
            "Ensure that if multiple numbers are closest to 0, you store the one with the largest value."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findClosestNumber(vector<int>& nums) {\n    return *min_element(nums.begin(), nums.end(), [](const int a, const int b) {\n      return abs(a) == abs(b) ? a > b : abs(a) < abs(b);\n    });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findClosestNumber(int[] nums) {\n    int ans = 0;\n    int min = Integer.MAX_VALUE;\n\n    for (final int num : nums)\n      if (Math.abs(num) < min) {\n        min = Math.abs(num);\n        ans = num;\n      } else if (Math.abs(num) == min && num > ans) {\n        ans = num;\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findClosestNumber(self, nums: List[int]) -> int:\n    nums.sort(key=lambda x: (abs(x), -x))\n    return nums[0]\n",
                "lang_text": "py"
            }
        }
    }
}