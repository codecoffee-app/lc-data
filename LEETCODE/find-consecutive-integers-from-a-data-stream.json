{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2526",
            "title": "Find Consecutive Integers from a Data Stream",
            "titleSlug": "find-consecutive-integers-from-a-data-stream",
            "content": "<p>For a stream of integers, implement a data structure that checks if the last <code>k</code> integers parsed in the stream are <strong>equal</strong> to <code>value</code>.</p>\n\n<p>Implement the <strong>DataStream</strong> class:</p>\n\n<ul>\n\t<li><code>DataStream(int value, int k)</code> Initializes the object with an empty integer stream and the two integers <code>value</code> and <code>k</code>.</li>\n\t<li><code>boolean consec(int num)</code> Adds <code>num</code> to the stream of integers. Returns <code>true</code> if the last <code>k</code> integers are equal to <code>value</code>, and <code>false</code> otherwise. If there are less than <code>k</code> integers, the condition does not hold true, so returns <code>false</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;DataStream&quot;, &quot;consec&quot;, &quot;consec&quot;, &quot;consec&quot;, &quot;consec&quot;]\n[[4, 3], [4], [4], [4], [3]]\n<strong>Output</strong>\n[null, false, false, true, false]\n\n<strong>Explanation</strong>\nDataStream dataStream = new DataStream(4, 3); //value = 4, k = 3 \ndataStream.consec(4); // Only 1 integer is parsed, so returns False. \ndataStream.consec(4); // Only 2 integers are parsed.\n                      // Since 2 is less than k, returns False. \ndataStream.consec(4); // The 3 integers parsed are all equal to value, so returns True. \ndataStream.consec(3); // The last k integers parsed in the stream are [4,4,3].\n                      // Since 3 is not equal to value, it returns False.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= value, num &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li>At most <code>10<sup>5</sup></code> calls will be made to <code>consec</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 261,
            "dislikes": 31,
            "similarQuestions": "[{\"title\": \"Number of Zero-Filled Subarrays\", \"titleSlug\": \"number-of-zero-filled-subarrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                },
                {
                    "name": "Data Stream",
                    "slug": "data-stream"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.9K\", \"totalSubmission\": \"44.1K\", \"totalAcceptedRaw\": 20884, \"totalSubmissionRaw\": 44137, \"acRate\": \"47.3%\"}",
            "hints": [
                "Keep track of the last integer which is not equal to <code>value</code>.",
                "Use a queue-type data structure to store the last <code>k</code> integers."
            ],
            "rephrased": {
                "body": "Design a data structure to process a stream of integers. The data structure should efficiently determine if the last `k` integers received in the stream are all equal to a given `value`.",
                "constraints": [
                    "1 <= value, num <= 10^9",
                    "1 <= k <= 10^5",
                    "At most 10^5 calls will be made to consec."
                ],
                "testcases": [
                    {
                        "input": "[\"DataStream\", \"consec\", \"consec\", \"consec\", \"consec\"] , [[4, 3], [4], [4], [4], [3]]",
                        "output": "[null, false, false, true, false]",
                        "explanation": "Initially, the DataStream is initialized with value=4 and k=3.\n- The first call to consec(4) adds 4 to the stream. Since there's only one integer, and k=3, it returns false.\n- The second call to consec(4) adds another 4. Now there are two integers.  Still less than k, so it returns false.\n- The third call to consec(4) adds a third 4. Now there are three integers, all equal to 4. It returns true.\n- The fourth call to consec(3) adds 3. The last k=3 integers are [4, 4, 3]. Since not all are equal to 4, it returns false."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-zero-filled-subarrays",
                "title": "Number of Zero-Filled Subarrays",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Keep track of the last integer which is not equal to <code>value</code>.",
            "Use a queue-type data structure to store the last <code>k</code> integers."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Counting",
                "slug": "counting"
            },
            {
                "name": "Data Stream",
                "slug": "data-stream"
            }
        ]
    }
}