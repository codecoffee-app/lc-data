{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1489",
            "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
            "titleSlug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
            "content": "<p>Given a weighted undirected connected graph with <code>n</code>&nbsp;vertices numbered from <code>0</code> to <code>n - 1</code>,&nbsp;and an array <code>edges</code>&nbsp;where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]</code> represents a bidirectional and weighted edge between nodes&nbsp;<code>a<sub>i</sub></code>&nbsp;and <code>b<sub>i</sub></code>. A minimum spanning tree (MST) is a subset of the graph&#39;s edges that connects all vertices without cycles&nbsp;and with the minimum possible total edge weight.</p>\n\n<p>Find <em>all the critical and pseudo-critical edges in the given graph&#39;s minimum spanning tree (MST)</em>. An MST edge whose deletion from the graph would cause the MST weight to increase is called a&nbsp;<em>critical edge</em>. On&nbsp;the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.</p>\n\n<p>Note that you can return the indices of the edges in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/04/ex1.png\" style=\"width: 259px; height: 262px;\" /></p>\n\n<pre>\n<strong>Input:</strong> n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]\n<strong>Output:</strong> [[0,1],[2,3,4,5]]\n<strong>Explanation:</strong> The figure above describes the graph.\nThe following figure shows all the possible MSTs:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/04/msts.png\" style=\"width: 540px; height: 553px;\" />\nNotice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.\nThe edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/04/ex2.png\" style=\"width: 247px; height: 253px;\" /></p>\n\n<pre>\n<strong>Input:</strong> n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]\n<strong>Output:</strong> [[],[0,1,2,3]]\n<strong>Explanation:</strong> We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= edges.length &lt;= min(200, n * (n - 1) / 2)</code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt; n</code></li>\n\t<li><code>1 &lt;= weight<sub>i</sub>&nbsp;&lt;= 1000</code></li>\n\t<li>All pairs <code>(a<sub>i</sub>, b<sub>i</sub>)</code> are <strong>distinct</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1777,
            "dislikes": 148,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Minimum Spanning Tree",
                    "slug": "minimum-spanning-tree"
                },
                {
                    "name": "Strongly Connected Component",
                    "slug": "strongly-connected-component"
                }
            ],
            "stats": "{\"totalAccepted\": \"51.1K\", \"totalSubmission\": \"74.3K\", \"totalAcceptedRaw\": 51108, \"totalSubmissionRaw\": 74325, \"acRate\": \"68.8%\"}",
            "hints": [
                "Use the Kruskal algorithm to find the minimum spanning tree by sorting the edges and picking edges from ones with smaller weights.",
                "Use a disjoint set to avoid adding redundant edges that result in a cycle.",
                "To find if one edge is critical, delete that edge and re-run the MST algorithm and see if the weight of the new MST increases.",
                "To find if one edge is non-critical (in any MST), include that edge to the accepted edge list and continue the MST algorithm, then see if the resulting MST has the same weight of the initial MST of the entire graph."
            ],
            "rephrased": {
                "body": "Given a weighted, undirected, and connected graph with `n` vertices (numbered from 0 to `n - 1`) and an array `edges` where `edges[i] = [a_i, b_i, weight_i]` represents a bidirectional edge between nodes `a_i` and `b_i` with weight `weight_i`.  The goal is to find all critical and pseudo-critical edges in the graph's minimum spanning tree (MST).\n\nA *critical edge* is an MST edge whose removal from the graph would increase the MST's weight.\nA *pseudo-critical edge* is an edge that appears in some, but not all, MSTs.",
                "constraints": [
                    "2 <= n <= 100",
                    "1 <= edges.length <= min(200, n * (n - 1) / 2)",
                    "edges[i].length == 3",
                    "0 <= a_i < b_i < n",
                    "1 <= weight_i <= 1000",
                    "All pairs (a_i, b_i) are distinct."
                ],
                "testcases": [
                    {
                        "input": "n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]",
                        "output": "[[0,1],[2,3,4,5]]",
                        "explanation": "Edges 0 and 1 are present in all MSTs, making them critical. Edges 2, 3, 4, and 5 only appear in some MSTs, and are thus pseudo-critical."
                    },
                    {
                        "input": "n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]",
                        "output": "[[],[0,1,2,3]]",
                        "explanation": "Because all edges have the same weight, any combination of three edges forms an MST.  Therefore, all four edges are pseudo-critical, and there are no critical edges."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use the Kruskal algorithm to find the minimum spanning tree by sorting the edges and picking edges from ones with smaller weights.",
            "Use a disjoint set to avoid adding redundant edges that result in a cycle.",
            "To find if one edge is critical, delete that edge and re-run the MST algorithm and see if the weight of the new MST increases.",
            "To find if one edge is non-critical (in any MST), include that edge to the accepted edge list and continue the MST algorithm, then see if the resulting MST has the same weight of the initial MST of the entire graph."
        ],
        "relatedTopics": [
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Minimum Spanning Tree",
                "slug": "minimum-spanning-tree"
            },
            {
                "name": "Strongly Connected Component",
                "slug": "strongly-connected-component"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n};\n\nclass Solution {\n public:\n  vector<vector<int>> findCriticalAndPseudoCriticalEdges(\n      int n, vector<vector<int>>& edges) {\n    vector<int> criticalEdges;\n    vector<int> pseudoCriticalEdges;\n\n    // Record the index information, so edges[i] := (u, v, weight, index).\n    for (int i = 0; i < edges.size(); ++i)\n      edges[i].push_back(i);\n\n    // Sort by weight.\n    sort(\n        edges.begin(), edges.end(),\n        [](const vector<int>& a, const vector<int>& b) { return a[2] < b[2]; });\n\n    const int mstWeight = getMSTWeight(n, edges, {}, -1);\n\n    for (const vector<int>& edge : edges) {\n      const int index = edge[3];\n      // Deleting `e` makes the MST weight increase or can't form a MST.\n      if (getMSTWeight(n, edges, {}, index) > mstWeight)\n        criticalEdges.push_back(index);\n      // If an edge can be in any MST, we can always add `edge` to the edge set.\n      else if (getMSTWeight(n, edges, edge, -1) == mstWeight)\n        pseudoCriticalEdges.push_back(index);\n    }\n\n    return {criticalEdges, pseudoCriticalEdges};\n  }\n\n private:\n  int getMSTWeight(int n, const vector<vector<int>>& edges,\n                   const vector<int>& firstEdge, int deletedEdgeIndex) {\n    int mstWeight = 0;\n    UnionFind uf(n);\n\n    if (!firstEdge.empty()) {\n      uf.unionByRank(firstEdge[0], firstEdge[1]);\n      mstWeight += firstEdge[2];\n    }\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int weight = edge[2];\n      const int index = edge[3];\n      if (index == deletedEdgeIndex)\n        continue;\n      if (uf.find(u) == uf.find(v))\n        continue;\n      uf.unionByRank(u, v);\n      mstWeight += weight;\n    }\n\n    const int root = uf.find(0);\n    for (int i = 0; i < n; ++i)\n      if (uf.find(i) != root)\n        return INT_MAX;\n\n    return mstWeight;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public void unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  public int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n\n  private int[] id;\n  private int[] rank;\n}\n\nclass Solution {\n  public List<List<Integer>> findCriticalAndPseudoCriticalEdges(int n, int[][] edges) {\n    List<Integer> criticalEdges = new ArrayList<>();\n    List<Integer> pseudoCriticalEdges = new ArrayList<>();\n\n    // Record the index information, so edges[i] := (u, v, weight, index).\n    for (int i = 0; i < edges.length; ++i)\n      edges[i] = new int[] {edges[i][0], edges[i][1], edges[i][2], i};\n\n    // Sort by weight.\n    Arrays.sort(edges, (a, b) -> a[2] - b[2]);\n\n    final int mstWeight = getMSTWeight(n, edges, new int[] {}, -1);\n\n    for (int[] edge : edges) {\n      final int index = edge[3];\n      // Deleting `e` makes the MST weight increase or can't form a MST.\n      if (getMSTWeight(n, edges, new int[] {}, index) > mstWeight)\n        criticalEdges.add(index);\n      // If an edge can be in any MST, we can always add `edge` to the edge set.\n      else if (getMSTWeight(n, edges, edge, -1) == mstWeight)\n        pseudoCriticalEdges.add(index);\n    }\n\n    return new ArrayList<>(Arrays.asList(criticalEdges, pseudoCriticalEdges));\n  }\n\n  private int getMSTWeight(int n, int[][] edges, int[] firstEdge, int deletedEdgeIndex) {\n    int mstWeight = 0;\n    UnionFind uf = new UnionFind(n);\n\n    if (firstEdge.length == 4) {\n      uf.unionByRank(firstEdge[0], firstEdge[1]);\n      mstWeight += firstEdge[2];\n    }\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      final int weight = edge[2];\n      final int index = edge[3];\n      if (index == deletedEdgeIndex)\n        continue;\n      if (uf.find(u) == uf.find(v))\n        continue;\n      uf.unionByRank(u, v);\n      mstWeight += weight;\n    }\n\n    final int root = uf.find(0);\n    for (int i = 0; i < n; ++i)\n      if (uf.find(i) != root)\n        return Integer.MAX_VALUE;\n\n    return mstWeight;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def findCriticalAndPseudoCriticalEdges(self, n: int, edges: List[List[int]]) -> List[List[int]]:\n    criticalEdges = []\n    pseudoCriticalEdges = []\n\n    # Record the index information, so edges[i] := (u, v, weight, index).\n    for i in range(len(edges)):\n      edges[i].append(i)\n\n    # Sort by weight.\n    edges.sort(key=lambda x: x[2])\n\n    def getMSTWeight(firstEdge: List[int], deletedEdgeIndex: int) -> Union[int, float]:\n      mstWeight = 0\n      uf = UnionFind(n)\n\n      if firstEdge:\n        uf.unionByRank(firstEdge[0], firstEdge[1])\n        mstWeight += firstEdge[2]\n\n      for u, v, weight, index in edges:\n        if index == deletedEdgeIndex:\n          continue\n        if uf.find(u) == uf.find(v):\n          continue\n        uf.unionByRank(u, v)\n        mstWeight += weight\n\n      root = uf.find(0)\n      if any(uf.find(i) != root for i in range(n)):\n        return math.inf\n\n      return mstWeight\n\n    mstWeight = getMSTWeight([], -1)\n\n    for edge in edges:\n      index = edge[3]\n      # Deleting `e` makes the MST weight increase or can't form a MST.\n      if getMSTWeight([], index) > mstWeight:\n        criticalEdges.append(index)\n      # If an edge can be in any MST, we can always add `edge` to the edge set.\n      elif getMSTWeight(edge, -1) == mstWeight:\n        pseudoCriticalEdges.append(index)\n\n    return [criticalEdges, pseudoCriticalEdges]\n",
                "lang_text": "py"
            }
        }
    }
}