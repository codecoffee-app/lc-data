{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "609",
            "title": "Find Duplicate File in System",
            "titleSlug": "find-duplicate-file-in-system",
            "content": "<p>Given a list <code>paths</code> of directory info, including the directory path, and all the files with contents in this directory, return <em>all the duplicate files in the file system in terms of their paths</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>A group of duplicate files consists of at least two files that have the same content.</p>\n\n<p>A single directory info string in the input list has the following format:</p>\n\n<ul>\n\t<li><code>&quot;root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)&quot;</code></li>\n</ul>\n\n<p>It means there are <code>n</code> files <code>(f1.txt, f2.txt ... fn.txt)</code> with content <code>(f1_content, f2_content ... fn_content)</code> respectively in the directory &quot;<code>root/d1/d2/.../dm&quot;</code>. Note that <code>n &gt;= 1</code> and <code>m &gt;= 0</code>. If <code>m = 0</code>, it means the directory is just the root directory.</p>\n\n<p>The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:</p>\n\n<ul>\n\t<li><code>&quot;directory_path/file_name.txt&quot;</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]\n<strong>Output:</strong> [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]\n<strong>Output:</strong> [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= paths.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= paths[i].length &lt;= 3000</code></li>\n\t<li><code>1 &lt;= sum(paths[i].length) &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>paths[i]</code> consist of English letters, digits, <code>&#39;/&#39;</code>, <code>&#39;.&#39;</code>, <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, and <code>&#39; &#39;</code>.</li>\n\t<li>You may assume no files or directories share the same name in the same directory.</li>\n\t<li>You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Imagine you are given a real file system, how will you search files? DFS or BFS?</li>\n\t<li>If the file content is very large (GB level), how will you modify your solution?</li>\n\t<li>If you can only read the file by 1kb each time, how will you modify your solution?</li>\n\t<li>What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?</li>\n\t<li>How to make sure the duplicated files you find are not false positive?</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1483,
            "dislikes": 1644,
            "similarQuestions": "[{\"title\": \"Delete Duplicate Folders in System\", \"titleSlug\": \"delete-duplicate-folders-in-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"148.8K\", \"totalSubmission\": \"220.1K\", \"totalAcceptedRaw\": 148815, \"totalSubmissionRaw\": 220078, \"acRate\": \"67.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a list of directory info strings `paths`, identify and return all groups of duplicate files in the file system. A group of duplicate files consists of at least two files that have identical content. The output should be a list of lists, where each inner list contains the full paths of files with the same content.\n\nEach directory info string in `paths` follows this format: `\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"`.\n\nThis string indicates that the directory `root/d1/d2/.../dm` contains `n` files: `f1.txt`, `f2.txt`, ..., `fn.txt` with corresponding contents `f1_content`, `f2_content`, ..., `fn_content`. Note that `n >= 1` and `m >= 0`.\n\nA file path should be in the format: `\"directory_path/file_name.txt\"`.",
                "constraints": [
                    "1 <= paths.length <= 2 * 10^4",
                    "1 <= paths[i].length <= 3000",
                    "1 <= sum(paths[i].length) <= 5 * 10^5",
                    "paths[i] consist of English letters, digits, '/', '.', '(', ')', and ' '.",
                    "No files or directories share the same name in the same directory.",
                    "Each given directory info represents a unique directory. A single blank space separates the directory path and file info."
                ],
                "testcases": [
                    {
                        "input": "[\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]",
                        "output": "[[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]",
                        "explanation": null
                    },
                    {
                        "input": "[\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]",
                        "output": "[[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "delete-duplicate-folders-in-system",
                "title": "Delete Duplicate Folders in System",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<string>> findDuplicate(vector<string>& paths) {\n    vector<vector<string>> ans;\n    unordered_map<string, vector<string>> contentToFilePaths;\n\n    for (const string& path : paths) {\n      istringstream iss(path);\n      string rootPath;\n      iss >> rootPath;  // \"root/d1/d2/.../dm\"\n\n      string fileAndContent;\n      while (iss >> fileAndContent) {  // \"fn.txt(fn_content)\"\n        const int l = fileAndContent.find('(');\n        const int r = fileAndContent.find(')');\n        // \"fn.txt\"\n        const string file = fileAndContent.substr(0, l);\n        // \"fn_content\"\n        const string content = fileAndContent.substr(l + 1, r - l - 1);\n        // \"root/d1/d2/.../dm/fn.txt\"\n        const string filePath = rootPath + '/' + file;\n        contentToFilePaths[content].push_back(filePath);\n      }\n    }\n\n    for (const auto& [_, filePaths] : contentToFilePaths)\n      if (filePaths.size() > 1)\n        ans.push_back(filePaths);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<String>> findDuplicate(String[] paths) {\n    List<List<String>> ans = new ArrayList<>();\n    Map<String, List<String>> contentToFilePaths = new HashMap<>();\n\n    for (final String path : paths) {\n      final String[] words = path.split(\" \");\n      final String rootPath = words[0]; // \"root/d1/d2/.../dm\"\n      for (int i = 1; i < words.length; ++i) {\n        final String fileAndContent = words[i]; // \"fn.txt(fn_content)\"\n        final int l = fileAndContent.indexOf('(');\n        final int r = fileAndContent.indexOf(')');\n        // \"fn.txt\"\n        final String file = fileAndContent.substring(0, l);\n        // \"fn_content\"\n        final String content = fileAndContent.substring(l + 1, r);\n        // \"root/d1/d2/.../dm/fn.txt\"\n        final String filePath = rootPath + '/' + file;\n        contentToFilePaths.putIfAbsent(content, new ArrayList<>());\n        contentToFilePaths.get(content).add(filePath);\n      }\n    }\n\n    for (List<String> filePaths : contentToFilePaths.values())\n      if (filePaths.size() > 1)\n        ans.add(filePaths);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findDuplicate(self, paths: List[str]) -> List[List[str]]:\n    contentToPathFiles = collections.defaultdict(list)\n\n    for path in paths:\n      words = path.split(' ')\n      rootPath = words[0]  # \"root/d1/d2/.../dm\"\n      for fileAndContent in words[1:]:  # \"fn.txt(fn_content)\"\n        l = fileAndContent.find('(')\n        r = fileAndContent.find(')')\n        # \"fn.txt\"\n        file = fileAndContent[:l]\n        # \"fn_content\"\n        content = fileAndContent[l + 1:r]\n        # \"root/d1/d2/.../dm/fn.txt\"\n        filePath = rootPath + '/' + file\n        contentToPathFiles[content].append(filePath)\n\n    return [filePath for filePath in contentToPathFiles.values() if len(filePath) > 1]\n",
                "lang_text": "py"
            }
        }
    }
}