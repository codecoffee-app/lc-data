{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "652",
            "title": "Find Duplicate Subtrees",
            "titleSlug": "find-duplicate-subtrees",
            "content": "<p>Given the <code>root</code>&nbsp;of a binary tree, return all <strong>duplicate subtrees</strong>.</p>\n\n<p>For each kind of duplicate subtrees, you only need to return the root node of any <b>one</b> of them.</p>\n\n<p>Two trees are <strong>duplicate</strong> if they have the <strong>same structure</strong> with the <strong>same node values</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/16/e1.jpg\" style=\"width: 450px; height: 354px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,null,2,4,null,null,4]\n<strong>Output:</strong> [[2,4],[4]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/16/e2.jpg\" style=\"width: 321px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,1]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/16/e33.jpg\" style=\"width: 450px; height: 303px;\" />\n<pre>\n<strong>Input:</strong> root = [2,2,2,3,null,3,null]\n<strong>Output:</strong> [[2,3],[3]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the tree will be in the range <code>[1, 5000]</code></li>\n\t<li><code>-200 &lt;= Node.val &lt;= 200</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5663,
            "dislikes": 448,
            "similarQuestions": "[{\"title\": \"Serialize and Deserialize Binary Tree\", \"titleSlug\": \"serialize-and-deserialize-binary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Serialize and Deserialize BST\", \"titleSlug\": \"serialize-and-deserialize-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Construct String from Binary Tree\", \"titleSlug\": \"construct-string-from-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Delete Duplicate Folders in System\", \"titleSlug\": \"delete-duplicate-folders-in-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"250.1K\", \"totalSubmission\": \"422.1K\", \"totalAcceptedRaw\": 250120, \"totalSubmissionRaw\": 422091, \"acRate\": \"59.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, identify and return all the unique duplicate subtrees within the tree. For each distinct kind of duplicate subtree, return the root node of any one instance of that subtree.\n\nTwo trees are considered duplicates if they possess the same structure and identical node values.",
                "constraints": [
                    "The number of nodes in the tree will be in the range [1, 5000]",
                    "Node values will be within the range -200 <= Node.val <= 200"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4,null,2,4,null,null,4]",
                        "output": "[[2,4],[4]]",
                        "explanation": "The subtrees rooted at the two nodes with value 2 are duplicates, as are the subtrees rooted at the nodes with value 4. The output returns the root nodes of these duplicates."
                    },
                    {
                        "input": "[2,1,1]",
                        "output": "[[1]]",
                        "explanation": "The two subtrees with root value 1 are duplicates. The output returns the root node of one of them."
                    },
                    {
                        "input": "[2,2,2,3,null,3,null]",
                        "output": "[[2,3],[3]]",
                        "explanation": "The subtrees rooted at the two nodes with value 2 (that have children) are duplicates. Also, the two subtrees rooted at the nodes with value 3 are duplicates. The output returns root nodes of these duplicates."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "serialize-and-deserialize-binary-tree",
                "title": "Serialize and Deserialize Binary Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "serialize-and-deserialize-bst",
                "title": "Serialize and Deserialize BST",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "construct-string-from-binary-tree",
                "title": "Construct String from Binary Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "delete-duplicate-folders-in-system",
                "title": "Delete Duplicate Folders in System",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ]
    }
}