{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3123",
            "title": "Find Edges in Shortest Paths",
            "titleSlug": "find-edges-in-shortest-paths",
            "content": "<p>You are given an undirected weighted graph of <code>n</code> nodes numbered from 0 to <code>n - 1</code>. The graph consists of <code>m</code> edges represented by a 2D array <code>edges</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, w<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> with weight <code>w<sub>i</sub></code>.</p>\n\n<p>Consider all the shortest paths from node 0 to node <code>n - 1</code> in the graph. You need to find a <strong>boolean</strong> array <code>answer</code> where <code>answer[i]</code> is <code>true</code> if the edge <code>edges[i]</code> is part of <strong>at least</strong> one shortest path. Otherwise, <code>answer[i]</code> is <code>false</code>.</p>\n\n<p>Return the array <code>answer</code>.</p>\n\n<p><strong>Note</strong> that the graph may not be connected.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/05/graph35drawio-1.png\" style=\"height: 129px; width: 250px;\" />\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 6, edges = [[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[true,true,true,false,true,true,true,false]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The following are <strong>all</strong> the shortest paths between nodes 0 and 5:</p>\n\n<ul>\n\t<li>The path <code>0 -&gt; 1 -&gt; 5</code>: The sum of weights is <code>4 + 1 = 5</code>.</li>\n\t<li>The path <code>0 -&gt; 2 -&gt; 3 -&gt; 5</code>: The sum of weights is <code>1 + 1 + 3 = 5</code>.</li>\n\t<li>The path <code>0 -&gt; 2 -&gt; 3 -&gt; 1 -&gt; 5</code>: The sum of weights is <code>1 + 1 + 2 + 1 = 5</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/05/graphhhh.png\" style=\"width: 185px; height: 136px;\" />\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, edges = [[2,0,1],[0,1,1],[0,3,4],[3,2,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[true,false,false,true]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is one shortest path between nodes 0 and 3, which is the path <code>0 -&gt; 2 -&gt; 3</code> with the sum of weights <code>1 + 2 = 3</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>m == edges.length</code></li>\n\t<li><code>1 &lt;= m &lt;= min(5 * 10<sup>4</sup>, n * (n - 1) / 2)</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>1 &lt;= w<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li>There are no repeated edges.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 203,
            "dislikes": 5,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.4K\", \"totalSubmission\": \"20.6K\", \"totalAcceptedRaw\": 10395, \"totalSubmissionRaw\": 20568, \"acRate\": \"50.5%\"}",
            "hints": [
                "Find all the shortest paths starting from nodes 0 and <code>n - 1</code> to all other nodes.",
                "How to use the above calculated shortest paths to check if an edge is part of at least one shortest path from 0 to <code>n - 1</code>?"
            ],
            "rephrased": {
                "body": "Given an undirected weighted graph with 'n' nodes (0 to n-1) and 'm' edges, represented by the 'edges' array where edges[i] = [ai, bi, wi] denotes an edge between nodes ai and bi with weight wi.  Determine which edges are part of at least one shortest path from node 0 to node n-1. Return a boolean array 'answer' where answer[i] is true if edges[i] belongs to at least one shortest path, otherwise false. Note that the graph may not be connected.",
                "constraints": [
                    "2 <= n <= 5 * 10^4",
                    "m == edges.length",
                    "1 <= m <= min(5 * 10^4, n * (n - 1) / 2)",
                    "0 <= ai, bi < n",
                    "ai != bi",
                    "1 <= wi <= 10^5",
                    "There are no repeated edges."
                ],
                "testcases": [
                    {
                        "input": "n = 6, edges = [[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]",
                        "output": "[true,true,true,false,true,true,true,false]",
                        "explanation": "The shortest paths between nodes 0 and 5 have a total weight of 5. These paths are:\n- 0 -> 1 -> 5\n- 0 -> 2 -> 3 -> 5\n- 0 -> 2 -> 3 -> 1 -> 5\nThe boolean array indicates which edges are part of at least one of these shortest paths."
                    },
                    {
                        "input": "n = 4, edges = [[2,0,1],[0,1,1],[0,3,4],[3,2,2]]",
                        "output": "[true,false,false,true]",
                        "explanation": "The shortest path between nodes 0 and 3 is 0 -> 2 -> 3 with a total weight of 3.  Only the edges [2,0,1] and [3,2,2] are part of this path."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Find all the shortest paths starting from nodes 0 and <code>n - 1</code> to all other nodes.",
            "How to use the above calculated shortest paths to check if an edge is part of at least one shortest path from 0 to <code>n - 1</code>?"
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Similar to 2203. Minimum Weighted Subgraph With the Required Paths\n  vector<bool> findAnswer(int n, vector<vector<int>>& edges) {\n    vector<bool> ans;\n    vector<vector<pair<int, int>>> graph(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int w = edge[2];\n      graph[u].emplace_back(v, w);\n      graph[v].emplace_back(u, w);\n    }\n\n    const vector<int> from0 = dijkstra(graph, 0);\n    const vector<int> from1 = dijkstra(graph, n - 1);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int w = edge[2];\n      ans.push_back(from0[u] + w + from1[v] == from0[n - 1] ||\n                    from0[v] + w + from1[u] == from0[n - 1]);\n    }\n\n    return ans;\n  }\n\n private:\n  static constexpr int kMax = 1'000'000'000;\n\n  vector<int> dijkstra(const vector<vector<pair<int, int>>>& graph, int src) {\n    vector<int> dist(graph.size(), kMax);\n    using P = pair<int, int>;  // (d, u)\n    priority_queue<P, vector<P>, greater<>> minHeap;\n\n    dist[src] = 0;\n    minHeap.emplace(dist[src], src);\n\n    while (!minHeap.empty()) {\n      const auto [d, u] = minHeap.top();\n      minHeap.pop();\n      if (d > dist[u])\n        continue;\n      for (const auto& [v, w] : graph[u])\n        if (d + w < dist[v]) {\n          dist[v] = d + w;\n          minHeap.emplace(dist[v], v);\n        }\n    }\n\n    return dist;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 2203. Minimum Weighted Subgraph With the Required Paths\n  public boolean[] findAnswer(int n, int[][] edges) {\n    boolean[] ans = new boolean[edges.length];\n    List<Pair<Integer, Integer>>[] graph = new List[n];\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      final int w = edge[2];\n      graph[u].add(new Pair<>(v, w));\n      graph[v].add(new Pair<>(u, w));\n    }\n\n    int[] from0 = dijkstra(graph, 0);\n    int[] from1 = dijkstra(graph, n - 1);\n\n    for (int i = 0; i < edges.length; ++i) {\n      final int u = edges[i][0];\n      final int v = edges[i][1];\n      final int w = edges[i][2];\n      ans[i] = from0[u] + w + from1[v] == from0[n - 1] || //\n               from0[v] + w + from1[u] == from0[n - 1];\n    }\n\n    return ans;\n  }\n\n  private static int kMax = 1_000_000_000;\n\n  private int[] dijkstra(List<Pair<Integer, Integer>>[] graph, int src) {\n    int[] dist = new int[graph.length];\n    Arrays.fill(dist, kMax);\n    // (d, u)\n    Queue<Pair<Integer, Integer>> minHeap = new PriorityQueue<>(Comparator.comparing(Pair::getKey));\n\n    dist[src] = 0;\n    minHeap.offer(new Pair<>(dist[src], src));\n\n    while (!minHeap.isEmpty()) {\n      final int d = minHeap.peek().getKey();\n      final int u = minHeap.poll().getValue();\n      if (d > dist[u])\n        continue;\n      for (Pair<Integer, Integer> pair : graph[u]) {\n        final int v = pair.getKey();\n        final int w = pair.getValue();\n        if (d + w < dist[v]) {\n          dist[v] = d + w;\n          minHeap.offer(new Pair<>(dist[v], v));\n        }\n      }\n    }\n\n    return dist;\n  }\n};\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Similar to 2203. Minimum Weighted Subgraph With the Required Paths\n  def findAnswer(self, n: int, edges: List[List[int]]) -> List[bool]:\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      graph[u].append((v, w))\n      graph[v].append((u, w))\n\n    from0 = self._dijkstra(graph, 0)\n    from1 = self._dijkstra(graph, n - 1)\n    return [from0[u] + w + from1[v] == from0[-1] or\n            from0[v] + w + from1[u] == from0[-1]\n            for u, v, w in edges]\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int) -> List[int]:\n    dist = [10**9] * len(graph)\n\n    dist[src] = 0\n    minHeap = [(dist[src], src)]  # (d, u)\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if d > dist[u]:\n        continue\n      for v, w in graph[u]:\n        if d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (dist[v], v))\n\n    return dist\n",
                "lang_text": "py"
            }
        }
    }
}