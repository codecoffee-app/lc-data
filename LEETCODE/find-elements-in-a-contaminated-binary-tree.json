{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1261",
            "title": "Find Elements in a Contaminated Binary Tree",
            "titleSlug": "find-elements-in-a-contaminated-binary-tree",
            "content": "<p>Given a binary tree with the following rules:</p>\n\n<ol>\n\t<li><code>root.val == 0</code></li>\n\t<li>If <code>treeNode.val == x</code> and <code>treeNode.left != null</code>, then <code>treeNode.left.val == 2 * x + 1</code></li>\n\t<li>If <code>treeNode.val == x</code> and <code>treeNode.right != null</code>, then <code>treeNode.right.val == 2 * x + 2</code></li>\n</ol>\n\n<p>Now the binary tree is contaminated, which means all <code>treeNode.val</code> have been changed to <code>-1</code>.</p>\n\n<p>Implement the <code>FindElements</code> class:</p>\n\n<ul>\n\t<li><code>FindElements(TreeNode* root)</code> Initializes the object with a contaminated binary tree and recovers it.</li>\n\t<li><code>bool find(int target)</code> Returns <code>true</code> if the <code>target</code> value exists in the recovered binary tree.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/06/untitled-diagram-4-1.jpg\" style=\"width: 320px; height: 119px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;]\n[[[-1,null,-1]],[1],[2]]\n<strong>Output</strong>\n[null,false,true]\n<strong>Explanation</strong>\nFindElements findElements = new FindElements([-1,null,-1]); \nfindElements.find(1); // return False \nfindElements.find(2); // return True </pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/06/untitled-diagram-4.jpg\" style=\"width: 400px; height: 198px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]\n[[[-1,-1,-1,-1,-1]],[1],[3],[5]]\n<strong>Output</strong>\n[null,true,true,false]\n<strong>Explanation</strong>\nFindElements findElements = new FindElements([-1,-1,-1,-1,-1]);\nfindElements.find(1); // return True\nfindElements.find(3); // return True\nfindElements.find(5); // return False</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/07/untitled-diagram-4-1-1.jpg\" style=\"width: 306px; height: 274px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]\n[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]\n<strong>Output</strong>\n[null,true,false,false,true]\n<strong>Explanation</strong>\nFindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);\nfindElements.find(2); // return True\nfindElements.find(3); // return False\nfindElements.find(4); // return False\nfindElements.find(5); // return True\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>TreeNode.val == -1</code></li>\n\t<li>The height of the binary tree is less than or equal to <code>20</code></li>\n\t<li>The total number of nodes is between <code>[1, 10<sup>4</sup>]</code></li>\n\t<li>Total calls of <code>find()</code> is between <code>[1, 10<sup>4</sup>]</code></li>\n\t<li><code>0 &lt;= target &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 945,
            "dislikes": 92,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"60.7K\", \"totalSubmission\": \"79K\", \"totalAcceptedRaw\": 60723, \"totalSubmissionRaw\": 79020, \"acRate\": \"76.8%\"}",
            "hints": [
                "Use DFS to traverse the binary tree and recover it.",
                "Use a hashset to store TreeNode.val for finding."
            ],
            "rephrased": {
                "body": "Given a contaminated binary tree where all node values are initially -1, recover the tree and implement a find operation.\n\nThe binary tree follows these rules:\n\n1.  The root node's value is 0.\n2.  If a node's value is x, its left child's value is 2 * x + 1 (if it exists).\n3.  If a node's value is x, its right child's value is 2 * x + 2 (if it exists).\n\nImplement the `FindElements` class:\n\n*   `FindElements(TreeNode* root)`: Initializes the object with the contaminated tree and recovers it.\n*   `bool find(int target)`: Returns `true` if the `target` value exists in the recovered tree, `false` otherwise.",
                "constraints": [
                    "TreeNode.val == -1",
                    "The height of the binary tree is less than or equal to 20",
                    "The total number of nodes is between [1, 10<sup>4</sup>]",
                    "Total calls of find() is between [1, 10<sup>4</sup>]",
                    "0 <= target <= 10<sup>6</sup>"
                ],
                "testcases": [
                    {
                        "input": "[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;]\n[[[-1,null,-1]],[1],[2]]",
                        "output": "[null,false,true]",
                        "explanation": "First, the tree is recovered. Then, find(1) returns false because 1 is not in the recovered tree. find(2) returns true because 2 is in the recovered tree."
                    },
                    {
                        "input": "[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]\n[[[-1,-1,-1,-1,-1]],[1],[3],[5]]",
                        "output": "[null,true,true,false]",
                        "explanation": "First, the tree is recovered. Then, find(1) returns true because 1 is in the recovered tree. find(3) returns true because 3 is in the recovered tree. find(5) returns false because 5 is not in the recovered tree."
                    },
                    {
                        "input": "[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]\n[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]",
                        "output": "[null,true,false,false,true]",
                        "explanation": "First, the tree is recovered. Then, find(2) returns true because 2 is in the recovered tree. find(3) returns false because 3 is not in the recovered tree. find(4) returns false because 4 is not in the recovered tree. find(5) returns true because 5 is in the recovered tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use DFS to traverse the binary tree and recover it.",
            "Use a hashset to store TreeNode.val for finding."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ]
    }
}