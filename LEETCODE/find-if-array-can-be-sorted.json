{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3011",
            "title": "Find if Array Can Be Sorted",
            "titleSlug": "find-if-array-can-be-sorted",
            "content": "<p>You are given a <strong>0-indexed</strong> array of <strong>positive</strong> integers <code>nums</code>.</p>\n\n<p>In one <strong>operation</strong>, you can swap any two <strong>adjacent</strong> elements if they have the <strong>same</strong> number of <span data-keyword=\"set-bit\">set bits</span>. You are allowed to do this operation <strong>any</strong> number of times (<strong>including zero</strong>).</p>\n\n<p>Return <code>true</code> <em>if you can sort the array, else return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [8,4,2,30,15]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Let&#39;s look at the binary representation of every element. The numbers 2, 4, and 8 have one set bit each with binary representation &quot;10&quot;, &quot;100&quot;, and &quot;1000&quot; respectively. The numbers 15 and 30 have four set bits each with binary representation &quot;1111&quot; and &quot;11110&quot;.\nWe can sort the array using 4 operations:\n- Swap nums[0] with nums[1]. This operation is valid because 8 and 4 have one set bit each. The array becomes [4,8,2,30,15].\n- Swap nums[1] with nums[2]. This operation is valid because 8 and 2 have one set bit each. The array becomes [4,2,8,30,15].\n- Swap nums[0] with nums[1]. This operation is valid because 4 and 2 have one set bit each. The array becomes [2,4,8,30,15].\n- Swap nums[3] with nums[4]. This operation is valid because 30 and 15 have four set bits each. The array becomes [2,4,8,15,30].\nThe array has become sorted, hence we return true.\nNote that there may be other sequences of operations which also sort the array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The array is already sorted, hence we return true.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,16,8,4,2]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It can be shown that it is not possible to sort the input array using any number of operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 2<sup>8</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 108,
            "dislikes": 12,
            "similarQuestions": "[{\"title\": \"Sort Integers by The Number of 1 Bits\", \"titleSlug\": \"sort-integers-by-the-number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.1K\", \"totalSubmission\": \"43.1K\", \"totalAcceptedRaw\": 22072, \"totalSubmissionRaw\": 43093, \"acRate\": \"51.2%\"}",
            "hints": [
                "Split the array into segments. Each segment contains consecutive elements with the same number of set bits.",
                "From left to right, the previous segment\u2019s largest element should be smaller than the current segment\u2019s smallest element."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array of positive integers `nums`, determine if it can be sorted by swapping adjacent elements that have the same number of set bits. You are allowed to perform this operation any number of times.",
                "constraints": [
                    "1 <= nums.length <= 100",
                    "1 <= nums[i] <= 2<sup>8</sup>"
                ],
                "testcases": [
                    {
                        "input": "[8,4,2,30,15]",
                        "output": "true",
                        "explanation": "The array can be sorted to [2, 4, 8, 15, 30] by swapping adjacent elements with the same number of set bits. For example, 8 and 4 both have one set bit, so they can be swapped."
                    },
                    {
                        "input": "[1,2,3,4,5]",
                        "output": "true",
                        "explanation": "The array is already sorted."
                    },
                    {
                        "input": "[3,16,8,4,2]",
                        "output": "false",
                        "explanation": "It is not possible to sort the array using the allowed operations."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "sort-integers-by-the-number-of-1-bits",
                "title": "Sort Integers by The Number of 1 Bits",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Split the array into segments. Each segment contains consecutive elements with the same number of set bits.",
            "From left to right, the previous segment\u2019s largest element should be smaller than the current segment\u2019s smallest element."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canSortArray(vector<int>& nums) {\n    // Divide the array into distinct segments where each segment is comprised\n    // of consecutive elements sharing an equal number of set bits. Ensure that\n    // for each segment, when moving from left to right, the maximum of a\n    // preceding segment is less than the minimum of the following segment.\n    int prevSetBits = 0;\n    int prevMax = INT_MIN;  // the maximum of the previous segment\n    int currMax = INT_MIN;  // the maximum of the current segment\n    int currMin = INT_MAX;  // the minimum of the current segment\n\n    for (const int num : nums) {\n      const int setBits = __builtin_popcount(num);\n      if (setBits != prevSetBits) {  // Start a new segment.\n        if (prevMax > currMin)\n          return false;\n        prevSetBits = setBits;\n        prevMax = currMax;\n        currMax = num;\n        currMin = num;\n      } else {  // Continue with the current segment.\n        currMax = max(currMax, num);\n        currMin = min(currMin, num);\n      }\n    }\n\n    return prevMax <= currMin;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canSortArray(int[] nums) {\n    // Divide the array into distinct segments where each segment is comprised\n    // of consecutive elements sharing an equal number of set bits. Ensure that\n    // for each segment, when moving from left to right, the maximum of a\n    // preceding segment is less than the minimum of the following segment.\n    int prevSetBits = 0;\n    int prevMax = Integer.MIN_VALUE; // the maximum of the previous segment\n    int currMax = Integer.MIN_VALUE; // the maximum of the current segment\n    int currMin = Integer.MAX_VALUE; // the minimum of the current segment\n\n    for (final int num : nums) {\n      final int setBits = Integer.bitCount(num);\n      if (setBits != prevSetBits) { // Start a new segment.\n        if (prevMax > currMin)\n          return false;\n        prevSetBits = setBits;\n        prevMax = currMax;\n        currMax = num;\n        currMin = num;\n      } else { // Continue with the current segment.\n        currMax = Math.max(currMax, num);\n        currMin = Math.min(currMin, num);\n      }\n    }\n\n    return prevMax <= currMin;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canSortArray(self, nums: List[int]) -> int:\n    # Divide the array into distinct segments where each segment is comprised\n    # of consecutive elements sharing an equal number of set bits. Ensure that\n    # for each segment, when moving from left to right, the maximum of a\n    # preceding segment is less than the minimum of the following segment.\n    prevSetBits = 0\n    prevMax = -math.inf  # the maximum of the previous segment\n    currMax = -math.inf  # the maximum of the current segment\n    currMin = math.inf   # the minimum of the current segment\n\n    for num in nums:\n      setBits = num.bit_count()\n      if setBits != prevSetBits:  # Start a new segment.\n        if prevMax > currMin:\n          return False\n        prevSetBits = setBits\n        prevMax = currMax\n        currMax = num\n        currMin = num\n      else:  # Continue with the current segment.\n        currMax = max(currMax, num)\n        currMin = min(currMin, num)\n\n    return prevMax <= currMin\n",
                "lang_text": "py"
            }
        }
    }
}