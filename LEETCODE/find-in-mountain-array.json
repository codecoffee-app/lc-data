{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1095",
            "title": "Find in Mountain Array",
            "titleSlug": "find-in-mountain-array",
            "content": "<p><em>(This problem is an <strong>interactive problem</strong>.)</em></p>\n\n<p>You may recall that an array <code>arr</code> is a <strong>mountain array</strong> if and only if:</p>\n\n<ul>\n\t<li><code>arr.length &gt;= 3</code></li>\n\t<li>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:\n\t<ul>\n\t\t<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li>\n\t\t<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Given a mountain array <code>mountainArr</code>, return the <strong>minimum</strong> <code>index</code> such that <code>mountainArr.get(index) == target</code>. If such an <code>index</code> does not exist, return <code>-1</code>.</p>\n\n<p><strong>You cannot access the mountain array directly.</strong> You may only access the array using a <code>MountainArray</code> interface:</p>\n\n<ul>\n\t<li><code>MountainArray.get(k)</code> returns the element of the array at index <code>k</code> (0-indexed).</li>\n\t<li><code>MountainArray.length()</code> returns the length of the array.</li>\n</ul>\n\n<p>Submissions making more than <code>100</code> calls to <code>MountainArray.get</code> will be judged <em>Wrong Answer</em>. Also, any solutions that attempt to circumvent the judge will result in disqualification.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> array = [1,2,3,4,5,3,1], target = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> array = [0,1,2,4,2,1], target = 3\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> 3 does not exist in <code>the array,</code> so we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= mountain_arr.length() &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= mountain_arr.get(index) &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3099,
            "dislikes": 126,
            "similarQuestions": "[{\"title\": \"Peak Index in a Mountain Array\", \"titleSlug\": \"peak-index-in-a-mountain-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Removals to Make Mountain Array\", \"titleSlug\": \"minimum-number-of-removals-to-make-mountain-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Good Days to Rob the Bank\", \"titleSlug\": \"find-good-days-to-rob-the-bank\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Interactive",
                    "slug": "interactive"
                }
            ],
            "stats": "{\"totalAccepted\": \"129.7K\", \"totalSubmission\": \"318.8K\", \"totalAcceptedRaw\": 129682, \"totalSubmissionRaw\": 318814, \"acRate\": \"40.7%\"}",
            "hints": [
                "Based on whether A[i-1] < A[i] < A[i+1], A[i-1] < A[i] > A[i+1], or A[i-1] > A[i] > A[i+1], we are either at the left side, peak, or right side of the mountain.  We can binary search to find the peak.\r\nAfter finding the peak, we can binary search two more times to find whether the value occurs on either side of the peak."
            ],
            "rephrased": {
                "body": "You are given a mountain array `mountainArr`. A mountain array is defined as an array with at least 3 elements, where there exists an index `i` (0 < i < arr.length - 1) such that the array increases strictly until index `i` and then decreases strictly after index `i`. Your task is to find the minimum index in the `mountainArr` where `mountainArr.get(index)` equals the given `target`. You cannot directly access the array. You must use the `MountainArray` interface, which provides the methods `get(k)` to retrieve the element at index `k` and `length()` to get the length of the array.  Return -1 if the target is not found.",
                "constraints": [
                    "3 <= mountain_arr.length() <= 10^4",
                    "0 <= target <= 10^9",
                    "0 <= mountain_arr.get(index) <= 10^9",
                    "You can make at most 100 calls to MountainArray.get()."
                ],
                "testcases": [
                    {
                        "input": "array = [1,2,3,4,5,3,1], target = 3",
                        "output": "2",
                        "explanation": "The target 3 exists at indices 2 and 5. The minimum index is 2."
                    },
                    {
                        "input": "array = [0,1,2,4,2,1], target = 3",
                        "output": "-1",
                        "explanation": "The target 3 does not exist in the array."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "peak-index-in-a-mountain-array",
                "title": "Peak Index in a Mountain Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-removals-to-make-mountain-array",
                "title": "Minimum Number of Removals to Make Mountain Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-good-days-to-rob-the-bank",
                "title": "Find Good Days to Rob the Bank",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Based on whether A[i-1] < A[i] < A[i+1], A[i-1] < A[i] > A[i+1], or A[i-1] > A[i] > A[i+1], we are either at the left side, peak, or right side of the mountain.  We can binary search to find the peak.\r\nAfter finding the peak, we can binary search two more times to find whether the value occurs on either side of the peak."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Interactive",
                "slug": "interactive"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "/**\n * // This is the MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * class MountainArray {\n *  public:\n *   int get(int index);\n *   int length();\n * };\n */\n\nclass Solution {\n public:\n  int findInMountainArray(int target, MountainArray& mountainArr) {\n    const int n = mountainArr.length();\n    const int peakIndex = peakIndexInMountainArray(mountainArr, 0, n - 1);\n\n    const int leftIndex = searchLeft(mountainArr, target, 0, peakIndex);\n    if (mountainArr.get(leftIndex) == target)\n      return leftIndex;\n\n    const int rightIndex =\n        searchRight(mountainArr, target, peakIndex + 1, n - 1);\n    if (mountainArr.get(rightIndex) == target)\n      return rightIndex;\n\n    return -1;\n  }\n\n private:\n  // 852. Peak Index in a Mountain Array\n  int peakIndexInMountainArray(MountainArray& A, int l, int r) {\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (A.get(m) < A.get(m + 1))\n        l = m + 1;\n      else\n        r = m;\n    }\n    return l;\n  }\n\n  int searchLeft(MountainArray& A, int target, int l, int r) {\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (A.get(m) < target)\n        l = m + 1;\n      else\n        r = m;\n    }\n    return l;\n  }\n\n  int searchRight(MountainArray& A, int target, int l, int r) {\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (A.get(m) > target)\n        l = m + 1;\n      else\n        r = m;\n    }\n    return l;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "/**\n * // This is MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface MountainArray {\n *   public int get(int index) {}\n *   public int length() {}\n * }\n */\n\nclass Solution {\n  public int findInMountainArray(int target, MountainArray mountainArr) {\n    final int n = mountainArr.length();\n    final int peakIndex = peakIndexInMountainArray(mountainArr, 0, n - 1);\n\n    final int leftIndex = searchLeft(mountainArr, target, 0, peakIndex);\n    if (mountainArr.get(leftIndex) == target)\n      return leftIndex;\n\n    final int rightIndex = searchRight(mountainArr, target, peakIndex + 1, n - 1);\n    if (mountainArr.get(rightIndex) == target)\n      return rightIndex;\n\n    return -1;\n  }\n\n  // 852. Peak Index in a Mountain Array\n  private int peakIndexInMountainArray(MountainArray A, int l, int r) {\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) < A.get(m + 1))\n        l = m + 1;\n      else\n        r = m;\n    }\n    return l;\n  }\n\n  private int searchLeft(MountainArray A, int target, int l, int r) {\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) < target)\n        l = m + 1;\n      else\n        r = m;\n    }\n    return l;\n  }\n\n  private int searchRight(MountainArray A, int target, int l, int r) {\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) > target)\n        l = m + 1;\n      else\n        r = m;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# \"\"\"\n# This is MountainArray's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n# Class MountainArray:\n#   def get(self, index: int) -> int:\n#   def length(self) -> int:\n\nclass Solution:\n  def findInMountainArray(self, target: int, mountain_arr: 'MountainArray') -> int:\n    n = mountain_arr.length()\n    peakIndex = self.peakIndexInMountainArray(mountain_arr, 0, n - 1)\n\n    leftIndex = self.searchLeft(mountain_arr, target, 0, peakIndex)\n    if mountain_arr.get(leftIndex) == target:\n      return leftIndex\n\n    rightIndex = self.searchRight(mountain_arr, target, peakIndex + 1, n - 1)\n    if mountain_arr.get(rightIndex) == target:\n      return rightIndex\n\n    return -1\n\n  # 852. Peak Index in a Mountain Array\n  def peakIndexInMountainArray(self, A: 'MountainArray', l: int, r: int) -> int:\n    while l < r:\n      m = (l + r) // 2\n      if A.get(m) < A.get(m + 1):\n        l = m + 1\n      else:\n        r = m\n    return l\n\n  def searchLeft(self, A: 'MountainArray', target: int, l: int, r: int) -> int:\n    while l < r:\n      m = (l + r) // 2\n      if A.get(m) < target:\n        l = m + 1\n      else:\n        r = m\n    return l\n\n  def searchRight(self, A: 'MountainArray', target: int, l: int, r: int) -> int:\n    while l < r:\n      m = (l + r) // 2\n      if A.get(m) > target:\n        l = m + 1\n      else:\n        r = m\n    return l\n",
                "lang_text": "py"
            }
        }
    }
}