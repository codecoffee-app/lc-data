{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "373",
            "title": "Find K Pairs with Smallest Sums",
            "titleSlug": "find-k-pairs-with-smallest-sums",
            "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> sorted in <strong>non-decreasing&nbsp;order</strong> and an integer <code>k</code>.</p>\n\n<p>Define a pair <code>(u, v)</code> which consists of one element from the first array and one element from the second array.</p>\n\n<p>Return <em>the</em> <code>k</code> <em>pairs</em> <code>(u<sub>1</sub>, v<sub>1</sub>), (u<sub>2</sub>, v<sub>2</sub>), ..., (u<sub>k</sub>, v<sub>k</sub>)</code> <em>with the smallest sums</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n<strong>Output:</strong> [[1,2],[1,4],[1,6]]\n<strong>Explanation:</strong> The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n<strong>Output:</strong> [[1,1],[1,1]]\n<strong>Explanation:</strong> The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [3], k = 3\n<strong>Output:</strong> [[1,3],[2,3]]\n<strong>Explanation:</strong> All possible pairs are returned from the sequence: [1,3],[2,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>nums1</code> and <code>nums2</code> both are sorted in <strong>non-decreasing order</strong>.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>k &lt;=&nbsp;nums1.length *&nbsp;nums2.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5971,
            "dislikes": 425,
            "similarQuestions": "[{\"title\": \"Kth Smallest Element in a Sorted Matrix\", \"titleSlug\": \"kth-smallest-element-in-a-sorted-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K-th Smallest Pair Distance\", \"titleSlug\": \"find-k-th-smallest-pair-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Product of Two Sorted Arrays\", \"titleSlug\": \"kth-smallest-product-of-two-sorted-arrays\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"273.2K\", \"totalSubmission\": \"683.6K\", \"totalAcceptedRaw\": 273176, \"totalSubmissionRaw\": 683644, \"acRate\": \"40.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two integer arrays `nums1` and `nums2` sorted in non-decreasing order, and an integer `k`, find the `k` pairs `(u_i, v_i)` with the smallest sums, where `u_i` is an element from `nums1` and `v_i` is an element from `nums2`.",
                "constraints": [
                    "1 <= nums1.length, nums2.length <= 10^5",
                    "-10^9 <= nums1[i], nums2[i] <= 10^9",
                    "nums1 and nums2 both are sorted in non-decreasing order.",
                    "1 <= k <= 10^4",
                    "k <= nums1.length * nums2.length"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [1,7,11], nums2 = [2,4,6], k = 3",
                        "output": "[[1,2],[1,4],[1,6]]",
                        "explanation": "The function should return the first 3 pairs from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6] having the smallest sums."
                    },
                    {
                        "input": "nums1 = [1,1,2], nums2 = [1,2,3], k = 2",
                        "output": "[[1,1],[1,1]]",
                        "explanation": "The function should return the first 2 pairs from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3] having the smallest sums."
                    },
                    {
                        "input": "nums1 = [1,2], nums2 = [3], k = 3",
                        "output": "[[1,3],[2,3]]",
                        "explanation": "The function should return all possible pairs from the sequence: [1,3],[2,3] as k is greater than the number of pairs."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
                "title": "Kth Smallest Element in a Sorted Matrix",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-k-th-smallest-pair-distance",
                "title": "Find K-th Smallest Pair Distance",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "kth-smallest-product-of-two-sorted-arrays",
                "title": "Kth Smallest Product of Two Sorted Arrays",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  int i;\n  int j;\n  int sum;  // nums1[i] + nums2[j]\n  T(int i, int j, int sum) : i(i), j(j), sum(sum) {}\n};\n\nclass Solution {\n public:\n  vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2,\n                                     int k) {\n    vector<vector<int>> ans;\n    auto compare = [&](const T& a, const T& b) { return a.sum > b.sum; };\n    priority_queue<T, vector<T>, decltype(compare)> minHeap(compare);\n\n    for (int i = 0; i < k && i < nums1.size(); ++i)\n      minHeap.emplace(i, 0, nums1[i] + nums2[0]);\n\n    while (!minHeap.empty() && ans.size() < k) {\n      const auto [i, j, _] = minHeap.top();\n      minHeap.pop();\n      ans.push_back({nums1[i], nums2[j]});\n      if (j + 1 < nums2.size())\n        minHeap.emplace(i, j + 1, nums1[i] + nums2[j + 1]);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public int i;\n  public int j;\n  public int sum; // nums1[i] + nums2[j]\n  public T(int i, int j, int sum) {\n    this.i = i;\n    this.j = j;\n    this.sum = sum;\n  }\n}\n\nclass Solution {\n  public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {\n    List<List<Integer>> ans = new ArrayList<>();\n    Queue<T> minHeap = new PriorityQueue<>((a, b) -> a.sum - b.sum);\n\n    for (int i = 0; i < k && i < nums1.length; ++i)\n      minHeap.offer(new T(i, 0, nums1[i] + nums2[0]));\n\n    while (!minHeap.isEmpty() && ans.size() < k) {\n      final int i = minHeap.peek().i;\n      final int j = minHeap.poll().j;\n      ans.add(Arrays.asList(nums1[i], nums2[j]));\n      if (j + 1 < nums2.length)\n        minHeap.offer(new T(i, j + 1, nums1[i] + nums2[j + 1]));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}