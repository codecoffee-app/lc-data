{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "719",
            "title": "Find K-th Smallest Pair Distance",
            "titleSlug": "find-k-th-smallest-pair-distance",
            "content": "<p>The <strong>distance of a pair</strong> of integers <code>a</code> and <code>b</code> is defined as the absolute difference between <code>a</code> and <code>b</code>.</p>\n\n<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>smallest <strong>distance among all the pairs</strong></em> <code>nums[i]</code> <em>and</em> <code>nums[j]</code> <em>where</em> <code>0 &lt;= i &lt; j &lt; nums.length</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,1], k = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Here are all the pairs:\n(1,3) -&gt; 2\n(1,1) -&gt; 0\n(3,1) -&gt; 2\nThen the 1<sup>st</sup> smallest distance pair is (1,1), and its distance is 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1], k = 2\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,6,1], k = 3\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n * (n - 1) / 2</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2872,
            "dislikes": 87,
            "similarQuestions": "[{\"title\": \"Find K Pairs with Smallest Sums\", \"titleSlug\": \"find-k-pairs-with-smallest-sums\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Element in a Sorted Matrix\", \"titleSlug\": \"kth-smallest-element-in-a-sorted-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K Closest Elements\", \"titleSlug\": \"find-k-closest-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Number in Multiplication Table\", \"titleSlug\": \"kth-smallest-number-in-multiplication-table\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"K-th Smallest Prime Fraction\", \"titleSlug\": \"k-th-smallest-prime-fraction\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"84.1K\", \"totalSubmission\": \"224.6K\", \"totalAcceptedRaw\": 84079, \"totalSubmissionRaw\": 224612, \"acRate\": \"37.4%\"}",
            "hints": [
                "Binary search for the answer.  How can you check how many pairs have distance <= X?"
            ],
            "rephrased": {
                "body": "Given an array of integers `nums`, find the k-th smallest absolute difference between any two numbers in the array. More formally, you need to find the k-th smallest value of `abs(nums[i] - nums[j])` for all `0 <= i < j < nums.length`.",
                "constraints": [
                    "n == nums.length",
                    "2 <= n <= 10^4",
                    "0 <= nums[i] <= 10^6",
                    "1 <= k <= n * (n - 1) / 2"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,3,1], k = 1",
                        "output": "0",
                        "explanation": "All possible pairs and their distances are: (1,3) -> 2, (1,1) -> 0, (3,1) -> 2. The 1st smallest distance is 0, which corresponds to the pair (1,1)."
                    },
                    {
                        "input": "nums = [1,1,1], k = 2",
                        "output": "0",
                        "explanation": null
                    },
                    {
                        "input": "nums = [1,6,1], k = 3",
                        "output": "5",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-k-pairs-with-smallest-sums",
                "title": "Find K Pairs with Smallest Sums",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
                "title": "Kth Smallest Element in a Sorted Matrix",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-k-closest-elements",
                "title": "Find K Closest Elements",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "kth-smallest-number-in-multiplication-table",
                "title": "Kth Smallest Number in Multiplication Table",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "k-th-smallest-prime-fraction",
                "title": "K-th Smallest Prime Fraction",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Binary search for the answer.  How can you check how many pairs have distance <= X?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int smallestDistancePair(vector<int>& nums, int k) {\n    std::ranges::sort(nums);\n\n    int l = 0;\n    int r = nums.back() - nums.front();\n\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (pairDistancesNoGreaterThan(nums, m) >= k)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n private:\n  int pairDistancesNoGreaterThan(const vector<int>& nums, int m) {\n    int count = 0;\n    int j = 1;\n    // For each index i, find the first index j s.t. nums[j] > nums[i] + m,\n    // So pairDistancesNoGreaterThan for index i will be j - i - 1\n    for (int i = 0; i < nums.size(); ++i) {\n      while (j < nums.size() && nums[j] <= nums[i] + m)\n        ++j;\n      count += j - i - 1;\n    }\n    return count;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int smallestDistancePair(int[] nums, int k) {\n    Arrays.sort(nums);\n\n    int l = 0;\n    int r = nums[nums.length - 1] - nums[0];\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (pairDistancesNoGreaterThan(nums, m) >= k)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n  private int pairDistancesNoGreaterThan(int[] nums, int m) {\n    int count = 0;\n    int j = 1;\n    // For each index i, find the first index j s.t. nums[j] > nums[i] + m,\n    // So pairDistancesNoGreaterThan for index i will be j - i - 1\n    for (int i = 0; i < nums.length; ++i) {\n      while (j < nums.length && nums[j] <= nums[i] + m)\n        ++j;\n      count += j - i - 1;\n    }\n    return count;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def smallestDistancePair(self, nums: List[int], k: int) -> int:\n    nums.sort()\n\n    l = 0\n    r = nums[-1] - nums[0]\n\n    while l < r:\n      m = (l + r) // 2\n      count = 0\n\n      j = 0\n      for i in range(len(nums)):\n        while j < len(nums) and nums[j] <= nums[i] + m:\n          j += 1\n        count += j - i - 1\n\n      if count < k:\n        l = m + 1\n      else:\n        r = m\n\n    return l\n",
                "lang_text": "py"
            }
        }
    }
}