{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1545",
            "title": "Find Kth Bit in Nth Binary String",
            "titleSlug": "find-kth-bit-in-nth-binary-string",
            "content": "<p>Given two positive integers <code>n</code> and <code>k</code>, the binary string <code>S<sub>n</sub></code> is formed as follows:</p>\n\n<ul>\n\t<li><code>S<sub>1</sub> = &quot;0&quot;</code></li>\n\t<li><code>S<sub>i</sub> = S<sub>i - 1</sub> + &quot;1&quot; + reverse(invert(S<sub>i - 1</sub>))</code> for <code>i &gt; 1</code></li>\n</ul>\n\n<p>Where <code>+</code> denotes the concatenation operation, <code>reverse(x)</code> returns the reversed string <code>x</code>, and <code>invert(x)</code> inverts all the bits in <code>x</code> (<code>0</code> changes to <code>1</code> and <code>1</code> changes to <code>0</code>).</p>\n\n<p>For example, the first four strings in the above sequence are:</p>\n\n<ul>\n\t<li><code>S<sub>1 </sub>= &quot;0&quot;</code></li>\n\t<li><code>S<sub>2 </sub>= &quot;0<strong>1</strong>1&quot;</code></li>\n\t<li><code>S<sub>3 </sub>= &quot;011<strong>1</strong>001&quot;</code></li>\n\t<li><code>S<sub>4</sub> = &quot;0111001<strong>1</strong>0110001&quot;</code></li>\n</ul>\n\n<p>Return <em>the</em> <code>k<sup>th</sup></code> <em>bit</em> <em>in</em> <code>S<sub>n</sub></code>. It is guaranteed that <code>k</code> is valid for the given <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 1\n<strong>Output:</strong> &quot;0&quot;\n<strong>Explanation:</strong> S<sub>3</sub> is &quot;<strong><u>0</u></strong>111001&quot;.\nThe 1<sup>st</sup> bit is &quot;0&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, k = 11\n<strong>Output:</strong> &quot;1&quot;\n<strong>Explanation:</strong> S<sub>4</sub> is &quot;0111001101<strong><u>1</u></strong>0001&quot;.\nThe 11<sup>th</sup> bit is &quot;1&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>1 &lt;= k &lt;= 2<sup>n</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 881,
            "dislikes": 54,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"38.6K\", \"totalSubmission\": \"65.9K\", \"totalAcceptedRaw\": 38598, \"totalSubmissionRaw\": 65875, \"acRate\": \"58.6%\"}",
            "hints": [
                "Since n is small, we can simply simulate the process of constructing S1 to Sn."
            ],
            "rephrased": {
                "body": "Given two positive integers `n` and `k`, a binary string `S_n` is constructed as follows:\n\n*   `S_1 = \"0\"`\n*   `S_i = S_{i - 1} + \"1\" + reverse(invert(S_{i - 1}))` for `i > 1`\n\nWhere `+` represents string concatenation, `reverse(x)` reverses string `x`, and `invert(x)` flips the bits in `x` (0 becomes 1, and 1 becomes 0).\n\nYour task is to return the `k`-th bit in `S_n`. It is guaranteed that `k` is a valid index within `S_n`.",
                "constraints": [
                    "1 <= n <= 20",
                    "1 <= k <= 2^n - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 3, k = 1",
                        "output": "\"0\"",
                        "explanation": "S_3 is \"0111001\". The 1st bit is \"0\"."
                    },
                    {
                        "input": "n = 4, k = 11",
                        "output": "\"1\"",
                        "explanation": "S_4 is \"011100110110001\". The 11th bit is \"1\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Since n is small, we can simply simulate the process of constructing S1 to Sn."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  char findKthBit(int n, int k) {\n    if (n == 1)\n      return '0';\n    const int midIndex = pow(2, n - 1);  // 1-indexed\n    if (k == midIndex)\n      return '1';\n    if (k < midIndex)\n      return findKthBit(n - 1, k);\n    return findKthBit(n - 1, midIndex * 2 - k) == '0' ? '1' : '0';\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public char findKthBit(int n, int k) {\n    if (n == 1)\n      return '0';\n    final int midIndex = (int) Math.pow(2, n - 1); // 1-indexed\n    if (k == midIndex)\n      return '1';\n    if (k < midIndex)\n      return findKthBit(n - 1, k);\n    return findKthBit(n - 1, midIndex * 2 - k) == '0' ? '1' : '0';\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findKthBit(self, n: int, k: int) -> str:\n    if n == 1:\n      return '0'\n    midIndex = pow(2, n - 1)  # 1-indexed\n    if k == midIndex:\n      return '1'\n    if k < midIndex:\n      return self.findKthBit(n - 1, k)\n    return '1' if self.findKthBit(n - 1, midIndex * 2 - k) == '0' else '0'\n",
                "lang_text": "py"
            }
        }
    }
}