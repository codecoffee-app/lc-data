{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1738",
            "title": "Find Kth Largest XOR Coordinate Value",
            "titleSlug": "find-kth-largest-xor-coordinate-value",
            "content": "<p>You are given a 2D <code>matrix</code> of size <code>m x n</code>, consisting of non-negative integers. You are also given an integer <code>k</code>.</p>\n\n<p>The <strong>value</strong> of coordinate <code>(a, b)</code> of the matrix is the XOR of all <code>matrix[i][j]</code> where <code>0 &lt;= i &lt;= a &lt; m</code> and <code>0 &lt;= j &lt;= b &lt; n</code> <strong>(0-indexed)</strong>.</p>\n\n<p>Find the <code>k<sup>th</sup></code> largest value <strong>(1-indexed)</strong> of all the coordinates of <code>matrix</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[5,2],[1,6]], k = 1\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[5,2],[1,6]], k = 2\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[5,2],[1,6]], k = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= matrix[i][j] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= m * n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 489,
            "dislikes": 74,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                },
                {
                    "name": "Quickselect",
                    "slug": "quickselect"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.7K\", \"totalSubmission\": \"33.6K\", \"totalAcceptedRaw\": 20667, \"totalSubmissionRaw\": 33621, \"acRate\": \"61.5%\"}",
            "hints": [
                "Use a 2D prefix sum to precalculate the xor-sum of the upper left submatrix."
            ],
            "rephrased": {
                "body": "Given a 2D matrix of non-negative integers with dimensions m x n, and an integer k. The value of a coordinate (a, b) is defined as the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed). Find the kth largest value (1-indexed) among all coordinate values in the matrix.",
                "constraints": [
                    "m == matrix.length",
                    "n == matrix[i].length",
                    "1 <= m, n <= 1000",
                    "0 <= matrix[i][j] <= 10^6",
                    "1 <= k <= m * n"
                ],
                "testcases": [
                    {
                        "input": "matrix = [[5,2],[1,6]], k = 1",
                        "output": "7",
                        "explanation": "The coordinate (0, 1) has the largest XOR value: 5 XOR 2 = 7."
                    },
                    {
                        "input": "matrix = [[5,2],[1,6]], k = 2",
                        "output": "5",
                        "explanation": "The coordinate (0, 0) has the second largest XOR value: 5."
                    },
                    {
                        "input": "matrix = [[5,2],[1,6]], k = 3",
                        "output": "4",
                        "explanation": "The coordinate (1, 0) has the third largest XOR value: 5 XOR 1 = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use a 2D prefix sum to precalculate the xor-sum of the upper left submatrix."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Quickselect",
                "slug": "quickselect"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int kthLargestValue(vector<vector<int>>& matrix, int k) {\n    const int m = matrix.size();\n    const int n = matrix[0].size();\n    vector<vector<int>> xors(m + 1, vector<int>(n + 1));\n    priority_queue<int, vector<int>, greater<>> minHeap;\n\n    for (int i = 1; i <= m; ++i)\n      for (int j = 1; j <= n; ++j) {\n        xors[i][j] = xors[i - 1][j] ^ xors[i][j - 1] ^ xors[i - 1][j - 1] ^\n                     matrix[i - 1][j - 1];\n        minHeap.push(xors[i][j]);\n        if (minHeap.size() > k)\n          minHeap.pop();\n      }\n\n    return minHeap.top();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int kthLargestValue(int[][] matrix, int k) {\n    final int m = matrix.length;\n    final int n = matrix[0].length;\n    int[][] xors = new int[m + 1][n + 1];\n    Queue<Integer> minHeap = new PriorityQueue<>();\n\n    for (int i = 1; i <= m; ++i)\n      for (int j = 1; j <= n; ++j) {\n        xors[i][j] = xors[i - 1][j] ^ xors[i][j - 1] ^ xors[i - 1][j - 1] ^ matrix[i - 1][j - 1];\n        minHeap.offer(xors[i][j]);\n        if (minHeap.size() > k)\n          minHeap.poll();\n      }\n\n    return minHeap.peek();\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}