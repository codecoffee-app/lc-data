{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "515",
            "title": "Find Largest Value in Each Tree Row",
            "titleSlug": "find-largest-value-in-each-tree-row",
            "content": "<p>Given the <code>root</code> of a binary tree, return <em>an array of the largest value in each row</em> of the tree <strong>(0-indexed)</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/21/largest_e1.jpg\" style=\"width: 300px; height: 172px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,2,5,3,null,9]\n<strong>Output:</strong> [1,3,9]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2,3]\n<strong>Output:</strong> [1,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree will be in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3514,
            "dislikes": 110,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"321.7K\", \"totalSubmission\": \"490.3K\", \"totalAcceptedRaw\": 321718, \"totalSubmissionRaw\": 490261, \"acRate\": \"65.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, find the largest value in each row (level) of the tree. Return an array containing these largest values, with the rows indexed starting from 0.",
                "constraints": [
                    "The number of nodes in the tree will be in the range [0, 10<sup>4</sup>].",
                    "-2<sup>31</sup> <= Node.val <= 2<sup>31</sup> - 1"
                ],
                "testcases": [
                    {
                        "input": "[1,3,2,5,3,null,9]",
                        "output": "[1, 3, 9]",
                        "explanation": "The largest value in the first row is 1. The largest value in the second row is 3. The largest value in the third row is 9."
                    },
                    {
                        "input": "[1,2,3]",
                        "output": "[1, 3]",
                        "explanation": "The largest value in the first row is 1. The largest value in the second row is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> largestValues(TreeNode* root) {\n    if (root == nullptr)\n      return {};\n\n    vector<int> ans;\n    queue<TreeNode*> q{{root}};\n\n    while (!q.empty()) {\n      int maxi = INT_MIN;\n      for (int sz = q.size(); sz > 0; --sz) {\n        TreeNode* node = q.front();\n        q.pop();\n        maxi = max(maxi, node->val);\n        if (node->left)\n          q.push(node->left);\n        if (node->right)\n          q.push(node->right);\n      }\n      ans.push_back(maxi);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> largestValues(TreeNode root) {\n    if (root == null)\n      return new ArrayList<>();\n\n    List<Integer> ans = new ArrayList<>();\n    Queue<TreeNode> q = new ArrayDeque<>(Arrays.asList(root));\n\n    while (!q.isEmpty()) {\n      int max = Integer.MIN_VALUE;\n      for (int sz = q.size(); sz > 0; --sz) {\n        TreeNode node = q.poll();\n        max = Math.max(max, node.val);\n        if (node.left != null)\n          q.offer(node.left);\n        if (node.right != null)\n          q.offer(node.right);\n      }\n      ans.add(max);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestValues(self, root: Optional[TreeNode]) -> List[int]:\n    if not root:\n      return []\n\n    ans = []\n    q = collections.deque([root])\n\n    while q:\n      maxi = -math.inf\n      for _ in range(len(q)):\n        root = q.popleft()\n        maxi = max(maxi, root.val)\n        if root.left:\n          q.append(root.left)\n        if root.right:\n          q.append(root.right)\n      ans.append(maxi)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}