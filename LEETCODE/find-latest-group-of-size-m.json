{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1562",
            "title": "Find Latest Group of Size M",
            "titleSlug": "find-latest-group-of-size-m",
            "content": "<p>Given an array <code>arr</code> that represents a permutation of numbers from <code>1</code> to <code>n</code>.</p>\n\n<p>You have a binary string of size <code>n</code> that initially has all its bits set to zero. At each step <code>i</code> (assuming both the binary string and <code>arr</code> are 1-indexed) from <code>1</code> to <code>n</code>, the bit at position <code>arr[i]</code> is set to <code>1</code>.</p>\n\n<p>You are also given an integer <code>m</code>. Find the latest step at which there exists a group of ones of length <code>m</code>. A group of ones is a contiguous substring of <code>1</code>&#39;s such that it cannot be extended in either direction.</p>\n\n<p>Return <em>the latest step at which there exists a group of ones of length <strong>exactly</strong></em> <code>m</code>. <em>If no such group exists, return</em> <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,5,1,2,4], m = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nStep 1: &quot;00<u>1</u>00&quot;, groups: [&quot;1&quot;]\nStep 2: &quot;0010<u>1</u>&quot;, groups: [&quot;1&quot;, &quot;1&quot;]\nStep 3: &quot;<u>1</u>0101&quot;, groups: [&quot;1&quot;, &quot;1&quot;, &quot;1&quot;]\nStep 4: &quot;1<u>1</u>101&quot;, groups: [&quot;111&quot;, &quot;1&quot;]\nStep 5: &quot;111<u>1</u>1&quot;, groups: [&quot;11111&quot;]\nThe latest step at which there exists a group of size 1 is step 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,1,5,4,2], m = 2\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> \nStep 1: &quot;00<u>1</u>00&quot;, groups: [&quot;1&quot;]\nStep 2: &quot;<u>1</u>0100&quot;, groups: [&quot;1&quot;, &quot;1&quot;]\nStep 3: &quot;1010<u>1</u>&quot;, groups: [&quot;1&quot;, &quot;1&quot;, &quot;1&quot;]\nStep 4: &quot;101<u>1</u>1&quot;, groups: [&quot;1&quot;, &quot;111&quot;]\nStep 5: &quot;1<u>1</u>111&quot;, groups: [&quot;11111&quot;]\nNo group of size 2 exists during any step.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == arr.length</code></li>\n\t<li><code>1 &lt;= m &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= n</code></li>\n\t<li>All integers in <code>arr</code> are <strong>distinct</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 631,
            "dislikes": 132,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"17.6K\", \"totalSubmission\": \"41.1K\", \"totalAcceptedRaw\": 17623, \"totalSubmissionRaw\": 41056, \"acRate\": \"42.9%\"}",
            "hints": [
                "Since the problem asks for the latest step, can you start the searching from the end of arr?",
                "Use a map to store the current \u201c1\u201d groups.",
                "At each step (going backwards) you need to split one group and update the map."
            ],
            "rephrased": {
                "body": "Given a permutation `arr` of numbers from 1 to `n`, and a binary string of size `n` initially all zeros. At each step `i`, the bit at position `arr[i]` is set to 1. Find the latest step at which there exists a contiguous group of exactly `m` ones, such that it cannot be extended in either direction. If no such group exists, return -1.",
                "constraints": [
                    "`n == arr.length`",
                    "`1 <= m <= n <= 10^5`",
                    "`1 <= arr[i] <= n`",
                    "All integers in `arr` are distinct."
                ],
                "testcases": [
                    {
                        "input": "arr = [3,5,1,2,4], m = 1",
                        "output": "4",
                        "explanation": "The binary string evolves as follows:\nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"00101\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"11101\", groups: [\"111\", \"1\"]\nStep 5: \"11111\", groups: [\"11111\"]\nThe latest step with a group of size 1 is step 4."
                    },
                    {
                        "input": "arr = [3,1,5,4,2], m = 2",
                        "output": "-1",
                        "explanation": "The binary string evolves as follows:\nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"10100\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"10111\", groups: [\"1\", \"111\"]\nStep 5: \"11111\", groups: [\"11111\"]\nNo step contains a group of size 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Since the problem asks for the latest step, can you start the searching from the end of arr?",
            "Use a map to store the current \u201c1\u201d groups.",
            "At each step (going backwards) you need to split one group and update the map."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findLatestStep(vector<int>& arr, int m) {\n    if (arr.size() == m)\n      return arr.size();\n\n    int ans = -1;\n    int step = 0;\n    // sizes[i] := the size of the group starting from i or ending at i\n    // (1-indexed)\n    vector<int> sizes(arr.size() + 2);\n\n    for (const int i : arr) {\n      ++step;\n      // In the previous step, there exists a group with a size of m.\n      if (sizes[i - 1] == m || sizes[i + 1] == m)\n        ans = step - 1;\n      const int head = i - sizes[i - 1];\n      const int tail = i + sizes[i + 1];\n      sizes[head] = tail - head + 1;\n      sizes[tail] = tail - head + 1;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findLatestStep(int[] arr, int m) {\n    if (arr.length == m)\n      return arr.length;\n\n    int ans = -1;\n    int step = 0;\n    // sizes[i] := the size of the group starting from i or ending at i\n    // (1-indexed)\n    int[] sizes = new int[arr.length + 2];\n\n    for (final int i : arr) {\n      ++step;\n      // In the previous step, there exists a group with a size of m.\n      if (sizes[i - 1] == m || sizes[i + 1] == m)\n        ans = step - 1;\n      final int head = i - sizes[i - 1];\n      final int tail = i + sizes[i + 1];\n      sizes[head] = tail - head + 1;\n      sizes[tail] = tail - head + 1;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findLatestStep(self, arr: List[int], m: int) -> int:\n    if len(arr) == m:\n      return len(arr)\n\n    ans = -1\n    step = 0\n    # sizes[i] := the size of the group starting from i or ending at i\n    # (1-indexed)\n    sizes = [0] * (len(arr) + 2)\n\n    for i in arr:\n      step += 1\n      # In the previous step, there exists a group with a size of m.\n      if sizes[i - 1] == m or sizes[i + 1] == m:\n        ans = step - 1\n      head = i - sizes[i - 1]\n      tail = i + sizes[i + 1]\n      sizes[head] = tail - head + 1\n      sizes[tail] = tail - head + 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}