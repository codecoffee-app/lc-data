{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1542",
            "title": "Find Longest Awesome Substring",
            "titleSlug": "find-longest-awesome-substring",
            "content": "<p>You are given a string <code>s</code>. An <strong>awesome</strong> substring is a non-empty substring of <code>s</code> such that we can make any number of swaps in order to make it a palindrome.</p>\n\n<p>Return <em>the length of the maximum length <strong>awesome substring</strong> of</em> <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3242415&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> &quot;24241&quot; is the longest awesome substring, we can form the palindrome &quot;24142&quot; with some swaps.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;12345678&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;213123&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> &quot;213123&quot; is the longest awesome substring, we can form the palindrome &quot;231132&quot; with some swaps.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of digits.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 769,
            "dislikes": 13,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.1K\", \"totalSubmission\": \"30.7K\", \"totalAcceptedRaw\": 13130, \"totalSubmissionRaw\": 30721, \"acRate\": \"42.7%\"}",
            "hints": [
                "Given the character counts, under what conditions can a palindrome be formed ?",
                "From left to right, use bitwise xor-operation to compute for any prefix the number of times modulo 2 of each digit.  (mask ^= (1<<(s[i]-'0')).",
                "Expected complexity is O(n*A) where A is the alphabet (10)."
            ],
            "rephrased": {
                "body": "Given a string `s` consisting of digits, find the length of the longest awesome substring. An awesome substring is defined as a non-empty substring that can be rearranged into a palindrome by swapping characters.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists only of digits."
                ],
                "testcases": [
                    {
                        "input": "3242415",
                        "output": "5",
                        "explanation": "The substring \"24241\" is the longest awesome substring. It can be rearranged to form the palindrome \"24142\"."
                    },
                    {
                        "input": "12345678",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "213123",
                        "output": "6",
                        "explanation": "The substring \"213123\" is the longest awesome substring. It can be rearranged to form the palindrome \"231132\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Given the character counts, under what conditions can a palindrome be formed ?",
            "From left to right, use bitwise xor-operation to compute for any prefix the number of times modulo 2 of each digit.  (mask ^= (1<<(s[i]-'0')).",
            "Expected complexity is O(n*A) where A is the alphabet (10)."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestAwesome(string s) {\n    int ans = 0;\n    int prefix = 0;  // Binary prefix\n    vector<int> prefixToIndex(1024, s.length());\n    prefixToIndex[0] = -1;\n\n    for (int i = 0; i < s.length(); ++i) {\n      prefix ^= 1 << s[i] - '0';\n      ans = max(ans, i - prefixToIndex[prefix]);\n      for (int j = 0; j < 10; ++j)\n        ans = max(ans, i - prefixToIndex[prefix ^ 1 << j]);\n      prefixToIndex[prefix] = min(prefixToIndex[prefix], i);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestAwesome(String s) {\n    int ans = 0;\n    int prefix = 0; // Binary prefix\n    int[] prefixToIndex = new int[1024];\n    Arrays.fill(prefixToIndex, s.length());\n    prefixToIndex[0] = -1;\n\n    for (int i = 0; i < s.length(); ++i) {\n      prefix ^= 1 << s.charAt(i) - '0';\n      ans = Math.max(ans, i - prefixToIndex[prefix]);\n      for (int j = 0; j < 10; ++j)\n        ans = Math.max(ans, i - prefixToIndex[prefix ^ 1 << j]);\n      prefixToIndex[prefix] = Math.min(prefixToIndex[prefix], i);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestAwesome(self, s: str) -> int:\n    ans = 0\n    prefix = 0  # Binary prefix\n    prefixToIndex = [len(s)] * 1024\n    prefixToIndex[0] = -1\n\n    for i, c in enumerate(s):\n      prefix ^= 1 << ord(c) - ord('0')\n      ans = max(ans, i - prefixToIndex[prefix])\n      for j in range(10):\n        ans = max(ans, i - prefixToIndex[prefix ^ 1 << j])\n      prefixToIndex[prefix] = min(prefixToIndex[prefix], i)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}