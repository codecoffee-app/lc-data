{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2945",
            "title": "Find Maximum Non-decreasing Array Length",
            "titleSlug": "find-maximum-non-decreasing-array-length",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>.</p>\n\n<p>You can perform any number of operations, where each operation involves selecting a <strong>subarray</strong> of the array and replacing it with the <strong>sum</strong> of its elements. For example, if the given array is <code>[1,3,5,6]</code> and you select subarray <code>[3,5]</code> the array will convert to <code>[1,8,6]</code>.</p>\n\n<p>Return <em>the </em><strong><em>maximum</em></strong><em> length of a </em><strong><em>non-decreasing</em></strong><em> array that can be made after applying operations.</em></p>\n\n<p>A <strong>subarray</strong> is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> This array with length 3 is not non-decreasing.\nWe have two ways to make the array length two.\nFirst, choosing subarray [2,2] converts the array to [5,4].\nSecond, choosing subarray [5,2] converts the array to [7,2].\nIn these two ways the array is not non-decreasing.\nAnd if we choose subarray [5,2,2] and replace it with [9] it becomes non-decreasing. \nSo the answer is 1.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The array is non-decreasing. So the answer is 4.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,3,2,6]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Replacing [3,2] with [5] converts the given array to [4,5,6] that is non-decreasing.\nBecause the given array is not non-decreasing, the maximum<!-- notionvc: 3447a505-d1ee-4411-8cae-e52162f53a55 --> possible answer is 3.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 150,
            "dislikes": 17,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                },
                {
                    "name": "Monotonic Queue",
                    "slug": "monotonic-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.5K\", \"totalSubmission\": \"22K\", \"totalAcceptedRaw\": 3474, \"totalSubmissionRaw\": 21995, \"acRate\": \"15.8%\"}",
            "hints": [
                "Let <code>dp[i]</code> be the maximum number of elements in the increasing sequence after processing the first <code>i</code> elements of the original array.",
                "We have <code>dp[0] = 0</code>. <code>dp[i + 1] >= dp[i]</code> (since if we have the solution for the first <code>i</code> elements, we can always merge the last one of the first <code>i + 1</code> elements which is <code>nums[i]</code> into the solution of the first <code>i</code> elements.",
                "For <code>i > 0</code>, we want to <code>dp[i] = max(dp[j] + 1)</code> where <code>sum(nums[i - 1] + nums[i - 2] +\u2026 + nums[j]) >= v[j]</code> and <code>v[j]</code> is the last element of the solution ending with <code>nums[j - 1]</code>."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums`, you can perform any number of operations. In each operation, you select a subarray of the array and replace it with the sum of its elements. The goal is to find the maximum length of a non-decreasing array that can be achieved after applying these operations.  A subarray is a contiguous non-empty sequence of elements within the array.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[5,2,2]",
                        "output": "1",
                        "explanation": "The initial array is not non-decreasing. We can replace [2, 2] with 4 to get [5, 4], replace [5, 2] with 7 to get [7, 2], or replace [5, 2, 2] with 9 to get [9]. Only replacing [5,2,2] results in a non-decreasing array of length 1. Thus, the maximum length of a non-decreasing array achievable is 1."
                    },
                    {
                        "input": "[1,2,3,4]",
                        "output": "4",
                        "explanation": "The array is already non-decreasing, so no operations are needed. The length is 4."
                    },
                    {
                        "input": "[4,3,2,6]",
                        "output": "3",
                        "explanation": "The array is not non-decreasing. We can replace the subarray [3, 2] with its sum 5, resulting in the array [4, 5, 6], which is non-decreasing and has length 3. This is the maximum possible length."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Let <code>dp[i]</code> be the maximum number of elements in the increasing sequence after processing the first <code>i</code> elements of the original array.",
            "We have <code>dp[0] = 0</code>. <code>dp[i + 1] >= dp[i]</code> (since if we have the solution for the first <code>i</code> elements, we can always merge the last one of the first <code>i + 1</code> elements which is <code>nums[i]</code> into the solution of the first <code>i</code> elements.",
            "For <code>i > 0</code>, we want to <code>dp[i] = max(dp[j] + 1)</code> where <code>sum(nums[i - 1] + nums[i - 2] +\u2026 + nums[j]) >= v[j]</code> and <code>v[j]</code> is the last element of the solution ending with <code>nums[j - 1]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            },
            {
                "name": "Monotonic Queue",
                "slug": "monotonic-queue"
            }
        ],
        "solutions": {
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMaximumLength(self, nums: List[int]) -> int:\n    n = len(nums)\n    kInf = 10_000_000_000\n    # prefix[i] := the sum of the first i nums\n    prefix = list(itertools.accumulate(nums, initial=0))\n    # dp[i] := the maximum number of elements in the increasing\n    # sequence after processing the first i nums\n    dp = [0] * (n + 1)\n    # last[i] := the last sum after processing the first i nums\n    last = [0] + [kInf] * n\n\n    for i in range(n):\n      j = self._findIndex(i, prefix, last)\n      dp[i + 1] = max(dp[i], dp[j] + 1)\n      last[i + 1] = prefix[i + 1] - prefix[j]\n\n    return dp[n]\n\n  def _findIndex(self, i: int, prefix: List[int], last: List[int]) -> int:\n    \"\"\"Returns the index in [0..i].\n\n    Returns the maximum index j in [0..i] s.t.\n    prefix[i + 1] - prefix[j] >= last[j].\n    \"\"\"\n    for j in range(i, -1, -1):\n      if prefix[i + 1] - prefix[j] >= last[j]:\n        return j\n",
                "lang_text": "py"
            }
        }
    }
}