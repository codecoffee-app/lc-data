{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2744",
            "title": "Find Maximum Number of String Pairs",
            "titleSlug": "find-maximum-number-of-string-pairs",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>words</code> consisting of <strong>distinct</strong> strings.</p>\n\n<p>The string <code>words[i]</code> can be paired with the string <code>words[j]</code> if:</p>\n\n<ul>\n\t<li>The string <code>words[i]</code> is equal to the reversed string of <code>words[j]</code>.</li>\n\t<li><code>0 &lt;= i &lt; j &lt; words.length</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> number of pairs that can be formed from the array </em><code>words</code><em>.</em></p>\n\n<p>Note that&nbsp;each string can belong in&nbsp;<strong>at most one</strong> pair.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;cd&quot;,&quot;ac&quot;,&quot;dc&quot;,&quot;ca&quot;,&quot;zz&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example, we can form 2 pair of strings in the following way:\n- We pair the 0<sup>th</sup> string with the 2<sup>nd</sup> string, as the reversed string of word[0] is &quot;dc&quot; and is equal to words[2].\n- We pair the 1<sup>st</sup> string with the 3<sup>rd</sup> string, as the reversed string of word[1] is &quot;ca&quot; and is equal to words[3].\nIt can be proven that 2 is the maximum number of pairs that can be formed.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;ab&quot;,&quot;ba&quot;,&quot;cc&quot;]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> In this example, we can form 1 pair of strings in the following way:\n- We pair the 0<sup>th</sup> string with the 1<sup>st</sup> string, as the reversed string of words[1] is &quot;ab&quot; and is equal to words[0].\nIt can be proven that 1 is the maximum number of pairs that can be formed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;aa&quot;,&quot;ab&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> In this example, we are unable to form any pair of strings.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\n\t<li><code>words[i].length == 2</code></li>\n\t<li><code>words</code>&nbsp;consists of distinct strings.</li>\n\t<li><code>words[i]</code>&nbsp;contains only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 283,
            "dislikes": 11,
            "similarQuestions": "[{\"title\": \"Group Shifted Strings\", \"titleSlug\": \"group-shifted-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Pairs\", \"titleSlug\": \"palindrome-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"44.9K\", \"totalSubmission\": \"55.8K\", \"totalAcceptedRaw\": 44932, \"totalSubmissionRaw\": 55811, \"acRate\": \"80.5%\"}",
            "hints": [
                "Notice that array words consist of distinct strings.",
                "Iterate over all indices (i, j) and check if they can be paired."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `words` consisting of distinct strings, find the maximum number of pairs that can be formed. A pair can be formed between `words[i]` and `words[j]` if `words[i]` is equal to the reversed string of `words[j]` and `0 <= i < j < words.length`. Each string can belong to at most one pair.",
                "constraints": [
                    "1 <= words.length <= 50",
                    "words[i].length == 2",
                    "words consists of distinct strings.",
                    "words[i] contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "[\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
                        "output": "2",
                        "explanation": "Two pairs can be formed: (\"cd\", \"dc\") and (\"ac\", \"ca\")."
                    },
                    {
                        "input": "[\"ab\",\"ba\",\"cc\"]",
                        "output": "1",
                        "explanation": "One pair can be formed: (\"ab\", \"ba\")."
                    },
                    {
                        "input": "[\"aa\",\"ab\"]",
                        "output": "0",
                        "explanation": "No pairs can be formed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "group-shifted-strings",
                "title": "Group Shifted Strings",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-pairs",
                "title": "Palindrome Pairs",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Notice that array words consist of distinct strings.",
            "Iterate over all indices (i, j) and check if they can be paired."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumNumberOfStringPairs(vector<string>& words) {\n    int ans = 0;\n    vector<bool> seen(26 * 26);\n\n    for (const string& word : words) {\n      if (seen[val(word[1]) * 26 + val(word[0])])\n        ++ans;\n      seen[val(word[0]) * 26 + val(word[1])] = true;\n    }\n\n    return ans;\n  }\n\n private:\n  constexpr int val(char c) {\n    return c - 'a';\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumNumberOfStringPairs(String[] words) {\n    int ans = 0;\n    boolean[] seen = new boolean[26 * 26];\n\n    for (final String word : words) {\n      if (seen[val(word.charAt(1)) * 26 + val(word.charAt(0))])\n        ++ans;\n      seen[val(word.charAt(0)) * 26 + val(word.charAt(1))] = true;\n    }\n\n    return ans;\n  }\n\n  private final int val(char c) {\n    return c - 'a';\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumNumberOfStringPairs(self, words: List[str]) -> int:\n    ans = 0\n    seen = [False] * (26 * 26)\n\n    def val(c: str) -> int:\n      return ord(c) - ord('a')\n\n    for word in words:\n      if seen[val(word[1]) * 26 + val(word[0])]:\n        ans += 1\n      seen[val(word[0]) * 26 + val(word[1])] = True\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}