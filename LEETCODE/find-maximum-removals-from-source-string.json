{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3316",
            "title": "Find Maximum Removals From Source String",
            "titleSlug": "find-maximum-removals-from-source-string",
            "content": "<p>You are given a string <code>source</code> of size <code>n</code>, a string <code>pattern</code> that is a <span data-keyword=\"subsequence-string\">subsequence</span> of <code>source</code>, and a <strong>sorted</strong> integer array <code>targetIndices</code> that contains <strong>distinct</strong> numbers in the range <code>[0, n - 1]</code>.</p>\n\n<p>We define an <strong>operation</strong> as removing a character at an index <code>idx</code> from <code>source</code> such that:</p>\n\n<ul>\n\t<li><code>idx</code> is an element of <code>targetIndices</code>.</li>\n\t<li><code>pattern</code> remains a <span data-keyword=\"subsequence-string\">subsequence</span> of <code>source</code> after removing the character.</li>\n</ul>\n\n<p>Performing an operation <strong>does not</strong> change the indices of the other characters in <code>source</code>. For example, if you remove <code>&#39;c&#39;</code> from <code>&quot;acb&quot;</code>, the character at index 2 would still be <code>&#39;b&#39;</code>.</p>\n\n<p>Return the <strong>maximum</strong> number of <em>operations</em> that can be performed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">source = &quot;abbaa&quot;, pattern = &quot;aba&quot;, </span>targetIndices<span class=\"example-io\"> = [0,1,2]</span></p>\n\n<p><strong>Output:</strong> 1</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can&#39;t remove <code>source[0]</code> but we can do either of these two operations:</p>\n\n<ul>\n\t<li>Remove <code>source[1]</code>, so that <code>source</code> becomes <code>&quot;a_baa&quot;</code>.</li>\n\t<li>Remove <code>source[2]</code>, so that <code>source</code> becomes <code>&quot;ab_aa&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">source = &quot;bcda&quot;, pattern = &quot;d&quot;, </span>targetIndices<span class=\"example-io\"> = [0,3]</span></p>\n\n<p><strong>Output:</strong> 2</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can remove <code>source[0]</code> and <code>source[3]</code> in two operations.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">source = &quot;dda&quot;, pattern = &quot;dda&quot;, </span>targetIndices<span class=\"example-io\"> = [0,1,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can&#39;t remove any character from <code>source</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">source = </span>&quot;yeyeykyded&quot;<span class=\"example-io\">, pattern = </span>&quot;yeyyd&quot;<span class=\"example-io\">, </span>targetIndices<span class=\"example-io\"> = </span>[0,2,3,4]</p>\n\n<p><strong>Output:</strong> 2</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can remove <code>source[2]</code> and <code>source[3]</code> in two operations.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == source.length &lt;= 3 * 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= pattern.length &lt;= n</code></li>\n\t<li><code>1 &lt;= targetIndices.length &lt;= n</code></li>\n\t<li><code>targetIndices</code> is sorted in ascending order.</li>\n\t<li>The input is generated such that <code>targetIndices</code> contains distinct elements in the range <code>[0, n - 1]</code>.</li>\n\t<li><code>source</code> and <code>pattern</code> consist only of lowercase English letters.</li>\n\t<li>The input is generated such that <code>pattern</code> appears as a subsequence in <code>source</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 103,
            "dislikes": 11,
            "similarQuestions": "[{\"title\": \"Delete Characters to Make Fancy String\", \"titleSlug\": \"delete-characters-to-make-fancy-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.2K\", \"totalSubmission\": \"22.1K\", \"totalAcceptedRaw\": 8182, \"totalSubmissionRaw\": 22142, \"acRate\": \"37.0%\"}",
            "hints": [
                "Use dynamic programming.",
                "At each index in <code>targetIndices</code>, make the choice to remove or not remove the character."
            ],
            "rephrased": {
                "body": "Given a string `source` of size `n`, a string `pattern` that is a subsequence of `source`, and a sorted integer array `targetIndices` containing distinct numbers in the range `[0, n - 1]`.  An operation involves removing a character at an index `idx` from `source` if:\n\n1.  `idx` is an element of `targetIndices`.\n2.  `pattern` remains a subsequence of `source` after removing the character.\n\nRemoving a character doesn't change the indices of the other characters. Determine the maximum number of operations that can be performed.",
                "constraints": [
                    "1 <= n == source.length <= 3 * 10^3",
                    "1 <= pattern.length <= n",
                    "1 <= targetIndices.length <= n",
                    "targetIndices is sorted in ascending order.",
                    "targetIndices contains distinct elements in the range [0, n - 1].",
                    "source and pattern consist only of lowercase English letters.",
                    "pattern appears as a subsequence in source."
                ],
                "testcases": [
                    {
                        "input": {
                            "source": "abbaa",
                            "pattern": "aba",
                            "targetIndices": [
                                0,
                                1,
                                2
                            ]
                        },
                        "output": 1,
                        "explanation": "We can't remove source[0], but we can remove either source[1] or source[2] while still maintaining 'aba' as a subsequence."
                    },
                    {
                        "input": {
                            "source": "bcda",
                            "pattern": "d",
                            "targetIndices": [
                                0,
                                3
                            ]
                        },
                        "output": 2,
                        "explanation": "We can remove both source[0] and source[3] as 'd' will still be a subsequence even after removing them individually or together."
                    },
                    {
                        "input": {
                            "source": "dda",
                            "pattern": "dda",
                            "targetIndices": [
                                0,
                                1,
                                2
                            ]
                        },
                        "output": 0,
                        "explanation": "Removing any character from source will break the subsequence 'dda'."
                    },
                    {
                        "input": {
                            "source": "yeyeykyded",
                            "pattern": "yeyyd",
                            "targetIndices": [
                                0,
                                2,
                                3,
                                4
                            ]
                        },
                        "output": 2,
                        "explanation": "We can remove source[2] and source[3], so that source becomes 'yeye_y_ded' while retaining 'yeyyd' as a subsequence."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "delete-characters-to-make-fancy-string",
                "title": "Delete Characters to Make Fancy String",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use dynamic programming.",
            "At each index in <code>targetIndices</code>, make the choice to remove or not remove the character."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ]
    }
}