{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3203",
            "title": "Find Minimum Diameter After Merging Two Trees",
            "titleSlug": "find-minimum-diameter-after-merging-two-trees",
            "content": "<p>There exist two <strong>undirected </strong>trees with <code>n</code> and <code>m</code> nodes, numbered from <code>0</code> to <code>n - 1</code> and from <code>0</code> to <code>m - 1</code>, respectively. You are given two 2D integer arrays <code>edges1</code> and <code>edges2</code> of lengths <code>n - 1</code> and <code>m - 1</code>, respectively, where <code>edges1[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the first tree and <code>edges2[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the second tree.</p>\n\n<p>You must connect one node from the first tree with another node from the second tree with an edge.</p>\n\n<p>Return the <strong>minimum </strong>possible <strong>diameter </strong>of the resulting tree.</p>\n\n<p>The <strong>diameter</strong> of a tree is the length of the <em>longest</em> path between any two nodes in the tree.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/22/example11-transformed.png\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges1 = [[0,1],[0,2],[0,3]], edges2 = [[0,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can obtain a tree of diameter 3 by connecting node 0 from the first tree with any node from the second tree.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/22/example211.png\" />\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges1 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], edges2 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can obtain a tree of diameter 5 by connecting node 0 from the first tree with node 0 from the second tree.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges1.length == n - 1</code></li>\n\t<li><code>edges2.length == m - 1</code></li>\n\t<li><code>edges1[i].length == edges2[i].length == 2</code></li>\n\t<li><code>edges1[i] = [a<sub>i</sub>, b<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>edges2[i] = [u<sub>i</sub>, v<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; m</code></li>\n\t<li>The input is generated such that <code>edges1</code> and <code>edges2</code> represent valid trees.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 121,
            "dislikes": 6,
            "similarQuestions": "[{\"title\": \"Minimum Height Trees\", \"titleSlug\": \"minimum-height-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Tree Diameter\", \"titleSlug\": \"tree-diameter\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.9K\", \"totalSubmission\": \"22.4K\", \"totalAcceptedRaw\": 7852, \"totalSubmissionRaw\": 22445, \"acRate\": \"35.0%\"}",
            "hints": [
                "Suppose that we connected node <code>a</code> in tree1 with node <code>b</code> in tree2. The diameter length of the resulting tree will be the largest of the following 3 values: \r\n<ol>\r\n<li>The diameter of tree 1.</li>\r\n<li>The diameter of tree 2.</li>\r\n<li>The length of the longest path that starts at node <code>a</code> and that is completely within Tree 1 + The length of the longest path that starts at node <code>b</code> and that is completely within Tree 2 + 1.</li>\r\n</ol> \r\nThe added one in the third value is due to the additional edge that we have added between trees 1 and 2.",
                "Values 1 and 2 are constant regardless of our choice of <code>a</code> and <code>b</code>. Therefore, we need to pick <code>a</code> and <code>b</code> in such a way that minimizes value 3.",
                "If we pick <code>a</code> and <code>b</code> optimally, they will be in the diameters of Tree 1 and Tree 2, respectively. Exactly which nodes of the diameter should we pick?",
                "<code>a</code> is the center of the diameter of tree 1, and <code>b</code> is the center of the diameter of tree 2."
            ],
            "rephrased": {
                "body": "Given two undirected trees represented by edge lists `edges1` (with 'n' nodes, numbered 0 to n-1) and `edges2` (with 'm' nodes, numbered 0 to m-1), the task is to connect one node from the first tree to one node from the second tree with a single new edge.  The goal is to find the minimum possible diameter of the resulting combined tree.\n\nThe diameter of a tree is defined as the length of the longest path between any two nodes in the tree.",
                "constraints": [
                    "1 <= n, m <= 10^5",
                    "edges1.length == n - 1",
                    "edges2.length == m - 1",
                    "edges1[i].length == edges2[i].length == 2",
                    "edges1[i] = [a_i, b_i]",
                    "0 <= a_i, b_i < n",
                    "edges2[i] = [u_i, v_i]",
                    "0 <= u_i, v_i < m",
                    "The input is generated such that edges1 and edges2 represent valid trees."
                ],
                "testcases": [
                    {
                        "input": "edges1 = [[0,1],[0,2],[0,3]], edges2 = [[0,1]]",
                        "output": "3",
                        "explanation": "Connecting node 0 from the first tree with any node from the second tree results in a combined tree with a diameter of 3. One such longest path could be from a leaf node of the first tree (reachable only through node 0) to one of the leaf nodes of the original tree2 (also only reachable through the connection of the nodes)"
                    },
                    {
                        "input": "edges1 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], edges2 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]",
                        "output": "5",
                        "explanation": "Connecting node 0 from the first tree with node 0 from the second tree results in a tree where a longest path has a length of 5."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-height-trees",
                "title": "Minimum Height Trees",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "tree-diameter",
                "title": "Tree Diameter",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Suppose that we connected node <code>a</code> in tree1 with node <code>b</code> in tree2. The diameter length of the resulting tree will be the largest of the following 3 values: \r\n<ol>\r\n<li>The diameter of tree 1.</li>\r\n<li>The diameter of tree 2.</li>\r\n<li>The length of the longest path that starts at node <code>a</code> and that is completely within Tree 1 + The length of the longest path that starts at node <code>b</code> and that is completely within Tree 2 + 1.</li>\r\n</ol> \r\nThe added one in the third value is due to the additional edge that we have added between trees 1 and 2.",
            "Values 1 and 2 are constant regardless of our choice of <code>a</code> and <code>b</code>. Therefore, we need to pick <code>a</code> and <code>b</code> in such a way that minimizes value 3.",
            "If we pick <code>a</code> and <code>b</code> optimally, they will be in the diameters of Tree 1 and Tree 2, respectively. Exactly which nodes of the diameter should we pick?",
            "<code>a</code> is the center of the diameter of tree 1, and <code>b</code> is the center of the diameter of tree 2."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumDiameterAfterMerge(vector<vector<int>>& edges1,\n                                vector<vector<int>>& edges2) {\n    const int diameter1 = getDiameter(edges1);\n    const int diameter2 = getDiameter(edges2);\n    const int combinedDiameter = (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1;\n    return max({diameter1, diameter2, combinedDiameter});\n  }\n\n private:\n  int getDiameter(const vector<vector<int>>& edges) {\n    const int n = edges.size() + 1;\n    vector<vector<int>> graph(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].push_back(v);\n      graph[v].push_back(u);\n    }\n\n    int maxDiameter = 0;\n    maxDepth(graph, 0, /*prev=*/-1, maxDiameter);\n    return maxDiameter;\n  }\n\n  // Similar to 1522. Diameter of N-Ary Tree\n  // Returns the maximum depth of the subtree rooted at u.\n  int maxDepth(const vector<vector<int>>& graph, int u, int prev,\n               int& maxDiameter) {\n    int maxSubDepth1 = 0;\n    int maxSubDepth2 = 0;\n    for (const int v : graph[u]) {\n      if (v == prev)\n        continue;\n      const int maxSubDepth = maxDepth(graph, v, u, maxDiameter);\n      if (maxSubDepth > maxSubDepth1) {\n        maxSubDepth2 = maxSubDepth1;\n        maxSubDepth1 = maxSubDepth;\n      } else if (maxSubDepth > maxSubDepth2) {\n        maxSubDepth2 = maxSubDepth;\n      }\n    }\n    maxDiameter = max(maxDiameter, maxSubDepth1 + maxSubDepth2);\n    return 1 + maxSubDepth1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n    final int diameter1 = getDiameter(edges1);\n    final int diameter2 = getDiameter(edges2);\n    final int combinedDiameter = (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1;\n    return Math.max(Math.max(diameter1, diameter2), combinedDiameter);\n  }\n\n  private int getDiameter(int[][] edges) {\n    final int n = edges.length + 1;\n    List<Integer>[] graph = new List[n];\n\n    for (int i = 0; i < n; i++)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph[u].add(v);\n      graph[v].add(u);\n    }\n\n    int[] maxDiameter = new int[1];\n    maxDepth(graph, 0, -1, maxDiameter);\n    return maxDiameter[0];\n  }\n\n  // Similar to 1522. Diameter of N-Ary Tree\n  // Returns the maximum depth of the subtree rooted at u.\n  private int maxDepth(List<Integer>[] graph, int u, int prev, int[] maxDiameter) {\n    int maxSubDepth1 = 0;\n    int maxSubDepth2 = 0;\n    for (final int v : graph[u]) {\n      if (v == prev)\n        continue;\n      final int maxSubDepth = maxDepth(graph, v, u, maxDiameter);\n      if (maxSubDepth > maxSubDepth1) {\n        maxSubDepth2 = maxSubDepth1;\n        maxSubDepth1 = maxSubDepth;\n      } else if (maxSubDepth > maxSubDepth2) {\n        maxSubDepth2 = maxSubDepth;\n      }\n    }\n    maxDiameter[0] = Math.max(maxDiameter[0], maxSubDepth1 + maxSubDepth2);\n    return 1 + maxSubDepth1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumDiameterAfterMerge(\n      self,\n      edges1: list[list[int]],\n      edges2: list[list[int]],\n  ) -> int:\n    diameter1 = self._getDiameter(edges1)\n    diameter2 = self._getDiameter(edges2)\n    combinedDiameter = (diameter1 + 1) // 2 + (diameter2 + 1) // 2 + 1\n    return max(diameter1, diameter2, combinedDiameter)\n\n  def _getDiameter(self, edges: list[list[int]]) -> int:\n    n = len(edges) + 1\n    graph = [[] for _ in range(n)]\n\n    for u, v in edges:\n      graph[u].append(v)\n      graph[v].append(u)\n\n    maxDiameter = [0]\n    self._maxDepth(graph, 0, -1, maxDiameter)\n    return maxDiameter[0]\n\n  # Similar to 1522. Diameter of N-Ary Tree\n  def _maxDepth(\n      self,\n      graph: list[list[int]],\n      u: int,\n      prev: int,\n      maxDiameter: list[int],\n  ) -> int:\n    \"\"\"Returns the maximum depth of the subtree rooted at u.\"\"\"\n    maxSubDepth1 = 0\n    maxSubDepth2 = 0\n    for v in graph[u]:\n      if v == prev:\n        continue\n      maxSubDepth = self._maxDepth(graph, v, u, maxDiameter)\n      if maxSubDepth > maxSubDepth1:\n        maxSubDepth2 = maxSubDepth1\n        maxSubDepth1 = maxSubDepth\n      elif maxSubDepth > maxSubDepth2:\n        maxSubDepth2 = maxSubDepth\n    maxDiameter[0] = max(maxDiameter[0], maxSubDepth1 + maxSubDepth2)\n    return 1 + maxSubDepth1\n",
                "lang_text": "py"
            }
        }
    }
}