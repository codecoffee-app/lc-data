{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "501",
            "title": "Find Mode in Binary Search Tree",
            "titleSlug": "find-mode-in-binary-search-tree",
            "content": "<p>Given the <code>root</code> of a binary search tree (BST) with duplicates, return <em>all the <a href=\"https://en.wikipedia.org/wiki/Mode_(statistics)\" target=\"_blank\">mode(s)</a> (i.e., the most frequently occurred element) in it</em>.</p>\n\n<p>If the tree has more than one mode, return them in <strong>any order</strong>.</p>\n\n<p>Assume a BST is defined as follows:</p>\n\n<ul>\n\t<li>The left subtree of a node contains only nodes with keys <strong>less than or equal to</strong> the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys <strong>greater than or equal to</strong> the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/11/mode-tree.jpg\" style=\"width: 142px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,2,2]\n<strong>Output:</strong> [2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3795,
            "dislikes": 766,
            "similarQuestions": "[{\"title\": \"Validate Binary Search Tree\", \"titleSlug\": \"validate-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"287.5K\", \"totalSubmission\": \"517K\", \"totalAcceptedRaw\": 287527, \"totalSubmissionRaw\": 516994, \"acRate\": \"55.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary search tree (BST) with duplicates, find all the modes (the most frequently occurring elements) in the BST. You can return the modes in any order.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 10<sup>4</sup>].",
                    "-10<sup>5</sup> <= Node.val <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "[1,null,2,2]",
                        "output": "[2]",
                        "explanation": "The value 2 appears twice, which is more frequent than the value 1, which appears once. Therefore, the mode is 2."
                    },
                    {
                        "input": "[0]",
                        "output": "[0]",
                        "explanation": "The value 0 appears once, which is the only value in the tree. Therefore, the mode is 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "validate-binary-search-tree",
                "title": "Validate Binary Search Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findMode(TreeNode* root) {\n    vector<int> ans;\n    int count = 0;\n    int maxCount = 0;\n\n    inorder(root, count, maxCount, ans);\n    return ans;\n  }\n\n private:\n  TreeNode* pred = nullptr;\n\n  void inorder(TreeNode* root, int& count, int& maxCount, vector<int>& ans) {\n    if (root == nullptr)\n      return;\n\n    inorder(root->left, count, maxCount, ans);\n    updateCount(root, count, maxCount, ans);\n    inorder(root->right, count, maxCount, ans);\n  }\n\n  void updateCount(TreeNode* root, int& count, int& maxCount,\n                   vector<int>& ans) {\n    if (pred && pred->val == root->val)\n      ++count;\n    else\n      count = 1;\n\n    if (count > maxCount) {\n      maxCount = count;\n      ans = {root->val};\n    } else if (count == maxCount) {\n      ans.push_back(root->val);\n    }\n\n    pred = root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] findMode(TreeNode root) {\n    List<Integer> ans = new ArrayList<>();\n    // count[0] := currCount\n    // count[1] := maxCount\n    int[] count = new int[2];\n\n    inorder(root, count, ans);\n    return ans.stream().mapToInt(Integer::intValue).toArray();\n  }\n\n  private TreeNode pred = null;\n\n  private void inorder(TreeNode root, int[] count, List<Integer> ans) {\n    if (root == null)\n      return;\n\n    inorder(root.left, count, ans);\n    updateCount(root, count, ans);\n    inorder(root.right, count, ans);\n  }\n\n  private void updateCount(TreeNode root, int[] count, List<Integer> ans) {\n    if (pred != null && pred.val == root.val)\n      ++count[0];\n    else\n      count[0] = 1;\n\n    if (count[0] > count[1]) {\n      count[1] = count[0];\n      ans.clear();\n      ans.add(root.val);\n    } else if (count[0] == count[1]) {\n      ans.add(root.val);\n    }\n\n    pred = root;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMode(self, root: Optional[TreeNode]) -> List[int]:\n    self.ans = []\n    self.pred = None\n    self.count = 0\n    self.maxCount = 0\n\n    def updateCount(root: Optional[TreeNode]) -> None:\n      if self.pred and self.pred.val == root.val:\n        self.count += 1\n      else:\n        self.count = 1\n\n      if self.count > self.maxCount:\n        self.maxCount = self.count\n        self.ans = [root.val]\n      elif self.count == self.maxCount:\n        self.ans.append(root.val)\n\n      self.pred = root\n\n    def inorder(root: Optional[TreeNode]) -> None:\n      if not root:\n        return\n\n      inorder(root.left)\n      updateCount(root)\n      inorder(root.right)\n\n    inorder(root)\n    return self.ans\n",
                "lang_text": "py"
            }
        }
    }
}