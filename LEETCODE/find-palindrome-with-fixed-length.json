{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2217",
            "title": "Find Palindrome With Fixed Length",
            "titleSlug": "find-palindrome-with-fixed-length",
            "content": "<p>Given an integer array <code>queries</code> and a <strong>positive</strong> integer <code>intLength</code>, return <em>an array</em> <code>answer</code> <em>where</em> <code>answer[i]</code> <em>is either the </em><code>queries[i]<sup>th</sup></code> <em>smallest <strong>positive palindrome</strong> of length</em> <code>intLength</code> <em>or</em> <code>-1</code><em> if no such palindrome exists</em>.</p>\n\n<p>A <strong>palindrome</strong> is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [1,2,3,4,5,90], intLength = 3\n<strong>Output:</strong> [101,111,121,131,141,999]\n<strong>Explanation:</strong>\nThe first few palindromes of length 3 are:\n101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ...\nThe 90<sup>th</sup> palindrome of length 3 is 999.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [2,4,6], intLength = 4\n<strong>Output:</strong> [1111,1331,1551]\n<strong>Explanation:</strong>\nThe first six palindromes of length 4 are:\n1001, 1111, 1221, 1331, 1441, and 1551.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= queries[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= intLength&nbsp;&lt;= 15</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 576,
            "dislikes": 256,
            "similarQuestions": "[{\"title\": \"Palindrome Number\", \"titleSlug\": \"palindrome-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Closest Palindrome\", \"titleSlug\": \"find-the-closest-palindrome\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Lexicographically Smallest Beautiful String\", \"titleSlug\": \"lexicographically-smallest-beautiful-string\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                }
            ],
            "stats": "{\"totalAccepted\": \"17.5K\", \"totalSubmission\": \"50.5K\", \"totalAcceptedRaw\": 17492, \"totalSubmissionRaw\": 50469, \"acRate\": \"34.7%\"}",
            "hints": [
                "For any value of queries[i] and intLength, how can you check if there exists at least queries[i] palindromes of length intLength?",
                "Since a palindrome reads the same forwards and backwards, consider how you can efficiently find the first half (ceil(intLength/2) digits) of the palindrome."
            ],
            "rephrased": {
                "body": "Given an integer array `queries` and a positive integer `intLength`, find the `queries[i]`-th smallest positive palindrome of length `intLength`. Return an array `answer` where `answer[i]` is the palindrome if it exists, otherwise -1. A palindrome is a number that reads the same backwards and forwards and cannot have leading zeros.",
                "constraints": [
                    "1 <= queries.length <= 5 * 10^4",
                    "1 <= queries[i] <= 10^9",
                    "1 <= intLength <= 15"
                ],
                "testcases": [
                    {
                        "input": "queries = [1,2,3,4,5,90], intLength = 3",
                        "output": "[101,111,121,131,141,999]",
                        "explanation": "The first few palindromes of length 3 are: 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ... The 90th palindrome of length 3 is 999."
                    },
                    {
                        "input": "queries = [2,4,6], intLength = 4",
                        "output": "[1111,1331,1551]",
                        "explanation": "The first six palindromes of length 4 are: 1001, 1111, 1221, 1331, 1441, and 1551."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "palindrome-number",
                "title": "Palindrome Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-the-closest-palindrome",
                "title": "Find the Closest Palindrome",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "lexicographically-smallest-beautiful-string",
                "title": "Lexicographically Smallest Beautiful String",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For any value of queries[i] and intLength, how can you check if there exists at least queries[i] palindromes of length intLength?",
            "Since a palindrome reads the same forwards and backwards, consider how you can efficiently find the first half (ceil(intLength/2) digits) of the palindrome."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<long long> kthPalindrome(vector<int>& queries, int intLength) {\n    const int start = pow(10, (intLength + 1) / 2 - 1);\n    const int end = pow(10, (intLength + 1) / 2);\n    const int mul = pow(10, intLength / 2);\n    vector<long long> ans;\n\n    for (const int query : queries)\n      if (start + query > end)\n        ans.push_back(-1);\n      else\n        ans.push_back(getKthPalindrome(quyer, start, mul, intLength));\n\n    return ans;\n  }\n\n private:\n  long long getKthPalindrome(int query, int start, int mul, int intLength) {\n    const long long prefix = start + query - 1;\n    return prefix * mul + reverse(intLength & 1 ? prefix / 10 : prefix);\n  }\n\n  long long reverse(int num) {\n    long long res = 0;\n    while (num) {\n      res = res * 10 + num % 10;\n      num /= 10;\n    }\n    return res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long[] kthPalindrome(int[] queries, int intLength) {\n    final int start = (int) Math.pow(10, (intLength + 1) / 2 - 1);\n    final int end = (int) Math.pow(10, (intLength + 1) / 2);\n    final int mul = (int) Math.pow(10, intLength / 2);\n    long[] ans = new long[queries.length];\n\n    for (int i = 0; i < queries.length; ++i)\n      if (start + queries[i] > end)\n        ans[i] = -1;\n      else\n        ans[i] = getKthPalindrome(queries[i], start, mul, intLength);\n\n    return ans;\n  }\n\n  private long getKthPalindrome(int q, int start, int mul, int intLength) {\n    final long prefix = start + q - 1;\n    return prefix * mul + reverse(intLength % 2 == 1 ? prefix / 10 : prefix);\n  }\n\n  long reverse(long num) {\n    long res = 0;\n    while (num > 0) {\n      res = res * 10 + num % 10;\n      num /= 10;\n    }\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def kthPalindrome(self, queries: List[int], intLength: int) -> List[int]:\n    start = pow(10, (intLength + 1) // 2 - 1)\n    end = pow(10, (intLength + 1) // 2)\n    mul = pow(10, intLength // 2)\n\n    def reverse(num: int) -> int:\n      res = 0\n      while num:\n        res = res * 10 + num % 10\n        num //= 10\n      return res\n\n    def getKthPalindrome(query: int) -> int:\n      prefix = start + query - 1\n      return prefix * mul + reverse(prefix // 10 if intLength & 1 else prefix)\n\n    return [-1 if start + query > end else getKthPalindrome(query)\n            for query in queries]\n",
                "lang_text": "py"
            }
        }
    }
}