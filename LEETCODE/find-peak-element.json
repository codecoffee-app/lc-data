{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "162",
            "title": "Find Peak Element",
            "titleSlug": "find-peak-element",
            "content": "<p>A peak element is an element that is strictly greater than its neighbors.</p>\n\n<p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, find a peak element, and return its index. If the array contains multiple peaks, return the index to <strong>any of the peaks</strong>.</p>\n\n<p>You may imagine that <code>nums[-1] = nums[n] = -&infin;</code>. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.</p>\n\n<p>You must write an algorithm that runs in <code>O(log n)</code> time.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 3 is a peak element and your function should return the index number 2.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,3,5,6,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>nums[i] != nums[i + 1]</code> for all valid <code>i</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 11140,
            "dislikes": 4540,
            "similarQuestions": "[{\"title\": \"Peak Index in a Mountain Array\", \"titleSlug\": \"peak-index-in-a-mountain-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find a Peak Element II\", \"titleSlug\": \"find-a-peak-element-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Pour Water Between Buckets to Make Water Levels Equal\", \"titleSlug\": \"pour-water-between-buckets-to-make-water-levels-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Hills and Valleys in an Array\", \"titleSlug\": \"count-hills-and-valleys-in-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Peaks\", \"titleSlug\": \"find-the-peaks\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 1210496, \"totalSubmissionRaw\": 2641296, \"acRate\": \"45.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums`, find a peak element and return its index. A peak element is strictly greater than its adjacent elements. You can imagine that `nums[-1] = nums[n] = -\u221e`. The algorithm must run in O(log n) time.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "-2<sup>31</sup> <= nums[i] <= 2<sup>31</sup> - 1",
                    "nums[i] != nums[i + 1] for all valid i"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,1]",
                        "output": "2",
                        "explanation": "The element 3 at index 2 is a peak element because it is greater than its neighbors 2 and 1."
                    },
                    {
                        "input": "[1,2,1,3,5,6,4]",
                        "output": "5",
                        "explanation": "The element 6 at index 5 is a peak element because it is greater than its neighbors 5 and 4. Another possible answer is index 1 where the peak element is 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "peak-index-in-a-mountain-array",
                "title": "Peak Index in a Mountain Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-a-peak-element-ii",
                "title": "Find a Peak Element II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "pour-water-between-buckets-to-make-water-levels-equal",
                "title": "Pour Water Between Buckets to Make Water Levels Equal",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "count-hills-and-valleys-in-an-array",
                "title": "Count Hills and Valleys in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-the-peaks",
                "title": "Find the Peaks",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findPeakElement(vector<int>& nums) {\n    int l = 0;\n    int r = nums.size() - 1;\n\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (nums[m] >= nums[m + 1])\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findPeakElement(int[] nums) {\n    int l = 0;\n    int r = nums.length - 1;\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (nums[m] >= nums[m + 1])\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findPeakElement(self, nums: List[int]) -> int:\n    l = 0\n    r = len(nums) - 1\n\n    while l < r:\n      m = (l + r) // 2\n      if nums[m] >= nums[m + 1]:\n        r = m\n      else:\n        l = m + 1\n\n    return l\n",
                "lang_text": "py"
            }
        }
    }
}