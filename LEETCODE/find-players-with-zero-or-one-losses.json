{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2225",
            "title": "Find Players With Zero or One Losses",
            "titleSlug": "find-players-with-zero-or-one-losses",
            "content": "<p>You are given an integer array <code>matches</code> where <code>matches[i] = [winner<sub>i</sub>, loser<sub>i</sub>]</code> indicates that the player <code>winner<sub>i</sub></code> defeated player <code>loser<sub>i</sub></code> in a match.</p>\n\n<p>Return <em>a list </em><code>answer</code><em> of size </em><code>2</code><em> where:</em></p>\n\n<ul>\n\t<li><code>answer[0]</code> is a list of all players that have <strong>not</strong> lost any matches.</li>\n\t<li><code>answer[1]</code> is a list of all players that have lost exactly <strong>one</strong> match.</li>\n</ul>\n\n<p>The values in the two lists should be returned in <strong>increasing</strong> order.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>You should only consider the players that have played <strong>at least one</strong> match.</li>\n\t<li>The testcases will be generated such that <strong>no</strong> two matches will have the <strong>same</strong> outcome.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]\n<strong>Output:</strong> [[1,2,10],[4,5,7,8]]\n<strong>Explanation:</strong>\nPlayers 1, 2, and 10 have not lost any matches.\nPlayers 4, 5, 7, and 8 each have lost one match.\nPlayers 3, 6, and 9 each have lost two matches.\nThus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matches = [[2,3],[1,3],[5,4],[6,4]]\n<strong>Output:</strong> [[1,2,5,6],[]]\n<strong>Explanation:</strong>\nPlayers 1, 2, 5, and 6 have not lost any matches.\nPlayers 3 and 4 each have lost two matches.\nThus, answer[0] = [1,2,5,6] and answer[1] = [].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= matches.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>matches[i].length == 2</code></li>\n\t<li><code>1 &lt;= winner<sub>i</sub>, loser<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>winner<sub>i</sub> != loser<sub>i</sub></code></li>\n\t<li>All <code>matches[i]</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1511,
            "dislikes": 96,
            "similarQuestions": "[{\"title\": \"Lowest Common Ancestor of a Binary Tree\", \"titleSlug\": \"lowest-common-ancestor-of-a-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"111.9K\", \"totalSubmission\": \"157.7K\", \"totalAcceptedRaw\": 111875, \"totalSubmissionRaw\": 157652, \"acRate\": \"71.0%\"}",
            "hints": [
                "Count the number of times a player loses while iterating through the matches."
            ],
            "rephrased": {
                "body": "Given an integer array `matches` where `matches[i] = [winner_i, loser_i]` indicates that player `winner_i` defeated player `loser_i` in a match, return a list `answer` of size 2 where:\n\n*   `answer[0]` is a list of all players that have not lost any matches.\n*   `answer[1]` is a list of all players that have lost exactly one match.\n\nThe values in the two lists should be returned in increasing order. Consider only players who have played at least one match. Assume no two matches have the same outcome.",
                "constraints": [
                    "1 <= matches.length <= 10^5",
                    "matches[i].length == 2",
                    "1 <= winner_i, loser_i <= 10^5",
                    "winner_i != loser_i",
                    "All matches[i] are unique."
                ],
                "testcases": [
                    {
                        "input": "[[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]",
                        "output": "[[1,2,10],[4,5,7,8]]",
                        "explanation": "Players 1, 2, and 10 have not lost any matches. Players 4, 5, 7, and 8 each have lost one match.  Players 3, 6, and 9 each have lost two matches."
                    },
                    {
                        "input": "[[2,3],[1,3],[5,4],[6,4]]",
                        "output": "[[1,2,5,6],[]]",
                        "explanation": "Players 1, 2, 5, and 6 have not lost any matches. Players 3 and 4 each have lost two matches."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
                "title": "Lowest Common Ancestor of a Binary Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Count the number of times a player loses while iterating through the matches."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> findWinners(vector<vector<int>>& matches) {\n    vector<vector<int>> ans(2);\n    map<int, int> lossesCount;\n\n    for (const vector<int>& m : matches) {\n      const int winner = m[0];\n      const int loser = m[1];\n      if (!lossesCount.count(winner))\n        lossesCount[winner] = 0;\n      ++lossesCount[loser];\n    }\n\n    for (const auto& [player, nLosses] : lossesCount)\n      if (nLosses < 2)\n        ans[nLosses].push_back(player);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> findWinners(int[][] matches) {\n    List<List<Integer>> ans = Arrays.asList(new ArrayList<>(), new ArrayList<>());\n    Map<Integer, Integer> lossesCount = new TreeMap<>();\n\n    for (int[] m : matches) {\n      final int winner = m[0];\n      final int loser = m[1];\n      if (!lossesCount.containsKey(winner))\n        lossesCount.put(winner, 0);\n      lossesCount.merge(loser, 1, Integer::sum);\n    }\n\n    for (final int player : lossesCount.keySet()) {\n      final int nLosses = lossesCount.get(player);\n      if (nLosses < 2)\n        ans.get(nLosses).add(player);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findWinners(self, matches: List[List[int]]) -> List[List[int]]:\n    ans = [[] for _ in range(2)]\n    lossesCount = collections.Counter()\n\n    for winner, loser in matches:\n      if winner not in lossesCount:\n        lossesCount[winner] = 0\n      lossesCount[loser] += 1\n\n    for player, nLosses in lossesCount.items():\n      if nLosses < 2:\n        ans[nLosses].append(player)\n\n    return [sorted(ans[0]), sorted(ans[1])]\n",
                "lang_text": "py"
            }
        }
    }
}