{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2971",
            "title": "Find Polygon With the Largest Perimeter",
            "titleSlug": "find-polygon-with-the-largest-perimeter",
            "content": "<p>You are given an array of <strong>positive</strong> integers <code>nums</code> of length <code>n</code>.</p>\n\n<p>A <strong>polygon</strong> is a closed plane figure that has at least <code>3</code> sides. The <strong>longest side</strong> of a polygon is <strong>smaller</strong> than the sum of its other sides.</p>\n\n<p>Conversely, if you have <code>k</code> (<code>k &gt;= 3</code>) <strong>positive</strong> real numbers <code>a<sub>1</sub></code>, <code>a<sub>2</sub></code>, <code>a<sub>3</sub></code>, ..., <code>a<sub>k</sub></code> where <code>a<sub>1</sub> &lt;= a<sub>2</sub> &lt;= a<sub>3</sub> &lt;= ... &lt;= a<sub>k</sub></code> <strong>and</strong> <code>a<sub>1</sub> + a<sub>2</sub> + a<sub>3</sub> + ... + a<sub>k-1</sub> &gt; a<sub>k</sub></code>, then there <strong>always</strong> exists a polygon with <code>k</code> sides whose lengths are <code>a<sub>1</sub></code>, <code>a<sub>2</sub></code>, <code>a<sub>3</sub></code>, ..., <code>a<sub>k</sub></code>.</p>\n\n<p>The <strong>perimeter</strong> of a polygon is the sum of lengths of its sides.</p>\n\n<p>Return <em>the <strong>largest</strong> possible <strong>perimeter</strong> of a <strong>polygon</strong> whose sides can be formed from</em> <code>nums</code>, <em>or</em> <code>-1</code> <em>if it is not possible to create a polygon</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,5,5]\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The only possible polygon that can be made from nums has 3 sides: 5, 5, and 5. The perimeter is 5 + 5 + 5 = 15.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,12,1,2,5,50,3]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The polygon with the largest perimeter which can be made from nums has 5 sides: 1, 1, 2, 3, and 5. The perimeter is 1 + 1 + 2 + 3 + 5 = 12.\nWe cannot have a polygon with either 12 or 50 as the longest side because it is not possible to include 2 or more smaller sides that have a greater sum than either of them.\nIt can be shown that the largest possible perimeter is 12.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,5,50]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no possible way to form a polygon from nums, as a polygon has at least 3 sides and 50 &gt; 5 + 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 761,
            "dislikes": 69,
            "similarQuestions": "[{\"title\": \"3Sum Smaller\", \"titleSlug\": \"3sum-smaller\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Valid Triangle Number\", \"titleSlug\": \"valid-triangle-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"130.8K\", \"totalSubmission\": \"197.9K\", \"totalAcceptedRaw\": 130838, \"totalSubmissionRaw\": 197860, \"acRate\": \"66.1%\"}",
            "hints": [
                "Sort the array.",
                "Use greedy algorithm. If we select an edge as the longest side, it is always better to pick up all the edges with length no longer than this longest edge.",
                "Note that the number of edges should not be less than 3."
            ],
            "rephrased": {
                "body": "Given an array of positive integers `nums`, find the largest possible perimeter of a polygon that can be formed using sides from `nums`. A polygon must have at least 3 sides, and the longest side must be strictly smaller than the sum of the remaining sides. If no such polygon can be formed, return -1.",
                "constraints": [
                    "3 <= n <= 10^5",
                    "1 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[5,5,5]",
                        "output": "15",
                        "explanation": "The only possible polygon that can be made from nums has 3 sides: 5, 5, and 5. The perimeter is 5 + 5 + 5 = 15."
                    },
                    {
                        "input": "[1,12,1,2,5,50,3]",
                        "output": "12",
                        "explanation": "The polygon with the largest perimeter which can be made from nums has 5 sides: 1, 1, 2, 3, and 5. The perimeter is 1 + 1 + 2 + 3 + 5 = 12. We cannot have a polygon with either 12 or 50 as the longest side because it is not possible to include 2 or more smaller sides that have a greater sum than either of them. It can be shown that the largest possible perimeter is 12."
                    },
                    {
                        "input": "[5,5,50]",
                        "output": "-1",
                        "explanation": "There is no possible way to form a polygon from nums, as a polygon has at least 3 sides and 50 > 5 + 5."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "3sum-smaller",
                "title": "3Sum Smaller",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "valid-triangle-number",
                "title": "Valid Triangle Number",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort the array.",
            "Use greedy algorithm. If we select an edge as the longest side, it is always better to pick up all the edges with length no longer than this longest edge.",
            "Note that the number of edges should not be less than 3."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long largestPerimeter(vector<int>& nums) {\n    long long prefix = accumulate(nums.begin(), nums.end(), 0LL);\n\n    ranges::sort(nums);\n\n    for (int i = nums.size() - 1; i >= 2; --i) {\n      prefix -= nums[i];\n      // Let nums[i] be the longest side. Check if the sum of all the edges with\n      // length no longer than nums[i] > nums[i].\n      if (prefix > nums[i])\n        return prefix + nums[i];\n    }\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long largestPerimeter(int[] nums) {\n    long prefix = Arrays.stream(nums).asLongStream().sum();\n\n    Arrays.sort(nums);\n\n    for (int i = nums.length - 1; i >= 2; --i) {\n      prefix -= nums[i];\n      // Let nums[i] be the longest side. Check if the sum of all the edges with\n      // length no longer than nums[i] > nums[i].\n      if (prefix > nums[i])\n        return prefix + nums[i];\n    }\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestPerimeter(self, nums: List[int]) -> int:\n    prefix = sum(nums)\n\n    for num in sorted(nums, reverse=True):\n      prefix -= num\n      # Let `num` be the longest side. Check if the sum of all the edges with\n      # length no longer than `num` > `num``.\n      if prefix > num:\n        return prefix + num\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}