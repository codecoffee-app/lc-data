{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3145",
            "title": "Find Products of Elements of Big Array",
            "titleSlug": "find-products-of-elements-of-big-array",
            "content": "<p>A <strong>powerful array</strong> for an integer <code>x</code> is the shortest sorted array of powers of two that sum up to <code>x</code>. For example, the powerful array for 11 is <code>[1, 2, 8]</code>.</p>\n\n<p>The array <code>big_nums</code> is created by concatenating the <strong>powerful</strong> arrays for every positive integer <code>i</code> in ascending order: 1, 2, 3, and so forth. Thus, <code>big_nums</code> starts as <code>[<u>1</u>, <u>2</u>, <u>1, 2</u>, <u>4</u>, <u>1, 4</u>, <u>2, 4</u>, <u>1, 2, 4</u>, <u>8</u>, ...]</code>.</p>\n\n<p>You are given a 2D integer matrix <code>queries</code>, where for <code>queries[i] = [from<sub>i</sub>, to<sub>i</sub>, mod<sub>i</sub>]</code> you should calculate <code>(big_nums[from<sub>i</sub>] * big_nums[from<sub>i</sub> + 1] * ... * big_nums[to<sub>i</sub>]) % mod<sub>i</sub></code><!-- notionvc: a71131cc-7b52-4786-9a4b-660d6d864f89 -->.</p>\n\n<p>Return an integer array <code>answer</code> such that <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">queries = [[1,3,7]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[4]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is one query.</p>\n\n<p><code>big_nums[1..3] = [2,1,2]</code>. The product of them is 4. The remainder of 4 under 7 is 4.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">queries = [[2,5,3],[7,7,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are two queries.</p>\n\n<p>First query: <code>big_nums[2..5] = [1,2,4,1]</code>. The product of them is 8. The remainder of 8 under 3 is 2.</p>\n\n<p>Second query: <code>big_nums[7] = 2</code>. The remainder of 2 under 4 is 2.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length &lt;= 500</code></li>\n\t<li><code>queries[i].length == 3</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt;= 10<sup>15</sup></code></li>\n\t<li><code>1 &lt;= queries[i][2] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 48,
            "dislikes": 13,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.7K\", \"totalSubmission\": \"6.5K\", \"totalAcceptedRaw\": 1705, \"totalSubmissionRaw\": 6529, \"acRate\": \"26.1%\"}",
            "hints": [
                "Find a way to calculate <code>f(n, i)</code> which is the total number of numbers in <code>[1, n]</code> when the <code>i<sup>th</sup></code> bit is set in <code>O(log(n))</code> time.",
                "Use binary search to find the last number for each query (and there might be one \u201cincomplete\u201d number for the query).",
                "Use a similar way to find the product (we only need to save the sum of exponents of power of <code>2</code>)."
            ],
            "rephrased": {
                "body": "Given a 2D integer matrix `queries`, where for each query `queries[i] = [from_i, to_i, mod_i]`, calculate the product of a subarray of `big_nums` modulo `mod_i`. The `big_nums` array is formed by concatenating powerful arrays for each positive integer i, where a powerful array for x is the shortest sorted array of powers of two that sum up to x. The result for each query should be the product `(big_nums[from_i] * big_nums[from_i + 1] * ... * big_nums[to_i]) % mod_i`.",
                "constraints": [
                    "1 <= queries.length <= 500",
                    "queries[i].length == 3",
                    "0 <= queries[i][0] <= queries[i][1] <= 10^15",
                    "1 <= queries[i][2] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[[1,3,7]]",
                        "output": "[4]",
                        "explanation": "The query asks for the product of big_nums[1..3] modulo 7. big_nums[1..3] is [2, 1, 2].  The product is 2 * 1 * 2 = 4. 4 modulo 7 is 4."
                    },
                    {
                        "input": "[[2,5,3],[7,7,4]]",
                        "output": "[2,2]",
                        "explanation": "The first query asks for the product of big_nums[2..5] modulo 3. big_nums[2..5] is [1, 2, 4, 1]. The product is 1 * 2 * 4 * 1 = 8. 8 modulo 3 is 2. The second query asks for big_nums[7] modulo 4. big_nums[7] is 2.  2 modulo 4 is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Find a way to calculate <code>f(n, i)</code> which is the total number of numbers in <code>[1, n]</code> when the <code>i<sup>th</sup></code> bit is set in <code>O(log(n))</code> time.",
            "Use binary search to find the last number for each query (and there might be one \u201cincomplete\u201d number for the query).",
            "Use a similar way to find the product (we only need to save the sum of exponents of power of <code>2</code>)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findProductsOfElements(vector<vector<long long>>& queries) {\n    vector<int> ans;\n\n    for (const vector<long long>& query : queries) {\n      const long a = query[0];\n      const long b = query[1];\n      const int mod = query[2];\n      const int product = modPow(2,\n                                 sumPowersFirstKBigNums(b + 1) -  //\n                                     sumPowersFirstKBigNums(a),\n                                 mod);\n      ans.push_back(product);\n    }\n\n    return ans;\n  }\n\n private:\n  // Returns the sum of powers of the first k numbers in `big_nums`.\n  long sumPowersFirstKBigNums(long k) {\n    const long num = firstNumberHavingSumBitsTillGreaterThan(k);\n    long sumPowers = sumPowersTill(num - 1);\n    long remainingCount = k - sumBitsTill(num - 1);\n    for (int power = 0; power < bitLength(num); ++power) {\n      if (num >> power & 1) {\n        sumPowers += power;\n        --remainingCount;\n        if (remainingCount == 0)\n          break;\n      }\n    }\n    return sumPowers;\n  }\n\n  // Returns the first number in [1, k] that has sumBitsTill(num) >= k.\n  long firstNumberHavingSumBitsTillGreaterThan(long k) {\n    long l = 1;\n    long r = k;\n    while (l < r) {\n      const long m = (l + r) / 2;\n      if (sumBitsTill(m) < k)\n        l = m + 1;\n      else\n        r = m;\n    }\n    return l;\n  }\n\n  // Returns sum(i.bit_count()), where 1 <= i <= x.\n  long sumBitsTill(long x) {\n    long sumBits = 0;\n    for (long powerOfTwo = 1; powerOfTwo <= x; powerOfTwo *= 2) {\n      sumBits += (x / (2L * powerOfTwo)) * powerOfTwo;\n      sumBits += max(0L, x % (2L * powerOfTwo) + 1 - powerOfTwo);\n    }\n    return sumBits;\n  }\n\n  // Returns sum(all powers of i), where 1 <= i <= x.\n  long sumPowersTill(long x) {\n    long sumPowers = 0;\n    long powerOfTwo = 1;\n    for (int power = 0; power < bitLength(x); ++power) {\n      sumPowers += (x / (2L * powerOfTwo)) * powerOfTwo * power;\n      sumPowers += max(0L, x % (2L * powerOfTwo) + 1 - powerOfTwo) * power;\n      powerOfTwo *= 2;\n    }\n    return sumPowers;\n  }\n\n  int modPow(long x, long n, int mod) {\n    if (n == 0)\n      return 1 % mod;\n    if (n % 2 == 1)\n      return x * modPow(x % mod, (n - 1), mod) % mod;\n    return modPow(x * x % mod, (n / 2), mod) % mod;\n  }\n\n  int bitLength(long x) {\n    return x == 0 ? 0 : 64 - __builtin_clzl(x);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] findProductsOfElements(long[][] queries) {\n    int[] ans = new int[queries.length];\n\n    for (int i = 0; i < queries.length; ++i) {\n      final long a = queries[i][0];\n      final long b = queries[i][1];\n      final int mod = (int) queries[i][2];\n      ans[i] = (int) modPow(2,\n                            sumPowersFirstKBigNums(b + 1) - //\n                                sumPowersFirstKBigNums(a),\n                            mod);\n    }\n\n    return ans;\n  }\n\n  // Returns the sum of powers of the first k numbers in `big_nums`.\n  private long sumPowersFirstKBigNums(long k) {\n    final long num = firstNumberHavingSumBitsTillGreaterThan(k);\n    long sumPowers = sumPowersTill(num - 1);\n    long remainingCount = k - sumBitsTill(num - 1);\n    for (int power = 0; power < bitLength(num); ++power) {\n      if ((num >> power & 1) == 1) {\n        sumPowers += power;\n        --remainingCount;\n        if (remainingCount == 0)\n          break;\n      }\n    }\n    return sumPowers;\n  }\n\n  // Returns the first number in [1, k] that has sumBitsTill(num) >= k.\n  private long firstNumberHavingSumBitsTillGreaterThan(long k) {\n    long l = 1;\n    long r = k;\n    while (l < r) {\n      final long m = (l + r) / 2;\n      if (sumBitsTill(m) < k)\n        l = m + 1;\n      else\n        r = m;\n    }\n    return l;\n  }\n\n  // Returns sum(i.bit_count()), where 1 <= i <= x.\n  private long sumBitsTill(long x) {\n    long sumBits = 0;\n    for (long powerOfTwo = 1; powerOfTwo <= x; powerOfTwo *= 2) {\n      sumBits += (x / (2 * powerOfTwo)) * powerOfTwo;\n      sumBits += Math.max(0, x % (2 * powerOfTwo) + 1 - powerOfTwo);\n    }\n    return sumBits;\n  }\n\n  // Returns sum(all powers of i), where 1 <= i <= x.\n  private long sumPowersTill(long x) {\n    long sumPowers = 0;\n    long powerOfTwo = 1;\n    for (int power = 0; power < bitLength(x); ++power) {\n      sumPowers += (x / (2 * powerOfTwo)) * powerOfTwo * power;\n      sumPowers += Math.max(0, x % (2 * powerOfTwo) + 1 - powerOfTwo) * power;\n      powerOfTwo *= 2;\n    }\n    return sumPowers;\n  }\n\n  private long modPow(long x, long n, int mod) {\n    if (n == 0)\n      return 1 % mod;\n    if (n % 2 == 1)\n      return x * modPow(x % mod, (n - 1), mod) % mod;\n    return modPow(x * x % mod, (n / 2), mod) % mod;\n  }\n\n  private int bitLength(long x) {\n    return x == 0 ? 0 : 64 - Long.numberOfLeadingZeros(x);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findProductsOfElements(self, queries: List[List[int]]) -> List[int]:\n    def sumBitsTill(x: int) -> int:\n      \"\"\"Returns sum(i.bit_count()), where 1 <= i <= x.\"\"\"\n      sumBits = 0\n      powerOfTwo = 1\n      while powerOfTwo <= x:\n        sumBits += (x // (2 * powerOfTwo)) * powerOfTwo\n        sumBits += max(0, x % (2 * powerOfTwo) + 1 - powerOfTwo)\n        powerOfTwo *= 2\n      return sumBits\n\n    def sumPowersTill(x: int) -> int:\n      \"\"\"Returns sum(all powers of i), where 1 <= i <= x.\"\"\"\n      sumPowers = 0\n      powerOfTwo = 1\n      for power in range(x.bit_length()):\n        sumPowers += (x // (2 * powerOfTwo)) * powerOfTwo * power\n        sumPowers += max(0, x % (2 * powerOfTwo) + 1 - powerOfTwo) * power\n        powerOfTwo *= 2\n      return sumPowers\n\n    def sumPowersFirstKBigNums(k: int) -> int:\n      \"\"\"Returns the sum of powers of the first k numbers in `big_nums`.\"\"\"\n      # Find the first number in [1, k] that has sumBitsTill(num) >= k.\n      num = bisect.bisect_left(range(k), k, key=sumBitsTill)\n      sumPowers = sumPowersTill(num - 1)\n      remainingCount = k - sumBitsTill(num - 1)\n      for power in range(num.bit_length()):\n        if num >> power & 1:\n          sumPowers += power\n          remainingCount -= 1\n          if remainingCount == 0:\n            break\n      return sumPowers\n\n    return [pow(2,\n                sumPowersFirstKBigNums(b + 1) -\n                sumPowersFirstKBigNums(a), mod)\n            for a, b, mod in queries]\n",
                "lang_text": "py"
            }
        }
    }
}