{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2273",
            "title": "Find Resultant Array After Removing Anagrams",
            "titleSlug": "find-resultant-array-after-removing-anagrams",
            "content": "<p>You are given a <strong>0-indexed</strong> string array <code>words</code>, where <code>words[i]</code> consists of lowercase English letters.</p>\n\n<p>In one operation, select any index <code>i</code> such that <code>0 &lt; i &lt; words.length</code> and <code>words[i - 1]</code> and <code>words[i]</code> are <strong>anagrams</strong>, and <strong>delete</strong> <code>words[i]</code> from <code>words</code>. Keep performing this operation as long as you can select an index that satisfies the conditions.</p>\n\n<p>Return <code>words</code> <em>after performing all operations</em>. It can be shown that selecting the indices for each operation in <strong>any</strong> arbitrary order will lead to the same result.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, <code>&quot;dacb&quot;</code> is an anagram of <code>&quot;abdc&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abba&quot;,&quot;baba&quot;,&quot;bbaa&quot;,&quot;cd&quot;,&quot;cd&quot;]\n<strong>Output:</strong> [&quot;abba&quot;,&quot;cd&quot;]\n<strong>Explanation:</strong>\nOne of the ways we can obtain the resultant array is by using the following operations:\n- Since words[2] = &quot;bbaa&quot; and words[1] = &quot;baba&quot; are anagrams, we choose index 2 and delete words[2].\n  Now words = [&quot;abba&quot;,&quot;baba&quot;,&quot;cd&quot;,&quot;cd&quot;].\n- Since words[1] = &quot;baba&quot; and words[0] = &quot;abba&quot; are anagrams, we choose index 1 and delete words[1].\n  Now words = [&quot;abba&quot;,&quot;cd&quot;,&quot;cd&quot;].\n- Since words[2] = &quot;cd&quot; and words[1] = &quot;cd&quot; are anagrams, we choose index 2 and delete words[2].\n  Now words = [&quot;abba&quot;,&quot;cd&quot;].\nWe can no longer perform any operations, so [&quot;abba&quot;,&quot;cd&quot;] is the final answer.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]\n<strong>Explanation:</strong>\nNo two adjacent strings in words are anagrams of each other, so no operations are performed.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 612,
            "dislikes": 160,
            "similarQuestions": "[{\"title\": \"Group Anagrams\", \"titleSlug\": \"group-anagrams\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Valid Anagram\", \"titleSlug\": \"valid-anagram\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"52K\", \"totalSubmission\": \"89.8K\", \"totalAcceptedRaw\": 52027, \"totalSubmissionRaw\": 89778, \"acRate\": \"58.0%\"}",
            "hints": [
                "Instead of removing each repeating anagram, try to find all the strings in words which will not be present in the final answer.",
                "For every index i, find the largest index j < i such that words[j] will be present in the final answer.",
                "Check if words[i] and words[j] are anagrams. If they are, then it can be confirmed that words[i] will not be present in the final answer."
            ],
            "rephrased": {
                "body": "Given a 0-indexed string array `words`, where each element consists of lowercase English letters, perform operations to remove anagrams. In one operation, select an index `i` (where 0 < i < words.length) such that `words[i - 1]` and `words[i]` are anagrams. Then, delete `words[i]` from the array. Continue these operations as long as such an index exists. Return the final `words` array after all possible operations have been performed.",
                "constraints": [
                    "1 <= words.length <= 100",
                    "1 <= words[i].length <= 10",
                    "words[i] consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "[\"abba\",\"baba\",\"bbaa\",\"cd\",\"cd\"]",
                        "output": "[\"abba\",\"cd\"]",
                        "explanation": "Initially, words = [\"abba\",\"baba\",\"bbaa\",\"cd\",\"cd\"].\n- \"baba\" and \"bbaa\" are anagrams, so remove \"bbaa\". words = [\"abba\",\"baba\",\"cd\",\"cd\"].\n- \"abba\" and \"baba\" are anagrams, so remove \"baba\". words = [\"abba\",\"cd\",\"cd\"].\n- \"cd\" and \"cd\" are anagrams, so remove the second \"cd\". words = [\"abba\",\"cd\"].\nNo more anagrams exist."
                    },
                    {
                        "input": "[\"a\",\"b\",\"c\",\"d\",\"e\"]",
                        "output": "[\"a\",\"b\",\"c\",\"d\",\"e\"]",
                        "explanation": "No adjacent strings are anagrams, so no operations are performed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "group-anagrams",
                "title": "Group Anagrams",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "valid-anagram",
                "title": "Valid Anagram",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Instead of removing each repeating anagram, try to find all the strings in words which will not be present in the final answer.",
            "For every index i, find the largest index j < i such that words[j] will be present in the final answer.",
            "Check if words[i] and words[j] are anagrams. If they are, then it can be confirmed that words[i] will not be present in the final answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> removeAnagrams(vector<string>& words) {\n    vector<string> ans;\n\n    for (int i = 0; i < words.size();) {\n      int j = i + 1;\n      while (j < words.size() && isAnagram(words[i], words[j]))\n        ++j;\n      ans.push_back(words[i]);\n      i = j;\n    }\n\n    return ans;\n  }\n\n private:\n  bool isAnagram(const string& a, const string& b) {\n    if (a.length() != b.length())\n      return false;\n\n    vector<int> count(26);\n\n    for (const char c : a)\n      ++count[c - 'a'];\n\n    for (const char c : b)\n      --count[c - 'a'];\n\n    return all_of(count.begin(), count.end(),\n                  [](const int c) { return c == 0; });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> removeAnagrams(String[] words) {\n    List<String> ans = new ArrayList<>();\n\n    for (int i = 0; i < words.length;) {\n      int j = i + 1;\n      while (j < words.length && isAnagram(words[i], words[j]))\n        ++j;\n      ans.add(words[i]);\n      i = j;\n    }\n\n    return ans;\n  }\n\n  private boolean isAnagram(final String a, final String b) {\n    if (a.length() != b.length())\n      return false;\n\n    int[] count = new int[26];\n\n    for (final char c : a.toCharArray())\n      ++count[c - 'a'];\n\n    for (final char c : b.toCharArray())\n      --count[c - 'a'];\n\n    return Arrays.stream(count).allMatch(c -> c == 0);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def removeAnagrams(self, words: List[str]) -> List[str]:\n    ans = []\n\n    def isAnagram(a: str, b: str) -> bool:\n      count = collections.Counter(a)\n      count.subtract(collections.Counter(b))\n      return all(value == 0 for value in count.values())\n\n    i = 0\n    while i < len(words):\n      j = i + 1\n      while j < len(words) and isAnagram(words[i], words[j]):\n        j += 1\n      ans.append(words[i])\n      i = j\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}