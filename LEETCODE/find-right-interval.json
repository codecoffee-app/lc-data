{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "436",
            "title": "Find Right Interval",
            "titleSlug": "find-right-interval",
            "content": "<p>You are given an array of <code>intervals</code>, where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> and each <code>start<sub>i</sub></code> is <strong>unique</strong>.</p>\n\n<p>The <strong>right interval</strong> for an interval <code>i</code> is an interval <code>j</code> such that <code>start<sub>j</sub> &gt;= end<sub>i</sub></code> and <code>start<sub>j</sub></code> is <strong>minimized</strong>. Note that <code>i</code> may equal <code>j</code>.</p>\n\n<p>Return <em>an array of <strong>right interval</strong> indices for each interval <code>i</code></em>. If no <strong>right interval</strong> exists for interval <code>i</code>, then put <code>-1</code> at index <code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2]]\n<strong>Output:</strong> [-1]\n<strong>Explanation:</strong> There is only one interval in the collection, so it outputs -1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[3,4],[2,3],[1,2]]\n<strong>Output:</strong> [-1,0,1]\n<strong>Explanation:</strong> There is no right interval for [3,4].\nThe right interval for [2,3] is [3,4] since start<sub>0</sub> = 3 is the smallest start that is &gt;= end<sub>1</sub> = 3.\nThe right interval for [1,2] is [2,3] since start<sub>1</sub> = 2 is the smallest start that is &gt;= end<sub>2</sub> = 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[2,3],[3,4]]\n<strong>Output:</strong> [-1,2,-1]\n<strong>Explanation:</strong> There is no right interval for [1,4] and [3,4].\nThe right interval for [2,3] is [3,4] since start<sub>2</sub> = 3 is the smallest start that is &gt;= end<sub>1</sub> = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li>The start point of each interval is <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2047,
            "dislikes": 329,
            "similarQuestions": "[{\"title\": \"Data Stream as Disjoint Intervals\", \"titleSlug\": \"data-stream-as-disjoint-intervals\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"105.9K\", \"totalSubmission\": \"205K\", \"totalAcceptedRaw\": 105884, \"totalSubmissionRaw\": 205002, \"acRate\": \"51.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of intervals, where each interval consists of a start and end point, find the right interval for each interval. The right interval for interval 'i' is an interval 'j' such that the start point of 'j' is greater than or equal to the end point of 'i', and the start point of 'j' is the smallest possible value that satisfies this condition. Return an array containing the indices of the right intervals for each interval. If a right interval does not exist for a particular interval, then the corresponding element in the returned array should be -1.",
                "constraints": [
                    "1 <= intervals.length <= 2 * 10^4",
                    "intervals[i].length == 2",
                    "-10^6 <= start_i <= end_i <= 10^6",
                    "The start point of each interval is unique."
                ],
                "testcases": [
                    {
                        "input": "[[1,2]]",
                        "output": "[-1]",
                        "explanation": "There is only one interval, so no right interval exists. Therefore, the output is -1."
                    },
                    {
                        "input": "[[3,4],[2,3],[1,2]]",
                        "output": "[-1,0,1]",
                        "explanation": "For [3,4], no right interval exists. For [2,3], the right interval is [3,4] (index 0). For [1,2], the right interval is [2,3] (index 1)."
                    },
                    {
                        "input": "[[1,4],[2,3],[3,4]]",
                        "output": "[-1,2,-1]",
                        "explanation": "For [1,4], no right interval exists. For [2,3], the right interval is [3,4] (index 2). For [3,4], no right interval exists."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "data-stream-as-disjoint-intervals",
                "title": "Data Stream as Disjoint Intervals",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findRightInterval(vector<vector<int>>& intervals) {\n    vector<int> ans;\n    map<int, int> startToIndex;\n\n    for (int i = 0; i < intervals.size(); ++i)\n      startToIndex[intervals[i][0]] = i;\n\n    for (const vector<int>& interval : intervals) {\n      const auto it = startToIndex.lower_bound(interval[1]);\n      if (it == startToIndex.cend())\n        ans.push_back(-1);\n      else\n        ans.push_back(it->second);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] findRightInterval(int[][] intervals) {\n    final int n = intervals.length;\n\n    int[] ans = new int[n];\n    java.util.NavigableMap<Integer, Integer> startToIndex = new TreeMap<>();\n\n    for (int i = 0; i < n; ++i)\n      startToIndex.put(intervals[i][0], i);\n\n    for (int i = 0; i < n; ++i) {\n      Map.Entry<Integer, Integer> entry = startToIndex.ceilingEntry(intervals[i][1]);\n      if (entry == null)\n        ans[i] = -1;\n      else\n        ans[i] = entry.getValue();\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}