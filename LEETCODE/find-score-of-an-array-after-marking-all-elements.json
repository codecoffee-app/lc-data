{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2593",
            "title": "Find Score of an Array After Marking All Elements",
            "titleSlug": "find-score-of-an-array-after-marking-all-elements",
            "content": "<p>You are given an array <code>nums</code> consisting of positive integers.</p>\n\n<p>Starting with <code>score = 0</code>, apply the following algorithm:</p>\n\n<ul>\n\t<li>Choose the smallest integer of the array that is not marked. If there is a tie, choose the one with the smallest index.</li>\n\t<li>Add the value of the chosen integer to <code>score</code>.</li>\n\t<li>Mark <strong>the chosen element and its two adjacent elements if they exist</strong>.</li>\n\t<li>Repeat until all the array elements are marked.</li>\n</ul>\n\n<p>Return <em>the score you get after applying the above algorithm</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,3,4,5,2]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> We mark the elements as follows:\n- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [<u>2</u>,<u>1</u>,<u>3</u>,4,5,2].\n- 2 is the smallest unmarked element, so we mark it and its left adjacent element: [<u>2</u>,<u>1</u>,<u>3</u>,4,<u>5</u>,<u>2</u>].\n- 4 is the only remaining unmarked element, so we mark it: [<u>2</u>,<u>1</u>,<u>3</u>,<u>4</u>,<u>5</u>,<u>2</u>].\nOur score is 1 + 2 + 4 = 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,5,1,3,2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> We mark the elements as follows:\n- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,3,<u>5</u>,<u>1</u>,<u>3</u>,2].\n- 2 is the smallest unmarked element, since there are two of them, we choose the left-most one, so we mark the one at index 0 and its right adjacent element: [<u>2</u>,<u>3</u>,<u>5</u>,<u>1</u>,<u>3</u>,2].\n- 2 is the only remaining unmarked element, so we mark it: [<u>2</u>,<u>3</u>,<u>5</u>,<u>1</u>,<u>3</u>,<u>2</u>].\nOur score is 1 + 2 + 2 = 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 337,
            "dislikes": 4,
            "similarQuestions": "[{\"title\": \"Sort Integers by The Power Value\", \"titleSlug\": \"sort-integers-by-the-power-value\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.2K\", \"totalSubmission\": \"31.1K\", \"totalAcceptedRaw\": 16195, \"totalSubmissionRaw\": 31146, \"acRate\": \"52.0%\"}",
            "hints": [
                "Try simulating the process of marking the elements and their adjacent.",
                "If there is an element that was already marked, then you skip it."
            ],
            "rephrased": {
                "body": "Given an array `nums` of positive integers, calculate a score using the following algorithm:\n\n1.  Initialize `score = 0`.\n2.  Iteratively select the smallest unmarked integer in `nums`. If multiple such integers exist, choose the one with the smallest index.\n3.  Add the value of the chosen integer to `score`.\n4.  Mark the chosen integer and its immediate neighbors (if they exist) as marked.\n5.  Repeat steps 2-4 until all elements in `nums` are marked.\n\nReturn the final `score`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2,1,3,4,5,2]",
                        "output": "7",
                        "explanation": "The algorithm proceeds as follows:\n- 1 is the smallest unmarked element. Score = 1. Marked elements: [2,1,3]. Array becomes [M,M,M,4,5,2] where M indicates a marked element.\n- 2 is the smallest unmarked element. Score = 1 + 2 = 3. Marked elements: [5,2]. Array becomes [M,M,M,4,M,M].\n- 4 is the only remaining unmarked element. Score = 3 + 4 = 7. Marked element: [4]. Array becomes [M,M,M,M,M,M].\nTherefore, the final score is 7."
                    },
                    {
                        "input": "[2,3,5,1,3,2]",
                        "output": "5",
                        "explanation": "The algorithm proceeds as follows:\n- 1 is the smallest unmarked element. Score = 1. Marked elements: [5,1,3]. Array becomes [2,3,M,M,M,2] where M indicates a marked element.\n- 2 is the smallest unmarked element, and we choose the left-most one at index 0. Score = 1 + 2 = 3. Marked elements: [2,3]. Array becomes [M,M,M,M,M,2].\n- 2 is the only remaining unmarked element. Score = 3 + 2 = 5. Marked element [2]. Array becomes [M,M,M,M,M,M].\nTherefore, the final score is 5."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "sort-integers-by-the-power-value",
                "title": "Sort Integers by The Power Value",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try simulating the process of marking the elements and their adjacent.",
            "If there is an element that was already marked, then you skip it."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long findScore(vector<int>& nums) {\n    long long ans = 0;\n    set<pair<int, int>> numAndIndices;\n    vector<bool> seen(nums.size());\n\n    for (int i = 0; i < nums.size(); ++i)\n      numAndIndices.insert({nums[i], i});\n\n    for (const auto& [num, i] : numAndIndices) {\n      if (seen[i])\n        continue;\n      if (i > 0)\n        seen[i - 1] = true;\n      if (i + 1 < nums.size())\n        seen[i + 1] = true;\n      seen[i] = true;\n      ans += num;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long findScore(int[] nums) {\n    long ans = 0;\n    TreeSet<Pair<Integer, Integer>> numAndIndices =\n        new TreeSet<>((a, b)\n                          -> a.getKey().equals(b.getKey()) ? a.getValue() - b.getValue()\n                                                           : a.getKey() - b.getKey());\n    boolean[] seen = new boolean[nums.length];\n\n    for (int i = 0; i < nums.length; ++i)\n      numAndIndices.add(new Pair<>(nums[i], i));\n\n    for (Pair<Integer, Integer> pair : numAndIndices) {\n      final int num = pair.getKey();\n      final int i = pair.getValue();\n      if (seen[i])\n        continue;\n      if (i > 0)\n        seen[i - 1] = true;\n      if (i + 1 < nums.length)\n        seen[i + 1] = true;\n      seen[i] = true;\n      ans += num;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findScore(self, nums: List[int]) -> int:\n    ans = 0\n    seen = set()\n\n    for num, i in sorted([(num, i) for i, num in enumerate(nums)]):\n      if i in seen:\n        continue\n      seen.add(i - 1)\n      seen.add(i + 1)\n      seen.add(i)\n      ans += num\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}