{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1606",
            "title": "Find Servers That Handled Most Number of Requests",
            "titleSlug": "find-servers-that-handled-most-number-of-requests",
            "content": "<p>You have <code>k</code> servers numbered from <code>0</code> to <code>k-1</code> that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but <strong>cannot handle more than one request at a time</strong>. The requests are assigned to servers according to a specific algorithm:</p>\n\n<ul>\n\t<li>The <code>i<sup>th</sup></code> (0-indexed) request arrives.</li>\n\t<li>If all servers are busy, the request is dropped (not handled at all).</li>\n\t<li>If the <code>(i % k)<sup>th</sup></code> server is available, assign the request to that server.</li>\n\t<li>Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the <code>i<sup>th</sup></code> server is busy, try to assign the request to the <code>(i+1)<sup>th</sup></code> server, then the <code>(i+2)<sup>th</sup></code> server, and so on.</li>\n</ul>\n\n<p>You are given a <strong>strictly increasing</strong> array <code>arrival</code> of positive integers, where <code>arrival[i]</code> represents the arrival time of the <code>i<sup>th</sup></code> request, and another array <code>load</code>, where <code>load[i]</code> represents the load of the <code>i<sup>th</sup></code> request (the time it takes to complete). Your goal is to find the <strong>busiest server(s)</strong>. A server is considered <strong>busiest</strong> if it handled the most number of requests successfully among all the servers.</p>\n\n<p>Return <em>a list containing the IDs (0-indexed) of the <strong>busiest server(s)</strong></em>. You may return the IDs in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/08/load-1.png\" style=\"width: 389px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] \n<strong>Output:</strong> [1] \n<strong>Explanation:</strong> \nAll of the servers start out available.\nThe first 3 requests are handled by the first 3 servers in order.\nRequest 3 comes in. Server 0 is busy, so it&#39;s assigned to the next available server, which is 1.\nRequest 4 comes in. It cannot be handled since all servers are busy, so it is dropped.\nServers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, arrival = [1,2,3,4], load = [1,2,1,2]\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> \nThe first 3 requests are handled by first 3 servers.\nRequest 3 comes in. It is handled by server 0 since the server is available.\nServer 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, arrival = [1,2,3], load = [10,12,11]\n<strong>Output:</strong> [0,1,2]\n<strong>Explanation:</strong> Each server handles a single request, so they are all considered the busiest.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= arrival.length, load.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>arrival.length == load.length</code></li>\n\t<li><code>1 &lt;= arrival[i], load[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>arrival</code> is <strong>strictly increasing</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 574,
            "dislikes": 24,
            "similarQuestions": "[{\"title\": \"Meeting Rooms III\", \"titleSlug\": \"meeting-rooms-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.3K\", \"totalSubmission\": \"35.4K\", \"totalAcceptedRaw\": 15346, \"totalSubmissionRaw\": 35350, \"acRate\": \"43.4%\"}",
            "hints": [
                "To speed up the next available server search, keep track of the available servers in a sorted structure such as an ordered set.",
                "To determine if a server is available, keep track of the end times for each task in a heap and add the server to the available set once the soonest task ending time is less than or equal to the next task to add."
            ],
            "rephrased": {
                "body": "You have `k` servers, numbered from 0 to `k-1`, handling requests. Each server can handle only one request at a time, though they have infinite capacity otherwise. Requests are assigned as follows:\n\n1.  The `i`th request arrives.\n2.  If all servers are busy, the request is dropped.\n3.  If server `(i % k)` is available, assign the request to it.\n4.  Otherwise, assign the request to the next available server, wrapping around to server 0 if needed.\n\nGiven `arrival` times of requests and `load` (processing time) for each request, find the IDs of the busiest servers (servers that handled the most requests).",
                "constraints": [
                    "1 <= k <= 10^5",
                    "1 <= arrival.length, load.length <= 10^5",
                    "arrival.length == load.length",
                    "1 <= arrival[i], load[i] <= 10^9",
                    "arrival is strictly increasing."
                ],
                "testcases": [
                    {
                        "input": "k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3]",
                        "output": "[1]",
                        "explanation": "Initially, all servers are available. The first three requests are handled by servers 0, 1, and 2 respectively. The fourth request arrives when server 0 is busy, so it is assigned to server 1. The fifth request arrives when all servers are busy and is therefore dropped. Server 1 handles two requests, while servers 0 and 2 handle one request each. Thus, server 1 is the busiest."
                    },
                    {
                        "input": "k = 3, arrival = [1,2,3,4], load = [1,2,1,2]",
                        "output": "[0]",
                        "explanation": "The first three requests are assigned to servers 0, 1, and 2, respectively. The fourth request arrives when server 0 is available, so it is assigned to server 0. Server 0 handles two requests, while servers 1 and 2 handle one request each. Therefore, server 0 is the busiest."
                    },
                    {
                        "input": "k = 3, arrival = [1,2,3], load = [10,12,11]",
                        "output": "[0,1,2]",
                        "explanation": "Each server handles one request. Thus, all servers are considered busiest."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "meeting-rooms-iii",
                "title": "Meeting Rooms III",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "To speed up the next available server search, keep track of the available servers in a sorted structure such as an ordered set.",
            "To determine if a server is available, keep track of the end times for each task in a heap and add the server to the available set once the soonest task ending time is less than or equal to the next task to add."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> busiestServers(int k, vector<int>& arrival, vector<int>& load) {\n    vector<int> ans;\n    vector<int> times(k);\n    set<int> idleServers;\n    // (endTime, server)\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> minHeap;\n\n    for (int i = 0; i < k; ++i)\n      idleServers.insert(i);\n\n    for (int i = 0; i < arrival.size(); ++i) {\n      // Pop all servers that are available now.\n      while (!minHeap.empty() && minHeap.top().first <= arrival[i]) {\n        idleServers.insert(minHeap.top().second);\n        minHeap.pop();\n      }\n      // Get next available server.\n      const int server = getNextAvailableServer(idleServers, i, k);\n      if (server == -1)\n        continue;\n      ++times[server];\n      minHeap.emplace(arrival[i] + load[i], server);\n      idleServers.erase(server);\n    }\n\n    const int busiest = *max_element(times.begin(), times.end());\n    for (int i = 0; i < k; ++i)\n      if (times[i] == busiest)\n        ans.push_back(i);\n    return ans;\n  }\n\n private:\n  int getNextAvailableServer(const set<int>& idleServers, int ithRequest,\n                             int k) {\n    if (idleServers.empty())\n      return -1;\n    const auto it = idleServers.lower_bound(ithRequest % k);\n    return it == idleServers.cend() ? *idleServers.begin() : *it;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> busiestServers(int k, int[] arrival, int[] load) {\n    List<Integer> ans = new ArrayList<>();\n    int[] times = new int[k];\n    TreeSet<Integer> idleServers = new TreeSet<>();\n    // (endTime, server)\n    Queue<Pair<Integer, Integer>> minHeap = new PriorityQueue<>(Comparator.comparing(Pair::getKey));\n\n    for (int i = 0; i < k; ++i)\n      idleServers.add(i);\n\n    for (int i = 0; i < arrival.length; ++i) {\n      // Pop all servers that are available now.\n      while (!minHeap.isEmpty() && minHeap.peek().getKey() <= arrival[i]) {\n        idleServers.add(minHeap.peek().getValue());\n        minHeap.poll();\n      }\n      // Get next available server.\n      final int server = getNextAvailableServer(idleServers, i, k);\n      if (server == -1)\n        continue;\n      ++times[server];\n      minHeap.offer(new Pair<>(arrival[i] + load[i], server));\n      idleServers.remove(server);\n    }\n\n    final int busiest = Arrays.stream(times).max().getAsInt();\n    for (int i = 0; i < k; ++i)\n      if (times[i] == busiest)\n        ans.add(i);\n    return ans;\n  }\n\n  private int getNextAvailableServer(TreeSet<Integer> idleServers, int ithRequest, int k) {\n    if (idleServers.isEmpty())\n      return -1;\n    Integer server = idleServers.ceiling(ithRequest % k);\n    return server == null ? idleServers.first() : server;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}