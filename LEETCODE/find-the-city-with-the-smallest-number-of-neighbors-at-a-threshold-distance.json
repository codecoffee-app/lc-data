{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1334",
            "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
            "titleSlug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
            "content": "<p>There are <code>n</code> cities numbered from <code>0</code> to <code>n-1</code>. Given the array <code>edges</code> where <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]</code> represents a bidirectional and weighted edge between cities <code>from<sub>i</sub></code> and <code>to<sub>i</sub></code>, and given the integer <code>distanceThreshold</code>.</p>\n\n<p>Return the city with the smallest number of cities that are reachable through some path and whose distance is <strong>at most</strong> <code>distanceThreshold</code>, If there are multiple such cities, return the city with the greatest number.</p>\n\n<p>Notice that the distance of a path connecting cities <em><strong>i</strong></em> and <em><strong>j</strong></em> is equal to the sum of the edges&#39; weights along that path.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/16/find_the_city_01.png\" style=\"width: 300px; height: 225px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>The figure above describes the graph.&nbsp;\nThe neighboring cities at a distanceThreshold = 4 for each city are:\nCity 0 -&gt; [City 1, City 2]&nbsp;\nCity 1 -&gt; [City 0, City 2, City 3]&nbsp;\nCity 2 -&gt; [City 0, City 1, City 3]&nbsp;\nCity 3 -&gt; [City 1, City 2]&nbsp;\nCities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/16/find_the_city_02.png\" style=\"width: 300px; height: 225px;\" />\n<pre>\n<strong>Input:</strong> n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>The figure above describes the graph.&nbsp;\nThe neighboring cities at a distanceThreshold = 2 for each city are:\nCity 0 -&gt; [City 1]&nbsp;\nCity 1 -&gt; [City 0, City 4]&nbsp;\nCity 2 -&gt; [City 3, City 4]&nbsp;\nCity 3 -&gt; [City 2, City 4]\nCity 4 -&gt; [City 1, City 2, City 3]&nbsp;\nThe city 0 has 1 neighboring city at a distanceThreshold = 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= edges.length &lt;= n * (n - 1) / 2</code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= from<sub>i</sub> &lt; to<sub>i</sub> &lt; n</code></li>\n\t<li><code>1 &lt;= weight<sub>i</sub>,&nbsp;distanceThreshold &lt;= 10^4</code></li>\n\t<li>All pairs <code>(from<sub>i</sub>, to<sub>i</sub>)</code> are distinct.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2481,
            "dislikes": 82,
            "similarQuestions": "[{\"title\": \"Second Minimum Time to Reach Destination\", \"titleSlug\": \"second-minimum-time-to-reach-destination\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"84.9K\", \"totalSubmission\": \"144.7K\", \"totalAcceptedRaw\": 84884, \"totalSubmissionRaw\": 144679, \"acRate\": \"58.7%\"}",
            "hints": [
                "Use Floyd-Warshall's algorithm to compute any-point to any-point distances. (Or can also do Dijkstra from every node due to the weights are non-negative).",
                "For each city calculate the number of reachable cities within the threshold, then search for the optimal city."
            ],
            "rephrased": {
                "body": "Given `n` cities numbered from 0 to `n-1`, and an array `edges` where `edges[i] = [from_i, to_i, weight_i]` represents a bidirectional weighted edge between cities `from_i` and `to_i`, and an integer `distanceThreshold`.  Find the city with the fewest reachable cities within the given `distanceThreshold`. If multiple cities satisfy this condition, return the city with the highest index.",
                "constraints": [
                    "2 <= n <= 100",
                    "1 <= edges.length <= n * (n - 1) / 2",
                    "edges[i].length == 3",
                    "0 <= from_i < to_i < n",
                    "1 <= weight_i, distanceThreshold <= 10^4",
                    "All pairs (from_i, to_i) are distinct."
                ],
                "testcases": [
                    {
                        "input": "n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4",
                        "output": "3",
                        "explanation": "City 0 can reach cities 1 and 2 within a distance of 4. City 1 can reach cities 0, 2, and 3. City 2 can reach cities 0, 1, and 3. City 3 can reach cities 1 and 2.  Cities 0 and 3 both have 2 reachable cities, so we return city 3 because it has the greater index."
                    },
                    {
                        "input": "n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2",
                        "output": "0",
                        "explanation": "City 0 can reach city 1 within a distance of 2. City 1 can reach cities 0 and 4. City 2 can reach cities 3 and 4. City 3 can reach cities 2 and 4. City 4 can reach cities 1, 2, and 3. City 0 has the smallest number of reachable cities (1)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "second-minimum-time-to-reach-destination",
                "title": "Second Minimum Time to Reach Destination",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use Floyd-Warshall's algorithm to compute any-point to any-point distances. (Or can also do Dijkstra from every node due to the weights are non-negative).",
            "For each city calculate the number of reachable cities within the threshold, then search for the optimal city."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {\n    int ans = -1;\n    int minCitiesCount = n;\n    const vector<vector<int>> dist = floydWarshall(n, edges, distanceThreshold);\n\n    for (int i = 0; i < n; ++i) {\n      int citiesCount = 0;\n      for (int j = 0; j < n; ++j)\n        if (dist[i][j] <= distanceThreshold)\n          ++citiesCount;\n      if (citiesCount <= minCitiesCount) {\n        ans = i;\n        minCitiesCount = citiesCount;\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  vector<vector<int>> floydWarshall(int n, const vector<vector<int>>& edges,\n                                    int distanceThreshold) {\n    vector<vector<int>> dist(n, vector<int>(n, distanceThreshold + 1));\n\n    for (int i = 0; i < n; ++i)\n      dist[i][i] = 0;\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int w = edge[2];\n      dist[u][v] = w;\n      dist[v][u] = w;\n    }\n\n    for (int k = 0; k < n; ++k)\n      for (int i = 0; i < n; ++i)\n        for (int j = 0; j < n; ++j)\n          dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);\n\n    return dist;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findTheCity(int n, int[][] edges, int distanceThreshold) {\n    int ans = -1;\n    int minCitiesCount = n;\n    int[][] dist = floydWarshall(n, edges, distanceThreshold);\n\n    for (int i = 0; i < n; ++i) {\n      int citiesCount = 0;\n      for (int j = 0; j < n; ++j)\n        if (dist[i][j] <= distanceThreshold)\n          ++citiesCount;\n      if (citiesCount <= minCitiesCount) {\n        ans = i;\n        minCitiesCount = citiesCount;\n      }\n    }\n\n    return ans;\n  }\n\n  private int[][] floydWarshall(int n, int[][] edges, int distanceThreshold) {\n    int[][] dist = new int[n][n];\n    Arrays.stream(dist).forEach(A -> Arrays.fill(A, distanceThreshold + 1));\n\n    for (int i = 0; i < n; ++i)\n      dist[i][i] = 0;\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      final int w = edge[2];\n      dist[u][v] = w;\n      dist[v][u] = w;\n    }\n\n    for (int k = 0; k < n; ++k)\n      for (int i = 0; i < n; ++i)\n        for (int j = 0; j < n; ++j)\n          dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);\n\n    return dist;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:\n    ans = -1\n    minCitiesCount = n\n    dist = self._floydWarshall(n, edges, distanceThreshold)\n\n    for i in range(n):\n      citiesCount = sum(dist[i][j] <= distanceThreshold for j in range(n))\n      if citiesCount <= minCitiesCount:\n        ans = i\n        minCitiesCount = citiesCount\n\n    return ans\n\n  def _floydWarshall(self, n: int, edges: List[List[int]], distanceThreshold: int) -> List[List[int]]:\n    dist = [[(distanceThreshold + 1)] * n for _ in range(n)]\n\n    for i in range(n):\n      dist[i][i] = 0\n\n    for u, v, w in edges:\n      dist[u][v] = w\n      dist[v][u] = w\n\n    for k in range(n):\n      for i in range(n):\n        for j in range(n):\n          dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    return dist\n",
                "lang_text": "py"
            }
        }
    }
}