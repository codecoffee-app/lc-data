{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "564",
            "title": "Find the Closest Palindrome",
            "titleSlug": "find-the-closest-palindrome",
            "content": "<p>Given a string <code>n</code> representing an integer, return <em>the closest integer (not including itself), which is a palindrome</em>. If there is a tie, return <em><strong>the smaller one</strong></em>.</p>\n\n<p>The closest is defined as the absolute difference minimized between two integers.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = &quot;123&quot;\n<strong>Output:</strong> &quot;121&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = &quot;1&quot;\n<strong>Output:</strong> &quot;0&quot;\n<strong>Explanation:</strong> 0 and 2 are the closest palindromes but we return the smallest which is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n.length &lt;= 18</code></li>\n\t<li><code>n</code> consists of only digits.</li>\n\t<li><code>n</code> does not have leading zeros.</li>\n\t<li><code>n</code> is representing an integer in the range <code>[1, 10<sup>18</sup> - 1]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 723,
            "dislikes": 1403,
            "similarQuestions": "[{\"title\": \"Find Palindrome With Fixed Length\", \"titleSlug\": \"find-palindrome-with-fixed-length\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Next Palindrome Using Same Digits\", \"titleSlug\": \"next-palindrome-using-same-digits\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"41.9K\", \"totalSubmission\": \"190.6K\", \"totalAcceptedRaw\": 41850, \"totalSubmissionRaw\": 190608, \"acRate\": \"22.0%\"}",
            "hints": [
                "Will brute force work for this problem? Think of something else.",
                "Take some examples like 1234, 999,1000, etc and check their closest palindromes. How many different cases are possible?",
                "Do we have to consider only left half or right half of the string or both?",
                "Try to find the closest palindrome of these numbers- 12932, 99800, 12120. Did you observe something?"
            ],
            "rephrased": {
                "body": "Given a string `n` representing an integer, find the closest integer (excluding `n` itself) that is a palindrome. If multiple palindromes have the same minimal absolute difference from `n`, return the smaller one.",
                "constraints": [
                    "1 <= n.length <= 18",
                    "n consists of only digits.",
                    "n does not have leading zeros.",
                    "n represents an integer in the range [1, 10^18 - 1]."
                ],
                "testcases": [
                    {
                        "input": "123",
                        "output": "121",
                        "explanation": null
                    },
                    {
                        "input": "1",
                        "output": "0",
                        "explanation": "Both 0 and 2 are closest palindromes to 1. We return the smaller one, which is 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-palindrome-with-fixed-length",
                "title": "Find Palindrome With Fixed Length",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "next-palindrome-using-same-digits",
                "title": "Next Palindrome Using Same Digits",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Will brute force work for this problem? Think of something else.",
            "Take some examples like 1234, 999,1000, etc and check their closest palindromes. How many different cases are possible?",
            "Do we have to consider only left half or right half of the string or both?",
            "Try to find the closest palindrome of these numbers- 12932, 99800, 12120. Did you observe something?"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string nearestPalindromic(string n) {\n    const auto& [prevPalindrome, nextPalindrome] = getPalindromes(n);\n    return abs(prevPalindrome - stol(n)) <= abs(nextPalindrome - stol(n))\n               ? to_string(prevPalindrome)\n               : to_string(nextPalindrome);\n  }\n\n private:\n  pair<long, long> getPalindromes(const string& s) {\n    const long num = stol(s);\n    const int n = s.length();\n    pair<long, long> palindromes;\n    const string& half = s.substr(0, (n + 1) / 2);\n    const string& reversedHalf = reversed(half.substr(0, n / 2));\n    const long candidate = stol(half + reversedHalf);\n\n    if (candidate < num)\n      palindromes.first = candidate;\n    else {\n      const string& prevHalf = to_string(stol(half) - 1);\n      const string& reversedPrevHalf = reversed(prevHalf.substr(0, n / 2));\n      if (n % 2 == 0 && stol(prevHalf) == 0)\n        palindromes.first = 9;\n      else if (n % 2 == 0 && (stol(prevHalf) + 1) % 10 == 0)\n        palindromes.first = stol(prevHalf + '9' + reversedPrevHalf);\n      else\n        palindromes.first = stol(prevHalf + reversedPrevHalf);\n    }\n\n    if (candidate > num)\n      palindromes.second = candidate;\n    else {\n      const string& nextHalf = to_string(stol(half) + 1);\n      const string& reversedNextHalf = reversed(nextHalf.substr(0, n / 2));\n      palindromes.second = stol(nextHalf + reversedNextHalf);\n    }\n\n    return palindromes;\n  }\n\n  string reversed(const string& s) {\n    return {s.rbegin(), s.rend()};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String nearestPalindromic(String n) {\n    final long[] palindromes = getPalindromes(n);\n    return Math.abs(palindromes[0] - Long.parseLong(n)) <=\n            Math.abs(palindromes[1] - Long.parseLong(n))\n        ? String.valueOf(palindromes[0])\n        : String.valueOf(palindromes[1]);\n  }\n\n  private long[] getPalindromes(final String s) {\n    final long num = Long.parseLong(s);\n    final int n = s.length();\n    long[] palindromes = new long[2];\n    final String half = s.substring(0, (n + 1) / 2);\n    final String reversedHalf = new StringBuilder(half.substring(0, n / 2)).reverse().toString();\n    final long candidate = Long.parseLong(half + reversedHalf);\n\n    if (candidate < num)\n      palindromes[0] = candidate;\n    else {\n      final String prevHalf = String.valueOf(Long.parseLong(half) - 1);\n      final String reversedPrevHalf =\n          new StringBuilder(prevHalf.substring(0, Math.min(prevHalf.length(), n / 2)))\n              .reverse()\n              .toString();\n      if (n % 2 == 0 && Long.parseLong(prevHalf) == 0)\n        palindromes[0] = 9;\n      else if (n % 2 == 0 && (Long.parseLong(prevHalf) + 1) % 10 == 0)\n        palindromes[0] = Long.parseLong(prevHalf + '9' + reversedPrevHalf);\n      else\n        palindromes[0] = Long.parseLong(prevHalf + reversedPrevHalf);\n    }\n\n    if (candidate > num)\n      palindromes[1] = candidate;\n    else {\n      final String nextHalf = String.valueOf(Long.parseLong(half) + 1);\n      final String reversedNextHalf =\n          new StringBuilder(nextHalf.substring(0, n / 2)).reverse().toString();\n      palindromes[1] = Long.parseLong(nextHalf + reversedNextHalf);\n    }\n\n    return palindromes;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def nearestPalindromic(self, n: str) -> str:\n    def getPalindromes(s: str) -> tuple:\n      num = int(s)\n      k = len(s)\n      palindromes = []\n      half = s[0:(k + 1) // 2]\n      reversedHalf = half[:k // 2][::-1]\n      candidate = int(half + reversedHalf)\n\n      if candidate < num:\n        palindromes.append(candidate)\n      else:\n        prevHalf = str(int(half) - 1)\n        reversedPrevHalf = prevHalf[:k // 2][::-1]\n        if k % 2 == 0 and int(prevHalf) == 0:\n          palindromes.append(9)\n        elif k % 2 == 0 and (int(prevHalf) + 1) % 10 == 0:\n          palindromes.append(int(prevHalf + '9' + reversedPrevHalf))\n        else:\n          palindromes.append(int(prevHalf + reversedPrevHalf))\n\n      if candidate > num:\n        palindromes.append(candidate)\n      else:\n        nextHalf = str(int(half) + 1)\n        reversedNextHalf = nextHalf[:k // 2][::-1]\n        palindromes.append(int(nextHalf + reversedNextHalf))\n\n      return palindromes\n\n    prevPalindrome, nextPalindrome = getPalindromes(n)\n    return str(prevPalindrome) if abs(prevPalindrome - int(n)) <= abs(nextPalindrome - int(n)) else str(nextPalindrome)\n",
                "lang_text": "py"
            }
        }
    }
}