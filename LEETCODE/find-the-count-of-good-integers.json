{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3272",
            "title": "Find the Count of Good Integers",
            "titleSlug": "find-the-count-of-good-integers",
            "content": "<p>You are given two <strong>positive</strong> integers <code>n</code> and <code>k</code>.</p>\n\n<p>An integer <code>x</code> is called <strong>k-palindromic</strong> if:</p>\n\n<ul>\n\t<li><code>x</code> is a <span data-keyword=\"palindrome-integer\">palindrome</span>.</li>\n\t<li><code>x</code> is divisible by <code>k</code>.</li>\n</ul>\n\n<p>An integer is called <strong>good</strong> if its digits can be <em>rearranged</em> to form a <strong>k-palindromic</strong> integer. For example, for <code>k = 2</code>, 2020 can be rearranged to form the <em>k-palindromic</em> integer 2002, whereas 1010 cannot be rearranged to form a <em>k-palindromic</em> integer.</p>\n\n<p>Return the count of <strong>good</strong> integers containing <code>n</code> digits.</p>\n\n<p><strong>Note</strong> that <em>any</em> integer must <strong>not</strong> have leading zeros, <strong>neither</strong> before <strong>nor</strong> after rearrangement. For example, 1010 <em>cannot</em> be rearranged to form 101.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, k = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">27</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><em>Some</em> of the good integers are:</p>\n\n<ul>\n\t<li>551 because it can be rearranged to form 515.</li>\n\t<li>525 because it is already k-palindromic.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 1, k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The two good integers are 4 and 8.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, k = 6</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2468</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10</code></li>\n\t<li><code>1 &lt;= k &lt;= 9</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 80,
            "dislikes": 12,
            "similarQuestions": "[{\"title\": \"Palindrome Number\", \"titleSlug\": \"palindrome-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Closest Palindrome\", \"titleSlug\": \"find-the-closest-palindrome\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.7K\", \"totalSubmission\": \"15.9K\", \"totalAcceptedRaw\": 4693, \"totalSubmissionRaw\": 15891, \"acRate\": \"29.5%\"}",
            "hints": [
                "How to generate all K-palindromic strings of length <code>n</code>? Do we need to go through all <code>n</code> digits?",
                "Use permutations to calculate the number of possible rearrangements."
            ],
            "rephrased": {
                "body": "Given two positive integers `n` and `k`, determine the count of 'good' integers containing `n` digits. An integer `x` is 'k-palindromic' if it's a palindrome and divisible by `k`. An integer is 'good' if its digits can be rearranged to form a 'k-palindromic' integer. Note that leading zeros are not allowed, neither before nor after rearrangement.",
                "constraints": [
                    "1 <= n <= 10",
                    "1 <= k <= 9"
                ],
                "testcases": [
                    {
                        "input": "n = 3, k = 5",
                        "output": "27",
                        "explanation": "Some of the good integers are 551 (can be rearranged to 515) and 525 (is already k-palindromic)."
                    },
                    {
                        "input": "n = 1, k = 4",
                        "output": "2",
                        "explanation": "The two good integers are 4 and 8."
                    },
                    {
                        "input": "n = 5, k = 6",
                        "output": "2468",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "palindrome-number",
                "title": "Palindrome Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-the-closest-palindrome",
                "title": "Find the Closest Palindrome",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How to generate all K-palindromic strings of length <code>n</code>? Do we need to go through all <code>n</code> digits?",
            "Use permutations to calculate the number of possible rearrangements."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long countGoodIntegers(int n, int k) {\n    const int halfLength = (n + 1) / 2;\n    const int minHalf = pow(10, halfLength - 1);\n    const int maxHalf = pow(10, halfLength);\n    long ans = 0;\n    unordered_set<string> seen;\n\n    for (int num = minHalf; num < maxHalf; ++num) {\n      const string firstHalf = to_string(num);\n      const string secondHalf = {firstHalf.rbegin(), firstHalf.rend()};\n      const string palindrome = firstHalf + secondHalf.substr(n % 2);\n      if (stol(palindrome) % k != 0)\n        continue;\n      string sortedDigits = palindrome;\n      ranges::sort(sortedDigits);\n      if (seen.contains(sortedDigits))\n        continue;\n      seen.insert(sortedDigits);\n      vector<int> digitCount(10);\n      for (const char c : palindrome)\n        ++digitCount[c - '0'];\n      // Leading zeros are not allowed, so the first digit is special.\n      const int firstDigitChoices = n - digitCount[0];\n      long permutations = firstDigitChoices * factorial(n - 1);\n      // For each repeated digit, divide by the factorial of the frequency since\n      // permutations that swap identical digits don't create a new number.\n      for (const int freq : digitCount)\n        if (freq > 1)\n          permutations /= factorial(freq);\n      ans += permutations;\n    }\n\n    return ans;\n  }\n\n private:\n  long factorial(int n) {\n    long res = 1;\n    for (int i = 2; i <= n; ++i)\n      res *= i;\n    return res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long countGoodIntegers(int n, int k) {\n    final int halfLength = (n + 1) / 2;\n    final int minHalf = (int) Math.pow(10, halfLength - 1);\n    final int maxHalf = (int) Math.pow(10, halfLength);\n    long ans = 0;\n    Set<String> seen = new HashSet<>();\n\n    for (int num = minHalf; num < maxHalf; ++num) {\n      final String firstHalf = String.valueOf(num);\n      final String secondHalf = new StringBuilder(firstHalf).reverse().toString();\n      final String palindrome = firstHalf + secondHalf.substring(n % 2);\n      if (Long.parseLong(palindrome) % k != 0)\n        continue;\n      char[] sortedDigits = palindrome.toCharArray();\n      Arrays.sort(sortedDigits);\n      String sortedDigitsStr = new String(sortedDigits);\n      if (seen.contains(sortedDigitsStr))\n        continue;\n      seen.add(sortedDigitsStr);\n      int[] digitCount = new int[10];\n      for (char c : palindrome.toCharArray())\n        ++digitCount[c - '0'];\n      // Leading zeros are not allowed, so the first digit is special.\n      final int firstDigitChoices = n - digitCount[0];\n      long permutations = firstDigitChoices * factorial(n - 1);\n      // For each repeated digit, divide by the factorial of the frequency since\n      // permutations that swap identical digits don't create a new number.\n      for (final int freq : digitCount)\n        if (freq > 1)\n          permutations /= factorial(freq);\n      ans += permutations;\n    }\n\n    return ans;\n  }\n\n  private long factorial(int n) {\n    long res = 1;\n    for (int i = 2; i <= n; ++i)\n      res *= i;\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countGoodIntegers(self, n: int, k: int) -> int:\n    halfLength = (n + 1) // 2\n    minHalf = 10**(halfLength - 1)\n    maxHalf = 10**halfLength\n    ans = 0\n    seen = set()\n\n    for num in range(minHalf, maxHalf):\n      palindrome = str(num) + str(num)[::-1][n % 2:]\n      sortedDigits = ''.join(sorted(palindrome))\n      if int(palindrome) % k != 0 or sortedDigits in seen:\n        continue\n      seen.add(sortedDigits)\n      digitCount = collections.Counter(palindrome)\n      # Leading zeros are not allowed, so the first digit is special.\n      firstDigitChoices = n - digitCount['0']\n      permutations = firstDigitChoices * math.factorial(n - 1)\n      # For each repeated digit, divide by the factorial of the frequency since\n      # permutations that swap identical digits don't create a new number.\n      for freq in digitCount.values():\n        permutations //= math.factorial(freq)\n      ans += permutations\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}