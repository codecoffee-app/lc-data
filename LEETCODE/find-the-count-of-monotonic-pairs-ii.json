{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3251",
            "title": "Find the Count of Monotonic Pairs II",
            "titleSlug": "find-the-count-of-monotonic-pairs-ii",
            "content": "<p>You are given an array of <strong>positive</strong> integers <code>nums</code> of length <code>n</code>.</p>\n\n<p>We call a pair of <strong>non-negative</strong> integer arrays <code>(arr1, arr2)</code> <strong>monotonic</strong> if:</p>\n\n<ul>\n\t<li>The lengths of both arrays are <code>n</code>.</li>\n\t<li><code>arr1</code> is monotonically <strong>non-decreasing</strong>, in other words, <code>arr1[0] &lt;= arr1[1] &lt;= ... &lt;= arr1[n - 1]</code>.</li>\n\t<li><code>arr2</code> is monotonically <strong>non-increasing</strong>, in other words, <code>arr2[0] &gt;= arr2[1] &gt;= ... &gt;= arr2[n - 1]</code>.</li>\n\t<li><code>arr1[i] + arr2[i] == nums[i]</code> for all <code>0 &lt;= i &lt;= n - 1</code>.</li>\n</ul>\n\n<p>Return the count of <strong>monotonic</strong> pairs.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The good pairs are:</p>\n\n<ol>\n\t<li><code>([0, 1, 1], [2, 2, 1])</code></li>\n\t<li><code>([0, 1, 2], [2, 2, 0])</code></li>\n\t<li><code>([0, 2, 2], [2, 1, 0])</code></li>\n\t<li><code>([1, 2, 2], [1, 1, 0])</code></li>\n</ol>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [5,5,5,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">126</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 81,
            "dislikes": 6,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.9K\", \"totalSubmission\": \"25.8K\", \"totalAcceptedRaw\": 5860, \"totalSubmissionRaw\": 25779, \"acRate\": \"22.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array `nums` of positive integers of length `n`, find the number of monotonic pairs of non-negative integer arrays `(arr1, arr2)`. A pair is monotonic if both arrays have length `n`, `arr1` is monotonically non-decreasing, `arr2` is monotonically non-increasing, and `arr1[i] + arr2[i] == nums[i]` for all `0 <= i < n`. Return the count of monotonic pairs modulo `10^9 + 7`.",
                "constraints": [
                    "1 <= n == nums.length <= 2000",
                    "1 <= nums[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[2,3,2]",
                        "output": "4",
                        "explanation": "The monotonic pairs are:\n([0, 1, 1], [2, 2, 1])\n([0, 1, 2], [2, 2, 0])\n([0, 2, 2], [2, 1, 0])\n([1, 2, 2], [1, 1, 0])"
                    },
                    {
                        "input": "[5,5,5,5]",
                        "output": "126",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Same as 3250. Find the Count of Monotonic Pairs I\n  int countOfPairs(vector<int>& nums) {\n    constexpr int kMod = 1'000'000'007;\n    constexpr int kMax = 1000;\n    const int n = nums.size();\n    int ans = 0;\n    // dp[i][num] := the number of valid ways to fill the arrays up to index i\n    // with arr1[i] = num\n    vector<vector<int>> dp(n, vector<int>(kMax + 1));\n\n    for (int num = 0; num <= nums[0]; ++num)\n      dp[0][num] = 1;\n\n    for (int i = 1; i < n; ++i) {\n      int ways = 0;\n      int prevNum = 0;\n      // To satisfy arr1, prevNum <= num.\n      // To satisfy arr2, nums[i - 1] - prevNum >= nums[i] - num.\n      //               => prevNum <= min(num, num - (nums[i] - nums[i - 1])).\n      // As we move from `num` to `num + 1`, the range of valid `prevNum` values\n      // becomes prevNum <= min(num + 1, num + 1 - (nums[i] - nums[i - 1])).\n      // Since the range of `prevNum` can only increase by at most 1, there's\n      // no need to iterate through all possible values of `prevNum`. We can\n      // simply increment `prevNum` by 1 if it meets the condition.\n      for (int num = 0; num <= nums[i]; ++num) {\n        if (prevNum <= min(num, num - (nums[i] - nums[i - 1]))) {\n          ways = (ways + dp[i - 1][prevNum]) % kMod;\n          ++prevNum;\n        }\n        dp[i][num] = ways;\n      }\n    }\n\n    for (int i = 0; i <= kMax; ++i)\n      ans = (ans + dp[n - 1][i]) % kMod;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Same as 3250. Find the Count of Monotonic Pairs I\n  public int countOfPairs(int[] nums) {\n    final int kMod = 1_000_000_007;\n    final int kMax = 1000;\n    final int n = nums.length;\n    int ans = 0;\n    // dp[i][num] := the number of valid ways to fill the arrays up to index i\n    // with arr1[i] = num\n    int[][] dp = new int[n][kMax + 1];\n\n    for (int num = 0; num <= nums[0]; ++num)\n      dp[0][num] = 1;\n\n    for (int i = 1; i < n; ++i) {\n      int ways = 0;\n      int prevNum = 0;\n      // To satisfy arr1, prevNum <= num.\n      // To satisfy arr2, nums[i - 1] - prevNum >= nums[i] - num.\n      //               => prevNum <= min(num, num - (nums[i] - nums[i - 1])).\n      // As we move from `num` to `num + 1`, the range of valid `prevNum` values\n      // becomes prevNum <= min(num + 1, num + 1 - (nums[i] - nums[i - 1])).\n      // Since the range of `prevNum` can only increase by at most 1, there's\n      // no need to iterate through all possible values of `prevNum`. We can\n      // simply increment `prevNum` by 1 if it meets the condition.\n      for (int num = 0; num <= nums[i]; ++num) {\n        if (prevNum <= Math.min(num, num - (nums[i] - nums[i - 1]))) {\n          ways = (ways + dp[i - 1][prevNum]) % kMod;\n          ++prevNum;\n        }\n        dp[i][num] = ways;\n      }\n    }\n\n    for (int i = 0; i <= kMax; ++i)\n      ans = (ans + dp[n - 1][i]) % kMod;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Same as 3250. Find the Count of Monotonic Pairs I\n  def countOfPairs(self, nums: list[int]) -> int:\n    kMod = 1_000_000_007\n    kMax = 1000\n    n = len(nums)\n    # dp[i][num] := the number of valid ways to fill the arrays up to index i\n    # with arr1[i] = num\n    dp = [[0] * (kMax + 1) for _ in range(n)]\n\n    for num in range(nums[0] + 1):\n      dp[0][num] = 1\n\n    for i in range(1, n):\n      ways = 0\n      prevNum = 0\n      # To satisfy arr1, prevNum <= num.\n      # To satisfy arr2, nums[i - 1] - prevNum >= nums[i] - num.\n      #               => prevNum <= min(num, num - (nums[i] - nums[i - 1])).\n      # As we move from `num` to `num + 1`, the range of valid `prevNum` values\n      # becomes prevNum <= min(num + 1, num + 1 - (nums[i] - nums[i - 1])).\n      # Since the range of `prevNum` can only increase by at most 1, there's\n      # no need to iterate through all possible values of `prevNum`. We can\n      # simply increment `prevNum` by 1 if it meets the condition.\n      for num in range(nums[i] + 1):\n        if prevNum <= min(num, num - (nums[i] - nums[i - 1])):\n          ways = (ways + dp[i - 1][prevNum]) % kMod\n          prevNum += 1\n        dp[i][num] = ways\n\n    return sum(dp[n - 1]) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}