{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3233",
            "title": "Find the Count of Numbers Which Are Not Special",
            "titleSlug": "find-the-count-of-numbers-which-are-not-special",
            "content": "<p>You are given 2 <strong>positive</strong> integers <code>l</code> and <code>r</code>. For any number <code>x</code>, all positive divisors of <code>x</code> <em>except</em> <code>x</code> are called the <strong>proper divisors</strong> of <code>x</code>.</p>\n\n<p>A number is called <strong>special</strong> if it has exactly 2 <strong>proper divisors</strong>. For example:</p>\n\n<ul>\n\t<li>The number 4 is <em>special</em> because it has proper divisors 1 and 2.</li>\n\t<li>The number 6 is <em>not special</em> because it has proper divisors 1, 2, and 3.</li>\n</ul>\n\n<p>Return the count of numbers in the range <code>[l, r]</code> that are <strong>not</strong> <strong>special</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">l = 5, r = 7</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are no special numbers in the range <code>[5, 7]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">l = 4, r = 16</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">11</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The special numbers in the range <code>[4, 16]</code> are 4 and 9.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= l &lt;= r &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 117,
            "dislikes": 18,
            "similarQuestions": "[{\"title\": \"Count Primes\", \"titleSlug\": \"count-primes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"26.9K\", \"totalSubmission\": \"102.9K\", \"totalAcceptedRaw\": 26938, \"totalSubmissionRaw\": 102867, \"acRate\": \"26.2%\"}",
            "hints": [
                "A special number must be a square of a prime number.",
                "We need to find all primes in the range <code>[sqrt(l), sqrt(r)]</code>.",
                "Use sieve to find primes till <code>sqrt(10<sup>9</sup>)</code>."
            ],
            "rephrased": {
                "body": "Given two positive integers `l` and `r`, determine the count of numbers within the inclusive range `[l, r]` that are NOT special. A number is considered special if it has exactly two proper divisors (positive divisors excluding the number itself).",
                "constraints": [
                    "1 <= l <= r <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "l = 5, r = 7",
                        "output": "3",
                        "explanation": "There are no special numbers in the range [5, 7]."
                    },
                    {
                        "input": "l = 4, r = 16",
                        "output": "11",
                        "explanation": "The special numbers in the range [4, 16] are 4 and 9. Therefore, 16 - 4 + 1 - 2 = 11 numbers are not special."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "count-primes",
                "title": "Count Primes",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "A special number must be a square of a prime number.",
            "We need to find all primes in the range <code>[sqrt(l), sqrt(r)]</code>.",
            "Use sieve to find primes till <code>sqrt(10<sup>9</sup>)</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int nonSpecialCount(int l, int r) {\n    const int maxRoot = sqrt(r);\n    const vector<bool> isPrime = sieveEratosthenes(maxRoot + 1);\n    int specialCount = 0;\n\n    for (int num = 2; num <= sqrt(r); ++num)\n      if (isPrime[num] && l <= num * num && num * num <= r)\n        ++specialCount;\n\n    return r - l + 1 - specialCount;\n  }\n\n private:\n  vector<bool> sieveEratosthenes(int n) {\n    vector<bool> isPrime(n, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i)\n      if (isPrime[i])\n        for (int j = i * i; j < n; j += i)\n          isPrime[j] = false;\n    return isPrime;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int nonSpecialCount(int l, int r) {\n    final int maxRoot = (int) Math.sqrt(r);\n    final boolean[] isPrime = sieveEratosthenes(maxRoot + 1);\n    int specialCount = 0;\n\n    for (int num = 2; num <= Math.sqrt(r); ++num)\n      if (isPrime[num] && l <= num * num && num * num <= r)\n        ++specialCount;\n\n    return r - l + 1 - specialCount;\n  }\n\n  private boolean[] sieveEratosthenes(int n) {\n    boolean[] isPrime = new boolean[n];\n    Arrays.fill(isPrime, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i)\n      if (isPrime[i])\n        for (int j = i * i; j < n; j += i)\n          isPrime[j] = false;\n    return isPrime;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def nonSpecialCount(self, l: int, r: int) -> int:\n    maxRoot = math.isqrt(r)\n    isPrime = self._sieveEratosthenes(maxRoot + 1)\n    specialCount = 0\n\n    for num in range(2, math.isqrt(r) + 1):\n      if isPrime[num] and l <= num**2 <= r:\n        specialCount += 1\n\n    return r - l + 1 - specialCount\n\n  def _sieveEratosthenes(self, n: int) -> list[bool]:\n    isPrime = [True] * n\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n      if isPrime[i]:\n        for j in range(i * i, n, i):\n          isPrime[j] = False\n    return isPrime\n",
                "lang_text": "py"
            }
        }
    }
}