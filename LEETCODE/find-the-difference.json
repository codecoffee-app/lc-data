{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "389",
            "title": "Find the Difference",
            "titleSlug": "find-the-difference",
            "content": "<p>You are given two strings <code>s</code> and <code>t</code>.</p>\n\n<p>String <code>t</code> is generated by random shuffling string <code>s</code> and then add one more letter at a random position.</p>\n\n<p>Return the letter that was added to <code>t</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, t = &quot;abcde&quot;\n<strong>Output:</strong> &quot;e&quot;\n<strong>Explanation:</strong> &#39;e&#39; is the letter that was added.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;, t = &quot;y&quot;\n<strong>Output:</strong> &quot;y&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>t.length == s.length + 1</code></li>\n\t<li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4833,
            "dislikes": 464,
            "similarQuestions": "[{\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"674.5K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 674549, \"totalSubmissionRaw\": 1122214, \"acRate\": \"60.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two strings, `s` and `t`, where `t` is a shuffled version of `s` with one additional character inserted at a random position, identify and return the character that was added to create `t`. It is guaranteed that `t` is exactly one character longer than `s`.",
                "constraints": [
                    "0 <= s.length <= 1000",
                    "t.length == s.length + 1",
                    "s and t consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"abcd\", t = \"abcde\"",
                        "output": "\"e\"",
                        "explanation": "The character 'e' is present in `t` but not in `s`, indicating that it was the added character."
                    },
                    {
                        "input": "s = \"\", t = \"y\"",
                        "output": "\"y\"",
                        "explanation": "Since `s` is empty, the only character in `t`, 'y', is the added character."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "single-number",
                "title": "Single Number",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  char findTheDifference(string s, string t) {\n    char ans = 0;\n\n    for (const char c : s)\n      ans ^= c;\n\n    for (const char c : t)\n      ans ^= c;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public char findTheDifference(String s, String t) {\n    char ans = 0;\n\n    for (final char c : s.toCharArray())\n      ans ^= c;\n\n    for (final char c : t.toCharArray())\n      ans ^= c;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findTheDifference(self, s: str, t: str) -> str:\n    count = collections.Counter(s)\n\n    for i, c in enumerate(t):\n      count[c] -= 1\n      if count[c] == -1:\n        return c\n",
                "lang_text": "py"
            }
        }
    }
}