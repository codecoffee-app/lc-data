{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2575",
            "title": "Find the Divisibility Array of a String",
            "titleSlug": "find-the-divisibility-array-of-a-string",
            "content": "<p>You are given a <strong>0-indexed</strong> string <code>word</code> of length <code>n</code>&nbsp;consisting of digits, and a positive integer&nbsp;<code>m</code>.</p>\n\n<p>The <strong>divisibility array</strong> <code>div</code> of <code>word</code> is an integer array of length <code>n</code> such that:</p>\n\n<ul>\n\t<li><code>div[i] = 1</code> if the&nbsp;<strong>numeric value</strong>&nbsp;of&nbsp;<code>word[0,...,i]</code> is divisible by <code>m</code>, or</li>\n\t<li><code>div[i] = 0</code> otherwise.</li>\n</ul>\n\n<p>Return<em> the divisibility array of</em><em> </em><code>word</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;998244353&quot;, m = 3\n<strong>Output:</strong> [1,1,0,0,0,1,1,0,0]\n<strong>Explanation:</strong> There are only 4 prefixes that are divisible by 3: &quot;9&quot;, &quot;99&quot;, &quot;998244&quot;, and &quot;9982443&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;1010&quot;, m = 10\n<strong>Output:</strong> [0,1,0,1]\n<strong>Explanation:</strong> There are only 2 prefixes that are divisible by 10: &quot;10&quot;, and &quot;1010&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code><font face=\"monospace\">word.length == n</font></code></li>\n\t<li><code><font face=\"monospace\">word</font></code><font face=\"monospace\"> consists of digits from <code>0</code>&nbsp;to <code>9</code></font></li>\n\t<li><code><font face=\"monospace\">1 &lt;= m &lt;= 10<sup>9</sup></font></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 502,
            "dislikes": 18,
            "similarQuestions": "[{\"title\": \"Subarray Sums Divisible by K\", \"titleSlug\": \"subarray-sums-divisible-by-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Make Sum Divisible by P\", \"titleSlug\": \"make-sum-divisible-by-p\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"25K\", \"totalSubmission\": \"78K\", \"totalAcceptedRaw\": 24973, \"totalSubmissionRaw\": 77983, \"acRate\": \"32.0%\"}",
            "hints": [
                "We can check if the numeric value of the prefix of the given string is divisible by m by computing the remainder of the numeric value of the prefix when divided by m.",
                "The remainder of the numeric value of a prefix ending at index i can be computed from the remainder of the prefix ending at index i-1."
            ],
            "rephrased": {
                "body": "Given a 0-indexed string `word` of length `n` consisting of digits, and a positive integer `m`, construct the divisibility array `div` of `word`. The `div` array has length `n` such that `div[i] = 1` if the numeric value of `word[0...i]` is divisible by `m`, and `div[i] = 0` otherwise. Return the divisibility array of `word`.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "word.length == n",
                    "word consists of digits from 0 to 9",
                    "1 <= m <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "word = \"998244353\", m = 3",
                        "output": "[1,1,0,0,0,1,1,0,0]",
                        "explanation": "The prefixes \"9\", \"99\", \"998244\", and \"9982443\" are divisible by 3."
                    },
                    {
                        "input": "word = \"1010\", m = 10",
                        "output": "[0,1,0,1]",
                        "explanation": "The prefixes \"10\" and \"1010\" are divisible by 10."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "subarray-sums-divisible-by-k",
                "title": "Subarray Sums Divisible by K",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "make-sum-divisible-by-p",
                "title": "Make Sum Divisible by P",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We can check if the numeric value of the prefix of the given string is divisible by m by computing the remainder of the numeric value of the prefix when divided by m.",
            "The remainder of the numeric value of a prefix ending at index i can be computed from the remainder of the prefix ending at index i-1."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> divisibilityArray(string word, int m) {\n    vector<int> ans;\n    long long prevRemainder = 0;\n\n    for (const char c : word) {\n      const long long remainder = (prevRemainder * 10 + (c - '0')) % m;\n      ans.push_back(remainder == 0 ? 1 : 0);\n      prevRemainder = remainder;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] divisibilityArray(String word, int m) {\n    int[] ans = new int[word.length()];\n    long prevRemainder = 0;\n\n    for (int i = 0; i < word.length(); ++i) {\n      final long remainder = (prevRemainder * 10 + (word.charAt(i) - '0')) % m;\n      ans[i] = remainder == 0 ? 1 : 0;\n      prevRemainder = remainder;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def divisibilityArray(self, word: str, m: int) -> List[int]:\n    ans = []\n    prevRemainder = 0\n\n    for c in word:\n      remainder = (prevRemainder * 10 + int(c)) % m\n      ans.append(1 if remainder == 0 else 0)\n      prevRemainder = remainder\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}