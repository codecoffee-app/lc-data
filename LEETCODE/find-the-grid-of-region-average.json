{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3030",
            "title": "Find the Grid of Region Average",
            "titleSlug": "find-the-grid-of-region-average",
            "content": "<p>You are given a <strong>0-indexed</strong> <code>m x n</code> grid <code>image</code> which represents a grayscale image, where <code>image[i][j]</code> represents a pixel with intensity in the range<code>[0..255]</code>. You are also given a <strong>non-negative</strong> integer <code>threshold</code>.</p>\n\n<p>Two pixels <code>image[a][b]</code> and <code>image[c][d]</code> are said to be <strong>adjacent</strong> if <code>|a - c| + |b - d| == 1</code>.</p>\n\n<p>A <strong>region</strong> is a <code>3 x 3</code> subgrid where the <strong>absolute difference</strong> in intensity between any two <strong>adjacent</strong> pixels is <strong>less than or equal to</strong> <code>threshold</code>.</p>\n\n<p>All pixels in a <strong>region</strong> belong to that region, note that a pixel <strong>can</strong> belong to <strong>multiple</strong> regions.</p>\n\n<p>You need to calculate a <strong>0-indexed</strong> <code>m x n</code> grid <code>result</code>, where <code>result[i][j]</code> is the <strong>average</strong> intensity of the region to which <code>image[i][j]</code> belongs, <strong>rounded down</strong> to the nearest integer. If <code>image[i][j]</code> belongs to multiple regions, <code>result[i][j]</code> is the <strong>average </strong>of the<strong> rounded down average </strong>intensities of these regions, <strong>rounded down</strong> to the nearest integer. If <code>image[i][j]</code> does<strong> not</strong> belong to any region, <code>result[i][j]</code> is <strong>equal to</strong> <code>image[i][j]</code>.</p>\n\n<p>Return <em>the grid</em> <code>result</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/21/example0corrected.png\" style=\"width: 832px; height: 275px;\" />\n<pre>\n<strong>Input:</strong> image = [[5,6,7,10],[8,9,10,10],[11,12,13,10]], threshold = 3\n<strong>Output:</strong> [[9,9,9,9],[9,9,9,9],[9,9,9,9]]\n<strong>Explanation:</strong> There exist two regions in the image, which are shown as the shaded areas in the picture. The average intensity of the first region is 9, while the average intensity of the second region is 9.67 which is rounded down to 9. The average intensity of both of the regions is (9 + 9) / 2 = 9. As all the pixels belong to either region 1, region 2, or both of them, the intensity of every pixel in the result is 9. \nPlease note that the rounded-down values are used when calculating the average of multiple regions, hence the calculation is done using 9 as the average intensity of region 2, not 9.67.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/21/example1corrected.png\" style=\"width: 805px; height: 377px;\" />\n<pre>\n<strong>Input:</strong> image = [[10,20,30],[15,25,35],[20,30,40],[25,35,45]], threshold = 12\n<strong>Output:</strong> [[25,25,25],[27,27,27],[27,27,27],[30,30,30]]\n<strong>Explanation:</strong> There exist two regions in the image, which are shown as the shaded areas in the picture. The average intensity of the first region is 25, while the average intensity of the second region is 30. The average intensity of both of the regions is (25 + 30) / 2 = 27.5 which is rounded down to 27. All the pixels in row 0 of the image belong to region 1, hence all the pixels in row 0 in the result are 25. Similarly, all the pixels in row 3 in the result are 30. The pixels in rows 1 and 2 of the image belong to region 1 and region 2, hence their assigned value is 27 in the result.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> image = [[5,6,7],[8,9,10],[11,12,13]], threshold = 1\n<strong>Output:</strong> [[5,6,7],[8,9,10],[11,12,13]]\n<strong>Explanation:</strong> There does not exist any region in image, hence result[i][j] == image[i][j] for all the pixels.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n, m &lt;= 500</code></li>\n\t<li><code>0 &lt;= image[i][j] &lt;= 255</code></li>\n\t<li><code>0 &lt;= threshold &lt;= 255</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 47,
            "dislikes": 107,
            "similarQuestions": "[{\"title\": \"Range Sum Query 2D - Immutable\", \"titleSlug\": \"range-sum-query-2d-immutable\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K Radius Subarray Averages\", \"titleSlug\": \"k-radius-subarray-averages\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.4K\", \"totalSubmission\": \"21.4K\", \"totalAcceptedRaw\": 9380, \"totalSubmissionRaw\": 21356, \"acRate\": \"43.9%\"}",
            "hints": [
                "Try all the <code>3 * 3</code> sub-grids to find all the regions.",
                "Keep two 2-D arrays <code>sum</code> and <code>num</code>, for each position <code>(x, y)</code> in a region, increase <code>sum[x][y]</code> by the average sum of the region and increase <code>num[x][y]</code> by <code>1</code>.",
                "For each position (x, y), <code>sum[x][y] / num[x][y]</code> is the answer. Note when <code>num[x][y] == 0</code>, we use the original value in <code>image</code> instead."
            ],
            "rephrased": {
                "body": "Given a 0-indexed m x n grid `image` representing a grayscale image where `image[i][j]` is a pixel intensity between 0 and 255, and a non-negative integer `threshold`, determine a resulting grid `result` based on regional averaging.\n\nTwo pixels `image[a][b]` and `image[c][d]` are adjacent if `|a - c| + |b - d| == 1`. A region is a 3 x 3 subgrid where the absolute difference in intensity between any two adjacent pixels is less than or equal to `threshold`. A pixel can belong to multiple regions.\n\n`result[i][j]` is calculated as follows:\n\n*   If `image[i][j]` belongs to one or more regions, `result[i][j]` is the average intensity of those regions, rounded down to the nearest integer. When averaging across multiple regions, the rounded-down average intensity of each region is used before the final average is calculated and rounded down.\n*   If `image[i][j]` does not belong to any region, `result[i][j]` is equal to `image[i][j]`.\n\nReturn the grid `result`.",
                "constraints": [
                    "3 <= n, m <= 500",
                    "0 <= image[i][j] <= 255",
                    "0 <= threshold <= 255"
                ],
                "testcases": [
                    {
                        "input": "image = [[5,6,7,10],[8,9,10,10],[11,12,13,10]], threshold = 3",
                        "output": "[[9,9,9,9],[9,9,9,9],[9,9,9,9]]",
                        "explanation": "Two regions exist. Region 1 has an average intensity of 9. Region 2 has an average intensity of 9.67, which rounds down to 9.  The average of the rounded-down region averages is (9 + 9) / 2 = 9.  Since all pixels belong to at least one region, all pixels in the result are 9."
                    },
                    {
                        "input": "image = [[10,20,30],[15,25,35],[20,30,40],[25,35,45]], threshold = 12",
                        "output": "[[25,25,25],[27,27,27],[27,27,27],[30,30,30]]",
                        "explanation": "Two regions exist. Region 1 has an average intensity of 25. Region 2 has an average intensity of 30. The average of the rounded-down region averages is (25 + 30) / 2 = 27.5 which is rounded down to 27. The first row belongs only to the first region, and the last row belongs only to the second region. The middle two rows belongs to both."
                    },
                    {
                        "input": "image = [[5,6,7],[8,9,10],[11,12,13]], threshold = 1",
                        "output": "[[5,6,7],[8,9,10],[11,12,13]]",
                        "explanation": "No regions exist, so result[i][j] == image[i][j] for all pixels."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "range-sum-query-2d-immutable",
                "title": "Range Sum Query 2D - Immutable",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "k-radius-subarray-averages",
                "title": "K Radius Subarray Averages",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try all the <code>3 * 3</code> sub-grids to find all the regions.",
            "Keep two 2-D arrays <code>sum</code> and <code>num</code>, for each position <code>(x, y)</code> in a region, increase <code>sum[x][y]</code> by the average sum of the region and increase <code>num[x][y]</code> by <code>1</code>.",
            "For each position (x, y), <code>sum[x][y] / num[x][y]</code> is the answer. Note when <code>num[x][y] == 0</code>, we use the original value in <code>image</code> instead."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> resultGrid(vector<vector<int>>& image, int threshold) {\n    const int m = image.size();\n    const int n = image[0].size();\n    vector<vector<int>> sums(m, vector<int>(n));\n    vector<vector<int>> counts(m, vector<int>(n));\n\n    for (int i = 0; i < m - 2; ++i)\n      for (int j = 0; j < n - 2; ++j)\n        if (isRegion(image, i, j, threshold)) {\n          const int subgridSum = getSubgridSum(image, i, j);\n          for (int x = i; x < i + 3; ++x)\n            for (int y = j; y < j + 3; ++y) {\n              sums[x][y] += subgridSum / 9;\n              counts[x][y] += 1;\n            }\n        }\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (counts[i][j] > 0)\n          image[i][j] = sums[i][j] / counts[i][j];\n\n    return image;\n  }\n\n private:\n  // Returns true if image[i..i + 2][j..j + 2] is a region.\n  bool isRegion(const vector<vector<int>>& image, int i, int j, int threshold) {\n    for (int x = i; x < i + 3; ++x)\n      for (int y = j; y < j + 3; ++y) {\n        if (x > i && abs(image[x][y] - image[x - 1][y]) > threshold)\n          return false;\n        if (y > j && abs(image[x][y] - image[x][y - 1]) > threshold)\n          return false;\n      }\n    return true;\n  }\n\n  // Returns the sum of image[i..i + 2][j..j + 2].\n  int getSubgridSum(const vector<vector<int>>& image, int i, int j) {\n    int subgridSum = 0;\n    for (int x = i; x < i + 3; ++x)\n      for (int y = j; y < j + 3; ++y)\n        subgridSum += image[x][y];\n    return subgridSum;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] resultGrid(int[][] image, int threshold) {\n    final int m = image.length;\n    final int n = image[0].length;\n    int[][] sums = new int[m][n];\n    int[][] counts = new int[m][n];\n\n    for (int i = 0; i < m - 2; ++i)\n      for (int j = 0; j < n - 2; ++j)\n        if (isRegion(image, i, j, threshold)) {\n          final int subgridSum = getSubgridSum(image, i, j);\n          for (int x = i; x < i + 3; ++x)\n            for (int y = j; y < j + 3; ++y) {\n              sums[x][y] += subgridSum / 9;\n              counts[x][y] += 1;\n            }\n        }\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (counts[i][j] > 0)\n          image[i][j] = sums[i][j] / counts[i][j];\n\n    return image;\n  }\n\n  // Returns true if image[i..i + 2][j..j + 2] is a region.\n  private boolean isRegion(int[][] image, int i, int j, int threshold) {\n    for (int x = i; x < i + 3; ++x)\n      for (int y = j; y < j + 3; ++y) {\n        if (x > i && Math.abs(image[x][y] - image[x - 1][y]) > threshold)\n          return false;\n        if (y > j && Math.abs(image[x][y] - image[x][y - 1]) > threshold)\n          return false;\n      }\n    return true;\n  }\n\n  // Returns the sum of image[i..i + 2][j..j + 2].\n  private int getSubgridSum(int[][] image, int i, int j) {\n    int subgridSum = 0;\n    for (int x = i; x < i + 3; ++x)\n      for (int y = j; y < j + 3; ++y)\n        subgridSum += image[x][y];\n    return subgridSum;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def resultGrid(self, image: List[List[int]], threshold: int) -> List[List[int]]:\n    m = len(image)\n    n = len(image[0])\n    sums = [[0] * n for _ in range(m)]\n    counts = [[0] * n for _ in range(m)]\n\n    for i in range(m - 2):\n      for j in range(n - 2):\n        if self._isRegion(image, i, j, threshold):\n          subgridSum = sum(image[x][y]\n                           for x in range(i, i + 3)\n                           for y in range(j, j + 3))\n          for x in range(i, i + 3):\n            for y in range(j, j + 3):\n              sums[x][y] += subgridSum // 9\n              counts[x][y] += 1\n\n    for i in range(m):\n      for j in range(n):\n        if counts[i][j] > 0:\n          image[i][j] = sums[i][j] // counts[i][j]\n\n    return image\n\n  def _isRegion(self, image: List[List[int]], i: int, j: int, threshold: int) -> bool:\n    \"\"\"Returns True if image[i..i + 2][j..j + 2] is a region.\"\"\"\n    for x in range(i, i + 3):\n      for y in range(j, j + 3):\n        if x > i and abs(image[x][y] - image[x - 1][y]) > threshold:\n          return False\n        if y > j and abs(image[x][y] - image[x][y - 1]) > threshold:\n          return False\n    return True\n",
                "lang_text": "py"
            }
        }
    }
}