{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3132",
            "title": "Find the Integer Added to Array II",
            "titleSlug": "find-the-integer-added-to-array-ii",
            "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>.</p>\n\n<p>From <code>nums1</code> two elements have been removed, and all other elements have been increased (or decreased in the case of negative) by an integer, represented by the variable <code>x</code>.</p>\n\n<p>As a result, <code>nums1</code> becomes <strong>equal</strong> to <code>nums2</code>. Two arrays are considered <strong>equal</strong> when they contain the same integers with the same frequencies.</p>\n\n<p>Return the <strong>minimum</strong> possible integer<em> </em><code>x</code><em> </em>that achieves this equivalence.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">nums1 = [4,20,16,12,8], nums2 = [14,18,10]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">-2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After removing elements at indices <code>[0,4]</code> and adding -2, <code>nums1</code> becomes <code>[18,14,10]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">nums1 = [3,5,5,3], nums2 = [7,7]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After removing elements at indices <code>[0,3]</code> and adding 2, <code>nums1</code> becomes <code>[7,7]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums1.length &lt;= 200</code></li>\n\t<li><code>nums2.length == nums1.length - 2</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n\t<li>The test cases are generated in a way that there is an integer <code>x</code> such that <code>nums1</code> can become equal to <code>nums2</code> by removing two elements and adding <code>x</code> to each element of <code>nums1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 144,
            "dislikes": 32,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"20K\", \"totalSubmission\": \"64.4K\", \"totalAcceptedRaw\": 19970, \"totalSubmissionRaw\": 64367, \"acRate\": \"31.0%\"}",
            "hints": [
                "Try all possibilities to remove 2 elements from <code>nums1</code>.",
                "<code>x</code> should be equal to <code>min(nums2) - min(nums1)</code>, check it naively."
            ],
            "rephrased": {
                "body": "Given two integer arrays, `nums1` and `nums2`, where `nums2` has two fewer elements than `nums1`. Two elements are removed from `nums1`, and all the remaining elements are modified by adding an integer `x` to each of them. This transforms `nums1` into `nums2` such that both arrays have equal elements with equal frequencies. Determine the minimum possible integer value for `x` that satisfies this condition.",
                "constraints": [
                    "3 <= nums1.length <= 200",
                    "nums2.length == nums1.length - 2",
                    "0 <= nums1[i], nums2[i] <= 1000",
                    "The test cases are generated in a way that there is an integer `x` such that `nums1` can become equal to `nums2` by removing two elements and adding `x` to each element of `nums1`."
                ],
                "testcases": [
                    {
                        "input": "nums1 = [4,20,16,12,8], nums2 = [14,18,10]",
                        "output": "-2",
                        "explanation": "Removing the first and last elements of `nums1` (4 and 8) and adding -2 to each of the remaining elements, `nums1` becomes [18, 14, 10], which is equal to `nums2`."
                    },
                    {
                        "input": "nums1 = [3,5,5,3], nums2 = [7,7]",
                        "output": "2",
                        "explanation": "Removing the first and last elements of `nums1` (3 and 3) and adding 2 to each of the remaining elements, `nums1` becomes [7, 7], which is equal to `nums2`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Try all possibilities to remove 2 elements from <code>nums1</code>.",
            "<code>x</code> should be equal to <code>min(nums2) - min(nums1)</code>, check it naively."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumAddedInteger(vector<int>& nums1, vector<int>& nums2) {\n    // After removing two elements from nums1, either nums1[0], nums1[1], or\n    // nums1[2] will persist. Therefore, the difference between nums1 (with two\n    // elements removed) and nums2 is represented by nums2[0] - nums1[i], where\n    // 0 <= i <= 2.\n    int ans = INT_MAX;\n\n    ranges::sort(nums1);\n    ranges::sort(nums2);\n\n    for (int i = 0; i < 3; ++i) {\n      const int inc = nums2[0] - nums1[i];\n      if (isValidDiff(nums1, nums2, inc))\n        ans = min(ans, inc);\n    }\n\n    return ans;\n  }\n\n private:\n  // Returns true if it's possible to increase nums1 (with two elements removed)\n  // by `inc` to nums2.\n  bool isValidDiff(const vector<int>& nums1, const vector<int>& nums2,\n                   int inc) {\n    int removed = 0;\n    int i = 0;  // nums2's index\n\n    for (const int num : nums1)\n      if (num + inc == nums2[i]) {\n        if (++i == nums2.size())\n          break;\n      } else {\n        ++removed;\n      }\n\n    return removed <= 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumAddedInteger(int[] nums1, int[] nums2) {\n    // After removing two elements from nums1, either nums1[0], nums1[1], or\n    // nums1[2] will persist. Therefore, the difference between nums1 (with two\n    // elements removed) and nums2 is represented by nums2[0] - nums1[i], where\n    // 0 <= i <= 2.\n    int ans = Integer.MAX_VALUE;\n\n    Arrays.sort(nums1);\n    Arrays.sort(nums2);\n\n    for (int i = 0; i < 3; ++i) {\n      final int inc = nums2[0] - nums1[i];\n      if (isValidDiff(nums1, nums2, inc))\n        ans = Math.min(ans, inc);\n    }\n\n    return ans;\n  }\n\n  // Returns true if it's possible to increase nums1 (with two elements removed)\n  // by `inc` to nums2.\n  private boolean isValidDiff(int[] nums1, int[] nums2, int inc) {\n    int removed = 0;\n    int i = 0; // nums2's index\n\n    for (final int num : nums1)\n      if (num + inc == nums2[i]) {\n        if (++i == nums2.length)\n          break;\n      } else {\n        ++removed;\n      }\n\n    return removed <= 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumAddedInteger(self, nums1: List[int], nums2: List[int]) -> int:\n    # After removing two elements from nums1, either nums1[0], nums1[1], or\n    # nums1[2] will persist. Therefore, the difference between nums1 (with two\n    # elements removed) and nums2 is represented by nums2[0] - nums1[i], where\n    # 0 <= i <= 2.\n    ans = math.inf\n\n    nums1.sort()\n    nums2.sort()\n\n    for i in range(3):\n      inc = nums2[0] - nums1[i]\n      if self._isValidDiff(nums1, nums2, inc):\n        ans = min(ans, inc)\n\n    return ans\n\n  def _isValidDiff(self, nums1: List[int], nums2: List[int], inc: int) -> bool:\n    \"\"\"\n    Returns True if it's possible to increase nums1 (with two elements removed)\n    by `inc` to nums2.\n    \"\"\"\n    removed = 0\n    i = 0  # nums2's index\n\n    for num in nums1:\n      if num + inc == nums2[i]:\n        i += 1\n        if i == len(nums2):\n          break\n      else:\n        removed += 1\n\n    return removed <= 2\n",
                "lang_text": "py"
            }
        }
    }
}