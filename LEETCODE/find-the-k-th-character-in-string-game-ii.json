{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3307",
            "title": "Find the K-th Character in String Game II",
            "titleSlug": "find-the-k-th-character-in-string-game-ii",
            "content": "<p>Alice and Bob are playing a game. Initially, Alice has a string <code>word = &quot;a&quot;</code>.</p>\n\n<p>You are given a <strong>positive</strong> integer <code>k</code>. You are also given an integer array <code>operations</code>, where <code>operations[i]</code> represents the <strong>type</strong> of the <code>i<sup>th</sup></code> operation.</p>\n\n<p>Now Bob will ask Alice to perform <strong>all</strong> operations in sequence:</p>\n\n<ul>\n\t<li>If <code>operations[i] == 0</code>, <strong>append</strong> a copy of <code>word</code> to itself.</li>\n\t<li>If <code>operations[i] == 1</code>, generate a new string by <strong>changing</strong> each character in <code>word</code> to its <strong>next</strong> character in the English alphabet, and <strong>append</strong> it to the <em>original</em> <code>word</code>. For example, performing the operation on <code>&quot;c&quot;</code> generates <code>&quot;cd&quot;</code> and performing the operation on <code>&quot;zb&quot;</code> generates <code>&quot;zbac&quot;</code>.</li>\n</ul>\n\n<p>Return the value of the <code>k<sup>th</sup></code> character in <code>word</code> after performing all the operations.</p>\n\n<p><strong>Note</strong> that the character <code>&#39;z&#39;</code> can be changed to <code>&#39;a&#39;</code> in the second type of operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 5, operations = [0,0,0]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;a&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, <code>word == &quot;a&quot;</code>. Alice performs the three operations as follows:</p>\n\n<ul>\n\t<li>Appends <code>&quot;a&quot;</code> to <code>&quot;a&quot;</code>, <code>word</code> becomes <code>&quot;aa&quot;</code>.</li>\n\t<li>Appends <code>&quot;aa&quot;</code> to <code>&quot;aa&quot;</code>, <code>word</code> becomes <code>&quot;aaaa&quot;</code>.</li>\n\t<li>Appends <code>&quot;aaaa&quot;</code> to <code>&quot;aaaa&quot;</code>, <code>word</code> becomes <code>&quot;aaaaaaaa&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 10, operations = [0,1,0,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;b&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, <code>word == &quot;a&quot;</code>. Alice performs the four operations as follows:</p>\n\n<ul>\n\t<li>Appends <code>&quot;a&quot;</code> to <code>&quot;a&quot;</code>, <code>word</code> becomes <code>&quot;aa&quot;</code>.</li>\n\t<li>Appends <code>&quot;bb&quot;</code> to <code>&quot;aa&quot;</code>, <code>word</code> becomes <code>&quot;aabb&quot;</code>.</li>\n\t<li>Appends <code>&quot;aabb&quot;</code> to <code>&quot;aabb&quot;</code>, <code>word</code> becomes <code>&quot;aabbaabb&quot;</code>.</li>\n\t<li>Appends <code>&quot;bbccbbcc&quot;</code> to <code>&quot;aabbaabb&quot;</code>, <code>word</code> becomes <code>&quot;aabbaabbbbccbbcc&quot;</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>14</sup></code></li>\n\t<li><code>1 &lt;= operations.length &lt;= 100</code></li>\n\t<li><code>operations[i]</code> is either 0 or 1.</li>\n\t<li>The input is generated such that <code>word</code> has <strong>at least</strong> <code>k</code> characters after all operations.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 64,
            "dislikes": 4,
            "similarQuestions": "[{\"title\": \"Shifting Letters\", \"titleSlug\": \"shifting-letters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.5K\", \"totalSubmission\": \"23.2K\", \"totalAcceptedRaw\": 6474, \"totalSubmissionRaw\": 23250, \"acRate\": \"27.8%\"}",
            "hints": [
                "Try to replay the operations <code>k<sup>th</sup></code> character was part of.",
                "The <code>k<sup>th</sup></code> character is only affected if it is present in the first half of the string."
            ],
            "rephrased": {
                "body": "Alice starts with the string `word = \"a\"`. Bob instructs Alice to perform a series of operations based on the `operations` array. If `operations[i] == 0`, Alice appends a copy of the current `word` to itself. If `operations[i] == 1`, Alice creates a new string by shifting each character in `word` to the next letter in the alphabet (wrapping 'z' to 'a') and appends this new string to the *original* `word`. The task is to determine the `k`-th character in the final `word` after all operations have been performed.",
                "constraints": [
                    "1 <= k <= 10^14",
                    "1 <= operations.length <= 100",
                    "operations[i] is either 0 or 1.",
                    "The input is generated such that `word` has at least `k` characters after all operations."
                ],
                "testcases": [
                    {
                        "input": "k = 5, operations = [0,0,0]",
                        "output": "\"a\"",
                        "explanation": "Initially, word = \"a\".\n\nOperation 1: Appends \"a\" to \"a\", word becomes \"aa\".\nOperation 2: Appends \"aa\" to \"aa\", word becomes \"aaaa\".\nOperation 3: Appends \"aaaa\" to \"aaaa\", word becomes \"aaaaaaaa\".\nThe 5th character is 'a'."
                    },
                    {
                        "input": "k = 10, operations = [0,1,0,1]",
                        "output": "\"b\"",
                        "explanation": "Initially, word = \"a\".\n\nOperation 1: Appends \"a\" to \"a\", word becomes \"aa\".\nOperation 2: Appends \"bb\" to \"aa\", word becomes \"aabb\".\nOperation 3: Appends \"aabb\" to \"aabb\", word becomes \"aabbaabb\".\nOperation 4: Appends \"bbccbbcc\" to \"aabbaabb\", word becomes \"aabbaabbbbccbbcc\".\nThe 10th character is 'b'."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "shifting-letters",
                "title": "Shifting Letters",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try to replay the operations <code>k<sup>th</sup></code> character was part of.",
            "The <code>k<sup>th</sup></code> character is only affected if it is present in the first half of the string."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ]
    }
}