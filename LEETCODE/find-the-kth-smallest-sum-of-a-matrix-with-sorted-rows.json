{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1439",
            "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
            "titleSlug": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
            "content": "<p>You are given an <code>m x n</code> matrix <code>mat</code> that has its rows sorted in non-decreasing order and an integer <code>k</code>.</p>\n\n<p>You are allowed to choose <strong>exactly one element</strong> from each row to form an array.</p>\n\n<p>Return <em>the </em><code>k<sup>th</sup></code><em> smallest array sum among all possible arrays</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[1,3,11],[2,4,6]], k = 5\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Choosing one element from each row, the first k smallest sum are:\n[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[1,3,11],[2,4,6]], k = 9\n<strong>Output:</strong> 17\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Choosing one element from each row, the first k smallest sum are:\n[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.  \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat.length[i]</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 40</code></li>\n\t<li><code>1 &lt;= mat[i][j] &lt;= 5000</code></li>\n\t<li><code>1 &lt;= k &lt;= min(200, n<sup>m</sup>)</code></li>\n\t<li><code>mat[i]</code> is a non-decreasing array.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1191,
            "dislikes": 15,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"31.6K\", \"totalSubmission\": \"51.6K\", \"totalAcceptedRaw\": 31639, \"totalSubmissionRaw\": 51568, \"acRate\": \"61.4%\"}",
            "hints": [
                "Save all visited sums and corresponding indexes in a priority queue. Then, once you pop the smallest sum so far, you can quickly identify the next m candidates for smallest sum by incrementing each row index by 1."
            ],
            "rephrased": {
                "body": "Given an `m x n` matrix `mat` where each row is sorted in non-decreasing order, and an integer `k`, you are allowed to choose exactly one element from each row to form an array. Your task is to find the `k`-th smallest sum among all possible arrays that can be formed.",
                "constraints": [
                    "m == mat.length",
                    "n == mat.length[i]",
                    "1 <= m, n <= 40",
                    "1 <= mat[i][j] <= 5000",
                    "1 <= k <= min(200, n<sup>m</sup>)",
                    "mat[i] is a non-decreasing array."
                ],
                "testcases": [
                    {
                        "input": "mat = [[1,3,11],[2,4,6]], k = 5",
                        "output": "7",
                        "explanation": "Consider all possible arrays formed by selecting one element from each row.  Sort the sums of these arrays in ascending order.  The 5th smallest sum is 7 (corresponding to [1,6])."
                    },
                    {
                        "input": "mat = [[1,3,11],[2,4,6]], k = 9",
                        "output": "17",
                        "explanation": null
                    },
                    {
                        "input": "mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7",
                        "output": "9",
                        "explanation": "Consider all possible arrays formed by selecting one element from each row. Sort the sums of these arrays in ascending order. The 7th smallest sum is 9 (corresponding to arrays such as [1,5,3])."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Save all visited sums and corresponding indexes in a priority queue. Then, once you pop the smallest sum so far, you can quickly identify the next m candidates for smallest sum by incrementing each row index by 1."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  int i;\n  int j;\n  int sum;  // nums1[i] + nums2[j]\n  T(int i, int j, int sum) : i(i), j(j), sum(sum) {}\n};\n\nclass Solution {\n public:\n  int kthSmallest(vector<vector<int>>& mat, int k) {\n    vector<int> row = mat[0];\n\n    for (int i = 1; i < mat.size(); ++i)\n      row = kSmallestPairSums(row, mat[i], k);\n\n    return row.back();\n  }\n\n private:\n  // Similar to 373. Find K Pairs with Smallest Sums\n  vector<int> kSmallestPairSums(vector<int>& nums1, vector<int>& nums2, int k) {\n    vector<int> ans;\n    auto compare = [&](const T& a, const T& b) { return a.sum > b.sum; };\n    priority_queue<T, vector<T>, decltype(compare)> minHeap(compare);\n\n    for (int i = 0; i < k && i < nums1.size(); ++i)\n      minHeap.emplace(i, 0, nums1[i] + nums2[0]);\n\n    while (!minHeap.empty() && ans.size() < k) {\n      const auto [i, j, _] = minHeap.top();\n      minHeap.pop();\n      ans.push_back(nums1[i] + nums2[j]);\n      if (j + 1 < nums2.size())\n        minHeap.emplace(i, j + 1, nums1[i] + nums2[j + 1]);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public int i;\n  public int j;\n  public int sum; // nums1[i] + nums2[j]\n  public T(int i, int j, int sum) {\n    this.i = i;\n    this.j = j;\n    this.sum = sum;\n  }\n}\n\nclass Solution {\n  public int kthSmallest(int[][] mat, int k) {\n    int[] row = mat[0];\n\n    for (int i = 1; i < mat.length; ++i)\n      row = kSmallestPairSums(row, mat[i], k);\n\n    return row[k - 1];\n  }\n\n  // Similar to 373. Find K Pairs with Smallest Sums\n  private int[] kSmallestPairSums(int[] nums1, int[] nums2, int k) {\n    List<Integer> ans = new ArrayList<>();\n    Queue<T> minHeap = new PriorityQueue<>((a, b) -> a.sum - b.sum);\n\n    for (int i = 0; i < k && i < nums1.length; ++i)\n      minHeap.offer(new T(i, 0, nums1[i] + nums2[0]));\n\n    while (!minHeap.isEmpty() && ans.size() < k) {\n      final int i = minHeap.peek().i;\n      final int j = minHeap.poll().j;\n      ans.add(nums1[i] + nums2[j]);\n      if (j + 1 < nums2.length)\n        minHeap.offer(new T(i, j + 1, nums1[i] + nums2[j + 1]));\n    }\n\n    return ans.stream().mapToInt(Integer::intValue).toArray();\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}