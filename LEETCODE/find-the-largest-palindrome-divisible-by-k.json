{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3260",
            "title": "Find the Largest Palindrome Divisible by K",
            "titleSlug": "find-the-largest-palindrome-divisible-by-k",
            "content": "<p>You are given two <strong>positive</strong> integers <code>n</code> and <code>k</code>.</p>\n\n<p>An integer <code>x</code> is called <strong>k-palindromic</strong> if:</p>\n\n<ul>\n\t<li><code>x</code> is a <span data-keyword=\"palindrome-integer\">palindrome</span>.</li>\n\t<li><code>x</code> is divisible by <code>k</code>.</li>\n</ul>\n\n<p>Return the<strong> largest</strong> integer having <code>n</code> digits (as a string) that is <strong>k-palindromic</strong>.</p>\n\n<p><strong>Note</strong> that the integer must <strong>not</strong> have leading zeros.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, k = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;595&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>595 is the largest k-palindromic integer with 3 digits.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 1, k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;8&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>4 and 8 are the only k-palindromic integers with 1 digit.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, k = 6</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;89898&quot;</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 9</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 86,
            "dislikes": 64,
            "similarQuestions": "[{\"title\": \"Palindrome Number\", \"titleSlug\": \"palindrome-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Closest Palindrome\", \"titleSlug\": \"find-the-closest-palindrome\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.6K\", \"totalSubmission\": \"45.5K\", \"totalAcceptedRaw\": 6618, \"totalSubmissionRaw\": 45460, \"acRate\": \"14.6%\"}",
            "hints": [
                "It must have a solution since we can have all digits equal to <code>k</code>.",
                "Use string dp, store modulus along with length of number currently formed.",
                "Is it possible to solve greedily using divisibility rules?"
            ],
            "rephrased": {
                "body": "Given two positive integers `n` and `k`, find the largest integer with `n` digits that is a palindrome and divisible by `k`. This integer should not have leading zeros.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= k <= 9"
                ],
                "testcases": [
                    {
                        "input": "n = 3, k = 5",
                        "output": "\"595\"",
                        "explanation": "595 is the largest 3-digit palindrome that is divisible by 5."
                    },
                    {
                        "input": "n = 1, k = 4",
                        "output": "\"8\"",
                        "explanation": "Among the single-digit numbers divisible by 4 (4 and 8), 8 is the largest."
                    },
                    {
                        "input": "n = 5, k = 6",
                        "output": "\"89898\"",
                        "explanation": "89898 is the largest 5-digit palindrome that is divisible by 6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "palindrome-number",
                "title": "Palindrome Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-the-closest-palindrome",
                "title": "Find the Closest Palindrome",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "It must have a solution since we can have all digits equal to <code>k</code>.",
            "Use string dp, store modulus along with length of number currently formed.",
            "Is it possible to solve greedily using divisibility rules?"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string largestPalindrome(int n, int k) {\n    switch (k) {\n      case 1:\n        return string(n, '9');\n      case 2:\n        return n <= 2 ? string(n, '8') : \"8\" + string(n - 2, '9') + \"8\";\n      case 3:\n      case 9:\n        return string(n, '9');\n      case 4:\n        return n <= 4 ? string(n, '8') : \"88\" + string(n - 4, '9') + \"88\";\n      case 5:\n        return n <= 2 ? string(n, '5') : \"5\" + string(n - 2, '9') + \"5\";\n      case 6:\n        if (n <= 2) {\n          return string(n, '6');\n        } else if (n % 2 == 1) {\n          const int l = n / 2 - 1;\n          return \"8\" + string(l, '9') + \"8\" + string(l, '9') + \"8\";\n        } else {\n          const int l = n / 2 - 2;\n          return \"8\" + string(l, '9') + \"77\" + string(l, '9') + \"8\";\n        }\n      case 8:\n        return n <= 6 ? string(n, '8') : \"888\" + string(n - 6, '9') + \"888\";\n      default:\n        const string middle[] = {\"\",          \"7\",          \"77\",\n                                 \"959\",       \"9779\",       \"99799\",\n                                 \"999999\",    \"9994999\",    \"99944999\",\n                                 \"999969999\", \"9999449999\", \"99999499999\"};\n        const int q = n / 12;\n        const int r = n % 12;\n        return string(q * 6, '9') + middle[r] + string(q * 6, '9');\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String largestPalindrome(int n, int k) {\n    StringBuilder sb = new StringBuilder();\n\n    switch (k) {\n      case 1:\n        return \"9\".repeat(n);\n      case 2:\n        return n <= 2 ? \"8\".repeat(n)\n                      : sb.append(\"8\") //\n                            .append(\"9\".repeat(n - 2))\n                            .append(\"8\")\n                            .toString();\n      case 3:\n      case 9:\n        return \"9\".repeat(n);\n      case 4:\n        return n <= 4 ? \"8\".repeat(n)\n                      : sb.append(\"88\") //\n                            .append(\"9\".repeat(n - 4))\n                            .append(\"88\")\n                            .toString();\n      case 5:\n        return n <= 2 ? \"5\".repeat(n)\n                      : sb.append(\"5\") //\n                            .append(\"9\".repeat(n - 2))\n                            .append(\"5\")\n                            .toString();\n      case 6:\n        if (n <= 2) {\n          return \"6\".repeat(n);\n        } else if (n % 2 == 1) {\n          final int l = n / 2 - 1;\n          return sb.append(\"8\")\n              .append(\"9\".repeat(l))\n              .append(\"8\")\n              .append(\"9\".repeat(l))\n              .append(\"8\")\n              .toString();\n        } else {\n          final int l = n / 2 - 2;\n          return sb.append(\"8\")\n              .append(\"9\".repeat(l))\n              .append(\"77\")\n              .append(\"9\".repeat(l))\n              .append(\"8\")\n              .toString();\n        }\n      case 8:\n        return n <= 6 ? \"8\".repeat(n)\n                      : sb.append(\"888\") //\n                            .append(\"9\".repeat(n - 6))\n                            .append(\"888\")\n                            .toString();\n      default:\n        String[] middle = {\"\",         \"7\",         \"77\",         \"959\",\n                           \"9779\",     \"99799\",     \"999999\",     \"9994999\",\n                           \"99944999\", \"999969999\", \"9999449999\", \"99999499999\"};\n        final int q = n / 12;\n        final int r = n % 12;\n        return sb.append(\"999999\".repeat(q))\n            .append(middle[r])\n            .append(\"999999\".repeat(q))\n            .toString();\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestPalindrome(self, n: int, k: int) -> str:\n    match k:\n      case 1:\n        return '9' * n\n      case 2:\n        return '8' * n if n <= 2 else '8' + '9' * (n - 2) + '8'\n      case 3 | 9:\n        return '9' * n\n      case 4:\n        return '8' * n if n <= 4 else '88' + '9' * (n - 4) + '88'\n      case 5:\n        return '5' * n if n <= 2 else '5' + '9' * (n - 2) + '5'\n      case 6:\n        if n <= 2:\n          return '6' * n\n        elif n % 2 == 1:\n          l = n // 2 - 1\n          return '8' + '9' * l + '8' + '9' * l + '8'\n        else:\n          l = n // 2 - 2\n          return '8' + '9' * l + '77' + '9' * l + '8'\n      case 8:\n        return '8' * n if n <= 6 else '888' + '9' * (n - 6) + '888'\n      case _:\n        middle = {\n            0: '', 1: '7', 2: '77', 3: '959', 4: '9779', 5: '99799',\n            6: '999999', 7: '9994999', 8: '99944999', 9: '999969999',\n            10: '9999449999', 11: '99999499999'\n        }\n        q, r = divmod(n, 12)\n        return '999999' * q + middle[r] + '999999' * q\n",
                "lang_text": "py"
            }
        }
    }
}