{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3043",
            "title": "Find the Length of the Longest Common Prefix",
            "titleSlug": "find-the-length-of-the-longest-common-prefix",
            "content": "<p>You are given two arrays with <strong>positive</strong> integers <code>arr1</code> and <code>arr2</code>.</p>\n\n<p>A <strong>prefix</strong> of a positive integer is an integer formed by one or more of its digits, starting from its <strong>leftmost</strong> digit. For example, <code>123</code> is a prefix of the integer <code>12345</code>, while <code>234</code> is <strong>not</strong>.</p>\n\n<p>A <strong>common prefix</strong> of two integers <code>a</code> and <code>b</code> is an integer <code>c</code>, such that <code>c</code> is a prefix of both <code>a</code> and <code>b</code>. For example, <code>5655359</code> and <code>56554</code> have a common prefix <code>565</code> while <code>1223</code> and <code>43456</code> <strong>do not</strong> have a common prefix.</p>\n\n<p>You need to find the length of the <strong>longest common prefix</strong> between all pairs of integers <code>(x, y)</code> such that <code>x</code> belongs to <code>arr1</code> and <code>y</code> belongs to <code>arr2</code>.</p>\n\n<p>Return <em>the length of the <strong>longest</strong> common prefix among all pairs</em>.<em> If no common prefix exists among them</em>, <em>return</em> <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,10,100], arr2 = [1000]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 pairs (arr1[i], arr2[j]):\n- The longest common prefix of (1, 1000) is 1.\n- The longest common prefix of (10, 1000) is 10.\n- The longest common prefix of (100, 1000) is 100.\nThe longest common prefix is 100 with a length of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,2,3], arr2 = [4,4,4]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There exists no common prefix for any pair (arr1[i], arr2[j]), hence we return 0.\nNote that common prefixes between elements of the same array do not count.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr1.length, arr2.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= arr1[i], arr2[i] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 147,
            "dislikes": 12,
            "similarQuestions": "[{\"title\": \"Longest Common Prefix\", \"titleSlug\": \"longest-common-prefix\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Longest Common Suffix Queries\", \"titleSlug\": \"longest-common-suffix-queries\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.7K\", \"totalSubmission\": \"61.9K\", \"totalAcceptedRaw\": 20653, \"totalSubmissionRaw\": 61935, \"acRate\": \"33.3%\"}",
            "hints": [
                "Put all the possible prefixes of each element in <code>arr1</code> into a HashSet.",
                "For all the possible prefixes of each element in <code>arr2</code>, check if it exists in the HashSet."
            ],
            "rephrased": {
                "body": "Given two arrays, `arr1` and `arr2`, containing positive integers, find the length of the longest common prefix among all pairs of integers `(x, y)` where `x` is from `arr1` and `y` is from `arr2`. A common prefix is the shared leading digits between two numbers. Return 0 if no common prefixes exist.",
                "constraints": [
                    "1 <= arr1.length, arr2.length <= 5 * 10^4",
                    "1 <= arr1[i], arr2[i] <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [1,10,100], arr2 = [1000]",
                        "output": "3",
                        "explanation": "The pairs are (1, 1000), (10, 1000), and (100, 1000). The longest common prefixes are 1, 10, and 100, respectively. The length of the longest common prefix (100) is 3."
                    },
                    {
                        "input": "arr1 = [1,2,3], arr2 = [4,4,4]",
                        "output": "0",
                        "explanation": "No pairs have a common prefix, so the answer is 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "longest-common-prefix",
                "title": "Longest Common Prefix",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-common-suffix-queries",
                "title": "Longest Common Suffix Queries",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Put all the possible prefixes of each element in <code>arr1</code> into a HashSet.",
            "For all the possible prefixes of each element in <code>arr2</code>, check if it exists in the HashSet."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  TrieNode() : children(10) {}\n};\n\nclass Trie {\n public:\n  void insert(const string& word) {\n    shared_ptr<TrieNode> node = root;\n    for (const char c : word) {\n      const int i = c - '0';\n      if (node->children[i] == nullptr)\n        node->children[i] = make_shared<TrieNode>();\n      node = node->children[i];\n    }\n  }\n\n  int search(const string& word) {\n    int prefixLength = 0;\n    shared_ptr<TrieNode> node = root;\n    for (const char c : word) {\n      const int i = c - '0';\n      if (node->children[i] == nullptr)\n        break;\n      node = node->children[i];\n      ++prefixLength;\n    }\n    return prefixLength;\n  }\n\n private:\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n};\n\nclass Solution {\n public:\n  int longestCommonPrefix(vector<int>& arr1, vector<int>& arr2) {\n    int ans = 0;\n    Trie trie;\n\n    for (const int num : arr1)\n      trie.insert(to_string(num));\n\n    for (const int num : arr2)\n      ans = max(ans, trie.search(to_string(num)));\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[10];\n}\n\nclass Trie {\n  public void insert(final String word) {\n    TrieNode node = root;\n    for (final char c : word.toCharArray()) {\n      final int i = c - '0';\n      if (node.children[i] == null)\n        node.children[i] = new TrieNode();\n      node = node.children[i];\n    }\n  }\n\n  public int search(final String word) {\n    int prefixLength = 0;\n    TrieNode node = root;\n    for (final char c : word.toCharArray()) {\n      final int i = c - '0';\n      if (node.children[i] == null)\n        break;\n      node = node.children[i];\n      ++prefixLength;\n    }\n    return prefixLength;\n  }\n\n  private TrieNode root = new TrieNode();\n}\n\nclass Solution {\n  public int longestCommonPrefix(int[] arr1, int[] arr2) {\n    int ans = 0;\n    Trie trie = new Trie();\n\n    for (final int num : arr1)\n      trie.insert(Integer.toString(num));\n\n    for (final int num : arr2)\n      ans = Math.max(ans, trie.search(Integer.toString(num)));\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TrieNode:\n  def __init__(self):\n    self.children: Dict[str, TrieNode] = {}\n\n\nclass Trie:\n  def __init__(self):\n    self.root = TrieNode()\n\n  def insert(self, word: str) -> None:\n    node: TrieNode = self.root\n    for c in word:\n      node = node.children.setdefault(c, TrieNode())\n    node.isWord = True\n\n  def search(self, word: str) -> int:\n    prefixLength = 0\n    node = self.root\n    for c in word:\n      if c not in node.children:\n        break\n      node = node.children[c]\n      prefixLength += 1\n    return prefixLength\n\n\nclass Solution:\n  def longestCommonPrefix(self, arr1: List[int], arr2: List[int]) -> int:\n    trie = Trie()\n\n    for num in arr1:\n      trie.insert(str(num))\n\n    return max(trie.search(str(num)) for num in arr2)\n",
                "lang_text": "py"
            }
        }
    }
}