{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3302",
            "title": "Find the Lexicographically Smallest Valid Sequence",
            "titleSlug": "find-the-lexicographically-smallest-valid-sequence",
            "content": "<p>You are given two strings <code>word1</code> and <code>word2</code>.</p>\n\n<p>A string <code>x</code> is called <strong>almost equal</strong> to <code>y</code> if you can change <strong>at most</strong> one character in <code>x</code> to make it <em>identical</em> to <code>y</code>.</p>\n\n<p>A sequence of indices <code>seq</code> is called <strong>valid</strong> if:</p>\n\n<ul>\n\t<li>The indices are sorted in <strong>ascending</strong> order.</li>\n\t<li><em>Concatenating</em> the characters at these indices in <code>word1</code> in <strong>the same</strong> order results in a string that is <strong>almost equal</strong> to <code>word2</code>.</li>\n</ul>\n\n<p>Return an array of size <code>word2.length</code> representing the <span data-keyword=\"lexicographically-smaller-array\">lexicographically smallest</span> <strong>valid</strong> sequence of indices. If no such sequence of indices exists, return an <strong>empty</strong> array.</p>\n\n<p><strong>Note</strong> that the answer must represent the <em>lexicographically smallest array</em>, <strong>not</strong> the corresponding string formed by those indices.<!-- notionvc: 2ff8e782-bd6f-4813-a421-ec25f7e84c1e --></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word1 = &quot;vbcca&quot;, word2 = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,1,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The lexicographically smallest valid sequence of indices is <code>[0, 1, 2]</code>:</p>\n\n<ul>\n\t<li>Change <code>word1[0]</code> to <code>&#39;a&#39;</code>.</li>\n\t<li><code>word1[1]</code> is already <code>&#39;b&#39;</code>.</li>\n\t<li><code>word1[2]</code> is already <code>&#39;c&#39;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word1 = &quot;bacdc&quot;, word2 = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,2,4]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The lexicographically smallest valid sequence of indices is <code>[1, 2, 4]</code>:</p>\n\n<ul>\n\t<li><code>word1[1]</code> is already <code>&#39;a&#39;</code>.</li>\n\t<li>Change <code>word1[2]</code> to <code>&#39;b&#39;</code>.</li>\n\t<li><code>word1[4]</code> is already <code>&#39;c&#39;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word1 = &quot;aaaaaa&quot;, word2 = &quot;aaabc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no valid sequence of indices.</p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word1 = &quot;abc&quot;, word2 = &quot;ab&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,1]</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word2.length &lt; word1.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>word1</code> and <code>word2</code> consist only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 101,
            "dislikes": 22,
            "similarQuestions": "[{\"title\": \"Smallest K-Length Subsequence With Occurrences of a Letter\", \"titleSlug\": \"smallest-k-length-subsequence-with-occurrences-of-a-letter\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.4K\", \"totalSubmission\": \"25.1K\", \"totalAcceptedRaw\": 4375, \"totalSubmissionRaw\": 25082, \"acRate\": \"17.4%\"}",
            "hints": [
                "Let <code>dp[i]</code> be the longest suffix of <code>word2</code> that exists as a subsequence of suffix of the substring of <code>word1</code> starting at index <code>i</code>.",
                "If <code>dp[i + 1] < m</code> and <code>word1[i] == word2[m - dp[i + 1] - 1]</code>,<code>dp[i] =  dp[i + 1] + 1</code>. Otherwise, <code>dp[i] =  dp[i + 1]</code>.",
                "For each index <code>i</code>, greedily select characters using the <code>dp</code> array to know whether a solution exists."
            ],
            "rephrased": {
                "body": "Given two strings `word1` and `word2`, determine the lexicographically smallest valid sequence of indices from `word1` that forms a string almost equal to `word2`. A string `x` is almost equal to `y` if changing at most one character in `x` makes it identical to `y`. A valid sequence of indices is sorted in ascending order, and concatenating the characters at those indices in `word1` results in a string almost equal to `word2`. Return an array of size `word2.length` representing this lexicographically smallest valid sequence. If no such sequence exists, return an empty array.",
                "constraints": [
                    "1 <= word2.length < word1.length <= 3 * 10^5",
                    "word1 and word2 consist only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "word1 = \"vbcca\", word2 = \"abc\"",
                        "output": "[0,1,2]",
                        "explanation": "The sequence [0, 1, 2] is valid because we can change word1[0] to 'a', word1[1] is already 'b', and word1[2] is already 'c', resulting in a string 'abc' which is identical to word2."
                    },
                    {
                        "input": "word1 = \"bacdc\", word2 = \"abc\"",
                        "output": "[1,2,4]",
                        "explanation": "The sequence [1, 2, 4] is valid because word1[1] is 'a', we can change word1[2] to 'b', and word1[4] is 'c', resulting in a string 'abc' which is identical to word2."
                    },
                    {
                        "input": "word1 = \"aaaaaa\", word2 = \"aaabc\"",
                        "output": "[]",
                        "explanation": "There is no valid sequence of indices that can form a string almost equal to \"aaabc\" from \"aaaaaa\"."
                    },
                    {
                        "input": "word1 = \"abc\", word2 = \"ab\"",
                        "output": "[0,1]",
                        "explanation": "The sequence [0, 1] is valid because word1[0] is 'a', and word1[1] is 'b', resulting in a string 'ab' which is identical to word2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
                "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let <code>dp[i]</code> be the longest suffix of <code>word2</code> that exists as a subsequence of suffix of the substring of <code>word1</code> starting at index <code>i</code>.",
            "If <code>dp[i + 1] < m</code> and <code>word1[i] == word2[m - dp[i + 1] - 1]</code>,<code>dp[i] =  dp[i + 1] + 1</code>. Otherwise, <code>dp[i] =  dp[i + 1]</code>.",
            "For each index <code>i</code>, greedily select characters using the <code>dp</code> array to know whether a solution exists."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> validSequence(string word1, string word2) {\n    vector<int> ans(word2.length());\n    // last[j] := the index i of the last occurrence in word1, where\n    // word1[i] == word2[j]\n    vector<int> last(word2.length(), -1);\n\n    int i = word1.length() - 1;\n    int j = word2.length() - 1;\n    while (i >= 0 && j >= 0) {\n      if (word1[i] == word2[j])\n        last[j--] = i;\n      --i;\n    }\n\n    bool canSkip = true;\n    j = 0;\n    for (i = 0; i < word1.length(); ++i) {\n      if (j == word2.length())\n        break;\n      if (word1[i] == word2[j]) {\n        ans[j++] = i;\n      } else if (canSkip && (j == word2.length() - 1 || i < last[j + 1])) {\n        canSkip = false;\n        ans[j++] = i;\n      }\n    }\n\n    return j == word2.length() ? ans : vector<int>();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] validSequence(String word1, String word2) {\n    int[] ans = new int[word2.length()];\n    // last[j] := the index i of the last occurrence in word1, where\n    // word1[i] == word2[j]\n    int[] last = new int[word2.length()];\n    Arrays.fill(last, -1);\n\n    int i = word1.length() - 1;\n    int j = word2.length() - 1;\n    while (i >= 0 && j >= 0) {\n      if (word1.charAt(i) == word2.charAt(j))\n        last[j--] = i;\n      --i;\n    }\n\n    boolean canSkip = true;\n    j = 0;\n    for (i = 0; i < word1.length(); ++i) {\n      if (j == word2.length())\n        break;\n      if (word1.charAt(i) == word2.charAt(j)) {\n        ans[j++] = i;\n      } else if (canSkip && (j == word2.length() - 1 || i < last[j + 1])) {\n        canSkip = false;\n        ans[j++] = i;\n      }\n    }\n\n    return j == word2.length() ? ans : new int[0];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def validSequence(self, word1: str, word2: str) -> list[int]:\n    ans = []\n    # last[j] := the index i of the last occurrence in word1, where\n    # word1[i] == word2[j]\n    last = [-1] * len(word2)\n\n    i = len(word1) - 1\n    j = len(word2) - 1\n    while i >= 0 and j >= 0:\n      if word1[i] == word2[j]:\n        last[j] = i\n        j -= 1\n      i -= 1\n\n    canSkip = True\n    j = 0\n    for i, c in enumerate(word1):\n      if j == len(word2):\n        break\n      if c == word2[j]:\n        ans.append(i)\n        j += 1\n      elif canSkip and (j == len(word2) - 1 or i < last[j + 1]):\n        canSkip = False\n        ans.append(i)\n        j += 1\n\n    return ans if j == len(word2) else []\n",
                "lang_text": "py"
            }
        }
    }
}