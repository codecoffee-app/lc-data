{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1964",
            "title": "Find the Longest Valid Obstacle Course at Each Position",
            "titleSlug": "find-the-longest-valid-obstacle-course-at-each-position",
            "content": "<p>You want to build some obstacle courses. You are given a <strong>0-indexed</strong> integer array <code>obstacles</code> of length <code>n</code>, where <code>obstacles[i]</code> describes the height of the <code>i<sup>th</sup></code> obstacle.</p>\n\n<p>For every index <code>i</code> between <code>0</code> and <code>n - 1</code> (<strong>inclusive</strong>), find the length of the <strong>longest obstacle course</strong> in <code>obstacles</code> such that:</p>\n\n<ul>\n\t<li>You choose any number of obstacles between <code>0</code> and <code>i</code> <strong>inclusive</strong>.</li>\n\t<li>You must include the <code>i<sup>th</sup></code> obstacle in the course.</li>\n\t<li>You must put the chosen obstacles in the <strong>same order</strong> as they appear in <code>obstacles</code>.</li>\n\t<li>Every obstacle (except the first) is <strong>taller</strong> than or the <strong>same height</strong> as the obstacle immediately before it.</li>\n</ul>\n\n<p>Return <em>an array</em> <code>ans</code> <em>of length</em> <code>n</code>, <em>where</em> <code>ans[i]</code> <em>is the length of the <strong>longest obstacle course</strong> for index</em> <code>i</code><em> as described above</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> obstacles = [1,2,3,2]\n<strong>Output:</strong> [1,2,3,3]\n<strong>Explanation:</strong> The longest valid obstacle course at each position is:\n- i = 0: [<u>1</u>], [1] has length 1.\n- i = 1: [<u>1</u>,<u>2</u>], [1,2] has length 2.\n- i = 2: [<u>1</u>,<u>2</u>,<u>3</u>], [1,2,3] has length 3.\n- i = 3: [<u>1</u>,<u>2</u>,3,<u>2</u>], [1,2,2] has length 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> obstacles = [2,2,1]\n<strong>Output:</strong> [1,2,1]\n<strong>Explanation: </strong>The longest valid obstacle course at each position is:\n- i = 0: [<u>2</u>], [2] has length 1.\n- i = 1: [<u>2</u>,<u>2</u>], [2,2] has length 2.\n- i = 2: [2,2,<u>1</u>], [1] has length 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> obstacles = [3,1,5,6,4,2]\n<strong>Output:</strong> [1,1,2,3,2,2]\n<strong>Explanation:</strong> The longest valid obstacle course at each position is:\n- i = 0: [<u>3</u>], [3] has length 1.\n- i = 1: [3,<u>1</u>], [1] has length 1.\n- i = 2: [<u>3</u>,1,<u>5</u>], [3,5] has length 2. [1,5] is also valid.\n- i = 3: [<u>3</u>,1,<u>5</u>,<u>6</u>], [3,5,6] has length 3. [1,5,6] is also valid.\n- i = 4: [<u>3</u>,1,5,6,<u>4</u>], [3,4] has length 2. [1,4] is also valid.\n- i = 5: [3,<u>1</u>,5,6,4,<u>2</u>], [1,2] has length 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == obstacles.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= obstacles[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1730,
            "dislikes": 70,
            "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"54.8K\", \"totalSubmission\": \"86.6K\", \"totalAcceptedRaw\": 54802, \"totalSubmissionRaw\": 86642, \"acRate\": \"63.3%\"}",
            "hints": [
                "Can you keep track of the minimum height for each obstacle course length?",
                "You can use binary search to find the longest previous obstacle course length that satisfies the conditions."
            ],
            "rephrased": {
                "body": "Given an array `obstacles` representing the heights of obstacles, find the length of the longest obstacle course for each index `i` (0 to n-1).  The obstacle course must include the i-th obstacle, maintain the original order from `obstacles`, and be non-decreasing (each obstacle is taller or the same height as the previous one). Return an array `ans` where `ans[i]` is the length of the longest obstacle course at index `i`.",
                "constraints": [
                    "n == obstacles.length",
                    "1 <= n <= 10^5",
                    "1 <= obstacles[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,2]",
                        "output": "[1,2,3,3]",
                        "explanation": "For i=0: [1] has length 1. For i=1: [1,2] has length 2. For i=2: [1,2,3] has length 3. For i=3: [1,2,2] has length 3."
                    },
                    {
                        "input": "[2,2,1]",
                        "output": "[1,2,1]",
                        "explanation": "For i=0: [2] has length 1. For i=1: [2,2] has length 2. For i=2: [1] has length 1."
                    },
                    {
                        "input": "[3,1,5,6,4,2]",
                        "output": "[1,1,2,3,2,2]",
                        "explanation": "For i=0: [3] has length 1. For i=1: [1] has length 1. For i=2: [3,5] or [1,5] has length 2. For i=3: [3,5,6] or [1,5,6] has length 3. For i=4: [3,4] or [1,4] has length 2. For i=5: [1,2] has length 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-increasing-subsequence",
                "title": "Longest Increasing Subsequence",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can you keep track of the minimum height for each obstacle course length?",
            "You can use binary search to find the longest previous obstacle course length that satisfies the conditions."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {\n    vector<int> ans;\n    // tail[i] := the minimum tail of all increasing subseqs having length i + 1\n    // it's easy to see that tail must be an increasing array\n    vector<int> tail;\n\n    for (const int obstacle : obstacles)\n      if (tail.empty() || obstacle >= tail.back()) {\n        tail.push_back(obstacle);\n        ans.push_back(tail.size());\n      } else {\n        const int index = firstGreater(tail, obstacle);\n        tail[index] = obstacle;\n        ans.push_back(index + 1);\n      }\n\n    return ans;\n  }\n\n private:\n  // Find the first index l s.t A[l] > target\n  // Returns A.size() if can't find\n  int firstGreater(const vector<int>& A, int target) {\n    return upper_bound(A.begin(), A.end(), target) - A.begin();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {\n    List<Integer> ans = new ArrayList<>();\n    // tail[i] := the minimum tail of all increasing subseqs with length i + 1\n    // it's easy to see that tail must be an increasing array\n    List<Integer> tail = new ArrayList<>();\n\n    for (final int obstacle : obstacles)\n      if (tail.isEmpty() || obstacle >= tail.get(tail.size() - 1)) {\n        tail.add(obstacle);\n        ans.add(tail.size());\n      } else {\n        final int index = firstGreater(tail, obstacle);\n        tail.set(index, obstacle);\n        ans.add(index + 1);\n      }\n\n    return ans.stream().mapToInt(Integer::intValue).toArray();\n  }\n\n  // Find the first index l s.t A.get(l) > target\n  // Returns obstacles.length if can't find\n  private int firstGreater(List<Integer> A, int target) {\n    int l = 0;\n    int r = A.size();\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) > target)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:\n    ans = []\n    # tail[i] := the minimum tail of all increasing subseqs having length i + 1\n    # it's easy to see that tail must be an increasing array\n    tail = []\n\n    for obstacle in obstacles:\n      if not tail or obstacle >= tail[-1]:\n        tail.append(obstacle)\n        ans.append(len(tail))\n      else:\n        index = bisect_right(tail, obstacle)\n        tail[index] = obstacle\n        ans.append(index + 1)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}