{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3177",
            "title": "Find the Maximum Length of a Good Subsequence II",
            "titleSlug": "find-the-maximum-length-of-a-good-subsequence-ii",
            "content": "<p>You are given an integer array <code>nums</code> and a <strong>non-negative</strong> integer <code>k</code>. A sequence of integers <code>seq</code> is called <strong>good</strong> if there are <strong>at most</strong> <code>k</code> indices <code>i</code> in the range <code>[0, seq.length - 2]</code> such that <code>seq[i] != seq[i + 1]</code>.</p>\n\n<p>Return the <strong>maximum</strong> possible length of a <strong>good</strong> <span data-keyword=\"subsequence-array\">subsequence</span> of <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,1,1,3], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The maximum length subsequence is <code>[<u>1</u>,<u>2</u>,<u>1</u>,<u>1</u>,3]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4,5,1], k = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The maximum length subsequence is <code>[<u>1</u>,2,3,4,5,<u>1</u>]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= min(50, nums.length)</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 75,
            "dislikes": 5,
            "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Length of Repeated Subarray\", \"titleSlug\": \"maximum-length-of-repeated-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.3K\", \"totalSubmission\": \"23K\", \"totalAcceptedRaw\": 5291, \"totalSubmissionRaw\": 23032, \"acRate\": \"23.0%\"}",
            "hints": [
                "The absolute values in <code>nums</code> don\u2019t really matter. So we can remap the set of values to the range <code>[0, n - 1]</code>.",
                "Let <code>dp[i][j]</code> be the length of the longest subsequence till index <code>j</code> with at most <code>i</code> positions such that <code>seq[i] != seq[i + 1]</code>.",
                "For each value <code>x</code> from left to right, update <code>dp[i][x] = max(dp[i][x] + 1, dp[i - 1][y] + 1)</code>, where <code>y != x</code>."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and a non-negative integer `k`, a sequence of integers `seq` is considered 'good' if there are at most `k` indices `i` in the range `[0, seq.length - 2]` where `seq[i]` is not equal to `seq[i + 1]`.  The task is to find the maximum possible length of a good subsequence of `nums`.",
                "constraints": [
                    "1 <= nums.length <= 5 * 10^3",
                    "1 <= nums[i] <= 10^9",
                    "0 <= k <= min(50, nums.length)"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,1,1,3], k = 2",
                        "output": "4",
                        "explanation": "One maximum length good subsequence is [1, 2, 1, 1, 3].  There are two indices where consecutive elements differ: (1,2) and (2,1). Since k=2, this subsequence is considered good, and of length 4."
                    },
                    {
                        "input": "nums = [1,2,3,4,5,1], k = 0",
                        "output": "2",
                        "explanation": "One maximum length good subsequence is [1, 1]. Since k = 0, any consecutive elements in a valid subsequence must be equal. Therefore, only same numbers from the `nums` will be a 'good' subsequnce."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-increasing-subsequence",
                "title": "Longest Increasing Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-length-of-repeated-subarray",
                "title": "Maximum Length of Repeated Subarray",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The absolute values in <code>nums</code> don\u2019t really matter. So we can remap the set of values to the range <code>[0, n - 1]</code>.",
            "Let <code>dp[i][j]</code> be the length of the longest subsequence till index <code>j</code> with at most <code>i</code> positions such that <code>seq[i] != seq[i + 1]</code>.",
            "For each value <code>x</code> from left to right, update <code>dp[i][x] = max(dp[i][x] + 1, dp[i - 1][y] + 1)</code>, where <code>y != x</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Same as 3176. Find the Maximum Length of a Good Subsequence I\n  int maximumLength(vector<int>& nums, int k) {\n    // dp[count][num] := the maximum length of a good subsequence with at most\n    // `count` indices where seq[i] != seq[i + 1] and it ends in `num`.\n    vector<unordered_map<int, int>> dp(k + 1);\n    // maxLen[count] := the maximum length of a good subsequence with `count`\n    // indices where seq[i] != seq[i + 1]\n    vector<int> maxLen(k + 1);\n\n    for (const int num : nums)\n      for (int count = k; count >= 0; --count) {\n        // Append `num` to the subsequence.\n        ++dp[count][num];\n        if (count > 0)\n          dp[count][num] = max(dp[count][num], maxLen[count - 1] + 1);\n        maxLen[count] = max(maxLen[count], dp[count][num]);\n      }\n\n    return maxLen[k];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Same as 3176. Find the Maximum Length of a Good Subsequence I\n  public int maximumLength(int[] nums, int k) {\n    // dp[count][num] := the maximum length of a good subsequence with at most\n    // `count` indices where seq[i] != seq[i + 1] and it ends in `num`.\n    Map<Integer, Integer>[] dp = new HashMap[k + 1];\n    // maxLen[count] := the maximum length of a good subsequence with `count`\n    // indices where seq[i] != seq[i + 1]\n    int[] maxLen = new int[k + 1];\n\n    for (int i = 0; i <= k; ++i)\n      dp[i] = new HashMap<>();\n\n    for (final int num : nums)\n      for (int count = k; count >= 0; --count) {\n        // Append `num` to the subsequence.\n        dp[count].merge(num, 1, Integer::sum);\n        if (count > 0)\n          dp[count].merge(num, maxLen[count - 1] + 1, Math::max);\n        maxLen[count] = Math.max(maxLen[count], dp[count].get(num));\n      }\n\n    return maxLen[k];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Same as 3176. Find the Maximum Length of a Good Subsequence I\n  def maximumLength(self, nums: List[int], k: int) -> int:\n    # dp[count][num] := the maximum length of a good subsequence with at most\n    # `count` indices where seq[i] != seq[i + 1] and it ends in `num`.\n    dp = [collections.Counter() for _ in range(k + 1)]\n    # maxLen[count] := the maximum length of a good subsequence with `count`\n    # indices where seq[i] != seq[i + 1]\n    maxLen = [0] * (k + 1)\n\n    for num in nums:\n      for count in range(k, -1, -1):\n        # Append `num` to the subsequence.\n        dp[count][num] += 1\n        if count > 0:\n          dp[count][num] = max(dp[count][num], maxLen[count - 1] + 1)\n        maxLen[count] = max(maxLen[count], dp[count][num])\n\n    return maxLen[k]\n",
                "lang_text": "py"
            }
        }
    }
}