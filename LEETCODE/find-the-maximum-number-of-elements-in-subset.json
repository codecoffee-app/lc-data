{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3020",
            "title": "Find the Maximum Number of Elements in Subset",
            "titleSlug": "find-the-maximum-number-of-elements-in-subset",
            "content": "<p>You are given an array of <strong>positive</strong> integers <code>nums</code>.</p>\n\n<p>You need to select a <span data-keyword=\"subset\">subset</span> of <code>nums</code> which satisfies the following condition:</p>\n\n<ul>\n\t<li>You can place the selected elements in a <strong>0-indexed</strong> array such that it follows the pattern: <code>[x, x<sup>2</sup>, x<sup>4</sup>, ..., x<sup>k/2</sup>, x<sup>k</sup>, x<sup>k/2</sup>, ..., x<sup>4</sup>, x<sup>2</sup>, x]</code> (<strong>Note</strong> that <code>k</code> can be be any <strong>non-negative</strong> power of <code>2</code>). For example, <code>[2, 4, 16, 4, 2]</code> and <code>[3, 9, 3]</code> follow the pattern while <code>[2, 4, 8, 4, 2]</code> does not.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> number of elements in a subset that satisfies these conditions.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,1,2,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can select the subset {4,2,2}, which can be placed in the array as [2,4,2] which follows the pattern and 2<sup>2</sup> == 4. Hence the answer is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can select the subset {1}, which can be placed in the array as [1] which follows the pattern. Hence the answer is 1. Note that we could have also selected the subsets {2}, {3}, or {4}, there may be multiple subsets which provide the same answer. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 162,
            "dislikes": 34,
            "similarQuestions": "[{\"title\": \"Longest Consecutive Sequence\", \"titleSlug\": \"longest-consecutive-sequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"19.2K\", \"totalSubmission\": \"78.3K\", \"totalAcceptedRaw\": 19187, \"totalSubmissionRaw\": 78304, \"acRate\": \"24.5%\"}",
            "hints": [
                "We can select an odd number of <code>1</code>\u2019s.",
                "Put all the values into a HashSet. We can start from each <code>x > 1</code> as the smallest chosen value and we can find the longest subset by checking the new values (which are the square of the previous value) in the set by brute force.",
                "Note when <code>x > 1</code>, <code>x<sup>2</sup></code>, <code>x<sup>4</sup></code>, <code>x<sup>8</sup></code>, \u2026 increases very fast, the longest subset with smallest value x cannot be very long. (The length is <code>O(log(log(10<sup>9</sup>)))</code>.",
                "Hence we can directly check all lengths less than <code>10</code> for all values of <code>x</code>."
            ],
            "rephrased": {
                "body": "Given an array of positive integers `nums`, find the maximum number of elements in a subset that can be arranged in the pattern `[x, x^2, x^4, ..., x^(k/2), x^k, x^(k/2), ..., x^4, x^2, x]`, where `k` is a non-negative power of 2.",
                "constraints": [
                    "2 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[5,4,1,2,2]",
                        "output": "3",
                        "explanation": "The subset {4, 2, 2} can be arranged as [2, 4, 2], which follows the pattern because 2^2 = 4."
                    },
                    {
                        "input": "[1,3,2,4]",
                        "output": "1",
                        "explanation": "The subset {1} can be arranged as [1], which follows the pattern. Other possible subsets of size 1 like {2}, {3}, or {4} would also be valid."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-consecutive-sequence",
                "title": "Longest Consecutive Sequence",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We can select an odd number of <code>1</code>\u2019s.",
            "Put all the values into a HashSet. We can start from each <code>x > 1</code> as the smallest chosen value and we can find the longest subset by checking the new values (which are the square of the previous value) in the set by brute force.",
            "Note when <code>x > 1</code>, <code>x<sup>2</sup></code>, <code>x<sup>4</sup></code>, <code>x<sup>8</sup></code>, \u2026 increases very fast, the longest subset with smallest value x cannot be very long. (The length is <code>O(log(log(10<sup>9</sup>)))</code>.",
            "Hence we can directly check all lengths less than <code>10</code> for all values of <code>x</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumLength(vector<int>& nums) {\n    const int maxNum = ranges::max(nums);\n    unordered_map<int, int> count;\n\n    for (const int num : nums)\n      ++count[num];\n\n    int ans = count.count(1) ? count[1] - (count[1] % 2 == 0) : 1;\n\n    for (const int num : nums) {\n      if (num == 1)\n        continue;\n      int length = 0;\n      long x = num;\n      while (x <= maxNum && count.count(x) && count[x] >= 2) {\n        length += 2;\n        x *= x;\n      }\n      // x is now x^k, and the pattern is [x, ..., x^(k/2), x^(k/2), ..., x].\n      // The goal is to determine if we can insert x^k in the middle of the\n      // pattern to increase the length by 1. If not, we make x^(k/2) the middle\n      // and decrease the length by 1.\n      ans = max(ans, length + (count.count(x) ? 1 : -1));\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumLength(int[] nums) {\n    final int maxNum = Arrays.stream(nums).max().getAsInt();\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (final int num : nums)\n      count.merge(num, 1, Integer::sum);\n\n    int ans = count.containsKey(1) ? count.get(1) - (count.get(1) % 2 == 0 ? 1 : 0) : 1;\n\n    for (final int num : nums) {\n      if (num == 1)\n        continue;\n      int length = 0;\n      long x = num;\n      while (x <= maxNum && count.containsKey((int) x) && count.get((int) x) >= 2) {\n        length += 2;\n        x *= x;\n      }\n      // x is now x^k, and the pattern is [x, ..., x^(k/2), x^(k/2), ..., x].\n      // The goal is to determine if we can insert x^k in the middle of the\n      // pattern to increase the length by 1. If not, we make x^(k/2) the middle\n      // and decrease the length by 1.\n      ans = Math.max(ans, length + (count.containsKey((int) x) ? 1 : -1));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumLength(self, nums: List[int]) -> int:\n    maxNum = max(nums)\n    count = collections.Counter(nums)\n    ans = count[1] - (count[1] % 2 == 0) if 1 in count else 1\n\n    for num in nums:\n      if num == 1:\n        continue\n      length = 0\n      x = num\n      while x <= maxNum and x in count and count[x] >= 2:\n        length += 2\n        x *= x\n      # x is now x^k, and the pattern is [x, ..., x^(k/2), x^(k/2), ..., x].\n      # The goal is to determine if we can insert x^k in the middle of the\n      # pattern to increase the length by 1. If not, we make x^(k/2) the middle\n      # and decrease the length by 1.\n      ans = max(ans, length + (1 if x in count else -1))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}