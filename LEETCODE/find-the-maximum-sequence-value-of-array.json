{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3287",
            "title": "Find the Maximum Sequence Value of Array",
            "titleSlug": "find-the-maximum-sequence-value-of-array",
            "content": "<p>You are given an integer array <code>nums</code> and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>The <strong>value</strong> of a sequence <code>seq</code> of size <code>2 * x</code> is defined as:</p>\n\n<ul>\n\t<li><code>(seq[0] OR seq[1] OR ... OR seq[x - 1]) XOR (seq[x] OR seq[x + 1] OR ... OR seq[2 * x - 1])</code>.</li>\n</ul>\n\n<p>Return the <strong>maximum</strong> <strong>value</strong> of any <span data-keyword=\"subsequence-array\">subsequence</span> of <code>nums</code> having size <code>2 * k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,6,7], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subsequence <code>[2, 7]</code> has the maximum value of <code>2 XOR 7 = 5</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,2,5,6,7], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subsequence <code>[4, 5, 6, 7]</code> has the maximum value of <code>(4 OR 5) XOR (6 OR 7) = 2</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 400</code></li>\n\t<li><code>1 &lt;= nums[i] &lt; 2<sup>7</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length / 2</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 64,
            "dislikes": 6,
            "similarQuestions": "[{\"title\": \"Bitwise ORs of Subarrays\", \"titleSlug\": \"bitwise-ors-of-subarrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.2K\", \"totalSubmission\": \"21K\", \"totalAcceptedRaw\": 3178, \"totalSubmissionRaw\": 20995, \"acRate\": \"15.1%\"}",
            "hints": [
                "Find all the possible <code>OR</code> till each <code>i</code> with <code>k</code> elements backward and forward."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and a positive integer `k`, the value of a sequence `seq` of size `2 * x` is defined as `(seq[0] OR seq[1] OR ... OR seq[x - 1]) XOR (seq[x] OR seq[x + 1] OR ... OR seq[2 * x - 1])`. Return the maximum value of any subsequence of `nums` having size `2 * k`.",
                "constraints": [
                    "2 <= nums.length <= 400",
                    "1 <= nums[i] < 2<sup>7</sup>",
                    "1 <= k <= nums.length / 2"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,6,7], k = 1",
                        "output": "5",
                        "explanation": "The subsequence [2, 7] yields the maximum value: 2 XOR 7 = 5."
                    },
                    {
                        "input": "nums = [4,2,5,6,7], k = 2",
                        "output": "2",
                        "explanation": "The subsequence [4, 5, 6, 7] yields the maximum value: (4 OR 5) XOR (6 OR 7) = 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "bitwise-ors-of-subarrays",
                "title": "Bitwise ORs of Subarrays",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Find all the possible <code>OR</code> till each <code>i</code> with <code>k</code> elements backward and forward."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxValue(vector<int>& nums, int k) {\n    // left[i][j][x] := true if it's possible to get an OR value of x by\n    // selecting j numbers from nums[0..i]\n    const vector<vector<vector<bool>>> left = getPossibleORs(nums, k);\n    // right[i][j][x] := true if it's possible to get an OR value of x by\n    // selecting j numbers from nums[i..n - 1]\n    vector<vector<vector<bool>>> right =\n        getPossibleORs({nums.rbegin(), nums.rend()}, k);\n    ranges::reverse(right);\n\n    int ans = 0;\n\n    for (int i = k - 1; i + k < nums.size(); ++i)\n      for (int a = 0; a <= kMaxXor; ++a)\n        for (int b = 0; b <= kMaxXor; ++b)\n          if (left[i][k][a] && right[i + 1][k][b])\n            ans = max(ans, a ^ b);\n\n    return ans;\n  }\n\n private:\n  static constexpr int kMaxXor = 128;\n\n  // Gets all possible OR values till each index and number of numbers.\n  vector<vector<vector<bool>>> getPossibleORs(const vector<int>& nums, int k) {\n    // dp[i][j][x] := true if it's possible to get an OR value of x by selecting\n    // j numbers from nums[0..i]\n    vector<vector<vector<bool>>> dp(\n        nums.size(), vector<vector<bool>>(k + 1, vector<bool>(kMaxXor + 1)));\n\n    dp[0][1][nums[0]] = true;\n\n    // No number is selected.\n    for (int i = 0; i < nums.size(); ++i)\n      dp[i][0][0] = true;\n\n    for (int i = 1; i < nums.size(); ++i)\n      for (int j = 1; j <= k; ++j)\n        for (int x = 0; x <= kMaxXor; ++x) {\n          // 1. Skip the current number.\n          if (dp[i - 1][j][x])\n            dp[i][j][x] = true;\n          // 2. Pick the current number.\n          if (dp[i - 1][j - 1][x])\n            dp[i][j][nums[i] | x] = true;\n        }\n\n    return dp;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxValue(int[] nums, int k) {\n    boolean[][][] left = getPossibleORs(nums, k);\n    int[] reversedNums = reverseArray(nums);\n    boolean[][][] right = getPossibleORs(reversedNums, k);\n    reverseArray(right);\n\n    int ans = 0;\n\n    for (int i = k - 1; i + k < nums.length; ++i)\n      for (int a = 0; a <= kMaxXor; ++a)\n        for (int b = 0; b <= kMaxXor; ++b)\n          if (left[i][k][a] && right[i + 1][k][b])\n            ans = Math.max(ans, a ^ b);\n\n    return ans;\n  }\n\n  private static final int kMaxXor = 128;\n\n  // Gets all possible OR values till each index and number of numbers.\n  private boolean[][][] getPossibleORs(int[] nums, int k) {\n    // dp[i][j][x] := true if it's possible to get an OR value of x by selecting\n    // j numbers from nums[0..i]\n    boolean[][][] dp = new boolean[nums.length][k + 1][kMaxXor + 1];\n    dp[0][1][nums[0]] = true;\n\n    // No number is selected.\n    for (int i = 0; i < nums.length; ++i)\n      dp[i][0][0] = true;\n\n    for (int i = 1; i < nums.length; ++i)\n      for (int j = 1; j <= k; ++j)\n        for (int x = 0; x <= kMaxXor; ++x) {\n          if (dp[i - 1][j][x]) // 1. Skip the current number.\n            dp[i][j][x] = true;\n          if (dp[i - 1][j - 1][x]) // 2. Pick the current number.\n            dp[i][j][nums[i] | x] = true;\n        }\n\n    return dp;\n  }\n\n  private int[] reverseArray(int[] arr) {\n    int[] reversed = new int[arr.length];\n    for (int i = 0; i < arr.length; ++i)\n      reversed[i] = arr[arr.length - 1 - i];\n    return reversed;\n  }\n\n  private void reverseArray(boolean[][][] arr) {\n    for (int l = 0, r = arr.length - 1; l < r; ++l, --r) {\n      boolean[][] temp = arr[l];\n      arr[l] = arr[r];\n      arr[r] = temp;\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxValue(self, nums: list[int], k: int) -> int:\n    left = self._getPossibleORs(nums, k)\n    right = self._getPossibleORs(nums[::-1], k)[::-1]\n    return max(a ^ b\n               for i in range(k - 1, len(nums) - k)\n               for a in range(128 + 1)\n               for b in range(128 + 1)\n               if left[i][k][a] and right[i + 1][k][b])\n\n  def _getPossibleORs(self, nums: list[int], k: int) -> list[list[list[bool]]]:\n    dp = [[[False] * (128 + 1)\n          for _ in range(k + 1)]\n          for _ in range(len(nums))]\n\n    dp[0][1][nums[0]] = True\n\n    for i in range(len(nums)):\n      dp[i][0][0] = True\n\n    for i in range(1, len(nums)):\n      for j in range(1, k + 1):\n        for x in range(128 + 1):\n          if dp[i - 1][j][x]:\n            dp[i][j][x] = True\n          if dp[i - 1][j - 1][x]:\n            dp[i][j][nums[i] | x] = True\n\n    return dp\n",
                "lang_text": "py"
            }
        }
    }
}