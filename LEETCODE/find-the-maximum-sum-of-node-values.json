{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3068",
            "title": "Find the Maximum Sum of Node Values",
            "titleSlug": "find-the-maximum-sum-of-node-values",
            "content": "<p>There exists an <strong>undirected</strong> tree with <code>n</code> nodes numbered <code>0</code> to <code>n - 1</code>. You are given a <strong>0-indexed</strong> 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the tree. You are also given a <strong>positive</strong> integer <code>k</code>, and a <strong>0-indexed</strong> array of <strong>non-negative</strong> integers <code>nums</code> of length <code>n</code>, where <code>nums[i]</code> represents the <strong>value</strong> of the node numbered <code>i</code>.</p>\n\n<p>Alice wants the sum of values of tree nodes to be <strong>maximum</strong>, for which Alice can perform the following operation <strong>any</strong> number of times (<strong>including zero</strong>) on the tree:</p>\n\n<ul>\n\t<li>Choose any edge <code>[u, v]</code> connecting the nodes <code>u</code> and <code>v</code>, and update their values as follows:\n\n\t<ul>\n\t\t<li><code>nums[u] = nums[u] XOR k</code></li>\n\t\t<li><code>nums[v] = nums[v] XOR k</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> possible <strong>sum</strong> of the <strong>values</strong> Alice can achieve by performing the operation <strong>any</strong> number of times</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/11/09/screenshot-2023-11-10-012513.png\" style=\"width: 300px; height: 277px;padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> nums = [1,2,1], k = 3, edges = [[0,1],[0,2]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Alice can achieve the maximum sum of 6 using a single operation:\n- Choose the edge [0,2]. nums[0] and nums[2] become: 1 XOR 3 = 2, and the array nums becomes: [1,2,1] -&gt; [2,2,2].\nThe total sum of values is 2 + 2 + 2 = 6.\nIt can be shown that 6 is the maximum achievable sum of values.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/09/screenshot-2024-01-09-220017.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 300px; height: 239px;\" />\n<pre>\n<strong>Input:</strong> nums = [2,3], k = 7, edges = [[0,1]]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Alice can achieve the maximum sum of 9 using a single operation:\n- Choose the edge [0,1]. nums[0] becomes: 2 XOR 7 = 5 and nums[1] become: 3 XOR 7 = 4, and the array nums becomes: [2,3] -&gt; [5,4].\nThe total sum of values is 5 + 4 = 9.\nIt can be shown that 9 is the maximum achievable sum of values.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/11/09/screenshot-2023-11-10-012641.png\" style=\"width: 600px; height: 233px;padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]]\n<strong>Output:</strong> 42\n<strong>Explanation:</strong> The maximum achievable sum is 42 which can be achieved by Alice performing no operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li>\n\t<li>The input is generated such that <code>edges</code> represent&nbsp;a valid tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 609,
            "dislikes": 89,
            "similarQuestions": "[{\"title\": \"Maximum Score After Applying Operations on a Tree\", \"titleSlug\": \"maximum-score-after-applying-operations-on-a-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Number of Coins to Place in Tree Nodes\", \"titleSlug\": \"find-number-of-coins-to-place-in-tree-nodes\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"69.3K\", \"totalSubmission\": \"103K\", \"totalAcceptedRaw\": 69298, \"totalSubmissionRaw\": 103010, \"acRate\": \"67.3%\"}",
            "hints": [
                "Select any node as the root.",
                "Let <code>dp[x][c]</code> be the maximum sum we can get for the subtree rooted at node <code>x</code>, where <code>c</code> is a boolean representing whether the edge between node <code>x</code> and its parent (if any) is selected or not.",
                "<code>dp[x][c] = max(sum(dp[y][cy]) + v(nums[x], sum(cy) + c))</code>\r\nwhere <code>cy</code> is <code>0</code> or <code>1</code>. \r\nWhen <code>sum(cy) + c</code> is odd, <code>v(nums[x], sum(cy) + c) = nums[x] XOR k</code>. \r\nWhen <code>sum(cy) + c</code> is even, <code>v(nums[x], sum(cy) + c) = nums[x]</code>.",
                "There\u2019s also an easier solution - does the parity of the number of elements where <code>nums[i] XOR k > nums[i]</code> help?"
            ],
            "rephrased": {
                "body": "You are given an undirected tree with `n` nodes labeled from `0` to `n - 1`. The tree is represented by a 0-indexed 2D integer array `edges` of length `n - 1`, where `edges[i] = [u_i, v_i]` indicates an edge between nodes `u_i` and `v_i`.  You are also given a positive integer `k` and a 0-indexed array `nums` of non-negative integers of length `n`, where `nums[i]` is the value of node `i`. \n\nAlice wants to maximize the sum of the values of the tree nodes. To do this, she can perform the following operation any number of times (including zero):\n\n*   Choose any edge `[u, v]` connecting nodes `u` and `v`.\n*   Update the values of the nodes: `nums[u] = nums[u] XOR k` and `nums[v] = nums[v] XOR k`.\n\nReturn the maximum possible sum of node values Alice can achieve.",
                "constraints": [
                    "2 <= n == nums.length <= 2 * 10^4",
                    "1 <= k <= 10^9",
                    "0 <= nums[i] <= 10^9",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "0 <= edges[i][0], edges[i][1] <= n - 1",
                    "The input is generated such that `edges` represent a valid tree."
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,1], k = 3, edges = [[0,1],[0,2]]",
                        "output": "6",
                        "explanation": "By choosing the edge [0, 2], nums[0] becomes 1 XOR 3 = 2 and nums[2] becomes 1 XOR 3 = 2. The array becomes [2, 2, 2], and the total sum is 6. This is the maximum achievable sum."
                    },
                    {
                        "input": "nums = [2,3], k = 7, edges = [[0,1]]",
                        "output": "9",
                        "explanation": "By choosing the edge [0, 1], nums[0] becomes 2 XOR 7 = 5 and nums[1] becomes 3 XOR 7 = 4. The array becomes [5, 4], and the total sum is 9. This is the maximum achievable sum."
                    },
                    {
                        "input": "nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]]",
                        "output": "42",
                        "explanation": "The maximum achievable sum is 42, which can be achieved by performing no operations."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-score-after-applying-operations-on-a-tree",
                "title": "Maximum Score After Applying Operations on a Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-number-of-coins-to-place-in-tree-nodes",
                "title": "Find Number of Coins to Place in Tree Nodes",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Select any node as the root.",
            "Let <code>dp[x][c]</code> be the maximum sum we can get for the subtree rooted at node <code>x</code>, where <code>c</code> is a boolean representing whether the edge between node <code>x</code> and its parent (if any) is selected or not.",
            "<code>dp[x][c] = max(sum(dp[y][cy]) + v(nums[x], sum(cy) + c))</code>\r\nwhere <code>cy</code> is <code>0</code> or <code>1</code>. \r\nWhen <code>sum(cy) + c</code> is odd, <code>v(nums[x], sum(cy) + c) = nums[x] XOR k</code>. \r\nWhen <code>sum(cy) + c</code> is even, <code>v(nums[x], sum(cy) + c) = nums[x]</code>.",
            "There\u2019s also an easier solution - does the parity of the number of elements where <code>nums[i] XOR k > nums[i]</code> help?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maximumValueSum(vector<int>& nums, int k,\n                            vector<vector<int>>& edges) {\n    long long maxSum = 0;\n    int changedCount = 0;\n    int minChangeDiff = INT_MAX;\n\n    for (const int num : nums) {\n      maxSum += max(num, num ^ k);\n      changedCount += ((num ^ k) > num) ? 1 : 0;\n      minChangeDiff = min(minChangeDiff, abs(num - (num ^ k)));\n    }\n\n    if (changedCount % 2 == 0)\n      return maxSum;\n    return maxSum - minChangeDiff;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maximumValueSum(int[] nums, int k, int[][] edges) {\n    long maxSum = 0;\n    int changedCount = 0;\n    int minChangeDiff = Integer.MAX_VALUE;\n\n    for (final int num : nums) {\n      maxSum += Math.max(num, num ^ k);\n      changedCount += ((num ^ k) > num) ? 1 : 0;\n      minChangeDiff = Math.min(minChangeDiff, Math.abs(num - (num ^ k)));\n    }\n\n    if (changedCount % 2 == 0)\n      return maxSum;\n    return maxSum - minChangeDiff;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumValueSum(self, nums: List[int], k: int, edges: List[List[int]]) -> int:\n    maxSum = sum(max(num, num ^ k) for num in nums)\n    changedCount = sum((num ^ k) > num for num in nums)\n    if changedCount % 2 == 0:\n      return maxSum\n    minChangeDiff = min(abs(num - (num ^ k)) for num in nums)\n    return maxSum - minChangeDiff\n",
                "lang_text": "py"
            }
        }
    }
}