{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2058",
            "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
            "titleSlug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
            "content": "<p>A <strong>critical point</strong> in a linked list is defined as <strong>either</strong> a <strong>local maxima</strong> or a <strong>local minima</strong>.</p>\n\n<p>A node is a <strong>local maxima</strong> if the current node has a value <strong>strictly greater</strong> than the previous node and the next node.</p>\n\n<p>A node is a <strong>local minima</strong> if the current node has a value <strong>strictly smaller</strong> than the previous node and the next node.</p>\n\n<p>Note that a node can only be a local maxima/minima if there exists <strong>both</strong> a previous node and a next node.</p>\n\n<p>Given a linked list <code>head</code>, return <em>an array of length 2 containing </em><code>[minDistance, maxDistance]</code><em> where </em><code>minDistance</code><em> is the <strong>minimum distance</strong> between <strong>any&nbsp;two distinct</strong> critical points and </em><code>maxDistance</code><em> is the <strong>maximum distance</strong> between <strong>any&nbsp;two distinct</strong> critical points. If there are <strong>fewer</strong> than two critical points, return </em><code>[-1, -1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/13/a1.png\" style=\"width: 148px; height: 55px;\" />\n<pre>\n<strong>Input:</strong> head = [3,1]\n<strong>Output:</strong> [-1,-1]\n<strong>Explanation:</strong> There are no critical points in [3,1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/13/a2.png\" style=\"width: 624px; height: 46px;\" />\n<pre>\n<strong>Input:</strong> head = [5,3,1,2,5,1,2]\n<strong>Output:</strong> [1,3]\n<strong>Explanation:</strong> There are three critical points:\n- [5,3,<strong><u>1</u></strong>,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2.\n- [5,3,1,2,<u><strong>5</strong></u>,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1.\n- [5,3,1,2,5,<u><strong>1</strong></u>,2]: The sixth node is a local minima because 1 is less than 5 and 2.\nThe minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.\nThe maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/14/a5.png\" style=\"width: 624px; height: 39px;\" />\n<pre>\n<strong>Input:</strong> head = [1,3,2,2,3,2,2,2,7]\n<strong>Output:</strong> [3,3]\n<strong>Explanation:</strong> There are two critical points:\n- [1,<u><strong>3</strong></u>,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater than 1 and 2.\n- [1,3,2,2,<u><strong>3</strong></u>,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2 and 2.\nBoth the minimum and maximum distances are between the second and the fifth node.\nThus, minDistance and maxDistance is 5 - 2 = 3.\nNote that the last node is not considered a local maxima because it does not have a next node.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 615,
            "dislikes": 24,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                }
            ],
            "stats": "{\"totalAccepted\": \"30.2K\", \"totalSubmission\": \"52.3K\", \"totalAcceptedRaw\": 30197, \"totalSubmissionRaw\": 52257, \"acRate\": \"57.8%\"}",
            "hints": [
                "The maximum distance must be the distance between the first and last critical point.",
                "For each adjacent critical point, calculate the difference and check if it is the minimum distance."
            ],
            "rephrased": {
                "body": "Given a singly linked list, identify and locate critical points. A critical point is defined as a node that is either a local maxima or a local minima. A node is a local maxima if its value is strictly greater than both its previous and next nodes. Conversely, a node is a local minima if its value is strictly smaller than both its previous and next nodes. Note that the first and last nodes cannot be critical points, as they lack either a previous or a next node.\n\nYour task is to return an array of length 2, `[minDistance, maxDistance]`, representing the minimum and maximum distances between any two distinct critical points in the linked list. The distance is calculated as the difference in their positions (node indices starting from 1). If the linked list contains fewer than two critical points, return `[-1, -1]`.",
                "constraints": [
                    "The number of nodes in the list is in the range [2, 10<sup>5</sup>].",
                    "1 <= Node.val <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "[3,1]",
                        "output": "[-1,-1]",
                        "explanation": "There are no critical points in the list."
                    },
                    {
                        "input": "[5,3,1,2,5,1,2]",
                        "output": "[1,3]",
                        "explanation": "The critical points are at indices 3 (value 1, a local minima), 5 (value 5, a local maxima), and 6 (value 1, a local minima). The minimum distance is between indices 5 and 6 (distance = 1). The maximum distance is between indices 3 and 6 (distance = 3)."
                    },
                    {
                        "input": "[1,3,2,2,3,2,2,2,7]",
                        "output": "[3,3]",
                        "explanation": "The critical points are at indices 2 (value 3, a local maxima) and 5 (value 3, a local maxima). The minimum and maximum distance is between indices 2 and 5 (distance = 3)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The maximum distance must be the distance between the first and last critical point.",
            "For each adjacent critical point, calculate the difference and check if it is the minimum distance."
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> nodesBetweenCriticalPoints(ListNode* head) {\n    int minDistance = INT_MAX;\n    int firstMaIndex = -1;\n    int prevMaIndex = -1;\n    int index = 1;\n    ListNode* prev = head;        // Point to index 0\n    ListNode* curr = head->next;  // Point to index 1\n\n    while (curr->next) {\n      if (curr->val > prev->val && curr->val > curr->next->val ||\n          curr->val < prev->val && curr->val < curr->next->val) {\n        if (firstMaIndex == -1)  // Only assign once\n          firstMaIndex = index;\n        if (prevMaIndex != -1)\n          minDistance = min(minDistance, index - prevMaIndex);\n        prevMaIndex = index;\n      }\n      prev = curr;\n      curr = curr->next;\n      ++index;\n    }\n\n    if (minDistance == INT_MAX)\n      return {-1, -1};\n    return {minDistance, prevMaIndex - firstMaIndex};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] nodesBetweenCriticalPoints(ListNode head) {\n    int minDistance = Integer.MAX_VALUE;\n    int firstMaIndex = -1;\n    int prevMaIndex = -1;\n    int index = 1;\n    ListNode prev = head;      // Point to index 0\n    ListNode curr = head.next; // Point to index 1\n\n    while (curr.next != null) {\n      if (curr.val > prev.val && curr.val > curr.next.val ||\n          curr.val < prev.val && curr.val < curr.next.val) {\n        if (firstMaIndex == -1) // Only assign once\n          firstMaIndex = index;\n        if (prevMaIndex != -1)\n          minDistance = Math.min(minDistance, index - prevMaIndex);\n        prevMaIndex = index;\n      }\n      prev = curr;\n      curr = curr.next;\n      ++index;\n    }\n\n    if (minDistance == Integer.MAX_VALUE)\n      return new int[] {-1, -1};\n    return new int[] {minDistance, prevMaIndex - firstMaIndex};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def nodesBetweenCriticalPoints(self, head: Optional[ListNode]) -> List[int]:\n    minDistance = math.inf\n    firstMaIndex = -1\n    prevMaIndex = -1\n    index = 1\n    prev = head  # Point to index 0\n    curr = head.next  # Point to index 1\n\n    while curr.next:\n      if curr.val > prev.val and curr.val > curr.next.val or \\\n         curr.val < prev.val and curr.val < curr.next.val:\n        if firstMaIndex == -1:  # Only assign once\n          firstMaIndex = index\n        if prevMaIndex != -1:\n          minDistance = min(minDistance, index - prevMaIndex)\n        prevMaIndex = index\n      prev = curr\n      curr = curr.next\n      index += 1\n\n    if minDistance == math.inf:\n      return [-1, -1]\n    return [minDistance, prevMaIndex - firstMaIndex]\n",
                "lang_text": "py"
            }
        }
    }
}