{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3195",
            "title": "Find the Minimum Area to Cover All Ones I",
            "titleSlug": "find-the-minimum-area-to-cover-all-ones-i",
            "content": "<p>You are given a 2D <strong>binary</strong> array <code>grid</code>. Find a rectangle with horizontal and vertical sides with the<strong> smallest</strong> area, such that all the 1&#39;s in <code>grid</code> lie inside this rectangle.</p>\n\n<p>Return the <strong>minimum</strong> possible area of the rectangle.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[0,1,0],[1,0,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/08/examplerect0.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 279px; height: 198px;\" /></p>\n\n<p>The smallest rectangle has a height of 2 and a width of 3, so it has an area of <code>2 * 3 = 6</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[0,0],[1,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/08/examplerect1.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 204px; height: 201px;\" /></p>\n\n<p>The smallest rectangle has both height and width 1, so its area is <code>1 * 1 = 1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length, grid[i].length &lt;= 1000</code></li>\n\t<li><code>grid[i][j]</code> is either 0 or 1.</li>\n\t<li>The input is generated such that there is at least one 1 in <code>grid</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 32,
            "dislikes": 4,
            "similarQuestions": "[{\"title\": \"Smallest Rectangle Enclosing Black Pixels\", \"titleSlug\": \"smallest-rectangle-enclosing-black-pixels\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [],
            "stats": "{\"totalAccepted\": \"26.4K\", \"totalSubmission\": \"35.7K\", \"totalAcceptedRaw\": 26415, \"totalSubmissionRaw\": 35735, \"acRate\": \"73.9%\"}",
            "hints": [
                "Find the minimum and maximum coordinates of a cell with a value of 1 in both directions."
            ],
            "rephrased": {
                "body": "Given a 2D binary array `grid`, find the rectangle with horizontal and vertical sides of the smallest area that contains all the 1s in the `grid`. Return the minimum possible area of this rectangle.",
                "constraints": [
                    "1 <= grid.length, grid[i].length <= 1000",
                    "grid[i][j] is either 0 or 1.",
                    "The input is generated such that there is at least one 1 in `grid`."
                ],
                "testcases": [
                    {
                        "input": "[[0,1,0],[1,0,1]]",
                        "output": "6",
                        "explanation": "The smallest rectangle encompassing all 1s has a height of 2 and a width of 3. Therefore, the area is 2 * 3 = 6."
                    },
                    {
                        "input": "[[0,0],[1,0]]",
                        "output": "1",
                        "explanation": "The smallest rectangle encompassing all 1s has a height of 1 and a width of 1. Therefore, the area is 1 * 1 = 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "smallest-rectangle-enclosing-black-pixels",
                "title": "Smallest Rectangle Enclosing Black Pixels",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Find the minimum and maximum coordinates of a cell with a value of 1 in both directions."
        ],
        "relatedTopics": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumArea(vector<vector<int>>& grid) {\n    int x1 = INT_MAX;\n    int y1 = INT_MAX;\n    int x2 = 0;\n    int y2 = 0;\n\n    for (int i = 0; i < grid.size(); ++i)\n      for (int j = 0; j < grid[0].size(); ++j)\n        if (grid[i][j] == 1) {\n          x1 = min(x1, i);\n          y1 = min(y1, j);\n          x2 = max(x2, i);\n          y2 = max(y2, j);\n        }\n\n    return (x2 - x1 + 1) * (y2 - y1 + 1);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumArea(int[][] grid) {\n    int x1 = Integer.MAX_VALUE;\n    int y1 = Integer.MAX_VALUE;\n    int x2 = 0;\n    int y2 = 0;\n\n    for (int i = 0; i < grid.length; ++i)\n      for (int j = 0; j < grid[0].length; ++j)\n        if (grid[i][j] == 1) {\n          x1 = Math.min(x1, i);\n          y1 = Math.min(y1, j);\n          x2 = Math.max(x2, i);\n          y2 = Math.max(y2, j);\n        }\n\n    return (x2 - x1 + 1) * (y2 - y1 + 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumArea(self, grid: list[list[int]]) -> int:\n    x1 = math.inf\n    y1 = math.inf\n    x2 = 0\n    y2 = 0\n\n    for i, row in enumerate(grid):\n      for j, num in enumerate(row):\n        if num == 1:\n          x1 = min(x1, i)\n          y1 = min(y1, j)\n          x2 = max(x2, i)\n          y2 = max(y2, j)\n\n    return (x2 - x1 + 1) * (y2 - y1 + 1)\n",
                "lang_text": "py"
            }
        }
    }
}