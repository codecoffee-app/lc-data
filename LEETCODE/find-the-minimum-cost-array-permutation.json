{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3149",
            "title": "Find the Minimum Cost Array Permutation",
            "titleSlug": "find-the-minimum-cost-array-permutation",
            "content": "<p>You are given an array <code>nums</code> which is a <span data-keyword=\"permutation\">permutation</span> of <code>[0, 1, 2, ..., n - 1]</code>. The <strong>score</strong> of any permutation of <code>[0, 1, 2, ..., n - 1]</code> named <code>perm</code> is defined as:</p>\n\n<p><code>score(perm) = |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[n - 1] - nums[perm[0]]|</code></p>\n\n<p>Return the permutation <code>perm</code> which has the <strong>minimum</strong> possible score. If <em>multiple</em> permutations exist with this score, return the one that is <span data-keyword=\"lexicographically-smaller-array\">lexicographically smallest</span> among them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,0,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,1,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/04/example0gif.gif\" style=\"width: 235px; height: 235px;\" /></strong></p>\n\n<p>The lexicographically smallest permutation with minimum cost is <code>[0,1,2]</code>. The cost of this permutation is <code>|0 - 0| + |1 - 2| + |2 - 1| = 2</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0,2,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,2,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/04/example1gif.gif\" style=\"width: 235px; height: 235px;\" /></strong></p>\n\n<p>The lexicographically smallest permutation with minimum cost is <code>[0,2,1]</code>. The cost of this permutation is <code>|0 - 1| + |2 - 2| + |1 - 0| = 2</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 14</code></li>\n\t<li><code>nums</code> is a permutation of <code>[0, 1, 2, ..., n - 1]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 96,
            "dislikes": 6,
            "similarQuestions": "[{\"title\": \"Shortest Path Visiting All Nodes\", \"titleSlug\": \"shortest-path-visiting-all-nodes\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find the Shortest Superstring\", \"titleSlug\": \"find-the-shortest-superstring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.7K\", \"totalSubmission\": \"15.9K\", \"totalAcceptedRaw\": 3736, \"totalSubmissionRaw\": 15895, \"acRate\": \"23.5%\"}",
            "hints": [
                "The score function is cyclic, so we can always set <code>perm[0] = 0</code> for the smallest lexical order.",
                "It\u2019s similar to the Traveling Salesman Problem. Use Dynamic Programming.",
                "Use a bitmask to track which elements have been assigned to <code>perm</code>."
            ],
            "rephrased": {
                "body": "Given an array `nums` which is a permutation of `[0, 1, 2, ..., n - 1]`, find the permutation `perm` of `[0, 1, 2, ..., n - 1]` that minimizes the score. The score of a permutation `perm` is calculated as the sum of absolute differences:  `|perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[n - 1] - nums[perm[0]]|`. If multiple permutations achieve the minimum score, return the lexicographically smallest one.",
                "constraints": [
                    "2 <= n == nums.length <= 14",
                    "nums is a permutation of [0, 1, 2, ..., n - 1]."
                ],
                "testcases": [
                    {
                        "input": "[1,0,2]",
                        "output": "[0,1,2]",
                        "explanation": "The lexicographically smallest permutation with minimum cost is [0,1,2]. The cost of this permutation is |0 - 0| + |1 - 2| + |2 - 1| = 2."
                    },
                    {
                        "input": "[0,2,1]",
                        "output": "[0,2,1]",
                        "explanation": "The lexicographically smallest permutation with minimum cost is [0,2,1]. The cost of this permutation is |0 - 1| + |2 - 2| + |1 - 0| = 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "shortest-path-visiting-all-nodes",
                "title": "Shortest Path Visiting All Nodes",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-the-shortest-superstring",
                "title": "Find the Shortest Superstring",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The score function is cyclic, so we can always set <code>perm[0] = 0</code> for the smallest lexical order.",
            "It\u2019s similar to the Traveling Salesman Problem. Use Dynamic Programming.",
            "Use a bitmask to track which elements have been assigned to <code>perm</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findPermutation(vector<int>& nums) {\n    const int n = nums.size();\n    vector<vector<int>> mem(n, vector<int>(1 << n));\n    // bestPick[last][mask] := the best pick, where `last` is the last chosen\n    // number and `mask` is the bitmask of the chosen numbers\n    vector<vector<int>> bestPick(n, vector<int>(1 << n));\n\n    // Choose 0 as perm[0] since the score function is cyclic.\n    getScore(nums, /*last=*/0, /*mask=*/1, bestPick, mem);\n    return construct(bestPick);\n  }\n\n private:\n  // Returns the minimum score, where `last` is the last chosen number and\n  // `mask` is the bitmask of the chosen numbers.\n  int getScore(const vector<int>& nums, int last, unsigned mask,\n               vector<vector<int>>& bestPick, vector<vector<int>>& mem) {\n    if (popcount(mask) == nums.size())\n      return abs(last - nums[0]);  // |perm[n - 1] - nums[perm[0]]|\n    if (mem[last][mask] > 0)\n      return mem[last][mask];\n\n    int minScore = INT_MAX;\n    for (int i = 1; i < nums.size(); ++i) {\n      if (mask >> i & 1)\n        continue;\n      const int nextMinScore =\n          abs(last - nums[i]) + getScore(nums, i, mask | 1 << i, bestPick, mem);\n      if (nextMinScore < minScore) {\n        minScore = nextMinScore;\n        bestPick[last][mask] = i;\n      }\n    }\n\n    return mem[last][mask] = minScore;\n  }\n\n  vector<int> construct(const vector<vector<int>>& bestPick) {\n    vector<int> ans;\n    int last = 0;\n    int mask = 1;\n    for (int i = 0; i < bestPick.size(); ++i) {\n      ans.push_back(last);\n      last = bestPick[last][mask];\n      mask |= 1 << last;\n    }\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] findPermutation(int[] nums) {\n    final int n = nums.length;\n    int[][] mem = new int[n][1 << n];\n    // bestPick[last][mask] := the best pick, where `last` is the last chosen\n    // number and `mask` is the bitmask of the chosen numbers\n    int[][] bestPick = new int[n][1 << n];\n\n    // Choose 0 as perm[0] since the score function is cyclic.\n    getScore(nums, /*last=*/0, /*mask=*/1, bestPick, mem);\n    return construct(bestPick);\n  }\n\n  // Returns the minimum score, where `last` is the last chosen number and\n  // `mask` is the bitmask of the chosen numbers.\n  private int getScore(int[] nums, int last, int mask, int[][] bestPick, int[][] mem) {\n    if (Integer.bitCount(mask) == nums.length)\n      return Math.abs(last - nums[0]); // |perm[n - 1] - nums[perm[0]]|\n    if (mem[last][mask] > 0)\n      return mem[last][mask];\n\n    int minScore = Integer.MAX_VALUE;\n    for (int i = 1; i < nums.length; ++i) {\n      if ((mask >> i & 1) == 1)\n        continue;\n      int nextMinScore = Math.abs(last - nums[i]) + getScore(nums, i, mask | 1 << i, bestPick, mem);\n      if (nextMinScore < minScore) {\n        minScore = nextMinScore;\n        bestPick[last][mask] = i;\n      }\n    }\n\n    return mem[last][mask] = minScore;\n  }\n\n  private int[] construct(int[][] bestPick) {\n    int[] ans = new int[bestPick.length];\n    int last = 0;\n    int mask = 1;\n    for (int i = 0; i < bestPick.length; ++i) {\n      ans[i] = last;\n      last = bestPick[last][mask];\n      mask |= 1 << last;\n    }\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findPermutation(self, nums: List[int]) -> List[int]:\n    n = len(nums)\n    bestPick = [[0] * (1 << n) for _ in range(n)]\n\n    @functools.lru_cache(None)\n    def getScore(last: int, mask: int) -> int:\n      if mask.bit_count() == len(nums):\n        return abs(last - nums[0])\n\n      minScore = math.inf\n      for i in range(1, len(nums)):\n        if mask >> i & 1:\n          continue\n        nextMinScore = abs(last - nums[i]) + getScore(i, mask | (1 << i))\n        if nextMinScore < minScore:\n          minScore = nextMinScore\n          bestPick[last][mask] = i\n\n      return minScore\n\n    getScore(0, 1)\n    return self._construct(bestPick)\n\n  def _construct(self, bestPick: List[List[int]]) -> List[int]:\n    ans = []\n    last = 0\n    mask = 1\n    for _ in range(len(bestPick)):\n      ans.append(last)\n      last = bestPick[last][mask]\n      mask |= 1 << last\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}