{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3160",
            "title": "Find the Number of Distinct Colors Among the Balls",
            "titleSlug": "find-the-number-of-distinct-colors-among-the-balls",
            "content": "<p>You are given an integer <code>limit</code> and a 2D array <code>queries</code> of size <code>n x 2</code>.</p>\n\n<p>There are <code>limit + 1</code> balls with <strong>distinct</strong> labels in the range <code>[0, limit]</code>. Initially, all balls are uncolored. For every query in <code>queries</code> that is of the form <code>[x, y]</code>, you mark ball <code>x</code> with the color <code>y</code>. After each query, you need to find the number of <strong>distinct</strong> colors among the balls.</p>\n\n<p>Return an array <code>result</code> of length <code>n</code>, where <code>result[i]</code> denotes the number of distinct colors <em>after</em> <code>i<sup>th</sup></code> query.</p>\n\n<p><strong>Note</strong> that when answering a query, lack of a color <em>will not</em> be considered as a color.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">limit = 4, queries = [[1,4],[2,5],[1,3],[3,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,2,2,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop.gif\" style=\"width: 455px; height: 145px;\" /></p>\n\n<ul>\n\t<li>After query 0, ball 1 has color 4.</li>\n\t<li>After query 1, ball 1 has color 4, and ball 2 has color 5.</li>\n\t<li>After query 2, ball 1 has color 3, and ball 2 has color 5.</li>\n\t<li>After query 3, ball 1 has color 3, ball 2 has color 5, and ball 3 has color 4.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">limit = 4, queries = [[0,1],[1,2],[2,2],[3,4],[4,5]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,2,2,3,4]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop2.gif\" style=\"width: 457px; height: 144px;\" /></strong></p>\n\n<ul>\n\t<li>After query 0, ball 0 has color 1.</li>\n\t<li>After query 1, ball 0 has color 1, and ball 1 has color 2.</li>\n\t<li>After query 2, ball 0 has color 1, and balls 1 and 2 have color 2.</li>\n\t<li>After query 3, ball 0 has color 1, balls 1 and 2 have color 2, and ball 3 has color 4.</li>\n\t<li>After query 4, ball 0 has color 1, balls 1 and 2 have color 2, ball 3 has color 4, and ball 4 has color 5.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= limit &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= n == queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt;= limit</code></li>\n\t<li><code>1 &lt;= queries[i][1] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 98,
            "dislikes": 7,
            "similarQuestions": "[{\"title\": \"Maximum Number of Balls in a Box\", \"titleSlug\": \"maximum-number-of-balls-in-a-box\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.1K\", \"totalSubmission\": \"53.5K\", \"totalAcceptedRaw\": 22060, \"totalSubmissionRaw\": 53538, \"acRate\": \"41.2%\"}",
            "hints": [
                "Use two HashMaps to maintain the color of each ball and the set of balls with each color."
            ],
            "rephrased": {
                "body": "You are given an integer `limit` and a 2D array `queries` of size `n x 2`. There are `limit + 1` balls with distinct labels in the range `[0, limit]`. Initially, all balls are uncolored. For every query in `queries` that is of the form `[x, y]`, you mark ball `x` with the color `y`. After each query, you need to find the number of distinct colors among the balls. Return an array `result` of length `n`, where `result[i]` denotes the number of distinct colors after the `i`-th query. Note that when answering a query, the absence of a color is not considered a color.",
                "constraints": [
                    "1 <= limit <= 10^9",
                    "1 <= n == queries.length <= 10^5",
                    "queries[i].length == 2",
                    "0 <= queries[i][0] <= limit",
                    "1 <= queries[i][1] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "limit = 4, queries = [[1,4],[2,5],[1,3],[3,4]]",
                        "output": "[1,2,2,3]",
                        "explanation": "After the first query, ball 1 has color 4, resulting in 1 distinct color. After the second query, ball 1 has color 4 and ball 2 has color 5, resulting in 2 distinct colors. After the third query, ball 1 has color 3 and ball 2 has color 5, resulting in 2 distinct colors. After the fourth query, ball 1 has color 3, ball 2 has color 5, and ball 3 has color 4, resulting in 3 distinct colors."
                    },
                    {
                        "input": "limit = 4, queries = [[0,1],[1,2],[2,2],[3,4],[4,5]]",
                        "output": "[1,2,2,3,4]",
                        "explanation": "After the first query, ball 0 has color 1, resulting in 1 distinct color. After the second query, ball 0 has color 1 and ball 1 has color 2, resulting in 2 distinct colors. After the third query, ball 0 has color 1 and balls 1 and 2 have color 2, resulting in 2 distinct colors. After the fourth query, ball 0 has color 1, balls 1 and 2 have color 2, and ball 3 has color 4, resulting in 3 distinct colors. After the fifth query, ball 0 has color 1, balls 1 and 2 have color 2, ball 3 has color 4, and ball 4 has color 5, resulting in 4 distinct colors."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-number-of-balls-in-a-box",
                "title": "Maximum Number of Balls in a Box",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use two HashMaps to maintain the color of each ball and the set of balls with each color."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> queryResults(int limit, vector<vector<int>>& queries) {\n    vector<int> ans;\n    unordered_map<int, int> ballToColor;\n    unordered_map<int, int> colorCount;\n\n    for (const vector<int>& query : queries) {\n      const int ball = query[0];\n      const int color = query[1];\n      if (const auto it = ballToColor.find(ball); it != ballToColor.cend()) {\n        const int prevColor = it->second;\n        if (--colorCount[prevColor] == 0)\n          colorCount.erase(prevColor);\n      }\n      ballToColor[ball] = color;\n      ++colorCount[color];\n      ans.push_back(colorCount.size());\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] queryResults(int limit, int[][] queries) {\n    int[] ans = new int[queries.length];\n    Map<Integer, Integer> ballToColor = new HashMap<>();\n    Map<Integer, Integer> colorCount = new HashMap<>();\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int ball = queries[i][0];\n      final int color = queries[i][1];\n      if (ballToColor.containsKey(ball)) {\n        final int prevColor = ballToColor.get(ball);\n        if (colorCount.merge(prevColor, -1, Integer::sum) == 0)\n          colorCount.remove(prevColor);\n      }\n      ballToColor.put(ball, color);\n      colorCount.merge(color, 1, Integer::sum);\n      ans[i] = colorCount.size();\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def queryResults(self, limit: int, queries: List[List[int]]) -> List[int]:\n    ans = []\n    ballToColor = {}\n    colorCount = collections.Counter()\n\n    for ball, color in queries:\n      if ball in ballToColor:\n        prevColor = ballToColor[ball]\n        colorCount[prevColor] -= 1\n        if colorCount[prevColor] == 0:\n          del colorCount[prevColor]\n      ballToColor[ball] = color\n      colorCount[color] += 1\n      ans.append(len(colorCount))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}