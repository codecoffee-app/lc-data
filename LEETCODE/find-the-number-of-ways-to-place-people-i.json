{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3025",
            "title": "Find the Number of Ways to Place People I",
            "titleSlug": "find-the-number-of-ways-to-place-people-i",
            "content": "<p>You are given a 2D array <code>points</code> of size <code>n x 2</code> representing integer coordinates of some points on a 2D-plane, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p>\n\n<p>We define the <strong>right</strong> direction as positive x-axis (<strong>increasing x-coordinate</strong>) and the <strong>left</strong> direction as negative x-axis (<strong>decreasing x-coordinate</strong>). Similarly, we define the <strong>up</strong> direction as positive y-axis (<strong>increasing y-coordinate</strong>) and the <strong>down</strong> direction as negative y-axis (<strong>decreasing y-coordinate</strong>)</p>\n\n<p>You have to place <code>n</code> people, including Alice and Bob, at these points such that there is <strong>exactly one</strong> person at every point. Alice wants to be alone with Bob, so Alice will build a rectangular fence with Alice&#39;s position as the <strong>upper left corner</strong> and Bob&#39;s position as the <strong>lower right corner</strong> of the fence (<strong>Note</strong> that the fence <strong>might not</strong> enclose any area, i.e. it can be a line). If any person other than Alice and Bob is either <strong>inside</strong> the fence or <strong>on</strong> the fence, Alice will be sad.</p>\n\n<p>Return <em>the number of <strong>pairs of points</strong> where you can place Alice and Bob, such that Alice <strong>does not</strong> become sad on building the fence</em>.</p>\n\n<p><strong>Note</strong> that Alice can only build a fence with Alice&#39;s position as the upper left corner, and Bob&#39;s position as the lower right corner. For example, Alice cannot build either of the fences in the picture below with four corners <code>(1, 1)</code>, <code>(1, 3)</code>, <code>(3, 1)</code>, and <code>(3, 3)</code>, because:</p>\n\n<ul>\n\t<li>With Alice at <code>(3, 3)</code> and Bob at <code>(1, 1)</code>, Alice&#39;s position is not the upper left corner and Bob&#39;s position is not the lower right corner of the fence.</li>\n\t<li>With Alice at <code>(1, 3)</code> and Bob at <code>(1, 1)</code>, Bob&#39;s position is not the lower right corner of the fence.</li>\n</ul>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/04/example0alicebob-1.png\" style=\"width: 750px; height: 308px;padding: 10px; background: #fff; border-radius: .5rem;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/04/example1alicebob.png\" style=\"width: 376px; height: 308px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no way to place Alice and Bob such that Alice can build a fence with Alice&#39;s position as the upper left corner and Bob&#39;s position as the lower right corner. Hence we return 0. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/02/04/example2alicebob.png\" style=\"width: 1321px; height: 363px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> points = [[6,2],[4,4],[2,6]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (4, 4) and Bob at (6, 2).\n- Place Alice at (2, 6) and Bob at (4, 4).\nYou cannot place Alice at (2, 6) and Bob at (6, 2) because the person at (4, 4) will be inside the fence.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/02/04/example4alicebob.png\" style=\"width: 1123px; height: 308px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> points = [[3,1],[1,3],[1,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (1, 1) and Bob at (3, 1).\n- Place Alice at (1, 3) and Bob at (1, 1).\nYou cannot place Alice at (1, 3) and Bob at (3, 1) because the person at (1, 1) will be on the fence.\nNote that it does not matter if the fence encloses any area, the first and second fences in the image are valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 50</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>0 &lt;= points[i][0], points[i][1] &lt;= 50</code></li>\n\t<li>All <code>points[i]</code> are distinct.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 49,
            "dislikes": 58,
            "similarQuestions": "[{\"title\": \"Rectangle Area\", \"titleSlug\": \"rectangle-area\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Geometry",
                    "slug": "geometry"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.3K\", \"totalSubmission\": \"32.6K\", \"totalAcceptedRaw\": 13322, \"totalSubmissionRaw\": 32574, \"acRate\": \"40.9%\"}",
            "hints": [
                "We can enumerate all the upper-left and lower-right corners.",
                "If the upper-left corner is <code>(x1, y1)</code> and lower-right corner is <code>(x2, y2)</code>, check that there is no point <code>(x, y)</code> such that <code>x1 <= x <= x2</code> and <code>y2 <= y <= y1</code>."
            ],
            "rephrased": {
                "body": "Given a 2D array `points` of size `n x 2` representing the integer coordinates of `n` distinct points on a 2D-plane, the task is to find the number of pairs of points where Alice and Bob can be placed such that Alice can build a rectangular fence with her position as the upper-left corner and Bob's position as the lower-right corner, without any other person being inside or on the fence. The 'right' direction is defined as increasing x-coordinate, 'left' as decreasing x-coordinate, 'up' as increasing y-coordinate, and 'down' as decreasing y-coordinate.",
                "constraints": [
                    "2 <= n <= 50",
                    "points[i].length == 2",
                    "0 <= points[i][0], points[i][1] <= 50",
                    "All points[i] are distinct."
                ],
                "testcases": [
                    {
                        "input": "[[1,1],[2,2],[3,3]]",
                        "output": "0",
                        "explanation": "There is no way to place Alice and Bob such that Alice's position is the upper left corner and Bob's position is the lower right corner of the fence. Hence the output is 0."
                    },
                    {
                        "input": "[[6,2],[4,4],[2,6]]",
                        "output": "2",
                        "explanation": "There are two valid placements: Alice at (4, 4) and Bob at (6, 2), or Alice at (2, 6) and Bob at (4, 4). Placing Alice at (2, 6) and Bob at (6, 2) is invalid because the point (4, 4) would be inside the fence."
                    },
                    {
                        "input": "[[3,1],[1,3],[1,1]]",
                        "output": "2",
                        "explanation": "There are two valid placements: Alice at (1, 1) and Bob at (3, 1), or Alice at (1, 3) and Bob at (1, 1). Placing Alice at (1, 3) and Bob at (3, 1) is invalid because the point (1, 1) would be on the fence."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "rectangle-area",
                "title": "Rectangle Area",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We can enumerate all the upper-left and lower-right corners.",
            "If the upper-left corner is <code>(x1, y1)</code> and lower-right corner is <code>(x2, y2)</code>, check that there is no point <code>(x, y)</code> such that <code>x1 <= x <= x2</code> and <code>y2 <= y <= y1</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Geometry",
                "slug": "geometry"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numberOfPairs(vector<vector<int>>& points) {\n    int ans = 0;\n\n    ranges::sort(points, [](const vector<int>& a, const vector<int>& b) {\n      return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);\n    });\n\n    for (int i = 0; i < points.size(); ++i) {\n      int maxY = INT_MIN;\n      for (int j = i + 1; j < points.size(); ++j)\n        if (points[i][1] >= points[j][1] && points[j][1] > maxY) {\n          ++ans;\n          maxY = points[j][1];\n        }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numberOfPairs(int[][] points) {\n    int ans = 0;\n\n    Arrays.sort(points, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);\n\n    for (int i = 0; i < points.length; ++i) {\n      int maxY = Integer.MIN_VALUE;\n      for (int j = i + 1; j < points.length; ++j)\n        if (points[i][1] >= points[j][1] && points[j][1] > maxY) {\n          ++ans;\n          maxY = points[j][1];\n        }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numberOfPairs(self, points: List[List[int]]) -> int:\n    ans = 0\n\n    points.sort(key=lambda x: (x[0], -x[1]))\n\n    for i, (_, yi) in enumerate(points):\n      maxY = -math.inf\n      for j in range(i + 1, len(points)):\n        _, yj = points[j]\n        # Chisato is in the upper-left corner at (xi, yi), and Takina is in the\n        # lower-right corner at (xj, yj). Also, if yj > maxY, it means that\n        # nobody other than Chisato and Takina is inside or on the fence.\n        if yi >= yj > maxY:\n          ans += 1\n          maxY = yj\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}