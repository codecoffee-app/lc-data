{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2657",
            "title": "Find the Prefix Common Array of Two Arrays",
            "titleSlug": "find-the-prefix-common-array-of-two-arrays",
            "content": "<p>You are given two <strong>0-indexed </strong>integer<strong> </strong>permutations <code>A</code> and <code>B</code> of length <code>n</code>.</p>\n\n<p>A <strong>prefix common array</strong> of <code>A</code> and <code>B</code> is an array <code>C</code> such that <code>C[i]</code> is equal to the count of numbers that are present at or before the index <code>i</code> in both <code>A</code> and <code>B</code>.</p>\n\n<p>Return <em>the <strong>prefix common array</strong> of </em><code>A</code><em> and </em><code>B</code>.</p>\n\n<p>A sequence of <code>n</code> integers is called a&nbsp;<strong>permutation</strong> if it contains all integers from <code>1</code> to <code>n</code> exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [1,3,2,4], B = [3,1,2,4]\n<strong>Output:</strong> [0,2,3,4]\n<strong>Explanation:</strong> At i = 0: no number is common, so C[0] = 0.\nAt i = 1: 1 and 3 are common in A and B, so C[1] = 2.\nAt i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3.\nAt i = 3: 1, 2, 3, and 4 are common in A and B, so C[3] = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [2,3,1], B = [3,1,2]\n<strong>Output:</strong> [0,1,3]\n<strong>Explanation:</strong> At i = 0: no number is common, so C[0] = 0.\nAt i = 1: only 3 is common in A and B, so C[1] = 1.\nAt i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length == B.length == n &lt;= 50</code></li>\n\t<li><code>1 &lt;= A[i], B[i] &lt;= n</code></li>\n\t<li><code>It is guaranteed that A and B are both a permutation of n integers.</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 406,
            "dislikes": 9,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"32.1K\", \"totalSubmission\": \"40.1K\", \"totalAcceptedRaw\": 32116, \"totalSubmissionRaw\": 40061, \"acRate\": \"80.2%\"}",
            "hints": [
                "Consider keeping a frequency array that stores the count of occurrences of each number till index i.",
                "If a number occurred two times, it means it occurred in both A and B since they\u2019re both permutations so add one to the answer."
            ],
            "rephrased": {
                "body": "Given two 0-indexed integer permutations `A` and `B` of length `n`, determine the prefix common array `C`. The prefix common array `C` has the same length as `A` and `B` where `C[i]` represents the count of numbers that appear at or before index `i` in both `A` and `B`. Return the prefix common array `C`.",
                "constraints": [
                    "1 <= A.length == B.length == n <= 50",
                    "1 <= A[i], B[i] <= n",
                    "It is guaranteed that A and B are both a permutation of n integers."
                ],
                "testcases": [
                    {
                        "input": "A = [1,3,2,4], B = [3,1,2,4]",
                        "output": "[0,2,3,4]",
                        "explanation": "For i = 0, no numbers are common, C[0] = 0. For i = 1, 1 and 3 are common, C[1] = 2. For i = 2, 1, 2, and 3 are common, C[2] = 3. For i = 3, 1, 2, 3, and 4 are common, C[3] = 4."
                    },
                    {
                        "input": "A = [2,3,1], B = [3,1,2]",
                        "output": "[0,1,3]",
                        "explanation": "For i = 0, no numbers are common, C[0] = 0. For i = 1, only 3 is common, C[1] = 1. For i = 2, 1, 2, and 3 are common, C[2] = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Consider keeping a frequency array that stores the count of occurrences of each number till index i.",
            "If a number occurred two times, it means it occurred in both A and B since they\u2019re both permutations so add one to the answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findThePrefixCommonArray(vector<int>& A, vector<int>& B) {\n    const int n = A.size();\n    int prefixCommon = 0;\n    vector<int> ans;\n    vector<int> count(n + 1);\n\n    for (int i = 0; i < A.size(); ++i) {\n      if (++count[A[i]] == 2)\n        ++prefixCommon;\n      if (++count[B[i]] == 2)\n        ++prefixCommon;\n      ans.push_back(prefixCommon);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] findThePrefixCommonArray(int[] A, int[] B) {\n    final int n = A.length;\n    int prefixCommon = 0;\n    int[] ans = new int[n];\n    int[] count = new int[n + 1];\n\n    for (int i = 0; i < A.length; ++i) {\n      if (++count[A[i]] == 2)\n        ++prefixCommon;\n      if (++count[B[i]] == 2)\n        ++prefixCommon;\n      ans[i] = prefixCommon;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findThePrefixCommonArray(self, A: List[int], B: List[int]) -> List[int]:\n    n = len(A)\n    prefixCommon = 0\n    ans = []\n    count = [0] * (n + 1)\n\n    for a, b in zip(A, B):\n      count[a] += 1\n      if count[a] == 2:\n        prefixCommon += 1\n      count[b] += 1\n      if count[b] == 2:\n        prefixCommon += 1\n      ans.append(prefixCommon)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}