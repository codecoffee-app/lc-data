{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2698",
            "title": "Find the Punishment Number of an Integer",
            "titleSlug": "find-the-punishment-number-of-an-integer",
            "content": "<p>Given a positive integer <code>n</code>, return <em>the <strong>punishment number</strong></em> of <code>n</code>.</p>\n\n<p>The <strong>punishment number</strong> of <code>n</code> is defined as the sum of the squares of all integers <code>i</code> such that:</p>\n\n<ul>\n\t<li><code>1 &lt;= i &lt;= n</code></li>\n\t<li>The decimal representation of <code>i * i</code> can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals <code>i</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 182\n<strong>Explanation:</strong> There are exactly 3 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1\n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.\n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.\nHence, the punishment number of 10 is 1 + 81 + 100 = 182\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 37\n<strong>Output:</strong> 1478\n<strong>Explanation:</strong> There are exactly 4 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1. \n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. \n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. \n- 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.\nHence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 451,
            "dislikes": 28,
            "similarQuestions": "[{\"title\": \"Number of Great Partitions\", \"titleSlug\": \"number-of-great-partitions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"17.6K\", \"totalSubmission\": \"28.8K\", \"totalAcceptedRaw\": 17642, \"totalSubmissionRaw\": 28766, \"acRate\": \"61.3%\"}",
            "hints": [
                "Can we generate all possible partitions of a number?",
                "Use a recursive algorithm that splits the number into two parts, generates all possible partitions of each part recursively, and then combines them in all possible ways."
            ],
            "rephrased": {
                "body": "Given a positive integer `n`, determine the punishment number of `n`. The punishment number of `n` is the sum of the squares of all integers `i` (where `1 <= i <= n`) such that the decimal representation of `i * i` can be split into contiguous substrings whose integer values sum to `i`.",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "182",
                        "explanation": "The integers that satisfy the conditions are 1 (1*1=1), 9 (9*9=81 -> 8+1=9), and 10 (10*10=100 -> 10+0=10). Therefore, the punishment number is 1 + 81 + 100 = 182."
                    },
                    {
                        "input": "37",
                        "output": "1478",
                        "explanation": "The integers that satisfy the conditions are 1 (1*1=1), 9 (9*9=81 -> 8+1=9), 10 (10*10=100 -> 10+0=10), and 36 (36*36=1296 -> 1+29+6=36). Therefore, the punishment number is 1 + 81 + 100 + 1296 = 1478."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-great-partitions",
                "title": "Number of Great Partitions",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we generate all possible partitions of a number?",
            "Use a recursive algorithm that splits the number into two parts, generates all possible partitions of each part recursively, and then combines them in all possible ways."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int punishmentNumber(int n) {\n    int ans = 0;\n    for (int i = 1; i <= n; ++i)\n      if (isPossible(0, 0, to_string(i * i), 0, i))\n        ans += i * i;\n    return ans;\n  }\n\n private:\n  // Returns True if the sum of any split of `numChars` equals the target.\n  bool isPossible(int accumulate, int running, const string& numChars, int s,\n                  int target) {\n    if (s == numChars.length())\n      return target == accumulate + running;\n    const int d = numChars[s] - '0';\n    return isPossible(accumulate, running * 10 + d, numChars, s + 1, target) ||\n           isPossible(accumulate + running, d, numChars, s + 1, target);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public int punishmentNumber(int n) {\n    int ans = 0;\n    for (int i = 1; i <= n; ++i)\n      if (isPossible(0, 0, String.valueOf(i * i), 0, i))\n        ans += i * i;\n\n    return ans;\n  }\n\n  // Returns true if the sum of any split of `numChars` equals the target.\n  private boolean isPossible(int accumulate, int running, String numChars, int s, int target) {\n    if (s == numChars.length())\n      return target == accumulate + running;\n    final int d = numChars.charAt(s) - '0';\n    return isPossible(accumulate, running * 10 + d, numChars, s + 1, target) ||\n        isPossible(accumulate + running, d, numChars, s + 1, target);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def punishmentNumber(self, n: int) -> int:\n    def isPossible(accumulate: int, running: int, numChars: List[str], s: int, target: int) -> bool:\n      \"\"\"Returns True if the sum of any split of `numChars` equals the target.\"\"\"\n      if s == len(numChars):\n        return target == accumulate + running\n      d = int(numChars[s])\n      return (\n          # Keep growing the `running`.\n          isPossible(accumulate, running * 10 + d, numChars, s + 1, target) or\n          # Start a new `running`.\n          isPossible(accumulate + running, d, numChars, s + 1, target)\n      )\n\n    return sum(i * i\n               for i in range(1, n + 1)\n               if isPossible(0, 0, str(i * i), 0, i))\n",
                "lang_text": "py"
            }
        }
    }
}