{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2812",
            "title": "Find the Safest Path in a Grid",
            "titleSlug": "find-the-safest-path-in-a-grid",
            "content": "<p>You are given a <strong>0-indexed</strong> 2D matrix <code>grid</code> of size <code>n x n</code>, where <code>(r, c)</code> represents:</p>\n\n<ul>\n\t<li>A cell containing a thief if <code>grid[r][c] = 1</code></li>\n\t<li>An empty cell if <code>grid[r][c] = 0</code></li>\n</ul>\n\n<p>You are initially positioned at cell <code>(0, 0)</code>. In one move, you can move to any adjacent cell in the grid, including cells containing thieves.</p>\n\n<p>The <strong>safeness factor</strong> of a path on the grid is defined as the <strong>minimum</strong> manhattan distance from any cell in the path to any thief in the grid.</p>\n\n<p>Return <em>the <strong>maximum safeness factor</strong> of all paths leading to cell </em><code>(n - 1, n - 1)</code><em>.</em></p>\n\n<p>An <strong>adjacent</strong> cell of cell <code>(r, c)</code>, is one of the cells <code>(r, c + 1)</code>, <code>(r, c - 1)</code>, <code>(r + 1, c)</code> and <code>(r - 1, c)</code> if it exists.</p>\n\n<p>The <strong>Manhattan distance</strong> between two cells <code>(a, b)</code> and <code>(x, y)</code> is equal to <code>|a - x| + |b - y|</code>, where <code>|val|</code> denotes the absolute value of val.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/07/02/example1.png\" style=\"width: 362px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,0,0],[0,0,0],[0,0,1]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/07/02/example2.png\" style=\"width: 362px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0,1],[0,0,0],[0,0,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/07/02/example3.png\" style=\"width: 362px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2.\n- The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length == n &lt;= 400</code></li>\n\t<li><code>grid[i].length == n</code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li>There is at least one thief in the <code>grid</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1538,
            "dislikes": 281,
            "similarQuestions": "[{\"title\": \"Path With Minimum Effort\", \"titleSlug\": \"path-with-minimum-effort\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"91.2K\", \"totalSubmission\": \"185.7K\", \"totalAcceptedRaw\": 91171, \"totalSubmissionRaw\": 185697, \"acRate\": \"49.1%\"}",
            "hints": [
                "Consider using both BFS and binary search together.",
                "Launch a BFS starting from all the cells containing thieves to calculate d[x][y] which is the smallest Manhattan distance from (x, y) to the nearest grid that contains thieves.",
                "To check if the bottom-right cell of the grid can be reached through a path of safeness factor v, eliminate all cells (x, y) such that grid[x][y]  < v. if (0, 0) and (n - 1, n - 1) are still connected, there exists a path between (0, 0) and (n - 1, n - 1) of safeness factor v.",
                "Binary search over the final safeness factor v."
            ],
            "rephrased": {
                "body": "Given a 0-indexed 2D matrix `grid` of size `n x n`, where `grid[r][c] = 1` represents a thief and `grid[r][c] = 0` represents an empty cell. You start at cell (0, 0) and can move to any adjacent cell (up, down, left, or right). The safeness factor of a path is the minimum Manhattan distance from any cell in the path to any thief. Return the maximum safeness factor of all paths from (0, 0) to (n - 1, n - 1).",
                "constraints": [
                    "1 <= grid.length == n <= 400",
                    "grid[i].length == n",
                    "grid[i][j] is either 0 or 1",
                    "There is at least one thief in the grid."
                ],
                "testcases": [
                    {
                        "input": "[[1,0,0],[0,0,0],[0,0,1]]",
                        "output": "0",
                        "explanation": "Every path from (0, 0) to (n - 1, n - 1) inevitably passes through cells containing thieves, resulting in a safeness factor of 0. The manhattan distance from (0,0) to (0,0) is 0. The manhattan distance from (2,2) to (2,2) is 0."
                    },
                    {
                        "input": "[[0,0,1],[0,0,0],[0,0,0]]",
                        "output": "2",
                        "explanation": "One possible path with a safeness factor of 2 is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2). The minimum manhattan distance from the thief at (0,2) is 2, because the manhattan distance from (0,0) to (0,2) is |0-0| + |0-2| = 2."
                    },
                    {
                        "input": "[[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]",
                        "output": "2",
                        "explanation": "One possible path with safeness factor of 2 is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,3). The minimum manhattan distance to a thief for this path is 2. This is the maximal value possible."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "path-with-minimum-effort",
                "title": "Path With Minimum Effort",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Consider using both BFS and binary search together.",
            "Launch a BFS starting from all the cells containing thieves to calculate d[x][y] which is the smallest Manhattan distance from (x, y) to the nearest grid that contains thieves.",
            "To check if the bottom-right cell of the grid can be reached through a path of safeness factor v, eliminate all cells (x, y) such that grid[x][y]  < v. if (0, 0) and (n - 1, n - 1) are still connected, there exists a path between (0, 0) and (n - 1, n - 1) of safeness factor v.",
            "Binary search over the final safeness factor v."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ]
    }
}