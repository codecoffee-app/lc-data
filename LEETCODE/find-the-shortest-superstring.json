{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "943",
            "title": "Find the Shortest Superstring",
            "titleSlug": "find-the-shortest-superstring",
            "content": "<p>Given an array of strings <code>words</code>, return <em>the smallest string that contains each string in</em> <code>words</code> <em>as a substring</em>. If there are multiple valid strings of the smallest length, return <strong>any of them</strong>.</p>\n\n<p>You may assume that no string in <code>words</code> is a substring of another string in <code>words</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;alex&quot;,&quot;loves&quot;,&quot;leetcode&quot;]\n<strong>Output:</strong> &quot;alexlovesleetcode&quot;\n<strong>Explanation:</strong> All permutations of &quot;alex&quot;,&quot;loves&quot;,&quot;leetcode&quot; would also be accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;catg&quot;,&quot;ctaagt&quot;,&quot;gcta&quot;,&quot;ttca&quot;,&quot;atgcatc&quot;]\n<strong>Output:</strong> &quot;gctaagttcatgcatc&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1396,
            "dislikes": 144,
            "similarQuestions": "[{\"title\": \"Maximum Rows Covered by Columns\", \"titleSlug\": \"maximum-rows-covered-by-columns\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.7K\", \"totalSubmission\": \"63.3K\", \"totalAcceptedRaw\": 27747, \"totalSubmissionRaw\": 63275, \"acRate\": \"43.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of strings `words`, find the shortest string that contains each string in `words` as a substring. If multiple shortest strings exist, return any one of them. It is guaranteed that no string in `words` is a substring of another string in `words`.",
                "constraints": [
                    "1 <= words.length <= 12",
                    "1 <= words[i].length <= 20",
                    "words[i] consists of lowercase English letters.",
                    "All the strings of words are unique."
                ],
                "testcases": [
                    {
                        "input": "words = [\"alex\",\"loves\",\"leetcode\"]",
                        "output": "\"alexlovesleetcode\"",
                        "explanation": "Any permutation of \"alex\", \"loves\", and \"leetcode\" is a valid solution because they all contain each of the given strings as substrings. This is because when you concatenate the input strings, each string will be a substring of the concatenation."
                    },
                    {
                        "input": "words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]",
                        "output": "\"gctaagttcatgcatc\"",
                        "explanation": "In this example, the string \"gctaagttcatgcatc\" is the shortest string that contains each of the given strings as a substring. Another valid solution would be \"atgcatgctaagttca\""
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-rows-covered-by-columns",
                "title": "Maximum Rows Covered by Columns",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string shortestSuperstring(vector<string>& A) {\n    const int n = A.size();\n    // cost[i][j] := cost to append A[j] after A[i]\n    vector<vector<int>> cost(n, vector<int>(n));\n\n    // GetCost(a, b) := cost to append b after a\n    auto getCost = [](const string& a, const string& b) {\n      int cost = b.length();\n      const int minLength = min(a.length(), b.length());\n      for (int k = 1; k <= minLength; ++k)\n        if (a.substr(a.length() - k) == b.substr(0, k))\n          cost = b.length() - k;\n      return cost;\n    };\n\n    // Pre-calculate cost array to save time\n    for (int i = 0; i < n; ++i)\n      for (int j = i + 1; j < n; ++j) {\n        cost[i][j] = getCost(A[i], A[j]);\n        cost[j][i] = getCost(A[j], A[i]);\n      }\n\n    vector<int> bestPath;\n    int minLength = n * 20;  // Given by problem\n\n    dfs(A, cost, {}, bestPath, 0, 0, 0, minLength);\n\n    string ans = A[bestPath[0]];\n\n    for (int k = 1; k < n; ++k) {\n      const int i = bestPath[k - 1];\n      const int j = bestPath[k];\n      ans += A[j].substr(A[j].length() - cost[i][j]);\n    }\n\n    return ans;\n  }\n\n private:\n  // Used: i-th bit means A[i] is used or not\n  void dfs(const vector<string>& A, const vector<vector<int>>& cost,\n           vector<int>&& path, vector<int>& bestPath, int used, int depth,\n           int currLength, int& minLength) {\n    if (currLength >= minLength)\n      return;\n    if (depth == A.size()) {\n      minLength = currLength;\n      bestPath = path;\n      return;\n    }\n\n    for (int i = 0; i < A.size(); ++i) {\n      if (1 << i & used)\n        continue;\n      path.push_back(i);\n      const int newLength =\n          depth == 0 ? A[i].length() : currLength + cost[path[depth - 1]][i];\n      dfs(A, cost, move(path), bestPath, used | 1 << i, depth + 1, newLength,\n          minLength);\n      path.pop_back();\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String shortestSuperstring(String[] A) {\n    final int n = A.length;\n    // cost[i][j] := cost to append A[j] after A[i]\n    int[][] cost = new int[n][n];\n\n    // Pre-calculate cost array to save time\n    for (int i = 0; i < n; ++i)\n      for (int j = i + 1; j < n; ++j) {\n        cost[i][j] = getCost(A[i], A[j]);\n        cost[j][i] = getCost(A[j], A[i]);\n      }\n\n    List<Integer> path = new ArrayList<>();\n    List<Integer> bestPath = new ArrayList<>();\n\n    minLength = n * 20; // Given by problem\n\n    dfs(A, cost, path, bestPath, 0, 0, 0);\n\n    StringBuilder sb = new StringBuilder(A[bestPath.get(0)]);\n\n    for (int k = 1; k < n; ++k) {\n      final int i = bestPath.get(k - 1);\n      final int j = bestPath.get(k);\n      sb.append(A[j].substring(A[j].length() - cost[i][j]));\n    }\n\n    return sb.toString();\n  }\n\n  private int minLength;\n\n  // GetCost(a, b) := cost to append b after a\n  private int getCost(final String a, final String b) {\n    int cost = b.length();\n    final int minLength = Math.min(a.length(), b.length());\n    for (int k = 1; k <= minLength; ++k)\n      if (a.substring(a.length() - k).equals(b.substring(0, k)))\n        cost = b.length() - k;\n    return cost;\n  }\n\n  // Used: i-th bit means A[i] is used or not\n  private void dfs(String[] A, int[][] cost, List<Integer> path, List<Integer> bestPath, int used,\n                   int depth, int currLength) {\n    if (currLength >= minLength)\n      return;\n    if (depth == A.length) {\n      minLength = currLength;\n      bestPath.clear();\n      for (final int node : path) {\n        bestPath.add(node);\n      }\n      return;\n    }\n\n    for (int i = 0; i < A.length; ++i) {\n      if ((1 << i & used) > 0)\n        continue;\n      path.add(i);\n      final int newLength = depth == 0 ? A[i].length() : currLength + cost[path.get(depth - 1)][i];\n      dfs(A, cost, path, bestPath, used | 1 << i, depth + 1, newLength);\n      path.remove(path.size() - 1);\n    }\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}