{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1283",
            "title": "Find the Smallest Divisor Given a Threshold",
            "titleSlug": "find-the-smallest-divisor-given-a-threshold",
            "content": "<p>Given an array of integers <code>nums</code> and an integer <code>threshold</code>, we will choose a positive integer <code>divisor</code>, divide all the array by it, and sum the division&#39;s result. Find the <strong>smallest</strong> <code>divisor</code> such that the result mentioned above is less than or equal to <code>threshold</code>.</p>\n\n<p>Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: <code>7/3 = 3</code> and <code>10/2 = 5</code>).</p>\n\n<p>The test cases are generated so&nbsp;that there will be an answer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,5,9], threshold = 6\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> We can get a sum to 17 (1+2+5+9) if the divisor is 1. \nIf the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [44,22,33,11,1], threshold = 5\n<strong>Output:</strong> 44\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>nums.length &lt;= threshold &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2697,
            "dislikes": 182,
            "similarQuestions": "[{\"title\": \"Minimized Maximum of Products Distributed to Any Store\", \"titleSlug\": \"minimized-maximum-of-products-distributed-to-any-store\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"147.2K\", \"totalSubmission\": \"251.5K\", \"totalAcceptedRaw\": 147235, \"totalSubmissionRaw\": 251469, \"acRate\": \"58.5%\"}",
            "hints": [
                "Examine every possible number for solution. Choose the largest of them.",
                "Use binary search to reduce the time complexity."
            ],
            "rephrased": {
                "body": "Given an array of integers `nums` and an integer `threshold`, find the smallest positive integer `divisor` such that the sum of each element in `nums` divided by `divisor` (rounded up to the nearest integer) is less than or equal to `threshold`.",
                "constraints": [
                    "1 <= nums.length <= 5 * 10^4",
                    "1 <= nums[i] <= 10^6",
                    "nums.length <= threshold <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,5,9], threshold = 6",
                        "output": "5",
                        "explanation": "If the divisor is 1, the sum is 17 (1+2+5+9). If the divisor is 4, the sum is 7 (1+1+2+3). If the divisor is 5, the sum is 5 (1+1+1+2)."
                    },
                    {
                        "input": "nums = [44,22,33,11,1], threshold = 5",
                        "output": "44",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimized-maximum-of-products-distributed-to-any-store",
                "title": "Minimized Maximum of Products Distributed to Any Store",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Examine every possible number for solution. Choose the largest of them.",
            "Use binary search to reduce the time complexity."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int smallestDivisor(vector<int>& nums, int threshold) {\n    int l = 1;\n    int r = *max_element(nums.begin(), nums.end());\n\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (sumDivision(nums, m) <= threshold)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n private:\n  int sumDivision(const vector<int>& nums, int m) {\n    int sum = 0;\n    for (const int num : nums)\n      sum += (num - 1) / m + 1;\n    return sum;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int smallestDivisor(int[] nums, int threshold) {\n    int l = 1;\n    int r = Arrays.stream(nums).max().getAsInt();\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (sumDivision(nums, m) <= threshold)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n  private int sumDivision(int[] nums, int m) {\n    int sum = 0;\n    for (final int num : nums)\n      sum += (num - 1) / m + 1;\n    return sum;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def smallestDivisor(self, nums: List[int], threshold: int) -> int:\n    l = 1\n    r = max(nums)\n\n    while l < r:\n      m = (l + r) // 2\n      if sum((num - 1) // m + 1 for num in nums) <= threshold:\n        r = m\n      else:\n        l = m + 1\n\n    return l\n",
                "lang_text": "py"
            }
        }
    }
}