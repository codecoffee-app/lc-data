{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2606",
            "title": "Find the Substring With Maximum Cost",
            "titleSlug": "find-the-substring-with-maximum-cost",
            "content": "<p>You are given a string <code>s</code>, a string <code>chars</code> of <strong>distinct</strong> characters and an integer array <code>vals</code> of the same length as <code>chars</code>.</p>\n\n<p>The <strong>cost of the substring </strong>is the sum of the values of each character in the substring. The cost of an empty string is considered <code>0</code>.</p>\n\n<p>The <strong>value of the character </strong>is defined in the following way:</p>\n\n<ul>\n\t<li>If the character is not in the string <code>chars</code>, then its value is its corresponding position <strong>(1-indexed)</strong> in the alphabet.\n\n\t<ul>\n\t\t<li>For example, the value of <code>&#39;a&#39;</code> is <code>1</code>, the value of <code>&#39;b&#39;</code> is <code>2</code>, and so on. The value of <code>&#39;z&#39;</code> is <code>26</code>.</li>\n\t</ul>\n\t</li>\n\t<li>Otherwise, assuming <code>i</code> is the index where the character occurs in the string <code>chars</code>, then its value is <code>vals[i]</code>.</li>\n</ul>\n\n<p>Return <em>the maximum cost among all substrings of the string</em> <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;adaa&quot;, chars = &quot;d&quot;, vals = [-1000]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The value of the characters &quot;a&quot; and &quot;d&quot; is 1 and -1000 respectively.\nThe substring with the maximum cost is &quot;aa&quot; and its cost is 1 + 1 = 2.\nIt can be proven that 2 is the maximum cost.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;, chars = &quot;abc&quot;, vals = [-1,-1,-1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The value of the characters &quot;a&quot;, &quot;b&quot; and &quot;c&quot; is -1, -1, and -1 respectively.\nThe substring with the maximum cost is the empty substring &quot;&quot; and its cost is 0.\nIt can be proven that 0 is the maximum cost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consist of lowercase English letters.</li>\n\t<li><code>1 &lt;= chars.length &lt;= 26</code></li>\n\t<li><code>chars</code> consist of <strong>distinct</strong> lowercase English letters.</li>\n\t<li><code>vals.length == chars.length</code></li>\n\t<li><code>-1000 &lt;= vals[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 331,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"Maximum Subarray\", \"titleSlug\": \"maximum-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.7K\", \"totalSubmission\": \"38.7K\", \"totalAcceptedRaw\": 21657, \"totalSubmissionRaw\": 38686, \"acRate\": \"56.0%\"}",
            "hints": [
                "Create a new integer array where arr[i] denotes the value of character s[i].",
                "We can use Kadane\u2019s maximum subarray sum algorithm to find the maximum cost."
            ],
            "rephrased": {
                "body": "Given a string `s`, a string `chars` of distinct characters, and an integer array `vals` of the same length as `chars`, determine the maximum cost among all possible substrings of `s`. The cost of a substring is the sum of the values of its characters. The value of a character is determined as follows:\n\n*   If the character is not in `chars`, its value is its 1-indexed position in the alphabet (e.g., 'a' is 1, 'b' is 2, 'z' is 26).\n*   If the character is in `chars` at index `i`, its value is `vals[i]`.\n\nReturn the maximum cost of any substring of `s`. An empty string has a cost of 0.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "`s` consists of lowercase English letters.",
                    "1 <= chars.length <= 26",
                    "`chars` consists of distinct lowercase English letters.",
                    "vals.length == chars.length",
                    "-1000 <= vals[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "s = \"adaa\", chars = \"d\", vals = [-1000]",
                        "output": "2",
                        "explanation": "The characters 'a' and 'd' have values 1 and -1000 respectively. The substring with the maximum cost is \"aa\", with a cost of 1 + 1 = 2."
                    },
                    {
                        "input": "s = \"abc\", chars = \"abc\", vals = [-1,-1,-1]",
                        "output": "0",
                        "explanation": "The characters 'a', 'b', and 'c' have values -1, -1, and -1 respectively. The substring with the maximum cost is the empty string \"\", with a cost of 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-subarray",
                "title": "Maximum Subarray",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Create a new integer array where arr[i] denotes the value of character s[i].",
            "We can use Kadane\u2019s maximum subarray sum algorithm to find the maximum cost."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ]
    }
}