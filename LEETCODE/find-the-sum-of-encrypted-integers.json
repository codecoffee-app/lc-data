{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3079",
            "title": "Find the Sum of Encrypted Integers",
            "titleSlug": "find-the-sum-of-encrypted-integers",
            "content": "<p>You are given an integer array <code>nums</code> containing <strong>positive</strong> integers. We define a function <code>encrypt</code> such that <code>encrypt(x)</code> replaces <strong>every</strong> digit in <code>x</code> with the <strong>largest</strong> digit in <code>x</code>. For example, <code>encrypt(523) = 555</code> and <code>encrypt(213) = 333</code>.</p>\n\n<p>Return <em>the <strong>sum </strong>of encrypted elements</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [1,2,3]</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">6</span></p>\n\n<p><strong>Explanation:</strong> The encrypted elements are&nbsp;<code>[1,2,3]</code>. The sum of encrypted elements is <code>1 + 2 + 3 == 6</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [10,21,31]</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">66</span></p>\n\n<p><strong>Explanation:</strong> The encrypted elements are <code>[11,22,33]</code>. The sum of encrypted elements is <code>11 + 22 + 33 == 66</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 85,
            "dislikes": 11,
            "similarQuestions": "[{\"title\": \"Encrypt and Decrypt Strings\", \"titleSlug\": \"encrypt-and-decrypt-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                }
            ],
            "stats": "{\"totalAccepted\": \"40.6K\", \"totalSubmission\": \"54.9K\", \"totalAcceptedRaw\": 40612, \"totalSubmissionRaw\": 54877, \"acRate\": \"74.0%\"}",
            "hints": [
                "Encrypted numbers are of the form <code>11\u20261 * maxDigit</code>."
            ],
            "rephrased": {
                "body": "Given an array of positive integers, `nums`, encrypt each number by replacing every digit with the largest digit present in that number. Return the sum of these encrypted numbers.",
                "constraints": [
                    "1 <= nums.length <= 50",
                    "1 <= nums[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3]",
                        "output": "6",
                        "explanation": "The encrypted elements are [1,2,3]. The sum of encrypted elements is 1 + 2 + 3 == 6."
                    },
                    {
                        "input": "[10,21,31]",
                        "output": "66",
                        "explanation": "The encrypted elements are [11,22,33]. The sum of encrypted elements is 11 + 22 + 33 == 66."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "encrypt-and-decrypt-strings",
                "title": "Encrypt and Decrypt Strings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Encrypted numbers are of the form <code>11\u20261 * maxDigit</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int sumOfEncryptedInt(vector<int>& nums) {\n    int ans = 0;\n\n    for (const int num : nums) {\n      int maxDigit = 0;\n      int base = 0;\n      for (int x = num; x > 0; x /= 10) {\n        maxDigit = max(maxDigit, x % 10);\n        base = base * 10 + 1;\n      }\n      ans += base * maxDigit;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int sumOfEncryptedInt(int[] nums) {\n    int ans = 0;\n\n    for (final int num : nums) {\n      int maxDigit = 0;\n      int base = 0;\n      for (int x = num; x > 0; x /= 10) {\n        maxDigit = Math.max(maxDigit, x % 10);\n        base = base * 10 + 1;\n      }\n      ans += base * maxDigit;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sumOfEncryptedInt(self, nums: List[int]) -> int:\n    def getEncrypted(num: int) -> int:\n      maxDigit = 0\n      base = 0\n      while num > 0:\n        maxDigit = max(maxDigit, num % 10)\n        base = base * 10 + 1\n        num //= 10\n      return base * maxDigit\n\n    return sum(getEncrypted(num) for num in nums)\n",
                "lang_text": "py"
            }
        }
    }
}