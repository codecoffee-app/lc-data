{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3098",
            "title": "Find the Sum of Subsequence Powers",
            "titleSlug": "find-the-sum-of-subsequence-powers",
            "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code>, and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>The <strong>power</strong> of a <span data-keyword=\"subsequence-array\">subsequence</span> is defined as the <strong>minimum</strong> absolute difference between <strong>any</strong> two elements in the subsequence.</p>\n\n<p>Return <em>the <strong>sum</strong> of <strong>powers</strong> of <strong>all</strong> subsequences of </em><code>nums</code><em> which have length</em> <strong><em>equal to</em></strong> <code>k</code>.</p>\n\n<p>Since the answer may be large, return it <strong>modulo</strong> <code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 4 subsequences in <code>nums</code> which have length 3: <code>[1,2,3]</code>, <code>[1,3,4]</code>, <code>[1,2,4]</code>, and <code>[2,3,4]</code>. The sum of powers is <code>|2 - 3| + |3 - 4| + |2 - 1| + |3 - 4| = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,2], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only subsequence in <code>nums</code> which has length 2 is&nbsp;<code>[2,2]</code>. The sum of powers is <code>|2 - 2| = 0</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,3,-1], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">10</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 3 subsequences in <code>nums</code> which have length 2: <code>[4,3]</code>, <code>[4,-1]</code>, and <code>[3,-1]</code>. The sum of powers is <code>|4 - 3| + |4 - (-1)| + |3 - (-1)| = 10</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 50</code></li>\n\t<li><code>-10<sup>8</sup> &lt;= nums[i] &lt;= 10<sup>8</sup> </code></li>\n\t<li><code>2 &lt;= k &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 116,
            "dislikes": 5,
            "similarQuestions": "[{\"title\": \"Number of Subsequences That Satisfy the Given Sum Condition\", \"titleSlug\": \"number-of-subsequences-that-satisfy-the-given-sum-condition\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Closest Subsequence Sum\", \"titleSlug\": \"closest-subsequence-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.2K\", \"totalSubmission\": \"17.2K\", \"totalAcceptedRaw\": 4221, \"totalSubmissionRaw\": 17226, \"acRate\": \"24.5%\"}",
            "hints": [
                "Sort <code>nums</code>.",
                "There are at most <code>n<sup>2</sup></code> distinct differences.",
                "For a particular difference <code>d</code>, let <code>dp[len][i][j]</code> be the number of subsequences of length <code>len</code> in the subarray <code>nums[0..i]</code> where the last element picked was at index <code>j</code>.",
                "For each index, we can check if it can be picked if <code>nums[i] - nums[j] <= d</code>."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` of length `n` and a positive integer `k`, determine the sum of the powers of all subsequences of `nums` which have length equal to `k`. The power of a subsequence is defined as the minimum absolute difference between any two elements in the subsequence. Return the sum modulo 10^9 + 7.",
                "constraints": [
                    "2 <= n == nums.length <= 50",
                    "-10^8 <= nums[i] <= 10^8",
                    "2 <= k <= n"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3,4], k = 3",
                        "output": "4",
                        "explanation": "There are 4 subsequences in `nums` which have length 3: `[1,2,3]`, `[1,3,4]`, `[1,2,4]`, and `[2,3,4]`. The power of each subsequence is calculated as follows: |1-2|=1 for [1,2,3], |3-4|=1 for [1,3,4], |1-2|=1 for [1,2,4], |2-3|=1 for [2,3,4]. The sum of the powers is 1 + 1 + 1 + 1 = 4."
                    },
                    {
                        "input": "nums = [2,2], k = 2",
                        "output": "0",
                        "explanation": "The only subsequence in `nums` which has length 2 is `[2,2]`. The sum of powers is |2 - 2| = 0."
                    },
                    {
                        "input": "nums = [4,3,-1], k = 2",
                        "output": "10",
                        "explanation": "There are 3 subsequences in `nums` which have length 2: `[4,3]`, `[4,-1]`, and `[3,-1]`. The power of each subsequence is calculated as follows: |4-3|=1 for [4,3], |4-(-1)|=5 for [4,-1], |3-(-1)|=4 for [3,-1]. The sum of powers is 1 + 5 + 4 = 10."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
                "title": "Number of Subsequences That Satisfy the Given Sum Condition",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "closest-subsequence-sum",
                "title": "Closest Subsequence Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort <code>nums</code>.",
            "There are at most <code>n<sup>2</sup></code> distinct differences.",
            "For a particular difference <code>d</code>, let <code>dp[len][i][j]</code> be the number of subsequences of length <code>len</code> in the subarray <code>nums[0..i]</code> where the last element picked was at index <code>j</code>.",
            "For each index, we can check if it can be picked if <code>nums[i] - nums[j] <= d</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int sumOfPowers(vector<int>& nums, int k) {\n    const int n = nums.size();\n    ranges::sort(nums);\n    vector<vector<vector<vector<int>>>> mem(\n        n + 1, vector<vector<vector<int>>>(\n                   n + 1, vector<vector<int>>(n + 1, vector<int>(k + 1, -1))));\n    return sumOfPowers(nums, 0, k, -1, -1, -1, mem);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n\n  // Returns the sum of powers of all subsequences of nums[i..n) which\n  // have length equal to k, where `lastPickedIndex` is the index of the last\n  // picked number and nums[secondIndex] - nums[firstIndex] is the minimum power\n  // so far.\n  int sumOfPowers(const vector<int>& nums, int i, int k, int lastPickedIndex,\n                  int firstIndex, int secondIndex,\n                  vector<vector<vector<vector<int>>>>& mem) {\n    if (k == 0)\n      return nums[secondIndex] - nums[firstIndex];\n    if (i == nums.size())\n      return 0;\n    const int a = hash(lastPickedIndex);\n    const int b = hash(firstIndex);\n    const int c = hash(secondIndex);\n    if (mem[a][b][c][k] != -1)\n      return mem[a][b][c][k];\n    int newFirstIndex = firstIndex;\n    int newSecondIndex = secondIndex;\n    if (firstIndex == -1) {\n      newFirstIndex = i;\n    } else if (secondIndex == -1) {\n      newSecondIndex = i;\n    } else if (nums[i] - nums[lastPickedIndex] <\n               nums[secondIndex] - nums[firstIndex]) {\n      newFirstIndex = lastPickedIndex;\n      newSecondIndex = i;\n    }\n    const int pick =\n        sumOfPowers(nums, i + 1, k - 1, i, newFirstIndex, newSecondIndex, mem);\n    const int skip = sumOfPowers(nums, i + 1, k, lastPickedIndex, firstIndex,\n                                 secondIndex, mem);\n    return mem[a][b][c][k] = (pick + skip) % kMod;\n  }\n\n  constexpr int hash(int x) {\n    return x + 1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int sumOfPowers(int[] nums, int k) {\n    final int n = nums.length;\n    Arrays.sort(nums);\n    Integer[][][][] mem = new Integer[n + 1][n + 1][n + 1][k + 1];\n    return sumOfPowers(nums, 0, k, -1, -1, -1, mem);\n  }\n\n  private static final int kMod = 1_000_000_007;\n\n  // Returns the sum of powers of all subsequences of nums[i..n) which\n  // have length equal to k, where `lastPickedIndex` is the index of the last\n  // picked number and nums[secondIndex] - nums[firstIndex] is the minimum power\n  // so far.\n  private int sumOfPowers(int[] nums, int i, int k, int lastPickedIndex, int firstIndex,\n                          int secondIndex, Integer[][][][] mem) {\n    if (k == 0)\n      return nums[secondIndex] - nums[firstIndex];\n    if (i == nums.length)\n      return 0;\n    final int a = hash(lastPickedIndex);\n    final int b = hash(firstIndex);\n    final int c = hash(secondIndex);\n    if (mem[a][b][c][k] != null)\n      return mem[a][b][c][k];\n    int newFirstIndex = firstIndex;\n    int newSecondIndex = secondIndex;\n    if (firstIndex == -1) {\n      newFirstIndex = i;\n    } else if (secondIndex == -1) {\n      newSecondIndex = i;\n    } else if (nums[i] - nums[lastPickedIndex] < nums[secondIndex] - nums[firstIndex]) {\n      newFirstIndex = lastPickedIndex;\n      newSecondIndex = i;\n    }\n    final int pick = sumOfPowers(nums, i + 1, k - 1, i, newFirstIndex, newSecondIndex, mem);\n    final int skip = sumOfPowers(nums, i + 1, k, lastPickedIndex, firstIndex, secondIndex, mem);\n    return mem[a][b][c][k] = (pick + skip) % kMod;\n  }\n\n  private int hash(int x) {\n    return x + 1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sumOfPowers(self, nums: List[int], k: int) -> int:\n    kMod = 1_000_000_007\n    nums.sort()\n\n    @functools.lru_cache(None)\n    def dp(i: int, k: int, lastPickedIndex: int, firstIndex: int, secondIndex: int) -> int:\n      if k == 0:\n        return nums[secondIndex] - nums[firstIndex]\n      if i == len(nums):\n        return 0\n      newFirstIndex = firstIndex\n      newSecondIndex = secondIndex\n      if firstIndex == -1:\n        newFirstIndex = i\n      elif secondIndex == -1:\n        newSecondIndex = i\n      elif nums[i] - nums[lastPickedIndex] < nums[secondIndex] - nums[firstIndex]:\n        newFirstIndex = lastPickedIndex\n        newSecondIndex = i\n      pick = dp(i + 1, k - 1, i, newFirstIndex, newSecondIndex)\n      skip = dp(i + 1, k, lastPickedIndex, firstIndex, secondIndex)\n      return (pick + skip) % kMod\n\n    return dp(0, k, -1, -1, -1)\n",
                "lang_text": "py"
            }
        }
    }
}