{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3082",
            "title": "Find the Sum of the Power of All Subsequences",
            "titleSlug": "find-the-sum-of-the-power-of-all-subsequences",
            "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code> and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>The <strong>power</strong> of an array of integers is defined as the number of <span data-keyword=\"subsequence-array\">subsequences</span> with their sum <strong>equal</strong> to <code>k</code>.</p>\n\n<p>Return <em>the <strong>sum</strong> of <strong>power</strong> of all subsequences of</em> <code>nums</code><em>.</em></p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> nums = [1,2,3], k = 3 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 6 </span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are <code>5</code> subsequences of nums with non-zero power:</p>\n\n<ul>\n\t<li>The subsequence <code>[<u><strong>1</strong></u>,<u><strong>2</strong></u>,<u><strong>3</strong></u>]</code> has <code>2</code> subsequences with <code>sum == 3</code>: <code>[1,2,<u>3</u>]</code> and <code>[<u>1</u>,<u>2</u>,3]</code>.</li>\n\t<li>The subsequence <code>[<u><strong>1</strong></u>,2,<u><strong>3</strong></u>]</code> has <code>1</code> subsequence with <code>sum == 3</code>: <code>[1,2,<u>3</u>]</code>.</li>\n\t<li>The subsequence <code>[1,<u><strong>2</strong></u>,<u><strong>3</strong></u>]</code> has <code>1</code> subsequence with <code>sum == 3</code>: <code>[1,2,<u>3</u>]</code>.</li>\n\t<li>The subsequence <code>[<u><strong>1</strong></u>,<u><strong>2</strong></u>,3]</code> has <code>1</code> subsequence with <code>sum == 3</code>: <code>[<u>1</u>,<u>2</u>,3]</code>.</li>\n\t<li>The subsequence <code>[1,2,<u><strong>3</strong></u>]</code> has <code>1</code> subsequence with <code>sum == 3</code>: <code>[1,2,<u>3</u>]</code>.</li>\n</ul>\n\n<p>Hence the answer is <code>2 + 1 + 1 + 1 + 1 = 6</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> nums = [2,3,3], k = 5 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 4 </span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are <code>3</code> subsequences of nums with non-zero power:</p>\n\n<ul>\n\t<li>The subsequence <code>[<u><strong>2</strong></u>,<u><strong>3</strong></u>,<u><strong>3</strong></u>]</code> has 2 subsequences with <code>sum == 5</code>: <code>[<u>2</u>,3,<u>3</u>]</code> and <code>[<u>2</u>,<u>3</u>,3]</code>.</li>\n\t<li>The subsequence <code>[<u><strong>2</strong></u>,3,<u><strong>3</strong></u>]</code> has 1 subsequence with <code>sum == 5</code>: <code>[<u>2</u>,3,<u>3</u>]</code>.</li>\n\t<li>The subsequence <code>[<u><strong>2</strong></u>,<u><strong>3</strong></u>,3]</code> has 1 subsequence with <code>sum == 5</code>: <code>[<u>2</u>,<u>3</u>,3]</code>.</li>\n</ul>\n\n<p>Hence the answer is <code>2 + 1 + 1 = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> nums = [1,2,3], k = 7 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 0 </span></p>\n\n<p><strong>Explanation:&nbsp;</strong>There exists no subsequence with sum <code>7</code>. Hence all subsequences of nums have <code>power = 0</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 127,
            "dislikes": 1,
            "similarQuestions": "[{\"title\": \"Number of Subsequences That Satisfy the Given Sum Condition\", \"titleSlug\": \"number-of-subsequences-that-satisfy-the-given-sum-condition\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.6K\", \"totalSubmission\": \"17.2K\", \"totalAcceptedRaw\": 6598, \"totalSubmissionRaw\": 17181, \"acRate\": \"38.4%\"}",
            "hints": [
                "If there is a subsequence of length <code>j</code> with the sum of elements <code>k</code>, it contributes <code>2<sup>n - j</sup></code> to the answer.",
                "Let <code>dp[i][j]</code> represent the number of subsequences in the subarray <code>nums[0..i]</code> which have a sum of <code>j</code>.",
                "We can find the <code>dp[i][k]</code> for all <code>0 <= i <= n-1</code> and multiply them with <code>2<sup>n - j</sup></code> to get final answer."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` of length `n` and a positive integer `k`, the power of an array of integers is defined as the number of subsequences with their sum equal to `k`.  Return the sum of the powers of all subsequences of `nums`, modulo `10^9 + 7`.",
                "constraints": [
                    "1 <= n <= 100",
                    "1 <= nums[i] <= 10^4",
                    "1 <= k <= 100"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3], k = 3",
                        "output": "6",
                        "explanation": "Consider all possible subsequences. The subsequences [1,2,3], [1,2], [1,3], [2,3] and [3] are selected. [1,2,3] has 2 subsequences that sum to 3: [1,2] and [3]. [1,2] has 1 subsequence [1,2] that sum to 3: [1,2]. [1,3] has 1 subsequence [3] that sum to 3: [3]. [2,3] has 1 subsequence [3] that sum to 3: [3]. Finally [3] has 1 subsequence [3] that sum to 3: [3]. Hence total is 2 + 1 + 1 + 1 + 1 = 6."
                    },
                    {
                        "input": "nums = [2,3,3], k = 5",
                        "output": "4",
                        "explanation": "Consider all possible subsequences. The subsequences [2,3,3], [2,3], [2,3] and [3] are selected. [2,3,3] has 2 subsequences that sum to 5: [2,3] and [2,3]. [2,3] has 1 subsequence [2,3] that sum to 5: [2,3]. [2,3] has 1 subsequence [2,3] that sum to 5: [2,3]. Hence total is 2 + 1 + 1 = 4."
                    },
                    {
                        "input": "nums = [1,2,3], k = 7",
                        "output": "0",
                        "explanation": "No subsequence sums to 7, so the result is 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
                "title": "Number of Subsequences That Satisfy the Given Sum Condition",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If there is a subsequence of length <code>j</code> with the sum of elements <code>k</code>, it contributes <code>2<sup>n - j</sup></code> to the answer.",
            "Let <code>dp[i][j]</code> represent the number of subsequences in the subarray <code>nums[0..i]</code> which have a sum of <code>j</code>.",
            "We can find the <code>dp[i][k]</code> for all <code>0 <= i <= n-1</code> and multiply them with <code>2<sup>n - j</sup></code> to get final answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int sumOfPower(vector<int>& nums, int k) {\n    vector<vector<int>> mem(nums.size(), vector<int>(k + 1, -1));\n    return sumOfPower(nums, 0, k, mem);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n\n  // Returns the number of subsequences in nums[i..n) that sums to j.\n  int sumOfPower(const vector<int>& nums, int i, int j,\n                 vector<vector<int>>& mem) {\n    if (j == 0)\n      // For each of the remaining number, we can either pick it or skip it.\n      return modPow(2, nums.size() - i);\n    if (i == nums.size() || j < 0)\n      return 0;\n    if (mem[i][j] != -1)\n      return mem[i][j];\n    // Case 1: Include nums[i] in the subsequence and pick it.\n    // Case 2: Include nums[i] in the subsequence and skip it.\n    // Case 3: Exclude nums[i] in the subsequence.\n    return mem[i][j] = (sumOfPower(nums, i + 1, j - nums[i], mem) +\n                        2L * sumOfPower(nums, i + 1, j, mem)) %\n                       kMod;\n  }\n\n  long modPow(long x, long n) {\n    if (n == 0)\n      return 1;\n    if (n % 2 == 1)\n      return x * modPow(x % kMod, (n - 1)) % kMod;\n    return modPow(x * x % kMod, (n / 2)) % kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int sumOfPower(int[] nums, int k) {\n    Integer[][] mem = new Integer[nums.length][k + 1];\n    return sumOfPower(nums, 0, k, mem);\n  }\n\n  private static final int kMod = 1_000_000_007;\n\n  // Returns the number of subsequences in nums[i..n) that sums to j.\n  private int sumOfPower(int[] nums, int i, int j, Integer[][] mem) {\n    if (j == 0)\n      // For each of the remaining number, we can either pick it or skip it.\n      return (int) modPow(2, nums.length - i);\n    if (i == nums.length || j < 0)\n      return 0;\n    if (mem[i][j] != null)\n      return mem[i][j];\n    // Case 1: Include nums[i] in the subsequence and pick it.\n    // Case 2: Include nums[i] in the subsequence and skip it.\n    // Case 3: Exclude nums[i] in the subsequence.\n    return mem[i][j] = (int) ((sumOfPower(nums, i + 1, j - nums[i], mem) + //\n                               2L * sumOfPower(nums, i + 1, j, mem)) %\n                              kMod);\n  }\n\n  private long modPow(long x, long n) {\n    if (n == 0)\n      return 1;\n    if (n % 2 == 1)\n      return x * modPow(x % kMod, (n - 1)) % kMod;\n    return modPow(x * x % kMod, (n / 2)) % kMod;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sumOfPower(self, nums: List[int], k: int) -> int:\n    kMod = 1_000_000_007\n\n    @functools.lru_cache(None)\n    def dp(i: int, j: int) -> int:\n      \"\"\"Returns the number of subsequences in nums[i..n) that sums to j.\"\"\"\n      if j == 0:\n        # For each of the remaining number, we can either pick it or skip it.\n        return pow(2, len(nums) - i, kMod)\n      if i == len(nums) or j < 0:\n        return 0\n        # Case 1: Include nums[i] in the subsequence and pick it.\n        # Case 2: Include nums[i] in the subsequence and skip it.\n        # Case 3: Exclude nums[i] in the subsequence.\n      return (dp(i + 1, j - nums[i]) + 2 * dp(i + 1, j)) % kMod\n\n    return dp(0, k)\n",
                "lang_text": "py"
            }
        }
    }
}