{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2639",
            "title": "Find the Width of Columns of a Grid",
            "titleSlug": "find-the-width-of-columns-of-a-grid",
            "content": "<p>You are given a <strong>0-indexed</strong> <code>m x n</code> integer matrix <code>grid</code>. The width of a column is the maximum <strong>length </strong>of its integers.</p>\n\n<ul>\n\t<li>For example, if <code>grid = [[-10], [3], [12]]</code>, the width of the only column is <code>3</code> since <code>-10</code> is of length <code>3</code>.</li>\n</ul>\n\n<p>Return <em>an integer array</em> <code>ans</code> <em>of size</em> <code>n</code> <em>where</em> <code>ans[i]</code> <em>is the width of the</em> <code>i<sup>th</sup></code> <em>column</em>.</p>\n\n<p>The <strong>length</strong> of an integer <code>x</code> with <code>len</code> digits is equal to <code>len</code> if <code>x</code> is non-negative, and <code>len + 1</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1],[22],[333]]\n<strong>Output:</strong> [3]\n<strong>Explanation:</strong> In the 0<sup>th</sup> column, 333 is of length 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[-15,1,3],[15,7,12],[5,6,-2]]\n<strong>Output:</strong> [3,1,2]\n<strong>Explanation:</strong> \nIn the 0<sup>th</sup> column, only -15 is of length 3.\nIn the 1<sup>st</sup> column, all integers are of length 1. \nIn the 2<sup>nd</sup> column, both 12 and -2 are of length 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100 </code></li>\n\t<li><code>-10<sup>9</sup> &lt;= grid[r][c] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 153,
            "dislikes": 31,
            "similarQuestions": "[{\"title\": \"Next Greater Numerically Balanced Number\", \"titleSlug\": \"next-greater-numerically-balanced-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.7K\", \"totalSubmission\": \"35.8K\", \"totalAcceptedRaw\": 23689, \"totalSubmissionRaw\": 35758, \"acRate\": \"66.2%\"}",
            "hints": [
                "You can find the length of a number by dividing it by 10 and then rounding it down again and again until this number becomes equal to 0. Add 1 if this number is negative.",
                "Traverse the matrix column-wise to find the maximum length in each column."
            ],
            "rephrased": {
                "body": "Given a 0-indexed m x n integer matrix `grid`, determine the width of each column. The width of a column is defined as the maximum length of its integers, where the length of an integer `x` is the number of digits it contains. Negative numbers include the negative sign in the length calculation.\n\nReturn an integer array `ans` of size `n` where `ans[i]` is the width of the i-th column.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 100",
                    "-10<sup>9</sup> <= grid[r][c] <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "[[1],[22],[333]]",
                        "output": "[3]",
                        "explanation": "The 0th column has values 1, 22, and 333. The maximum length among these is 3 (from 333)."
                    },
                    {
                        "input": "[[-15,1,3],[15,7,12],[5,6,-2]]",
                        "output": "[3,1,2]",
                        "explanation": "The 0th column has values -15, 15, and 5. The maximum length among these is 3 (from -15). The 1st column has values 1, 7, and 6. The maximum length among these is 1. The 2nd column has values 3, 12, and -2. The maximum length among these is 2 (from 12 and -2)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "next-greater-numerically-balanced-number",
                "title": "Next Greater Numerically Balanced Number",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "You can find the length of a number by dividing it by 10 and then rounding it down again and again until this number becomes equal to 0. Add 1 if this number is negative.",
            "Traverse the matrix column-wise to find the maximum length in each column."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findColumnWidth(vector<vector<int>>& grid) {\n    vector<int> ans;\n\n    for (int j = 0; j < grid[0].size(); ++j) {\n      ans.push_back(0);\n      for (int i = 0; i < grid.size(); ++i)\n        ans[j] = max(ans[j], static_cast<int>(to_string(grid[i][j]).length()));\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] findColumnWidth(int[][] grid) {\n    int[] ans = new int[grid[0].length];\n\n    for (int j = 0; j < grid[0].length; ++j) {\n      ans[j] = 0;\n      for (int i = 0; i < grid.length; ++i)\n        ans[j] = Math.max(ans[j], String.valueOf(grid[i][j]).length());\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\n    return [max(map(len, map(str, col))) for col in zip(*grid)]\n",
                "lang_text": "py"
            }
        }
    }
}