{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3158",
            "title": "Find the XOR of Numbers Which Appear Twice",
            "titleSlug": "find-the-xor-of-numbers-which-appear-twice",
            "content": "<p>You are given an array <code>nums</code>, where each number in the array appears <strong>either</strong><em> </em>once<em> </em>or<em> </em>twice.</p>\n\n<p>Return the bitwise<em> </em><code>XOR</code> of all the numbers that appear twice in the array, or 0 if no number appears twice.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,1,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only number that appears twice in&nbsp;<code>nums</code>&nbsp;is 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>No number appears twice in&nbsp;<code>nums</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,2,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Numbers 1 and 2 appeared twice. <code>1 XOR 2 == 3</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n\t<li>Each number in <code>nums</code> appears either once or twice.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 70,
            "dislikes": 5,
            "similarQuestions": "[{\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Single Number II\", \"titleSlug\": \"single-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Single Number III\", \"titleSlug\": \"single-number-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"37.9K\", \"totalSubmission\": \"45.5K\", \"totalAcceptedRaw\": 37895, \"totalSubmissionRaw\": 45513, \"acRate\": \"83.3%\"}",
            "hints": [
                "The constraints are small. Brute force checking each value in the array."
            ],
            "rephrased": {
                "body": "Given an array `nums` where each number appears either once or twice, return the bitwise XOR of all numbers that appear twice. If no number appears twice, return 0.",
                "constraints": [
                    "1 <= nums.length <= 50",
                    "1 <= nums[i] <= 50",
                    "Each number in nums appears either once or twice."
                ],
                "testcases": [
                    {
                        "input": "[1,2,1,3]",
                        "output": "1",
                        "explanation": "The number 1 appears twice. The XOR of numbers appearing twice is 1."
                    },
                    {
                        "input": "[1,2,3]",
                        "output": "0",
                        "explanation": "No number appears twice, so the result is 0."
                    },
                    {
                        "input": "[1,2,2,1]",
                        "output": "3",
                        "explanation": "The numbers 1 and 2 each appear twice.  1 XOR 2 = 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "single-number",
                "title": "Single Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "single-number-ii",
                "title": "Single Number II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "single-number-iii",
                "title": "Single Number III",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The constraints are small. Brute force checking each value in the array."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int duplicateNumbersXOR(vector<int>& nums) {\n    constexpr int kMax = 50;\n    int ans = 0;\n    vector<int> count(kMax + 1);\n\n    for (const int num : nums)\n      ++count[num];\n\n    for (int num = 1; num <= kMax; ++num)\n      if (count[num] == 2)\n        ans ^= num;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int duplicateNumbersXOR(int[] nums) {\n    final int kMax = 50;\n    int ans = 0;\n    int[] count = new int[kMax + 1];\n\n    for (final int num : nums)\n      ++count[num];\n\n    for (int num = 1; num <= kMax; ++num)\n      if (count[num] == 2)\n        ans ^= num;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def duplicateNumbersXOR(self, nums):\n    count = collections.Counter(nums)\n    return functools.reduce(operator.xor,\n                            [num for num, freq in count.items() if freq == 2], 0)\n",
                "lang_text": "py"
            }
        }
    }
}