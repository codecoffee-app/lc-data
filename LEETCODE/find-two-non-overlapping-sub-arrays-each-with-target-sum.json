{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1477",
            "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
            "titleSlug": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
            "content": "<p>You are given an array of integers <code>arr</code> and an integer <code>target</code>.</p>\n\n<p>You have to find <strong>two non-overlapping sub-arrays</strong> of <code>arr</code> each with a sum equal <code>target</code>. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is <strong>minimum</strong>.</p>\n\n<p>Return <em>the minimum sum of the lengths</em> of the two required sub-arrays, or return <code>-1</code> if you cannot find such two sub-arrays.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,2,2,4,3], target = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [7,3,4,7], target = 7\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [4,3,2,6,2,3,4], target = 6\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> We have only one sub-array of sum = 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= target &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1656,
            "dislikes": 83,
            "similarQuestions": "[{\"title\": \"Find Subarrays With Equal Sum\", \"titleSlug\": \"find-subarrays-with-equal-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"46K\", \"totalSubmission\": \"125.8K\", \"totalAcceptedRaw\": 45984, \"totalSubmissionRaw\": 125794, \"acRate\": \"36.6%\"}",
            "hints": [
                "Let's create two arrays prefix and suffix where prefix[i] is the minimum length of sub-array ends before i and has sum = k, suffix[i] is the minimum length of sub-array starting at or after i and has sum = k.",
                "The answer we are searching for is min(prefix[i] + suffix[i]) for all values of i from 0 to n-1 where n == arr.length.",
                "If you are still stuck with how to build prefix and suffix, you can store for each index i the length of the sub-array starts at i and has sum = k or infinity otherwise, and you can use it to build both prefix and suffix."
            ],
            "rephrased": {
                "body": "Given an array of integers `arr` and an integer `target`, find two non-overlapping sub-arrays of `arr`, each with a sum equal to `target`.  The goal is to minimize the sum of the lengths of these two sub-arrays.\n\nReturn the minimum sum of the lengths of the two required sub-arrays. If it is impossible to find two such sub-arrays, return -1.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "1 <= arr[i] <= 1000",
                    "1 <= target <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "arr = [3,2,2,4,3], target = 3",
                        "output": "2",
                        "explanation": "The sub-arrays [3] and [3] both sum to 3 and are non-overlapping. The sum of their lengths is 1 + 1 = 2."
                    },
                    {
                        "input": "arr = [7,3,4,7], target = 7",
                        "output": "2",
                        "explanation": "The sub-arrays [7] and [7] are non-overlapping and sum to 7.  While [3, 4] also sums to 7, choosing [7] and [7] yields the minimum sum of lengths (1 + 1 = 2)."
                    },
                    {
                        "input": "arr = [4,3,2,6,2,3,4], target = 6",
                        "output": "-1",
                        "explanation": "Only one sub-array [6] has a sum of 6, therefore it is not possible to find two non-overlapping sub-arrays summing to 6, and -1 should be returned."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "find-subarrays-with-equal-sum",
                "title": "Find Subarrays With Equal Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let's create two arrays prefix and suffix where prefix[i] is the minimum length of sub-array ends before i and has sum = k, suffix[i] is the minimum length of sub-array starting at or after i and has sum = k.",
            "The answer we are searching for is min(prefix[i] + suffix[i]) for all values of i from 0 to n-1 where n == arr.length.",
            "If you are still stuck with how to build prefix and suffix, you can store for each index i the length of the sub-array starts at i and has sum = k or infinity otherwise, and you can use it to build both prefix and suffix."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ]
    }
}