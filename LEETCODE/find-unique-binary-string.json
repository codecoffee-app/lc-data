{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1980",
            "title": "Find Unique Binary String",
            "titleSlug": "find-unique-binary-string",
            "content": "<p>Given an array of strings <code>nums</code> containing <code>n</code> <strong>unique</strong> binary strings each of length <code>n</code>, return <em>a binary string of length </em><code>n</code><em> that <strong>does not appear</strong> in </em><code>nums</code><em>. If there are multiple answers, you may return <strong>any</strong> of them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [&quot;01&quot;,&quot;10&quot;]\n<strong>Output:</strong> &quot;11&quot;\n<strong>Explanation:</strong> &quot;11&quot; does not appear in nums. &quot;00&quot; would also be correct.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [&quot;00&quot;,&quot;01&quot;]\n<strong>Output:</strong> &quot;11&quot;\n<strong>Explanation:</strong> &quot;11&quot; does not appear in nums. &quot;10&quot; would also be correct.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [&quot;111&quot;,&quot;011&quot;,&quot;001&quot;]\n<strong>Output:</strong> &quot;101&quot;\n<strong>Explanation:</strong> &quot;101&quot; does not appear in nums. &quot;000&quot;, &quot;010&quot;, &quot;100&quot;, and &quot;110&quot; would also be correct.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 16</code></li>\n\t<li><code>nums[i].length == n</code></li>\n\t<li><code>nums[i] </code>is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li>All the strings of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1894,
            "dislikes": 67,
            "similarQuestions": "[{\"title\": \"Missing Number\", \"titleSlug\": \"missing-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find All Numbers Disappeared in an Array\", \"titleSlug\": \"find-all-numbers-disappeared-in-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Random Pick with Blacklist\", \"titleSlug\": \"random-pick-with-blacklist\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"125.7K\", \"totalSubmission\": \"168.9K\", \"totalAcceptedRaw\": 125685, \"totalSubmissionRaw\": 168896, \"acRate\": \"74.4%\"}",
            "hints": [
                "We can convert the given strings into base 10 integers.",
                "Can we use recursion to generate all possible strings?"
            ],
            "rephrased": {
                "body": "Given an array of unique binary strings `nums`, each of length `n`, find a binary string of length `n` that is not present in `nums`. You can return any valid solution if multiple exist.",
                "constraints": [
                    "n == nums.length",
                    "1 <= n <= 16",
                    "nums[i].length == n",
                    "nums[i] is either '0' or '1'.",
                    "All the strings of nums are unique."
                ],
                "testcases": [
                    {
                        "input": "[\"01\",\"10\"]",
                        "output": "\"11\"",
                        "explanation": "\"11\" is not present in nums. \"00\" is also a valid output."
                    },
                    {
                        "input": "[\"00\",\"01\"]",
                        "output": "\"11\"",
                        "explanation": "\"11\" is not present in nums. \"10\" is also a valid output."
                    },
                    {
                        "input": "[\"111\",\"011\",\"001\"]",
                        "output": "\"101\"",
                        "explanation": "\"101\" is not present in nums. \"000\", \"010\", \"100\", and \"110\" are also valid outputs."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "missing-number",
                "title": "Missing Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-all-numbers-disappeared-in-an-array",
                "title": "Find All Numbers Disappeared in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "random-pick-with-blacklist",
                "title": "Random Pick with Blacklist",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We can convert the given strings into base 10 integers.",
            "Can we use recursion to generate all possible strings?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string findDifferentBinaryString(vector<string>& nums) {\n    const int bitSize = nums[0].length();\n    const int maxNum = 1 << bitSize;\n    unordered_set<int> numsSet;\n\n    for (const string& num : nums)\n      numsSet.insert(stoi(num, nullptr, 2));\n\n    for (int num = 0; num < maxNum; ++num)\n      if (!numsSet.count(num))\n        return std::bitset<16>(num).to_string().substr(16 - bitSize);\n\n    throw;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String findDifferentBinaryString(String[] nums) {\n    final int bitSize = nums[0].length();\n    final int maxNum = 1 << bitSize;\n    Set<Integer> numsSet = Arrays.stream(nums)\n                               .mapToInt(num -> Integer.parseInt(num, 2))\n                               .boxed()\n                               .collect(Collectors.toSet());\n\n    for (int num = 0; num < maxNum; ++num)\n      if (!numsSet.contains(num))\n        return String.format(\"%\" + bitSize + \"s\", Integer.toBinaryString(num)).replace(' ', '0');\n\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findDifferentBinaryString(self, nums: List[str]) -> str:\n    bitSize = len(nums[0])\n    maxNum = 1 << bitSize\n    numsSet = {int(num, 2) for num in nums}\n\n    for num in range(maxNum):\n      if num not in numsSet:\n        return f'{num:0>{bitSize}b}'\n",
                "lang_text": "py"
            }
        }
    }
}