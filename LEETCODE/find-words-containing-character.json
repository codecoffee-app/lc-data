{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2942",
            "title": "Find Words Containing Character",
            "titleSlug": "find-words-containing-character",
            "content": "<p>You are given a <strong>0-indexed</strong> array of strings <code>words</code> and a character <code>x</code>.</p>\n\n<p>Return <em>an <strong>array of indices</strong> representing the words that contain the character </em><code>x</code>.</p>\n\n<p><strong>Note</strong> that the returned array may be in <strong>any</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;leet&quot;,&quot;code&quot;], x = &quot;e&quot;\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> &quot;e&quot; occurs in both words: &quot;l<strong><u>ee</u></strong>t&quot;, and &quot;cod<u><strong>e</strong></u>&quot;. Hence, we return indices 0 and 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abc&quot;,&quot;bcd&quot;,&quot;aaaa&quot;,&quot;cbc&quot;], x = &quot;a&quot;\n<strong>Output:</strong> [0,2]\n<strong>Explanation:</strong> &quot;a&quot; occurs in &quot;<strong><u>a</u></strong>bc&quot;, and &quot;<u><strong>aaaa</strong></u>&quot;. Hence, we return indices 0 and 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abc&quot;,&quot;bcd&quot;,&quot;aaaa&quot;,&quot;cbc&quot;], x = &quot;z&quot;\n<strong>Output:</strong> []\n<strong>Explanation:</strong> &quot;z&quot; does not occur in any of the words. Hence, we return an empty array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 50</code></li>\n\t<li><code>x</code> is a lowercase English letter.</li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 309,
            "dislikes": 24,
            "similarQuestions": "[{\"title\": \"Find Target Indices After Sorting Array\", \"titleSlug\": \"find-target-indices-after-sorting-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"124.3K\", \"totalSubmission\": \"140.4K\", \"totalAcceptedRaw\": 124262, \"totalSubmissionRaw\": 140412, \"acRate\": \"88.5%\"}",
            "hints": [
                "Use two nested loops."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array of strings `words` and a character `x`, return an array of indices representing the words that contain the character `x`. The returned array may be in any order.",
                "constraints": [
                    "1 <= words.length <= 50",
                    "1 <= words[i].length <= 50",
                    "x is a lowercase English letter.",
                    "words[i] consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": {
                            "words": [
                                "leet",
                                "code"
                            ],
                            "x": "e"
                        },
                        "output": [
                            0,
                            1
                        ],
                        "explanation": "The character 'e' is present in both 'leet' at index 0 and 'code' at index 1."
                    },
                    {
                        "input": {
                            "words": [
                                "abc",
                                "bcd",
                                "aaaa",
                                "cbc"
                            ],
                            "x": "a"
                        },
                        "output": [
                            0,
                            2
                        ],
                        "explanation": "The character 'a' is present in 'abc' at index 0 and 'aaaa' at index 2."
                    },
                    {
                        "input": {
                            "words": [
                                "abc",
                                "bcd",
                                "aaaa",
                                "cbc"
                            ],
                            "x": "z"
                        },
                        "output": [],
                        "explanation": "The character 'z' is not present in any of the words."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "find-target-indices-after-sorting-array",
                "title": "Find Target Indices After Sorting Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use two nested loops."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findWordsContaining(vector<string>& words, char x) {\n    vector<int> ans;\n\n    for (int i = 0; i < words.size(); ++i)\n      if (words[i].find(x) != string::npos)\n        ans.push_back(i);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}