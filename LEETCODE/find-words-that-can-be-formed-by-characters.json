{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1160",
            "title": "Find Words That Can Be Formed by Characters",
            "titleSlug": "find-words-that-can-be-formed-by-characters",
            "content": "<p>You are given an array of strings <code>words</code> and a string <code>chars</code>.</p>\n\n<p>A string is <strong>good</strong> if it can be formed by characters from <code>chars</code> (each character can only be used once).</p>\n\n<p>Return <em>the sum of lengths of all good strings in words</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;cat&quot;,&quot;bt&quot;,&quot;hat&quot;,&quot;tree&quot;], chars = &quot;atach&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The strings that can be formed are &quot;cat&quot; and &quot;hat&quot; so the answer is 3 + 3 = 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;hello&quot;,&quot;world&quot;,&quot;leetcode&quot;], chars = &quot;welldonehoneyr&quot;\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The strings that can be formed are &quot;hello&quot; and &quot;world&quot; so the answer is 5 + 5 = 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length, chars.length &lt;= 100</code></li>\n\t<li><code>words[i]</code> and <code>chars</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2034,
            "dislikes": 178,
            "similarQuestions": "[{\"title\": \"Rearrange Characters to Make Target String\", \"titleSlug\": \"rearrange-characters-to-make-target-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"242.8K\", \"totalSubmission\": \"342.8K\", \"totalAcceptedRaw\": 242759, \"totalSubmissionRaw\": 342792, \"acRate\": \"70.8%\"}",
            "hints": [
                "Solve the problem for each string in <code>words</code> independently.",
                "Now try to think in frequency of letters.",
                "Count how many times each character occurs in string <code>chars</code>.",
                "To form a string using characters from <code>chars</code>, the frequency of each character in <code>chars</code> must be greater than or equal the frequency of that character in the string to be formed."
            ],
            "rephrased": {
                "body": "Given an array of strings `words` and a string `chars`, determine which strings in `words` are 'good'. A string is considered 'good' if it can be formed using characters from `chars`, where each character in `chars` can only be used once. Return the sum of the lengths of all 'good' strings in `words`.",
                "constraints": [
                    "1 <= words.length <= 1000",
                    "1 <= words[i].length, chars.length <= 100",
                    "words[i] and chars consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"",
                        "output": "6",
                        "explanation": "The strings \"cat\" and \"hat\" can be formed using the characters in \"atach\". Their lengths are 3 and 3, respectively, so the total is 3 + 3 = 6."
                    },
                    {
                        "input": "words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"",
                        "output": "10",
                        "explanation": "The strings \"hello\" and \"world\" can be formed using the characters in \"welldonehoneyr\". Their lengths are 5 and 5, respectively, so the total is 5 + 5 = 10."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "rearrange-characters-to-make-target-string",
                "title": "Rearrange Characters to Make Target String",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Solve the problem for each string in <code>words</code> independently.",
            "Now try to think in frequency of letters.",
            "Count how many times each character occurs in string <code>chars</code>.",
            "To form a string using characters from <code>chars</code>, the frequency of each character in <code>chars</code> must be greater than or equal the frequency of that character in the string to be formed."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countCharacters(vector<string>& words, string chars) {\n    int ans = 0;\n    vector<int> count(26);\n\n    for (const char c : chars)\n      ++count[c - 'a'];\n\n    for (const string& word : words) {\n      vector<int> tempCount(count);\n      for (const char c : word)\n        if (--tempCount[c - 'a'] < 0) {\n          ans -= word.length();\n          break;\n        }\n      ans += word.length();\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countCharacters(String[] words, String chars) {\n    int ans = 0;\n    int[] count = new int[26];\n\n    for (final char c : chars.toCharArray())\n      ++count[c - 'a'];\n\n    for (final String word : words) {\n      int[] tempCount = count.clone();\n      for (final char c : word.toCharArray())\n        if (--tempCount[c - 'a'] < 0) {\n          ans -= word.length();\n          break;\n        }\n      ans += word.length();\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countCharacters(self, words: List[str], chars: str) -> int:\n    ans = 0\n    count = collections.Counter(chars)\n\n    for word in words:\n      tempCount = count.copy()\n      for c in word:\n        tempCount[c] -= 1\n        if tempCount[c] < 0:\n          ans -= len(word)\n          break\n      ans += len(word)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}