{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3321",
            "title": "Find X-Sum of All K-Long Subarrays II",
            "titleSlug": "find-x-sum-of-all-k-long-subarrays-ii",
            "content": "<p>You are given an array <code>nums</code> of <code>n</code> integers and two integers <code>k</code> and <code>x</code>.</p>\n\n<p>The <strong>x-sum</strong> of an array is calculated by the following procedure:</p>\n\n<ul>\n\t<li>Count the occurrences of all elements in the array.</li>\n\t<li>Keep only the occurrences of the top <code>x</code> most frequent elements. If two elements have the same number of occurrences, the element with the <strong>bigger</strong> value is considered more frequent.</li>\n\t<li>Calculate the sum of the resulting array.</li>\n</ul>\n\n<p><strong>Note</strong> that if an array has less than <code>x</code> distinct elements, its <strong>x-sum</strong> is the sum of the array.</p>\n\n<p>Return an integer array <code>answer</code> of length <code>n - k + 1</code> where <code>answer[i]</code> is the <strong>x-sum</strong> of the <span data-keyword=\"subarray-nonempty\">subarray</span> <code>nums[i..i + k - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,1,2,2,3,4,2,3], k = 6, x = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[6,10,12]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>For subarray <code>[1, 1, 2, 2, 3, 4]</code>, only elements 1 and 2 will be kept in the resulting array. Hence, <code>answer[0] = 1 + 1 + 2 + 2</code>.</li>\n\t<li>For subarray <code>[1, 2, 2, 3, 4, 2]</code>, only elements 2 and 4 will be kept in the resulting array. Hence, <code>answer[1] = 2 + 2 + 2 + 4</code>. Note that 4 is kept in the array since it is bigger than 3 and 1 which occur the same number of times.</li>\n\t<li>For subarray <code>[2, 2, 3, 4, 2, 3]</code>, only elements 2 and 3 are kept in the resulting array. Hence, <code>answer[2] = 2 + 2 + 2 + 3 + 3</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,8,7,8,7,5], k = 2, x = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[11,15,15,15,12]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Since <code>k == x</code>, <code>answer[i]</code> is equal to the sum of the subarray <code>nums[i..i + k - 1]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= x &lt;= k &lt;= nums.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 64,
            "dislikes": 4,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.1K\", \"totalSubmission\": \"21.3K\", \"totalAcceptedRaw\": 3077, \"totalSubmissionRaw\": 21301, \"acRate\": \"14.4%\"}",
            "hints": [
                "Use sliding window.",
                "Use two sets ordered by frequency. One of the sets will only contain the top <code>x</code> frequent elements, and the second will contain all other elements.",
                "Update the two sets whenever you slide the window, and maintain a sum of the elements in the set with <code>x</code> elements"
            ],
            "rephrased": {
                "body": "Given an array `nums` of `n` integers and two integers `k` and `x`, calculate the x-sum of each subarray of size `k`. The x-sum of an array is determined by counting the occurrences of each element, keeping only the occurrences of the top `x` most frequent elements (with larger values prioritized in case of ties), and summing the resulting array.  If an array has fewer than `x` distinct elements, its x-sum is simply the sum of the entire array.\n\nReturn an integer array `answer` of length `n - k + 1`, where `answer[i]` is the x-sum of the subarray `nums[i..i + k - 1]`.",
                "constraints": [
                    "nums.length == n",
                    "1 <= n <= 10^5",
                    "1 <= nums[i] <= 10^9",
                    "1 <= x <= k <= nums.length"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,1,2,2,3,4,2,3], k = 6, x = 2",
                        "output": "[6,10,12]",
                        "explanation": "For subarray [1, 1, 2, 2, 3, 4], the x-sum is calculated by only keeping elements 1 and 2, resulting in a sum of 1 + 1 + 2 + 2 = 6.\nFor subarray [1, 2, 2, 3, 4, 2], the x-sum is calculated by only keeping elements 2 and 4, resulting in a sum of 2 + 2 + 2 + 4 = 10.  Note that 4 is included because it's larger than 3 and 1, despite having the same occurrence count.\nFor subarray [2, 2, 3, 4, 2, 3], the x-sum is calculated by only keeping elements 2 and 3, resulting in a sum of 2 + 2 + 2 + 3 + 3 = 12."
                    },
                    {
                        "input": "nums = [3,8,7,8,7,5], k = 2, x = 2",
                        "output": "[11,15,15,15,12]",
                        "explanation": "Since k == x, the x-sum of each subarray is simply the sum of the elements in that subarray."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use sliding window.",
            "Use two sets ordered by frequency. One of the sets will only contain the top <code>x</code> frequent elements, and the second will contain all other elements.",
            "Update the two sets whenever you slide the window, and maintain a sum of the elements in the set with <code>x</code> elements"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ]
    }
}