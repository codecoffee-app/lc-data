{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1835",
            "title": "Find XOR Sum of All Pairs Bitwise AND",
            "titleSlug": "find-xor-sum-of-all-pairs-bitwise-and",
            "content": "<p>The <strong>XOR sum</strong> of a list is the bitwise <code>XOR</code> of all its elements. If the list only contains one element, then its <strong>XOR sum</strong> will be equal to this element.</p>\n\n<ul>\n\t<li>For example, the <strong>XOR sum</strong> of <code>[1,2,3,4]</code> is equal to <code>1 XOR 2 XOR 3 XOR 4 = 4</code>, and the <strong>XOR sum</strong> of <code>[3]</code> is equal to <code>3</code>.</li>\n</ul>\n\n<p>You are given two <strong>0-indexed</strong> arrays <code>arr1</code> and <code>arr2</code> that consist only of non-negative integers.</p>\n\n<p>Consider the list containing the result of <code>arr1[i] AND arr2[j]</code> (bitwise <code>AND</code>) for every <code>(i, j)</code> pair where <code>0 &lt;= i &lt; arr1.length</code> and <code>0 &lt;= j &lt; arr2.length</code>.</p>\n\n<p>Return <em>the <strong>XOR sum</strong> of the aforementioned list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,2,3], arr2 = [6,5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].\nThe XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [12], arr2 = [4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The list = [12 AND 4] = [4]. The XOR sum = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr1.length, arr2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= arr1[i], arr2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 573,
            "dislikes": 46,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"17.8K\", \"totalSubmission\": \"29.2K\", \"totalAcceptedRaw\": 17812, \"totalSubmissionRaw\": 29184, \"acRate\": \"61.0%\"}",
            "hints": [
                "Think about (a&b) ^ (a&c). Can you simplify this expression?",
                "It is equal to a&(b^c). Then, (arr1[i]&arr2[0])^(arr1[i]&arr2[1]).. = arr1[i]&(arr2[0]^arr2[1]^arr[2]...).",
                "Let arr2XorSum = (arr2[0]^arr2[1]^arr2[2]...), arr1XorSum = (arr1[0]^arr1[1]^arr1[2]...) so the final answer is (arr2XorSum&arr1[0]) ^ (arr2XorSum&arr1[1]) ^ (arr2XorSum&arr1[2]) ^ ... = arr2XorSum & arr1XorSum."
            ],
            "rephrased": {
                "body": "Given two 0-indexed arrays `arr1` and `arr2` containing non-negative integers, compute the bitwise AND of each pair of elements (one from `arr1` and one from `arr2`). Return the XOR sum of all the computed AND results.",
                "constraints": [
                    "1 <= arr1.length, arr2.length <= 10^5",
                    "0 <= arr1[i], arr2[j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [1,2,3], arr2 = [6,5]",
                        "output": "0",
                        "explanation": "The list of AND results is [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0, 1, 2, 0, 2, 1]. The XOR sum is 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0."
                    },
                    {
                        "input": "arr1 = [12], arr2 = [4]",
                        "output": "4",
                        "explanation": "The list of AND results is [12 AND 4] = [4]. The XOR sum is 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Think about (a&b) ^ (a&c). Can you simplify this expression?",
            "It is equal to a&(b^c). Then, (arr1[i]&arr2[0])^(arr1[i]&arr2[1]).. = arr1[i]&(arr2[0]^arr2[1]^arr[2]...).",
            "Let arr2XorSum = (arr2[0]^arr2[1]^arr2[2]...), arr1XorSum = (arr1[0]^arr1[1]^arr1[2]...) so the final answer is (arr2XorSum&arr1[0]) ^ (arr2XorSum&arr1[1]) ^ (arr2XorSum&arr1[2]) ^ ... = arr2XorSum & arr1XorSum."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int getXORSum(vector<int>& arr1, vector<int>& arr2) {\n    const int xors1 = accumulate(arr1.begin(), arr1.end(), 0, bit_xor<>());\n    const int xors2 = accumulate(arr2.begin(), arr2.end(), 0, bit_xor<>());\n    return xors1 & xors2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int getXORSum(int[] arr1, int[] arr2) {\n    final int xors1 = Arrays.stream(arr1).reduce((a, b) -> a ^ b).getAsInt();\n    final int xors2 = Arrays.stream(arr2).reduce((a, b) -> a ^ b).getAsInt();\n    return xors1 & xors2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getXORSum(self, arr1: List[int], arr2: List[int]) -> int:\n    return functools.reduce(operator.xor, arr1) & functools.reduce(operator.xor, arr2)\n",
                "lang_text": "py"
            }
        }
    }
}