{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1825",
            "title": "Finding MK Average",
            "titleSlug": "finding-mk-average",
            "content": "<p>You are given two integers, <code>m</code> and <code>k</code>, and a stream of integers. You are tasked to implement a data structure that calculates the <strong>MKAverage</strong> for the stream.</p>\n\n<p>The <strong>MKAverage</strong> can be calculated using these steps:</p>\n\n<ol>\n\t<li>If the number of the elements in the stream is less than <code>m</code> you should consider the <strong>MKAverage</strong> to be <code>-1</code>. Otherwise, copy the last <code>m</code> elements of the stream to a separate container.</li>\n\t<li>Remove the smallest <code>k</code> elements and the largest <code>k</code> elements from the container.</li>\n\t<li>Calculate the average value for the rest of the elements <strong>rounded down to the nearest integer</strong>.</li>\n</ol>\n\n<p>Implement the <code>MKAverage</code> class:</p>\n\n<ul>\n\t<li><code>MKAverage(int m, int k)</code> Initializes the <strong>MKAverage</strong> object with an empty stream and the two integers <code>m</code> and <code>k</code>.</li>\n\t<li><code>void addElement(int num)</code> Inserts a new element <code>num</code> into the stream.</li>\n\t<li><code>int calculateMKAverage()</code> Calculates and returns the <strong>MKAverage</strong> for the current stream <strong>rounded down to the nearest integer</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MKAverage&quot;, &quot;addElement&quot;, &quot;addElement&quot;, &quot;calculateMKAverage&quot;, &quot;addElement&quot;, &quot;calculateMKAverage&quot;, &quot;addElement&quot;, &quot;addElement&quot;, &quot;addElement&quot;, &quot;calculateMKAverage&quot;]\n[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]\n<strong>Output</strong>\n[null, null, null, -1, null, 3, null, null, null, 5]\n\n<strong>Explanation</strong>\n<code>MKAverage obj = new MKAverage(3, 1); \nobj.addElement(3);        // current elements are [3]\nobj.addElement(1);        // current elements are [3,1]\nobj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.\nobj.addElement(10);       // current elements are [3,1,10]\nobj.calculateMKAverage(); // The last 3 elements are [3,1,10].\n                          // After removing smallest and largest 1 element the container will be [3].\n                          // The average of [3] equals 3/1 = 3, return 3\nobj.addElement(5);        // current elements are [3,1,10,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5,5]\nobj.calculateMKAverage(); // The last 3 elements are [5,5,5].\n                          // After removing smallest and largest 1 element the container will be [5].\n                          // The average of [5] equals 5/1 = 5, return 5\n</code></pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k*2 &lt; m</code></li>\n\t<li><code>1 &lt;= num &lt;= 10<sup>5</sup></code></li>\n\t<li>At most <code>10<sup>5</sup></code> calls will be made to <code>addElement</code> and <code>calculateMKAverage</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 387,
            "dislikes": 118,
            "similarQuestions": "[{\"title\": \"Find Median from Data Stream\", \"titleSlug\": \"find-median-from-data-stream\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Kth Largest Element in a Stream\", \"titleSlug\": \"kth-largest-element-in-a-stream\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sequentially Ordinal Rank Tracker\", \"titleSlug\": \"sequentially-ordinal-rank-tracker\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Data Stream",
                    "slug": "data-stream"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.4K\", \"totalSubmission\": \"36.8K\", \"totalAcceptedRaw\": 13373, \"totalSubmissionRaw\": 36830, \"acRate\": \"36.3%\"}",
            "hints": [
                "At each query, try to save and update the sum of the elements needed to calculate MKAverage.",
                "You can use BSTs for fast insertion and deletion of the elements."
            ],
            "rephrased": {
                "body": "Implement a data structure, `MKAverage`, to calculate the MKAverage for a stream of integers.\n\nThe MKAverage is calculated as follows:\n\n1.  If the stream has fewer than `m` elements, the MKAverage is -1.\n2.  Otherwise, consider the last `m` elements of the stream.\n3.  Remove the `k` smallest and the `k` largest elements from these `m` elements.\n4.  Calculate the average of the remaining elements, rounded down to the nearest integer.\n\nImplement the `MKAverage` class:\n\n*   `MKAverage(int m, int k)`: Initializes the object with an empty stream and the integers `m` and `k`.\n*   `void addElement(int num)`: Inserts a new element `num` into the stream.\n*   `int calculateMKAverage()`: Calculates and returns the MKAverage for the current stream, rounded down to the nearest integer.",
                "constraints": [
                    "3 <= m <= 10^5",
                    "1 <= k*2 < m",
                    "1 <= num <= 10^5",
                    "At most 10^5 calls will be made to addElement and calculateMKAverage."
                ],
                "testcases": [
                    {
                        "input": "[\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]\n[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]",
                        "output": "[null, null, null, -1, null, 3, null, null, null, 5]",
                        "explanation": "Initially, the stream is empty. Adding 3 and then 1 makes the stream [3, 1]. Since m=3, calculateMKAverage() returns -1. Adding 10 makes the stream [3, 1, 10]. The last m=3 elements are [3, 1, 10]. Removing the smallest (1) and largest (10) leaves [3]. The average is 3. Adding 5, 5, and 5 makes the stream [3, 1, 10, 5, 5, 5]. The last m=3 elements are [5, 5, 5]. Removing the smallest (5) and largest (5) leaves [5]. The average is 5."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "find-median-from-data-stream",
                "title": "Find Median from Data Stream",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "kth-largest-element-in-a-stream",
                "title": "Kth Largest Element in a Stream",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "sequentially-ordinal-rank-tracker",
                "title": "Sequentially Ordinal Rank Tracker",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "At each query, try to save and update the sum of the elements needed to calculate MKAverage.",
            "You can use BSTs for fast insertion and deletion of the elements."
        ],
        "relatedTopics": [
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Data Stream",
                "slug": "data-stream"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class MKAverage {\n public:\n  MKAverage(int m, int k) : m(m), k(k) {}\n\n  void addElement(int num) {\n    q.push(num);\n    add(mid, num);\n    midSum += num;\n\n    if (q.size() > m) {\n      const int removed = q.front();\n      q.pop();\n      if (top.count(removed)) {\n        remove(top, removed);\n        --topSize;\n      } else if (mid.count(removed)) {\n        remove(mid, removed);\n        midSum -= removed;\n      } else {\n        remove(bot, removed);\n        --botSize;\n      }\n    }\n\n    // Move item(s) from mid to top to fill k slots\n    while (!mid.empty() && topSize < k) {\n      midSum -= mid.rbegin()->first;\n      add(top, remove(mid, mid.rbegin()->first));\n      ++topSize;\n    }\n\n    // Rebalance mid and top\n    while (!mid.empty() && mid.rbegin()->first > top.begin()->first) {\n      midSum -= mid.rbegin()->first;\n      midSum += top.begin()->first;\n      add(top, remove(mid, mid.rbegin()->first));\n      add(mid, remove(top, top.begin()->first));\n    }\n\n    // Move item(s) from mid to bot to fill k slots\n    while (!mid.empty() && botSize < k) {\n      midSum -= mid.begin()->first;\n      add(bot, remove(mid, mid.begin()->first));\n      ++botSize;\n    }\n\n    // Move item(s) from mid to bot to fill k slots\n    while (!mid.empty() && mid.begin()->first < bot.rbegin()->first) {\n      midSum -= mid.begin()->first;\n      midSum += bot.rbegin()->first;\n      add(bot, remove(mid, mid.begin()->first));\n      add(mid, remove(bot, bot.rbegin()->first));\n    }\n  }\n\n  int calculateMKAverage() {\n    return q.size() == m ? midSum / (m - 2 * k) : -1;\n  }\n\n private:\n  const int m;\n  const int k;\n  queue<int> q;\n  map<int, int> top;\n  map<int, int> mid;\n  map<int, int> bot;\n  int topSize = 0;\n  int botSize = 0;\n  long midSum = 0;\n\n  void add(map<int, int>& map, int num) {\n    ++map[num];\n  }\n\n  int remove(map<int, int>& map, int num) {\n    if (--map[num] == 0)\n      map.erase(num);\n    return num;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class MKAverage {\n  public MKAverage(int m, int k) {\n    this.m = m;\n    this.k = k;\n  }\n\n  public void addElement(int num) {\n    q.offer(num);\n    add(mid, num);\n    midSum += num;\n\n    if (q.size() > m) {\n      final int removed = q.poll();\n      if (top.containsKey(removed)) {\n        remove(top, removed);\n        --topSize;\n      } else if (mid.containsKey(removed)) {\n        remove(mid, removed);\n        midSum -= removed;\n      } else {\n        remove(bot, removed);\n        --botSize;\n      }\n    }\n\n    // Move item(s) from mid to top to fill k slots\n    while (!mid.isEmpty() && topSize < k) {\n      midSum -= mid.lastKey();\n      add(top, remove(mid, mid.lastKey()));\n      ++topSize;\n    }\n\n    // Rebalance mid and top\n    while (!mid.isEmpty() && mid.lastKey() > top.firstKey()) {\n      midSum -= mid.lastKey();\n      midSum += top.firstKey();\n      add(top, remove(mid, mid.lastKey()));\n      add(mid, remove(top, top.firstKey()));\n    }\n\n    // Move item(s) from mid to bot to fill k slots\n    while (!mid.isEmpty() && botSize < k) {\n      midSum -= mid.firstKey();\n      add(bot, remove(mid, mid.firstKey()));\n      ++botSize;\n    }\n\n    // Rebalance mid and bot\n    while (!mid.isEmpty() && mid.firstKey() < bot.lastKey()) {\n      midSum -= mid.firstKey();\n      midSum += bot.lastKey();\n      add(bot, remove(mid, mid.firstKey()));\n      add(mid, remove(bot, bot.lastKey()));\n    }\n  }\n\n  public int calculateMKAverage() {\n    return q.size() == m ? (int) (midSum / (m - 2 * k)) : -1;\n  }\n\n  private final int m;\n  private final int k;\n  private Queue<Integer> q = new ArrayDeque<>();\n  private TreeMap<Integer, Integer> top = new TreeMap<>();\n  private TreeMap<Integer, Integer> mid = new TreeMap<>();\n  private TreeMap<Integer, Integer> bot = new TreeMap<>();\n  private int topSize = 0;\n  private int botSize = 0;\n  private long midSum = 0;\n\n  private void add(TreeMap<Integer, Integer> map, int num) {\n    map.merge(num, 1, Integer::sum);\n  }\n\n  private int remove(TreeMap<Integer, Integer> map, int num) {\n    map.put(num, map.get(num) - 1);\n    if (map.get(num) == 0)\n      map.remove(num);\n    return num;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}