{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1865",
            "title": "Finding Pairs With a Certain Sum",
            "titleSlug": "finding-pairs-with-a-certain-sum",
            "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>. You are tasked to implement a data structure that supports queries of two types:</p>\n\n<ol>\n\t<li><strong>Add</strong> a positive integer to an element of a given index in the array <code>nums2</code>.</li>\n\t<li><strong>Count</strong> the number of pairs <code>(i, j)</code> such that <code>nums1[i] + nums2[j]</code> equals a given value (<code>0 &lt;= i &lt; nums1.length</code> and <code>0 &lt;= j &lt; nums2.length</code>).</li>\n</ol>\n\n<p>Implement the <code>FindSumPairs</code> class:</p>\n\n<ul>\n\t<li><code>FindSumPairs(int[] nums1, int[] nums2)</code> Initializes the <code>FindSumPairs</code> object with two integer arrays <code>nums1</code> and <code>nums2</code>.</li>\n\t<li><code>void add(int index, int val)</code> Adds <code>val</code> to <code>nums2[index]</code>, i.e., apply <code>nums2[index] += val</code>.</li>\n\t<li><code>int count(int tot)</code> Returns the number of pairs <code>(i, j)</code> such that <code>nums1[i] + nums2[j] == tot</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;FindSumPairs&quot;, &quot;count&quot;, &quot;add&quot;, &quot;count&quot;, &quot;count&quot;, &quot;add&quot;, &quot;add&quot;, &quot;count&quot;]\n[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]\n<strong>Output</strong>\n[null, 8, null, 2, 1, null, null, 11]\n\n<strong>Explanation</strong>\nFindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);\nfindSumPairs.count(7);  // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4\nfindSumPairs.add(3, 2); // now nums2 = [1,4,5,<strong><u>4</u></strong><code>,5,4</code>]\nfindSumPairs.count(8);  // return 2; pairs (5,2), (5,4) make 3 + 5\nfindSumPairs.count(4);  // return 1; pair (5,0) makes 3 + 1\nfindSumPairs.add(0, 1); // now nums2 = [<strong><u><code>2</code></u></strong>,4,5,4<code>,5,4</code>]\nfindSumPairs.add(1, 1); // now nums2 = [<code>2</code>,<strong><u>5</u></strong>,5,4<code>,5,4</code>]\nfindSumPairs.count(7);  // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums1[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= nums2[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= index &lt; nums2.length</code></li>\n\t<li><code>1 &lt;= val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= tot &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>1000</code> calls are made to <code>add</code> and <code>count</code> <strong>each</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 569,
            "dislikes": 101,
            "similarQuestions": "[{\"title\": \"Count Number of Pairs With Absolute Difference K\", \"titleSlug\": \"count-number-of-pairs-with-absolute-difference-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Number of Distinct Averages\", \"titleSlug\": \"number-of-distinct-averages\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count the Number of Fair Pairs\", \"titleSlug\": \"count-the-number-of-fair-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Design",
                    "slug": "design"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.3K\", \"totalSubmission\": \"46K\", \"totalAcceptedRaw\": 23273, \"totalSubmissionRaw\": 46004, \"acRate\": \"50.6%\"}",
            "hints": [
                "The length of nums1 is small in comparison to that of nums2",
                "If we iterate over elements of nums1 we just need to find the count of tot - element for all elements in nums1"
            ],
            "rephrased": {
                "body": "Design a data structure, `FindSumPairs`, to efficiently handle two types of queries on two integer arrays, `nums1` and `nums2`:\n\n1.  **Add**: Increment a specific element in `nums2` by a given positive integer.\n2.  **Count**: Determine the number of pairs `(i, j)` where `nums1[i] + nums2[j]` equals a given target value, `tot` (considering valid array indices).\n\nImplement the following methods within the `FindSumPairs` class:\n\n*   `FindSumPairs(int[] nums1, int[] nums2)`: Initializes the data structure with the input arrays.\n*   `void add(int index, int val)`: Updates `nums2[index]` by adding `val` to it.\n*   `int count(int tot)`: Returns the count of pairs `(i, j)` satisfying `nums1[i] + nums2[j] == tot`.",
                "constraints": [
                    "1 <= nums1.length <= 1000",
                    "1 <= nums2.length <= 10^5",
                    "1 <= nums1[i] <= 10^9",
                    "1 <= nums2[i] <= 10^5",
                    "0 <= index < nums2.length",
                    "1 <= val <= 10^5",
                    "1 <= tot <= 10^9",
                    "At most 1000 calls are made to add and count each."
                ],
                "testcases": [
                    {
                        "input": "[\"FindSumPairs\", \"count\", \"add\", \"count\", \"count\", \"add\", \"add\", \"count\"]\n[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]",
                        "output": "[null, 8, null, 2, 1, null, null, 11]",
                        "explanation": "Initially, nums1 = [1, 1, 2, 2, 2, 3] and nums2 = [1, 4, 5, 2, 5, 4].\ncount(7) returns 8 because:\n- 2 + 5 == 7 occurs 6 times (indices combinations: (2,2), (3,2), (4,2), (2,4), (3,4), (4,4)).\n- 3 + 4 == 7 occurs 2 times (indices combinations: (5,1), (5,5)).\nadd(3, 2) modifies nums2 to [1, 4, 5, 4, 5, 4].\ncount(8) returns 2 because:\n- 3 + 5 == 8 occurs 2 times (indices combinations: (5,2), (5,4)).\ncount(4) returns 1 because:\n- 3 + 1 == 4 occurs 1 time (indices combination: (5,0)).\nadd(0, 1) modifies nums2 to [2, 4, 5, 4, 5, 4].\nadd(1, 1) modifies nums2 to [2, 5, 5, 4, 5, 4].\ncount(7) returns 11 because:\n- 2 + 5 == 7 occurs 9 times (indices combinations: (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4)).\n- 3 + 4 == 7 occurs 2 times (indices combinations: (5,3), (5,5))."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "count-number-of-pairs-with-absolute-difference-k",
                "title": "Count Number of Pairs With Absolute Difference K",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "number-of-distinct-averages",
                "title": "Number of Distinct Averages",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-the-number-of-fair-pairs",
                "title": "Count the Number of Fair Pairs",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The length of nums1 is small in comparison to that of nums2",
            "If we iterate over elements of nums1 we just need to find the count of tot - element for all elements in nums1"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Design",
                "slug": "design"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class FindSumPairs {\n public:\n  FindSumPairs(vector<int>& nums1, vector<int>& nums2)\n      : nums1(nums1), nums2(nums2) {\n    for (const int num : nums2)\n      ++count2[num];\n  }\n\n  void add(int index, int val) {\n    --count2[nums2[index]];\n    nums2[index] += val;\n    ++count2[nums2[index]];\n  }\n\n  int count(int tot) {\n    int ans = 0;\n    for (const int num : nums1) {\n      const int target = tot - num;\n      if (const auto it = count2.find(target); it != count2.cend())\n        ans += it->second;\n    }\n    return ans;\n  }\n\n private:\n  vector<int> nums1;\n  vector<int> nums2;\n  unordered_map<int, int> count2;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class FindSumPairs {\n  public FindSumPairs(int[] nums1, int[] nums2) {\n    this.nums1 = nums1;\n    this.nums2 = nums2;\n    for (final int num : nums2)\n      count2.merge(num, 1, Integer::sum);\n  }\n\n  public void add(int index, int val) {\n    count2.merge(nums2[index], -1, Integer::sum);\n    nums2[index] += val;\n    count2.merge(nums2[index], 1, Integer::sum);\n  }\n\n  public int count(int tot) {\n    int ans = 0;\n    for (final int num : nums1)\n      ans += count2.getOrDefault(tot - num, 0);\n    return ans;\n  }\n\n  private int[] nums1;\n  private int[] nums2;\n  private Map<Integer, Integer> count2 = new HashMap<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class FindSumPairs:\n  def __init__(self, nums1: List[int], nums2: List[int]):\n    self.nums1 = nums1\n    self.nums2 = nums2\n    self.count2 = collections.Counter(nums2)\n\n  def add(self, index: int, val: int) -> None:\n    self.count2[self.nums2[index]] -= 1\n    self.nums2[index] += val\n    self.count2[self.nums2[index]] += 1\n\n  def count(self, tot: int) -> int:\n    ans = 0\n    for num in self.nums1:\n      ans += self.count2[tot - num]\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}