{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "278",
            "title": "First Bad Version",
            "titleSlug": "first-bad-version",
            "content": "<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>\n\n<p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.</p>\n\n<p>You are given an API <code>bool isBadVersion(version)</code> which returns whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, bad = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\ncall isBadVersion(3) -&gt; false\ncall isBadVersion(5)&nbsp;-&gt; true\ncall isBadVersion(4)&nbsp;-&gt; true\nThen 4 is the first bad version.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, bad = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= bad &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8162,
            "dislikes": 3230,
            "similarQuestions": "[{\"title\": \"Find First and Last Position of Element in Sorted Array\", \"titleSlug\": \"find-first-and-last-position-of-element-in-sorted-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Search Insert Position\", \"titleSlug\": \"search-insert-position\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower\", \"titleSlug\": \"guess-number-higher-or-lower\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Interactive",
                    "slug": "interactive"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"3.6M\", \"totalAcceptedRaw\": 1603227, \"totalSubmissionRaw\": 3643509, \"acRate\": \"44.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are managing a product development team. A recent product version failed quality checks. Given that subsequent versions built upon a faulty version will also be faulty, you need to identify the first bad version within a series of `n` versions, numbered from 1 to `n`. You have access to an API `isBadVersion(version)` that returns `true` if a version is bad and `false` otherwise. Your task is to implement a function that finds the earliest bad version while minimizing the number of API calls.",
                "constraints": [
                    "1 <= bad <= n <= 2<sup>31</sup> - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 5, bad = 4",
                        "output": "4",
                        "explanation": "The first bad version is 4. Calling `isBadVersion(3)` returns `false`, `isBadVersion(5)` returns `true`, and `isBadVersion(4)` returns `true`. Therefore, 4 is the first bad version."
                    },
                    {
                        "input": "n = 1, bad = 1",
                        "output": "1",
                        "explanation": "The first bad version is 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
                "title": "Find First and Last Position of Element in Sorted Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "search-insert-position",
                "title": "Search Insert Position",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "guess-number-higher-or-lower",
                "title": "Guess Number Higher or Lower",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Interactive",
                "slug": "interactive"
            }
        ]
    }
}