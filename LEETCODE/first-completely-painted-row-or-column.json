{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2661",
            "title": "First Completely Painted Row or Column",
            "titleSlug": "first-completely-painted-row-or-column",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>arr</code>, and an <code>m x n</code> integer <strong>matrix</strong> <code>mat</code>. <code>arr</code> and <code>mat</code> both contain <strong>all</strong> the integers in the range <code>[1, m * n]</code>.</p>\n\n<p>Go through each index <code>i</code> in <code>arr</code> starting from index <code>0</code> and paint the cell in <code>mat</code> containing the integer <code>arr[i]</code>.</p>\n\n<p>Return <em>the smallest index</em> <code>i</code> <em>at which either a row or a column will be completely painted in</em> <code>mat</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"image explanation for example 1\" /><img alt=\"image explanation for example 1\" src=\"https://assets.leetcode.com/uploads/2023/01/18/grid1.jpg\" style=\"width: 321px; height: 81px;\" />\n<pre>\n<strong>Input:</strong> arr = [1,3,4,2], mat = [[1,4],[2,3]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The moves are shown in order, and both the first row and second column of the matrix become fully painted at arr[2].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"image explanation for example 2\" src=\"https://assets.leetcode.com/uploads/2023/01/18/grid2.jpg\" style=\"width: 601px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> arr = [2,8,7,4,1,3,5,6,9], mat = [[3,2,5],[1,4,6],[8,7,9]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The second column becomes fully painted at arr[3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n = mat[i].length</code></li>\n\t<li><code>arr.length == m * n</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= arr[i], mat[r][c] &lt;= m * n</code></li>\n\t<li>All the integers of <code>arr</code> are <strong>unique</strong>.</li>\n\t<li>All the integers of <code>mat</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 400,
            "dislikes": 7,
            "similarQuestions": "[{\"title\": \"Check if Every Row and Column Contains All Numbers\", \"titleSlug\": \"check-if-every-row-and-column-contains-all-numbers\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Difference Between Ones and Zeros in Row and Column\", \"titleSlug\": \"difference-between-ones-and-zeros-in-row-and-column\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.9K\", \"totalSubmission\": \"41.9K\", \"totalAcceptedRaw\": 20942, \"totalSubmissionRaw\": 41887, \"acRate\": \"50.0%\"}",
            "hints": [
                "Can we use a frequency array?",
                "Pre-process the positions of the values in the matrix.",
                "Traverse the array and increment the corresponding row and column frequency using the pre-processed positions.",
                "If the row frequency becomes equal to the number of columns, or vice-versa return the current index."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `arr`, and an `m x n` integer matrix `mat`. Both `arr` and `mat` contain all the integers in the range `[1, m * n]`. Iterate through `arr` from index 0 and \"paint\" the cell in `mat` that contains the integer `arr[i]`. The goal is to find the smallest index `i` at which either a row or a column in `mat` becomes completely painted.",
                "constraints": [
                    "m == mat.length",
                    "n = mat[i].length",
                    "arr.length == m * n",
                    "1 <= m, n <= 10^5",
                    "1 <= m * n <= 10^5",
                    "1 <= arr[i], mat[r][c] <= m * n",
                    "All integers in `arr` are unique.",
                    "All integers in `mat` are unique."
                ],
                "testcases": [
                    {
                        "input": {
                            "arr": "[1,3,4,2]",
                            "mat": "[[1,4],[2,3]]"
                        },
                        "output": "2",
                        "explanation": "The first row and the second column of the matrix become fully painted at arr[2]."
                    },
                    {
                        "input": {
                            "arr": "[2,8,7,4,1,3,5,6,9]",
                            "mat": "[[3,2,5],[1,4,6],[8,7,9]]"
                        },
                        "output": "3",
                        "explanation": "The second column becomes fully painted at arr[3]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "check-if-every-row-and-column-contains-all-numbers",
                "title": "Check if Every Row and Column Contains All Numbers",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "difference-between-ones-and-zeros-in-row-and-column",
                "title": "Difference Between Ones and Zeros in Row and Column",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we use a frequency array?",
            "Pre-process the positions of the values in the matrix.",
            "Traverse the array and increment the corresponding row and column frequency using the pre-processed positions.",
            "If the row frequency becomes equal to the number of columns, or vice-versa return the current index."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {\n    const int m = mat.size();\n    const int n = mat[0].size();\n    // rows[i] := # of painted grid in i-th row\n    vector<int> rows(m);\n    // cols[j] := # of painted grid in j-th col\n    vector<int> cols(n);\n    // numToRow[num] := i-th row of num in mat\n    vector<int> numToRow(m * n + 1);\n    // numToCol[num] := j-th col of num in mat\n    vector<int> numToCol(m * n + 1);\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        numToRow[mat[i][j]] = i;\n        numToCol[mat[i][j]] = j;\n      }\n\n    for (int i = 0; i < arr.size(); ++i) {\n      if (++rows[numToRow[arr[i]]] == n)\n        return i;\n      if (++cols[numToCol[arr[i]]] == m)\n        return i;\n    }\n\n    throw;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int firstCompleteIndex(int[] arr, int[][] mat) {\n    final int m = mat.length;\n    final int n = mat[0].length;\n    // rows[i] := # of painted grid in i-th row\n    int[] rows = new int[m];\n    // cols[j] := # of painted grid in j-th col\n    int[] cols = new int[n];\n    // numToRow[num] := i-th row of num in mat\n    int[] numToRow = new int[m * n + 1];\n    // numToCol[num] := j-th col of num in mat\n    int[] numToCol = new int[m * n + 1];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        numToRow[mat[i][j]] = i;\n        numToCol[mat[i][j]] = j;\n      }\n\n    for (int i = 0; i < arr.length; ++i) {\n      if (++rows[numToRow[arr[i]]] == n)\n        return i;\n      if (++cols[numToCol[arr[i]]] == m)\n        return i;\n    }\n\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def firstCompleteIndex(self, arr: List[int], mat: List[List[int]]) -> int:\n    m = len(mat)\n    n = len(mat[0])\n    # rows[i] := # of painted grid in i-th row\n    rows = [0] * m\n    # cols[j] := # of painted grid in j-th col\n    cols = [0] * n\n    # numToRow[num] := i-th row of num in mat\n    numToRow = [0] * (m * n + 1)\n    # numToCol[num] := j-th col of num in mat\n    numToCol = [0] * (m * n + 1)\n\n    for i, row in enumerate(mat):\n      for j, num in enumerate(row):\n        numToRow[num] = i\n        numToCol[num] = j\n\n    for i, a in enumerate(arr):\n      rows[numToRow[a]] += 1\n      if rows[numToRow[a]] == n:\n        return i\n      cols[numToCol[a]] += 1\n      if cols[numToCol[a]] == m:\n        return i\n    ",
                "lang_text": "py"
            }
        }
    }
}