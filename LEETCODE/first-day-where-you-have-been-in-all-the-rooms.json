{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1997",
            "title": "First Day Where You Have Been in All the Rooms",
            "titleSlug": "first-day-where-you-have-been-in-all-the-rooms",
            "content": "<p>There are <code>n</code> rooms you need to visit, labeled from <code>0</code> to <code>n - 1</code>. Each day is labeled, starting from <code>0</code>. You will go in and visit one room a day.</p>\n\n<p>Initially on day <code>0</code>, you visit room <code>0</code>. The <strong>order</strong> you visit the rooms for the coming days is determined by the following <strong>rules</strong> and a given <strong>0-indexed</strong> array <code>nextVisit</code> of length <code>n</code>:</p>\n\n<ul>\n\t<li>Assuming that on a day, you visit room <code>i</code>,</li>\n\t<li>if you have been in room <code>i</code> an <strong>odd</strong> number of times (<strong>including</strong> the current visit), on the <strong>next</strong> day you will visit a room with a <strong>lower or equal room number</strong> specified by <code>nextVisit[i]</code> where <code>0 &lt;= nextVisit[i] &lt;= i</code>;</li>\n\t<li>if you have been in room <code>i</code> an <strong>even</strong> number of times (<strong>including</strong> the current visit), on the <strong>next</strong> day you will visit room <code>(i + 1) mod n</code>.</li>\n</ul>\n\n<p>Return <em>the label of the <strong>first</strong> day where you have been in <strong>all</strong> the rooms</em>. It can be shown that such a day exists. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nextVisit = [0,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n- On day 0, you visit room 0. The total times you have been in room 0 is 1, which is odd.\n&nbsp; On the next day you will visit room nextVisit[0] = 0\n- On day 1, you visit room 0, The total times you have been in room 0 is 2, which is even.\n&nbsp; On the next day you will visit room (0 + 1) mod 2 = 1\n- On day 2, you visit room 1. This is the first day where you have been in all the rooms.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nextVisit = [0,0,2]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\nYour room visiting order for each day is: [0,0,1,0,0,1,2,...].\nDay 6 is the first day where you have been in all the rooms.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nextVisit = [0,1,2,0]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\nYour room visiting order for each day is: [0,0,1,1,2,2,3,...].\nDay 6 is the first day where you have been in all the rooms.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nextVisit.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nextVisit[i] &lt;= i</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 471,
            "dislikes": 89,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.7K\", \"totalSubmission\": \"23.4K\", \"totalAcceptedRaw\": 8654, \"totalSubmissionRaw\": 23401, \"acRate\": \"37.0%\"}",
            "hints": [
                "The only way to get to room i+1 is when you are visiting room i and room i has been visited an even number of times.",
                "After visiting room i an odd number of times, you are required to visit room nextVisit[i] where nextVisit[i] <= i. It takes a fixed amount of days for you to come back from room nextVisit[i] to room i. Then, you have visited room i even number of times.nextVisit[i]",
                "Can you use Dynamic Programming to avoid recomputing the number of days it takes to visit room i from room nextVisit[i]?"
            ],
            "rephrased": {
                "body": "You are given `n` rooms, labeled from 0 to `n - 1`. You start at room 0 on day 0 and visit one room each day. The order of your visits is determined by the `nextVisit` array of length `n` and the following rules:\n\n*   If you are in room `i` and have visited it an odd number of times (including the current visit), you will visit room `nextVisit[i]` on the next day, where `0 <= nextVisit[i] <= i`.\n*   If you are in room `i` and have visited it an even number of times (including the current visit), you will visit room `(i + 1) mod n` on the next day.\n\nReturn the label of the first day where you have been in all the rooms. Since the answer may be very large, return it modulo `10^9 + 7`.",
                "constraints": [
                    "`n == nextVisit.length`",
                    "`2 <= n <= 10^5`",
                    "`0 <= nextVisit[i] <= i`"
                ],
                "testcases": [
                    {
                        "input": "[0,0]",
                        "output": "2",
                        "explanation": "On day 0, you visit room 0 (1st visit, odd). On day 1, you visit room nextVisit[0] = 0 (2nd visit, even). On day 2, you visit room (0 + 1) mod 2 = 1. Day 2 is the first day all rooms are visited."
                    },
                    {
                        "input": "[0,0,2]",
                        "output": "6",
                        "explanation": "The room visiting order is [0,0,1,0,0,1,2,...]. Day 6 is the first day all rooms are visited."
                    },
                    {
                        "input": "[0,1,2,0]",
                        "output": "6",
                        "explanation": "The room visiting order is [0,0,1,1,2,2,3,...]. Day 6 is the first day all rooms are visited."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The only way to get to room i+1 is when you are visiting room i and room i has been visited an even number of times.",
            "After visiting room i an odd number of times, you are required to visit room nextVisit[i] where nextVisit[i] <= i. It takes a fixed amount of days for you to come back from room nextVisit[i] to room i. Then, you have visited room i even number of times.nextVisit[i]",
            "Can you use Dynamic Programming to avoid recomputing the number of days it takes to visit room i from room nextVisit[i]?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int firstDayBeenInAllRooms(vector<int>& nextVisit) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = nextVisit.size();\n    // dp[i] := # of days to visit room i for first time\n    vector<int> dp(n);\n\n    // Whenever we visit i, visit times of room[0..i - 1] are all even.\n    // Therefore, rooms before i can be seen as reset and we can safely reuse\n    // dp[0..i - 1] as first-time visit to get second-time visit\n    for (int i = 1; i < n; ++i)\n      // The total days to visit room[i] is the sum of\n      //   * dp[i - 1]: 1st-time visit room[i - 1]\n      //   * 1: visit room[nextVisit[i - 1]]\n      //   * dp[i - 1] - dp[nextVisit[i - 1]]: 2-time visit room[i - 1]\n      //   * 1: visit room[i]\n      dp[i] = (2L * dp[i - 1] - dp[nextVisit[i - 1]] + 2 + kMod) % kMod;\n\n    return dp.back();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int firstDayBeenInAllRooms(int[] nextVisit) {\n    final int kMod = 1_000_000_007;\n    final int n = nextVisit.length;\n    // dp[i] := # of days to visit room i for first time\n    int[] dp = new int[n];\n\n    // Whenever we visit i, visit times of room[0..i - 1] are all even.\n    // Therefore, rooms before i can be seen as reset and we can safely reuse\n    // dp[0..i - 1] as first-time visit to get second-time visit\n    for (int i = 1; i < n; ++i)\n      // The total days to visit room[i] is the sum of\n      //   * dp[i - 1]: 1st-time visit room[i - 1]\n      //   * 1: visit room[nextVisit[i - 1]]\n      //   * dp[i - 1] - dp[nextVisit[i - 1]]: 2-time visit room[i - 1]\n      //   * 1: visit room[i]\n      dp[i] = (int) ((2L * dp[i - 1] - dp[nextVisit[i - 1]] + 2 + kMod) % kMod);\n\n    return dp[n - 1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def firstDayBeenInAllRooms(self, nextVisit: List[int]) -> int:\n    kMod = 1_000_000_007\n    n = len(nextVisit)\n    # dp[i] := # of days to visit room i for first time\n    dp = [0] * n\n\n    # Whenever we visit i, visit times of room[0..i - 1] are all even.\n    # Therefore, rooms before i can be seen as reset and we can safely reuse\n    # dp[0..i - 1] as first-time visit to get second-time visit\n    for i in range(1, n):\n      # The total days to visit room[i] is the sum of\n      #   * dp[i - 1]: 1st-time visit room[i - 1]\n      #   * 1: visit room[nextVisit[i - 1]]\n      #   * dp[i - 1] - dp[nextVisit[i - 1]]: 2-time visit room[i - 1]\n      #   * 1: visit room[i]\n      dp[i] = (2 * dp[i - 1] - dp[nextVisit[i - 1]] + 2) % kMod\n\n    return dp[-1]\n",
                "lang_text": "py"
            }
        }
    }
}