{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "41",
            "title": "First Missing Positive",
            "titleSlug": "first-missing-positive",
            "content": "<p>Given an unsorted integer array <code>nums</code>, return the smallest missing positive integer.</p>\n\n<p>You must implement an algorithm that runs in <code>O(n)</code> time and uses <code>O(1)</code> auxiliary space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,0]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The numbers in the range [1,2] are all in the array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,-1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 1 is in the array but 2 is missing.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,8,9,11,12]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The smallest positive integer 1 is missing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 15535,
            "dislikes": 1737,
            "similarQuestions": "[{\"title\": \"Missing Number\", \"titleSlug\": \"missing-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Duplicate Number\", \"titleSlug\": \"find-the-duplicate-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find All Numbers Disappeared in an Array\", \"titleSlug\": \"find-all-numbers-disappeared-in-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Couples Holding Hands\", \"titleSlug\": \"couples-holding-hands\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Smallest Number in Infinite Set\", \"titleSlug\": \"smallest-number-in-infinite-set\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Integers to Choose From a Range I\", \"titleSlug\": \"maximum-number-of-integers-to-choose-from-a-range-i\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Missing Non-negative Integer After Operations\", \"titleSlug\": \"smallest-missing-non-negative-integer-after-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Integers to Choose From a Range II\", \"titleSlug\": \"maximum-number-of-integers-to-choose-from-a-range-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                }
            ],
            "stats": "{\"totalAccepted\": \"996.5K\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 996531, \"totalSubmissionRaw\": 2655667, \"acRate\": \"37.5%\"}",
            "hints": [
                "Think about how you would solve the problem in non-constant space.  Can you apply that logic to the existing space?",
                "We don't care about duplicates or non-positive integers",
                "Remember that O(2n) = O(n)"
            ],
            "rephrased": {
                "body": "Given an unsorted integer array `nums`, find the smallest missing positive integer. Your algorithm must run in O(n) time and use O(1) auxiliary space.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "-2^31 <= nums[i] <= 2^31 - 1"
                ],
                "testcases": [
                    {
                        "input": "[1,2,0]",
                        "output": "3",
                        "explanation": "The numbers 1 and 2 are present in the array. Therefore, the smallest missing positive integer is 3."
                    },
                    {
                        "input": "[3,4,-1,1]",
                        "output": "2",
                        "explanation": "The number 1 is in the array, but 2 is missing."
                    },
                    {
                        "input": "[7,8,9,11,12]",
                        "output": "1",
                        "explanation": "The smallest positive integer 1 is missing from the array."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "missing-number",
                "title": "Missing Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-the-duplicate-number",
                "title": "Find the Duplicate Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-all-numbers-disappeared-in-an-array",
                "title": "Find All Numbers Disappeared in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "couples-holding-hands",
                "title": "Couples Holding Hands",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "smallest-number-in-infinite-set",
                "title": "Smallest Number in Infinite Set",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-i",
                "title": "Maximum Number of Integers to Choose From a Range I",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "smallest-missing-non-negative-integer-after-operations",
                "title": "Smallest Missing Non-negative Integer After Operations",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-ii",
                "title": "Maximum Number of Integers to Choose From a Range II",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Think about how you would solve the problem in non-constant space.  Can you apply that logic to the existing space?",
            "We don't care about duplicates or non-positive integers",
            "Remember that O(2n) = O(n)"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int firstMissingPositive(vector<int>& nums) {\n    const int n = nums.size();\n\n    // Correct slot:\n    // nums[i] = i + 1\n    // nums[i] - 1 = i\n    // nums[nums[i] - 1] = nums[i]\n    for (int i = 0; i < n; ++i)\n      while (nums[i] > 0 && nums[i] <= n && nums[i] != nums[nums[i] - 1])\n        swap(nums[i], nums[nums[i] - 1]);\n\n    for (int i = 0; i < n; ++i)\n      if (nums[i] != i + 1)\n        return i + 1;\n\n    return n + 1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int firstMissingPositive(int[] nums) {\n    final int n = nums.length;\n\n    // Correct slot:\n    // nums[i] = i + 1\n    // nums[i] - 1 = i\n    // nums[nums[i] - 1] = nums[i]\n    for (int i = 0; i < n; ++i)\n      while (nums[i] > 0 && nums[i] <= n && nums[i] != nums[nums[i] - 1])\n        swap(nums, i, nums[i] - 1);\n\n    for (int i = 0; i < n; ++i)\n      if (nums[i] != i + 1)\n        return i + 1;\n\n    return n + 1;\n  }\n\n  private void swap(int[] nums, int i, int j) {\n    final int temp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = temp;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def firstMissingPositive(self, nums: List[int]) -> int:\n    n = len(nums)\n\n    # Correct slot:\n    # nums[i] = i + 1\n    # nums[i] - 1 = i\n    # nums[nums[i] - 1] = nums[i]\n    for i in range(n):\n      while nums[i] > 0 and nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n        nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i, num in enumerate(nums):\n      if num != i + 1:\n        return i + 1\n\n    return n + 1\n",
                "lang_text": "py"
            }
        }
    }
}