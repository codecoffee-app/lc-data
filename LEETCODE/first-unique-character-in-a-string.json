{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "387",
            "title": "First Unique Character in a String",
            "titleSlug": "first-unique-character-in-a-string",
            "content": "<p>Given a string <code>s</code>, <em>find the first non-repeating character in it and return its index</em>. If it does not exist, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"leetcode\"\n<strong>Output:</strong> 0\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"loveleetcode\"\n<strong>Output:</strong> 2\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \"aabb\"\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8388,
            "dislikes": 271,
            "similarQuestions": "[{\"title\": \"Sort Characters By Frequency\", \"titleSlug\": \"sort-characters-by-frequency\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"First Letter to Appear Twice\", \"titleSlug\": \"first-letter-to-appear-twice\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"2.5M\", \"totalAcceptedRaw\": 1507726, \"totalSubmissionRaw\": 2494899, \"acRate\": \"60.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s`, locate the index of the first character that appears only once. If no such character exists, return -1.",
                "constraints": [
                    "1 <= s.length <= 10<sup>5</sup>",
                    "s consists of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "leetcode",
                        "output": 0,
                        "explanation": "The first non-repeating character is 'l' at index 0."
                    },
                    {
                        "input": "loveleetcode",
                        "output": 2,
                        "explanation": "The first non-repeating character is 'v' at index 2."
                    },
                    {
                        "input": "aabb",
                        "output": -1,
                        "explanation": "All characters in the string repeat, so -1 is returned."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "sort-characters-by-frequency",
                "title": "Sort Characters By Frequency",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "first-letter-to-appear-twice",
                "title": "First Letter to Appear Twice",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int firstUniqChar(string s) {\n    vector<int> count(128);\n\n    for (const char c : s)\n      ++count[c];\n\n    for (int i = 0; i < s.length(); ++i)\n      if (count[s[i]] == 1)\n        return i;\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int firstUniqChar(String s) {\n    int[] count = new int[128];\n\n    for (final char c : s.toCharArray())\n      ++count[c];\n\n    for (int i = 0; i < s.length(); ++i)\n      if (count[s.charAt(i)] == 1)\n        return i;\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def firstUniqChar(self, s: str) -> int:\n    count = collections.Counter(s)\n\n    for i, c in enumerate(s):\n      if count[c] == 1:\n        return i\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}