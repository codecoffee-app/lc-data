{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "341",
            "title": "Flatten Nested List Iterator",
            "titleSlug": "flatten-nested-list-iterator",
            "content": "<p>You are given a nested list of integers <code>nestedList</code>. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.</p>\n\n<p>Implement the <code>NestedIterator</code> class:</p>\n\n<ul>\n\t<li><code>NestedIterator(List&lt;NestedInteger&gt; nestedList)</code> Initializes the iterator with the nested list <code>nestedList</code>.</li>\n\t<li><code>int next()</code> Returns the next integer in the nested list.</li>\n\t<li><code>boolean hasNext()</code> Returns <code>true</code> if there are still some integers in the nested list and <code>false</code> otherwise.</li>\n</ul>\n\n<p>Your code will be tested with the following pseudocode:</p>\n\n<pre>\ninitialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\n</pre>\n\n<p>If <code>res</code> matches the expected flattened list, then your code will be judged as correct.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nestedList = [[1,1],2,[1,1]]\n<strong>Output:</strong> [1,1,2,1,1]\n<strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nestedList = [1,[4,[6]]]\n<strong>Output:</strong> [1,4,6]\n<strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nestedList.length &lt;= 500</code></li>\n\t<li>The values of the integers in the nested list is in the range <code>[-10<sup>6</sup>, 10<sup>6</sup>]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4802,
            "dislikes": 1716,
            "similarQuestions": "[{\"title\": \"Flatten 2D Vector\", \"titleSlug\": \"flatten-2d-vector\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Zigzag Iterator\", \"titleSlug\": \"zigzag-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Mini Parser\", \"titleSlug\": \"mini-parser\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Array Nesting\", \"titleSlug\": \"array-nesting\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Iterator",
                    "slug": "iterator"
                }
            ],
            "stats": "{\"totalAccepted\": \"432.2K\", \"totalSubmission\": \"672.9K\", \"totalAcceptedRaw\": 432216, \"totalSubmissionRaw\": 672940, \"acRate\": \"64.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\n\nImplement the `NestedIterator` class:\n\n*   `NestedIterator(List<NestedInteger> nestedList)` Initializes the iterator with the nested list `nestedList`.\n*   `int next()` Returns the next integer in the nested list.\n*   `boolean hasNext()` Returns `true` if there are still some integers in the nested list and `false` otherwise.",
                "constraints": [
                    "1 <= nestedList.length <= 500",
                    "The values of the integers in the nested list is in the range [-10^6, 10^6]."
                ],
                "testcases": [
                    {
                        "input": "[[1,1],2,[1,1]]",
                        "output": "[1,1,2,1,1]",
                        "explanation": "The iterator should return the integers in the following order: [1, 1, 2, 1, 1]."
                    },
                    {
                        "input": "[1,[4,[6]]]",
                        "output": "[1,4,6]",
                        "explanation": "The iterator should return the integers in the following order: [1, 4, 6]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "flatten-2d-vector",
                "title": "Flatten 2D Vector",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "zigzag-iterator",
                "title": "Zigzag Iterator",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "mini-parser",
                "title": "Mini Parser",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "array-nesting",
                "title": "Array Nesting",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Iterator",
                "slug": "iterator"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class NestedIterator {\n public:\n  NestedIterator(vector<NestedInteger>& nestedList) {\n    addInteger(nestedList);\n  }\n\n  int next() {\n    const int num = q.front();\n    q.pop();\n    return num;\n  }\n\n  bool hasNext() {\n    return !q.empty();\n  }\n\n private:\n  queue<int> q;\n\n  void addInteger(const vector<NestedInteger>& nestedList) {\n    for (const NestedInteger& ni : nestedList)\n      if (ni.isInteger())\n        q.push(ni.getInteger());\n      else\n        addInteger(ni.getList());\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class NestedIterator implements Iterator<Integer> {\n  public NestedIterator(List<NestedInteger> nestedList) {\n    addInteger(nestedList);\n  }\n\n  @Override\n  public Integer next() {\n    return q.poll();\n  }\n\n  @Override\n  public boolean hasNext() {\n    return !q.isEmpty();\n  }\n\n  private Queue<Integer> q = new ArrayDeque<>();\n\n  private void addInteger(final List<NestedInteger> nestedList) {\n    for (final NestedInteger ni : nestedList)\n      if (ni.isInteger())\n        q.offer(ni.getInteger());\n      else\n        addInteger(ni.getList());\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class NestedIterator:\n  def __init__(self, nestedList: List[NestedInteger]):\n    self.q = collections.deque()\n    self.addInteger(nestedList)\n\n  def next(self) -> int:\n    return self.q.popleft()\n\n  def hasNext(self) -> bool:\n    return self.q\n\n  def addInteger(self, nestedList: List[NestedInteger]) -> None:\n    for ni in nestedList:\n      if ni.isInteger():\n        self.q.append(ni.getInteger())\n      else:\n        self.addInteger(ni.getList())\n",
                "lang_text": "py"
            }
        }
    }
}