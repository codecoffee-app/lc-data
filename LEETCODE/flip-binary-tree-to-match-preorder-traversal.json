{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "971",
            "title": "Flip Binary Tree To Match Preorder Traversal",
            "titleSlug": "flip-binary-tree-to-match-preorder-traversal",
            "content": "<p>You are given the <code>root</code> of a binary tree with <code>n</code> nodes, where each node is uniquely assigned a value from <code>1</code> to <code>n</code>. You are also given a sequence of <code>n</code> values <code>voyage</code>, which is the <strong>desired</strong> <a href=\"https://en.wikipedia.org/wiki/Tree_traversal#Pre-order\" target=\"_blank\"><strong>pre-order traversal</strong></a> of the binary tree.</p>\n\n<p>Any node in the binary tree can be <strong>flipped</strong> by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/15/fliptree.jpg\" style=\"width: 400px; height: 187px;\" />\n<p>Flip the <strong>smallest</strong> number of nodes so that the <strong>pre-order traversal</strong> of the tree <strong>matches</strong> <code>voyage</code>.</p>\n\n<p>Return <em>a list of the values of all <strong>flipped</strong> nodes. You may return the answer in <strong>any order</strong>. If it is <strong>impossible</strong> to flip the nodes in the tree to make the pre-order traversal match </em><code>voyage</code><em>, return the list </em><code>[-1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/02/1219-01.png\" style=\"width: 150px; height: 205px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2], voyage = [2,1]\n<strong>Output:</strong> [-1]\n<strong>Explanation:</strong> It is impossible to flip the nodes such that the pre-order traversal matches voyage.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/02/1219-02.png\" style=\"width: 150px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3], voyage = [1,3,2]\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/02/1219-02.png\" style=\"width: 150px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3], voyage = [1,2,3]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The tree&#39;s pre-order traversal already matches voyage, so no nodes need to be flipped.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is <code>n</code>.</li>\n\t<li><code>n == voyage.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= Node.val, voyage[i] &lt;= n</code></li>\n\t<li>All the values in the tree are <strong>unique</strong>.</li>\n\t<li>All the values in <code>voyage</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 920,
            "dislikes": 267,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"40.8K\", \"totalSubmission\": \"81.1K\", \"totalAcceptedRaw\": 40821, \"totalSubmissionRaw\": 81054, \"acRate\": \"50.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree with 'n' nodes, where each node has a unique value from 1 to 'n', and a sequence 'voyage' representing the desired pre-order traversal of the tree.  You can flip any node by swapping its left and right subtrees. Determine the minimum number of flips required to make the tree's pre-order traversal match 'voyage'.\n\nReturn a list of the values of all flipped nodes. The order of values in the list doesn't matter. If it's impossible to achieve the desired pre-order traversal by flipping nodes, return the list `[-1]`.",
                "constraints": [
                    "The number of nodes in the tree is `n`.",
                    "`n == voyage.length`",
                    "`1 <= n <= 100`",
                    "`1 <= Node.val, voyage[i] <= n`",
                    "All the values in the tree are **unique**.",
                    "All the values in `voyage` are **unique**."
                ],
                "testcases": [
                    {
                        "input": "root = [1,2], voyage = [2,1]",
                        "output": "[-1]",
                        "explanation": "It is impossible to flip the nodes such that the pre-order traversal matches voyage."
                    },
                    {
                        "input": "root = [1,2,3], voyage = [1,3,2]",
                        "output": "[1]",
                        "explanation": "Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage."
                    },
                    {
                        "input": "root = [1,2,3], voyage = [1,2,3]",
                        "output": "[]",
                        "explanation": "The tree's pre-order traversal already matches voyage, so no nodes need to be flipped."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> flipMatchVoyage(TreeNode* root, vector<int>& voyage) {\n    vector<int> ans;\n    dfs(root, 0, voyage, ans);\n    return ans;\n  }\n\n private:\n  void dfs(TreeNode* root, int&& i, const vector<int>& voyage,\n           vector<int>& ans) {\n    if (root == nullptr)\n      return;\n    if (root->val != voyage[i++]) {\n      ans.clear();\n      ans.push_back(-1);\n      return;\n    }\n\n    if (i < voyage.size() && root->left && root->left->val != voyage[i]) {\n      // Flip root\n      ans.push_back(root->val);\n      dfs(root->right, move(i), voyage, ans);\n      dfs(root->left, move(i), voyage, ans);\n    } else {\n      dfs(root->left, move(i), voyage, ans);\n      dfs(root->right, move(i), voyage, ans);\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {\n    List<Integer> ans = new ArrayList<>();\n\n    dfs(root, voyage, ans);\n\n    return ans;\n  }\n\n  private int i = 0;\n\n  private void dfs(TreeNode root, int[] voyage, List<Integer> ans) {\n    if (root == null)\n      return;\n    if (root.val != voyage[i++]) {\n      ans.clear();\n      ans.add(-1);\n      return;\n    }\n\n    if (i < voyage.length && root.left != null && root.left.val != voyage[i]) {\n      // Flip root\n      ans.add(root.val);\n      dfs(root.right, voyage, ans);\n      dfs(root.left, voyage, ans);\n    } else {\n      dfs(root.left, voyage, ans);\n      dfs(root.right, voyage, ans);\n    }\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}