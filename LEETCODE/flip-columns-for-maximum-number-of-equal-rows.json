{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1072",
            "title": "Flip Columns For Maximum Number of Equal Rows",
            "titleSlug": "flip-columns-for-maximum-number-of-equal-rows",
            "content": "<p>You are given an <code>m x n</code> binary matrix <code>matrix</code>.</p>\n\n<p>You can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from <code>0</code> to <code>1</code> or vice versa).</p>\n\n<p>Return <em>the maximum number of rows that have all values equal after some number of flips</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[0,1],[1,1]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> After flipping no values, 1 row has all values equal.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[0,1],[1,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> After flipping values in the first column, both rows have equal values.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[0,0,0],[0,0,1],[1,1,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> After flipping values in the first two columns, the last two rows have equal values.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>matrix[i][j]</code> is either&nbsp;<code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 723,
            "dislikes": 50,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.9K\", \"totalSubmission\": \"34.2K\", \"totalAcceptedRaw\": 21859, \"totalSubmissionRaw\": 34219, \"acRate\": \"63.9%\"}",
            "hints": [
                "Flipping a subset of columns is like doing a bitwise XOR of some number K onto each row.  We want rows X with X ^ K = all 0s or all 1s.  This is the same as X = X^K ^K = (all 0s or all 1s) ^ K, so we want to count rows that have opposite bits set.  For example, if K = 1, then we count rows X = (00000...001, or 1111....110)."
            ],
            "rephrased": {
                "body": "You are given an `m x n` binary matrix `matrix`. You can choose any number of columns in the matrix and flip every cell in that column (i.e., change the value of the cell from `0` to `1` or vice versa).  Return the maximum number of rows that have all values equal after some number of flips.",
                "constraints": [
                    "m == matrix.length",
                    "n == matrix[i].length",
                    "1 <= m, n <= 300",
                    "matrix[i][j] is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "[[0,1],[1,1]]",
                        "output": "1",
                        "explanation": "After performing no column flips, one row has all values equal."
                    },
                    {
                        "input": "[[0,1],[1,0]]",
                        "output": "2",
                        "explanation": "After flipping the first column, both rows have equal values (all 1s)."
                    },
                    {
                        "input": "[[0,0,0],[0,0,1],[1,1,0]]",
                        "output": "2",
                        "explanation": "After flipping the first two columns, the last two rows have equal values (all 1s)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Flipping a subset of columns is like doing a bitwise XOR of some number K onto each row.  We want rows X with X ^ K = all 0s or all 1s.  This is the same as X = X^K ^K = (all 0s or all 1s) ^ K, so we want to count rows that have opposite bits set.  For example, if K = 1, then we count rows X = (00000...001, or 1111....110)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxEqualRowsAfterFlips(vector<vector<int>>& matrix) {\n    const int m = matrix.size();\n    const int n = matrix[0].size();\n    int ans = 0;\n    vector<int> flip(n);\n    unordered_set<int> seen;\n\n    for (int i = 0; i < m; ++i) {\n      if (seen.count(i))\n        continue;\n      int count = 0;\n      for (int j = 0; j < n; ++j)\n        flip[j] = 1 ^ matrix[i][j];\n      for (int k = 0; k < m; ++k)\n        if (matrix[k] == matrix[i] || matrix[k] == flip) {\n          seen.insert(k);\n          ++count;\n        }\n      ans = max(ans, count);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxEqualRowsAfterFlips(int[][] matrix) {\n    final int m = matrix.length;\n    final int n = matrix[0].length;\n    int ans = 0;\n    int[] flip = new int[n];\n    Set<Integer> seen = new HashSet<>();\n\n    for (int i = 0; i < m; ++i) {\n      if (seen.contains(i))\n        continue;\n      int count = 0;\n      for (int j = 0; j < n; ++j)\n        flip[j] = 1 ^ matrix[i][j];\n      for (int k = 0; k < m; ++k)\n        if (Arrays.equals(matrix[k], matrix[i]) || Arrays.equals(matrix[k], flip)) {\n          seen.add(k);\n          ++count;\n        }\n      ans = Math.max(ans, count);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxEqualRowsAfterFlips(self, matrix: List[List[int]]) -> int:\n    patterns = [tuple(a ^ row[0] for a in row) for row in matrix]\n    return max(Counter(patterns).values())\n",
                "lang_text": "py"
            }
        }
    }
}