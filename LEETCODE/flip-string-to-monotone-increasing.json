{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "926",
            "title": "Flip String to Monotone Increasing",
            "titleSlug": "flip-string-to-monotone-increasing",
            "content": "<p>A binary string is monotone increasing if it consists of some number of <code>0</code>&#39;s (possibly none), followed by some number of <code>1</code>&#39;s (also possibly none).</p>\n\n<p>You are given a binary string <code>s</code>. You can flip <code>s[i]</code> changing it from <code>0</code> to <code>1</code> or from <code>1</code> to <code>0</code>.</p>\n\n<p>Return <em>the minimum number of flips to make </em><code>s</code><em> monotone increasing</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;00110&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We flip the last digit to get 00111.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;010110&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We flip to get 011111, or alternatively 000111.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;00011000&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We flip to get 00000000.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4342,
            "dislikes": 176,
            "similarQuestions": "[{\"title\": \"Minimum Cost to Make All Characters Equal\", \"titleSlug\": \"minimum-cost-to-make-all-characters-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"185K\", \"totalSubmission\": \"301.3K\", \"totalAcceptedRaw\": 184990, \"totalSubmissionRaw\": 301264, \"acRate\": \"61.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "A binary string is considered monotone increasing if it consists of a sequence of 0s (possibly none) followed by a sequence of 1s (also possibly none).\n\nGiven a binary string `s`, you can flip any character `s[i]` from 0 to 1 or from 1 to 0.\n\nDetermine the minimum number of flips required to transform `s` into a monotone increasing string.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s[i] is either '0' or '1'."
                ],
                "testcases": [
                    {
                        "input": "00110",
                        "output": "1",
                        "explanation": "By flipping the last digit to 1, we obtain '00111', which is monotone increasing. This requires only one flip."
                    },
                    {
                        "input": "010110",
                        "output": "2",
                        "explanation": "We can flip the string to '011111' or '000111'. Both require two flips."
                    },
                    {
                        "input": "00011000",
                        "output": "2",
                        "explanation": "We can flip the string to '00000000' which requires two flips."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-cost-to-make-all-characters-equal",
                "title": "Minimum Cost to Make All Characters Equal",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minFlipsMonoIncr(string s) {\n    // # of chars to be flilpped to make substring so far monotone increasing\n    int dp = 0;\n    int count1 = 0;\n\n    for (const char c : s)\n      if (c == '0')\n        // 1. Flip '0'.\n        // 2. Keep '0' and flip previous '1's.\n        dp = min(dp + 1, count1);\n      else\n        ++count1;\n\n    return dp;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minFlipsMonoIncr(String s) {\n    // # of chars to be flilpped to make substring so far monotone increasing\n    int dp = 0;\n    int count1 = 0;\n\n    for (final char c : s.toCharArray())\n      if (c == '0')\n        // 1. Flip '0'.\n        // 2. Keep '0' and flip previous '1's.\n        dp = Math.min(dp + 1, count1);\n      else\n        ++count1;\n\n    return dp;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minFlipsMonoIncr(self, s: str) -> int:\n    # number of chars to be flilpped to make substring so far monotone increasing\n    dp = 0\n    count1 = 0\n\n    for c in s:\n      if c == '0':\n        # 1. Flip '0'.\n        # 2. Keep '0' and flip previous '1's.\n        dp = min(dp + 1, count1)\n      else:\n        count1 += 1\n\n    return dp\n",
                "lang_text": "py"
            }
        }
    }
}