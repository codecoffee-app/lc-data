{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "733",
            "title": "Flood Fill",
            "titleSlug": "flood-fill",
            "content": "<p>An image is represented by an <code>m x n</code> integer grid <code>image</code> where <code>image[i][j]</code> represents the pixel value of the image.</p>\n\n<p>You are also given three integers <code>sr</code>, <code>sc</code>, and <code>color</code>. You should perform a <strong>flood fill</strong> on the image starting from the pixel <code>image[sr][sc]</code>.</p>\n\n<p>To perform a <strong>flood fill</strong>, consider the starting pixel, plus any pixels connected <strong>4-directionally</strong> to the starting pixel of the same color as the starting pixel, plus any pixels connected <strong>4-directionally</strong> to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with <code>color</code>.</p>\n\n<p>Return <em>the modified image after performing the flood fill</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/01/flood1-grid.jpg\" style=\"width: 613px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2\n<strong>Output:</strong> [[2,2,2],[2,2,0],[2,0,1]]\n<strong>Explanation:</strong> From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0\n<strong>Output:</strong> [[0,0,0],[0,0,0]]\n<strong>Explanation:</strong> The starting pixel is already colored 0, so no changes are made to the image.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == image.length</code></li>\n\t<li><code>n == image[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>0 &lt;= image[i][j], color &lt; 2<sup>16</sup></code></li>\n\t<li><code>0 &lt;= sr &lt; m</code></li>\n\t<li><code>0 &lt;= sc &lt; n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8053,
            "dislikes": 806,
            "similarQuestions": "[{\"title\": \"Island Perimeter\", \"titleSlug\": \"island-perimeter\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"831.1K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 831077, \"totalSubmissionRaw\": 1310858, \"acRate\": \"63.4%\"}",
            "hints": [
                "Write a recursive function that paints the pixel if it's the correct color, then recurses on neighboring pixels."
            ],
            "rephrased": {
                "body": "Given an `m x n` integer grid `image` representing an image where `image[i][j]` is the pixel value, perform a flood fill starting from pixel `image[sr][sc]` with the new color `color`.  Flood fill involves changing the color of the starting pixel and all 4-directionally connected pixels of the same color to the new `color`.  Return the modified image.",
                "constraints": [
                    "m == image.length",
                    "n == image[i].length",
                    "1 <= m, n <= 50",
                    "0 <= image[i][j], color < 2<sup>16</sup>",
                    "0 <= sr < m",
                    "0 <= sc < n"
                ],
                "testcases": [
                    {
                        "input": "image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2",
                        "output": "[[2,2,2],[2,2,0],[2,0,1]]",
                        "explanation": "Starting from the center (1,1), all connected pixels with the same initial color (1) are changed to the new color (2). Note that the pixel at the bottom corner (2,2) remains unchanged because it's not 4-directionally connected to the starting pixel with a path of the same color."
                    },
                    {
                        "input": "image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0",
                        "output": "[[0,0,0],[0,0,0]]",
                        "explanation": "The starting pixel already has the desired color (0), so no changes are made."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "island-perimeter",
                "title": "Island Perimeter",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Write a recursive function that paints the pixel if it's the correct color, then recurses on neighboring pixels."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ]
    }
}