{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1042",
            "title": "Flower Planting With No Adjacent",
            "titleSlug": "flower-planting-with-no-adjacent",
            "content": "<p>You have <code>n</code> gardens, labeled from <code>1</code> to <code>n</code>, and an array <code>paths</code> where <code>paths[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> describes a bidirectional path between garden <code>x<sub>i</sub></code> to garden <code>y<sub>i</sub></code>. In each garden, you want to plant one of 4 types of flowers.</p>\n\n<p>All gardens have <strong>at most 3</strong> paths coming into or leaving it.</p>\n\n<p>Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.</p>\n\n<p>Return <em><strong>any</strong> such a choice as an array </em><code>answer</code><em>, where </em><code>answer[i]</code><em> is the type of flower planted in the </em><code>(i+1)<sup>th</sup></code><em> garden. The flower types are denoted </em><code>1</code><em>, </em><code>2</code><em>, </em><code>3</code><em>, or </em><code>4</code><em>. It is guaranteed an answer exists.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, paths = [[1,2],[2,3],[3,1]]\n<strong>Output:</strong> [1,2,3]\n<strong>Explanation:</strong>\nGardens 1 and 2 have different types.\nGardens 2 and 3 have different types.\nGardens 3 and 1 have different types.\nHence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, paths = [[1,2],[3,4]]\n<strong>Output:</strong> [1,2,1,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]\n<strong>Output:</strong> [1,2,3,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= paths.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>paths[i].length == 2</code></li>\n\t<li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n</code></li>\n\t<li><code>x<sub>i</sub> != y<sub>i</sub></code></li>\n\t<li>Every garden has <strong>at most 3</strong> paths coming into or leaving it.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1374,
            "dislikes": 711,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"74.3K\", \"totalSubmission\": \"145.6K\", \"totalAcceptedRaw\": 74279, \"totalSubmissionRaw\": 145558, \"acRate\": \"51.0%\"}",
            "hints": [
                "Since each garden is connected to at most 3 gardens, there's always an available color for each garden.  For example, if one garden is next to gardens with colors 1, 3, 4,  then color #2 is available."
            ],
            "rephrased": {
                "body": "You are given `n` gardens, labeled from 1 to `n`, and a list of bidirectional paths `paths` where `paths[i] = [x_i, y_i]` represents a path between garden `x_i` and garden `y_i`.  You need to plant one of 4 types of flowers in each garden. The goal is to choose a flower type for each garden such that no two adjacent gardens (connected by a path) have the same flower type. Since each garden has at most 3 paths, this is always guaranteed to be possible. Return an array `answer` of length `n` where `answer[i]` represents the flower type (1, 2, 3, or 4) planted in the (i+1)th garden.  Return any valid flower assignment.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "0 <= paths.length <= 2 * 10^4",
                    "paths[i].length == 2",
                    "1 <= x_i, y_i <= n",
                    "x_i != y_i",
                    "Every garden has at most 3 paths coming into or leaving it."
                ],
                "testcases": [
                    {
                        "input": "n = 3, paths = [[1,2],[2,3],[3,1]]",
                        "output": "[1,2,3]",
                        "explanation": "Gardens 1 and 2 have different flower types, as do gardens 2 and 3, and gardens 3 and 1. [1,2,3] is just one example; other valid solutions exist (e.g., [1,2,4], [1,4,2], [3,2,1])."
                    },
                    {
                        "input": "n = 4, paths = [[1,2],[3,4]]",
                        "output": "[1,2,1,2]",
                        "explanation": null
                    },
                    {
                        "input": "n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]",
                        "output": "[1,2,3,4]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Since each garden is connected to at most 3 gardens, there's always an available color for each garden.  For example, if one garden is next to gardens with colors 1, 3, 4,  then color #2 is available."
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ]
    }
}