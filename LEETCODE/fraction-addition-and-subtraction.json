{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "592",
            "title": "Fraction Addition and Subtraction",
            "titleSlug": "fraction-addition-and-subtraction",
            "content": "<p>Given a string <code>expression</code> representing an expression of fraction addition and subtraction, return the calculation result in string format.</p>\n\n<p>The final result should be an <a href=\"https://en.wikipedia.org/wiki/Irreducible_fraction\" target=\"_blank\">irreducible fraction</a>. If your final result is an integer, change it to the format of a fraction that has a denominator <code>1</code>. So in this case, <code>2</code> should be converted to <code>2/1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;-1/2+1/2&quot;\n<strong>Output:</strong> &quot;0/1&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;-1/2+1/2+1/3&quot;\n<strong>Output:</strong> &quot;1/3&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;1/3-1/2&quot;\n<strong>Output:</strong> &quot;-1/6&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The input string only contains <code>&#39;0&#39;</code> to <code>&#39;9&#39;</code>, <code>&#39;/&#39;</code>, <code>&#39;+&#39;</code> and <code>&#39;-&#39;</code>. So does the output.</li>\n\t<li>Each fraction (input and output) has the format <code>&plusmn;numerator/denominator</code>. If the first input fraction or the output is positive, then <code>&#39;+&#39;</code> will be omitted.</li>\n\t<li>The input only contains valid <strong>irreducible fractions</strong>, where the <strong>numerator</strong> and <strong>denominator</strong> of each fraction will always be in the range <code>[1, 10]</code>. If the denominator is <code>1</code>, it means this fraction is actually an integer in a fraction format defined above.</li>\n\t<li>The number of given fractions will be in the range <code>[1, 10]</code>.</li>\n\t<li>The numerator and denominator of the <strong>final result</strong> are guaranteed to be valid and in the range of <strong>32-bit</strong> int.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 379,
            "dislikes": 502,
            "similarQuestions": "[{\"title\": \"Solve the Equation\", \"titleSlug\": \"solve-the-equation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"34.5K\", \"totalSubmission\": \"65.3K\", \"totalAcceptedRaw\": 34520, \"totalSubmissionRaw\": 65280, \"acRate\": \"52.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `expression` representing an expression of fraction addition and subtraction, return the calculation result in string format.\n\nThe final result should be an irreducible fraction. If the final result is an integer, format it as a fraction with a denominator of 1. For example, `2` should be converted to `2/1`.",
                "constraints": [
                    "The input string only contains '0' to '9', '/', '+', and '-'. So does the output.",
                    "Each fraction (input and output) has the format \u00b1numerator/denominator. If the first input fraction or the output is positive, then '+' will be omitted.",
                    "The input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1, 10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.",
                    "The number of given fractions will be in the range [1, 10].",
                    "The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int."
                ],
                "testcases": [
                    {
                        "input": "-1/2+1/2",
                        "output": "0/1",
                        "explanation": null
                    },
                    {
                        "input": "-1/2+1/2+1/3",
                        "output": "1/3",
                        "explanation": null
                    },
                    {
                        "input": "1/3-1/2",
                        "output": "-1/6",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "solve-the-equation",
                "title": "Solve the Equation",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string fractionAddition(string expression) {\n    istringstream iss(expression);\n    char _;\n    int a;\n    int b;\n    int A = 0;\n    int B = 1;\n\n    // Init: A / B = 0 / 1\n    // A / B + a / b = (Ab + aB) / Bb\n    // So, each round set A = Ab + aB, B = Bb\n    while (iss >> a >> _ >> b) {\n      A = A * b + a * B;\n      B *= b;\n      const int g = abs(__gcd(A, B));\n      A /= g;\n      B /= g;\n    }\n\n    return to_string(A) + \"/\" + to_string(B);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String fractionAddition(String expression) {\n    Scanner sc = new Scanner(expression).useDelimiter(\"/|(?=[+-])\");\n    int A = 0;\n    int B = 1;\n\n    // Init: A / B = 0 / 1\n    // A / B + a / b = (Ab + aB) / Bb\n    // So, each round set A = Ab + aB, B = Bb\n    while (sc.hasNext()) {\n      final int a = sc.nextInt();\n      final int b = sc.nextInt();\n      A = A * b + a * B;\n      B *= b;\n      final int g = gcd(A, B);\n      A /= g;\n      B /= g;\n    }\n\n    return A + \"/\" + B;\n  }\n\n  private int gcd(int a, int b) {\n    return a == 0 ? Math.abs(b) : gcd(b % a, a);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def fractionAddition(self, expression: str) -> str:\n    ints = list(map(int, re.findall('[+-]?[0-9]+', expression)))\n    A = 0\n    B = 1\n\n    for a, b in zip(ints[::2], ints[1::2]):\n      A = A * b + a * B\n      B *= b\n      g = math.gcd(A, B)\n      A //= g\n      B //= g\n\n    return str(A) + '/' + str(B)\n",
                "lang_text": "py"
            }
        }
    }
}