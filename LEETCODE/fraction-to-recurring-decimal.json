{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "166",
            "title": "Fraction to Recurring Decimal",
            "titleSlug": "fraction-to-recurring-decimal",
            "content": "<p>Given two integers representing the <code>numerator</code> and <code>denominator</code> of a fraction, return <em>the fraction in string format</em>.</p>\n\n<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>\n\n<p>If multiple answers are possible, return <strong>any of them</strong>.</p>\n\n<p>It is <strong>guaranteed</strong> that the length of the answer string is less than <code>10<sup>4</sup></code> for all the given inputs.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numerator = 1, denominator = 2\n<strong>Output:</strong> &quot;0.5&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numerator = 2, denominator = 1\n<strong>Output:</strong> &quot;2&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> numerator = 4, denominator = 333\n<strong>Output:</strong> &quot;0.(012)&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;=&nbsp;numerator, denominator &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>denominator != 0</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2012,
            "dislikes": 3609,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"217.9K\", \"totalSubmission\": \"882.3K\", \"totalAcceptedRaw\": 217941, \"totalSubmissionRaw\": 882265, \"acRate\": \"24.7%\"}",
            "hints": [
                "No scary math, just apply elementary math knowledge. Still remember how to perform a <i>long division</i>?",
                "Try a long division on 4/9, the repeating part is obvious. Now try 4/333. Do you see a pattern?",
                "Notice that once the remainder starts repeating, so does the divided result.",
                "Be wary of edge cases! List out as many test cases as you can think of and test your code thoroughly."
            ],
            "rephrased": {
                "body": "Given the numerator and denominator of a fraction, return the fraction in string format. If the fractional part is repeating, enclose the repeating part in parentheses.  Multiple correct answers may exist; return any one of them.",
                "constraints": [
                    "-2<sup>31</sup> <= numerator, denominator <= 2<sup>31</sup> - 1",
                    "denominator != 0",
                    "The length of the answer string is guaranteed to be less than 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "numerator = 1, denominator = 2",
                        "output": "\"0.5\"",
                        "explanation": null
                    },
                    {
                        "input": "numerator = 2, denominator = 1",
                        "output": "\"2\"",
                        "explanation": null
                    },
                    {
                        "input": "numerator = 4, denominator = 333",
                        "output": "\"0.(012)\"",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "No scary math, just apply elementary math knowledge. Still remember how to perform a <i>long division</i>?",
            "Try a long division on 4/9, the repeating part is obvious. Now try 4/333. Do you see a pattern?",
            "Notice that once the remainder starts repeating, so does the divided result.",
            "Be wary of edge cases! List out as many test cases as you can think of and test your code thoroughly."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string fractionToDecimal(int numerator, int denominator) {\n    if (numerator == 0)\n      return \"0\";\n\n    string ans;\n\n    if (numerator < 0 ^ denominator < 0)\n      ans += \"-\";\n\n    long n = labs(numerator);\n    long d = labs(denominator);\n    ans += to_string(n / d);\n\n    if (n % d == 0)\n      return ans;\n\n    ans += '.';\n    unordered_map<int, int> seen;\n\n    for (long r = n % d; r; r %= d) {\n      if (const auto it = seen.find(r); it != seen.cend()) {\n        ans.insert(it->second, 1, '(');\n        ans += ')';\n        break;\n      }\n      seen[r] = ans.size();\n      r *= 10;\n      ans += to_string(r / d);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String fractionToDecimal(int numerator, int denominator) {\n    if (numerator == 0)\n      return \"0\";\n\n    StringBuilder sb = new StringBuilder();\n\n    if (numerator < 0 ^ denominator < 0)\n      sb.append(\"-\");\n\n    long n = Math.abs((long) numerator);\n    long d = Math.abs((long) denominator);\n    sb.append(n / d);\n\n    if (n % d == 0)\n      return sb.toString();\n\n    sb.append(\".\");\n    Map<Long, Integer> seen = new HashMap<>();\n\n    for (long r = n % d; r > 0; r %= d) {\n      if (seen.containsKey(r)) {\n        sb.insert(seen.get(r), \"(\");\n        sb.append(\")\");\n        break;\n      }\n      seen.put(r, sb.length());\n      r *= 10;\n      sb.append(r / d);\n    }\n\n    return sb.toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n    if numerator == 0:\n      return '0'\n\n    ans = ''\n\n    if (numerator < 0) ^ (denominator < 0):\n      ans += '-'\n\n    numerator = abs(numerator)\n    denominator = abs(denominator)\n    ans += str(numerator // denominator)\n\n    if numerator % denominator == 0:\n      return ans\n\n    ans += '.'\n    dict = {}\n\n    remainder = numerator % denominator\n    while remainder:\n      if remainder in dict:\n        ans = ans[:dict[remainder]] + '(' + ans[dict[remainder]:] + ')'\n        break\n      dict[remainder] = len(ans)\n      remainder *= 10\n      ans += str(remainder // denominator)\n      remainder %= denominator\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}