{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "514",
            "title": "Freedom Trail",
            "titleSlug": "freedom-trail",
            "content": "<p>In the video game Fallout 4, the quest <strong>&quot;Road to Freedom&quot;</strong> requires players to reach a metal dial called the <strong>&quot;Freedom Trail Ring&quot;</strong> and use the dial to spell a specific keyword to open the door.</p>\n\n<p>Given a string <code>ring</code> that represents the code engraved on the outer ring and another string <code>key</code> that represents the keyword that needs to be spelled, return <em>the minimum number of steps to spell all the characters in the keyword</em>.</p>\n\n<p>Initially, the first character of the ring is aligned at the <code>&quot;12:00&quot;</code> direction. You should spell all the characters in <code>key</code> one by one by rotating <code>ring</code> clockwise or anticlockwise to make each character of the string key aligned at the <code>&quot;12:00&quot;</code> direction and then by pressing the center button.</p>\n\n<p>At the stage of rotating the ring to spell the key character <code>key[i]</code>:</p>\n\n<ol>\n\t<li>You can rotate the ring clockwise or anticlockwise by one place, which counts as <strong>one step</strong>. The final purpose of the rotation is to align one of <code>ring</code>&#39;s characters at the <code>&quot;12:00&quot;</code> direction, where this character must equal <code>key[i]</code>.</li>\n\t<li>If the character <code>key[i]</code> has been aligned at the <code>&quot;12:00&quot;</code> direction, press the center button to spell, which also counts as <strong>one step</strong>. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/ring.jpg\" style=\"width: 450px; height: 450px;\" />\n<pre>\n<strong>Input:</strong> ring = &quot;godding&quot;, key = &quot;gd&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nFor the first key character &#39;g&#39;, since it is already in place, we just need 1 step to spell this character. \nFor the second key character &#39;d&#39;, we need to rotate the ring &quot;godding&quot; anticlockwise by two steps to make it become &quot;ddinggo&quot;.\nAlso, we need 1 more step for spelling.\nSo the final output is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ring = &quot;godding&quot;, key = &quot;godding&quot;\n<strong>Output:</strong> 13\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ring.length, key.length &lt;= 100</code></li>\n\t<li><code>ring</code> and <code>key</code> consist of only lower case English letters.</li>\n\t<li>It is guaranteed that <code>key</code> could always be spelled by rotating <code>ring</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 883,
            "dislikes": 37,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"34.9K\", \"totalSubmission\": \"73.8K\", \"totalAcceptedRaw\": 34888, \"totalSubmissionRaw\": 73765, \"acRate\": \"47.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "In the video game Fallout 4, the quest \"Road to Freedom\" requires players to manipulate a dial called the \"Freedom Trail Ring\" to spell a specific keyword and open a door.\n\nYou are given two strings: `ring`, representing the characters engraved on the outer ring, and `key`, representing the keyword to be spelled. Your task is to find the minimum number of steps required to spell all characters in the `key`.\n\nInitially, the first character of the `ring` is at the \"12:00\" position. To spell a character, you must rotate the `ring` (clockwise or anticlockwise) until the desired character from `key` is at the \"12:00\" position. Each rotation is one step. Once the character is aligned, you press the center button (one step) to spell it and move on to the next character in `key`.",
                "constraints": [
                    "1 <= ring.length, key.length <= 100",
                    "ring and key consist of only lowercase English letters.",
                    "It is guaranteed that key can always be spelled by rotating ring."
                ],
                "testcases": [
                    {
                        "input": "ring = \"godding\", key = \"gd\"",
                        "output": "4",
                        "explanation": "For the first key character 'g', since it is already in place, we just need 1 step to spell this character. For the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\". Also, we need 1 more step for spelling. So the final output is 4."
                    },
                    {
                        "input": "ring = \"godding\", key = \"godding\"",
                        "output": "13",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findRotateSteps(string ring, string key) {\n    return dfs(ring, key, 0, {}) + key.length();\n  }\n\n private:\n  // # of rotates of ring to match key[index:]\n  int dfs(const string& ring, const string& key, int index,\n          unordered_map<string, int>&& memo) {\n    if (index == key.length())\n      return 0;\n    // Add the index to prevent duplicate\n    const string hashKey = ring + to_string(index);\n    if (const auto it = memo.find(hashKey); it != memo.cend())\n      return it->second;\n\n    int ans = INT_MAX;\n\n    // For each ring[i] == key[index]\n    // We rotate the ring to match ring[i] w/ key[index]\n    // Then recursively match newRing w/ key[index + 1:]\n    for (size_t i = 0; i < ring.length(); ++i)\n      if (ring[i] == key[index]) {\n        const int minRotates = min(i, ring.length() - i);\n        const string& newRing = ring.substr(i) + ring.substr(0, i);\n        const int remainingRotates = dfs(newRing, key, index + 1, move(memo));\n        ans = min(ans, minRotates + remainingRotates);\n      }\n\n    return memo[hashKey] = ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findRotateSteps(String ring, String key) {\n    Map<String, Integer> memo = new HashMap<>();\n    return dfs(ring, key, 0, memo) + key.length();\n  }\n\n  // # of rotates of ring to match key[index:]\n  private int dfs(final String ring, final String key, int index, Map<String, Integer> memo) {\n    if (index == key.length())\n      return 0;\n    // Add the index to prevent duplicate\n    final String hashKey = ring + index;\n    if (memo.containsKey(hashKey))\n      return memo.get(hashKey);\n\n    int ans = Integer.MAX_VALUE;\n\n    // For each ring[i] == key[index]\n    // We rotate the ring to match ring[i] w/ key[index]\n    // Then recursively match newRing w/ key[index + 1:]\n    for (int i = 0; i < ring.length(); ++i)\n      if (ring.charAt(i) == key.charAt(index)) {\n        final int minRotates = Math.min(i, ring.length() - i);\n        final String newRing = ring.substring(i) + ring.substring(0, i);\n        final int remainingRotates = dfs(newRing, key, index + 1, memo);\n        ans = Math.min(ans, minRotates + remainingRotates);\n      }\n\n    memo.put(hashKey, ans);\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findRotateSteps(self, ring: str, key: str) -> int:\n    # Number of rotates of ring to match key[index:]\n    @functools.lru_cache(None)\n    def dfs(ring: str, index: int) -> int:\n      if index == len(key):\n        return 0\n\n      ans = math.inf\n\n      # For each ring[i] == key[index]\n      # We rotate the ring to match ring[i] w/ key[index]\n      # Then recursively match newRing w/ key[index + 1:]\n      for i, r in enumerate(ring):\n        if r == key[index]:\n          minRotates = min(i, len(ring) - i)\n          newRing = ring[i:] + ring[:i]\n          remainingRotates = dfs(newRing, index + 1)\n          ans = min(ans, minRotates + remainingRotates)\n\n      return ans\n\n    return dfs(ring, 0) + len(key)\n",
                "lang_text": "py"
            }
        }
    }
}