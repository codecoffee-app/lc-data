{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1838",
            "title": "Frequency of the Most Frequent Element",
            "titleSlug": "frequency-of-the-most-frequent-element",
            "content": "<p>The <strong>frequency</strong> of an element is the number of times it occurs in an array.</p>\n\n<p>You are given an integer array <code>nums</code> and an integer <code>k</code>. In one operation, you can choose an index of <code>nums</code> and increment the element at that index by <code>1</code>.</p>\n\n<p>Return <em>the <strong>maximum possible frequency</strong> of an element after performing <strong>at most</strong> </em><code>k</code><em> operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,4], k = 5\n<strong>Output:</strong> 3<strong>\nExplanation:</strong> Increment the first element three times and the second element two times to make nums = [4,4,4].\n4 has a frequency of 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,8,13], k = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are multiple optimal solutions:\n- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.\n- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.\n- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,9,6], k = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4208,
            "dislikes": 151,
            "similarQuestions": "[{\"title\": \"Find All Lonely Numbers in the Array\", \"titleSlug\": \"find-all-lonely-numbers-in-the-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Nice Subarray\", \"titleSlug\": \"longest-nice-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Apply Operations to Maximize Frequency Score\", \"titleSlug\": \"apply-operations-to-maximize-frequency-score\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"121K\", \"totalSubmission\": \"260.4K\", \"totalAcceptedRaw\": 120962, \"totalSubmissionRaw\": 260430, \"acRate\": \"46.4%\"}",
            "hints": [
                "Note that you can try all values in a brute force manner and find the maximum frequency of that value.",
                "To find the maximum frequency of a value consider the biggest elements smaller than or equal to this value"
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `k`, you can increment any element in `nums` by 1 in a single operation. Determine the maximum possible frequency of any element in `nums` after performing at most `k` operations.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^5",
                    "1 <= k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,4], k = 5",
                        "output": "3",
                        "explanation": "By incrementing the first element three times and the second element two times, the array becomes [4,4,4]. The element 4 has a frequency of 3, which is the maximum achievable."
                    },
                    {
                        "input": "nums = [1,4,8,13], k = 5",
                        "output": "2",
                        "explanation": "Several optimal solutions exist. For instance:\n- Incrementing the first element three times yields [4,4,8,13], with 4 having a frequency of 2.\n- Incrementing the second element four times yields [1,8,8,13], with 8 having a frequency of 2.\n- Incrementing the third element five times yields [1,4,13,13], with 13 having a frequency of 2."
                    },
                    {
                        "input": "nums = [3,9,6], k = 2",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-all-lonely-numbers-in-the-array",
                "title": "Find All Lonely Numbers in the Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-nice-subarray",
                "title": "Longest Nice Subarray",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "apply-operations-to-maximize-frequency-score",
                "title": "Apply Operations to Maximize Frequency Score",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Note that you can try all values in a brute force manner and find the maximum frequency of that value.",
            "To find the maximum frequency of a value consider the biggest elements smaller than or equal to this value"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxFrequency(vector<int>& nums, int k) {\n    int ans = 0;\n    long sum = 0;\n\n    std::ranges::sort(nums);\n\n    for (int l = 0, r = 0; r < nums.size(); ++r) {\n      sum += nums[r];\n      while (sum + k < static_cast<long>(nums[r]) * (r - l + 1))\n        sum -= nums[l++];\n      ans = max(ans, r - l + 1);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxFrequency(int[] nums, int k) {\n    int ans = 0;\n    long sum = 0;\n\n    Arrays.sort(nums);\n\n    for (int l = 0, r = 0; r < nums.length; ++r) {\n      sum += nums[r];\n      while (sum + k < (long) nums[r] * (r - l + 1))\n        sum -= nums[l++];\n      ans = Math.max(ans, r - l + 1);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxFrequency(self, nums: List[int], k: int) -> int:\n    ans = 0\n    summ = 0\n\n    nums.sort()\n\n    l = 0\n    for r, num in enumerate(nums):\n      summ += num\n      while summ + k < num * (r - l + 1):\n        summ -= nums[l]\n        l += 1\n      ans = max(ans, r - l + 1)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}