{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2671",
            "title": "Frequency Tracker",
            "titleSlug": "frequency-tracker",
            "content": "<p>Design a data structure that keeps track of the values in it and answers some queries regarding their frequencies.</p>\n\n<p>Implement the <code>FrequencyTracker</code> class.</p>\n\n<ul>\n\t<li><code>FrequencyTracker()</code>: Initializes the <code>FrequencyTracker</code> object with an empty array initially.</li>\n\t<li><code>void add(int number)</code>: Adds <code>number</code> to the data structure.</li>\n\t<li><code>void deleteOne(int number)</code>: Deletes <strong>one</strong> occurrence of <code>number</code> from the data structure. The data structure <strong>may not contain</strong> <code>number</code>, and in this case nothing is deleted.</li>\n\t<li><code>bool hasFrequency(int frequency)</code>: Returns <code>true</code> if there is a number in the data structure that occurs <code>frequency</code> number of times, otherwise, it returns <code>false</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;FrequencyTracker&quot;, &quot;add&quot;, &quot;add&quot;, &quot;hasFrequency&quot;]\n[[], [3], [3], [2]]\n<strong>Output</strong>\n[null, null, null, true]\n\n<strong>Explanation</strong>\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.add(3); // The data structure now contains [3, 3]\nfrequencyTracker.hasFrequency(2); // Returns true, because 3 occurs twice\n\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;FrequencyTracker&quot;, &quot;add&quot;, &quot;deleteOne&quot;, &quot;hasFrequency&quot;]\n[[], [1], [1], [1]]\n<strong>Output</strong>\n[null, null, null, false]\n\n<strong>Explanation</strong>\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(1); // The data structure now contains [1]\nfrequencyTracker.deleteOne(1); // The data structure becomes empty []\nfrequencyTracker.hasFrequency(1); // Returns false, because the data structure is empty\n\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;FrequencyTracker&quot;, &quot;hasFrequency&quot;, &quot;add&quot;, &quot;hasFrequency&quot;]\n[[], [2], [3], [1]]\n<strong>Output</strong>\n[null, false, null, true]\n\n<strong>Explanation</strong>\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.hasFrequency(2); // Returns false, because the data structure is empty\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.hasFrequency(1); // Returns true, because 3 occurs once\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= number &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= frequency &lt;= 10<sup>5</sup></code></li>\n\t<li>At most, <code>2 *&nbsp;10<sup>5</sup></code>&nbsp;calls will be made to <code>add</code>, <code>deleteOne</code>, and <code>hasFrequency</code>&nbsp;in <strong>total</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 304,
            "dislikes": 25,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Design",
                    "slug": "design"
                }
            ],
            "stats": "{\"totalAccepted\": \"19.2K\", \"totalSubmission\": \"65.8K\", \"totalAcceptedRaw\": 19193, \"totalSubmissionRaw\": 65784, \"acRate\": \"29.2%\"}",
            "hints": [
                "Put all the numbers in a hash map (or just an integer array given the number range is small) to maintain each number\u2019s frequency dynamically.",
                "Put each frequency in another hash map (or just an integer array given the range is small, note there are only 200000 calls in total) to maintain each kind of frequency dynamically.",
                "Keep the 2 hash maps in sync."
            ],
            "rephrased": {
                "body": "Design a data structure, `FrequencyTracker`, to efficiently track the frequency of values and answer queries about these frequencies.\n\nImplement the `FrequencyTracker` class with the following methods:\n\n*   `FrequencyTracker()`: Initializes an empty `FrequencyTracker` object.\n*   `void add(int number)`: Adds the integer `number` to the data structure.\n*   `void deleteOne(int number)`: Deletes one occurrence of the integer `number` from the data structure, if it exists. If the number is not present, no action is taken.\n*   `bool hasFrequency(int frequency)`: Returns `true` if there is at least one number in the data structure with the given `frequency`, and `false` otherwise.",
                "constraints": [
                    "1 <= number <= 10^5",
                    "1 <= frequency <= 10^5",
                    "At most, 2 * 10^5 calls will be made to add, deleteOne, and hasFrequency in total."
                ],
                "testcases": [
                    {
                        "input": "[\"FrequencyTracker\", \"add\", \"add\", \"hasFrequency\"]\n[[], [3], [3], [2]]",
                        "output": "[null, null, null, true]",
                        "explanation": "First, a FrequencyTracker object is initialized.  Then, 3 is added, followed by another 3. The data structure now contains [3, 3].  Finally, hasFrequency(2) returns true because 3 occurs twice."
                    },
                    {
                        "input": "[\"FrequencyTracker\", \"add\", \"deleteOne\", \"hasFrequency\"]\n[[], [1], [1], [1]]",
                        "output": "[null, null, null, false]",
                        "explanation": "First, a FrequencyTracker object is initialized. Then, 1 is added. The data structure now contains [1]. Then, deleteOne(1) is called, removing one instance of 1. The data structure becomes empty []. Finally, hasFrequency(1) returns false, because the data structure is empty."
                    },
                    {
                        "input": "[\"FrequencyTracker\", \"hasFrequency\", \"add\", \"hasFrequency\"]\n[[], [2], [3], [1]]",
                        "output": "[null, false, null, true]",
                        "explanation": "First, a FrequencyTracker object is initialized. Then, hasFrequency(2) returns false, because the data structure is empty. Next, 3 is added, so the data structure now contains [3]. Finally, hasFrequency(1) returns true because 3 occurs once."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Put all the numbers in a hash map (or just an integer array given the number range is small) to maintain each number\u2019s frequency dynamically.",
            "Put each frequency in another hash map (or just an integer array given the range is small, note there are only 200000 calls in total) to maintain each kind of frequency dynamically.",
            "Keep the 2 hash maps in sync."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Design",
                "slug": "design"
            }
        ]
    }
}