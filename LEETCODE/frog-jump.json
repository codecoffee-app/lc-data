{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "403",
            "title": "Frog Jump",
            "titleSlug": "frog-jump",
            "content": "<p>A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p>\n\n<p>Given a list of <code>stones</code>&nbsp;positions (in units) in sorted <strong>ascending order</strong>, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be <code>1</code> unit.</p>\n\n<p>If the frog&#39;s last jump was <code>k</code> units, its next jump must be either <code>k - 1</code>, <code>k</code>, or <code>k + 1</code> units. The frog can only jump in the forward direction.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stones = [0,1,3,5,6,8,12,17]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stones = [0,1,2,3,4,8,9,11]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= stones.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= stones[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>stones[0] == 0</code></li>\n\t<li><code>stones</code>&nbsp;is sorted in a strictly increasing order.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5413,
            "dislikes": 244,
            "similarQuestions": "[{\"title\": \"Minimum Sideway Jumps\", \"titleSlug\": \"minimum-sideway-jumps\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Solving Questions With Brainpower\", \"titleSlug\": \"solving-questions-with-brainpower\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Jumps to Reach the Last Index\", \"titleSlug\": \"maximum-number-of-jumps-to-reach-the-last-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"252.4K\", \"totalSubmission\": \"549.8K\", \"totalAcceptedRaw\": 252415, \"totalSubmissionRaw\": 549847, \"acRate\": \"45.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "A frog wants to cross a river. The river has stones at certain positions. The frog can only jump on stones and must avoid water. Given a sorted list of stone positions, determine if the frog can reach the last stone, starting from the first stone (position 0). The frog's initial jump is 1 unit.  If the frog's last jump was 'k' units, the next jump must be 'k - 1', 'k', or 'k + 1' units. The frog can only jump forward.",
                "constraints": [
                    "2 <= stones.length <= 2000",
                    "0 <= stones[i] <= 2<sup>31</sup> - 1",
                    "stones[0] == 0",
                    "stones is sorted in a strictly increasing order."
                ],
                "testcases": [
                    {
                        "input": "[0,1,3,5,6,8,12,17]",
                        "output": "true",
                        "explanation": "The frog can reach the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone."
                    },
                    {
                        "input": "[0,1,2,3,4,8,9,11]",
                        "output": "false",
                        "explanation": "There is no way to jump to the last stone because the gap between the 5th and 6th stone is too large to satisfy the jump length constraints."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-sideway-jumps",
                "title": "Minimum Sideway Jumps",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "solving-questions-with-brainpower",
                "title": "Solving Questions With Brainpower",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-jumps-to-reach-the-last-index",
                "title": "Maximum Number of Jumps to Reach the Last Index",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canCross(vector<int>& stones) {\n    const int n = stones.size();\n    // dp[i][j] := true if a frog can make a size j jump to stones[i]\n    vector<vector<bool>> dp(n, vector<bool>(n + 1));\n    dp[0][0] = true;\n\n    for (int i = 1; i < n; ++i)\n      for (int j = 0; j < i; ++j) {\n        const int k = stones[i] - stones[j];\n        if (k > n)\n          continue;\n        for (const int x : {k - 1, k, k + 1})\n          if (0 <= x && x <= n)\n            dp[i][k] = dp[i][k] || dp[j][x];\n      }\n\n    return any_of(dp.back(.begin()), dp.back(.end()),\n                  [](bool val) { return val; });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canCross(int[] stones) {\n    final int n = stones.length;\n    // dp[i][j] := 1 if a frog can make a size j jump to stones[i]\n    int[][] dp = new int[n][n + 1];\n    dp[0][0] = 1;\n\n    for (int i = 1; i < n; ++i)\n      for (int j = 0; j < i; ++j) {\n        final int k = stones[i] - stones[j];\n        if (k > n)\n          continue;\n        for (final int x : new int[] {k - 1, k, k + 1})\n          if (0 <= x && x <= n)\n            dp[i][k] |= dp[j][x];\n      }\n\n    return Arrays.stream(dp[n - 1]).anyMatch(a -> a == 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canCross(self, stones: List[int]) -> bool:\n    n = len(stones)\n    # dp[i][j] := True if a frog can make a size j jump to stones[i]\n    dp = [[False] * (n + 1) for _ in range(n)]\n    dp[0][0] = True\n\n    for i in range(1, n):\n      for j in range(i):\n        k = stones[i] - stones[j]\n        if k > n:\n          continue\n        for x in (k - 1, k, k + 1):\n          if 0 <= x <= n:\n            dp[i][k] |= dp[j][x]\n\n    return any(dp[-1])\n",
                "lang_text": "py"
            }
        }
    }
}