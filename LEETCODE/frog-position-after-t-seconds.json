{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1377",
            "title": "Frog Position After T Seconds",
            "titleSlug": "frog-position-after-t-seconds",
            "content": "<p>Given an undirected tree consisting of <code>n</code> vertices numbered from <code>1</code> to <code>n</code>. A frog starts jumping from <strong>vertex 1</strong>. In one second, the frog jumps from its current vertex to another <strong>unvisited</strong> vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.</p>\n\n<p>The edges of the undirected tree are given in the array <code>edges</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> means that exists an edge connecting the vertices <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p>\n\n<p><em>Return the probability that after <code>t</code> seconds the frog is on the vertex <code>target</code>. </em>Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/21/frog1.jpg\" style=\"width: 338px; height: 304px;\" />\n<pre>\n<strong>Input:</strong> n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4\n<strong>Output:</strong> 0.16666666666666666 \n<strong>Explanation:</strong> The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after <strong>second 1</strong> and then jumping with 1/2 probability to vertex 4 after <strong>second 2</strong>. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/21/frog2.jpg\" style=\"width: 304px; height: 304px;\" /></strong>\n\n<pre>\n<strong>Input:</strong> n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7\n<strong>Output:</strong> 0.3333333333333333\n<strong>Explanation: </strong>The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after <strong>second 1</strong>. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n</code></li>\n\t<li><code>1 &lt;= t &lt;= 50</code></li>\n\t<li><code>1 &lt;= target &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 760,
            "dislikes": 140,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.9K\", \"totalSubmission\": \"78.8K\", \"totalAcceptedRaw\": 27929, \"totalSubmissionRaw\": 78786, \"acRate\": \"35.4%\"}",
            "hints": [
                "Use a variation of DFS with parameters 'curent_vertex' and 'current_time'.",
                "Update the probability considering to jump to one of the children vertices."
            ],
            "rephrased": {
                "body": "A frog starts at vertex 1 of an undirected tree with 'n' vertices (numbered 1 to n).  Each second, it jumps to an unvisited, directly connected vertex with equal probability among available choices. If no unvisited neighbors exist, it remains at its current vertex. Given the tree's edges and a time 't', determine the probability that the frog is at the 'target' vertex after 't' seconds.",
                "constraints": [
                    "1 <= n <= 100",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "1 <= a<sub>i</sub>, b<sub>i</sub> <= n",
                    "1 <= t <= 50",
                    "1 <= target <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4",
                        "output": "0.16666666666666666",
                        "explanation": "The frog starts at vertex 1. After 1 second, it jumps to vertex 2 with probability 1/3.  Then, after 2 seconds, it jumps from vertex 2 to vertex 4 with probability 1/2. Thus, the probability of being at vertex 4 after 2 seconds is (1/3) * (1/2) = 1/6."
                    },
                    {
                        "input": "n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7",
                        "output": "0.3333333333333333",
                        "explanation": "The frog starts at vertex 1. After 1 second, it jumps directly to vertex 7 with probability 1/3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use a variation of DFS with parameters 'curent_vertex' and 'current_time'.",
            "Update the probability considering to jump to one of the children vertices."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  double frogPosition(int n, vector<vector<int>>& edges, int t, int target) {\n    vector<vector<int>> tree(n + 1);\n    queue<int> q{{1}};\n    vector<bool> seen(n + 1);\n    vector<double> prob(n + 1);\n\n    seen[1] = true;\n    prob[1] = 1.0;\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      tree[u].push_back(v);\n      tree[v].push_back(u);\n    }\n\n    while (!q.empty() && t-- > 0)\n      for (int sz = q.size(); sz > 0; --sz) {\n        const int a = q.front();\n        q.pop();\n        const int nChildren = count_if(tree[a].begin(), tree[a].end(),\n                                       [&seen](int b) { return !seen[b]; });\n        for (const int b : tree[a]) {\n          if (seen[b])\n            continue;\n          seen[b] = true;\n          prob[b] = prob[a] / nChildren;\n          q.push(b);\n        }\n        if (nChildren > 0)\n          prob[a] = 0.0;\n      }\n\n    return prob[target];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public double frogPosition(int n, int[][] edges, int t, int target) {\n    List<Integer>[] tree = new List[n + 1];\n    Queue<Integer> q = new ArrayDeque<>(Arrays.asList(1));\n    boolean[] seen = new boolean[n + 1];\n    double[] prob = new double[n + 1];\n\n    seen[1] = true;\n    prob[1] = 1.0;\n\n    for (int i = 1; i <= n; ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      tree[u].add(v);\n      tree[v].add(u);\n    }\n\n    while (!q.isEmpty() && t-- > 0)\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int a = q.poll();\n        int nChildren = 0;\n        for (final int b : tree[a])\n          if (!seen[b])\n            ++nChildren;\n        for (final int b : tree[a]) {\n          if (seen[b])\n            continue;\n          seen[b] = true;\n          prob[b] = prob[a] / nChildren;\n          q.add(b);\n        }\n        if (nChildren > 0)\n          prob[a] = 0.0;\n      }\n\n    return prob[target];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def frogPosition(self, n: int, edges: List[List[int]], t: int, target: int) -> float:\n    tree = [[] for _ in range(n + 1)]\n    q = collections.deque([1])\n    seen = [False] * (n + 1)\n    prob = [0] * (n + 1)\n\n    prob[1] = 1\n    seen[1] = True\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    for _ in range(t):\n      for _ in range(len(q)):\n        a = q.popleft()\n        nChildren = sum(not seen[b] for b in tree[a])\n        for b in tree[a]:\n          if seen[b]:\n            continue\n          seen[b] = True\n          prob[b] = prob[a] / nChildren\n          q.append(b)\n        if nChildren > 0:\n          prob[a] = 0\n\n    return prob[target]\n",
                "lang_text": "py"
            }
        }
    }
}