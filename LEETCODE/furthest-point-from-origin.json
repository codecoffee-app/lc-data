{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2833",
            "title": "Furthest Point From Origin",
            "titleSlug": "furthest-point-from-origin",
            "content": "<p>You are given a string <code>moves</code> of length <code>n</code> consisting only of characters <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, and <code>&#39;_&#39;</code>. The string represents your movement on a number line starting from the origin <code>0</code>.</p>\n\n<p>In the <code>i<sup>th</sup></code> move, you can choose one of the following directions:</p>\n\n<ul>\n\t<li>move to the left if <code>moves[i] = &#39;L&#39;</code> or <code>moves[i] = &#39;_&#39;</code></li>\n\t<li>move to the right if <code>moves[i] = &#39;R&#39;</code> or <code>moves[i] = &#39;_&#39;</code></li>\n</ul>\n\n<p>Return <em>the <strong>distance from the origin</strong> of the <strong>furthest</strong> point you can get to after </em><code>n</code><em> moves</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> moves = &quot;L_RL__R&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The furthest point we can reach from the origin 0 is point -3 through the following sequence of moves &quot;LLRLLLR&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> moves = &quot;_R__LL_&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The furthest point we can reach from the origin 0 is point -5 through the following sequence of moves &quot;LRLLLLL&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> moves = &quot;_______&quot;\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The furthest point we can reach from the origin 0 is point 7 through the following sequence of moves &quot;RRRRRRR&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= moves.length == n &lt;= 50</code></li>\n\t<li><code>moves</code> consists only of characters <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code> and <code>&#39;_&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 233,
            "dislikes": 44,
            "similarQuestions": "[{\"title\": \"Robot Return to Origin\", \"titleSlug\": \"robot-return-to-origin\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"46.4K\", \"totalSubmission\": \"71.9K\", \"totalAcceptedRaw\": 46425, \"totalSubmissionRaw\": 71947, \"acRate\": \"64.5%\"}",
            "hints": [
                "<div class=\"_1l1MA\">In an optimal answer, all occurrences of <code>'_\u2019</code>\u00a0will be replaced with the <strong>same</strong> character.</div>",
                "<div class=\"_1l1MA\">Replace all characters of <code>'_\u2019</code>\u00a0with the character that occurs the most.\u00a0</div>"
            ],
            "rephrased": {
                "body": "You are given a string `moves` of length `n` consisting of 'L', 'R', and '_'.  This string represents your movement on a number line, starting at position 0. For each move, you can move left if `moves[i]` is 'L' or '_', and move right if `moves[i]` is 'R' or '_'.  Determine the maximum distance from the origin you can reach after `n` moves.",
                "constraints": [
                    "1 <= moves.length == n <= 50",
                    "moves consists only of characters 'L', 'R' and '_'."
                ],
                "testcases": [
                    {
                        "input": "L_RL__R",
                        "output": 3,
                        "explanation": "One possible furthest point is -3, achieved by interpreting the moves as \"LLRLLLR\"."
                    },
                    {
                        "input": "_R__LL_",
                        "output": 5,
                        "explanation": "One possible furthest point is -5, achieved by interpreting the moves as \"LRLLLLL\"."
                    },
                    {
                        "input": "_______",
                        "output": 7,
                        "explanation": "The furthest point is 7, achieved by interpreting all moves as \"RRRRRRR\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "robot-return-to-origin",
                "title": "Robot Return to Origin",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "<div class=\"_1l1MA\">In an optimal answer, all occurrences of <code>'_\u2019</code>\u00a0will be replaced with the <strong>same</strong> character.</div>",
            "<div class=\"_1l1MA\">Replace all characters of <code>'_\u2019</code>\u00a0with the character that occurs the most.\u00a0</div>"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int furthestDistanceFromOrigin(string moves) {\n    int countL = 0;\n    int countR = 0;\n    int countUnderline = 0;\n\n    for (const char c : moves)\n      if (c == 'L')\n        ++countL;\n      else if (c == 'R')\n        ++countR;\n      else  // c == '_'\n        ++countUnderline;\n\n    return abs(countL - countR) + countUnderline;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int furthestDistanceFromOrigin(String moves) {\n    int countL = 0;\n    int countR = 0;\n    int countUnderline = 0;\n\n    for (final char c : moves.toCharArray())\n      if (c == 'L')\n        ++countL;\n      else if (c == 'R')\n        ++countR;\n      else // c == '_'\n        ++countUnderline;\n\n    return Math.abs(countL - countR) + countUnderline;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def furthestDistanceFromOrigin(self, moves: str) -> int:\n    return abs(moves.count('L') - moves.count('R')) + moves.count('_')\n",
                "lang_text": "py"
            }
        }
    }
}