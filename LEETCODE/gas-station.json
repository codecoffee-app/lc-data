{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "134",
            "title": "Gas Station",
            "titleSlug": "gas-station",
            "content": "<p>There are <code>n</code> gas stations along a circular route, where the amount of gas at the <code>i<sup>th</sup></code> station is <code>gas[i]</code>.</p>\n\n<p>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from the <code>i<sup>th</sup></code> station to its next <code>(i + 1)<sup>th</sup></code> station. You begin the journey with an empty tank at one of the gas stations.</p>\n\n<p>Given two integer arrays <code>gas</code> and <code>cost</code>, return <em>the starting gas station&#39;s index if you can travel around the circuit once in the clockwise direction, otherwise return</em> <code>-1</code>. If there exists a solution, it is <strong>guaranteed</strong> to be <strong>unique</strong></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> gas = [2,3,4], cost = [3,4,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nYou can&#39;t start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet&#39;s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can&#39;t travel around the circuit once no matter where you start.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == gas.length == cost.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= gas[i], cost[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 11361,
            "dislikes": 1023,
            "similarQuestions": "[{\"title\": \"Maximize the Topmost Element After K Moves\", \"titleSlug\": \"maximize-the-topmost-element-after-k-moves\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"712.3K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 712289, \"totalSubmissionRaw\": 1559533, \"acRate\": \"45.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given `n` gas stations along a circular route, where `gas[i]` is the amount of gas at the i-th station, and `cost[i]` is the cost to travel from the i-th station to the (i + 1)-th station, determine the starting gas station's index that allows you to complete one full circuit in the clockwise direction. You start with an empty tank. If no such starting station exists, return -1. It is guaranteed that if a solution exists, it is unique.",
                "constraints": [
                    "n == gas.length == cost.length",
                    "1 <= n <= 10^5",
                    "0 <= gas[i], cost[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "gas = [1,2,3,4,5], cost = [3,4,5,1,2]",
                        "output": "3",
                        "explanation": "Starting at station 3 (index 3) with 4 units of gas (tank = 0 + 4 = 4), we can travel to station 4 (tank = 4 - 1 + 5 = 8), then to station 0 (tank = 8 - 2 + 1 = 7), then to station 1 (tank = 7 - 3 + 2 = 6), then to station 2 (tank = 6 - 4 + 3 = 5). Finally, traveling back to station 3 costs 5, which we have enough of."
                    },
                    {
                        "input": "gas = [2,3,4], cost = [3,4,3]",
                        "output": "-1",
                        "explanation": "It's impossible to complete a full circuit starting from any of the stations. For example, starting at station 2 with 4 units of gas (tank = 0 + 4 = 4), we can travel to station 0 (tank = 4 - 3 + 2 = 3), then to station 1 (tank = 3 - 3 + 3 = 3). However, we cannot travel back to station 2, which requires 4 units of gas."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximize-the-topmost-element-after-k-moves",
                "title": "Maximize the Topmost Element After K Moves",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {\n    const int gasses = accumulate(gas.begin(), gas.end(), 0);\n    const int costs = accumulate(cost.begin(), cost.end(), 0);\n    if (gasses - costs < 0)\n      return -1;\n\n    int ans = 0;\n    int sum = 0;\n\n    // Try to start from each index\n    for (int i = 0; i < gas.size(); ++i) {\n      sum += gas[i] - cost[i];\n      if (sum < 0) {\n        sum = 0;\n        ans = i + 1;  // Start from next index\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int canCompleteCircuit(int[] gas, int[] cost) {\n    final int gasses = Arrays.stream(gas).sum();\n    final int costs = Arrays.stream(cost).sum();\n    if (gasses - costs < 0)\n      return -1;\n\n    int ans = 0;\n    int sum = 0;\n\n    // Try to start from each index\n    for (int i = 0; i < gas.length; ++i) {\n      sum += gas[i] - cost[i];\n      if (sum < 0) {\n        sum = 0;\n        ans = i + 1; // Start from next index\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n    ans = 0\n    net = 0\n    summ = 0\n\n    for i in range(len(gas)):\n      net += gas[i] - cost[i]\n      summ += gas[i] - cost[i]\n      if summ < 0:\n        summ = 0\n        ans = i + 1\n\n    return -1 if net < 0 else ans\n",
                "lang_text": "py"
            }
        }
    }
}