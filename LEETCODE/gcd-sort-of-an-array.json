{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1998",
            "title": "GCD Sort of an Array",
            "titleSlug": "gcd-sort-of-an-array",
            "content": "<p>You are given an integer array <code>nums</code>, and you can perform the following operation <strong>any</strong> number of times on <code>nums</code>:</p>\n\n<ul>\n\t<li>Swap the positions of two elements <code>nums[i]</code> and <code>nums[j]</code> if <code>gcd(nums[i], nums[j]) &gt; 1</code> where <code>gcd(nums[i], nums[j])</code> is the <strong>greatest common divisor</strong> of <code>nums[i]</code> and <code>nums[j]</code>.</li>\n</ul>\n\n<p>Return <code>true</code> <em>if it is possible to sort </em><code>nums</code><em> in <strong>non-decreasing</strong> order using the above swap method, or </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,21,3]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can sort [7,21,3] by performing the following operations:\n- Swap 7 and 21 because gcd(7,21) = 7. nums = [<u><strong>21</strong></u>,<u><strong>7</strong></u>,3]\n- Swap 21 and 3 because gcd(21,3) = 3. nums = [<u><strong>3</strong></u>,7,<u><strong>21</strong></u>]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,6,2]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to sort the array because 5 cannot be swapped with any other element.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,5,9,3,15]\n<strong>Output:</strong> true\nWe can sort [10,5,9,3,15] by performing the following operations:\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [<u><strong>15</strong></u>,5,9,3,<u><strong>10</strong></u>]\n- Swap 15 and 3 because gcd(15,3) = 3. nums = [<u><strong>3</strong></u>,5,9,<u><strong>15</strong></u>,10]\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,<u><strong>10</strong></u>,<u><strong>15</strong></u>]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>2 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 468,
            "dislikes": 13,
            "similarQuestions": "[{\"title\": \"Rank Transform of a Matrix\", \"titleSlug\": \"rank-transform-of-a-matrix\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.2K\", \"totalSubmission\": \"18.1K\", \"totalAcceptedRaw\": 8161, \"totalSubmissionRaw\": 18084, \"acRate\": \"45.1%\"}",
            "hints": [
                "Can we build a graph with all the prime numbers and the original array?",
                "We can use union-find to determine which indices are connected (i.e., which indices can be swapped)."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, you can perform the following operation any number of times:\n\nSwap the positions of two elements `nums[i]` and `nums[j]` if `gcd(nums[i], nums[j]) > 1`, where `gcd(nums[i], nums[j])` is the greatest common divisor of `nums[i]` and `nums[j]`.\n\nDetermine if it is possible to sort `nums` in non-decreasing order using the above swap method.",
                "constraints": [
                    "1 <= nums.length <= 3 * 10^4",
                    "2 <= nums[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[7,21,3]",
                        "output": "true",
                        "explanation": "It is possible to sort the array as follows:\n1. Swap 7 and 21 (gcd(7,21) = 7), resulting in [21, 7, 3].\n2. Swap 21 and 3 (gcd(21,3) = 3), resulting in [3, 7, 21]."
                    },
                    {
                        "input": "[5,2,6,2]",
                        "output": "false",
                        "explanation": "It is impossible to sort the array because 5 cannot be swapped with any other element, preventing it from moving to its correct sorted position."
                    },
                    {
                        "input": "[10,5,9,3,15]",
                        "output": "true",
                        "explanation": "It is possible to sort the array as follows:\n1. Swap 10 and 15 (gcd(10,15) = 5), resulting in [15, 5, 9, 3, 10].\n2. Swap 15 and 3 (gcd(15,3) = 3), resulting in [3, 5, 9, 15, 10].\n3. Swap 10 and 15 (gcd(10,15) = 5), resulting in [3, 5, 9, 10, 15]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "rank-transform-of-a-matrix",
                "title": "Rank Transform of a Matrix",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we build a graph with all the prime numbers and the original array?",
            "We can use union-find to determine which indices are connected (i.e., which indices can be swapped)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n};\n\nclass Solution {\n public:\n  bool gcdSort(vector<int>& nums) {\n    const int maxNum = *max_element(nums.begin(), nums.end());\n    const vector<int> minPrimeFactors = sieveEratosthenes(maxNum + 1);\n    UnionFind uf(maxNum + 1);\n\n    for (const int num : nums)\n      for (const int primeFactor : getPrimeFactors(num, minPrimeFactors))\n        uf.unionByRank(num, primeFactor);\n\n    vector<int> sortedNums(nums);\n    std::ranges::sort(sortedNums);\n\n    for (int i = 0; i < nums.size(); ++i)\n      // Can't swap nums[i] with sortedNums[i].\n      if (uf.find(nums[i]) != uf.find(sortedNums[i]))\n        return false;\n\n    return true;\n  }\n\n private:\n  // Gets the minimum prime factor of i, where 1 < i <= n.\n  vector<int> sieveEratosthenes(int n) {\n    vector<int> minPrimeFactors(n + 1);\n    iota(minPrimeFactors.begin() + 2, minPrimeFactors.end(), 2);\n    for (int i = 2; i * i < n; ++i)\n      if (minPrimeFactors[i] == i)  // `i` is prime.\n        for (int j = i * i; j < n; j += i)\n          minPrimeFactors[j] = min(minPrimeFactors[j], i);\n    return minPrimeFactors;\n  }\n\n  vector<int> getPrimeFactors(int num, const vector<int>& minPrimeFactors) {\n    vector<int> primeFactors;\n    while (num > 1) {\n      const int divisor = minPrimeFactors[num];\n      primeFactors.push_back(divisor);\n      while (num % divisor == 0)\n        num /= divisor;\n    }\n    return primeFactors;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public void unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  public int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n\n  private int[] id;\n  private int[] rank;\n}\n\nclass Solution {\n  public boolean gcdSort(int[] nums) {\n    final int maxNum = Arrays.stream(nums).max().getAsInt();\n    final int[] minPrimeFactors = sieveEratosthenes(maxNum + 1);\n    UnionFind uf = new UnionFind(maxNum + 1);\n\n    for (final int num : nums)\n      for (final int primeFactor : getPrimeFactors(num, minPrimeFactors))\n        uf.unionByRank(num, primeFactor);\n\n    int[] sortedNums = nums.clone();\n    Arrays.sort(sortedNums);\n\n    for (int i = 0; i < nums.length; ++i)\n      // Can't swap nums[i] with sortedNums[i].\n      if (uf.find(nums[i]) != uf.find(sortedNums[i]))\n        return false;\n\n    return true;\n  }\n\n  // Gets the minimum prime factor of i, where 1 < i <= n.\n  private int[] sieveEratosthenes(int n) {\n    int[] minPrimeFactors = new int[n + 1];\n    for (int i = 2; i <= n; ++i)\n      minPrimeFactors[i] = i;\n    for (int i = 2; i * i < n; ++i)\n      if (minPrimeFactors[i] == i) // `i` is prime.\n        for (int j = i * i; j < n; j += i)\n          minPrimeFactors[j] = Math.min(minPrimeFactors[j], i);\n    return minPrimeFactors;\n  }\n\n  private List<Integer> getPrimeFactors(int num, int[] minPrimeFactors) {\n    List<Integer> primeFactors = new ArrayList<>();\n    while (num > 1) {\n      final int divisor = minPrimeFactors[num];\n      primeFactors.add(divisor);\n      while (num % divisor == 0)\n        num /= divisor;\n    }\n    return primeFactors;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return False\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n    return True\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def gcdSort(self, nums: List[int]) -> bool:\n    maxNum = max(nums)\n    minPrimeFactors = self._sieveEratosthenes(maxNum + 1)\n    uf = UnionFind(maxNum + 1)\n\n    for num in nums:\n      for primeFactor in self._getPrimeFactors(num, minPrimeFactors):\n        uf.unionByRank(num, primeFactor)\n\n    for a, b in zip(nums, sorted(nums)):\n      # Can't swap nums[i] with sortedNums[i].\n      if uf.find(a) != uf.find(b):\n        return False\n\n    return True\n\n  def _sieveEratosthenes(self, n: int) -> List[int]:\n    \"\"\"Gets the minimum prime factor of i, where 1 < i <= n.\"\"\"\n    minPrimeFactors = [i for i in range(n + 1)]\n    for i in range(2, int(n**0.5) + 1):\n      if minPrimeFactors[i] == i:  # `i` is prime.\n        for j in range(i * i, n, i):\n          minPrimeFactors[j] = min(minPrimeFactors[j], i)\n    return minPrimeFactors\n\n  def _getPrimeFactors(self, num: int, minPrimeFactors: List[int]) -> List[int]:\n    primeFactors = []\n    while num > 1:\n      divisor = minPrimeFactors[num]\n      primeFactors.append(divisor)\n      while num % divisor == 0:\n        num //= divisor\n    return primeFactors\n",
                "lang_text": "py"
            }
        }
    }
}