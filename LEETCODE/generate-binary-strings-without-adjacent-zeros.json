{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3211",
            "title": "Generate Binary Strings Without Adjacent Zeros",
            "titleSlug": "generate-binary-strings-without-adjacent-zeros",
            "content": "<p>You are given a positive integer <code>n</code>.</p>\n\n<p>A binary string <code>x</code> is <strong>valid</strong> if all <span data-keyword=\"substring-nonempty\">substrings</span> of <code>x</code> of length 2 contain <strong>at least</strong> one <code>&quot;1&quot;</code>.</p>\n\n<p>Return all <strong>valid</strong> strings with length <code>n</code><strong>, </strong>in <em>any</em> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[&quot;010&quot;,&quot;011&quot;,&quot;101&quot;,&quot;110&quot;,&quot;111&quot;]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The valid strings of length 3 are: <code>&quot;010&quot;</code>, <code>&quot;011&quot;</code>, <code>&quot;101&quot;</code>, <code>&quot;110&quot;</code>, and <code>&quot;111&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[&quot;0&quot;,&quot;1&quot;]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The valid strings of length 1 are: <code>&quot;0&quot;</code> and <code>&quot;1&quot;</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 18</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 115,
            "dislikes": 13,
            "similarQuestions": "[{\"title\": \"Non-negative Integers without Consecutive Ones\", \"titleSlug\": \"non-negative-integers-without-consecutive-ones\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"38.2K\", \"totalSubmission\": \"44.3K\", \"totalAcceptedRaw\": 38170, \"totalSubmissionRaw\": 44300, \"acRate\": \"86.2%\"}",
            "hints": [
                "If we have a string <code>s</code> of length <code>x</code>, we can generate all strings of length <code>x + 1</code>.",
                "If <code>s</code> has 0 as the last character, we can only append 1, whereas if the last character is 1, we can append both 0 and 1.",
                "We can use recursion and backtracking to generate all such strings."
            ],
            "rephrased": {
                "body": "Given a positive integer `n`, return all binary strings of length `n` that are considered valid. A binary string is valid if every substring of length 2 contains at least one '1'. Return the strings in any order.",
                "constraints": [
                    "1 <= n <= 18"
                ],
                "testcases": [
                    {
                        "input": "n = 3",
                        "output": "[\"010\",\"011\",\"101\",\"110\",\"111\"]",
                        "explanation": "The valid strings of length 3 are: \"010\", \"011\", \"101\", \"110\", and \"111\"."
                    },
                    {
                        "input": "n = 1",
                        "output": "[\"0\",\"1\"]",
                        "explanation": "The valid strings of length 1 are: \"0\" and \"1\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "non-negative-integers-without-consecutive-ones",
                "title": "Non-negative Integers without Consecutive Ones",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If we have a string <code>s</code> of length <code>x</code>, we can generate all strings of length <code>x + 1</code>.",
            "If <code>s</code> has 0 as the last character, we can only append 1, whereas if the last character is 1, we can append both 0 and 1.",
            "We can use recursion and backtracking to generate all such strings."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> validStrings(int n) {\n    vector<string> ans;\n    dfs(n, \"\", ans);\n    return ans;\n  }\n\n private:\n  void dfs(int n, string&& s, vector<string>& ans) {\n    if (n == 0) {\n      ans.push_back(s);\n      return;\n    }\n    if (s.empty() || s.back() == '1') {\n      s.push_back('0');\n      dfs(n - 1, std::move(s), ans);\n      s.pop_back();\n    }\n    s.push_back('1');\n    dfs(n - 1, std::move(s), ans);\n    s.pop_back();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> validStrings(int n) {\n    List<String> ans = new ArrayList<>();\n    dfs(n, new StringBuilder(), ans);\n    return ans;\n  }\n\n  private void dfs(int n, StringBuilder s, List<String> ans) {\n    if (n == 0) {\n      ans.add(s.toString());\n      return;\n    }\n    if (s.isEmpty() || s.charAt(s.length() - 1) == '1') {\n      s.append('0');\n      dfs(n - 1, s, ans);\n      s.deleteCharAt(s.length() - 1);\n    }\n    s.append('1');\n    dfs(n - 1, s, ans);\n    s.deleteCharAt(s.length() - 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def validStrings(self, n: int) -> list[str]:\n    ans = []\n\n    def dfs(n: int, s: list[str]) -> None:\n      if n == 0:\n        ans.append(''.join(s))\n        return\n      if not s or s[-1] == '1':\n        s.append('0')\n        dfs(n - 1, s)\n        s.pop()\n      s.append('1')\n      dfs(n - 1, s)\n      s.pop()\n\n    dfs(n, [])\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}