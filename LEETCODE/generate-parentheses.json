{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "22",
            "title": "Generate Parentheses",
            "titleSlug": "generate-parentheses",
            "content": "<p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [\"()\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 20243,
            "dislikes": 853,
            "similarQuestions": "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Valid Parentheses\", \"titleSlug\": \"valid-parentheses\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Check if a Parentheses String Can Be Valid\", \"titleSlug\": \"check-if-a-parentheses-string-can-be-valid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"2.2M\", \"totalAcceptedRaw\": 1646136, \"totalSubmissionRaw\": 2229056, \"acRate\": \"73.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Generate all possible combinations of well-formed parentheses given `n` pairs of parentheses. A well-formed parentheses string means that for every opening parenthesis, there is a corresponding closing parenthesis, and the closing parenthesis appears after the opening parenthesis in the correct order.",
                "constraints": [
                    "1 <= n <= 8"
                ],
                "testcases": [
                    {
                        "input": "n = 3",
                        "output": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
                        "explanation": "All possible valid combinations of 3 pairs of parentheses."
                    },
                    {
                        "input": "n = 1",
                        "output": "[\"()\"]",
                        "explanation": "The only valid combination of 1 pair of parentheses."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "letter-combinations-of-a-phone-number",
                "title": "Letter Combinations of a Phone Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "valid-parentheses",
                "title": "Valid Parentheses",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "check-if-a-parentheses-string-can-be-valid",
                "title": "Check if a Parentheses String Can Be Valid",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> generateParenthesis(int n) {\n    vector<string> ans;\n    dfs(n, n, \"\", ans);\n    return ans;\n  }\n\n private:\n  void dfs(int l, int r, string&& path, vector<string>& ans) {\n    if (l == 0 && r == 0) {\n      ans.push_back(path);\n      return;\n    }\n\n    if (l > 0) {\n      path.push_back('(');\n      dfs(l - 1, r, move(path), ans);\n      path.pop_back();\n    }\n    if (l < r) {\n      path.push_back(')');\n      dfs(l, r - 1, move(path), ans);\n      path.pop_back();\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> generateParenthesis(int n) {\n    List<String> ans = new ArrayList<>();\n    dfs(n, n, new StringBuilder(), ans);\n    return ans;\n  }\n\n  private void dfs(int l, int r, final StringBuilder sb, List<String> ans) {\n    if (l == 0 && r == 0) {\n      ans.add(sb.toString());\n      return;\n    }\n\n    if (l > 0) {\n      sb.append(\"(\");\n      dfs(l - 1, r, sb, ans);\n      sb.deleteCharAt(sb.length() - 1);\n    }\n    if (l < r) {\n      sb.append(\")\");\n      dfs(l, r - 1, sb, ans);\n      sb.deleteCharAt(sb.length() - 1);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def generateParenthesis(self, n):\n    ans = []\n\n    def dfs(l: int, r: int, s: str) -> None:\n      if l == 0 and r == 0:\n        ans.append(s)\n      if l > 0:\n        dfs(l - 1, r, s + '(')\n      if l < r:\n        dfs(l, r - 1, s + ')')\n\n    dfs(n, n, '')\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}