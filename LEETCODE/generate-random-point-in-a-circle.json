{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "478",
            "title": "Generate Random Point in a Circle",
            "titleSlug": "generate-random-point-in-a-circle",
            "content": "<p>Given the radius and the position of the center of a circle, implement the function <code>randPoint</code> which generates a uniform random point inside the circle.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(double radius, double x_center, double y_center)</code> initializes the object with the radius of the circle <code>radius</code> and the position of the center <code>(x_center, y_center)</code>.</li>\n\t<li><code>randPoint()</code> returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array <code>[x, y]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;randPoint&quot;, &quot;randPoint&quot;, &quot;randPoint&quot;]\n[[1.0, 0.0, 0.0], [], [], []]\n<strong>Output</strong>\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\n\n<strong>Explanation</strong>\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;&nbsp;radius &lt;= 10<sup>8</sup></code></li>\n\t<li><code>-10<sup>7</sup> &lt;= x_center, y_center &lt;= 10<sup>7</sup></code></li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>randPoint</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 441,
            "dislikes": 763,
            "similarQuestions": "[{\"title\": \"Random Point in Non-overlapping Rectangles\", \"titleSlug\": \"random-point-in-non-overlapping-rectangles\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Geometry",
                    "slug": "geometry"
                },
                {
                    "name": "Rejection Sampling",
                    "slug": "rejection-sampling"
                },
                {
                    "name": "Randomized",
                    "slug": "randomized"
                }
            ],
            "stats": "{\"totalAccepted\": \"39.3K\", \"totalSubmission\": \"99.3K\", \"totalAcceptedRaw\": 39310, \"totalSubmissionRaw\": 99331, \"acRate\": \"39.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the radius and the center coordinates of a circle, implement a function to generate a random point uniformly inside the circle (including the circumference).\n\nImplement a `Solution` class with the following methods:\n\n*   `Solution(double radius, double x_center, double y_center)`: Initializes the object with the circle's radius and center coordinates.\n*   `randPoint()`: Returns a random point `[x, y]` inside the circle.",
                "constraints": [
                    "0 < radius <= 10^8",
                    "-10^7 <= x_center, y_center <= 10^7",
                    "At most 3 * 10^4 calls will be made to randPoint."
                ],
                "testcases": [
                    {
                        "input": "[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n[[1.0, 0.0, 0.0], [], [], []]",
                        "output": "[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]",
                        "explanation": "A Solution object is initialized with radius 1.0 and center (0.0, 0.0). Then, randPoint() is called three times, each returning a random point within the circle."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "random-point-in-non-overlapping-rectangles",
                "title": "Random Point in Non-overlapping Rectangles",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Geometry",
                "slug": "geometry"
            },
            {
                "name": "Rejection Sampling",
                "slug": "rejection-sampling"
            },
            {
                "name": "Randomized",
                "slug": "randomized"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  Solution(double radius, double x_center, double y_center)\n      : radius(radius), x_center(x_center), y_center(y_center) {}\n\n  vector<double> randPoint() {\n    const double length = sqrt(distribution(generator)) * radius;\n    const double degree = distribution(generator) * 2 * M_PI;\n    const double x = x_center + length * cos(degree);\n    const double y = y_center + length * sin(degree);\n    return {x, y};\n  }\n\n private:\n  const double radius;\n  const double x_center;\n  const double y_center;\n  default_random_engine generator;\n  uniform_real_distribution<double> distribution =\n      uniform_real_distribution<double>(0.0, 1.0);\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public Solution(double radius, double x_center, double y_center) {\n    this.radius = radius;\n    this.x_center = x_center;\n    this.y_center = y_center;\n  }\n\n  public double[] randPoint() {\n    final double length = Math.sqrt(Math.random()) * radius;\n    final double degree = Math.random() * 2 * Math.PI;\n    final double x = x_center + length * Math.cos(degree);\n    final double y = y_center + length * Math.sin(degree);\n    return new double[] {x, y};\n  }\n\n  private double radius;\n  private double x_center;\n  private double y_center;\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def __init__(self, radius: float, x_center: float, y_center: float):\n    self.radius = radius\n    self.x_center = x_center\n    self.y_center = y_center\n\n  def randPoint(self) -> List[float]:\n    length = sqrt(random.uniform(0, 1)) * self.radius\n    degree = random.uniform(0, 1) * 2 * math.pi\n    x = self.x_center + length * math.cos(degree)\n    y = self.y_center + length * math.sin(degree)\n    return [x, y]\n",
                "lang_text": "py"
            }
        }
    }
}