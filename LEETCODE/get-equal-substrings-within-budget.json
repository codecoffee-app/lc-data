{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1208",
            "title": "Get Equal Substrings Within Budget",
            "titleSlug": "get-equal-substrings-within-budget",
            "content": "<p>You are given two strings <code>s</code> and <code>t</code> of the same length and an integer <code>maxCost</code>.</p>\n\n<p>You want to change <code>s</code> to <code>t</code>. Changing the <code>i<sup>th</sup></code> character of <code>s</code> to <code>i<sup>th</sup></code> character of <code>t</code> costs <code>|s[i] - t[i]|</code> (i.e., the absolute difference between the ASCII values of the characters).</p>\n\n<p>Return <em>the maximum length of a substring of </em><code>s</code><em> that can be changed to be the same as the corresponding substring of </em><code>t</code><em> with a cost less than or equal to </em><code>maxCost</code>. If there is no substring from <code>s</code> that can be changed to its corresponding substring from <code>t</code>, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, t = &quot;bcdf&quot;, maxCost = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> &quot;abc&quot; of s can change to &quot;bcd&quot;.\nThat costs 3, so the maximum length is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, t = &quot;cdef&quot;, maxCost = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Each character in s costs 2 to change to character in t,  so the maximum length is 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, t = &quot;acde&quot;, maxCost = 0\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You cannot make any change, so the maximum length is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>t.length == s.length</code></li>\n\t<li><code>0 &lt;= maxCost &lt;= 10<sup>6</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1113,
            "dislikes": 65,
            "similarQuestions": "[{\"title\": \"Longest Nice Subarray\", \"titleSlug\": \"longest-nice-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"48.2K\", \"totalSubmission\": \"96K\", \"totalAcceptedRaw\": 48192, \"totalSubmissionRaw\": 96011, \"acRate\": \"50.2%\"}",
            "hints": [
                "Calculate the differences between a[i] and b[i].",
                "Use a sliding window to track the longest valid substring."
            ],
            "rephrased": {
                "body": "Given two strings `s` and `t` of equal length and an integer `maxCost`, determine the maximum length of a substring within `s` that can be transformed into the corresponding substring of `t`.  The cost of changing the i-th character of `s` to the i-th character of `t` is defined as the absolute difference between their ASCII values (`|s[i] - t[i]|`). The total cost of transforming a substring must be less than or equal to `maxCost`. If no such substring exists, return 0.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "t.length == s.length",
                    "0 <= maxCost <= 10^6",
                    "s and t consist of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"abcd\", t = \"bcdf\", maxCost = 3",
                        "output": "3",
                        "explanation": "The substring \"abc\" of 's' can be changed to \"bcd\". The cost is |'a' - 'b'| + |'b' - 'c'| + |'c' - 'd'| = 1 + 1 + 1 = 3, which is within the maxCost. Thus, the maximum length is 3."
                    },
                    {
                        "input": "s = \"abcd\", t = \"cdef\", maxCost = 3",
                        "output": "1",
                        "explanation": "Changing any character in 's' to its corresponding character in 't' costs 2.  Therefore, only one character can be changed within the given maxCost, and the maximum length is 1."
                    },
                    {
                        "input": "s = \"abcd\", t = \"acde\", maxCost = 0",
                        "output": "1",
                        "explanation": "With a maxCost of 0, only characters that are already the same can be considered.  'a' is the same in both strings at the beginning, so the maximum length is 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-nice-subarray",
                "title": "Longest Nice Subarray",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Calculate the differences between a[i] and b[i].",
            "Use a sliding window to track the longest valid substring."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ]
    }
}