{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1537",
            "title": "Get the Maximum Score",
            "titleSlug": "get-the-maximum-score",
            "content": "<p>You are given two <strong>sorted</strong> arrays of distinct integers <code>nums1</code> and <code>nums2</code>.</p>\n\n<p>A <strong>valid<strong><em> </em></strong>path</strong> is defined as follows:</p>\n\n<ul>\n\t<li>Choose array <code>nums1</code> or <code>nums2</code> to traverse (from index-0).</li>\n\t<li>Traverse the current array from left to right.</li>\n\t<li>If you are reading any value that is present in <code>nums1</code> and <code>nums2</code> you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).</li>\n</ul>\n\n<p>The <strong>score</strong> is defined as the sum of unique values in a valid path.</p>\n\n<p>Return <em>the maximum score you can obtain of all possible <strong>valid paths</strong></em>. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/16/sample_1_1893.png\" style=\"width: 500px; height: 151px;\" />\n<pre>\n<strong>Input:</strong> nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]\n<strong>Output:</strong> 30\n<strong>Explanation:</strong> Valid paths:\n[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)\n[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)\nThe maximum is obtained with the path in green <strong>[2,4,6,8,10]</strong>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3,5,7,9], nums2 = [3,5,100]\n<strong>Output:</strong> 109\n<strong>Explanation:</strong> Maximum sum is obtained with the path <strong>[1,3,5,100]</strong>.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]\n<strong>Output:</strong> 40\n<strong>Explanation:</strong> There are no common elements between nums1 and nums2.\nMaximum sum is obtained with the path [6,7,8,9,10].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>7</sup></code></li>\n\t<li><code>nums1</code> and <code>nums2</code> are strictly increasing.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 941,
            "dislikes": 48,
            "similarQuestions": "[{\"title\": \"Maximum Score of a Node Sequence\", \"titleSlug\": \"maximum-score-of-a-node-sequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.4K\", \"totalSubmission\": \"62.2K\", \"totalAcceptedRaw\": 24380, \"totalSubmissionRaw\": 62223, \"acRate\": \"39.2%\"}",
            "hints": [
                "Partition the array by common integers, and choose the path with larger sum with a DP technique."
            ],
            "rephrased": {
                "body": "You are given two sorted arrays of distinct integers `nums1` and `nums2`. A valid path is defined as follows:\n\n1.  Choose array `nums1` or `nums2` to traverse (from index-0).\n2.  Traverse the current array from left to right.\n3.  If you encounter a value present in both `nums1` and `nums2`, you can switch your path to the other array. (Only one repeated value is considered in the valid path).\n\nThe score is the sum of unique values in a valid path. Return the maximum score achievable among all possible valid paths, modulo 10^9 + 7.",
                "constraints": [
                    "1 <= nums1.length, nums2.length <= 10^5",
                    "1 <= nums1[i], nums2[i] <= 10^7",
                    "`nums1` and `nums2` are strictly increasing."
                ],
                "testcases": [
                    {
                        "input": "nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]",
                        "output": "30",
                        "explanation": "The optimal path is [2, 4, 6, 8, 10], which yields a sum of 30."
                    },
                    {
                        "input": "nums1 = [1,3,5,7,9], nums2 = [3,5,100]",
                        "output": "109",
                        "explanation": "The optimal path is [1, 3, 5, 100], which yields a sum of 109."
                    },
                    {
                        "input": "nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]",
                        "output": "40",
                        "explanation": "Since there are no common elements, the optimal path is [6, 7, 8, 9, 10], which yields a sum of 40."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-score-of-a-node-sequence",
                "title": "Maximum Score of a Node Sequence",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Partition the array by common integers, and choose the path with larger sum with a DP technique."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxSum(vector<int>& nums1, vector<int>& nums2) {\n    constexpr int kMod = 1'000'000'007;\n\n    // Keep running sum of nums1 and nums2 before next rendezvous\n    // Because nums1 and nums2 are increasing, move forward on the smaller one\n    // To ensure we don't miss any rendezvous\n    // When meet rendezvous, choose the better path\n    long ans = 0;\n    long sum1 = 0;  // Sum of nums1 in (prev rendezvous, next rendezvous)\n    long sum2 = 0;  // Sum of nums2 in (prev rendezvous, next rendezvous)\n    int i = 0;      // nums1's index\n    int j = 0;      // nums2's index\n\n    while (i < nums1.size() && j < nums2.size())\n      if (nums1[i] < nums2[j]) {\n        sum1 += nums1[i++];\n      } else if (nums1[i] > nums2[j]) {\n        sum2 += nums2[j++];\n      } else {  // Rendezvous\n        ans += max(sum1, sum2) + nums1[i];\n        sum1 = 0;\n        sum2 = 0;\n        ++i;\n        ++j;\n      }\n\n    while (i < nums1.size())\n      sum1 += nums1[i++];\n\n    while (j < nums2.size())\n      sum2 += nums2[j++];\n\n    return (ans + max(sum1, sum2)) % kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxSum(int[] nums1, int[] nums2) {\n    final int kMod = 1_000_000_007;\n    // Keep running sum of nums1 and nums2 before next rendezvous\n    // Because nums1 and nums2 are increasing, move forward on the smaller one\n    // To ensure we don't miss any rendezvous\n    // When meet rendezvous, choose the better path\n    long ans = 0;\n    long sum1 = 0; // Sum of nums1 in (prev rendezvous, next rendezvous)\n    long sum2 = 0; // Sum of nums2 in (prev rendezvous, next rendezvous)\n    int i = 0;     // nums1's index\n    int j = 0;     // nums2's index\n\n    while (i < nums1.length && j < nums2.length)\n      if (nums1[i] < nums2[j]) {\n        sum1 += nums1[i++];\n      } else if (nums1[i] > nums2[j]) {\n        sum2 += nums2[j++];\n      } else { // Rendezvous\n        ans += Math.max(sum1, sum2) + nums1[i];\n        sum1 = 0;\n        sum2 = 0;\n        ++i;\n        ++j;\n      }\n\n    while (i < nums1.length)\n      sum1 += nums1[i++];\n\n    while (j < nums2.length)\n      sum2 += nums2[j++];\n\n    return (int) ((ans + Math.max(sum1, sum2)) % kMod);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSum(self, nums1: List[int], nums2: List[int]) -> int:\n    ans = 0\n    sum1 = 0  # Sum of nums1 in (prev rendezvous, next rendezvous)\n    sum2 = 0  # Sum of nums2 in (prev rendezvous, next rendezvous)\n    i = 0     # nums1's index\n    j = 0     # nums2's index\n\n    while i < len(nums1) and j < len(nums2):\n      if nums1[i] < nums2[j]:\n        sum1 += nums1[i]\n        i += 1\n      elif nums1[i] > nums2[j]:\n        sum2 += nums2[j]\n        j += 1\n      else:  # Rendezvous\n        ans += max(sum1, sum2) + nums1[i]\n        sum1 = 0\n        sum2 = 0\n        i += 1\n        j += 1\n\n    while i < len(nums1):\n      sum1 += nums1[i]\n      i += 1\n\n    while j < len(nums2):\n      sum2 += nums2[j]\n      j += 1\n\n    return (ans + max(sum1, sum2)) % (10**9 + 7)\n",
                "lang_text": "py"
            }
        }
    }
}