{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1627",
            "title": "Graph Connectivity With Threshold",
            "titleSlug": "graph-connectivity-with-threshold",
            "content": "<p>We have <code>n</code> cities labeled from <code>1</code> to <code>n</code>. Two different cities with labels <code>x</code> and <code>y</code> are directly connected by a bidirectional road if and only if <code>x</code> and <code>y</code> share a common divisor <strong>strictly greater</strong> than some <code>threshold</code>. More formally, cities with labels <code>x</code> and <code>y</code> have a road between them if there exists an integer <code>z</code> such that all of the following are true:</p>\n\n<ul>\n\t<li><code>x % z == 0</code>,</li>\n\t<li><code>y % z == 0</code>, and</li>\n\t<li><code>z &gt; threshold</code>.</li>\n</ul>\n\n<p>Given the two integers, <code>n</code> and <code>threshold</code>, and an array of <code>queries</code>, you must determine for each <code>queries[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> if cities <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> are connected directly or indirectly.&nbsp;(i.e. there is some path between them).</p>\n\n<p>Return <em>an array </em><code>answer</code><em>, where </em><code>answer.length == queries.length</code><em> and </em><code>answer[i]</code><em> is </em><code>true</code><em> if for the </em><code>i<sup>th</sup></code><em> query, there is a path between </em><code>a<sub>i</sub></code><em> and </em><code>b<sub>i</sub></code><em>, or </em><code>answer[i]</code><em> is </em><code>false</code><em> if there is no path.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/09/ex1.jpg\" style=\"width: 382px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]\n<strong>Output:</strong> [false,false,true]\n<strong>Explanation:</strong> The divisors for each number:\n1:   1\n2:   1, 2\n3:   1, <u>3</u>\n4:   1, 2, <u>4</u>\n5:   1, <u>5</u>\n6:   1, 2, <u>3</u>, <u>6</u>\nUsing the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\nonly ones directly connected. The result of each query:\n[1,4]   1 is not connected to 4\n[2,5]   2 is not connected to 5\n[3,6]   3 is connected to 6 through path 3--6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/10/tmp.jpg\" style=\"width: 532px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]\n<strong>Output:</strong> [true,true,true,true,true]\n<strong>Explanation:</strong> The divisors for each number are the same as the previous example. However, since the threshold is 0,\nall divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/17/ex3.jpg\" style=\"width: 282px; height: 282px;\" />\n<pre>\n<strong>Input:</strong> n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]\n<strong>Output:</strong> [false,false,false,false,false]\n<strong>Explanation:</strong> Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\nPlease notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= threshold &lt;= n</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= cities</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 554,
            "dislikes": 31,
            "similarQuestions": "[{\"title\": \"Greatest Common Divisor Traversal\", \"titleSlug\": \"greatest-common-divisor-traversal\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.2K\", \"totalSubmission\": \"34.6K\", \"totalAcceptedRaw\": 16165, \"totalSubmissionRaw\": 34625, \"acRate\": \"46.7%\"}",
            "hints": [
                "How to build the graph of the cities?",
                "Connect city i with all its multiples 2*i, 3*i, ...",
                "Answer the queries using union-find data structure."
            ],
            "rephrased": {
                "body": "Given `n` cities labeled from 1 to `n`, two cities `x` and `y` are connected by a bidirectional road if they share a common divisor `z` such that `z` is strictly greater than a given `threshold`.  You are given `n`, `threshold`, and an array of `queries`, where each `queries[i] = [a_i, b_i]` represents a query between cities `a_i` and `b_i`. Determine for each query if cities `a_i` and `b_i` are connected directly or indirectly (i.e., there is a path between them).\n\nReturn an array `answer` where `answer[i]` is `true` if a path exists between `a_i` and `b_i`, and `false` otherwise.",
                "constraints": [
                    "2 <= n <= 10^4",
                    "0 <= threshold <= n",
                    "1 <= queries.length <= 10^5",
                    "queries[i].length == 2",
                    "1 <= a_i, b_i <= n",
                    "a_i != b_i"
                ],
                "testcases": [
                    {
                        "input": "n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]",
                        "output": "[false,false,true]",
                        "explanation": "With a threshold of 2, only cities 3 and 6 share a common divisor (3) greater than the threshold. Thus, the path 3--6 exists.  1 and 4 do not share a common divisor > 2.  2 and 5 do not share a common divisor > 2."
                    },
                    {
                        "input": "n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]",
                        "output": "[true,true,true,true,true]",
                        "explanation": "Since the threshold is 0, all cities are connected because they all share the common divisor 1."
                    },
                    {
                        "input": "n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]",
                        "output": "[false,false,false,false,false]",
                        "explanation": "Only cities 2 and 4 share a common divisor 2, which is greater than the threshold of 1. No other city pairs share a common divisor greater than 1, therefore no other connections exist. There is no path between any pair of queried cities."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "greatest-common-divisor-traversal",
                "title": "Greatest Common Divisor Traversal",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How to build the graph of the cities?",
            "Connect city i with all its multiples 2*i, 3*i, ...",
            "Answer the queries using union-find data structure."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  bool unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return false;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n    return true;\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n};\n\nclass Solution {\n public:\n  vector<bool> areConnected(int n, int threshold,\n                            vector<vector<int>>& queries) {\n    vector<bool> ans;\n    UnionFind uf(n + 1);\n\n    for (int z = threshold + 1; z <= n; ++z)\n      for (int x = z * 2; x <= n; x += z)\n        uf.unionByRank(z, x);\n\n    for (const vector<int>& query : queries) {\n      const int a = query[0];\n      const int b = query[1];\n      ans.push_back(uf.find(a) == uf.find(b));\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public boolean unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return false;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n    return true;\n  }\n\n  public int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n\n  private int[] id;\n  private int[] rank;\n}\n\nclass Solution {\n  public List<Boolean> areConnected(int n, int threshold, int[][] queries) {\n    List<Boolean> ans = new ArrayList<>();\n    UnionFind uf = new UnionFind(n + 1);\n\n    for (int z = threshold + 1; z <= n; ++z)\n      for (int x = z * 2; x <= n; x += z)\n        uf.unionByRank(z, x);\n\n    for (int[] query : queries) {\n      final int a = query[0];\n      final int b = query[1];\n      ans.add(uf.find(a) == uf.find(b));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> bool:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return False\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n    return True\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def areConnected(self, n: int, threshold: int, queries: List[List[int]]) -> List[bool]:\n    uf = UnionFind(n + 1)\n\n    for z in range(threshold + 1, n + 1):\n      for x in range(z * 2, n + 1, z):\n        uf.unionByRank(z, x)\n\n    return [uf.find(a) == uf.find(b) for a, b in queries]\n",
                "lang_text": "py"
            }
        }
    }
}