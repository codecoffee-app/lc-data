{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1071",
            "title": "Greatest Common Divisor of Strings",
            "titleSlug": "greatest-common-divisor-of-strings",
            "content": "<p>For two strings <code>s</code> and <code>t</code>, we say &quot;<code>t</code> divides <code>s</code>&quot; if and only if <code>s = t + ... + t</code> (i.e., <code>t</code> is concatenated with itself one or more times).</p>\n\n<p>Given two strings <code>str1</code> and <code>str2</code>, return <em>the largest string </em><code>x</code><em> such that </em><code>x</code><em> divides both </em><code>str1</code><em> and </em><code>str2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;ABCABC&quot;, str2 = &quot;ABC&quot;\n<strong>Output:</strong> &quot;ABC&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;ABABAB&quot;, str2 = &quot;ABAB&quot;\n<strong>Output:</strong> &quot;AB&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;LEET&quot;, str2 = &quot;CODE&quot;\n<strong>Output:</strong> &quot;&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li>\n\t<li><code>str1</code> and <code>str2</code> consist of English uppercase letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4661,
            "dislikes": 1099,
            "similarQuestions": "[{\"title\": \"Find Greatest Common Divisor of Array\", \"titleSlug\": \"find-greatest-common-divisor-of-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Smallest Even Multiple\", \"titleSlug\": \"smallest-even-multiple\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"329K\", \"totalSubmission\": \"636K\", \"totalAcceptedRaw\": 329031, \"totalSubmissionRaw\": 635979, \"acRate\": \"51.7%\"}",
            "hints": [
                "The greatest common divisor must be a prefix of each string, so we can try all prefixes."
            ],
            "rephrased": {
                "body": "Given two strings, `str1` and `str2`, find the largest string `x` that divides both `str1` and `str2`. A string `t` divides `s` if `s` can be formed by concatenating `t` with itself one or more times (i.e., `s = t + ... + t`). If no such string exists, return an empty string.",
                "constraints": [
                    "1 <= str1.length, str2.length <= 1000",
                    "str1 and str2 consist of English uppercase letters."
                ],
                "testcases": [
                    {
                        "input": "str1 = \"ABCABC\", str2 = \"ABC\"",
                        "output": "\"ABC\"",
                        "explanation": "The string \"ABC\" divides both \"ABCABC\" (ABC + ABC) and \"ABC\" (ABC)."
                    },
                    {
                        "input": "str1 = \"ABABAB\", str2 = \"ABAB\"",
                        "output": "\"AB\"",
                        "explanation": "\"AB\" divides both \"ABABAB\" and \"ABAB\"."
                    },
                    {
                        "input": "str1 = \"LEET\", str2 = \"CODE\"",
                        "output": "\"\"",
                        "explanation": "There is no string that divides both \"LEET\" and \"CODE\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "find-greatest-common-divisor-of-array",
                "title": "Find Greatest Common Divisor of Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "smallest-even-multiple",
                "title": "Smallest Even Multiple",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The greatest common divisor must be a prefix of each string, so we can try all prefixes."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string gcdOfStrings(string str1, string str2) {\n    if (str1.length() < str2.length())\n      return gcdOfStrings(str2, str1);\n    if (str1.find(str2) == string::npos)\n      return \"\";\n    if (str2.empty())\n      return str1;\n    return gcdOfStrings(str2, mod(str1, str2));\n  }\n\n private:\n  string mod(string& s1, const string& s2) {\n    while (s1.find(s2) == 0)\n      s1 = s1.substr(s2.length());\n    return s1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String gcdOfStrings(String str1, String str2) {\n    if (str1.length() < str2.length())\n      return gcdOfStrings(str2, str1);\n    if (!str1.startsWith(str2))\n      return \"\";\n    if (str2.isEmpty())\n      return str1;\n    return gcdOfStrings(str2, mod(str1, str2));\n  }\n\n  private String mod(String s1, final String s2) {\n    while (s1.startsWith(s2))\n      s1 = s1.substring(s2.length());\n    return s1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def gcdOfStrings(self, str1: str, str2: str) -> str:\n    def mod(s1: str, s2: str) -> str:\n      while s1.startswith(s2):\n        s1 = s1[len(s2):]\n      return s1\n\n    if len(str1) < len(str2):\n      return self.gcdOfStrings(str2, str1)\n    if not str1.startswith(str2):\n      return ''\n    if not str2:\n      return str1\n    return self.gcdOfStrings(str2, mod(str1, str2))\n",
                "lang_text": "py"
            }
        }
    }
}