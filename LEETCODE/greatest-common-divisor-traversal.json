{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2709",
            "title": "Greatest Common Divisor Traversal",
            "titleSlug": "greatest-common-divisor-traversal",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>, and you are allowed to <strong>traverse</strong> between its indices. You can traverse between index <code>i</code> and index <code>j</code>, <code>i != j</code>, if and only if <code>gcd(nums[i], nums[j]) &gt; 1</code>, where <code>gcd</code> is the <strong>greatest common divisor</strong>.</p>\n\n<p>Your task is to determine if for <strong>every pair</strong> of indices <code>i</code> and <code>j</code> in nums, where <code>i &lt; j</code>, there exists a <strong>sequence of traversals</strong> that can take us from <code>i</code> to <code>j</code>.</p>\n\n<p>Return <code>true</code><em> if it is possible to traverse between all such pairs of indices,</em><em> or </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,6]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2).\nTo go from index 0 to index 1, we can use the sequence of traversals 0 -&gt; 2 -&gt; 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 &gt; 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 &gt; 1.\nTo go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 &gt; 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 &gt; 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,9,5]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,3,12,8]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 308,
            "dislikes": 27,
            "similarQuestions": "[{\"title\": \"Graph Connectivity With Threshold\", \"titleSlug\": \"graph-connectivity-with-threshold\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.1K\", \"totalSubmission\": \"35.7K\", \"totalAcceptedRaw\": 8133, \"totalSubmissionRaw\": 35700, \"acRate\": \"22.8%\"}",
            "hints": [
                "Create a (prime) factor-numbers list for all the indices.",
                "Add an edge between the neighbors of the (prime) factor-numbers list. The order of the numbers doesn\u2019t matter. We only need edges between 2 neighbors instead of edges for all pairs.",
                "The problem is now similar to checking if all the numbers (nodes of the graph) are in the same connected component.",
                "Any algorithm (i.e., BFS, DFS, or Union-Find Set) should work to find or check connected components"
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums`, you can traverse between indices `i` and `j` (where `i != j`) if and only if `gcd(nums[i], nums[j]) > 1`, where `gcd` is the greatest common divisor. Determine if for every pair of indices `i` and `j` in `nums` (where `i < j`), there exists a sequence of traversals that can take you from `i` to `j`. Return `true` if it's possible to traverse between all such pairs, `false` otherwise.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2,3,6]",
                        "output": "true",
                        "explanation": "It is possible to traverse between all pairs of indices. For instance, from index 0 to index 1: 0 -> 2 -> 1 (gcd(2,6) = 2 > 1, gcd(6,3) = 3 > 1). From index 0 to 2: 0 -> 2 (gcd(2,6) = 2 > 1). From index 1 to 2: 1 -> 2 (gcd(3,6) = 3 > 1)."
                    },
                    {
                        "input": "[3,9,5]",
                        "output": "false",
                        "explanation": "It is not possible to traverse between all pairs of indices. No sequence of traversals can take us from index 0 to index 2."
                    },
                    {
                        "input": "[4,3,12,8]",
                        "output": "true",
                        "explanation": "It is possible to traverse between all pairs of indices. A valid sequence of traversals exists for each pair."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "graph-connectivity-with-threshold",
                "title": "Graph Connectivity With Threshold",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Create a (prime) factor-numbers list for all the indices.",
            "Add an edge between the neighbors of the (prime) factor-numbers list. The order of the numbers doesn\u2019t matter. We only need edges between 2 neighbors instead of edges for all pairs.",
            "The problem is now similar to checking if all the numbers (nodes of the graph) are in the same connected component.",
            "Any algorithm (i.e., BFS, DFS, or Union-Find Set) should work to find or check connected components"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), sz(n, 1) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionBySize(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return;\n    if (sz[i] < sz[j]) {\n      sz[j] += sz[i];\n      id[i] = j;\n    } else {\n      sz[i] += sz[j];\n      id[j] = i;\n    }\n  }\n\n  int getSize(int i) {\n    return sz[i];\n  }\n\n private:\n  vector<int> id;\n  vector<int> sz;\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n};\n\nclass Solution {\n public:\n  bool canTraverseAllPairs(vector<int>& nums) {\n    const int n = nums.size();\n    const int maxNum = *max_element(nums.begin(), nums.end());\n    const vector<int> minPrimeFactors = sieveEratosthenes(maxNum + 1);\n    unordered_map<int, int> primeToFirstIndex;\n    UnionFind uf(n);\n\n    for (int i = 0; i < n; ++i)\n      for (const int primeFactor : getPrimeFactors(nums[i], minPrimeFactors))\n        // `primeFactor` already appeared in the previous indices.\n        if (const auto it = primeToFirstIndex.find(primeFactor);\n            it != primeToFirstIndex.cend())\n          uf.unionBySize(it->second, i);\n        else\n          primeToFirstIndex[primeFactor] = i;\n\n    for (int i = 0; i < n; ++i)\n      if (uf.getSize(i) == n)\n        return true;\n\n    return false;\n  }\n\n private:\n  // Gets the minimum prime factor of i, where 1 < i <= n.\n  vector<int> sieveEratosthenes(int n) {\n    vector<int> minPrimeFactors(n + 1);\n    iota(minPrimeFactors.begin() + 2, minPrimeFactors.end(), 2);\n    for (int i = 2; i * i < n; ++i)\n      if (minPrimeFactors[i] == i)  // `i` is prime.\n        for (int j = i * i; j < n; j += i)\n          minPrimeFactors[j] = min(minPrimeFactors[j], i);\n    return minPrimeFactors;\n  }\n\n  vector<int> getPrimeFactors(int num, const vector<int>& minPrimeFactors) {\n    vector<int> primeFactors;\n    while (num > 1) {\n      const int divisor = minPrimeFactors[num];\n      primeFactors.push_back(divisor);\n      while (num % divisor == 0)\n        num /= divisor;\n    }\n    return primeFactors;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    sz = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n    for (int i = 0; i < n; ++i)\n      sz[i] = 1;\n  }\n\n  public void unionBySize(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return;\n    if (sz[i] < sz[j]) {\n      sz[j] += sz[i];\n      id[i] = j;\n    } else {\n      sz[i] += sz[j];\n      id[j] = i;\n    }\n  }\n\n  public int getSize(int i) {\n    return sz[i];\n  }\n\n  private int[] id;\n  private int[] sz;\n\n  private int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n}\n\nclass Solution {\n  public boolean canTraverseAllPairs(int[] nums) {\n    final int n = nums.length;\n    final int maxNum = Arrays.stream(nums).max().getAsInt();\n    final int[] minPrimeFactors = sieveEratosthenes(maxNum + 1);\n    Map<Integer, Integer> primeToFirstIndex = new HashMap<>();\n    UnionFind uf = new UnionFind(n);\n\n    for (int i = 0; i < n; ++i)\n      for (final int primeFactor : getPrimeFactors(nums[i], minPrimeFactors))\n        // `primeFactor` already appeared in the previous indices.\n        if (primeToFirstIndex.containsKey(primeFactor))\n          uf.unionBySize(primeToFirstIndex.get(primeFactor), i);\n        else\n          primeToFirstIndex.put(primeFactor, i);\n\n    for (int i = 0; i < n; ++i)\n      if (uf.getSize(i) == n)\n        return true;\n    return false;\n  }\n\n  // Gets the minimum prime factor of i, where 1 < i <= n.\n  private int[] sieveEratosthenes(int n) {\n    int[] minPrimeFactors = new int[n + 1];\n    for (int i = 2; i <= n; ++i)\n      minPrimeFactors[i] = i;\n    for (int i = 2; i * i < n; ++i)\n      if (minPrimeFactors[i] == i) // `i` is prime.\n        for (int j = i * i; j < n; j += i)\n          minPrimeFactors[j] = Math.min(minPrimeFactors[j], i);\n    return minPrimeFactors;\n  }\n\n  private List<Integer> getPrimeFactors(int num, int[] minPrimeFactors) {\n    List<Integer> primeFactors = new ArrayList<>();\n    while (num > 1) {\n      final int divisor = minPrimeFactors[num];\n      primeFactors.add(divisor);\n      while (num % divisor == 0)\n        num /= divisor;\n    }\n    return primeFactors;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.sz = [1] * n\n\n  def unionBySize(self, u: int, v: int) -> None:\n    i = self._find(u)\n    j = self._find(v)\n    if i == j:\n      return\n    if self.sz[i] < self.sz[j]:\n      self.sz[j] += self.sz[i]\n      self.id[i] = j\n    else:\n      self.sz[i] += self.sz[j]\n      self.id[j] = i\n\n  def getSize(self, i: int) -> int:\n    return self.sz[i]\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def canTraverseAllPairs(self, nums: List[int]) -> bool:\n    n = len(nums)\n    max_num = max(nums)\n    maxPrimeFactor = self._sieveEratosthenes(max_num + 1)\n    primeToFirstIndex = collections.defaultdict(int)\n    uf = UnionFind(n)\n\n    for i, num in enumerate(nums):\n      for prime_factor in self._getPrimeFactors(num, maxPrimeFactor):\n        if prime_factor in primeToFirstIndex:\n          uf.unionBySize(primeToFirstIndex[prime_factor], i)\n        else:\n          primeToFirstIndex[prime_factor] = i\n\n    return any(uf.getSize(i) == n for i in range(n))\n\n  def _sieveEratosthenes(self, n: int) -> List[int]:\n    \"\"\"Gets the minimum prime factor of i, where 1 < i <= n.\"\"\"\n    minPrimeFactors = [i for i in range(n + 1)]\n    for i in range(2, int(n**0.5) + 1):\n      if minPrimeFactors[i] == i:  # `i` is prime.\n        for j in range(i * i, n, i):\n          minPrimeFactors[j] = min(minPrimeFactors[j], i)\n    return minPrimeFactors\n\n  def _getPrimeFactors(self, num: int, minPrimeFactors: List[int]) -> List[int]:\n    primeFactors = []\n    while num > 1:\n      divisor = minPrimeFactors[num]\n      primeFactors.append(divisor)\n      while num % divisor == 0:\n        num //= divisor\n    return primeFactors\n",
                "lang_text": "py"
            }
        }
    }
}