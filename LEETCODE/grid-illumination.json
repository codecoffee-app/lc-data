{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1001",
            "title": "Grid Illumination",
            "titleSlug": "grid-illumination",
            "content": "<p>There is a 2D <code>grid</code> of size <code>n x n</code> where each cell of this grid has a lamp that is initially <strong>turned off</strong>.</p>\n\n<p>You are given a 2D array of lamp positions <code>lamps</code>, where <code>lamps[i] = [row<sub>i</sub>, col<sub>i</sub>]</code> indicates that the lamp at <code>grid[row<sub>i</sub>][col<sub>i</sub>]</code> is <strong>turned on</strong>. Even if the same lamp is listed more than once, it is turned on.</p>\n\n<p>When a lamp is turned on, it <strong>illuminates its cell</strong> and <strong>all other cells</strong> in the same <strong>row, column, or diagonal</strong>.</p>\n\n<p>You are also given another 2D array <code>queries</code>, where <code>queries[j] = [row<sub>j</sub>, col<sub>j</sub>]</code>. For the <code>j<sup>th</sup></code> query, determine whether <code>grid[row<sub>j</sub>][col<sub>j</sub>]</code> is illuminated or not. After answering the <code>j<sup>th</sup></code> query, <strong>turn off</strong> the lamp at <code>grid[row<sub>j</sub>][col<sub>j</sub>]</code> and its <strong>8 adjacent lamps</strong> if they exist. A lamp is adjacent if its cell shares either a side or corner with <code>grid[row<sub>j</sub>][col<sub>j</sub>]</code>.</p>\n\n<p>Return <em>an array of integers </em><code>ans</code><em>,</em><em> where </em><code>ans[j]</code><em> should be </em><code>1</code><em> if the cell in the </em><code>j<sup>th</sup></code><em> query was illuminated, or </em><code>0</code><em> if the lamp was not.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/19/illu_1.jpg\" style=\"width: 750px; height: 209px;\" />\n<pre>\n<strong>Input:</strong> n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]\n<strong>Output:</strong> [1,0]\n<strong>Explanation:</strong> We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].\nThe 0<sup>th</sup>&nbsp;query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/19/illu_step1.jpg\" style=\"width: 500px; height: 218px;\" />\nThe 1<sup>st</sup>&nbsp;query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/19/illu_step2.jpg\" style=\"width: 500px; height: 219px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]\n<strong>Output:</strong> [1,1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]\n<strong>Output:</strong> [1,1,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= lamps.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= queries.length &lt;= 20000</code></li>\n\t<li><code>lamps[i].length == 2</code></li>\n\t<li><code>0 &lt;= row<sub>i</sub>, col<sub>i</sub> &lt; n</code></li>\n\t<li><code>queries[j].length == 2</code></li>\n\t<li><code>0 &lt;= row<sub>j</sub>, col<sub>j</sub> &lt; n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 584,
            "dislikes": 145,
            "similarQuestions": "[{\"title\": \"N-Queens\", \"titleSlug\": \"n-queens\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                }
            ],
            "stats": "{\"totalAccepted\": \"19.6K\", \"totalSubmission\": \"53.7K\", \"totalAcceptedRaw\": 19575, \"totalSubmissionRaw\": 53658, \"acRate\": \"36.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a 2D grid of size `n x n` where each cell has a lamp initially turned off. You are provided with a list of lamp positions indicating which lamps are turned on. When a lamp is on, it illuminates its cell and all other cells in the same row, column, or diagonal.\n\nYou are also given a list of queries, each representing a cell. For each query, determine if the cell is illuminated. After answering the query, turn off the lamp at the queried cell and its 8 adjacent lamps (if they exist). Adjacency includes cells sharing a side or corner.",
                "constraints": [
                    "1 <= n <= 10^9",
                    "0 <= lamps.length <= 20000",
                    "0 <= queries.length <= 20000",
                    "lamps[i].length == 2",
                    "0 <= row_i, col_i < n",
                    "queries[j].length == 2",
                    "0 <= row_j, col_j < n"
                ],
                "testcases": [
                    {
                        "input": "n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]",
                        "output": "[1,0]",
                        "explanation": "Initially, all lamps are off. The lamps at [0,0] and [4,4] are turned on, illuminating their respective rows, columns, and diagonals.\n\nQuery 1: [1,1] is illuminated due to the lamp at [0,0].  The result is 1. After answering, the lamp at [1,1] and its 8 adjacent lamps are turned off.\n\nQuery 2: [1,0] is no longer illuminated because the lamps near [1,1] have been turned off. The result is 0. The lamp at [1,0] and its 8 adjacent lamps are turned off."
                    },
                    {
                        "input": "n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]",
                        "output": "[1,1]",
                        "explanation": "Initially, all lamps are off. Lamps at [0,0] and [4,4] are turned on.\n\nQuery 1: [1,1] is illuminated, return 1. Turn off [1,1] and its neighbors.\n\nQuery 2: [1,1] is illuminated because of the lamp at [4,4], return 1. Turn off [1,1] and its neighbors (again, but it is already off from previous turn off)."
                    },
                    {
                        "input": "n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]",
                        "output": "[1,1,0]",
                        "explanation": "Initially, all lamps are off. Lamps at [0,0] and [0,4] are turned on.\n\nQuery 1: [0,4] is illuminated because it's a turned-on lamp, return 1. Turn off [0,4] and its neighbors.\n\nQuery 2: [0,1] is illuminated because of the lamp at [0,0], return 1. Turn off [0,1] and its neighbors.\n\nQuery 3: [1,4] is not illuminated since [0,4] was turned off in query 1 and there are no other lamps in row, col or diagnols for [1,4], return 0. Turn off [1,4] and its neighbors."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "n-queens",
                "title": "N-Queens",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> gridIllumination(int n, vector<vector<int>>& lamps,\n                               vector<vector<int>>& queries) {\n    vector<int> ans;\n    unordered_map<int, int> rows;\n    unordered_map<int, int> cols;\n    unordered_map<int, int> diag1;\n    unordered_map<int, int> diag2;\n    unordered_set<pair<int, int>, pairHash> lampsSet;\n\n    for (vector<int>& lamp : lamps) {\n      int i = lamp[0];\n      int j = lamp[1];\n      if (lampsSet.insert({i, j}).second) {\n        ++rows[i];\n        ++cols[j];\n        ++diag1[i + j];\n        ++diag2[i - j];\n      }\n    }\n\n    for (const vector<int>& query : queries) {\n      int i = query[0];\n      int j = query[1];\n      if (rows[i] || cols[j] || diag1[i + j] || diag2[i - j]) {\n        ans.push_back(1);\n        for (int y = max(0, i - 1); y < min(n, i + 2); ++y)\n          for (int x = max(0, j - 1); x < min(n, j + 2); ++x)\n            if (lampsSet.erase({y, x})) {\n              --rows[y];\n              --cols[x];\n              --diag1[y + x];\n              --diag2[y - x];\n            }\n      } else {\n        ans.push_back(0);\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  struct pairHash {\n    size_t operator()(const pair<int, int>& p) const {\n      return p.first ^ p.second;\n    }\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] gridIllumination(int n, int[][] lamps, int[][] queries) {\n    List<Integer> ans = new ArrayList<>();\n    Map<Integer, Integer> rows = new HashMap<>();\n    Map<Integer, Integer> cols = new HashMap<>();\n    Map<Integer, Integer> diag1 = new HashMap<>();\n    Map<Integer, Integer> diag2 = new HashMap<>();\n    Set<Long> lampsSet = new HashSet<>();\n\n    for (int[] lamp : lamps) {\n      final int i = lamp[0];\n      final int j = lamp[1];\n      if (lampsSet.add(hash(i, j))) {\n        rows.merge(i, 1, Integer::sum);\n        cols.merge(j, 1, Integer::sum);\n        diag1.merge(i + j, 1, Integer::sum);\n        diag2.merge(i - j, 1, Integer::sum);\n      }\n    }\n\n    for (int[] query : queries) {\n      final int i = query[0];\n      final int j = query[1];\n      if (rows.getOrDefault(i, 0) > 0 || cols.getOrDefault(j, 0) > 0 ||\n          diag1.getOrDefault(i + j, 0) > 0 || diag2.getOrDefault(i - j, 0) > 0) {\n        ans.add(1);\n        for (int y = Math.max(0, i - 1); y < Math.min(n, i + 2); ++y)\n          for (int x = Math.max(0, j - 1); x < Math.min(n, j + 2); ++x)\n            if (lampsSet.remove(hash(y, x))) {\n              rows.merge(y, 1, Integer::sum);\n              cols.merge(x, 1, Integer::sum);\n              diag1.merge(y + x, 1, Integer::sum);\n              diag2.merge(y - x, 1, Integer::sum);\n            }\n      } else {\n        ans.add(0);\n      }\n    }\n\n    return ans.stream().mapToInt(Integer::intValue).toArray();\n  }\n\n  private long hash(int i, int j) {\n    return ((long) i << 32) + j;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def gridIllumination(self, n: int, lamps: List[List[int]], queries: List[List[int]]) -> List[int]:\n    ans = []\n    rows = collections.Counter()\n    cols = collections.Counter()\n    diag1 = collections.Counter()\n    diag2 = collections.Counter()\n    lampsSet = set()\n\n    for i, j in lamps:\n      if (i, j) not in lampsSet:\n        lampsSet.add((i, j))\n        rows[i] += 1\n        cols[j] += 1\n        diag1[i + j] += 1\n        diag2[i - j] += 1\n\n    for i, j in queries:\n      if rows[i] or cols[j] or diag1[i + j] or diag2[i - j]:\n        ans.append(1)\n        for y in range(max(0, i - 1), min(n, i + 2)):\n          for x in range(max(0, j - 1), min(n, j + 2)):\n            if (y, x) in lampsSet:\n              lampsSet.remove((y, x))\n              rows[y] -= 1\n              cols[x] -= 1\n              diag1[y + x] -= 1\n              diag2[y - x] -= 1\n      else:\n        ans.append(0)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}