{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2631",
            "title": "Group By",
            "titleSlug": "group-by",
            "content": "<p>Write code that enhances all arrays such that you can call the&nbsp;<code>array.groupBy(fn)</code>&nbsp;method on any array and it will return a <strong>grouped</strong>&nbsp;version of the array.</p>\n\n<p>A&nbsp;<strong>grouped</strong>&nbsp;array is an object where each&nbsp;key&nbsp;is&nbsp;the output of&nbsp;<code>fn(arr[i])</code>&nbsp;and each&nbsp;value is an array containing all items in the original array with that key.</p>\n\n<p>The provided callback&nbsp;<code>fn</code>&nbsp;will accept an item in the array and return a string key.</p>\n\n<p>The order of each value list should be the order the items&nbsp;appear in the array. Any order of keys is acceptable.</p>\n\n<p>Please solve it without lodash&#39;s&nbsp;<code>_.groupBy</code> function.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \narray = [\n&nbsp; {&quot;id&quot;:&quot;1&quot;},\n&nbsp; {&quot;id&quot;:&quot;1&quot;},\n&nbsp; {&quot;id&quot;:&quot;2&quot;}\n], \nfn = function (item) { \n&nbsp; return item.id; \n}\n<strong>Output:</strong> \n{ \n&nbsp; &quot;1&quot;: [{&quot;id&quot;: &quot;1&quot;}, {&quot;id&quot;: &quot;1&quot;}], &nbsp; \n&nbsp; &quot;2&quot;: [{&quot;id&quot;: &quot;2&quot;}] \n}\n<strong>Explanation:</strong>\nOutput is from array.groupBy(fn).\nThe selector function gets the &quot;id&quot; out of each item in the array.\nThere are two objects with an &quot;id&quot; of 1. Both of those objects are put in the first array.\nThere is one object with an &quot;id&quot; of 2. That object is put in the second array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \narray = [\n&nbsp; [1, 2, 3],\n&nbsp; [1, 3, 5],\n&nbsp; [1, 5, 9]\n]\nfn = function (list) { \n&nbsp; return String(list[0]); \n}\n<strong>Output:</strong> \n{ \n&nbsp; &quot;1&quot;: [[1, 2, 3], [1, 3, 5], [1, 5, 9]] \n}\n<strong>Explanation:</strong>\nThe array can be of any type. In this case, the selector function defines the key as being the first element in the array. \nAll the arrays have 1 as their first element so they are grouped together.\n{\n  &quot;1&quot;: [[1, 2, 3], [1, 3, 5], [1, 5, 9]]\n}\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> \narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfn = function (n) { \n&nbsp; return String(n &gt; 5);\n}\n<strong>Output:</strong>\n{\n&nbsp; &quot;true&quot;: [6, 7, 8, 9, 10],\n&nbsp; &quot;false&quot;: [1, 2, 3, 4, 5]\n}\n<strong>Explanation:</strong>\nThe selector function splits the array by whether each number is greater than 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= array.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>fn</code> returns a string</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 259,
            "dislikes": 10,
            "similarQuestions": "[{\"title\": \"Filter Elements from Array\", \"titleSlug\": \"filter-elements-from-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Apply Transform Over Each Element in Array\", \"titleSlug\": \"apply-transform-over-each-element-in-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Snail Traversal\", \"titleSlug\": \"snail-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Array Reduce Transformation\", \"titleSlug\": \"array-reduce-transformation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Array Upper Bound\", \"titleSlug\": \"array-upper-bound\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [],
            "stats": "{\"totalAccepted\": \"24.4K\", \"totalSubmission\": \"29.8K\", \"totalAcceptedRaw\": 24392, \"totalSubmissionRaw\": 29843, \"acRate\": \"81.7%\"}",
            "hints": [
                "First declare an object that will eventually be returned.",
                "Iterate of each element in the array. You can access the array with the \"this\" keyword.",
                "The key is fn(arr[i]). If the key already exists on the object, set the value to be an empty array. Then push the value onto the array at the key."
            ],
            "rephrased": {
                "body": "Enhance the Array prototype with a `groupBy(fn)` method. This method should take a callback function `fn` as input and return an object. The keys of the object will be the results of calling `fn` on each element of the array. The value associated with each key will be an array containing all the elements from the original array that produced that key when passed to `fn`. The order of elements within each value array should match their order in the original array. Solve without using Lodash's `_.groupBy`.",
                "constraints": [
                    "0 <= array.length <= 10^5",
                    "fn returns a string"
                ],
                "testcases": [
                    {
                        "input": "array = [\n  {\"id\":\"1\"},\n  {\"id\":\"1\"},\n  {\"id\":\"2\"}\n],\nfn = function (item) {\n  return item.id;\n}",
                        "output": "{\n  \"1\": [{\"id\": \"1\"}, {\"id\": \"1\"}],\n  \"2\": [{\"id\": \"2\"}]\n}",
                        "explanation": "The `groupBy` function uses the 'id' property of each object in the array as the key.  Two objects have an 'id' of '1', so they are grouped together under the key '1'.  One object has an 'id' of '2', so it is grouped under the key '2'."
                    },
                    {
                        "input": "array = [\n  [1, 2, 3],\n  [1, 3, 5],\n  [1, 5, 9]\n],\nfn = function (list) {\n  return String(list[0]);\n}",
                        "output": "{\n  \"1\": [[1, 2, 3], [1, 3, 5], [1, 5, 9]]\n}",
                        "explanation": "The `groupBy` function uses the first element of each inner array as the key. Since all inner arrays start with '1', they are all grouped under the key '1'."
                    },
                    {
                        "input": "array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfn = function (n) {\n  return String(n > 5);\n}",
                        "output": "{\n  \"true\": [6, 7, 8, 9, 10],\n  \"false\": [1, 2, 3, 4, 5]\n}",
                        "explanation": "The `groupBy` function uses a boolean (converted to a string) to indicate whether each number is greater than 5 or not. Numbers greater than 5 are grouped under the key 'true', and numbers not greater than 5 are grouped under the key 'false'."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "filter-elements-from-array",
                "title": "Filter Elements from Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "apply-transform-over-each-element-in-array",
                "title": "Apply Transform Over Each Element in Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "snail-traversal",
                "title": "Snail Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "array-reduce-transformation",
                "title": "Array Reduce Transformation",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "array-upper-bound",
                "title": "Array Upper Bound",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "First declare an object that will eventually be returned.",
            "Iterate of each element in the array. You can access the array with the \"this\" keyword.",
            "The key is fn(arr[i]). If the key already exists on the object, set the value to be an empty array. Then push the value onto the array at the key."
        ],
        "relatedTopics": [],
        "solutions": {}
    }
}