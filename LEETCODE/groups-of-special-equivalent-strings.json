{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "893",
            "title": "Groups of Special-Equivalent Strings",
            "titleSlug": "groups-of-special-equivalent-strings",
            "content": "<p>You are given an array of strings of the same length <code>words</code>.</p>\n\n<p>In one <strong>move</strong>, you can swap any two even indexed characters or any two odd indexed characters of a string <code>words[i]</code>.</p>\n\n<p>Two strings <code>words[i]</code> and <code>words[j]</code> are <strong>special-equivalent</strong> if after any number of moves, <code>words[i] == words[j]</code>.</p>\n\n<ul>\n\t<li>For example, <code>words[i] = &quot;zzxy&quot;</code> and <code>words[j] = &quot;xyzz&quot;</code> are <strong>special-equivalent</strong> because we may make the moves <code>&quot;zzxy&quot; -&gt; &quot;xzzy&quot; -&gt; &quot;xyzz&quot;</code>.</li>\n</ul>\n\n<p>A <strong>group of special-equivalent strings</strong> from <code>words</code> is a non-empty subset of words such that:</p>\n\n<ul>\n\t<li>Every pair of strings in the group are special equivalent, and</li>\n\t<li>The group is the largest size possible (i.e., there is not a string <code>words[i]</code> not in the group such that <code>words[i]</code> is special-equivalent to every string in the group).</li>\n</ul>\n\n<p>Return <em>the number of <strong>groups of special-equivalent strings</strong> from </em><code>words</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;,&quot;cdab&quot;,&quot;cbad&quot;,&quot;xyzz&quot;,&quot;zzxy&quot;,&quot;zzyx&quot;]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nOne group is [&quot;abcd&quot;, &quot;cdab&quot;, &quot;cbad&quot;], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\nThe other two groups are [&quot;xyzz&quot;, &quot;zzxy&quot;] and [&quot;zzyx&quot;].\nNote that in particular, &quot;zzxy&quot; is not special equivalent to &quot;zzyx&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abc&quot;,&quot;acb&quot;,&quot;bac&quot;,&quot;bca&quot;,&quot;cab&quot;,&quot;cba&quot;]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>words[i]</code> consist of lowercase English letters.</li>\n\t<li>All the strings are of the same length.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 513,
            "dislikes": 1473,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"47.3K\", \"totalSubmission\": \"66.3K\", \"totalAcceptedRaw\": 47340, \"totalSubmissionRaw\": 66291, \"acRate\": \"71.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of strings `words`, where all strings have the same length.  A move consists of swapping any two characters at even indices or any two characters at odd indices within a string. Two strings `words[i]` and `words[j]` are considered *special-equivalent* if, after applying any number of these moves, `words[i]` can become identical to `words[j]`.  A *group of special-equivalent strings* is a maximal set of strings from `words` where every pair of strings within the group is special-equivalent, and no other string from `words` can be added to the group while maintaining special-equivalence for all pairs.  Return the number of distinct special-equivalent groups that can be formed from the `words` array.",
                "constraints": [
                    "1 <= words.length <= 1000",
                    "1 <= words[i].length <= 20",
                    "words[i] consist of lowercase English letters.",
                    "All the strings are of the same length."
                ],
                "testcases": [
                    {
                        "input": "[\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]",
                        "output": "3",
                        "explanation": "The strings [\"abcd\", \"cdab\", \"cbad\"] are special-equivalent and form one group. The strings [\"xyzz\", \"zzxy\"] are special-equivalent and form another group. The string [\"zzyx\"] forms a third group."
                    },
                    {
                        "input": "[\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numSpecialEquivGroups(vector<string>& words) {\n    unordered_set<string> set;\n\n    for (const string& word : words) {\n      string even;\n      string odd;\n      for (int i = 0; i < word.length(); ++i)\n        if (i % 2 == 0)\n          even += word[i];\n        else\n          odd += word[i];\n      std::ranges::sort(even);\n      std::ranges::sort(odd);\n      set.insert(even + odd);\n    }\n\n    return set.size();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numSpecialEquivGroups(String[] words) {\n    Set<String> set = new HashSet<>();\n\n    for (final String word : words) {\n      String even = \"\";\n      String odd = \"\";\n      for (int i = 0; i < word.length(); ++i)\n        if (i % 2 == 0)\n          even += word.charAt(i);\n        else\n          odd += word.charAt(i);\n      char[] evenCharArray = even.toCharArray();\n      char[] oddCharArray = odd.toCharArray();\n      Arrays.sort(evenCharArray);\n      Arrays.sort(oddCharArray);\n      set.add(new String(evenCharArray) + new String(oddCharArray));\n    }\n\n    return set.size();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numSpecialEquivGroups(self, words: List[str]) -> int:\n    return len({''.join(sorted(word[::2])) + ''.join(sorted(word[1::2]))\n                for word in words})\n",
                "lang_text": "py"
            }
        }
    }
}