{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2157",
            "title": "Groups of Strings",
            "titleSlug": "groups-of-strings",
            "content": "<p>You are given a <strong>0-indexed</strong> array of strings <code>words</code>. Each string consists of <strong>lowercase English letters</strong> only. No letter occurs more than once in any string of <code>words</code>.</p>\n\n<p>Two strings <code>s1</code> and <code>s2</code> are said to be <strong>connected</strong> if the set of letters of <code>s2</code> can be obtained from the set of letters of <code>s1</code> by any <strong>one</strong> of the following operations:</p>\n\n<ul>\n\t<li>Adding exactly one letter to the set of the letters of <code>s1</code>.</li>\n\t<li>Deleting exactly one letter from the set of the letters of <code>s1</code>.</li>\n\t<li>Replacing exactly one letter from the set of the letters of <code>s1</code> with any letter, <strong>including</strong> itself.</li>\n</ul>\n\n<p>The array <code>words</code> can be divided into one or more non-intersecting <strong>groups</strong>. A string belongs to a group if any <strong>one</strong> of the following is true:</p>\n\n<ul>\n\t<li>It is connected to <strong>at least one</strong> other string of the group.</li>\n\t<li>It is the <strong>only</strong> string present in the group.</li>\n</ul>\n\n<p>Note that the strings in <code>words</code> should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique.</p>\n\n<p>Return <em>an array</em> <code>ans</code> <em>of size</em> <code>2</code> <em>where:</em></p>\n\n<ul>\n\t<li><code>ans[0]</code> <em>is the <strong>maximum number</strong> of groups</em> <code>words</code> <em>can be divided into, and</em></li>\n\t<li><code>ans[1]</code> <em>is the <strong>size of the largest</strong> group</em>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;b&quot;,&quot;ab&quot;,&quot;cde&quot;]\n<strong>Output:</strong> [2,3]\n<strong>Explanation:</strong>\n- words[0] can be used to obtain words[1] (by replacing &#39;a&#39; with &#39;b&#39;), and words[2] (by adding &#39;b&#39;). So words[0] is connected to words[1] and words[2].\n- words[1] can be used to obtain words[0] (by replacing &#39;b&#39; with &#39;a&#39;), and words[2] (by adding &#39;a&#39;). So words[1] is connected to words[0] and words[2].\n- words[2] can be used to obtain words[0] (by deleting &#39;b&#39;), and words[1] (by deleting &#39;a&#39;). So words[2] is connected to words[0] and words[1].\n- words[3] is not connected to any string in words.\nThus, words can be divided into 2 groups [&quot;a&quot;,&quot;b&quot;,&quot;ab&quot;] and [&quot;cde&quot;]. The size of the largest group is 3.  \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;]\n<strong>Output:</strong> [1,3]\n<strong>Explanation:</strong>\n- words[0] is connected to words[1].\n- words[1] is connected to words[0] and words[2].\n- words[2] is connected to words[1].\nSince all strings are connected to each other, they should be grouped together.\nThus, the size of the largest group is 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 26</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters only.</li>\n\t<li>No letter occurs more than once in <code>words[i]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 445,
            "dislikes": 54,
            "similarQuestions": "[{\"title\": \"Word Ladder II\", \"titleSlug\": \"word-ladder-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Similar String Groups\", \"titleSlug\": \"similar-string-groups\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Largest Component Size by Common Factor\", \"titleSlug\": \"largest-component-size-by-common-factor\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.8K\", \"totalSubmission\": \"34.2K\", \"totalAcceptedRaw\": 8836, \"totalSubmissionRaw\": 34222, \"acRate\": \"25.8%\"}",
            "hints": [
                "Can we build a graph from words, where there exists an edge between nodes i and j if words[i] and words[j] are connected?",
                "The problem now boils down to finding the total number of components and the size of the largest component in the graph.",
                "How can we use bit masking to reduce the search space while adding edges to node i?"
            ],
            "rephrased": {
                "body": "You are given a **0-indexed** array of strings `words`. Each string consists of **lowercase English letters** only, with no letter appearing more than once in any string.\n\nTwo strings `s1` and `s2` are considered **connected** if the set of letters in `s2` can be obtained from the set of letters in `s1` by performing exactly one of the following operations:\n\n*   Adding exactly one letter.\n*   Deleting exactly one letter.\n*   Replacing exactly one letter with any other letter (including itself).\n\nThe array `words` can be divided into one or more non-intersecting **groups**. A string belongs to a group if it's connected to at least one other string in the group, or if it's the only string in the group.  The grouping should be done such that a string from one group cannot be connected to a string in another group. This arrangement is guaranteed to be unique.\n\nReturn an array `ans` of size 2 where:\n\n*   `ans[0]` is the **maximum number** of groups `words` can be divided into.\n*   `ans[1]` is the **size of the largest** group.",
                "constraints": [
                    "1 <= words.length <= 2 * 10<sup>4</sup>",
                    "1 <= words[i].length <= 26",
                    "words[i] consists of lowercase English letters only.",
                    "No letter occurs more than once in words[i]."
                ],
                "testcases": [
                    {
                        "input": "words = [\"a\",\"b\",\"ab\",\"cde\"]",
                        "output": "[2,3]",
                        "explanation": "The words can be divided into two groups: [\"a\", \"b\", \"ab\"] and [\"cde\"]. The first group contains strings that are connected through adding, deleting, or replacing a single character. The second group contains a single string that is not connected to any other string. The size of the largest group is 3."
                    },
                    {
                        "input": "words = [\"a\",\"ab\",\"abc\"]",
                        "output": "[1,3]",
                        "explanation": "All strings are connected to each other. Therefore, they should all belong to the same group, which results in only 1 group. The size of the largest group is therefore 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "word-ladder-ii",
                "title": "Word Ladder II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "similar-string-groups",
                "title": "Similar String Groups",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "largest-component-size-by-common-factor",
                "title": "Largest Component Size by Common Factor",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we build a graph from words, where there exists an edge between nodes i and j if words[i] and words[j] are connected?",
            "The problem now boils down to finding the total number of components and the size of the largest component in the graph.",
            "How can we use bit masking to reduce the search space while adding edges to node i?"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            }
        ]
    }
}