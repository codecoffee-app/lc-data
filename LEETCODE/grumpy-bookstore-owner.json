{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1052",
            "title": "Grumpy Bookstore Owner",
            "titleSlug": "grumpy-bookstore-owner",
            "content": "<p>There is a bookstore owner that has a store open for <code>n</code> minutes. Every minute, some number of customers enter the store. You are given an integer array <code>customers</code> of length <code>n</code> where <code>customers[i]</code> is the number of the customer that enters the store at the start of the <code>i<sup>th</sup></code> minute and all those customers leave after the end of that minute.</p>\n\n<p>On some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where <code>grumpy[i]</code> is <code>1</code> if the bookstore owner is grumpy during the <code>i<sup>th</sup></code> minute, and is <code>0</code> otherwise.</p>\n\n<p>When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.</p>\n\n<p>The bookstore owner knows a secret technique to keep themselves not grumpy for <code>minutes</code> consecutive minutes, but can only use it once.</p>\n\n<p>Return <em>the maximum number of customers that can be satisfied throughout the day</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> The bookstore owner keeps themselves not grumpy for the last 3 minutes. \nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> customers = [1], grumpy = [0], minutes = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == customers.length == grumpy.length</code></li>\n\t<li><code>1 &lt;= minutes &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= customers[i] &lt;= 1000</code></li>\n\t<li><code>grumpy[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1642,
            "dislikes": 129,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"69.5K\", \"totalSubmission\": \"121.7K\", \"totalAcceptedRaw\": 69510, \"totalSubmissionRaw\": 121745, \"acRate\": \"57.1%\"}",
            "hints": [
                "Say the store owner uses their power in minute 1 to X and we have some answer A.  If they instead use their power from minute 2 to X+1, we only have to use data from minutes 1, 2, X and X+1 to update our answer A."
            ],
            "rephrased": {
                "body": "A bookstore owner has a store open for 'n' minutes. Each minute, a certain number of customers enter the store. You are given an array 'customers' where customers[i] is the number of customers entering at the start of the i-th minute. Customers leave at the end of that minute.\n\nThe bookstore owner is sometimes grumpy. You are given a binary array 'grumpy' where grumpy[i] is 1 if the owner is grumpy during the i-th minute, and 0 otherwise.\n\nGrumpy owners dissatisfy customers. The owner has a secret technique to remain un-grumpy for 'minutes' consecutive minutes, but they can only use it once.\n\nDetermine the maximum number of customers that can be satisfied throughout the day.",
                "constraints": [
                    "n == customers.length == grumpy.length",
                    "1 <= minutes <= n <= 2 * 10^4",
                    "0 <= customers[i] <= 1000",
                    "grumpy[i] is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3",
                        "output": "16",
                        "explanation": "By using the technique for the last 3 minutes, the owner can satisfy 1 + 0 + 1 + 0 + 1 + 0 + 7 + 5 = 16 customers."
                    },
                    {
                        "input": "customers = [1], grumpy = [0], minutes = 1",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Say the store owner uses their power in minute 1 to X and we have some answer A.  If they instead use their power from minute 2 to X+1, we only have to use data from minutes 1, 2, X and X+1 to update our answer A."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\n    int satisfied = 0;\n    int madeSatisfied = 0;\n    int windowSatisfied = 0;\n\n    for (int i = 0; i < customers.size(); ++i) {\n      if (grumpy[i] == 0)\n        satisfied += customers[i];\n      else\n        windowSatisfied += customers[i];\n      if (i >= X && grumpy[i - X] == 1)\n        windowSatisfied -= customers[i - X];\n      madeSatisfied = max(madeSatisfied, windowSatisfied);\n    }\n\n    return satisfied + madeSatisfied;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxSatisfied(int[] customers, int[] grumpy, int X) {\n    int satisfied = 0;\n    int madeSatisfied = 0;\n    int windowSatisfied = 0;\n\n    for (int i = 0; i < customers.length; ++i) {\n      if (grumpy[i] == 0)\n        satisfied += customers[i];\n      else\n        windowSatisfied += customers[i];\n      if (i >= X && grumpy[i - X] == 1)\n        windowSatisfied -= customers[i - X];\n      madeSatisfied = Math.max(madeSatisfied, windowSatisfied);\n    }\n\n    return satisfied + madeSatisfied;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n    satisfied = sum(c for i, c in enumerate(customers) if grumpy[i] == 0)\n    madeSatisfied = 0\n    windowSatisfied = 0\n\n    for i, customer in enumerate(customers):\n      if grumpy[i] == 1:\n        windowSatisfied += customer\n      if i >= X and grumpy[i - X] == 1:\n        windowSatisfied -= customers[i - X]\n      madeSatisfied = max(madeSatisfied, windowSatisfied)\n\n    return satisfied + madeSatisfied\n",
                "lang_text": "py"
            }
        }
    }
}