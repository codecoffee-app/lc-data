{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "375",
            "title": "Guess Number Higher or Lower II",
            "titleSlug": "guess-number-higher-or-lower-ii",
            "content": "<p>We are playing the Guessing Game. The game will work as follows:</p>\n\n<ol>\n\t<li>I pick a number between&nbsp;<code>1</code>&nbsp;and&nbsp;<code>n</code>.</li>\n\t<li>You guess a number.</li>\n\t<li>If you guess the right number, <strong>you win the game</strong>.</li>\n\t<li>If you guess the wrong number, then I will tell you whether the number I picked is <strong>higher or lower</strong>, and you will continue guessing.</li>\n\t<li>Every time you guess a wrong number&nbsp;<code>x</code>, you will pay&nbsp;<code>x</code>&nbsp;dollars. If you run out of money, <strong>you lose the game</strong>.</li>\n</ol>\n\n<p>Given a particular&nbsp;<code>n</code>, return&nbsp;<em>the minimum amount of money you need to&nbsp;<strong>guarantee a win regardless of what number I pick</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/10/graph.png\" style=\"width: 505px; height: 388px;\" />\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n&nbsp;   - If this is my number, your total is $0. Otherwise, you pay $7.\n&nbsp;   - If my number is higher, the range is [8,10]. Guess 9.\n&nbsp;       - If this is my number, your total is $7. Otherwise, you pay $9.\n&nbsp;       - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n&nbsp;       - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n&nbsp;   - If my number is lower, the range is [1,6]. Guess 3.\n&nbsp;       - If this is my number, your total is $7. Otherwise, you pay $3.\n&nbsp;       - If my number is higher, the range is [4,6]. Guess 5.\n&nbsp;           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n&nbsp;           - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n&nbsp;           - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n&nbsp;       - If my number is lower, the range is [1,2]. Guess 1.\n&nbsp;           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n&nbsp;           - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>&nbsp;There is only one possible number, so you can guess 1 and not have to pay anything.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>&nbsp;There are two possible numbers, 1 and 2.\n- Guess 1.\n&nbsp;   - If this is my number, your total is $0. Otherwise, you pay $1.\n&nbsp;   - If my number is higher, it must be 2. Guess 2. Your total is $1.\nThe worst case is that you pay $1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2059,
            "dislikes": 2068,
            "similarQuestions": "[{\"title\": \"Flip Game II\", \"titleSlug\": \"flip-game-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower\", \"titleSlug\": \"guess-number-higher-or-lower\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Can I Win\", \"titleSlug\": \"can-i-win\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K Closest Elements\", \"titleSlug\": \"find-k-closest-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"116.4K\", \"totalSubmission\": \"241.2K\", \"totalAcceptedRaw\": 116360, \"totalSubmissionRaw\": 241164, \"acRate\": \"48.2%\"}",
            "hints": [
                "The best strategy to play the game is to minimize the maximum loss you could possibly face. Another strategy is to minimize the expected loss. Here, we are interested in the <b>first</b> scenario.",
                "Take a small example (n = 3). What do you end up paying in the worst case?",
                "Check out <a href=\"https://en.wikipedia.org/wiki/Minimax\">this article</a> if you're still stuck.",
                "The purely recursive implementation of minimax would be worthless for even a small n. You MUST use dynamic programming.",
                "As a follow-up, how would you modify your code to solve the problem of minimizing the expected loss, instead of the worst-case loss?"
            ],
            "rephrased": {
                "body": "You are playing a number guessing game where you need to guess a number I've picked between 1 and n. After each guess, I'll tell you if my number is higher or lower.  Each wrong guess x costs you $x. Determine the minimum amount of money you need to guarantee a win, regardless of the number I pick.",
                "constraints": [
                    "1 <= n <= 200"
                ],
                "testcases": [
                    {
                        "input": "n = 10",
                        "output": "16",
                        "explanation": "The optimal strategy to guarantee a win involves picking a number in the middle and branching based on whether the actual number is higher or lower. In the worst-case scenario for n=10, the minimum cost to guarantee a win is $16."
                    },
                    {
                        "input": "n = 1",
                        "output": "0",
                        "explanation": "Since there is only one number to guess (1), you can guess it directly without paying any cost."
                    },
                    {
                        "input": "n = 2",
                        "output": "1",
                        "explanation": "If n=2, you can guess 1. If that's correct, the cost is 0. If not, the number must be 2, and you pay $1 for the incorrect guess of 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "flip-game-ii",
                "title": "Flip Game II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "guess-number-higher-or-lower",
                "title": "Guess Number Higher or Lower",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "can-i-win",
                "title": "Can I Win",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-k-closest-elements",
                "title": "Find K Closest Elements",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The best strategy to play the game is to minimize the maximum loss you could possibly face. Another strategy is to minimize the expected loss. Here, we are interested in the <b>first</b> scenario.",
            "Take a small example (n = 3). What do you end up paying in the worst case?",
            "Check out <a href=\"https://en.wikipedia.org/wiki/Minimax\">this article</a> if you're still stuck.",
            "The purely recursive implementation of minimax would be worthless for even a small n. You MUST use dynamic programming.",
            "As a follow-up, how would you modify your code to solve the problem of minimizing the expected loss, instead of the worst-case loss?"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int getMoneyAmount(int n) {\n    // dp[i][j] := min money you need to guarantee a win of picking i..j\n    dp.resize(n + 1, vector<int>(n + 1, INT_MAX));\n    return getMoneyAmount(1, n);\n  }\n\n private:\n  vector<vector<int>> dp;\n\n  int getMoneyAmount(int i, int j) {\n    if (i >= j)\n      return 0;\n    if (dp[i][j] != INT_MAX)\n      return dp[i][j];\n\n    for (int k = i; k <= j; ++k)\n      dp[i][j] =\n          min(dp[i][j],\n              max(getMoneyAmount(i, k - 1), getMoneyAmount(k + 1, j)) + k);\n\n    return dp[i][j];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int getMoneyAmount(int n) {\n    // dp[i][j] := min money you need to guarantee a win of picking i..j\n    dp = new int[n + 1][n + 1];\n    Arrays.stream(dp).forEach(A -> Arrays.fill(A, Integer.MAX_VALUE));\n    return getMoneyAmount(1, n);\n  }\n\n  private int[][] dp;\n\n  private int getMoneyAmount(int i, int j) {\n    if (i >= j)\n      return 0;\n    if (dp[i][j] != Integer.MAX_VALUE)\n      return dp[i][j];\n\n    for (int k = i; k <= j; ++k)\n      dp[i][j] = Math.min(dp[i][j], //\n                          Math.max(getMoneyAmount(i, k - 1), getMoneyAmount(k + 1, j)) + k);\n\n    return dp[i][j];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getMoneyAmount(self, n: int) -> int:\n    # dp(i, j) := min money you need to guarantee a win of picking i..j\n    @functools.lru_cache(None)\n    def dp(i: int, j: int) -> int:\n      if i >= j:\n        return 0\n\n      ans = math.inf\n\n      for k in range(i, j + 1):\n        ans = min(ans, max(dp(i, k - 1), dp(k + 1, j)) + k)\n\n      return ans\n\n    return dp(1, n)\n",
                "lang_text": "py"
            }
        }
    }
}