{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "374",
            "title": "Guess Number Higher or Lower",
            "titleSlug": "guess-number-higher-or-lower",
            "content": "<p>We are playing the Guess Game. The game is as follows:</p>\n\n<p>I pick a number from <code>1</code> to <code>n</code>. You have to guess which number I picked.</p>\n\n<p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p>\n\n<p>You call a pre-defined API <code>int guess(int num)</code>, which returns three possible results:</p>\n\n<ul>\n\t<li><code>-1</code>: Your guess is higher than the number I picked (i.e. <code>num &gt; pick</code>).</li>\n\t<li><code>1</code>: Your guess is lower than the number I picked (i.e. <code>num &lt; pick</code>).</li>\n\t<li><code>0</code>: your guess is equal to the number I picked (i.e. <code>num == pick</code>).</li>\n</ul>\n\n<p>Return <em>the number that I picked</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10, pick = 6\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, pick = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, pick = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= pick &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3505,
            "dislikes": 462,
            "similarQuestions": "[{\"title\": \"First Bad Version\", \"titleSlug\": \"first-bad-version\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower II\", \"titleSlug\": \"guess-number-higher-or-lower-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K Closest Elements\", \"titleSlug\": \"find-k-closest-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Interactive",
                    "slug": "interactive"
                }
            ],
            "stats": "{\"totalAccepted\": \"582.9K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 582948, \"totalSubmissionRaw\": 1102309, \"acRate\": \"52.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are playing a Guess Game where you need to guess a number I have picked between 1 and n. After each guess, I will tell you if the number I picked is higher or lower than your guess. Use the `guess(int num)` API, which returns -1 if your guess is too high, 1 if your guess is too low, and 0 if your guess is correct. Return the number I picked.",
                "constraints": [
                    "1 <= n <= 2<sup>31</sup> - 1",
                    "1 <= pick <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 10, pick = 6",
                        "output": "6",
                        "explanation": null
                    },
                    {
                        "input": "n = 1, pick = 1",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "n = 2, pick = 1",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "first-bad-version",
                "title": "First Bad Version",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "guess-number-higher-or-lower-ii",
                "title": "Guess Number Higher or Lower II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-k-closest-elements",
                "title": "Find K Closest Elements",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Interactive",
                "slug": "interactive"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "/**\n * Forward declaration of guess API.\n * (The problem description is not clear, so I translate it into follows.)\n *\n * @param traget num\n *        guess num\n *\n * @return -1 if guess num >  target num\n *          0 if guess num == target num\n *          1 if guess num <  target num\n */\n\nclass Solution {\n public:\n  int guessNumber(int n) {\n    int l = 1;\n    int r = n;\n\n    // Find the first guess num that >= target num\n    while (l < r) {\n      const int m = l + (r - l) / 2;\n      if (guess(m) <= 0)  // -1, 0\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "/**\n * Forward declaration of guess API.\n * (The problem description is not clear, so I translate it into follows.)\n *\n * @param traget num\n *        guess num\n *\n * @return -1 if guess num >  target num\n *          0 if guess num == target num\n *          1 if guess num <  target num\n */\n\npublic class Solution extends GuessGame {\n  public int guessNumber(int n) {\n    int l = 1;\n    int r = n;\n\n    // Find the first guess num that >= target num\n    while (l < r) {\n      final int m = l + (r - l) / 2;\n      if (guess(m) <= 0) // -1, 0\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}