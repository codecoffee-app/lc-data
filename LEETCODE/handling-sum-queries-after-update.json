{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2569",
            "title": "Handling Sum Queries After Update",
            "titleSlug": "handling-sum-queries-after-update",
            "content": "<p>You are given two <strong>0-indexed</strong> arrays <code>nums1</code> and <code>nums2</code> and a 2D array <code>queries</code> of queries. There are three types of queries:</p>\n\n<ol>\n\t<li>For a query of type 1, <code>queries[i]&nbsp;= [1, l, r]</code>. Flip the values from <code>0</code> to <code>1</code> and from <code>1</code> to <code>0</code> in <code>nums1</code>&nbsp;from index <code>l</code> to index <code>r</code>. Both <code>l</code> and <code>r</code> are <strong>0-indexed</strong>.</li>\n\t<li>For a query of type 2, <code>queries[i]&nbsp;= [2, p, 0]</code>. For every index <code>0 &lt;= i &lt; n</code>, set&nbsp;<code>nums2[i] =&nbsp;nums2[i]&nbsp;+ nums1[i]&nbsp;* p</code>.</li>\n\t<li>For a query of type 3, <code>queries[i]&nbsp;= [3, 0, 0]</code>. Find the sum of the elements in <code>nums2</code>.</li>\n</ol>\n\n<p>Return <em>an array containing all the answers to the third type&nbsp;queries.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,0,1], nums2 = [0,0,0], queries = [[1,1,1],[2,1,0],[3,0,0]]\n<strong>Output:</strong> [3]\n<strong>Explanation:</strong> After the first query nums1 becomes [1,1,1]. After the second query, nums2 becomes [1,1,1], so the answer to the third query is 3. Thus, [3] is returned.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1], nums2 = [5], queries = [[2,0,0],[3,0,0]]\n<strong>Output:</strong> [5]\n<strong>Explanation:</strong> After the first query, nums2 remains [5], so the answer to the second query is 5. Thus, [5] is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length,nums2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums1.length = nums2.length</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code><font face=\"monospace\">queries[i].length = 3</font></code></li>\n\t<li><code><font face=\"monospace\">0 &lt;= l &lt;= r &lt;= nums1.length - 1</font></code></li>\n\t<li><code><font face=\"monospace\">0 &lt;= p &lt;= 10<sup>6</sup></font></code></li>\n\t<li><code>0 &lt;= nums1[i] &lt;= 1</code></li>\n\t<li><code>0 &lt;= nums2[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 164,
            "dislikes": 23,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.6K\", \"totalSubmission\": \"17.2K\", \"totalAcceptedRaw\": 4607, \"totalSubmissionRaw\": 17236, \"acRate\": \"26.7%\"}",
            "hints": [
                "Use the Lazy Segment Tree to process the queries quickly."
            ],
            "rephrased": {
                "body": "You are given two 0-indexed integer arrays `nums1` and `nums2` of equal length, and a 2D integer array `queries`.  Process the queries as follows:\n\n*   **Type 1:** `queries[i] = [1, l, r]`. Flip the bits (0 to 1, and 1 to 0) in `nums1` within the index range `[l, r]` (inclusive).\n*   **Type 2:** `queries[i] = [2, p, 0]`.  Update each element in `nums2` by adding the product of the corresponding element in `nums1` and `p`.  That is, `nums2[i] = nums2[i] + nums1[i] * p` for all indices `i`.\n*   **Type 3:** `queries[i] = [3, 0, 0]`. Calculate and return the sum of all elements in `nums2`.\n\nReturn an array containing the results of all Type 3 queries.",
                "constraints": [
                    "1 <= nums1.length, nums2.length <= 10^5",
                    "nums1.length = nums2.length",
                    "1 <= queries.length <= 10^5",
                    "queries[i].length = 3",
                    "0 <= l <= r <= nums1.length - 1",
                    "0 <= p <= 10^6",
                    "0 <= nums1[i] <= 1",
                    "0 <= nums2[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [1,0,1], nums2 = [0,0,0], queries = [[1,1,1],[2,1,0],[3,0,0]]",
                        "output": "[3]",
                        "explanation": "Initially, nums1 = [1, 0, 1] and nums2 = [0, 0, 0].\n\nQuery 1: Flip nums1 from index 1 to 1. nums1 becomes [1, 1, 1].\nQuery 2: Update nums2. nums2[i] = nums2[i] + nums1[i] * 1. nums2 becomes [1, 1, 1].\nQuery 3: Return the sum of nums2, which is 3."
                    },
                    {
                        "input": "nums1 = [1], nums2 = [5], queries = [[2,0,0],[3,0,0]]",
                        "output": "[5]",
                        "explanation": "Initially, nums1 = [1] and nums2 = [5].\n\nQuery 1: Update nums2. nums2[i] = nums2[i] + nums1[i] * 0. nums2 remains [5].\nQuery 2: Return the sum of nums2, which is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use the Lazy Segment Tree to process the queries quickly."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class LazySegmentTree {\n public:\n  explicit LazySegmentTree(const vector<int>& nums) {\n    const int n = nums.size();\n    tree.resize(4 * n);\n    lazy.resize(4 * n);\n    build(nums, 0, 0, n - 1);\n  }\n\n  //            i := index of the current node.\n  // [start, end] := range of the current node.\n  //       [l, r] := range of the query.\n  void updateRange(int i, int start, int end, int l, int r) {\n    if (lazy[i])\n      propogate(i, start, end);\n    if (start > r || end < l)\n      return;\n    if (start >= l && end <= r) {\n      flip(i, start, end);\n      return;\n    }\n    const int mid = (start + end) / 2;\n    updateRange(i * 2 + 1, start, mid, l, r);\n    updateRange(i * 2 + 2, mid + 1, end, l, r);\n    tree[i] = tree[2 * i + 1] + tree[2 * i + 2];\n  }\n\n  int getTreeSum() const {\n    return tree[0];\n  }\n\n private:\n  vector<int> tree;\n  vector<bool> lazy;\n\n  void build(const vector<int>& nums, int i, int start, int end) {\n    if (start == end) {\n      tree[i] = nums[start];\n      return;\n    }\n    const int mid = (start + end) / 2;\n    build(nums, 2 * i + 1, start, mid);\n    build(nums, 2 * i + 2, mid + 1, end);\n    tree[i] = tree[2 * i + 1] + tree[2 * i + 2];\n  }\n\n  void propogate(int i, int start, int end) {\n    flip(i, start, end);\n    lazy[i] = false;\n  }\n\n  void flip(int i, int start, int end) {\n    tree[i] = (end - start + 1) - tree[i];  // Flip 0/1.\n    if (start != end) {\n      lazy[2 * i + 1] = !lazy[2 * i + 1];\n      lazy[2 * i + 2] = !lazy[2 * i + 2];\n    }\n  }\n};\n\nclass Solution {\n public:\n  vector<long long> handleQuery(vector<int>& nums1, vector<int>& nums2,\n                                vector<vector<int>>& queries) {\n    vector<long long> ans;\n    LazySegmentTree tree(nums1);\n    long long sumNums2 = accumulate(nums2.begin(), nums2.end(), 0LL);\n\n    for (const vector<int>& query : queries) {\n      const int type = query[0];\n      const int l = query[1];\n      const int r = query[2];\n      if (type == 1) {\n        tree.updateRange(0, 0, nums1.size() - 1, l, r);\n      } else if (type == 2) {\n        sumNums2 += static_cast<long long>(l) * tree.getTreeSum();\n      } else {  // type == 3\n        ans.push_back(sumNums2);\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}