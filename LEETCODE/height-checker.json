{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1051",
            "title": "Height Checker",
            "titleSlug": "height-checker",
            "content": "<p>A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in <strong>non-decreasing order</strong> by height. Let this ordering be represented by the integer array <code>expected</code> where <code>expected[i]</code> is the expected height of the <code>i<sup>th</sup></code> student in line.</p>\n\n<p>You are given an integer array <code>heights</code> representing the <strong>current order</strong> that the students are standing in. Each <code>heights[i]</code> is the height of the <code>i<sup>th</sup></code> student in line (<strong>0-indexed</strong>).</p>\n\n<p>Return <em>the <strong>number of indices</strong> where </em><code>heights[i] != expected[i]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> heights = [1,1,4,2,1,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nheights:  [1,1,<u>4</u>,2,<u>1</u>,<u>3</u>]\nexpected: [1,1,<u>1</u>,2,<u>3</u>,<u>4</u>]\nIndices 2, 4, and 5 do not match.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> heights = [5,1,2,3,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nheights:  [<u>5</u>,<u>1</u>,<u>2</u>,<u>3</u>,<u>4</u>]\nexpected: [<u>1</u>,<u>2</u>,<u>3</u>,<u>4</u>,<u>5</u>]\nAll indices do not match.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> heights = [1,2,3,4,5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nheights:  [1,2,3,4,5]\nexpected: [1,2,3,4,5]\nAll indices match.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= heights.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= heights[i] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1103,
            "dislikes": 75,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Counting Sort",
                    "slug": "counting-sort"
                }
            ],
            "stats": "{\"totalAccepted\": \"315.7K\", \"totalSubmission\": \"414.1K\", \"totalAcceptedRaw\": 315725, \"totalSubmissionRaw\": 414095, \"acRate\": \"76.2%\"}",
            "hints": [
                "Build the correct order of heights by sorting another array, then compare the two arrays."
            ],
            "rephrased": {
                "body": "Given an array `heights` representing the current order of students in a line, and knowing the expected order `expected` is a non-decreasing order of student heights, determine the number of indices where the student's actual height doesn't match their expected height.",
                "constraints": [
                    "1 <= heights.length <= 100",
                    "1 <= heights[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1,1,4,2,1,3]",
                        "output": "3",
                        "explanation": "The expected array would be [1,1,1,2,3,4]. The values at indices 2, 4, and 5 differ between the `heights` and `expected` arrays."
                    },
                    {
                        "input": "[5,1,2,3,4]",
                        "output": "5",
                        "explanation": "The expected array would be [1,2,3,4,5]. All elements at each index are different between the `heights` and `expected` arrays."
                    },
                    {
                        "input": "[1,2,3,4,5]",
                        "output": "0",
                        "explanation": "The expected array would be [1,2,3,4,5]. All elements at each index are same between the `heights` and `expected` arrays."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Build the correct order of heights by sorting another array, then compare the two arrays."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Counting Sort",
                "slug": "counting-sort"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int heightChecker(vector<int>& heights) {\n    int ans = 0;\n    int currentHeight = 1;\n    vector<int> count(101);\n\n    for (int height : heights)\n      ++count[height];\n\n    for (int height : heights) {\n      while (count[currentHeight] == 0)\n        ++currentHeight;\n      if (height != currentHeight)\n        ++ans;\n      --count[currentHeight];\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int heightChecker(int[] heights) {\n    int ans = 0;\n    int currentHeight = 1;\n    int[] count = new int[101];\n\n    for (int height : heights)\n      ++count[height];\n\n    for (int height : heights) {\n      while (count[currentHeight] == 0)\n        ++currentHeight;\n      if (height != currentHeight)\n        ++ans;\n      --count[currentHeight];\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def heightChecker(self, heights: List[int]) -> int:\n    ans = 0\n    currentHeight = 1\n    count = [0] * 101\n\n    for height in heights:\n      count[height] += 1\n\n    for height in heights:\n      while count[currentHeight] == 0:\n        currentHeight += 1\n      if height != currentHeight:\n        ans += 1\n      count[currentHeight] -= 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}