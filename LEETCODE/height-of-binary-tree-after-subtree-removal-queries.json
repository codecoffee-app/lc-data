{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2458",
            "title": "Height of Binary Tree After Subtree Removal Queries",
            "titleSlug": "height-of-binary-tree-after-subtree-removal-queries",
            "content": "<p>You are given the <code>root</code> of a <strong>binary tree</strong> with <code>n</code> nodes. Each node is assigned a unique value from <code>1</code> to <code>n</code>. You are also given an array <code>queries</code> of size <code>m</code>.</p>\n\n<p>You have to perform <code>m</code> <strong>independent</strong> queries on the tree where in the <code>i<sup>th</sup></code> query you do the following:</p>\n\n<ul>\n\t<li><strong>Remove</strong> the subtree rooted at the node with the value <code>queries[i]</code> from the tree. It is <strong>guaranteed</strong> that <code>queries[i]</code> will <strong>not</strong> be equal to the value of the root.</li>\n</ul>\n\n<p>Return <em>an array </em><code>answer</code><em> of size </em><code>m</code><em> where </em><code>answer[i]</code><em> is the height of the tree after performing the </em><code>i<sup>th</sup></code><em> query</em>.</p>\n\n<p><strong>Note</strong>:</p>\n\n<ul>\n\t<li>The queries are independent, so the tree returns to its <strong>initial</strong> state after each query.</li>\n\t<li>The height of a tree is the <strong>number of edges in the longest simple path</strong> from the root to some node in the tree.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/07/binaryytreeedrawio-1.png\" style=\"width: 495px; height: 281px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]\n<strong>Output:</strong> [2]\n<strong>Explanation:</strong> The diagram above shows the tree after removing the subtree rooted at node with value 4.\nThe height of the tree is 2 (The path 1 -&gt; 3 -&gt; 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/07/binaryytreeedrawio-2.png\" style=\"width: 301px; height: 284px;\" />\n<pre>\n<strong>Input:</strong> root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]\n<strong>Output:</strong> [3,2,3,2]\n<strong>Explanation:</strong> We have the following queries:\n- Removing the subtree rooted at node with value 3. The height of the tree becomes 3 (The path 5 -&gt; 8 -&gt; 2 -&gt; 4).\n- Removing the subtree rooted at node with value 2. The height of the tree becomes 2 (The path 5 -&gt; 8 -&gt; 1).\n- Removing the subtree rooted at node with value 4. The height of the tree becomes 3 (The path 5 -&gt; 8 -&gt; 2 -&gt; 6).\n- Removing the subtree rooted at node with value 8. The height of the tree becomes 2 (The path 5 -&gt; 9 -&gt; 3).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is <code>n</code>.</li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= Node.val &lt;= n</code></li>\n\t<li>All the values in the tree are <strong>unique</strong>.</li>\n\t<li><code>m == queries.length</code></li>\n\t<li><code>1 &lt;= m &lt;= min(n, 10<sup>4</sup>)</code></li>\n\t<li><code>1 &lt;= queries[i] &lt;= n</code></li>\n\t<li><code>queries[i] != root.val</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 746,
            "dislikes": 17,
            "similarQuestions": "[{\"title\": \"Maximum Depth of Binary Tree\", \"titleSlug\": \"maximum-depth-of-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"19.2K\", \"totalSubmission\": \"48.9K\", \"totalAcceptedRaw\": 19215, \"totalSubmissionRaw\": 48872, \"acRate\": \"39.3%\"}",
            "hints": [
                "Try pre-computing the answer for each node from 1 to n, and answer each query in O(1).",
                "The answers can be precomputed in a single tree traversal after computing the height of each subtree."
            ],
            "rephrased": {
                "body": "You are given the `root` of a binary tree with `n` nodes. Each node has a unique value from 1 to `n`. You are also given an array `queries` of size `m`. For each query in `queries`, you need to independently remove the subtree rooted at the node with the value `queries[i]` from the tree and calculate the height of the resulting tree. Return an array `answer` of size `m` where `answer[i]` is the height of the tree after performing the i-th query.\n\nThe height of a tree is defined as the number of edges in the longest simple path from the root to some node in the tree.",
                "constraints": [
                    "The number of nodes in the tree is `n`.",
                    "`2 <= n <= 10^5`",
                    "`1 <= Node.val <= n`",
                    "All the values in the tree are unique.",
                    "`m == queries.length`",
                    "`1 <= m <= min(n, 10^4)`",
                    "`1 <= queries[i] <= n`",
                    "`queries[i] != root.val`"
                ],
                "testcases": [
                    {
                        "input": "root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]",
                        "output": "[2]",
                        "explanation": "After removing the subtree rooted at node with value 4, the height of the tree is 2 (The path 1 -> 3 -> 2)."
                    },
                    {
                        "input": "root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]",
                        "output": "[3,2,3,2]",
                        "explanation": "For the query [3], removing the subtree rooted at 3 results in height 3 (path 5 -> 8 -> 2 -> 4). For [2], height becomes 2 (path 5 -> 8 -> 1). For [4], height is 3 (path 5 -> 8 -> 2 -> 6). For [8], height is 2 (path 5 -> 9 -> 3)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-depth-of-binary-tree",
                "title": "Maximum Depth of Binary Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try pre-computing the answer for each node from 1 to n, and answer each query in O(1).",
            "The answers can be precomputed in a single tree traversal after computing the height of each subtree."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> treeQueries(TreeNode* root, vector<int>& queries) {\n    vector<int> ans;\n\n    dfs(root, 0, 0);\n\n    for (const int query : queries)\n      ans.push_back(valToMaxHeight[query]);\n\n    return ans;\n  }\n\n private:\n  // valToMaxHeight[val] := max height w/o node with val\n  unordered_map<int, int> valToMaxHeight;\n  // valToHeight[val] := height of node with val\n  unordered_map<int, int> valToHeight;\n\n  int height(TreeNode* root) {\n    if (root == nullptr)\n      return 0;\n    if (const auto it = valToHeight.find(root->val); it != valToHeight.cend())\n      return it->second;\n    return valToHeight[root->val] =\n               (1 + max(height(root->left), height(root->right)));\n  }\n\n  // maxHeight := max height w/o current node `root`\n  void dfs(TreeNode* root, int depth, int maxHeight) {\n    if (root == nullptr)\n      return;\n    valToMaxHeight[root->val] = maxHeight;\n    dfs(root->left, depth + 1, max(maxHeight, depth + height(root->right)));\n    dfs(root->right, depth + 1, max(maxHeight, depth + height(root->left)));\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] treeQueries(TreeNode root, int[] queries) {\n    int[] ans = new int[queries.length];\n\n    dfs(root, 0, 0);\n\n    for (int i = 0; i < queries.length; ++i)\n      ans[i] = valToMaxHeight.get(queries[i]);\n\n    return ans;\n  }\n\n  // valToMaxHeight[val] := max height w/o node with val\n  private Map<Integer, Integer> valToMaxHeight = new HashMap<>();\n  // valToHeight[val] := height of node with val\n  private Map<Integer, Integer> valToHeight = new HashMap<>();\n\n  private int height(TreeNode root) {\n    if (root == null)\n      return 0;\n    if (valToHeight.containsKey(root.val))\n      return valToHeight.get(root.val);\n    final int h = 1 + Math.max(height(root.left), height(root.right));\n    valToHeight.put(root.val, h);\n    return h;\n  }\n\n  // maxHeight := max height w/o current node `root`\n  private void dfs(TreeNode root, int depth, int maxHeight) {\n    if (root == null)\n      return;\n    valToMaxHeight.put(root.val, maxHeight);\n    dfs(root.left, depth + 1, Math.max(maxHeight, depth + height(root.right)));\n    dfs(root.right, depth + 1, Math.max(maxHeight, depth + height(root.left)));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def treeQueries(self, root: Optional[TreeNode], queries: List[int]) -> List[int]:\n    @lru_cache(None)\n    def height(root: Optional[TreeNode]) -> int:\n      if not root:\n        return 0\n      return 1 + max(height(root.left), height(root.right))\n\n    # valToMaxHeight[val] := max height w/o node with val\n    valToMaxHeight = {}\n\n    # maxHeight := max height w/o current node `root`\n    def dfs(root: Optional[TreeNode], depth: int, maxHeight: int) -> None:\n      if not root:\n        return\n      valToMaxHeight[root.val] = maxHeight\n      dfs(root.left, depth + 1, max(maxHeight, depth + height(root.right)))\n      dfs(root.right, depth + 1, max(maxHeight, depth + height(root.left)))\n\n    dfs(root, 0, 0)\n    return [valToMaxHeight[query] for query in queries]\n",
                "lang_text": "py"
            }
        }
    }
}