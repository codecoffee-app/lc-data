{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "213",
            "title": "House Robber II",
            "titleSlug": "house-robber-ii",
            "content": "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle.</strong> That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and&nbsp;<b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p>\n\n<p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <strong>without alerting the police</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9390,
            "dislikes": 136,
            "similarQuestions": "[{\"title\": \"House Robber\", \"titleSlug\": \"house-robber\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint House\", \"titleSlug\": \"paint-house\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint Fence\", \"titleSlug\": \"paint-fence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber III\", \"titleSlug\": \"house-robber-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Non-negative Integers without Consecutive Ones\", \"titleSlug\": \"non-negative-integers-without-consecutive-ones\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Coin Path\", \"titleSlug\": \"coin-path\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"683.4K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 683419, \"totalSubmissionRaw\": 1639352, \"acRate\": \"41.7%\"}",
            "hints": [
                "Since House[1] and House[n] are adjacent, they cannot be robbed together. Therefore, the problem becomes to rob either House[1]-House[n-1] or House[2]-House[n], depending on which choice offers more money. Now the problem has degenerated to the <a href =\"https://leetcode.com/problems/house-robber/description/\">House Robber</a>, which is already been solved."
            ],
            "rephrased": {
                "body": "You are a professional robber planning to maximize your loot from houses along a street. The houses are arranged in a circle, meaning the first and last house are neighbors.  Adjacent houses are protected by a security system that triggers if two adjacent houses are robbed on the same night.\n\nGiven an array of integers representing the amount of money in each house, determine the maximum amount of money you can rob without alerting the police.",
                "constraints": [
                    "1 <= nums.length <= 100",
                    "0 <= nums[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[2,3,2]",
                        "output": "3",
                        "explanation": "You cannot rob house 1 (money = 2) and then rob house 3 (money = 2) because they are adjacent in the circular arrangement. The optimal solution is to rob house 2, yielding a total of 3."
                    },
                    {
                        "input": "[1,2,3,1]",
                        "output": "4",
                        "explanation": "The optimal solution is to rob house 1 (money = 1) and then rob house 3 (money = 3), yielding a total of 1 + 3 = 4."
                    },
                    {
                        "input": "[1,2,3]",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "house-robber",
                "title": "House Robber",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "paint-house",
                "title": "Paint House",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "paint-fence",
                "title": "Paint Fence",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "house-robber-iii",
                "title": "House Robber III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "non-negative-integers-without-consecutive-ones",
                "title": "Non-negative Integers without Consecutive Ones",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "coin-path",
                "title": "Coin Path",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Since House[1] and House[n] are adjacent, they cannot be robbed together. Therefore, the problem becomes to rob either House[1]-House[n-1] or House[2]-House[n], depending on which choice offers more money. Now the problem has degenerated to the <a href =\"https://leetcode.com/problems/house-robber/description/\">House Robber</a>, which is already been solved."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int rob(vector<int>& nums) {\n    if (nums.empty())\n      return 0;\n    if (nums.size() == 1)\n      return nums[0];\n\n    auto rob = [&](int l, int r) {\n      int prev1 = 0;  // dp[i - 1]\n      int prev2 = 0;  // dp[i - 2]\n\n      for (int i = l; i <= r; ++i) {\n        const int dp = max(prev1, prev2 + nums[i]);\n        prev2 = prev1;\n        prev1 = dp;\n      }\n\n      return prev1;\n    };\n\n    return max(rob(0, nums.size() - 2), rob(1, nums.size() - 1));\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int rob(int[] nums) {\n    if (nums.length == 0)\n      return 0;\n    if (nums.length == 1)\n      return nums[0];\n    return Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1));\n  }\n\n  private int rob(int[] nums, int l, int r) {\n    int prev1 = 0; // dp[i - 1]\n    int prev2 = 0; // dp[i - 2]\n\n    for (int i = l; i <= r; ++i) {\n      final int dp = Math.max(prev1, prev2 + nums[i]);\n      prev2 = prev1;\n      prev1 = dp;\n    }\n\n    return prev1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def rob(self, nums: List[int]) -> int:\n    if not nums:\n      return 0\n    if len(nums) < 2:\n      return nums[0]\n\n    def rob(l: int, r: int) -> int:\n      dp1 = 0\n      dp2 = 0\n\n      for i in range(l, r + 1):\n        temp = dp1\n        dp1 = max(dp1, dp2 + nums[i])\n        dp2 = temp\n\n      return dp1\n\n    return max(rob(0, len(nums) - 2),\n               rob(1, len(nums) - 1))\n",
                "lang_text": "py"
            }
        }
    }
}