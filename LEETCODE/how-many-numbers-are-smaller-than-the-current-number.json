{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1365",
            "title": "How Many Numbers Are Smaller Than the Current Number",
            "titleSlug": "how-many-numbers-are-smaller-than-the-current-number",
            "content": "<p>Given the array <code>nums</code>, for each <code>nums[i]</code> find out how many numbers in the array are smaller than it. That is, for each <code>nums[i]</code> you have to count the number of valid <code>j&#39;s</code>&nbsp;such that&nbsp;<code>j != i</code> <strong>and</strong> <code>nums[j] &lt; nums[i]</code>.</p>\n\n<p>Return the answer in an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [8,1,2,2,3]\n<strong>Output:</strong> [4,0,1,1,3]\n<strong>Explanation:</strong> \nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1). \nFor nums[3]=2 there exist one smaller number than it (1). \nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,5,4,8]\n<strong>Output:</strong> [2,1,0,3]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7]\n<strong>Output:</strong> [0,0,0,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 500</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5246,
            "dislikes": 119,
            "similarQuestions": "[{\"title\": \"Count of Smaller Numbers After Self\", \"titleSlug\": \"count-of-smaller-numbers-after-self\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Subsequence With Limited Sum\", \"titleSlug\": \"longest-subsequence-with-limited-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"508.9K\", \"totalSubmission\": \"588K\", \"totalAcceptedRaw\": 508943, \"totalSubmissionRaw\": 587969, \"acRate\": \"86.6%\"}",
            "hints": [
                "Brute force for each array element.",
                "In order to improve the time complexity, we can sort the array and get the answer for each array element."
            ],
            "rephrased": {
                "body": "Given an array of integers `nums`, determine for each element `nums[i]` how many other elements in the array are strictly smaller than it.  Return a new array where each element at index `i` represents the count of numbers smaller than `nums[i]` in the original array.",
                "constraints": [
                    "2 <= nums.length <= 500",
                    "0 <= nums[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[8,1,2,2,3]",
                        "output": "[4,0,1,1,3]",
                        "explanation": "For nums[0]=8, there are four smaller numbers (1, 2, 2, and 3). For nums[1]=1, there are no smaller numbers. For nums[2]=2, there is one smaller number (1).  For nums[3]=2, there is one smaller number (1). For nums[4]=3, there are three smaller numbers (1, 2, and 2)."
                    },
                    {
                        "input": "[6,5,4,8]",
                        "output": "[2,1,0,3]",
                        "explanation": "For nums[0]=6, there are two smaller numbers (5 and 4). For nums[1]=5, there is one smaller number (4).  For nums[2]=4, there are no smaller numbers. For nums[3]=8, there are three smaller numbers (6, 5, and 4)."
                    },
                    {
                        "input": "[7,7,7,7]",
                        "output": "[0,0,0,0]",
                        "explanation": "For each element, there are no other elements in the array that are strictly smaller than it."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-of-smaller-numbers-after-self",
                "title": "Count of Smaller Numbers After Self",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "longest-subsequence-with-limited-sum",
                "title": "Longest Subsequence With Limited Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Brute force for each array element.",
            "In order to improve the time complexity, we can sort the array and get the answer for each array element."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n    constexpr int kMax = 100;\n    vector<int> ans;\n    vector<int> count(kMax + 1);\n\n    for (const int num : nums)\n      ++count[num];\n\n    for (int i = 1; i <= kMax; ++i)\n      count[i] += count[i - 1];\n\n    for (const int num : nums)\n      ans.push_back(num == 0 ? 0 : count[num - 1]);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] smallerNumbersThanCurrent(int[] nums) {\n    final int kMax = 100;\n    int[] ans = new int[nums.length];\n    int[] count = new int[kMax + 1];\n\n    for (final int num : nums)\n      ++count[num];\n\n    for (int i = 1; i <= kMax; ++i)\n      count[i] += count[i - 1];\n\n    for (int i = 0; i < nums.length; ++i)\n      ans[i] = nums[i] == 0 ? 0 : count[nums[i] - 1];\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:\n    kMax = 100\n    count = collections.Counter(nums)\n\n    for i in range(1, kMax + 1):\n      count[i] += count[i - 1]\n\n    return [0 if num == 0 else count[num - 1]\n            for num in nums]\n",
                "lang_text": "py"
            }
        }
    }
}