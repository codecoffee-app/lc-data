{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1410",
            "title": "HTML Entity Parser",
            "titleSlug": "html-entity-parser",
            "content": "<p><strong>HTML entity parser</strong> is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.</p>\n\n<p>The special characters and their entities for HTML are:</p>\n\n<ul>\n\t<li><strong>Quotation Mark:</strong> the entity is <code>&amp;quot;</code> and symbol character is <code>&quot;</code>.</li>\n\t<li><strong>Single Quote Mark:</strong> the entity is <code>&amp;apos;</code> and symbol character is <code>&#39;</code>.</li>\n\t<li><strong>Ampersand:</strong> the entity is <code>&amp;amp;</code> and symbol character is <code>&amp;</code>.</li>\n\t<li><strong>Greater Than Sign:</strong> the entity is <code>&amp;gt;</code> and symbol character is <code>&gt;</code>.</li>\n\t<li><strong>Less Than Sign:</strong> the entity is <code>&amp;lt;</code> and symbol character is <code>&lt;</code>.</li>\n\t<li><strong>Slash:</strong> the entity is <code>&amp;frasl;</code> and symbol character is <code>/</code>.</li>\n</ul>\n\n<p>Given the input <code>text</code> string to the HTML parser, you have to implement the entity parser.</p>\n\n<p>Return <em>the text after replacing the entities by the special characters</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;&amp;amp; is an HTML entity but &amp;ambassador; is not.&quot;\n<strong>Output:</strong> &quot;&amp; is an HTML entity but &amp;ambassador; is not.&quot;\n<strong>Explanation:</strong> The parser will replace the &amp;amp; entity by &amp;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;and I quote: &amp;quot;...&amp;quot;&quot;\n<strong>Output:</strong> &quot;and I quote: \\&quot;...\\&quot;&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length &lt;= 10<sup>5</sup></code></li>\n\t<li>The string may contain any possible characters out of all the 256 ASCII characters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 180,
            "dislikes": 320,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.2K\", \"totalSubmission\": \"45.5K\", \"totalAcceptedRaw\": 23234, \"totalSubmissionRaw\": 45474, \"acRate\": \"51.1%\"}",
            "hints": [
                "Search the string for all the occurrences of the character '&'.",
                "For every '&' check if it matches an HTML entity by checking the ';' character and if entity found replace it in the answer."
            ],
            "rephrased": {
                "body": "Implement an HTML entity parser that converts HTML entities in a given string `text` to their corresponding special characters. The parser should handle the following entities:\n\n*   `&quot;` (Quotation Mark)  -> `\"`\n*   `&apos;` (Single Quote Mark) -> `'`\n*   `&amp;` (Ampersand) -> `&`\n*   `&gt;` (Greater Than Sign) -> `>`\n*   `&lt;` (Less Than Sign) -> `<`\n*   `&frasl;` (Slash) -> `/`\n\nReturn the modified string with all recognized entities replaced.",
                "constraints": [
                    "1 <= text.length <= 10^5",
                    "The string may contain any possible characters out of all the 256 ASCII characters."
                ],
                "testcases": [
                    {
                        "input": "&amp;amp; is an HTML entity but &amp;ambassador; is not.",
                        "output": "& is an HTML entity but &ambassador; is not.",
                        "explanation": "The entity '&amp;amp;' is correctly replaced with '&', while '&amp;ambassador;' is not a recognized entity and remains unchanged."
                    },
                    {
                        "input": "and I quote: &amp;quot;...&amp;quot;",
                        "output": "and I quote: \"...\"",
                        "explanation": "The entity '&amp;quot;' is correctly replaced with '\"'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Search the string for all the occurrences of the character '&'.",
            "For every '&' check if it matches an HTML entity by checking the ';' character and if entity found replace it in the answer."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string entityParser(string text) {\n    const unordered_map<string, char> entityToChar{\n        {\"&quot;\", '\"'}, {\"&apos;\", '\\''}, {\"&amp;\", '&'},\n        {\"&gt;\", '>'},   {\"&lt;\", '<'},    {\"&frasl;\", '/'}};\n    string ans;\n    int j = 0;  // text[j..ampersandIndex - 1] is the pending substring.\n    int ampersandIndex = -1;\n\n    for (int i = 0; i < text.length(); ++i)\n      if (text[i] == '&') {\n        ampersandIndex = i;\n      } else if (text[i] == ';' && ampersandIndex >= j) {\n        const string sub = text.substr(ampersandIndex, i - ampersandIndex + 1);\n        ans += text.substr(j, ampersandIndex - j);\n        ans += getCharIfMatched(text, sub, entityToChar);\n        j = i + 1;\n      }\n\n    return ans + text.substr(j);\n  }\n\n private:\n  string getCharIfMatched(const string& text, const string& sub,\n                          const unordered_map<string, char>& entityToChar) {\n    for (const auto& [entity, c] : entityToChar)\n      if (entity == sub)\n        return string(1, c);\n    return sub;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String entityParser(String text) {\n    Map<String, String> entryToChar =\n        Map.of(\"&quot;\", \"\\\"\", \"&apos;\", \"'\", \"&gt;\", \">\", \"&lt;\", \"<\", \"&frasl;\", \"/\");\n\n    for (Map.Entry<String, String> entry : entryToChar.entrySet()) {\n      final String entity = entry.getKey();\n      final String c = entry.getValue();\n      text = text.replaceAll(entity, c);\n    }\n\n    // Process '&' in last.\n    return text.replaceAll(\"&amp;\", \"&\");\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def entityParser(self, text: str) -> str:\n    entityToChar = {'&quot;': '\"', '&apos;': '\\'',\n                    '&gt;': '>', '&lt;': '<', '&frasl;': '/'}\n\n    for entity, c in entityToChar.items():\n      text = text.replace(entity, c)\n\n    # Process '&' in last.\n    return text.replace('&amp;', '&')\n",
                "lang_text": "py"
            }
        }
    }
}