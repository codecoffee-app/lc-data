{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "661",
            "title": "Image Smoother",
            "titleSlug": "image-smoother",
            "content": "<p>An <strong>image smoother</strong> is a filter of the size <code>3 x 3</code> that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/smoother-grid.jpg\" style=\"width: 493px; height: 493px;\" />\n<p>Given an <code>m x n</code> integer matrix <code>img</code> representing the grayscale of an image, return <em>the image after applying the smoother on each cell of it</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/smooth-grid.jpg\" style=\"width: 613px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> img = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>Output:</strong> [[0,0,0],[0,0,0],[0,0,0]]\n<strong>Explanation:</strong>\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/smooth2-grid.jpg\" style=\"width: 613px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> img = [[100,200,100],[200,50,200],[100,200,100]]\n<strong>Output:</strong> [[137,141,137],[141,138,141],[137,141,137]]\n<strong>Explanation:</strong>\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == img.length</code></li>\n\t<li><code>n == img[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= img[i][j] &lt;= 255</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1063,
            "dislikes": 2861,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"156.1K\", \"totalSubmission\": \"233.3K\", \"totalAcceptedRaw\": 156057, \"totalSubmissionRaw\": 233304, \"acRate\": \"66.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an m x n integer matrix `img` representing the grayscale of an image, return the image after applying a 3x3 smoother filter to each cell.  The smoother calculates the average of the cell and its eight surrounding neighbors. The result is rounded down (floored). If a cell has fewer than eight neighbors (e.g., cells on the edges), only the available neighbors are used in the average calculation.",
                "constraints": [
                    "m == img.length",
                    "n == img[i].length",
                    "1 <= m, n <= 200",
                    "0 <= img[i][j] <= 255"
                ],
                "testcases": [
                    {
                        "input": "[[1,1,1],[1,0,1],[1,1,1]]",
                        "output": "[[0,0,0],[0,0,0],[0,0,0]]",
                        "explanation": "For cells at the corners (0,0), (0,2), (2,0), (2,2), the average is calculated from 4 cells, then floored. For example, at (0,0): floor( (1+1+1+0) / 4 ) = 0.\nFor cells on the edges (0,1), (1,0), (1,2), (2,1), the average is calculated from 6 cells, then floored. For example, at (0,1): floor( (1+1+0+1+1+1) / 6 ) = 0.\nFor the center cell (1,1), the average is calculated from all 9 cells, then floored: floor( (1+1+1+1+0+1+1+1+1) / 9 ) = 0."
                    },
                    {
                        "input": "[[100,200,100],[200,50,200],[100,200,100]]",
                        "output": "[[137,141,137],[141,138,141],[137,141,137]]",
                        "explanation": "For cells at the corners (0,0), (0,2), (2,0), (2,2), the average is calculated from 4 cells, then floored. For example, at (0,0): floor( (100+200+200+50) / 4 ) = 137.\nFor cells on the edges (0,1), (1,0), (1,2), (2,1), the average is calculated from 6 cells, then floored. For example, at (0,1): floor( (200+200+50+200+100+100) / 6 ) = 141.\nFor the center cell (1,1), the average is calculated from all 9 cells, then floored: floor( (50+200+200+200+200+100+100+100+100) / 9 ) = 138."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> imageSmoother(vector<vector<int>>& M) {\n    const int m = M.size();\n    const int n = M[0].size();\n    vector<vector<int>> ans(m, vector<int>(n));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        int ones = 0;\n        int count = 0;\n        for (int x = max(0, i - 1); x < min(m, i + 2); ++x)\n          for (int y = max(0, j - 1); y < min(n, j + 2); ++y) {\n            ones += M[x][y];\n            ++count;\n          }\n        ans[i][j] = ones / count;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] imageSmoother(int[][] M) {\n    final int m = M.length;\n    final int n = M[0].length;\n    int ans[][] = new int[m][n];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        int ones = 0;\n        int count = 0;\n        for (int y = Math.max(0, i - 1); y < Math.min(m, i + 2); ++y)\n          for (int x = Math.max(0, j - 1); x < Math.min(n, j + 2); ++x) {\n            ones += M[y][x];\n            ++count;\n          }\n        ans[i][j] = ones / count;\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def imageSmoother(self, M: List[List[int]]) -> List[List[int]]:\n    m = len(M)\n    n = len(M[0])\n    ans = [[0 for j in range(n)] for i in range(m)]\n\n    for i in range(m):\n      for j in range(n):\n        ones = 0\n        count = 0\n        for y in range(max(0, i - 1), min(m, i + 2)):\n          for x in range(max(0, j - 1), min(n, j + 2)):\n            ones += M[y][x]\n            count += 1\n        ans[i][j] = ones // count\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}