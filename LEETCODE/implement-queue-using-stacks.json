{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "232",
            "title": "Implement Queue using Stacks",
            "titleSlug": "implement-queue-using-stacks",
            "content": "<p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (<code>push</code>, <code>peek</code>, <code>pop</code>, and <code>empty</code>).</p>\n\n<p>Implement the <code>MyQueue</code> class:</p>\n\n<ul>\n\t<li><code>void push(int x)</code> Pushes element x to the back of the queue.</li>\n\t<li><code>int pop()</code> Removes the element from the front of the queue and returns it.</li>\n\t<li><code>int peek()</code> Returns the element at the front of the queue.</li>\n\t<li><code>boolean empty()</code> Returns <code>true</code> if the queue is empty, <code>false</code> otherwise.</li>\n</ul>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>You must use <strong>only</strong> standard operations of a stack, which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\n\t<li>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack&#39;s standard operations.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]\n[[], [1], [2], [], [], []]\n<strong>Output</strong>\n[null, null, null, 1, 1, false]\n\n<strong>Explanation</strong>\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= 9</code></li>\n\t<li>At most <code>100</code>&nbsp;calls will be made to <code>push</code>, <code>pop</code>, <code>peek</code>, and <code>empty</code>.</li>\n\t<li>All the calls to <code>pop</code> and <code>peek</code> are valid.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Can you implement the queue such that each operation is <strong><a href=\"https://en.wikipedia.org/wiki/Amortized_analysis\" target=\"_blank\">amortized</a></strong> <code>O(1)</code> time complexity? In other words, performing <code>n</code> operations will take overall <code>O(n)</code> time even if one of those operations may take longer.</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6897,
            "dislikes": 392,
            "similarQuestions": "[{\"title\": \"Implement Stack using Queues\", \"titleSlug\": \"implement-stack-using-queues\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"770.9K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 770928, \"totalSubmissionRaw\": 1198673, \"acRate\": \"64.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Implement a First-In-First-Out (FIFO) queue using only two stacks. The queue must support the standard queue operations: `push`, `pop`, `peek`, and `empty`.\n\nYou are required to implement the `MyQueue` class with the following methods:\n\n*   `void push(int x)`: Inserts element `x` at the rear of the queue.\n*   `int pop()`: Removes and returns the element at the front of the queue.\n*   `int peek()`: Returns the element at the front of the queue without removing it.\n*   `boolean empty()`: Returns `true` if the queue is empty, and `false` otherwise.\n\n**Important Notes:**\n\n*   You are limited to using only standard stack operations: `push to top`, `peek/pop from top`, `size`, and `is empty`.\n*   If your chosen programming language lacks native stack support, you can simulate one using a list or deque, adhering strictly to stack operation rules.",
                "constraints": [
                    "1 <= x <= 9",
                    "At most 100 calls will be made to `push`, `pop`, `peek`, and `empty`.",
                    "All calls to `pop` and `peek` will be valid (the queue will never be empty when these operations are called)."
                ],
                "testcases": [
                    {
                        "input": "[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]",
                        "output": "[null, null, null, 1, 1, false]",
                        "explanation": "MyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "implement-stack-using-queues",
                "title": "Implement Stack using Queues",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Queue",
                "slug": "queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class MyQueue {\n public:\n  void push(int x) {\n    input.push(x);\n  }\n\n  int pop() {\n    peek();\n    const int val = output.top();\n    output.pop();\n    return val;\n  }\n\n  int peek() {\n    if (output.empty())\n      while (!input.empty())\n        output.push(input.top()), input.pop();\n    return output.top();\n  }\n\n  bool empty() {\n    return input.empty() && output.empty();\n  }\n\n private:\n  stack<int> input;\n  stack<int> output;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class MyQueue {\n  public void push(int x) {\n    input.push(x);\n  }\n\n  public int pop() {\n    peek();\n    return output.pop();\n  }\n\n  public int peek() {\n    if (output.isEmpty())\n      while (!input.isEmpty())\n        output.push(input.pop());\n    return output.peek();\n  }\n\n  public boolean empty() {\n    return input.isEmpty() && output.isEmpty();\n  }\n\n  private Deque<Integer> input = new ArrayDeque<>();\n  private Deque<Integer> output = new ArrayDeque<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class MyQueue:\n  def __init__(self):\n    self.input = []\n    self.output = []\n\n  def push(self, x: int) -> None:\n    self.input.append(x)\n\n  def pop(self) -> int:\n    self.peek()\n    return self.output.pop()\n\n  def peek(self) -> int:\n    if not self.output:\n      while self.input:\n        self.output.append(self.input.pop())\n    return self.output[-1]\n\n  def empty(self) -> bool:\n    return not self.input and not self.output\n",
                "lang_text": "py"
            }
        }
    }
}