{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "225",
            "title": "Implement Stack using Queues",
            "titleSlug": "implement-stack-using-queues",
            "content": "<p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (<code>push</code>, <code>top</code>, <code>pop</code>, and <code>empty</code>).</p>\n\n<p>Implement the <code>MyStack</code> class:</p>\n\n<ul>\n\t<li><code>void push(int x)</code> Pushes element x to the top of the stack.</li>\n\t<li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li>\n\t<li><code>int top()</code> Returns the element on the top of the stack.</li>\n\t<li><code>boolean empty()</code> Returns <code>true</code> if the stack is empty, <code>false</code> otherwise.</li>\n</ul>\n\n<p><b>Notes:</b></p>\n\n<ul>\n\t<li>You must use <strong>only</strong> standard operations of a queue, which means that only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code> and <code>is empty</code> operations are valid.</li>\n\t<li>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue&#39;s standard operations.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;]\n[[], [1], [2], [], [], []]\n<strong>Output</strong>\n[null, null, null, 2, 2, false]\n\n<strong>Explanation</strong>\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= 9</code></li>\n\t<li>At most <code>100</code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>empty</code>.</li>\n\t<li>All the calls to <code>pop</code> and <code>top</code> are valid.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Can you implement the stack using only one queue?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5767,
            "dislikes": 1181,
            "similarQuestions": "[{\"title\": \"Implement Queue using Stacks\", \"titleSlug\": \"implement-queue-using-stacks\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"606.1K\", \"totalSubmission\": \"965.6K\", \"totalAcceptedRaw\": 606147, \"totalSubmissionRaw\": 965635, \"acRate\": \"62.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Implement a last-in-first-out (LIFO) stack data structure using only two queues. Your stack should support the following operations:\n\n*   `push(x)`: Pushes element `x` onto the top of the stack.\n*   `pop()`: Removes and returns the element at the top of the stack.\n*   `top()`: Returns the element at the top of the stack without removing it.\n*   `empty()`: Returns `true` if the stack is empty, `false` otherwise.\n\nYou are restricted to using only standard queue operations: `push to back`, `peek/pop from front`, `size`, and `is empty`. Simulating a queue using a list or deque is permitted, but only using its standard queue operations.",
                "constraints": [
                    "1 <= x <= 9",
                    "At most 100 calls will be made to push, pop, top, and empty.",
                    "All the calls to pop and top are valid."
                ],
                "testcases": [
                    {
                        "input": "[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"] \n[[], [1], [2], [], [], []]",
                        "output": "[null, null, null, 2, 2, false]",
                        "explanation": "A `MyStack` object is created. The value 1 is pushed onto the stack, then the value 2. `top()` returns the value at the top of the stack, which is 2. `pop()` removes and returns the value at the top of the stack, which is also 2. Finally, `empty()` returns `false` because the stack still contains the value 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "implement-queue-using-stacks",
                "title": "Implement Queue using Stacks",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Queue",
                "slug": "queue"
            }
        ]
    }
}