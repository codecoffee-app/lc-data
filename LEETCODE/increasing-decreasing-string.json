{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1370",
            "title": "Increasing Decreasing String",
            "titleSlug": "increasing-decreasing-string",
            "content": "<p>You are given a string <code>s</code>. Reorder the string using the following algorithm:</p>\n\n<ol>\n\t<li>Pick the <strong>smallest</strong> character from <code>s</code> and <strong>append</strong> it to the result.</li>\n\t<li>Pick the <strong>smallest</strong> character from <code>s</code> which is greater than the last appended character to the result and <strong>append</strong> it.</li>\n\t<li>Repeat step 2 until you cannot pick more characters.</li>\n\t<li>Pick the <strong>largest</strong> character from <code>s</code> and <strong>append</strong> it to the result.</li>\n\t<li>Pick the <strong>largest</strong> character from <code>s</code> which is smaller than the last appended character to the result and <strong>append</strong> it.</li>\n\t<li>Repeat step 5 until you cannot pick more characters.</li>\n\t<li>Repeat the steps from 1 to 6 until you pick all characters from <code>s</code>.</li>\n</ol>\n\n<p>In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.</p>\n\n<p>Return <em>the result string after sorting </em><code>s</code><em> with this algorithm</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaaabbbbcccc&quot;\n<strong>Output:</strong> &quot;abccbaabccba&quot;\n<strong>Explanation:</strong> After steps 1, 2 and 3 of the first iteration, result = &quot;abc&quot;\nAfter steps 4, 5 and 6 of the first iteration, result = &quot;abccba&quot;\nFirst iteration is done. Now s = &quot;aabbcc&quot; and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result = &quot;abccbaabc&quot;\nAfter steps 4, 5 and 6 of the second iteration, result = &quot;abccbaabccba&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;rat&quot;\n<strong>Output:</strong> &quot;art&quot;\n<strong>Explanation:</strong> The word &quot;rat&quot; becomes &quot;art&quot; after re-ordering it with the mentioned algorithm.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 741,
            "dislikes": 838,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"72.5K\", \"totalSubmission\": \"95K\", \"totalAcceptedRaw\": 72501, \"totalSubmissionRaw\": 94957, \"acRate\": \"76.4%\"}",
            "hints": [
                "Count the frequency of each character.",
                "Loop over all character from 'a' to 'z' and append the character if it exists and decrease frequency by 1. Do the same from 'z' to 'a'.",
                "Keep repeating until the frequency of all characters is zero."
            ],
            "rephrased": {
                "body": "Given a string `s`, reorder it according to the following algorithm:\n\n1.  Repeatedly append the smallest character from `s` to the result, until no more such characters can be selected.\n2.  Repeatedly append the largest character from `s` to the result, until no more such characters can be selected.\n3.  Repeat steps 1 and 2 until all characters from `s` have been appended to the result.\n\nIn each step, if a character appears more than once, any occurrence can be chosen and appended to the result.\n\nReturn the reordered string.",
                "constraints": [
                    "1 <= s.length <= 500",
                    "s consists of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "aaaabbbbcccc",
                        "output": "abccbaabccba",
                        "explanation": "In the first iteration:\n- Smallest to largest: 'abc'\n- Largest to smallest: 'abccba'\nSecond iteration:\n- Smallest to largest: 'abccbaabc'\n- Largest to smallest: 'abccbaabccba'"
                    },
                    {
                        "input": "rat",
                        "output": "art",
                        "explanation": "First iteration:\n- Smallest to largest: 'ar'\n- Largest to smallest: 'art'"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Count the frequency of each character.",
            "Loop over all character from 'a' to 'z' and append the character if it exists and decrease frequency by 1. Do the same from 'z' to 'a'.",
            "Keep repeating until the frequency of all characters is zero."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string sortString(string s) {\n    string ans;\n    vector<int> count(26);\n\n    for (const char c : s)\n      ++count[c - 'a'];\n\n    while (ans.length() < s.size()) {\n      for (int i = 0; i < 26; ++i) {\n        if (count[i] == 0)\n          continue;\n        ans += 'a' + i;\n        --count[i];\n      }\n      for (int i = 25; i >= 0; --i) {\n        if (count[i] == 0)\n          continue;\n        ans += 'a' + i;\n        --count[i];\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String sortString(String s) {\n    StringBuilder sb = new StringBuilder();\n    int[] count = new int[26];\n\n    for (final char c : s.toCharArray())\n      ++count[c - 'a'];\n\n    while (sb.length() < s.length()) {\n      for (int i = 0; i < 26; i++) {\n        if (count[i] == 0)\n          continue;\n        sb.append((char) (i + 'a'));\n        --count[i];\n      }\n      for (int i = 25; i >= 0; i--) {\n        if (count[i] == 0)\n          continue;\n        sb.append((char) (i + 'a'));\n        --count[i];\n      }\n    }\n\n    return sb.toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sortString(self, s: str) -> str:\n    ans = []\n    count = collections.Counter(s)\n\n    while count:\n      for chars in string.ascii_lowercase, reversed(string.ascii_lowercase):\n        ans += [c for c in chars if c in count]\n        count -= dict.fromkeys(count, 1)\n\n    return ''.join(ans)\n",
                "lang_text": "py"
            }
        }
    }
}