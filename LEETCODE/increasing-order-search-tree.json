{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "897",
            "title": "Increasing Order Search Tree",
            "titleSlug": "increasing-order-search-tree",
            "content": "<p>Given the <code>root</code> of a binary search tree, rearrange the tree in <strong>in-order</strong> so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg\" style=\"width: 600px; height: 350px;\" />\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\n<strong>Output:</strong> [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg\" style=\"width: 300px; height: 114px;\" />\n<pre>\n<strong>Input:</strong> root = [5,1,7]\n<strong>Output:</strong> [1,null,5,null,7]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the given tree will be in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4220,
            "dislikes": 664,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"270.1K\", \"totalSubmission\": \"345.2K\", \"totalAcceptedRaw\": 270120, \"totalSubmissionRaw\": 345160, \"acRate\": \"78.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary search tree, rearrange the tree in in-order traversal. The resulting tree should have the leftmost node as the new root, and each node should have no left child and only one right child.",
                "constraints": [
                    "The number of nodes in the given tree will be in the range [1, 100].",
                    "0 <= Node.val <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[5,3,6,2,4,null,8,1,null,null,null,7,9]",
                        "output": "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
                        "explanation": "The input binary search tree is transformed into a linked list-like structure where the nodes are arranged in ascending order based on their values."
                    },
                    {
                        "input": "[5,1,7]",
                        "output": "[1,null,5,null,7]",
                        "explanation": "The input binary search tree is transformed into a linked list-like structure where the nodes are arranged in ascending order based on their values."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ]
    }
}