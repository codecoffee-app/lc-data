{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "334",
            "title": "Increasing Triplet Subsequence",
            "titleSlug": "increasing-triplet-subsequence",
            "content": "<p>Given an integer array <code>nums</code>, return <code>true</code><em> if there exists a triple of indices </em><code>(i, j, k)</code><em> such that </em><code>i &lt; j &lt; k</code><em> and </em><code>nums[i] &lt; nums[j] &lt; nums[k]</code>. If no such indices exists, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Any triplet where i &lt; j &lt; k is valid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,3,2,1]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> No triplet exists.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,5,0,4,6]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The triplet (3, 4, 5) is valid because nums[3] == 0 &lt; nums[4] == 4 &lt; nums[5] == 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you implement a solution that runs in <code>O(n)</code> time complexity and <code>O(1)</code> space complexity?",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7677,
            "dislikes": 428,
            "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Special Quadruplets\", \"titleSlug\": \"count-special-quadruplets\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Good Triplets in an Array\", \"titleSlug\": \"count-good-triplets-in-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Increasing Quadruplets\", \"titleSlug\": \"count-increasing-quadruplets\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"491.7K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 491712, \"totalSubmissionRaw\": 1210511, \"acRate\": \"40.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, determine if there exists a subsequence of three numbers `(i, j, k)` such that `i < j < k` and `nums[i] < nums[j] < nums[k]`. Return `true` if such a subsequence exists; otherwise, return `false`.",
                "constraints": [
                    "1 <= nums.length <= 5 * 10^5",
                    "-2^31 <= nums[i] <= 2^31 - 1"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4,5]",
                        "output": "true",
                        "explanation": "The array is strictly increasing, so any three indices i < j < k will satisfy nums[i] < nums[j] < nums[k]."
                    },
                    {
                        "input": "[5,4,3,2,1]",
                        "output": "false",
                        "explanation": "The array is strictly decreasing, so no such subsequence exists."
                    },
                    {
                        "input": "[2,1,5,0,4,6]",
                        "output": "true",
                        "explanation": "The subsequence (0, 4, 6) at indices (3, 4, 5) forms a valid increasing triplet, where nums[3] = 0 < nums[4] = 4 < nums[5] = 6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-increasing-subsequence",
                "title": "Longest Increasing Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "count-special-quadruplets",
                "title": "Count Special Quadruplets",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-good-triplets-in-an-array",
                "title": "Count Good Triplets in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-increasing-quadruplets",
                "title": "Count Increasing Quadruplets",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool increasingTriplet(vector<int>& nums) {\n    int first = INT_MAX;\n    int second = INT_MAX;\n\n    for (const int num : nums)\n      if (num <= first)\n        first = num;\n      else if (num <= second)  // First < num <= second\n        second = num;\n      else\n        return true;  // First < second < num (third)\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean increasingTriplet(int[] nums) {\n    int first = Integer.MAX_VALUE;\n    int second = Integer.MAX_VALUE;\n\n    for (final int num : nums)\n      if (num <= first)\n        first = num;\n      else if (num <= second) // First < num <= second\n        second = num;\n      else // First < second < num (third)\n        return true;\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def increasingTriplet(self, nums: List[int]) -> bool:\n    first = math.inf\n    second = math.inf\n\n    for num in nums:\n      if num <= first:\n        first = num\n      elif num <= second:  # First < num <= second\n        second = num\n      else:\n        return True  # First < second < num (third)\n\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}