{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "381",
            "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
            "titleSlug": "insert-delete-getrandom-o1-duplicates-allowed",
            "content": "<p><code>RandomizedCollection</code> is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.</p>\n\n<p>Implement the <code>RandomizedCollection</code> class:</p>\n\n<ul>\n\t<li><code>RandomizedCollection()</code> Initializes the empty <code>RandomizedCollection</code> object.</li>\n\t<li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the multiset, even if the item is already present. Returns <code>true</code> if the item is not present, <code>false</code> otherwise.</li>\n\t<li><code>bool remove(int val)</code> Removes an item <code>val</code> from the multiset if present. Returns <code>true</code> if the item is present, <code>false</code> otherwise. Note that if <code>val</code> has multiple occurrences in the multiset, we only remove one of them.</li>\n\t<li><code>int getRandom()</code> Returns a random element from the current multiset of elements. The probability of each element being returned is <strong>linearly related</strong> to the number of the same values the multiset contains.</li>\n</ul>\n\n<p>You must implement the functions of the class such that each function works on <strong>average</strong> <code>O(1)</code> time complexity.</p>\n\n<p><strong>Note:</strong> The test cases are generated such that <code>getRandom</code> will only be called if there is <strong>at least one</strong> item in the <code>RandomizedCollection</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;RandomizedCollection&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;getRandom&quot;]\n[[], [1], [1], [2], [], [1], []]\n<strong>Output</strong>\n[null, true, false, true, 2, true, 1]\n\n<strong>Explanation</strong>\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                  // Inserts 1 into the collection.\nrandomizedCollection.insert(1);   // return false since the collection contains 1.\n                                  // Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                  // Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n                                  // - return 1 with probability 2/3, or\n                                  // - return 2 with probability 1/3.\nrandomizedCollection.remove(1);   // return true since the collection contains 1.\n                                  // Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>At most <code>2 * 10<sup>5</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li>\n\t<li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code> is called.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2204,
            "dislikes": 145,
            "similarQuestions": "[{\"title\": \"Insert Delete GetRandom O(1)\", \"titleSlug\": \"insert-delete-getrandom-o1\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Randomized",
                    "slug": "randomized"
                }
            ],
            "stats": "{\"totalAccepted\": \"134.1K\", \"totalSubmission\": \"378.7K\", \"totalAcceptedRaw\": 134077, \"totalSubmissionRaw\": 378698, \"acRate\": \"35.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a `RandomizedCollection` data structure that supports the insertion, removal, and random selection of elements, even with duplicates (multiset). Each operation should have an average time complexity of O(1).",
                "constraints": [
                    "-2<sup>31</sup> <= val <= 2<sup>31</sup> - 1",
                    "At most 2 * 10<sup>5</sup> calls in total will be made to insert, remove, and getRandom.",
                    "There will be at least one element in the data structure when getRandom is called."
                ],
                "testcases": [
                    {
                        "input": "[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]",
                        "output": "[null, true, false, true, <random value>, true, <random value>]",
                        "explanation": "Initially, the collection is empty. `insert(1)` returns `true` because 1 is not present. `insert(1)` returns `false` because 1 is already present. `insert(2)` returns `true` because 2 is not present. `getRandom()` returns either 1 (with probability 2/3) or 2 (with probability 1/3). `remove(1)` returns `true` because 1 is present. `getRandom()` returns either 1 or 2, each with equal probability."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "insert-delete-getrandom-o1",
                "title": "Insert Delete GetRandom O(1)",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Randomized",
                "slug": "randomized"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct Item {\n  int val;\n  int indexInMap;\n  Item(int val, int indexInMap) : val(val), indexInMap(indexInMap) {}\n};\n\nclass RandomizedCollection {\n public:\n  /** Inserts a value to the collection. Returns true if the collection did not\n   * already contain the specified element. */\n  bool insert(int val) {\n    valToIndices[val].push_back(items.size());\n    items.emplace_back(val, valToIndices[val].size() - 1);\n    return valToIndices[val].size() == 1;\n  }\n\n  /** Removes a value from the collection. Returns true if the collection\n   * contained the specified element. */\n  bool remove(int val) {\n    if (!valToIndices.count(val))\n      return false;\n\n    const int index = valToIndices[val].back();\n    valToIndices[items.back().val][items.back().indexInMap] = index;\n    valToIndices[val].pop_back();\n    if (valToIndices[val].empty())\n      valToIndices.erase(val);\n    items[index] = items.back();\n    items.pop_back();\n    return true;\n  }\n\n  /** Get a random element from the collection. */\n  int getRandom() {\n    const int index = rand() % items.size();\n    return items[index].val;\n  }\n\n private:\n  unordered_map<int, vector<int>> valToIndices;\n  vector<Item> items;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Item {\n  public int val;\n  public int indexInMap;\n  public Item(int val, int indexInMap) {\n    this.val = val;\n    this.indexInMap = indexInMap;\n  }\n}\n\nclass RandomizedCollection {\n  /**\n   * Inserts a value to the collection. Returns true if the collection did not already contain the\n   * specified element.\n   */\n  public boolean insert(int val) {\n    valToIndices.putIfAbsent(val, new ArrayList<>());\n    valToIndices.get(val).add(items.size());\n    items.add(new Item(val, valToIndices.get(val).size() - 1));\n    return valToIndices.get(val).size() == 1;\n  }\n\n  /**\n   * Removes a value from the collection. Returns true if the collection contained the specified\n   * element.\n   */\n  public boolean remove(int val) {\n    if (!valToIndices.containsKey(val))\n      return false;\n\n    final int index = lastIndex(valToIndices.get(val));\n    valToIndices.get(last(items).val).set(last(items).indexInMap, index);\n    final int indicesSize = valToIndices.get(val).size();\n    valToIndices.get(val).remove(indicesSize - 1);\n    if (valToIndices.get(val).isEmpty())\n      valToIndices.remove(val);\n    items.set(index, last(items));\n    items.remove(items.size() - 1);\n    return true;\n  }\n\n  /** Get a random element from the collection. */\n  public int getRandom() {\n    final int index = rand.nextInt(items.size());\n    return items.get(index).val;\n  }\n\n  private Map<Integer, List<Integer>> valToIndices = new HashMap<>();\n  private List<Item> items = new ArrayList<>();\n  private Random rand = new Random();\n\n  private int lastIndex(List<Integer> indices) {\n    return indices.get(indices.size() - 1);\n  }\n\n  private Item last(List<Item> items) {\n    return items.get(items.size() - 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class RandomizedCollection:\n  def __init__(self):\n    \"\"\"\n    Initialize your data structure here.\n    \"\"\"\n    self.vals = []\n    self.valToIndices = collections.defaultdict(list)\n\n  def insert(self, val: int) -> bool:\n    \"\"\"\n    Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\n    \"\"\"\n    self.valToIndices[val].append(len(self.vals))\n    self.vals.append([val, len(self.valToIndices[val]) - 1])\n    return len(self.valToIndices[val]) == 1\n\n  def remove(self, val: int) -> bool:\n    \"\"\"\n    Removes a value from the collection. Returns true if the collection contained the specified element.\n    \"\"\"\n    if val not in self.valToIndices or self.valToIndices[val] == []:\n      return False\n\n    index = self.valToIndices[val][-1]\n    self.valToIndices[self.vals[-1][0]][self.vals[-1][1]] = index\n    self.valToIndices[val].pop()\n    self.vals[index] = self.vals[-1]\n    self.vals.pop()\n    return True\n\n  def getRandom(self) -> int:\n    \"\"\"\n    Get a random element from the collection.\n    \"\"\"\n    index = random.randint(0, len(self.vals) - 1)\n    return self.vals[index][0]\n",
                "lang_text": "py"
            }
        }
    }
}