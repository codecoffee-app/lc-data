{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "380",
            "title": "Insert Delete GetRandom O(1)",
            "titleSlug": "insert-delete-getrandom-o1",
            "content": "<p>Implement the <code>RandomizedSet</code> class:</p>\n\n<ul>\n\t<li><code>RandomizedSet()</code> Initializes the <code>RandomizedSet</code> object.</li>\n\t<li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li>\n\t<li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li>\n\t<li><code>int getRandom()</code> Returns a random element from the current set of elements (it&#39;s guaranteed that at least one element exists when this method is called). Each element must have the <b>same probability</b> of being returned.</li>\n</ul>\n\n<p>You must implement the functions of the class such that each function works in&nbsp;<strong>average</strong>&nbsp;<code>O(1)</code>&nbsp;time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;]\n[[], [1], [2], [2], [], [1], [2], []]\n<strong>Output</strong>\n[null, true, false, true, 2, true, false, 2]\n\n<strong>Explanation</strong>\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>At most <code>2 *&nbsp;</code><code>10<sup>5</sup></code> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li>\n\t<li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code> is called.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8305,
            "dislikes": 487,
            "similarQuestions": "[{\"title\": \"Insert Delete GetRandom O(1) - Duplicates allowed\", \"titleSlug\": \"insert-delete-getrandom-o1-duplicates-allowed\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Randomized",
                    "slug": "randomized"
                }
            ],
            "stats": "{\"totalAccepted\": \"729.1K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 729060, \"totalSubmissionRaw\": 1379023, \"acRate\": \"52.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a data structure that implements a set supporting the following operations with average O(1) time complexity:\n\n*   `insert(val)`: Inserts an item `val` into the set if not present. Returns `true` if the item was not present, `false` otherwise.\n*   `remove(val)`: Removes an item `val` from the set if present. Returns `true` if the item was present, `false` otherwise.\n*   `getRandom()`: Returns a random element from the current set of elements.  Each element must have the same probability of being returned. It's guaranteed that the set is not empty when this method is called.",
                "constraints": [
                    "-2<sup>31</sup> <= val <= 2<sup>31</sup> - 1",
                    "At most 2 * 10<sup>5</sup> calls will be made to insert, remove, and getRandom.",
                    "There will be at least one element in the data structure when getRandom is called."
                ],
                "testcases": [
                    {
                        "input": "[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]",
                        "output": "[null, true, false, true, <random element>, true, false, 2]",
                        "explanation": "The sequence of operations demonstrates inserting, removing, and retrieving random elements from the set. The `getRandom()` calls return either 1 or 2 (or just 2 in the final call) with equal probability after the operations prior to the call."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "insert-delete-getrandom-o1-duplicates-allowed",
                "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Randomized",
                "slug": "randomized"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class RandomizedSet {\n public:\n  /** Inserts a value to the set. Returns true if the set did not already\n   * contain the specified element. */\n  bool insert(int val) {\n    if (valToIndex.count(val))\n      return false;\n\n    valToIndex[val] = vals.size();\n    vals.push_back(val);\n    return true;\n  }\n\n  /** Removes a value from the set. Returns true if the set contained the\n   * specified element. */\n  bool remove(int val) {\n    if (!valToIndex.count(val))\n      return false;\n\n    const int index = valToIndex[val];\n    // Following two lines order are important when vals.size() == 1\n    valToIndex[vals.back()] = index;\n    valToIndex.erase(val);\n    vals[index] = vals.back();\n    vals.pop_back();\n    return true;\n  }\n\n  /** Get a random element from the set. */\n  int getRandom() {\n    const int index = rand() % vals.size();\n    return vals[index];\n  }\n\n private:\n  unordered_map<int, int> valToIndex;  // {val: index in vals}\n  vector<int> vals;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class RandomizedSet {\n  /**\n   * Inserts a value to the set. Returns true if the set did not already contain the specified\n   * element.\n   */\n  public boolean insert(int val) {\n    if (valToIndex.containsKey(val))\n      return false;\n\n    valToIndex.put(val, vals.size());\n    vals.add(val);\n    return true;\n  }\n\n  /** Removes a value from the set. Returns true if the set contained the specified element. */\n  public boolean remove(int val) {\n    if (!valToIndex.containsKey(val))\n      return false;\n\n    final int index = valToIndex.get(val);\n    // Following two lines order are important when vals.size() == 1\n    valToIndex.put(last(vals), index);\n    valToIndex.remove(val);\n    vals.set(index, last(vals));\n    vals.remove(vals.size() - 1);\n    return true;\n  }\n\n  /** Get a random element from the set. */\n  public int getRandom() {\n    final int index = rand.nextInt(vals.size());\n    return vals.get(index);\n  }\n\n  private Map<Integer, Integer> valToIndex = new HashMap<>(); // {val: index in vals}\n  private List<Integer> vals = new ArrayList<>();\n  private Random rand = new Random();\n\n  private int last(List<Integer> vals) {\n    return vals.get(vals.size() - 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class RandomizedSet:\n  def __init__(self):\n    \"\"\"\n    Initialize your data structure here.\n    \"\"\"\n    self.vals = []\n    self.valToIndex = collections.defaultdict(int)\n\n  def insert(self, val: int) -> bool:\n    \"\"\"\n    Inserts a value to the set. Returns true if the set did not already contain the specified element.\n    \"\"\"\n    if val in self.valToIndex:\n      return False\n\n    self.valToIndex[val] = len(self.vals)\n    self.vals.append(val)\n    return True\n\n  def remove(self, val: int) -> bool:\n    \"\"\"\n    Removes a value from the set. Returns true if the set contained the specified element.\n    \"\"\"\n    if val not in self.valToIndex:\n      return False\n\n    index = self.valToIndex[val]\n    self.valToIndex[self.vals[-1]] = index\n    del self.valToIndex[val]\n    self.vals[index] = self.vals[-1]\n    self.vals.pop()\n    return True\n\n  def getRandom(self) -> int:\n    \"\"\"\n    Get a random element from the set.\n    \"\"\"\n    index = random.randint(0, len(self.vals) - 1)\n    return self.vals[index]\n",
                "lang_text": "py"
            }
        }
    }
}