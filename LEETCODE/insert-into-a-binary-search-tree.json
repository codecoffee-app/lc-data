{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "701",
            "title": "Insert into a Binary Search Tree",
            "titleSlug": "insert-into-a-binary-search-tree",
            "content": "<p>You are given the <code>root</code> node of a binary search tree (BST) and a <code>value</code> to insert into the tree. Return <em>the root node of the BST after the insertion</em>. It is <strong>guaranteed</strong> that the new value does not exist in the original BST.</p>\n\n<p><strong>Notice</strong>&nbsp;that there may exist&nbsp;multiple valid ways for the&nbsp;insertion, as long as the tree remains a BST after insertion. You can return <strong>any of them</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/insertbst.jpg\" style=\"width: 752px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,7,1,3], val = 5\n<strong>Output:</strong> [4,2,7,1,3,5]\n<strong>Explanation:</strong> Another accepted tree is:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/bst.jpg\" style=\"width: 352px; height: 301px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [40,20,60,10,30,50,70], val = 25\n<strong>Output:</strong> [40,20,60,10,30,50,70,null,null,25]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\n<strong>Output:</strong> [4,2,7,1,3,5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in&nbsp;the tree will be in the range <code>[0,&nbsp;10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>8</sup> &lt;= Node.val &lt;= 10<sup>8</sup></code></li>\n\t<li>All the values <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>-10<sup>8</sup> &lt;= val &lt;= 10<sup>8</sup></code></li>\n\t<li>It&#39;s <strong>guaranteed</strong> that <code>val</code> does not exist in the original BST.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5581,
            "dislikes": 164,
            "similarQuestions": "[{\"title\": \"Search in a Binary Search Tree\", \"titleSlug\": \"search-in-a-binary-search-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"480.4K\", \"totalSubmission\": \"650.1K\", \"totalAcceptedRaw\": 480447, \"totalSubmissionRaw\": 650112, \"acRate\": \"73.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root node of a binary search tree (BST) and a value to insert, return the root node of the BST after the insertion. The new value is guaranteed to not exist in the original BST.  Note that multiple valid insertion paths may exist, and any of them is acceptable.",
                "constraints": [
                    "The number of nodes in the tree will be in the range [0, 10<sup>4</sup>].",
                    "-10<sup>8</sup> <= Node.val <= 10<sup>8</sup>",
                    "All the values Node.val are unique.",
                    "-10<sup>8</sup> <= val <= 10<sup>8</sup>",
                    "It's guaranteed that val does not exist in the original BST."
                ],
                "testcases": [
                    {
                        "input": "root = [4,2,7,1,3], val = 5",
                        "output": "[4,2,7,1,3,5]",
                        "explanation": "Insert 5 into the BST. 5 is greater than 4, so it goes to the right subtree. Then, 5 is less than 7, so it becomes the left child of 7."
                    },
                    {
                        "input": "root = [40,20,60,10,30,50,70], val = 25",
                        "output": "[40,20,60,10,30,50,70,null,null,25]",
                        "explanation": "Insert 25 into the BST. 25 is less than 40, greater than 20, less than 30, so it becomes the right child of 20, left of 30."
                    },
                    {
                        "input": "root = [4,2,7,1,3,null,null,null,null,null,null], val = 5",
                        "output": "[4,2,7,1,3,5]",
                        "explanation": "Insert 5 into the BST. 5 is greater than 4, so it goes to the right subtree, so goes to 7 then becomes left child to 7"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "search-in-a-binary-search-tree",
                "title": "Search in a Binary Search Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* insertIntoBST(TreeNode* root, int val) {\n    if (root == nullptr)\n      return new TreeNode(val);\n    if (root->val > val)\n      root->left = insertIntoBST(root->left, val);\n    else\n      root->right = insertIntoBST(root->right, val);\n    return root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode insertIntoBST(TreeNode root, int val) {\n    if (root == null)\n      return new TreeNode(val);\n    if (root.val > val)\n      root.left = insertIntoBST(root.left, val);\n    else\n      root.right = insertIntoBST(root.right, val);\n    return root;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n    if not root:\n      return TreeNode(val)\n    if root.val > val:\n      root.left = self.insertIntoBST(root.left, val)\n    else:\n      root.right = self.insertIntoBST(root.right, val)\n    return root\n",
                "lang_text": "py"
            }
        }
    }
}