{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "397",
            "title": "Integer Replacement",
            "titleSlug": "integer-replacement",
            "content": "<p>Given a positive integer <code>n</code>,&nbsp;you can apply one of the following&nbsp;operations:</p>\n\n<ol>\n\t<li>If <code>n</code> is even, replace <code>n</code> with <code>n / 2</code>.</li>\n\t<li>If <code>n</code> is odd, replace <code>n</code> with either <code>n + 1</code> or <code>n - 1</code>.</li>\n</ol>\n\n<p>Return <em>the minimum number of operations needed for</em> <code>n</code> <em>to become</em> <code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 8\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 8 -&gt; 4 -&gt; 2 -&gt; 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 7\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\nor 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1275,
            "dislikes": 477,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"110.9K\", \"totalSubmission\": \"311.9K\", \"totalAcceptedRaw\": 110898, \"totalSubmissionRaw\": 311914, \"acRate\": \"35.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a positive integer `n`, determine the minimum number of operations required to transform `n` to 1. The allowed operations are:\n\n1.  If `n` is even, divide it by 2 (`n = n / 2`).\n2.  If `n` is odd, either increment it by 1 (`n = n + 1`) or decrement it by 1 (`n = n - 1`).",
                "constraints": [
                    "1 <= n <= 2<sup>31</sup> - 1"
                ],
                "testcases": [
                    {
                        "input": "8",
                        "output": "3",
                        "explanation": "The optimal sequence is 8 -> 4 -> 2 -> 1, requiring 3 operations."
                    },
                    {
                        "input": "7",
                        "output": "4",
                        "explanation": "One optimal sequence is 7 -> 8 -> 4 -> 2 -> 1, requiring 4 operations. Another possible sequence is 7 -> 6 -> 3 -> 2 -> 1, requiring 4 operations"
                    },
                    {
                        "input": "4",
                        "output": "2",
                        "explanation": "The optimal sequence is 4 -> 2 -> 1, requiring 2 operations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ]
    }
}