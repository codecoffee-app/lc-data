{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "350",
            "title": "Intersection of Two Arrays II",
            "titleSlug": "intersection-of-two-arrays-ii",
            "content": "<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their intersection</em>. Each element in the result must appear as many times as it shows in both arrays and you may return the result in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>Output:</strong> [2,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>Output:</strong> [4,9]\n<strong>Explanation:</strong> [9,4] is also accepted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\n\t<li>What if <code>nums1</code>&#39;s size is small compared to <code>nums2</code>&#39;s size? Which algorithm is better?</li>\n\t<li>What if elements of <code>nums2</code> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6992,
            "dislikes": 919,
            "similarQuestions": "[{\"title\": \"Intersection of Two Arrays\", \"titleSlug\": \"intersection-of-two-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find Common Characters\", \"titleSlug\": \"find-common-characters\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Difference of Two Arrays\", \"titleSlug\": \"find-the-difference-of-two-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Choose Numbers From Two Arrays in Range\", \"titleSlug\": \"choose-numbers-from-two-arrays-in-range\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Intersection of Multiple Arrays\", \"titleSlug\": \"intersection-of-multiple-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Common Value\", \"titleSlug\": \"minimum-common-value\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 1147648, \"totalSubmissionRaw\": 2039160, \"acRate\": \"56.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two integer arrays `nums1` and `nums2`, find their intersection. The resulting array should include each element as many times as it appears in both input arrays. The order of elements in the output array does not matter.",
                "constraints": [
                    "1 <= nums1.length, nums2.length <= 1000",
                    "0 <= nums1[i], nums2[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [1,2,2,1], nums2 = [2,2]",
                        "output": "[2,2]",
                        "explanation": null
                    },
                    {
                        "input": "nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
                        "output": "[4,9]",
                        "explanation": "The output can also be [9,4]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "intersection-of-two-arrays",
                "title": "Intersection of Two Arrays",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-common-characters",
                "title": "Find Common Characters",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-the-difference-of-two-arrays",
                "title": "Find the Difference of Two Arrays",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "choose-numbers-from-two-arrays-in-range",
                "title": "Choose Numbers From Two Arrays in Range",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "intersection-of-multiple-arrays",
                "title": "Intersection of Multiple Arrays",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "minimum-common-value",
                "title": "Minimum Common Value",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n    if (nums1.size() > nums2.size())\n      return intersect(nums2, nums1);\n\n    vector<int> ans;\n    unordered_map<int, int> count;\n\n    for (const int num : nums1)\n      ++count[num];\n\n    for (const int num : nums2)\n      if (const auto it = count.find(num);\n          it != count.cend() && it->second-- > 0)\n        ans.push_back(num);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] intersect(int[] nums1, int[] nums2) {\n    if (nums1.length > nums2.length)\n      return intersect(nums2, nums1);\n\n    List<Integer> ans = new ArrayList<>();\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (final int num : nums1)\n      count.put(num, count.getOrDefault(num, 0) + 1);\n\n    for (final int num : nums2)\n      if (count.containsKey(num) && count.get(num) > 0) {\n        ans.add(num);\n        count.put(num, count.get(num) - 1);\n      }\n\n    return ans.stream().mapToInt(Integer::intValue).toArray();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n    if len(nums1) > len(nums2):\n      return self.intersect(nums2, nums1)\n\n    ans = []\n    count = collections.Counter(nums1)\n\n    for num in nums2:\n      if count[num] > 0:\n        ans.append(num)\n        count[num] -= 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}