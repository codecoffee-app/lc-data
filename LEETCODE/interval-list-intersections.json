{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "986",
            "title": "Interval List Intersections",
            "titleSlug": "interval-list-intersections",
            "content": "<p>You are given two lists of closed intervals, <code>firstList</code> and <code>secondList</code>, where <code>firstList[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> and <code>secondList[j] = [start<sub>j</sub>, end<sub>j</sub>]</code>. Each list of intervals is pairwise <strong>disjoint</strong> and in <strong>sorted order</strong>.</p>\n\n<p>Return <em>the intersection of these two interval lists</em>.</p>\n\n<p>A <strong>closed interval</strong> <code>[a, b]</code> (with <code>a &lt;= b</code>) denotes the set of real numbers <code>x</code> with <code>a &lt;= x &lt;= b</code>.</p>\n\n<p>The <strong>intersection</strong> of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of <code>[1, 3]</code> and <code>[2, 4]</code> is <code>[2, 3]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/30/interval1.png\" style=\"width: 700px; height: 194px;\" />\n<pre>\n<strong>Input:</strong> firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\n<strong>Output:</strong> [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> firstList = [[1,3],[5,9]], secondList = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= firstList.length, secondList.length &lt;= 1000</code></li>\n\t<li><code>firstList.length + secondList.length &gt;= 1</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>end<sub>i</sub> &lt; start<sub>i+1</sub></code></li>\n\t<li><code>0 &lt;= start<sub>j</sub> &lt; end<sub>j</sub> &lt;= 10<sup>9</sup> </code></li>\n\t<li><code>end<sub>j</sub> &lt; start<sub>j+1</sub></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5389,
            "dislikes": 106,
            "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Merge Sorted Array\", \"titleSlug\": \"merge-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Employee Free Time\", \"titleSlug\": \"employee-free-time\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Matching of Players With Trainers\", \"titleSlug\": \"maximum-matching-of-players-with-trainers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                }
            ],
            "stats": "{\"totalAccepted\": \"379K\", \"totalSubmission\": \"531.2K\", \"totalAcceptedRaw\": 378991, \"totalSubmissionRaw\": 531183, \"acRate\": \"71.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two lists of closed intervals, `firstList` and `secondList`, where each list contains pairwise disjoint intervals sorted in ascending order. The goal is to find the intersection of these two interval lists. A closed interval `[a, b]` (where `a <= b`) represents all real numbers `x` such that `a <= x <= b`. The intersection of two closed intervals is either empty or another closed interval.",
                "constraints": [
                    "0 <= firstList.length, secondList.length <= 1000",
                    "firstList.length + secondList.length >= 1",
                    "0 <= start<sub>i</sub> < end<sub>i</sub> <= 10<sup>9</sup>",
                    "end<sub>i</sub> < start<sub>i+1</sub>",
                    "0 <= start<sub>j</sub> < end<sub>j</sub> <= 10<sup>9</sup>",
                    "end<sub>j</sub> < start<sub>j+1</sub>"
                ],
                "testcases": [
                    {
                        "input": "firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]",
                        "output": "[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]",
                        "explanation": null
                    },
                    {
                        "input": "firstList = [[1,3],[5,9]], secondList = []",
                        "output": "[]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "merge-intervals",
                "title": "Merge Intervals",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "merge-sorted-array",
                "title": "Merge Sorted Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "employee-free-time",
                "title": "Employee Free Time",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-matching-of-players-with-trainers",
                "title": "Maximum Matching of Players With Trainers",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList,\n                                           vector<vector<int>>& secondList) {\n    vector<vector<int>> ans;\n    short i = 0;\n    short j = 0;\n\n    while (i < firstList.size() && j < secondList.size()) {\n      // Lo := the start of the intersection\n      // Hi := the end of the intersection\n      const int lo = max(firstList[i][0], secondList[j][0]);\n      const int hi = min(firstList[i][1], secondList[j][1]);\n      if (lo <= hi)\n        ans.push_back({lo, hi});\n      firstList[i][1] < secondList[j][1] ? ++i : ++j;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {\n    List<int[]> ans = new ArrayList<>();\n    short i = 0;\n    short j = 0;\n\n    while (i < firstList.length && j < secondList.length) {\n      // Lo := the start of the intersection\n      // Hi := the end of the intersection\n      final int lo = Math.max(firstList[i][0], secondList[j][0]);\n      final int hi = Math.min(firstList[i][1], secondList[j][1]);\n      if (lo <= hi)\n        ans.add(new int[] {lo, hi});\n      if (firstList[i][1] < secondList[j][1])\n        ++i;\n      else\n        ++j;\n    }\n\n    return ans.toArray(new int[ans.size()][]);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def intervalIntersection(self, firstList: List[List[int]], secondList: List[List[int]]) -> List[List[int]]:\n    ans = []\n    i = 0\n    j = 0\n\n    while i < len(firstList) and j < len(secondList):\n      # Lo := the start of the intersection\n      # Hi := the end of the intersection\n      lo = max(firstList[i][0], secondList[j][0])\n      hi = min(firstList[i][1], secondList[j][1])\n      if lo <= hi:\n        ans.append([lo, hi])\n      if firstList[i][1] < secondList[j][1]:\n        i += 1\n      else:\n        j += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}