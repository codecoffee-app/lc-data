{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1169",
            "title": "Invalid Transactions",
            "titleSlug": "invalid-transactions",
            "content": "<p>A transaction is possibly invalid if:</p>\n\n<ul>\n\t<li>the amount exceeds <code>$1000</code>, or;</li>\n\t<li>if it occurs within (and including) <code>60</code> minutes of another transaction with the <strong>same name</strong> in a <strong>different city</strong>.</li>\n</ul>\n\n<p>You are given an array of strings <code>transaction</code> where <code>transactions[i]</code> consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.</p>\n\n<p>Return a list of <code>transactions</code> that are possibly invalid. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> transactions = [&quot;alice,20,800,mtv&quot;,&quot;alice,50,100,beijing&quot;]\n<strong>Output:</strong> [&quot;alice,20,800,mtv&quot;,&quot;alice,50,100,beijing&quot;]\n<strong>Explanation:</strong> The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> transactions = [&quot;alice,20,800,mtv&quot;,&quot;alice,50,1200,mtv&quot;]\n<strong>Output:</strong> [&quot;alice,50,1200,mtv&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> transactions = [&quot;alice,20,800,mtv&quot;,&quot;bob,50,1200,mtv&quot;]\n<strong>Output:</strong> [&quot;bob,50,1200,mtv&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>transactions.length &lt;= 1000</code></li>\n\t<li>Each <code>transactions[i]</code> takes the form <code>&quot;{name},{time},{amount},{city}&quot;</code></li>\n\t<li>Each <code>{name}</code> and <code>{city}</code> consist of lowercase English letters, and have lengths between <code>1</code> and <code>10</code>.</li>\n\t<li>Each <code>{time}</code> consist of digits, and represent an integer between <code>0</code> and <code>1000</code>.</li>\n\t<li>Each <code>{amount}</code> consist of digits, and represent an integer between <code>0</code> and <code>2000</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 510,
            "dislikes": 2259,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"71K\", \"totalSubmission\": \"227.8K\", \"totalAcceptedRaw\": 70974, \"totalSubmissionRaw\": 227816, \"acRate\": \"31.2%\"}",
            "hints": [
                "Split each string into four arrays.",
                "For each transaction check if it's invalid, you can do this with just a loop with help of the four arrays generated on step 1.",
                "At the end you perform O(N ^ 2) operations."
            ],
            "rephrased": {
                "body": "A transaction is considered possibly invalid if either of the following conditions is met:\n\n*   The transaction amount exceeds $1000.\n*   The transaction occurs within 60 minutes (inclusive) of another transaction with the same name but in a different city.\n\nYou are given an array of strings `transactions`, where each string `transactions[i]` represents a transaction and is formatted as \"{name},{time},{amount},{city}\".\n\nReturn a list of all `transactions` that are possibly invalid. The order of the returned transactions does not matter.",
                "constraints": [
                    "transactions.length <= 1000",
                    "Each transactions[i] takes the form \"{name},{time},{amount},{city}\"",
                    "Each {name} and {city} consist of lowercase English letters, and have lengths between 1 and 10.",
                    "Each {time} consist of digits, and represent an integer between 0 and 1000.",
                    "Each {amount} consist of digits, and represent an integer between 0 and 2000."
                ],
                "testcases": [
                    {
                        "input": "[\"alice,20,800,mtv\",\"alice,50,100,beijing\"]",
                        "output": "[\"alice,20,800,mtv\",\"alice,50,100,beijing\"]",
                        "explanation": "The first transaction is invalid because the second transaction occurs within 60 minutes, has the same name, and is in a different city. Similarly, the second transaction is also invalid."
                    },
                    {
                        "input": "[\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]",
                        "output": "[\"alice,50,1200,mtv\"]",
                        "explanation": "The second transaction is invalid because the amount exceeds $1000."
                    },
                    {
                        "input": "[\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]",
                        "output": "[\"bob,50,1200,mtv\"]",
                        "explanation": "The second transaction is invalid because the amount exceeds $1000."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Split each string into four arrays.",
            "For each transaction check if it's invalid, you can do this with just a loop with help of the four arrays generated on step 1.",
            "At the end you perform O(N ^ 2) operations."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct Trans {\n  string name;\n  int time;\n  int amount;\n  string city;\n};\n\nclass Solution {\n public:\n  vector<string> invalidTransactions(vector<string>& transactions) {\n    vector<string> ans;\n    unordered_map<string, vector<Trans>> nameToTranses;\n\n    for (const string& t : transactions) {\n      const Trans trans = getTrans(t);\n      nameToTranses[trans.name].push_back(trans);\n    }\n\n    for (const string& t : transactions) {\n      const Trans currTrans = getTrans(t);\n      if (currTrans.amount > 1000) {\n        ans.push_back(t);\n      } else if (const auto it = nameToTranses.find(currTrans.name);\n                 it != nameToTranses.cend()) {\n        // Iterate through all transactions w/ the same name,\n        // Check if within 60 minutes in a different city\n        for (Trans trans : it->second)\n          if (abs(trans.time - currTrans.time) <= 60 &&\n              trans.city != currTrans.city) {\n            ans.push_back(t);\n            break;\n          }\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  Trans getTrans(const string& t) {\n    istringstream iss(t);\n    vector<string> s(4, \"\");\n    for (int i = 0; getline(iss, s[i++], ',');)\n      ;\n    return {s[0], stoi(s[1]), stoi(s[2]), s[3]};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Trans {\n  public String name;\n  public int time;\n  public int amount;\n  public String city;\n  public Trans(String name, int time, int amount, String city) {\n    this.name = name;\n    this.time = time;\n    this.amount = amount;\n    this.city = city;\n  }\n}\n\nclass Solution {\n  public List<String> invalidTransactions(String[] transactions) {\n    List<String> ans = new ArrayList<>();\n    Map<String, List<Trans>> nameToTranses = new HashMap<>();\n\n    for (final String t : transactions) {\n      Trans trans = getTrans(t);\n      nameToTranses.putIfAbsent(trans.name, new ArrayList<>());\n      nameToTranses.get(trans.name).add(trans);\n    }\n\n    for (final String t : transactions) {\n      Trans currTrans = getTrans(t);\n      if (currTrans.amount > 1000) {\n        ans.add(t);\n      } else if (nameToTranses.containsKey(currTrans.name)) {\n        // Iterate through all transactions w/ the same name,\n        // Check if within 60 minutes in a different city\n        for (Trans trans : nameToTranses.get(currTrans.name))\n          if (Math.abs(trans.time - currTrans.time) <= 60 && !trans.city.equals(currTrans.city)) {\n            ans.add(t);\n            break;\n          }\n      }\n    }\n\n    return ans;\n  }\n\n  private Trans getTrans(final String t) {\n    String[] s = t.split(\",\"); // [name, time, amount, city]\n    return new Trans(s[0], Integer.parseInt(s[1]), Integer.parseInt(s[2]), s[3]);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def invalidTransactions(self, transactions: List[str]) -> List[str]:\n    ans = []\n    nameToTranses = collections.defaultdict(list)\n\n    for t in transactions:\n      name, time, amount, city = t.split(',')\n      time, amount = int(time), int(amount)\n      nameToTranses[name].append({'time': time, 'city': city})\n\n    for t in transactions:\n      name, time, amount, city = t.split(',')\n      time, amount = int(time), int(amount)\n      if amount > 1000:\n        ans.append(t)\n      elif name in nameToTranses:\n        for sameName in nameToTranses[name]:\n          if abs(sameName['time'] - time) <= 60 and sameName['city'] != city:\n            ans.append(t)\n            break\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}