{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "226",
            "title": "Invert Binary Tree",
            "titleSlug": "invert-binary-tree",
            "content": "<p>Given the <code>root</code> of a binary tree, invert the tree, and return <em>its root</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg\" style=\"width: 500px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,7,1,3,6,9]\n<strong>Output:</strong> [4,7,2,9,6,3,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg\" style=\"width: 500px; height: 120px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> [2,3,1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 13481,
            "dislikes": 197,
            "similarQuestions": "[{\"title\": \"Reverse Odd Levels of Binary Tree\", \"titleSlug\": \"reverse-odd-levels-of-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"2.4M\", \"totalAcceptedRaw\": 1859345, \"totalSubmissionRaw\": 2437953, \"acRate\": \"76.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, invert the tree such that the left and right subtrees of each node are swapped. Return the root of the inverted tree.",
                "constraints": [
                    "The number of nodes in the tree is in the range [0, 100].",
                    "-100 <= Node.val <= 100"
                ],
                "testcases": [
                    {
                        "input": "[4,2,7,1,3,6,9]",
                        "output": "[4,7,2,9,6,3,1]",
                        "explanation": "The tree with root 4 has its left subtree (with root 2) and right subtree (with root 7) swapped.  The same process is applied recursively to each subtree."
                    },
                    {
                        "input": "[2,1,3]",
                        "output": "[2,3,1]",
                        "explanation": "The tree with root 2 has its left subtree (with root 1) and right subtree (with root 3) swapped."
                    },
                    {
                        "input": "[]",
                        "output": "[]",
                        "explanation": "An empty tree remains an empty tree after inversion."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "reverse-odd-levels-of-binary-tree",
                "title": "Reverse Odd Levels of Binary Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* invertTree(TreeNode* root) {\n    if (root == nullptr)\n      return nullptr;\n\n    TreeNode* const left = root->left;\n    TreeNode* const right = root->right;\n    root->left = invertTree(right);\n    root->right = invertTree(left);\n    return root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode invertTree(TreeNode root) {\n    if (root == null)\n      return null;\n\n    TreeNode left = root.left;\n    TreeNode right = root.right;\n    root.left = invertTree(right);\n    root.right = invertTree(left);\n    return root;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n    if not root:\n      return None\n\n    left = root.left\n    right = root.right\n    root.left = self.invertTree(right)\n    root.right = self.invertTree(left)\n    return root\n",
                "lang_text": "py"
            }
        }
    }
}