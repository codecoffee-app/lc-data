{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "502",
            "title": "IPO",
            "titleSlug": "ipo",
            "content": "<p>Suppose LeetCode will start its <strong>IPO</strong> soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the <strong>IPO</strong>. Since it has limited resources, it can only finish at most <code>k</code> distinct projects before the <strong>IPO</strong>. Help LeetCode design the best way to maximize its total capital after finishing at most <code>k</code> distinct projects.</p>\n\n<p>You are given <code>n</code> projects where the <code>i<sup>th</sup></code> project has a pure profit <code>profits[i]</code> and a minimum capital of <code>capital[i]</code> is needed to start it.</p>\n\n<p>Initially, you have <code>w</code> capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.</p>\n\n<p>Pick a list of <strong>at most</strong> <code>k</code> distinct projects from given projects to <strong>maximize your final capital</strong>, and return <em>the final maximized capital</em>.</p>\n\n<p>The answer is guaranteed to fit in a 32-bit signed integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Since your initial capital is 0, you can only start the project indexed 0.\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]\n<strong>Output:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= w &lt;= 10<sup>9</sup></code></li>\n\t<li><code>n == profits.length</code></li>\n\t<li><code>n == capital.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= profits[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= capital[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2949,
            "dislikes": 186,
            "similarQuestions": "[{\"title\": \"Maximum Subsequence Score\", \"titleSlug\": \"maximum-subsequence-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Elegance of a K-Length Subsequence\", \"titleSlug\": \"maximum-elegance-of-a-k-length-subsequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"110.8K\", \"totalSubmission\": \"223.6K\", \"totalAcceptedRaw\": 110800, \"totalSubmissionRaw\": 223564, \"acRate\": \"49.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "LeetCode is preparing for its IPO and wants to maximize its capital by undertaking at most `k` projects. Each project requires a minimum capital to start and yields a profit upon completion. Given the profits and capital requirements for `n` projects, and an initial capital `w`, determine the maximum capital LeetCode can achieve after completing at most `k` projects.",
                "constraints": [
                    "1 <= k <= 10^5",
                    "0 <= w <= 10^9",
                    "n == profits.length",
                    "n == capital.length",
                    "1 <= n <= 10^5",
                    "0 <= profits[i] <= 10^4",
                    "0 <= capital[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]",
                        "output": "4",
                        "explanation": "Initially, the capital is 0, so only project 0 can be started, yielding a profit of 1 and increasing the capital to 1. Then, either project 1 or 2 can be started. Project 2 is chosen for its higher profit of 3. The final capital is 0 + 1 + 3 = 4."
                    },
                    {
                        "input": "k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]",
                        "output": "6",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-subsequence-score",
                "title": "Maximum Subsequence Score",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-elegance-of-a-k-length-subsequence",
                "title": "Maximum Elegance of a K-Length Subsequence",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ]
    }
}