{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "45",
            "title": "Jump Game II",
            "titleSlug": "jump-game-ii",
            "content": "<p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>. You are initially positioned at <code>nums[0]</code>.</p>\n\n<p>Each element <code>nums[i]</code> represents the maximum length of a forward jump from index <code>i</code>. In other words, if you are at <code>nums[i]</code>, you can jump to any <code>nums[i + j]</code> where:</p>\n\n<ul>\n\t<li><code>0 &lt;= j &lt;= nums[i]</code> and</li>\n\t<li><code>i + j &lt; n</code></li>\n</ul>\n\n<p>Return <em>the minimum number of jumps to reach </em><code>nums[n - 1]</code>. The test cases are generated such that you can reach <code>nums[n - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1,1,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,0,1,4]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li>It&#39;s guaranteed that you can reach <code>nums[n - 1]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 13870,
            "dislikes": 509,
            "similarQuestions": "[{\"title\": \"Jump Game\", \"titleSlug\": \"jump-game\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game III\", \"titleSlug\": \"jump-game-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game VII\", \"titleSlug\": \"jump-game-vii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game VIII\", \"titleSlug\": \"jump-game-viii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Visited Cells in a Grid\", \"titleSlug\": \"minimum-number-of-visited-cells-in-a-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Jumps to Reach the Last Index\", \"titleSlug\": \"maximum-number-of-jumps-to-reach-the-last-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Visit Array Positions to Maximize Score\", \"titleSlug\": \"visit-array-positions-to-maximize-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 1088286, \"totalSubmissionRaw\": 2704124, \"acRate\": \"40.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a 0-indexed array of integers `nums` of length `n`, where `nums[i]` represents the maximum forward jump length from index `i`.  You start at `nums[0]`.  Find the minimum number of jumps required to reach `nums[n - 1]`. You can jump from index `i` to any index `i + j` such that `0 <= j <= nums[i]` and `i + j < n`.",
                "constraints": [
                    "1 <= nums.length <= 10^4",
                    "0 <= nums[i] <= 1000",
                    "It's guaranteed that you can reach nums[n - 1]."
                ],
                "testcases": [
                    {
                        "input": "[2,3,1,1,4]",
                        "output": "2",
                        "explanation": "From index 0, jump 1 step to index 1. Then, jump 3 steps from index 1 to the last index."
                    },
                    {
                        "input": "[2,3,0,1,4]",
                        "output": "2",
                        "explanation": "null"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game",
                "title": "Jump Game",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-iii",
                "title": "Jump Game III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-vii",
                "title": "Jump Game VII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-viii",
                "title": "Jump Game VIII",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-visited-cells-in-a-grid",
                "title": "Minimum Number of Visited Cells in a Grid",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-jumps-to-reach-the-last-index",
                "title": "Maximum Number of Jumps to Reach the Last Index",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "visit-array-positions-to-maximize-score",
                "title": "Visit Array Positions to Maximize Score",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ]
    }
}