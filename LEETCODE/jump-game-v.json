{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1340",
            "title": "Jump Game V",
            "titleSlug": "jump-game-v",
            "content": "<p>Given an array of&nbsp;integers <code>arr</code> and an integer <code>d</code>. In one step you can jump from index <code>i</code> to index:</p>\n\n<ul>\n\t<li><code>i + x</code> where:&nbsp;<code>i + x &lt; arr.length</code> and <code> 0 &lt;&nbsp;x &lt;= d</code>.</li>\n\t<li><code>i - x</code> where:&nbsp;<code>i - x &gt;= 0</code> and <code> 0 &lt;&nbsp;x &lt;= d</code>.</li>\n</ul>\n\n<p>In addition, you can only jump from index <code>i</code> to index <code>j</code>&nbsp;if <code>arr[i] &gt; arr[j]</code> and <code>arr[i] &gt; arr[k]</code> for all indices <code>k</code> between <code>i</code> and <code>j</code> (More formally <code>min(i,&nbsp;j) &lt; k &lt; max(i, j)</code>).</p>\n\n<p>You can choose any index of the array and start jumping. Return <em>the maximum number of indices</em>&nbsp;you can visit.</p>\n\n<p>Notice that you can not jump outside of the array at any time.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/23/meta-chart.jpeg\" style=\"width: 633px; height: 419px;\" />\n<pre>\n<strong>Input:</strong> arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> You can start at index 10. You can jump 10 --&gt; 8 --&gt; 6 --&gt; 7 as shown.\nNote that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 &gt; 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 &gt; 9.\nSimilarly You cannot jump from index 3 to index 2 or index 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,3,3,3,3], d = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You can start at any index. You always cannot jump to any index.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [7,6,5,4,3,2,1], d = 1\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Start at index 0. You can visit all the indicies. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= d &lt;= arr.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1073,
            "dislikes": 38,
            "similarQuestions": "[{\"title\": \"Jump Game VII\", \"titleSlug\": \"jump-game-vii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game VIII\", \"titleSlug\": \"jump-game-viii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"30K\", \"totalSubmission\": \"47.6K\", \"totalAcceptedRaw\": 29988, \"totalSubmissionRaw\": 47588, \"acRate\": \"63.0%\"}",
            "hints": [
                "Use dynamic programming. dp[i] is max jumps you can do starting from index i. Answer is max(dp[i]).",
                "dp[i] = 1 + max (dp[j]) where j is all indices you can reach from i."
            ],
            "rephrased": {
                "body": "Given an array of integers `arr` and an integer `d`, you can jump from index `i` to another index within a distance of `d`.  Specifically, you can jump to `i + x` or `i - x`, where `0 < x <= d`, provided these indices are within the bounds of the array.  The jump is only valid if `arr[i] > arr[j]` (where `j` is the destination index) and `arr[i]` is also greater than all elements `arr[k]` between `i` and `j` (exclusive).  You can start at any index. Find the maximum number of indices you can visit following these rules.",
                "constraints": [
                    "1 <= arr.length <= 1000",
                    "1 <= arr[i] <= 10^5",
                    "1 <= d <= arr.length"
                ],
                "testcases": [
                    {
                        "input": "arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2",
                        "output": "4",
                        "explanation": "Starting at index 10 allows a sequence of jumps: 10 -> 8 -> 6 -> 7. This sequence visits 4 indices. Other starting points may not yield a longer sequence. For example, starting at index 6 only leads to index 7 because 13 > 9, and from index 3 it is impossible to reach index 2 or 1."
                    },
                    {
                        "input": "arr = [3,3,3,3,3], d = 3",
                        "output": "1",
                        "explanation": "Due to the equal values, no valid jumps are possible from any starting index. Thus, the maximum number of indices visited is 1 (the starting index itself)."
                    },
                    {
                        "input": "arr = [7,6,5,4,3,2,1], d = 1",
                        "output": "7",
                        "explanation": "Starting at index 0, a sequence of jumps 0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 is possible, visiting all 7 indices."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-vii",
                "title": "Jump Game VII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-viii",
                "title": "Jump Game VIII",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Use dynamic programming. dp[i] is max jumps you can do starting from index i. Answer is max(dp[i]).",
            "dp[i] = 1 + max (dp[j]) where j is all indices you can reach from i."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxJumps(vector<int>& arr, int d) {\n    const int n = arr.size();\n    // dp[i] := max jumps starting from arr[i]\n    vector<int> dp(n, 1);\n    // Decreasing stack stores indices\n    stack<int> stack;\n\n    for (int i = 0; i <= n; ++i) {\n      while (!stack.empty() && (i == n || arr[stack.top()] < arr[i])) {\n        vector<int> indices{stack.top()};\n        stack.pop();\n        while (!stack.empty() && arr[stack.top()] == arr[indices[0]])\n          indices.push_back(stack.top()), stack.pop();\n        for (const int j : indices) {\n          if (i < n && i - j <= d)\n            // Can jump from i to j\n            dp[i] = max(dp[i], dp[j] + 1);\n          if (!stack.empty() && j - stack.top() <= d)\n            // Can jump from stack.top() to j\n            dp[stack.top()] = max(dp[stack.top()], dp[j] + 1);\n        }\n      }\n      stack.push(i);\n    }\n\n    return *max_element(dp.begin(), dp.end());\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxJumps(int[] arr, int d) {\n    final int n = arr.length;\n    // dp[i] := max jumps starting from arr[i]\n    int[] dp = new int[n];\n    // Decreasing stack stores indices\n    Deque<Integer> stack = new ArrayDeque<>();\n\n    for (int i = 0; i <= n; ++i) {\n      while (!stack.isEmpty() && (i == n || arr[stack.peek()] < arr[i])) {\n        List<Integer> indices = new ArrayList<>(Arrays.asList(stack.pop()));\n        while (!stack.isEmpty() && arr[stack.peek()] == arr[indices.get(0)])\n          indices.add(stack.pop());\n        for (final int j : indices) {\n          if (i < n && i - j <= d)\n            // Can jump from i to j\n            dp[i] = Math.max(dp[i], dp[j] + 1);\n          if (!stack.isEmpty() && j - stack.peek() <= d)\n            // Can jump from stack.peek() to j\n            dp[stack.peek()] = Math.max(dp[stack.peek()], dp[j] + 1);\n        }\n      }\n      stack.push(i);\n    }\n\n    return Arrays.stream(dp).max().getAsInt() + 1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxJumps(self, arr: List[int], d: int) -> int:\n    n = len(arr)\n    # dp[i] := max jumps starting from arr[i]\n    dp = [1] * n\n    # Decreasing stack stores indices\n    stack = []\n\n    for i in range(n + 1):\n      while stack and (i == n or arr[stack[-1]] < arr[i]):\n        indices = [stack.pop()]\n        while stack and arr[stack[-1]] == arr[indices[0]]:\n          indices.append(stack.pop())\n        for j in indices:\n          if i < n and i - j <= d:\n            # Can jump from i to j\n            dp[i] = max(dp[i], dp[j] + 1)\n          if stack and j - stack[-1] <= d:\n            # Can jump from stack[-1] to j\n            dp[stack[-1]] = max(dp[stack[-1]], dp[j] + 1)\n      stack.append(i)\n\n    return max(dp)\n",
                "lang_text": "py"
            }
        }
    }
}