{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1696",
            "title": "Jump Game VI",
            "titleSlug": "jump-game-vi",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and an integer <code>k</code>.</p>\n\n<p>You are initially standing at index <code>0</code>. In one move, you can jump at most <code>k</code> steps forward without going outside the boundaries of the array. That is, you can jump from index <code>i</code> to any index in the range <code>[i + 1, min(n - 1, i + k)]</code> <strong>inclusive</strong>.</p>\n\n<p>You want to reach the last index of the array (index <code>n - 1</code>). Your <strong>score</strong> is the <strong>sum</strong> of all <code>nums[j]</code> for each index <code>j</code> you visited in the array.</p>\n\n<p>Return <em>the <strong>maximum score</strong> you can get</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [<u>1</u>,<u>-1</u>,-2,<u>4</u>,-7,<u>3</u>], k = 2\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [<u>10</u>,-5,-2,<u>4</u>,0,<u>3</u>], k = 3\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,-5,-20,4,-1,3,-6,-3], k = 2\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length, k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3340,
            "dislikes": 108,
            "similarQuestions": "[{\"title\": \"Sliding Window Maximum\", \"titleSlug\": \"sliding-window-maximum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Jump Game VII\", \"titleSlug\": \"jump-game-vii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game VIII\", \"titleSlug\": \"jump-game-viii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximize Value of Function in a Ball Passing Game\", \"titleSlug\": \"maximize-value-of-function-in-a-ball-passing-game\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Monotonic Queue",
                    "slug": "monotonic-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"103.8K\", \"totalSubmission\": \"227K\", \"totalAcceptedRaw\": 103823, \"totalSubmissionRaw\": 227047, \"acRate\": \"45.7%\"}",
            "hints": [
                "Let dp[i] be \"the maximum score to reach the end starting at index i\". The answer for dp[i] is nums[i] + max{dp[i+j]} for 1 <= j <= k. That gives an O(n*k) solution.",
                "Instead of checking every j for every i, keep track of the largest dp[i] values in a heap and calculate dp[i] from right to left. When the largest value in the heap is out of bounds of the current index, remove it and keep checking."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` and an integer `k`, you start at index 0. In one move, you can jump at most `k` steps forward within the array bounds.  Your goal is to reach the last index (n - 1). Your score is the sum of `nums[j]` for each index `j` you visit.\n\nReturn the maximum score you can achieve.",
                "constraints": [
                    "1 <= nums.length, k <= 10<sup>5</sup>",
                    "-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,-1,-2,4,-7,3], k = 2",
                        "output": "7",
                        "explanation": "The optimal path is [1, -1, 4, 3], resulting in a sum of 7."
                    },
                    {
                        "input": "nums = [10,-5,-2,4,0,3], k = 3",
                        "output": "17",
                        "explanation": "The optimal path is [10, 4, 3], resulting in a sum of 17."
                    },
                    {
                        "input": "nums = [1,-5,-20,4,-1,3,-6,-3], k = 2",
                        "output": "0",
                        "explanation": "The optimal path yields a maximum sum of 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "sliding-window-maximum",
                "title": "Sliding Window Maximum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-vii",
                "title": "Jump Game VII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-viii",
                "title": "Jump Game VIII",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximize-value-of-function-in-a-ball-passing-game",
                "title": "Maximize Value of Function in a Ball Passing Game",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let dp[i] be \"the maximum score to reach the end starting at index i\". The answer for dp[i] is nums[i] + max{dp[i+j]} for 1 <= j <= k. That gives an O(n*k) solution.",
            "Instead of checking every j for every i, keep track of the largest dp[i] values in a heap and calculate dp[i] from right to left. When the largest value in the heap is out of bounds of the current index, remove it and keep checking."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Monotonic Queue",
                "slug": "monotonic-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxResult(vector<int>& nums, int k) {\n    // max queue storing dp[i] within the bounds\n    deque<int> dq{0};\n    // dp[i] := max score to consider nums[0..i]\n    vector<int> dp(nums.size());\n    dp[0] = nums[0];\n\n    for (int i = 1; i < nums.size(); ++i) {\n      // Pop the index if it's out of bounds.\n      if (dq.front() + k < i)\n        dq.pop_front();\n      dp[i] = dp[dq.front()] + nums[i];\n      // Pop indices that won't be chosen in the future.\n      while (!dq.empty() && dp[dq.back()] <= dp[i])\n        dq.pop_back();\n      dq.push_back(i);\n    }\n\n    return dp.back();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxResult(int[] nums, int k) {\n    // max queue storing dp[i] within the bounds\n    Deque<Integer> dq = new ArrayDeque<>(Arrays.asList(0));\n    // dp[i] := max score to consider nums[0..i]\n    int[] dp = new int[nums.length];\n    dp[0] = nums[0];\n\n    for (int i = 1; i < nums.length; ++i) {\n      // Pop the index if it's out of bounds.\n      if (dq.peekFirst() + k < i)\n        dq.pollFirst();\n      dp[i] = dp[dq.peekFirst()] + nums[i];\n      // Pop indices that won't be chosen in the future.\n      while (!dq.isEmpty() && dp[dq.peekLast()] <= dp[i])\n        dq.pollLast();\n      dq.offerLast(i);\n    }\n\n    return dp[nums.length - 1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxResult(self, nums: List[int], k: int) -> int:\n    # max queue storing dp[i] within the bounds\n    dq = collections.deque([0])\n    # dp[i] := max score to consider nums[0..i]\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n\n    for i in range(1, len(nums)):\n      # Pop the index if it's out of bounds.\n      if dq[0] + k < i:\n        dq.popleft()\n      dp[i] = dp[dq[0]] + nums[i]\n      # Pop indices that won't be chosen in the future.\n      while dq and dp[dq[-1]] <= dp[i]:\n        dq.pop()\n      dq.append(i)\n\n    return dp[-1]\n",
                "lang_text": "py"
            }
        }
    }
}