{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1871",
            "title": "Jump Game VII",
            "titleSlug": "jump-game-vii",
            "content": "<p>You are given a <strong>0-indexed</strong> binary string <code>s</code> and two integers <code>minJump</code> and <code>maxJump</code>. In the beginning, you are standing at index <code>0</code>, which is equal to <code>&#39;0&#39;</code>. You can move from index <code>i</code> to index <code>j</code> if the following conditions are fulfilled:</p>\n\n<ul>\n\t<li><code>i + minJump &lt;= j &lt;= min(i + maxJump, s.length - 1)</code>, and</li>\n\t<li><code>s[j] == &#39;0&#39;</code>.</li>\n</ul>\n\n<p>Return <code>true</code><i> if you can reach index </i><code>s.length - 1</code><i> in </i><code>s</code><em>, or </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;<u>0</u>11<u>0</u>1<u>0</u>&quot;, minJump = 2, maxJump = 3\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nIn the first step, move from index 0 to index 3. \nIn the second step, move from index 3 to index 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;01101110&quot;, minJump = 2, maxJump = 3\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li><code>s[0] == &#39;0&#39;</code></li>\n\t<li><code>1 &lt;= minJump &lt;= maxJump &lt; s.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1581,
            "dislikes": 91,
            "similarQuestions": "[{\"title\": \"Jump Game II\", \"titleSlug\": \"jump-game-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game\", \"titleSlug\": \"jump-game\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game III\", \"titleSlug\": \"jump-game-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game IV\", \"titleSlug\": \"jump-game-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Jump Game V\", \"titleSlug\": \"jump-game-v\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Jump Game VI\", \"titleSlug\": \"jump-game-vi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game VII\", \"titleSlug\": \"jump-game-vii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game VIII\", \"titleSlug\": \"jump-game-viii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Vowel Strings in Ranges\", \"titleSlug\": \"count-vowel-strings-in-ranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Jumps to Reach the Last Index\", \"titleSlug\": \"maximum-number-of-jumps-to-reach-the-last-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"41.3K\", \"totalSubmission\": \"166.1K\", \"totalAcceptedRaw\": 41278, \"totalSubmissionRaw\": 166079, \"acRate\": \"24.9%\"}",
            "hints": [
                "Consider for each reachable index i the interval [i + a, i + b].",
                "Use partial sums to mark the intervals as reachable."
            ],
            "rephrased": {
                "body": "Given a 0-indexed binary string `s` and two integers `minJump` and `maxJump`, determine if it is possible to reach the last index of the string starting from index 0. You can move from index `i` to index `j` if the following conditions are met:\n\n1.  `i + minJump <= j <= min(i + maxJump, s.length - 1)`\n2.  `s[j] == '0'`",
                "constraints": [
                    "2 <= s.length <= 10^5",
                    "s[i] is either '0' or '1'",
                    "s[0] == '0'",
                    "1 <= minJump <= maxJump < s.length"
                ],
                "testcases": [
                    {
                        "input": "s = \"011010\", minJump = 2, maxJump = 3",
                        "output": "true",
                        "explanation": "We can move from index 0 to index 3. Then, we can move from index 3 to index 5, which is the last index."
                    },
                    {
                        "input": "s = \"01101110\", minJump = 2, maxJump = 3",
                        "output": "false",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-ii",
                "title": "Jump Game II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game",
                "title": "Jump Game",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-iii",
                "title": "Jump Game III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "jump-game-iv",
                "title": "Jump Game IV",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "jump-game-v",
                "title": "Jump Game V",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-vi",
                "title": "Jump Game VI",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-vii",
                "title": "Jump Game VII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-viii",
                "title": "Jump Game VIII",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-vowel-strings-in-ranges",
                "title": "Count Vowel Strings in Ranges",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-jumps-to-reach-the-last-index",
                "title": "Maximum Number of Jumps to Reach the Last Index",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Consider for each reachable index i the interval [i + a, i + b].",
            "Use partial sums to mark the intervals as reachable."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canReach(string s, int minJump, int maxJump) {\n    int count = 0;\n    vector<bool> dp(s.length());\n    dp[0] = true;\n\n    for (int i = minJump; i < s.length(); ++i) {\n      count += dp[i - minJump];\n      if (i - maxJump > 0)\n        count -= dp[i - maxJump - 1];\n      dp[i] = count && s[i] == '0';\n    }\n\n    return dp.back();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canReach(String s, int minJump, int maxJump) {\n    int count = 0;\n    boolean dp[] = new boolean[s.length()];\n    dp[0] = true;\n\n    for (int i = minJump; i < s.length(); ++i) {\n      count += dp[i - minJump] ? 1 : 0;\n      if (i - maxJump > 0)\n        count -= dp[i - maxJump - 1] ? 1 : 0;\n      dp[i] = count > 0 && s.charAt(i) == '0';\n    }\n\n    return dp[dp.length - 1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canReach(self, s: str, minJump: int, maxJump: int) -> bool:\n    count = 0\n    dp = [True] + [False] * (len(s) - 1)\n\n    for i in range(minJump, len(s)):\n      count += dp[i - minJump]\n      if i - maxJump > 0:\n        count -= dp[i - maxJump - 1]\n      dp[i] = count and s[i] == '0'\n\n    return dp[-1]\n",
                "lang_text": "py"
            }
        }
    }
}