{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1191",
            "title": "K-Concatenation Maximum Sum",
            "titleSlug": "k-concatenation-maximum-sum",
            "content": "<p>Given an integer array <code>arr</code> and an integer <code>k</code>, modify the array by repeating it <code>k</code> times.</p>\n\n<p>For example, if <code>arr = [1, 2]</code> and <code>k = 3 </code>then the modified array will be <code>[1, 2, 1, 2, 1, 2]</code>.</p>\n\n<p>Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be <code>0</code> and its sum in that case is <code>0</code>.</p>\n\n<p>As the answer can be very large, return the answer <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2], k = 3\n<strong>Output:</strong> 9\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,-2,1], k = 5\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [-1,-2], k = 7\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1381,
            "dislikes": 111,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"33.1K\", \"totalSubmission\": \"140.1K\", \"totalAcceptedRaw\": 33090, \"totalSubmissionRaw\": 140127, \"acRate\": \"23.6%\"}",
            "hints": [
                "How to solve the problem for k=1 ?",
                "Use Kadane's algorithm for k=1.",
                "What are the possible cases for the answer ?",
                "The answer is the maximum between, the answer for k=1, the sum of the whole array multiplied by k, or the maximum suffix sum plus the maximum prefix sum plus (k-2) multiplied by the whole array sum for k > 1."
            ],
            "rephrased": {
                "body": "Given an integer array `arr` and an integer `k`, create a modified array by repeating `arr` `k` times.  Find the maximum sub-array sum in the modified array. The length of the sub-array can be 0, in which case its sum is 0.  Return the answer modulo `10^9 + 7`.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "1 <= k <= 10^5",
                    "-10^4 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "{ \"arr\": [1, 2], \"k\": 3 }",
                        "output": "9",
                        "explanation": "The modified array is [1, 2, 1, 2, 1, 2]. The maximum sub-array sum is 1 + 2 + 1 + 2 + 1 + 2 = 9."
                    },
                    {
                        "input": "{ \"arr\": [1, -2, 1], \"k\": 5 }",
                        "output": "2",
                        "explanation": "The modified array is [1, -2, 1, 1, -2, 1, 1, -2, 1, 1, -2, 1, 1, -2, 1]. The maximum sub-array sum is 1."
                    },
                    {
                        "input": "{ \"arr\": [-1, -2], \"k\": 7 }",
                        "output": "0",
                        "explanation": "The modified array consists of only negative numbers. Therefore, the maximum sub-array sum is 0 (an empty sub-array)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "How to solve the problem for k=1 ?",
            "Use Kadane's algorithm for k=1.",
            "What are the possible cases for the answer ?",
            "The answer is the maximum between, the answer for k=1, the sum of the whole array multiplied by k, or the maximum suffix sum plus the maximum prefix sum plus (k-2) multiplied by the whole array sum for k > 1."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int kConcatenationMaxSum(vector<int>& arr, int k) {\n    constexpr int kMod = 1'000'000'007;\n    const int sz = arr.size() * (k == 1 ? 1 : 2);\n    const int sum = accumulate(arr.begin(), arr.end(), 0);\n    // The concatenated array will be [arr1, arr2, ..., arrk].\n    // If sum(arr) > 0 and k > 2, then arr2, ..., arr(k - 1) should be included.\n    // Equivalently, maxSubarraySum is from arr1 and arrk.\n    return (sum > 0 && k > 2 ? kadane(arr, sz) + sum * static_cast<long>(k - 2)\n                             : kadane(arr, sz)) %\n           kMod;\n  }\n\n private:\n  int kadane(const vector<int>& A, int sz) {\n    int ans = 0;\n    int sum = 0;\n    for (int i = 0; i < sz; ++i) {\n      const int a = A[i % A.size()];\n      sum = max(a, sum + a);\n      ans = max(ans, sum);\n    }\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int kConcatenationMaxSum(int[] arr, int k) {\n    final int kMod = 1_000_000_007;\n    final int sz = arr.length * (k == 1 ? 1 : 2);\n    final int sum = Arrays.stream(arr).sum();\n    // The concatenated array will be [arr1, arr2, ..., arrk].\n    // If sum(arr) > 0 and k > 2, then arr2, ..., arr(k - 1) should be included.\n    // Equivalently, maxSubarraySum is from arr1 and arrk.\n    if (sum > 0 && k > 2)\n      return (int) ((kadane(arr, sz) + sum * (long) (k - 2)) % kMod);\n    return kadane(arr, sz) % kMod;\n  }\n\n  private int kadane(int[] A, int sz) {\n    int ans = 0;\n    int sum = 0;\n    for (int i = 0; i < sz; ++i) {\n      final int a = A[i % A.length];\n      sum = Math.max(a, sum + a);\n      ans = Math.max(ans, sum);\n    }\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:\n    kMod = 1_000_000_007\n    sz = len(arr) * (1 if k == 1 else 2)\n    summ = sum(arr)\n    # The concatenated array will be [arr1, arr2, ..., arrk].\n    # If sum(arr) > 0 and k > 2, then arr2, ..., arr(k - 1) should be included.\n    # Equivalently, maxSubarraySum is from arr1 and arrk.\n    if summ > 0 and k > 2:\n      return (self.kadane(arr, sz) + summ * (k - 2)) % kMod\n    return self.kadane(arr, sz) % kMod\n\n  def kadane(self, A: List[int], sz: int) -> int:\n    ans = 0\n    summ = 0\n    for i in range(sz):\n      a = A[i % len(A)]\n      summ = max(a, summ + a)\n      ans = max(ans, summ)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}