{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "854",
            "title": "K-Similar Strings",
            "titleSlug": "k-similar-strings",
            "content": "<p>Strings <code>s1</code> and <code>s2</code> are <code>k</code><strong>-similar</strong> (for some non-negative integer <code>k</code>) if we can swap the positions of two letters in <code>s1</code> exactly <code>k</code> times so that the resulting string equals <code>s2</code>.</p>\n\n<p>Given two anagrams <code>s1</code> and <code>s2</code>, return the smallest <code>k</code> for which <code>s1</code> and <code>s2</code> are <code>k</code><strong>-similar</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;ab&quot;, s2 = &quot;ba&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The two string are 1-similar because we can use one swap to change s1 to s2: &quot;ab&quot; --&gt; &quot;ba&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abc&quot;, s2 = &quot;bca&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The two strings are 2-similar because we can use two swaps to change s1 to s2: &quot;abc&quot; --&gt; &quot;bac&quot; --&gt; &quot;bca&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length &lt;= 20</code></li>\n\t<li><code>s2.length == s1.length</code></li>\n\t<li><code>s1</code> and <code>s2</code> contain only lowercase letters from the set <code>{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;}</code>.</li>\n\t<li><code>s2</code> is an anagram of <code>s1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1103,
            "dislikes": 59,
            "similarQuestions": "[{\"title\": \"Couples Holding Hands\", \"titleSlug\": \"couples-holding-hands\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"43.9K\", \"totalSubmission\": \"110.2K\", \"totalAcceptedRaw\": 43859, \"totalSubmissionRaw\": 110169, \"acRate\": \"39.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Two strings, `s1` and `s2`, are considered `k`-similar if `s1` can be transformed into `s2` by performing exactly `k` swaps of characters.  Given two anagrams `s1` and `s2`, determine the smallest value of `k` for which `s1` and `s2` are `k`-similar.",
                "constraints": [
                    "1 <= s1.length <= 20",
                    "s2.length == s1.length",
                    "s1 and s2 contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}.",
                    "s2 is an anagram of s1."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"ab\", s2 = \"ba\"",
                        "output": "1",
                        "explanation": "The strings are 1-similar because one swap transforms \"ab\" into \"ba\"."
                    },
                    {
                        "input": "s1 = \"abc\", s2 = \"bca\"",
                        "output": "2",
                        "explanation": "The strings are 2-similar. Two swaps can transform \"abc\" into \"bca\", for example: \"abc\" -> \"bac\" -> \"bca\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "couples-holding-hands",
                "title": "Couples Holding Hands",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int kSimilarity(string s1, string s2) {\n    int ans = 0;\n    queue<string> q{{s1}};\n    unordered_set<string> seen{{s1}};\n\n    while (!q.empty()) {\n      for (int sz = q.size(); sz > 0; --sz) {\n        string curr = q.front();\n        q.pop();\n        if (curr == s2)\n          return ans;\n        for (const string& child : getChildren(curr, s2)) {\n          if (seen.count(child))\n            continue;\n          q.push(child);\n          seen.insert(child);\n        }\n      }\n      ++ans;\n    }\n\n    return -1;\n  }\n\n private:\n  vector<string> getChildren(string& curr, const string& target) {\n    vector<string> children;\n    int i = 0;  // First index s.t. curr[i] != target[i]\n    while (curr[i] == target[i])\n      ++i;\n\n    for (int j = i + 1; j < curr.length(); ++j)\n      if (curr[j] == target[i]) {\n        swap(curr[i], curr[j]);\n        children.push_back(curr);\n        swap(curr[i], curr[j]);\n      }\n\n    return children;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int kSimilarity(String s1, String s2) {\n    int ans = 0;\n    Queue<String> q = new ArrayDeque<>(Arrays.asList(s1));\n    Set<String> seen = new HashSet<>(Arrays.asList(s1));\n\n    while (!q.isEmpty()) {\n      for (int sz = q.size(); sz > 0; --sz) {\n        final String curr = q.poll();\n        if (curr.equals(s2))\n          return ans;\n        for (final String child : getChildren(curr, s2)) {\n          if (seen.contains(child))\n            continue;\n          q.offer(child);\n          seen.add(child);\n        }\n      }\n      ++ans;\n    }\n\n    return -1;\n  }\n\n  private List<String> getChildren(final String curr, final String target) {\n    List<String> children = new ArrayList<>();\n    char[] charArray = curr.toCharArray();\n    int i = 0; // First index s.t. curr.charAt(i) != target.charAt(i)\n    while (curr.charAt(i) == target.charAt(i))\n      ++i;\n\n    for (int j = i + 1; j < charArray.length; ++j)\n      if (curr.charAt(j) == target.charAt(i)) {\n        swap(charArray, i, j);\n        children.add(String.valueOf(charArray));\n        swap(charArray, i, j);\n      }\n\n    return children;\n  }\n\n  private void swap(char[] charArray, int i, int j) {\n    final char temp = charArray[i];\n    charArray[i] = charArray[j];\n    charArray[j] = temp;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def kSimilarity(self, s1: str, s2: str) -> int:\n    ans = 0\n    q = collections.deque([s1])\n    seen = {s1}\n\n    while q:\n      for _ in range(len(q)):\n        curr = q.popleft()\n        if curr == s2:\n          return ans\n        for child in self._getChildren(curr, s2):\n          if child in seen:\n            continue\n          q.append(child)\n          seen.add(child)\n      ans += 1\n\n    return -1\n\n  def _getChildren(self, curr: str, target: str) -> List[str]:\n    children = []\n    s = list(curr)\n    i = 0  # First index s.t. curr[i] != target[i]\n    while curr[i] == target[i]:\n      i += 1\n\n    for j in range(i + 1, len(s)):\n      if s[j] == target[i]:\n        s[i], s[j] = s[j], s[i]\n        children.append(''.join(s))\n        s[i], s[j] = s[j], s[i]\n\n    return children\n",
                "lang_text": "py"
            }
        }
    }
}