{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3275",
            "title": "K-th Nearest Obstacle Queries",
            "titleSlug": "k-th-nearest-obstacle-queries",
            "content": "<p>There is an infinite 2D plane.</p>\n\n<p>You are given a positive integer <code>k</code>. You are also given a 2D array <code>queries</code>, which contains the following queries:</p>\n\n<ul>\n\t<li><code>queries[i] = [x, y]</code>: Build an obstacle at coordinate <code>(x, y)</code> in the plane. It is guaranteed that there is <strong>no</strong> obstacle at this coordinate when this query is made.</li>\n</ul>\n\n<p>After each query, you need to find the <strong>distance</strong> of the <code>k<sup>th</sup></code> <strong>nearest</strong> obstacle from the origin.</p>\n\n<p>Return an integer array <code>results</code> where <code>results[i]</code> denotes the <code>k<sup>th</sup></code> nearest obstacle after query <code>i</code>, or <code>results[i] == -1</code> if there are less than <code>k</code> obstacles.</p>\n\n<p><strong>Note</strong> that initially there are <strong>no</strong> obstacles anywhere.</p>\n\n<p>The <strong>distance</strong> of an obstacle at coordinate <code>(x, y)</code> from the origin is given by <code>|x| + |y|</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">queries = [[1,2],[3,4],[2,3],[-3,0]], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[-1,7,5,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Initially, there are 0 obstacles.</li>\n\t<li>After <code>queries[0]</code>, there are less than 2 obstacles.</li>\n\t<li>After <code>queries[1]</code>, there are obstacles at distances 3 and 7.</li>\n\t<li>After <code>queries[2]</code>, there are obstacles at distances 3, 5, and 7.</li>\n\t<li>After <code>queries[3]</code>, there are obstacles at distances 3, 3, 5, and 7.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">queries = [[5,5],[4,4],[3,3]], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[10,8,6]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>After <code>queries[0]</code>, there is an obstacle at distance 10.</li>\n\t<li>After <code>queries[1]</code>, there are obstacles at distances 8 and 10.</li>\n\t<li>After <code>queries[2]</code>, there are obstacles at distances 6, 8, and 10.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li>All <code>queries[i]</code> are unique.</li>\n\t<li><code>-10<sup>9</sup> &lt;= queries[i][0], queries[i][1] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 85,
            "dislikes": 13,
            "similarQuestions": "[{\"title\": \"K Closest Points to Origin\", \"titleSlug\": \"k-closest-points-to-origin\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"30.5K\", \"totalSubmission\": \"64K\", \"totalAcceptedRaw\": 30484, \"totalSubmissionRaw\": 63954, \"acRate\": \"47.7%\"}",
            "hints": [
                "Consider if there are more than <code>k</code> obstacles. Can the <code>k + 1<sup>th</sup></code> obstacle ever be the answer to any query?",
                "Maintain a max heap of size <code>k</code>, thus heap will contain minimum element at the top in that queue.",
                "Remove top element and insert new element from input array if current max is larger than this."
            ],
            "rephrased": {
                "body": "Given an infinite 2D plane. You are given a positive integer `k` and a 2D array `queries`. Each query `queries[i] = [x, y]` represents building an obstacle at coordinate `(x, y)`. After each query, find the distance of the `k`th nearest obstacle from the origin (0, 0). The distance of an obstacle at `(x, y)` from the origin is `|x| + |y|`. Return an integer array `results` where `results[i]` is the `k`th nearest obstacle after query `i`, or `-1` if there are less than `k` obstacles.",
                "constraints": [
                    "1 <= queries.length <= 2 * 10^5",
                    "All queries[i] are unique.",
                    "-10^9 <= queries[i][0], queries[i][1] <= 10^9",
                    "1 <= k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "queries = [[1,2],[3,4],[2,3],[-3,0]], k = 2",
                        "output": "[-1,7,5,3]",
                        "explanation": "Initially, there are 0 obstacles.\nAfter queries[0], there are less than 2 obstacles, hence -1.\nAfter queries[1], obstacles are at distances 3 and 7. The 2nd nearest is 7.\nAfter queries[2], obstacles are at distances 3, 5, and 7. The 2nd nearest is 5.\nAfter queries[3], obstacles are at distances 3, 3, 5, and 7. The 2nd nearest is 3."
                    },
                    {
                        "input": "queries = [[5,5],[4,4],[3,3]], k = 1",
                        "output": "[10,8,6]",
                        "explanation": "After queries[0], the obstacle is at distance 10. The 1st nearest is 10.\nAfter queries[1], obstacles are at distances 8 and 10. The 1st nearest is 8.\nAfter queries[2], obstacles are at distances 6, 8, and 10. The 1st nearest is 6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "k-closest-points-to-origin",
                "title": "K Closest Points to Origin",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Consider if there are more than <code>k</code> obstacles. Can the <code>k + 1<sup>th</sup></code> obstacle ever be the answer to any query?",
            "Maintain a max heap of size <code>k</code>, thus heap will contain minimum element at the top in that queue.",
            "Remove top element and insert new element from input array if current max is larger than this."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ]
    }
}