{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "440",
            "title": "K-th Smallest in Lexicographical Order",
            "titleSlug": "k-th-smallest-in-lexicographical-order",
            "content": "<p>Given two integers <code>n</code> and <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>lexicographically smallest integer in the range</em> <code>[1, n]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 13, k = 2\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 745,
            "dislikes": 86,
            "similarQuestions": "[{\"title\": \"Count Special Integers\", \"titleSlug\": \"count-special-integers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.9K\", \"totalSubmission\": \"69K\", \"totalAcceptedRaw\": 21909, \"totalSubmissionRaw\": 68986, \"acRate\": \"31.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two integers, `n` and `k`, find the k-th lexicographically smallest integer within the range of 1 to `n` (inclusive).",
                "constraints": [
                    "1 <= k <= n <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 13, k = 2",
                        "output": "10",
                        "explanation": "The lexicographical order for numbers from 1 to 13 is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]. Therefore, the second smallest number in this order is 10."
                    },
                    {
                        "input": "n = 1, k = 1",
                        "output": "1",
                        "explanation": "The lexicographical order for numbers from 1 to 1 is [1]. Therefore, the first smallest number in this order is 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-special-integers",
                "title": "Count Special Integers",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findKthNumber(long n, int k) {\n    auto getGap = [&n](long a, long b) {\n      long gap = 0;\n      while (a <= n) {\n        gap += min(n + 1, b) - a;\n        a *= 10;\n        b *= 10;\n      }\n      return gap;\n    };\n\n    long currNum = 1;\n\n    for (int i = 1; i < k;) {\n      long gap = getGap(currNum, currNum + 1);\n      if (i + gap <= k) {\n        i += gap;\n        ++currNum;\n      } else {\n        ++i;\n        currNum *= 10;\n      }\n    }\n\n    return currNum;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findKthNumber(int n, int k) {\n    long currNum = 1;\n\n    for (int i = 1; i < k;) {\n      long gap = getGap(currNum, currNum + 1, n);\n      if (i + gap <= k) {\n        i += gap;\n        ++currNum;\n      } else {\n        ++i;\n        currNum *= 10;\n      }\n    }\n\n    return (int) currNum;\n  }\n\n  private long getGap(long a, long b, long n) {\n    long gap = 0;\n    while (a <= n) {\n      gap += Math.min(n + 1, b) - a;\n      a *= 10;\n      b *= 10;\n    }\n    return gap;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}