{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "786",
            "title": "K-th Smallest Prime Fraction",
            "titleSlug": "k-th-smallest-prime-fraction",
            "content": "<p>You are given a sorted integer array <code>arr</code> containing <code>1</code> and <strong>prime</strong> numbers, where all the integers of <code>arr</code> are unique. You are also given an integer <code>k</code>.</p>\n\n<p>For every <code>i</code> and <code>j</code> where <code>0 &lt;= i &lt; j &lt; arr.length</code>, we consider the fraction <code>arr[i] / arr[j]</code>.</p>\n\n<p>Return <em>the</em> <code>k<sup>th</sup></code> <em>smallest fraction considered</em>. Return your answer as an array of integers of size <code>2</code>, where <code>answer[0] == arr[i]</code> and <code>answer[1] == arr[j]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3,5], k = 3\n<strong>Output:</strong> [2,5]\n<strong>Explanation:</strong> The fractions to be considered in sorted order are:\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\nThe third fraction is 2/5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,7], k = 1\n<strong>Output:</strong> [1,7]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>arr[0] == 1</code></li>\n\t<li><code>arr[i]</code> is a <strong>prime</strong> number for <code>i &gt; 0</code>.</li>\n\t<li>All the numbers of <code>arr</code> are <strong>unique</strong> and sorted in <strong>strictly increasing</strong> order.</li>\n\t<li><code>1 &lt;= k &lt;= arr.length * (arr.length - 1) / 2</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Can you solve the problem with better than <code>O(n<sup>2</sup>)</code> complexity?",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1227,
            "dislikes": 51,
            "similarQuestions": "[{\"title\": \"Kth Smallest Element in a Sorted Matrix\", \"titleSlug\": \"kth-smallest-element-in-a-sorted-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Number in Multiplication Table\", \"titleSlug\": \"kth-smallest-number-in-multiplication-table\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find K-th Smallest Pair Distance\", \"titleSlug\": \"find-k-th-smallest-pair-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"40.2K\", \"totalSubmission\": \"75.4K\", \"totalAcceptedRaw\": 40186, \"totalSubmissionRaw\": 75445, \"acRate\": \"53.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a sorted integer array `arr` containing 1 and prime numbers (all unique), and an integer `k`, find the k-th smallest fraction formed by `arr[i] / arr[j]` where `0 <= i < j < arr.length`. Return the fraction as an array of two integers: `[arr[i], arr[j]]`.",
                "constraints": [
                    "2 <= arr.length <= 1000",
                    "1 <= arr[i] <= 3 * 10^4",
                    "arr[0] == 1",
                    "arr[i] is a prime number for i > 0.",
                    "All numbers in arr are unique and strictly increasing.",
                    "1 <= k <= arr.length * (arr.length - 1) / 2"
                ],
                "testcases": [
                    {
                        "input": {
                            "arr": [
                                1,
                                2,
                                3,
                                5
                            ],
                            "k": 3
                        },
                        "output": [
                            2,
                            5
                        ],
                        "explanation": "The fractions in sorted order are: 1/5, 1/3, 2/5, 1/2, 3/5, and 2/3. The third smallest fraction is 2/5."
                    },
                    {
                        "input": {
                            "arr": [
                                1,
                                7
                            ],
                            "k": 1
                        },
                        "output": [
                            1,
                            7
                        ],
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
                "title": "Kth Smallest Element in a Sorted Matrix",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "kth-smallest-number-in-multiplication-table",
                "title": "Kth Smallest Number in Multiplication Table",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-k-th-smallest-pair-distance",
                "title": "Find K-th Smallest Pair Distance",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {\n    const int n = arr.size();\n    double l = 0.0;\n    double r = 1.0;\n\n    while (l < r) {\n      const double m = (l + r) / 2.0;\n      int fractionsNoGreaterThanM = 0;\n      int p = 0;\n      int q = 1;\n\n      // For each index i, find the first index j s.t. arr[i] / arr[j] <= m,\n      // So fractionsNoGreaterThanM for index i will be n - j\n      for (int i = 0, j = 1; i < n; ++i) {\n        while (j < n && arr[i] > m * arr[j])\n          ++j;\n        if (j == n)\n          break;\n        fractionsNoGreaterThanM += n - j;\n        if (p * arr[j] < q * arr[i]) {\n          p = arr[i];\n          q = arr[j];\n        }\n      }\n\n      if (fractionsNoGreaterThanM == k)\n        return {p, q};\n      if (fractionsNoGreaterThanM > k)\n        r = m;\n      else\n        l = m;\n    }\n\n    throw;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] kthSmallestPrimeFraction(int[] arr, int k) {\n    final int n = arr.length;\n    double l = 0.0;\n    double r = 1.0;\n\n    while (l < r) {\n      final double m = (l + r) / 2.0;\n      int fractionsNoGreaterThanM = 0;\n      int p = 0;\n      int q = 1;\n\n      // For each index i, find the first index j s.t. arr[i] / arr[j] <= m,\n      // So fractionsNoGreaterThanM for index i will be n - j\n      for (int i = 0, j = 1; i < n; ++i) {\n        while (j < n && arr[i] > m * arr[j])\n          ++j;\n        if (j == n)\n          break;\n        fractionsNoGreaterThanM += n - j;\n        if (p * arr[j] < q * arr[i]) {\n          p = arr[i];\n          q = arr[j];\n        }\n      }\n\n      if (fractionsNoGreaterThanM == k)\n        return new int[] {p, q};\n      if (fractionsNoGreaterThanM > k)\n        r = m;\n      else\n        l = m;\n    }\n\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:\n    n = len(arr)\n    ans = [0, 1]\n    l = 0\n    r = 1\n\n    while True:\n      m = (l + r) / 2\n      ans[0] = 0\n      count = 0\n      j = 1\n\n      for i in range(n):\n        while j < n and arr[i] > m * arr[j]:\n          j += 1\n        count += n - j\n        if j == n:\n          break\n        if ans[0] * arr[j] < ans[1] * arr[i]:\n          ans[0] = arr[i]\n          ans[1] = arr[j]\n\n      if count < k:\n        l = m\n      elif count > k:\n        r = m\n      else:\n        return ans\n",
                "lang_text": "py"
            }
        }
    }
}