{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "500",
            "title": "Keyboard Row",
            "titleSlug": "keyboard-row",
            "content": "<p>Given an array of strings <code>words</code>, return <em>the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below</em>.</p>\n\n<p>In the <strong>American keyboard</strong>:</p>\n\n<ul>\n\t<li>the first row consists of the characters <code>&quot;qwertyuiop&quot;</code>,</li>\n\t<li>the second row consists of the characters <code>&quot;asdfghjkl&quot;</code>, and</li>\n\t<li>the third row consists of the characters <code>&quot;zxcvbnm&quot;</code>.</li>\n</ul>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/10/12/keyboard.png\" style=\"width: 800px; max-width: 600px; height: 267px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;Hello&quot;,&quot;Alaska&quot;,&quot;Dad&quot;,&quot;Peace&quot;]\n<strong>Output:</strong> [&quot;Alaska&quot;,&quot;Dad&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;omk&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;adsdf&quot;,&quot;sfd&quot;]\n<strong>Output:</strong> [&quot;adsdf&quot;,&quot;sfd&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 100</code></li>\n\t<li><code>words[i]</code> consists of English letters (both lowercase and uppercase).&nbsp;</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1521,
            "dislikes": 1112,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"210K\", \"totalSubmission\": \"298.7K\", \"totalAcceptedRaw\": 209987, \"totalSubmissionRaw\": 298725, \"acRate\": \"70.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of strings `words`, return the words that can be typed using letters of the alphabet on only one row of an American keyboard. The keyboard rows are defined as follows:\n\n*   First row: `qwertyuiop`\n*   Second row: `asdfghjkl`\n*   Third row: `zxcvbnm`",
                "constraints": [
                    "1 <= words.length <= 20",
                    "1 <= words[i].length <= 100",
                    "words[i] consists of English letters (both lowercase and uppercase)."
                ],
                "testcases": [
                    {
                        "input": "[\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]",
                        "output": "[\"Alaska\",\"Dad\"]",
                        "explanation": null
                    },
                    {
                        "input": "[\"omk\"]",
                        "output": "[]",
                        "explanation": null
                    },
                    {
                        "input": "[\"adsdf\",\"sfd\"]",
                        "output": "[\"adsdf\",\"sfd\"]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> findWords(vector<string>& words) {\n    vector<string> ans;\n    const vector<int> rows{2, 3, 3, 2, 1, 2, 2, 2, 1, 2, 2, 2, 3,\n                           3, 1, 1, 1, 1, 2, 1, 1, 3, 1, 3, 1, 3};\n\n    for (const string& word : words) {\n      string lowerWord = word;\n      transform(lowerWord.begin(), lowerWord.end(), lowerWord.begin(),\n                ::tolower);\n      const int row = rows[lowerWord[0] - 'a'];\n      const bool isValid = all_of(lowerWord.begin(), lowerWord.end(),\n                                  [&](int c) { return rows[c - 'a'] == row; });\n      if (isValid)\n        ans.push_back(word);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String[] findWords(String[] words) {\n    List<String> ans = new ArrayList<>();\n    final int[] rows = {2, 3, 3, 2, 1, 2, 2, 2, 1, 2, 2, 2, 3,\n                        3, 1, 1, 1, 1, 2, 1, 1, 3, 1, 3, 1, 3};\n\n    for (final String word : words) {\n      final String lowerWord = word.toLowerCase();\n      final int row = rows[lowerWord.charAt(0) - 'a'];\n      final boolean isValid = lowerWord.chars().allMatch(c -> rows[c - 'a'] == row);\n      if (isValid)\n        ans.add(word);\n    }\n\n    return ans.toArray(new String[0]);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findWords(self, words: List[str]) -> List[str]:\n    ans = []\n    rows = [set('qwertyuiop'), set('asdfghjkl'), set('zxcvbnm')]\n\n    for word in words:\n      lowerWord = set(word.lower())\n      if any(lowerWord <= row for row in rows):\n        ans.append(word)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}