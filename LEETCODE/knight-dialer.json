{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "935",
            "title": "Knight Dialer",
            "titleSlug": "knight-dialer",
            "content": "<p>The chess knight has a <strong>unique movement</strong>,&nbsp;it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an <strong>L</strong>). The possible movements of chess knight are shown in this diagaram:</p>\n\n<p>A chess knight can move as indicated in the chess diagram below:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/18/chess.jpg\" style=\"width: 402px; height: 402px;\" />\n<p>We have a chess knight and a phone pad as shown below, the knight <strong>can only stand on a numeric cell</strong>&nbsp;(i.e. blue cell).</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/18/phone.jpg\" style=\"width: 242px; height: 322px;\" />\n<p>Given an integer <code>n</code>, return how many distinct phone numbers of length <code>n</code> we can dial.</p>\n\n<p>You are allowed to place the knight <strong>on any numeric cell</strong> initially and then you should perform <code>n - 1</code> jumps to dial a number of length <code>n</code>. All jumps should be <strong>valid</strong> knight jumps.</p>\n\n<p>As the answer may be very large, <strong>return the answer modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3131\n<strong>Output:</strong> 136006598\n<strong>Explanation:</strong> Please take care of the mod.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 5000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2927,
            "dislikes": 440,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"165K\", \"totalSubmission\": \"276.6K\", \"totalAcceptedRaw\": 165021, \"totalSubmissionRaw\": 276630, \"acRate\": \"59.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "A chess knight moves in an 'L' shape: two squares in one direction (horizontally or vertically) and one square in a perpendicular direction.  Given a standard phone keypad (as shown in the problem description, but keypad image is not included in this JSON representation) and an integer `n`, determine the number of distinct phone numbers of length `n` that can be dialed by a knight, starting from any digit on the keypad and making valid knight moves for each jump.  You are allowed to start the knight on any numeric cell and perform `n - 1` jumps. Return the answer modulo `10^9 + 7`.",
                "constraints": [
                    "1 <= n <= 5000"
                ],
                "testcases": [
                    {
                        "input": "n = 1",
                        "output": "10",
                        "explanation": "Since we need a number of length 1, placing the knight on any of the 10 numeric cells is sufficient."
                    },
                    {
                        "input": "n = 2",
                        "output": "20",
                        "explanation": "The valid numbers are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]"
                    },
                    {
                        "input": "n = 3131",
                        "output": "136006598",
                        "explanation": "The answer should be taken modulo 10^9 + 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int knightDialer(int n) {\n    constexpr int kMod = 1'000'000'007;\n    const vector<pair<int, int>> dirs = {{-2, 1}, {-1, 2}, {1, 2},   {2, 1},\n                                         {2, -1}, {1, -2}, {-1, -2}, {-2, -1}};\n\n    // dp[i][j] := # of ways to stand on (i, j)\n    vector<vector<int>> dp(4, vector<int>(3, 1));\n    dp[3][0] = dp[3][2] = 0;\n\n    for (int k = 0; k < n - 1; ++k) {\n      vector<vector<int>> newDp(4, vector<int>(3));\n      for (int i = 0; i < 4; ++i)\n        for (int j = 0; j < 3; ++j) {\n          if (isNotNumericCell(i, j))\n            continue;\n          for (const auto& [dx, dy] : dirs) {\n            const int x = i + dx;\n            const int y = j + dy;\n            if (x < 0 || x >= 4 || y < 0 || y >= 3)\n              continue;\n            if (isNotNumericCell(x, y))\n              continue;\n            newDp[i][j] = (newDp[i][j] + dp[x][y]) % kMod;\n          }\n        }\n      dp = move(newDp);\n    }\n\n    int ans = 0;\n\n    for (const vector<int>& row : dp)\n      for (const int a : row)\n        ans = (ans + a) % kMod;\n\n    return ans;\n  }\n\n private:\n  bool isNotNumericCell(int i, int j) {\n    return i == 3 && (j == 0 || j == 2);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int knightDialer(int n) {\n    final int kMod = 1_000_000_007;\n    final int[][] dirs = {{-2, 1}, {-1, 2}, {1, 2}, {2, 1}, {2, -1}, {1, -2}, {-1, -2}, {-2, -1}};\n    // dp[i][j] := # of ways to stand on (i, j)\n    int[][] dp = new int[4][3];\n    Arrays.stream(dp).forEach(row -> Arrays.fill(row, 1));\n    dp[3][0] = dp[3][2] = 0;\n\n    for (int k = 0; k < n - 1; ++k) {\n      int[][] newDp = new int[4][3];\n      for (int i = 0; i < 4; ++i)\n        for (int j = 0; j < 3; ++j) {\n          if (isNotNumericCell(i, j))\n            continue;\n          for (int[] dir : dirs) {\n            final int x = i + dir[0];\n            final int y = j + dir[1];\n            if (x < 0 || x >= 4 || y < 0 || y >= 3)\n              continue;\n            if (isNotNumericCell(x, y))\n              continue;\n            newDp[i][j] = (newDp[i][j] + dp[x][y]) % kMod;\n          }\n        }\n      dp = newDp;\n    }\n\n    int ans = 0;\n\n    for (int[] row : dp)\n      for (final int a : row)\n        ans = (ans + a) % kMod;\n\n    return ans;\n  }\n\n  private boolean isNotNumericCell(int i, int j) {\n    return i == 3 && (j == 0 || j == 2);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def knightDialer(self, n: int) -> int:\n    kMod = 1_000_000_007\n    dirs = [(-2, 1), (-1, 2), (1, 2), (2, 1),\n            (2, -1), (1, -2), (-1, -2), (-2, -1)]\n\n    # dp[i][j] := # of ways stand on (i, j)\n    dp = [[1] * 3 for _ in range(4)]\n    dp[3][0] = dp[3][2] = 0\n\n    for _ in range(n - 1):\n      newDp = [[0] * 3 for _ in range(4)]\n      for i in range(4):\n        for j in range(3):\n          if (i, j) in ((3, 0), (3, 2)):\n            continue\n          for dx, dy in dirs:\n            x = i + dx\n            y = j + dy\n            if x < 0 or x >= 4 or y < 0 or y >= 3:\n              continue\n            if (x, y) in ((3, 0), (3, 2)):\n              continue\n            newDp[x][y] = (newDp[x][y] + dp[i][j]) % kMod\n      dp = newDp\n\n    return sum(map(sum, dp)) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}