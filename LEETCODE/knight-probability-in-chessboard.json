{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "688",
            "title": "Knight Probability in Chessboard",
            "titleSlug": "knight-probability-in-chessboard",
            "content": "<p>On an <code>n x n</code> chessboard, a knight starts at the cell <code>(row, column)</code> and attempts to make exactly <code>k</code> moves. The rows and columns are <strong>0-indexed</strong>, so the top-left cell is <code>(0, 0)</code>, and the bottom-right cell is <code>(n - 1, n - 1)</code>.</p>\n\n<p>A chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.</p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/knight.png\" style=\"width: 300px; height: 300px;\" />\n<p>Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.</p>\n\n<p>The knight continues moving until it has made exactly <code>k</code> moves or has moved off the chessboard.</p>\n\n<p>Return <em>the probability that the knight remains on the board after it has stopped moving</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 2, row = 0, column = 0\n<strong>Output:</strong> 0.06250\n<strong>Explanation:</strong> There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\nFrom each of those positions, there are also two moves that will keep the knight on the board.\nThe total probability the knight stays on the board is 0.0625.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 0, row = 0, column = 0\n<strong>Output:</strong> 1.00000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 25</code></li>\n\t<li><code>0 &lt;= k &lt;= 100</code></li>\n\t<li><code>0 &lt;= row, column &lt;= n - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3738,
            "dislikes": 452,
            "similarQuestions": "[{\"title\": \"Out of Boundary Paths\", \"titleSlug\": \"out-of-boundary-paths\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"148.7K\", \"totalSubmission\": \"264.7K\", \"totalAcceptedRaw\": 148671, \"totalSubmissionRaw\": 264705, \"acRate\": \"56.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "A knight is placed on an `n x n` chessboard at cell `(row, column)`. The knight attempts to make exactly `k` moves.  The chessboard is 0-indexed.  The knight moves according to the standard chess knight rules: two cells in a cardinal direction, then one cell in an orthogonal direction.  Each move is chosen uniformly at random from the eight possible moves, regardless of whether the move takes the knight off the board. The knight stops moving after `k` moves or when it moves off the board. Determine the probability that the knight remains on the board after making all `k` moves.",
                "constraints": [
                    "1 <= n <= 25",
                    "0 <= k <= 100",
                    "0 <= row, column <= n - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 3, k = 2, row = 0, column = 0",
                        "output": "0.06250",
                        "explanation": "Starting at (0,0) with 2 moves. There are two moves ((1,2), (2,1)) that will keep the knight on the board. From each of those positions, there are also two moves that will keep the knight on the board.  Therefore, the probability the knight stays on the board is 0.0625."
                    },
                    {
                        "input": "n = 1, k = 0, row = 0, column = 0",
                        "output": "1.00000",
                        "explanation": "Since k = 0, the knight does not make any moves. It starts on the board, therefore it remains on the board with probability 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "out-of-boundary-paths",
                "title": "Out of Boundary Paths",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  double knightProbability(int n, int K, int r, int c) {\n    constexpr double kProb = 0.125;\n    const vector<pair<int, int>> dirs{{-2, 1}, {-1, 2}, {1, 2},   {2, 1},\n                                      {2, -1}, {1, -2}, {-1, -2}, {-2, -1}};\n\n    // dp[i][j] := probability to stand on (i, j)\n    vector<vector<double>> dp(n, vector<double>(n));\n    dp[r][c] = 1.0;\n\n    for (int k = 0; k < K; ++k) {\n      vector<vector<double>> newDp(n, vector<double>(n));\n      for (int i = 0; i < n; ++i)\n        for (int j = 0; j < n; ++j)\n          if (dp[i][j] > 0.0) {\n            for (const auto& [dx, dy] : dirs) {\n              const int x = i + dx;\n              const int y = j + dy;\n              if (x < 0 || x >= n || y < 0 || y >= n)\n                continue;\n              newDp[x][y] += dp[i][j] * kProb;\n            }\n          }\n      dp = move(newDp);\n    }\n\n    return accumulate(dp.begin(), dp.end(), 0.0,\n                      [](double s, const vector<double>& row) {\n      return s + accumulate(row.begin(), row.end(), 0.0);\n    });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public double knightProbability(int n, int K, int r, int c) {\n    final double kProb = 0.125;\n    final int[][] dirs = {{-2, 1}, {-1, 2}, {1, 2}, {2, 1}, {2, -1}, {1, -2}, {-1, -2}, {-2, -1}};\n\n    // dp[i][j] := probability to stand on (i, j)\n    double[][] dp = new double[n][n];\n    dp[r][c] = 1.0;\n\n    for (int k = 0; k < K; ++k) {\n      double[][] newDp = new double[n][n];\n      for (int i = 0; i < n; ++i)\n        for (int j = 0; j < n; ++j)\n          if (dp[i][j] > 0.0) {\n            for (int[] dir : dirs) {\n              final int x = i + dir[0];\n              final int y = j + dir[1];\n              if (x < 0 || x >= n || y < 0 || y >= n)\n                continue;\n              newDp[x][y] += dp[i][j] * kProb;\n            }\n          }\n      dp = newDp;\n    }\n\n    double ans = 0.0;\n    for (double[] row : dp)\n      ans += Arrays.stream(row).sum();\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def knightProbability(self, n: int, K: int, r: int, c: int) -> float:\n    dirs = [(1, 2), (2, 1), (2, -1), (1, -2),\n            (-1, -2), (-2, -1), (-2, 1), (-1, 2)]\n\n    # dp[i][j] := probability to stand on (i, j)\n    dp = [[0] * n for _ in range(n)]\n    dp[r][c] = 1\n\n    for _ in range(K):\n      newDp = [[0] * n for _ in range(n)]\n      for i in range(n):\n        for j in range(n):\n          for dx, dy in dirs:\n            x = i + dx\n            y = j + dy\n            if 0 <= x < n and 0 <= y < n:\n              newDp[i][j] += dp[x][y]\n      dp = newDp\n\n    return sum(map(sum, dp)) / 8**K\n",
                "lang_text": "py"
            }
        }
    }
}