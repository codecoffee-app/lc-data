{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2583",
            "title": "Kth Largest Sum in a Binary Tree",
            "titleSlug": "kth-largest-sum-in-a-binary-tree",
            "content": "<p>You are given the <code>root</code> of a binary tree and a positive integer <code>k</code>.</p>\n\n<p>The <strong>level sum</strong> in the tree is the sum of the values of the nodes that are on the <strong>same</strong> level.</p>\n\n<p>Return<em> the </em><code>k<sup>th</sup></code><em> <strong>largest</strong> level sum in the tree (not necessarily distinct)</em>. If there are fewer than <code>k</code> levels in the tree, return <code>-1</code>.</p>\n\n<p><strong>Note</strong> that two nodes are on the same level if they have the same distance from the root.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/14/binaryytreeedrawio-2.png\" style=\"width: 301px; height: 284px;\" />\n<pre>\n<strong>Input:</strong> root = [5,8,9,2,1,3,7,4,6], k = 2\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> The level sums are the following:\n- Level 1: 5.\n- Level 2: 8 + 9 = 17.\n- Level 3: 2 + 1 + 3 + 7 = 13.\n- Level 4: 4 + 6 = 10.\nThe 2<sup>nd</sup> largest level sum is 13.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/14/treedrawio-3.png\" style=\"width: 181px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,null,3], k = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The largest level sum is 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is <code>n</code>.</li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 500,
            "dislikes": 15,
            "similarQuestions": "[{\"title\": \"Binary Tree Preorder Traversal\", \"titleSlug\": \"binary-tree-preorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Level Sum of a Binary Tree\", \"titleSlug\": \"maximum-level-sum-of-a-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"31.5K\", \"totalSubmission\": \"67K\", \"totalAcceptedRaw\": 31492, \"totalSubmissionRaw\": 67006, \"acRate\": \"47.0%\"}",
            "hints": [
                "Find the sum of values of nodes on each level and return the kth largest one.",
                "To find the sum of the values of nodes on each level, you can use a DFS or BFS algorithm to traverse the tree and keep track of the level of each node."
            ],
            "rephrased": {
                "body": "Given the root of a binary tree and a positive integer k, find the kth largest level sum in the tree. The level sum is defined as the sum of the values of all nodes at the same level (distance from the root). If there are fewer than k levels in the tree, return -1.",
                "constraints": [
                    "The number of nodes in the tree is n.",
                    "2 <= n <= 10^5",
                    "1 <= Node.val <= 10^6",
                    "1 <= k <= n"
                ],
                "testcases": [
                    {
                        "input": "root = [5,8,9,2,1,3,7,4,6], k = 2",
                        "output": "13",
                        "explanation": "The level sums are: Level 1: 5, Level 2: 8 + 9 = 17, Level 3: 2 + 1 + 3 + 7 = 13, Level 4: 4 + 6 = 10. The 2nd largest level sum is 13."
                    },
                    {
                        "input": "root = [1,2,null,3], k = 1",
                        "output": "3",
                        "explanation": "The largest level sum is 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "binary-tree-preorder-traversal",
                "title": "Binary Tree Preorder Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-level-sum-of-a-binary-tree",
                "title": "Maximum Level Sum of a Binary Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Find the sum of values of nodes on each level and return the kth largest one.",
            "To find the sum of the values of nodes on each level, you can use a DFS or BFS algorithm to traverse the tree and keep track of the level of each node."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long kthLargestLevelSum(TreeNode* root, int k) {\n    vector<long long> levelSums;\n    dfs(root, 0, levelSums);\n    if (levelSums.size() < k)\n      return -1;\n\n    nth_element(levelSums.begin(), levelSums.begin() + k - 1, levelSums.end(),\n                greater<>());\n    return levelSums[k - 1];\n  }\n\n private:\n  void dfs(TreeNode* root, int level, vector<long long>& levelSums) {\n    if (root == nullptr)\n      return;\n    if (levelSums.size() == level)\n      levelSums.push_back(0);\n    levelSums[level] += root->val;\n    dfs(root->left, level + 1, levelSums);\n    dfs(root->right, level + 1, levelSums);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long kthLargestLevelSum(TreeNode root, int k) {\n    List<Long> levelSums = new ArrayList<>();\n    dfs(root, 0, levelSums);\n    if (levelSums.size() < k)\n      return -1;\n\n    Collections.sort(levelSums, Collections.reverseOrder());\n    return levelSums.get(k - 1);\n  }\n\n  private void dfs(TreeNode root, int level, List<Long> levelSums) {\n    if (root == null)\n      return;\n    if (levelSums.size() == level)\n      levelSums.add(0L);\n    levelSums.set(level, levelSums.get(level) + root.val);\n    dfs(root.left, level + 1, levelSums);\n    dfs(root.right, level + 1, levelSums);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def kthLargestLevelSum(self, root: Optional[TreeNode], k: int) -> int:\n    levelSums = []\n\n    def dfs(root: Optional[TreeNode], level: int) -> None:\n      if not root:\n        return\n      if len(levelSums) == level:\n        levelSums.append(0)\n      levelSums[level] += root.val\n      dfs(root.left, level + 1)\n      dfs(root.right, level + 1)\n\n    dfs(root, 0)\n    if len(levelSums) < k:\n      return -1\n\n    return sorted(levelSums, reverse=True)[k - 1]\n",
                "lang_text": "py"
            }
        }
    }
}