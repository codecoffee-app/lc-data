{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3116",
            "title": "Kth Smallest Amount With Single Denomination Combination",
            "titleSlug": "kth-smallest-amount-with-single-denomination-combination",
            "content": "<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>k</code>.</p>\n\n<p>You have an infinite number of coins of each denomination. However, you are <strong>not allowed</strong> to combine coins of different denominations.</p>\n\n<p>Return the <code>k<sup>th</sup></code> <strong>smallest</strong> amount that can be made using these coins.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">coins = [3,6,9], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> 9</span></p>\n\n<p><strong>Explanation:</strong> The given coins can make the following amounts:<br />\nCoin 3 produces multiples of 3: 3, 6, 9, 12, 15, etc.<br />\nCoin 6 produces multiples of 6: 6, 12, 18, 24, etc.<br />\nCoin 9 produces multiples of 9: 9, 18, 27, 36, etc.<br />\nAll of the coins combined produce: 3, 6, <u><strong>9</strong></u>, 12, 15, etc.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> coins = [5,2], k = 7</span></p>\n\n<p><strong>Output:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> 12 </span></p>\n\n<p><strong>Explanation:</strong> The given coins can make the following amounts:<br />\nCoin 5 produces multiples of 5: 5, 10, 15, 20, etc.<br />\nCoin 2 produces multiples of 2: 2, 4, 6, 8, 10, 12, etc.<br />\nAll of the coins combined produce: 2, 4, 5, 6, 8, 10, <u><strong>12</strong></u>, 14, 15, etc.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= coins.length &lt;= 15</code></li>\n\t<li><code>1 &lt;= coins[i] &lt;= 25</code></li>\n\t<li><code>1 &lt;= k &lt;= 2 * 10<sup>9</sup></code></li>\n\t<li><code>coins</code> contains pairwise distinct integers.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 204,
            "dislikes": 18,
            "similarQuestions": "[{\"title\": \"Kth Smallest Number in Multiplication Table\", \"titleSlug\": \"kth-smallest-number-in-multiplication-table\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.5K\", \"totalSubmission\": \"46.2K\", \"totalAcceptedRaw\": 7453, \"totalSubmissionRaw\": 46223, \"acRate\": \"16.1%\"}",
            "hints": [
                "Binary search the answer <code>x</code>.",
                "Use the inclusion-exclusion principle to count the number of distinct amounts that can be made up to <code>x</code>."
            ],
            "rephrased": {
                "body": "Given an array `coins` representing different coin denominations and an integer `k`, find the k-th smallest amount that can be made using these coins. You have an infinite number of coins for each denomination, but you are NOT allowed to combine coins of different denominations.",
                "constraints": [
                    "1 <= coins.length <= 15",
                    "1 <= coins[i] <= 25",
                    "1 <= k <= 2 * 10^9",
                    "coins contains pairwise distinct integers."
                ],
                "testcases": [
                    {
                        "input": "coins = [3,6,9], k = 3",
                        "output": "9",
                        "explanation": "The possible amounts formed by each coin are:\nCoin 3: 3, 6, 9, 12, 15...\nCoin 6: 6, 12, 18, 24...\nCoin 9: 9, 18, 27, 36...\nCombining all amounts and sorting them, the 3rd smallest amount is 9."
                    },
                    {
                        "input": "coins = [5,2], k = 7",
                        "output": "12",
                        "explanation": "The possible amounts formed by each coin are:\nCoin 5: 5, 10, 15, 20...\nCoin 2: 2, 4, 6, 8, 10, 12...\nCombining all amounts and sorting them, the 7th smallest amount is 12."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "kth-smallest-number-in-multiplication-table",
                "title": "Kth Smallest Number in Multiplication Table",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Binary search the answer <code>x</code>.",
            "Use the inclusion-exclusion principle to count the number of distinct amounts that can be made up to <code>x</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long findKthSmallest(vector<int>& coins, int k) {\n    const vector<vector<long long>> sizeToLcms = getSizeToLcms(coins);\n    long long l = 0;\n    long long r = 1LL * k * ranges::min(coins);\n\n    while (l < r) {\n      const long long m = (l + r) / 2;\n      if (numDenominationsNoGreaterThan(sizeToLcms, m) >= k)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n private:\n  // Returns the number of denominations <= m.\n  long long numDenominationsNoGreaterThan(\n      const vector<vector<long long>>& sizeToLcms, long long m) {\n    long long res = 0;\n    for (int sz = 1; sz < sizeToLcms.size(); ++sz)\n      for (const long long lcm : sizeToLcms[sz])\n        // Principle of Inclusion-Exclusion (PIE)\n        res += m / lcm * pow(-1, sz + 1);\n    return res;\n  };\n\n  // Returns the LCMs for each number of combination of coins.\n  vector<vector<long long>> getSizeToLcms(const vector<int>& coins) {\n    const int n = coins.size();\n    const int maxMask = 1 << n;\n    vector<vector<long long>> sizeToLcms(n + 1);\n\n    for (int mask = 1; mask < maxMask; ++mask) {\n      long long lcmOfSelectedCoins = 1;\n      for (int i = 0; i < n; ++i)\n        if (mask >> i & 1)\n          lcmOfSelectedCoins = lcm(lcmOfSelectedCoins, coins[i]);\n      sizeToLcms[__builtin_popcount(mask)].push_back(lcmOfSelectedCoins);\n    }\n\n    return sizeToLcms;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long findKthSmallest(int[] coins, int k) {\n    List<Long>[] sizeToLcms = getSizeToLcms(coins);\n    long l = 0;\n    long r = (long) k * Arrays.stream(coins).min().getAsInt();\n\n    while (l < r) {\n      final long m = (l + r) / 2;\n      if (numDenominationsNoGreaterThan(sizeToLcms, m) >= k)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n  // Returns the number of denominations <= m.\n  private long numDenominationsNoGreaterThan(List<Long>[] sizeToLcms, long m) {\n    long res = 0;\n    for (int sz = 1; sz < sizeToLcms.length; ++sz)\n      for (long lcm : sizeToLcms[sz])\n        res += m / lcm * Math.pow(-1, sz + 1);\n    return res;\n  }\n\n  // Returns the LCMs for each number of combination of coins.\n  private List<Long>[] getSizeToLcms(int[] coins) {\n    final int n = coins.length;\n    final int maxMask = 1 << n;\n    List<Long>[] sizeToLcms = new List[n + 1];\n\n    for (int i = 1; i <= n; ++i)\n      sizeToLcms[i] = new ArrayList<>();\n\n    for (int mask = 1; mask < maxMask; ++mask) {\n      long lcmOfSelectedCoins = 1;\n      for (int i = 0; i < n; ++i)\n        if ((mask >> i & 1) == 1)\n          lcmOfSelectedCoins = lcm(lcmOfSelectedCoins, coins[i]);\n      sizeToLcms[Integer.bitCount(mask)].add(lcmOfSelectedCoins);\n    }\n\n    return sizeToLcms;\n  }\n\n  private long lcm(long a, long b) {\n    return a * b / gcd(a, b);\n  }\n\n  private long gcd(long a, long b) {\n    return b == 0 ? a : gcd(b, a % b);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findKthSmallest(self, coins: List[int], k: int) -> int:\n    sizeToLcms = self._getSizeToLcms(coins)\n\n    def count(m: int) -> int:\n      \"\"\"Returns the number of denominations <= m.\"\"\"\n      res = 0\n      for sz, lcms in enumerate(sizeToLcms):\n        for lcm in lcms:\n          # Principle of Inclusion-Exclusion (PIE)\n          res += m // lcm * pow(-1, sz + 1)\n      return res\n\n    return bisect.bisect_left(range(0, k * min(coins)), k,\n                              key=lambda m: count(m))\n\n  def _getSizeToLcms(self, coins: List[int]) -> List[List[int]]:\n    # Returns the LCMs for each number of combination of coins.\n    sizeToLcms = [[] for _ in range(len(coins) + 1)]\n    for sz in range(1, len(coins) + 1):\n      for combination in itertools.combinations(coins, sz):\n        sizeToLcms[sz].append(math.lcm(*combination))\n    return sizeToLcms\n",
                "lang_text": "py"
            }
        }
    }
}