{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "230",
            "title": "Kth Smallest Element in a BST",
            "titleSlug": "kth-smallest-element-in-a-bst",
            "content": "<p>Given the <code>root</code> of a binary search tree, and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>smallest value (<strong>1-indexed</strong>) of all the values of the nodes in the tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg\" style=\"width: 212px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [3,1,4,null,2], k = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg\" style=\"width: 382px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,null,1], k = 3\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is <code>n</code>.</li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10978,
            "dislikes": 212,
            "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Second Minimum Node In a Binary Tree\", \"titleSlug\": \"second-minimum-node-in-a-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 1288821, \"totalSubmissionRaw\": 1795481, \"acRate\": \"71.8%\"}",
            "hints": [
                "Try to utilize the property of a BST.",
                "Try in-order traversal. (Credits to @chan13)",
                "What if you could modify the BST node's structure?",
                "The optimal runtime complexity is O(height of BST)."
            ],
            "rephrased": {
                "body": "Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.",
                "constraints": [
                    "The number of nodes in the tree is n.",
                    "1 <= k <= n <= 10^4",
                    "0 <= Node.val <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "root = [3,1,4,null,2], k = 1",
                        "output": "1",
                        "explanation": "The 1st smallest element in the tree [3,1,4,null,2] is 1."
                    },
                    {
                        "input": "root = [5,3,6,2,4,null,null,1], k = 3",
                        "output": "3",
                        "explanation": "The 3rd smallest element in the tree [5,3,6,2,4,null,null,1] is 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "binary-tree-inorder-traversal",
                "title": "Binary Tree Inorder Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "second-minimum-node-in-a-binary-tree",
                "title": "Second Minimum Node In a Binary Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try to utilize the property of a BST.",
            "Try in-order traversal. (Credits to @chan13)",
            "What if you could modify the BST node's structure?",
            "The optimal runtime complexity is O(height of BST)."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int kthSmallest(TreeNode* root, int k) {\n    const int leftCount = countNodes(root->left);\n\n    if (leftCount == k - 1)\n      return root->val;\n    if (leftCount >= k)\n      return kthSmallest(root->left, k);\n    return kthSmallest(root->right, k - 1 - leftCount);  // LeftCount < k\n  }\n\n private:\n  int countNodes(TreeNode* root) {\n    if (root == nullptr)\n      return 0;\n    return 1 + countNodes(root->left) + countNodes(root->right);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int kthSmallest(TreeNode root, int k) {\n    final int leftCount = countNodes(root.left);\n\n    if (leftCount == k - 1)\n      return root.val;\n    if (leftCount >= k)\n      return kthSmallest(root.left, k);\n    return kthSmallest(root.right, k - 1 - leftCount); // LeftCount < k\n  }\n\n  private int countNodes(TreeNode root) {\n    if (root == null)\n      return 0;\n    return 1 + countNodes(root.left) + countNodes(root.right);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n    def countNodes(root: Optional[TreeNode]) -> int:\n      if not root:\n        return 0\n      return 1 + countNodes(root.left) + countNodes(root.right)\n\n    leftCount = countNodes(root.left)\n\n    if leftCount == k - 1:\n      return root.val\n    if leftCount >= k:\n      return self.kthSmallest(root.left, k)\n    return self.kthSmallest(root.right, k - 1 - leftCount)  # LeftCount < k\n",
                "lang_text": "py"
            }
        }
    }
}