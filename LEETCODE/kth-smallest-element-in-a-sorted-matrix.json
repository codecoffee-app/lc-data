{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "378",
            "title": "Kth Smallest Element in a Sorted Matrix",
            "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
            "content": "<p>Given an <code>n x n</code> <code>matrix</code> where each of the rows and columns is sorted in ascending order, return <em>the</em> <code>k<sup>th</sup></code> <em>smallest element in the matrix</em>.</p>\n\n<p>Note that it is the <code>k<sup>th</sup></code> smallest element <strong>in the sorted order</strong>, not the <code>k<sup>th</sup></code> <strong>distinct</strong> element.</p>\n\n<p>You must find a solution with a memory complexity better than <code>O(n<sup>2</sup>)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> The elements in the matrix are [1,5,9,10,11,12,13,<u><strong>13</strong></u>,15], and the 8<sup>th</sup> smallest number is 13\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[-5]], k = 1\n<strong>Output:</strong> -5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == matrix.length == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 300</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li>\n\t<li>All the rows and columns of <code>matrix</code> are <strong>guaranteed</strong> to be sorted in <strong>non-decreasing order</strong>.</li>\n\t<li><code>1 &lt;= k &lt;= n<sup>2</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Could you solve the problem with a constant memory (i.e., <code>O(1)</code> memory complexity)?</li>\n\t<li>Could you solve the problem in <code>O(n)</code> time complexity? The solution may be too advanced for an interview but you may find reading <a href=\"http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf\" target=\"_blank\">this paper</a> fun.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9638,
            "dislikes": 334,
            "similarQuestions": "[{\"title\": \"Find K Pairs with Smallest Sums\", \"titleSlug\": \"find-k-pairs-with-smallest-sums\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Number in Multiplication Table\", \"titleSlug\": \"kth-smallest-number-in-multiplication-table\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find K-th Smallest Pair Distance\", \"titleSlug\": \"find-k-th-smallest-pair-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"K-th Smallest Prime Fraction\", \"titleSlug\": \"k-th-smallest-prime-fraction\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"580.7K\", \"totalSubmission\": \"934K\", \"totalAcceptedRaw\": 580713, \"totalSubmissionRaw\": 934033, \"acRate\": \"62.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an n x n matrix where each row and column is sorted in ascending order, find the kth smallest element in the matrix. Note that this refers to the kth smallest element in sorted order, not the kth distinct element. Your solution must have a memory complexity better than O(n^2).",
                "constraints": [
                    "n == matrix.length == matrix[i].length",
                    "1 <= n <= 300",
                    "-10^9 <= matrix[i][j] <= 10^9",
                    "All rows and columns of the matrix are guaranteed to be sorted in non-decreasing order.",
                    "1 <= k <= n^2"
                ],
                "testcases": [
                    {
                        "input": "matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8",
                        "output": "13",
                        "explanation": "The elements in the matrix when sorted are [1, 5, 9, 10, 11, 12, 13, 13, 15]. The 8th smallest element is 13."
                    },
                    {
                        "input": "matrix = [[-5]], k = 1",
                        "output": "-5",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-k-pairs-with-smallest-sums",
                "title": "Find K Pairs with Smallest Sums",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "kth-smallest-number-in-multiplication-table",
                "title": "Kth Smallest Number in Multiplication Table",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-k-th-smallest-pair-distance",
                "title": "Find K-th Smallest Pair Distance",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "k-th-smallest-prime-fraction",
                "title": "K-th Smallest Prime Fraction",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  int i;\n  int j;\n  int num;  // matrix[i][j]\n  T(int i, int j, int num) : i(i), j(j), num(num) {}\n};\n\nclass Solution {\n public:\n  int kthSmallest(vector<vector<int>>& matrix, int k) {\n    auto compare = [&](const T& a, const T& b) { return a.num > b.num; };\n    priority_queue<T, vector<T>, decltype(compare)> minHeap(compare);\n\n    for (int i = 0; i < k && i < matrix.size(); ++i)\n      minHeap.emplace(i, 0, matrix[i][0]);\n\n    while (k-- > 1) {\n      const auto [i, j, _] = minHeap.top();\n      minHeap.pop();\n      if (j + 1 < matrix[0].size())\n        minHeap.emplace(i, j + 1, matrix[i][j + 1]);\n    }\n\n    return minHeap.top().num;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public int i;\n  public int j;\n  public int num; // matrix[i][j]\n  public T(int i, int j, int num) {\n    this.i = i;\n    this.j = j;\n    this.num = num;\n  }\n}\n\nclass Solution {\n  public int kthSmallest(int[][] matrix, int k) {\n    Queue<T> minHeap = new PriorityQueue<>((a, b) -> a.num - b.num);\n\n    for (int i = 0; i < k && i < matrix.length; ++i)\n      minHeap.offer(new T(i, 0, matrix[i][0]));\n\n    while (k-- > 1) {\n      final int i = minHeap.peek().i;\n      final int j = minHeap.poll().j;\n      if (j + 1 < matrix[0].length)\n        minHeap.offer(new T(i, j + 1, matrix[i][j + 1]));\n    }\n\n    return minHeap.peek().num;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n    minHeap = []  # (matrix[i][j], i, j)\n\n    i = 0\n    while i < k and i < len(matrix):\n      heapq.heappush(minHeap, (matrix[i][0], i, 0))\n      i += 1\n\n    while k > 1:\n      k -= 1\n      _, i, j = heapq.heappop(minHeap)\n      if j + 1 < len(matrix[0]):\n        heapq.heappush(minHeap, (matrix[i][j + 1], i, j + 1))\n\n    return minHeap[0][0]\n",
                "lang_text": "py"
            }
        }
    }
}