{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1643",
            "title": "Kth Smallest Instructions",
            "titleSlug": "kth-smallest-instructions",
            "content": "<p>Bob is standing at cell <code>(0, 0)</code>, and he wants to reach <code>destination</code>: <code>(row, column)</code>. He can only travel <strong>right</strong> and <strong>down</strong>. You are going to help Bob by providing <strong>instructions</strong> for him to reach <code>destination</code>.</p>\n\n<p>The <strong>instructions</strong> are represented as a string, where each character is either:</p>\n\n<ul>\n\t<li><code>&#39;H&#39;</code>, meaning move horizontally (go <strong>right</strong>), or</li>\n\t<li><code>&#39;V&#39;</code>, meaning move vertically (go <strong>down</strong>).</li>\n</ul>\n\n<p>Multiple <strong>instructions</strong> will lead Bob to <code>destination</code>. For example, if <code>destination</code> is <code>(2, 3)</code>, both <code>&quot;HHHVV&quot;</code> and <code>&quot;HVHVH&quot;</code> are valid <strong>instructions</strong>.</p>\n\n<p>However, Bob is very picky. Bob has a lucky number <code>k</code>, and he wants the <code>k<sup>th</sup></code> <strong>lexicographically smallest instructions</strong> that will lead him to <code>destination</code>. <code>k</code> is <strong>1-indexed</strong>.</p>\n\n<p>Given an integer array <code>destination</code> and an integer <code>k</code>, return <em>the </em><code>k<sup>th</sup></code><em> <strong>lexicographically smallest instructions</strong> that will take Bob to </em><code>destination</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/12/ex1.png\" style=\"width: 300px; height: 229px;\" /></p>\n\n<pre>\n<strong>Input:</strong> destination = [2,3], k = 1\n<strong>Output:</strong> &quot;HHHVV&quot;\n<strong>Explanation:</strong> All the instructions that reach (2, 3) in lexicographic order are as follows:\n[&quot;HHHVV&quot;, &quot;HHVHV&quot;, &quot;HHVVH&quot;, &quot;HVHHV&quot;, &quot;HVHVH&quot;, &quot;HVVHH&quot;, &quot;VHHHV&quot;, &quot;VHHVH&quot;, &quot;VHVHH&quot;, &quot;VVHHH&quot;].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/12/ex2.png\" style=\"width: 300px; height: 229px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> destination = [2,3], k = 2\n<strong>Output:</strong> &quot;HHVHV&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/12/ex3.png\" style=\"width: 300px; height: 229px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> destination = [2,3], k = 3\n<strong>Output:</strong> &quot;HHVVH&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>destination.length == 2</code></li>\n\t<li><code>1 &lt;= row, column &lt;= 15</code></li>\n\t<li><code>1 &lt;= k &lt;= nCr(row + column, row)</code>, where <code>nCr(a, b)</code> denotes <code>a</code> choose <code>b</code>\u200b\u200b\u200b\u200b\u200b.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 522,
            "dislikes": 12,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.6K\", \"totalSubmission\": \"24.3K\", \"totalAcceptedRaw\": 11594, \"totalSubmissionRaw\": 24342, \"acRate\": \"47.6%\"}",
            "hints": [
                "There are nCr(row + column, row) possible instructions to reach (row, column).",
                "Try building the instructions one step at a time. How many instructions start with \"H\", and how does this compare with k?"
            ],
            "rephrased": {
                "body": "Bob starts at (0, 0) and wants to reach the destination (row, column) by moving only right or down.  The instructions are a string composed of 'H' (horizontal/right) and 'V' (vertical/down).  Find the kth lexicographically smallest instruction sequence to reach the destination, where k is 1-indexed.",
                "constraints": [
                    "destination.length == 2",
                    "1 <= row, column <= 15",
                    "1 <= k <= nCr(row + column, row), where nCr(a, b) denotes a choose b."
                ],
                "testcases": [
                    {
                        "input": "destination = [2,3], k = 1",
                        "output": "\"HHHVV\"",
                        "explanation": "The lexicographically smallest instruction is \"HHHVV\"."
                    },
                    {
                        "input": "destination = [2,3], k = 2",
                        "output": "\"HHVHV\"",
                        "explanation": "The second lexicographically smallest instruction is \"HHVHV\"."
                    },
                    {
                        "input": "destination = [2,3], k = 3",
                        "output": "\"HHVVH\"",
                        "explanation": "The third lexicographically smallest instruction is \"HHVVH\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "There are nCr(row + column, row) possible instructions to reach (row, column).",
            "Try building the instructions one step at a time. How many instructions start with \"H\", and how does this compare with k?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string kthSmallestPath(vector<int>& destination, int k) {\n    string ans;\n    int v = destination[0];\n    int h = destination[1];\n    const int totalSteps = v + h;\n    const vector<vector<int>> comb = getComb(totalSteps - 1, v);\n\n    for (int i = 0; i < totalSteps; ++i) {\n      // If 'H' is picked, we can reach ranks [1, availableRank].\n      const int availableRank = comb[h + v - 1][v];\n      if (availableRank >= k) {  // Should pick 'H'.\n        ans += 'H';\n        --h;\n      } else {  // Should pick 'V'.\n        k -= availableRank;\n        ans += 'V';\n        --v;\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  // C(n, k) = C(n - 1, k) + C(n - 1, k - 1)\n  vector<vector<int>> getComb(int n, int k) {\n    vector<vector<int>> comb(n + 1, vector<int>(k + 1));\n    for (int i = 0; i <= n; ++i)\n      comb[i][0] = 1;\n    for (int i = 1; i <= n; ++i)\n      for (int j = 1; j <= k; ++j)\n        comb[i][j] = comb[i - 1][j] + comb[i - 1][j - 1];\n    return comb;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String kthSmallestPath(int[] destination, int k) {\n    StringBuilder sb = new StringBuilder();\n    int v = destination[0];\n    int h = destination[1];\n    final int totalSteps = v + h;\n    final int[][] comb = getComb(totalSteps - 1, v);\n\n    for (int i = 0; i < totalSteps; ++i) {\n      // If 'H' is picked, we can reach ranks [1, availableRank].\n      final int availableRank = comb[h + v - 1][v];\n      if (availableRank >= k) { // Should pick 'H'.\n        sb.append('H');\n        --h;\n      } else { // Should pick 'V'.\n        k -= availableRank;\n        sb.append('V');\n        --v;\n      }\n    }\n\n    return sb.toString();\n  }\n\n  private int[][] getComb(int n, int k) {\n    int[][] comb = new int[n + 1][k + 1];\n    for (int i = 0; i <= n; ++i)\n      comb[i][0] = 1;\n    for (int i = 1; i <= n; ++i)\n      for (int j = 1; j <= k; ++j)\n        comb[i][j] = comb[i - 1][j] + comb[i - 1][j - 1];\n    return comb;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def kthSmallestPath(self, destination: List[int], k: int) -> str:\n    ans = []\n    v, h = destination\n\n    for _ in range(h + v):\n      # If pick 'H', then we're able to reack 1, 2, ..., availableRank.\n      availableRank = math.comb(h + v - 1, v)\n      if availableRank >= k:  # Should pick 'H'.\n        ans.append('H')\n        h -= 1\n      else:  # Should pick 'V'.\n        k -= availableRank\n        ans.append('V')\n        v -= 1\n\n    return ''.join(ans)\n",
                "lang_text": "py"
            }
        }
    }
}