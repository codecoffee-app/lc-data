{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "668",
            "title": "Kth Smallest Number in Multiplication Table",
            "titleSlug": "kth-smallest-number-in-multiplication-table",
            "content": "<p>Nearly everyone has used the <a href=\"https://en.wikipedia.org/wiki/Multiplication_table\" target=\"_blank\">Multiplication Table</a>. The multiplication table of size <code>m x n</code> is an integer matrix <code>mat</code> where <code>mat[i][j] == i * j</code> (<strong>1-indexed</strong>).</p>\n\n<p>Given three integers <code>m</code>, <code>n</code>, and <code>k</code>, return <em>the </em><code>k<sup>th</sup></code><em> smallest element in the </em><code>m x n</code><em> multiplication table</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/02/multtable1-grid.jpg\" style=\"width: 500px; height: 254px;\" />\n<pre>\n<strong>Input:</strong> m = 3, n = 3, k = 5\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The 5<sup>th</sup> smallest number is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/02/multtable2-grid.jpg\" style=\"width: 493px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> m = 2, n = 3, k = 6\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The 6<sup>th</sup> smallest number is 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= m * n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2077,
            "dislikes": 55,
            "similarQuestions": "[{\"title\": \"Kth Smallest Element in a Sorted Matrix\", \"titleSlug\": \"kth-smallest-element-in-a-sorted-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K-th Smallest Pair Distance\", \"titleSlug\": \"find-k-th-smallest-pair-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"K-th Smallest Prime Fraction\", \"titleSlug\": \"k-th-smallest-prime-fraction\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Time to Eat All Grains\", \"titleSlug\": \"minimum-time-to-eat-all-grains\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"60.7K\", \"totalSubmission\": \"117.8K\", \"totalAcceptedRaw\": 60662, \"totalSubmissionRaw\": 117786, \"acRate\": \"51.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a multiplication table of size `m x n` where `mat[i][j] == i * j` (1-indexed), find the k-th smallest element in the table.",
                "constraints": [
                    "1 <= m, n <= 3 * 10^4",
                    "1 <= k <= m * n"
                ],
                "testcases": [
                    {
                        "input": "m = 3, n = 3, k = 5",
                        "output": "3",
                        "explanation": "The 5th smallest number in the 3x3 multiplication table is 3."
                    },
                    {
                        "input": "m = 2, n = 3, k = 6",
                        "output": "6",
                        "explanation": "The 6th smallest number in the 2x3 multiplication table is 6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
                "title": "Kth Smallest Element in a Sorted Matrix",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-k-th-smallest-pair-distance",
                "title": "Find K-th Smallest Pair Distance",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "k-th-smallest-prime-fraction",
                "title": "K-th Smallest Prime Fraction",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-time-to-eat-all-grains",
                "title": "Minimum Time to Eat All Grains",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findKthNumber(int m, int n, int k) {\n    int l = 1;\n    int r = m * n;\n\n    auto numsNoGreaterThan = [&](int target) {\n      int count = 0;\n      // For each row i, count # of numbers <= target\n      for (int i = 1; i <= m; ++i)\n        count += min(target / i, n);\n      return count;\n    };\n\n    while (l < r) {\n      const int mid = (l + r) / 2;\n      if (numsNoGreaterThan(mid) >= k)\n        r = mid;\n      else\n        l = mid + 1;\n    }\n\n    return l;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findKthNumber(int m, int n, int k) {\n    int l = 1;\n    int r = m * n;\n\n    while (l < r) {\n      final int mid = (l + r) / 2;\n      if (numsNoGreaterThan(m, n, mid) >= k)\n        r = mid;\n      else\n        l = mid + 1;\n    }\n\n    return l;\n  }\n\n  private int numsNoGreaterThan(int m, int n, int target) {\n    int count = 0;\n    // For each row i, count # of numbers <= target\n    for (int i = 1; i <= m; ++i)\n      count += Math.min(target / i, n);\n    return count;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}