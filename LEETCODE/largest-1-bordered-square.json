{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1139",
            "title": "Largest 1-Bordered Square",
            "titleSlug": "largest-1-bordered-square",
            "content": "<p>Given a 2D <code>grid</code> of <code>0</code>s and <code>1</code>s, return the number of elements in&nbsp;the largest <strong>square</strong>&nbsp;subgrid that has all <code>1</code>s on its <strong>border</strong>, or <code>0</code> if such a subgrid&nbsp;doesn&#39;t exist in the <code>grid</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> grid = [[1,1,1],[1,0,1],[1,1,1]]\r\n<strong>Output:</strong> 9\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> grid = [[1,1,0,0]]\r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= grid.length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= grid[0].length &lt;= 100</code></li>\r\n\t<li><code>grid[i][j]</code> is <code>0</code> or <code>1</code></li>\r\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 689,
            "dislikes": 107,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.9K\", \"totalSubmission\": \"47.6K\", \"totalAcceptedRaw\": 23873, \"totalSubmissionRaw\": 47568, \"acRate\": \"50.2%\"}",
            "hints": [
                "For each square, know how many ones are up, left, down, and right of this square. You can find it in O(N^2) using dynamic programming.",
                "Now for each square ( O(N^3) ), we can evaluate whether that square is 1-bordered in O(1)."
            ],
            "rephrased": {
                "body": "Given a 2D grid of 0s and 1s, find the number of elements in the largest square subgrid that has all 1s on its border. Return 0 if such a subgrid doesn't exist.",
                "constraints": [
                    "1 <= grid.length <= 100",
                    "1 <= grid[0].length <= 100",
                    "grid[i][j] is 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "[[1,1,1],[1,0,1],[1,1,1]]",
                        "output": "9",
                        "explanation": "The largest square subgrid with 1s on the border is the entire grid, which has 3 * 3 = 9 elements."
                    },
                    {
                        "input": "[[1,1,0,0]]",
                        "output": "1",
                        "explanation": "The largest square subgrid with 1s on the border is a 1x1 square, which contains a single element.  Several 1x1 squares meet this criteria, but the result is still 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For each square, know how many ones are up, left, down, and right of this square. You can find it in O(N^2) using dynamic programming.",
            "Now for each square ( O(N^3) ), we can evaluate whether that square is 1-bordered in O(1)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int largest1BorderedSquare(vector<vector<int>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n\n    // leftOnes[i][j] := consecutive 1s in the left of grid[i][j]\n    vector<vector<int>> leftOnes(m, vector<int>(n));\n    // topOnes[i][j] := consecutive 1s in the top of grid[i][j]\n    vector<vector<int>> topOnes(m, vector<int>(n));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (grid[i][j] == 1) {\n          leftOnes[i][j] = j == 0 ? 1 : 1 + leftOnes[i][j - 1];\n          topOnes[i][j] = i == 0 ? 1 : 1 + topOnes[i - 1][j];\n        }\n\n    for (int sz = min(m, n); sz > 0; --sz)\n      for (int i = 0; i + sz - 1 < m; ++i)\n        for (int j = 0; j + sz - 1 < n; ++j) {\n          const int x = i + sz - 1;\n          const int y = j + sz - 1;\n          // If grid[i..x][j..y] has all 1s on its border.\n          if (min(leftOnes[i][y], leftOnes[x][y]) >= sz &&\n              min(topOnes[x][j], topOnes[x][y]) >= sz)\n            return sz * sz;\n        }\n\n    return 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int largest1BorderedSquare(int[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n\n    // leftOnes[i][j] := consecutive 1s in the left of grid[i][j]\n    int[][] leftOnes = new int[m][n];\n    // topOnes[i][j] := consecutive 1s in the top of grid[i][j]\n    int[][] topOnes = new int[m][n];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (grid[i][j] == 1) {\n          leftOnes[i][j] = j == 0 ? 1 : 1 + leftOnes[i][j - 1];\n          topOnes[i][j] = i == 0 ? 1 : 1 + topOnes[i - 1][j];\n        }\n\n    for (int sz = Math.min(m, n); sz > 0; --sz)\n      for (int i = 0; i + sz - 1 < m; ++i)\n        for (int j = 0; j + sz - 1 < n; ++j) {\n          final int x = i + sz - 1;\n          final int y = j + sz - 1;\n          // If grid[i..x][j..y] has all 1s on its border.\n          if (Math.min(leftOnes[i][y], leftOnes[x][y]) >= sz &&\n              Math.min(topOnes[x][j], topOnes[x][y]) >= sz)\n            return sz * sz;\n        }\n\n    return 0;\n  }\n};\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largest1BorderedSquare(self, grid: List[List[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n\n    # leftOnes[i][j] := consecutive 1s in the left of grid[i][j]\n    leftOnes = [[0] * n for _ in range(m)]\n    # topOnes[i][j] := consecutive 1s in the top of grid[i][j]\n    topOnes = [[0] * n for _ in range(m)]\n\n    for i in range(m):\n      for j in range(n):\n        if grid[i][j] == 1:\n          leftOnes[i][j] = 1 if j == 0 else 1 + leftOnes[i][j - 1]\n          topOnes[i][j] = 1 if i == 0 else 1 + topOnes[i - 1][j]\n\n    for sz in range(min(m, n), 0, -1):\n      for i in range(m - sz + 1):\n        for j in range(n - sz + 1):\n          x = i + sz - 1\n          y = j + sz - 1\n          # If grid[i..x][j..y] has all 1s on its border.\n          if min(leftOnes[i][y], leftOnes[x][y], topOnes[x][j], topOnes[x][y]) >= sz:\n            return sz * sz\n\n    return 0\n",
                "lang_text": "py"
            }
        }
    }
}