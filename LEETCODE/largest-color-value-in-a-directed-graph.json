{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1857",
            "title": "Largest Color Value in a Directed Graph",
            "titleSlug": "largest-color-value-in-a-directed-graph",
            "content": "<p>There is a <strong>directed graph</strong> of <code>n</code> colored nodes and <code>m</code> edges. The nodes are numbered from <code>0</code> to <code>n - 1</code>.</p>\r\n\r\n<p>You are given a string <code>colors</code> where <code>colors[i]</code> is a lowercase English letter representing the <strong>color</strong> of the <code>i<sup>th</sup></code> node in this graph (<strong>0-indexed</strong>). You are also given a 2D array <code>edges</code> where <code>edges[j] = [a<sub>j</sub>, b<sub>j</sub>]</code> indicates that there is a <strong>directed edge</strong> from node <code>a<sub>j</sub></code> to node <code>b<sub>j</sub></code>.</p>\r\n\r\n<p>A valid <strong>path</strong> in the graph is a sequence of nodes <code>x<sub>1</sub> -&gt; x<sub>2</sub> -&gt; x<sub>3</sub> -&gt; ... -&gt; x<sub>k</sub></code> such that there is a directed edge from <code>x<sub>i</sub></code> to <code>x<sub>i+1</sub></code> for every <code>1 &lt;= i &lt; k</code>. The <strong>color value</strong> of the path is the number of nodes that are colored the <strong>most frequently</strong> occurring color along that path.</p>\r\n\r\n<p>Return <em>the <strong>largest color value</strong> of any valid path in the given graph, or </em><code>-1</code><em> if the graph contains a cycle</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/21/leet1.png\" style=\"width: 400px; height: 182px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> colors = &quot;abaca&quot;, edges = [[0,1],[0,2],[2,3],[3,4]]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> The path 0 -&gt; 2 -&gt; 3 -&gt; 4 contains 3 nodes that are colored <code>&quot;a&quot; (red in the above image)</code>.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/21/leet2.png\" style=\"width: 85px; height: 85px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> colors = &quot;a&quot;, edges = [[0,0]]\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong> There is a cycle from 0 to 0.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>n == colors.length</code></li>\r\n\t<li><code>m == edges.length</code></li>\r\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>0 &lt;= m &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>colors</code> consists of lowercase English letters.</li>\r\n\t<li><code>0 &lt;= a<sub>j</sub>, b<sub>j</sub>&nbsp;&lt; n</code></li>\r\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2046,
            "dislikes": 67,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"61.6K\", \"totalSubmission\": \"121.5K\", \"totalAcceptedRaw\": 61631, \"totalSubmissionRaw\": 121453, \"acRate\": \"50.7%\"}",
            "hints": [
                "Use topological sort.",
                "let dp[u][c] := the maximum count of vertices with color c of any path starting from vertex u. (by JerryJin2905)"
            ],
            "rephrased": {
                "body": "Given a directed graph with 'n' colored nodes and 'm' edges. Nodes are numbered from 0 to n-1. 'colors[i]' represents the color of the i-th node (0-indexed). 'edges[j] = [a_j, b_j]' indicates a directed edge from node a_j to node b_j.\n\nA valid path is a sequence of nodes x_1 -> x_2 -> ... -> x_k where there is a directed edge from x_i to x_{i+1} for every 1 <= i < k. The color value of a path is the count of the most frequently occurring color along that path.\n\nReturn the largest color value of any valid path in the graph. If the graph contains a cycle, return -1.",
                "constraints": [
                    "n == colors.length",
                    "m == edges.length",
                    "1 <= n <= 10^5",
                    "0 <= m <= 10^5",
                    "colors consists of lowercase English letters.",
                    "0 <= a_j, b_j < n"
                ],
                "testcases": [
                    {
                        "input": "colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]",
                        "output": "3",
                        "explanation": "The path 0 -> 2 -> 3 -> 4 contains 3 nodes colored 'a'."
                    },
                    {
                        "input": "colors = \"a\", edges = [[0,0]]",
                        "output": "-1",
                        "explanation": "There is a cycle from 0 to 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use topological sort.",
            "let dp[u][c] := the maximum count of vertices with color c of any path starting from vertex u. (by JerryJin2905)"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int largestPathValue(string colors, vector<vector<int>>& edges) {\n    const int n = colors.length();\n    int ans = 0;\n    int processed = 0;\n    vector<vector<int>> graph(n);\n    vector<int> inDegree(n);\n    queue<int> q;\n    vector<vector<int>> count(n, vector<int>(26));\n\n    // Build graph.\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].push_back(v);\n      ++inDegree[v];\n    }\n\n    // Topology\n    for (int i = 0; i < n; ++i)\n      if (inDegree[i] == 0)\n        q.push(i);\n\n    while (!q.empty()) {\n      const int out = q.front();\n      q.pop();\n      ++processed;\n      ans = max(ans, ++count[out][colors[out] - 'a']);\n      for (const int in : graph[out]) {\n        for (int i = 0; i < 26; ++i)\n          count[in][i] = max(count[in][i], count[out][i]);\n        if (--inDegree[in] == 0)\n          q.push(in);\n      }\n    }\n\n    return processed == n ? ans : -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int largestPathValue(String colors, int[][] edges) {\n    final int n = colors.length();\n    int ans = 0;\n    int processed = 0;\n    List<Integer>[] graph = new List[n];\n    int[] inDegree = new int[n];\n    int[][] count = new int[n][26];\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    // Build graph.\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph[u].add(v);\n      ++inDegree[v];\n    }\n\n    // Topology\n    Queue<Integer> q = IntStream.range(0, n)\n                           .filter(i -> inDegree[i] == 0)\n                           .boxed()\n                           .collect(Collectors.toCollection(ArrayDeque::new));\n\n    while (!q.isEmpty()) {\n      final int out = q.poll();\n      ++processed;\n      ans = Math.max(ans, ++count[out][colors.charAt(out) - 'a']);\n      for (final int in : graph[out]) {\n        for (int i = 0; i < 26; ++i)\n          count[in][i] = Math.max(count[in][i], count[out][i]);\n        if (--inDegree[in] == 0)\n          q.offer(in);\n      }\n    }\n\n    return processed == n ? ans : -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\n    n = len(colors)\n    ans = 0\n    processed = 0\n    graph = [[] for _ in range(n)]\n    inDegree = [0] * n\n    q = collections.deque()\n    count = [[0] * 26 for _ in range(n)]\n\n    # Build graph.\n    for u, v in edges:\n      graph[u].append(v)\n      inDegree[v] += 1\n\n    # Vpology\n    for i, degree in enumerate(inDegree):\n      if degree == 0:\n        q.append(i)\n\n    while q:\n      u = q.popleft()\n      processed += 1\n      count[u][ord(colors[u]) - ord('a')] += 1\n      ans = max(ans, count[u][ord(colors[u]) - ord('a')])\n      for v in graph[u]:\n        for i in range(26):\n          count[v][i] = max(count[v][i], count[u][i])\n        inDegree[v] -= 1\n        if inDegree[v] == 0:\n          q.append(v)\n\n    return ans if processed == n else -1\n",
                "lang_text": "py"
            }
        }
    }
}