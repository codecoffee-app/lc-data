{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "368",
            "title": "Largest Divisible Subset",
            "titleSlug": "largest-divisible-subset",
            "content": "<p>Given a set of <strong>distinct</strong> positive integers <code>nums</code>, return the largest subset <code>answer</code> such that every pair <code>(answer[i], answer[j])</code> of elements in this subset satisfies:</p>\n\n<ul>\n\t<li><code>answer[i] % answer[j] == 0</code>, or</li>\n\t<li><code>answer[j] % answer[i] == 0</code></li>\n</ul>\n\n<p>If there are multiple solutions, return any of them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> [1,3] is also accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,4,8]\n<strong>Output:</strong> [1,2,4,8]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>9</sup></code></li>\n\t<li>All the integers in <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5022,
            "dislikes": 193,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"200.6K\", \"totalSubmission\": \"474.3K\", \"totalAcceptedRaw\": 200568, \"totalSubmissionRaw\": 474251, \"acRate\": \"42.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a set of distinct positive integers `nums`, find the largest subset `answer` where for every pair of elements `(answer[i], answer[j])` in the subset, either `answer[i]` is divisible by `answer[j]` or `answer[j]` is divisible by `answer[i]`.  If multiple such subsets exist, return any one of them.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "1 <= nums[i] <= 2 * 10^9",
                    "All integers in nums are unique."
                ],
                "testcases": [
                    {
                        "input": "[1,2,3]",
                        "output": "[1,2]",
                        "explanation": "[1,3] is also a valid solution."
                    },
                    {
                        "input": "[1,2,4,8]",
                        "output": "[1,2,4,8]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> largestDivisibleSubset(vector<int>& nums) {\n    const int n = nums.size();\n    vector<int> ans;\n    // sizeEndsAt[i] := largest size ends at nums[i]\n    vector<int> sizeEndsAt(n, 1);\n    // prevIndex[i] := the best index s.t.\n    // 1. nums[i] % nums[prevIndex[i]] == 0 and\n    // 2. can increase the size of the subset\n    vector<int> prevIndex(n, -1);\n    int maxSize = 0;  // Max size of the subset\n    int index = -1;   // Track the best ending index\n\n    std::ranges::sort(nums);\n\n    // Fix max ending num in the subset first\n    for (int i = 0; i < n; ++i) {\n      for (int j = i - 1; j >= 0; --j)\n        if (nums[i] % nums[j] == 0 && sizeEndsAt[i] < sizeEndsAt[j] + 1) {\n          sizeEndsAt[i] = sizeEndsAt[j] + 1;\n          prevIndex[i] = j;\n        }\n      // Find a new subset that has a bigger size\n      if (maxSize < sizeEndsAt[i]) {\n        maxSize = sizeEndsAt[i];\n        index = i;  // Update the best ending index\n      }\n    }\n\n    // Loop from back to front\n    while (index != -1) {\n      ans.push_back(nums[index]);\n      index = prevIndex[index];\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> largestDivisibleSubset(int[] nums) {\n    final int n = nums.length;\n    List<Integer> ans = new ArrayList<>();\n    // sizeEndsAt[i] := largest size ends at nums[i]\n    int[] sizeEndsAt = new int[n];\n    // prevIndex[i] := the best index s.t.\n    // 1. nums[i] % nums[prevIndex[i]] == 0 and\n    // 2. can increase the size of the subset\n    int[] prevIndex = new int[n];\n    int maxSize = 0; // Max size of the subset\n    int index = -1;  // Track the best ending index\n\n    Arrays.fill(sizeEndsAt, 1);\n    Arrays.fill(prevIndex, -1);\n    Arrays.sort(nums);\n\n    // Fix max ending num in the subset first\n    for (int i = 0; i < n; ++i) {\n      for (int j = i - 1; j >= 0; --j)\n        if (nums[i] % nums[j] == 0 && sizeEndsAt[i] < sizeEndsAt[j] + 1) {\n          sizeEndsAt[i] = sizeEndsAt[j] + 1;\n          prevIndex[i] = j;\n        }\n      // Find a new subset that has a bigger size\n      if (maxSize < sizeEndsAt[i]) {\n        maxSize = sizeEndsAt[i];\n        index = i; // Update the best ending index\n      }\n    }\n\n    // Loop from back to front\n    while (index != -1) {\n      ans.add(nums[index]);\n      index = prevIndex[index];\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestDivisibleSubset(self, nums: List[int]) -> List[int]:\n    n = len(nums)\n    ans = []\n    count = [1] * n\n    prevIndex = [-1] * n\n    maxCount = 0\n    index = -1\n\n    nums.sort()\n\n    for i, num in enumerate(nums):\n      for j in reversed(range(i)):\n        if num % nums[j] == 0 and count[i] < count[j] + 1:\n          count[i] = count[j] + 1\n          prevIndex[i] = j\n      if count[i] > maxCount:\n        maxCount = count[i]\n        index = i\n\n    while index != -1:\n      ans.append(nums[index])\n      index = prevIndex[index]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}