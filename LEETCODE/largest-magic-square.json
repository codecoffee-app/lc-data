{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1895",
            "title": "Largest Magic Square",
            "titleSlug": "largest-magic-square",
            "content": "<p>A <code>k x k</code> <strong>magic square</strong> is a <code>k x k</code> grid filled with integers such that every row sum, every column sum, and both diagonal sums are <strong>all equal</strong>. The integers in the magic square <strong>do not have to be distinct</strong>. Every <code>1 x 1</code> grid is trivially a <strong>magic square</strong>.</p>\n\n<p>Given an <code>m x n</code> integer <code>grid</code>, return <em>the <strong>size</strong> (i.e., the side length </em><code>k</code><em>) of the <strong>largest magic square</strong> that can be found within this grid</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/29/magicsquare-grid.jpg\" style=\"width: 413px; height: 335px;\" />\n<pre>\n<strong>Input:</strong> grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The largest magic square has a size of 3.\nEvery row sum, column sum, and diagonal sum of this magic square is equal to 12.\n- Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12\n- Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12\n- Diagonal sums: 5+4+3 = 6+4+2 = 12\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/29/magicsquare2-grid.jpg\" style=\"width: 333px; height: 255px;\" />\n<pre>\n<strong>Input:</strong> grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 281,
            "dislikes": 252,
            "similarQuestions": "[{\"title\": \"Magic Squares In Grid\", \"titleSlug\": \"magic-squares-in-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.3K\", \"totalSubmission\": \"19.8K\", \"totalAcceptedRaw\": 10330, \"totalSubmissionRaw\": 19799, \"acRate\": \"52.2%\"}",
            "hints": [
                "Check all squares in the matrix and find the largest one."
            ],
            "rephrased": {
                "body": "Given an `m x n` integer `grid`, find the size (side length `k`) of the largest magic square that can be found within this grid.\n\nA magic square is a `k x k` grid filled with integers where every row sum, every column sum, and both diagonal sums are equal. Integers in the magic square do not have to be distinct. Note that every `1 x 1` grid is trivially considered a magic square.",
                "constraints": [
                    "`m == grid.length`",
                    "`n == grid[i].length`",
                    "`1 <= m, n <= 50`",
                    "`1 <= grid[i][j] <= 10^6`"
                ],
                "testcases": [
                    {
                        "input": "[[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]",
                        "output": "3",
                        "explanation": "The largest magic square has size 3. Every row, column, and diagonal sum of this magic square equals 12. For example, row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12; column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12; diagonal sums: 5+4+3 = 6+4+2 = 12."
                    },
                    {
                        "input": "[[5,1,3,1],[9,3,3,1],[1,3,3,8]]",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "magic-squares-in-grid",
                "title": "Magic Squares In Grid",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Check all squares in the matrix and find the largest one."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int largestMagicSquare(vector<vector<int>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    // prefixRow[i][j] := prefix sum of first j nums in i-th row\n    vector<vector<int>> prefixRow(m, vector<int>(n + 1));\n    // prefixCol[i][j] := prefix sum of first j nums in i-th col\n    vector<vector<int>> prefixCol(n, vector<int>(m + 1));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        prefixRow[i][j + 1] = prefixRow[i][j] + grid[i][j];\n        prefixCol[j][i + 1] = prefixCol[j][i] + grid[i][j];\n      }\n\n    for (int k = min(m, n); k >= 2; --k)\n      if (containsMagicSquare(grid, prefixRow, prefixCol, k))\n        return k;\n\n    return 1;\n  }\n\n private:\n  // Returns true if grid contains any magic square of size k x k.\n  bool containsMagicSquare(const vector<vector<int>>& grid,\n                           const vector<vector<int>>& prefixRow,\n                           const vector<vector<int>>& prefixCol, int k) {\n    for (int i = 0; i + k - 1 < grid.size(); ++i)\n      for (int j = 0; j + k - 1 < grid[0].size(); ++j)\n        if (isMagicSquare(grid, prefixRow, prefixCol, i, j, k))\n          return true;\n    return false;\n  }\n\n  // Returns true if grid[i..i + k)[j..j + k) is a magic square.\n  bool isMagicSquare(const vector<vector<int>>& grid,\n                     const vector<vector<int>>& prefixRow,\n                     const vector<vector<int>>& prefixCol, int i, int j,\n                     int k) {\n    int diag = 0;\n    int antiDiag = 0;\n    for (int d = 0; d < k; ++d) {\n      diag += grid[i + d][j + d];\n      antiDiag += grid[i + d][j + k - 1 - d];\n    }\n    if (diag != antiDiag)\n      return false;\n    for (int d = 0; d < k; ++d) {\n      if (getSum(prefixRow, i + d, j, j + k - 1) != diag)\n        return false;\n      if (getSum(prefixCol, j + d, i, i + k - 1) != diag)\n        return false;\n    }\n    return true;\n  }\n\n  // Returns sum(grid[i][l..r]) or sum(grid[l..r][i]).\n  int getSum(const vector<vector<int>>& prefix, int i, int l, int r) {\n    return prefix[i][r + 1] - prefix[i][l];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int largestMagicSquare(int[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    // prefixRow[i][j] := prefix sum of first j nums in i-th row\n    int[][] prefixRow = new int[m][n + 1];\n    // prefixCol[i][j] := prefix sum of first j nums in i-th col\n    int[][] prefixCol = new int[n][m + 1];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        prefixRow[i][j + 1] = prefixRow[i][j] + grid[i][j];\n        prefixCol[j][i + 1] = prefixCol[j][i] + grid[i][j];\n      }\n\n    for (int k = Math.min(m, n); k >= 2; --k)\n      if (containsMagicSquare(grid, prefixRow, prefixCol, k))\n        return k;\n\n    return 1;\n  }\n\n  // Returns true if grid contains a magic square of size k x k.\n  private boolean containsMagicSquare(int[][] grid, int[][] prefixRow, int[][] prefixCol, int k) {\n    for (int i = 0; i + k - 1 < grid.length; ++i)\n      for (int j = 0; j + k - 1 < grid[0].length; ++j)\n        if (isMagicSquare(grid, prefixRow, prefixCol, i, j, k))\n          return true;\n    return false;\n  }\n\n  // Returns true if grid[i..i + k)[j..j + k) is a magic square.\n  private boolean isMagicSquare(int[][] grid, int[][] prefixRow, int[][] prefixCol, int i, int j,\n                                int k) {\n    int diag = 0;\n    int antiDiag = 0;\n    for (int d = 0; d < k; ++d) {\n      diag += grid[i + d][j + d];\n      antiDiag += grid[i + d][j + k - 1 - d];\n    }\n    if (diag != antiDiag)\n      return false;\n    for (int d = 0; d < k; ++d) {\n      if (getSum(prefixRow, i + d, j, j + k - 1) != diag)\n        return false;\n      if (getSum(prefixCol, j + d, i, i + k - 1) != diag)\n        return false;\n    }\n    return true;\n  }\n\n  // Returns sum(grid[i][l..r]) or sum(grid[l..r][i]).\n  private int getSum(int[][] prefix, int i, int l, int r) {\n    return prefix[i][r + 1] - prefix[i][l];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestMagicSquare(self, grid: List[List[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n    # prefixRow[i][j] := prefix sum of first j nums in i-th row\n    prefixRow = [[0] * (n + 1) for _ in range(m)]\n    # prefixCol[i][j] := prefix sum of first j nums in i-th col\n    prefixCol = [[0] * (m + 1) for _ in range(n)]\n\n    for i in range(m):\n      for j in range(n):\n        prefixRow[i][j + 1] = prefixRow[i][j] + grid[i][j]\n        prefixCol[j][i + 1] = prefixCol[j][i] + grid[i][j]\n\n    # Returns true if grid[i..i + k)[j..j + k) is a magic square.\n    def isMagicSquare(i: int, j: int, k: int) -> bool:\n      diag, antiDiag = 0, 0\n      for d in range(k):\n        diag += grid[i + d][j + d]\n        antiDiag += grid[i + d][j + k - 1 - d]\n      if diag != antiDiag:\n        return False\n      for d in range(k):\n        if self._getSum(prefixRow, i + d, j, j + k - 1) != diag:\n          return False\n        if self._getSum(prefixCol, j + d, i, i + k - 1) != diag:\n          return False\n      return True\n\n    # Returns true if grid contains a magic square of size k x k.\n    def containsMagicSquare(k: int) -> bool:\n      for i in range(m - k + 1):\n        for j in range(n - k + 1):\n          if isMagicSquare(i, j, k):\n            return True\n      return False\n\n    for k in range(min(m, n), 1, -1):\n      if containsMagicSquare(k):\n        return k\n\n    return 1\n\n  # Returns sum(grid[i][l..r]) or sum(grid[l..r][i]).\n  def _getSum(self, prefix: List[List[int]], i: int, l: int, r: int) -> int:\n    return prefix[i][r + 1] - prefix[i][l]\n",
                "lang_text": "py"
            }
        }
    }
}