{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1754",
            "title": "Largest Merge Of Two Strings",
            "titleSlug": "largest-merge-of-two-strings",
            "content": "<p>You are given two strings <code>word1</code> and <code>word2</code>. You want to construct a string <code>merge</code> in the following way: while either <code>word1</code> or <code>word2</code> are non-empty, choose <strong>one</strong> of the following options:</p>\n\n<ul>\n\t<li>If <code>word1</code> is non-empty, append the <strong>first</strong> character in <code>word1</code> to <code>merge</code> and delete it from <code>word1</code>.\n\n\t<ul>\n\t\t<li>For example, if <code>word1 = &quot;abc&quot; </code>and <code>merge = &quot;dv&quot;</code>, then after choosing this operation, <code>word1 = &quot;bc&quot;</code> and <code>merge = &quot;dva&quot;</code>.</li>\n\t</ul>\n\t</li>\n\t<li>If <code>word2</code> is non-empty, append the <strong>first</strong> character in <code>word2</code> to <code>merge</code> and delete it from <code>word2</code>.\n\t<ul>\n\t\t<li>For example, if <code>word2 = &quot;abc&quot; </code>and <code>merge = &quot;&quot;</code>, then after choosing this operation, <code>word2 = &quot;bc&quot;</code> and <code>merge = &quot;a&quot;</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the lexicographically <strong>largest</strong> </em><code>merge</code><em> you can construct</em>.</p>\n\n<p>A string <code>a</code> is lexicographically larger than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, <code>a</code> has a character strictly larger than the corresponding character in <code>b</code>. For example, <code>&quot;abcd&quot;</code> is lexicographically larger than <code>&quot;abcc&quot;</code> because the first position they differ is at the fourth character, and <code>d</code> is greater than <code>c</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;cabaa&quot;, word2 = &quot;bcaaa&quot;\n<strong>Output:</strong> &quot;cbcabaaaaa&quot;\n<strong>Explanation:</strong> One way to get the lexicographically largest merge is:\n- Take from word1: merge = &quot;c&quot;, word1 = &quot;abaa&quot;, word2 = &quot;bcaaa&quot;\n- Take from word2: merge = &quot;cb&quot;, word1 = &quot;abaa&quot;, word2 = &quot;caaa&quot;\n- Take from word2: merge = &quot;cbc&quot;, word1 = &quot;abaa&quot;, word2 = &quot;aaa&quot;\n- Take from word1: merge = &quot;cbca&quot;, word1 = &quot;baa&quot;, word2 = &quot;aaa&quot;\n- Take from word1: merge = &quot;cbcab&quot;, word1 = &quot;aa&quot;, word2 = &quot;aaa&quot;\n- Append the remaining 5 a&#39;s from word1 and word2 at the end of merge.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;abcabc&quot;, word2 = &quot;abdcaba&quot;\n<strong>Output:</strong> &quot;abdcabcabcaba&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 3000</code></li>\n\t<li><code>word1</code> and <code>word2</code> consist only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 524,
            "dislikes": 71,
            "similarQuestions": "[{\"title\": \"Maximum Matching of Players With Trainers\", \"titleSlug\": \"maximum-matching-of-players-with-trainers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Decremental String Concatenation\", \"titleSlug\": \"decremental-string-concatenation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.8K\", \"totalSubmission\": \"44.2K\", \"totalAcceptedRaw\": 20844, \"totalSubmissionRaw\": 44204, \"acRate\": \"47.2%\"}",
            "hints": [
                "Build the result character by character. At each step, you choose a character from one of the two strings.",
                "If the next character of the first string is larger than that of the second string, or vice versa, it's optimal to use the larger one.",
                "If both are equal, think of a criteria that lets you decide which string to consume the next character from.",
                "You should choose the next character from the larger string."
            ],
            "rephrased": {
                "body": "Given two strings, `word1` and `word2`, construct a new string `merge` by repeatedly appending characters from either `word1` or `word2`.  While either `word1` or `word2` is non-empty, you can choose one of the following actions:\n\n*   If `word1` is non-empty, append the first character of `word1` to `merge` and remove it from `word1`.\n*   If `word2` is non-empty, append the first character of `word2` to `merge` and remove it from `word2`.\n\nReturn the lexicographically largest possible `merge` that can be constructed.",
                "constraints": [
                    "1 <= word1.length, word2.length <= 3000",
                    "word1 and word2 consist only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "word1 = \"cabaa\", word2 = \"bcaaa\"",
                        "output": "\"cbcabaaaaa\"",
                        "explanation": "One optimal way to construct the merge is as follows:\n\n1.  Take 'c' from word1: merge = \"c\", word1 = \"abaa\", word2 = \"bcaaa\"\n2.  Take 'b' from word2: merge = \"cb\", word1 = \"abaa\", word2 = \"caaa\"\n3.  Take 'c' from word2: merge = \"cbc\", word1 = \"abaa\", word2 = \"aaa\"\n4.  Take 'a' from word1: merge = \"cbca\", word1 = \"baa\", word2 = \"aaa\"\n5.  Take 'b' from word1: merge = \"cbcab\", word1 = \"aa\", word2 = \"aaa\"\n6.  Append the remaining 5 'a' characters from word1 and word2 to merge."
                    },
                    {
                        "input": "word1 = \"abcabc\", word2 = \"abdcaba\"",
                        "output": "\"abdcabcabcaba\"",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-matching-of-players-with-trainers",
                "title": "Maximum Matching of Players With Trainers",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "decremental-string-concatenation",
                "title": "Decremental String Concatenation",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Build the result character by character. At each step, you choose a character from one of the two strings.",
            "If the next character of the first string is larger than that of the second string, or vice versa, it's optimal to use the larger one.",
            "If both are equal, think of a criteria that lets you decide which string to consume the next character from.",
            "You should choose the next character from the larger string."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string largestMerge(string word1, string word2) {\n    if (word1.empty())\n      return word2;\n    if (word2.empty())\n      return word1;\n    return word1 > word2 ? word1[0] + largestMerge(word1.substr(1), word2)\n                         : word2[0] + largestMerge(word1, word2.substr(1));\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String largestMerge(String word1, String word2) {\n    if (word1.isEmpty())\n      return word2;\n    if (word2.isEmpty())\n      return word1;\n    return word1.compareTo(word2) > 0 ? word1.charAt(0) + largestMerge(word1.substring(1), word2)\n                                      : word2.charAt(0) + largestMerge(word1, word2.substring(1));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestMerge(self, word1: str, word2: str) -> str:\n    if not word1:\n      return word2\n    if not word2:\n      return word1\n    if word1 > word2:\n      return word1[0] + self.largestMerge(word1[1:], word2)\n    return word2[0] + self.largestMerge(word1, word2[1:])\n",
                "lang_text": "py"
            }
        }
    }
}