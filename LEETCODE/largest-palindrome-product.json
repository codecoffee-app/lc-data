{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "479",
            "title": "Largest Palindrome Product",
            "titleSlug": "largest-palindrome-product",
            "content": "<p>Given an integer n, return <em>the <strong>largest palindromic integer</strong> that can be represented as the product of two <code>n</code>-digits integers</em>. Since the answer can be very large, return it <strong>modulo</strong> <code>1337</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 169,
            "dislikes": 1546,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.3K\", \"totalSubmission\": \"71.4K\", \"totalAcceptedRaw\": 23298, \"totalSubmissionRaw\": 71416, \"acRate\": \"32.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Find the largest palindromic integer that can be expressed as the product of two n-digit integers. Return this palindrome modulo 1337.",
                "constraints": [
                    "1 <= n <= 8"
                ],
                "testcases": [
                    {
                        "input": "n = 2",
                        "output": "987",
                        "explanation": "The largest palindrome formed by multiplying two 2-digit numbers is 9009 (99 x 91).  9009 modulo 1337 is 987."
                    },
                    {
                        "input": "n = 1",
                        "output": "9",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int largestPalindrome(int n) {\n    if (n == 1)\n      return 9;\n\n    constexpr int kMod = 1337;\n    const int upper = pow(10, n) - 1;\n    const int lower = pow(10, n - 1) - 1;\n\n    for (int i = upper; i > lower; --i) {\n      const long cand = getPalindromeCandidate(i);\n      for (long j = upper; j * j >= cand; --j)\n        if (cand % j == 0)\n          return cand % kMod;\n    }\n\n    throw;\n  }\n\n private:\n  long getPalindromeCandidate(int i) {\n    string reversed = to_string(i);\n    reverse(reversed.begin(), reversed.end());\n    return stol(to_string(i) + reversed);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int largestPalindrome(int n) {\n    if (n == 1)\n      return 9;\n\n    final int kMod = 1337;\n    final int upper = (int) Math.pow(10, n) - 1;\n    final int lower = (int) Math.pow(10, n - 1) - 1;\n\n    for (int i = upper; i > lower; --i) {\n      final long cand = getPalindromeCandidate(i);\n      for (long j = upper; j * j >= cand; --j)\n        if (cand % j == 0)\n          return (int) (cand % kMod);\n    }\n\n    throw new IllegalArgumentException();\n  }\n\n  private long getPalindromeCandidate(int i) {\n    final String reversed = new StringBuilder().append(i).reverse().toString();\n    return Long.valueOf(i + reversed);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestPalindrome(self, n: int) -> int:\n    if n == 1:\n      return 9\n\n    kMod = 1337\n    upper = pow(10, n) - 1\n    lower = pow(10, n - 1) - 1\n\n    for i in range(upper, lower, -1):\n      cand = int(str(i) + str(i)[::-1])\n      j = upper\n      while j * j >= cand:\n        if cand % j == 0:\n          return cand % kMod\n        j -= 1\n",
                "lang_text": "py"
            }
        }
    }
}