{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2384",
            "title": "Largest Palindromic Number",
            "titleSlug": "largest-palindromic-number",
            "content": "<p>You are given a string <code>num</code> consisting of digits only.</p>\n\n<p>Return <em>the <strong>largest palindromic</strong> integer (in the form of a string) that can be formed using digits taken from </em><code>num</code>. It should not contain <strong>leading zeroes</strong>.</p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>You do <strong>not</strong> need to use all the digits of <code>num</code>, but you must use <strong>at least</strong> one digit.</li>\n\t<li>The digits can be reordered.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;444947137&quot;\n<strong>Output:</strong> &quot;7449447&quot;\n<strong>Explanation:</strong> \nUse the digits &quot;4449477&quot; from &quot;<u><strong>44494</strong></u><u><strong>7</strong></u>13<u><strong>7</strong></u>&quot; to form the palindromic integer &quot;7449447&quot;.\nIt can be shown that &quot;7449447&quot; is the largest palindromic integer that can be formed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;00009&quot;\n<strong>Output:</strong> &quot;9&quot;\n<strong>Explanation:</strong> \nIt can be shown that &quot;9&quot; is the largest palindromic integer that can be formed.\nNote that the integer returned should not contain leading zeroes.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>num</code> consists of digits.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 539,
            "dislikes": 209,
            "similarQuestions": "[{\"title\": \"Longest Palindrome\", \"titleSlug\": \"longest-palindrome\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.5K\", \"totalSubmission\": \"78.8K\", \"totalAcceptedRaw\": 25502, \"totalSubmissionRaw\": 78758, \"acRate\": \"32.4%\"}",
            "hints": [
                "In order to form a valid palindrome, other than the middle digit in an odd-length palindrome, every digit needs to exist on both sides.",
                "A longer palindrome implies a larger valued palindrome. For palindromes of the same length, the larger digits should occur first.",
                "We can count the occurrences of each digit and build the palindrome starting from the ends. Starting from the larger digits, if there are still at least 2 occurrences of a digit, we can place these digits on each side.",
                "Make sure to consider the special case for the center digit (if any) and zeroes. There should not be leading zeroes."
            ],
            "rephrased": {
                "body": "Given a string `num` consisting of digits, construct the largest possible palindromic integer using digits from `num`. The resulting palindrome must not have leading zeros and must contain at least one digit.",
                "constraints": [
                    "1 <= num.length <= 10^5",
                    "`num` consists of digits."
                ],
                "testcases": [
                    {
                        "input": "444947137",
                        "output": "7449447",
                        "explanation": "The digits '4449477' from '444947137' can be used to form the largest palindromic integer '7449447'."
                    },
                    {
                        "input": "00009",
                        "output": "9",
                        "explanation": "The largest palindromic integer that can be formed is '9'. Leading zeros are not allowed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "longest-palindrome",
                "title": "Longest Palindrome",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "In order to form a valid palindrome, other than the middle digit in an odd-length palindrome, every digit needs to exist on both sides.",
            "A longer palindrome implies a larger valued palindrome. For palindromes of the same length, the larger digits should occur first.",
            "We can count the occurrences of each digit and build the palindrome starting from the ends. Starting from the larger digits, if there are still at least 2 occurrences of a digit, we can place these digits on each side.",
            "Make sure to consider the special case for the center digit (if any) and zeroes. There should not be leading zeroes."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string largestPalindromic(string num) {\n    unordered_map<char, int> count;\n\n    for (const char c : num)\n      ++count[c];\n\n    const string firstHalf = getFirstHalf(count);\n    const string mid = getMid(count);\n    const string ans = firstHalf + mid + reversed(firstHalf);\n    return ans.empty() ? \"0\" : ans;\n  }\n\n private:\n  string getFirstHalf(const unordered_map<char, int>& count) {\n    string firstHalf;\n    for (char c = '9'; c >= '0'; --c) {\n      const auto it = count.find(c);\n      if (it == count.cend())\n        continue;\n      const int freq = it->second;\n      firstHalf += string(freq / 2, c);\n    }\n    const int index = firstHalf.find_first_not_of('0');\n    return index == -1 ? \"\" : firstHalf.substr(index);\n  }\n\n  string getMid(const unordered_map<char, int>& count) {\n    for (char c = '9'; c >= '0'; --c) {\n      const auto it = count.find(c);\n      if (it == count.cend())\n        continue;\n      const int freq = it->second;\n      if (freq & 1)\n        return string(1, c);\n    }\n    return \"\";\n  }\n\n  string reversed(const string& s) {\n    return {s.rbegin(), s.rend()};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String largestPalindromic(String num) {\n    Map<Character, Integer> count = new HashMap<>();\n\n    for (final char c : num.toCharArray())\n      count.merge(c, 1, Integer::sum);\n\n    final String firstHalf = getFirstHalf(count);\n    final String mid = getMid(count);\n    final String ans = firstHalf + mid + reversed(firstHalf);\n    return ans.isEmpty() ? \"0\" : ans;\n  }\n\n  private String getFirstHalf(Map<Character, Integer> count) {\n    StringBuilder sb = new StringBuilder();\n    for (char c = '9'; c >= '0'; --c) {\n      final int freq = count.getOrDefault(c, 0);\n      sb.append(String.valueOf(c).repeat(freq / 2));\n    }\n    final int index = firstNotZeroIndex(sb);\n    return index == -1 ? \"\" : sb.substring(index);\n  }\n\n  private int firstNotZeroIndex(StringBuilder sb) {\n    for (int i = 0; i < sb.length(); ++i)\n      if (sb.charAt(i) != '0')\n        return i;\n    return -1;\n  }\n\n  private String getMid(Map<Character, Integer> count) {\n    StringBuilder sb = new StringBuilder();\n    for (char c = '9'; c >= '0'; --c) {\n      final int freq = count.getOrDefault(c, 0);\n      if (freq % 2 == 1)\n        return String.valueOf(c);\n    }\n    return \"\";\n  }\n\n  private String reversed(final String s) {\n    return new StringBuilder(s).reverse().toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestPalindromic(self, num: str) -> str:\n    count = collections.Counter(num)\n    firstHalf = ''.join(count[i] // 2 * i for i in '9876543210').lstrip('0')\n    mid = self._getMid(count)\n    return (firstHalf + mid + firstHalf[::-1]) or '0'\n\n  def _getMid(self, count: Dict[str, int]) -> str:\n    for c in '9876543210':\n      if count[c] & 1:\n        return c\n    return ''\n",
                "lang_text": "py"
            }
        }
    }
}