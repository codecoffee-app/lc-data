{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "764",
            "title": "Largest Plus Sign",
            "titleSlug": "largest-plus-sign",
            "content": "<p>You are given an integer <code>n</code>. You have an <code>n x n</code> binary grid <code>grid</code> with all values initially <code>1</code>&#39;s except for some indices given in the array <code>mines</code>. The <code>i<sup>th</sup></code> element of the array <code>mines</code> is defined as <code>mines[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> where <code>grid[x<sub>i</sub>][y<sub>i</sub>] == 0</code>.</p>\n\n<p>Return <em>the order of the largest <strong>axis-aligned</strong> plus sign of </em>1<em>&#39;s contained in </em><code>grid</code>. If there is none, return <code>0</code>.</p>\n\n<p>An <strong>axis-aligned plus sign</strong> of <code>1</code>&#39;s of order <code>k</code> has some center <code>grid[r][c] == 1</code> along with four arms of length <code>k - 1</code> going up, down, left, and right, and made of <code>1</code>&#39;s. Note that there could be <code>0</code>&#39;s or <code>1</code>&#39;s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for <code>1</code>&#39;s.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/13/plus1-grid.jpg\" style=\"width: 404px; height: 405px;\" />\n<pre>\n<strong>Input:</strong> n = 5, mines = [[4,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In the above grid, the largest plus sign can only be of order 2. One of them is shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/13/plus2-grid.jpg\" style=\"width: 84px; height: 85px;\" />\n<pre>\n<strong>Input:</strong> n = 1, mines = [[0,0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no plus sign, so return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= mines.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt; n</code></li>\n\t<li>All the pairs <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1419,
            "dislikes": 223,
            "similarQuestions": "[{\"title\": \"Maximal Square\", \"titleSlug\": \"maximal-square\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"56.3K\", \"totalSubmission\": \"116.9K\", \"totalAcceptedRaw\": 56338, \"totalSubmissionRaw\": 116901, \"acRate\": \"48.2%\"}",
            "hints": [
                "For each direction such as \"left\", find left[r][c] = the number of 1s you will see before a zero starting at r, c and walking left.  You can find this in N^2 time with a dp.  The largest plus sign at r, c is just the minimum of left[r][c], up[r][c] etc."
            ],
            "rephrased": {
                "body": "Given an integer `n`, you have an `n x n` binary grid `grid` initialized with all values as `1`s.  Some indices are marked as `0` based on the `mines` array. Each element `mines[i] = [x_i, y_i]` indicates that `grid[x_i][y_i] == 0`.  The goal is to find the order of the largest axis-aligned plus sign of `1`s contained in `grid`. If no plus sign exists, return `0`.\n\nAn axis-aligned plus sign of `1`s of order `k` has a center `grid[r][c] == 1` and four arms of length `k - 1` extending up, down, left, and right, all consisting of `1`s.  The area beyond the arms of the plus sign is not considered.",
                "constraints": [
                    "1 <= n <= 500",
                    "1 <= mines.length <= 5000",
                    "0 <= x<sub>i</sub>, y<sub>i</sub> < n",
                    "All the pairs (x<sub>i</sub>, y<sub>i</sub>) are unique."
                ],
                "testcases": [
                    {
                        "input": "n = 5, mines = [[4,2]]",
                        "output": "2",
                        "explanation": "The largest plus sign that can be formed in the grid with n=5 and mine at (4,2) is of order 2.  A possible plus sign of order 2 is centered at (2,2)."
                    },
                    {
                        "input": "n = 1, mines = [[0,0]]",
                        "output": "0",
                        "explanation": "Since grid[0][0] is a mine, no plus sign can be formed, so the answer is 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximal-square",
                "title": "Maximal Square",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each direction such as \"left\", find left[r][c] = the number of 1s you will see before a zero starting at r, c and walking left.  You can find this in N^2 time with a dp.  The largest plus sign at r, c is just the minimum of left[r][c], up[r][c] etc."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int orderOfLargestPlusSign(int n, vector<vector<int>>& mines) {\n    vector<vector<int>> grid(n, vector<int>(n, n));\n\n    for (const vector<int>& mine : mines)\n      grid[mine[0]][mine[1]] = 0;\n\n    // Extend four directions, if meet 0, need to start over from 0\n    for (int i = 0; i < n; ++i) {\n      for (int j = 0, leftToRight = 0; j < n; ++j) {\n        leftToRight = (grid[i][j] == 0 ? 0 : leftToRight + 1);\n        grid[i][j] = min(grid[i][j], leftToRight);\n      }\n      for (int j = n - 1, rightToLeft = 0; j >= 0; --j) {\n        rightToLeft = (grid[i][j] == 0 ? 0 : rightToLeft + 1);\n        grid[i][j] = min(grid[i][j], rightToLeft);\n      }\n      for (int j = 0, upToDown = 0; j < n; ++j) {\n        upToDown = (grid[j][i] == 0 ? 0 : upToDown + 1);\n        grid[j][i] = min(grid[j][i], upToDown);\n      }\n      for (int j = n - 1, downToUp = 0; j >= 0; --j) {\n        downToUp = (grid[j][i] == 0) ? 0 : downToUp + 1;\n        grid[j][i] = min(grid[j][i], downToUp);\n      }\n    }\n\n    int ans = 0;\n\n    for (const vector<int>& row : grid)\n      ans = max(ans, *max_element(row.begin(), row.end()));\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int orderOfLargestPlusSign(int n, int[][] mines) {\n    int[][] grid = new int[n][n];\n    Arrays.stream(grid).forEach(row -> Arrays.fill(row, n));\n\n    for (int[] mine : mines)\n      grid[mine[0]][mine[1]] = 0;\n\n    // Extend four directions, if meet 0, need to start over from 0\n    for (int i = 0; i < n; ++i) {\n      for (int j = 0, leftToRight = 0; j < n; ++j) {\n        leftToRight = (grid[i][j] == 0 ? 0 : leftToRight + 1);\n        grid[i][j] = Math.min(grid[i][j], leftToRight);\n      }\n      for (int j = n - 1, rightToLeft = 0; j >= 0; --j) {\n        rightToLeft = (grid[i][j] == 0 ? 0 : rightToLeft + 1);\n        grid[i][j] = Math.min(grid[i][j], rightToLeft);\n      }\n      for (int j = 0, upToDown = 0; j < n; ++j) {\n        upToDown = (grid[j][i] == 0 ? 0 : upToDown + 1);\n        grid[j][i] = Math.min(grid[j][i], upToDown);\n      }\n      for (int j = n - 1, downToUp = 0; j >= 0; --j) {\n        downToUp = (grid[j][i] == 0) ? 0 : downToUp + 1;\n        grid[j][i] = Math.min(grid[j][i], downToUp);\n      }\n    }\n\n    int ans = 0;\n\n    for (int[] row : grid)\n      ans = Math.max(ans, Arrays.stream(row).max().getAsInt());\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}