{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2441",
            "title": "Largest Positive Integer That Exists With Its Negative",
            "titleSlug": "largest-positive-integer-that-exists-with-its-negative",
            "content": "<p>Given an integer array <code>nums</code> that <strong>does not contain</strong> any zeros, find <strong>the largest positive</strong> integer <code>k</code> such that <code>-k</code> also exists in the array.</p>\n\n<p>Return <em>the positive integer </em><code>k</code>. If there is no such integer, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,2,-3,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 3 is the only valid k we can find in the array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,10,6,7,-7,1]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-10,8,6,7,-2,-3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no a single valid k, we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>nums[i] != 0</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 481,
            "dislikes": 10,
            "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"54.6K\", \"totalSubmission\": \"80.3K\", \"totalAcceptedRaw\": 54565, \"totalSubmissionRaw\": 80326, \"acRate\": \"67.9%\"}",
            "hints": [
                "What data structure can help you to determine if an element exists?",
                "Would a hash table help?"
            ],
            "rephrased": {
                "body": "Given an integer array `nums` that contains no zeros, find the largest positive integer `k` such that `-k` also exists in the array.\n\nReturn the positive integer `k`. If no such integer exists, return -1.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "-1000 <= nums[i] <= 1000",
                    "nums[i] != 0"
                ],
                "testcases": [
                    {
                        "input": "[-1,2,-3,3]",
                        "output": "3",
                        "explanation": "The integer 3 is the only positive integer in the array for which its negative counterpart, -3, also exists. Therefore, the output is 3."
                    },
                    {
                        "input": "[-1,10,6,7,-7,1]",
                        "output": "7",
                        "explanation": "Both 1 and 7 have their corresponding negative values in the array. Since 7 is larger than 1, the largest valid 'k' is 7."
                    },
                    {
                        "input": "[-10,8,6,7,-2,-3]",
                        "output": "-1",
                        "explanation": "There is no positive integer in the array such that its negative counterpart also exists. Therefore, the output is -1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "two-sum",
                "title": "Two Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What data structure can help you to determine if an element exists?",
            "Would a hash table help?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findMaxK(vector<int>& nums) {\n    int ans = -1;\n    unordered_set<int> seen;\n\n    for (const int num : nums)\n      if (seen.count(-num))\n        ans = max(ans, abs(num));\n      else\n        seen.insert(num);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public int findMaxK(int[] nums) {\n    int ans = -1;\n    Set<Integer> seen = new HashSet<>();\n\n    for (final int num : nums)\n      if (seen.contains(-num))\n        ans = Math.max(ans, Math.abs(num));\n      else\n        seen.add(num);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMaxK(self, nums: List[int]) -> int:\n    ans = -1\n    seen = set()\n\n    for num in nums:\n      if -num in seen:\n        ans = max(ans, abs(num))\n      else:\n        seen.add(num)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}