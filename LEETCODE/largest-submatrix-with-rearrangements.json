{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1727",
            "title": "Largest Submatrix With Rearrangements",
            "titleSlug": "largest-submatrix-with-rearrangements",
            "content": "<p>You are given a binary matrix <code>matrix</code> of size <code>m x n</code>, and you are allowed to rearrange the <strong>columns</strong> of the <code>matrix</code> in any order.</p>\n\n<p>Return <em>the area of the largest submatrix within </em><code>matrix</code><em> where <strong>every</strong> element of the submatrix is </em><code>1</code><em> after reordering the columns optimally.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/29/screenshot-2020-12-30-at-40536-pm.png\" style=\"width: 500px; height: 240px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[0,0,1],[1,1,1],[1,0,1]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/29/screenshot-2020-12-30-at-40852-pm.png\" style=\"width: 500px; height: 62px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,0,1,0,1]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1,1,0],[1,0,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>matrix[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1827,
            "dislikes": 93,
            "similarQuestions": "[{\"title\": \"Max Area of Island\", \"titleSlug\": \"max-area-of-island\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"66.5K\", \"totalSubmission\": \"88K\", \"totalAcceptedRaw\": 66457, \"totalSubmissionRaw\": 87987, \"acRate\": \"75.5%\"}",
            "hints": [
                "For each column, find the number of consecutive ones ending at each position.",
                "For each row, sort the cumulative ones in non-increasing order and \"fit\" the largest submatrix."
            ],
            "rephrased": {
                "body": "Given a binary matrix `matrix` of size `m x n`, rearrange the columns in any order to maximize the area of a submatrix where all elements are 1. Return the maximum possible area of such a submatrix.",
                "constraints": [
                    "m == matrix.length",
                    "n == matrix[i].length",
                    "1 <= m * n <= 10^5",
                    "matrix[i][j] is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "[[0,0,1],[1,1,1],[1,0,1]]",
                        "output": "4",
                        "explanation": "By rearranging the columns, we can form a submatrix of size 2x2 containing only 1s, resulting in an area of 4. This is the maximum achievable area."
                    },
                    {
                        "input": "[[1,0,1,0,1]]",
                        "output": "3",
                        "explanation": "Rearranging the columns allows us to create a contiguous block of three 1s, giving a maximum submatrix area of 3x1 = 3."
                    },
                    {
                        "input": "[[1,1,0],[1,0,1]]",
                        "output": "2",
                        "explanation": "No rearrangement of columns can result in a submatrix with an area larger than 2, as the maximum contiguous block of 1s across both rows is of size 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "max-area-of-island",
                "title": "Max Area of Island",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each column, find the number of consecutive ones ending at each position.",
            "For each row, sort the cumulative ones in non-increasing order and \"fit\" the largest submatrix."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int largestSubmatrix(vector<vector<int>>& matrix) {\n    const int n = matrix[0].size();\n    int ans = 0;\n    vector<int> hist(n);\n\n    for (const vector<int>& row : matrix) {\n      // Accumulate the histogram if possible.\n      for (int i = 0; i < n; ++i)\n        hist[i] = row[i] == 0 ? 0 : hist[i] + 1;\n\n      // Get sorted histogram.\n      vector<int> sortedHist(hist);\n      std::ranges::sort(sortedHist);\n\n      // Greedily calculate the answer.\n      for (int i = 0; i < n; ++i)\n        ans = max(ans, sortedHist[i] * (n - i));\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int largestSubmatrix(int[][] matrix) {\n    final int n = matrix[0].length;\n    int ans = 0;\n    int[] hist = new int[n];\n\n    for (int[] row : matrix) {\n      // Accumulate the histogram if possible.\n      for (int i = 0; i < n; ++i)\n        hist[i] = row[i] == 0 ? 0 : hist[i] + 1;\n\n      // Get sorted histogram.\n      int[] sortedHist = hist.clone();\n      Arrays.sort(sortedHist);\n\n      // Greedily calculate the answer.\n      for (int i = 0; i < n; ++i)\n        ans = Math.max(ans, sortedHist[i] * (n - i));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestSubmatrix(self, matrix: List[List[int]]) -> int:\n    ans = 0\n    hist = [0] * len(matrix[0])\n\n    for row in matrix:\n      # Accumulate the histogram if possible.\n      for i, num in enumerate(row):\n        hist[i] = 0 if num == 0 else hist[i] + 1\n\n      # Get sorted histogram.\n      sortedHist = sorted(hist)\n\n      # Greedily calculate the answer.\n      for i, h in enumerate(sortedHist):\n        ans = max(ans, h * (len(row) - i))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}