{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "949",
            "title": "Largest Time for Given Digits",
            "titleSlug": "largest-time-for-given-digits",
            "content": "<p>Given an array <code>arr</code> of 4 digits, find the latest 24-hour time that can be made using each digit <strong>exactly once</strong>.</p>\n\n<p>24-hour times are formatted as <code>&quot;HH:MM&quot;</code>, where <code>HH</code> is between <code>00</code> and <code>23</code>, and <code>MM</code> is between <code>00</code> and <code>59</code>. The earliest 24-hour time is <code>00:00</code>, and the latest is <code>23:59</code>.</p>\n\n<p>Return <em>the latest 24-hour time in <code>&quot;HH:MM&quot;</code> format</em>. If no valid time can be made, return an empty string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3,4]\n<strong>Output:</strong> &quot;23:41&quot;\n<strong>Explanation:</strong> The valid 24-hour times are &quot;12:34&quot;, &quot;12:43&quot;, &quot;13:24&quot;, &quot;13:42&quot;, &quot;14:23&quot;, &quot;14:32&quot;, &quot;21:34&quot;, &quot;21:43&quot;, &quot;23:14&quot;, and &quot;23:41&quot;. Of these times, &quot;23:41&quot; is the latest.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [5,5,5,5]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> There are no valid 24-hour times as &quot;55:55&quot; is not valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>arr.length == 4</code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 9</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 685,
            "dislikes": 1042,
            "similarQuestions": "[{\"title\": \"Number of Valid Clock Times\", \"titleSlug\": \"number-of-valid-clock-times\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"83.9K\", \"totalSubmission\": \"238.6K\", \"totalAcceptedRaw\": 83878, \"totalSubmissionRaw\": 238629, \"acRate\": \"35.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array `arr` of 4 digits, find the latest valid 24-hour time that can be formed using each digit exactly once. The time should be in the format \"HH:MM\", where HH ranges from 00 to 23 and MM ranges from 00 to 59. Return the latest possible time as a string. If no valid time can be formed, return an empty string.",
                "constraints": [
                    "arr.length == 4",
                    "0 <= arr[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4]",
                        "output": "23:41",
                        "explanation": "Possible valid times include \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". \"23:41\" is the latest of these."
                    },
                    {
                        "input": "[5,5,5,5]",
                        "output": "",
                        "explanation": "No valid 24-hour time can be created using these digits, as \"55:55\" is not a valid time."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "number-of-valid-clock-times",
                "title": "Number of Valid Clock Times",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string largestTimeFromDigits(vector<int>& arr) {\n    string ans;\n\n    for (int i = 0; i < 4; ++i)\n      for (int j = 0; j < 4; ++j)\n        for (int k = 0; k < 4; ++k) {\n          if (i == j || i == k || j == k)\n            continue;\n          const string hours = to_string(arr[i]) + to_string(arr[j]);\n          const string minutes =\n              to_string(arr[k]) + to_string(arr[6 - i - j - k]);\n          if (hours < \"24\" && minutes < \"60\")\n            ans = max(ans, hours + ':' + minutes);\n        }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String largestTimeFromDigits(int[] arr) {\n    String ans = \"\";\n\n    for (int i = 0; i < 4; ++i)\n      for (int j = 0; j < 4; ++j)\n        for (int k = 0; k < 4; ++k) {\n          if (i == j || i == k || j == k)\n            continue;\n          final String hours = \"\" + arr[i] + arr[j];\n          final String minutes = \"\" + arr[k] + arr[6 - i - j - k];\n          final String time = hours + ':' + minutes;\n          if (hours.compareTo(\"24\") < 0 && minutes.compareTo(\"60\") < 0 && ans.compareTo(time) < 0)\n            ans = time;\n        }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestTimeFromDigits(self, arr: List[int]) -> str:\n    for time in itertools.permutations(sorted(arr, reverse=True)):\n      if time[:2] < (2, 4) and time[2] < 6:\n        return '%d%d:%d%d' % time\n    return ''\n",
                "lang_text": "py"
            }
        }
    }
}