{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1090",
            "title": "Largest Values From Labels",
            "titleSlug": "largest-values-from-labels",
            "content": "<p>There is a set of <code>n</code> items. You are given two integer arrays <code>values</code> and <code>labels</code> where the value and the label of the <code>i<sup>th</sup></code> element are <code>values[i]</code> and <code>labels[i]</code> respectively. You are also given two integers <code>numWanted</code> and <code>useLimit</code>.</p>\n\n<p>Choose a subset <code>s</code> of the <code>n</code> elements such that:</p>\n\n<ul>\n\t<li>The size of the subset <code>s</code> is <strong>less than or equal to</strong> <code>numWanted</code>.</li>\n\t<li>There are <strong>at most</strong> <code>useLimit</code> items with the same label in <code>s</code>.</li>\n</ul>\n\n<p>The <strong>score</strong> of a subset is the sum of the values in the subset.</p>\n\n<p>Return <em>the maximum <strong>score</strong> of a subset </em><code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The subset chosen is the first, third, and fifth items.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The subset chosen is the first, second, and third items.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> The subset chosen is the first and fourth items.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == values.length == labels.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= values[i], labels[i] &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= numWanted, useLimit &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 425,
            "dislikes": 621,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"36.2K\", \"totalSubmission\": \"58.6K\", \"totalAcceptedRaw\": 36159, \"totalSubmissionRaw\": 58636, \"acRate\": \"61.7%\"}",
            "hints": [
                "Consider the items in order from largest to smallest value, and greedily take the items if they fall under the use_limit.  We can keep track of how many items of each label are used by using a hash table."
            ],
            "rephrased": {
                "body": "Given a set of 'n' items, represented by two integer arrays, 'values' and 'labels'. 'values[i]' is the value and 'labels[i]' is the label of the i-th element. You are also given two integers, 'numWanted' and 'useLimit'.\n\nSelect a subset 's' of the 'n' items such that:\n\n1.  The size of the subset 's' is less than or equal to 'numWanted'.\n2.  There are at most 'useLimit' items with the same label in 's'.\n\nThe score of a subset is the sum of the values in the subset.\n\nReturn the maximum possible score of any valid subset 's'.",
                "constraints": [
                    "n == values.length == labels.length",
                    "1 <= n <= 2 * 10^4",
                    "0 <= values[i], labels[i] <= 2 * 10^4",
                    "1 <= numWanted, useLimit <= n"
                ],
                "testcases": [
                    {
                        "input": "values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1",
                        "output": "9",
                        "explanation": "The optimal subset consists of the items with values 5, 3, and 1, corresponding to the first, third, and fifth elements. The labels are 1, 2, and 3 respectively. The subset size is 3 (<= numWanted) and each label appears at most once (<= useLimit)."
                    },
                    {
                        "input": "values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2",
                        "output": "12",
                        "explanation": "The optimal subset consists of the items with values 5, 4, and 3, corresponding to the first, second, and third elements. The labels are 1, 3, and 3 respectively. The subset size is 3 (<= numWanted), label 1 appears once and label 3 appears twice (both <= useLimit)."
                    },
                    {
                        "input": "values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1",
                        "output": "16",
                        "explanation": "The optimal subset consists of the items with values 9 and 7. These correspond to the first and fourth elements with labels 0 and 1. The subset size is 2 (<= numWanted), labels 0 and 1 appear once each (<= useLimit)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Consider the items in order from largest to smallest value, and greedily take the items if they fall under the use_limit.  We can keep track of how many items of each label are used by using a hash table."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int largestValsFromLabels(vector<int>& values, vector<int>& labels,\n                            int num_wanted, int use_limit) {\n    const int n = values.size();\n    int ans = 0;\n    vector<pair<int, int>> items;\n    unordered_map<int, int> labelsUsed;\n\n    for (int i = 0; i < n; ++i)\n      items.emplace_back(values[i], labels[i]);\n\n    sort(items.begin(), items.end(),\n         [](const auto& a, const auto& b) { return a.first > b.first; });\n\n    for (const auto& [value, label] : items) {\n      if (labelsUsed[label] < use_limit) {\n        ans += value;\n        ++labelsUsed[label];\n        if (--num_wanted == 0)\n          break;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}