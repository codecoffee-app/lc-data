{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1970",
            "title": "Last Day Where You Can Still Cross",
            "titleSlug": "last-day-where-you-can-still-cross",
            "content": "<p>There is a <strong>1-based</strong> binary matrix where <code>0</code> represents land and <code>1</code> represents water. You are given integers <code>row</code> and <code>col</code> representing the number of rows and columns in the matrix, respectively.</p>\n\n<p>Initially on day <code>0</code>, the <strong>entire</strong> matrix is <strong>land</strong>. However, each day a new cell becomes flooded with <strong>water</strong>. You are given a <strong>1-based</strong> 2D array <code>cells</code>, where <code>cells[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> represents that on the <code>i<sup>th</sup></code> day, the cell on the <code>r<sub>i</sub><sup>th</sup></code> row and <code>c<sub>i</sub><sup>th</sup></code> column (<strong>1-based</strong> coordinates) will be covered with <strong>water</strong> (i.e., changed to <code>1</code>).</p>\n\n<p>You want to find the <strong>last</strong> day that it is possible to walk from the <strong>top</strong> to the <strong>bottom</strong> by only walking on land cells. You can start from <strong>any</strong> cell in the top row and end at <strong>any</strong> cell in the bottom row. You can only travel in the<strong> four</strong> cardinal directions (left, right, up, and down).</p>\n\n<p>Return <em>the <strong>last</strong> day where it is possible to walk from the <strong>top</strong> to the <strong>bottom</strong> by only walking on land cells</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/27/1.png\" style=\"width: 624px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/27/2.png\" style=\"width: 504px; height: 178px;\" />\n<pre>\n<strong>Input:</strong> row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/27/3.png\" style=\"width: 666px; height: 167px;\" />\n<pre>\n<strong>Input:</strong> row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= row, col &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>4 &lt;= row * col &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>cells.length == row * col</code></li>\n\t<li><code>1 &lt;= r<sub>i</sub> &lt;= row</code></li>\n\t<li><code>1 &lt;= c<sub>i</sub> &lt;= col</code></li>\n\t<li>All the values of <code>cells</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1833,
            "dislikes": 32,
            "similarQuestions": "[{\"title\": \"Bricks Falling When Hit\", \"titleSlug\": \"bricks-falling-when-hit\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Escape the Spreading Fire\", \"titleSlug\": \"escape-the-spreading-fire\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"53.9K\", \"totalSubmission\": \"86.6K\", \"totalAcceptedRaw\": 53900, \"totalSubmissionRaw\": 86618, \"acRate\": \"62.2%\"}",
            "hints": [
                "What graph algorithm allows us to find whether a path exists?",
                "Can we use binary search to help us solve the problem?"
            ],
            "rephrased": {
                "body": "Given a 1-based binary matrix of size row x col, where 0 represents land and 1 represents water, determine the last day it is possible to walk from the top row to the bottom row using only land cells.  Initially, the entire matrix is land. Each day, a cell becomes water based on the provided cells array, where cells[i] = [r_i, c_i] indicates the cell at row r_i and column c_i becomes water on the i-th day. Movement is restricted to the four cardinal directions (left, right, up, and down).",
                "constraints": [
                    "2 <= row, col <= 2 * 10^4",
                    "4 <= row * col <= 2 * 10^4",
                    "cells.length == row * col",
                    "1 <= r_i <= row",
                    "1 <= c_i <= col",
                    "All the values of cells are unique."
                ],
                "testcases": [
                    {
                        "input": "row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]",
                        "output": "2",
                        "explanation": "Initially all cells are land (0). On day 1, cell (1,1) becomes water. On day 2, cell (2,1) becomes water. At this point, it's still possible to walk from the top row to the bottom row using cell (1,2) and (2,2). On day 3, cell (1,2) becomes water. Finally, on day 4, cell (2,2) becomes water. The last day to cross is day 2."
                    },
                    {
                        "input": "row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]",
                        "output": "1",
                        "explanation": "Initially all cells are land (0). On day 1, cell (1,1) becomes water. At this point, it's still possible to walk from the top row to the bottom row using cells (1,2) and (2,2) or using (2,1) and (1,2). On day 2, cell (1,2) becomes water. Now only possible path is through (2,1) and (2,2), but on day 3 and 4 (2,1) and (2,2) becomes water. Hence last day to cross is 1"
                    },
                    {
                        "input": "row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]",
                        "output": "3",
                        "explanation": "Initially all cells are land (0). The cells become water one by one as the days progress. The last day where a path from top to bottom exists is day 3. On day 3, cells (1,2), (2,1), and (3,3) become water."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "bricks-falling-when-hit",
                "title": "Bricks Falling When Hit",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "escape-the-spreading-fire",
                "title": "Escape the Spreading Fire",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What graph algorithm allows us to find whether a path exists?",
            "Can we use binary search to help us solve the problem?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int latestDayToCross(int row, int col, vector<vector<int>>& cells) {\n    int ans = 0;\n    int l = 1;\n    int r = cells.size() - 1;\n\n    while (l <= r) {\n      const int m = (l + r) / 2;\n      if (canWalk(m, row, col, cells)) {\n        ans = m;\n        l = m + 1;\n      } else {\n        r = m - 1;\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  const vector<int> dirs{0, 1, 0, -1, 0};\n\n  bool canWalk(int day, int row, int col, const vector<vector<int>>& cells) {\n    vector<vector<int>> matrix(row, vector<int>(col));\n    for (int i = 0; i < day; ++i) {\n      const int x = cells[i][0] - 1;\n      const int y = cells[i][1] - 1;\n      matrix[x][y] = 1;\n    }\n\n    queue<pair<int, int>> q;\n\n    for (int j = 0; j < col; ++j)\n      if (matrix[0][j] == 0) {\n        q.emplace(0, j);\n        matrix[0][j] = 1;\n      }\n\n    while (!q.empty()) {\n      const auto [i, j] = q.front();\n      q.pop();\n      for (int k = 0; k < 4; ++k) {\n        const int x = i + dirs[k];\n        const int y = j + dirs[k + 1];\n        if (x < 0 || x == row || y < 0 || y == col)\n          continue;\n        if (matrix[x][y] == 1)\n          continue;\n        if (x == row - 1)\n          return true;\n        q.emplace(x, y);\n        matrix[x][y] = 1;\n      }\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int latestDayToCross(int row, int col, int[][] cells) {\n    int ans = 0;\n    int l = 1;\n    int r = cells.length - 1;\n\n    while (l <= r) {\n      final int m = (l + r) / 2;\n      if (canWalk(m, row, col, cells)) {\n        ans = m;\n        l = m + 1;\n      } else {\n        r = m - 1;\n      }\n    }\n\n    return ans;\n  }\n\n  private static final int[] dirs = {0, 1, 0, -1, 0};\n\n  private boolean canWalk(int day, int row, int col, int[][] cells) {\n    int[][] matrix = new int[row][col];\n    for (int i = 0; i < day; ++i) {\n      final int x = cells[i][0] - 1;\n      final int y = cells[i][1] - 1;\n      matrix[x][y] = 1;\n    }\n\n    Queue<int[]> q = new ArrayDeque<>();\n\n    for (int j = 0; j < col; ++j)\n      if (matrix[0][j] == 0) {\n        q.offer(new int[] {0, j});\n        matrix[0][j] = 1;\n      }\n\n    while (!q.isEmpty()) {\n      final int i = q.peek()[0];\n      final int j = q.poll()[1];\n      for (int k = 0; k < 4; ++k) {\n        final int x = i + dirs[k];\n        final int y = j + dirs[k + 1];\n        if (x < 0 || x == row || y < 0 || y == col)\n          continue;\n        if (matrix[x][y] == 1)\n          continue;\n        if (x == row - 1)\n          return true;\n        q.offer(new int[] {x, y});\n        matrix[x][y] = 1;\n      }\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n    dirs = [0, 1, 0, -1, 0]\n\n    def canWalk(day: int) -> bool:\n      matrix = [[0] * col for _ in range(row)]\n      for i in range(day):\n        x, y = cells[i]\n        matrix[x - 1][y - 1] = 1\n\n      q = collections.deque()\n\n      for j in range(col):\n        if matrix[0][j] == 0:\n          q.append((0, j))\n          matrix[0][j] = 1\n\n      while q:\n        i, j = q.popleft()\n        for k in range(4):\n          x = i + dirs[k]\n          y = j + dirs[k + 1]\n          if x < 0 or x == row or y < 0 or y == col:\n            continue\n          if matrix[x][y] == 1:\n            continue\n          if x == row - 1:\n            return True\n          q.append((x, y))\n          matrix[x][y] = 1\n\n      return False\n\n    ans = 0\n    l = 1\n    r = len(cells) - 1\n\n    while l <= r:\n      m = (l + r) // 2\n      if canWalk(m):\n        ans = m\n        l = m + 1\n      else:\n        r = m - 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}