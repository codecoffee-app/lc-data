{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1046",
            "title": "Last Stone Weight",
            "titleSlug": "last-stone-weight",
            "content": "<p>You are given an array of integers <code>stones</code> where <code>stones[i]</code> is the weight of the <code>i<sup>th</sup></code> stone.</p>\n\n<p>We are playing a game with the stones. On each turn, we choose the <strong>heaviest two stones</strong> and smash them together. Suppose the heaviest two stones have weights <code>x</code> and <code>y</code> with <code>x &lt;= y</code>. The result of this smash is:</p>\n\n<ul>\n\t<li>If <code>x == y</code>, both stones are destroyed, and</li>\n\t<li>If <code>x != y</code>, the stone of weight <code>x</code> is destroyed, and the stone of weight <code>y</code> has new weight <code>y - x</code>.</li>\n</ul>\n\n<p>At the end of the game, there is <strong>at most one</strong> stone left.</p>\n\n<p>Return <em>the weight of the last remaining stone</em>. If there are no stones left, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stones = [2,7,4,1,8,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that&#39;s the value of the last stone.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stones = [1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= stones.length &lt;= 30</code></li>\n\t<li><code>1 &lt;= stones[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5780,
            "dislikes": 99,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"556.9K\", \"totalSubmission\": \"854.4K\", \"totalAcceptedRaw\": 556854, \"totalSubmissionRaw\": 854364, \"acRate\": \"65.2%\"}",
            "hints": [
                "Simulate the process.  We can do it with a heap, or by sorting some list of stones every time we take a turn."
            ],
            "rephrased": {
                "body": "Given an array of integers `stones`, where `stones[i]` represents the weight of the i-th stone. In each turn, the two heaviest stones are chosen and smashed together.  If the two stones have weights `x` and `y` with `x <= y`, then:  If `x == y`, both stones are destroyed. If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has its weight updated to `y - x`.  Return the weight of the last remaining stone. If no stones are left, return 0.",
                "constraints": [
                    "1 <= stones.length <= 30",
                    "1 <= stones[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[2,7,4,1,8,1]",
                        "output": "1",
                        "explanation": "Initially, stones = [2,7,4,1,8,1]. 7 and 8 are combined to get 1, resulting in stones = [2,4,1,1,1,1]. Then 2 and 4 are combined to get 2, resulting in stones = [2,1,1,1,1]. After combining 2 and 1, we get stones = [1,1,1,1].  Combining 1 and 1 results in 0, leaving stones = [1,1]. The two 1s are combined resulting in 0. leaving us with stones = [1]. Thus, the last stone's weight is 1."
                    },
                    {
                        "input": "[1]",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Simulate the process.  We can do it with a heap, or by sorting some list of stones every time we take a turn."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int lastStoneWeight(vector<int>& stones) {\n    priority_queue<int> pq{stones.begin(), stones.end()};\n\n    while (pq.size() >= 2) {\n      const int n1 = pq.top();\n      pq.pop();\n      const int n2 = pq.top();\n      pq.pop();\n      if (n1 != n2)\n        pq.push(n1 - n2);\n    }\n\n    return pq.empty() ? 0 : pq.top();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int lastStoneWeight(int[] stones) {\n    Queue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n\n    for (final int stone : stones)\n      pq.offer(stone);\n\n    while (pq.size() >= 2) {\n      final int n1 = pq.poll();\n      final int n2 = pq.poll();\n      if (n1 != n2)\n        pq.offer(n1 - n2);\n    }\n\n    return pq.isEmpty() ? 0 : pq.peek();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def lastStoneWeight(self, stones: List[int]) -> int:\n    pq = [-stone for stone in stones]\n    heapq.heapify(pq)\n\n    while len(pq) >= 2:\n      n1 = -heapq.heappop(pq)\n      n2 = -heapq.heappop(pq)\n      if n1 != n2:\n        heapq.heappush(pq, -(n1 - n2))\n\n    return 0 if not pq else -pq[0]\n",
                "lang_text": "py"
            }
        }
    }
}