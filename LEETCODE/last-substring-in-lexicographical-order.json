{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1163",
            "title": "Last Substring in Lexicographical Order",
            "titleSlug": "last-substring-in-lexicographical-order",
            "content": "<p>Given a string <code>s</code>, return <em>the last substring of</em> <code>s</code> <em>in lexicographical order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abab&quot;\n<strong>Output:</strong> &quot;bab&quot;\n<strong>Explanation:</strong> The substrings are [&quot;a&quot;, &quot;ab&quot;, &quot;aba&quot;, &quot;abab&quot;, &quot;b&quot;, &quot;ba&quot;, &quot;bab&quot;]. The lexicographically maximum substring is &quot;bab&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leetcode&quot;\n<strong>Output:</strong> &quot;tcode&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 4 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 573,
            "dislikes": 444,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"33.5K\", \"totalSubmission\": \"96.6K\", \"totalAcceptedRaw\": 33451, \"totalSubmissionRaw\": 96572, \"acRate\": \"34.6%\"}",
            "hints": [
                "Assume that the answer is a sub-string from index i to j. If you add the character at index j+1 you get a better answer.",
                "The answer is always a suffix of the given string.",
                "Since the limits are high, we need an efficient data structure.",
                "Use suffix array."
            ],
            "rephrased": {
                "body": "Find the lexicographically largest substring within the given string 's'.  Return this substring.",
                "constraints": [
                    "1 <= s.length <= 4 * 10^5",
                    "s contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "abab",
                        "output": "bab",
                        "explanation": "The substring \"bab\" is the lexicographically largest among all substrings of \"abab\"."
                    },
                    {
                        "input": "leetcode",
                        "output": "tcode",
                        "explanation": "\"tcode\" is the lexicographically largest substring of \"leetcode\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Assume that the answer is a sub-string from index i to j. If you add the character at index j+1 you get a better answer.",
            "The answer is always a suffix of the given string.",
            "Since the limits are high, we need an efficient data structure.",
            "Use suffix array."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string lastSubstring(string s) {\n    int i = 0;\n    int j = 1;\n    int k = 0;  // Number of same characters of s[i:] and s[j:]\n\n    while (j + k < s.length()) {\n      if (s[i + k] == s[j + k]) {\n        ++k;\n      } else if (s[i + k] > s[j + k]) {\n        // Now s[i:i + k] == s[j:j + k] and s[i + k] > s[j + k] means that\n        // We should start from s[j + k] to find a possible larger substring\n        j += k + 1;\n        k = 0;\n      } else {\n        // Now s[i:i + k] == s[j:j + k] and s[i + k] < s[j + k] means that\n        // Either starting from s[i + k + 1] or s[j] has a larger substring\n        i = max(i + k + 1, j);\n        j = i + 1;\n        k = 0;\n      }\n    }\n\n    return s.substr(i);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String lastSubstring(String s) {\n    int i = 0;\n    int j = 1;\n    int k = 0; // Number of same characters of s[i:] and s[j:]\n\n    while (j + k < s.length()) {\n      if (s.charAt(i + k) == s.charAt(j + k)) {\n        ++k;\n      } else if (s.charAt(i + k) > s.charAt(j + k)) {\n        // Now s[i:i + k] == s[j:j + k] and s[i + k] > s[j + k] means that\n        // We should start from s.charAt(j + k) to find a possible larger substring\n        j += k + 1;\n        k = 0;\n      } else {\n        // Now s[i:i + k] == s[j:j + k] and s[i + k] < s[j + k] means that\n        // Either starting from s[i + k + 1] or s[j] has a larger substring\n        i = Math.max(i + k + 1, j);\n        j = i + 1;\n        k = 0;\n      }\n    }\n\n    return s.substring(i);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def lastSubstring(self, s: str) -> str:\n    i = 0\n    j = 1\n    k = 0  # Number of same characters of s[i:] and s[j:]\n\n    while j + k < len(s):\n      if s[i + k] == s[j + k]:\n        k += 1\n      elif s[i + k] > s[j + k]:\n        # Now s[i:i + k] == s[j:j + k] and s[i + k] > s[j + k] means that\n        # We should start from s[j + k] to find a possible larger substring\n        j += k + 1\n        k = 0\n      else:\n        # Now s[i:i + k] == s[j:j + k] and s[i + k] < s[j + k] means that\n        # Either starting from s[i + k + 1] or s[j] has a larger substring\n        i = max(i + k + 1, j)\n        j = i + 1\n        k = 0\n\n    return s[i:]\n",
                "lang_text": "py"
            }
        }
    }
}