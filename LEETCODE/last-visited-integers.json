{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2899",
            "title": "Last Visited Integers",
            "titleSlug": "last-visited-integers",
            "content": "<p>Given an integer array <code>nums</code> where <code>nums[i]</code> is either a positive integer or <code>-1</code>. We need to find for each <code>-1</code> the respective positive integer, which we call the last visited integer.</p>\n\n<p>To achieve this goal, let&#39;s define two empty arrays: <code>seen</code> and <code>ans</code>.</p>\n\n<p>Start iterating from the beginning of the array <code>nums</code>.</p>\n\n<ul>\n\t<li>If a positive integer is encountered, prepend it to the <strong>front</strong> of <code>seen</code>.</li>\n\t<li>If <code>-1</code>&nbsp;is encountered, let <code>k</code> be the number of <strong>consecutive</strong> <code>-1</code>s seen so far (including the current <code>-1</code>),\n\t<ul>\n\t\t<li>If <code>k</code> is less than or equal to the length of <code>seen</code>, append the <code>k</code>-th element of <code>seen</code> to <code>ans</code>.</li>\n\t\t<li>If <code>k</code> is strictly greater than the length of <code>seen</code>, append <code>-1</code> to <code>ans</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return the array<em> </em><code>ans</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,-1,-1,-1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,1,-1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Start with <code>seen = []</code> and <code>ans = []</code>.</p>\n\n<ol>\n\t<li>Process <code>nums[0]</code>: The first element in nums is <code>1</code>. We prepend it to the front of <code>seen</code>. Now, <code>seen == [1]</code>.</li>\n\t<li>Process <code>nums[1]</code>: The next element is <code>2</code>. We prepend it to the front of <code>seen</code>. Now, <code>seen == [2, 1]</code>.</li>\n\t<li>Process <code>nums[2]</code>: The next element is <code>-1</code>. This is the first occurrence of <code>-1</code>, so <code>k == 1</code>. We look for the first element in seen. We append <code>2</code> to <code>ans</code>. Now, <code>ans == [2]</code>.</li>\n\t<li>Process <code>nums[3]</code>: Another <code>-1</code>. This is the second consecutive <code>-1</code>, so <code>k == 2</code>. The second element in <code>seen</code> is <code>1</code>, so we append <code>1</code> to <code>ans</code>. Now, <code>ans == [2, 1]</code>.</li>\n\t<li>Process <code>nums[4]</code>: Another <code>-1</code>, the third in a row, making <code>k = 3</code>. However, <code>seen</code> only has two elements (<code>[2, 1]</code>). Since <code>k</code> is greater than the number of elements in <code>seen</code>, we append <code>-1</code> to <code>ans</code>. Finally, <code>ans == [2, 1, -1]</code>.</li>\n</ol>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,-1,2,-1,-1]</span></p>\n\n<p><strong>Output:</strong><span class=\"example-io\"> [1,2,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Start with <code>seen = []</code> and <code>ans = []</code>.</p>\n\n<ol>\n\t<li>Process <code>nums[0]</code>: The first element in nums is <code>1</code>. We prepend it to the front of <code>seen</code>. Now, <code>seen == [1]</code>.</li>\n\t<li>Process <code>nums[1]</code>: The next element is <code>-1</code>. This is the first occurrence of <code>-1</code>, so <code>k == 1</code>. We look for the first element in <code>seen</code>, which is <code>1</code>. Append <code>1</code> to <code>ans</code>. Now, <code>ans == [1]</code>.</li>\n\t<li>Process <code>nums[2]</code>: The next element is <code>2</code>. Prepend this to the front of <code>seen</code>. Now, <code>seen == [2, 1]</code>.</li>\n\t<li>Process <code>nums[3]</code>: The next element is <code>-1</code>. This <code>-1</code> is not consecutive to the first <code>-1</code> since <code>2</code> was in between. Thus, <code>k</code> resets to <code>1</code>. The first element in <code>seen</code> is <code>2</code>, so append <code>2</code> to <code>ans</code>. Now, <code>ans == [1, 2]</code>.</li>\n\t<li>Process <code>nums[4]</code>: Another <code>-1</code>. This is consecutive to the previous <code>-1</code>, so <code>k == 2</code>. The second element in <code>seen</code> is <code>1</code>, append <code>1</code> to <code>ans</code>. Finally, <code>ans == [1, 2, 1]</code>.</li>\n</ol>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>nums[i] == -1</code> or <code>1 &lt;= nums[i]&nbsp;&lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 152,
            "dislikes": 204,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.7K\", \"totalSubmission\": \"39K\", \"totalAcceptedRaw\": 25722, \"totalSubmissionRaw\": 39013, \"acRate\": \"65.9%\"}",
            "hints": [
                "It is sufficient to implement what the description is stating."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` where each element `nums[i]` is either a positive integer or `-1`, the goal is to create a new array `ans`. Iterate through `nums`. If a positive integer is encountered, add it to the beginning of another array called `seen`. If `-1` is encountered, determine `k`, the count of consecutive `-1`'s seen so far, including the current `-1`. If `k` is less than or equal to the length of `seen`, append the k-th element of `seen` to `ans`. Otherwise, if `k` is greater than the length of `seen`, append `-1` to `ans`. Return the `ans` array.",
                "constraints": [
                    "1 <= nums.length <= 100",
                    "nums[i] == -1 or 1 <= nums[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1,2,-1,-1,-1]",
                        "output": "[2,1,-1]",
                        "explanation": "Start with `seen = []` and `ans = []`. Process `nums[0] = 1`: `seen = [1]`. Process `nums[1] = 2`: `seen = [2, 1]`. Process `nums[2] = -1`: `k = 1`, `ans = [2]`. Process `nums[3] = -1`: `k = 2`, `ans = [2, 1]`. Process `nums[4] = -1`: `k = 3`, `ans = [2, 1, -1]`."
                    },
                    {
                        "input": "[1,-1,2,-1,-1]",
                        "output": "[1,2,1]",
                        "explanation": "Start with `seen = []` and `ans = []`. Process `nums[0] = 1`: `seen = [1]`. Process `nums[1] = -1`: `k = 1`, `ans = [1]`. Process `nums[2] = 2`: `seen = [2, 1]`. Process `nums[3] = -1`: `k = 1`, `ans = [1, 2]`. Process `nums[4] = -1`: `k = 2`, `ans = [1, 2, 1]`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "It is sufficient to implement what the description is stating."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> lastVisitedIntegers(vector<string>& words) {\n    vector<int> ans;\n    vector<int> nums;\n    int k = 0;\n\n    for (const string& word : words)\n      if (word == \"prev\") {\n        ++k;\n        ans.push_back(k > nums.size() ? -1 : nums[nums.size() - k]);\n      } else {\n        k = 0;\n        nums.push_back(stoi(word));\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> lastVisitedIntegers(List<String> words) {\n    List<Integer> ans = new ArrayList<>();\n    List<Integer> nums = new ArrayList<>();\n    int k = 0;\n\n    for (final String word : words)\n      if (word.equals(\"prev\")) {\n        ++k;\n        ans.add(k > nums.size() ? -1 : nums.get(nums.size() - k));\n      } else {\n        k = 0;\n        nums.add(Integer.valueOf(word));\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def lastVisitedIntegers(self, words: List[str]) -> List[int]:\n    ans = []\n    nums = []\n    k = 0\n\n    for word in words:\n      if word == 'prev':\n        k += 1\n        ans.append(-1 if k > len(nums) else nums[-k])\n      else:\n        k = 0\n        nums.append(int(word))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}