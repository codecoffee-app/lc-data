{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "872",
            "title": "Leaf-Similar Trees",
            "titleSlug": "leaf-similar-trees",
            "content": "<p>Consider all the leaves of a binary tree, from&nbsp;left to right order, the values of those&nbsp;leaves form a <strong>leaf value sequence</strong><em>.</em></p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\" style=\"width: 400px; height: 336px;\" /></p>\n\n<p>For example, in the given tree above, the leaf value sequence is <code>(6, 7, 4, 9, 8)</code>.</p>\n\n<p>Two binary trees are considered <em>leaf-similar</em>&nbsp;if their leaf value sequence is the same.</p>\n\n<p>Return <code>true</code> if and only if the two given trees with head nodes <code>root1</code> and <code>root2</code> are leaf-similar.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-1.jpg\" style=\"width: 600px; height: 237px;\" />\n<pre>\n<strong>Input:</strong> root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-2.jpg\" style=\"width: 300px; height: 110px;\" />\n<pre>\n<strong>Input:</strong> root1 = [1,2,3], root2 = [1,3,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each tree will be in the range <code>[1, 200]</code>.</li>\n\t<li>Both of the given trees will have values in the range <code>[0, 200]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3401,
            "dislikes": 75,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"315.6K\", \"totalSubmission\": \"464.4K\", \"totalAcceptedRaw\": 315560, \"totalSubmissionRaw\": 464426, \"acRate\": \"67.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two binary trees, determine if they are leaf-similar. Two binary trees are considered leaf-similar if their leaf value sequences (the sequence of leaf node values read from left to right) are the same.",
                "constraints": [
                    "The number of nodes in each tree will be in the range [1, 200].",
                    "Both of the given trees will have values in the range [0, 200]."
                ],
                "testcases": [
                    {
                        "input": "root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]",
                        "output": "true",
                        "explanation": "The leaf value sequence of root1 is (6, 7, 4, 9, 8). The leaf value sequence of root2 is (6, 7, 4, 9, 8). Since the sequences are the same, the trees are leaf-similar."
                    },
                    {
                        "input": "root1 = [1,2,3], root2 = [1,3,2]",
                        "output": "false",
                        "explanation": "The leaf value sequence of root1 is (2, 3). The leaf value sequence of root2 is (3, 2). Since the sequences are different, the trees are not leaf-similar."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n    vector<int> leaves1;\n    vector<int> leaves2;\n    dfs(root1, leaves1);\n    dfs(root2, leaves2);\n    return leaves1 == leaves2;\n  }\n\n  void dfs(TreeNode* root, vector<int>& leaves) {\n    if (root == nullptr)\n      return;\n    if (root->left == nullptr && root->right == nullptr) {\n      leaves.push_back(root->val);\n      return;\n    }\n\n    dfs(root->left, leaves);\n    dfs(root->right, leaves);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n    List<Integer> leaves1 = new ArrayList<>();\n    List<Integer> leaves2 = new ArrayList<>();\n    dfs(root1, leaves1);\n    dfs(root2, leaves2);\n    return leaves1.equals(leaves2);\n  }\n\n  public void dfs(TreeNode node, List<Integer> leaves) {\n    if (node == null)\n      return;\n    if (node.left == null && node.right == null) {\n      leaves.add(node.val);\n      return;\n    }\n\n    dfs(node.left, leaves);\n    dfs(node.right, leaves);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:\n    def dfs(root: Optional[TreeNode]) -> None:\n      if not root:\n        return\n      if not root.left and not root.right:\n        yield root.val\n        return\n\n      yield from dfs(root.left)\n      yield from dfs(root.right)\n\n    return list(dfs(root1)) == list(dfs(root2))\n",
                "lang_text": "py"
            }
        }
    }
}