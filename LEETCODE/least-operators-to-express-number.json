{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "964",
            "title": "Least Operators to Express Number",
            "titleSlug": "least-operators-to-express-number",
            "content": "<p>Given a single positive integer <code>x</code>, we will write an expression of the form <code>x (op1) x (op2) x (op3) x ...</code> where each operator <code>op1</code>, <code>op2</code>, etc. is either addition, subtraction, multiplication, or division (<code>+</code>, <code>-</code>, <code>*</code>, or <code>/)</code>. For example, with <code>x = 3</code>, we might write <code>3 * 3 / 3 + 3 - 3</code> which is a value of <font face=\"monospace\">3</font>.</p>\n\n<p>When writing such an expression, we adhere to the following conventions:</p>\n\n<ul>\n\t<li>The division operator (<code>/</code>) returns rational numbers.</li>\n\t<li>There are no parentheses placed anywhere.</li>\n\t<li>We use the usual order of operations: multiplication and division happen before addition and subtraction.</li>\n\t<li>It is not allowed to use the unary negation operator (<code>-</code>). For example, &quot;<code>x - x</code>&quot; is a valid expression as it only uses subtraction, but &quot;<code>-x + x</code>&quot; is not because it uses negation.</li>\n</ul>\n\n<p>We would like to write an expression with the least number of operators such that the expression equals the given <code>target</code>. Return the least number of operators used.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 3, target = 19\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> 3 * 3 + 3 * 3 + 3 / 3.\nThe expression contains 5 operations.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 5, target = 501\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\nThe expression contains 8 operations.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 100, target = 100000000\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 100 * 100 * 100 * 100.\nThe expression contains 3 operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= x &lt;= 100</code></li>\n\t<li><code>1 &lt;= target &lt;= 2 * 10<sup>8</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 311,
            "dislikes": 68,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.5K\", \"totalSubmission\": \"19.7K\", \"totalAcceptedRaw\": 9480, \"totalSubmissionRaw\": 19682, \"acRate\": \"48.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a positive integer `x`, construct an expression of the form `x (op1) x (op2) x (op3) x ...`, where `op1`, `op2`, etc., are addition (`+`), subtraction (`-`), multiplication (`*`), or division (`/`). The goal is to find the minimum number of operators required to achieve a target value. Division returns rational numbers. Standard order of operations applies (multiplication and division before addition and subtraction). Unary negation is not allowed (e.g., `-x + x` is invalid, but `x - x` is valid).",
                "constraints": [
                    "2 <= x <= 100",
                    "1 <= target <= 2 * 10^8"
                ],
                "testcases": [
                    {
                        "input": "x = 3, target = 19",
                        "output": "5",
                        "explanation": "The expression 3 * 3 + 3 * 3 + 3 / 3 equals 19 and contains 5 operations."
                    },
                    {
                        "input": "x = 5, target = 501",
                        "output": "8",
                        "explanation": "The expression 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5 equals 501 and contains 8 operations."
                    },
                    {
                        "input": "x = 100, target = 100000000",
                        "output": "3",
                        "explanation": "The expression 100 * 100 * 100 * 100 equals 100000000 and contains 3 operations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ]
    }
}