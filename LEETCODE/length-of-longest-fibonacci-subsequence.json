{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "873",
            "title": "Length of Longest Fibonacci Subsequence",
            "titleSlug": "length-of-longest-fibonacci-subsequence",
            "content": "<p>A sequence <code>x<sub>1</sub>, x<sub>2</sub>, ..., x<sub>n</sub></code> is <em>Fibonacci-like</em> if:</p>\n\n<ul>\n\t<li><code>n &gt;= 3</code></li>\n\t<li><code>x<sub>i</sub> + x<sub>i+1</sub> == x<sub>i+2</sub></code> for all <code>i + 2 &lt;= n</code></li>\n</ul>\n\n<p>Given a <b>strictly increasing</b> array <code>arr</code> of positive integers forming a sequence, return <em>the <strong>length</strong> of the longest Fibonacci-like subsequence of</em> <code>arr</code>. If one does not exist, return <code>0</code>.</p>\n\n<p>A <strong>subsequence</strong> is derived from another sequence <code>arr</code> by deleting any number of elements (including none) from <code>arr</code>, without changing the order of the remaining elements. For example, <code>[3, 5, 8]</code> is a subsequence of <code>[3, 4, 5, 6, 7, 8]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3,4,5,6,7,8]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The longest subsequence that is fibonacci-like: [1,2,3,5,8].</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,3,7,11,12,14,18]\n<strong>Output:</strong> 3\n<strong>Explanation</strong>:<strong> </strong>The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr[i] &lt; arr[i + 1] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1969,
            "dislikes": 67,
            "similarQuestions": "[{\"title\": \"Fibonacci Number\", \"titleSlug\": \"fibonacci-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"61.3K\", \"totalSubmission\": \"126.7K\", \"totalAcceptedRaw\": 61312, \"totalSubmissionRaw\": 126687, \"acRate\": \"48.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "A sequence of numbers is considered Fibonacci-like if it has at least three elements and each element is the sum of the two preceding elements (x[i] + x[i+1] == x[i+2]).  Given a strictly increasing array 'arr' of positive integers, find the length of the longest Fibonacci-like subsequence within 'arr'. If no such subsequence exists, return 0. A subsequence is derived from another sequence by deleting zero or more elements without changing the order of the remaining elements.",
                "constraints": [
                    "3 <= arr.length <= 1000",
                    "1 <= arr[i] < arr[i + 1] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4,5,6,7,8]",
                        "output": "5",
                        "explanation": "The longest Fibonacci-like subsequence is [1,2,3,5,8]."
                    },
                    {
                        "input": "[1,3,7,11,12,14,18]",
                        "output": "3",
                        "explanation": "Examples of longest Fibonacci-like subsequences are [1,11,12], [3,11,14], and [7,11,18]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "fibonacci-number",
                "title": "Fibonacci Number",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int lenLongestFibSubseq(vector<int>& arr) {\n    const int n = arr.size();\n    int ans = 0;\n    vector<vector<int>> dp(n, vector<int>(n, 2));\n    unordered_map<int, int> numToIndex;\n\n    for (int i = 0; i < n; ++i)\n      numToIndex[arr[i]] = i;\n\n    for (int j = 0; j < n; ++j)\n      for (int k = j + 1; k < n; ++k) {\n        const int ai = arr[k] - arr[j];\n        if (ai < arr[j] && numToIndex.count(ai)) {\n          const int i = numToIndex[ai];\n          dp[j][k] = dp[i][j] + 1;\n          ans = max(ans, dp[j][k]);\n        }\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int lenLongestFibSubseq(int[] arr) {\n    final int n = arr.length;\n    int ans = 0;\n    int[][] dp = new int[n][n];\n    Arrays.stream(dp).forEach(row -> Arrays.fill(row, 2));\n    Map<Integer, Integer> numToIndex = new HashMap<>();\n\n    for (int i = 0; i < n; ++i)\n      numToIndex.put(arr[i], i);\n\n    for (int j = 0; j < n; ++j)\n      for (int k = j + 1; k < n; ++k) {\n        final int ai = arr[k] - arr[j];\n        if (ai < arr[j] && numToIndex.containsKey(ai)) {\n          final int i = numToIndex.get(ai);\n          dp[j][k] = dp[i][j] + 1;\n          ans = Math.max(ans, dp[j][k]);\n        }\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def lenLongestFibSubseq(self, arr: List[int]) -> int:\n    n = len(arr)\n    ans = 0\n    numToIndex = {a: i for i, a in enumerate(arr)}\n    dp = [[2] * n for _ in range(n)]\n\n    for j in range(n):\n      for k in range(j + 1, n):\n        ai = arr[k] - arr[j]\n        if ai < arr[j] and ai in numToIndex:\n          i = numToIndex[ai]\n          dp[j][k] = dp[i][j] + 1\n          ans = max(ans, dp[j][k])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}