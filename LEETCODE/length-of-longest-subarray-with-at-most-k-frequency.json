{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2958",
            "title": "Length of Longest Subarray With at Most K Frequency",
            "titleSlug": "length-of-longest-subarray-with-at-most-k-frequency",
            "content": "<p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p>\n\n<p>The <strong>frequency</strong> of an element <code>x</code> is the number of times it occurs in an array.</p>\n\n<p>An array is called <strong>good</strong> if the frequency of each element in this array is <strong>less than or equal</strong> to <code>k</code>.</p>\n\n<p>Return <em>the length of the <strong>longest</strong> <strong>good</strong> subarray of</em> <code>nums</code><em>.</em></p>\n\n<p>A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1,2,3,1,2], k = 2\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The longest possible good subarray is [1,2,3,1,2,3] since the values 1, 2, and 3 occur at most twice in this subarray. Note that the subarrays [2,3,1,2,3,1] and [3,1,2,3,1,2] are also good.\nIt can be shown that there are no good subarrays with length more than 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,2,1,2,1,2], k = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest possible good subarray is [1,2] since the values 1 and 2 occur at most once in this subarray. Note that the subarray [2,1] is also good.\nIt can be shown that there are no good subarrays with length more than 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,5,5,5,5,5,5], k = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest possible good subarray is [5,5,5,5] since the value 5 occurs 4 times in this subarray.\nIt can be shown that there are no good subarrays with length more than 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1003,
            "dislikes": 31,
            "similarQuestions": "[{\"title\": \"Longest Substring with At Least K Repeating Characters\", \"titleSlug\": \"longest-substring-with-at-least-k-repeating-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"142.7K\", \"totalSubmission\": \"255.8K\", \"totalAcceptedRaw\": 142711, \"totalSubmissionRaw\": 255841, \"acRate\": \"55.8%\"}",
            "hints": [
                "For each index <code>i</code>, find the rightmost index <code>j >= i</code> such that the frequency of each element in the subarray <code>[i, j]</code> is at most <code>k</code>.",
                "We can use 2 pointers / sliding window to achieve it."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `k`, find the length of the longest good subarray of `nums`. A subarray is considered good if the frequency of each element within the subarray is less than or equal to `k`. The frequency of an element `x` is defined as the number of times it appears in the array. A subarray is a contiguous non-empty sequence of elements within an array.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^9",
                    "1 <= k <= nums.length"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3,1,2,3,1,2], k = 2",
                        "output": "6",
                        "explanation": "The longest good subarray is [1,2,3,1,2,3]. The frequency of 1, 2, and 3 is at most 2 in this subarray. No good subarray exists with a length greater than 6."
                    },
                    {
                        "input": "nums = [1,2,1,2,1,2,1,2], k = 1",
                        "output": "2",
                        "explanation": "The longest good subarray is [1,2]. The frequency of 1 and 2 is at most 1 in this subarray. No good subarray exists with a length greater than 2."
                    },
                    {
                        "input": "nums = [5,5,5,5,5,5,5], k = 4",
                        "output": "4",
                        "explanation": "The longest good subarray is [5,5,5,5]. The frequency of 5 is 4 in this subarray. No good subarray exists with a length greater than 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-substring-with-at-least-k-repeating-characters",
                "title": "Longest Substring with At Least K Repeating Characters",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each index <code>i</code>, find the rightmost index <code>j >= i</code> such that the frequency of each element in the subarray <code>[i, j]</code> is at most <code>k</code>.",
            "We can use 2 pointers / sliding window to achieve it."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxSubarrayLength(vector<int>& nums, int k) {\n    int ans = 0;\n    unordered_map<int, int> count;\n\n    for (int l = 0, r = 0; r < nums.size(); ++r) {\n      ++count[nums[r]];\n      while (count[nums[r]] == k + 1)\n        --count[nums[l++]];\n      ans = max(ans, r - l + 1);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxSubarrayLength(int[] nums, int k) {\n    int ans = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (int l = 0, r = 0; r < nums.length; ++r) {\n      count.merge(nums[r], 1, Integer::sum);\n      while (count.get(nums[r]) == k + 1)\n        count.merge(nums[l++], -1, Integer::sum);\n      ans = Math.max(ans, r - l + 1);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSubarrayLength(self, nums: List[int], k: int) -> int:\n    ans = 0\n    count = collections.Counter()\n\n    l = 0\n    for r, num in enumerate(nums):\n      count[num] += 1\n      while count[num] == k + 1:\n        count[nums[l]] -= 1\n        l += 1\n      ans = max(ans, r - l + 1)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}