{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3288",
            "title": "Length of the Longest Increasing Path",
            "titleSlug": "length-of-the-longest-increasing-path",
            "content": "<p>You are given a 2D array of integers <code>coordinates</code> of length <code>n</code> and an integer <code>k</code>, where <code>0 &lt;= k &lt; n</code>.</p>\n\n<p><code>coordinates[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> indicates the point <code>(x<sub>i</sub>, y<sub>i</sub>)</code> in a 2D plane.</p>\n\n<p>An <strong>increasing path</strong> of length <code>m</code> is defined as a list of points <code>(x<sub>1</sub>, y<sub>1</sub>)</code>, <code>(x<sub>2</sub>, y<sub>2</sub>)</code>, <code>(x<sub>3</sub>, y<sub>3</sub>)</code>, ..., <code>(x<sub>m</sub>, y<sub>m</sub>)</code> such that:</p>\n\n<ul>\n\t<li><code>x<sub>i</sub> &lt; x<sub>i + 1</sub></code> and <code>y<sub>i</sub> &lt; y<sub>i + 1</sub></code> for all <code>i</code> where <code>1 &lt;= i &lt; m</code>.</li>\n\t<li><code>(x<sub>i</sub>, y<sub>i</sub>)</code> is in the given coordinates for all <code>i</code> where <code>1 &lt;= i &lt;= m</code>.</li>\n</ul>\n\n<p>Return the <strong>maximum</strong> length of an <strong>increasing path</strong> that contains <code>coordinates[k]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">coordinates = [[3,1],[2,2],[4,1],[0,0],[5,3]], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>(0, 0)</code>, <code>(2, 2)</code>, <code>(5, 3)</code><!-- notionvc: 082cee9e-4ce5-4ede-a09d-57001a72141d --> is the longest increasing path that contains <code>(2, 2)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">coordinates = [[2,1],[7,0],[5,6]], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>(2, 1)</code>, <code>(5, 6)</code> is the longest increasing path that contains <code>(5, 6)</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == coordinates.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>coordinates[i].length == 2</code></li>\n\t<li><code>0 &lt;= coordinates[i][0], coordinates[i][1] &lt;= 10<sup>9</sup></code></li>\n\t<li>All elements in <code>coordinates</code> are <strong>distinct</strong>.<!-- notionvc: 6e412fc2-f9dd-4ba2-b796-5e802a2b305a --><!-- notionvc: c2cf5618-fe99-4909-9b4c-e6b068be22a6 --></li>\n\t<li><code>0 &lt;= k &lt;= n - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 78,
            "dislikes": 1,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.7K\", \"totalSubmission\": \"23.8K\", \"totalAcceptedRaw\": 3737, \"totalSubmissionRaw\": 23790, \"acRate\": \"15.7%\"}",
            "hints": [
                "Only keep coordinates with both <code>x</code> and <code>y</code> being strictly less than <code>coordinates[k]</code>.",
                "Sort them by <code>x</code>\u2019s, in the case of equal, the <code>y</code> values should be decreasing.",
                "Calculate LIS only using <code>y</code> values.",
                "Do the same for coordinates with both <code>x</code> and <code>y</code> being strictly larger than <code>coordinates[k]</code>."
            ],
            "rephrased": {
                "body": "Given a 2D array of integers `coordinates` of length `n` and an integer `k` (0 <= k < n), where `coordinates[i] = [x_i, y_i]` represents a point (x_i, y_i) in a 2D plane. An increasing path is a sequence of points (x_1, y_1), (x_2, y_2), ..., (x_m, y_m) such that x_i < x_{i+1} and y_i < y_{i+1} for all 1 <= i < m, and all (x_i, y_i) are in the given `coordinates`.  Find the maximum length of an increasing path that includes `coordinates[k]`.",
                "constraints": [
                    "1 <= n == coordinates.length <= 10^5",
                    "coordinates[i].length == 2",
                    "0 <= coordinates[i][0], coordinates[i][1] <= 10^9",
                    "All elements in coordinates are distinct.",
                    "0 <= k < n"
                ],
                "testcases": [
                    {
                        "input": "coordinates = [[3,1],[2,2],[4,1],[0,0],[5,3]], k = 1",
                        "output": "3",
                        "explanation": "The longest increasing path containing (2, 2) is (0, 0), (2, 2), (5, 3), which has a length of 3."
                    },
                    {
                        "input": "coordinates = [[2,1],[7,0],[5,6]], k = 2",
                        "output": "2",
                        "explanation": "The longest increasing path containing (5, 6) is (2, 1), (5, 6), which has a length of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Only keep coordinates with both <code>x</code> and <code>y</code> being strictly less than <code>coordinates[k]</code>.",
            "Sort them by <code>x</code>\u2019s, in the case of equal, the <code>y</code> values should be decreasing.",
            "Calculate LIS only using <code>y</code> values.",
            "Do the same for coordinates with both <code>x</code> and <code>y</code> being strictly larger than <code>coordinates[k]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxPathLength(vector<vector<int>>& coordinates, int k) {\n    const int xk = coordinates[k][0];\n    const int yk = coordinates[k][1];\n    vector<pair<int, int>> leftCoordinates;\n    vector<pair<int, int>> rightCoordinates;\n\n    for (const vector<int>& coordinate : coordinates) {\n      const int x = coordinate[0];\n      const int y = coordinate[1];\n      if (x < xk && y < yk)\n        leftCoordinates.emplace_back(x, y);\n      else if (x > xk && y > yk)\n        rightCoordinates.emplace_back(x, y);\n    }\n\n    return 1 + lengthOfLIS(leftCoordinates) + lengthOfLIS(rightCoordinates);\n  }\n\n private:\n  // Similar to 300. Longest Increasing Subsequence\n  int lengthOfLIS(vector<pair<int, int>>& coordinates) {\n    ranges::sort(coordinates, ranges::less{},\n                 [](const pair<int, int>& coordinate) {\n      return pair<int, int>{coordinate.first, -coordinate.second};\n    });\n    // tails[i] := the minimum tail of all the increasing subsequences having\n    // length i + 1\n    vector<int> tails;\n    for (const auto& [_, y] : coordinates)\n      if (tails.empty() || y > tails.back())\n        tails.push_back(y);\n      else\n        tails[firstGreaterEqual(tails, y)] = y;\n    return tails.size();\n  }\n\n  int firstGreaterEqual(const vector<int>& A, int target) {\n    return ranges::lower_bound(A, target) - A.begin();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxPathLength(int[][] coordinates, int k) {\n    final int xk = coordinates[k][0];\n    final int yk = coordinates[k][1];\n    List<int[]> leftCoordinates = new ArrayList<>();\n    List<int[]> rightCoordinates = new ArrayList<>();\n\n    for (int[] coordinate : coordinates) {\n      final int x = coordinate[0];\n      final int y = coordinate[1];\n      if (x < xk && y < yk)\n        leftCoordinates.add(new int[] {x, y});\n      else if (x > xk && y > yk)\n        rightCoordinates.add(new int[] {x, y});\n    }\n\n    return 1 + lengthOfLIS(leftCoordinates) + lengthOfLIS(rightCoordinates);\n  }\n\n  // Similar to 300. Longest Increasing Subsequence\n  private int lengthOfLIS(List<int[]> coordinates) {\n    coordinates.sort(\n        (a, b) -> a[0] == b[0] ? Integer.compare(b[1], a[1]) : Integer.compare(a[0], b[0]));\n    // tails[i] := the minimum tail of all the increasing subsequences having\n    // length i + 1\n    List<Integer> tails = new ArrayList<>();\n    for (int[] coordinate : coordinates) {\n      final int y = coordinate[1];\n      if (tails.isEmpty() || y > tails.get(tails.size() - 1))\n        tails.add(y);\n      else\n        tails.set(firstGreaterEqual(tails, y), y);\n    }\n    return tails.size();\n  }\n\n  private int firstGreaterEqual(List<Integer> A, int target) {\n    final int i = Collections.binarySearch(A, target);\n    return i < 0 ? -i - 1 : i;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxPathLength(self, coordinates: list[list[int]], k: int) -> int:\n    xk, yk = coordinates[k]\n    leftCoordinates = [(x, y) for x, y in coordinates if x < xk and y < yk]\n    rightCoordinates = [(x, y) for x, y in coordinates if x > xk and y > yk]\n    return (1 +\n            self._lengthOfLIS(leftCoordinates) +\n            self._lengthOfLIS(rightCoordinates))\n\n  # Similar to 300. Longest Increasing Subsequence\n  def _lengthOfLIS(self, coordinates: list[tuple[int, int]]) -> int:\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    # tail[i] := the minimum tail of all the increasing subsequences having\n    # length i + 1\n    tail = []\n    for _, y in coordinates:\n      if not tail or y > tail[-1]:\n        tail.append(y)\n      else:\n        tail[bisect.bisect_left(tail, y)] = y\n    return len(tail)\n",
                "lang_text": "py"
            }
        }
    }
}