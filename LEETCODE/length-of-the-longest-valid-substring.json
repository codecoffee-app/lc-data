{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2781",
            "title": "Length of the Longest Valid Substring",
            "titleSlug": "length-of-the-longest-valid-substring",
            "content": "<p>You are given a string <code>word</code> and an array of strings <code>forbidden</code>.</p>\n\n<p>A string is called <strong>valid</strong> if none of its substrings are present in <code>forbidden</code>.</p>\n\n<p>Return <em>the length of the <strong>longest valid substring</strong> of the string </em><code>word</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters in a string, possibly empty.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;cbaaaabc&quot;, forbidden = [&quot;aaa&quot;,&quot;cb&quot;]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are 11 valid substrings in word: &quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;ba&quot;, &quot;aa&quot;, &quot;bc&quot;, &quot;baa&quot;, &quot;aab&quot;, &quot;ab&quot;, &quot;abc&quot; and &quot;aabc&quot;. The length of the longest valid substring is 4. \nIt can be shown that all other substrings contain either &quot;aaa&quot; or &quot;cb&quot; as a substring. </pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;leetcode&quot;, forbidden = [&quot;de&quot;,&quot;le&quot;,&quot;e&quot;]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are 11 valid substrings in word: &quot;l&quot;, &quot;t&quot;, &quot;c&quot;, &quot;o&quot;, &quot;d&quot;, &quot;tc&quot;, &quot;co&quot;, &quot;od&quot;, &quot;tco&quot;, &quot;cod&quot;, and &quot;tcod&quot;. The length of the longest valid substring is 4.\nIt can be shown that all other substrings contain either &quot;de&quot;, &quot;le&quot;, or &quot;e&quot; as a substring. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n\t<li><code>1 &lt;= forbidden.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= forbidden[i].length &lt;= 10</code></li>\n\t<li><code>forbidden[i]</code> consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 538,
            "dislikes": 21,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"28.3K\", \"totalSubmission\": \"75.6K\", \"totalAcceptedRaw\": 28256, \"totalSubmissionRaw\": 75607, \"acRate\": \"37.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `word` and an array of strings `forbidden`, determine the length of the longest substring of `word` that does not contain any of the strings in `forbidden` as a substring. Such a substring is considered 'valid'.",
                "constraints": [
                    "1 <= word.length <= 10^5",
                    "word consists only of lowercase English letters.",
                    "1 <= forbidden.length <= 10^5",
                    "1 <= forbidden[i].length <= 10",
                    "forbidden[i] consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"]",
                        "output": "4",
                        "explanation": "The longest valid substring is \"aabc\", with a length of 4.  Substrings longer than this will contain either \"aaa\" or \"cb\"."
                    },
                    {
                        "input": "word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"]",
                        "output": "4",
                        "explanation": "The longest valid substring is \"tcod\", with a length of 4. Substrings longer than this will contain either \"de\", \"le\", or \"e\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestValidSubstring(string word, vector<string>& forbidden) {\n    int ans = 0;\n    unordered_set<string> forbiddenSet{forbidden.begin(), forbidden.end()};\n\n    // r is the rightmost index to make word[l..r] a valid substring.\n    int r = word.length() - 1;\n    for (int l = word.length() - 1; l >= 0; --l) {\n      for (int end = l; end < min(l + 10, r + 1); ++end)\n        if (forbiddenSet.count(word.substr(l, end - l + 1))) {\n          r = end - 1;\n          break;\n        }\n      ans = max(ans, r - l + 1);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestValidSubstring(String word, List<String> forbidden) {\n    int ans = 0;\n    Set<String> forbiddenSet = new HashSet<>(forbidden);\n\n    // r is the rightmost index to make word[l..r] a valid substring.\n    int r = word.length() - 1;\n    for (int l = word.length() - 1; l >= 0; --l) {\n      for (int end = l; end < Math.min(l + 10, r + 1); ++end)\n        if (forbiddenSet.contains(word.substring(l, end + 1))) {\n          r = end - 1;\n          break;\n        }\n      ans = Math.max(ans, r - l + 1);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestValidSubstring(self, word: str, forbidden: List[str]) -> int:\n    forbiddenSet = set(forbidden)\n    ans = 0\n    r = len(word) - 1  # rightmost index of the valid substring\n\n    for l in range(len(word) - 1, -1, -1):\n      for end in range(l, min(l + 10, r + 1)):\n        if word[l:end + 1] in forbiddenSet:\n          r = end - 1\n          break\n      ans = max(ans, r - l + 1)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}