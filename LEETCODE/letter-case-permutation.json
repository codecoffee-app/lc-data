{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "784",
            "title": "Letter Case Permutation",
            "titleSlug": "letter-case-permutation",
            "content": "<p>Given a string <code>s</code>, you&nbsp;can transform every letter individually to be lowercase or uppercase to create another string.</p>\n\n<p>Return <em>a list of all possible strings we could create</em>. Return the output in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a1b2&quot;\n<strong>Output:</strong> [&quot;a1b2&quot;,&quot;a1B2&quot;,&quot;A1b2&quot;,&quot;A1B2&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3z4&quot;\n<strong>Output:</strong> [&quot;3z4&quot;,&quot;3Z4&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 12</code></li>\n\t<li><code>s</code> consists of lowercase English letters, uppercase English letters, and digits.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4548,
            "dislikes": 153,
            "similarQuestions": "[{\"title\": \"Subsets\", \"titleSlug\": \"subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Brace Expansion\", \"titleSlug\": \"brace-expansion\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"289.4K\", \"totalSubmission\": \"390.8K\", \"totalAcceptedRaw\": 289448, \"totalSubmissionRaw\": 390782, \"acRate\": \"74.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s`, generate all possible strings by individually transforming each letter to either lowercase or uppercase. Return a list containing all such generated strings in any order.",
                "constraints": [
                    "1 <= s.length <= 12",
                    "s consists of lowercase English letters, uppercase English letters, and digits."
                ],
                "testcases": [
                    {
                        "input": "a1b2",
                        "output": "[\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]",
                        "explanation": null
                    },
                    {
                        "input": "3z4",
                        "output": "[\"3z4\",\"3Z4\"]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "subsets",
                "title": "Subsets",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "brace-expansion",
                "title": "Brace Expansion",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> letterCasePermutation(string s) {\n    vector<string> ans;\n    dfs(s, 0, ans);\n    return ans;\n  }\n\n private:\n  void dfs(string& s, int i, vector<string>& ans) {\n    if (i == s.length()) {\n      ans.push_back(s);\n      return;\n    }\n    if (isdigit(s[i])) {\n      dfs(s, i + 1, ans);\n      return;\n    }\n\n    s[i] = tolower(s[i]);\n    dfs(s, i + 1, ans);\n    s[i] = toupper(s[i]);\n    dfs(s, i + 1, ans);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> letterCasePermutation(String s) {\n    List<String> ans = new ArrayList<>();\n    dfs(new StringBuilder(s), 0, ans);\n    return ans;\n  }\n\n  private void dfs(StringBuilder sb, int i, List<String> ans) {\n    if (i == sb.length()) {\n      ans.add(sb.toString());\n      return;\n    }\n    if (Character.isDigit(sb.charAt(i))) {\n      dfs(sb, i + 1, ans);\n      return;\n    }\n\n    sb.setCharAt(i, Character.toLowerCase(sb.charAt(i)));\n    dfs(sb, i + 1, ans);\n    sb.setCharAt(i, Character.toUpperCase(sb.charAt(i)));\n    dfs(sb, i + 1, ans);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}