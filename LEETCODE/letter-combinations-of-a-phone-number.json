{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "17",
            "title": "Letter Combinations of a Phone Number",
            "titleSlug": "letter-combinations-of-a-phone-number",
            "content": "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p>\n\n<p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png\" style=\"width: 300px; height: 243px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;23&quot;\n<strong>Output:</strong> [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;&quot;\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;2&quot;\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= digits.length &lt;= 4</code></li>\n\t<li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 17719,
            "dislikes": 931,
            "similarQuestions": "[{\"title\": \"Generate Parentheses\", \"titleSlug\": \"generate-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Watch\", \"titleSlug\": \"binary-watch\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Number of Texts\", \"titleSlug\": \"count-number-of-texts\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"3.1M\", \"totalAcceptedRaw\": 1853956, \"totalSubmissionRaw\": 3120648, \"acRate\": \"59.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string containing digits from `2-9` inclusive, generate all possible letter combinations that the number could represent. Return the combinations in any order.\n\nThe mapping of digits to letters is based on a standard telephone keypad.",
                "constraints": [
                    "0 <= digits.length <= 4",
                    "digits[i] is a digit in the range ['2', '9']"
                ],
                "testcases": [
                    {
                        "input": "23",
                        "output": "[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]",
                        "explanation": null
                    },
                    {
                        "input": "",
                        "output": "[]",
                        "explanation": null
                    },
                    {
                        "input": "2",
                        "output": "[\"a\",\"b\",\"c\"]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "generate-parentheses",
                "title": "Generate Parentheses",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "combination-sum",
                "title": "Combination Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "binary-watch",
                "title": "Binary Watch",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-number-of-texts",
                "title": "Count Number of Texts",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> letterCombinations(string digits) {\n    if (digits.empty())\n      return {};\n\n    vector<string> ans;\n\n    dfs(digits, 0, \"\", ans);\n    return ans;\n  }\n\n private:\n  const vector<string> digitToLetters{\"\",    \"\",    \"abc\",  \"def\", \"ghi\",\n                                      \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n\n  void dfs(const string& digits, int i, string&& path, vector<string>& ans) {\n    if (i == digits.length()) {\n      ans.push_back(path);\n      return;\n    }\n\n    for (const char letter : digitToLetters[digits[i] - '0']) {\n      path.push_back(letter);\n      dfs(digits, i + 1, move(path), ans);\n      path.pop_back();\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> letterCombinations(String digits) {\n    if (digits.isEmpty())\n      return new ArrayList<>();\n\n    List<String> ans = new ArrayList<>();\n\n    dfs(digits, 0, new StringBuilder(), ans);\n    return ans;\n  }\n\n  private static final String[] digitToLetters = {\"\",    \"\",    \"abc\",  \"def\", \"ghi\",\n                                                  \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n\n  private void dfs(String digits, int i, StringBuilder sb, List<String> ans) {\n    if (i == digits.length()) {\n      ans.add(sb.toString());\n      return;\n    }\n\n    for (final char c : digitToLetters[digits.charAt(i) - '0'].toCharArray()) {\n      sb.append(c);\n      dfs(digits, i + 1, sb, ans);\n      sb.deleteCharAt(sb.length() - 1);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def letterCombinations(self, digits: str) -> List[str]:\n    if not digits:\n      return []\n\n    digitToLetters = ['', '', 'abc', 'def', 'ghi',\n                      'jkl', 'mno', 'pqrs', 'tuv', 'wxyz']\n    ans = []\n\n    def dfs(i: int, path: List[chr]) -> None:\n      if i == len(digits):\n        ans.append(''.join(path))\n        return\n\n      for letter in digitToLetters[ord(digits[i]) - ord('0')]:\n        path.append(letter)\n        dfs(i + 1, path)\n        path.pop()\n\n    dfs(0, [])\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}