{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1079",
            "title": "Letter Tile Possibilities",
            "titleSlug": "letter-tile-possibilities",
            "content": "<p>You have <code>n</code>&nbsp;&nbsp;<code>tiles</code>, where each tile has one letter <code>tiles[i]</code> printed on it.</p>\n\n<p>Return <em>the number of possible non-empty sequences of letters</em> you can make using the letters printed on those <code>tiles</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tiles = &quot;AAB&quot;\n<strong>Output:</strong> 8\n<strong>Explanation: </strong>The possible sequences are &quot;A&quot;, &quot;B&quot;, &quot;AA&quot;, &quot;AB&quot;, &quot;BA&quot;, &quot;AAB&quot;, &quot;ABA&quot;, &quot;BAA&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tiles = &quot;AAABBC&quot;\n<strong>Output:</strong> 188\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tiles = &quot;V&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tiles.length &lt;= 7</code></li>\n\t<li><code>tiles</code> consists of uppercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2417,
            "dislikes": 65,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"94.2K\", \"totalSubmission\": \"123.7K\", \"totalAcceptedRaw\": 94162, \"totalSubmissionRaw\": 123696, \"acRate\": \"76.1%\"}",
            "hints": [
                "Try to build the string with a backtracking DFS by considering what you can put in every position."
            ],
            "rephrased": {
                "body": "Given a string `tiles` representing a set of tiles, where each tile has one uppercase English letter printed on it, return the number of distinct non-empty sequences of letters that can be formed using these tiles.",
                "constraints": [
                    "1 <= tiles.length <= 7",
                    "tiles consists of uppercase English letters."
                ],
                "testcases": [
                    {
                        "input": "tiles = \"AAB\"",
                        "output": "8",
                        "explanation": "The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\"."
                    },
                    {
                        "input": "tiles = \"AAABBC\"",
                        "output": "188",
                        "explanation": null
                    },
                    {
                        "input": "tiles = \"V\"",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Try to build the string with a backtracking DFS by considering what you can put in every position."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numTilePossibilities(string tiles) {\n    vector<int> count(26);\n\n    for (const char t : tiles)\n      ++count[t - 'A'];\n\n    return dfs(count);\n  }\n\n private:\n  int dfs(vector<int>& count) {\n    int possibleSequences = 0;\n\n    for (int& c : count) {\n      if (c == 0)\n        continue;\n      // Put c in the current position. We only care about the # of possible\n      // sequences of letters but don't care about the actual combination.\n      --c;\n      possibleSequences += 1 + dfs(count);\n      ++c;\n    }\n\n    return possibleSequences;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numTilePossibilities(String tiles) {\n    int[] count = new int[26];\n\n    for (final char t : tiles.toCharArray())\n      ++count[t - 'A'];\n\n    return dfs(count);\n  }\n\n  private int dfs(int[] count) {\n    int possibleSequences = 0;\n\n    for (int i = 0; i < 26; ++i) {\n      if (count[i] == 0)\n        continue;\n      // Put c in the current position. We only care about the # of possible\n      // sequences of letters but don't care about the actual combination.\n      --count[i];\n      possibleSequences += 1 + dfs(count);\n      ++count[i];\n    }\n\n    return possibleSequences;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numTilePossibilities(self, tiles: str) -> int:\n    count = collections.Counter(tiles)\n\n    def dfs(count: Dict[int, int]) -> int:\n      possibleSequences = 0\n\n      for k, v in count.items():\n        if v == 0:\n          continue\n        # Put c in the current position. We only care about the # of possible\n        # sequences of letters but don't care about the actual combination.\n        count[k] -= 1\n        possibleSequences += 1 + dfs(count)\n        count[k] += 1\n\n      return possibleSequences\n\n    return dfs(count)\n",
                "lang_text": "py"
            }
        }
    }
}