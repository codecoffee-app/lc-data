{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3170",
            "title": "Lexicographically Minimum String After Removing Stars",
            "titleSlug": "lexicographically-minimum-string-after-removing-stars",
            "content": "<p>You are given a string <code>s</code>. It may contain any number of <code>&#39;*&#39;</code> characters. Your task is to remove all <code>&#39;*&#39;</code> characters.</p>\n\n<p>While there is a <code>&#39;*&#39;</code>, do the following operation:</p>\n\n<ul>\n\t<li>Delete the leftmost <code>&#39;*&#39;</code> and the <strong>smallest</strong> non-<code>&#39;*&#39;</code> character to its <em>left</em>. If there are several smallest characters, you can delete any of them.</li>\n</ul>\n\n<p>Return the <span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest</span> resulting string after removing all <code>&#39;*&#39;</code> characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;aaba*&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;aab&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We should delete one of the <code>&#39;a&#39;</code> characters with <code>&#39;*&#39;</code>. If we choose <code>s[3]</code>, <code>s</code> becomes the lexicographically smallest.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;abc&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no <code>&#39;*&#39;</code> in the string.<!-- notionvc: ff07e34f-b1d6-41fb-9f83-5d0ba3c1ecde --></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of lowercase English letters and <code>&#39;*&#39;</code>.</li>\n\t<li>The input is generated such that it is possible to delete all <code>&#39;*&#39;</code> characters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 174,
            "dislikes": 21,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.4K\", \"totalSubmission\": \"65.5K\", \"totalAcceptedRaw\": 23422, \"totalSubmissionRaw\": 65452, \"acRate\": \"35.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` containing lowercase English letters and '*' characters, remove all '*' characters using the following operation:\n\nWhile there is a '*', delete the leftmost '*' and the smallest non-'*' character to its left. If there are multiple smallest characters, any of them can be deleted.\n\nReturn the lexicographically smallest string after removing all '*' characters.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists only of lowercase English letters and '*'.",
                    "It is guaranteed that it is possible to delete all '*' characters."
                ],
                "testcases": [
                    {
                        "input": "aaba*",
                        "output": "aab",
                        "explanation": "Deleting the '*' at index 4 along with the 'a' at index 3 results in the lexicographically smallest string 'aab'."
                    },
                    {
                        "input": "abc",
                        "output": "abc",
                        "explanation": "Since there are no '*' characters in the input string, the output remains 'abc'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string clearStars(string s) {\n    string ans = s;\n    vector<vector<int>> buckets(26);\n\n    for (int i = 0; i < s.length(); ++i)\n      if (s[i] == '*') {\n        ans[i] = ' ';\n        int j = 0;\n        while (buckets[j].empty())\n          ++j;\n        ans[buckets[j].back()] = ' ', buckets[j].pop_back();\n      } else {\n        buckets[s[i] - 'a'].push_back(i);\n      }\n\n    std::erase(ans, ' ');\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String clearStars(String s) {\n    StringBuilder sb = new StringBuilder(s);\n    List<Integer>[] buckets = new List[26];\n\n    for (int i = 0; i < 26; ++i)\n      buckets[i] = new ArrayList<>();\n\n    for (int i = 0; i < s.length(); ++i)\n      if (s.charAt(i) == '*') {\n        sb.setCharAt(i, ' ');\n        int j = 0;\n        while (buckets[j].isEmpty())\n          ++j;\n        sb.setCharAt(buckets[j].remove(buckets[j].size() - 1), ' ');\n      } else {\n        buckets[s.charAt(i) - 'a'].add(i);\n      }\n\n    return sb.toString().replaceAll(\" \", \"\");\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def clearStars(self, s: str) -> str:\n    ans = list(s)\n    buckets = [[] for _ in range(26)]\n\n    for i, c in enumerate(s):\n      if c == '*':\n        ans[i] = ''\n        j = next(j for j, bucket in enumerate(buckets) if bucket)\n        ans[buckets[j].pop()] = ''\n      else:\n        buckets[ord(c) - ord('a')].append(i)\n\n    return ''.join(ans)\n",
                "lang_text": "py"
            }
        }
    }
}