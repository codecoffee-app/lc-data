{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2663",
            "title": "Lexicographically Smallest Beautiful String",
            "titleSlug": "lexicographically-smallest-beautiful-string",
            "content": "<p>A string is <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li>It consists of the first <code>k</code> letters of the English lowercase alphabet.</li>\n\t<li>It does not contain any substring of length <code>2</code> or more which is a palindrome.</li>\n</ul>\n\n<p>You are given a beautiful string <code>s</code> of length <code>n</code> and a positive integer <code>k</code>.</p>\n\n<p>Return <em>the lexicographically smallest string of length </em><code>n</code><em>, which is larger than </em><code>s</code><em> and is <strong>beautiful</strong></em>. If there is no such string, return an empty string.</p>\n\n<p>A string <code>a</code> is lexicographically larger than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, <code>a</code> has a character strictly larger than the corresponding character in <code>b</code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;abcd&quot;</code> is lexicographically larger than <code>&quot;abcc&quot;</code> because the first position they differ is at the fourth character, and <code>d</code> is greater than <code>c</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcz&quot;, k = 26\n<strong>Output:</strong> &quot;abda&quot;\n<strong>Explanation:</strong> The string &quot;abda&quot; is beautiful and lexicographically larger than the string &quot;abcz&quot;.\nIt can be proven that there is no string that is lexicographically larger than the string &quot;abcz&quot;, beautiful, and lexicographically smaller than the string &quot;abda&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;dc&quot;, k = 4\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> It can be proven that there is no string that is lexicographically larger than the string &quot;dc&quot; and is beautiful.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>4 &lt;= k &lt;= 26</code></li>\n\t<li><code>s</code> is a beautiful string.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 178,
            "dislikes": 16,
            "similarQuestions": "[{\"title\": \"Smallest String With Swaps\", \"titleSlug\": \"smallest-string-with-swaps\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Palindrome With Fixed Length\", \"titleSlug\": \"find-palindrome-with-fixed-length\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.4K\", \"totalSubmission\": \"12.2K\", \"totalAcceptedRaw\": 4413, \"totalSubmissionRaw\": 12154, \"acRate\": \"36.3%\"}",
            "hints": [
                "If the string does not contain any palindromic substrings of lengths 2 and 3, then the string does not contain any palindromic substrings at all.",
                "Iterate from right to left and if it is possible to increase character at index i without creating any palindromic substrings of lengths 2 and 3, then increase it.",
                "After increasing the character at index i, set every character after index i equal to character a. With this, we will ensure that we have created a lexicographically larger string than s, which does not contain any palindromes before index i and is lexicographically the smallest.",
                "Finally, we are just left with a case to fix palindromic substrings, which come after index i. This can be done with a similar method mentioned in the second hint."
            ],
            "rephrased": {
                "body": "Given a beautiful string `s` of length `n` and a positive integer `k`, find the lexicographically smallest string of length `n` that is larger than `s` and is also beautiful. A string is considered beautiful if it consists of the first `k` letters of the English lowercase alphabet and does not contain any palindrome substring of length 2 or more. If no such string exists, return an empty string.",
                "constraints": [
                    "1 <= n == s.length <= 10^5",
                    "4 <= k <= 26",
                    "s is a beautiful string."
                ],
                "testcases": [
                    {
                        "input": "s = \"abcz\", k = 26",
                        "output": "\"abda\"",
                        "explanation": "The string \"abda\" is beautiful and lexicographically larger than \"abcz\". There's no beautiful string lexicographically between \"abcz\" and \"abda\"."
                    },
                    {
                        "input": "s = \"dc\", k = 4",
                        "output": "\"\"",
                        "explanation": "There is no beautiful string larger than \"dc\" with the given constraints."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "smallest-string-with-swaps",
                "title": "Smallest String With Swaps",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-palindrome-with-fixed-length",
                "title": "Find Palindrome With Fixed Length",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If the string does not contain any palindromic substrings of lengths 2 and 3, then the string does not contain any palindromic substrings at all.",
            "Iterate from right to left and if it is possible to increase character at index i without creating any palindromic substrings of lengths 2 and 3, then increase it.",
            "After increasing the character at index i, set every character after index i equal to character a. With this, we will ensure that we have created a lexicographically larger string than s, which does not contain any palindromes before index i and is lexicographically the smallest.",
            "Finally, we are just left with a case to fix palindromic substrings, which come after index i. This can be done with a similar method mentioned in the second hint."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string smallestBeautifulString(string s, int k) {\n    for (int i = s.length() - 1; i >= 0; --i) {\n      do {\n        ++s[i];\n      } while (containsPalindrome(s, i));\n      if (s[i] < 'a' + k)\n        // If s[i] is among the first k letters, then change the letters after\n        // s[i] to the smallest ones that don't form any palindrome substring.\n        return changeSuffix(s, i + 1);\n    }\n\n    return \"\";\n  }\n\n private:\n  // Returns true if s[0..i] contains palindrome.\n  bool containsPalindrome(const string& s, int i) {\n    return (i > 0 && s[i] == s[i - 1]) || (i > 1 && s[i] == s[i - 2]);\n  }\n\n  // Returns string where s[i..] replaced with the smallest letters that don't\n  // form any palindrome substring.\n  string changeSuffix(string& s, int i) {\n    for (int j = i; j < s.length(); ++j)\n      for (s[j] = 'a'; containsPalindrome(s, j); ++s[j])\n        ;\n    return s;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public String smallestBeautifulString(String s, int k) {\n    StringBuilder sb = new StringBuilder(s);\n\n    for (int i = s.length() - 1; i >= 0; --i) {\n      do {\n        sb.setCharAt(i, (char) (sb.charAt(i) + 1));\n      } while (containsPalindrome(sb, i));\n      if (sb.charAt(i) < 'a' + k)\n        // If sb[i] is among the first k letters, then change the letters after\n        // sb[i] to the smallest ones that don't form any palindrome substring.\n        return changeSuffix(sb, i + 1);\n    }\n\n    return \"\";\n  }\n\n  // Returns true if sb[0..i] contains palindrome.\n  private boolean containsPalindrome(StringBuilder sb, int i) {\n    return (i > 0 && sb.charAt(i) == sb.charAt(i - 1)) ||\n        (i > 1 && sb.charAt(i) == sb.charAt(i - 2));\n  }\n\n  // Returns string where sb[i..] is replaced with the smallest letters that don't\n  // form any palindrome substring.\n  private String changeSuffix(StringBuilder sb, int i) {\n    for (int j = i; j < sb.length(); ++j)\n      for (sb.setCharAt(j, 'a'); containsPalindrome(sb, j);\n           sb.setCharAt(j, (char) (sb.charAt(j) + 1)))\n        ;\n    return sb.toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def smallestBeautifulString(self, s: str, k: int) -> str:\n    chars = list(s)\n\n    for i in reversed(range(len(chars))):\n      chars[i] = chr(ord(chars[i]) + 1)\n      while self._containsPalindrome(chars, i):\n        chars[i] = chr(ord(chars[i]) + 1)\n      if chars[i] < chr(ord('a') + k):\n        # If s[i] is among the first k letters, then change the letters after\n        # s[i] to the smallest ones that don't form any palindrome substring.\n        return self._changeSuffix(chars, i + 1)\n\n    return ''\n\n  # Returns true if chars[0..i] contains palindrome.\n  def _containsPalindrome(self, chars: List[str], i: int) -> bool:\n    return (i > 0 and chars[i] == chars[i - 1]) or \\\n        (i > 1 and chars[i] == chars[i - 2])\n\n  # Returns string where chars[i..] replaced with the smallest letters that\n  # don't form any palindrome substring.\n  def _changeSuffix(self, chars: List[str], i: int) -> str:\n    for j in range(i, len(chars)):\n      chars[j] = 'a'\n      while self._containsPalindrome(chars, j):\n        chars[j] = chr(ord(chars[j]) + 1)\n    return ''.join(chars)\n",
                "lang_text": "py"
            }
        }
    }
}