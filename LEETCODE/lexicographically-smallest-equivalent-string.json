{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1061",
            "title": "Lexicographically Smallest Equivalent String",
            "titleSlug": "lexicographically-smallest-equivalent-string",
            "content": "<p>You are given two strings of the same length <code>s1</code> and <code>s2</code> and a string <code>baseStr</code>.</p>\n\n<p>We say <code>s1[i]</code> and <code>s2[i]</code> are equivalent characters.</p>\n\n<ul>\n\t<li>For example, if <code>s1 = &quot;abc&quot;</code> and <code>s2 = &quot;cde&quot;</code>, then we have <code>&#39;a&#39; == &#39;c&#39;</code>, <code>&#39;b&#39; == &#39;d&#39;</code>, and <code>&#39;c&#39; == &#39;e&#39;</code>.</li>\n</ul>\n\n<p>Equivalent characters follow the usual rules of any equivalence relation:</p>\n\n<ul>\n\t<li><strong>Reflexivity:</strong> <code>&#39;a&#39; == &#39;a&#39;</code>.</li>\n\t<li><strong>Symmetry:</strong> <code>&#39;a&#39; == &#39;b&#39;</code> implies <code>&#39;b&#39; == &#39;a&#39;</code>.</li>\n\t<li><strong>Transitivity:</strong> <code>&#39;a&#39; == &#39;b&#39;</code> and <code>&#39;b&#39; == &#39;c&#39;</code> implies <code>&#39;a&#39; == &#39;c&#39;</code>.</li>\n</ul>\n\n<p>For example, given the equivalency information from <code>s1 = &quot;abc&quot;</code> and <code>s2 = &quot;cde&quot;</code>, <code>&quot;acd&quot;</code> and <code>&quot;aab&quot;</code> are equivalent strings of <code>baseStr = &quot;eed&quot;</code>, and <code>&quot;aab&quot;</code> is the lexicographically smallest equivalent string of <code>baseStr</code>.</p>\n\n<p>Return <em>the lexicographically smallest equivalent string of </em><code>baseStr</code><em> by using the equivalency information from </em><code>s1</code><em> and </em><code>s2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;parker&quot;, s2 = &quot;morris&quot;, baseStr = &quot;parser&quot;\n<strong>Output:</strong> &quot;makkek&quot;\n<strong>Explanation:</strong> Based on the equivalency information in s1 and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i].\nThe characters in each group are equivalent and sorted in lexicographical order.\nSo the answer is &quot;makkek&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;hello&quot;, s2 = &quot;world&quot;, baseStr = &quot;hold&quot;\n<strong>Output:</strong> &quot;hdld&quot;\n<strong>Explanation: </strong>Based on the equivalency information in s1 and s2, we can group their characters as [h,w], [d,e,o], [l,r].\nSo only the second letter &#39;o&#39; in baseStr is changed to &#39;d&#39;, the answer is &quot;hdld&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;leetcode&quot;, s2 = &quot;programs&quot;, baseStr = &quot;sourcecode&quot;\n<strong>Output:</strong> &quot;aauaaaaada&quot;\n<strong>Explanation:</strong> We group the equivalent characters in s1 and s2 as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in baseStr except &#39;u&#39; and &#39;d&#39; are transformed to &#39;a&#39;, the answer is &quot;aauaaaaada&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length, baseStr &lt;= 1000</code></li>\n\t<li><code>s1.length == s2.length</code></li>\n\t<li><code>s1</code>, <code>s2</code>, and <code>baseStr</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2274,
            "dislikes": 154,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                }
            ],
            "stats": "{\"totalAccepted\": \"75.7K\", \"totalSubmission\": \"99K\", \"totalAcceptedRaw\": 75694, \"totalSubmissionRaw\": 99020, \"acRate\": \"76.4%\"}",
            "hints": [
                "Model these equalities as edges of a graph.",
                "Group each connected component of the graph and assign each node of this component to the node with the lowest lexicographically character.",
                "Finally convert the string with the precalculated information."
            ],
            "rephrased": {
                "body": "Given two strings `s1` and `s2` of equal length and a string `baseStr`, where `s1[i]` and `s2[i]` represent equivalent characters. Define equivalence according to reflexivity, symmetry, and transitivity. Find the lexicographically smallest equivalent string of `baseStr` by using the equivalency information derived from `s1` and `s2`.",
                "constraints": [
                    "1 <= s1.length, s2.length, baseStr <= 1000",
                    "s1.length == s2.length",
                    "s1, s2, and baseStr consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": {
                            "s1": "parker",
                            "s2": "morris",
                            "baseStr": "parser"
                        },
                        "output": "makkek",
                        "explanation": "Characters can be grouped as [m,p], [a,o], [k,r,s], [e,i]. The characters in each group are equivalent, so 'p' becomes 'm', 'a' becomes 'a', 'r' becomes 'k', 's' becomes 'k', and 'e' becomes 'e'."
                    },
                    {
                        "input": {
                            "s1": "hello",
                            "s2": "world",
                            "baseStr": "hold"
                        },
                        "output": "hdld",
                        "explanation": "Characters can be grouped as [h,w], [d,e,o], [l,r]. The 'o' in baseStr is replaced by 'd' since 'd' is lexicographically smaller."
                    },
                    {
                        "input": {
                            "s1": "leetcode",
                            "s2": "programs",
                            "baseStr": "sourcecode"
                        },
                        "output": "aauaaaaada",
                        "explanation": "Characters can be grouped as [a,o,e,r,s,c], [l,p], [g,t] and [d,m]. All letters in baseStr belonging to the [a,o,e,r,s,c] are transformed to 'a'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Model these equalities as edges of a graph.",
            "Group each connected component of the graph and assign each node of this component to the node with the lowest lexicographically character.",
            "Finally convert the string with the precalculated information."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void union_(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i > j)\n      id[i] = j;\n    else\n      id[j] = i;\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n private:\n  vector<int> id;\n};\n\nclass Solution {\n public:\n  string smallestEquivalentString(string s1, string s2, string baseStr) {\n    string ans;\n    UnionFind uf(26);\n\n    for (int i = 0; i < s1.length(); ++i)\n      uf.union_(s1[i] - 'a', s2[i] - 'a');\n\n    for (const char c : baseStr)\n      ans += 'a' + uf.find(c - 'a');\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public void union(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i > j)\n      id[i] = j;\n    else\n      id[j] = i;\n  }\n\n  public int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n\n  private int[] id;\n}\n\nclass Solution {\n  public String smallestEquivalentString(String s1, String s2, String baseStr) {\n    StringBuilder sb = new StringBuilder();\n    UnionFind uf = new UnionFind(26);\n\n    for (int i = 0; i < s1.length(); ++i)\n      uf.union(s1.charAt(i) - 'a', s2.charAt(i) - 'a');\n\n    for (final char c : baseStr.toCharArray())\n      sb.append((char) ('a' + uf.find(c - 'a')));\n\n    return sb.toString();\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}