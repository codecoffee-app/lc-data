{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2697",
            "title": "Lexicographically Smallest Palindrome",
            "titleSlug": "lexicographically-smallest-palindrome",
            "content": "<p>You are given a string <code node=\"[object Object]\">s</code> consisting of <strong>lowercase English letters</strong>, and you are allowed to perform operations on it. In one operation, you can <strong>replace</strong> a character in <code node=\"[object Object]\">s</code> with another lowercase English letter.</p>\n\n<p>Your task is to make <code node=\"[object Object]\">s</code> a <strong>palindrome</strong> with the <strong>minimum</strong> <strong>number</strong> <strong>of operations</strong> possible. If there are <strong>multiple palindromes</strong> that can be <meta charset=\"utf-8\" />made using the <strong>minimum</strong> number of operations, <meta charset=\"utf-8\" />make the <strong>lexicographically smallest</strong> one.</p>\n\n<p>A string <code>a</code> is lexicographically smaller than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>.</p>\n\n<p>Return <em>the resulting palindrome string.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;egcfe&quot;\n<strong>Output:</strong> &quot;efcfe&quot;\n<strong>Explanation:</strong> The minimum number of operations to make &quot;egcfe&quot; a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is &quot;efcfe&quot;, by changing &#39;g&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;\n<strong>Output:</strong> &quot;abba&quot;\n<strong>Explanation:</strong> The minimum number of operations to make &quot;abcd&quot; a palindrome is 2, and the lexicographically smallest palindrome string we can get by modifying two characters is &quot;abba&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;seven&quot;\n<strong>Output:</strong> &quot;neven&quot;\n<strong>Explanation:</strong> The minimum number of operations to make &quot;seven&quot; a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is &quot;neven&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code>&nbsp;consists of only lowercase English letters<b>.</b></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 305,
            "dislikes": 15,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"38.3K\", \"totalSubmission\": \"47.6K\", \"totalAcceptedRaw\": 38335, \"totalSubmissionRaw\": 47599, \"acRate\": \"80.5%\"}",
            "hints": [
                "We can make any string a palindrome, by simply making any character at index i equal to the character at index length - i - 1 (using 0-based indexing).",
                "To make it lexicographically smallest we can change the character with maximum ASCII value to the one with minimum ASCII value."
            ],
            "rephrased": {
                "body": "Given a string `s` consisting of lowercase English letters, the goal is to transform it into a palindrome using the minimum number of operations. In each operation, you can replace a character in `s` with another lowercase English letter. If multiple palindromes can be formed with the minimum number of operations, return the lexicographically smallest one.",
                "constraints": [
                    "1 <= s.length <= 1000",
                    "s consists of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "egcfe",
                        "output": "efcfe",
                        "explanation": "The minimum number of operations to make \"egcfe\" a palindrome is 1.  Changing 'g' to 'f' results in the lexicographically smallest palindrome, \"efcfe\"."
                    },
                    {
                        "input": "abcd",
                        "output": "abba",
                        "explanation": "The minimum number of operations to make \"abcd\" a palindrome is 2. The lexicographically smallest palindrome achievable is \"abba\"."
                    },
                    {
                        "input": "seven",
                        "output": "neven",
                        "explanation": "The minimum number of operations to make \"seven\" a palindrome is 1. The lexicographically smallest palindrome achievable is \"neven\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "We can make any string a palindrome, by simply making any character at index i equal to the character at index length - i - 1 (using 0-based indexing).",
            "To make it lexicographically smallest we can change the character with maximum ASCII value to the one with minimum ASCII value."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string makeSmallestPalindrome(string s) {\n    for (int i = 0, j = s.length() - 1; i < j; ++i, --j) {\n      const int minChar = min(s[i], s[j]);\n      s[i] = minChar;\n      s[j] = minChar;\n    }\n    return s;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String makeSmallestPalindrome(String s) {\n    char[] chars = s.toCharArray();\n    for (int i = 0, j = s.length() - 1; i < j; ++i, --j) {\n      final char minChar = (char) Math.min(chars[i], chars[j]);\n      chars[i] = minChar;\n      chars[j] = minChar;\n    }\n    return new String(chars);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def makeSmallestPalindrome(self, s: str) -> str:\n    chars = list(s)\n    i = 0\n    j = len(s) - 1\n\n    while i < j:\n      minChar = min(chars[i], chars[j])\n      chars[i] = minChar\n      chars[j] = minChar\n      i += 1\n      j -= 1\n\n    return ''.join(chars)\n",
                "lang_text": "py"
            }
        }
    }
}