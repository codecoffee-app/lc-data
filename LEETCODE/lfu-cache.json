{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "460",
            "title": "LFU Cache",
            "titleSlug": "lfu-cache",
            "content": "<p>Design and implement a data structure for a <a href=\"https://en.wikipedia.org/wiki/Least_frequently_used\" target=\"_blank\">Least Frequently Used (LFU)</a> cache.</p>\n\n<p>Implement the <code>LFUCache</code> class:</p>\n\n<ul>\n\t<li><code>LFUCache(int capacity)</code> Initializes the object with the <code>capacity</code> of the data structure.</li>\n\t<li><code>int get(int key)</code> Gets the value of the <code>key</code> if the <code>key</code> exists in the cache. Otherwise, returns <code>-1</code>.</li>\n\t<li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if present, or inserts the <code>key</code> if not already present. When the cache reaches its <code>capacity</code>, it should invalidate and remove the <strong>least frequently used</strong> key before inserting a new item. For this problem, when there is a <strong>tie</strong> (i.e., two or more keys with the same frequency), the <strong>least recently used</strong> <code>key</code> would be invalidated.</li>\n</ul>\n\n<p>To determine the least frequently used key, a <strong>use counter</strong> is maintained for each key in the cache. The key with the smallest <strong>use counter</strong> is the least frequently used key.</p>\n\n<p>When a key is first inserted into the cache, its <strong>use counter</strong> is set to <code>1</code> (due to the <code>put</code> operation). The <strong>use counter</strong> for a key in the cache is incremented either a <code>get</code> or <code>put</code> operation is called on it.</p>\n\n<p>The functions&nbsp;<code data-stringify-type=\"code\">get</code>&nbsp;and&nbsp;<code data-stringify-type=\"code\">put</code>&nbsp;must each run in <code>O(1)</code> average time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;LFUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\n<strong>Output</strong>\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n\n<strong>Explanation</strong>\n// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n&nbsp;                // cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= capacity&nbsp;&lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= key &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= value &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>2 * 10<sup>5</sup></code>&nbsp;calls will be made to <code>get</code> and <code>put</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<span style=\"display: none;\">&nbsp;</span>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5453,
            "dislikes": 322,
            "similarQuestions": "[{\"title\": \"LRU Cache\", \"titleSlug\": \"lru-cache\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design In-Memory File System\", \"titleSlug\": \"design-in-memory-file-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Doubly-Linked List",
                    "slug": "doubly-linked-list"
                }
            ],
            "stats": "{\"totalAccepted\": \"235.6K\", \"totalSubmission\": \"537.7K\", \"totalAcceptedRaw\": 235552, \"totalSubmissionRaw\": 537749, \"acRate\": \"43.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design and implement a Least Frequently Used (LFU) cache. The cache should have a fixed capacity and support the following operations:\n\n*   `LFUCache(int capacity)`: Initializes the LFU cache with the given capacity.\n*   `int get(int key)`: Retrieves the value associated with the key if it exists in the cache. Returns -1 if the key is not found.\n*   `void put(int key, int value)`: Updates the value of the key if it exists. If the key is not present, it inserts the key-value pair into the cache. When the cache reaches its capacity, the least frequently used key should be removed before inserting the new key. In case of a tie in frequency, the least recently used key is evicted.",
                "constraints": [
                    "1 <= capacity <= 10^4",
                    "0 <= key <= 10^5",
                    "0 <= value <= 10^9",
                    "At most 2 * 10^5 calls will be made to get and put."
                ],
                "testcases": [
                    {
                        "input": "[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]",
                        "output": "[null, null, null, 1, null, -1, 3, null, -1, 3, 4]",
                        "explanation": "LFUCache with capacity 2.\nput(1, 1): Cache is [1]. Frequency(1) = 1\nput(2, 2): Cache is [2, 1]. Frequency(2) = 1, Frequency(1) = 1\nget(1): Returns 1. Cache is [1, 2]. Frequency(1) = 2, Frequency(2) = 1\nput(3, 3): Evicts 2 (LFU, LRU). Cache is [3, 1]. Frequency(3) = 1, Frequency(1) = 2\nget(2): Returns -1 (not found).\nget(3): Returns 3. Cache is [3, 1]. Frequency(3) = 2, Frequency(1) = 2\nput(4, 4): Evicts 1 (LFU, LRU). Cache is [4, 3]. Frequency(4) = 1, Frequency(3) = 2\nget(1): Returns -1 (not found).\nget(3): Returns 3. Cache is [3, 4]. Frequency(3) = 3, Frequency(4) = 1\nget(4): Returns 4. Cache is [4, 3]. Frequency(4) = 2, Frequency(3) = 3"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "lru-cache",
                "title": "LRU Cache",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "design-in-memory-file-system",
                "title": "Design In-Memory File System",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Doubly-Linked List",
                "slug": "doubly-linked-list"
            }
        ]
    }
}