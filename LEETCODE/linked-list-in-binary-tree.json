{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1367",
            "title": "Linked List in Binary Tree",
            "titleSlug": "linked-list-in-binary-tree",
            "content": "<p>Given a binary tree <code>root</code> and a&nbsp;linked list with&nbsp;<code>head</code>&nbsp;as the first node.&nbsp;</p>\n\n<p>Return True if all the elements in the linked list starting from the <code>head</code> correspond to some <em>downward path</em> connected in the binary tree&nbsp;otherwise return False.</p>\n\n<p>In this context downward path means a path that starts at some node and goes downwards.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/sample_1_1720.png\" style=\"width: 220px; height: 280px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Nodes in blue form a subpath in the binary Tree.  \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/sample_2_1720.png\" style=\"width: 220px; height: 280px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no path in the binary tree that contains all the elements of the linked list from <code>head</code>.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree will be in the range <code>[1, 2500]</code>.</li>\n\t<li>The number of nodes in the list will be in the range <code>[1, 100]</code>.</li>\n\t<li><code>1 &lt;= Node.val&nbsp;&lt;= 100</code>&nbsp;for each node in the linked list and binary tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2168,
            "dislikes": 65,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"71.8K\", \"totalSubmission\": \"163.8K\", \"totalAcceptedRaw\": 71798, \"totalSubmissionRaw\": 163756, \"acRate\": \"43.8%\"}",
            "hints": [
                "Create recursive function, given a pointer in a Linked List and any node in the Binary Tree. Check if all the elements in the linked list starting from the head correspond to some downward path in the binary tree."
            ],
            "rephrased": {
                "body": "Given a binary tree `root` and a linked list with `head` as the first node, determine if there exists a downward path in the binary tree that matches the values in the linked list, starting from the `head`. A downward path is a sequence of connected nodes moving from a parent to a child.",
                "constraints": [
                    "The number of nodes in the tree will be in the range `[1, 2500]`.",
                    "The number of nodes in the list will be in the range `[1, 100]`.",
                    "`1 <= Node.val <= 100` for each node in the linked list and binary tree."
                ],
                "testcases": [
                    {
                        "input": "head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
                        "output": "true",
                        "explanation": "The linked list [4, 2, 8] forms a subpath in the binary tree, starting from the node with value 4 and moving downwards."
                    },
                    {
                        "input": "head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
                        "output": "true",
                        "explanation": null
                    },
                    {
                        "input": "head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
                        "output": "false",
                        "explanation": "There is no downward path in the binary tree that contains all the elements of the linked list from `head`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Create recursive function, given a pointer in a Linked List and any node in the Binary Tree. Check if all the elements in the linked list starting from the head correspond to some downward path in the binary tree."
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isSubPath(ListNode* head, TreeNode* root) {\n    if (root == nullptr)\n      return false;\n    return isContinuousSubPath(head, root) || isSubPath(head, root->left) ||\n           isSubPath(head, root->right);\n  }\n\n private:\n  bool isContinuousSubPath(ListNode* head, TreeNode* root) {\n    if (head == nullptr)\n      return true;\n    if (root == nullptr)\n      return false;\n    return head->val == root->val &&\n           (isContinuousSubPath(head->next, root->left) ||\n            isContinuousSubPath(head->next, root->right));\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isSubPath(ListNode head, TreeNode root) {\n    if (root == null)\n      return false;\n    return isContinuousSubPath(head, root) || isSubPath(head, root.left) ||\n        isSubPath(head, root.right);\n  }\n\n  private boolean isContinuousSubPath(ListNode head, TreeNode root) {\n    if (head == null)\n      return true;\n    if (root == null)\n      return false;\n    return head.val == root.val &&\n        (isContinuousSubPath(head.next, root.left) || isContinuousSubPath(head.next, root.right));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isSubPath(self, head: Optional[ListNode], root: Optional[TreeNode]) -> bool:\n    if not root:\n      return False\n    return self._isContinuousSubPath(head, root) or \\\n        self.isSubPath(head, root.left) or \\\n        self.isSubPath(head, root.right)\n\n  def _isContinuousSubPath(self, head: Optional[ListNode], root: Optional[TreeNode]) -> bool:\n    if not head:\n      return True\n    if not root:\n      return False\n    return head.val == root.val and \\\n        (self._isContinuousSubPath(head.next, root.left)\n         or self._isContinuousSubPath(head.next, root.right))\n",
                "lang_text": "py"
            }
        }
    }
}