{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "382",
            "title": "Linked List Random Node",
            "titleSlug": "linked-list-random-node",
            "content": "<p>Given a singly linked list, return a random node&#39;s value from the linked list. Each node must have the <strong>same probability</strong> of being chosen.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(ListNode head)</code> Initializes the object with the head of the singly-linked list <code>head</code>.</li>\n\t<li><code>int getRandom()</code> Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/16/getrand-linked-list.jpg\" style=\"width: 302px; height: 62px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;]\n[[[1, 2, 3]], [], [], [], [], []]\n<strong>Output</strong>\n[null, 1, 3, 2, 2, 3]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the linked list will be in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>getRandom</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>What if the linked list is extremely large and its length is unknown to you?</li>\n\t<li>Could you solve this efficiently without using extra space?</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3018,
            "dislikes": 696,
            "similarQuestions": "[{\"title\": \"Random Pick Index\", \"titleSlug\": \"random-pick-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Reservoir Sampling",
                    "slug": "reservoir-sampling"
                },
                {
                    "name": "Randomized",
                    "slug": "randomized"
                }
            ],
            "stats": "{\"totalAccepted\": \"234.9K\", \"totalSubmission\": \"373K\", \"totalAcceptedRaw\": 234867, \"totalSubmissionRaw\": 372989, \"acRate\": \"63.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a singly linked list, design an algorithm to return a random node's value. Each node in the list must have an equal probability of being chosen.\n\nImplement a `Solution` class with the following methods:\n\n*   `Solution(ListNode head)`: Initializes the object with the head of the singly-linked list `head`.\n*   `int getRandom()`: Chooses a node randomly from the list and returns its value. All nodes must have an equal probability of being selected.",
                "constraints": [
                    "The number of nodes in the linked list will be in the range `[1, 10<sup>4</sup>]`.",
                    "`-10<sup>4</sup> <= Node.val <= 10<sup>4</sup>`",
                    "At most `10<sup>4</sup>` calls will be made to `getRandom`."
                ],
                "testcases": [
                    {
                        "input": "[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n[[[1, 2, 3]], [], [], [], [], []]",
                        "output": "[null, 1, 3, 2, 2, 3]",
                        "explanation": "A `Solution` object is initialized with the linked list [1, 2, 3]. Subsequent calls to `getRandom()` should each return either 1, 2, or 3 with equal probability. The example output demonstrates a possible sequence of returned values."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "random-pick-index",
                "title": "Random Pick Index",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Reservoir Sampling",
                "slug": "reservoir-sampling"
            },
            {
                "name": "Randomized",
                "slug": "randomized"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  /** @param head The linked list's head.\n      Note that the head is guaranteed to be not null, so it contains at least\n     one node. */\n  Solution(ListNode* head) : head(head) {}\n\n  /** Returns a random node's value. */\n  int getRandom() {\n    int ans = -1;\n    int i = 1;\n\n    for (ListNode* curr = head; curr; curr = curr->next, ++i)\n      if (rand() % i == 0)\n        ans = curr->val;\n\n    return ans;\n  }\n\n private:\n  ListNode* head;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  /**\n   * @param head The linked list's head. Note that the head is guaranteed to be\n   *             not null, so it contains at least one node.\n   */\n  public Solution(ListNode head) {\n    this.head = head;\n  }\n\n  /** Returns a random node's value. */\n  public int getRandom() {\n    int ans = -1;\n    int i = 1;\n\n    for (ListNode curr = head; curr != null; curr = curr.next, ++i)\n      if (rand.nextInt(i) == i - 1)\n        ans = curr.val;\n\n    return ans;\n  }\n\n  private ListNode head;\n  private Random rand = new Random();\n}\n",
                "lang_text": "java"
            }
        }
    }
}