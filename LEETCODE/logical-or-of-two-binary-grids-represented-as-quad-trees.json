{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "558",
            "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
            "titleSlug": "logical-or-of-two-binary-grids-represented-as-quad-trees",
            "content": "<p>A Binary Matrix is a matrix in which all the elements are either <strong>0</strong> or <strong>1</strong>.</p>\n\n<p>Given <code>quadTree1</code> and <code>quadTree2</code>. <code>quadTree1</code> represents a <code>n * n</code> binary matrix and <code>quadTree2</code> represents another <code>n * n</code> binary matrix.</p>\n\n<p>Return <em>a Quad-Tree</em> representing the <code>n * n</code> binary matrix which is the result of <strong>logical bitwise OR</strong> of the two binary matrixes represented by <code>quadTree1</code> and <code>quadTree2</code>.</p>\n\n<p>Notice that you can assign the value of a node to <strong>True</strong> or <strong>False</strong> when <code>isLeaf</code> is <strong>False</strong>, and both are <strong>accepted</strong> in the answer.</p>\n\n<p>A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:</p>\n\n<ul>\n\t<li><code>val</code>: True if the node represents a grid of 1&#39;s or False if the node represents a grid of 0&#39;s.</li>\n\t<li><code>isLeaf</code>: True if the node is leaf node on the tree or False if the node has the four children.</li>\n</ul>\n\n<pre>\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}</pre>\n\n<p>We can construct a Quad-Tree from a two-dimensional area using the following steps:</p>\n\n<ol>\n\t<li>If the current grid has the same value (i.e all <code>1&#39;s</code> or all <code>0&#39;s</code>) set <code>isLeaf</code> True and set <code>val</code> to the value of the grid and set the four children to Null and stop.</li>\n\t<li>If the current grid has different values, set <code>isLeaf</code> to False and set <code>val</code> to any value and divide the current grid into four sub-grids as shown in the photo.</li>\n\t<li>Recurse for each of the children with the proper sub-grid.</li>\n</ol>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/new_top.png\" style=\"width: 777px; height: 181px;\" />\n<p>If you want to know more about the Quad-Tree, you can refer to the <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>.</p>\n\n<p><strong>Quad-Tree format:</strong></p>\n\n<p>The input/output represents the serialized format of a Quad-Tree using level order traversal, where <code>null</code> signifies a path terminator where no node exists below.</p>\n\n<p>It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list <code>[isLeaf, val]</code>.</p>\n\n<p>If the value of <code>isLeaf</code> or <code>val</code> is True we represent it as <strong>1</strong> in the list <code>[isLeaf, val]</code> and if the value of <code>isLeaf</code> or <code>val</code> is False we represent it as <strong>0</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qt1.png\" style=\"width: 550px; height: 196px;\" /> <img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qt2.png\" style=\"width: 550px; height: 278px;\" />\n<pre>\n<strong>Input:</strong> quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n<strong>Output:</strong> [[0,0],[1,1],[1,1],[1,1],[1,0]]\n<strong>Explanation:</strong> quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\nNotice that the binary matrices shown are only for illustration, you don&#39;t have to construct the binary matrix to get the result tree.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qtr.png\" style=\"width: 777px; height: 222px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> quadTree1 = [[1,0]], quadTree2 = [[1,0]]\n<strong>Output:</strong> [[1,0]]\n<strong>Explanation:</strong> Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\nThe resulting matrix is of size 1*1 with also zero.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>quadTree1</code> and <code>quadTree2</code> are both <strong>valid</strong> Quad-Trees each representing a <code>n * n</code> grid.</li>\n\t<li><code>n == 2<sup>x</sup></code> where <code>0 &lt;= x &lt;= 9</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 181,
            "dislikes": 468,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.9K\", \"totalSubmission\": \"28.3K\", \"totalAcceptedRaw\": 13909, \"totalSubmissionRaw\": 28306, \"acRate\": \"49.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two Quad-Trees, `quadTree1` and `quadTree2`, representing `n x n` binary matrices, return a Quad-Tree representing the bitwise OR of the two matrices.\n\nA Quad-Tree is a tree where each internal node has four children and two attributes:\n\n*   `val`: True if the node represents a grid of 1s, False if it represents a grid of 0s.\n*   `isLeaf`: True if the node is a leaf node, False if it has children.\n\nConstruct a Quad-Tree from a two-dimensional area as follows:\n\n1.  If the current grid has the same value (all 1s or all 0s), set `isLeaf` to True, `val` to the grid's value, and children to Null.\n2.  If the current grid has different values, set `isLeaf` to False, `val` to any value, and divide the grid into four sub-grids.\n3.  Recurse on each sub-grid.\n\n**Note:** You can assign the value of a node to either True or False when `isLeaf` is False.  Both are accepted in the answer.",
                "constraints": [
                    "quadTree1 and quadTree2 are valid Quad-Trees each representing an n * n grid.",
                    "n == 2<sup>x</sup> where 0 <= x <= 9."
                ],
                "testcases": [
                    {
                        "input": "quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]], quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
                        "output": "[[0,0],[1,1],[1,1],[1,1],[1,0]]",
                        "explanation": "The resulting Quad-Tree represents the bitwise OR of the binary matrices represented by quadTree1 and quadTree2."
                    },
                    {
                        "input": "quadTree1 = [[1,0]], quadTree2 = [[1,0]]",
                        "output": "[[1,0]]",
                        "explanation": "Each tree represents a binary matrix of size 1x1 containing only zero. The resulting matrix is also 1x1 with zero."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Tree",
                "slug": "tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  Node* intersect(Node* quadTree1, Node* quadTree2) {\n    if (quadTree1->isLeaf)\n      return quadTree1->val ? quadTree1 : quadTree2;\n    if (quadTree2->isLeaf)\n      return quadTree2->val ? quadTree2 : quadTree1;\n\n    Node* topLeft = intersect(quadTree1->topLeft, quadTree2->topLeft);\n    Node* topRight = intersect(quadTree1->topRight, quadTree2->topRight);\n    Node* bottomLeft = intersect(quadTree1->bottomLeft, quadTree2->bottomLeft);\n    Node* bottomRight =\n        intersect(quadTree1->bottomRight, quadTree2->bottomRight);\n\n    if (topLeft->val == topRight->val &&        //\n        topLeft->val == bottomLeft->val &&      //\n        topLeft->val == bottomRight->val &&     //\n        topLeft->isLeaf && topRight->isLeaf &&  //\n        bottomLeft->isLeaf && bottomRight->isLeaf)\n      return new Node(topLeft->val, true);\n    return new Node(false, false, topLeft, topRight, bottomLeft, bottomRight);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public Node intersect(Node quadTree1, Node quadTree2) {\n    if (quadTree1.isLeaf)\n      return quadTree1.val ? quadTree1 : quadTree2;\n    if (quadTree2.isLeaf)\n      return quadTree2.val ? quadTree2 : quadTree1;\n\n    Node topLeft = intersect(quadTree1.topLeft, quadTree2.topLeft);\n    Node topRight = intersect(quadTree1.topRight, quadTree2.topRight);\n    Node bottomLeft = intersect(quadTree1.bottomLeft, quadTree2.bottomLeft);\n    Node bottomRight = intersect(quadTree1.bottomRight, quadTree2.bottomRight);\n\n    if (topLeft.val == topRight.val &&       //\n        topLeft.val == bottomLeft.val &&     //\n        topLeft.val == bottomRight.val &&    //\n        topLeft.isLeaf && topRight.isLeaf && //\n        bottomLeft.isLeaf && bottomRight.isLeaf)\n      return new Node(topLeft.val, true);\n    return new Node(false, false, topLeft, topRight, bottomLeft, bottomRight);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}