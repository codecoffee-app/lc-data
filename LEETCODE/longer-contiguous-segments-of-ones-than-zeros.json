{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1869",
            "title": "Longer Contiguous Segments of Ones than Zeros",
            "titleSlug": "longer-contiguous-segments-of-ones-than-zeros",
            "content": "<p>Given a binary string <code>s</code>, return <code>true</code><em> if the <strong>longest</strong> contiguous segment of </em><code>1</code>&#39;<em>s is <strong>strictly longer</strong> than the <strong>longest</strong> contiguous segment of </em><code>0</code>&#39;<em>s in </em><code>s</code>, or return <code>false</code><em> otherwise</em>.</p>\n\n<ul>\n\t<li>For example, in <code>s = &quot;<u>11</u>01<u>000</u>10&quot;</code> the longest continuous segment of <code>1</code>s has length <code>2</code>, and the longest continuous segment of <code>0</code>s has length <code>3</code>.</li>\n</ul>\n\n<p>Note that if there are no <code>0</code>&#39;s, then the longest continuous segment of <code>0</code>&#39;s is considered to have a length <code>0</code>. The same applies if there is no <code>1</code>&#39;s.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1101&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nThe longest contiguous segment of 1s has length 2: &quot;<u>11</u>01&quot;\nThe longest contiguous segment of 0s has length 1: &quot;11<u>0</u>1&quot;\nThe segment of 1s is longer, so return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;111000&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong>\nThe longest contiguous segment of 1s has length 3: &quot;<u>111</u>000&quot;\nThe longest contiguous segment of 0s has length 3: &quot;111<u>000</u>&quot;\nThe segment of 1s is not longer, so return false.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;110100010&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong>\nThe longest contiguous segment of 1s has length 2: &quot;<u>11</u>0100010&quot;\nThe longest contiguous segment of 0s has length 3: &quot;1101<u>000</u>10&quot;\nThe segment of 1s is not longer, so return false.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 499,
            "dislikes": 13,
            "similarQuestions": "[{\"title\": \"Max Consecutive Ones\", \"titleSlug\": \"max-consecutive-ones\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Subarrays With More Ones Than Zeros\", \"titleSlug\": \"count-subarrays-with-more-ones-than-zeros\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check if Binary String Has at Most One Segment of Ones\", \"titleSlug\": \"check-if-binary-string-has-at-most-one-segment-of-ones\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"44K\", \"totalSubmission\": \"72.5K\", \"totalAcceptedRaw\": 44006, \"totalSubmissionRaw\": 72539, \"acRate\": \"60.7%\"}",
            "hints": [
                "Check every possible segment of 0s and 1s.",
                "Is there a way to iterate through the string to keep track of the current character and its count?"
            ],
            "rephrased": {
                "body": "Given a binary string `s`, determine if the length of the longest contiguous segment of `1`s is strictly greater than the length of the longest contiguous segment of `0`s. Return `true` if it is, and `false` otherwise. If either `0`s or `1`s are absent, consider their longest segment to have a length of 0.",
                "constraints": [
                    "1 <= s.length <= 100",
                    "s[i] is either '0' or '1'."
                ],
                "testcases": [
                    {
                        "input": "1101",
                        "output": true,
                        "explanation": "The longest contiguous segment of 1s has length 2. The longest contiguous segment of 0s has length 1. Since 2 > 1, return true."
                    },
                    {
                        "input": "111000",
                        "output": false,
                        "explanation": "The longest contiguous segment of 1s has length 3. The longest contiguous segment of 0s has length 3. Since 3 is not greater than 3, return false."
                    },
                    {
                        "input": "110100010",
                        "output": false,
                        "explanation": "The longest contiguous segment of 1s has length 2. The longest contiguous segment of 0s has length 3. Since 2 is not greater than 3, return false."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "max-consecutive-ones",
                "title": "Max Consecutive Ones",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-subarrays-with-more-ones-than-zeros",
                "title": "Count Subarrays With More Ones Than Zeros",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "check-if-binary-string-has-at-most-one-segment-of-ones",
                "title": "Check if Binary String Has at Most One Segment of Ones",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Check every possible segment of 0s and 1s.",
            "Is there a way to iterate through the string to keep track of the current character and its count?"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            }
        ]
    }
}