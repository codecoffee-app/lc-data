{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2765",
            "title": "Longest Alternating Subarray",
            "titleSlug": "longest-alternating-subarray",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. A subarray <code>s</code> of length <code>m</code> is called <strong>alternating</strong> if:</p>\n\n<ul>\n\t<li><code>m</code> is greater than <code>1</code>.</li>\n\t<li><code>s<sub>1</sub> = s<sub>0</sub> + 1</code>.</li>\n\t<li>The <strong>0-indexed</strong> subarray <code>s</code> looks like <code>[s<sub>0</sub>, s<sub>1</sub>, s<sub>0</sub>, s<sub>1</sub>,...,s<sub>(m-1) % 2</sub>]</code>. In other words, <code>s<sub>1</sub> - s<sub>0</sub> = 1</code>, <code>s<sub>2</sub> - s<sub>1</sub> = -1</code>, <code>s<sub>3</sub> - s<sub>2</sub> = 1</code>, <code>s<sub>4</sub> - s<sub>3</sub> = -1</code>, and so on up to <code>s[m - 1] - s[m - 2] = (-1)<sup>m</sup></code>.</li>\n</ul>\n\n<p>Return <em>the maximum length of all <strong>alternating</strong> subarrays present in </em><code>nums</code> <em>or </em><code>-1</code><em> if no such subarray exists</em><em>.</em></p>\n\n<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,4,3,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The alternating subarrays are [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which is of length 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,5,6]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> [4,5] and [5,6] are the only two alternating subarrays. They are both of length 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 185,
            "dislikes": 156,
            "similarQuestions": "[{\"title\": \"Longest Turbulent Subarray\", \"titleSlug\": \"longest-turbulent-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.8K\", \"totalSubmission\": \"62.4K\", \"totalAcceptedRaw\": 20823, \"totalSubmissionRaw\": 62368, \"acRate\": \"33.4%\"}",
            "hints": [
                "As the constraints are low, you can check each subarray for the given condition."
            ],
            "rephrased": {
                "body": "Given a **0-indexed** integer array `nums`, find the maximum length of an **alternating** subarray. An alternating subarray `s` of length `m` must satisfy the following conditions:\n\n*   `m` must be greater than 1.\n*   `s[1] = s[0] + 1`.\n*   The subarray `s` should alternate between `s[0]` and `s[1]`.  Specifically, `s[1] - s[0] = 1`, `s[2] - s[1] = -1`, `s[3] - s[2] = 1`, and so on until `s[m - 1] - s[m - 2] = (-1)^m`.\n\nReturn the maximum length of any alternating subarray found in `nums`. If no alternating subarray exists, return -1.\n\nA subarray is defined as a contiguous, non-empty sequence of elements within an array.",
                "constraints": [
                    "2 <= nums.length <= 100",
                    "1 <= nums[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[2,3,4,3,4]",
                        "output": "4",
                        "explanation": "The alternating subarrays are [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which has a length of 4."
                    },
                    {
                        "input": "[4,5,6]",
                        "output": "2",
                        "explanation": "[4,5] and [5,6] are the only two alternating subarrays, both with length 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-turbulent-subarray",
                "title": "Longest Turbulent Subarray",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "As the constraints are low, you can check each subarray for the given condition."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int alternatingSubarray(vector<int>& nums) {\n    int ans = 1;\n    int dp = 1;\n\n    for (int i = 1; i < nums.size(); ++i) {\n      const int targetDiff = dp % 2 == 0 ? -1 : 1;\n      // Append nums[i] to current alternating subarray.\n      if (nums[i] - nums[i - 1] == targetDiff)\n        ++dp;\n      // Reset the alternating subarray to nums[i - 1..i].\n      else if (nums[i] - nums[i - 1] == 1)\n        dp = 2;\n      // Reset the alternating subarray to nums[i].\n      else\n        dp = 1;\n      ans = max(ans, dp);\n    }\n\n    return ans == 1 ? -1 : ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int alternatingSubarray(int[] nums) {\n    int ans = 1;\n    int dp = 1;\n\n    for (int i = 1; i < nums.length; ++i) {\n      final int targetDiff = dp % 2 == 0 ? -1 : 1;\n      // Append nums[i] to current alternating subarray.\n      if (nums[i] - nums[i - 1] == targetDiff)\n        ++dp;\n      // Reset the alternating subarray to nums[i - 1..i].\n      else if (nums[i] - nums[i - 1] == 1)\n        dp = 2;\n      // Reset the alternating subarray to nums[i].\n      else\n        dp = 1;\n      ans = Math.max(ans, dp);\n    }\n\n    return ans == 1 ? -1 : ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def alternatingSubarray(self, nums: List[int]) -> int:\n    ans = 1\n    dp = 1\n\n    for i in range(1, len(nums)):\n      targetDiff = -1 if dp % 2 == 0 else 1\n      # Append nums[i] to current alternating subarray.\n      if nums[i] - nums[i - 1] == targetDiff:\n        dp += 1\n      # Reset the alternating subarray to nums[i - 1..i].\n      elif nums[i] - nums[i - 1] == 1:\n        dp = 2\n      # Reset the alternating subarray to nums[i].\n      else:\n        dp = 1\n      ans = max(ans, dp)\n\n    return -1 if ans == 1 else ans\n",
                "lang_text": "py"
            }
        }
    }
}