{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2311",
            "title": "Longest Binary Subsequence Less Than or Equal to K",
            "titleSlug": "longest-binary-subsequence-less-than-or-equal-to-k",
            "content": "<p>You are given a binary string <code>s</code> and a positive integer <code>k</code>.</p>\n\n<p>Return <em>the length of the <strong>longest</strong> subsequence of </em><code>s</code><em> that makes up a <strong>binary</strong> number less than or equal to</em> <code>k</code>.</p>\n\n<p>Note:</p>\n\n<ul>\n\t<li>The subsequence can contain <strong>leading zeroes</strong>.</li>\n\t<li>The empty string is considered to be equal to <code>0</code>.</li>\n\t<li>A <strong>subsequence</strong> is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1001010&quot;, k = 5\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The longest subsequence of s that makes up a binary number less than or equal to 5 is &quot;00010&quot;, as this number is equal to 2 in decimal.\nNote that &quot;00100&quot; and &quot;00101&quot; are also possible, which are equal to 4 and 5 in decimal, respectively.\nThe length of this subsequence is 5, so 5 is returned.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;00101001&quot;, k = 1\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> &quot;000001&quot; is the longest subsequence of s that makes up a binary number less than or equal to 1, as this number is equal to 1 in decimal.\nThe length of this subsequence is 6, so 6 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 661,
            "dislikes": 47,
            "similarQuestions": "[{\"title\": \"Maximum Binary String After Change\", \"titleSlug\": \"maximum-binary-string-after-change\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.7K\", \"totalSubmission\": \"55.1K\", \"totalAcceptedRaw\": 20678, \"totalSubmissionRaw\": 55149, \"acRate\": \"37.5%\"}",
            "hints": [
                "Choosing a subsequence from the string is equivalent to deleting all the other digits.",
                "If you were to remove a digit, which one should you remove to reduce the value of the string?"
            ],
            "rephrased": {
                "body": "Given a binary string `s` and a positive integer `k`, find the length of the longest subsequence of `s` that represents a binary number less than or equal to `k`.  The subsequence can contain leading zeroes, and the empty string is considered to be equal to 0. A subsequence is formed by deleting some or no characters from the original string without changing the order of the remaining characters.",
                "constraints": [
                    "1 <= s.length <= 1000",
                    "s[i] is either '0' or '1'.",
                    "1 <= k <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": {
                            "s": "1001010",
                            "k": 5
                        },
                        "output": 5,
                        "explanation": "One longest subsequence of s forming a binary number less than or equal to 5 is \"00010\", which represents 2 in decimal. Other valid subsequences include \"00100\" (4 in decimal) and \"00101\" (5 in decimal)."
                    },
                    {
                        "input": {
                            "s": "00101001",
                            "k": 1
                        },
                        "output": 6,
                        "explanation": "The longest subsequence of s that represents a binary number less than or equal to 1 is \"000001\", which equals 1 in decimal."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-binary-string-after-change",
                "title": "Maximum Binary String After Change",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Choosing a subsequence from the string is equivalent to deleting all the other digits.",
            "If you were to remove a digit, which one should you remove to reduce the value of the string?"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestSubsequence(string s, int k) {\n    int oneCount = 0;\n    int num = 0;\n    int pow = 1;\n\n    // Take as many 1s as possible from the right\n    for (int i = s.length() - 1; i >= 0 && num + pow <= k; --i) {\n      if (s[i] == '1') {\n        ++oneCount;\n        num += pow;\n      }\n      pow *= 2;\n    }\n\n    return count(s.begin(), s.end(), '0') + oneCount;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestSubsequence(String s, int k) {\n    int oneCount = 0;\n    int num = 0;\n    int pow = 1;\n\n    // Take as many 1s as possible from the right\n    for (int i = s.length() - 1; i >= 0 && num + pow <= k; --i) {\n      if (s.charAt(i) == '1') {\n        ++oneCount;\n        num += pow;\n      }\n      pow *= 2;\n    }\n\n    return (int) s.chars().filter(c -> c == '0').count() + oneCount;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestSubsequence(self, s: str, k: int) -> int:\n    oneCount = 0\n    num = 0\n    pow = 1\n\n    # Take as many 1s as possible from the right\n    for i in reversed(range(len(s))):\n      if num + pow > k:\n        break\n      if s[i] == '1':\n        oneCount += 1\n        num += pow\n      pow *= 2\n\n    return s.count('0') + oneCount\n",
                "lang_text": "py"
            }
        }
    }
}