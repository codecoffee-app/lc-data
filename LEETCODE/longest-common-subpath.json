{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1923",
            "title": "Longest Common Subpath",
            "titleSlug": "longest-common-subpath",
            "content": "<p>There is a country of <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code>. In this country, there is a road connecting <b>every pair</b> of cities.</p>\n\n<p>There are <code>m</code> friends numbered from <code>0</code> to <code>m - 1</code> who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city <strong>more than once</strong>, but the same city will not be listed consecutively.</p>\n\n<p>Given an integer <code>n</code> and a 2D integer array <code>paths</code> where <code>paths[i]</code> is an integer array representing the path of the <code>i<sup>th</sup></code> friend, return <em>the length of the <strong>longest common subpath</strong> that is shared by <strong>every</strong> friend&#39;s path, or </em><code>0</code><em> if there is no common subpath at all</em>.</p>\n\n<p>A <strong>subpath</strong> of a path is a contiguous sequence of cities within that path.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, paths = [[0,1,<u>2,3</u>,4],\n                       [<u>2,3</u>,4],\n                       [4,0,1,<u>2,3</u>]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest common subpath is [2,3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, paths = [[0],[1],[2]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no common subpath shared by the three paths.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, paths = [[<u>0</u>,1,2,3,4],\n                       [4,3,2,1,<u>0</u>]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>m == paths.length</code></li>\n\t<li><code>2 &lt;= m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>sum(paths[i].length) &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= paths[i][j] &lt; n</code></li>\n\t<li>The same city is not listed multiple times consecutively in <code>paths[i]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 460,
            "dislikes": 35,
            "similarQuestions": "[{\"title\": \"Reconstruct Itinerary\", \"titleSlug\": \"reconstruct-itinerary\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Length of Repeated Subarray\", \"titleSlug\": \"maximum-length-of-repeated-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "Suffix Array",
                    "slug": "suffix-array"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.8K\", \"totalSubmission\": \"24.6K\", \"totalAcceptedRaw\": 6808, \"totalSubmissionRaw\": 24603, \"acRate\": \"27.7%\"}",
            "hints": [
                "If there is a common path with length x, there is for sure a common path of length y where y < x.",
                "We can use binary search over the answer with the range [0, min(path[i].length)].",
                "Using binary search, we want to verify if we have a common path of length m. We can achieve this using hashing."
            ],
            "rephrased": {
                "body": "Given a country with `n` cities (numbered 0 to `n - 1`) where every pair of cities is connected by a road, and `m` friends traveling through the country. Each friend's path is represented by an integer array, listing the cities visited in order.  The path may contain a city more than once, but not consecutively. Find the length of the longest common subpath shared by all friends' paths. Return 0 if no common subpath exists.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "m == paths.length",
                    "2 <= m <= 10^5",
                    "sum(paths[i].length) <= 10^5",
                    "0 <= paths[i][j] < n",
                    "The same city is not listed multiple times consecutively in paths[i]."
                ],
                "testcases": [
                    {
                        "input": "n = 5, paths = [[0,1,2,3,4],[2,3,4],[4,0,1,2,3]]",
                        "output": "2",
                        "explanation": "The longest common subpath is [2,3]."
                    },
                    {
                        "input": "n = 3, paths = [[0],[1],[2]]",
                        "output": "0",
                        "explanation": "There is no common subpath shared by the three paths."
                    },
                    {
                        "input": "n = 5, paths = [[0,1,2,3,4],[4,3,2,1,0]]",
                        "output": "1",
                        "explanation": "The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "reconstruct-itinerary",
                "title": "Reconstruct Itinerary",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-length-of-repeated-subarray",
                "title": "Maximum Length of Repeated Subarray",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If there is a common path with length x, there is for sure a common path of length y where y < x.",
            "We can use binary search over the answer with the range [0, min(path[i].length)].",
            "Using binary search, we want to verify if we have a common path of length m. We can achieve this using hashing."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "Suffix Array",
                "slug": "suffix-array"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestCommonSubpath(int n, vector<vector<int>>& paths) {\n    int l = 0;\n    int r = paths[0].size();\n\n    while (l < r) {\n      const int m = l + (r - l + 1) / 2;\n      if (checkCommonSubpath(paths, m))\n        l = m;\n      else\n        r = m - 1;\n    }\n\n    return l;\n  }\n\n  constexpr static long kMod = 8'417'508'174'513;\n  constexpr static long kBase = 165'131;\n\n  // Returns true if there exists a common subpath of length m for all paths.\n  bool checkCommonSubpath(const vector<vector<int>>& paths, int m) {\n    vector<unordered_set<long>> hashSets;\n\n    // Calculate the hash values for subpaths of length m for every path.\n    for (const vector<int>& path : paths)\n      hashSets.push_back(rabinKarp(path, m));\n\n    // Check if there is a common subpath of length m.\n    for (const long subpathHash : hashSets[0])\n      if (all_of(hashSets.begin(), hashSets.end(),\n                 [subpathHash](const unordered_set<long>& hashSet) {\n        return hashSet.count(subpathHash);\n          }))\n        return true;\n\n    return false;\n  }\n\n  // Returns hash values for subpaths of length m in the path.\n  unordered_set<long> rabinKarp(const vector<int>& path, int m) {\n    unordered_set<long> hashes;\n    long maxPower = 1;\n    long hash = 0;\n    for (int i = 0; i < path.size(); ++i) {\n      hash = (hash * kBase + path[i]) % kMod;\n      if (i >= m)\n        hash = (hash - path[i - m] * maxPower % kMod + kMod) % kMod;\n      else\n        maxPower = maxPower * kBase % kMod;\n      if (i >= m - 1)\n        hashes.insert(hash);\n    }\n    return hashes;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestCommonSubpath(int n, int[][] paths) {\n    int l = 0;\n    int r = paths[0].length;\n\n    while (l < r) {\n      final int m = l + (r - l + 1) / 2;\n      if (checkCommonSubpath(paths, m))\n        l = m;\n      else\n        r = m - 1;\n    }\n\n    return l;\n  }\n\n  private static final long kMod = 8_417_508_174_513L;\n  private static final long kBase = 165_131L;\n\n  // Returns true if there exists a common subpath of length m for all paths.\n  private boolean checkCommonSubpath(int[][] paths, int m) {\n    Set<Long>[] hashSets = new Set[paths.length];\n\n    // Calculate the hash values for subpaths of length m for every path.\n    for (int i = 0; i < paths.length; ++i)\n      hashSets[i] = rabinKarp(paths[i], m);\n\n    // Check if there is a common subpath of length m.\n    for (final long subpathHash : hashSets[0])\n      if (Arrays.stream(hashSets).allMatch(hashSet -> hashSet.contains(subpathHash)))\n        return true;\n\n    return false;\n  }\n\n  // Returns hash values for subpaths of length m in the path.\n  private Set<Long> rabinKarp(int[] path, int m) {\n    Set<Long> hashes = new HashSet<>();\n    long maxPower = 1;\n    long hash = 0;\n    for (int i = 0; i < path.length; ++i) {\n      hash = (hash * kBase + path[i]) % kMod;\n      if (i >= m)\n        hash = (hash - path[i - m] * maxPower % kMod + kMod) % kMod;\n      else\n        maxPower = maxPower * kBase % kMod;\n      if (i >= m - 1)\n        hashes.add(hash);\n    }\n    return hashes;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def __init__(self):\n    self.kMod = 8_417_508_174_513\n    self.kBase = 165_131\n\n  def longestCommonSubpath(self, n: int, paths: List[List[int]]) -> int:\n    l = 0\n    r = len(paths[0])\n\n    while l < r:\n      m = l + (r - l + 1) // 2\n      if self._checkCommonSubpath(paths, m):\n        l = m\n      else:\n        r = m - 1\n\n    return l\n\n  def _checkCommonSubpath(self, paths: List[List[int]], m: int) -> bool:\n    \"\"\"Returns true if there exists a common subpath of length m for all paths.\"\"\"\n    # Calculate the hash values for subpaths of length m for every path.\n    hashSets = [self._rabinKarp(path, m) for path in paths]\n\n    # Check if there is a common subpath of length m.\n    for subpathHash in hashSets[0]:\n      if all(subpathHash in hashSet for hashSet in hashSets):\n        return True\n\n    return False\n\n  def _rabinKarp(self, path: List[int], m: int) -> Set[int]:\n    \"\"\"Returns hash values for subpaths of length m in the path.\"\"\"\n    hashes = set()\n    maxPower = 1\n    hash = 0\n\n    for i, num in enumerate(path):\n      hash = (hash * self.kBase + num) % self.kMod\n      if i >= m:\n        hash = (hash - path[i - m] * maxPower %\n                self.kMod + self.kMod) % self.kMod\n      else:\n        maxPower = maxPower * self.kBase % self.kMod\n      if i >= m - 1:\n        hashes.add(hash)\n\n    return hashes\n",
                "lang_text": "py"
            }
        }
    }
}