{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1143",
            "title": "Longest Common Subsequence",
            "titleSlug": "longest-common-subsequence",
            "content": "<p>Given two strings <code>text1</code> and <code>text2</code>, return <em>the length of their longest <strong>common subsequence</strong>. </em>If there is no <strong>common subsequence</strong>, return <code>0</code>.</p>\n\n<p>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p>\n\n<ul>\n\t<li>For example, <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;abcde&quot;</code>.</li>\n</ul>\n\n<p>A <strong>common subsequence</strong> of two strings is a subsequence that is common to both strings.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; \n<strong>Output:</strong> 3  \n<strong>Explanation:</strong> The longest common subsequence is &quot;ace&quot; and its length is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> text1 = &quot;abc&quot;, text2 = &quot;abc&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest common subsequence is &quot;abc&quot; and its length is 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> text1 = &quot;abc&quot;, text2 = &quot;def&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no such common subsequence, so the result is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li>\n\t<li><code>text1</code> and <code>text2</code> consist of only lowercase English characters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 12595,
            "dislikes": 163,
            "similarQuestions": "[{\"title\": \"Longest Palindromic Subsequence\", \"titleSlug\": \"longest-palindromic-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Delete Operation for Two Strings\", \"titleSlug\": \"delete-operation-for-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shortest Common Supersequence \", \"titleSlug\": \"shortest-common-supersequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximize Number of Subsequences in a String\", \"titleSlug\": \"maximize-number-of-subsequences-in-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subsequence With the Minimum Score\", \"titleSlug\": \"subsequence-with-the-minimum-score\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"871.3K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 871289, \"totalSubmissionRaw\": 1514161, \"acRate\": \"57.5%\"}",
            "hints": [
                "Try dynamic programming. \r\nDP[i][j] represents the longest common subsequence of text1[0 ... i] & text2[0 ... j].",
                "DP[i][j] = DP[i - 1][j - 1] + 1 , if text1[i] == text2[j]\r\nDP[i][j] = max(DP[i - 1][j], DP[i][j - 1]) , otherwise"
            ],
            "rephrased": {
                "body": "Given two strings, `text1` and `text2`, determine the length of their longest common subsequence. A subsequence is formed by deleting characters from the original string without changing the order of the remaining characters. A common subsequence is a subsequence present in both strings. If no common subsequence exists, return 0.",
                "constraints": [
                    "1 <= text1.length, text2.length <= 1000",
                    "text1 and text2 consist of only lowercase English characters."
                ],
                "testcases": [
                    {
                        "input": "text1 = \"abcde\", text2 = \"ace\"",
                        "output": "3",
                        "explanation": "The longest common subsequence is \"ace\". Therefore, the length is 3."
                    },
                    {
                        "input": "text1 = \"abc\", text2 = \"abc\"",
                        "output": "3",
                        "explanation": "The longest common subsequence is \"abc\". Therefore, the length is 3."
                    },
                    {
                        "input": "text1 = \"abc\", text2 = \"def\"",
                        "output": "0",
                        "explanation": "There is no common subsequence."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-palindromic-subsequence",
                "title": "Longest Palindromic Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "delete-operation-for-two-strings",
                "title": "Delete Operation for Two Strings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "shortest-common-supersequence",
                "title": "Shortest Common Supersequence ",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximize-number-of-subsequences-in-a-string",
                "title": "Maximize Number of Subsequences in a String",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "subsequence-with-the-minimum-score",
                "title": "Subsequence With the Minimum Score",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try dynamic programming. \r\nDP[i][j] represents the longest common subsequence of text1[0 ... i] & text2[0 ... j].",
            "DP[i][j] = DP[i - 1][j - 1] + 1 , if text1[i] == text2[j]\r\nDP[i][j] = max(DP[i - 1][j], DP[i][j - 1]) , otherwise"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestCommonSubsequence(string text1, string text2) {\n    const int m = text1.length();\n    const int n = text2.length();\n    // dp[i][j] := LCS's length of text1[0..i) and text2[0..j)\n    vector<vector<int>> dp(m + 1, vector<int>(n + 1));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        dp[i + 1][j + 1] = text1[i] == text2[j]\n                               ? 1 + dp[i][j]\n                               : max(dp[i][j + 1], dp[i + 1][j]);\n\n    return dp[m][n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestCommonSubsequence(String text1, String text2) {\n    final int m = text1.length();\n    final int n = text2.length();\n    // dp[i][j] := LCS's length of text1[0..i) and text2[0..j)\n    int[][] dp = new int[m + 1][n + 1];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        dp[i + 1][j + 1] = text1.charAt(i) == text2.charAt(j)\n                               ? 1 + dp[i][j]\n                               : Math.max(dp[i][j + 1], dp[i + 1][j]);\n\n    return dp[m][n];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n    m = len(text1)\n    n = len(text2)\n    # dp[i][j] := LCS's length of text1[0..i) and text2[0..j)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m):\n      for j in range(n):\n        dp[i + 1][j + 1] = \\\n            1 + dp[i][j] if text1[i] == text2[j] \\\n            else max(dp[i][j + 1], dp[i + 1][j])\n\n    return dp[m][n]\n",
                "lang_text": "py"
            }
        }
    }
}