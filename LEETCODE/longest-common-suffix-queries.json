{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3093",
            "title": "Longest Common Suffix Queries",
            "titleSlug": "longest-common-suffix-queries",
            "content": "<p>You are given two arrays of strings <code>wordsContainer</code> and <code>wordsQuery</code>.</p>\n\n<p>For each <code>wordsQuery[i]</code>, you need to find a string from <code>wordsContainer</code> that has the <strong>longest common suffix</strong> with <code>wordsQuery[i]</code>. If there are two or more strings in <code>wordsContainer</code> that share the longest common suffix, find the string that is the <strong>smallest</strong> in length. If there are two or more such strings that have the <strong>same</strong> smallest length, find the one that occurred <strong>earlier</strong> in <code>wordsContainer</code>.</p>\n\n<p>Return <em>an array of integers </em><code>ans</code><em>, where </em><code>ans[i]</code><em> is the index of the string in </em><code>wordsContainer</code><em> that has the <strong>longest common suffix</strong> with </em><code>wordsQuery[i]</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">wordsContainer = [&quot;abcd&quot;,&quot;bcd&quot;,&quot;xbcd&quot;], wordsQuery = [&quot;cd&quot;,&quot;bcd&quot;,&quot;xyz&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,1,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Let&#39;s look at each <code>wordsQuery[i]</code> separately:</p>\n\n<ul>\n\t<li>For <code>wordsQuery[0] = &quot;cd&quot;</code>, strings from <code>wordsContainer</code> that share the longest common suffix <code>&quot;cd&quot;</code> are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.</li>\n\t<li>For <code>wordsQuery[1] = &quot;bcd&quot;</code>, strings from <code>wordsContainer</code> that share the longest common suffix <code>&quot;bcd&quot;</code> are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.</li>\n\t<li>For <code>wordsQuery[2] = &quot;xyz&quot;</code>, there is no string from <code>wordsContainer</code> that shares a common suffix. Hence the longest common suffix is <code>&quot;&quot;</code>, that is shared with strings at index 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">wordsContainer = [&quot;abcdefgh&quot;,&quot;poiuygh&quot;,&quot;ghghgh&quot;], wordsQuery = [&quot;gh&quot;,&quot;acbfgh&quot;,&quot;acbfegh&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,0,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Let&#39;s look at each <code>wordsQuery[i]</code> separately:</p>\n\n<ul>\n\t<li>For <code>wordsQuery[0] = &quot;gh&quot;</code>, strings from <code>wordsContainer</code> that share the longest common suffix <code>&quot;gh&quot;</code> are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.</li>\n\t<li>For <code>wordsQuery[1] = &quot;acbfgh&quot;</code>, only the string at index 0 shares the longest common suffix <code>&quot;fgh&quot;</code>. Hence it is the answer, even though the string at index 2 is shorter.</li>\n\t<li>For <code>wordsQuery[2] = &quot;acbfegh&quot;</code>, strings from <code>wordsContainer</code> that share the longest common suffix <code>&quot;gh&quot;</code> are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= wordsContainer.length, wordsQuery.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= wordsContainer[i].length &lt;= 5 * 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= wordsQuery[i].length &lt;= 5 * 10<sup>3</sup></code></li>\n\t<li><code>wordsContainer[i]</code> consists only of lowercase English letters.</li>\n\t<li><code>wordsQuery[i]</code> consists only of lowercase English letters.</li>\n\t<li>Sum of <code>wordsContainer[i].length</code> is at most <code>5 * 10<sup>5</sup></code>.</li>\n\t<li>Sum of <code>wordsQuery[i].length</code> is at most <code>5 * 10<sup>5</sup></code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 115,
            "dislikes": 10,
            "similarQuestions": "[{\"title\": \"Longest Common Prefix\", \"titleSlug\": \"longest-common-prefix\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Length of the Longest Common Prefix\", \"titleSlug\": \"find-the-length-of-the-longest-common-prefix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.5K\", \"totalSubmission\": \"20.2K\", \"totalAcceptedRaw\": 8493, \"totalSubmissionRaw\": 20204, \"acRate\": \"42.0%\"}",
            "hints": [
                "If we reverse the strings, the problem changes to finding the longest common prefix.",
                "Build a Trie, each node is a letter and only saves the best word\u2019s index in each node, based on the criteria."
            ],
            "rephrased": {
                "body": "Given two arrays of strings, `wordsContainer` and `wordsQuery`, for each string in `wordsQuery`, find the string in `wordsContainer` with the longest common suffix. Among strings in `wordsContainer` sharing the longest common suffix, choose the one with the smallest length. If there are multiple strings with the same smallest length, choose the string that appears earlier in `wordsContainer`. Return an array of integers where the i-th element is the index in `wordsContainer` of the string that satisfies these conditions for the i-th string in `wordsQuery`.",
                "constraints": [
                    "1 <= wordsContainer.length, wordsQuery.length <= 10^4",
                    "1 <= wordsContainer[i].length <= 5 * 10^3",
                    "1 <= wordsQuery[i].length <= 5 * 10^3",
                    "wordsContainer[i] consists only of lowercase English letters.",
                    "wordsQuery[i] consists only of lowercase English letters.",
                    "Sum of wordsContainer[i].length is at most 5 * 10^5.",
                    "Sum of wordsQuery[i].length is at most 5 * 10^5."
                ],
                "testcases": [
                    {
                        "input": {
                            "wordsContainer": [
                                "abcd",
                                "bcd",
                                "xbcd"
                            ],
                            "wordsQuery": [
                                "cd",
                                "bcd",
                                "xyz"
                            ]
                        },
                        "output": [
                            1,
                            1,
                            1
                        ],
                        "explanation": "For wordsQuery[0] = \"cd\", the strings at indices 0, 1, and 2 in wordsContainer share the longest common suffix \"cd\". Index 1 is chosen because \"bcd\" is the shortest among \"abcd\", \"bcd\", and \"xbcd\".\nFor wordsQuery[1] = \"bcd\", the strings at indices 0, 1, and 2 in wordsContainer share the longest common suffix \"bcd\". Index 1 is chosen because \"bcd\" is the shortest among \"abcd\", \"bcd\", and \"xbcd\".\nFor wordsQuery[2] = \"xyz\", there are no common suffixes between wordsQuery[2] and the elements of wordsContainer. Hence the longest common suffix is \"\". Index 1 is chosen because \"bcd\" is the shortest among \"abcd\", \"bcd\", and \"xbcd\"."
                    },
                    {
                        "input": {
                            "wordsContainer": [
                                "abcdefgh",
                                "poiuygh",
                                "ghghgh"
                            ],
                            "wordsQuery": [
                                "gh",
                                "acbfgh",
                                "acbfegh"
                            ]
                        },
                        "output": [
                            2,
                            0,
                            2
                        ],
                        "explanation": "For wordsQuery[0] = \"gh\", the strings at indices 0, 1, and 2 in wordsContainer share the longest common suffix \"gh\". Index 2 is chosen because \"ghghgh\" is the shortest among \"abcdefgh\", \"poiuygh\", and \"ghghgh\".\nFor wordsQuery[1] = \"acbfgh\", only the string at index 0 shares the longest common suffix \"fgh\". Hence it is the answer, even though the string at index 2 is shorter.\nFor wordsQuery[2] = \"acbfegh\", strings at indices 0, 1, and 2 in wordsContainer share the longest common suffix \"gh\". Index 2 is chosen because \"ghghgh\" has the shortest length among \"abcdefgh\", \"poiuygh\", and \"ghghgh\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "longest-common-prefix",
                "title": "Longest Common Prefix",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-the-length-of-the-longest-common-prefix",
                "title": "Find the Length of the Longest Common Prefix",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If we reverse the strings, the problem changes to finding the longest common prefix.",
            "Build a Trie, each node is a letter and only saves the best word\u2019s index in each node, based on the criteria."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  TrieNode() : children(26) {}\n  int length = INT_MAX;\n  int index = -1;\n};\n\nclass Solution {\n public:\n  vector<int> stringIndices(vector<string>& wordsContainer,\n                            vector<string>& wordsQuery) {\n    vector<int> ans;\n    int minIndex = 0;\n\n    for (int i = 0; i < wordsContainer.size(); ++i) {\n      insert(wordsContainer[i], i);\n      if (wordsContainer[i].length() < wordsContainer[minIndex].length())\n        minIndex = i;\n    }\n\n    for (const string& query : wordsQuery) {\n      const int index = search(query);\n      ans.push_back(index == -1 ? minIndex : index);\n    }\n\n    return ans;\n  }\n\n private:\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n\n  void insert(const string& word, int index) {\n    shared_ptr<TrieNode> node = root;\n    for (int i = word.length() - 1; i >= 0; --i) {\n      const int j = word[i] - 'a';\n      if (node->children[j] == nullptr)\n        node->children[j] = make_shared<TrieNode>();\n      node = node->children[j];\n      if (node->length > word.length()) {\n        node->length = word.length();\n        node->index = index;\n      }\n    }\n  }\n\n  int search(const string& word) {\n    shared_ptr<TrieNode> node = root;\n    for (int i = word.length() - 1; i >= 0; --i) {\n      const int j = word[i] - 'a';\n      if (node->children[j] == nullptr)\n        return node->index;\n      node = node->children[j];\n    }\n    return node->index;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[26];\n  public boolean isWord = false;\n  public int length = Integer.MAX_VALUE;\n  public int index = -1;\n}\n\nclass Solution {\n  public int[] stringIndices(String[] wordsContainer, String[] wordsQuery) {\n    int[] ans = new int[wordsQuery.length];\n    int minIndex = 0;\n\n    for (int i = 0; i < wordsContainer.length; ++i) {\n      insert(wordsContainer[i], i);\n      if (wordsContainer[i].length() < wordsContainer[minIndex].length())\n        minIndex = i;\n    }\n\n    for (int i = 0; i < wordsQuery.length; ++i) {\n      final int index = search(wordsQuery[i]);\n      ans[i] = index == -1 ? minIndex : index;\n    }\n\n    return ans;\n  }\n\n  private TrieNode root = new TrieNode();\n\n  private void insert(final String word, int index) {\n    TrieNode node = root;\n    for (int i = word.length() - 1; i >= 0; --i) {\n      final int j = word.charAt(i) - 'a';\n      if (node.children[j] == null)\n        node.children[j] = new TrieNode();\n      node = node.children[j];\n      if (node.length > word.length()) {\n        node.length = word.length();\n        node.index = index;\n      }\n    }\n  }\n\n  private int search(final String word) {\n    TrieNode node = root;\n    for (int i = word.length() - 1; i >= 0; --i) {\n      final int j = word.charAt(i) - 'a';\n      if (node.children[j] == null)\n        return node.index;\n      node = node.children[j];\n    }\n    return node.index;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TrieNode:\n  def __init__(self):\n    self.children: Dict[str, TrieNode] = {}\n    self.isWord = False\n    self.length = math.inf\n    self.index = -1\n\n\nclass Solution:\n  def stringIndices(self, wordsContainer: List[str], wordsQuery: List[str]) -> List[int]:\n    ans = []\n    root = TrieNode()\n    minIndex = min(enumerate(wordsContainer), key=lambda x: len(x[1]))[0]\n\n    def insert(word: str, index: int) -> None:\n      node = root\n      for c in reversed(word):\n        node = node.children.setdefault(c, TrieNode())\n        if node.length > len(word):\n          node.length = len(word)\n          node.index = index\n\n    def search(word: str) -> int:\n      node = root\n      for c in reversed(word):\n        if c not in node.children:\n          return node.index\n        node = node.children[c]\n      return node.index\n\n    for i, word in enumerate(wordsContainer):\n      insert(word, i)\n\n    for query in wordsQuery:\n      index = search(query)\n      ans.append(minIndex if index == -1 else index)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}