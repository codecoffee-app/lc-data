{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1044",
            "title": "Longest Duplicate Substring",
            "titleSlug": "longest-duplicate-substring",
            "content": "<p>Given a string <code>s</code>, consider all <em>duplicated substrings</em>: (contiguous) substrings of s that occur 2 or more times.&nbsp;The occurrences&nbsp;may overlap.</p>\n\n<p>Return <strong>any</strong> duplicated&nbsp;substring that has the longest possible length.&nbsp;If <code>s</code> does not have a duplicated substring, the answer is <code>&quot;&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"banana\"\n<strong>Output:</strong> \"ana\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"abcd\"\n<strong>Output:</strong> \"\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2159,
            "dislikes": 377,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "Suffix Array",
                    "slug": "suffix-array"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"65K\", \"totalSubmission\": \"213.8K\", \"totalAcceptedRaw\": 64997, \"totalSubmissionRaw\": 213772, \"acRate\": \"30.4%\"}",
            "hints": [
                "Binary search for the length of the answer.  (If there's an answer of length 10, then there are answers of length 9, 8, 7, ...)",
                "To check whether an answer of length K exists, we can use Rabin-Karp 's algorithm."
            ],
            "rephrased": {
                "body": "Given a string `s`, find the longest duplicated substring. A duplicated substring is a contiguous substring of `s` that appears at least twice, with potentially overlapping occurrences. Return any duplicated substring with the maximum possible length. If no duplicated substring exists, return an empty string.",
                "constraints": [
                    "2 <= s.length <= 3 * 10^4",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "banana",
                        "output": "ana",
                        "explanation": "The substring \"ana\" appears twice in \"banana\" and is the longest duplicated substring."
                    },
                    {
                        "input": "abcd",
                        "output": "",
                        "explanation": "There are no duplicated substrings in \"abcd\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Binary search for the length of the answer.  (If there's an answer of length 10, then there are answers of length 9, 8, 7, ...)",
            "To check whether an answer of length K exists, we can use Rabin-Karp 's algorithm."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "Suffix Array",
                "slug": "suffix-array"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ]
    }
}