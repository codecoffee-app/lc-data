{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1044",
            "title": "Longest Duplicate Substring",
            "titleSlug": "longest-duplicate-substring",
            "content": "<p>Given a string <code>s</code>, consider all <em>duplicated substrings</em>: (contiguous) substrings of s that occur 2 or more times.&nbsp;The occurrences&nbsp;may overlap.</p>\n\n<p>Return <strong>any</strong> duplicated&nbsp;substring that has the longest possible length.&nbsp;If <code>s</code> does not have a duplicated substring, the answer is <code>&quot;&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"banana\"\n<strong>Output:</strong> \"ana\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"abcd\"\n<strong>Output:</strong> \"\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2159,
            "dislikes": 377,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "Suffix Array",
                    "slug": "suffix-array"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"65K\", \"totalSubmission\": \"213.8K\", \"totalAcceptedRaw\": 64997, \"totalSubmissionRaw\": 213772, \"acRate\": \"30.4%\"}",
            "hints": [
                "Binary search for the length of the answer.  (If there's an answer of length 10, then there are answers of length 9, 8, 7, ...)",
                "To check whether an answer of length K exists, we can use Rabin-Karp 's algorithm."
            ],
            "rephrased": {
                "body": "Given a string `s`, find the longest duplicated substring. A duplicated substring is a contiguous substring of `s` that appears at least twice, with potentially overlapping occurrences. Return any duplicated substring with the maximum possible length. If no duplicated substring exists, return an empty string.",
                "constraints": [
                    "2 <= s.length <= 3 * 10^4",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "banana",
                        "output": "ana",
                        "explanation": "The substring \"ana\" appears twice in \"banana\" and is the longest duplicated substring."
                    },
                    {
                        "input": "abcd",
                        "output": "",
                        "explanation": "There are no duplicated substrings in \"abcd\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Binary search for the length of the answer.  (If there's an answer of length 10, then there are answers of length 9, 8, 7, ...)",
            "To check whether an answer of length K exists, we can use Rabin-Karp 's algorithm."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "Suffix Array",
                "slug": "suffix-array"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string longestDupSubstring(string s) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = s.length();\n    vector<int> pows(n, 1);\n    int bestStart = -1;\n    int l = 1;\n    int r = n;\n\n    for (int i = 1; i < n; ++i)\n      pows[i] = (pows[i - 1] * 26L) % kMod;\n\n    while (l < r) {\n      const int m = (l + r) / 2;\n      const int start = getStart(s, m, pows, kMod);\n      if (start == -1) {\n        r = m;\n      } else {\n        bestStart = start;\n        l = m + 1;\n      }\n    }\n\n    if (bestStart == -1)\n      return \"\";\n    if (getStart(s, l, pows, kMod) == -1)\n      return s.substr(bestStart, l - 1);\n    return s.substr(bestStart, l);\n  }\n\n private:\n  // k := length of substring hash\n  int getStart(const string& s, int k, const vector<int>& pows,\n               const int& kMod) {\n    unordered_map<int, vector<int>> hashToStarts;\n    long long h = 0;\n\n    // Compute hash value of s[:k].\n    for (int i = 0; i < k; ++i)\n      h = ((h * 26) % kMod + val(s[i])) % kMod;\n    hashToStarts[h].push_back(0);\n\n    // Compute rolling hash by Rabin Karp.\n    for (int i = k; i < s.length(); ++i) {\n      const int startIndex = i - k + 1;\n      h = ((h - static_cast<long long>(pows[k - 1]) * val(s[i - k])) % kMod +\n           kMod) %\n          kMod;\n      h = (h * 26 + val(s[i])) % kMod;\n      if (const auto it = hashToStarts.find(h); it != hashToStarts.cend()) {\n        const string currSub = s.substr(startIndex, k);\n        for (const int start : it->second)\n          if (s.substr(start, k) == currSub)\n            return startIndex;\n      }\n      hashToStarts[h].push_back(startIndex);\n    }\n\n    return -1;\n  }\n\n  constexpr int val(char c) {\n    return c - 'a';\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String longestDupSubstring(String s) {\n    final int kMod = 1_000_000_007;\n    final int n = s.length();\n    int[] pows = new int[n];\n    int bestStart = -1;\n    int l = 1;\n    int r = n;\n\n    pows[0] = 1;\n    for (int i = 1; i < n; ++i)\n      pows[i] = (int) ((pows[i - 1] * 26L) % (long) kMod);\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      final int start = getStart(s, m, pows, kMod);\n      if (start == -1) {\n        r = m;\n      } else {\n        bestStart = start;\n        l = m + 1;\n      }\n    }\n\n    if (bestStart == -1)\n      return \"\";\n    if (getStart(s, l, pows, kMod) == -1)\n      return s.substring(bestStart, bestStart + l - 1);\n    return s.substring(bestStart, bestStart + l);\n  }\n\n  // k := length of substring hash\n  private int getStart(final String s, int k, int[] pows, int kMod) {\n    Map<Long, List<Integer>> hashToStarts = new HashMap<>();\n    long h = 0;\n\n    // Compute hash value of s[:k].\n    for (int i = 0; i < k; ++i)\n      h = ((h * 26) % kMod + val(s.charAt(i))) % kMod;\n    hashToStarts.put(h, new ArrayList<>());\n    hashToStarts.get(h).add(0);\n\n    // Compute rolling hash by Rabin Karp.\n    for (int i = k; i < s.length(); ++i) {\n      final int startIndex = i - k + 1;\n      h = ((h - (long) (pows[k - 1]) * val(s.charAt(i - k))) % kMod + kMod) % kMod;\n      h = (h * 26 + val(s.charAt(i))) % kMod;\n      if (hashToStarts.containsKey(h)) {\n        final String currSub = s.substring(startIndex, startIndex + k);\n        for (final int start : hashToStarts.get(h))\n          if (s.substring(start, start + k).equals(currSub))\n            return startIndex;\n      }\n      hashToStarts.put(h, new ArrayList<>());\n      hashToStarts.get(h).add(startIndex);\n    }\n\n    return -1;\n  }\n\n  private int val(char c) {\n    return c - 'a';\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestDupSubstring(self, s: str) -> str:\n    kMod = 1_000_000_007\n    bestStart = -1\n    l = 1\n    r = len(s)\n\n    def val(c: str) -> int:\n      return ord(c) - ord('a')\n\n    # k := length of substring hash\n    def getStart(k: int) -> Optional[int]:\n      maxPow = pow(26, k - 1, kMod)\n      hashToStart = collections.defaultdict(list)\n      h = 0\n\n      # Compute hash value of s[:k].\n      for i in range(k):\n        h = (h * 26 + val(s[i])) % kMod\n      hashToStart[h].append(0)\n\n      # Compute rolling hash by Rabin Karp.\n      for i in range(k, len(s)):\n        startIndex = i - k + 1\n        h = (h - maxPow * val(s[i - k])) % kMod\n        h = (h * 26 + val(s[i])) % kMod\n        if h in hashToStart:\n          currSub = s[startIndex:startIndex + k]\n          for start in hashToStart[h]:\n            if s[start:start + k] == currSub:\n              return startIndex\n        hashToStart[h].append(startIndex)\n\n    while l < r:\n      m = (l + r) // 2\n      start: Optional[int] = getStart(m)\n      if start:\n        bestStart = start\n        l = m + 1\n      else:\n        r = m\n\n    if bestStart == -1:\n      return ''\n    if getStart(l):\n      return s[bestStart:bestStart + l]\n    return s[bestStart:bestStart + l - 1]\n",
                "lang_text": "py"
            }
        }
    }
}