{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2760",
            "title": "Longest Even Odd Subarray With Threshold",
            "titleSlug": "longest-even-odd-subarray-with-threshold",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and an integer <code>threshold</code>.</p>\n\n<p>Find the length of the <strong>longest subarray</strong> of <code>nums</code> starting at index <code>l</code> and ending at index <code>r</code> <code>(0 &lt;= l &lt;= r &lt; nums.length)</code> that satisfies the following conditions:</p>\n\n<ul>\n\t<li><code>nums[l] % 2 == 0</code></li>\n\t<li>For all indices <code>i</code> in the range <code>[l, r - 1]</code>, <code>nums[i] % 2 != nums[i + 1] % 2</code></li>\n\t<li>For all indices <code>i</code> in the range <code>[l, r]</code>, <code>nums[i] &lt;= threshold</code></li>\n</ul>\n\n<p>Return <em>an integer denoting the length of the longest such subarray.</em></p>\n\n<p><strong>Note:</strong> A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,5,4], threshold = 5\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> In this example, we can select the subarray that starts at l = 1 and ends at r = 3 =&gt; [2,5,4]. This subarray satisfies the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2], threshold = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> In this example, we can select the subarray that starts at l = 1 and ends at r = 1 =&gt; [2]. \nIt satisfies all the conditions and we can show that 1 is the maximum possible achievable length.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,4,5], threshold = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> In this example, we can select the subarray that starts at l = 0 and ends at r = 2 =&gt; [2,3,4]. \nIt satisfies all the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100 </code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100 </code></li>\n\t<li><code>1 &lt;= threshold &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 260,
            "dislikes": 247,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"29.3K\", \"totalSubmission\": \"101.6K\", \"totalAcceptedRaw\": 29329, \"totalSubmissionRaw\": 101629, \"acRate\": \"28.9%\"}",
            "hints": [
                "Brute force all the possible subarrays and find the longest that satisfies the conditions."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` and an integer `threshold`, find the length of the longest subarray starting at index `l` and ending at index `r` (0 <= l <= r < nums.length) that satisfies the following conditions:\n\n1.  `nums[l] % 2 == 0`\n2.  For all indices `i` in the range `[l, r - 1]`, `nums[i] % 2 != nums[i + 1] % 2`\n3.  For all indices `i` in the range `[l, r]`, `nums[i] <= threshold`\n\nReturn the length of the longest such subarray.",
                "constraints": [
                    "1 <= nums.length <= 100",
                    "1 <= nums[i] <= 100",
                    "1 <= threshold <= 100"
                ],
                "testcases": [
                    {
                        "input": "nums = [3,2,5,4], threshold = 5",
                        "output": "3",
                        "explanation": "The subarray [2, 5, 4] starting at index 1 and ending at index 3 satisfies all the conditions. Its length is 3, which is the maximum possible length."
                    },
                    {
                        "input": "nums = [1,2], threshold = 2",
                        "output": "1",
                        "explanation": "The subarray [2] starting and ending at index 1 satisfies all conditions. The maximum possible achievable length is 1."
                    },
                    {
                        "input": "nums = [2,3,4,5], threshold = 4",
                        "output": "3",
                        "explanation": "The subarray [2, 3, 4] starting at index 0 and ending at index 2 satisfies all conditions. The maximum possible achievable length is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Brute force all the possible subarrays and find the longest that satisfies the conditions."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestAlternatingSubarray(vector<int>& nums, int threshold) {\n    int ans = 0;\n    int dp = 0;\n\n    for (int i = 0; i < nums.size(); ++i) {\n      if (nums[i] > threshold)\n        dp = 0;\n      else if (i > 0 && dp > 0 && isOddEven(nums[i - 1], nums[i]))\n        // Increase the size of the subarray.\n        ++dp;\n      else\n        // Start a new subarray if the start is valid.\n        dp = nums[i] % 2 == 0 ? 1 : 0;\n      ans = max(ans, dp);\n    }\n\n    return ans;\n  }\n\n private:\n  bool isOddEven(int a, int b) {\n    return a % 2 != b % 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestAlternatingSubarray(int[] nums, int threshold) {\n    int ans = 0;\n    int dp = 0;\n\n    for (int i = 0; i < nums.length; ++i) {\n      if (nums[i] > threshold)\n        dp = 0;\n      else if (i > 0 && dp > 0 && isOddEven(nums[i - 1], nums[i]))\n        // Increase the size of the subarray.\n        ++dp;\n      else\n        // Start a new subarray if the start is valid.\n        dp = nums[i] % 2 == 0 ? 1 : 0;\n      ans = Math.max(ans, dp);\n    }\n\n    return ans;\n  }\n\n  private boolean isOddEven(int a, int b) {\n    return a % 2 != b % 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestAlternatingSubarray(self, nums: List[int], threshold: int) -> int:\n    ans = 0\n    dp = 0\n\n    def isOddEven(a: int, b: int) -> bool:\n      return a % 2 != b % 2\n\n    for i, num in enumerate(nums):\n      if num > threshold:\n        dp = 0\n      elif i > 0 and dp > 0 and isOddEven(nums[i - 1], num):\n        # Increase the size of the subarray.\n        dp += 1\n      else:\n        # Start a new subarray if the start is valid.\n        dp = 1 if num % 2 == 0 else 0\n      ans = max(ans, dp)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}