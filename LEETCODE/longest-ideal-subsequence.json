{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2370",
            "title": "Longest Ideal Subsequence",
            "titleSlug": "longest-ideal-subsequence",
            "content": "<p>You are given a string <code>s</code> consisting of lowercase letters and an integer <code>k</code>. We call a string <code>t</code> <strong>ideal</strong> if the following conditions are satisfied:</p>\n\n<ul>\n\t<li><code>t</code> is a <strong>subsequence</strong> of the string <code>s</code>.</li>\n\t<li>The absolute difference in the alphabet order of every two <strong>adjacent</strong> letters in <code>t</code> is less than or equal to <code>k</code>.</li>\n</ul>\n\n<p>Return <em>the length of the <strong>longest</strong> ideal string</em>.</p>\n\n<p>A <strong>subsequence</strong> is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</p>\n\n<p><strong>Note</strong> that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of <code>&#39;a&#39;</code> and <code>&#39;z&#39;</code> is <code>25</code>, not <code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;acfgbd&quot;, k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest ideal string is &quot;acbd&quot;. The length of this string is 4, so 4 is returned.\nNote that &quot;acfgbd&quot; is not ideal because &#39;c&#39; and &#39;f&#39; have a difference of 3 in alphabet order.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, k = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest ideal string is &quot;abcd&quot;. The length of this string is 4, so 4 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 25</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 747,
            "dislikes": 23,
            "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.4K\", \"totalSubmission\": \"59.9K\", \"totalAcceptedRaw\": 22448, \"totalSubmissionRaw\": 59854, \"acRate\": \"37.5%\"}",
            "hints": [
                "How can you calculate the longest ideal subsequence that ends at a specific index i?",
                "Can you calculate it for all positions i? How can you use previously calculated answers to calculate the answer for the next position?"
            ],
            "rephrased": {
                "body": "Given a string `s` consisting of lowercase letters and an integer `k`, find the length of the longest ideal string. A string `t` is considered ideal if it is a subsequence of `s` and the absolute difference in alphabet order between every two adjacent letters in `t` is less than or equal to `k`.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "0 <= k <= 25",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"acfgbd\", k = 2",
                        "output": "4",
                        "explanation": "The longest ideal string is \"acbd\". The length of this string is 4."
                    },
                    {
                        "input": "s = \"abcd\", k = 3",
                        "output": "4",
                        "explanation": "The longest ideal string is \"abcd\". The length of this string is 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-increasing-subsequence",
                "title": "Longest Increasing Subsequence",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How can you calculate the longest ideal subsequence that ends at a specific index i?",
            "Can you calculate it for all positions i? How can you use previously calculated answers to calculate the answer for the next position?"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestIdealString(string s, int k) {\n    // dp[i] := longest subseq that ends at ('a' + i)\n    vector<int> dp(26);\n\n    for (const char c : s) {\n      const int i = c - 'a';\n      dp[i] = 1 + getMaxReachable(dp, i, k);\n    }\n\n    return *max_element(dp.begin(), dp.end());\n  }\n\n private:\n  int getMaxReachable(const vector<int>& dp, int i, int k) {\n    const int first = max(0, i - k);\n    const int last = min(25, i + k);\n    int maxReachable = 0;\n    for (int j = first; j <= last; ++j)\n      maxReachable = max(maxReachable, dp[j]);\n    return maxReachable;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestIdealString(String s, int k) {\n    // dp[i] := longest subseq that ends at ('a' + i)\n    int[] dp = new int[26];\n\n    for (final char c : s.toCharArray()) {\n      final int i = c - 'a';\n      dp[i] = 1 + getMaxReachable(dp, i, k);\n    }\n\n    return Arrays.stream(dp).max().getAsInt();\n  }\n\n  private int getMaxReachable(int[] dp, int i, int k) {\n    final int first = Math.max(0, i - k);\n    final int last = Math.min(25, i + k);\n    int maxReachable = 0;\n    for (int j = first; j <= last; ++j)\n      maxReachable = Math.max(maxReachable, dp[j]);\n    return maxReachable;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestIdealString(self, s: str, k: int) -> int:\n    # dp[i] := longest subseq that ends at ('a' + i)\n    dp = [0] * 26\n\n    for c in s:\n      i = ord(c) - ord('a')\n      dp[i] = 1 + self._getMaxReachable(dp, i, k)\n\n    return max(dp)\n\n  def _getMaxReachable(self, dp: List[int], i: int, k: int) -> int:\n    first = max(0, i - k)\n    last = min(25, i + k)\n    maxReachable = 0\n    for j in range(first, last + 1):\n      maxReachable = max(maxReachable, dp[j])\n    return maxReachable\n",
                "lang_text": "py"
            }
        }
    }
}