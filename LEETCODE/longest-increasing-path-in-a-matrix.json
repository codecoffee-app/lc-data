{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "329",
            "title": "Longest Increasing Path in a Matrix",
            "titleSlug": "longest-increasing-path-in-a-matrix",
            "content": "<p>Given an <code>m x n</code> integers <code>matrix</code>, return <em>the length of the longest increasing path in </em><code>matrix</code>.</p>\n\n<p>From each cell, you can either move in four directions: left, right, up, or down. You <strong>may not</strong> move <strong>diagonally</strong> or move <strong>outside the boundary</strong> (i.e., wrap-around is not allowed).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[9,9,4],[6,6,8],[2,1,1]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing path is <code>[1, 2, 6, 9]</code>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[3,4,5],[3,2,6],[2,2,1]]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 8710,
            "dislikes": 128,
            "similarQuestions": "[{\"title\": \"Number of Increasing Paths in a Grid\", \"titleSlug\": \"number-of-increasing-paths-in-a-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"491.5K\", \"totalSubmission\": \"924.5K\", \"totalAcceptedRaw\": 491532, \"totalSubmissionRaw\": 924504, \"acRate\": \"53.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an `m x n` integer matrix, find the length of the longest increasing path in the matrix. You can move from each cell in four directions: left, right, up, or down. Diagonal moves and moves outside the boundary of the matrix are not allowed.",
                "constraints": [
                    "`m == matrix.length`",
                    "`n == matrix[i].length`",
                    "`1 <= m, n <= 200`",
                    "`0 <= matrix[i][j] <= 2<sup>31</sup> - 1`"
                ],
                "testcases": [
                    {
                        "input": "[[9,9,4],[6,6,8],[2,1,1]]",
                        "output": "4",
                        "explanation": "The longest increasing path is [1, 2, 6, 9]."
                    },
                    {
                        "input": "[[3,4,5],[3,2,6],[2,2,1]]",
                        "output": "4",
                        "explanation": "The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed."
                    },
                    {
                        "input": "[[1]]",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-increasing-paths-in-a-grid",
                "title": "Number of Increasing Paths in a Grid",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestIncreasingPath(vector<vector<int>>& matrix) {\n    const int m = matrix.size();\n    const int n = matrix[0].size();\n    int ans = 0;\n    vector<vector<int>> memo(m, vector<int>(n));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        ans = max(ans, dfs(matrix, i, j, INT_MIN, memo));\n\n    return ans;\n  }\n\n private:\n  // memo[i][j] := the LIP starting from matrix[i][j]\n  int dfs(const vector<vector<int>>& matrix, int i, int j, int prev,\n          vector<vector<int>>& memo) {\n    if (i < 0 || i == matrix.size() || j < 0 || j == matrix[0].size())\n      return 0;\n    if (matrix[i][j] <= prev)\n      return 0;\n    int& ans = memo[i][j];\n    if (ans > 0)\n      return ans;\n\n    const int curr = matrix[i][j];\n    return ans = 1 + max({dfs(matrix, i + 1, j, curr, memo),\n                          dfs(matrix, i - 1, j, curr, memo),\n                          dfs(matrix, i, j + 1, curr, memo),\n                          dfs(matrix, i, j - 1, curr, memo)});\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestIncreasingPath(int[][] matrix) {\n    final int m = matrix.length;\n    final int n = matrix[0].length;\n    int ans = 0;\n    // memo[i][j] := the LIP starting from matrix[i][j]\n    int[][] memo = new int[m][n];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        ans = Math.max(ans, dfs(matrix, i, j, Integer.MIN_VALUE, memo));\n\n    return ans;\n  }\n\n  private int dfs(int[][] matrix, int i, int j, int prev, int[][] memo) {\n    if (i < 0 || i == matrix.length || j < 0 || j == matrix[0].length)\n      return 0;\n    if (matrix[i][j] <= prev)\n      return 0;\n    if (memo[i][j] > 0)\n      return memo[i][j];\n\n    final int curr = matrix[i][j];\n    final int a = dfs(matrix, i + 1, j, curr, memo);\n    final int b = dfs(matrix, i - 1, j, curr, memo);\n    final int c = dfs(matrix, i, j + 1, curr, memo);\n    final int d = dfs(matrix, i, j - 1, curr, memo);\n    return memo[i][j] = 1 + Math.max(Math.max(a, b), Math.max(c, d));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n    m = len(matrix)\n    n = len(matrix[0])\n\n    @functools.lru_cache(None)\n    def dfs(i: int, j: int, prev: int) -> int:\n      if i < 0 or i == m or j < 0 or j == n:\n        return 0\n      if matrix[i][j] <= prev:\n        return 0\n\n      curr = matrix[i][j]\n      return 1 + max(dfs(i + 1, j, curr),\n                     dfs(i - 1, j, curr),\n                     dfs(i, j + 1, curr),\n                     dfs(i, j - 1, curr))\n\n    return max(dfs(i, j, -math.inf) for i in range(m) for j in range(n))\n",
                "lang_text": "py"
            }
        }
    }
}