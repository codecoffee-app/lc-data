{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2407",
            "title": "Longest Increasing Subsequence II",
            "titleSlug": "longest-increasing-subsequence-ii",
            "content": "<p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p>\n\n<p>Find the longest subsequence of <code>nums</code> that meets the following requirements:</p>\n\n<ul>\n\t<li>The subsequence is <strong>strictly increasing</strong> and</li>\n\t<li>The difference between adjacent elements in the subsequence is <strong>at most</strong> <code>k</code>.</li>\n</ul>\n\n<p>Return<em> the length of the <strong>longest</strong> <strong>subsequence</strong> that meets the requirements.</em></p>\n\n<p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,1,4,3,4,5,8,15], k = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nThe longest subsequence that meets the requirements is [1,3,4,5,8].\nThe subsequence has a length of 5, so we return 5.\nNote that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,4,5,1,8,12,4,7], k = 5\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nThe longest subsequence that meets the requirements is [4,5,8,12].\nThe subsequence has a length of 4, so we return 4.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5], k = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nThe longest subsequence that meets the requirements is [1].\nThe subsequence has a length of 1, so we return 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 788,
            "dislikes": 32,
            "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Longest Increasing Subsequence\", \"titleSlug\": \"number-of-longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Continuous Increasing Subsequence\", \"titleSlug\": \"longest-continuous-increasing-subsequence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Longest Substring of One Repeating Character\", \"titleSlug\": \"longest-substring-of-one-repeating-character\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Booking Concert Tickets in Groups\", \"titleSlug\": \"booking-concert-tickets-in-groups\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Monotonic Queue",
                    "slug": "monotonic-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.9K\", \"totalSubmission\": \"52.6K\", \"totalAcceptedRaw\": 11930, \"totalSubmissionRaw\": 52619, \"acRate\": \"22.7%\"}",
            "hints": [
                "We can use dynamic programming. Let dp[i][val] be the answer using only the first i + 1 elements, and the last element in the subsequence is equal to val.",
                "The only value that might change between dp[i - 1] and dp[i] are dp[i - 1][val] and dp[i][val].",
                "Try using dp[i - 1] and the fact that the second last element in the subsequence has to fall within a range to calculate dp[i][val].",
                "We can use a segment tree to find the maximum value in dp[i - 1] within a certain range."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `k`, find the length of the longest subsequence of `nums` that is strictly increasing and where the difference between adjacent elements in the subsequence is at most `k`. A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i], k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "nums = [4,2,1,4,3,4,5,8,15], k = 3",
                        "output": "5",
                        "explanation": "The longest subsequence that satisfies the conditions is [1, 3, 4, 5, 8], which has a length of 5."
                    },
                    {
                        "input": "nums = [7,4,5,1,8,12,4,7], k = 5",
                        "output": "4",
                        "explanation": "The longest subsequence that satisfies the conditions is [4, 5, 8, 12], which has a length of 4."
                    },
                    {
                        "input": "nums = [1,5], k = 1",
                        "output": "1",
                        "explanation": "The longest subsequence that satisfies the conditions is [1], which has a length of 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-increasing-subsequence",
                "title": "Longest Increasing Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-longest-increasing-subsequence",
                "title": "Number of Longest Increasing Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "longest-continuous-increasing-subsequence",
                "title": "Longest Continuous Increasing Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-substring-of-one-repeating-character",
                "title": "Longest Substring of One Repeating Character",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "booking-concert-tickets-in-groups",
                "title": "Booking Concert Tickets in Groups",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We can use dynamic programming. Let dp[i][val] be the answer using only the first i + 1 elements, and the last element in the subsequence is equal to val.",
            "The only value that might change between dp[i - 1] and dp[i] are dp[i - 1][val] and dp[i][val].",
            "Try using dp[i - 1] and the fact that the second last element in the subsequence has to fall within a range to calculate dp[i][val].",
            "We can use a segment tree to find the maximum value in dp[i - 1] within a certain range."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Monotonic Queue",
                "slug": "monotonic-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct SegmentTreeNode {\n  int lo;\n  int hi;\n  int maxLength;\n  unique_ptr<SegmentTreeNode> left;\n  unique_ptr<SegmentTreeNode> right;\n  // maxLength := max length of LIS ending w/ [lo..hi]\n  SegmentTreeNode(int lo, int hi, int maxLength,\n                  unique_ptr<SegmentTreeNode> left = nullptr,\n                  unique_ptr<SegmentTreeNode> right = nullptr)\n      : lo(lo),\n        hi(hi),\n        maxLength(maxLength),\n        left(move(left)),\n        right(move(right)) {}\n};\n\nclass SegmentTree {\n public:\n  explicit SegmentTree() : root(make_unique<SegmentTreeNode>(0, 1e5 + 1, 0)) {}\n\n  void updateRange(int i, int j, int maxLength) {\n    update(root, i, j, maxLength);\n  }\n\n  // queryRange(i, j) := max length of LIS ending w/ [i..j]\n  int queryRange(int i, int j) {\n    return query(root, i, j);\n  }\n\n private:\n  std::unique_ptr<SegmentTreeNode> root;\n\n  void update(unique_ptr<SegmentTreeNode>& root, int i, int j, int maxLength) {\n    if (root->lo == i && root->hi == j) {\n      root->maxLength = maxLength;\n      root->left = nullptr;\n      root->right = nullptr;\n      return;\n    }\n    const int mid = root->lo + (root->hi - root->lo) / 2;\n    if (root->left == nullptr) {\n      root->left = make_unique<SegmentTreeNode>(root->lo, mid, root->maxLength);\n      root->right =\n          make_unique<SegmentTreeNode>(mid + 1, root->hi, root->maxLength);\n    }\n    if (j <= mid)\n      update(root->left, i, j, maxLength);\n    else if (i > mid)\n      update(root->right, i, j, maxLength);\n    else {\n      update(root->left, i, mid, maxLength);\n      update(root->right, mid + 1, j, maxLength);\n    }\n    root->maxLength = max(root->left->maxLength, root->right->maxLength);\n  }\n\n  int query(unique_ptr<SegmentTreeNode>& root, int i, int j) {\n    if (root->left == nullptr)\n      return root->maxLength;\n    if (root->lo == i && root->hi == j)\n      return root->maxLength;\n    const int mid = root->lo + (root->hi - root->lo) / 2;\n    if (j <= mid)\n      return query(root->left, i, j);\n    if (i > mid)\n      return query(root->right, i, j);\n    return max(query(root->left, i, mid), query(root->right, mid + 1, j));\n  }\n};\n\nclass Solution {\n public:\n  int lengthOfLIS(vector<int>& nums, int k) {\n    int ans = 1;\n    SegmentTree tree;\n\n    for (const int num : nums) {\n      const int left = max(1, num - k);\n      const int right = num - 1;\n      // Max length of LIS ending w/ [left..right] plus current num\n      const int maxLength = tree.queryRange(left, right) + 1;\n      ans = std::max(ans, maxLength);\n      tree.updateRange(num, num, maxLength);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}