{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "300",
            "title": "Longest Increasing Subsequence",
            "titleSlug": "longest-increasing-subsequence",
            "content": "<p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>strictly increasing </strong></em><span data-keyword=\"subsequence-array\"><em><strong>subsequence</strong></em></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,9,2,5,3,7,101,18]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0,3,2,3]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7,7]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2500</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b>Follow up:</b>&nbsp;Can you come up with an algorithm that runs in&nbsp;<code>O(n log(n))</code> time complexity?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 19334,
            "dislikes": 366,
            "similarQuestions": "[{\"title\": \"Increasing Triplet Subsequence\", \"titleSlug\": \"increasing-triplet-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Russian Doll Envelopes\", \"titleSlug\": \"russian-doll-envelopes\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Length of Pair Chain\", \"titleSlug\": \"maximum-length-of-pair-chain\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Longest Increasing Subsequence\", \"titleSlug\": \"number-of-longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum ASCII Delete Sum for Two Strings\", \"titleSlug\": \"minimum-ascii-delete-sum-for-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Removals to Make Mountain Array\", \"titleSlug\": \"minimum-number-of-removals-to-make-mountain-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find the Longest Valid Obstacle Course at Each Position\", \"titleSlug\": \"find-the-longest-valid-obstacle-course-at-each-position\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make the Array K-Increasing\", \"titleSlug\": \"minimum-operations-to-make-the-array-k-increasing\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Ideal Subsequence\", \"titleSlug\": \"longest-ideal-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Books You Can Take\", \"titleSlug\": \"maximum-number-of-books-you-can-take\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Increasing Subsequence II\", \"titleSlug\": \"longest-increasing-subsequence-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.4M\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 1435394, \"totalSubmissionRaw\": 2668828, \"acRate\": \"53.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, find the length of the longest strictly increasing subsequence.",
                "constraints": [
                    "1 <= nums.length <= 2500",
                    "-10^4 <= nums[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[10,9,2,5,3,7,101,18]",
                        "output": "4",
                        "explanation": "The longest increasing subsequence is [2,3,7,101], therefore the length is 4."
                    },
                    {
                        "input": "[0,1,0,3,2,3]",
                        "output": "4",
                        "explanation": null
                    },
                    {
                        "input": "[7,7,7,7,7,7,7]",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "increasing-triplet-subsequence",
                "title": "Increasing Triplet Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "russian-doll-envelopes",
                "title": "Russian Doll Envelopes",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-length-of-pair-chain",
                "title": "Maximum Length of Pair Chain",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-longest-increasing-subsequence",
                "title": "Number of Longest Increasing Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-ascii-delete-sum-for-two-strings",
                "title": "Minimum ASCII Delete Sum for Two Strings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-removals-to-make-mountain-array",
                "title": "Minimum Number of Removals to Make Mountain Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-the-longest-valid-obstacle-course-at-each-position",
                "title": "Find the Longest Valid Obstacle Course at Each Position",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-operations-to-make-the-array-k-increasing",
                "title": "Minimum Operations to Make the Array K-Increasing",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-ideal-subsequence",
                "title": "Longest Ideal Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-books-you-can-take",
                "title": "Maximum Number of Books You Can Take",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-increasing-subsequence-ii",
                "title": "Longest Increasing Subsequence II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int lengthOfLIS(vector<int>& nums) {\n    if (nums.empty())\n      return 0;\n\n    // dp[i] := Length of LIS ending at nums[i]\n    vector<int> dp(nums.size(), 1);\n\n    for (int i = 1; i < nums.size(); ++i)\n      for (int j = 0; j < i; ++j)\n        if (nums[j] < nums[i])\n          dp[i] = max(dp[i], dp[j] + 1);\n\n    return *max_element(dp.begin(), dp.end());\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int lengthOfLIS(int[] nums) {\n    if (nums.length == 0)\n      return 0;\n\n    // dp[i] := Length of LIS ending at nums[i]\n    int[] dp = new int[nums.length];\n    Arrays.fill(dp, 1);\n\n    for (int i = 1; i < nums.length; ++i)\n      for (int j = 0; j < i; ++j)\n        if (nums[j] < nums[i])\n          dp[i] = Math.max(dp[i], dp[j] + 1);\n\n    return Arrays.stream(dp).max().getAsInt();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def lengthOfLIS(self, nums: List[int]) -> int:\n    if not nums:\n      return 0\n\n    # dp[i] := LIS ending at nums[i]\n    dp = [1] * len(nums)\n\n    for i in range(1, len(nums)):\n      for j in range(i):\n        if nums[j] < nums[i]:\n          dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n",
                "lang_text": "py"
            }
        }
    }
}