{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2771",
            "title": "Longest Non-decreasing Subarray From Two Arrays",
            "titleSlug": "longest-non-decreasing-subarray-from-two-arrays",
            "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code> of length <code>n</code>.</p>\n\n<p>Let&#39;s define another <strong>0-indexed</strong> integer array, <code>nums3</code>, of length <code>n</code>. For each index <code>i</code> in the range <code>[0, n - 1]</code>, you can assign either <code>nums1[i]</code> or <code>nums2[i]</code> to <code>nums3[i]</code>.</p>\n\n<p>Your task is to maximize the length of the <strong>longest non-decreasing subarray</strong> in <code>nums3</code> by choosing its values optimally.</p>\n\n<p>Return <em>an integer representing the length of the <strong>longest non-decreasing</strong> subarray in</em> <code>nums3</code>.</p>\n\n<p><strong>Note: </strong>A <strong>subarray</strong> is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2,3,1], nums2 = [1,2,1]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>One way to construct nums3 is: \nnums3 = [nums1[0], nums2[1], nums2[2]] =&gt; [2,2,1]. \nThe subarray starting from index 0 and ending at index 1, [2,2], forms a non-decreasing subarray of length 2. \nWe can show that 2 is the maximum achievable length.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3,2,1], nums2 = [2,2,3,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One way to construct nums3 is: \nnums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] =&gt; [1,2,3,4]. \nThe entire array forms a non-decreasing subarray of length 4, making it the maximum achievable length.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,1], nums2 = [2,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> One way to construct nums3 is: \nnums3 = [nums1[0], nums1[1]] =&gt; [1,1]. \nThe entire array forms a non-decreasing subarray of length 2, making it the maximum achievable length.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length == nums2.length == n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 530,
            "dislikes": 11,
            "similarQuestions": "[{\"title\": \"Russian Doll Envelopes\", \"titleSlug\": \"russian-doll-envelopes\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Length of Pair Chain\", \"titleSlug\": \"maximum-length-of-pair-chain\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.8K\", \"totalSubmission\": \"66.7K\", \"totalAcceptedRaw\": 18841, \"totalSubmissionRaw\": 66657, \"acRate\": \"28.3%\"}",
            "hints": [
                "Consider using dynamic programming.",
                "Let dp[i][0] (dp[i][1]) be the length of the longest non-decreasing ending with nums1[i] (nums2[i]).",
                "Initialize dp[i][0] to 1. If nums1[i] >= nums1[i - 1] then dp[i][0] may be dp[i - 1][0] + 1. If nums1[i] >= nums2[i - 1] then dp[i][0] may be dp[i - 1][1] + 1. Perform a similar calculation for nums2[i] and dp[i][1]."
            ],
            "rephrased": {
                "body": "Given two 0-indexed integer arrays, `nums1` and `nums2`, of length `n`.  Construct a third 0-indexed integer array `nums3` of length `n`. For each index `i`, `nums3[i]` can be assigned either `nums1[i]` or `nums2[i]`.  The goal is to maximize the length of the longest non-decreasing subarray in `nums3` by choosing its values optimally. Return the maximum possible length of a non-decreasing subarray in `nums3`. A subarray is defined as a contiguous non-empty sequence of elements within an array.",
                "constraints": [
                    "1 <= nums1.length == nums2.length == n <= 10^5",
                    "1 <= nums1[i], nums2[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [2,3,1], nums2 = [1,2,1]",
                        "output": "2",
                        "explanation": "One optimal `nums3` is [2, 2, 1]. The subarray [2, 2] (from index 0 to 1) is non-decreasing and has length 2. It can be demonstrated that no `nums3` can achieve a longer non-decreasing subarray."
                    },
                    {
                        "input": "nums1 = [1,3,2,1], nums2 = [2,2,3,4]",
                        "output": "4",
                        "explanation": "One optimal `nums3` is [1, 2, 3, 4]. The entire array is non-decreasing and has length 4, which is the maximum achievable length."
                    },
                    {
                        "input": "nums1 = [1,1], nums2 = [2,2]",
                        "output": "2",
                        "explanation": "One optimal `nums3` is [1, 1]. The entire array is non-decreasing and has length 2, which is the maximum achievable length."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "russian-doll-envelopes",
                "title": "Russian Doll Envelopes",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-length-of-pair-chain",
                "title": "Maximum Length of Pair Chain",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Consider using dynamic programming.",
            "Let dp[i][0] (dp[i][1]) be the length of the longest non-decreasing ending with nums1[i] (nums2[i]).",
            "Initialize dp[i][0] to 1. If nums1[i] >= nums1[i - 1] then dp[i][0] may be dp[i - 1][0] + 1. If nums1[i] >= nums2[i - 1] then dp[i][0] may be dp[i - 1][1] + 1. Perform a similar calculation for nums2[i] and dp[i][1]."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxNonDecreasingLength(vector<int>& nums1, vector<int>& nums2) {\n    int ans = 1;\n    int dp1 = 1;  // longest subarray ends in nums1[i] so far\n    int dp2 = 1;  // longest subarray ends in nums2[i] so far\n\n    for (int i = 1; i < nums1.size(); ++i) {\n      const int dp11 = nums1[i - 1] <= nums1[i] ? dp1 + 1 : 1;\n      const int dp21 = nums2[i - 1] <= nums1[i] ? dp2 + 1 : 1;\n      const int dp12 = nums1[i - 1] <= nums2[i] ? dp1 + 1 : 1;\n      const int dp22 = nums2[i - 1] <= nums2[i] ? dp2 + 1 : 1;\n      dp1 = max(dp11, dp21);\n      dp2 = max(dp12, dp22);\n      ans = max({ans, dp1, dp2});\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxNonDecreasingLength(int[] nums1, int[] nums2) {\n    int ans = 1;\n    int dp1 = 1; // longest subarray ends in nums1[i] so far\n    int dp2 = 1; // longest subarray ends in nums2[i] so far\n\n    for (int i = 1; i < nums1.length; ++i) {\n      final int dp11 = nums1[i - 1] <= nums1[i] ? dp1 + 1 : 1;\n      final int dp21 = nums2[i - 1] <= nums1[i] ? dp2 + 1 : 1;\n      final int dp12 = nums1[i - 1] <= nums2[i] ? dp1 + 1 : 1;\n      final int dp22 = nums2[i - 1] <= nums2[i] ? dp2 + 1 : 1;\n      dp1 = Math.max(dp11, dp21);\n      dp2 = Math.max(dp12, dp22);\n      ans = Math.max(ans, Math.max(dp1, dp2));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxNonDecreasingLength(self, nums1: List[int], nums2: List[int]) -> int:\n    ans = 1\n    dp1 = 1  # longest subarray ends in nums1[i] so far\n    dp2 = 1  # longest subarray ends in nums2[i] so far\n\n    for i in range(1, len(nums1)):\n      dp11 = dp1 + 1 if nums1[i - 1] <= nums1[i] else 1\n      dp21 = dp2 + 1 if nums2[i - 1] <= nums1[i] else 1\n      dp12 = dp1 + 1 if nums1[i - 1] <= nums2[i] else 1\n      dp22 = dp2 + 1 if nums2[i - 1] <= nums2[i] else 1\n      dp1 = max(dp11, dp21)\n      dp2 = max(dp12, dp22)\n      ans = max(ans, dp1, dp2)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}