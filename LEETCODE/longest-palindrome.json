{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "409",
            "title": "Longest Palindrome",
            "titleSlug": "longest-palindrome",
            "content": "<p>Given a string <code>s</code> which consists of lowercase or uppercase letters, return <em>the length of the <strong>longest palindrome</strong></em>&nbsp;that can be built with those letters.</p>\n\n<p>Letters are <strong>case sensitive</strong>, for example,&nbsp;<code>&quot;Aa&quot;</code> is not considered a palindrome here.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abccccdd&quot;\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The longest palindrome that can be built is &quot;a&quot;, whose length is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase <strong>and/or</strong> uppercase English&nbsp;letters only.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5180,
            "dislikes": 344,
            "similarQuestions": "[{\"title\": \"Palindrome Permutation\", \"titleSlug\": \"palindrome-permutation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Longest Palindrome by Concatenating Two Letter Words\", \"titleSlug\": \"longest-palindrome-by-concatenating-two-letter-words\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Largest Palindromic Number\", \"titleSlug\": \"largest-palindromic-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"587K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 587024, \"totalSubmissionRaw\": 1088849, \"acRate\": \"53.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` containing uppercase and lowercase letters, determine the length of the longest palindrome that can be constructed using these letters. Note that the palindrome must be case-sensitive (e.g., 'Aa' is not considered a palindrome).",
                "constraints": [
                    "1 <= s.length <= 2000",
                    "s consists of lowercase and/or uppercase English letters only."
                ],
                "testcases": [
                    {
                        "input": "abccccdd",
                        "output": "7",
                        "explanation": "The longest palindrome that can be constructed is 'dccaccd', with a length of 7. We use two 'c's, two 'd's, and two other 'c's with 'a' in the center."
                    },
                    {
                        "input": "a",
                        "output": "1",
                        "explanation": "The longest palindrome that can be constructed is 'a', with a length of 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "palindrome-permutation",
                "title": "Palindrome Permutation",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-palindrome-by-concatenating-two-letter-words",
                "title": "Longest Palindrome by Concatenating Two Letter Words",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "largest-palindromic-number",
                "title": "Largest Palindromic Number",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestPalindrome(string s) {\n    int ans = 0;\n    vector<int> count(128);\n\n    for (const char c : s)\n      ++count[c];\n\n    for (const int c : count)\n      ans += c % 2 == 0 ? c : c - 1;\n\n    const bool hasOddCount =\n        any_of(count.begin(), count.end(), [](int c) { return c & 1; });\n\n    return ans + hasOddCount;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestPalindrome(String s) {\n    int ans = 0;\n    int[] count = new int[128];\n\n    for (final char c : s.toCharArray())\n      ++count[c];\n\n    for (final int c : count)\n      ans += c % 2 == 0 ? c : c - 1;\n\n    final boolean hasOddCount = Arrays.stream(count).anyMatch(c -> c % 2 == 1);\n\n    return ans + (hasOddCount ? 1 : 0);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestPalindrome(self, s: str) -> int:\n    ans = 0\n    count = collections.Counter(s)\n\n    for c in count.values():\n      ans += c if c % 2 == 0 else c - 1\n\n    hasOddCount = any(c % 2 == 1 for c in count.values())\n\n    return ans + hasOddCount\n",
                "lang_text": "py"
            }
        }
    }
}