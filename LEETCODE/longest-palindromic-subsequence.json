{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "516",
            "title": "Longest Palindromic Subsequence",
            "titleSlug": "longest-palindromic-subsequence",
            "content": "<p>Given a string <code>s</code>, find <em>the longest palindromic <strong>subsequence</strong>&#39;s length in</em> <code>s</code>.</p>\n\n<p>A <strong>subsequence</strong> is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bbbab&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One possible longest palindromic subsequence is &quot;bbbb&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbbd&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> One possible longest palindromic subsequence is &quot;bb&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9210,
            "dislikes": 316,
            "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindromic Substrings\", \"titleSlug\": \"palindromic-substrings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Different Palindromic Subsequences\", \"titleSlug\": \"count-different-palindromic-subsequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Common Subsequence\", \"titleSlug\": \"longest-common-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Palindromic Subsequence II\", \"titleSlug\": \"longest-palindromic-subsequence-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximize Palindrome Length From Subsequences\", \"titleSlug\": \"maximize-palindrome-length-from-subsequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Product of the Length of Two Palindromic Subsequences\", \"titleSlug\": \"maximum-product-of-the-length-of-two-palindromic-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"447K\", \"totalSubmission\": \"717.2K\", \"totalAcceptedRaw\": 447045, \"totalSubmissionRaw\": 717174, \"acRate\": \"62.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Determine the length of the longest palindromic subsequence within a given string `s`. A subsequence is created by removing zero or more characters from `s` without altering the order of the remaining characters.",
                "constraints": [
                    "1 <= s.length <= 1000",
                    "s consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "bbbab",
                        "output": 4,
                        "explanation": "One longest palindromic subsequence is \"bbbb\"."
                    },
                    {
                        "input": "cbbd",
                        "output": 2,
                        "explanation": "One longest palindromic subsequence is \"bb\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-palindromic-substring",
                "title": "Longest Palindromic Substring",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "palindromic-substrings",
                "title": "Palindromic Substrings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-different-palindromic-subsequences",
                "title": "Count Different Palindromic Subsequences",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-common-subsequence",
                "title": "Longest Common Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-palindromic-subsequence-ii",
                "title": "Longest Palindromic Subsequence II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximize-palindrome-length-from-subsequences",
                "title": "Maximize Palindrome Length From Subsequences",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
                "title": "Maximum Product of the Length of Two Palindromic Subsequences",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestPalindromeSubseq(string s) {\n    const int n = s.length();\n    // dp[i][j] := LPS's length in s[i..j]\n    dp.resize(n, vector<int>(n));\n    return lps(s, 0, n - 1);\n  }\n\n private:\n  vector<vector<int>> dp;\n\n  int lps(const string& s, int i, int j) {\n    if (i > j)\n      return 0;\n    if (i == j)\n      return 1;\n    if (dp[i][j] > 0)\n      return dp[i][j];\n\n    if (s[i] == s[j])\n      dp[i][j] = 2 + lps(s, i + 1, j - 1);\n    else\n      dp[i][j] = max(lps(s, i + 1, j), lps(s, i, j - 1));\n\n    return dp[i][j];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestPalindromeSubseq(String s) {\n    final int n = s.length();\n    // dp[i][j] := LPS's length in s[i..j]\n    dp = new int[n][n];\n    return lps(s, 0, n - 1);\n  }\n\n  private int[][] dp;\n\n  private int lps(final String s, int i, int j) {\n    if (i > j)\n      return 0;\n    if (i == j)\n      return 1;\n    if (dp[i][j] > 0)\n      return dp[i][j];\n\n    if (s.charAt(i) == s.charAt(j))\n      dp[i][j] = 2 + lps(s, i + 1, j - 1);\n    else\n      dp[i][j] = Math.max(lps(s, i + 1, j), lps(s, i, j - 1));\n\n    return dp[i][j];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestPalindromeSubseq(self, s: str) -> int:\n    # dp(i, j) := LPS's length in s[i..j]\n    @functools.lru_cache(None)\n    def dp(i: int, j: int) -> int:\n      if i > j:\n        return 0\n      if i == j:\n        return 1\n      if s[i] == s[j]:\n        return 2 + dp(i + 1, j - 1)\n      return max(dp(i + 1, j), dp(i, j - 1))\n\n    return dp(0, len(s) - 1)\n",
                "lang_text": "py"
            }
        }
    }
}