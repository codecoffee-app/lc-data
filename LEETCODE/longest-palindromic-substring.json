{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "5",
            "title": "Longest Palindromic Substring",
            "titleSlug": "longest-palindromic-substring",
            "content": "<p>Given a string <code>s</code>, return <em>the longest</em> <span data-keyword=\"palindromic-string\"><em>palindromic</em></span> <span data-keyword=\"substring-nonempty\"><em>substring</em></span> in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babad&quot;\n<strong>Output:</strong> &quot;bab&quot;\n<strong>Explanation:</strong> &quot;aba&quot; is also a valid answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbbd&quot;\n<strong>Output:</strong> &quot;bb&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of only digits and English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 28311,
            "dislikes": 1681,
            "similarQuestions": "[{\"title\": \"Shortest Palindrome\", \"titleSlug\": \"shortest-palindrome\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Palindrome Permutation\", \"titleSlug\": \"palindrome-permutation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Palindrome Pairs\", \"titleSlug\": \"palindrome-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Palindromic Subsequence\", \"titleSlug\": \"longest-palindromic-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindromic Substrings\", \"titleSlug\": \"palindromic-substrings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Non-overlapping Palindrome Substrings\", \"titleSlug\": \"maximum-number-of-non-overlapping-palindrome-substrings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"2.8M\", \"totalSubmission\": \"8.4M\", \"totalAcceptedRaw\": 2819087, \"totalSubmissionRaw\": 8433068, \"acRate\": \"33.4%\"}",
            "hints": [
                "How can we reuse a previously computed palindrome to compute a larger palindrome?",
                "If \u201caba\u201d is a palindrome, is \u201cxabax\u201d a palindrome? Similarly is \u201cxabay\u201d a palindrome?",
                "Complexity based hint:</br>\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
            ],
            "rephrased": {
                "body": "Given a string `s`, find and return the longest palindromic substring within `s`. A palindromic substring is a sequence of characters that reads the same forwards and backward.",
                "constraints": [
                    "1 <= s.length <= 1000",
                    "s consists of only digits and English letters."
                ],
                "testcases": [
                    {
                        "input": "babad",
                        "output": "bab",
                        "explanation": "Another valid palindromic substring is \"aba\"."
                    },
                    {
                        "input": "cbbd",
                        "output": "bb",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "shortest-palindrome",
                "title": "Shortest Palindrome",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "palindrome-permutation",
                "title": "Palindrome Permutation",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-pairs",
                "title": "Palindrome Pairs",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-palindromic-subsequence",
                "title": "Longest Palindromic Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "palindromic-substrings",
                "title": "Palindromic Substrings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings",
                "title": "Maximum Number of Non-overlapping Palindrome Substrings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How can we reuse a previously computed palindrome to compute a larger palindrome?",
            "If \u201caba\u201d is a palindrome, is \u201cxabax\u201d a palindrome? Similarly is \u201cxabay\u201d a palindrome?",
            "Complexity based hint:</br>\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string longestPalindrome(string s) {\n    if (s.empty())\n      return \"\";\n\n    // [start, end] indices of the longest palindrome in s\n    pair<int, int> indices{0, 0};\n\n    for (int i = 0; i < s.length(); ++i) {\n      const auto [l1, r1] = extend(s, i, i);\n      if (r1 - l1 > indices.second - indices.first)\n        indices = {l1, r1};\n      if (i + 1 < s.length() && s[i] == s[i + 1]) {\n        const auto [l2, r2] = extend(s, i, i + 1);\n        if (r2 - l2 > indices.second - indices.first)\n          indices = {l2, r2};\n      }\n    }\n\n    return s.substr(indices.first, indices.second - indices.first + 1);\n  }\n\n private:\n  // Returns [start, end] indices of the longest palindrome extended from\n  // s[i..j]\n  pair<int, int> extend(const string& s, int i, int j) {\n    for (; i >= 0 && j < s.length(); --i, ++j)\n      if (s[i] != s[j])\n        break;\n    return {i + 1, j - 1};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String longestPalindrome(String s) {\n    if (s.isEmpty())\n      return \"\";\n\n    // [start, end] indices of the longest palindrome in s\n    int[] indices = {0, 0};\n\n    for (int i = 0; i < s.length(); ++i) {\n      int[] indices1 = extend(s, i, i);\n      if (indices1[1] - indices1[0] > indices[1] - indices[0])\n        indices = indices1;\n      if (i + 1 < s.length() && s.charAt(i) == s.charAt(i + 1)) {\n        int[] indices2 = extend(s, i, i + 1);\n        if (indices2[1] - indices2[0] > indices[1] - indices[0])\n          indices = indices2;\n      }\n    }\n\n    return s.substring(indices[0], indices[1] + 1);\n  }\n\n  // Returns [start, end] indices of the longest palindrome extended from s[i..j]\n  private int[] extend(final String s, int i, int j) {\n    for (; i >= 0 && j < s.length(); --i, ++j)\n      if (s.charAt(i) != s.charAt(j))\n        break;\n    return new int[] {i + 1, j - 1};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestPalindrome(self, s: str) -> str:\n    if not s:\n      return ''\n\n    indices = [0, 0]\n\n    # Returns [start, end] indices of the longest palindrome extended from s[i..j]\n    def extend(s: str, i: int, j: int) -> Tuple[int, int]:\n      while i >= 0 and j < len(s):\n        if s[i] != s[j]:\n          break\n        i -= 1\n        j += 1\n      return i + 1, j - 1\n\n    for i in range(len(s)):\n      l1, r1 = extend(s, i, i)\n      if r1 - l1 > indices[1] - indices[0]:\n        indices = l1, r1\n      if i + 1 < len(s) and s[i] == s[i + 1]:\n        l2, r2 = extend(s, i, i + 1)\n        if r2 - l2 > indices[1] - indices[0]:\n          indices = l2, r2\n\n    return s[indices[0]:indices[1] + 1]\n",
                "lang_text": "py"
            }
        }
    }
}