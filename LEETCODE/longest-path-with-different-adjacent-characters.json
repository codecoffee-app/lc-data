{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2246",
            "title": "Longest Path With Different Adjacent Characters",
            "titleSlug": "longest-path-with-different-adjacent-characters",
            "content": "<p>You are given a <strong>tree</strong> (i.e. a connected, undirected graph that has no cycles) <strong>rooted</strong> at node <code>0</code> consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. The tree is represented by a <strong>0-indexed</strong> array <code>parent</code> of size <code>n</code>, where <code>parent[i]</code> is the parent of node <code>i</code>. Since node <code>0</code> is the root, <code>parent[0] == -1</code>.</p>\n\n<p>You are also given a string <code>s</code> of length <code>n</code>, where <code>s[i]</code> is the character assigned to node <code>i</code>.</p>\n\n<p>Return <em>the length of the <strong>longest path</strong> in the tree such that no pair of <strong>adjacent</strong> nodes on the path have the same character assigned to them.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/25/testingdrawio.png\" style=\"width: 201px; height: 241px;\" />\n<pre>\n<strong>Input:</strong> parent = [-1,0,0,1,1,2], s = &quot;abacbe&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -&gt; 1 -&gt; 3. The length of this path is 3, so 3 is returned.\nIt can be proven that there is no longer path that satisfies the conditions. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/25/graph2drawio.png\" style=\"width: 201px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> parent = [-1,0,0,0], s = &quot;aabc&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest path where each two adjacent nodes have different characters is the path: 2 -&gt; 0 -&gt; 3. The length of this path is 3, so 3 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == parent.length == s.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= parent[i] &lt;= n - 1</code> for all <code>i &gt;= 1</code></li>\n\t<li><code>parent[0] == -1</code></li>\n\t<li><code>parent</code> represents a valid tree.</li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2307,
            "dislikes": 59,
            "similarQuestions": "[{\"title\": \"Diameter of Binary Tree\", \"titleSlug\": \"diameter-of-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Longest Univalue Path\", \"titleSlug\": \"longest-univalue-path\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Choose Edges to Maximize Score in a Tree\", \"titleSlug\": \"choose-edges-to-maximize-score-in-a-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                }
            ],
            "stats": "{\"totalAccepted\": \"69.8K\", \"totalSubmission\": \"127.1K\", \"totalAcceptedRaw\": 69800, \"totalSubmissionRaw\": 127051, \"acRate\": \"54.9%\"}",
            "hints": [
                "Do a DFS from the root. At each node, calculate the longest path we can make from two branches of that subtree.",
                "To do that, we need to find the length of the longest path from each of the node\u2019s children."
            ],
            "rephrased": {
                "body": "Given a tree rooted at node 0 with 'n' nodes (numbered 0 to n-1), represented by a 0-indexed array 'parent' where parent[i] is the parent of node i (parent[0] == -1), and a string 's' of length 'n' where s[i] is the character assigned to node i. Find the length of the longest path in the tree such that no two adjacent nodes on the path have the same character.",
                "constraints": [
                    "n == parent.length == s.length",
                    "1 <= n <= 10^5",
                    "0 <= parent[i] <= n - 1 for all i >= 1",
                    "parent[0] == -1",
                    "parent represents a valid tree.",
                    "s consists of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "parent = [-1,0,0,1,1,2], s = \"abacbe\"",
                        "output": "3",
                        "explanation": "The longest path where adjacent nodes have different characters is 0 -> 1 -> 3, with a length of 3."
                    },
                    {
                        "input": "parent = [-1,0,0,0], s = \"aabc\"",
                        "output": "3",
                        "explanation": "The longest path where adjacent nodes have different characters is 2 -> 0 -> 3, with a length of 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "diameter-of-binary-tree",
                "title": "Diameter of Binary Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-univalue-path",
                "title": "Longest Univalue Path",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "choose-edges-to-maximize-score-in-a-tree",
                "title": "Choose Edges to Maximize Score in a Tree",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Do a DFS from the root. At each node, calculate the longest path we can make from two branches of that subtree.",
            "To do that, we need to find the length of the longest path from each of the node\u2019s children."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            }
        ]
    }
}