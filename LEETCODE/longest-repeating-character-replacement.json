{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "424",
            "title": "Longest Repeating Character Replacement",
            "titleSlug": "longest-repeating-character-replacement",
            "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most <code>k</code> times.</p>\n\n<p>Return <em>the length of the longest substring containing the same letter you can get after performing the above operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ABAB&quot;, k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Replace the two &#39;A&#39;s with two &#39;B&#39;s or vice versa.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;AABABBA&quot;, k = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Replace the one &#39;A&#39; in the middle with &#39;B&#39; and form &quot;AABBBBA&quot;.\nThe substring &quot;BBBB&quot; has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only uppercase English letters.</li>\n\t<li><code>0 &lt;= k &lt;= s.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9915,
            "dislikes": 444,
            "similarQuestions": "[{\"title\": \"Longest Substring with At Most K Distinct Characters\", \"titleSlug\": \"longest-substring-with-at-most-k-distinct-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Max Consecutive Ones III\", \"titleSlug\": \"max-consecutive-ones-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Operations to Make Array Continuous\", \"titleSlug\": \"minimum-number-of-operations-to-make-array-continuous\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximize the Confusion of an Exam\", \"titleSlug\": \"maximize-the-confusion-of-an-exam\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Substring of One Repeating Character\", \"titleSlug\": \"longest-substring-of-one-repeating-character\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"615.7K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 615708, \"totalSubmissionRaw\": 1159657, \"acRate\": \"53.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` consisting of uppercase English letters and an integer `k`, you are allowed to change any character in `s` to any other uppercase English character. You can perform this operation at most `k` times.  The goal is to find the length of the longest substring that contains the same letter after performing at most `k` character changes.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists of only uppercase English letters.",
                    "0 <= k <= s.length"
                ],
                "testcases": [
                    {
                        "input": "s = \"ABAB\", k = 2",
                        "output": "4",
                        "explanation": "By changing the two 'A's to 'B's (or vice versa), the entire string becomes a single repeating character substring of length 4 (e.g., \"BBBB\")."
                    },
                    {
                        "input": "s = \"AABABBA\", k = 1",
                        "output": "4",
                        "explanation": "By changing the single 'A' in the middle to 'B', we get \"AABBBBA\". The longest substring containing only one character is \"BBBB\", which has length 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-substring-with-at-most-k-distinct-characters",
                "title": "Longest Substring with At Most K Distinct Characters",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "max-consecutive-ones-iii",
                "title": "Max Consecutive Ones III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-operations-to-make-array-continuous",
                "title": "Minimum Number of Operations to Make Array Continuous",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximize-the-confusion-of-an-exam",
                "title": "Maximize the Confusion of an Exam",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-substring-of-one-repeating-character",
                "title": "Longest Substring of One Repeating Character",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int characterReplacement(string s, int k) {\n    int ans = 0;\n    int maxCount = 0;\n    vector<int> count(128);\n\n    for (int l = 0, r = 0; r < s.length(); ++r) {\n      maxCount = max(maxCount, ++count[s[r]]);\n      while (maxCount + k < r - l + 1)\n        --count[s[l++]];\n      ans = max(ans, r - l + 1);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int characterReplacement(String s, int k) {\n    int ans = 0;\n    int maxCount = 0;\n    int[] count = new int[128];\n\n    for (int l = 0, r = 0; r < s.length(); ++r) {\n      maxCount = Math.max(maxCount, ++count[s.charAt(r)]);\n      while (maxCount + k < r - l + 1)\n        --count[s.charAt(l++)];\n      ans = Math.max(ans, r - l + 1);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def characterReplacement(self, s: str, k: int) -> int:\n    ans = 0\n    maxCount = 0\n    count = collections.Counter()\n\n    l = 0\n    for r, c in enumerate(s):\n      count[c] += 1\n      maxCount = max(maxCount, count[c])\n      while maxCount + k < r - l + 1:\n        count[s[l]] -= 1\n        l += 1\n      ans = max(ans, r - l + 1)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}