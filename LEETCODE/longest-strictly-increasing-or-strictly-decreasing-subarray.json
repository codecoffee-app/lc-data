{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3105",
            "title": "Longest Strictly Increasing or Strictly Decreasing Subarray",
            "titleSlug": "longest-strictly-increasing-or-strictly-decreasing-subarray",
            "content": "<p>You are given an array of integers <code>nums</code>. Return <em>the length of the <strong>longest</strong> <span data-keyword=\"subarray-nonempty\">subarray</span> of </em><code>nums</code><em> which is either <strong><span data-keyword=\"strictly-increasing-array\">strictly increasing</span></strong> or <strong><span data-keyword=\"strictly-decreasing-array\">strictly decreasing</span></strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,4,3,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strictly increasing subarrays of <code>nums</code> are <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[3]</code>, <code>[4]</code>, and <code>[1,4]</code>.</p>\n\n<p>The strictly decreasing subarrays of <code>nums</code> are <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[3]</code>, <code>[4]</code>, <code>[3,2]</code>, and <code>[4,3]</code>.</p>\n\n<p>Hence, we return <code>2</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,3,3,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strictly increasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[3]</code>, <code>[3]</code>, and <code>[3]</code>.</p>\n\n<p>The strictly decreasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[3]</code>, <code>[3]</code>, and <code>[3]</code>.</p>\n\n<p>Hence, we return <code>1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,2,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strictly increasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[2]</code>, and <code>[1]</code>.</p>\n\n<p>The strictly decreasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[2]</code>, <code>[1]</code>, <code>[3,2]</code>, <code>[2,1]</code>, and <code>[3,2,1]</code>.</p>\n\n<p>Hence, we return <code>3</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 102,
            "dislikes": 4,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                }
            ],
            "stats": "{\"totalAccepted\": \"38K\", \"totalSubmission\": \"66.3K\", \"totalAcceptedRaw\": 38003, \"totalSubmissionRaw\": 66269, \"acRate\": \"57.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of integers `nums`, find the length of the longest subarray that is either strictly increasing or strictly decreasing.",
                "constraints": [
                    "1 <= nums.length <= 50",
                    "1 <= nums[i] <= 50"
                ],
                "testcases": [
                    {
                        "input": "[1,4,3,3,2]",
                        "output": "2",
                        "explanation": "The longest strictly increasing subarray is [1,4]. The longest strictly decreasing subarray is [4,3] or [3,2]. The maximum length among these is 2."
                    },
                    {
                        "input": "[3,3,3,3]",
                        "output": "1",
                        "explanation": "Since the array contains only identical elements, the longest strictly increasing or decreasing subarray has a length of 1."
                    },
                    {
                        "input": "[3,2,1]",
                        "output": "3",
                        "explanation": "The array [3,2,1] is strictly decreasing, so the longest subarray has a length of 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Similar to 978. Longest Turbulent Subarray\n  int longestMonotonicSubarray(vector<int>& nums) {\n    int ans = 1;\n    int increasing = 1;\n    int decreasing = 1;\n\n    for (int i = 1; i < nums.size(); ++i) {\n      if (nums[i] > nums[i - 1]) {\n        increasing += 1;\n        decreasing = 1;\n      } else if (nums[i] < nums[i - 1]) {\n        decreasing += 1;\n        increasing = 1;\n      } else {\n        increasing = 1;\n        decreasing = 1;\n      }\n      ans = max({ans, increasing, decreasing});\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 978. Longest Turbulent Subarray\n  public int longestMonotonicSubarray(int[] nums) {\n    int ans = 1;\n    int increasing = 1;\n    int decreasing = 1;\n\n    for (int i = 1; i < nums.length; ++i) {\n      if (nums[i] > nums[i - 1]) {\n        increasing += 1;\n        decreasing = 1;\n      } else if (nums[i] < nums[i - 1]) {\n        decreasing += 1;\n        increasing = 1;\n      } else {\n        increasing = 1;\n        decreasing = 1;\n      }\n      ans = Math.max(ans, Math.max(increasing, decreasing));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Similar to 978. Longest Turbulent Subarray\n  def longestMonotonicSubarray(self, nums: List[int]) -> int:\n    ans = 1\n    increasing = 1\n    decreasing = 1\n\n    for i in range(1, len(nums)):\n      if nums[i] > nums[i - 1]:\n        increasing += 1\n        decreasing = 1\n      elif nums[i] < nums[i - 1]:\n        decreasing += 1\n        increasing = 1\n      else:\n        increasing = 1\n        decreasing = 1\n      ans = max(ans, increasing, decreasing)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}