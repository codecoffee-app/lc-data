{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1048",
            "title": "Longest String Chain",
            "titleSlug": "longest-string-chain",
            "content": "<p>You are given an array of <code>words</code> where each word consists of lowercase English letters.</p>\n\n<p><code>word<sub>A</sub></code> is a <strong>predecessor</strong> of <code>word<sub>B</sub></code> if and only if we can insert <strong>exactly one</strong> letter anywhere in <code>word<sub>A</sub></code> <strong>without changing the order of the other characters</strong> to make it equal to <code>word<sub>B</sub></code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;abc&quot;</code> is a <strong>predecessor</strong> of <code>&quot;ab<u>a</u>c&quot;</code>, while <code>&quot;cba&quot;</code> is not a <strong>predecessor</strong> of <code>&quot;bcad&quot;</code>.</li>\n</ul>\n\n<p>A <strong>word chain</strong><em> </em>is a sequence of words <code>[word<sub>1</sub>, word<sub>2</sub>, ..., word<sub>k</sub>]</code> with <code>k &gt;= 1</code>, where <code>word<sub>1</sub></code> is a <strong>predecessor</strong> of <code>word<sub>2</sub></code>, <code>word<sub>2</sub></code> is a <strong>predecessor</strong> of <code>word<sub>3</sub></code>, and so on. A single word is trivially a <strong>word chain</strong> with <code>k == 1</code>.</p>\n\n<p>Return <em>the <strong>length</strong> of the <strong>longest possible word chain</strong> with words chosen from the given list of </em><code>words</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;b&quot;,&quot;ba&quot;,&quot;bca&quot;,&quot;bda&quot;,&quot;bdca&quot;]\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: One of the longest word chains is [&quot;a&quot;,&quot;<u>b</u>a&quot;,&quot;b<u>d</u>a&quot;,&quot;bd<u>c</u>a&quot;].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;xbc&quot;,&quot;pcxbcf&quot;,&quot;xb&quot;,&quot;cxbc&quot;,&quot;pcxbc&quot;]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> All the words can be put in a word chain [&quot;xb&quot;, &quot;xb<u>c</u>&quot;, &quot;<u>c</u>xbc&quot;, &quot;<u>p</u>cxbc&quot;, &quot;pcxbc<u>f</u>&quot;].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;,&quot;dbqca&quot;]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The trivial word chain [&quot;abcd&quot;] is one of the longest word chains.\n[&quot;abcd&quot;,&quot;dbqca&quot;] is not a valid word chain because the ordering of the letters is changed.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 16</code></li>\n\t<li><code>words[i]</code> only consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7064,
            "dislikes": 250,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"387.9K\", \"totalSubmission\": \"636.6K\", \"totalAcceptedRaw\": 387879, \"totalSubmissionRaw\": 636576, \"acRate\": \"60.9%\"}",
            "hints": [
                "Instead of adding a character, try deleting a character to form a chain in reverse.",
                "For each word in order of length, for each word2 which is word with one character removed, length[word2] = max(length[word2], length[word] + 1)."
            ],
            "rephrased": {
                "body": "Given an array of lowercase English letter words, find the length of the longest possible word chain that can be formed. A word chain is a sequence of words where each word is a predecessor of the next word in the chain. A word `wordA` is a predecessor of `wordB` if `wordB` can be formed by inserting exactly one letter anywhere in `wordA` without changing the order of the other characters.",
                "constraints": [
                    "1 <= words.length <= 1000",
                    "1 <= words[i].length <= 16",
                    "words[i] only consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "[\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]",
                        "output": "4",
                        "explanation": "One of the longest word chains is [\"a\",\"ba\",\"bda\",\"bdca\"]."
                    },
                    {
                        "input": "[\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]",
                        "output": "5",
                        "explanation": "All the words can be put in a word chain [\"xb\", \"xbc\", \"cxbc\", \"pcxbc\", \"pcxbcf\"]."
                    },
                    {
                        "input": "[\"abcd\",\"dbqca\"]",
                        "output": "1",
                        "explanation": "The trivial word chain [\"abcd\"] is one of the longest word chains. [\"abcd\",\"dbqca\"] is not a valid word chain because the ordering of the letters is changed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Instead of adding a character, try deleting a character to form a chain in reverse.",
            "For each word in order of length, for each word2 which is word with one character removed, length[word2] = max(length[word2], length[word] + 1)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestStrChain(vector<string>& words) {\n    const unordered_set<string> wordsSet{words.begin(), words.end()};\n    int ans = 0;\n\n    for (const string& word : words)\n      ans = max(ans, longestStrChain(word, wordsSet));\n\n    return ans;\n  }\n\n private:\n  // dp[s] := longest string chain where s is the last word\n  unordered_map<string, int> dp;\n\n  int longestStrChain(const string& s, const unordered_set<string>& wordsSet) {\n    if (const auto it = dp.find(s); it != dp.cend())\n      return it->second;\n\n    int ans = 1;\n\n    for (int i = 0; i < s.length(); ++i) {\n      const string pred = s.substr(0, i) + s.substr(i + 1);\n      if (wordsSet.count(pred))\n        ans = max(ans, longestStrChain(pred, wordsSet) + 1);\n    }\n\n    return dp[s] = ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestStrChain(String[] words) {\n    Set<String> wordsSet = new HashSet<>(Arrays.asList(words));\n    int ans = 0;\n\n    for (final String word : words)\n      ans = Math.max(ans, longestStrChain(word, wordsSet));\n\n    return ans;\n  }\n  // dp[s] := longest string chain where s is the last word\n  private Map<String, Integer> dp = new HashMap<>();\n\n  private int longestStrChain(final String s, Set<String> wordsSet) {\n    if (dp.containsKey(s))\n      return dp.get(s);\n\n    int ans = 1;\n\n    for (int i = 0; i < s.length(); ++i) {\n      final String pred = s.substring(0, i) + s.substring(i + 1);\n      if (wordsSet.contains(pred))\n        ans = Math.max(ans, longestStrChain(pred, wordsSet) + 1);\n    }\n\n    dp.put(s, ans);\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestStrChain(self, words: List[str]) -> int:\n    wordsSet = set(words)\n\n    # Dp(s) := longest chain where s is the last word\n    @functools.lru_cache(None)\n    def dp(s: str) -> int:\n      ans = 1\n      for i in range(len(s)):\n        pred = s[:i] + s[i + 1:]\n        if pred in wordsSet:\n          ans = max(ans, dp(pred) + 1)\n      return ans\n\n    return max(dp(word) for word in words)\n",
                "lang_text": "py"
            }
        }
    }
}