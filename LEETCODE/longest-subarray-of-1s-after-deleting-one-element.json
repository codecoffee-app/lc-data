{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1493",
            "title": "Longest Subarray of 1's After Deleting One Element",
            "titleSlug": "longest-subarray-of-1s-after-deleting-one-element",
            "content": "<p>Given a binary array <code>nums</code>, you should delete one element from it.</p>\n\n<p>Return <em>the size of the longest non-empty subarray containing only </em><code>1</code><em>&#39;s in the resulting array</em>. Return <code>0</code> if there is no such subarray.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,0,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1&#39;s.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,1,1,0,1,1,0,1]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1&#39;s is [1,1,1,1,1].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You must delete one element.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3683,
            "dislikes": 65,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"212.4K\", \"totalSubmission\": \"317.7K\", \"totalAcceptedRaw\": 212402, \"totalSubmissionRaw\": 317667, \"acRate\": \"66.9%\"}",
            "hints": [
                "Maintain a sliding window where there is at most one zero on it."
            ],
            "rephrased": {
                "body": "Given a binary array `nums`, find the length of the longest subarray containing only 1's after deleting exactly one element from `nums`. Return 0 if no such subarray exists.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "nums[i] is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "[1,1,0,1]",
                        "output": "3",
                        "explanation": "Deleting the element at index 2 (0) results in the array [1,1,1]. The longest subarray of 1's is [1,1,1] with length 3."
                    },
                    {
                        "input": "[0,1,1,1,0,1,1,0,1]",
                        "output": "5",
                        "explanation": "Deleting the element at index 4 (0) results in the array [0,1,1,1,1,1,0,1]. The longest subarray of 1's is [1,1,1,1,1] with length 5."
                    },
                    {
                        "input": "[1,1,1]",
                        "output": "2",
                        "explanation": "Since you must delete one element, deleting any of the 1's will result in a longest subarray of 1's with length 2 (e.g., [1,1])."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Maintain a sliding window where there is at most one zero on it."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestSubarray(vector<int>& nums) {\n    int ans = 0;\n    int count0 = 0;\n\n    for (int l = 0, r = 0; r < nums.size(); ++r) {\n      if (nums[r] == 0)\n        ++count0;\n      while (count0 == 2)\n        if (nums[l++] == 0)\n          --count0;\n      ans = max(ans, r - l);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestSubarray(int[] nums) {\n    int ans = 0;\n    int count0 = 0;\n\n    for (int l = 0, r = 0; r < nums.length; ++r) {\n      if (nums[r] == 0)\n        ++count0;\n      while (count0 == 2)\n        if (nums[l++] == 0)\n          --count0;\n      ans = Math.max(ans, r - l);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestSubarray(self, nums: List[int]) -> int:\n    ans = 0\n    count0 = 0\n\n    l = 0\n    for r, num in enumerate(nums):\n      if num == 0:\n        count0 += 1\n      while count0 == 2:\n        if nums[l] == 0:\n          count0 -= 1\n        l += 1\n      ans = max(ans, r - l)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}