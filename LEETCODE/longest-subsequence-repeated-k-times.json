{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2014",
            "title": "Longest Subsequence Repeated k Times",
            "titleSlug": "longest-subsequence-repeated-k-times",
            "content": "<p>You are given a string <code>s</code> of length <code>n</code>, and an integer <code>k</code>. You are tasked to find the <strong>longest subsequence repeated</strong> <code>k</code> times in string <code>s</code>.</p>\n\n<p>A <strong>subsequence</strong> is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</p>\n\n<p>A subsequence <code>seq</code> is <strong>repeated</strong> <code>k</code> times in the string <code>s</code> if <code>seq * k</code> is a subsequence of <code>s</code>, where <code>seq * k</code> represents a string constructed by concatenating <code>seq</code> <code>k</code> times.</p>\n\n<ul>\n\t<li>For example, <code>&quot;bba&quot;</code> is repeated <code>2</code> times in the string <code>&quot;bababcba&quot;</code>, because the string <code>&quot;bbabba&quot;</code>, constructed by concatenating <code>&quot;bba&quot;</code> <code>2</code> times, is a subsequence of the string <code>&quot;<strong><u>b</u></strong>a<strong><u>bab</u></strong>c<strong><u>ba</u></strong>&quot;</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>longest subsequence repeated</strong> </em><code>k</code><em> times in string </em><code>s</code><em>. If multiple such subsequences are found, return the <strong>lexicographically largest</strong> one. If there is no such subsequence, return an <strong>empty</strong> string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"example 1\" src=\"https://assets.leetcode.com/uploads/2021/08/30/longest-subsequence-repeat-k-times.png\" style=\"width: 457px; height: 99px;\" />\n<pre>\n<strong>Input:</strong> s = &quot;letsleetcode&quot;, k = 2\n<strong>Output:</strong> &quot;let&quot;\n<strong>Explanation:</strong> There are two longest subsequences repeated 2 times: &quot;let&quot; and &quot;ete&quot;.\n&quot;let&quot; is the lexicographically largest one.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bb&quot;, k = 2\n<strong>Output:</strong> &quot;b&quot;\n<strong>Explanation:</strong> The longest subsequence repeated 2 times is &quot;b&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, k = 2\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> There is no subsequence repeated 2 times. Empty string is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == s.length</code></li>\n\t<li><code>2 &lt;= n, k &lt;= 2000</code></li>\n\t<li><code>2 &lt;= n &lt; k * 8</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 427,
            "dislikes": 75,
            "similarQuestions": "[{\"title\": \"Longest Substring with At Least K Repeating Characters\", \"titleSlug\": \"longest-substring-with-at-least-k-repeating-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.9K\", \"totalSubmission\": \"12.6K\", \"totalAcceptedRaw\": 6925, \"totalSubmissionRaw\": 12617, \"acRate\": \"54.9%\"}",
            "hints": [
                "The length of the longest subsequence does not exceed n/k. Do you know why?",
                "Find the characters that could be included in the potential answer. A character occurring more than or equal to k times can be used in the answer up to (count of the character / k) times.",
                "Try all possible candidates in reverse lexicographic order, and check the string for the subsequence condition."
            ],
            "rephrased": {
                "body": "Given a string `s` of length `n` and an integer `k`, find the longest subsequence that is repeated `k` times in `s`. A subsequence is formed by deleting some or no characters from a string without altering the order of the remaining characters. A subsequence `seq` is considered repeated `k` times in `s` if `seq * k` (the concatenation of `seq` with itself `k` times) is a subsequence of `s`. Return the longest such subsequence. If multiple subsequences of the same maximum length exist, return the lexicographically largest among them. If no such subsequence can be found, return an empty string.",
                "constraints": [
                    "n == s.length",
                    "2 <= n, k <= 2000",
                    "2 <= n < k * 8",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"letsleetcode\", k = 2",
                        "output": "\"let\"",
                        "explanation": "The longest subsequences repeated 2 times are \"let\" and \"ete\". \"let\" is lexicographically larger."
                    },
                    {
                        "input": "s = \"bb\", k = 2",
                        "output": "\"b\"",
                        "explanation": "The longest subsequence repeated 2 times is \"b\"."
                    },
                    {
                        "input": "s = \"ab\", k = 2",
                        "output": "\"\"",
                        "explanation": "There is no subsequence repeated 2 times, so an empty string is returned."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-substring-with-at-least-k-repeating-characters",
                "title": "Longest Substring with At Least K Repeating Characters",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The length of the longest subsequence does not exceed n/k. Do you know why?",
            "Find the characters that could be included in the potential answer. A character occurring more than or equal to k times can be used in the answer up to (count of the character / k) times.",
            "Try all possible candidates in reverse lexicographic order, and check the string for the subsequence condition."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Counting",
                "slug": "counting"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string longestSubsequenceRepeatedK(string s, int k) {\n    string ans;\n    vector<int> count(26);\n    vector<char> possibleChars;\n    queue<string> q{{\"\"}};  // Store subseqs, length grows by 1 each time\n\n    for (const char c : s)\n      ++count[c - 'a'];\n\n    for (char c = 'a'; c <= 'z'; ++c)\n      if (count[c - 'a'] >= k)\n        possibleChars.push_back(c);\n\n    while (!q.empty()) {\n      const string currSubseq = q.front();\n      q.pop();\n      if (currSubseq.length() * k > s.length())\n        return ans;\n      for (const char c : possibleChars) {\n        const string& newSubseq = currSubseq + c;\n        if (isSubsequence(newSubseq, s, k)) {\n          q.push(newSubseq);\n          ans = newSubseq;\n        }\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  bool isSubsequence(const string& subseq, string& s, int k) {\n    int i = 0;  // subseq's index\n    for (const char c : s)\n      if (c == subseq[i])\n        if (++i == subseq.length()) {\n          if (--k == 0)\n            return true;\n          i = 0;\n        }\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public String longestSubsequenceRepeatedK(String s, int k) {\n    String ans = \"\";\n    int[] count = new int[26];\n    List<Character> possibleChars = new ArrayList<>();\n    // Store subseqs, length grows by 1 each time\n    Queue<String> q = new ArrayDeque<>(Arrays.asList(\"\"));\n\n    for (final char c : s.toCharArray())\n      ++count[c - 'a'];\n\n    for (char c = 'a'; c <= 'z'; ++c)\n      if (count[c - 'a'] >= k)\n        possibleChars.add(c);\n\n    while (!q.isEmpty()) {\n      final String currSubseq = q.poll();\n      if (currSubseq.length() * k > s.length())\n        return ans;\n      for (final char c : possibleChars) {\n        final String newSubseq = currSubseq + c;\n        if (isSubsequence(newSubseq, s, k)) {\n          q.offer(newSubseq);\n          ans = newSubseq;\n        }\n      }\n    }\n\n    return ans;\n  }\n\n  private boolean isSubsequence(final String subseq, final String s, int k) {\n    int i = 0; // subseq's index\n    for (final char c : s.toCharArray())\n      if (c == subseq.charAt(i))\n        if (++i == subseq.length()) {\n          if (--k == 0)\n            return true;\n          i = 0;\n        }\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestSubsequenceRepeatedK(self, s: str, k: int) -> str:\n    ans = ''\n    count = [0] * 26\n    possibleChars = []\n    q = collections.deque([''])  # Store subseqs, length grows by 1 each time\n\n    for c in s:\n      count[ord(c) - ord('a')] += 1\n\n    for c in string.ascii_lowercase:\n      if count[ord(c) - ord('a')] >= k:\n        possibleChars.append(c)\n\n    def isSubsequence(subseq: str, s: str, k: int) -> bool:\n      i = 0  # subseq's index\n      for c in s:\n        if c == subseq[i]:\n          i += 1\n          if i == len(subseq):\n            k -= 1\n            if k == 0:\n              return True\n            i = 0\n      return False\n\n    while q:\n      currSubseq = q.popleft()\n      if len(currSubseq) * k > len(s):\n        return ans\n      for c in possibleChars:\n        newSubseq = currSubseq + c\n        if isSubsequence(newSubseq, s, k):\n          q.append(newSubseq)\n          ans = newSubseq\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}