{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2389",
            "title": "Longest Subsequence With Limited Sum",
            "titleSlug": "longest-subsequence-with-limited-sum",
            "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code>, and an integer array <code>queries</code> of length <code>m</code>.</p>\n\n<p>Return <em>an array </em><code>answer</code><em> of length </em><code>m</code><em> where </em><code>answer[i]</code><em> is the <strong>maximum</strong> size of a <strong>subsequence</strong> that you can take from </em><code>nums</code><em> such that the <strong>sum</strong> of its elements is less than or equal to </em><code>queries[i]</code>.</p>\n\n<p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,5,2,1], queries = [3,10,21]\n<strong>Output:</strong> [2,3,4]\n<strong>Explanation:</strong> We answer the queries as follows:\n- The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2.\n- The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3.\n- The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,4,5], queries = [1]\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>m == queries.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], queries[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1789,
            "dislikes": 161,
            "similarQuestions": "[{\"title\": \"How Many Numbers Are Smaller Than the Current Number\", \"titleSlug\": \"how-many-numbers-are-smaller-than-the-current-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Successful Pairs of Spells and Potions\", \"titleSlug\": \"successful-pairs-of-spells-and-potions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"98.2K\", \"totalSubmission\": \"136.9K\", \"totalAcceptedRaw\": 98198, \"totalSubmissionRaw\": 136950, \"acRate\": \"71.7%\"}",
            "hints": [
                "Solve each query independently.",
                "When solving a query, which elements of nums should you choose to make the subsequence as long as possible?",
                "Choose the smallest elements in nums that add up to a sum less than the query."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` of length `n` and an integer array `queries` of length `m`, find the maximum size of a subsequence from `nums` whose sum is less than or equal to each `queries[i]`. Return an array `answer` of length `m` where `answer[i]` is the maximum size of such a subsequence.",
                "constraints": [
                    "n == nums.length",
                    "m == queries.length",
                    "1 <= n, m <= 1000",
                    "1 <= nums[i], queries[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "nums = [4,5,2,1], queries = [3,10,21]",
                        "output": "[2,3,4]",
                        "explanation": "For queries[0] = 3, the subsequence [2,1] has a sum less than or equal to 3, and its size (2) is the maximum possible. For queries[1] = 10, the subsequence [4,5,1] has a sum less than or equal to 10, and its size (3) is the maximum possible. For queries[2] = 21, the subsequence [4,5,2,1] has a sum less than or equal to 21, and its size (4) is the maximum possible."
                    },
                    {
                        "input": "nums = [2,3,4,5], queries = [1]",
                        "output": "[0]",
                        "explanation": "For queries[0] = 1, the only subsequence with a sum less than or equal to 1 is the empty subsequence, so the maximum size is 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "how-many-numbers-are-smaller-than-the-current-number",
                "title": "How Many Numbers Are Smaller Than the Current Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "successful-pairs-of-spells-and-potions",
                "title": "Successful Pairs of Spells and Potions",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Solve each query independently.",
            "When solving a query, which elements of nums should you choose to make the subsequence as long as possible?",
            "Choose the smallest elements in nums that add up to a sum less than the query."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {\n    vector<int> ans;\n\n    std::ranges::sort(nums);\n\n    for (const int query : queries)\n      ans.push_back(numOfElementsLessThan(nums, query));\n\n    return ans;\n  }\n\n private:\n  int numOfElementsLessThan(const vector<int>& nums, int query) {\n    int sum = 0;\n    for (int i = 0; i < nums.size(); ++i) {\n      sum += nums[i];\n      if (sum > query)\n        return i;\n    }\n    return nums.size();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] answerQueries(int[] nums, int[] queries) {\n    int[] ans = new int[queries.length];\n\n    Arrays.sort(nums);\n\n    for (int i = 0; i < queries.length; ++i)\n      ans[i] = numOfElementsLessThan(nums, queries[i]);\n\n    return ans;\n  }\n\n  private int numOfElementsLessThan(int[] nums, int query) {\n    int sum = 0;\n    for (int i = 0; i < nums.length; ++i) {\n      sum += nums[i];\n      if (sum > query)\n        return i;\n    }\n    return nums.length;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:\n    nums.sort()\n\n    def numOfElementsLessThan(query: int) -> int:\n      summ = 0\n      for i, num in enumerate(nums):\n        summ += num\n        if summ > query:\n          return i\n      return len(nums)\n\n    return [numOfElementsLessThan(query) for query in queries]\n",
                "lang_text": "py"
            }
        }
    }
}