{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2213",
            "title": "Longest Substring of One Repeating Character",
            "titleSlug": "longest-substring-of-one-repeating-character",
            "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code>. You are also given a <strong>0-indexed</strong> string <code>queryCharacters</code> of length <code>k</code> and a <strong>0-indexed</strong> array of integer <strong>indices</strong> <code>queryIndices</code> of length <code>k</code>, both of which are used to describe <code>k</code> queries.</p>\n\n<p>The <code>i<sup>th</sup></code> query updates the character in <code>s</code> at index <code>queryIndices[i]</code> to the character <code>queryCharacters[i]</code>.</p>\n\n<p>Return <em>an array</em> <code>lengths</code> <em>of length </em><code>k</code><em> where</em> <code>lengths[i]</code> <em>is the <strong>length</strong> of the <strong>longest substring</strong> of </em><code>s</code><em> consisting of <strong>only one repeating</strong> character <strong>after</strong> the</em> <code>i<sup>th</sup></code> <em>query</em><em> is performed.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babacc&quot;, queryCharacters = &quot;bcb&quot;, queryIndices = [1,3,3]\n<strong>Output:</strong> [3,3,4]\n<strong>Explanation:</strong> \n- 1<sup>st</sup> query updates s = &quot;<u>b<strong>b</strong>b</u>acc&quot;. The longest substring consisting of one repeating character is &quot;bbb&quot; with length 3.\n- 2<sup>nd</sup> query updates s = &quot;bbb<u><strong>c</strong>cc</u>&quot;. \n  The longest substring consisting of one repeating character can be &quot;bbb&quot; or &quot;ccc&quot; with length 3.\n- 3<sup>rd</sup> query updates s = &quot;<u>bbb<strong>b</strong></u>cc&quot;. The longest substring consisting of one repeating character is &quot;bbbb&quot; with length 4.\nThus, we return [3,3,4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abyzz&quot;, queryCharacters = &quot;aa&quot;, queryIndices = [2,1]\n<strong>Output:</strong> [2,3]\n<strong>Explanation:</strong>\n- 1<sup>st</sup> query updates s = &quot;ab<strong>a</strong><u>zz</u>&quot;. The longest substring consisting of one repeating character is &quot;zz&quot; with length 2.\n- 2<sup>nd</sup> query updates s = &quot;<u>a<strong>a</strong>a</u>zz&quot;. The longest substring consisting of one repeating character is &quot;aaa&quot; with length 3.\nThus, we return [2,3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n\t<li><code>k == queryCharacters.length == queryIndices.length</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queryCharacters</code> consists of lowercase English letters.</li>\n\t<li><code>0 &lt;= queryIndices[i] &lt; s.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 279,
            "dislikes": 82,
            "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Repeating Character Replacement\", \"titleSlug\": \"longest-repeating-character-replacement\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Consecutive Characters\", \"titleSlug\": \"consecutive-characters\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Create Sorted Array through Instructions\", \"titleSlug\": \"create-sorted-array-through-instructions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Increasing Subsequence II\", \"titleSlug\": \"longest-increasing-subsequence-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.2K\", \"totalSubmission\": \"13.2K\", \"totalAcceptedRaw\": 4161, \"totalSubmissionRaw\": 13172, \"acRate\": \"31.6%\"}",
            "hints": [
                "Use a segment tree to perform fast point updates and range queries.",
                "We need each segment tree node to store the length of the longest substring of that segment consisting of only 1 repeating character.",
                "We will also have each segment tree node store the leftmost and rightmost character of the segment, the max length of a prefix substring consisting of only 1 repeating character, and the max length of a suffix substring consisting of only 1 repeating character.",
                "Use this information to properly merge the two segment tree nodes together."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed string `s`. You are also given a 0-indexed string `queryCharacters` of length `k` and a 0-indexed array of integer `indices` `queryIndices` of length `k`. These are used to perform `k` update queries on the string `s`.\n\nFor each query `i`, the character in `s` at index `queryIndices[i]` is updated to the character `queryCharacters[i]`. \n\nReturn an array `lengths` of length `k` where `lengths[i]` is the length of the longest substring of `s` consisting of only one repeating character after the `i`th query is performed.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists of lowercase English letters.",
                    "k == queryCharacters.length == queryIndices.length",
                    "1 <= k <= 10^5",
                    "queryCharacters consists of lowercase English letters.",
                    "0 <= queryIndices[i] < s.length"
                ],
                "testcases": [
                    {
                        "input": "s = \"babacc\", queryCharacters = \"bcb\", queryIndices = [1,3,3]",
                        "output": "[3,3,4]",
                        "explanation": "1st query updates s = \"bbbacc\". The longest substring consisting of one repeating character is \"bbb\" with length 3.\n2nd query updates s = \"bbbcCc\". The longest substring consisting of one repeating character can be \"bbb\" or \"ccc\" with length 3.\n3rd query updates s = \"bbbbcc\". The longest substring consisting of one repeating character is \"bbbb\" with length 4."
                    },
                    {
                        "input": "s = \"abyzz\", queryCharacters = \"aa\", queryIndices = [2,1]",
                        "output": "[2,3]",
                        "explanation": "1st query updates s = \"abazz\". The longest substring consisting of one repeating character is \"zz\" with length 2.\n2nd query updates s = \"aaazz\". The longest substring consisting of one repeating character is \"aaa\" with length 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "merge-intervals",
                "title": "Merge Intervals",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-repeating-character-replacement",
                "title": "Longest Repeating Character Replacement",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "consecutive-characters",
                "title": "Consecutive Characters",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "create-sorted-array-through-instructions",
                "title": "Create Sorted Array through Instructions",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-increasing-subsequence-ii",
                "title": "Longest Increasing Subsequence II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use a segment tree to perform fast point updates and range queries.",
            "We need each segment tree node to store the length of the longest substring of that segment consisting of only 1 repeating character.",
            "We will also have each segment tree node store the leftmost and rightmost character of the segment, the max length of a prefix substring consisting of only 1 repeating character, and the max length of a suffix substring consisting of only 1 repeating character.",
            "Use this information to properly merge the two segment tree nodes together."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct SegmentTreeNode {\n  int lo;\n  int hi;\n  char maxChar;\n  char prefixChar;\n  char suffixChar;\n  int maxLength;\n  int prefixLength;\n  int suffixLength;\n  SegmentTreeNode* left;\n  SegmentTreeNode* right;\n  SegmentTreeNode(int lo, int hi, char maxChar, char prefixChar,\n                  char suffixChar, int maxLength, int prefixLength,\n                  int suffixLength, SegmentTreeNode* left = nullptr,\n                  SegmentTreeNode* right = nullptr)\n      : lo(lo),\n        hi(hi),\n        maxChar(maxChar),\n        prefixChar(prefixChar),\n        suffixChar(suffixChar),\n        maxLength(maxLength),\n        prefixLength(prefixLength),\n        suffixLength(suffixLength),\n        left(left),\n        right(right) {}\n  ~SegmentTreeNode() {\n    delete left;\n    delete right;\n    left = nullptr;\n    right = nullptr;\n  }\n};\n\nclass SegmentTree {\n public:\n  explicit SegmentTree(const string& s) : root(build(s, 0, s.length() - 1)) {}\n  ~SegmentTree() {\n    delete root;\n  }\n\n  void update(int i, char val) {\n    root = update(root, i, val);\n  }\n\n  int getMaxLength() {\n    return root->maxLength;\n  }\n\n private:\n  SegmentTreeNode* root;\n\n  SegmentTreeNode* build(const string& s, int lo, int hi) const {\n    if (lo == hi)\n      return new SegmentTreeNode(lo, hi, s[lo], s[lo], s[lo], 1, 1, 1);\n    const int mid = (lo + hi) / 2;\n    SegmentTreeNode* left = build(s, lo, mid);\n    SegmentTreeNode* right = build(s, mid + 1, hi);\n    return merge(left, right);\n  }\n\n  SegmentTreeNode* update(SegmentTreeNode* root, int i, char c) {\n    if (root->lo == i && root->hi == i) {\n      root->maxChar = c;\n      root->prefixChar = c;\n      root->suffixChar = c;\n      return root;\n    }\n    const int mid = (root->lo + root->hi) / 2;\n    if (i <= mid) {\n      SegmentTreeNode* updatedLeft = update(root->left, i, c);\n      return root = merge(updatedLeft, root->right);\n    } else {\n      SegmentTreeNode* updatedRight = update(root->right, i, c);\n      return root = merge(root->left, updatedRight);\n    }\n  }\n\n  SegmentTreeNode* merge(SegmentTreeNode* left, SegmentTreeNode* right) const {\n    // Get maxChar and maxLength\n    char maxChar = ' ';\n    int maxLength = 0;\n    if (left->maxLength > right->maxLength) {\n      maxChar = left->maxChar;\n      maxLength = left->maxLength;\n    } else {\n      maxChar = right->maxChar;\n      maxLength = right->maxLength;\n    }\n    if (left->suffixChar == right->prefixChar &&\n        left->suffixLength + right->prefixLength > maxLength) {\n      maxChar = left->suffixChar;\n      maxLength = left->suffixLength + right->prefixLength;\n    }\n\n    // Get prefixChar and prefixLength\n    char prefixChar = left->prefixChar;\n    int prefixLength = left->prefixLength;\n    if (left->lo + prefixLength == right->lo &&\n        left->prefixChar == right->prefixChar)\n      prefixLength += right->prefixLength;\n\n    // Get suffixChar and suffixLength\n    char suffixChar = right->suffixChar;\n    int suffixLength = right->suffixLength;\n    if (right->hi - suffixLength == left->hi &&\n        right->suffixChar == left->suffixChar)\n      suffixLength += left->suffixLength;\n\n    return new SegmentTreeNode(left->lo, right->hi, maxChar, prefixChar,\n                               suffixChar, maxLength, prefixLength,\n                               suffixLength, left, right);\n  }\n};\n\nclass Solution {\n public:\n  vector<int> longestRepeating(string s, string queryCharacters,\n                               vector<int>& queryIndices) {\n    vector<int> ans;\n    SegmentTree tree(s);\n\n    for (int i = 0; i < queryIndices.size(); ++i) {\n      tree.update(queryIndices[i], queryCharacters[i]);\n      ans.push_back(tree.getMaxLength());\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}