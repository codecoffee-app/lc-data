{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "978",
            "title": "Longest Turbulent Subarray",
            "titleSlug": "longest-turbulent-subarray",
            "content": "<p>Given an integer array <code>arr</code>, return <em>the length of a maximum size turbulent subarray of</em> <code>arr</code>.</p>\n\n<p>A subarray is <strong>turbulent</strong> if the comparison sign flips between each adjacent pair of elements in the subarray.</p>\n\n<p>More formally, a subarray <code>[arr[i], arr[i + 1], ..., arr[j]]</code> of <code>arr</code> is said to be turbulent if and only if:</p>\n\n<ul>\n\t<li>For <code>i &lt;= k &lt; j</code>:\n\n\t<ul>\n\t\t<li><code>arr[k] &gt; arr[k + 1]</code> when <code>k</code> is odd, and</li>\n\t\t<li><code>arr[k] &lt; arr[k + 1]</code> when <code>k</code> is even.</li>\n\t</ul>\n\t</li>\n\t<li>Or, for <code>i &lt;= k &lt; j</code>:\n\t<ul>\n\t\t<li><code>arr[k] &gt; arr[k + 1]</code> when <code>k</code> is even, and</li>\n\t\t<li><code>arr[k] &lt; arr[k + 1]</code> when <code>k</code> is odd.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [9,4,2,10,7,8,8,1,9]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> arr[1] &gt; arr[2] &lt; arr[3] &gt; arr[4] &lt; arr[5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [4,8,12,16]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [100]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1896,
            "dislikes": 215,
            "similarQuestions": "[{\"title\": \"Maximum Subarray\", \"titleSlug\": \"maximum-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Alternating Subarray\", \"titleSlug\": \"longest-alternating-subarray\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"93.6K\", \"totalSubmission\": \"198K\", \"totalAcceptedRaw\": 93641, \"totalSubmissionRaw\": 198049, \"acRate\": \"47.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `arr`, find the length of the longest turbulent subarray. A subarray is turbulent if the comparison sign alternates between each adjacent pair of elements. This means either `arr[i] > arr[i+1] < arr[i+2] > ...` or `arr[i] < arr[i+1] > arr[i+2] < ...` must hold for the subarray to be considered turbulent.",
                "constraints": [
                    "1 <= arr.length <= 4 * 10^4",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[9,4,2,10,7,8,8,1,9]",
                        "output": "5",
                        "explanation": "The longest turbulent subarray is [4, 2, 10, 7, 8], where 4 > 2 < 10 > 7 < 8."
                    },
                    {
                        "input": "[4,8,12,16]",
                        "output": "2",
                        "explanation": "The longest turbulent subarrays are [4, 8], [8, 12], and [12, 16]."
                    },
                    {
                        "input": "[100]",
                        "output": "1",
                        "explanation": "A single element array is always turbulent."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-subarray",
                "title": "Maximum Subarray",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "longest-alternating-subarray",
                "title": "Longest Alternating Subarray",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxTurbulenceSize(vector<int>& arr) {\n    int ans = 1;\n    int increasing = 1;\n    int decreasing = 1;\n\n    for (int i = 1; i < arr.size(); ++i) {\n      if (arr[i] > arr[i - 1]) {\n        increasing = decreasing + 1;\n        decreasing = 1;\n      } else if (arr[i] < arr[i - 1]) {\n        decreasing = increasing + 1;\n        increasing = 1;\n      } else {\n        increasing = 1;\n        decreasing = 1;\n      }\n      ans = max({ans, increasing, decreasing});\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxTurbulenceSize(int[] arr) {\n    int ans = 1;\n    int increasing = 1;\n    int decreasing = 1;\n\n    for (int i = 1; i < arr.length; ++i) {\n      if (arr[i] > arr[i - 1]) {\n        increasing = decreasing + 1;\n        decreasing = 1;\n      } else if (arr[i] < arr[i - 1]) {\n        decreasing = increasing + 1;\n        increasing = 1;\n      } else {\n        increasing = 1;\n        decreasing = 1;\n      }\n      ans = Math.max(ans, Math.max(increasing, decreasing));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxTurbulenceSize(self, arr: List[int]) -> int:\n    ans = 1\n    increasing = 1\n    decreasing = 1\n\n    for i in range(1, len(arr)):\n      if arr[i] > arr[i - 1]:\n        increasing = decreasing + 1\n        decreasing = 1\n      elif arr[i] < arr[i - 1]:\n        decreasing = increasing + 1\n        increasing = 1\n      else:\n        increasing = 1\n        decreasing = 1\n      ans = max(ans, max(increasing, decreasing))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}