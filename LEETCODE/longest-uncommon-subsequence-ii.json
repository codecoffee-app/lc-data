{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "522",
            "title": "Longest Uncommon Subsequence II",
            "titleSlug": "longest-uncommon-subsequence-ii",
            "content": "<p>Given an array of strings <code>strs</code>, return <em>the length of the <strong>longest uncommon subsequence</strong> between them</em>. If the longest uncommon subsequence does not exist, return <code>-1</code>.</p>\n\n<p>An <strong>uncommon subsequence</strong> between an array of strings is a string that is a <strong>subsequence of one string but not the others</strong>.</p>\n\n<p>A <strong>subsequence</strong> of a string <code>s</code> is a string that can be obtained after deleting any number of characters from <code>s</code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;abc&quot;</code> is a subsequence of <code>&quot;aebdc&quot;</code> because you can delete the underlined characters in <code>&quot;a<u>e</u>b<u>d</u>c&quot;</code> to get <code>&quot;abc&quot;</code>. Other subsequences of <code>&quot;aebdc&quot;</code> include <code>&quot;aebdc&quot;</code>, <code>&quot;aeb&quot;</code>, and <code>&quot;&quot;</code> (empty string).</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> strs = [\"aba\",\"cdc\",\"eae\"]\n<strong>Output:</strong> 3\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> strs = [\"aaa\",\"aaa\",\"aa\"]\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= strs.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= strs[i].length &lt;= 10</code></li>\n\t<li><code>strs[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 494,
            "dislikes": 1270,
            "similarQuestions": "[{\"title\": \"Longest Uncommon Subsequence I\", \"titleSlug\": \"longest-uncommon-subsequence-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"49.7K\", \"totalSubmission\": \"121.2K\", \"totalAcceptedRaw\": 49673, \"totalSubmissionRaw\": 121165, \"acRate\": \"41.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of strings `strs`, find the length of the longest uncommon subsequence between them. An uncommon subsequence is a string that is a subsequence of one string in the array, but not a subsequence of any other string in the array. A subsequence of a string `s` is a string that can be obtained by deleting zero or more characters from `s`. If no uncommon subsequence exists, return -1.",
                "constraints": [
                    "2 <= strs.length <= 50",
                    "1 <= strs[i].length <= 10",
                    "strs[i] consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "[\"aba\",\"cdc\",\"eae\"]",
                        "output": "3",
                        "explanation": "The string \"eae\" is a subsequence of strs[2], but not a subsequence of strs[0] or strs[1].  Similarly, \"aba\" and \"cdc\" are uncommon subsequences. The longest of these has length 3."
                    },
                    {
                        "input": "[\"aaa\",\"aaa\",\"aa\"]",
                        "output": "-1",
                        "explanation": "Any subsequence of \"aa\" is also a subsequence of \"aaa\". Therefore, no uncommon subsequence exists."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "longest-uncommon-subsequence-i",
                "title": "Longest Uncommon Subsequence I",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findLUSlength(vector<string>& strs) {\n    unordered_set<string> seen;\n    unordered_set<string> duplicates;\n\n    for (const string& str : strs)\n      if (seen.count(str))\n        duplicates.insert(str);\n      else\n        seen.insert(str);\n\n    sort(strs.begin(), strs.end(),\n         [](const auto& a, const auto& b) { return a.length() > b.length(); });\n\n    for (int i = 0; i < strs.size(); ++i) {\n      if (duplicates.count(strs[i]))\n        continue;\n      bool isASubsequence = false;\n      for (int j = 0; j < i; ++j)\n        isASubsequence |= isSubsequence(strs[i], strs[j]);\n      if (!isASubsequence)\n        return strs[i].length();\n    }\n\n    return -1;\n  }\n\n private:\n  // Returns true if a is a subsequence of b\n  bool isSubsequence(const string& a, const string& b) {\n    int i = 0;\n    for (const char c : b)\n      if (i < a.length() && c == a[i])\n        ++i;\n    return i == a.length();\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findLUSlength(String[] strs) {\n    Set<String> seen = new HashSet<>();\n    Set<String> duplicates = new HashSet<>();\n\n    for (final String str : strs)\n      if (seen.contains(str))\n        duplicates.add(str);\n      else\n        seen.add(str);\n\n    Arrays.sort(strs, (a, b) -> b.length() - a.length());\n\n    for (int i = 0; i < strs.length; ++i) {\n      if (duplicates.contains(strs[i]))\n        continue;\n      boolean isASubsequence = false;\n      for (int j = 0; j < i; ++j)\n        isASubsequence |= isSubsequence(strs[i], strs[j]);\n      if (!isASubsequence)\n        return strs[i].length();\n    }\n\n    return -1;\n  }\n\n  // Returns true if a is a subsequence of b\n  private boolean isSubsequence(final String a, final String b) {\n    int i = 0;\n    for (final char c : b.toCharArray())\n      if (i < a.length() && c == a.charAt(i))\n        ++i;\n    return i == a.length();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findLUSlength(self, strs: List[str]) -> int:\n    def isSubsequence(a: str, b: str) -> bool:\n      i = 0\n      j = 0\n\n      while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n          i += 1\n        j += 1\n\n      return i == len(a)\n\n    seen = set()\n    duplicates = set()\n\n    for s in strs:\n      if s in seen:\n        duplicates.add(s)\n      seen.add(s)\n\n    strs.sort(key=lambda s: -len(s))\n\n    for i in range(len(strs)):\n      if strs[i] in duplicates:\n        continue\n      isASubsequence = False\n      for j in range(i):\n        isASubsequence |= isSubsequence(strs[i], strs[j])\n      if not isASubsequence:\n        return len(strs[i])\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}