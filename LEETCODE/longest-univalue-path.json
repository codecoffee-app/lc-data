{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "687",
            "title": "Longest Univalue Path",
            "titleSlug": "longest-univalue-path",
            "content": "<p>Given the <code>root</code> of a binary tree, return <em>the length of the longest path, where each node in the path has the same value</em>. This path may or may not pass through the root.</p>\n\n<p><strong>The length of the path</strong> between two nodes is represented by the number of edges between them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/ex1.jpg\" style=\"width: 450px; height: 238px;\" />\n<pre>\n<strong>Input:</strong> root = [5,4,5,1,1,null,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The shown image shows that the longest path of the same value (i.e. 5).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/ex2.jpg\" style=\"width: 450px; height: 238px;\" />\n<pre>\n<strong>Input:</strong> root = [1,4,5,4,4,null,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The shown image shows that the longest path of the same value (i.e. 4).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n\t<li>The depth of the tree will not exceed <code>1000</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4120,
            "dislikes": 663,
            "similarQuestions": "[{\"title\": \"Binary Tree Maximum Path Sum\", \"titleSlug\": \"binary-tree-maximum-path-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Univalue Subtrees\", \"titleSlug\": \"count-univalue-subtrees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Path Sum III\", \"titleSlug\": \"path-sum-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Path With Different Adjacent Characters\", \"titleSlug\": \"longest-path-with-different-adjacent-characters\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"172.9K\", \"totalSubmission\": \"422.1K\", \"totalAcceptedRaw\": 172899, \"totalSubmissionRaw\": 422111, \"acRate\": \"41.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, find the length of the longest path where each node in the path has the same value. The path doesn't necessarily have to pass through the root node. The length of a path is defined as the number of edges between the nodes.",
                "constraints": [
                    "The number of nodes in the tree is in the range [0, 10<sup>4</sup>].",
                    "-1000 <= Node.val <= 1000",
                    "The depth of the tree will not exceed 1000."
                ],
                "testcases": [
                    {
                        "input": "[5,4,5,1,1,null,5]",
                        "output": "2",
                        "explanation": "The longest path with the same value is the path with value 5, which has a length of 2."
                    },
                    {
                        "input": "[1,4,5,4,4,null,5]",
                        "output": "2",
                        "explanation": "The longest path with the same value is the path with value 4, which has a length of 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "binary-tree-maximum-path-sum",
                "title": "Binary Tree Maximum Path Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-univalue-subtrees",
                "title": "Count Univalue Subtrees",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "path-sum-iii",
                "title": "Path Sum III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-path-with-different-adjacent-characters",
                "title": "Longest Path With Different Adjacent Characters",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestUnivaluePath(TreeNode* root) {\n    int ans = 0;\n    longestUnivaluePathDownFrom(root, ans);\n    return ans;\n  }\n\n private:\n  int longestUnivaluePathDownFrom(TreeNode* root, int& ans) {\n    if (root == nullptr)\n      return 0;\n\n    const int l = longestUnivaluePathDownFrom(root->left, ans);\n    const int r = longestUnivaluePathDownFrom(root->right, ans);\n    const int arrowLeft =\n        root->left && root->left->val == root->val ? l + 1 : 0;\n    const int arrowRight =\n        root->right && root->right->val == root->val ? r + 1 : 0;\n    ans = max(ans, arrowLeft + arrowRight);\n    return max(arrowLeft, arrowRight);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestUnivaluePath(TreeNode root) {\n    longestUnivaluePathDownFrom(root);\n    return ans;\n  }\n\n  private int ans = 0;\n\n  private int longestUnivaluePathDownFrom(TreeNode root) {\n    if (root == null)\n      return 0;\n\n    final int l = longestUnivaluePathDownFrom(root.left);\n    final int r = longestUnivaluePathDownFrom(root.right);\n    final int arrowLeft = root.left != null && root.left.val == root.val ? l + 1 : 0;\n    final int arrowRight = root.right != null && root.right.val == root.val ? r + 1 : 0;\n    ans = Math.max(ans, arrowLeft + arrowRight);\n    return Math.max(arrowLeft, arrowRight);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestUnivaluePath(self, root: Optional[TreeNode]) -> int:\n    ans = 0\n\n    def longestUnivaluePathDownFrom(root: Optional[TreeNode]) -> int:\n      nonlocal ans\n      if not root:\n        return 0\n\n      l = longestUnivaluePathDownFrom(root.left)\n      r = longestUnivaluePathDownFrom(root.right)\n      arrowLeft = l + 1 if root.left and root.left.val == root.val else 0\n      arrowRight = r + 1 if root.right and root.right.val == root.val else 0\n      ans = max(ans, arrowLeft + arrowRight)\n      return max(arrowLeft, arrowRight)\n\n    longestUnivaluePathDownFrom(root)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}