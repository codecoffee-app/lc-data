{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2424",
            "title": "Longest Uploaded Prefix",
            "titleSlug": "longest-uploaded-prefix",
            "content": "<p>You are given a stream of <code>n</code> videos, each represented by a <strong>distinct</strong> number from <code>1</code> to <code>n</code> that you need to &quot;upload&quot; to a server. You need to implement a data structure that calculates the length of the <strong>longest uploaded prefix</strong> at various points in the upload process.</p>\n\n<p>We consider <code>i</code> to be an uploaded prefix if all videos in the range <code>1</code> to <code>i</code> (<strong>inclusive</strong>) have been uploaded to the server. The longest uploaded prefix is the <strong>maximum </strong>value of <code>i</code> that satisfies this definition.<br />\n<br />\nImplement the <code>LUPrefix </code>class:</p>\n\n<ul>\n\t<li><code>LUPrefix(int n)</code> Initializes the object for a stream of <code>n</code> videos.</li>\n\t<li><code>void upload(int video)</code> Uploads <code>video</code> to the server.</li>\n\t<li><code>int longest()</code> Returns the length of the <strong>longest uploaded prefix</strong> defined above.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;LUPrefix&quot;, &quot;upload&quot;, &quot;longest&quot;, &quot;upload&quot;, &quot;longest&quot;, &quot;upload&quot;, &quot;longest&quot;]\n[[4], [3], [], [1], [], [2], []]\n<strong>Output</strong>\n[null, null, 0, null, 1, null, 3]\n\n<strong>Explanation</strong>\nLUPrefix server = new LUPrefix(4);   // Initialize a stream of 4 videos.\nserver.upload(3);                    // Upload video 3.\nserver.longest();                    // Since video 1 has not been uploaded yet, there is no prefix.\n                                     // So, we return 0.\nserver.upload(1);                    // Upload video 1.\nserver.longest();                    // The prefix [1] is the longest uploaded prefix, so we return 1.\nserver.upload(2);                    // Upload video 2.\nserver.longest();                    // The prefix [1,2,3] is the longest uploaded prefix, so we return 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= video &lt;= n</code></li>\n\t<li>All values of <code>video</code> are <strong>distinct</strong>.</li>\n\t<li>At most <code>2 * 10<sup>5</sup></code> calls <strong>in total</strong> will be made to <code>upload</code> and <code>longest</code>.</li>\n\t<li>At least one call will be made to <code>longest</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 331,
            "dislikes": 24,
            "similarQuestions": "[{\"title\": \"Design an Ordered Stream\", \"titleSlug\": \"design-an-ordered-stream\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.6K\", \"totalSubmission\": \"34K\", \"totalAcceptedRaw\": 18594, \"totalSubmissionRaw\": 34040, \"acRate\": \"54.6%\"}",
            "hints": [
                "Maintain an array keeping track of whether video \u201ci\u201d has been uploaded yet."
            ],
            "rephrased": {
                "body": "You are given a stream of 'n' distinct videos, numbered from 1 to 'n'. You need to implement a data structure to track the longest uploaded prefix at various points as videos are uploaded to a server. An uploaded prefix of length 'i' means that all videos from 1 to 'i' (inclusive) have been uploaded. The goal is to efficiently determine the maximum value of 'i' that represents the longest such uploaded prefix.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= video <= n",
                    "All values of 'video' are distinct.",
                    "At most 2 * 10^5 calls in total will be made to 'upload' and 'longest'.",
                    "At least one call will be made to 'longest'."
                ],
                "testcases": [
                    {
                        "input": "[\"LUPrefix\", \"upload\", \"longest\", \"upload\", \"longest\", \"upload\", \"longest\"]\\n[[4], [3], [], [1], [], [2], []]",
                        "output": "[null, null, 0, null, 1, null, 3]",
                        "explanation": "1. Initialize with n=4. No videos uploaded yet.\n2. Upload video 3. Longest uploaded prefix is 0 because video 1 is missing.\n3. Upload video 1. Longest uploaded prefix is 1 (only video 1 is uploaded).\n4. Upload video 2. Longest uploaded prefix is now 3 (videos 1, 2, and 3 are uploaded)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "design-an-ordered-stream",
                "title": "Design an Ordered Stream",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Maintain an array keeping track of whether video \u201ci\u201d has been uploaded yet."
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class LUPrefix {\n public:\n  LUPrefix(int n) {}\n\n  void upload(int video) {\n    seen.insert(video);\n    while (seen.count(longestPrefix + 1))\n      ++longestPrefix;\n  }\n\n  int longest() {\n    return longestPrefix;\n  }\n\n private:\n  unordered_set<int> seen;\n  int longestPrefix = 0;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class LUPrefix {\n  public LUPrefix(int n) {}\n\n  public void upload(int video) {\n    seen.add(video);\n    while (seen.contains(longestPrefix + 1))\n      ++longestPrefix;\n  }\n\n  public int longest() {\n    return longestPrefix;\n  }\n\n  private Set<Integer> seen = new HashSet<>();\n  private int longestPrefix = 0;\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class LUPrefix:\n  def __init__(self, n: int):\n    self.seen = set()\n    self.longestPrefix = 0\n\n  def upload(self, video: int) -> None:\n    self.seen.add(video)\n    while self.longestPrefix + 1 in self.seen:\n      self.longestPrefix += 1\n\n  def longest(self) -> int:\n    return self.longestPrefix\n",
                "lang_text": "py"
            }
        }
    }
}