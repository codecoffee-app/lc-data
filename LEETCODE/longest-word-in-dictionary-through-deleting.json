{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "524",
            "title": "Longest Word in Dictionary through Deleting",
            "titleSlug": "longest-word-in-dictionary-through-deleting",
            "content": "<p>Given a string <code>s</code> and a string array <code>dictionary</code>, return <em>the longest string in the dictionary that can be formed by deleting some of the given string characters</em>. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abpcplea&quot;, dictionary = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]\n<strong>Output:</strong> &quot;apple&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abpcplea&quot;, dictionary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n<strong>Output:</strong> &quot;a&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= dictionary.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= dictionary[i].length &lt;= 1000</code></li>\n\t<li><code>s</code> and <code>dictionary[i]</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1731,
            "dislikes": 355,
            "similarQuestions": "[{\"title\": \"Longest Word in Dictionary\", \"titleSlug\": \"longest-word-in-dictionary\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"149.1K\", \"totalSubmission\": \"291.9K\", \"totalAcceptedRaw\": 149069, \"totalSubmissionRaw\": 291890, \"acRate\": \"51.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` and a list of strings `dictionary`, find the longest string in the dictionary that can be formed by deleting some characters from `s`. If there are multiple such strings, return the lexicographically smallest one. If no such string exists, return an empty string.",
                "constraints": [
                    "1 <= s.length <= 1000",
                    "1 <= dictionary.length <= 1000",
                    "1 <= dictionary[i].length <= 1000",
                    "s and dictionary[i] consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": {
                            "s": "abpcplea",
                            "dictionary": [
                                "ale",
                                "apple",
                                "monkey",
                                "plea"
                            ]
                        },
                        "output": "apple",
                        "explanation": "The string \"apple\" can be formed from \"abpcplea\" by deleting 'b', 'p', 'c', and 'e'. It is also the longest such string and lexicographically smaller than \"plea\"."
                    },
                    {
                        "input": {
                            "s": "abpcplea",
                            "dictionary": [
                                "a",
                                "b",
                                "c"
                            ]
                        },
                        "output": "a",
                        "explanation": "The string \"a\" can be formed from \"abpcplea\". \"b\" and \"c\" can also be formed, but \"a\" is lexicographically smallest."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-word-in-dictionary",
                "title": "Longest Word in Dictionary",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string findLongestWord(string s, vector<string>& d) {\n    string ans;\n\n    for (const string& word : d)\n      if (isSubsequence(word, s))\n        if (word.length() > ans.length() ||\n            word.length() == ans.length() && word.compare(ans) < 0)\n          ans = word;\n\n    return ans;\n  }\n\n private:\n  // Returns true if a is a subsequence of b\n  bool isSubsequence(const string& a, const string& b) {\n    int i = 0;\n    for (const char c : b)\n      if (i < a.length() && c == a[i])\n        ++i;\n    return i == a.length();\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String findLongestWord(String s, List<String> d) {\n    String ans = \"\";\n\n    for (final String word : d)\n      if (isSubsequence(word, s))\n        if (word.length() > ans.length() ||\n            word.length() == ans.length() && word.compareTo(ans) < 0)\n          ans = word;\n\n    return ans;\n  }\n\n  // Returns true if a is a subsequence of b\n  private boolean isSubsequence(final String a, final String b) {\n    int i = 0;\n    for (final char c : b.toCharArray())\n      if (i < a.length() && c == a.charAt(i))\n        ++i;\n    return i == a.length();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findLongestWord(self, s: str, d: List[str]) -> str:\n    ans = ''\n\n    for word in d:\n      i = 0\n      for c in s:\n        if i < len(word) and c == word[i]:\n          i += 1\n      if i == len(word):\n        if len(word) > len(ans) or len(word) == len(ans) and word < ans:\n          ans = word\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}