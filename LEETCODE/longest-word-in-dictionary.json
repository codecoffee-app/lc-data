{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "720",
            "title": "Longest Word in Dictionary",
            "titleSlug": "longest-word-in-dictionary",
            "content": "<p>Given an array of strings <code>words</code> representing an English Dictionary, return <em>the longest word in</em> <code>words</code> <em>that can be built one character at a time by other words in</em> <code>words</code>.</p>\n\n<p>If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.</p>\n\n<p>Note that the word should be built from left to right with each additional character being added to the end of a previous word.&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;,&quot;world&quot;]\n<strong>Output:</strong> &quot;world&quot;\n<strong>Explanation:</strong> The word &quot;world&quot; can be built one character at a time by &quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, and &quot;worl&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;banana&quot;,&quot;app&quot;,&quot;appl&quot;,&quot;ap&quot;,&quot;apply&quot;,&quot;apple&quot;]\n<strong>Output:</strong> &quot;apple&quot;\n<strong>Explanation:</strong> Both &quot;apply&quot; and &quot;apple&quot; can be built from other words in the dictionary. However, &quot;apple&quot; is lexicographically smaller than &quot;apply&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1886,
            "dislikes": 1470,
            "similarQuestions": "[{\"title\": \"Longest Word in Dictionary through Deleting\", \"titleSlug\": \"longest-word-in-dictionary-through-deleting\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Implement Magic Dictionary\", \"titleSlug\": \"implement-magic-dictionary\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Word With All Prefixes\", \"titleSlug\": \"longest-word-with-all-prefixes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"144.8K\", \"totalSubmission\": \"277.5K\", \"totalAcceptedRaw\": 144838, \"totalSubmissionRaw\": 277461, \"acRate\": \"52.2%\"}",
            "hints": [
                "For every word in the input list, we can check whether all prefixes of that word are in the input list by using a Set."
            ],
            "rephrased": {
                "body": "Given an array of strings `words` representing an English Dictionary, find the longest word in `words` that can be built one character at a time by other words in `words`. Building a word means that each prefix of the word must also be present in the input `words` array.",
                "constraints": [
                    "1 <= words.length <= 1000",
                    "1 <= words[i].length <= 30",
                    "words[i] consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "[\"w\",\"wo\",\"wor\",\"worl\",\"world\"]",
                        "output": "world",
                        "explanation": "The word \"world\" can be built by successively adding characters to the following words present in the input: \"w\", \"wo\", \"wor\", and \"worl\"."
                    },
                    {
                        "input": "[\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]",
                        "output": "apple",
                        "explanation": "Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\", therefore, \"apple\" is the answer."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-word-in-dictionary-through-deleting",
                "title": "Longest Word in Dictionary through Deleting",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "implement-magic-dictionary",
                "title": "Implement Magic Dictionary",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-word-with-all-prefixes",
                "title": "Longest Word With All Prefixes",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "For every word in the input list, we can check whether all prefixes of that word are in the input list by using a Set."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  const string* word = nullptr;\n  TrieNode() : children(26) {}\n};\n\nclass Solution {\n public:\n  string longestWord(vector<string>& words) {\n    for (const string& word : words)\n      insert(word);\n    return longestWordFrom(root);\n  }\n\n private:\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n\n  void insert(const string& word) {\n    shared_ptr<TrieNode> node = root;\n    for (const char c : word) {\n      const int i = c - 'a';\n      if (node->children[i] == nullptr)\n        node->children[i] = make_shared<TrieNode>();\n      node = node->children[i];\n    }\n    node->word = &word;\n  }\n\n  string longestWordFrom(shared_ptr<TrieNode> node) {\n    string ans = node->word ? *node->word : \"\";\n\n    for (shared_ptr<TrieNode> child : node->children)\n      if (child && child->word) {\n        string childWord = longestWordFrom(child);\n        if (childWord.length() > ans.length())\n          ans = childWord;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[26];\n  public String word;\n}\n\nclass Solution {\n  public String longestWord(String[] words) {\n    for (final String word : words)\n      insert(word);\n    return longestWordFrom(root);\n  }\n\n  private TrieNode root = new TrieNode();\n\n  private void insert(final String word) {\n    TrieNode node = root;\n    for (char c : word.toCharArray()) {\n      final int i = c - 'a';\n      if (node.children[i] == null)\n        node.children[i] = new TrieNode();\n      node = node.children[i];\n    }\n    node.word = word;\n  }\n\n  private String longestWordFrom(TrieNode node) {\n    String ans = node.word == null ? \"\" : node.word;\n\n    for (TrieNode child : node.children)\n      if (child != null && child.word != null) {\n        String childWord = longestWordFrom(child);\n        if (childWord.length() > ans.length())\n          ans = childWord;\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def longestWord(self, words: List[str]) -> str:\n    root = {}\n\n    for word in words:\n      node = root\n      for c in word:\n        if c not in node:\n          node[c] = {}\n        node = node[c]\n      node['word'] = word\n\n    def dfs(node: dict) -> str:\n      ans = node['word'] if 'word' in node else ''\n\n      for child in node:\n        if 'word' in node[child] and len(node[child]['word']) > 0:\n          childWord = dfs(node[child])\n          if len(childWord) > len(ans) or (len(childWord) == len(ans) and childWord < ans):\n            ans = childWord\n\n      return ans\n\n    return dfs(root)\n",
                "lang_text": "py"
            }
        }
    }
}