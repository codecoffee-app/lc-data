{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1123",
            "title": "Lowest Common Ancestor of Deepest Leaves",
            "titleSlug": "lowest-common-ancestor-of-deepest-leaves",
            "content": "<p>Given the <code>root</code> of a binary tree, return <em>the lowest common ancestor of its deepest leaves</em>.</p>\n\n<p>Recall that:</p>\n\n<ul>\n\t<li>The node of a binary tree is a leaf if and only if it has no children</li>\n\t<li>The depth of the root of the tree is <code>0</code>. if the depth of a node is <code>d</code>, the depth of each of its children is <code>d + 1</code>.</li>\n\t<li>The lowest common ancestor of a set <code>S</code> of nodes, is the node <code>A</code> with the largest depth such that every node in <code>S</code> is in the subtree with root <code>A</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png\" style=\"width: 600px; height: 510px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4]\n<strong>Output:</strong> [2,7,4]\n<strong>Explanation:</strong> We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest leaf-nodes of the tree.\nNote that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The root is the deepest node in the tree, and it&#39;s the lca of itself.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [0,1,3,null,2]\n<strong>Output:</strong> [2]\n<strong>Explanation:</strong> The deepest leaf node in the tree is 2, the lca of one node is itself.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree will be in the range <code>[1, 1000]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n\t<li>The values of the nodes in the tree are <strong>unique</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 865: <a href=\"https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/\" target=\"_blank\">https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/</a></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1874,
            "dislikes": 824,
            "similarQuestions": "[{\"title\": \"Lowest Common Ancestor of a Binary Tree IV\", \"titleSlug\": \"lowest-common-ancestor-of-a-binary-tree-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"102K\", \"totalSubmission\": \"142.4K\", \"totalAcceptedRaw\": 101992, \"totalSubmissionRaw\": 142433, \"acRate\": \"71.6%\"}",
            "hints": [
                "Do a postorder traversal.",
                "Then, if both subtrees contain a deepest leaf, you can mark this node as the answer (so far).",
                "The final node marked will be the correct answer."
            ],
            "rephrased": {
                "body": "Given the root of a binary tree, find and return the lowest common ancestor (LCA) of its deepest leaves. The LCA is defined as the deepest node that is an ancestor of all the deepest leaf nodes in the tree. A leaf node is a node with no children, and the depth of the root is 0, with each child node's depth being one greater than its parent.",
                "constraints": [
                    "The number of nodes in the tree will be in the range [1, 1000].",
                    "0 <= Node.val <= 1000",
                    "The values of the nodes in the tree are unique."
                ],
                "testcases": [
                    {
                        "input": "[3,5,1,6,2,0,8,null,null,7,4]",
                        "output": "[2,7,4]",
                        "explanation": "The deepest leaves are 7 and 4. Their lowest common ancestor is the node with value 2."
                    },
                    {
                        "input": "[1]",
                        "output": "[1]",
                        "explanation": "The root is the deepest node, so it's the LCA of itself."
                    },
                    {
                        "input": "[0,1,3,null,2]",
                        "output": "[2]",
                        "explanation": "The deepest leaf node is 2, and the LCA of a single node is itself."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "lowest-common-ancestor-of-a-binary-tree-iv",
                "title": "Lowest Common Ancestor of a Binary Tree IV",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Do a postorder traversal.",
            "Then, if both subtrees contain a deepest leaf, you can mark this node as the answer (so far).",
            "The final node marked will be the correct answer."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  TreeNode* lca;\n  int depth;\n};\n\nclass Solution {\n public:\n  TreeNode* lcaDeepestLeaves(TreeNode* root) {\n    return dfs(root).lca;\n  }\n\n private:\n  T dfs(TreeNode* root) {\n    if (root == nullptr)\n      return {nullptr, 0};\n    const T left = dfs(root->left);\n    const T right = dfs(root->right);\n    if (left.depth > right.depth)\n      return {left.lca, left.depth + 1};\n    if (left.depth < right.depth)\n      return {right.lca, right.depth + 1};\n    return {root, left.depth + 1};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public TreeNode lca;\n  public int depth;\n  public T(TreeNode lca, int depth) {\n    this.lca = lca;\n    this.depth = depth;\n  }\n};\n\nclass Solution {\n  public TreeNode lcaDeepestLeaves(TreeNode root) {\n    return dfs(root).lca;\n  }\n\n  private T dfs(TreeNode root) {\n    if (root == null)\n      return new T(null, 0);\n    const T left = dfs(root.left);\n    const T right = dfs(root.right);\n    if (left.depth > right.depth)\n      return new T(left.lca, left.depth + 1);\n    if (left.depth < right.depth)\n      return new T(right.lca, right.depth + 1);\n    return new T(root, left.depth + 1);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}