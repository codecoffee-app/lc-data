{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "146",
            "title": "LRU Cache",
            "titleSlug": "lru-cache",
            "content": "<p>Design a data structure that follows the constraints of a <strong><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"_blank\">Least Recently Used (LRU) cache</a></strong>.</p>\n\n<p>Implement the <code>LRUCache</code> class:</p>\n\n<ul>\n\t<li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li>\n\t<li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li>\n\t<li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li>\n</ul>\n\n<p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n<strong>Output</strong>\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n<strong>Explanation</strong>\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= capacity &lt;= 3000</code></li>\n\t<li><code>0 &lt;= key &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li>\n\t<li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>get</code> and <code>put</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 19840,
            "dislikes": 923,
            "similarQuestions": "[{\"title\": \"LFU Cache\", \"titleSlug\": \"lfu-cache\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Design In-Memory File System\", \"titleSlug\": \"design-in-memory-file-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Design Compressed String Iterator\", \"titleSlug\": \"design-compressed-string-iterator\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Design Most Recently Used Queue\", \"titleSlug\": \"design-most-recently-used-queue\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Doubly-Linked List",
                    "slug": "doubly-linked-list"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"3.6M\", \"totalAcceptedRaw\": 1506111, \"totalSubmissionRaw\": 3590247, \"acRate\": \"42.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a data structure for a Least Recently Used (LRU) cache. Implement the `LRUCache` class with the following methods:\n\n*   `LRUCache(int capacity)`: Initializes the LRU cache with a positive size `capacity`.\n*   `int get(int key)`: Returns the value of the `key` if the key exists in the cache, otherwise returns `-1`.\n*   `void put(int key, int value)`: Updates the value of the `key` if the `key` exists. Otherwise, adds the `key-value` pair to the cache. If adding the key-value pair causes the number of keys in the cache to exceed the `capacity`, the least recently used key should be evicted.\n\nBoth `get` and `put` methods must operate in O(1) average time complexity.",
                "constraints": [
                    "1 <= capacity <= 3000",
                    "0 <= key <= 10^4",
                    "0 <= value <= 10^5",
                    "At most 2 * 10^5 calls will be made to get and put."
                ],
                "testcases": [
                    {
                        "input": "[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"] \n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]",
                        "output": "[null, null, null, 1, null, -1, null, -1, 3, 4]",
                        "explanation": "LRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "lfu-cache",
                "title": "LFU Cache",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "design-in-memory-file-system",
                "title": "Design In-Memory File System",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "design-compressed-string-iterator",
                "title": "Design Compressed String Iterator",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "design-most-recently-used-queue",
                "title": "Design Most Recently Used Queue",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Doubly-Linked List",
                "slug": "doubly-linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct Node {\n  int key;\n  int value;\n  shared_ptr<Node> prev;\n  shared_ptr<Node> next;\n  Node(int key, int value) : key(key), value(value) {}\n};\n\nclass LRUCache {\n public:\n  LRUCache(int capacity) : capacity(capacity) {\n    join(head, tail);\n  }\n\n  int get(int key) {\n    const auto it = keyToNode.find(key);\n    if (it == keyToNode.cend())\n      return -1;\n\n    shared_ptr<Node> node = it->second;\n    remove(node);\n    moveToHead(node);\n    return node->value;\n  }\n\n  void put(int key, int value) {\n    if (const auto it = keyToNode.find(key); it != keyToNode.cend()) {\n      shared_ptr<Node> node = it->second;\n      node->value = value;\n      remove(node);\n      moveToHead(node);\n      return;\n    }\n\n    if (keyToNode.size() == capacity) {\n      shared_ptr<Node> lastNode = tail->prev;\n      keyToNode.erase(lastNode->key);\n      remove(lastNode);\n    }\n\n    moveToHead(make_shared<Node>(key, value));\n    keyToNode[key] = head->next;\n  }\n\n private:\n  const int capacity;\n  unordered_map<int, shared_ptr<Node>> keyToNode;\n  shared_ptr<Node> head = make_shared<Node>(-1, -1);\n  shared_ptr<Node> tail = make_shared<Node>(-1, -1);\n\n  void join(shared_ptr<Node> node1, shared_ptr<Node> node2) {\n    node1->next = node2;\n    node2->prev = node1;\n  }\n\n  void moveToHead(shared_ptr<Node> node) {\n    join(node, head->next);\n    join(head, node);\n  }\n\n  void remove(shared_ptr<Node> node) {\n    join(node->prev, node->next);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Node {\n  public int key;\n  public int value;\n  public Node(int key, int value) {\n    this.key = key;\n    this.value = value;\n  }\n}\n\nclass LRUCache {\n  public LRUCache(int capacity) {\n    this.capacity = capacity;\n  }\n\n  public int get(int key) {\n    if (!keyToNode.containsKey(key))\n      return -1;\n\n    Node node = keyToNode.get(key);\n    cache.remove(node);\n    cache.add(node);\n    return node.value;\n  }\n\n  public void put(int key, int value) {\n    if (keyToNode.containsKey(key)) {\n      keyToNode.get(key).value = value;\n      get(key);\n      return;\n    }\n\n    if (cache.size() == capacity) {\n      Node lastNode = cache.iterator().next();\n      cache.remove(lastNode);\n      keyToNode.remove(lastNode.key);\n    }\n\n    Node node = new Node(key, value);\n    cache.add(node);\n    keyToNode.put(key, node);\n  }\n\n  private int capacity;\n  private Set<Node> cache = new LinkedHashSet<>();\n  private Map<Integer, Node> keyToNode = new HashMap<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Node:\n  def __init__(self, key: int, value: int):\n    self.key = key\n    self.value = value\n    self.prev = None\n    self.next = None\n\n\nclass LRUCache:\n  def __init__(self, capacity: int):\n    self.capacity = capacity\n    self.keyToNode = {}\n    self.head = Node(-1, -1)\n    self.tail = Node(-1, -1)\n    self.join(self.head, self.tail)\n\n  def get(self, key: int) -> int:\n    if key not in self.keyToNode:\n      return -1\n\n    node = self.keyToNode[key]\n    self.remove(node)\n    self.moveToHead(node)\n    return node.value\n\n  def put(self, key: int, value: int) -> None:\n    if key in self.keyToNode:\n      node = self.keyToNode[key]\n      node.value = value\n      self.remove(node)\n      self.moveToHead(node)\n      return\n\n    if len(self.keyToNode) == self.capacity:\n      lastNode = self.tail.prev\n      del self.keyToNode[lastNode.key]\n      self.remove(lastNode)\n\n    self.moveToHead(Node(key, value))\n    self.keyToNode[key] = self.head.next\n\n  def join(self, node1: Node, node2: Node):\n    node1.next = node2\n    node2.prev = node1\n\n  def moveToHead(self, node: Node):\n    self.join(node, self.head.next)\n    self.join(self.head, node)\n\n  def remove(self, node: Node):\n    self.join(node.prev, node.next)\n",
                "lang_text": "py"
            }
        }
    }
}