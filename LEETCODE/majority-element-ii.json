{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "229",
            "title": "Majority Element II",
            "titleSlug": "majority-element-ii",
            "content": "<p>Given an integer array of size <code>n</code>, find all elements that appear more than <code>&lfloor; n/3 &rfloor;</code> times.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,3]\n<strong>Output:</strong> [3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve the problem in linear time and in <code>O(1)</code> space?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9234,
            "dislikes": 399,
            "similarQuestions": "[{\"title\": \"Majority Element\", \"titleSlug\": \"majority-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Check If a Number Is Majority Element in a Sorted Array\", \"titleSlug\": \"check-if-a-number-is-majority-element-in-a-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Most Frequent Even Element\", \"titleSlug\": \"most-frequent-even-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"607.7K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 607715, \"totalSubmissionRaw\": 1199107, \"acRate\": \"50.7%\"}",
            "hints": [
                "How many majority elements could it possibly have?\r\n<br/>\r\nDo you have a better hint? <a href=\"mailto:admin@leetcode.com?subject=Hints for Majority Element II\" target=\"_blank\">Suggest it</a>!"
            ],
            "rephrased": {
                "body": "Given an integer array of size `n`, identify all elements that occur more frequently than `\u230an/3\u230b` times.  In other words, find all elements that appear strictly more than one-third of the total number of elements in the array.",
                "constraints": [
                    "1 <= nums.length <= 5 * 10^4",
                    "-10^9 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[3,2,3]",
                        "output": "[3]",
                        "explanation": "The element 3 appears twice in the array of size 3. Since 2 > floor(3/3) = 1, 3 is included in the output."
                    },
                    {
                        "input": "[1]",
                        "output": "[1]",
                        "explanation": "The element 1 appears once in the array of size 1. Since 1 > floor(1/3) = 0, 1 is included in the output."
                    },
                    {
                        "input": "[1,2]",
                        "output": "[1,2]",
                        "explanation": "The element 1 appears once and 2 appears once in an array of size 2. Since 1 > floor(2/3) = 0, both 1 and 2 are included in the output."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "majority-element",
                "title": "Majority Element",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "check-if-a-number-is-majority-element-in-a-sorted-array",
                "title": "Check If a Number Is Majority Element in a Sorted Array",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "most-frequent-even-element",
                "title": "Most Frequent Even Element",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How many majority elements could it possibly have?\r\n<br/>\r\nDo you have a better hint? <a href=\"mailto:admin@leetcode.com?subject=Hints for Majority Element II\" target=\"_blank\">Suggest it</a>!"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> majorityElement(vector<int>& nums) {\n    vector<int> ans;\n    int candidate1 = 0;\n    int candidate2 = 1;   // Any number different from candidate1\n    int countSoFar1 = 0;  // # of candidate1 so far\n    int countSoFar2 = 0;  // # of candidate2 so far\n\n    for (const int num : nums)\n      if (num == candidate1) {\n        ++countSoFar1;\n      } else if (num == candidate2) {\n        ++countSoFar2;\n      } else if (countSoFar1 == 0) {  // Assign new candidate\n        candidate1 = num;\n        ++countSoFar1;\n      } else if (countSoFar2 == 0) {  // Assign new candidate\n        candidate2 = num;\n        ++countSoFar2;\n      } else {  // Meet a new number, so pair out previous counts\n        --countSoFar1;\n        --countSoFar2;\n      }\n\n    const int count1 = count(nums.begin(), nums.end(), candidate1);\n    const int count2 = count(nums.begin(), nums.end(), candidate2);\n\n    if (count1 > nums.size() / 3)\n      ans.push_back(candidate1);\n    if (count2 > nums.size() / 3)\n      ans.push_back(candidate2);\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> majorityElement(int[] nums) {\n    List<Integer> ans = new ArrayList<>();\n    int candidate1 = 0;\n    int candidate2 = 1;  // Any number different from candidate1\n    int countSoFar1 = 0; // # of candidate1 so far\n    int countSoFar2 = 0; // # of candidate2 so far\n\n    for (final int num : nums)\n      if (num == candidate1) {\n        ++countSoFar1;\n      } else if (num == candidate2) {\n        ++countSoFar2;\n      } else if (countSoFar1 == 0) { // Assign new candidate\n        candidate1 = num;\n        ++countSoFar1;\n      } else if (countSoFar2 == 0) { // Assign new candidate\n        candidate2 = num;\n        ++countSoFar2;\n      } else { // Meet a new number, so pair out previous counts\n        --countSoFar1;\n        --countSoFar2;\n      }\n\n    int count1 = 0;\n    int count2 = 0;\n\n    for (final int num : nums)\n      if (num == candidate1)\n        ++count1;\n      else if (num == candidate2)\n        ++count2;\n\n    if (count1 > nums.length / 3)\n      ans.add(candidate1);\n    if (count2 > nums.length / 3)\n      ans.add(candidate2);\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def majorityElement(self, nums: List[int]) -> List[int]:\n    ans1 = 0\n    ans2 = 1\n    count1 = 0\n    count2 = 0\n\n    for num in nums:\n      if num == ans1:\n        count1 += 1\n      elif num == ans2:\n        count2 += 1\n      elif count1 == 0:\n        ans1 = num\n        count1 = 1\n      elif count2 == 0:\n        ans2 = num\n        count2 = 1\n      else:\n        count1 -= 1\n        count2 -= 1\n\n    return [ans for ans in (ans1, ans2) if nums.count(ans) > len(nums) // 3]\n",
                "lang_text": "py"
            }
        }
    }
}