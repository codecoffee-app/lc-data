{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2659",
            "title": "Make Array Empty",
            "titleSlug": "make-array-empty",
            "content": "<p>You are given an integer array <code>nums</code> containing <strong>distinct</strong> numbers, and you can perform the following operations <strong>until the array is empty</strong>:</p>\n\n<ul>\n\t<li>If the first element has the <strong>smallest</strong> value, remove it</li>\n\t<li>Otherwise, put the first element at the <strong>end</strong> of the array.</li>\n</ul>\n\n<p>Return <em>an integer denoting the number of operations it takes to make </em><code>nums</code><em> empty.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,-1]\n<strong>Output:</strong> 5\n</pre>\n\n<table style=\"border: 2px solid black; border-collapse: collapse;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"border: 2px solid black; padding: 5px;\">Operation</th>\n\t\t\t<th style=\"border: 2px solid black; padding: 5px;\">Array</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">1</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[4, -1, 3]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">2</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[-1, 3, 4]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">3</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[3, 4]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">4</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[4]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">5</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,4,3]\n<strong>Output:</strong> 5\n</pre>\n\n<table style=\"border: 2px solid black; border-collapse: collapse;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"border: 2px solid black; padding: 5px;\">Operation</th>\n\t\t\t<th style=\"border: 2px solid black; padding: 5px;\">Array</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">1</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[2, 4, 3]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">2</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[4, 3]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">3</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[3, 4]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">4</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[4]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">5</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 3\n</pre>\n\n<table style=\"border: 2px solid black; border-collapse: collapse;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"border: 2px solid black; padding: 5px;\">Operation</th>\n\t\t\t<th style=\"border: 2px solid black; padding: 5px;\">Array</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">1</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[2, 3]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">2</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[3]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">3</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9&nbsp;</sup>&lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>All values in <code>nums</code> are <strong>distinct</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 505,
            "dislikes": 30,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.1K\", \"totalSubmission\": \"36.8K\", \"totalAcceptedRaw\": 9109, \"totalSubmissionRaw\": 36816, \"acRate\": \"24.7%\"}",
            "hints": [
                "Understand the order in which the indices are removed from the array.",
                "We don\u2019t really need to delete or move the elements, only the array length matters.",
                "Upon removing an index, decide how many steps it takes to move to the next one.",
                "Use a data structure to speed up the calculation."
            ],
            "rephrased": {
                "body": "You are given an integer array `nums` containing distinct numbers. You can perform the following operations until the array is empty:\n\n*   If the first element has the smallest value, remove it.\n*   Otherwise, put the first element at the end of the array.\n\nReturn the number of operations it takes to make `nums` empty.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "-10^9 <= nums[i] <= 10^9",
                    "All values in `nums` are distinct."
                ],
                "testcases": [
                    {
                        "input": "[3,4,-1]",
                        "output": "5",
                        "explanation": "The array transforms as follows:\n\n1.  [3, 4, -1] -> [4, -1, 3]\n2.  [4, -1, 3] -> [-1, 3, 4]\n3.  [-1, 3, 4] -> [3, 4]\n4.  [3, 4] -> [4]\n5.  [4] -> []"
                    },
                    {
                        "input": "[1,2,4,3]",
                        "output": "5",
                        "explanation": "The array transforms as follows:\n\n1. [1, 2, 4, 3] -> [2, 4, 3]\n2. [2, 4, 3] -> [4, 3]\n3. [4, 3] -> [3, 4]\n4. [3, 4] -> [4]\n5. [4] -> []"
                    },
                    {
                        "input": "[1,2,3]",
                        "output": "3",
                        "explanation": "The array transforms as follows:\n\n1.  [1, 2, 3] -> [2, 3]\n2.  [2, 3] -> [3]\n3.  [3] -> []"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Understand the order in which the indices are removed from the array.",
            "We don\u2019t really need to delete or move the elements, only the array length matters.",
            "Upon removing an index, decide how many steps it takes to move to the next one.",
            "Use a data structure to speed up the calculation."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long countOperationsToEmptyArray(vector<int>& nums) {\n    const int n = nums.size();\n    long long ans = n;\n    unordered_map<int, int> numToIndex;\n\n    for (int i = 0; i < n; ++i)\n      numToIndex[nums[i]] = i;\n\n    std::ranges::sort(nums);\n\n    for (int i = 1; i < n; ++i)\n      // On i-th step we've already removed i - 1 smallest nums and can ignore\n      // them. If an element nums[i] has smaller index in origin array than\n      // nums[i - 1], we should rotate whole left array n - i times to set\n      // nums[i] element on the 1st position.\n      if (numToIndex[nums[i]] < numToIndex[nums[i - 1]])\n        ans += n - i;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long countOperationsToEmptyArray(int[] nums) {\n    final int n = nums.length;\n    long ans = n;\n    Map<Integer, Integer> numToIndex = new HashMap<>();\n\n    for (int i = 0; i < n; ++i)\n      numToIndex.put(nums[i], i);\n\n    Arrays.sort(nums);\n\n    for (int i = 1; i < n; ++i)\n      // On i-th step we've already removed i - 1 smallest nums and can ignore\n      // them. If an element nums[i] has smaller index in origin array than\n      // nums[i - 1], we should rotate whole left array n - i times to set\n      // nums[i] element on the 1st position.\n      if (numToIndex.get(nums[i]) < numToIndex.get(nums[i - 1]))\n        ans += n - i;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countOperationsToEmptyArray(self, nums: List[int]) -> int:\n    n = len(nums)\n    ans = n\n    numToIndex = {}\n\n    for i, num in enumerate(nums):\n      numToIndex[num] = i\n\n    nums.sort()\n\n    for i in range(1, n):\n      # On i-th step we've already removed i - 1 smallest nums and can ignore\n      # them. If an element nums[i] has smaller index in origin array than\n      # nums[i - 1], we should rotate whole left array n - i times to set\n      # nums[i] element on the 1st position.\n      if numToIndex[nums[i]] < numToIndex[nums[i - 1]]:\n        ans += n - i\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}