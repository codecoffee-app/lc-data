{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1187",
            "title": "Make Array Strictly Increasing",
            "titleSlug": "make-array-strictly-increasing",
            "content": "<p>Given two integer arrays&nbsp;<code>arr1</code> and <code>arr2</code>, return the minimum number of operations (possibly zero) needed&nbsp;to make <code>arr1</code> strictly increasing.</p>\n\n<p>In one operation, you can choose two indices&nbsp;<code>0 &lt;=&nbsp;i &lt; arr1.length</code>&nbsp;and&nbsp;<code>0 &lt;= j &lt; arr2.length</code>&nbsp;and do the assignment&nbsp;<code>arr1[i] = arr2[j]</code>.</p>\n\n<p>If there is no way to make&nbsp;<code>arr1</code>&nbsp;strictly increasing,&nbsp;return&nbsp;<code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Replace <code>5</code> with <code>2</code>, then <code>arr1 = [1, 2, 3, 6, 7]</code>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,5,3,6,7], arr2 = [4,3,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Replace <code>5</code> with <code>3</code> and then replace <code>3</code> with <code>4</code>. <code>arr1 = [1, 3, 4, 6, 7]</code>.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> You can&#39;t make <code>arr1</code> strictly increasing.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr1.length, arr2.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= arr1[i], arr2[i] &lt;= 10^9</code></li>\n</ul>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2172,
            "dislikes": 47,
            "similarQuestions": "[{\"title\": \"Make Array Non-decreasing or Non-increasing\", \"titleSlug\": \"make-array-non-decreasing-or-non-increasing\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"55.8K\", \"totalSubmission\": \"95.2K\", \"totalAcceptedRaw\": 55788, \"totalSubmissionRaw\": 95196, \"acRate\": \"58.6%\"}",
            "hints": [
                "Use dynamic programming.",
                "The state would be the index in arr1 and the index of the previous element in arr2 after sorting it and removing duplicates."
            ],
            "rephrased": {
                "body": "Given two integer arrays `arr1` and `arr2`, determine the minimum number of operations required to make `arr1` strictly increasing. In a single operation, you can replace an element in `arr1` with an element from `arr2`. If it's impossible to make `arr1` strictly increasing, return -1.",
                "constraints": [
                    "1 <= arr1.length, arr2.length <= 2000",
                    "0 <= arr1[i], arr2[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]",
                        "output": "1",
                        "explanation": "By replacing 5 with 2, arr1 becomes [1, 2, 3, 6, 7], which is strictly increasing. This requires one operation."
                    },
                    {
                        "input": "arr1 = [1,5,3,6,7], arr2 = [4,3,1]",
                        "output": "2",
                        "explanation": "Replacing 5 with 3 and then 3 with 4 makes arr1 become [1, 3, 4, 6, 7], which is strictly increasing. This requires two operations."
                    },
                    {
                        "input": "arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]",
                        "output": "-1",
                        "explanation": "It is not possible to make arr1 strictly increasing using elements from arr2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "make-array-non-decreasing-or-non-increasing",
                "title": "Make Array Non-decreasing or Non-increasing",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Use dynamic programming.",
            "The state would be the index in arr1 and the index of the previous element in arr2 after sorting it and removing duplicates."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {\n    // dp[i] := min steps to reach i at previous round\n    unordered_map<int, int> dp{{-1, 0}};\n\n    std::ranges::sort(arr2);\n\n    for (const int a : arr1) {\n      unordered_map<int, int> nextDp;\n      for (const auto& [val, steps] : dp) {\n        // it's possible to use the value in arr1\n        if (a > val)\n          nextDp[a] = min(nextDp.count(a) ? nextDp[a] : INT_MAX, steps);\n        // Also try the value in arr2\n        if (const auto it = upper_bound(arr2.begin(), arr2.end(), val);\n            it != arr2.cend())\n          nextDp[*it] =\n              min(nextDp.count(*it) ? nextDp[*it] : INT_MAX, steps + 1);\n      }\n      if (nextDp.empty())\n        return -1;\n      dp = move(nextDp);\n    }\n\n    int ans = INT_MAX;\n    for (const auto& [_, steps] : dp)\n      ans = min(ans, steps);\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int makeArrayIncreasing(int[] arr1, int[] arr2) {\n    // dp[i] := min steps to reach i at previous round\n    Map<Integer, Integer> dp = new HashMap<>();\n    dp.put(-1, 0);\n\n    Arrays.sort(arr2);\n\n    for (final int a : arr1) {\n      Map<Integer, Integer> nextDp = new HashMap<>();\n      for (final int val : dp.keySet()) {\n        final int steps = dp.get(val);\n        // it's possible to use the value in arr1\n        if (a > val)\n          nextDp.put(a, Math.min(nextDp.getOrDefault(a, Integer.MAX_VALUE), steps));\n        // Also try the value in arr2\n        final int i = firstGreater(arr2, val);\n        if (i < arr2.length)\n          nextDp.put(arr2[i], Math.min(nextDp.getOrDefault(arr2[i], Integer.MAX_VALUE), steps + 1));\n      }\n      if (nextDp.isEmpty())\n        return -1;\n      dp = nextDp;\n    }\n\n    return Collections.min(dp.values());\n  }\n\n  private int firstGreater(int[] A, int val) {\n    final int i = Arrays.binarySearch(A, val + 1);\n    return i < 0 ? -(i + 1) : i;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n    # dp[i] := min steps to reach i at previous round\n    dp = {-1: 0}\n\n    arr2.sort()\n\n    for a in arr1:\n      nextDp = collections.defaultdict(lambda: math.inf)\n      for val, steps in dp.items():\n        # it's possible to use the value in arr1\n        if a > val:\n          nextDp[a] = min(nextDp[a], steps)\n        # Also try the value in arr2\n        i = bisect_right(arr2, val)\n        if i < len(arr2):\n          nextDp[arr2[i]] = min(nextDp[arr2[i]], steps + 1)\n      if not nextDp:\n        return -1\n      dp = nextDp\n\n    return min(dp.values())\n",
                "lang_text": "py"
            }
        }
    }
}