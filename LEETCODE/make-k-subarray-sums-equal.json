{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2607",
            "title": "Make K-Subarray Sums Equal",
            "titleSlug": "make-k-subarray-sums-equal",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>arr</code> and an integer <code>k</code>. The array <code>arr</code> is circular. In other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element.</p>\n\n<p>You can do the following operation any number of times:</p>\n\n<ul>\n\t<li>Pick any element from <code>arr</code> and increase or decrease it by <code>1</code>.</li>\n</ul>\n\n<p>Return <em>the minimum number of operations such that the sum of each <strong>subarray</strong> of length </em><code>k</code><em> is equal</em>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous part of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,4,1,3], k = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> we can do one operation on index 1 to make its value equal to 3.\nThe array after the operation is [1,3,1,3]\n- Subarray starts at index 0 is [1, 3], and its sum is 4 \n- Subarray starts at index 1 is [3, 1], and its sum is 4 \n- Subarray starts at index 2 is [1, 3], and its sum is 4 \n- Subarray starts at index 3 is [3, 1], and its sum is 4 \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,5,5,7], k = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> we can do three operations on index 0 to make its value equal to 5 and two operations on index 3 to make its value equal to 5.\nThe array after the operations is [5,5,5,5]\n- Subarray starts at index 0 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 1 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 2 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 3 is [5, 5, 5], and its sum is 15 \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 424,
            "dislikes": 80,
            "similarQuestions": "[{\"title\": \"Rotate Array\", \"titleSlug\": \"rotate-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.8K\", \"totalSubmission\": \"25.1K\", \"totalAcceptedRaw\": 8821, \"totalSubmissionRaw\": 25141, \"acRate\": \"35.1%\"}",
            "hints": [
                "Think about gcd(n, k). How will it help to calculate the answer?",
                "indices i and j are in the same group if gcd(n, k) mod i = gcd(n, k) mod j. Each group should have equal elements. Think about the minimum number of operations for each group",
                "The minimum number of operations for each group equals the summation of differences between the elements and the median of elements inside the group."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed integer array `arr` and an integer `k`. The array `arr` is circular, meaning the first element follows the last, and the last element precedes the first.",
                "constraints": [
                    "1 <= k <= arr.length <= 10^5",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "arr = [1,4,1,3], k = 2",
                        "output": "1",
                        "explanation": "One operation on index 1 (changing 4 to 3) makes all subarrays of length 2 have the same sum (4). The modified array is [1,3,1,3]. Each subarray [1, 3], [3, 1], [1, 3], and [3, 1] has a sum of 4."
                    },
                    {
                        "input": "arr = [2,5,5,7], k = 3",
                        "output": "5",
                        "explanation": "Three operations on index 0 (changing 2 to 5) and two operations on index 3 (changing 7 to 5) makes all subarrays of length 3 have the same sum (15). The modified array is [5,5,5,5]. Each subarray [5, 5, 5] has a sum of 15."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "rotate-array",
                "title": "Rotate Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think about gcd(n, k). How will it help to calculate the answer?",
            "indices i and j are in the same group if gcd(n, k) mod i = gcd(n, k) mod j. Each group should have equal elements. Think about the minimum number of operations for each group",
            "The minimum number of operations for each group equals the summation of differences between the elements and the median of elements inside the group."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long makeSubKSumEqual(vector<int>& arr, int k) {\n    // If the sum of each subarray of length k is equal, `arr` must have\n    // repeated pattern of size k. E.g. arr = [1, 2, 3, ...] and k = 3, to have\n    // sum([1, 2, 3)] == sum([2, 3, x]), x must be 1. Therefore, arr[i] ==\n    // arr[(i + k) % n] for every i.\n    const int n = arr.size();\n    long long ans = 0;\n    vector<bool> seen(n);\n\n    for (int i = 0; i < n; ++i) {\n      vector<int> groups;\n      int j = i;\n      while (!seen[j]) {\n        groups.push_back(arr[j]);\n        seen[j] = true;\n        j = (j + k) % n;\n      }\n      nth_element(groups.begin(), groups.begin() + groups.size() / 2,\n                  groups.end());\n      for (const int num : groups)\n        ans += abs(num - groups[groups.size() / 2]);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long makeSubKSumEqual(int[] arr, int k) {\n    // If the sum of each subarray of length k is equal, `arr` must have\n    // repeated pattern of size k. E.g. arr = [1, 2, 3, ...] and k = 3, to have\n    // sum([1, 2, 3)] == sum([2, 3, x]), x must be 1. Therefore, arr[i] ==\n    // arr[(i + k) % n] for every i.\n    final int n = arr.length;\n    long ans = 0;\n    boolean[] seen = new boolean[n];\n\n    for (int i = 0; i < n; ++i) {\n      List<Integer> groups = new ArrayList<>();\n      int j = i;\n      while (!seen[j]) {\n        groups.add(arr[j]);\n        seen[j] = true;\n        j = (j + k) % n;\n      }\n      Collections.sort(groups);\n      for (final int num : groups)\n        ans += Math.abs(num - groups.get(groups.size() / 2));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def makeSubKSumEqual(self, arr: List[int], k: int) -> int:\n    # If the sum of each subarray of length k is equal, `arr` must have\n    # repeated pattern of size k. E.g. arr = [1, 2, 3, ...] and k = 3, to have\n    # sum([1, 2, 3)] == sum([2, 3, x]), x must be 1. Therefore, arr[i] ==\n    # arr[(i + k) % n] for every i.\n    n = len(arr)\n    ans = 0\n    seen = [0] * n\n\n    for i in range(n):\n      groups = []\n      j = i\n      while not seen[j]:\n        groups.append(arr[j])\n        seen[j] = True\n        j = (j + k) % n\n      groups.sort()\n      for num in groups:\n        ans += abs(num - groups[len(groups) // 2])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}