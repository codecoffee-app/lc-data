{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2531",
            "title": "Make Number of Distinct Characters Equal",
            "titleSlug": "make-number-of-distinct-characters-equal",
            "content": "<p>You are given two <strong>0-indexed</strong> strings <code>word1</code> and <code>word2</code>.</p>\n\n<p>A <strong>move</strong> consists of choosing two indices <code>i</code> and <code>j</code> such that <code>0 &lt;= i &lt; word1.length</code> and <code>0 &lt;= j &lt; word2.length</code> and swapping <code>word1[i]</code> with <code>word2[j]</code>.</p>\n\n<p>Return <code>true</code> <em>if it is possible to get the number of distinct characters in</em> <code>word1</code> <em>and</em> <code>word2</code> <em>to be equal with <strong>exactly one</strong> move. </em>Return <code>false</code> <em>otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;ac&quot;, word2 = &quot;b&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Any pair of swaps would yield two distinct characters in the first string, and one in the second string.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;abcc&quot;, word2 = &quot;aab&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We swap index 2 of the first string with index 0 of the second string. The resulting strings are word1 = &quot;abac&quot; and word2 = &quot;cab&quot;, which both have 3 distinct characters.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;abcde&quot;, word2 = &quot;fghij&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Both resulting strings will have 5 distinct characters, regardless of which indices we swap.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word1</code> and <code>word2</code> consist of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 526,
            "dislikes": 139,
            "similarQuestions": "[{\"title\": \"Bulls and Cows\", \"titleSlug\": \"bulls-and-cows\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Buddy Strings\", \"titleSlug\": \"buddy-strings\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Swaps to Make Strings Equal\", \"titleSlug\": \"minimum-swaps-to-make-strings-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check if One String Swap Can Make Strings Equal\", \"titleSlug\": \"check-if-one-string-swap-can-make-strings-equal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Check if All Characters Have Equal Number of Occurrences\", \"titleSlug\": \"check-if-all-characters-have-equal-number-of-occurrences\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"17K\", \"totalSubmission\": \"65.3K\", \"totalAcceptedRaw\": 16990, \"totalSubmissionRaw\": 65349, \"acRate\": \"26.0%\"}",
            "hints": [
                "Create a frequency array of the letters of each string.",
                "There are 26*26 possible pairs of letters to swap. Can we try them all?",
                "Iterate over all possible pairs of letters and check if swapping them will yield two strings that have the same number of distinct characters. Use the frequency array for the check."
            ],
            "rephrased": {
                "body": "Given two 0-indexed strings `word1` and `word2`, determine if it's possible to make the number of distinct characters in both strings equal by performing exactly one move. A move consists of swapping a character at index `i` in `word1` with a character at index `j` in `word2` (where `0 <= i < word1.length` and `0 <= j < word2.length`). Return `true` if possible, otherwise `false`.",
                "constraints": [
                    "1 <= word1.length, word2.length <= 10^5",
                    "word1 and word2 consist of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "word1 = \"ac\", word2 = \"b\"",
                        "output": "false",
                        "explanation": "No swap can result in an equal number of distinct characters in both strings."
                    },
                    {
                        "input": "word1 = \"abcc\", word2 = \"aab\"",
                        "output": "true",
                        "explanation": "Swapping 'c' at index 2 of word1 with 'a' at index 0 of word2 results in word1 = \"abac\" and word2 = \"cab\". Both strings then have 3 distinct characters."
                    },
                    {
                        "input": "word1 = \"abcde\", word2 = \"fghij\"",
                        "output": "true",
                        "explanation": "Any swap will result in both strings having 5 distinct characters."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "bulls-and-cows",
                "title": "Bulls and Cows",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "buddy-strings",
                "title": "Buddy Strings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-swaps-to-make-strings-equal",
                "title": "Minimum Swaps to Make Strings Equal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "check-if-one-string-swap-can-make-strings-equal",
                "title": "Check if One String Swap Can Make Strings Equal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "check-if-all-characters-have-equal-number-of-occurrences",
                "title": "Check if All Characters Have Equal Number of Occurrences",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Create a frequency array of the letters of each string.",
            "There are 26*26 possible pairs of letters to swap. Can we try them all?",
            "Iterate over all possible pairs of letters and check if swapping them will yield two strings that have the same number of distinct characters. Use the frequency array for the check."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isItPossible(string word1, string word2) {\n    const vector<int> count1 = getCount(word1);\n    const vector<int> count2 = getCount(word2);\n    const int distinct1 = getDistinct(count1);\n    const int distinct2 = getDistinct(count2);\n\n    for (int i = 0; i < 26; ++i)\n      for (int j = 0; j < 26; ++j) {\n        if (count1[i] == 0 || count2[j] == 0)\n          continue;\n        if (i == j) {\n          // Swapping the same chars won't change the # of distinct chars in\n          // each string, so just check if `distinct1 == distinct2`.\n          if (distinct1 == distinct2)\n            return true;\n          continue;\n        }\n        // The calculation is meaningful only when i != j.\n        // Swap ('a' + i) in word1 with ('a' + j) in word2.\n        const int distinctAfterSwap1 =\n            distinct1 - (count1[i] == 1) + (count1[j] == 0);\n        const int distinctAfterSwap2 =\n            distinct2 - (count2[j] == 1) + (count2[i] == 0);\n        if (distinctAfterSwap1 == distinctAfterSwap2)\n          return true;\n      }\n\n    return false;\n  }\n\n private:\n  vector<int> getCount(const string& s) {\n    vector<int> count(26);\n    for (const char c : s)\n      ++count[c - 'a'];\n    return count;\n  }\n\n  int getDistinct(const vector<int>& count) {\n    return count_if(count.begin(), count.end(),\n                    [](const int c) { return c > 0; });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isItPossible(String word1, String word2) {\n    final int[] count1 = getCount(word1);\n    final int[] count2 = getCount(word2);\n    final int distinct1 = getDistinct(count1);\n    final int distinct2 = getDistinct(count2);\n\n    for (int i = 0; i < 26; ++i)\n      for (int j = 0; j < 26; ++j) {\n        if (count1[i] == 0 || count2[j] == 0)\n          continue;\n        if (i == j) {\n          // Swapping the same chars won't change the # of distinct chars in\n          // each string, so just check if `distinct1 == distinct2`.\n          if (distinct1 == distinct2)\n            return true;\n          continue;\n        }\n        // The calculation is meaningful only when i != j.\n        // Swap ('a' + i) in word1 with ('a' + j) in word2.\n        final int distinctAfterSwap1 =\n            distinct1 - (count1[i] == 1 ? 1 : 0) + (count1[j] == 0 ? 1 : 0);\n        final int distinctAfterSwap2 =\n            distinct2 - (count2[j] == 1 ? 1 : 0) + (count2[i] == 0 ? 1 : 0);\n        if (distinctAfterSwap1 == distinctAfterSwap2)\n          return true;\n      }\n\n    return false;\n  }\n\n  private int[] getCount(final String s) {\n    int[] count = new int[26];\n    for (final char c : s.toCharArray())\n      ++count[c - 'a'];\n    return count;\n  }\n\n  private int getDistinct(int[] count) {\n    return (int) Arrays.stream(count).filter(c -> c > 0).count();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isItPossible(self, word1: str, word2: str) -> bool:\n    count1 = collections.Counter(word1)\n    count2 = collections.Counter(word2)\n    distinct1 = len(count1)\n    distinct2 = len(count2)\n\n    for a in count1:\n      for b in count2:\n        if a == b:\n          # Swapping the same chars won't change the # of distinct chars in\n          # each string, so just check if `distinct1 == distinct2`.\n          if distinct1 == distinct2:\n            return True\n          continue\n        # The calculation is meaningful only when a != b\n        # Swap a in word1 with b in word2.\n        distinctAfterSwap1 = distinct1 - (count1[a] == 1) + (count1[b] == 0)\n        distinctAfterSwap2 = distinct2 - (count2[b] == 1) + (count2[a] == 0)\n        if distinctAfterSwap1 == distinctAfterSwap2:\n          return True\n\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}