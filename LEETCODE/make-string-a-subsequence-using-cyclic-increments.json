{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2825",
            "title": "Make String a Subsequence Using Cyclic Increments",
            "titleSlug": "make-string-a-subsequence-using-cyclic-increments",
            "content": "<p>You are given two <strong>0-indexed</strong> strings <code>str1</code> and <code>str2</code>.</p>\n\n<p>In an operation, you select a <strong>set</strong> of indices in <code>str1</code>, and for each index <code>i</code> in the set, increment <code>str1[i]</code> to the next character <strong>cyclically</strong>. That is <code>&#39;a&#39;</code> becomes <code>&#39;b&#39;</code>, <code>&#39;b&#39;</code> becomes <code>&#39;c&#39;</code>, and so on, and <code>&#39;z&#39;</code> becomes <code>&#39;a&#39;</code>.</p>\n\n<p>Return <code>true</code> <em>if it is possible to make </em><code>str2</code> <em>a subsequence of </em><code>str1</code> <em>by performing the operation <strong>at most once</strong></em>, <em>and</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p><strong>Note:</strong> A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;abc&quot;, str2 = &quot;ad&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Select index 2 in str1.\nIncrement str1[2] to become &#39;d&#39;. \nHence, str1 becomes &quot;abd&quot; and str2 is now a subsequence. Therefore, true is returned.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;zc&quot;, str2 = &quot;ad&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Select indices 0 and 1 in str1. \nIncrement str1[0] to become &#39;a&#39;. \nIncrement str1[1] to become &#39;d&#39;. \nHence, str1 becomes &quot;ad&quot; and str2 is now a subsequence. Therefore, true is returned.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;ab&quot;, str2 = &quot;d&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> In this example, it can be shown that it is impossible to make str2 a subsequence of str1 using the operation at most once. \nTherefore, false is returned.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= str1.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= str2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>str1</code> and <code>str2</code> consist of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 316,
            "dislikes": 13,
            "similarQuestions": "[{\"title\": \"Is Subsequence\", \"titleSlug\": \"is-subsequence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"34.4K\", \"totalSubmission\": \"70K\", \"totalAcceptedRaw\": 34392, \"totalSubmissionRaw\": 69976, \"acRate\": \"49.1%\"}",
            "hints": [
                "<div class=\"_1l1MA\">Consider the indices we will increment separately.</div>",
                "<div class=\"_1l1MA\">We can maintain two pointers: pointer <code>i</code> for <code>str1</code> and pointer <code>j</code> for <code>str2</code>, while ensuring they remain within the bounds of the strings.</div>",
                "<div class=\"_1l1MA\">If both <code>str1[i]</code> and <code>str2[j]</code> match, or if incrementing <code>str1[i]</code> matches <code>str2[j]</code>, we increase both pointers; otherwise, we increment only pointer <code>i</code>.</div>",
                "<div class=\"_1l1MA\">It is possible to make <code>str2</code> a subsequence of <code>str1</code> if <code>j</code> is at the end of <code>str2</code>, after we can no longer find a match.</div>"
            ],
            "rephrased": {
                "body": "Given two 0-indexed strings `str1` and `str2`, determine if `str2` can be made a subsequence of `str1` by performing a single operation at most once.  The operation involves selecting a set of indices in `str1` and cyclically incrementing each selected character (e.g., 'a' becomes 'b', 'b' becomes 'c', ..., 'z' becomes 'a').",
                "constraints": [
                    "1 <= str1.length <= 10^5",
                    "1 <= str2.length <= 10^5",
                    "str1 and str2 consist of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": {
                            "str1": "abc",
                            "str2": "ad"
                        },
                        "output": true,
                        "explanation": "By incrementing `str1[2]` ('c') to 'd', `str1` becomes \"abd\", making `str2` a subsequence."
                    },
                    {
                        "input": {
                            "str1": "zc",
                            "str2": "ad"
                        },
                        "output": true,
                        "explanation": "By incrementing `str1[0]` ('z') to 'a' and `str1[1]` ('c') to 'd', `str1` becomes \"ad\", making `str2` a subsequence."
                    },
                    {
                        "input": {
                            "str1": "ab",
                            "str2": "d"
                        },
                        "output": false,
                        "explanation": "It is impossible to make `str2` a subsequence of `str1` using the allowed operation at most once."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "is-subsequence",
                "title": "Is Subsequence",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "<div class=\"_1l1MA\">Consider the indices we will increment separately.</div>",
            "<div class=\"_1l1MA\">We can maintain two pointers: pointer <code>i</code> for <code>str1</code> and pointer <code>j</code> for <code>str2</code>, while ensuring they remain within the bounds of the strings.</div>",
            "<div class=\"_1l1MA\">If both <code>str1[i]</code> and <code>str2[j]</code> match, or if incrementing <code>str1[i]</code> matches <code>str2[j]</code>, we increase both pointers; otherwise, we increment only pointer <code>i</code>.</div>",
            "<div class=\"_1l1MA\">It is possible to make <code>str2</code> a subsequence of <code>str1</code> if <code>j</code> is at the end of <code>str2</code>, after we can no longer find a match.</div>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canMakeSubsequence(string str1, string str2) {\n    int i = 0;  // str2's index\n\n    for (const char c : str1)\n      if (c == str2[i] || ('a' + ((c - 'a' + 1) % 26)) == str2[i])\n        if (++i == str2.length())\n          return true;\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canMakeSubsequence(String str1, String str2) {\n    int i = 0; // str2's index\n\n    for (final char c : str1.toCharArray())\n      if (c == str2.charAt(i) || ('a' + ((c - 'a' + 1) % 26)) == str2.charAt(i))\n        if (++i == str2.length())\n          return true;\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canMakeSubsequence(self, str1: str, str2: str) -> bool:\n    i = 0  # str2's index\n\n    for c in str1:\n      if c == str2[i] or chr(ord('a') + ((ord(c) - ord('a') + 1) % 26)) == str2[i]:\n        i += 1\n        if i == len(str2):\n          return True\n\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}