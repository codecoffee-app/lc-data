{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1590",
            "title": "Make Sum Divisible by P",
            "titleSlug": "make-sum-divisible-by-p",
            "content": "<p>Given an array of positive integers <code>nums</code>, remove the <strong>smallest</strong> subarray (possibly <strong>empty</strong>) such that the <strong>sum</strong> of the remaining elements is divisible by <code>p</code>. It is <strong>not</strong> allowed to remove the whole array.</p>\n\n<p>Return <em>the length of the smallest subarray that you need to remove, or </em><code>-1</code><em> if it&#39;s impossible</em>.</p>\n\n<p>A <strong>subarray</strong> is defined as a contiguous block of elements in the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,4,2], p = 6\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,3,5,2], p = 9\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], p = 3\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= p &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1463,
            "dislikes": 59,
            "similarQuestions": "[{\"title\": \"Subarray Sums Divisible by K\", \"titleSlug\": \"subarray-sums-divisible-by-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find the Divisibility Array of a String\", \"titleSlug\": \"find-the-divisibility-array-of-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.9K\", \"totalSubmission\": \"90K\", \"totalAcceptedRaw\": 25876, \"totalSubmissionRaw\": 90038, \"acRate\": \"28.7%\"}",
            "hints": [
                "Use prefix sums to calculate the subarray sums.",
                "Suppose you know the remainder for the sum of the entire array. How does removing a subarray affect that remainder? What remainder does the subarray need to have in order to make the rest of the array sum up to be divisible by k?",
                "Use a map to keep track of the rightmost index for every prefix sum % p."
            ],
            "rephrased": {
                "body": "Given an array of positive integers `nums`, find the smallest subarray (possibly empty) to remove such that the sum of the remaining elements is divisible by `p`. Removing the entire array is not allowed. Return the length of the smallest subarray to remove, or -1 if it's impossible to achieve the divisibility condition.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^9",
                    "1 <= p <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [3,1,4,2], p = 6",
                        "output": "1",
                        "explanation": "The sum of the elements in nums is 10, which is not divisible by 6. Removing the subarray [4] results in a remaining sum of 6, which is divisible by 6.  This is the smallest subarray that can be removed to satisfy the condition."
                    },
                    {
                        "input": "nums = [6,3,5,2], p = 9",
                        "output": "2",
                        "explanation": "It is not possible to remove a single element to make the remaining sum divisible by 9. Removing the subarray [5,2] leaves [6,3] with a sum of 9, which is divisible by 9. This is the smallest possible subarray to remove."
                    },
                    {
                        "input": "nums = [1,2,3], p = 3",
                        "output": "0",
                        "explanation": "The sum of the elements (6) is already divisible by 3, so no removal is needed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "subarray-sums-divisible-by-k",
                "title": "Subarray Sums Divisible by K",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-the-divisibility-array-of-a-string",
                "title": "Find the Divisibility Array of a String",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use prefix sums to calculate the subarray sums.",
            "Suppose you know the remainder for the sum of the entire array. How does removing a subarray affect that remainder? What remainder does the subarray need to have in order to make the rest of the array sum up to be divisible by k?",
            "Use a map to keep track of the rightmost index for every prefix sum % p."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minSubarray(vector<int>& nums, int p) {\n    const long sum = accumulate(nums.begin(), nums.end(), 0L);\n    const int remainder = sum % p;\n    if (remainder == 0)\n      return 0;\n\n    unordered_map<int, int> prefixToIndex{{0, -1}};\n    int ans = nums.size();\n    int prefix = 0;\n\n    for (int i = 0; i < nums.size(); ++i) {\n      prefix += nums[i];\n      prefix %= p;\n      const int target = (prefix - remainder + p) % p;\n      if (const auto it = prefixToIndex.find(target);\n          it != prefixToIndex.cend())\n        ans = min(ans, i - it->second);\n      prefixToIndex[prefix] = i;\n    }\n\n    return ans == nums.size() ? -1 : ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minSubarray(int[] nums, int p) {\n    final long sum = Arrays.stream(nums).asLongStream().sum();\n    final int remainder = (int) (sum % p);\n    if (remainder == 0)\n      return 0;\n\n    int ans = nums.length;\n    int prefix = 0;\n    Map<Integer, Integer> prefixToIndex = new HashMap<>();\n    prefixToIndex.put(0, -1);\n\n    for (int i = 0; i < nums.length; ++i) {\n      prefix += nums[i];\n      prefix %= p;\n      final int target = (prefix - remainder + p) % p;\n      if (prefixToIndex.containsKey(target))\n        ans = Math.min(ans, i - prefixToIndex.get(target));\n      prefixToIndex.put(prefix, i);\n    }\n\n    return ans == nums.length ? -1 : ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minSubarray(self, nums: List[int], p: int) -> int:\n    summ = sum(nums)\n    remainder = summ % p\n    if remainder == 0:\n      return 0\n\n    ans = len(nums)\n    prefix = 0\n    prefixToIndex = {0: -1}\n\n    for i, num in enumerate(nums):\n      prefix += num\n      prefix %= p\n      target = (prefix - remainder + p) % p\n      if target in prefixToIndex:\n        ans = min(ans, i - prefixToIndex[target])\n      prefixToIndex[prefix] = i\n\n    return -1 if ans == len(nums) else ans\n",
                "lang_text": "py"
            }
        }
    }
}