{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1787",
            "title": "Make the XOR of All Segments Equal to Zero",
            "titleSlug": "make-the-xor-of-all-segments-equal-to-zero",
            "content": "<p>You are given an array <code>nums</code>\u200b\u200b\u200b and an integer <code>k</code>\u200b\u200b\u200b\u200b\u200b. The <font face=\"monospace\">XOR</font> of a segment <code>[left, right]</code> where <code>left &lt;= right</code> is the <code>XOR</code> of all the elements with indices between <code>left</code> and <code>right</code>, inclusive: <code>nums[left] XOR nums[left+1] XOR ... XOR nums[right]</code>.</p>\n\n<p>Return <em>the minimum number of elements to change in the array </em>such that the <code>XOR</code> of all segments of size <code>k</code>\u200b\u200b\u200b\u200b\u200b\u200b is equal to zero.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,0,3,0], k = 1\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>Modify the array from [<u><strong>1</strong></u>,<u><strong>2</strong></u>,0,<u><strong>3</strong></u>,0] to from [<u><strong>0</strong></u>,<u><strong>0</strong></u>,0,<u><strong>0</strong></u>,0].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,5,2,1,7,3,4,7], k = 3\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>Modify the array from [3,4,<strong><u>5</u></strong>,<strong><u>2</u></strong>,<strong><u>1</u></strong>,7,3,4,7] to [3,4,<strong><u>7</u></strong>,<strong><u>3</u></strong>,<strong><u>4</u></strong>,7,3,4,7].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,4,1,2,5,1,2,6], k = 3\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>Modify the array from [1,2,<strong><u>4,</u></strong>1,2,<strong><u>5</u></strong>,1,2,<strong><u>6</u></strong>] to [1,2,<strong><u>3</u></strong>,1,2,<strong><u>3</u></strong>,1,2,<strong><u>3</u></strong>].</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 2000</code></li>\n\t<li><code>\u200b\u200b\u200b\u200b\u200b\u200b0 &lt;= nums[i] &lt; 2<sup>10</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 387,
            "dislikes": 21,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.9K\", \"totalSubmission\": \"12.4K\", \"totalAcceptedRaw\": 4931, \"totalSubmissionRaw\": 12429, \"acRate\": \"39.7%\"}",
            "hints": [
                "Let's note that for the XOR of all segments with size K to be equal to zeros, nums[i] has to be equal to nums[i+k]",
                "Basically, we need to make the first K elements have XOR = 0 and then modify them."
            ],
            "rephrased": {
                "body": "You are given an array `nums` and an integer `k`. The XOR of a segment `[left, right]` where `left <= right` is the XOR of all the elements with indices between `left` and `right`, inclusive: `nums[left] XOR nums[left+1] XOR ... XOR nums[right]`.  Return the minimum number of elements to change in the array such that the XOR of all segments of size `k` is equal to zero.",
                "constraints": [
                    "1 <= k <= nums.length <= 2000",
                    "0 <= nums[i] < 2<sup>10</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,0,3,0], k = 1",
                        "output": "3",
                        "explanation": "Change the array from [1,2,0,3,0] to [0,0,0,0,0]. We change 1 to 0, 2 to 0, and 3 to 0."
                    },
                    {
                        "input": "nums = [3,4,5,2,1,7,3,4,7], k = 3",
                        "output": "3",
                        "explanation": "Change the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7]. We change 5 to 7, 2 to 3, and 1 to 4."
                    },
                    {
                        "input": "nums = [1,2,4,1,2,5,1,2,6], k = 3",
                        "output": "3",
                        "explanation": "Change the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3]. We change 4 to 3, 5 to 3 and 6 to 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Let's note that for the XOR of all segments with size K to be equal to zeros, nums[i] has to be equal to nums[i+k]",
            "Basically, we need to make the first K elements have XOR = 0 and then modify them."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minChanges(vector<int>& nums, int k) {\n    constexpr int kMax = 1024;\n    const int n = nums.size();\n    // counts[i] := the counter map at i-th position\n    vector<unordered_map<int, int>> counts(k);\n    // dp[i][j] := min # of elements to change s.t. XOR(nums[i..k - 1]) is j\n    vector<vector<int>> dp(k, vector<int>(kMax, n));\n\n    for (int i = 0; i < n; ++i)\n      ++counts[i % k][nums[i]];\n\n    auto countAt = [n, k](int i) -> int { return n / k + (n % k > i ? 1 : 0); };\n\n    // Initialize the DP array.\n    for (int j = 0; j < kMax; ++j)\n      dp[k - 1][j] =\n          countAt(k - 1) - (counts[k - 1].count(j) ? counts[k - 1][j] : 0);\n\n    for (int i = k - 2; i >= 0; --i) {\n      // The worst-case scenario is changing all i-th position numbers to a\n      // non-existent value in the current bucket.\n      const int changeAll =\n          countAt(i) + *min_element(dp[i + 1].begin(), dp[i + 1].end());\n      for (int j = 0; j < kMax; ++j) {\n        dp[i][j] = changeAll;\n        for (const auto& [num, freq] : counts[i]) {\n          // cost to change every num in i-th position to `num`\n          const int cost = countAt(i) - freq;\n          dp[i][j] = min(dp[i][j], dp[i + 1][j ^ num] + cost);\n        }\n      }\n    }\n\n    return dp[0][0];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minChanges(int[] nums, int k) {\n    final int kMax = 1024;\n    final int n = nums.length;\n    // counts[i] := the counter map at i-th position\n    Map<Integer, Integer>[] counts = new Map[k];\n    // dp[i][j] := min # of elements to change s.t. XOR(nums[i..k - 1]) is j\n    int[][] dp = new int[k][kMax];\n\n    for (int i = 0; i < k; ++i)\n      counts[i] = new HashMap<>();\n\n    for (int i = 0; i < n; ++i)\n      counts[i % k].merge(nums[i], 1, Integer::sum);\n\n    Arrays.stream(dp).forEach(A -> Arrays.fill(A, n));\n\n    // Initialize the DP array.\n    for (int j = 0; j < kMax; ++j)\n      dp[k - 1][j] = countAt(n, k, k - 1) - counts[k - 1].getOrDefault(j, 0);\n\n    for (int i = k - 2; i >= 0; --i) {\n      // The worst-case scenario is changing all i-th position numbers to a\n      // non-existent value in the current bucket.\n      final int changeAll = countAt(n, k, i) + Arrays.stream(dp[i + 1]).min().getAsInt();\n      for (int j = 0; j < kMax; ++j) {\n        dp[i][j] = changeAll;\n        for (Map.Entry<Integer, Integer> entry : counts[i].entrySet()) {\n          final int num = entry.getKey();\n          final int freq = entry.getValue();\n          // cost to change every num in i-th position to `num`\n          final int cost = countAt(n, k, i) - freq;\n          dp[i][j] = Math.min(dp[i][j], dp[i + 1][j ^ num] + cost);\n        }\n      }\n    }\n\n    return dp[0][0];\n  }\n\n  private int countAt(int n, int k, int i) {\n    return n / k + (n % k > i ? 1 : 0);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minChanges(self, nums: List[int], k: int) -> int:\n    kMax = 1024\n    n = len(nums)\n    # counts[i] := the counter map at i-th position\n    counts = [collections.Counter() for _ in range(k)]\n    # dp[i][j] := min # of elements to change s.t. XOR(nums[i..k - 1]) is j\n    dp = [[n] * kMax for _ in range(k)]\n\n    for i, num in enumerate(nums):\n      counts[i % k][num] += 1\n\n    def countAt(i: int) -> int:\n      return n // k + (1 if n % k > i else 0)\n\n    # Initialize the DP array.\n    for j in range(kMax):\n      dp[k - 1][j] = countAt(k - 1) - counts[k - 1][j]\n\n    for i in range(k - 2, -1, -1):\n      # The worst-case scenario is changing all i-th position numbers to a\n      # non-existent value in the current bucket.\n      changeAll = countAt(i) + min(dp[i + 1])\n      for j in range(kMax):\n        dp[i][j] = changeAll\n        for num, freq in counts[i].items():\n          # cost to change every num in i-th position to `num`\n          cost = countAt(i) - freq\n          dp[i][j] = min(dp[i][j], dp[i + 1][j ^ num] + cost)\n\n    return dp[0][0]\n",
                "lang_text": "py"
            }
        }
    }
}