{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2937",
            "title": "Make Three Strings Equal",
            "titleSlug": "make-three-strings-equal",
            "content": "<p>You are given three strings: <code>s1</code>, <code>s2</code>, and <code>s3</code>. In one operation you can choose one of these strings and delete its <strong>rightmost</strong> character. Note that you <strong>cannot</strong> completely empty a string.</p>\n\n<p>Return the <em>minimum number of operations</em> required to make the strings equal<em>. </em>If it is impossible to make them equal, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s1 = &quot;abc&quot;, s2 = &quot;abb&quot;, s3 = &quot;ab&quot;</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">2</span></p>\n\n<p><strong>Explanation:&nbsp;</strong>Deleting the rightmost character from both <code>s1</code> and <code>s2</code> will result in three equal strings.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s1 = &quot;dac&quot;, s2 = &quot;bac&quot;, s3 = &quot;cac&quot;</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">-1</span></p>\n\n<p><strong>Explanation:</strong> Since the first letters of <code>s1</code> and <code>s2</code> differ, they cannot be made equal.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length, s3.length &lt;= 100</code></li>\n\t<li><font face=\"monospace\"><code>s1</code>,</font> <code><font face=\"monospace\">s2</font></code><font face=\"monospace\"> and</font> <code><font face=\"monospace\">s3</font></code> consist only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 288,
            "dislikes": 38,
            "similarQuestions": "[{\"title\": \"Delete Operation for Two Strings\", \"titleSlug\": \"delete-operation-for-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"26.8K\", \"totalSubmission\": \"62.7K\", \"totalAcceptedRaw\": 26837, \"totalSubmissionRaw\": 62693, \"acRate\": \"42.8%\"}",
            "hints": [
                "Calculate the length of the longest common prefix of the <code>3</code> strings."
            ],
            "rephrased": {
                "body": "Given three strings, `s1`, `s2`, and `s3`, determine the minimum number of operations required to make them equal.  In each operation, you can delete the rightmost character of any of the three strings. Note that you cannot completely empty any of the strings.",
                "constraints": [
                    "1 <= s1.length, s2.length, s3.length <= 100",
                    "s1, s2, and s3 consist only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"abc\", s2 = \"abb\", s3 = \"ab\"",
                        "output": "2",
                        "explanation": "By deleting the rightmost character from both `s1` and `s2`, all three strings become \"ab\", resulting in equality. This requires two operations."
                    },
                    {
                        "input": "s1 = \"dac\", s2 = \"bac\", s3 = \"cac\"",
                        "output": "-1",
                        "explanation": "It's impossible to make these strings equal because the first characters of `s1` and `s2` are different and no operation changes them."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "delete-operation-for-two-strings",
                "title": "Delete Operation for Two Strings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Calculate the length of the longest common prefix of the <code>3</code> strings."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findMinimumOperations(string s1, string s2, string s3) {\n    const int minLength = min({s1.length(), s2.length(), s3.length()});\n    int i = 0;\n    while (i < minLength && s1[i] == s2[i] && s2[i] == s3[i])\n      ++i;\n    return i == 0 ? -1 : s1.length() + s2.length() + s3.length() - i * 3;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findMinimumOperations(String s1, String s2, String s3) {\n    final int minLength = Math.min(s1.length(), Math.min(s2.length(), s3.length()));\n    int i = 0;\n    while (i < minLength && s1.charAt(i) == s2.charAt(i) && s2.charAt(i) == s3.charAt(i))\n      ++i;\n    return i == 0 ? -1 : s1.length() + s2.length() + s3.length() - i * 3;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMinimumOperations(self, s1: str, s2: str, s3: str) -> int:\n    minLength = min(map(len, [s1, s2, s3]))\n    i = 0\n    while i < minLength and s1[i] == s2[i] and s2[i] == s3[i]:\n      i += 1\n    return -1 if i == 0 else len(s1) + len(s2) + len(s3) - i * 3\n",
                "lang_text": "py"
            }
        }
    }
}